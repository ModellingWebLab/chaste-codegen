#
# Tests templating functionality
#
import fccodegen as cg
import logging
import os
import re


# Show more logging output
logging.getLogger().setLevel(logging.INFO)


def test_generate_weblab_model(tmp_path):
    # Tests the create_weblab_model() method

    # Select output path (in temporary dir)
    path = tmp_path / 'model.pyx'

    # Select class name
    class_name = 'TestModel'

    # Load cellml model
    model = os.path.join(
        cg.DATA_DIR, 'tests',
        'hodgkin_huxley_squid_axon_model_1952_modified.cellml'
    )
    model = cg.load_model(model)

    # Select model outputs (as oxmeta names)
    outputs = [
        'membrane_fast_sodium_current',
        'membrane_voltage',
        'time',
    ]

    # Select model parameters (as oxmeta names)
    parameters = [
        'membrane_fast_sodium_current_conductance',
        'membrane_potassium_current_conductance',
    ]

    # Create weblab model at path
    cg.create_weblab_model(path, class_name, model, outputs, parameters)

    # Read expected output from file
    expected = os.path.join(cg.DATA_DIR, 'tests', 'weblab_model.pyx')
    with open(expected, 'r') as f:
        expected = f.read()

    # Read generated output from file
    generated = path.read_text()

    # Store locally to update test output file
    if False:
        print('WRITING TEMPLATING OUTPUT TO FILE')
        with open('./weblab_model.pyx', 'w') as f:
            f.write(generated)

    # Remove line about creation date and version
    p = re.compile('# Generated by .+')
    expected = p.sub('# Generated by me', expected).strip()
    generated = p.sub('# Generated by me', generated).strip()

    # Now they should match
    assert generated == expected
