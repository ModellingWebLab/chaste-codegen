# cython: profile=True
#
#
# Web Lab model {{name}}
#
# Generated by {{generator}} on {{date}}
#
#
#
cimport fc.sundials.sundials as Sundials
cimport libc.math as math
cimport numpy as np

import fc.simulations.model as Model
import fc.utility.environment as Env
import fc.language.values as V
from fc.sundials.solver cimport CvodeSolver
from fc.utility.error_handling import ProtocolError
import numpy as np
import os
import shutil
import sys


cdef int _EvaluateRhs(Sundials.realtype var_environment__time, Sundials.N_Vector y, Sundials.N_Vector ydot, void* user_data):
    """
    Main model method: evaluates the model's RHS.
    """
    #TODO: What's this?
    model = <object>user_data
    cdef np.ndarray[Sundials.realtype, ndim=1] parameters = <np.ndarray>model.parameters

    # Unpack state variables
    {%- for state in states %}
    cdef double {{state[1]}} = (<Sundials.N_VectorContent_Serial>y.content).data[{{state[0]}}]
    {%- endfor %}

    # Mathematics
    {%- for eq in rhs_equations %}
    cdef double {{eq}}
    {%- endfor %}

    # Pack state variable derivatives
    {%- for state in states %}
    (<Sundials.N_VectorContent_Serial>ydot.content).data[{{state[0]}}] = {{state[1]}}
    {%- endfor %}


cdef class GeneratedModel_Proto_tmpHzG5bQ(CvodeSolver):
    cdef public char* freeVariableName
    cdef public double freeVariable
    cdef public object stateVarMap
    cdef public np.ndarray initialState
    cdef public object parameterMap
    cdef public np.ndarray parameters
    cdef public object outputNames

    cdef public object savedStates
    cdef public object env
    cdef public bint dirty
    cdef public char* outputPath
    cdef public object indentLevel

    cdef public object _module
    cdef public object simEnv

    cdef Sundials.N_Vector _parameters
    cdef public object _outputs

    def __init__(self):
        self.freeVariableName = "time"
        self.freeVariable = 0.0
        self.state = np.zeros(2)
        self.stateVarMap = {}
        self.initialState = np.zeros(2)
        self.initialState[0] = 0 # (c,rapid_time_dependent_potassium_current_Xr1_gate__Xr1) dimensionless
        self.initialState[1] = 1 # (c,rapid_time_dependent_potassium_current_Xr2_gate__Xr2) dimensionless

        self.parameterMap = {}
        self.parameters = np.zeros(4)
        self.parameterMap["cytosolic_potassium_concentration"] = 0
        self.parameters[0] = 138.3 # (c,potassium_dynamics__K_i) millimolar
        self.parameterMap["cytosolic_sodium_concentration"] = 1
        self.parameters[1] = 11.6 # (c,sodium_dynamics__Na_i) millimolar
        self.parameterMap["extracellular_potassium_concentration"] = 2
        self.parameters[2] = 5.4 # (c,potassium_dynamics__K_o) millimolar
        self.parameterMap["membrane_voltage"] = 3
        self.parameters[3] = 0.0 # (c,membrane__V) millivolt

        self.outputNames = []
        outputs = self._outputs = []
        self.outputNames.append("cytosolic_potassium_concentration")
        outputs.append(np.array(0.0))
        self.outputNames.append("cytosolic_sodium_concentration")
        outputs.append(np.array(0.0))
        self.outputNames.append("extracellular_potassium_concentration")
        outputs.append(np.array(0.0))
        self.outputNames.append("membrane_rapid_delayed_rectifier_potassium_current")
        outputs.append(np.array(0.0))
        self.outputNames.append("membrane_voltage")
        outputs.append(np.array(0.0))
        self.outputNames.append("time")
        outputs.append(np.array(0.0))

        self.state = self.initialState.copy()
        self.savedStates = {}
        self.dirty = False
        self.indentLevel = 0
        self.AssociateWithModel(self)
        self._parameters = Sundials.N_VMake_Serial(len(self.parameters), <Sundials.realtype*>(<np.ndarray>self.parameters).data)
        self.env = Env.ModelWrapperEnvironment(self)

    def SetRhsWrapper(self):
        flag = Sundials.CVodeInit(self.cvode_mem, _EvaluateRhs, 0.0, self._state)
        self.CheckFlag(flag, "CVodeInit")

    def __dealloc__(self):
        if self._parameters != NULL:
            Sundials.N_VDestroy_Serial(self._parameters)

    def SetOutputFolder(self, path):
        if os.path.isdir(path) and path.startswith('/tmp'):
            shutil.rmtree(path)
        os.mkdir(path)
        self.outputPath = path

    def SetIndentLevel(self, indentLevel):
        self.indentLevel = indentLevel

    def SetSolver(self, solver):
        print >>sys.stderr, "  " * self.indentLevel, "SetSolver: Models implemented using Cython contain a built-in ODE solver, so ignoring setting."

    def GetEnvironmentMap(self):
        return {'pycml': self.env, 'cmeta': self.env, 'cg': self.env, 'csub': self.env, 'cs': self.env, 'oxmeta': self.env, 'lut': self.env, 'proto': self.env, 'None': self.env, 'bqs': self.env, 'pe': self.env, 'dcterms': self.env, 'xml': self.env, 'dc': self.env, 'bqbiol': self.env, 'cml': self.env, 'solver': self.env, 'doc': self.env, 'm': self.env, 'rdf': self.env, 'cellml': self.env, 'vCard': self.env}

    cpdef SetFreeVariable(self, double t):
        self.freeVariable = t
        CvodeSolver.SetFreeVariable(self, t)

    def SaveState(self, name):
        self.savedStates[name] = self.state.copy()

    cpdef ResetState(self, name=None):
        if name is None:
            CvodeSolver.ResetSolver(self, self.initialState)
        else:
            CvodeSolver.ResetSolver(self, self.savedStates[name])

    cpdef GetOutputs(self):
        cdef np.ndarray[Sundials.realtype, ndim=1] parameters = self.parameters
        cdef double var_environment__time = self.freeVariable
        # State variables
        cdef double var_rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = self.state[0]
        cdef double var_rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = self.state[1]

        # Mathematics computing outputs of interest
        cdef double var_reversal_potentials__E_K = 26.713760659695648 * math.log(parameters[2] / parameters[0]) # millivolt
        cdef double var_rapid_time_dependent_potassium_current__g_Kr = 0.096000000000000002 # nanoS_per_picoF
        cdef double var_protocol__rapid_time_dependent_potassium_current__i_Kr = (var_rapid_time_dependent_potassium_current__g_Kr * math.sqrt(parameters[2] * 0.18518518518518517) * var_rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_rapid_time_dependent_potassium_current_Xr2_gate__Xr2 * (parameters[3] - var_reversal_potentials__E_K)) * 1.0 # uA_per_cm2

        outputs = self._outputs
        outputs[0][()] = parameters[0]
        outputs[1][()] = parameters[1]
        outputs[2][()] = parameters[2]
        outputs[3][()] = var_protocol__rapid_time_dependent_potassium_current__i_Kr
        outputs[4][()] = parameters[3]
        outputs[5][()] = var_environment__time
        return outputs

