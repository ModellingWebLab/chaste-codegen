//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: hund_rudy_2004
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on Wed Sep 11 11:16:24 2019
//! 
//! <autogenerated>

#include "hund_rudy_2004_a.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Dynamichund_rudy_2004_aFromCellML::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_offset = 0.0; // millisecond
        const double var_chaste_interface__cell__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_cell__stim_amplitude =  -15.0; // uA_per_uF
        const double var_chaste_interface__cell__stim_amplitude_converter = var_cell__stim_amplitude; // uA_per_uF
        const double var_chaste_interface__cell__stim_amplitude = var_chaste_interface__cell__stim_amplitude_converter * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double Dynamichund_rudy_2004_aFromCellML::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    
    Dynamichund_rudy_2004_aFromCellML::Dynamichund_rudy_2004_aFromCellML(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                29,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamichund_rudy_2004_aFromCellML>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
    }
    
    Dynamichund_rudy_2004_aFromCellML::~Dynamichund_rudy_2004_aFromCellML()
    {
    }
    
    double Dynamichund_rudy_2004_aFromCellML::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: millimolar; Initial value: 0.00012131666
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.987317750543
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.991924983076
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 0.00000164013
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.00000724074
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.019883138161
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.019890650554
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.013970786703
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.99996472752
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.829206149767
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.000816605172
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.26130711759
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 135.469546216758
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 15.59207157178
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        
        const double var_Environment__F = 96485.0; // C_per_mole
        const double var_Environment__K_o = 5.4000000000000004; // mM
        const double var_Environment__Ca_o = 1.8; // mM
        const double var_Environment__Na_o = 140.0; // mM
        const double var_Environment__Cl_o = 100.0; // mM
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_Environment__tissue = 0.0; // dimensionless
        const double var_INa__G_Na_mult = 1.0; // dimensionless
        const double var_INa__tissue = var_Environment__tissue; // dimensionless
        const double var_INa__GNa = (var_INa__tissue == 0.0) ? 8.25 : (4.0 * 8.25); // mS_per_uF
        const double var_INa__m = var_chaste_interface__INa__m; // dimensionless
        const double var_INa__J = var_chaste_interface__INa__J; // dimensionless
        const double var_INa__H = var_chaste_interface__INa__H; // dimensionless
        const double var_INa__gNa = var_INa__GNa * var_INa__m * var_INa__m * var_INa__m * var_INa__H * var_INa__J; // mS_per_uF
        const double var_reversal_potentials__Na_o = var_Environment__Na_o; // mM
        const double var_reversal_potentials__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_reversal_potentials__FonRT = var_Environment__FonRT; // per_mV
        const double var_reversal_potentials__ENa = log(var_reversal_potentials__Na_o / var_reversal_potentials__Na_i) / var_reversal_potentials__FonRT; // mV
        const double var_INa__ENa = var_reversal_potentials__ENa; // mV
        const double var_INa__V = var_chaste_interface__cell__V; // mV
        const double var_INa__INa = var_INa__G_Na_mult * var_INa__gNa * (var_INa__V - var_INa__ENa); // uA_per_uF
        const double var_cell__INa = var_INa__INa; // uA_per_uF
        const double var_ICaL__f2 = var_chaste_interface__ICaL__f2; // dimensionless
        const double var_ICaL__fca2 = var_chaste_interface__ICaL__fca2; // dimensionless
        const double var_ICaL__tissue = var_Environment__tissue; // dimensionless
        const double var_ICaL__d = var_chaste_interface__ICaL__d; // dimensionless
        const double var_ICaL__Ca_o = var_Environment__Ca_o; // mM
        const double var_ICaL__V = var_chaste_interface__cell__V; // mV
        const double var_ICaL__G_CaL_mult = 1.0; // dimensionless
        const double var_ICaL__FonRT = var_Environment__FonRT; // per_mV
        const double var_ICaL__F = var_Environment__F; // C_per_mole
        const double var_ICaL__gacao = 0.34100000000000003; // dimensionless
        const double var_ICaL__gacai = 1.0; // dimensionless
        const double var_ICaL__pca = 0.000243; // L_per_F_ms
        const double var_ICaL__Ca_ss = var_chaste_interface__Ca__Ca_ss; // mM
        const double var_ICaL__ibarca = (var_ICaL__G_CaL_mult * var_ICaL__pca * 4.0 * (var_ICaL__V - 15.0) * var_ICaL__F * var_ICaL__FonRT * ((var_ICaL__gacai * var_ICaL__Ca_ss * exp(2.0 * (var_ICaL__V - 15.0) * var_ICaL__FonRT)) - (var_ICaL__gacao * var_ICaL__Ca_o))) / (exp(2.0 * (var_ICaL__V - 15.0) * var_ICaL__FonRT) - 1.0); // uA_per_uF
        const double var_ICaL__f = var_chaste_interface__ICaL__f; // dimensionless
        const double var_ICaL__fca = var_chaste_interface__ICaL__fca; // dimensionless
        const double var_ICaL__dp = var_chaste_interface__ICaL__dp; // dimensionless
        const double var_ICaL__ICaL = (var_ICaL__tissue == 0.0) ? (pow(var_ICaL__d, var_ICaL__dp) * var_ICaL__f * var_ICaL__f2 * var_ICaL__fca * var_ICaL__fca2 * var_ICaL__ibarca) : (var_ICaL__d * var_ICaL__f * var_ICaL__f2 * var_ICaL__fca * var_ICaL__fca2 * var_ICaL__ibarca); // uA_per_uF
        const double var_cell__ICaL = var_ICaL__ICaL; // uA_per_uF
        const double var_reversal_potentials__K_i = var_chaste_interface__K__K_i; // mM
        const double var_reversal_potentials__K_o = var_Environment__K_o; // mM
        const double var_reversal_potentials__EK = log(var_reversal_potentials__K_o / var_reversal_potentials__K_i) / var_reversal_potentials__FonRT; // mV
        const double var_IK1__EK = var_reversal_potentials__EK; // mV
        const double var_IK1__V = var_chaste_interface__cell__V; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_IK1__V - var_IK1__EK) - 59.215000000000003))); // per_ms
        const double var_IK1__bk1 = ((0.49124000000000001 * exp(0.080320000000000003 * ((var_IK1__V - var_IK1__EK) + 5.476))) + (1.0 * exp(0.061749999999999999 * ((var_IK1__V - var_IK1__EK) - 594.30999999999995)))) / (1.0 + exp((-0.51429999999999998) * ((var_IK1__V - var_IK1__EK) + 4.7530000000000001))); // per_ms
        const double var_IK1__K_o = var_Environment__K_o; // mM
        const double var_IK1__IK1 = ((0.5 * sqrt(var_IK1__K_o / 5.4000000000000004) * var_IK1__ak1) / (var_IK1__ak1 + var_IK1__bk1)) * (var_IK1__V - var_IK1__EK); // uA_per_uF
        const double var_cell__IK1 = var_IK1__IK1; // uA_per_uF
        const double var_IKp__EK = var_reversal_potentials__EK; // mV
        const double var_IKp__V = var_chaste_interface__cell__V; // mV
        const double var_IKp__IKp = (0.0027599999999999999 * (var_IKp__V - var_IKp__EK)) / (1.0 + exp((7.4880000000000004 - var_IKp__V) / 5.9800000000000004)); // uA_per_uF
        const double var_cell__IKp = var_IKp__IKp; // uA_per_uF
        const double var_IKs__xs2 = var_chaste_interface__IKs__xs2; // dimensionless
        const double var_IKs__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_IKs__gks = 0.024897499999999999 * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_IKs__Ca_i, 1.3999999999999999)))); // mS_per_uF
        const double var_IKs__xs1 = var_chaste_interface__IKs__xs1; // dimensionless
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((var_reversal_potentials__K_o + (var_reversal_potentials__prnak * var_reversal_potentials__Na_o)) / (var_reversal_potentials__K_i + (var_reversal_potentials__prnak * var_reversal_potentials__Na_i))) / var_reversal_potentials__FonRT; // mV
        const double var_IKs__EKs = var_reversal_potentials__EKs; // mV
        const double var_IKs__V = var_chaste_interface__cell__V; // mV
        const double var_IKs__IKs = var_IKs__gks * var_IKs__xs1 * var_IKs__xs2 * (var_IKs__V - var_IKs__EKs); // uA_per_uF
        const double var_cell__IKs = var_IKs__IKs; // uA_per_uF
        const double var_IKr__G_Kr_mult = 1.0; // dimensionless
        const double var_IKr__K_o = var_Environment__K_o; // mM
        const double var_IKr__gkr = 0.013854200000000001 * sqrt(var_IKr__K_o / 5.4000000000000004); // mS_per_uF
        const double var_IKr__EK = var_reversal_potentials__EK; // mV
        const double var_IKr__V = var_chaste_interface__cell__V; // mV
        const double var_IKr__r = 1.0 / (1.0 + exp((var_IKr__V + 10.0) / 15.4)); // dimensionless
        const double var_IKr__xr = var_chaste_interface__IKr__xr; // dimensionless
        const double var_IKr__IKr = var_IKr__G_Kr_mult * var_IKr__gkr * var_IKr__xr * var_IKr__r * (var_IKr__V - var_IKr__EK); // uA_per_uF
        const double var_cell__IKr = var_IKr__IKr; // uA_per_uF
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__ibarpca = 0.057500000000000002; // uA_per_uF
        const double var_IpCa__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_IpCa__IpCa = (var_IpCa__ibarpca * var_IpCa__Ca_i) / (var_IpCa__kmpca + var_IpCa__Ca_i); // uA_per_uF
        const double var_cell__IpCa = var_IpCa__IpCa; // uA_per_uF
        const double var_ICab__F = var_Environment__F; // C_per_mole
        const double var_ICab__FonRT = var_Environment__FonRT; // per_mV
        const double var_ICab__Ca_o = var_Environment__Ca_o; // mM
        const double var_ICab__V = var_chaste_interface__cell__V; // mV
        const double var_ICab__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_ICab__ICab = (1.9950840000000001e-07 * 4.0 * var_ICab__V * var_ICab__F * var_ICab__FonRT * ((var_ICab__Ca_i * exp(2.0 * var_ICab__V * var_ICab__FonRT)) - (0.34100000000000003 * var_ICab__Ca_o))) / (exp(2.0 * var_ICab__V * var_ICab__FonRT) - 1.0); // uA_per_uF
        const double var_cell__ICab = var_ICab__ICab; // uA_per_uF
        const double var_INaCa__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_INaCa__Ca_i; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__Ca_o = var_Environment__Ca_o; // mM
        const double var_INaCa__denom2 = (var_INaCa__KmCao * pow(var_INaCa__Na_i, 3.0)) + (pow(var_INaCa__KmNao, 3.0) * var_INaCa__ca_i_NaCa) + (pow(var_INaCa__KmNai, 3.0) * var_INaCa__Ca_o * (1.0 + (var_INaCa__ca_i_NaCa / var_INaCa__KmCai))); // mM4
        const double var_INaCa__NCXmax = 4.5; // uA_per_uF
        const double var_INaCa__Na_o = var_Environment__Na_o; // mM
        const double var_INaCa__V = var_chaste_interface__cell__V; // mV
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__FonRT = var_Environment__FonRT; // per_mV
        const double var_INaCa__num = (pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o * exp(var_INaCa__eta * var_INaCa__V * var_INaCa__FonRT)) - (pow(var_INaCa__Na_o, 3.0) * var_INaCa__ca_i_NaCa * exp((var_INaCa__eta - 1.0) * var_INaCa__V * var_INaCa__FonRT)); // mM4
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INaCa__denom1 = 1.0 + (var_INaCa__ksat * exp((var_INaCa__eta - 1.0) * var_INaCa__V * var_INaCa__FonRT)); // dimensionless
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__allo = 1.0 / (1.0 + pow(var_INaCa__KmCa / var_INaCa__ca_i_NaCa, 2.0)); // dimensionless
        const double var_INaCa__denom3 = (var_INaCa__KmCai * pow(var_INaCa__Na_o, 3.0) * (1.0 + pow(var_INaCa__Na_i / var_INaCa__KmNai, 3.0))) + (pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o) + (pow(var_INaCa__Na_o, 3.0) * var_INaCa__ca_i_NaCa); // mM4
        const double var_INaCa__INaCa = (var_INaCa__NCXmax * var_INaCa__allo * var_INaCa__num) / (var_INaCa__denom1 * (var_INaCa__denom2 + var_INaCa__denom3)); // uA_per_uF
        const double var_cell__INaCa = var_INaCa__INaCa; // uA_per_uF
        const double var_INaK__V = var_chaste_interface__cell__V; // mV
        const double var_INaK__FonRT = var_Environment__FonRT; // per_mV
        const double var_INaK__Na_o = var_Environment__Na_o; // mM
        const double var_INaK__sigma = (exp(var_INaK__Na_o / 67.299999999999997) - 1.0) / 7.0; // dimensionless
        const double var_INaK__fnak = 1.0 / (1.0 + (0.1245 * exp((-0.10000000000000001) * var_INaK__V * var_INaK__FonRT)) + (0.036499999999999998 * var_INaK__sigma * exp((-var_INaK__V) * var_INaK__FonRT))); // dimensionless
        const double var_INaK__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__ibarnak = 0.61875000000000002; // uA_per_uF
        const double var_INaK__K_o = var_Environment__K_o; // mM
        const double var_INaK__INaK = (((var_INaK__ibarnak * var_INaK__fnak * 1.0) / (1.0 + pow(var_INaK__kmnai / var_INaK__Na_i, 2.0))) * var_INaK__K_o) / (var_INaK__K_o + var_INaK__kmko); // uA_per_uF
        const double var_cell__INaK = var_INaK__INaK; // uA_per_uF
        const double var_Ito__gitodv = 0.19; // mS_per_uF
        const double var_Ito__EK = var_reversal_potentials__EK; // mV
        const double var_Ito__zdv = var_chaste_interface__Ito__zdv; // dimensionless
        const double var_Ito__V = var_chaste_interface__cell__V; // mV
        const double var_Ito__rv = exp(var_Ito__V / 300.0); // dimensionless
        const double var_Ito__ydv2 = var_chaste_interface__Ito__ydv2; // dimensionless
        const double var_Ito__ydv = var_chaste_interface__Ito__ydv; // dimensionless
        const double var_Ito__Ito = var_Ito__gitodv * pow(var_Ito__ydv, 3.0) * var_Ito__ydv2 * var_Ito__zdv * var_Ito__rv * (var_Ito__V - var_Ito__EK); // uA_per_uF
        const double var_cell__Ito = var_Ito__Ito; // uA_per_uF
        const double var_Ito2__AA = var_chaste_interface__Ito2__AA; // dimensionless
        const double var_Ito2__F = var_Environment__F; // C_per_mole
        const double var_Ito2__Cl_i = var_chaste_interface__Cl__Cl_i; // mM
        const double var_Ito2__FonRT = var_Environment__FonRT; // per_mV
        const double var_Ito2__Cl_o = var_Environment__Cl_o; // mM
        const double var_Ito2__PCl = 3.9999999999999998e-07; // L_per_F_ms
        const double var_Ito2__V = var_chaste_interface__cell__V; // mV
        const double var_Ito2__Ito2_max = (var_Ito2__PCl * var_Ito2__V * var_Ito2__F * var_Ito2__FonRT * (var_Ito2__Cl_i - (var_Ito2__Cl_o * exp(var_Ito2__V * var_Ito2__FonRT)))) / (1.0 - exp(var_Ito2__V * var_Ito2__FonRT)); // uA_per_uF
        const double var_Ito2__Ito2 = var_Ito2__Ito2_max * var_Ito2__AA; // uA_per_uF
        const double var_cell__Ito2 = var_Ito2__Ito2; // uA_per_uF
        const double var_IClb__V = var_chaste_interface__cell__V; // mV
        const double var_IClb__GClb = 0.00022499999999999999; // mS_per_uF
        const double var_reversal_potentials__Cl_i = var_chaste_interface__Cl__Cl_i; // mM
        const double var_reversal_potentials__Cl_o = var_Environment__Cl_o; // mM
        const double var_reversal_potentials__ECl = (-log(var_reversal_potentials__Cl_o / var_reversal_potentials__Cl_i)) / var_reversal_potentials__FonRT; // mV
        const double var_IClb__ECl = var_reversal_potentials__ECl; // mV
        const double var_IClb__IClb = var_IClb__GClb * (var_IClb__V - var_IClb__ECl); // uA_per_uF
        const double var_cell__IClb = var_IClb__IClb; // uA_per_uF
        const double var_INal__V = var_chaste_interface__cell__V; // mV
        const double var_INal__ENa = var_reversal_potentials__ENa; // mV
        const double var_INal__hL = var_chaste_interface__INal__hL; // dimensionless
        const double var_INal__mL = var_chaste_interface__INal__mL; // dimensionless
        const double var_INal__GNaL = 0.0064999999999999997; // mS_per_uF
        const double var_INal__INal = var_INal__GNaL * pow(var_INal__mL, 3.0) * var_INal__hL * (var_INal__V - var_INal__ENa); // uA_per_uF
        const double var_cell__INal = var_INal__INal; // uA_per_uF
        const double var_cell__caiont = (var_cell__ICaL + var_cell__ICab + var_cell__IpCa) - (2.0 * var_cell__INaCa); // uA_per_uF
        const double var_cell__naiont = var_cell__INa + (3.0 * var_cell__INaCa) + (3.0 * var_cell__INaK) + var_cell__INal; // uA_per_uF
        const double var_cell__chaste_interface__chaste_membrane_capacitance = HeartConfig::Instance()->GetCapacitance(); // uF_per_cm2
        const double var_chaste_interface__cell__i_Stim = 0.0;
        const double var_cell__i_Stim_converter = var_chaste_interface__cell__i_Stim; // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converter / var_cell__chaste_interface__chaste_membrane_capacitance; // uA_per_uF
        const double var_cell__kiont = ((var_cell__IKr + var_cell__IKs + var_cell__IK1 + var_cell__IKp) - (2.0 * var_cell__INaK)) + var_cell__Ito + (0.5 * var_cell__i_Stim); // uA_per_uF
        const double var_cell__clont = var_cell__IClb + var_cell__Ito2 + (0.5 * var_cell__i_Stim); // uA_per_uF
        const double var_chaste_interface__cell__kiont = var_cell__kiont; // uA_per_uF
        const double var_chaste_interface__cell__clont = var_cell__clont; // uA_per_uF
        const double var_chaste_interface__cell__caiont = var_cell__caiont; // uA_per_uF
        const double var_chaste_interface__cell__naiont = var_cell__naiont; // uA_per_uF
        const double var_chaste_interface__i_ionic = (var_chaste_interface__cell__naiont + var_chaste_interface__cell__kiont + var_chaste_interface__cell__caiont + var_chaste_interface__cell__clont) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamichund_rudy_2004_aFromCellML::EvaluateYDerivatives(double var_chaste_interface__Environment__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: millimolar; Initial value: 0.00012131666
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.987317750543
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.991924983076
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 0.00000164013
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.00000724074
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.019883138161
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.019890650554
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.013970786703
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.99996472752
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.829206149767
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.000816605172
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.26130711759
        double var_chaste_interface__Irel__CaMKtrap = rY[20];
        // Units: dimensionless; Initial value: 0.021123704774
        double var_chaste_interface__Irel__ro = rY[21];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__Irel__ri = rY[22];
        // Units: dimensionless; Initial value: 0.862666650318
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 135.469546216758
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 15.59207157178
        double var_chaste_interface__Ca__Ca_jsr = rY[26];
        // Units: mM; Initial value: 1.737580994071
        double var_chaste_interface__Ca__Ca_nsr = rY[27];
        // Units: mM; Initial value: 1.832822335168
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        
        
        // Mathematics
        double d_dt_chaste_interface__cell__V;
        const double var_Environment__F = 96485.0; // C_per_mole
        const double var_Environment__K_o = 5.4000000000000004; // mM
        const double var_Environment__Ca_o = 1.8; // mM
        const double var_Environment__Na_o = 140.0; // mM
        const double var_Environment__Cl_o = 100.0; // mM
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_Environment__tissue = 0.0; // dimensionless
        const double var_cell__F = var_Environment__F; // C_per_mole
        const double var_INa__G_Na_mult = 1.0; // dimensionless
        const double var_INa__tissue = var_Environment__tissue; // dimensionless
        const double var_INa__GNa = (var_INa__tissue == 0.0) ? 8.25 : (4.0 * 8.25); // mS_per_uF
        const double var_INa__m = var_chaste_interface__INa__m; // dimensionless
        const double var_INa__J = var_chaste_interface__INa__J; // dimensionless
        const double var_INa__H = var_chaste_interface__INa__H; // dimensionless
        const double var_INa__gNa = var_INa__GNa * var_INa__m * var_INa__m * var_INa__m * var_INa__H * var_INa__J; // mS_per_uF
        const double var_reversal_potentials__Na_o = var_Environment__Na_o; // mM
        const double var_reversal_potentials__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_reversal_potentials__FonRT = var_Environment__FonRT; // per_mV
        const double var_reversal_potentials__ENa = log(var_reversal_potentials__Na_o / var_reversal_potentials__Na_i) / var_reversal_potentials__FonRT; // mV
        const double var_INa__ENa = var_reversal_potentials__ENa; // mV
        const double var_INa__V = var_chaste_interface__cell__V; // mV
        const double var_INa__INa = var_INa__G_Na_mult * var_INa__gNa * (var_INa__V - var_INa__ENa); // uA_per_uF
        const double var_cell__INa = var_INa__INa; // uA_per_uF
        const double var_ICaL__f2 = var_chaste_interface__ICaL__f2; // dimensionless
        const double var_ICaL__fca2 = var_chaste_interface__ICaL__fca2; // dimensionless
        const double var_ICaL__tissue = var_Environment__tissue; // dimensionless
        const double var_ICaL__d = var_chaste_interface__ICaL__d; // dimensionless
        const double var_ICaL__Ca_o = var_Environment__Ca_o; // mM
        const double var_ICaL__V = var_chaste_interface__cell__V; // mV
        const double var_ICaL__G_CaL_mult = 1.0; // dimensionless
        const double var_ICaL__FonRT = var_Environment__FonRT; // per_mV
        const double var_ICaL__F = var_Environment__F; // C_per_mole
        const double var_ICaL__gacao = 0.34100000000000003; // dimensionless
        const double var_ICaL__gacai = 1.0; // dimensionless
        const double var_ICaL__pca = 0.000243; // L_per_F_ms
        const double var_ICaL__Ca_ss = var_chaste_interface__Ca__Ca_ss; // mM
        const double var_ICaL__ibarca = (var_ICaL__G_CaL_mult * var_ICaL__pca * 4.0 * (var_ICaL__V - 15.0) * var_ICaL__F * var_ICaL__FonRT * ((var_ICaL__gacai * var_ICaL__Ca_ss * exp(2.0 * (var_ICaL__V - 15.0) * var_ICaL__FonRT)) - (var_ICaL__gacao * var_ICaL__Ca_o))) / (exp(2.0 * (var_ICaL__V - 15.0) * var_ICaL__FonRT) - 1.0); // uA_per_uF
        const double var_ICaL__f = var_chaste_interface__ICaL__f; // dimensionless
        const double var_ICaL__fca = var_chaste_interface__ICaL__fca; // dimensionless
        const double var_ICaL__dp = var_chaste_interface__ICaL__dp; // dimensionless
        const double var_ICaL__ICaL = (var_ICaL__tissue == 0.0) ? (pow(var_ICaL__d, var_ICaL__dp) * var_ICaL__f * var_ICaL__f2 * var_ICaL__fca * var_ICaL__fca2 * var_ICaL__ibarca) : (var_ICaL__d * var_ICaL__f * var_ICaL__f2 * var_ICaL__fca * var_ICaL__fca2 * var_ICaL__ibarca); // uA_per_uF
        const double var_reversal_potentials__K_i = var_chaste_interface__K__K_i; // mM
        const double var_reversal_potentials__K_o = var_Environment__K_o; // mM
        const double var_reversal_potentials__EK = log(var_reversal_potentials__K_o / var_reversal_potentials__K_i) / var_reversal_potentials__FonRT; // mV
        const double var_IK1__EK = var_reversal_potentials__EK; // mV
        const double var_IK1__V = var_chaste_interface__cell__V; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_IK1__V - var_IK1__EK) - 59.215000000000003))); // per_ms
        const double var_IK1__bk1 = ((0.49124000000000001 * exp(0.080320000000000003 * ((var_IK1__V - var_IK1__EK) + 5.476))) + (1.0 * exp(0.061749999999999999 * ((var_IK1__V - var_IK1__EK) - 594.30999999999995)))) / (1.0 + exp((-0.51429999999999998) * ((var_IK1__V - var_IK1__EK) + 4.7530000000000001))); // per_ms
        const double var_IK1__K_o = var_Environment__K_o; // mM
        const double var_IK1__IK1 = ((0.5 * sqrt(var_IK1__K_o / 5.4000000000000004) * var_IK1__ak1) / (var_IK1__ak1 + var_IK1__bk1)) * (var_IK1__V - var_IK1__EK); // uA_per_uF
        const double var_cell__IK1 = var_IK1__IK1; // uA_per_uF
        const double var_IKp__EK = var_reversal_potentials__EK; // mV
        const double var_IKp__V = var_chaste_interface__cell__V; // mV
        const double var_IKp__IKp = (0.0027599999999999999 * (var_IKp__V - var_IKp__EK)) / (1.0 + exp((7.4880000000000004 - var_IKp__V) / 5.9800000000000004)); // uA_per_uF
        const double var_cell__IKp = var_IKp__IKp; // uA_per_uF
        const double var_IKs__xs2 = var_chaste_interface__IKs__xs2; // dimensionless
        const double var_IKs__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_IKs__gks = 0.024897499999999999 * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_IKs__Ca_i, 1.3999999999999999)))); // mS_per_uF
        const double var_IKs__xs1 = var_chaste_interface__IKs__xs1; // dimensionless
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((var_reversal_potentials__K_o + (var_reversal_potentials__prnak * var_reversal_potentials__Na_o)) / (var_reversal_potentials__K_i + (var_reversal_potentials__prnak * var_reversal_potentials__Na_i))) / var_reversal_potentials__FonRT; // mV
        const double var_IKs__EKs = var_reversal_potentials__EKs; // mV
        const double var_IKs__V = var_chaste_interface__cell__V; // mV
        const double var_IKs__IKs = var_IKs__gks * var_IKs__xs1 * var_IKs__xs2 * (var_IKs__V - var_IKs__EKs); // uA_per_uF
        const double var_cell__IKs = var_IKs__IKs; // uA_per_uF
        const double var_IKr__G_Kr_mult = 1.0; // dimensionless
        const double var_IKr__K_o = var_Environment__K_o; // mM
        const double var_IKr__gkr = 0.013854200000000001 * sqrt(var_IKr__K_o / 5.4000000000000004); // mS_per_uF
        const double var_IKr__EK = var_reversal_potentials__EK; // mV
        const double var_IKr__V = var_chaste_interface__cell__V; // mV
        const double var_IKr__r = 1.0 / (1.0 + exp((var_IKr__V + 10.0) / 15.4)); // dimensionless
        const double var_IKr__xr = var_chaste_interface__IKr__xr; // dimensionless
        const double var_IKr__IKr = var_IKr__G_Kr_mult * var_IKr__gkr * var_IKr__xr * var_IKr__r * (var_IKr__V - var_IKr__EK); // uA_per_uF
        const double var_cell__IKr = var_IKr__IKr; // uA_per_uF
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__ibarpca = 0.057500000000000002; // uA_per_uF
        const double var_IpCa__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_IpCa__IpCa = (var_IpCa__ibarpca * var_IpCa__Ca_i) / (var_IpCa__kmpca + var_IpCa__Ca_i); // uA_per_uF
        const double var_ICab__F = var_Environment__F; // C_per_mole
        const double var_ICab__FonRT = var_Environment__FonRT; // per_mV
        const double var_ICab__Ca_o = var_Environment__Ca_o; // mM
        const double var_ICab__V = var_chaste_interface__cell__V; // mV
        const double var_ICab__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_ICab__ICab = (1.9950840000000001e-07 * 4.0 * var_ICab__V * var_ICab__F * var_ICab__FonRT * ((var_ICab__Ca_i * exp(2.0 * var_ICab__V * var_ICab__FonRT)) - (0.34100000000000003 * var_ICab__Ca_o))) / (exp(2.0 * var_ICab__V * var_ICab__FonRT) - 1.0); // uA_per_uF
        const double var_INaCa__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_INaCa__Ca_i; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__Ca_o = var_Environment__Ca_o; // mM
        const double var_INaCa__denom2 = (var_INaCa__KmCao * pow(var_INaCa__Na_i, 3.0)) + (pow(var_INaCa__KmNao, 3.0) * var_INaCa__ca_i_NaCa) + (pow(var_INaCa__KmNai, 3.0) * var_INaCa__Ca_o * (1.0 + (var_INaCa__ca_i_NaCa / var_INaCa__KmCai))); // mM4
        const double var_INaCa__NCXmax = 4.5; // uA_per_uF
        const double var_INaCa__Na_o = var_Environment__Na_o; // mM
        const double var_INaCa__V = var_chaste_interface__cell__V; // mV
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__FonRT = var_Environment__FonRT; // per_mV
        const double var_INaCa__num = (pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o * exp(var_INaCa__eta * var_INaCa__V * var_INaCa__FonRT)) - (pow(var_INaCa__Na_o, 3.0) * var_INaCa__ca_i_NaCa * exp((var_INaCa__eta - 1.0) * var_INaCa__V * var_INaCa__FonRT)); // mM4
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INaCa__denom1 = 1.0 + (var_INaCa__ksat * exp((var_INaCa__eta - 1.0) * var_INaCa__V * var_INaCa__FonRT)); // dimensionless
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__allo = 1.0 / (1.0 + pow(var_INaCa__KmCa / var_INaCa__ca_i_NaCa, 2.0)); // dimensionless
        const double var_INaCa__denom3 = (var_INaCa__KmCai * pow(var_INaCa__Na_o, 3.0) * (1.0 + pow(var_INaCa__Na_i / var_INaCa__KmNai, 3.0))) + (pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o) + (pow(var_INaCa__Na_o, 3.0) * var_INaCa__ca_i_NaCa); // mM4
        const double var_INaCa__INaCa = (var_INaCa__NCXmax * var_INaCa__allo * var_INaCa__num) / (var_INaCa__denom1 * (var_INaCa__denom2 + var_INaCa__denom3)); // uA_per_uF
        const double var_cell__INaCa = var_INaCa__INaCa; // uA_per_uF
        const double var_INaK__V = var_chaste_interface__cell__V; // mV
        const double var_INaK__FonRT = var_Environment__FonRT; // per_mV
        const double var_INaK__Na_o = var_Environment__Na_o; // mM
        const double var_INaK__sigma = (exp(var_INaK__Na_o / 67.299999999999997) - 1.0) / 7.0; // dimensionless
        const double var_INaK__fnak = 1.0 / (1.0 + (0.1245 * exp((-0.10000000000000001) * var_INaK__V * var_INaK__FonRT)) + (0.036499999999999998 * var_INaK__sigma * exp((-var_INaK__V) * var_INaK__FonRT))); // dimensionless
        const double var_INaK__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__ibarnak = 0.61875000000000002; // uA_per_uF
        const double var_INaK__K_o = var_Environment__K_o; // mM
        const double var_INaK__INaK = (((var_INaK__ibarnak * var_INaK__fnak * 1.0) / (1.0 + pow(var_INaK__kmnai / var_INaK__Na_i, 2.0))) * var_INaK__K_o) / (var_INaK__K_o + var_INaK__kmko); // uA_per_uF
        const double var_cell__INaK = var_INaK__INaK; // uA_per_uF
        const double var_Ito__gitodv = 0.19; // mS_per_uF
        const double var_Ito__EK = var_reversal_potentials__EK; // mV
        const double var_Ito__zdv = var_chaste_interface__Ito__zdv; // dimensionless
        const double var_Ito__V = var_chaste_interface__cell__V; // mV
        const double var_Ito__rv = exp(var_Ito__V / 300.0); // dimensionless
        const double var_Ito__ydv2 = var_chaste_interface__Ito__ydv2; // dimensionless
        const double var_Ito__ydv = var_chaste_interface__Ito__ydv; // dimensionless
        const double var_Ito__Ito = var_Ito__gitodv * pow(var_Ito__ydv, 3.0) * var_Ito__ydv2 * var_Ito__zdv * var_Ito__rv * (var_Ito__V - var_Ito__EK); // uA_per_uF
        const double var_cell__Ito = var_Ito__Ito; // uA_per_uF
        const double var_Ito2__AA = var_chaste_interface__Ito2__AA; // dimensionless
        const double var_Ito2__F = var_Environment__F; // C_per_mole
        const double var_Ito2__Cl_i = var_chaste_interface__Cl__Cl_i; // mM
        const double var_Ito2__FonRT = var_Environment__FonRT; // per_mV
        const double var_Ito2__Cl_o = var_Environment__Cl_o; // mM
        const double var_Ito2__PCl = 3.9999999999999998e-07; // L_per_F_ms
        const double var_Ito2__V = var_chaste_interface__cell__V; // mV
        const double var_Ito2__Ito2_max = (var_Ito2__PCl * var_Ito2__V * var_Ito2__F * var_Ito2__FonRT * (var_Ito2__Cl_i - (var_Ito2__Cl_o * exp(var_Ito2__V * var_Ito2__FonRT)))) / (1.0 - exp(var_Ito2__V * var_Ito2__FonRT)); // uA_per_uF
        const double var_Ito2__Ito2 = var_Ito2__Ito2_max * var_Ito2__AA; // uA_per_uF
        const double var_cell__Ito2 = var_Ito2__Ito2; // uA_per_uF
        const double var_IClb__V = var_chaste_interface__cell__V; // mV
        const double var_IClb__GClb = 0.00022499999999999999; // mS_per_uF
        const double var_reversal_potentials__Cl_i = var_chaste_interface__Cl__Cl_i; // mM
        const double var_reversal_potentials__Cl_o = var_Environment__Cl_o; // mM
        const double var_reversal_potentials__ECl = (-log(var_reversal_potentials__Cl_o / var_reversal_potentials__Cl_i)) / var_reversal_potentials__FonRT; // mV
        const double var_IClb__ECl = var_reversal_potentials__ECl; // mV
        const double var_IClb__IClb = var_IClb__GClb * (var_IClb__V - var_IClb__ECl); // uA_per_uF
        const double var_cell__IClb = var_IClb__IClb; // uA_per_uF
        const double var_INal__V = var_chaste_interface__cell__V; // mV
        const double var_INal__ENa = var_reversal_potentials__ENa; // mV
        const double var_INal__hL = var_chaste_interface__INal__hL; // dimensionless
        const double var_INal__mL = var_chaste_interface__INal__mL; // dimensionless
        const double var_INal__GNaL = 0.0064999999999999997; // mS_per_uF
        const double var_INal__INal = var_INal__GNaL * pow(var_INal__mL, 3.0) * var_INal__hL * (var_INal__V - var_INal__ENa); // uA_per_uF
        const double var_cell__INal = var_INal__INal; // uA_per_uF
        const double var_cell__naiont = var_cell__INa + (3.0 * var_cell__INaCa) + (3.0 * var_cell__INaK) + var_cell__INal; // uA_per_uF
        const double var_cell__chaste_interface__chaste_membrane_capacitance = HeartConfig::Instance()->GetCapacitance(); // uF_per_cm2
        const double var_chaste_interface__cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time);
        const double var_cell__i_Stim_converter = var_chaste_interface__cell__i_Stim; // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converter / var_cell__chaste_interface__chaste_membrane_capacitance; // uA_per_uF
        const double var_cell__kiont = ((var_cell__IKr + var_cell__IKs + var_cell__IK1 + var_cell__IKp) - (2.0 * var_cell__INaK)) + var_cell__Ito + (0.5 * var_cell__i_Stim); // uA_per_uF
        const double var_cell__clont = var_cell__IClb + var_cell__Ito2 + (0.5 * var_cell__i_Stim); // uA_per_uF
        const double var_cell__l = 0.01; // cm
        const double var_cell__a = 0.0011000000000000001; // cm
        const double var_cell__vcell = 1000.0 * M_PI * var_cell__a * var_cell__a * var_cell__l; // uL
        const double var_cell__ageo = (2.0 * M_PI * var_cell__a * var_cell__a) + (2.0 * M_PI * var_cell__a * var_cell__l); // cm2
        const double var_cell__Acap = var_cell__ageo * 2.0; // uF
        const double var_cell__vmyo = var_cell__vcell * 0.68000000000000005; // uL
        const double var_cell__vnsr = var_cell__vcell * 0.055199999999999999; // uL
        const double var_cell__vjsr = var_cell__vcell * 0.0047999999999999996; // uL
        const double var_cell__vss = var_cell__vcell * 0.02; // uL
        const double var_cell__AF = var_cell__Acap / var_cell__F; // uF_mole_per_C
        const double var_INa__am = (0.32000000000000001 * 1.0 * (var_INa__V + 47.130000000000003)) / (1.0 - exp((-0.10000000000000001) * (var_INa__V + 47.130000000000003))); // per_ms
        const double var_INa__bm = 0.080000000000000002 * exp((-var_INa__V) / 11.0); // per_ms
        const double var_INa__ah = (var_INa__V >= (-40.0)) ? 0.0 : (0.13500000000000001 * exp((80.0 + var_INa__V) / (-6.7999999999999998))); // per_ms
        const double var_INa__bh = (var_INa__V >= (-40.0)) ? (1.0 / (0.13 * (1.0 + exp((var_INa__V + 10.66) / (-11.1))))) : ((3.5600000000000001 * exp(0.079000000000000001 * var_INa__V)) + (310000.0 * exp(0.34999999999999998 * var_INa__V))); // per_ms
        const double var_INa__aj = (var_INa__V >= (-40.0)) ? 0.0 : (((((-127140.0) * exp(0.24440000000000001 * var_INa__V)) - (3.4740000000000003e-05 * exp((-0.043909999999999998) * var_INa__V))) * 1.0 * (var_INa__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_INa__V + 79.230000000000004)))); // per_ms
        const double var_INa__bj = (var_INa__V >= (-40.0)) ? ((0.29999999999999999 * exp((-2.5349999999999999e-07) * var_INa__V)) / (1.0 + exp((-0.10000000000000001) * (var_INa__V + 32.0)))) : ((0.1212 * exp((-0.01052) * var_INa__V)) / (1.0 + exp((-0.13780000000000001) * (var_INa__V + 40.140000000000001)))); // per_ms
        const double var_INa__d_H_d_Environment__time = (var_INa__ah * (1.0 - var_INa__H)) - (var_INa__bh * var_INa__H); // 'per millisecond'
        const double var_INa__d_m_d_Environment__time = (var_INa__am * (1.0 - var_INa__m)) - (var_INa__bm * var_INa__m); // 'per millisecond'
        const double var_INa__d_J_d_Environment__time = (var_INa__aj * (1.0 - var_INa__J)) - (var_INa__bj * var_INa__J); // 'per millisecond'
        const double var_Irel__Ca_ss = var_chaste_interface__Ca__Ca_ss; // mM
        const double var_Irel__CaMKtrap = var_chaste_interface__Irel__CaMKtrap; // dimensionless
        const double var_Irel__Km = 0.0015; // mM
        const double var_Irel__CaMK0 = 0.050000000000000003; // dimensionless
        const double var_Irel__CaMKbound = (var_Irel__CaMK0 * (1.0 - var_Irel__CaMKtrap)) / (1.0 + (var_Irel__Km / var_Irel__Ca_ss)); // dimensionless
        const double var_Irel__CaMKactive = var_Irel__CaMKbound + var_Irel__CaMKtrap; // dimensionless
        const double var_ICaL__CaMKactive = var_Irel__CaMKactive; // dimensionless
        const double var_ICaL__dss = 1.0 / (1.0 + exp((-(var_ICaL__V - 4.0)) / 6.7400000000000002)); // dimensionless
        const double var_ICaL__taud = 0.58999999999999997 + ((0.80000000000000004 * exp(0.051999999999999998 * (var_ICaL__V + 13.0))) / (1.0 + exp(0.13200000000000001 * (var_ICaL__V + 13.0)))); // ms
        const double var_ICaL__fss = (0.69999999999999996 / (1.0 + exp((var_ICaL__V + 17.120000000000001) / 7.0))) + 0.29999999999999999; // dimensionless
        const double var_ICaL__f2ss = (0.77000000000000002 / (1.0 + exp((var_ICaL__V + 17.120000000000001) / 7.0))) + 0.23000000000000001; // dimensionless
        const double var_ICaL__tauf = 1.0 / ((0.24110000000000001 * exp(-pow(0.044999999999999998 * (var_ICaL__V - 9.6913999999999998), 2.0))) + 0.052900000000000003); // ms
        const double var_ICaL__tauf2 = 1.0 / ((0.042299999999999997 * exp(-pow(0.058999999999999997 * (var_ICaL__V - 18.572600000000001), 2.0))) + 0.0054000000000000003); // ms
        const double var_ICaL__dpss = 9.0 - (8.0 / (1.0 + exp((-(var_ICaL__V + 65.0)) / 3.3999999999999999))); // dimensionless
        const double var_ICaL__fcass = (0.29999999999999999 / (1.0 - (var_ICaL__ICaL / 0.050000000000000003))) + (0.55000000000000004 / (1.0 + (var_ICaL__Ca_ss / 0.0030000000000000001))) + 0.14999999999999999; // dimensionless
        const double var_ICaL__fca2ss = 1.0 / (1.0 - (var_ICaL__ICaL / 0.01)); // dimensionless
        const double var_ICaL__taufca = ((10.0 * var_ICaL__CaMKactive) / (0.14999999999999999 + var_ICaL__CaMKactive)) + (1.0 / (1.0 + (var_ICaL__Ca_ss / 0.0030000000000000001))) + 0.5; // ms
        const double var_ICaL__taufca2 = (300.0 / (1.0 + exp(((-var_ICaL__ICaL) - 0.17499999999999999) / 0.040000000000000001))) + 125.0; // ms
        const double var_ICaL__d_d_d_Environment__time = (var_ICaL__dss - var_ICaL__d) / var_ICaL__taud; // 'per millisecond'
        const double var_ICaL__d_dp_d_Environment__time = (var_ICaL__dpss - var_ICaL__dp) / 10.0; // 'per millisecond'
        const double var_ICaL__d_f_d_Environment__time = (var_ICaL__fss - var_ICaL__f) / var_ICaL__tauf; // 'per millisecond'
        const double var_ICaL__d_fca_d_Environment__time = (var_ICaL__fcass - var_ICaL__fca) / var_ICaL__taufca; // 'per millisecond'
        const double var_ICaL__d_fca2_d_Environment__time = (var_ICaL__fca2ss - var_ICaL__fca2) / var_ICaL__taufca2; // 'per millisecond'
        const double var_ICaL__d_f2_d_Environment__time = (var_ICaL__f2ss - var_ICaL__f2) / var_ICaL__tauf2; // 'per millisecond'
        const double var_IKr__xrss = 1.0 / (1.0 + exp((-(var_IKr__V + 10.085000000000001)) / 4.25)); // dimensionless
        const double var_IKr__tauxr = 1.0 / (((0.00059999999999999995 * (var_IKr__V - 1.7383999999999999)) / (1.0 - exp((-0.13600000000000001) * (var_IKr__V - 1.7383999999999999)))) + ((0.00029999999999999997 * (var_IKr__V + 38.360799999999998)) / (exp(0.1522 * (var_IKr__V + 38.360799999999998)) - 1.0))); // ms
        const double var_IKr__d_xr_d_Environment__time = (var_IKr__xrss - var_IKr__xr) / var_IKr__tauxr; // 'per millisecond'
        const double var_IKs__xss = 1.0 / (1.0 + exp((-(var_IKs__V - 10.5)) / 24.699999999999999)); // dimensionless
        const double var_IKs__tauxs = 1.0 / (((7.6100000000000007e-05 * (var_IKs__V + 44.600000000000001)) / (1.0 - exp((-9.9700000000000006) * (var_IKs__V + 44.600000000000001)))) + ((0.00036000000000000002 * (var_IKs__V - 0.55000000000000004)) / (exp(0.128 * (var_IKs__V - 0.55000000000000004)) - 1.0))); // ms
        const double var_IKs__d_xs1_d_Environment__time = (var_IKs__xss - var_IKs__xs1) / var_IKs__tauxs; // 'per millisecond'
        const double var_IKs__d_xs2_d_Environment__time = ((var_IKs__xss - var_IKs__xs2) / var_IKs__tauxs) / 2.0; // 'per millisecond'
        const double var_Ito__ay = (25.0 * exp((var_Ito__V - 40.0) / 25.0)) / (1.0 + exp((var_Ito__V - 40.0) / 25.0)); // per_ms
        const double var_Ito__by = (25.0 * exp((-(var_Ito__V + 90.0)) / 25.0)) / (1.0 + exp((-(var_Ito__V + 90.0)) / 25.0)); // per_ms
        const double var_Ito__ay2 = 0.029999999999999999 / (1.0 + exp((var_Ito__V + 60.0) / 5.0)); // per_ms
        const double var_Ito__by2 = (0.20000000000000001 * exp((var_Ito__V + 25.0) / 5.0)) / (1.0 + exp((var_Ito__V + 25.0) / 5.0)); // per_ms
        const double var_Ito__ay3 = 0.0022499999999999998 / (1.0 + exp((var_Ito__V + 60.0) / 5.0)); // per_ms
        const double var_Ito__by3 = (0.10000000000000001 * exp((var_Ito__V + 25.0) / 5.0)) / (1.0 + exp((var_Ito__V + 25.0) / 5.0)); // per_ms
        const double var_Ito__d_ydv_d_Environment__time = (var_Ito__ay * (1.0 - var_Ito__ydv)) - (var_Ito__by * var_Ito__ydv); // 'per millisecond'
        const double var_Ito__d_ydv2_d_Environment__time = (var_Ito__ay2 * (1.0 - var_Ito__ydv2)) - (var_Ito__by2 * var_Ito__ydv2); // 'per millisecond'
        const double var_Ito__d_zdv_d_Environment__time = (var_Ito__ay3 * (1.0 - var_Ito__zdv)) - (var_Ito__by3 * var_Ito__zdv); // 'per millisecond'
        const double var_Ito2__Ca_ss = var_chaste_interface__Ca__Ca_ss; // mM
        const double var_Ito2__Kmto2 = 0.1502; // mM
        const double var_Ito2__AAss = 1.0 / (1.0 + (var_Ito2__Kmto2 / var_Ito2__Ca_ss)); // dimensionless
        const double var_Ito2__d_AA_d_Environment__time = (var_Ito2__AAss - var_Ito2__AA) / 1.0; // 'per millisecond'
        const double var_INal__amL = (0.32000000000000001 * 1.0 * (var_INal__V + 47.130000000000003)) / (1.0 - exp((-0.10000000000000001) * (var_INal__V + 47.130000000000003))); // per_ms
        const double var_INal__bmL = 0.080000000000000002 * exp((-var_INal__V) / 11.0); // per_ms
        const double var_INal__hLss = 1.0 / (1.0 + exp((var_INal__V + 91.0) / 6.0999999999999996)); // dimensionless
        const double var_INal__d_mL_d_Environment__time = (var_INal__amL * (1.0 - var_INal__mL)) - (var_INal__bmL * var_INal__mL); // 'per millisecond'
        const double var_INal__d_hL_d_Environment__time = (var_INal__hLss - var_INal__hL) / 600.0; // 'per millisecond'
        const double var_Irel__tissue = var_Environment__tissue; // dimensionless
        const double var_Irel__Ca_jsr = var_chaste_interface__Ca__Ca_jsr; // mM
        const double var_Irel__ibarca = var_ICaL__ibarca; // uA_per_uF
        const double var_Irel__ICaL = var_ICaL__ICaL; // uA_per_uF
        const double var_Irel__vg = (var_Irel__tissue == 0.0) ? (1.0 / (1.0 + exp((var_Irel__ibarca + 13.0) / 5.0))) : 1.0; // dimensionless
        const double var_Irel__Grel = 3000.0 * var_Irel__vg; // per_ms
        const double var_Irel__dro_inf = pow(var_Irel__Ca_jsr, 1.8999999999999999) / (pow(var_Irel__Ca_jsr, 1.8999999999999999) + pow((49.280000000000001 * var_Irel__Ca_ss) / (var_Irel__Ca_ss + 0.0028), 1.8999999999999999)); // dimensionless
        const double var_Irel__dtau_rel_max = 10.0; // ms
        const double var_Irel__KmCaMK = 0.14999999999999999; // dimensionless
        const double var_Irel__dtau_rel = (var_Irel__dtau_rel_max * var_Irel__CaMKactive) / (var_Irel__KmCaMK + var_Irel__CaMKactive); // ms
        const double var_Irel__ross = var_Irel__dro_inf / (pow(1.0 / var_Irel__ICaL, 2.0) + 1.0); // dimensionless
        const double var_Irel__cafac = 1.0 / (1.0 + exp((var_Irel__ICaL + 0.050000000000000003) / 0.014999999999999999)); // dimensionless
        const double var_Irel__riss = 1.0 / (1.0 + exp(((var_Irel__Ca_ss - 0.00040000000000000002) + (0.002 * var_Irel__cafac)) / 2.5000000000000001e-05)); // dimensionless
        const double var_Irel__tauri = 3.0 + var_Irel__dtau_rel + ((350.0 - var_Irel__dtau_rel) / (1.0 + exp(((var_Irel__Ca_ss - 0.0030000000000000001) + (0.0030000000000000001 * var_Irel__cafac)) / 0.00020000000000000001))); // ms
        const double var_Irel__ro = var_chaste_interface__Irel__ro; // dimensionless
        const double var_Irel__ri = var_chaste_interface__Irel__ri; // dimensionless
        const double var_Irel__irelcicr = var_Irel__Grel * var_Irel__ro * var_Irel__ri * (var_Irel__Ca_jsr - var_Irel__Ca_ss); // mM_per_ms
        const double var_Irel__d_CaMKtrap_d_Environment__time = (0.050000000000000003 * var_Irel__CaMKactive * (var_Irel__CaMKactive - var_Irel__CaMKtrap)) - (0.00068000000000000005 * var_Irel__CaMKtrap); // 'per millisecond'
        const double var_Irel__d_ro_d_Environment__time = (var_Irel__ross - var_Irel__ro) / 3.0; // 'per millisecond'
        const double var_Irel__d_ri_d_Environment__time = (var_Irel__riss - var_Irel__ri) / var_Irel__tauri; // 'per millisecond'
        const double var_Iup_Ileak__dKmPLBmax = 0.00017000000000000001; // mM
        const double var_Iup_Ileak__dJupmax = 0.75; // dimensionless
        const double var_Iup_Ileak__KmCaMK = var_Irel__KmCaMK; // dimensionless
        const double var_Iup_Ileak__CaMKactive = var_Irel__CaMKactive; // dimensionless
        const double var_Iup_Ileak__dKmPLB = (var_Iup_Ileak__dKmPLBmax * var_Iup_Ileak__CaMKactive) / (var_Iup_Ileak__KmCaMK + var_Iup_Ileak__CaMKactive); // mM
        const double var_Iup_Ileak__dJup = (var_Iup_Ileak__dJupmax * var_Iup_Ileak__CaMKactive) / (var_Iup_Ileak__KmCaMK + var_Iup_Ileak__CaMKactive); // dimensionless
        const double var_Iup_Ileak__iupmax = 0.0043750000000000004; // mM_per_ms
        const double var_Iup_Ileak__Kmup = 0.00092000000000000003; // mM
        const double var_Iup_Ileak__nsrmax = 15.0; // mM
        const double var_Iup_Ileak__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_Iup_Ileak__iup = ((var_Iup_Ileak__dJup + 1.0) * var_Iup_Ileak__iupmax * var_Iup_Ileak__Ca_i) / ((var_Iup_Ileak__Ca_i + var_Iup_Ileak__Kmup) - var_Iup_Ileak__dKmPLB); // mM_per_ms
        const double var_Iup_Ileak__Ca_nsr = var_chaste_interface__Ca__Ca_nsr; // mM
        const double var_Iup_Ileak__ileak = (var_Iup_Ileak__iupmax * var_Iup_Ileak__Ca_nsr) / var_Iup_Ileak__nsrmax; // mM_per_ms
        const double var_Idiff_Itr__Ca_ss = var_chaste_interface__Ca__Ca_ss; // mM
        const double var_Idiff_Itr__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_Idiff_Itr__idiff = (var_Idiff_Itr__Ca_ss - var_Idiff_Itr__Ca_i) / 0.20000000000000001; // mM_per_ms
        const double var_Idiff_Itr__Ca_nsr = var_chaste_interface__Ca__Ca_nsr; // mM
        const double var_Idiff_Itr__Ca_jsr = var_chaste_interface__Ca__Ca_jsr; // mM
        const double var_Idiff_Itr__itr = (var_Idiff_Itr__Ca_nsr - var_Idiff_Itr__Ca_jsr) / 120.0; // mM_per_ms
        const double var_Na__naiont = var_cell__naiont; // uA_per_uF
        const double var_Na__AF = var_cell__AF; // uF_mole_per_C
        const double var_Na__vmyo = var_cell__vmyo; // uL
        const double var_Na__ECl = var_reversal_potentials__ECl; // mV
        const double var_Na__CTNaClmax = 9.8442999999999999e-06; // mM_per_ms
        const double var_Na__ENa = var_reversal_potentials__ENa; // mV
        const double var_Na__CTNaCl = (var_Na__CTNaClmax * pow(var_Na__ENa - var_Na__ECl, 4.0)) / (pow(var_Na__ENa - var_Na__ECl, 4.0) + pow(87.825100000000006, 4.0)); // mM_per_ms
        const double var_Na__d_Na_i_d_Environment__time = (((-var_Na__naiont) * var_Na__AF) / var_Na__vmyo) + var_Na__CTNaCl; // 'millimole per litre per millisecond'
        const double var_K__kiont = var_cell__kiont; // uA_per_uF
        const double var_K__AF = var_cell__AF; // uF_mole_per_C
        const double var_K__vmyo = var_cell__vmyo; // uL
        const double var_K__EK = var_reversal_potentials__EK; // mV
        const double var_K__CTKClmax = 7.0755999999999996e-06; // mM_per_ms
        const double var_K__ECl = var_reversal_potentials__ECl; // mV
        const double var_K__CTKCl = (var_K__CTKClmax * (var_K__EK - var_K__ECl)) / ((var_K__EK - var_K__ECl) + 87.825100000000006); // mM_per_ms
        const double var_K__d_K_i_d_Environment__time = (((-var_K__kiont) * var_K__AF) / var_K__vmyo) + var_K__CTKCl; // 'millimole per litre per millisecond'
        const double var_Cl__clont = var_cell__clont; // uA_per_uF
        const double var_Cl__AF = var_cell__AF; // uF_mole_per_C
        const double var_Cl__vmyo = var_cell__vmyo; // uL
        const double var_Cl__CTNaCl = var_Na__CTNaCl; // mM_per_ms
        const double var_Cl__CTKCl = var_K__CTKCl; // mM_per_ms
        const double var_Cl__d_Cl_i_d_Environment__time = ((var_Cl__clont * var_Cl__AF) / var_Cl__vmyo) + var_Cl__CTNaCl + var_Cl__CTKCl; // 'millimole per litre per millisecond'
        const double var_Ca__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_Ca__Ca_jsr = var_chaste_interface__Ca__Ca_jsr; // mM
        const double var_Ca__Ca_ss = var_chaste_interface__Ca__Ca_ss; // mM
        const double var_Ca__kmt = 0.00050000000000000001; // mM
        const double var_Ca__kmc = 0.0023800000000000002; // mM
        const double var_Ca__tbar = 0.070000000000000007; // mM
        const double var_Ca__cbar = 0.050000000000000003; // mM
        const double var_Ca__kmcsqn = 0.80000000000000004; // mM
        const double var_Ca__csqnbar = 10.0; // mM
        const double var_Ca__bcsqn = 1.0 / (1.0 + ((var_Ca__kmcsqn * var_Ca__csqnbar) / pow(var_Ca__Ca_jsr + var_Ca__kmcsqn, 2.0))); // dimensionless
        const double var_Ca__bmyo = 1.0 / (1.0 + ((var_Ca__cbar * var_Ca__kmc) / pow(var_Ca__Ca_i + var_Ca__kmc, 2.0)) + ((var_Ca__kmt * var_Ca__tbar) / pow(var_Ca__Ca_i + var_Ca__kmt, 2.0))); // dimensionless
        const double var_Ca__BSRmax = 0.047; // mM
        const double var_Ca__KmBSR = 0.00087000000000000001; // mM
        const double var_Ca__BSLmax = 1.1240000000000001; // mM
        const double var_Ca__KmBSL = 0.0086999999999999994; // mM
        const double var_Ca__bss = 1.0 / (1.0 + ((var_Ca__BSRmax * var_Ca__KmBSR) / pow(var_Ca__KmBSR + var_Ca__Ca_ss, 2.0)) + ((var_Ca__BSLmax * var_Ca__KmBSL) / pow(var_Ca__KmBSL + var_Ca__Ca_ss, 2.0))); // dimensionless
        const double var_Ca__ICab = var_ICab__ICab; // uA_per_uF
        const double var_Ca__ICaL = var_ICaL__ICaL; // uA_per_uF
        const double var_Ca__IpCa = var_IpCa__IpCa; // uA_per_uF
        const double var_Ca__INaCa = var_INaCa__INaCa; // uA_per_uF
        const double var_Ca__vmyo = var_cell__vmyo; // uL
        const double var_Ca__vnsr = var_cell__vnsr; // uL
        const double var_Ca__vjsr = var_cell__vjsr; // uL
        const double var_Ca__vss = var_cell__vss; // uL
        const double var_Ca__AF = var_cell__AF; // uF_mole_per_C
        const double var_Ca__iup = var_Iup_Ileak__iup; // mM_per_ms
        const double var_Ca__ileak = var_Iup_Ileak__ileak; // mM_per_ms
        const double var_Ca__irelcicr = var_Irel__irelcicr; // mM_per_ms
        const double var_Ca__idiff = var_Idiff_Itr__idiff; // mM_per_ms
        const double var_Ca__itr = var_Idiff_Itr__itr; // mM_per_ms
        const double var_Ca__d_Ca_i_d_Environment__time = var_Ca__bmyo * ((((-((var_Ca__ICab + var_Ca__IpCa) - (2.0 * var_Ca__INaCa))) * var_Ca__AF) / (var_Ca__vmyo * 2.0)) + (((var_Ca__ileak - var_Ca__iup) * var_Ca__vnsr) / var_Ca__vmyo) + ((var_Ca__idiff * var_Ca__vss) / var_Ca__vmyo)); // 'millimole per litre per millisecond'
        const double var_Ca__d_Ca_jsr_d_Environment__time = var_Ca__bcsqn * (var_Ca__itr - var_Ca__irelcicr); // 'millimole per litre per millisecond'
        const double var_Ca__d_Ca_nsr_d_Environment__time = (var_Ca__iup - ((var_Ca__itr * var_Ca__vjsr) / var_Ca__vnsr)) - var_Ca__ileak; // 'millimole per litre per millisecond'
        const double var_Ca__d_Ca_ss_d_Environment__time = var_Ca__bss * (((((-var_Ca__ICaL) * var_Ca__AF) / (var_Ca__vss * 2.0)) + ((var_Ca__irelcicr * var_Ca__vjsr) / var_Ca__vss)) - var_Ca__idiff); // 'millimole per litre per millisecond'
        const double var_chaste_interface__Ca__d_Ca_i_d_Environment__time = var_Ca__d_Ca_i_d_Environment__time; // ___units_67
        const double var_chaste_interface__INa__d_H_d_Environment__time = var_INa__d_H_d_Environment__time; // ___units_23
        const double var_chaste_interface__INa__d_m_d_Environment__time = var_INa__d_m_d_Environment__time; // ___units_23
        const double var_chaste_interface__INa__d_J_d_Environment__time = var_INa__d_J_d_Environment__time; // ___units_23
        const double var_chaste_interface__ICaL__d_d_d_Environment__time = var_ICaL__d_d_d_Environment__time; // ___units_23
        const double var_chaste_interface__ICaL__d_dp_d_Environment__time = var_ICaL__d_dp_d_Environment__time; // ___units_23
        const double var_chaste_interface__ICaL__d_f_d_Environment__time = var_ICaL__d_f_d_Environment__time; // ___units_23
        const double var_chaste_interface__ICaL__d_fca_d_Environment__time = var_ICaL__d_fca_d_Environment__time; // ___units_23
        const double var_chaste_interface__ICaL__d_fca2_d_Environment__time = var_ICaL__d_fca2_d_Environment__time; // ___units_23
        const double var_chaste_interface__ICaL__d_f2_d_Environment__time = var_ICaL__d_f2_d_Environment__time; // ___units_23
        const double var_chaste_interface__IKr__d_xr_d_Environment__time = var_IKr__d_xr_d_Environment__time; // ___units_23
        const double var_chaste_interface__IKs__d_xs1_d_Environment__time = var_IKs__d_xs1_d_Environment__time; // ___units_23
        const double var_chaste_interface__IKs__d_xs2_d_Environment__time = var_IKs__d_xs2_d_Environment__time; // ___units_23
        const double var_chaste_interface__Ito__d_ydv_d_Environment__time = var_Ito__d_ydv_d_Environment__time; // ___units_23
        const double var_chaste_interface__Ito__d_ydv2_d_Environment__time = var_Ito__d_ydv2_d_Environment__time; // ___units_23
        const double var_chaste_interface__Ito__d_zdv_d_Environment__time = var_Ito__d_zdv_d_Environment__time; // ___units_23
        const double var_chaste_interface__Ito2__d_AA_d_Environment__time = var_Ito2__d_AA_d_Environment__time; // ___units_23
        const double var_chaste_interface__INal__d_mL_d_Environment__time = var_INal__d_mL_d_Environment__time; // ___units_23
        const double var_chaste_interface__INal__d_hL_d_Environment__time = var_INal__d_hL_d_Environment__time; // ___units_23
        const double var_chaste_interface__Irel__d_CaMKtrap_d_Environment__time = var_Irel__d_CaMKtrap_d_Environment__time; // ___units_23
        const double var_chaste_interface__Irel__d_ro_d_Environment__time = var_Irel__d_ro_d_Environment__time; // ___units_23
        const double var_chaste_interface__Irel__d_ri_d_Environment__time = var_Irel__d_ri_d_Environment__time; // ___units_23
        const double var_chaste_interface__Na__d_Na_i_d_Environment__time = var_Na__d_Na_i_d_Environment__time; // ___units_69
        const double var_chaste_interface__K__d_K_i_d_Environment__time = var_K__d_K_i_d_Environment__time; // ___units_69
        const double var_chaste_interface__Cl__d_Cl_i_d_Environment__time = var_Cl__d_Cl_i_d_Environment__time; // ___units_69
        const double var_chaste_interface__Ca__d_Ca_jsr_d_Environment__time = var_Ca__d_Ca_jsr_d_Environment__time; // ___units_69
        const double var_chaste_interface__Ca__d_Ca_nsr_d_Environment__time = var_Ca__d_Ca_nsr_d_Environment__time; // ___units_69
        const double var_chaste_interface__Ca__d_Ca_ss_d_Environment__time = var_Ca__d_Ca_ss_d_Environment__time; // ___units_69
        const double d_dt_chaste_interface__Ca__Ca_i = var_chaste_interface__Ca__d_Ca_i_d_Environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__INa__H = var_chaste_interface__INa__d_H_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__INa__m = var_chaste_interface__INa__d_m_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__INa__J = var_chaste_interface__INa__d_J_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__d = var_chaste_interface__ICaL__d_d_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__dp = var_chaste_interface__ICaL__d_dp_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__f = var_chaste_interface__ICaL__d_f_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__fca = var_chaste_interface__ICaL__d_fca_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__fca2 = var_chaste_interface__ICaL__d_fca2_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__f2 = var_chaste_interface__ICaL__d_f2_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKr__xr = var_chaste_interface__IKr__d_xr_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__xs1 = var_chaste_interface__IKs__d_xs1_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__xs2 = var_chaste_interface__IKs__d_xs2_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Ito__ydv = var_chaste_interface__Ito__d_ydv_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Ito__ydv2 = var_chaste_interface__Ito__d_ydv2_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Ito__zdv = var_chaste_interface__Ito__d_zdv_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Ito2__AA = var_chaste_interface__Ito2__d_AA_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__INal__mL = var_chaste_interface__INal__d_mL_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__INal__hL = var_chaste_interface__INal__d_hL_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Irel__CaMKtrap = var_chaste_interface__Irel__d_CaMKtrap_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Irel__ro = var_chaste_interface__Irel__d_ro_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Irel__ri = var_chaste_interface__Irel__d_ri_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Na__Na_i = var_chaste_interface__Na__d_Na_i_d_Environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__K__K_i = var_chaste_interface__K__d_K_i_d_Environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Cl__Cl_i = var_chaste_interface__Cl__d_Cl_i_d_Environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_jsr = var_chaste_interface__Ca__d_Ca_jsr_d_Environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_nsr = var_chaste_interface__Ca__d_Ca_nsr_d_Environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_ss = var_chaste_interface__Ca__d_Ca_ss_d_Environment__time; // 'millimole per litre per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__cell__V = 0.0;
        }
        else
        {
            const double var_cell__ICaL = var_ICaL__ICaL; // uA_per_uF
            const double var_cell__IpCa = var_IpCa__IpCa; // uA_per_uF
            const double var_cell__ICab = var_ICab__ICab; // uA_per_uF
            const double var_cell__caiont = (var_cell__ICaL + var_cell__ICab + var_cell__IpCa) - (2.0 * var_cell__INaCa); // uA_per_uF
            const double var_cell__d_V_d_Environment__time = -(var_cell__naiont + var_cell__kiont + var_cell__caiont + var_cell__clont); // 'millivolt per millisecond'
            const double var_chaste_interface__cell__d_V_d_Environment__time = var_cell__d_V_d_Environment__time; // ___units_13
            d_dt_chaste_interface__cell__V = var_chaste_interface__cell__d_V_d_Environment__time; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__cell__V;
        rDY[1] = d_dt_chaste_interface__Ca__Ca_i;
        rDY[2] = d_dt_chaste_interface__INa__H;
        rDY[3] = d_dt_chaste_interface__INa__m;
        rDY[4] = d_dt_chaste_interface__INa__J;
        rDY[5] = d_dt_chaste_interface__ICaL__d;
        rDY[6] = d_dt_chaste_interface__ICaL__dp;
        rDY[7] = d_dt_chaste_interface__ICaL__f;
        rDY[8] = d_dt_chaste_interface__ICaL__fca;
        rDY[9] = d_dt_chaste_interface__ICaL__fca2;
        rDY[10] = d_dt_chaste_interface__ICaL__f2;
        rDY[11] = d_dt_chaste_interface__IKr__xr;
        rDY[12] = d_dt_chaste_interface__IKs__xs1;
        rDY[13] = d_dt_chaste_interface__IKs__xs2;
        rDY[14] = d_dt_chaste_interface__Ito__ydv;
        rDY[15] = d_dt_chaste_interface__Ito__ydv2;
        rDY[16] = d_dt_chaste_interface__Ito__zdv;
        rDY[17] = d_dt_chaste_interface__Ito2__AA;
        rDY[18] = d_dt_chaste_interface__INal__mL;
        rDY[19] = d_dt_chaste_interface__INal__hL;
        rDY[20] = d_dt_chaste_interface__Irel__CaMKtrap;
        rDY[21] = d_dt_chaste_interface__Irel__ro;
        rDY[22] = d_dt_chaste_interface__Irel__ri;
        rDY[23] = d_dt_chaste_interface__Na__Na_i;
        rDY[24] = d_dt_chaste_interface__K__K_i;
        rDY[25] = d_dt_chaste_interface__Cl__Cl_i;
        rDY[26] = d_dt_chaste_interface__Ca__Ca_jsr;
        rDY[27] = d_dt_chaste_interface__Ca__Ca_nsr;
        rDY[28] = d_dt_chaste_interface__Ca__Ca_ss;
    }
    
template<>
void OdeSystemInformation<Dynamichund_rudy_2004_aFromCellML>::Initialise(void)
{
    this->mSystemName = "hund_rudy_2004";
    this->mFreeVariableName = "Environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-85.781844107117);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00012131666);

    // rY[2]:
    this->mVariableNames.push_back("INa__H");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.987317750543);

    // rY[3]:
    this->mVariableNames.push_back("INa__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001356538159);

    // rY[4]:
    this->mVariableNames.push_back("INa__J");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.991924983076);

    // rY[5]:
    this->mVariableNames.push_back("ICaL__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00000164013);

    // rY[6]:
    this->mVariableNames.push_back("ICaL__dp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.98230672628);

    // rY[7]:
    this->mVariableNames.push_back("ICaL__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999961508634);

    // rY[8]:
    this->mVariableNames.push_back("ICaL__fca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.97836624923);

    // rY[9]:
    this->mVariableNames.push_back("ICaL__fca2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.893052931249);

    // rY[10]:
    this->mVariableNames.push_back("ICaL__f2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.992234519148);

    // rY[11]:
    this->mVariableNames.push_back("IKr__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00000724074);

    // rY[12]:
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.019883138161);

    // rY[13]:
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.019890650554);

    // rY[14]:
    this->mVariableNames.push_back("Ito__ydv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.013970786703);

    // rY[15]:
    this->mVariableNames.push_back("Ito__ydv2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99996472752);

    // rY[16]:
    this->mVariableNames.push_back("Ito__zdv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.829206149767);

    // rY[17]:
    this->mVariableNames.push_back("Ito2__AA");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000816605172);

    // rY[18]:
    this->mVariableNames.push_back("INal__mL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001356538159);

    // rY[19]:
    this->mVariableNames.push_back("INal__hL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.26130711759);

    // rY[20]:
    this->mVariableNames.push_back("Irel__CaMKtrap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.021123704774);

    // rY[21]:
    this->mVariableNames.push_back("Irel__ro");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[22]:
    this->mVariableNames.push_back("Irel__ri");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.862666650318);

    // rY[23]:
    this->mVariableNames.push_back("Na__Na_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(12.972433387269);

    // rY[24]:
    this->mVariableNames.push_back("K__K_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(135.469546216758);

    // rY[25]:
    this->mVariableNames.push_back("Cl__Cl_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(15.59207157178);

    // rY[26]:
    this->mVariableNames.push_back("Ca__Ca_jsr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(1.737580994071);

    // rY[27]:
    this->mVariableNames.push_back("Ca__Ca_nsr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(1.832822335168);

    // rY[28]:
    this->mVariableNames.push_back("Ca__Ca_ss");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00012271265);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamichund_rudy_2004_aFromCellML)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamichund_rudy_2004_aFromCellML(pSolver, pStimulus);
    }
    
}

