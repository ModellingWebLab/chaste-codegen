//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: grandi2010
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on Fri Nov 29 16:58:52 2019
//! 
//! <autogenerated>

#include "grandi2010ss.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Dynamicgrandi2010ssFromCellML::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_offset = 0.0; // millisecond
        const double var_chaste_interface__cell__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_cell__stim_amplitude =  -15.0; // uA_per_uF
        const double var_chaste_interface__cell__stim_amplitude_converter = var_cell__stim_amplitude; // uA_per_uF
        const double var_chaste_interface__cell__stim_amplitude = var_chaste_interface__cell__stim_amplitude_converter * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double Dynamicgrandi2010ssFromCellML::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[37];
    }
    
    Dynamicgrandi2010ssFromCellML::Dynamicgrandi2010ssFromCellML(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                38,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamicgrandi2010ssFromCellML>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
    }
    
    Dynamicgrandi2010ssFromCellML::~Dynamicgrandi2010ssFromCellML()
    {
    }
    
    double Dynamicgrandi2010ssFromCellML::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__sVm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -81.3842590704928
        double var_chaste_interface__cell__sm = rY[1];
        // Units: dimensionless; Initial value: 0.00384941567866232
        double var_chaste_interface__cell__sh = rY[2];
        // Units: dimensionless; Initial value: 0.623723834301669
        double var_chaste_interface__cell__sj = rY[3];
        // Units: dimensionless; Initial value: 0.622080736932815
        double var_chaste_interface__cell__sd = rY[4];
        // Units: dimensionless; Initial value: 2.95884913218079e-6
        double var_chaste_interface__cell__sf = rY[5];
        // Units: dimensionless; Initial value: 0.995094078386247
        double var_chaste_interface__cell__sfcaBj = rY[6];
        // Units: dimensionless; Initial value: 0.0246274349529557
        double var_chaste_interface__cell__sfcaBsl = rY[7];
        // Units: dimensionless; Initial value: 0.0150911724206476
        double var_chaste_interface__cell__sxtos = rY[8];
        // Units: dimensionless; Initial value: 0.000442853722673121
        double var_chaste_interface__cell__sytos = rY[9];
        // Units: dimensionless; Initial value: 0.789013894749951
        double var_chaste_interface__cell__sxtof = rY[10];
        // Units: dimensionless; Initial value: 0.000442846429332686
        double var_chaste_interface__cell__sytof = rY[11];
        // Units: dimensionless; Initial value: 0.999995784674368
        double var_chaste_interface__cell__sxkr = rY[12];
        // Units: dimensionless; Initial value: 0.020160578118589
        double var_chaste_interface__cell__sxks = rY[13];
        // Units: dimensionless; Initial value: 0.00430143235332308
        double var_chaste_interface__cell__sNaj = rY[32];
        // Units: dimensionless; Initial value: 8.21411036389602
        double var_chaste_interface__cell__sNasl = rY[33];
        // Units: dimensionless; Initial value: 8.21322794157889
        double var_chaste_interface__cell__sNai = rY[34];
        // Units: dimensionless; Initial value: 8.21340895351653
        double var_chaste_interface__cell__sCaj = rY[35];
        // Units: dimensionless; Initial value: 0.000175648385857736
        double var_chaste_interface__cell__sCasl = rY[36];
        // Units: dimensionless; Initial value: 0.000105614570409386
        
        const double var_cell__sm = var_chaste_interface__cell__sm; // dimensionless
        const double var_cell__sh = var_chaste_interface__cell__sh; // dimensionless
        const double var_cell__sj = var_chaste_interface__cell__sj; // dimensionless
        const double var_cell__sd = var_chaste_interface__cell__sd; // dimensionless
        const double var_cell__sf = var_chaste_interface__cell__sf; // dimensionless
        const double var_cell__sfcaBj = var_chaste_interface__cell__sfcaBj; // dimensionless
        const double var_cell__sfcaBsl = var_chaste_interface__cell__sfcaBsl; // dimensionless
        const double var_cell__sxtos = var_chaste_interface__cell__sxtos; // dimensionless
        const double var_cell__sytos = var_chaste_interface__cell__sytos; // dimensionless
        const double var_cell__sxtof = var_chaste_interface__cell__sxtof; // dimensionless
        const double var_cell__sytof = var_chaste_interface__cell__sytof; // dimensionless
        const double var_cell__sxkr = var_chaste_interface__cell__sxkr; // dimensionless
        const double var_cell__sxks = var_chaste_interface__cell__sxks; // dimensionless
        const double var_cell__sNaj = var_chaste_interface__cell__sNaj; // dimensionless
        const double var_cell__sNasl = var_chaste_interface__cell__sNasl; // dimensionless
        const double var_cell__sNai = var_chaste_interface__cell__sNai; // dimensionless
        const double var_cell__sKi = 120.0; // dimensionless
        const double var_cell__sCaj = var_chaste_interface__cell__sCaj; // dimensionless
        const double var_cell__sCasl = var_chaste_interface__cell__sCasl; // dimensionless
        const double var_cell__sVm = var_chaste_interface__cell__sVm; // millivolt
        const double var_cell__R = 8314.0; // dimensionless
        const double var_cell__Frdy = 96485.0; // dimensionless
        const double var_cell__Temp = 310.0; // dimensionless
        const double var_cell__FoRT = var_cell__Frdy / (var_cell__R * var_cell__Temp); // dimensionless
        const double var_cell__Qpow = (var_cell__Temp - 310.0) / 10.0; // dimensionless
        const double var_cell__G_CaL_mult = 1.0; // dimensionless
        const double var_cell__Fjunc = 0.11; // dimensionless
        const double var_cell__Fsl = 1.0 - var_cell__Fjunc; // dimensionless
        const double var_cell__Fjunc_CaL = 0.90000000000000002; // dimensionless
        const double var_cell__Fsl_CaL = 1.0 - var_cell__Fjunc_CaL; // dimensionless
        const double var_cell__Cli = 15.0; // dimensionless
        const double var_cell__Clo = 150.0; // dimensionless
        const double var_cell__Ko = 5.4000000000000004; // dimensionless
        const double var_cell__Nao = 140.0; // dimensionless
        const double var_cell__Cao = 1.8; // dimensionless
        const double var_cell__ek = (1.0 / var_cell__FoRT) * log(var_cell__Ko / var_cell__sKi); // dimensionless
        const double var_cell__eca_junc = ((1.0 / var_cell__FoRT) / 2.0) * log(var_cell__Cao / var_cell__sCaj); // dimensionless
        const double var_cell__eca_sl = ((1.0 / var_cell__FoRT) / 2.0) * log(var_cell__Cao / var_cell__sCasl); // dimensionless
        const double var_cell__ecl = (1.0 / var_cell__FoRT) * log(var_cell__Cli / var_cell__Clo); // dimensionless
        const double var_cell__GNa = 23.0; // dimensionless
        const double var_cell__GNaB = 0.00059699999999999998; // dimensionless
        const double var_cell__IbarNaK = 1.0 * 1.8; // dimensionless
        const double var_cell__KmNaip = 11.0; // dimensionless
        const double var_cell__KmKo = 1.5; // dimensionless
        const double var_cell__pNaK = 0.018329999999999999; // dimensionless
        const double var_cell__gkp = 2.0 * 0.001; // dimensionless
        const double var_cell__GClCa = 0.5 * 0.109625; // dimensionless
        const double var_cell__GClB = 1.0 * 0.0089999999999999993; // dimensionless
        const double var_cell__KdClCa = 0.10000000000000001; // dimensionless
        const double var_cell__pNa = var_cell__G_CaL_mult * 0.5 * 1.4999999999999999e-08; // dimensionless
        const double var_cell__pCa = var_cell__G_CaL_mult * 0.5 * 0.00054000000000000001; // dimensionless
        const double var_cell__pK = var_cell__G_CaL_mult * 0.5 * 2.7000000000000001e-07; // dimensionless
        const double var_cell__Q10CaL = 1.8; // dimensionless
        const double var_cell__IbarNCX = 1.0 * 4.5; // dimensionless
        const double var_cell__KmCai = 0.0035899999999999999; // dimensionless
        const double var_cell__KmCao = 1.3; // dimensionless
        const double var_cell__KmNai = 12.289999999999999; // dimensionless
        const double var_cell__KmNao = 87.5; // dimensionless
        const double var_cell__ksat = 0.32000000000000001; // dimensionless
        const double var_cell__nu = 0.27000000000000002; // dimensionless
        const double var_cell__Kdact = 0.00014999999999999999; // dimensionless
        const double var_cell__Q10NCX = 1.5700000000000001; // dimensionless
        const double var_cell__IbarSLCaP = 0.067299999999999999; // dimensionless
        const double var_cell__KmPCa = 0.00050000000000000001; // dimensionless
        const double var_cell__GCaB = 0.00055130000000000001; // dimensionless
        const double var_cell__Q10SLCaP = 2.3500000000000001; // dimensionless
        const double var_cell__ena_junc = (1.0 / var_cell__FoRT) * log(var_cell__Nao / var_cell__sNaj); // dimensionless
        const double var_cell__I_Na_junc = var_cell__Fjunc * var_cell__GNa * pow(var_cell__sm, 3.0) * var_cell__sh * var_cell__sj * (var_cell__sVm - var_cell__ena_junc); // dimensionless
        const double var_cell__ena_sl = (1.0 / var_cell__FoRT) * log(var_cell__Nao / var_cell__sNasl); // dimensionless
        const double var_cell__I_Na_sl = var_cell__Fsl * var_cell__GNa * pow(var_cell__sm, 3.0) * var_cell__sh * var_cell__sj * (var_cell__sVm - var_cell__ena_sl); // dimensionless
        const double var_cell__I_nabk_junc = var_cell__Fjunc * var_cell__GNaB * (var_cell__sVm - var_cell__ena_junc); // dimensionless
        const double var_cell__I_nabk_sl = var_cell__Fsl * var_cell__GNaB * (var_cell__sVm - var_cell__ena_sl); // dimensionless
        const double var_cell__sigma = (exp(var_cell__Nao / 67.299999999999997) - 1.0) / 7.0; // dimensionless
        const double var_cell__fnak = 1.0 / (1.0 + (0.1245 * exp((-0.10000000000000001) * var_cell__sVm * var_cell__FoRT)) + (0.036499999999999998 * var_cell__sigma * exp((-var_cell__sVm) * var_cell__FoRT))); // dimensionless
        const double var_cell__I_nak_junc = ((1.0 * var_cell__Fjunc * var_cell__IbarNaK * var_cell__fnak * var_cell__Ko) / (1.0 + pow(var_cell__KmNaip / var_cell__sNaj, 4.0))) / (var_cell__Ko + var_cell__KmKo); // dimensionless
        const double var_cell__I_nak_sl = ((1.0 * var_cell__Fsl * var_cell__IbarNaK * var_cell__fnak * var_cell__Ko) / (1.0 + pow(var_cell__KmNaip / var_cell__sNasl, 4.0))) / (var_cell__Ko + var_cell__KmKo); // dimensionless
        const double var_cell__I_nak = var_cell__I_nak_junc + var_cell__I_nak_sl; // dimensionless
        const double var_cell__gkr_mult = 1.0; // dimensionless
        const double var_cell__gkr = var_cell__gkr_mult * 0.035000000000000003 * sqrt(var_cell__Ko / 5.4000000000000004); // dimensionless
        const double var_cell__rkr = 1.0 / (1.0 + exp((var_cell__sVm + 74.0) / 24.0)); // dimensionless
        const double var_cell__I_kr = var_cell__gkr * var_cell__sxkr * var_cell__rkr * (var_cell__sVm - var_cell__ek); // dimensionless
        const double var_cell__eks = (1.0 / var_cell__FoRT) * log((var_cell__Ko + (var_cell__pNaK * var_cell__Nao)) / (var_cell__sKi + (var_cell__pNaK * var_cell__sNai))); // dimensionless
        const double var_cell__gks_junc = 1.0 * 0.0035000000000000001; // dimensionless
        const double var_cell__gks_sl = 1.0 * 0.0035000000000000001; // dimensionless
        const double var_cell__I_ks_junc = var_cell__Fjunc * var_cell__gks_junc * pow(var_cell__sxks, 2.0) * (var_cell__sVm - var_cell__eks); // dimensionless
        const double var_cell__I_ks_sl = var_cell__Fsl * var_cell__gks_sl * pow(var_cell__sxks, 2.0) * (var_cell__sVm - var_cell__eks); // dimensionless
        const double var_cell__I_ks = var_cell__I_ks_junc + var_cell__I_ks_sl; // dimensionless
        const double var_cell__kp_kp = 1.0 / (1.0 + exp(7.4880000000000004 - (var_cell__sVm / 5.9800000000000004))); // dimensionless
        const double var_cell__I_kp_junc = var_cell__Fjunc * var_cell__gkp * var_cell__kp_kp * (var_cell__sVm - var_cell__ek); // dimensionless
        const double var_cell__I_kp_sl = var_cell__Fsl * var_cell__gkp * var_cell__kp_kp * (var_cell__sVm - var_cell__ek); // dimensionless
        const double var_cell__I_kp = var_cell__I_kp_junc + var_cell__I_kp_sl; // dimensionless
        const double var_cell__GtoSlow = 1.0 * 0.13 * 0.12; // dimensionless
        const double var_cell__GtoFast = 1.0 * 0.13 * 0.88; // dimensionless
        const double var_cell__I_tos = var_cell__GtoSlow * var_cell__sxtos * var_cell__sytos * (var_cell__sVm - var_cell__ek); // dimensionless
        const double var_cell__I_tof = var_cell__GtoFast * var_cell__sxtof * var_cell__sytof * (var_cell__sVm - var_cell__ek); // dimensionless
        const double var_cell__I_to = var_cell__I_tos + var_cell__I_tof; // dimensionless
        const double var_cell__aki = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_cell__sVm - var_cell__ek) - 59.215000000000003))); // dimensionless
        const double var_cell__bki = ((0.49124000000000001 * exp(0.080320000000000003 * ((var_cell__sVm + 5.476) - var_cell__ek))) + exp(0.061749999999999999 * ((var_cell__sVm - var_cell__ek) - 594.30999999999995))) / (1.0 + exp((-0.51429999999999998) * ((var_cell__sVm - var_cell__ek) + 4.7530000000000001))); // dimensionless
        const double var_cell__kiss = var_cell__aki / (var_cell__aki + var_cell__bki); // dimensionless
        const double var_cell__I_ki = 1.0 * 0.34999999999999998 * sqrt(var_cell__Ko / 5.4000000000000004) * var_cell__kiss * (var_cell__sVm - var_cell__ek); // dimensionless
        const double var_cell__I_ClCa_junc = ((var_cell__Fjunc * var_cell__GClCa) / (1.0 + (var_cell__KdClCa / var_cell__sCaj))) * (var_cell__sVm - var_cell__ecl); // dimensionless
        const double var_cell__I_ClCa_sl = ((var_cell__Fsl * var_cell__GClCa) / (1.0 + (var_cell__KdClCa / var_cell__sCasl))) * (var_cell__sVm - var_cell__ecl); // dimensionless
        const double var_cell__I_ClCa = var_cell__I_ClCa_junc + var_cell__I_ClCa_sl; // dimensionless
        const double var_cell__I_Clbk = var_cell__GClB * (var_cell__sVm - var_cell__ecl); // dimensionless
        const double var_cell__fcaCaMSL = 0.0; // dimensionless
        const double var_cell__fcaCaj = 0.0; // dimensionless
        const double var_cell__ibarca_j = (var_cell__pCa * 4.0 * var_cell__sVm * var_cell__Frdy * var_cell__FoRT * ((0.34100000000000003 * var_cell__sCaj * exp(2.0 * var_cell__sVm * var_cell__FoRT)) - (0.34100000000000003 * var_cell__Cao))) / (exp(2.0 * var_cell__sVm * var_cell__FoRT) - 1.0); // dimensionless
        const double var_cell__ibarca_sl = (var_cell__pCa * 4.0 * var_cell__sVm * var_cell__Frdy * var_cell__FoRT * ((0.34100000000000003 * var_cell__sCasl * exp(2.0 * var_cell__sVm * var_cell__FoRT)) - (0.34100000000000003 * var_cell__Cao))) / (exp(2.0 * var_cell__sVm * var_cell__FoRT) - 1.0); // dimensionless
        const double var_cell__ibark = (var_cell__pK * var_cell__sVm * var_cell__Frdy * var_cell__FoRT * ((0.75 * var_cell__sKi * exp(var_cell__sVm * var_cell__FoRT)) - (0.75 * var_cell__Ko))) / (exp(var_cell__sVm * var_cell__FoRT) - 1.0); // dimensionless
        const double var_cell__ibarna_j = (var_cell__pNa * var_cell__sVm * var_cell__Frdy * var_cell__FoRT * ((0.75 * var_cell__sNaj * exp(var_cell__sVm * var_cell__FoRT)) - (0.75 * var_cell__Nao))) / (exp(var_cell__sVm * var_cell__FoRT) - 1.0); // dimensionless
        const double var_cell__ibarna_sl = (var_cell__pNa * var_cell__sVm * var_cell__Frdy * var_cell__FoRT * ((0.75 * var_cell__sNasl * exp(var_cell__sVm * var_cell__FoRT)) - (0.75 * var_cell__Nao))) / (exp(var_cell__sVm * var_cell__FoRT) - 1.0); // dimensionless
        const double var_cell__I_Ca_junc = var_cell__Fjunc_CaL * var_cell__ibarca_j * var_cell__sd * var_cell__sf * ((1.0 - var_cell__sfcaBj) + var_cell__fcaCaj) * pow(var_cell__Q10CaL, var_cell__Qpow) * 0.45000000000000001 * 1.0; // dimensionless
        const double var_cell__I_Ca_sl = var_cell__Fsl_CaL * var_cell__ibarca_sl * var_cell__sd * var_cell__sf * ((1.0 - var_cell__sfcaBsl) + var_cell__fcaCaMSL) * pow(var_cell__Q10CaL, var_cell__Qpow) * 0.45000000000000001 * 1.0; // dimensionless
        const double var_cell__I_CaK = var_cell__ibark * var_cell__sd * var_cell__sf * ((var_cell__Fjunc_CaL * (var_cell__fcaCaj + (1.0 - var_cell__sfcaBj))) + (var_cell__Fsl_CaL * (var_cell__fcaCaMSL + (1.0 - var_cell__sfcaBsl)))) * pow(var_cell__Q10CaL, var_cell__Qpow) * 0.45000000000000001 * 1.0; // dimensionless
        const double var_cell__I_CaNa_junc = var_cell__Fjunc_CaL * var_cell__ibarna_j * var_cell__sd * var_cell__sf * ((1.0 - var_cell__sfcaBj) + var_cell__fcaCaj) * pow(var_cell__Q10CaL, var_cell__Qpow) * 0.45000000000000001 * 1.0; // dimensionless
        const double var_cell__I_CaNa_sl = var_cell__Fsl_CaL * var_cell__ibarna_sl * var_cell__sd * var_cell__sf * ((1.0 - var_cell__sfcaBsl) + var_cell__fcaCaMSL) * pow(var_cell__Q10CaL, var_cell__Qpow) * 0.45000000000000001 * 1.0; // dimensionless
        const double var_cell__Ka_junc = 1.0 / (1.0 + pow(var_cell__Kdact / var_cell__sCaj, 2.0)); // dimensionless
        const double var_cell__Ka_sl = 1.0 / (1.0 + pow(var_cell__Kdact / var_cell__sCasl, 2.0)); // dimensionless
        const double var_cell__s1_junc = exp(var_cell__nu * var_cell__sVm * var_cell__FoRT) * pow(var_cell__sNaj, 3.0) * var_cell__Cao; // dimensionless
        const double var_cell__s1_sl = exp(var_cell__nu * var_cell__sVm * var_cell__FoRT) * pow(var_cell__sNasl, 3.0) * var_cell__Cao; // dimensionless
        const double var_cell__s2_junc = exp((var_cell__nu - 1.0) * var_cell__sVm * var_cell__FoRT) * pow(var_cell__Nao, 3.0) * var_cell__sCaj; // dimensionless
        const double var_cell__s3_junc = (var_cell__KmCai * pow(var_cell__Nao, 3.0) * (1.0 + pow(var_cell__sNaj / var_cell__KmNai, 3.0))) + (pow(var_cell__KmNao, 3.0) * var_cell__sCaj * (1.0 + (var_cell__sCaj / var_cell__KmCai))) + (var_cell__KmCao * pow(var_cell__sNaj, 3.0)) + (pow(var_cell__sNaj, 3.0) * var_cell__Cao) + (pow(var_cell__Nao, 3.0) * var_cell__sCaj); // dimensionless
        const double var_cell__s2_sl = exp((var_cell__nu - 1.0) * var_cell__sVm * var_cell__FoRT) * pow(var_cell__Nao, 3.0) * var_cell__sCasl; // dimensionless
        const double var_cell__s3_sl = (var_cell__KmCai * pow(var_cell__Nao, 3.0) * (1.0 + pow(var_cell__sNasl / var_cell__KmNai, 3.0))) + (pow(var_cell__KmNao, 3.0) * var_cell__sCasl * (1.0 + (var_cell__sCasl / var_cell__KmCai))) + (var_cell__KmCao * pow(var_cell__sNasl, 3.0)) + (pow(var_cell__sNasl, 3.0) * var_cell__Cao) + (pow(var_cell__Nao, 3.0) * var_cell__sCasl); // dimensionless
        const double var_cell__I_ncx_junc = ((var_cell__Fjunc * var_cell__IbarNCX * pow(var_cell__Q10NCX, var_cell__Qpow) * var_cell__Ka_junc * (var_cell__s1_junc - var_cell__s2_junc)) / var_cell__s3_junc) / (1.0 + (var_cell__ksat * exp((var_cell__nu - 1.0) * var_cell__sVm * var_cell__FoRT))); // dimensionless
        const double var_cell__I_ncx_sl = ((var_cell__Fsl * var_cell__IbarNCX * pow(var_cell__Q10NCX, var_cell__Qpow) * var_cell__Ka_sl * (var_cell__s1_sl - var_cell__s2_sl)) / var_cell__s3_sl) / (1.0 + (var_cell__ksat * exp((var_cell__nu - 1.0) * var_cell__sVm * var_cell__FoRT))); // dimensionless
        const double var_cell__I_pca_junc = (var_cell__Fjunc * pow(var_cell__Q10SLCaP, var_cell__Qpow) * var_cell__IbarSLCaP * pow(var_cell__sCaj, 1.6000000000000001)) / (pow(var_cell__KmPCa, 1.6000000000000001) + pow(var_cell__sCaj, 1.6000000000000001)); // dimensionless
        const double var_cell__I_pca_sl = (var_cell__Fsl * pow(var_cell__Q10SLCaP, var_cell__Qpow) * var_cell__IbarSLCaP * pow(var_cell__sCasl, 1.6000000000000001)) / (pow(var_cell__KmPCa, 1.6000000000000001) + pow(var_cell__sCasl, 1.6000000000000001)); // dimensionless
        const double var_cell__I_cabk_junc = var_cell__Fjunc * var_cell__GCaB * (var_cell__sVm - var_cell__eca_junc); // dimensionless
        const double var_cell__I_cabk_sl = var_cell__Fsl * var_cell__GCaB * (var_cell__sVm - var_cell__eca_sl); // dimensionless
        const double var_cell__I_Na_tot_junc = var_cell__I_Na_junc + var_cell__I_nabk_junc + (3.0 * var_cell__I_ncx_junc) + (3.0 * var_cell__I_nak_junc) + var_cell__I_CaNa_junc; // dimensionless
        const double var_cell__I_Na_tot_sl = var_cell__I_Na_sl + var_cell__I_nabk_sl + (3.0 * var_cell__I_ncx_sl) + (3.0 * var_cell__I_nak_sl) + var_cell__I_CaNa_sl; // dimensionless
        const double var_cell__I_K_tot = ((var_cell__I_to + var_cell__I_kr + var_cell__I_ks + var_cell__I_ki) - (2.0 * var_cell__I_nak)) + var_cell__I_CaK + var_cell__I_kp; // dimensionless
        const double var_cell__I_Ca_tot_junc = (var_cell__I_Ca_junc + var_cell__I_cabk_junc + var_cell__I_pca_junc) - (2.0 * var_cell__I_ncx_junc); // dimensionless
        const double var_cell__I_Ca_tot_sl = (var_cell__I_Ca_sl + var_cell__I_cabk_sl + var_cell__I_pca_sl) - (2.0 * var_cell__I_ncx_sl); // dimensionless
        const double var_cell__I_Na_tot = var_cell__I_Na_tot_junc + var_cell__I_Na_tot_sl; // dimensionless
        const double var_cell__I_Cl_tot = var_cell__I_ClCa + var_cell__I_Clbk; // dimensionless
        const double var_cell__I_Ca_tot = var_cell__I_Ca_tot_junc + var_cell__I_Ca_tot_sl; // dimensionless
        const double var_cell__I_tot = var_cell__I_Na_tot + var_cell__I_Cl_tot + var_cell__I_Ca_tot + var_cell__I_K_tot; // uA_per_uF
        const double var_chaste_interface__cell__I_tot = var_cell__I_tot; // uA_per_uF
        const double var_chaste_interface__i_ionic = (var_chaste_interface__cell__I_tot) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamicgrandi2010ssFromCellML::EvaluateYDerivatives(double var_chaste_interface__cell__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__sVm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -81.3842590704928
        double var_chaste_interface__cell__sm = rY[1];
        // Units: dimensionless; Initial value: 0.00384941567866232
        double var_chaste_interface__cell__sh = rY[2];
        // Units: dimensionless; Initial value: 0.623723834301669
        double var_chaste_interface__cell__sj = rY[3];
        // Units: dimensionless; Initial value: 0.622080736932815
        double var_chaste_interface__cell__sd = rY[4];
        // Units: dimensionless; Initial value: 2.95884913218079e-6
        double var_chaste_interface__cell__sf = rY[5];
        // Units: dimensionless; Initial value: 0.995094078386247
        double var_chaste_interface__cell__sfcaBj = rY[6];
        // Units: dimensionless; Initial value: 0.0246274349529557
        double var_chaste_interface__cell__sfcaBsl = rY[7];
        // Units: dimensionless; Initial value: 0.0150911724206476
        double var_chaste_interface__cell__sxtos = rY[8];
        // Units: dimensionless; Initial value: 0.000442853722673121
        double var_chaste_interface__cell__sytos = rY[9];
        // Units: dimensionless; Initial value: 0.789013894749951
        double var_chaste_interface__cell__sxtof = rY[10];
        // Units: dimensionless; Initial value: 0.000442846429332686
        double var_chaste_interface__cell__sytof = rY[11];
        // Units: dimensionless; Initial value: 0.999995784674368
        double var_chaste_interface__cell__sxkr = rY[12];
        // Units: dimensionless; Initial value: 0.020160578118589
        double var_chaste_interface__cell__sxks = rY[13];
        // Units: dimensionless; Initial value: 0.00430143235332308
        double var_chaste_interface__cell__sRyRr = rY[14];
        // Units: dimensionless; Initial value: 0.893326456705696
        double var_chaste_interface__cell__sRyRo = rY[15];
        // Units: dimensionless; Initial value: 7.56436968249499e-7
        double var_chaste_interface__cell__sRyRi = rY[16];
        // Units: dimensionless; Initial value: 9.03266331737064e-8
        double var_chaste_interface__cell__sNaBj = rY[17];
        // Units: dimensionless; Initial value: 3.41097946062695
        double var_chaste_interface__cell__sNaBsl = rY[18];
        // Units: dimensionless; Initial value: 0.744248540671373
        double var_chaste_interface__cell__sTnCL = rY[19];
        // Units: dimensionless; Initial value: 0.00904644567707666
        double var_chaste_interface__cell__sTnCHc = rY[20];
        // Units: dimensionless; Initial value: 0.1183943202639
        double var_chaste_interface__cell__sTnCHm = rY[21];
        // Units: dimensionless; Initial value: 0.0101423649465603
        double var_chaste_interface__cell__sCaM = rY[22];
        // Units: dimensionless; Initial value: 0.000299824763475116
        double var_chaste_interface__cell__sMyoc = rY[23];
        // Units: dimensionless; Initial value: 0.00201443980536826
        double var_chaste_interface__cell__sMyom = rY[24];
        // Units: dimensionless; Initial value: 0.137467597337588
        double var_chaste_interface__cell__sSRB = rY[25];
        // Units: dimensionless; Initial value: 0.00220110816535249
        double var_chaste_interface__cell__sSLLj = rY[26];
        // Units: dimensionless; Initial value: 0.00739549938515031
        double var_chaste_interface__cell__sSLLsl = rY[27];
        // Units: dimensionless; Initial value: 0.00979616077807075
        double var_chaste_interface__cell__sSLHj = rY[28];
        // Units: dimensionless; Initial value: 0.0735225248399363
        double var_chaste_interface__cell__sSLHsl = rY[29];
        // Units: dimensionless; Initial value: 0.113642236788144
        double var_chaste_interface__cell__sCsqnb = rY[30];
        // Units: dimensionless; Initial value: 1.20762712858574
        double var_chaste_interface__cell__sCa_sr = rY[31];
        // Units: dimensionless; Initial value: 0.563755421404699
        double var_chaste_interface__cell__sNaj = rY[32];
        // Units: dimensionless; Initial value: 8.21411036389602
        double var_chaste_interface__cell__sNasl = rY[33];
        // Units: dimensionless; Initial value: 8.21322794157889
        double var_chaste_interface__cell__sNai = rY[34];
        // Units: dimensionless; Initial value: 8.21340895351653
        double var_chaste_interface__cell__sCaj = rY[35];
        // Units: dimensionless; Initial value: 0.000175648385857736
        double var_chaste_interface__cell__sCasl = rY[36];
        // Units: dimensionless; Initial value: 0.000105614570409386
        double var_chaste_interface__cell__sCai = rY[37];
        // Units: dimensionless; Initial value: 8.85230799863012e-5
        
        
        // Mathematics
        double d_dt_chaste_interface__cell__sVm;
        const double var_cell__sm = var_chaste_interface__cell__sm; // dimensionless
        const double var_cell__sh = var_chaste_interface__cell__sh; // dimensionless
        const double var_cell__sj = var_chaste_interface__cell__sj; // dimensionless
        const double var_cell__sd = var_chaste_interface__cell__sd; // dimensionless
        const double var_cell__sf = var_chaste_interface__cell__sf; // dimensionless
        const double var_cell__sfcaBj = var_chaste_interface__cell__sfcaBj; // dimensionless
        const double var_cell__sfcaBsl = var_chaste_interface__cell__sfcaBsl; // dimensionless
        const double var_cell__sxtos = var_chaste_interface__cell__sxtos; // dimensionless
        const double var_cell__sytos = var_chaste_interface__cell__sytos; // dimensionless
        const double var_cell__sxtof = var_chaste_interface__cell__sxtof; // dimensionless
        const double var_cell__sytof = var_chaste_interface__cell__sytof; // dimensionless
        const double var_cell__sxkr = var_chaste_interface__cell__sxkr; // dimensionless
        const double var_cell__sxks = var_chaste_interface__cell__sxks; // dimensionless
        const double var_cell__sRyRr = var_chaste_interface__cell__sRyRr; // dimensionless
        const double var_cell__sRyRo = var_chaste_interface__cell__sRyRo; // dimensionless
        const double var_cell__sRyRi = var_chaste_interface__cell__sRyRi; // dimensionless
        const double var_cell__sNaBj = var_chaste_interface__cell__sNaBj; // dimensionless
        const double var_cell__sNaBsl = var_chaste_interface__cell__sNaBsl; // dimensionless
        const double var_cell__sTnCL = var_chaste_interface__cell__sTnCL; // dimensionless
        const double var_cell__sTnCHc = var_chaste_interface__cell__sTnCHc; // dimensionless
        const double var_cell__sTnCHm = var_chaste_interface__cell__sTnCHm; // dimensionless
        const double var_cell__sCaM = var_chaste_interface__cell__sCaM; // dimensionless
        const double var_cell__sMyoc = var_chaste_interface__cell__sMyoc; // dimensionless
        const double var_cell__sMyom = var_chaste_interface__cell__sMyom; // dimensionless
        const double var_cell__sSRB = var_chaste_interface__cell__sSRB; // dimensionless
        const double var_cell__sSLLj = var_chaste_interface__cell__sSLLj; // dimensionless
        const double var_cell__sSLLsl = var_chaste_interface__cell__sSLLsl; // dimensionless
        const double var_cell__sSLHj = var_chaste_interface__cell__sSLHj; // dimensionless
        const double var_cell__sSLHsl = var_chaste_interface__cell__sSLHsl; // dimensionless
        const double var_cell__sCsqnb = var_chaste_interface__cell__sCsqnb; // dimensionless
        const double var_cell__sCa_sr = var_chaste_interface__cell__sCa_sr; // dimensionless
        const double var_cell__sNaj = var_chaste_interface__cell__sNaj; // dimensionless
        const double var_cell__sNasl = var_chaste_interface__cell__sNasl; // dimensionless
        const double var_cell__sNai = var_chaste_interface__cell__sNai; // dimensionless
        const double var_cell__sCaj = var_chaste_interface__cell__sCaj; // dimensionless
        const double var_cell__sCasl = var_chaste_interface__cell__sCasl; // dimensionless
        const double var_cell__sCai = var_chaste_interface__cell__sCai; // dimensionless
        const double var_cell__sVm = var_chaste_interface__cell__sVm; // millivolt
        const double var_cell__R = 8314.0; // dimensionless
        const double var_cell__Frdy = 96485.0; // dimensionless
        const double var_cell__Temp = 310.0; // dimensionless
        const double var_cell__FoRT = var_cell__Frdy / (var_cell__R * var_cell__Temp); // dimensionless
        const double var_cell__Cmem = 1.3809999999999999e-10; // dimensionless
        const double var_cell__Qpow = (var_cell__Temp - 310.0) / 10.0; // dimensionless
        const double var_cell__cellLength = 100.0; // dimensionless
        const double var_cell__cellRadius = 10.25; // dimensionless
        const double var_cell__Vcell = M_PI * pow(var_cell__cellRadius, 2.0) * var_cell__cellLength * 1.0000000000000001e-15; // dimensionless
        const double var_cell__Vmyo = 0.65000000000000002 * var_cell__Vcell; // dimensionless
        const double var_cell__Vsr = 0.035000000000000003 * var_cell__Vcell; // dimensionless
        const double var_cell__Vsl = 0.02 * var_cell__Vcell; // dimensionless
        const double var_cell__Vjunc = 0.053900000000000003 * 0.01 * var_cell__Vcell; // dimensionless
        const double var_cell__J_ca_juncsl = 1.0 / 1213400000000.0; // dimensionless
        const double var_cell__J_ca_slmyo = 1.0 / 268510000000.0; // dimensionless
        const double var_cell__J_na_juncsl = 1.0 / ((1638200000000.0 / 3.0) * 100.0); // dimensionless
        const double var_cell__J_na_slmyo = 1.0 / ((18308000000.0 / 3.0) * 100.0); // dimensionless
        const double var_cell__G_CaL_mult = 1.0; // dimensionless
        const double var_cell__Fjunc = 0.11; // dimensionless
        const double var_cell__Fsl = 1.0 - var_cell__Fjunc; // dimensionless
        const double var_cell__Fjunc_CaL = 0.90000000000000002; // dimensionless
        const double var_cell__Fsl_CaL = 1.0 - var_cell__Fjunc_CaL; // dimensionless
        const double var_cell__Ko = 5.4000000000000004; // dimensionless
        const double var_cell__Nao = 140.0; // dimensionless
        const double var_cell__Cao = 1.8; // dimensionless
        const double var_cell__Mgi = 1.0; // dimensionless
        const double var_cell__eca_junc = ((1.0 / var_cell__FoRT) / 2.0) * log(var_cell__Cao / var_cell__sCaj); // dimensionless
        const double var_cell__eca_sl = ((1.0 / var_cell__FoRT) / 2.0) * log(var_cell__Cao / var_cell__sCasl); // dimensionless
        const double var_cell__GNa = 23.0; // dimensionless
        const double var_cell__GNaB = 0.00059699999999999998; // dimensionless
        const double var_cell__IbarNaK = 1.0 * 1.8; // dimensionless
        const double var_cell__KmNaip = 11.0; // dimensionless
        const double var_cell__KmKo = 1.5; // dimensionless
        const double var_cell__pNa = var_cell__G_CaL_mult * 0.5 * 1.4999999999999999e-08; // dimensionless
        const double var_cell__pCa = var_cell__G_CaL_mult * 0.5 * 0.00054000000000000001; // dimensionless
        const double var_cell__Q10CaL = 1.8; // dimensionless
        const double var_cell__IbarNCX = 1.0 * 4.5; // dimensionless
        const double var_cell__KmCai = 0.0035899999999999999; // dimensionless
        const double var_cell__KmCao = 1.3; // dimensionless
        const double var_cell__KmNai = 12.289999999999999; // dimensionless
        const double var_cell__KmNao = 87.5; // dimensionless
        const double var_cell__ksat = 0.32000000000000001; // dimensionless
        const double var_cell__nu = 0.27000000000000002; // dimensionless
        const double var_cell__Kdact = 0.00014999999999999999; // dimensionless
        const double var_cell__Q10NCX = 1.5700000000000001; // dimensionless
        const double var_cell__IbarSLCaP = 0.067299999999999999; // dimensionless
        const double var_cell__KmPCa = 0.00050000000000000001; // dimensionless
        const double var_cell__GCaB = 0.00055130000000000001; // dimensionless
        const double var_cell__Q10SLCaP = 2.3500000000000001; // dimensionless
        const double var_cell__Q10SRCaP = 2.6000000000000001; // dimensionless
        const double var_cell__Vmax_SRCaP = 1.0 * 0.0053114; // dimensionless
        const double var_cell__Kmf = 0.00024600000000000002; // dimensionless
        const double var_cell__Kmr = 1.7; // dimensionless
        const double var_cell__hillSRCaP = 1.7869999999999999; // dimensionless
        const double var_cell__ks = 25.0; // dimensionless
        const double var_cell__koCa = 10.0; // dimensionless
        const double var_cell__kom = 0.059999999999999998; // dimensionless
        const double var_cell__kiCa = 0.5; // dimensionless
        const double var_cell__kim = 0.0050000000000000001; // dimensionless
        const double var_cell__ec50SR = 0.45000000000000001; // dimensionless
        const double var_cell__Bmax_Naj = 7.5609999999999999; // dimensionless
        const double var_cell__Bmax_Nasl = 1.6499999999999999; // dimensionless
        const double var_cell__koff_na = 0.001; // dimensionless
        const double var_cell__kon_na = 0.0001; // dimensionless
        const double var_cell__Bmax_TnClow = 0.070000000000000007; // dimensionless
        const double var_cell__koff_tncl = 0.019599999999999999; // dimensionless
        const double var_cell__kon_tncl = 32.700000000000003; // dimensionless
        const double var_cell__Bmax_TnChigh = 0.14000000000000001; // dimensionless
        const double var_cell__koff_tnchca = 3.1999999999999999e-05; // dimensionless
        const double var_cell__kon_tnchca = 2.3700000000000001; // dimensionless
        const double var_cell__koff_tnchmg = 0.0033300000000000001; // dimensionless
        const double var_cell__kon_tnchmg = 0.0030000000000000001; // dimensionless
        const double var_cell__Bmax_CaM = 0.024; // dimensionless
        const double var_cell__koff_cam = 0.23799999999999999; // dimensionless
        const double var_cell__kon_cam = 34.0; // dimensionless
        const double var_cell__Bmax_myosin = 0.14000000000000001; // dimensionless
        const double var_cell__koff_myoca = 0.00046000000000000001; // dimensionless
        const double var_cell__kon_myoca = 13.800000000000001; // dimensionless
        const double var_cell__koff_myomg = 5.7000000000000003e-05; // dimensionless
        const double var_cell__kon_myomg = 0.015699999999999999; // dimensionless
        const double var_cell__Bmax_SR = 19.0 * 0.00089999999999999998; // dimensionless
        const double var_cell__koff_sr = 0.059999999999999998; // dimensionless
        const double var_cell__kon_sr = 100.0; // dimensionless
        const double var_cell__Bmax_SLlowsl = (0.037400000000000003 * var_cell__Vmyo) / var_cell__Vsl; // dimensionless
        const double var_cell__Bmax_SLlowj = ((0.0045999999999999999 * var_cell__Vmyo) / var_cell__Vjunc) * 0.10000000000000001; // dimensionless
        const double var_cell__koff_sll = 1.3; // dimensionless
        const double var_cell__kon_sll = 100.0; // dimensionless
        const double var_cell__Bmax_SLhighsl = (0.0134 * var_cell__Vmyo) / var_cell__Vsl; // dimensionless
        const double var_cell__Bmax_SLhighj = ((0.00165 * var_cell__Vmyo) / var_cell__Vjunc) * 0.10000000000000001; // dimensionless
        const double var_cell__koff_slh = 0.029999999999999999; // dimensionless
        const double var_cell__kon_slh = 100.0; // dimensionless
        const double var_cell__Bmax_Csqn = (0.14000000000000001 * var_cell__Vmyo) / var_cell__Vsr; // dimensionless
        const double var_cell__koff_csqn = 65.0; // dimensionless
        const double var_cell__kon_csqn = 100.0; // dimensionless
        const double var_cell__mss = 1.0 / pow(1.0 + exp((-(56.859999999999999 + var_cell__sVm)) / 9.0299999999999994), 2.0); // dimensionless
        const double var_cell__taum = (0.12920000000000001 * exp(-pow((var_cell__sVm + 45.789999999999999) / 15.539999999999999, 2.0))) + (0.064869999999999997 * exp(-pow((var_cell__sVm - 4.8230000000000004) / 51.119999999999997, 2.0))); // dimensionless
        const double var_cell__bh = (var_cell__sVm >= (-40.0)) ? (0.77000000000000002 / (0.13 * (1.0 + exp((-(var_cell__sVm + 10.66)) / 11.1)))) : ((2.7000000000000002 * exp(0.079000000000000001 * var_cell__sVm)) + (310000.0 * exp(0.34849999999999998 * var_cell__sVm))); // dimensionless
        const double var_cell__ah = (var_cell__sVm >= (-40.0)) ? 0.0 : (0.057000000000000002 * exp((-(var_cell__sVm + 80.0)) / 6.7999999999999998)); // dimensionless
        const double var_cell__tauh = 1.0 / (var_cell__ah + var_cell__bh); // dimensionless
        const double var_cell__hss = 1.0 / pow(1.0 + exp((var_cell__sVm + 71.549999999999997) / 7.4299999999999997), 2.0); // dimensionless
        const double var_cell__bj = (var_cell__sVm >= (-40.0)) ? ((0.59999999999999998 * exp(0.057000000000000002 * var_cell__sVm)) / (1.0 + exp((-0.10000000000000001) * (var_cell__sVm + 32.0)))) : ((0.024240000000000001 * exp((-0.01052) * var_cell__sVm)) / (1.0 + exp((-0.13780000000000001) * (var_cell__sVm + 40.140000000000001)))); // dimensionless
        const double var_cell__aj = (var_cell__sVm >= (-40.0)) ? 0.0 : (((((-25428.0) * exp(0.24440000000000001 * var_cell__sVm)) - (6.9480000000000002e-06 * exp((-0.043909999999999998) * var_cell__sVm))) * (var_cell__sVm + 37.780000000000001)) / (1.0 + exp(0.311 * (var_cell__sVm + 79.230000000000004)))); // dimensionless
        const double var_cell__tauj = 1.0 / (var_cell__aj + var_cell__bj); // dimensionless
        const double var_cell__jss = 1.0 / pow(1.0 + exp((var_cell__sVm + 71.549999999999997) / 7.4299999999999997), 2.0); // dimensionless
        const double var_cell__ena_junc = (1.0 / var_cell__FoRT) * log(var_cell__Nao / var_cell__sNaj); // dimensionless
        const double var_cell__I_Na_junc = var_cell__Fjunc * var_cell__GNa * pow(var_cell__sm, 3.0) * var_cell__sh * var_cell__sj * (var_cell__sVm - var_cell__ena_junc); // dimensionless
        const double var_cell__ena_sl = (1.0 / var_cell__FoRT) * log(var_cell__Nao / var_cell__sNasl); // dimensionless
        const double var_cell__I_Na_sl = var_cell__Fsl * var_cell__GNa * pow(var_cell__sm, 3.0) * var_cell__sh * var_cell__sj * (var_cell__sVm - var_cell__ena_sl); // dimensionless
        const double var_cell__I_nabk_junc = var_cell__Fjunc * var_cell__GNaB * (var_cell__sVm - var_cell__ena_junc); // dimensionless
        const double var_cell__I_nabk_sl = var_cell__Fsl * var_cell__GNaB * (var_cell__sVm - var_cell__ena_sl); // dimensionless
        const double var_cell__sigma = (exp(var_cell__Nao / 67.299999999999997) - 1.0) / 7.0; // dimensionless
        const double var_cell__fnak = 1.0 / (1.0 + (0.1245 * exp((-0.10000000000000001) * var_cell__sVm * var_cell__FoRT)) + (0.036499999999999998 * var_cell__sigma * exp((-var_cell__sVm) * var_cell__FoRT))); // dimensionless
        const double var_cell__I_nak_junc = ((1.0 * var_cell__Fjunc * var_cell__IbarNaK * var_cell__fnak * var_cell__Ko) / (1.0 + pow(var_cell__KmNaip / var_cell__sNaj, 4.0))) / (var_cell__Ko + var_cell__KmKo); // dimensionless
        const double var_cell__I_nak_sl = ((1.0 * var_cell__Fsl * var_cell__IbarNaK * var_cell__fnak * var_cell__Ko) / (1.0 + pow(var_cell__KmNaip / var_cell__sNasl, 4.0))) / (var_cell__Ko + var_cell__KmKo); // dimensionless
        const double var_cell__xrss = 1.0 / (1.0 + exp((-(var_cell__sVm + 10.0)) / 5.0)); // dimensionless
        const double var_cell__tauxr = (((550.0 / (1.0 + exp(((-22.0) - var_cell__sVm) / 9.0))) * 6.0) / (1.0 + exp((var_cell__sVm - (-11.0)) / 9.0))) + (230.0 / (1.0 + exp((var_cell__sVm - (-40.0)) / 20.0))); // dimensionless
        const double var_cell__xsss = 1.0 / (1.0 + exp((-(var_cell__sVm + 3.7999999999999998)) / 14.25)); // dimensionless
        const double var_cell__tauxs = 990.10000000000002 / (1.0 + exp((-(var_cell__sVm + 2.4359999999999999)) / 14.119999999999999)); // dimensionless
        const double var_cell__xtoss = 1.0 / (1.0 + exp((-(var_cell__sVm - 19.0)) / 13.0)); // dimensionless
        const double var_cell__ytoss = 1.0 / (1.0 + exp((var_cell__sVm + 19.5) / 5.0)); // dimensionless
        const double var_cell__tauxtos = (9.0 / (1.0 + exp((var_cell__sVm + 3.0) / 15.0))) + 0.5; // dimensionless
        const double var_cell__tauytos = (800.0 / (1.0 + exp((var_cell__sVm + 60.0) / 10.0))) + 30.0; // dimensionless
        const double var_cell__tauxtof = (8.5 * exp(-pow((var_cell__sVm + 45.0) / 50.0, 2.0))) + 0.5; // dimensionless
        const double var_cell__tauytof = (85.0 * exp((-pow(var_cell__sVm + 40.0, 2.0)) / 220.0)) + 7.0; // dimensionless
        const double var_cell__fss = (1.0 / (1.0 + exp((var_cell__sVm + 35.0) / 9.0))) + (0.59999999999999998 / (1.0 + exp((50.0 - var_cell__sVm) / 20.0))); // dimensionless
        const double var_cell__dss = 1.0 / (1.0 + exp((-(var_cell__sVm + 5.0)) / 6.0)); // dimensionless
        const double var_cell__taud = (var_cell__dss * (1.0 - exp((-(var_cell__sVm + 5.0)) / 6.0))) / (0.035000000000000003 * (var_cell__sVm + 5.0)); // dimensionless
        const double var_cell__tauf = 1.0 / ((0.019699999999999999 * exp(-pow(0.033700000000000001 * (var_cell__sVm + 14.5), 2.0))) + 0.02); // dimensionless
        const double var_cell__fcaCaMSL = 0.0; // dimensionless
        const double var_cell__fcaCaj = 0.0; // dimensionless
        const double var_cell__ibarca_j = (var_cell__pCa * 4.0 * var_cell__sVm * var_cell__Frdy * var_cell__FoRT * ((0.34100000000000003 * var_cell__sCaj * exp(2.0 * var_cell__sVm * var_cell__FoRT)) - (0.34100000000000003 * var_cell__Cao))) / (exp(2.0 * var_cell__sVm * var_cell__FoRT) - 1.0); // dimensionless
        const double var_cell__ibarca_sl = (var_cell__pCa * 4.0 * var_cell__sVm * var_cell__Frdy * var_cell__FoRT * ((0.34100000000000003 * var_cell__sCasl * exp(2.0 * var_cell__sVm * var_cell__FoRT)) - (0.34100000000000003 * var_cell__Cao))) / (exp(2.0 * var_cell__sVm * var_cell__FoRT) - 1.0); // dimensionless
        const double var_cell__ibarna_j = (var_cell__pNa * var_cell__sVm * var_cell__Frdy * var_cell__FoRT * ((0.75 * var_cell__sNaj * exp(var_cell__sVm * var_cell__FoRT)) - (0.75 * var_cell__Nao))) / (exp(var_cell__sVm * var_cell__FoRT) - 1.0); // dimensionless
        const double var_cell__ibarna_sl = (var_cell__pNa * var_cell__sVm * var_cell__Frdy * var_cell__FoRT * ((0.75 * var_cell__sNasl * exp(var_cell__sVm * var_cell__FoRT)) - (0.75 * var_cell__Nao))) / (exp(var_cell__sVm * var_cell__FoRT) - 1.0); // dimensionless
        const double var_cell__I_Ca_junc = var_cell__Fjunc_CaL * var_cell__ibarca_j * var_cell__sd * var_cell__sf * ((1.0 - var_cell__sfcaBj) + var_cell__fcaCaj) * pow(var_cell__Q10CaL, var_cell__Qpow) * 0.45000000000000001 * 1.0; // dimensionless
        const double var_cell__I_Ca_sl = var_cell__Fsl_CaL * var_cell__ibarca_sl * var_cell__sd * var_cell__sf * ((1.0 - var_cell__sfcaBsl) + var_cell__fcaCaMSL) * pow(var_cell__Q10CaL, var_cell__Qpow) * 0.45000000000000001 * 1.0; // dimensionless
        const double var_cell__I_CaNa_junc = var_cell__Fjunc_CaL * var_cell__ibarna_j * var_cell__sd * var_cell__sf * ((1.0 - var_cell__sfcaBj) + var_cell__fcaCaj) * pow(var_cell__Q10CaL, var_cell__Qpow) * 0.45000000000000001 * 1.0; // dimensionless
        const double var_cell__I_CaNa_sl = var_cell__Fsl_CaL * var_cell__ibarna_sl * var_cell__sd * var_cell__sf * ((1.0 - var_cell__sfcaBsl) + var_cell__fcaCaMSL) * pow(var_cell__Q10CaL, var_cell__Qpow) * 0.45000000000000001 * 1.0; // dimensionless
        const double var_cell__Ka_junc = 1.0 / (1.0 + pow(var_cell__Kdact / var_cell__sCaj, 2.0)); // dimensionless
        const double var_cell__Ka_sl = 1.0 / (1.0 + pow(var_cell__Kdact / var_cell__sCasl, 2.0)); // dimensionless
        const double var_cell__s1_junc = exp(var_cell__nu * var_cell__sVm * var_cell__FoRT) * pow(var_cell__sNaj, 3.0) * var_cell__Cao; // dimensionless
        const double var_cell__s1_sl = exp(var_cell__nu * var_cell__sVm * var_cell__FoRT) * pow(var_cell__sNasl, 3.0) * var_cell__Cao; // dimensionless
        const double var_cell__s2_junc = exp((var_cell__nu - 1.0) * var_cell__sVm * var_cell__FoRT) * pow(var_cell__Nao, 3.0) * var_cell__sCaj; // dimensionless
        const double var_cell__s3_junc = (var_cell__KmCai * pow(var_cell__Nao, 3.0) * (1.0 + pow(var_cell__sNaj / var_cell__KmNai, 3.0))) + (pow(var_cell__KmNao, 3.0) * var_cell__sCaj * (1.0 + (var_cell__sCaj / var_cell__KmCai))) + (var_cell__KmCao * pow(var_cell__sNaj, 3.0)) + (pow(var_cell__sNaj, 3.0) * var_cell__Cao) + (pow(var_cell__Nao, 3.0) * var_cell__sCaj); // dimensionless
        const double var_cell__s2_sl = exp((var_cell__nu - 1.0) * var_cell__sVm * var_cell__FoRT) * pow(var_cell__Nao, 3.0) * var_cell__sCasl; // dimensionless
        const double var_cell__s3_sl = (var_cell__KmCai * pow(var_cell__Nao, 3.0) * (1.0 + pow(var_cell__sNasl / var_cell__KmNai, 3.0))) + (pow(var_cell__KmNao, 3.0) * var_cell__sCasl * (1.0 + (var_cell__sCasl / var_cell__KmCai))) + (var_cell__KmCao * pow(var_cell__sNasl, 3.0)) + (pow(var_cell__sNasl, 3.0) * var_cell__Cao) + (pow(var_cell__Nao, 3.0) * var_cell__sCasl); // dimensionless
        const double var_cell__I_ncx_junc = ((var_cell__Fjunc * var_cell__IbarNCX * pow(var_cell__Q10NCX, var_cell__Qpow) * var_cell__Ka_junc * (var_cell__s1_junc - var_cell__s2_junc)) / var_cell__s3_junc) / (1.0 + (var_cell__ksat * exp((var_cell__nu - 1.0) * var_cell__sVm * var_cell__FoRT))); // dimensionless
        const double var_cell__I_ncx_sl = ((var_cell__Fsl * var_cell__IbarNCX * pow(var_cell__Q10NCX, var_cell__Qpow) * var_cell__Ka_sl * (var_cell__s1_sl - var_cell__s2_sl)) / var_cell__s3_sl) / (1.0 + (var_cell__ksat * exp((var_cell__nu - 1.0) * var_cell__sVm * var_cell__FoRT))); // dimensionless
        const double var_cell__I_pca_junc = (var_cell__Fjunc * pow(var_cell__Q10SLCaP, var_cell__Qpow) * var_cell__IbarSLCaP * pow(var_cell__sCaj, 1.6000000000000001)) / (pow(var_cell__KmPCa, 1.6000000000000001) + pow(var_cell__sCaj, 1.6000000000000001)); // dimensionless
        const double var_cell__I_pca_sl = (var_cell__Fsl * pow(var_cell__Q10SLCaP, var_cell__Qpow) * var_cell__IbarSLCaP * pow(var_cell__sCasl, 1.6000000000000001)) / (pow(var_cell__KmPCa, 1.6000000000000001) + pow(var_cell__sCasl, 1.6000000000000001)); // dimensionless
        const double var_cell__I_cabk_junc = var_cell__Fjunc * var_cell__GCaB * (var_cell__sVm - var_cell__eca_junc); // dimensionless
        const double var_cell__I_cabk_sl = var_cell__Fsl * var_cell__GCaB * (var_cell__sVm - var_cell__eca_sl); // dimensionless
        const double var_cell__MaxSR = 15.0; // dimensionless
        const double var_cell__MinSR = 1.0; // dimensionless
        const double var_cell__kCaSR = var_cell__MaxSR - ((var_cell__MaxSR - var_cell__MinSR) / (1.0 + pow(var_cell__ec50SR / var_cell__sCa_sr, 2.5))); // dimensionless
        const double var_cell__koSRCa = var_cell__koCa / var_cell__kCaSR; // dimensionless
        const double var_cell__kiSRCa = var_cell__kiCa * var_cell__kCaSR; // dimensionless
        const double var_cell__RI = ((1.0 - var_cell__sRyRr) - var_cell__sRyRo) - var_cell__sRyRi; // dimensionless
        const double var_cell__J_SRCarel = var_cell__ks * var_cell__sRyRo * (var_cell__sCa_sr - var_cell__sCaj); // dimensionless
        const double var_cell__J_serca = (1.0 * pow(var_cell__Q10SRCaP, var_cell__Qpow) * var_cell__Vmax_SRCaP * (pow(var_cell__sCai / var_cell__Kmf, var_cell__hillSRCaP) - pow(var_cell__sCa_sr / var_cell__Kmr, var_cell__hillSRCaP))) / (1.0 + pow(var_cell__sCai / var_cell__Kmf, var_cell__hillSRCaP) + pow(var_cell__sCa_sr / var_cell__Kmr, var_cell__hillSRCaP)); // dimensionless
        const double var_cell__J_SRleak = 5.3480000000000003e-06 * (var_cell__sCa_sr - var_cell__sCaj); // dimensionless
        const double var_cell__I_Na_tot_junc = var_cell__I_Na_junc + var_cell__I_nabk_junc + (3.0 * var_cell__I_ncx_junc) + (3.0 * var_cell__I_nak_junc) + var_cell__I_CaNa_junc; // dimensionless
        const double var_cell__I_Na_tot_sl = var_cell__I_Na_sl + var_cell__I_nabk_sl + (3.0 * var_cell__I_ncx_sl) + (3.0 * var_cell__I_nak_sl) + var_cell__I_CaNa_sl; // dimensionless
        const double var_cell__I_Ca_tot_junc = (var_cell__I_Ca_junc + var_cell__I_cabk_junc + var_cell__I_pca_junc) - (2.0 * var_cell__I_ncx_junc); // dimensionless
        const double var_cell__I_Ca_tot_sl = (var_cell__I_Ca_sl + var_cell__I_cabk_sl + var_cell__I_pca_sl) - (2.0 * var_cell__I_ncx_sl); // dimensionless
        const double var_cell__d_sSLHj_d_cell__time = (var_cell__kon_slh * var_cell__sCaj * (var_cell__Bmax_SLhighj - var_cell__sSLHj)) - (var_cell__koff_slh * var_cell__sSLHj); // 'per millisecond'
        const double var_cell__d_sSLLj_d_cell__time = (var_cell__kon_sll * var_cell__sCaj * (var_cell__Bmax_SLlowj - var_cell__sSLLj)) - (var_cell__koff_sll * var_cell__sSLLj); // 'per millisecond'
        const double var_cell__J_CaB_junction = var_cell__d_sSLLj_d_cell__time + var_cell__d_sSLHj_d_cell__time; // dimensionless
        const double var_cell__d_sSRB_d_cell__time = (var_cell__kon_sr * var_cell__sCai * (var_cell__Bmax_SR - var_cell__sSRB)) - (var_cell__koff_sr * var_cell__sSRB); // 'per millisecond'
        const double var_cell__d_sTnCL_d_cell__time = (var_cell__kon_tncl * var_cell__sCai * (var_cell__Bmax_TnClow - var_cell__sTnCL)) - (var_cell__koff_tncl * var_cell__sTnCL); // 'per millisecond'
        const double var_cell__d_sCaM_d_cell__time = (var_cell__kon_cam * var_cell__sCai * (var_cell__Bmax_CaM - var_cell__sCaM)) - (var_cell__koff_cam * var_cell__sCaM); // 'per millisecond'
        const double var_cell__d_sMyom_d_cell__time = (var_cell__kon_myomg * var_cell__Mgi * ((var_cell__Bmax_myosin - var_cell__sMyoc) - var_cell__sMyom)) - (var_cell__koff_myomg * var_cell__sMyom); // 'per millisecond'
        const double var_cell__d_sTnCHm_d_cell__time = (var_cell__kon_tnchmg * var_cell__Mgi * ((var_cell__Bmax_TnChigh - var_cell__sTnCHc) - var_cell__sTnCHm)) - (var_cell__koff_tnchmg * var_cell__sTnCHm); // 'per millisecond'
        const double var_cell__d_sTnCHc_d_cell__time = (var_cell__kon_tnchca * var_cell__sCai * ((var_cell__Bmax_TnChigh - var_cell__sTnCHc) - var_cell__sTnCHm)) - (var_cell__koff_tnchca * var_cell__sTnCHc); // 'per millisecond'
        const double var_cell__d_sMyoc_d_cell__time = (var_cell__kon_myoca * var_cell__sCai * ((var_cell__Bmax_myosin - var_cell__sMyoc) - var_cell__sMyom)) - (var_cell__koff_myoca * var_cell__sMyoc); // 'per millisecond'
        const double var_cell__J_CaB_cytosol = var_cell__d_sTnCL_d_cell__time + var_cell__d_sTnCHc_d_cell__time + var_cell__d_sTnCHm_d_cell__time + var_cell__d_sCaM_d_cell__time + var_cell__d_sMyoc_d_cell__time + var_cell__d_sMyom_d_cell__time + var_cell__d_sSRB_d_cell__time; // dimensionless
        const double var_cell__d_sSLLsl_d_cell__time = (var_cell__kon_sll * var_cell__sCasl * (var_cell__Bmax_SLlowsl - var_cell__sSLLsl)) - (var_cell__koff_sll * var_cell__sSLLsl); // 'per millisecond'
        const double var_cell__d_sSLHsl_d_cell__time = (var_cell__kon_slh * var_cell__sCasl * (var_cell__Bmax_SLhighsl - var_cell__sSLHsl)) - (var_cell__koff_slh * var_cell__sSLHsl); // 'per millisecond'
        const double var_cell__J_CaB_sl = var_cell__d_sSLLsl_d_cell__time + var_cell__d_sSLHsl_d_cell__time; // dimensionless
        const double var_cell__d_sm_d_cell__time = (var_cell__mss - var_cell__sm) / var_cell__taum; // 'per millisecond'
        const double var_cell__d_sh_d_cell__time = (var_cell__hss - var_cell__sh) / var_cell__tauh; // 'per millisecond'
        const double var_cell__d_sj_d_cell__time = (var_cell__jss - var_cell__sj) / var_cell__tauj; // 'per millisecond'
        const double var_cell__d_sd_d_cell__time = (var_cell__dss - var_cell__sd) / var_cell__taud; // 'per millisecond'
        const double var_cell__d_sf_d_cell__time = (var_cell__fss - var_cell__sf) / var_cell__tauf; // 'per millisecond'
        const double var_cell__d_sfcaBj_d_cell__time = (1.7 * var_cell__sCaj * (1.0 - var_cell__sfcaBj)) - (0.011900000000000001 * var_cell__sfcaBj); // 'per millisecond'
        const double var_cell__d_sfcaBsl_d_cell__time = (1.7 * var_cell__sCasl * (1.0 - var_cell__sfcaBsl)) - (0.011900000000000001 * var_cell__sfcaBsl); // 'per millisecond'
        const double var_cell__d_sxtos_d_cell__time = (var_cell__xtoss - var_cell__sxtos) / var_cell__tauxtos; // 'per millisecond'
        const double var_cell__d_sytos_d_cell__time = (var_cell__ytoss - var_cell__sytos) / var_cell__tauytos; // 'per millisecond'
        const double var_cell__d_sxtof_d_cell__time = (var_cell__xtoss - var_cell__sxtof) / var_cell__tauxtof; // 'per millisecond'
        const double var_cell__d_sytof_d_cell__time = (var_cell__ytoss - var_cell__sytof) / var_cell__tauytof; // 'per millisecond'
        const double var_cell__d_sxkr_d_cell__time = (var_cell__xrss - var_cell__sxkr) / var_cell__tauxr; // 'per millisecond'
        const double var_cell__d_sxks_d_cell__time = (var_cell__xsss - var_cell__sxks) / var_cell__tauxs; // 'per millisecond'
        const double var_cell__d_sRyRr_d_cell__time = ((var_cell__kim * var_cell__RI) - (var_cell__kiSRCa * var_cell__sCaj * var_cell__sRyRr)) - ((var_cell__koSRCa * pow(var_cell__sCaj, 2.0) * var_cell__sRyRr) - (var_cell__kom * var_cell__sRyRo)); // 'per millisecond'
        const double var_cell__d_sRyRo_d_cell__time = ((var_cell__koSRCa * pow(var_cell__sCaj, 2.0) * var_cell__sRyRr) - (var_cell__kom * var_cell__sRyRo)) - ((var_cell__kiSRCa * var_cell__sCaj * var_cell__sRyRo) - (var_cell__kim * var_cell__sRyRi)); // 'per millisecond'
        const double var_cell__d_sRyRi_d_cell__time = ((var_cell__kiSRCa * var_cell__sCaj * var_cell__sRyRo) - (var_cell__kim * var_cell__sRyRi)) - ((var_cell__kom * var_cell__sRyRi) - (var_cell__koSRCa * pow(var_cell__sCaj, 2.0) * var_cell__RI)); // 'per millisecond'
        const double var_cell__d_sNaBj_d_cell__time = (var_cell__kon_na * var_cell__sNaj * (var_cell__Bmax_Naj - var_cell__sNaBj)) - (var_cell__koff_na * var_cell__sNaBj); // 'per millisecond'
        const double var_cell__d_sNaBsl_d_cell__time = (var_cell__kon_na * var_cell__sNasl * (var_cell__Bmax_Nasl - var_cell__sNaBsl)) - (var_cell__koff_na * var_cell__sNaBsl); // 'per millisecond'
        const double var_cell__d_sCsqnb_d_cell__time = (var_cell__kon_csqn * var_cell__sCa_sr * (var_cell__Bmax_Csqn - var_cell__sCsqnb)) - (var_cell__koff_csqn * var_cell__sCsqnb); // 'per millisecond'
        const double var_cell__d_sCa_sr_d_cell__time = (var_cell__J_serca - (((var_cell__J_SRleak * var_cell__Vmyo) / var_cell__Vsr) + var_cell__J_SRCarel)) - var_cell__d_sCsqnb_d_cell__time; // 'per millisecond'
        const double var_cell__d_sNaj_d_cell__time = ((((-var_cell__I_Na_tot_junc) * var_cell__Cmem) / (var_cell__Vjunc * var_cell__Frdy)) + ((var_cell__J_na_juncsl / var_cell__Vjunc) * (var_cell__sNasl - var_cell__sNaj))) - var_cell__d_sNaBj_d_cell__time; // 'per millisecond'
        const double var_cell__d_sNasl_d_cell__time = ((((-var_cell__I_Na_tot_sl) * var_cell__Cmem) / (var_cell__Vsl * var_cell__Frdy)) + ((var_cell__J_na_juncsl / var_cell__Vsl) * (var_cell__sNaj - var_cell__sNasl)) + ((var_cell__J_na_slmyo / var_cell__Vsl) * (var_cell__sNai - var_cell__sNasl))) - var_cell__d_sNaBsl_d_cell__time; // 'per millisecond'
        const double var_cell__d_sNai_d_cell__time = (var_cell__J_na_slmyo / var_cell__Vmyo) * (var_cell__sNasl - var_cell__sNai); // 'per millisecond'
        const double var_cell__d_sCaj_d_cell__time = (((((-var_cell__I_Ca_tot_junc) * var_cell__Cmem) / (var_cell__Vjunc * 2.0 * var_cell__Frdy)) + ((var_cell__J_ca_juncsl / var_cell__Vjunc) * (var_cell__sCasl - var_cell__sCaj))) - var_cell__J_CaB_junction) + ((var_cell__J_SRCarel * var_cell__Vsr) / var_cell__Vjunc) + ((var_cell__J_SRleak * var_cell__Vmyo) / var_cell__Vjunc); // 'per millisecond'
        const double var_cell__d_sCasl_d_cell__time = ((((-var_cell__I_Ca_tot_sl) * var_cell__Cmem) / (var_cell__Vsl * 2.0 * var_cell__Frdy)) + ((var_cell__J_ca_juncsl / var_cell__Vsl) * (var_cell__sCaj - var_cell__sCasl)) + ((var_cell__J_ca_slmyo / var_cell__Vsl) * (var_cell__sCai - var_cell__sCasl))) - var_cell__J_CaB_sl; // 'per millisecond'
        const double var_cell__d_sCai_d_cell__time = ((((-var_cell__J_serca) * var_cell__Vsr) / var_cell__Vmyo) - var_cell__J_CaB_cytosol) + ((var_cell__J_ca_slmyo / var_cell__Vmyo) * (var_cell__sCasl - var_cell__sCai)); // 'per millisecond'
        const double var_chaste_interface__cell__d_sm_d_cell__time = var_cell__d_sm_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sh_d_cell__time = var_cell__d_sh_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sj_d_cell__time = var_cell__d_sj_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sd_d_cell__time = var_cell__d_sd_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sf_d_cell__time = var_cell__d_sf_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sfcaBj_d_cell__time = var_cell__d_sfcaBj_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sfcaBsl_d_cell__time = var_cell__d_sfcaBsl_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sxtos_d_cell__time = var_cell__d_sxtos_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sytos_d_cell__time = var_cell__d_sytos_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sxtof_d_cell__time = var_cell__d_sxtof_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sytof_d_cell__time = var_cell__d_sytof_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sxkr_d_cell__time = var_cell__d_sxkr_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sxks_d_cell__time = var_cell__d_sxks_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sRyRr_d_cell__time = var_cell__d_sRyRr_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sRyRo_d_cell__time = var_cell__d_sRyRo_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sRyRi_d_cell__time = var_cell__d_sRyRi_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sNaBj_d_cell__time = var_cell__d_sNaBj_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sNaBsl_d_cell__time = var_cell__d_sNaBsl_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sTnCL_d_cell__time = var_cell__d_sTnCL_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sTnCHc_d_cell__time = var_cell__d_sTnCHc_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sTnCHm_d_cell__time = var_cell__d_sTnCHm_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sCaM_d_cell__time = var_cell__d_sCaM_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sMyoc_d_cell__time = var_cell__d_sMyoc_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sMyom_d_cell__time = var_cell__d_sMyom_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sSRB_d_cell__time = var_cell__d_sSRB_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sSLLj_d_cell__time = var_cell__d_sSLLj_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sSLLsl_d_cell__time = var_cell__d_sSLLsl_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sSLHj_d_cell__time = var_cell__d_sSLHj_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sSLHsl_d_cell__time = var_cell__d_sSLHsl_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sCsqnb_d_cell__time = var_cell__d_sCsqnb_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sCa_sr_d_cell__time = var_cell__d_sCa_sr_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sNaj_d_cell__time = var_cell__d_sNaj_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sNasl_d_cell__time = var_cell__d_sNasl_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sNai_d_cell__time = var_cell__d_sNai_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sCaj_d_cell__time = var_cell__d_sCaj_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sCasl_d_cell__time = var_cell__d_sCasl_d_cell__time; // ___units_3
        const double var_chaste_interface__cell__d_sCai_d_cell__time = var_cell__d_sCai_d_cell__time; // ___units_3
        const double d_dt_chaste_interface__cell__sm = var_chaste_interface__cell__d_sm_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sh = var_chaste_interface__cell__d_sh_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sj = var_chaste_interface__cell__d_sj_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sd = var_chaste_interface__cell__d_sd_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sf = var_chaste_interface__cell__d_sf_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sfcaBj = var_chaste_interface__cell__d_sfcaBj_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sfcaBsl = var_chaste_interface__cell__d_sfcaBsl_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sxtos = var_chaste_interface__cell__d_sxtos_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sytos = var_chaste_interface__cell__d_sytos_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sxtof = var_chaste_interface__cell__d_sxtof_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sytof = var_chaste_interface__cell__d_sytof_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sxkr = var_chaste_interface__cell__d_sxkr_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sxks = var_chaste_interface__cell__d_sxks_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sRyRr = var_chaste_interface__cell__d_sRyRr_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sRyRo = var_chaste_interface__cell__d_sRyRo_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sRyRi = var_chaste_interface__cell__d_sRyRi_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sNaBj = var_chaste_interface__cell__d_sNaBj_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sNaBsl = var_chaste_interface__cell__d_sNaBsl_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sTnCL = var_chaste_interface__cell__d_sTnCL_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sTnCHc = var_chaste_interface__cell__d_sTnCHc_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sTnCHm = var_chaste_interface__cell__d_sTnCHm_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sCaM = var_chaste_interface__cell__d_sCaM_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sMyoc = var_chaste_interface__cell__d_sMyoc_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sMyom = var_chaste_interface__cell__d_sMyom_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sSRB = var_chaste_interface__cell__d_sSRB_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sSLLj = var_chaste_interface__cell__d_sSLLj_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sSLLsl = var_chaste_interface__cell__d_sSLLsl_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sSLHj = var_chaste_interface__cell__d_sSLHj_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sSLHsl = var_chaste_interface__cell__d_sSLHsl_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sCsqnb = var_chaste_interface__cell__d_sCsqnb_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sCa_sr = var_chaste_interface__cell__d_sCa_sr_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sNaj = var_chaste_interface__cell__d_sNaj_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sNasl = var_chaste_interface__cell__d_sNasl_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sNai = var_chaste_interface__cell__d_sNai_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sCaj = var_chaste_interface__cell__d_sCaj_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sCasl = var_chaste_interface__cell__d_sCasl_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sCai = var_chaste_interface__cell__d_sCai_d_cell__time; // 'per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__cell__sVm = 0.0;
        }
        else
        {
            const double var_cell__chaste_interface__chaste_membrane_capacitance = HeartConfig::Instance()->GetCapacitance(); // uF_per_cm2
            const double var_chaste_interface__cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__cell__time);
            const double var_cell__i_Stim_converter = var_chaste_interface__cell__i_Stim; // uA_per_cm2
            const double var_cell__i_Stim = var_cell__i_Stim_converter / var_cell__chaste_interface__chaste_membrane_capacitance; // uA_per_uF
            const double var_cell__sKi = 120.0; // dimensionless
            const double var_cell__Cli = 15.0; // dimensionless
            const double var_cell__Clo = 150.0; // dimensionless
            const double var_cell__ek = (1.0 / var_cell__FoRT) * log(var_cell__Ko / var_cell__sKi); // dimensionless
            const double var_cell__ecl = (1.0 / var_cell__FoRT) * log(var_cell__Cli / var_cell__Clo); // dimensionless
            const double var_cell__pNaK = 0.018329999999999999; // dimensionless
            const double var_cell__gkp = 2.0 * 0.001; // dimensionless
            const double var_cell__GClCa = 0.5 * 0.109625; // dimensionless
            const double var_cell__GClB = 1.0 * 0.0089999999999999993; // dimensionless
            const double var_cell__KdClCa = 0.10000000000000001; // dimensionless
            const double var_cell__pK = var_cell__G_CaL_mult * 0.5 * 2.7000000000000001e-07; // dimensionless
            const double var_cell__I_nak = var_cell__I_nak_junc + var_cell__I_nak_sl; // dimensionless
            const double var_cell__gkr_mult = 1.0; // dimensionless
            const double var_cell__gkr = var_cell__gkr_mult * 0.035000000000000003 * sqrt(var_cell__Ko / 5.4000000000000004); // dimensionless
            const double var_cell__rkr = 1.0 / (1.0 + exp((var_cell__sVm + 74.0) / 24.0)); // dimensionless
            const double var_cell__I_kr = var_cell__gkr * var_cell__sxkr * var_cell__rkr * (var_cell__sVm - var_cell__ek); // dimensionless
            const double var_cell__eks = (1.0 / var_cell__FoRT) * log((var_cell__Ko + (var_cell__pNaK * var_cell__Nao)) / (var_cell__sKi + (var_cell__pNaK * var_cell__sNai))); // dimensionless
            const double var_cell__gks_junc = 1.0 * 0.0035000000000000001; // dimensionless
            const double var_cell__gks_sl = 1.0 * 0.0035000000000000001; // dimensionless
            const double var_cell__I_ks_junc = var_cell__Fjunc * var_cell__gks_junc * pow(var_cell__sxks, 2.0) * (var_cell__sVm - var_cell__eks); // dimensionless
            const double var_cell__I_ks_sl = var_cell__Fsl * var_cell__gks_sl * pow(var_cell__sxks, 2.0) * (var_cell__sVm - var_cell__eks); // dimensionless
            const double var_cell__I_ks = var_cell__I_ks_junc + var_cell__I_ks_sl; // dimensionless
            const double var_cell__kp_kp = 1.0 / (1.0 + exp(7.4880000000000004 - (var_cell__sVm / 5.9800000000000004))); // dimensionless
            const double var_cell__I_kp_junc = var_cell__Fjunc * var_cell__gkp * var_cell__kp_kp * (var_cell__sVm - var_cell__ek); // dimensionless
            const double var_cell__I_kp_sl = var_cell__Fsl * var_cell__gkp * var_cell__kp_kp * (var_cell__sVm - var_cell__ek); // dimensionless
            const double var_cell__I_kp = var_cell__I_kp_junc + var_cell__I_kp_sl; // dimensionless
            const double var_cell__GtoSlow = 1.0 * 0.13 * 0.12; // dimensionless
            const double var_cell__GtoFast = 1.0 * 0.13 * 0.88; // dimensionless
            const double var_cell__I_tos = var_cell__GtoSlow * var_cell__sxtos * var_cell__sytos * (var_cell__sVm - var_cell__ek); // dimensionless
            const double var_cell__I_tof = var_cell__GtoFast * var_cell__sxtof * var_cell__sytof * (var_cell__sVm - var_cell__ek); // dimensionless
            const double var_cell__I_to = var_cell__I_tos + var_cell__I_tof; // dimensionless
            const double var_cell__aki = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_cell__sVm - var_cell__ek) - 59.215000000000003))); // dimensionless
            const double var_cell__bki = ((0.49124000000000001 * exp(0.080320000000000003 * ((var_cell__sVm + 5.476) - var_cell__ek))) + exp(0.061749999999999999 * ((var_cell__sVm - var_cell__ek) - 594.30999999999995))) / (1.0 + exp((-0.51429999999999998) * ((var_cell__sVm - var_cell__ek) + 4.7530000000000001))); // dimensionless
            const double var_cell__kiss = var_cell__aki / (var_cell__aki + var_cell__bki); // dimensionless
            const double var_cell__I_ki = 1.0 * 0.34999999999999998 * sqrt(var_cell__Ko / 5.4000000000000004) * var_cell__kiss * (var_cell__sVm - var_cell__ek); // dimensionless
            const double var_cell__I_ClCa_junc = ((var_cell__Fjunc * var_cell__GClCa) / (1.0 + (var_cell__KdClCa / var_cell__sCaj))) * (var_cell__sVm - var_cell__ecl); // dimensionless
            const double var_cell__I_ClCa_sl = ((var_cell__Fsl * var_cell__GClCa) / (1.0 + (var_cell__KdClCa / var_cell__sCasl))) * (var_cell__sVm - var_cell__ecl); // dimensionless
            const double var_cell__I_ClCa = var_cell__I_ClCa_junc + var_cell__I_ClCa_sl; // dimensionless
            const double var_cell__I_Clbk = var_cell__GClB * (var_cell__sVm - var_cell__ecl); // dimensionless
            const double var_cell__ibark = (var_cell__pK * var_cell__sVm * var_cell__Frdy * var_cell__FoRT * ((0.75 * var_cell__sKi * exp(var_cell__sVm * var_cell__FoRT)) - (0.75 * var_cell__Ko))) / (exp(var_cell__sVm * var_cell__FoRT) - 1.0); // dimensionless
            const double var_cell__I_CaK = var_cell__ibark * var_cell__sd * var_cell__sf * ((var_cell__Fjunc_CaL * (var_cell__fcaCaj + (1.0 - var_cell__sfcaBj))) + (var_cell__Fsl_CaL * (var_cell__fcaCaMSL + (1.0 - var_cell__sfcaBsl)))) * pow(var_cell__Q10CaL, var_cell__Qpow) * 0.45000000000000001 * 1.0; // dimensionless
            const double var_cell__I_K_tot = ((var_cell__I_to + var_cell__I_kr + var_cell__I_ks + var_cell__I_ki) - (2.0 * var_cell__I_nak)) + var_cell__I_CaK + var_cell__I_kp; // dimensionless
            const double var_cell__I_Na_tot = var_cell__I_Na_tot_junc + var_cell__I_Na_tot_sl; // dimensionless
            const double var_cell__I_Cl_tot = var_cell__I_ClCa + var_cell__I_Clbk; // dimensionless
            const double var_cell__I_Ca_tot = var_cell__I_Ca_tot_junc + var_cell__I_Ca_tot_sl; // dimensionless
            const double var_cell__I_tot = var_cell__I_Na_tot + var_cell__I_Cl_tot + var_cell__I_Ca_tot + var_cell__I_K_tot; // uA_per_uF
            const double var_cell__d_sVm_d_cell__time = -(var_cell__I_tot + var_cell__i_Stim); // 'millivolt per millisecond'
            const double var_chaste_interface__cell__d_sVm_d_cell__time = var_cell__d_sVm_d_cell__time; // ___units_4
            d_dt_chaste_interface__cell__sVm = var_chaste_interface__cell__d_sVm_d_cell__time; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__cell__sVm;
        rDY[1] = d_dt_chaste_interface__cell__sm;
        rDY[2] = d_dt_chaste_interface__cell__sh;
        rDY[3] = d_dt_chaste_interface__cell__sj;
        rDY[4] = d_dt_chaste_interface__cell__sd;
        rDY[5] = d_dt_chaste_interface__cell__sf;
        rDY[6] = d_dt_chaste_interface__cell__sfcaBj;
        rDY[7] = d_dt_chaste_interface__cell__sfcaBsl;
        rDY[8] = d_dt_chaste_interface__cell__sxtos;
        rDY[9] = d_dt_chaste_interface__cell__sytos;
        rDY[10] = d_dt_chaste_interface__cell__sxtof;
        rDY[11] = d_dt_chaste_interface__cell__sytof;
        rDY[12] = d_dt_chaste_interface__cell__sxkr;
        rDY[13] = d_dt_chaste_interface__cell__sxks;
        rDY[14] = d_dt_chaste_interface__cell__sRyRr;
        rDY[15] = d_dt_chaste_interface__cell__sRyRo;
        rDY[16] = d_dt_chaste_interface__cell__sRyRi;
        rDY[17] = d_dt_chaste_interface__cell__sNaBj;
        rDY[18] = d_dt_chaste_interface__cell__sNaBsl;
        rDY[19] = d_dt_chaste_interface__cell__sTnCL;
        rDY[20] = d_dt_chaste_interface__cell__sTnCHc;
        rDY[21] = d_dt_chaste_interface__cell__sTnCHm;
        rDY[22] = d_dt_chaste_interface__cell__sCaM;
        rDY[23] = d_dt_chaste_interface__cell__sMyoc;
        rDY[24] = d_dt_chaste_interface__cell__sMyom;
        rDY[25] = d_dt_chaste_interface__cell__sSRB;
        rDY[26] = d_dt_chaste_interface__cell__sSLLj;
        rDY[27] = d_dt_chaste_interface__cell__sSLLsl;
        rDY[28] = d_dt_chaste_interface__cell__sSLHj;
        rDY[29] = d_dt_chaste_interface__cell__sSLHsl;
        rDY[30] = d_dt_chaste_interface__cell__sCsqnb;
        rDY[31] = d_dt_chaste_interface__cell__sCa_sr;
        rDY[32] = d_dt_chaste_interface__cell__sNaj;
        rDY[33] = d_dt_chaste_interface__cell__sNasl;
        rDY[34] = d_dt_chaste_interface__cell__sNai;
        rDY[35] = d_dt_chaste_interface__cell__sCaj;
        rDY[36] = d_dt_chaste_interface__cell__sCasl;
        rDY[37] = d_dt_chaste_interface__cell__sCai;
    }
    
template<>
void OdeSystemInformation<Dynamicgrandi2010ssFromCellML>::Initialise(void)
{
    this->mSystemName = "grandi2010";
    this->mFreeVariableName = "cell__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-81.3842590704928);

    // rY[1]:
    this->mVariableNames.push_back("cell__sm");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00384941567866232);

    // rY[2]:
    this->mVariableNames.push_back("cell__sh");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.623723834301669);

    // rY[3]:
    this->mVariableNames.push_back("cell__sj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.622080736932815);

    // rY[4]:
    this->mVariableNames.push_back("cell__sd");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.95884913218079e-6);

    // rY[5]:
    this->mVariableNames.push_back("cell__sf");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.995094078386247);

    // rY[6]:
    this->mVariableNames.push_back("cell__sfcaBj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0246274349529557);

    // rY[7]:
    this->mVariableNames.push_back("cell__sfcaBsl");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0150911724206476);

    // rY[8]:
    this->mVariableNames.push_back("cell__sxtos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000442853722673121);

    // rY[9]:
    this->mVariableNames.push_back("cell__sytos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.789013894749951);

    // rY[10]:
    this->mVariableNames.push_back("cell__sxtof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000442846429332686);

    // rY[11]:
    this->mVariableNames.push_back("cell__sytof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999995784674368);

    // rY[12]:
    this->mVariableNames.push_back("cell__sxkr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.020160578118589);

    // rY[13]:
    this->mVariableNames.push_back("cell__sxks");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00430143235332308);

    // rY[14]:
    this->mVariableNames.push_back("cell__sRyRr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.893326456705696);

    // rY[15]:
    this->mVariableNames.push_back("cell__sRyRo");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(7.56436968249499e-7);

    // rY[16]:
    this->mVariableNames.push_back("cell__sRyRi");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(9.03266331737064e-8);

    // rY[17]:
    this->mVariableNames.push_back("cell__sNaBj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.41097946062695);

    // rY[18]:
    this->mVariableNames.push_back("cell__sNaBsl");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.744248540671373);

    // rY[19]:
    this->mVariableNames.push_back("cell__sTnCL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00904644567707666);

    // rY[20]:
    this->mVariableNames.push_back("cell__sTnCHc");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.1183943202639);

    // rY[21]:
    this->mVariableNames.push_back("cell__sTnCHm");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0101423649465603);

    // rY[22]:
    this->mVariableNames.push_back("cell__sCaM");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000299824763475116);

    // rY[23]:
    this->mVariableNames.push_back("cell__sMyoc");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00201443980536826);

    // rY[24]:
    this->mVariableNames.push_back("cell__sMyom");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.137467597337588);

    // rY[25]:
    this->mVariableNames.push_back("cell__sSRB");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00220110816535249);

    // rY[26]:
    this->mVariableNames.push_back("cell__sSLLj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00739549938515031);

    // rY[27]:
    this->mVariableNames.push_back("cell__sSLLsl");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00979616077807075);

    // rY[28]:
    this->mVariableNames.push_back("cell__sSLHj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0735225248399363);

    // rY[29]:
    this->mVariableNames.push_back("cell__sSLHsl");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.113642236788144);

    // rY[30]:
    this->mVariableNames.push_back("cell__sCsqnb");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.20762712858574);

    // rY[31]:
    this->mVariableNames.push_back("cell__sCa_sr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.563755421404699);

    // rY[32]:
    this->mVariableNames.push_back("cell__sNaj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.21411036389602);

    // rY[33]:
    this->mVariableNames.push_back("cell__sNasl");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.21322794157889);

    // rY[34]:
    this->mVariableNames.push_back("cell__sNai");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.21340895351653);

    // rY[35]:
    this->mVariableNames.push_back("cell__sCaj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000175648385857736);

    // rY[36]:
    this->mVariableNames.push_back("cell__sCasl");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000105614570409386);

    // rY[37]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.85230799863012e-5);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamicgrandi2010ssFromCellML)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamicgrandi2010ssFromCellML(pSolver, pStimulus);
    }
    
}

