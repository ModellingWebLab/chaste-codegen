//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: LivshitzRudy2007
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on Fri Nov 29 17:02:42 2019
//! 
//! <autogenerated>

#include "livshitz_rudy_2007.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Dynamiclivshitz_rudy_2007FromCellML::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_offset = 100.0; // millisecond
        const double var_chaste_interface__cell__stim_period = 400.0; // millisecond
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_cell__stim_amplitude =  -15.0; // uA_per_uF
        const double var_chaste_interface__cell__stim_amplitude_converter = var_cell__stim_amplitude; // uA_per_uF
        const double var_chaste_interface__cell__stim_amplitude = var_chaste_interface__cell__stim_amplitude_converter * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    Dynamiclivshitz_rudy_2007FromCellML::Dynamiclivshitz_rudy_2007FromCellML(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                18,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamiclivshitz_rudy_2007FromCellML>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
    }
    
    Dynamiclivshitz_rudy_2007FromCellML::~Dynamiclivshitz_rudy_2007FromCellML()
    {
    }
    
    double Dynamiclivshitz_rudy_2007FromCellML::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -89.4356034692784
        double var_chaste_interface__INa__H = rY[1];
        // Units: dimensionless; Initial value: 0.994401369032678
        double var_chaste_interface__INa__m = rY[2];
        // Units: dimensionless; Initial value: 0.000734780346592185
        double var_chaste_interface__INa__J = rY[3];
        // Units: dimensionless; Initial value: 0.996100688673679
        double var_chaste_interface__ICaL__d = rY[4];
        // Units: dimensionless; Initial value: 3.2514786721066e-27
        double var_chaste_interface__ICaL__f = rY[5];
        // Units: dimensionless; Initial value: 0.997404948824816
        double var_chaste_interface__IKr__xr = rY[6];
        // Units: dimensionless; Initial value: 0.000162194715543637
        double var_chaste_interface__IKs__xs1 = rY[7];
        // Units: dimensionless; Initial value: 0.0285147332973946
        double var_chaste_interface__IKs__xs2 = rY[8];
        // Units: dimensionless; Initial value: 0.0764114040188678
        double var_chaste_interface__ICaT__b = rY[9];
        // Units: dimensionless; Initial value: 0.000927461915392873
        double var_chaste_interface__ICaT__g = rY[10];
        // Units: dimensionless; Initial value: 0.952834331760863
        double var_chaste_interface__Na__Na_i = rY[12];
        // Units: mM; Initial value: 16.612739313555
        double var_chaste_interface__K__K_i = rY[13];
        // Units: mM; Initial value: 139.730914103161
        double var_chaste_interface__Ca__Ca_T = rY[14];
        // Units: mM; Initial value: 0.0257059808595638
        
        const double var_Environment__F = 96485.0; // C_per_mole
        const double var_Environment__R = 8314.0; // mJ_per_mole_K
        const double var_Environment__Temp = 310.0; // kelvin
        const double var_Environment__FonRT = (var_Environment__F / var_Environment__Temp) / var_Environment__R; // per_mV
        const double var_Environment__K_o = 4.5; // mM
        const double var_Environment__Na_o = 140.0; // mM
        const double var_Environment__Ca_o = 1.8; // mM
        const double var_ICaL__d = var_chaste_interface__ICaL__d; // dimensionless
        const double var_ICaL__Ca_o = var_Environment__Ca_o; // mM
        const double var_ICaL__V = var_chaste_interface__cell__V; // mV
        const double var_ICaL__FonRT = var_Environment__FonRT; // per_mV
        const double var_Ca__kmtrpn = 0.00050000000000000001; // mM
        const double var_Ca__kmcmdn = 0.0023800000000000002; // mM
        const double var_Ca__Ca_T = var_chaste_interface__Ca__Ca_T; // mM
        const double var_Ca__cmdnbar = 0.050000000000000003; // mM
        const double var_Ca__trpnbar = 0.070000000000000007; // mM
        const double var_Ca__bmyo = ((var_Ca__cmdnbar + var_Ca__trpnbar) - var_Ca__Ca_T) + var_Ca__kmtrpn + var_Ca__kmcmdn; // mM
        const double var_Ca__cmyo = ((var_Ca__kmcmdn * var_Ca__kmtrpn) - (var_Ca__Ca_T * (var_Ca__kmtrpn + var_Ca__kmcmdn))) + (var_Ca__trpnbar * var_Ca__kmcmdn) + (var_Ca__cmdnbar * var_Ca__kmtrpn); // mM2
        const double var_Ca__dmyo = (-var_Ca__kmtrpn) * var_Ca__kmcmdn * var_Ca__Ca_T; // mM3
        const double var_Ca__Ca_i = (((2.0 * sqrt((var_Ca__bmyo * var_Ca__bmyo) - (3.0 * var_Ca__cmyo))) / 3.0) * cos(acos((((9.0 * var_Ca__bmyo * var_Ca__cmyo) - (2.0 * var_Ca__bmyo * var_Ca__bmyo * var_Ca__bmyo)) - (27.0 * var_Ca__dmyo)) / (2.0 * pow((var_Ca__bmyo * var_Ca__bmyo) - (3.0 * var_Ca__cmyo), 1.5))) / 3.0)) - (var_Ca__bmyo / 3.0); // mM
        const double var_ICaL__Ca_i = var_Ca__Ca_i; // mM
        const double var_ICaL__F = var_Environment__F; // C_per_mole
        const double var_ICaL__gacao = 0.34100000000000003; // dimensionless
        const double var_ICaL__gacai = 1.0; // dimensionless
        const double var_ICaL__pca = 0.00054000000000000001; // L_per_F_ms
        const double var_ICaL__ibarca = (var_ICaL__pca * 4.0 * var_ICaL__V * var_ICaL__F * var_ICaL__FonRT * ((var_ICaL__gacai * var_ICaL__Ca_i * exp(2.0 * var_ICaL__V * var_ICaL__FonRT)) - (var_ICaL__gacao * var_ICaL__Ca_o))) / (exp(2.0 * var_ICaL__V * var_ICaL__FonRT) - 1.0); // uA_per_uF
        const double var_ICaL__f = var_chaste_interface__ICaL__f; // dimensionless
        const double var_ICaL__kmca = 0.00059999999999999995; // mM
        const double var_ICaL__fca = 1.0 / (1.0 + (var_ICaL__Ca_i / var_ICaL__kmca)); // dimensionless
        const double var_ICaL__ilca = var_ICaL__d * var_ICaL__f * var_ICaL__fca * var_ICaL__ibarca; // uA_per_uF
        const double var_cell__ilca = var_ICaL__ilca; // uA_per_uF
        const double var_ICab__V = var_chaste_interface__cell__V; // mV
        const double var_ICab__FonRT = var_Environment__FonRT; // per_mV
        const double var_ICab__Ca_o = var_Environment__Ca_o; // mM
        const double var_ICab__Ca_i = var_Ca__Ca_i; // mM
        const double var_ICab__gcab = 0.003016; // mS_per_uF
        const double var_ICab__icab = var_ICab__gcab * (var_ICab__V - (log(var_ICab__Ca_o / var_ICab__Ca_i) / (2.0 * var_ICab__FonRT))); // uA_per_uF
        const double var_cell__icab = var_ICab__icab; // uA_per_uF
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__ibarpca = 1.1499999999999999; // uA_per_uF
        const double var_IpCa__Ca_i = var_Ca__Ca_i; // mM
        const double var_IpCa__ipca = (var_IpCa__ibarpca * var_IpCa__Ca_i) / (var_IpCa__kmpca + var_IpCa__Ca_i); // uA_per_uF
        const double var_cell__ipca = var_IpCa__ipca; // uA_per_uF
        const double var_INaCa__V = var_chaste_interface__cell__V; // mV
        const double var_INaCa__gammas = 0.14999999999999999; // dimensionless
        const double var_INaCa__FonRT = var_Environment__FonRT; // per_mV
        const double var_INaCa__Ca_o = var_Environment__Ca_o; // mM
        const double var_INaCa__Na_o = var_Environment__Na_o; // mM
        const double var_INaCa__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INaCa__Ca_i = var_Ca__Ca_i; // mM
        const double var_INaCa__c1 = 0.00025000000000000001; // uA_per_uF
        const double var_INaCa__c2 = 0.0001; // dimensionless
        const double var_INaCa__inaca = (var_INaCa__c1 * exp((var_INaCa__gammas - 1.0) * var_INaCa__V * var_INaCa__FonRT) * ((exp(var_INaCa__V * var_INaCa__FonRT) * pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o) - (pow(var_INaCa__Na_o, 3.0) * var_INaCa__Ca_i))) / (1.0 + (var_INaCa__c2 * exp((var_INaCa__gammas - 1.0) * var_INaCa__V * var_INaCa__FonRT) * ((exp(var_INaCa__V * var_INaCa__FonRT) * pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o) + (pow(var_INaCa__Na_o, 3.0) * var_INaCa__Ca_i)))); // uA_per_uF
        const double var_cell__inaca = var_INaCa__inaca; // uA_per_uF
        const double var_ICaT__gcat = 0.050000000000000003; // mS_per_uF
        const double var_ICaT__g = var_chaste_interface__ICaT__g; // dimensionless
        const double var_ICaT__b = var_chaste_interface__ICaT__b; // dimensionless
        const double var_ICaT__V = var_chaste_interface__cell__V; // mV
        const double var_reversal_potentials__Ca_o = var_Environment__Ca_o; // mM
        const double var_reversal_potentials__Ca_i = var_Ca__Ca_i; // mM
        const double var_reversal_potentials__FonRT = var_Environment__FonRT; // per_mV
        const double var_reversal_potentials__ECa = (log(var_reversal_potentials__Ca_o / var_reversal_potentials__Ca_i) / 2.0) / var_reversal_potentials__FonRT; // mV
        const double var_ICaT__ECa = var_reversal_potentials__ECa; // mV
        const double var_ICaT__icat = var_ICaT__gcat * var_ICaT__b * var_ICaT__b * var_ICaT__g * (var_ICaT__V - var_ICaT__ECa); // uA_per_uF
        const double var_cell__icat = var_ICaT__icat; // uA_per_uF
        const double var_INa__V = var_chaste_interface__cell__V; // mV
        const double var_INa__GNa = 16.0; // mS_per_uF
        const double var_reversal_potentials__Na_o = var_Environment__Na_o; // mM
        const double var_reversal_potentials__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_reversal_potentials__ENa = log(var_reversal_potentials__Na_o / var_reversal_potentials__Na_i) / var_reversal_potentials__FonRT; // mV
        const double var_INa__ENa = var_reversal_potentials__ENa; // mV
        const double var_INa__m = var_chaste_interface__INa__m; // dimensionless
        const double var_INa__J = var_chaste_interface__INa__J; // dimensionless
        const double var_INa__H = var_chaste_interface__INa__H; // dimensionless
        const double var_INa__ina = var_INa__GNa * var_INa__m * var_INa__m * var_INa__m * var_INa__H * var_INa__J * (var_INa__V - var_INa__ENa); // uA_per_uF
        const double var_cell__ina = var_INa__ina; // uA_per_uF
        const double var_INab__GNab = 0.0040000000000000001; // mS_per_uF
        const double var_INab__ENa = var_reversal_potentials__ENa; // mV
        const double var_INab__V = var_chaste_interface__cell__V; // mV
        const double var_INab__inab = var_INab__GNab * (var_INab__V - var_INab__ENa); // uA_per_uF
        const double var_cell__inab = var_INab__inab; // uA_per_uF
        const double var_ICaL__Na_o = var_Environment__Na_o; // mM
        const double var_ICaL__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_ICaL__ganao = 0.75; // dimensionless
        const double var_ICaL__ganai = 0.75; // dimensionless
        const double var_ICaL__pna = 6.75e-07; // L_per_F_ms
        const double var_ICaL__ibarna = (var_ICaL__pna * var_ICaL__V * var_ICaL__F * var_ICaL__FonRT * ((var_ICaL__ganai * var_ICaL__Na_i * exp(var_ICaL__V * var_ICaL__FonRT)) - (var_ICaL__ganao * var_ICaL__Na_o))) / (exp(var_ICaL__V * var_ICaL__FonRT) - 1.0); // uA_per_uF
        const double var_ICaL__ilcana = var_ICaL__d * var_ICaL__f * var_ICaL__fca * var_ICaL__ibarna; // uA_per_uF
        const double var_cell__ilcana = var_ICaL__ilcana; // uA_per_uF
        const double var_INaK__V = var_chaste_interface__cell__V; // mV
        const double var_INaK__FonRT = var_Environment__FonRT; // per_mV
        const double var_INaK__Na_o = var_Environment__Na_o; // mM
        const double var_INaK__sigma = (exp(var_INaK__Na_o / 67.299999999999997) - 1.0) / 7.0; // dimensionless
        const double var_INaK__fnak = 1.0 / (1.0 + (0.1245 * exp((-0.10000000000000001) * var_INaK__V * var_INaK__FonRT)) + (0.036499999999999998 * var_INaK__sigma * exp((-var_INaK__V) * var_INaK__FonRT))); // dimensionless
        const double var_INaK__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__ibarnak = 2.25; // uA_per_uF
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__K_o = var_Environment__K_o; // mM
        const double var_INaK__inak = ((var_INaK__ibarnak * var_INaK__fnak) / (1.0 + pow(var_INaK__kmnai / var_INaK__Na_i, 2.0))) / (1.0 + (var_INaK__kmko / var_INaK__K_o)); // uA_per_uF
        const double var_cell__inak = var_INaK__inak; // uA_per_uF
        const double var_IKr__K_o = var_Environment__K_o; // mM
        const double var_IKr__V = var_chaste_interface__cell__V; // mV
        const double var_IKr__r = 1.0 / (1.0 + exp((var_IKr__V + 9.0) / 22.399999999999999)); // dimensionless
        const double var_IKr__xr = var_chaste_interface__IKr__xr; // dimensionless
        const double var_reversal_potentials__K_i = var_chaste_interface__K__K_i; // mM
        const double var_reversal_potentials__K_o = var_Environment__K_o; // mM
        const double var_reversal_potentials__EK = log(var_reversal_potentials__K_o / var_reversal_potentials__K_i) / var_reversal_potentials__FonRT; // mV
        const double var_IKr__EK = var_reversal_potentials__EK; // mV
        const double var_IKr__gkrmax = 0.02614; // mS_per_uF
        const double var_IKr__ikr = var_IKr__gkrmax * sqrt(var_IKr__K_o / 5.4000000000000004) * var_IKr__xr * var_IKr__r * (var_IKr__V - var_IKr__EK); // uA_per_uF
        const double var_cell__ikr = var_IKr__ikr; // uA_per_uF
        const double var_IKs__xs2 = var_chaste_interface__IKs__xs2; // dimensionless
        const double var_IKs__Ca_i = var_Ca__Ca_i; // mM
        const double var_IKs__GKsmax = 0.433; // mS_per_uF
        const double var_IKs__gks = var_IKs__GKsmax * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_IKs__Ca_i, 1.3999999999999999)))); // mS_per_uF
        const double var_IKs__xs1 = var_chaste_interface__IKs__xs1; // dimensionless
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((var_reversal_potentials__K_o + (var_reversal_potentials__prnak * var_reversal_potentials__Na_o)) / (var_reversal_potentials__K_i + (var_reversal_potentials__prnak * var_reversal_potentials__Na_i))) / var_reversal_potentials__FonRT; // mV
        const double var_IKs__EKs = var_reversal_potentials__EKs; // mV
        const double var_IKs__V = var_chaste_interface__cell__V; // mV
        const double var_IKs__iks = var_IKs__gks * var_IKs__xs1 * var_IKs__xs2 * (var_IKs__V - var_IKs__EKs); // uA_per_uF
        const double var_cell__iks = var_IKs__iks; // uA_per_uF
        const double var_IK1__EK = var_reversal_potentials__EK; // mV
        const double var_IK1__V = var_chaste_interface__cell__V; // mV
        const double var_IK1__GK1max = 0.75; // mS_per_uF
        const double var_IK1__K_o = var_Environment__K_o; // mM
        const double var_IK1__GK1_ = var_IK1__GK1max * sqrt(var_IK1__K_o / 5.4000000000000004); // mS_per_uF
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_IK1__V - var_IK1__EK) - 59.215000000000003))); // per_ms
        const double var_IK1__bk1 = ((0.49124000000000001 * exp(0.080320000000000003 * ((var_IK1__V - var_IK1__EK) + 5.476))) + (1.0 * exp(0.061749999999999999 * ((var_IK1__V - var_IK1__EK) - 594.30999999999995)))) / (1.0 + exp((-0.51429999999999998) * ((var_IK1__V - var_IK1__EK) + 4.7530000000000001))); // per_ms
        const double var_IK1__gK1 = (var_IK1__GK1_ * var_IK1__ak1) / (var_IK1__ak1 + var_IK1__bk1); // mS_per_uF
        const double var_IK1__IK1 = var_IK1__gK1 * (var_IK1__V - var_IK1__EK); // uA_per_uF
        const double var_cell__IK1 = var_IK1__IK1; // uA_per_uF
        const double var_IKp__GKpmax = 0.0055199999999999997; // mS_per_uF
        const double var_IKp__EK = var_reversal_potentials__EK; // mV
        const double var_IKp__V = var_chaste_interface__cell__V; // mV
        const double var_IKp__ikp = (var_IKp__GKpmax * (var_IKp__V - var_IKp__EK)) / (1.0 + exp((7.4880000000000004 - var_IKp__V) / 5.9800000000000004)); // uA_per_uF
        const double var_cell__ikp = var_IKp__ikp; // uA_per_uF
        const double var_ICaL__K_o = var_Environment__K_o; // mM
        const double var_ICaL__K_i = var_chaste_interface__K__K_i; // mM
        const double var_ICaL__pk = 1.9299999999999999e-07; // L_per_F_ms
        const double var_ICaL__gako = 0.75; // dimensionless
        const double var_ICaL__gaki = 0.75; // dimensionless
        const double var_ICaL__ibark = (var_ICaL__pk * var_ICaL__V * var_ICaL__F * var_ICaL__FonRT * ((var_ICaL__gaki * var_ICaL__K_i * exp(var_ICaL__V * var_ICaL__FonRT)) - (var_ICaL__gako * var_ICaL__K_o))) / (exp(var_ICaL__V * var_ICaL__FonRT) - 1.0); // uA_per_uF
        const double var_ICaL__ilcak = var_ICaL__d * var_ICaL__f * var_ICaL__fca * var_ICaL__ibark; // uA_per_uF
        const double var_cell__ilcak = var_ICaL__ilcak; // uA_per_uF
        const double var_cell__caiont = ((var_cell__ilca + var_cell__icab + var_cell__ipca) - (2.0 * var_cell__inaca)) + var_cell__icat; // uA_per_uF
        const double var_cell__naiont = var_cell__ina + var_cell__inab + (3.0 * var_cell__inaca) + var_cell__ilcana + (3.0 * var_cell__inak); // uA_per_uF
        const double var_cell__chaste_interface__chaste_membrane_capacitance = HeartConfig::Instance()->GetCapacitance(); // uF_per_cm2
        const double var_chaste_interface__cell__i_Stim = 0.0;
        const double var_cell__i_Stim_converter = var_chaste_interface__cell__i_Stim; // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converter / var_cell__chaste_interface__chaste_membrane_capacitance; // uA_per_uF
        const double var_cell__kiont = ((var_cell__ikr + var_cell__iks + var_cell__IK1 + var_cell__ikp + var_cell__ilcak) - (2.0 * var_cell__inak)) + var_cell__i_Stim; // uA_per_uF
        const double var_chaste_interface__cell__kiont = var_cell__kiont; // uA_per_uF
        const double var_chaste_interface__cell__caiont = var_cell__caiont; // uA_per_uF
        const double var_chaste_interface__cell__naiont = var_cell__naiont; // uA_per_uF
        const double var_chaste_interface__i_ionic = (var_chaste_interface__cell__naiont + var_chaste_interface__cell__kiont + var_chaste_interface__cell__caiont) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamiclivshitz_rudy_2007FromCellML::EvaluateYDerivatives(double var_chaste_interface__Environment__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -89.4356034692784
        double var_chaste_interface__INa__H = rY[1];
        // Units: dimensionless; Initial value: 0.994401369032678
        double var_chaste_interface__INa__m = rY[2];
        // Units: dimensionless; Initial value: 0.000734780346592185
        double var_chaste_interface__INa__J = rY[3];
        // Units: dimensionless; Initial value: 0.996100688673679
        double var_chaste_interface__ICaL__d = rY[4];
        // Units: dimensionless; Initial value: 3.2514786721066e-27
        double var_chaste_interface__ICaL__f = rY[5];
        // Units: dimensionless; Initial value: 0.997404948824816
        double var_chaste_interface__IKr__xr = rY[6];
        // Units: dimensionless; Initial value: 0.000162194715543637
        double var_chaste_interface__IKs__xs1 = rY[7];
        // Units: dimensionless; Initial value: 0.0285147332973946
        double var_chaste_interface__IKs__xs2 = rY[8];
        // Units: dimensionless; Initial value: 0.0764114040188678
        double var_chaste_interface__ICaT__b = rY[9];
        // Units: dimensionless; Initial value: 0.000927461915392873
        double var_chaste_interface__ICaT__g = rY[10];
        // Units: dimensionless; Initial value: 0.952834331760863
        double var_chaste_interface__Irel__Rel = rY[11];
        // Units: mM_per_ms; Initial value: 1.06874246141923e-23
        double var_chaste_interface__Na__Na_i = rY[12];
        // Units: mM; Initial value: 16.612739313555
        double var_chaste_interface__K__K_i = rY[13];
        // Units: mM; Initial value: 139.730914103161
        double var_chaste_interface__Ca__Ca_T = rY[14];
        // Units: mM; Initial value: 0.0257059808595638
        double var_chaste_interface__Ca__Ca_JSR_T = rY[15];
        // Units: mM; Initial value: 7.87371650296567
        double var_chaste_interface__Ca__Ca_NSR = rY[16];
        // Units: mM; Initial value: 2.71518235696672
        
        
        // Mathematics
        double d_dt_chaste_interface__cell__V;
        const double var_Environment__F = 96485.0; // C_per_mole
        const double var_Environment__R = 8314.0; // mJ_per_mole_K
        const double var_Environment__Temp = 310.0; // kelvin
        const double var_Environment__FonRT = (var_Environment__F / var_Environment__Temp) / var_Environment__R; // per_mV
        const double var_Environment__K_o = 4.5; // mM
        const double var_Environment__Na_o = 140.0; // mM
        const double var_Environment__Ca_o = 1.8; // mM
        const double var_cell__F = var_Environment__F; // C_per_mole
        const double var_ICaL__d = var_chaste_interface__ICaL__d; // dimensionless
        const double var_ICaL__Ca_o = var_Environment__Ca_o; // mM
        const double var_ICaL__V = var_chaste_interface__cell__V; // mV
        const double var_ICaL__FonRT = var_Environment__FonRT; // per_mV
        const double var_Ca__kmtrpn = 0.00050000000000000001; // mM
        const double var_Ca__kmcmdn = 0.0023800000000000002; // mM
        const double var_Ca__Ca_T = var_chaste_interface__Ca__Ca_T; // mM
        const double var_Ca__cmdnbar = 0.050000000000000003; // mM
        const double var_Ca__trpnbar = 0.070000000000000007; // mM
        const double var_Ca__bmyo = ((var_Ca__cmdnbar + var_Ca__trpnbar) - var_Ca__Ca_T) + var_Ca__kmtrpn + var_Ca__kmcmdn; // mM
        const double var_Ca__cmyo = ((var_Ca__kmcmdn * var_Ca__kmtrpn) - (var_Ca__Ca_T * (var_Ca__kmtrpn + var_Ca__kmcmdn))) + (var_Ca__trpnbar * var_Ca__kmcmdn) + (var_Ca__cmdnbar * var_Ca__kmtrpn); // mM2
        const double var_Ca__dmyo = (-var_Ca__kmtrpn) * var_Ca__kmcmdn * var_Ca__Ca_T; // mM3
        const double var_Ca__Ca_i = (((2.0 * sqrt((var_Ca__bmyo * var_Ca__bmyo) - (3.0 * var_Ca__cmyo))) / 3.0) * cos(acos((((9.0 * var_Ca__bmyo * var_Ca__cmyo) - (2.0 * var_Ca__bmyo * var_Ca__bmyo * var_Ca__bmyo)) - (27.0 * var_Ca__dmyo)) / (2.0 * pow((var_Ca__bmyo * var_Ca__bmyo) - (3.0 * var_Ca__cmyo), 1.5))) / 3.0)) - (var_Ca__bmyo / 3.0); // mM
        const double var_ICaL__Ca_i = var_Ca__Ca_i; // mM
        const double var_ICaL__F = var_Environment__F; // C_per_mole
        const double var_ICaL__gacao = 0.34100000000000003; // dimensionless
        const double var_ICaL__gacai = 1.0; // dimensionless
        const double var_ICaL__pca = 0.00054000000000000001; // L_per_F_ms
        const double var_ICaL__ibarca = (var_ICaL__pca * 4.0 * var_ICaL__V * var_ICaL__F * var_ICaL__FonRT * ((var_ICaL__gacai * var_ICaL__Ca_i * exp(2.0 * var_ICaL__V * var_ICaL__FonRT)) - (var_ICaL__gacao * var_ICaL__Ca_o))) / (exp(2.0 * var_ICaL__V * var_ICaL__FonRT) - 1.0); // uA_per_uF
        const double var_ICaL__f = var_chaste_interface__ICaL__f; // dimensionless
        const double var_ICaL__kmca = 0.00059999999999999995; // mM
        const double var_ICaL__fca = 1.0 / (1.0 + (var_ICaL__Ca_i / var_ICaL__kmca)); // dimensionless
        const double var_ICaL__ilca = var_ICaL__d * var_ICaL__f * var_ICaL__fca * var_ICaL__ibarca; // uA_per_uF
        const double var_cell__ilca = var_ICaL__ilca; // uA_per_uF
        const double var_ICab__V = var_chaste_interface__cell__V; // mV
        const double var_ICab__FonRT = var_Environment__FonRT; // per_mV
        const double var_ICab__Ca_o = var_Environment__Ca_o; // mM
        const double var_ICab__Ca_i = var_Ca__Ca_i; // mM
        const double var_ICab__gcab = 0.003016; // mS_per_uF
        const double var_ICab__icab = var_ICab__gcab * (var_ICab__V - (log(var_ICab__Ca_o / var_ICab__Ca_i) / (2.0 * var_ICab__FonRT))); // uA_per_uF
        const double var_cell__icab = var_ICab__icab; // uA_per_uF
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__ibarpca = 1.1499999999999999; // uA_per_uF
        const double var_IpCa__Ca_i = var_Ca__Ca_i; // mM
        const double var_IpCa__ipca = (var_IpCa__ibarpca * var_IpCa__Ca_i) / (var_IpCa__kmpca + var_IpCa__Ca_i); // uA_per_uF
        const double var_cell__ipca = var_IpCa__ipca; // uA_per_uF
        const double var_INaCa__V = var_chaste_interface__cell__V; // mV
        const double var_INaCa__gammas = 0.14999999999999999; // dimensionless
        const double var_INaCa__FonRT = var_Environment__FonRT; // per_mV
        const double var_INaCa__Ca_o = var_Environment__Ca_o; // mM
        const double var_INaCa__Na_o = var_Environment__Na_o; // mM
        const double var_INaCa__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INaCa__Ca_i = var_Ca__Ca_i; // mM
        const double var_INaCa__c1 = 0.00025000000000000001; // uA_per_uF
        const double var_INaCa__c2 = 0.0001; // dimensionless
        const double var_INaCa__inaca = (var_INaCa__c1 * exp((var_INaCa__gammas - 1.0) * var_INaCa__V * var_INaCa__FonRT) * ((exp(var_INaCa__V * var_INaCa__FonRT) * pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o) - (pow(var_INaCa__Na_o, 3.0) * var_INaCa__Ca_i))) / (1.0 + (var_INaCa__c2 * exp((var_INaCa__gammas - 1.0) * var_INaCa__V * var_INaCa__FonRT) * ((exp(var_INaCa__V * var_INaCa__FonRT) * pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o) + (pow(var_INaCa__Na_o, 3.0) * var_INaCa__Ca_i)))); // uA_per_uF
        const double var_cell__inaca = var_INaCa__inaca; // uA_per_uF
        const double var_ICaT__gcat = 0.050000000000000003; // mS_per_uF
        const double var_ICaT__g = var_chaste_interface__ICaT__g; // dimensionless
        const double var_ICaT__b = var_chaste_interface__ICaT__b; // dimensionless
        const double var_ICaT__V = var_chaste_interface__cell__V; // mV
        const double var_reversal_potentials__Ca_o = var_Environment__Ca_o; // mM
        const double var_reversal_potentials__Ca_i = var_Ca__Ca_i; // mM
        const double var_reversal_potentials__FonRT = var_Environment__FonRT; // per_mV
        const double var_reversal_potentials__ECa = (log(var_reversal_potentials__Ca_o / var_reversal_potentials__Ca_i) / 2.0) / var_reversal_potentials__FonRT; // mV
        const double var_ICaT__ECa = var_reversal_potentials__ECa; // mV
        const double var_ICaT__icat = var_ICaT__gcat * var_ICaT__b * var_ICaT__b * var_ICaT__g * (var_ICaT__V - var_ICaT__ECa); // uA_per_uF
        const double var_cell__icat = var_ICaT__icat; // uA_per_uF
        const double var_INa__V = var_chaste_interface__cell__V; // mV
        const double var_INa__GNa = 16.0; // mS_per_uF
        const double var_reversal_potentials__Na_o = var_Environment__Na_o; // mM
        const double var_reversal_potentials__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_reversal_potentials__ENa = log(var_reversal_potentials__Na_o / var_reversal_potentials__Na_i) / var_reversal_potentials__FonRT; // mV
        const double var_INa__ENa = var_reversal_potentials__ENa; // mV
        const double var_INa__m = var_chaste_interface__INa__m; // dimensionless
        const double var_INa__J = var_chaste_interface__INa__J; // dimensionless
        const double var_INa__H = var_chaste_interface__INa__H; // dimensionless
        const double var_INa__ina = var_INa__GNa * var_INa__m * var_INa__m * var_INa__m * var_INa__H * var_INa__J * (var_INa__V - var_INa__ENa); // uA_per_uF
        const double var_cell__ina = var_INa__ina; // uA_per_uF
        const double var_INab__GNab = 0.0040000000000000001; // mS_per_uF
        const double var_INab__ENa = var_reversal_potentials__ENa; // mV
        const double var_INab__V = var_chaste_interface__cell__V; // mV
        const double var_INab__inab = var_INab__GNab * (var_INab__V - var_INab__ENa); // uA_per_uF
        const double var_cell__inab = var_INab__inab; // uA_per_uF
        const double var_ICaL__Na_o = var_Environment__Na_o; // mM
        const double var_ICaL__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_ICaL__ganao = 0.75; // dimensionless
        const double var_ICaL__ganai = 0.75; // dimensionless
        const double var_ICaL__pna = 6.75e-07; // L_per_F_ms
        const double var_ICaL__ibarna = (var_ICaL__pna * var_ICaL__V * var_ICaL__F * var_ICaL__FonRT * ((var_ICaL__ganai * var_ICaL__Na_i * exp(var_ICaL__V * var_ICaL__FonRT)) - (var_ICaL__ganao * var_ICaL__Na_o))) / (exp(var_ICaL__V * var_ICaL__FonRT) - 1.0); // uA_per_uF
        const double var_ICaL__ilcana = var_ICaL__d * var_ICaL__f * var_ICaL__fca * var_ICaL__ibarna; // uA_per_uF
        const double var_cell__ilcana = var_ICaL__ilcana; // uA_per_uF
        const double var_INaK__V = var_chaste_interface__cell__V; // mV
        const double var_INaK__FonRT = var_Environment__FonRT; // per_mV
        const double var_INaK__Na_o = var_Environment__Na_o; // mM
        const double var_INaK__sigma = (exp(var_INaK__Na_o / 67.299999999999997) - 1.0) / 7.0; // dimensionless
        const double var_INaK__fnak = 1.0 / (1.0 + (0.1245 * exp((-0.10000000000000001) * var_INaK__V * var_INaK__FonRT)) + (0.036499999999999998 * var_INaK__sigma * exp((-var_INaK__V) * var_INaK__FonRT))); // dimensionless
        const double var_INaK__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__ibarnak = 2.25; // uA_per_uF
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__K_o = var_Environment__K_o; // mM
        const double var_INaK__inak = ((var_INaK__ibarnak * var_INaK__fnak) / (1.0 + pow(var_INaK__kmnai / var_INaK__Na_i, 2.0))) / (1.0 + (var_INaK__kmko / var_INaK__K_o)); // uA_per_uF
        const double var_cell__inak = var_INaK__inak; // uA_per_uF
        const double var_IKr__K_o = var_Environment__K_o; // mM
        const double var_IKr__V = var_chaste_interface__cell__V; // mV
        const double var_IKr__r = 1.0 / (1.0 + exp((var_IKr__V + 9.0) / 22.399999999999999)); // dimensionless
        const double var_IKr__xr = var_chaste_interface__IKr__xr; // dimensionless
        const double var_reversal_potentials__K_i = var_chaste_interface__K__K_i; // mM
        const double var_reversal_potentials__K_o = var_Environment__K_o; // mM
        const double var_reversal_potentials__EK = log(var_reversal_potentials__K_o / var_reversal_potentials__K_i) / var_reversal_potentials__FonRT; // mV
        const double var_IKr__EK = var_reversal_potentials__EK; // mV
        const double var_IKr__gkrmax = 0.02614; // mS_per_uF
        const double var_IKr__ikr = var_IKr__gkrmax * sqrt(var_IKr__K_o / 5.4000000000000004) * var_IKr__xr * var_IKr__r * (var_IKr__V - var_IKr__EK); // uA_per_uF
        const double var_cell__ikr = var_IKr__ikr; // uA_per_uF
        const double var_IKs__xs2 = var_chaste_interface__IKs__xs2; // dimensionless
        const double var_IKs__Ca_i = var_Ca__Ca_i; // mM
        const double var_IKs__GKsmax = 0.433; // mS_per_uF
        const double var_IKs__gks = var_IKs__GKsmax * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_IKs__Ca_i, 1.3999999999999999)))); // mS_per_uF
        const double var_IKs__xs1 = var_chaste_interface__IKs__xs1; // dimensionless
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((var_reversal_potentials__K_o + (var_reversal_potentials__prnak * var_reversal_potentials__Na_o)) / (var_reversal_potentials__K_i + (var_reversal_potentials__prnak * var_reversal_potentials__Na_i))) / var_reversal_potentials__FonRT; // mV
        const double var_IKs__EKs = var_reversal_potentials__EKs; // mV
        const double var_IKs__V = var_chaste_interface__cell__V; // mV
        const double var_IKs__iks = var_IKs__gks * var_IKs__xs1 * var_IKs__xs2 * (var_IKs__V - var_IKs__EKs); // uA_per_uF
        const double var_cell__iks = var_IKs__iks; // uA_per_uF
        const double var_IK1__EK = var_reversal_potentials__EK; // mV
        const double var_IK1__V = var_chaste_interface__cell__V; // mV
        const double var_IK1__GK1max = 0.75; // mS_per_uF
        const double var_IK1__K_o = var_Environment__K_o; // mM
        const double var_IK1__GK1_ = var_IK1__GK1max * sqrt(var_IK1__K_o / 5.4000000000000004); // mS_per_uF
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_IK1__V - var_IK1__EK) - 59.215000000000003))); // per_ms
        const double var_IK1__bk1 = ((0.49124000000000001 * exp(0.080320000000000003 * ((var_IK1__V - var_IK1__EK) + 5.476))) + (1.0 * exp(0.061749999999999999 * ((var_IK1__V - var_IK1__EK) - 594.30999999999995)))) / (1.0 + exp((-0.51429999999999998) * ((var_IK1__V - var_IK1__EK) + 4.7530000000000001))); // per_ms
        const double var_IK1__gK1 = (var_IK1__GK1_ * var_IK1__ak1) / (var_IK1__ak1 + var_IK1__bk1); // mS_per_uF
        const double var_IK1__IK1 = var_IK1__gK1 * (var_IK1__V - var_IK1__EK); // uA_per_uF
        const double var_cell__IK1 = var_IK1__IK1; // uA_per_uF
        const double var_IKp__GKpmax = 0.0055199999999999997; // mS_per_uF
        const double var_IKp__EK = var_reversal_potentials__EK; // mV
        const double var_IKp__V = var_chaste_interface__cell__V; // mV
        const double var_IKp__ikp = (var_IKp__GKpmax * (var_IKp__V - var_IKp__EK)) / (1.0 + exp((7.4880000000000004 - var_IKp__V) / 5.9800000000000004)); // uA_per_uF
        const double var_cell__ikp = var_IKp__ikp; // uA_per_uF
        const double var_ICaL__K_o = var_Environment__K_o; // mM
        const double var_ICaL__K_i = var_chaste_interface__K__K_i; // mM
        const double var_ICaL__pk = 1.9299999999999999e-07; // L_per_F_ms
        const double var_ICaL__gako = 0.75; // dimensionless
        const double var_ICaL__gaki = 0.75; // dimensionless
        const double var_ICaL__ibark = (var_ICaL__pk * var_ICaL__V * var_ICaL__F * var_ICaL__FonRT * ((var_ICaL__gaki * var_ICaL__K_i * exp(var_ICaL__V * var_ICaL__FonRT)) - (var_ICaL__gako * var_ICaL__K_o))) / (exp(var_ICaL__V * var_ICaL__FonRT) - 1.0); // uA_per_uF
        const double var_ICaL__ilcak = var_ICaL__d * var_ICaL__f * var_ICaL__fca * var_ICaL__ibark; // uA_per_uF
        const double var_cell__ilcak = var_ICaL__ilcak; // uA_per_uF
        const double var_cell__caiont = ((var_cell__ilca + var_cell__icab + var_cell__ipca) - (2.0 * var_cell__inaca)) + var_cell__icat; // uA_per_uF
        const double var_cell__naiont = var_cell__ina + var_cell__inab + (3.0 * var_cell__inaca) + var_cell__ilcana + (3.0 * var_cell__inak); // uA_per_uF
        const double var_cell__chaste_interface__chaste_membrane_capacitance = HeartConfig::Instance()->GetCapacitance(); // uF_per_cm2
        const double var_chaste_interface__cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time);
        const double var_cell__i_Stim_converter = var_chaste_interface__cell__i_Stim; // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converter / var_cell__chaste_interface__chaste_membrane_capacitance; // uA_per_uF
        const double var_cell__kiont = ((var_cell__ikr + var_cell__iks + var_cell__IK1 + var_cell__ikp + var_cell__ilcak) - (2.0 * var_cell__inak)) + var_cell__i_Stim; // uA_per_uF
        const double var_cell__l = 0.01; // cm
        const double var_cell__ra = 0.0011000000000000001; // cm
        const double var_cell__vcell = 1000.0 * M_PI * var_cell__ra * var_cell__ra * var_cell__l; // uL
        const double var_cell__ageo = (2.0 * M_PI * var_cell__ra * var_cell__ra) + (2.0 * M_PI * var_cell__ra * var_cell__l); // cm2
        const double var_cell__Acap = var_cell__ageo * 2.0; // uF
        const double var_cell__AF = var_cell__Acap / var_cell__F; // uF_mole_per_C
        const double var_cell__vmyo = var_cell__vcell * 0.68000000000000005; // uL
        const double var_cell__vnsr = var_cell__vcell * 0.055199999999999999; // uL
        const double var_cell__vjsr = var_cell__vcell * 0.0047999999999999996; // uL
        const double var_INa__a = 1.0 - (1.0 / (1.0 + exp((-(var_INa__V + 40.0)) / 0.024))); // per_ms
        const double var_INa__shift_h = 0.0; // mV
        const double var_INa__aH = var_INa__a * 0.13500000000000001 * exp(((80.0 + var_INa__V) - var_INa__shift_h) / (-6.7999999999999998)); // per_ms
        const double var_INa__bH = ((1.0 - var_INa__a) / (0.13 * (1.0 + exp((var_INa__V + 10.66) / (-11.1))))) + (var_INa__a * ((3.5600000000000001 * exp(0.079000000000000001 * (var_INa__V - var_INa__shift_h))) + (3.1000000000000001 * 100000.0 * exp(0.34999999999999998 * (var_INa__V - var_INa__shift_h))))); // per_ms
        const double var_INa__perc_reduced_inact_for_IpNa = 0.0; // dimensionless
        const double var_INa__H_inf = ((var_INa__aH * (1.0 - (var_INa__perc_reduced_inact_for_IpNa / 100.0))) / (var_INa__aH + var_INa__bH)) + (var_INa__perc_reduced_inact_for_IpNa / 100.0); // dimensionless
        const double var_INa__tau_H = 1.0 / (var_INa__aH + var_INa__bH); // ms
        const double var_INa__aj = (var_INa__a * (((-127140.0) * exp(0.24440000000000001 * (var_INa__V - var_INa__shift_h))) - (3.4740000000000003e-05 * exp((-0.043909999999999998) * (var_INa__V - var_INa__shift_h)))) * 1.0 * (var_INa__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_INa__V + 79.230000000000004))); // per_ms
        const double var_INa__bj = (((1.0 - var_INa__a) * 0.29999999999999999 * exp((-2.5349999999999999e-07) * (var_INa__V - var_INa__shift_h))) / (1.0 + exp((-0.10000000000000001) * (var_INa__V + 32.0)))) + ((var_INa__a * 0.1212 * exp((-0.01052) * (var_INa__V - var_INa__shift_h))) / (1.0 + exp((-0.13780000000000001) * (var_INa__V + 40.140000000000001)))); // per_ms
        const double var_INa__j_inf = ((var_INa__aj * (1.0 - (var_INa__perc_reduced_inact_for_IpNa / 100.0))) / (var_INa__aj + var_INa__bj)) + (var_INa__perc_reduced_inact_for_IpNa / 100.0); // dimensionless
        const double var_INa__tau_j = 1.0 / (var_INa__aj + var_INa__bj); // ms
        const double var_INa__am = (0.32000000000000001 * 1.0 * (var_INa__V + 47.130000000000003)) / (1.0 - exp((-0.10000000000000001) * (var_INa__V + 47.130000000000003))); // per_ms
        const double var_INa__bm = 0.080000000000000002 * exp((-var_INa__V) / 11.0); // per_ms
        const double var_INa__d_H_d_Environment__time = (var_INa__H_inf - var_INa__H) / var_INa__tau_H; // 'per millisecond'
        const double var_INa__d_m_d_Environment__time = (var_INa__am * (1.0 - var_INa__m)) - (var_INa__bm * var_INa__m); // 'per millisecond'
        const double var_INa__d_J_d_Environment__time = (var_INa__j_inf - var_INa__J) / var_INa__tau_j; // 'per millisecond'
        const double var_ICaL__dss0 = 1.0 / (1.0 + exp((-(var_ICaL__V + 10.0)) / 6.2400000000000002)); // dimensionless
        const double var_ICaL__taud = (var_ICaL__dss0 * 1.0 * (1.0 - exp((-(var_ICaL__V + 10.0)) / 6.2400000000000002))) / (0.035000000000000003 * (var_ICaL__V + 10.0)); // ms
        const double var_ICaL__dss1 = 1.0 / (1.0 + exp((-(var_ICaL__V + 60.0)) / 0.024)); // dimensionless
        const double var_ICaL__dss = var_ICaL__dss0 * var_ICaL__dss1; // dimensionless
        const double var_ICaL__fss = (1.0 / (1.0 + exp((var_ICaL__V + 32.0) / 8.0))) + (0.59999999999999998 / (1.0 + exp((50.0 - var_ICaL__V) / 20.0))); // dimensionless
        const double var_ICaL__tauf = 1.0 / ((0.019699999999999999 * exp(-pow(0.033700000000000001 * (var_ICaL__V + 10.0), 2.0))) + 0.02); // ms
        const double var_ICaL__d_d_d_Environment__time = (var_ICaL__dss - var_ICaL__d) / var_ICaL__taud; // 'per millisecond'
        const double var_ICaL__d_f_d_Environment__time = (var_ICaL__fss - var_ICaL__f) / var_ICaL__tauf; // 'per millisecond'
        const double var_IKr__xrss = 1.0 / (1.0 + exp((-(var_IKr__V + 10.085000000000001)) / 4.25)); // dimensionless
        const double var_IKr__tauxr = 1.0 / (((0.0013799999999999999 * (var_IKr__V + 14.199999999999999)) / (1.0 - exp((-0.123) * (var_IKr__V + 14.199999999999999)))) + ((0.00060999999999999997 * (var_IKr__V + 38.899999999999999)) / (exp(0.14499999999999999 * (var_IKr__V + 38.899999999999999)) - 1.0))); // ms
        const double var_IKr__d_xr_d_Environment__time = (var_IKr__xrss - var_IKr__xr) / var_IKr__tauxr; // 'per millisecond'
        const double var_IKs__xss = 1.0 / (1.0 + exp((-(var_IKs__V - 1.5)) / 16.699999999999999)); // dimensionless
        const double var_IKs__tauxs = 1.0 / (((7.1899999999999999e-05 * (var_IKs__V + 30.0)) / (1.0 - exp((-0.14799999999999999) * (var_IKs__V + 30.0)))) + ((0.00013100000000000001 * (var_IKs__V + 30.0)) / (exp(0.068699999999999997 * (var_IKs__V + 30.0)) - 1.0))); // ms
        const double var_IKs__d_xs1_d_Environment__time = (var_IKs__xss - var_IKs__xs1) / var_IKs__tauxs; // 'per millisecond'
        const double var_IKs__d_xs2_d_Environment__time = ((var_IKs__xss - var_IKs__xs2) / var_IKs__tauxs) / 4.0; // 'per millisecond'
        const double var_ICaT__bss = 1.0 / (1.0 + exp((-(var_ICaT__V + 14.0)) / 10.800000000000001)); // dimensionless
        const double var_ICaT__taub = 3.7000000000000002 + (6.0999999999999996 / (1.0 + exp((var_ICaT__V + 25.0) / 4.5))); // ms
        const double var_ICaT__gss = 1.0 / (1.0 + exp((var_ICaT__V + 60.0) / 5.5999999999999996)); // dimensionless
        const double var_ICaT__aa = 1.0 - (1.0 / (1.0 + exp((-var_ICaT__V) / 0.0023999999999999998))); // dimensionless
        const double var_ICaT__taug = (var_ICaT__aa * 1.0 * (((-0.875) * var_ICaT__V) + 12.0)) + (12.0 * (1.0 - var_ICaT__aa)); // ms
        const double var_ICaT__d_b_d_Environment__time = (var_ICaT__bss - var_ICaT__b) / var_ICaT__taub; // 'per millisecond'
        const double var_ICaT__d_g_d_Environment__time = (var_ICaT__gss - var_ICaT__g) / var_ICaT__taug; // 'per millisecond'
        const double var_Irel__Ca_JSR_T = var_chaste_interface__Ca__Ca_JSR_T; // mM
        const double var_Irel__Rel = var_chaste_interface__Irel__Rel; // mM_per_ms
        const double var_Irel__K_Relss = 1.0; // mM
        const double var_Irel__ilca = var_ICaL__ilca; // uA_per_uF
        const double var_Irel__kappa = 0.125; // mM_per_mV_ms
        const double var_Irel__tau = 4.75; // ms
        const double var_Irel__alpha_Rel = var_Irel__tau * var_Irel__kappa; // mM_per_mV
        const double var_Irel__qn = 9.0; // dimensionless
        const double var_Irel__kmcsqn = 0.80000000000000004; // mM
        const double var_Irel__c = var_Irel__Ca_JSR_T * var_Irel__kmcsqn; // mM2
        const double var_Irel__csqnbar = 10.0; // mM
        const double var_Irel__bbb = (var_Irel__csqnbar + var_Irel__kmcsqn) - var_Irel__Ca_JSR_T; // mM
        const double var_Irel__Ca_JSR_free = ((-var_Irel__bbb) / 2.0) + (sqrt(pow(var_Irel__bbb, 2.0) + (4.0 * var_Irel__c)) / 2.0); // mM
        const double var_Irel__Rel_ss = (var_Irel__ilca * var_Irel__alpha_Rel) / (1.0 + pow(var_Irel__K_Relss / var_Irel__Ca_JSR_free, var_Irel__qn)); // mM_per_ms
        const double var_Irel__tau_Rel = var_Irel__tau / (1.0 + (0.0123 / var_Irel__Ca_JSR_free)); // ms
        const double var_Irel__d_Rel_d_Environment__time = (-(var_Irel__Rel_ss + var_Irel__Rel)) / var_Irel__tau_Rel; // 'mM per millisecond per ms'
        const double var_Iup_Ileak__Ca_i = var_Ca__Ca_i; // mM
        const double var_Iup_Ileak__Ca_NSR = var_chaste_interface__Ca__Ca_NSR; // mM
        const double var_Iup_Ileak__kmup = 0.00092000000000000003; // mM
        const double var_Iup_Ileak__iupbar = 0.0087500000000000008; // mM_per_ms
        const double var_Iup_Ileak__nsrbar = 15.0; // mM
        const double var_Iup_Ileak__iup = (var_Iup_Ileak__iupbar * var_Iup_Ileak__Ca_i) / (var_Iup_Ileak__Ca_i + var_Iup_Ileak__kmup); // mM_per_ms
        const double var_Iup_Ileak__leak_factor = 1.0; // dimensionless
        const double var_Iup_Ileak__ileak = (var_Iup_Ileak__leak_factor * var_Iup_Ileak__iupbar * var_Iup_Ileak__Ca_NSR) / var_Iup_Ileak__nsrbar; // mM_per_ms
        const double var_Itr__Ca_NSR = var_chaste_interface__Ca__Ca_NSR; // mM
        const double var_Itr__Ca_JSR_free = var_Irel__Ca_JSR_free; // mM
        const double var_Itr__tautr = 120.0; // ms
        const double var_Itr__itr = (var_Itr__Ca_NSR - var_Itr__Ca_JSR_free) / var_Itr__tautr; // mM_per_ms
        const double var_Na__conc_clamp = 1.0; // dimensionless
        const double var_Na__AF = var_cell__AF; // uF_mole_per_C
        const double var_Na__vmyo = var_cell__vmyo; // uL
        const double var_Na__naiont = var_cell__naiont; // uA_per_uF
        const double var_Na__d_Na_i_d_Environment__time = ((-var_Na__conc_clamp) * var_Na__naiont * var_Na__AF) / var_Na__vmyo; // 'millimole per litre per millisecond'
        const double var_K__conc_clamp = var_Na__conc_clamp; // dimensionless
        const double var_K__AF = var_cell__AF; // uF_mole_per_C
        const double var_K__vmyo = var_cell__vmyo; // uL
        const double var_K__kiont = var_cell__kiont; // uA_per_uF
        const double var_K__d_K_i_d_Environment__time = ((-var_K__conc_clamp) * var_K__kiont * var_K__AF) / var_K__vmyo; // 'millimole per litre per millisecond'
        const double var_Ca__AF = var_cell__AF; // uF_mole_per_C
        const double var_Ca__vmyo = var_cell__vmyo; // uL
        const double var_Ca__vjsr = var_cell__vjsr; // uL
        const double var_Ca__vnsr = var_cell__vnsr; // uL
        const double var_Ca__caiont = var_cell__caiont; // uA_per_uF
        const double var_Ca__iup = var_Iup_Ileak__iup; // mM_per_ms
        const double var_Ca__itr = var_Itr__itr; // mM_per_ms
        const double var_Ca__ileak = var_Iup_Ileak__ileak; // mM_per_ms
        const double var_Ca__Rel = var_chaste_interface__Irel__Rel; // mM_per_ms
        const double var_Ca__d_Ca_T_d_Environment__time = (((-var_Ca__caiont) * var_Ca__AF) / (var_Ca__vmyo * 2.0)) + (((var_Ca__ileak - var_Ca__iup) * var_Ca__vnsr) / var_Ca__vmyo) + ((var_Ca__Rel * var_Ca__vjsr) / var_Ca__vmyo); // 'millimole per litre per millisecond'
        const double var_Ca__d_Ca_JSR_T_d_Environment__time = var_Ca__itr - var_Ca__Rel; // 'millimole per litre per millisecond'
        const double var_Ca__d_Ca_NSR_d_Environment__time = (var_Ca__iup - ((var_Ca__itr * var_Ca__vjsr) / var_Ca__vnsr)) - var_Ca__ileak; // 'millimole per litre per millisecond'
        const double var_Ca__d_Over_d_Environment__time = 0.0; // 'per millisecond'
        const double var_chaste_interface__INa__d_H_d_Environment__time = var_INa__d_H_d_Environment__time; // ___units_27
        const double var_chaste_interface__INa__d_m_d_Environment__time = var_INa__d_m_d_Environment__time; // ___units_27
        const double var_chaste_interface__INa__d_J_d_Environment__time = var_INa__d_J_d_Environment__time; // ___units_27
        const double var_chaste_interface__ICaL__d_d_d_Environment__time = var_ICaL__d_d_d_Environment__time; // ___units_27
        const double var_chaste_interface__ICaL__d_f_d_Environment__time = var_ICaL__d_f_d_Environment__time; // ___units_27
        const double var_chaste_interface__IKr__d_xr_d_Environment__time = var_IKr__d_xr_d_Environment__time; // ___units_27
        const double var_chaste_interface__IKs__d_xs1_d_Environment__time = var_IKs__d_xs1_d_Environment__time; // ___units_27
        const double var_chaste_interface__IKs__d_xs2_d_Environment__time = var_IKs__d_xs2_d_Environment__time; // ___units_27
        const double var_chaste_interface__ICaT__d_b_d_Environment__time = var_ICaT__d_b_d_Environment__time; // ___units_27
        const double var_chaste_interface__ICaT__d_g_d_Environment__time = var_ICaT__d_g_d_Environment__time; // ___units_27
        const double var_chaste_interface__Irel__d_Rel_d_Environment__time = var_Irel__d_Rel_d_Environment__time; // ___units_84
        const double var_chaste_interface__Na__d_Na_i_d_Environment__time = var_Na__d_Na_i_d_Environment__time; // ___units_85
        const double var_chaste_interface__K__d_K_i_d_Environment__time = var_K__d_K_i_d_Environment__time; // ___units_85
        const double var_chaste_interface__Ca__d_Ca_T_d_Environment__time = var_Ca__d_Ca_T_d_Environment__time; // ___units_85
        const double var_chaste_interface__Ca__d_Ca_JSR_T_d_Environment__time = var_Ca__d_Ca_JSR_T_d_Environment__time; // ___units_85
        const double var_chaste_interface__Ca__d_Ca_NSR_d_Environment__time = var_Ca__d_Ca_NSR_d_Environment__time; // ___units_85
        const double var_chaste_interface__Ca__d_Over_d_Environment__time = var_Ca__d_Over_d_Environment__time; // ___units_27
        const double d_dt_chaste_interface__INa__H = var_chaste_interface__INa__d_H_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__INa__m = var_chaste_interface__INa__d_m_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__INa__J = var_chaste_interface__INa__d_J_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__d = var_chaste_interface__ICaL__d_d_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__f = var_chaste_interface__ICaL__d_f_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKr__xr = var_chaste_interface__IKr__d_xr_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__xs1 = var_chaste_interface__IKs__d_xs1_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__xs2 = var_chaste_interface__IKs__d_xs2_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaT__b = var_chaste_interface__ICaT__d_b_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaT__g = var_chaste_interface__ICaT__d_g_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Irel__Rel = var_chaste_interface__Irel__d_Rel_d_Environment__time; // 'mM per millisecond per ms'
        const double d_dt_chaste_interface__Na__Na_i = var_chaste_interface__Na__d_Na_i_d_Environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__K__K_i = var_chaste_interface__K__d_K_i_d_Environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_T = var_chaste_interface__Ca__d_Ca_T_d_Environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_JSR_T = var_chaste_interface__Ca__d_Ca_JSR_T_d_Environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_NSR = var_chaste_interface__Ca__d_Ca_NSR_d_Environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ca__Over = var_chaste_interface__Ca__d_Over_d_Environment__time; // 'per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__cell__V = 0.0;
        }
        else
        {
            const double var_cell__d_V_d_Environment__time = -(var_cell__naiont + var_cell__kiont + var_cell__caiont); // 'millivolt per millisecond'
            const double var_chaste_interface__cell__d_V_d_Environment__time = var_cell__d_V_d_Environment__time; // ___units_17
            d_dt_chaste_interface__cell__V = var_chaste_interface__cell__d_V_d_Environment__time; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__cell__V;
        rDY[1] = d_dt_chaste_interface__INa__H;
        rDY[2] = d_dt_chaste_interface__INa__m;
        rDY[3] = d_dt_chaste_interface__INa__J;
        rDY[4] = d_dt_chaste_interface__ICaL__d;
        rDY[5] = d_dt_chaste_interface__ICaL__f;
        rDY[6] = d_dt_chaste_interface__IKr__xr;
        rDY[7] = d_dt_chaste_interface__IKs__xs1;
        rDY[8] = d_dt_chaste_interface__IKs__xs2;
        rDY[9] = d_dt_chaste_interface__ICaT__b;
        rDY[10] = d_dt_chaste_interface__ICaT__g;
        rDY[11] = d_dt_chaste_interface__Irel__Rel;
        rDY[12] = d_dt_chaste_interface__Na__Na_i;
        rDY[13] = d_dt_chaste_interface__K__K_i;
        rDY[14] = d_dt_chaste_interface__Ca__Ca_T;
        rDY[15] = d_dt_chaste_interface__Ca__Ca_JSR_T;
        rDY[16] = d_dt_chaste_interface__Ca__Ca_NSR;
        rDY[17] = d_dt_chaste_interface__Ca__Over;
    }
    
    std::vector<double> Dynamiclivshitz_rudy_2007FromCellML::ComputeDerivedQuantities(double var_chaste_interface__Environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__Ca__Ca_T = rY[14];
        // Units: mM; Initial value: 0.0257059808595638
        
        
        // Mathematics
        const double var_Ca__kmtrpn = 0.00050000000000000001; // mM
        const double var_Ca__kmcmdn = 0.0023800000000000002; // mM
        const double var_Ca__Ca_T = var_chaste_interface__Ca__Ca_T; // mM
        const double var_Ca__cmdnbar = 0.050000000000000003; // mM
        const double var_Ca__trpnbar = 0.070000000000000007; // mM
        const double var_Ca__bmyo = ((var_Ca__cmdnbar + var_Ca__trpnbar) - var_Ca__Ca_T) + var_Ca__kmtrpn + var_Ca__kmcmdn; // mM
        const double var_Ca__cmyo = ((var_Ca__kmcmdn * var_Ca__kmtrpn) - (var_Ca__Ca_T * (var_Ca__kmtrpn + var_Ca__kmcmdn))) + (var_Ca__trpnbar * var_Ca__kmcmdn) + (var_Ca__cmdnbar * var_Ca__kmtrpn); // mM2
        const double var_Ca__dmyo = (-var_Ca__kmtrpn) * var_Ca__kmcmdn * var_Ca__Ca_T; // mM3
        const double var_Ca__Ca_i = (((2.0 * sqrt((var_Ca__bmyo * var_Ca__bmyo) - (3.0 * var_Ca__cmyo))) / 3.0) * cos(acos((((9.0 * var_Ca__bmyo * var_Ca__cmyo) - (2.0 * var_Ca__bmyo * var_Ca__bmyo * var_Ca__bmyo)) - (27.0 * var_Ca__dmyo)) / (2.0 * pow((var_Ca__bmyo * var_Ca__bmyo) - (3.0 * var_Ca__cmyo), 1.5))) / 3.0)) - (var_Ca__bmyo / 3.0); // mM
        const double var_chaste_interface__Ca__Ca_i = var_Ca__Ca_i; // millimolar
        
        std::vector<double> dqs(1);
        dqs[0] = var_chaste_interface__Ca__Ca_i;
        return dqs;
    }
    
template<>
void OdeSystemInformation<Dynamiclivshitz_rudy_2007FromCellML>::Initialise(void)
{
    this->mSystemName = "LivshitzRudy2007";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-89.4356034692784);

    // rY[1]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.994401369032678);

    // rY[2]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000734780346592185);

    // rY[3]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.996100688673679);

    // rY[4]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.2514786721066e-27);

    // rY[5]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.997404948824816);

    // rY[6]:
    this->mVariableNames.push_back("IKr__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000162194715543637);

    // rY[7]:
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0285147332973946);

    // rY[8]:
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0764114040188678);

    // rY[9]:
    this->mVariableNames.push_back("ICaT__b");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000927461915392873);

    // rY[10]:
    this->mVariableNames.push_back("ICaT__g");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.952834331760863);

    // rY[11]:
    this->mVariableNames.push_back("SR_release_current");
    this->mVariableUnits.push_back("mM_per_ms");
    this->mInitialConditions.push_back(1.06874246141923e-23);

    // rY[12]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(16.612739313555);

    // rY[13]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(139.730914103161);

    // rY[14]:
    this->mVariableNames.push_back("Ca__Ca_T");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.0257059808595638);

    // rY[15]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(7.87371650296567);

    // rY[16]:
    this->mVariableNames.push_back("Ca__Ca_NSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(2.71518235696672);

    // rY[17]:
    this->mVariableNames.push_back("Ca__Over");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-12);

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_concentration");
    this->mDerivedQuantityUnits.push_back("millimolar");
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamiclivshitz_rudy_2007FromCellML)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamiclivshitz_rudy_2007FromCellML(pSolver, pStimulus);
    }
    
}

