//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: mahajan_shiferaw_model_2008
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on Wed Sep 11 11:22:49 2019
//! 
//! <autogenerated>

#include "mahajan_2008.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Dynamicmahajan_2008FromCellML::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_offset = 0.0; // millisecond
        const double var_chaste_interface__cell__stim_period = 400.0; // millisecond
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_cell__stim_amplitude =  -15.0; // nA_per_nF
        const double var_chaste_interface__cell__stim_amplitude_converter = var_cell__stim_amplitude; // nA_per_nF
        const double var_chaste_interface__cell__stim_amplitude = var_chaste_interface__cell__stim_amplitude_converter * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double Dynamicmahajan_2008FromCellML::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    
    Dynamicmahajan_2008FromCellML::Dynamicmahajan_2008FromCellML(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                26,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamicmahajan_2008FromCellML>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        this->mParameters[0] = 1.0; // (IKr,ScaleFactorGkr) [dimensionless]
        this->mParameters[1] = 1.0; // (IKs,ScaleFactorGks) [dimensionless]
        this->mParameters[2] = 1.0; // (Ito,ScaleFactorIto) [dimensionless]
        {% for param in modifiable_parameters %}
        this->mParameters[{{loop.index0}}] = {{param["initial_value"]}}; // ({{param{"name"]}}) [{{param["units"]}}]
        {% endfor %}
    }
    
    Dynamicmahajan_2008FromCellML::~Dynamicmahajan_2008FromCellML()
    {
    }
    
    double Dynamicmahajan_2008FromCellML::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.169816169406
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: millimolar; Initial value: 0.000256752008084
        double var_chaste_interface__INa__xm = rY[2];
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = rY[3];
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = rY[4];
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__ICaL__c1 = rY[5];
        // Units: dimensionless; Initial value: 0.000018211252
        double var_chaste_interface__ICaL__c2 = rY[6];
        // Units: dimensionless; Initial value: 0.979322592773
        double var_chaste_interface__ICaL__xi1ca = rY[7];
        // Units: dimensionless; Initial value: 0.001208153482
        double var_chaste_interface__ICaL__xi1ba = rY[8];
        // Units: dimensionless; Initial value: 0.000033616596
        double var_chaste_interface__ICaL__xi2ca = rY[9];
        // Units: dimensionless; Initial value: 0.004173008466
        double var_chaste_interface__ICaL__xi2ba = rY[10];
        // Units: dimensionless; Initial value: 0.015242594688
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = rY[14];
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = rY[15];
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = rY[16];
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = rY[17];
        // Units: dimensionless; Initial value: 0.993331326442
        double var_chaste_interface__Na__Na_i = rY[20];
        // Units: mM; Initial value: 11.441712311614
        double var_chaste_interface__Ca__Ca_submem = rY[22];
        // Units: uM; Initial value: 0.226941113355
        
        const double var_Environment__R = 8.3144720000000003; // J_per_moleK
        const double var_Environment__T = 308.0; // kelvin
        const double var_Environment__F = 96.485341500000004; // coulomb_per_mmole
        const double var_Environment__K_o = 5.4000000000000004; // mM
        const double var_Environment__Ca_o = 1.8; // mM
        const double var_Environment__Na_o = 136.0; // mM
        const double var_Environment__FonRT = var_Environment__F / (var_Environment__R * var_Environment__T); // per_mV
        const double var_reversal_potentials__K_i = 140.0; // mM
        const double var_reversal_potentials__FonRT = var_Environment__FonRT; // per_mV
        const double var_reversal_potentials__K_o = var_Environment__K_o; // mM
        const double var_reversal_potentials__ek = (1.0 / var_reversal_potentials__FonRT) * log(var_reversal_potentials__K_o / var_reversal_potentials__K_i); // mV
        const double var_IK1__ek = var_reversal_potentials__ek; // mV
        const double var_IK1__V = var_chaste_interface__cell__V; // mV
        const double var_IK1__aki = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_IK1__V - var_IK1__ek) - 59.215000000000003))); // per_ms
        const double var_IK1__bki = ((0.49124000000000001 * exp(0.080320000000000003 * ((var_IK1__V - var_IK1__ek) + 5.476))) + (1.0 * exp(0.061749999999999999 * ((var_IK1__V - var_IK1__ek) - 594.30999999999995)))) / (1.0 + exp((-0.51429999999999998) * ((var_IK1__V - var_IK1__ek) + 4.7530000000000001))); // per_ms
        const double var_IK1__xkin = var_IK1__aki / (var_IK1__aki + var_IK1__bki); // dimensionless
        const double var_IK1__K_o = var_Environment__K_o; // mM
        const double var_IK1__gkix = 0.29999999999999999; // uS_per_nF
        const double var_IK1__xik1 = var_IK1__gkix * sqrt(var_IK1__K_o / 5.4000000000000004) * var_IK1__xkin * (var_IK1__V - var_IK1__ek); // nA_per_nF
        const double var_cell__xik1 = var_IK1__xik1; // nA_per_nF
        const double var_Ito__ytos = var_chaste_interface__Ito__ytos; // dimensionless
        const double var_Ito__ek = var_reversal_potentials__ek; // mV
        const double var_Ito__gtos = 0.11; // uS_per_nF
        const double var_Ito__V = var_chaste_interface__cell__V; // mV
        const double var_Ito__rt2 = (var_Ito__V + 33.5) / 10.0; // dimensionless
        const double var_Ito__rs_inf = 1.0 / (1.0 + exp(var_Ito__rt2)); // dimensionless
        const double var_Ito__xtos = var_chaste_interface__Ito__xtos; // dimensionless
        const double var_Ito__xitos = mParameters[2] * var_Ito__gtos * var_Ito__xtos * (var_Ito__ytos + (0.5 * var_Ito__rs_inf)) * (var_Ito__V - var_Ito__ek); // nA_per_nF
        const double var_Ito__xtof = var_chaste_interface__Ito__xtof; // dimensionless
        const double var_Ito__gtof = 0.040000000000000001; // uS_per_nF
        const double var_Ito__ytof = var_chaste_interface__Ito__ytof; // dimensionless
        const double var_Ito__xitof = var_Ito__gtof * var_Ito__xtof * var_Ito__ytof * (var_Ito__V - var_Ito__ek); // nA_per_nF
        const double var_Ito__xito = var_Ito__xitos + var_Ito__xitof; // nA_per_nF
        const double var_cell__xito = var_Ito__xito; // nA_per_nF
        const double var_INaK__xkmko = 1.5; // mM
        const double var_INaK__V = var_chaste_interface__cell__V; // mV
        const double var_INaK__FonRT = var_Environment__FonRT; // per_mV
        const double var_INaK__Na_o = var_Environment__Na_o; // mM
        const double var_INaK__sigma = (exp(var_INaK__Na_o / 67.299999999999997) - 1.0) / 7.0; // dimensionless
        const double var_INaK__fNaK = 1.0 / (1.0 + (0.1245 * exp((-0.10000000000000001) * var_INaK__V * var_INaK__FonRT)) + (0.036499999999999998 * var_INaK__sigma * exp((-var_INaK__V) * var_INaK__FonRT))); // dimensionless
        const double var_INaK__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INaK__K_o = var_Environment__K_o; // mM
        const double var_INaK__xkmnai = 12.0; // mM
        const double var_INaK__gNaK = 1.5; // nA_per_nF
        const double var_INaK__xiNaK = (((var_INaK__gNaK * var_INaK__fNaK * var_INaK__Na_i) / (var_INaK__Na_i + var_INaK__xkmnai)) * var_INaK__K_o) / (var_INaK__K_o + var_INaK__xkmko); // nA_per_nF
        const double var_cell__xiNaK = var_INaK__xiNaK; // nA_per_nF
        const double var_cell__wca = 8.0; // mV_per_uM
        const double var_INaCa__gNaCa = 0.83999999999999997; // uM_per_ms
        const double var_INaCa__V = var_chaste_interface__cell__V; // mV
        const double var_INaCa__FonRT = var_Environment__FonRT; // per_mV
        const double var_INaCa__zw4 = 1.0 + (0.20000000000000001 * exp(var_INaCa__V * (0.34999999999999998 - 1.0) * var_INaCa__FonRT)); // dimensionless
        const double var_INaCa__xkdna = 0.29999999999999999; // uM
        const double var_INaCa__Ca_submem = var_chaste_interface__Ca__Ca_submem; // uM
        const double var_INaCa__aloss = 1.0 / (1.0 + pow(var_INaCa__xkdna / var_INaCa__Ca_submem, 3.0)); // dimensionless
        const double var_INaCa__Na_o = var_Environment__Na_o; // mM
        const double var_INaCa__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INaCa__Ca_o = var_Environment__Ca_o; // mM
        const double var_Ca__Ca_submem = var_chaste_interface__Ca__Ca_submem; // uM
        const double var_Ca__csm = var_Ca__Ca_submem / 1000.0; // mM
        const double var_INaCa__csm = var_Ca__csm; // mM
        const double var_INaCa__yz4 = (pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o) + (pow(var_INaCa__Na_o, 3.0) * var_INaCa__csm); // mM4
        const double var_INaCa__xmcao = 1.3; // mM
        const double var_INaCa__xmnao = 87.5; // mM
        const double var_INaCa__yz1 = (var_INaCa__xmcao * pow(var_INaCa__Na_i, 3.0)) + (pow(var_INaCa__xmnao, 3.0) * var_INaCa__csm); // mM4
        const double var_INaCa__xmcai = 0.0035999999999999999; // mM
        const double var_INaCa__xmnai = 12.300000000000001; // mM
        const double var_INaCa__yz3 = var_INaCa__xmcai * pow(var_INaCa__Na_o, 3.0) * (1.0 + pow(var_INaCa__Na_i / var_INaCa__xmnai, 3.0)); // mM4
        const double var_INaCa__yz2 = pow(var_INaCa__xmnai, 3.0) * var_INaCa__Ca_o * (1.0 + (var_INaCa__csm / var_INaCa__xmcai)); // mM4
        const double var_INaCa__zw8 = var_INaCa__yz1 + var_INaCa__yz2 + var_INaCa__yz3 + var_INaCa__yz4; // mM4
        const double var_INaCa__zw3 = (pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o * exp(var_INaCa__V * 0.34999999999999998 * var_INaCa__FonRT)) - (pow(var_INaCa__Na_o, 3.0) * var_INaCa__csm * exp(var_INaCa__V * (0.34999999999999998 - 1.0) * var_INaCa__FonRT)); // mM4
        const double var_INaCa__jNaCa = (var_INaCa__gNaCa * var_INaCa__aloss * var_INaCa__zw3) / (var_INaCa__zw4 * var_INaCa__zw8); // uM_per_ms
        const double var_INaCa__wca = var_cell__wca; // mV_per_uM
        const double var_INaCa__xiNaCa = var_INaCa__wca * var_INaCa__jNaCa; // nA_per_nF
        const double var_cell__xiNaCa = var_INaCa__xiNaCa; // nA_per_nF
        const double var_ICaL__Ca_o = var_Environment__Ca_o; // mM
        const double var_ICaL__V = var_chaste_interface__cell__V; // mV
        const double var_ICaL__pca = 0.00054000000000000001; // cm_per_s
        const double var_ICaL__FonRT = var_Environment__FonRT; // per_mV
        const double var_ICaL__F = var_Environment__F; // coulomb_per_mmole
        const double var_ICaL__za = var_ICaL__V * 2.0 * var_ICaL__FonRT; // dimensionless
        const double var_ICaL__csm = var_Ca__csm; // mM
        const double var_ICaL__rxa = (fabs(var_ICaL__za) < 0.001) ? ((4.0 * var_ICaL__pca * var_ICaL__F * var_ICaL__FonRT * ((var_ICaL__csm * exp(var_ICaL__za)) - (0.34100000000000003 * var_ICaL__Ca_o))) / (2.0 * var_ICaL__FonRT)) : ((4.0 * var_ICaL__pca * var_ICaL__V * var_ICaL__F * var_ICaL__FonRT * ((var_ICaL__csm * exp(var_ICaL__za)) - (0.34100000000000003 * var_ICaL__Ca_o))) / (exp(var_ICaL__za) - 1.0)); // mA_per_cm2
        const double var_ICaL__gca = 182.0; // mmole_per_coulomb_cm
        const double var_ICaL__xi1ba = var_chaste_interface__ICaL__xi1ba; // dimensionless
        const double var_ICaL__xi1ca = var_chaste_interface__ICaL__xi1ca; // dimensionless
        const double var_ICaL__c1 = var_chaste_interface__ICaL__c1; // dimensionless
        const double var_ICaL__c2 = var_chaste_interface__ICaL__c2; // dimensionless
        const double var_ICaL__xi2ca = var_chaste_interface__ICaL__xi2ca; // dimensionless
        const double var_ICaL__xi2ba = var_chaste_interface__ICaL__xi2ba; // dimensionless
        const double var_ICaL__po = (((((1.0 - var_ICaL__xi1ca) - var_ICaL__xi2ca) - var_ICaL__xi1ba) - var_ICaL__xi2ba) - var_ICaL__c1) - var_ICaL__c2; // dimensionless
        const double var_ICaL__jca = var_ICaL__gca * var_ICaL__po * var_ICaL__rxa; // uM_per_ms
        const double var_ICaL__wca = var_cell__wca; // mV_per_uM
        const double var_ICaL__xica = 2.0 * var_ICaL__wca * var_ICaL__jca; // nA_per_nF
        const double var_cell__xica = var_ICaL__xica; // nA_per_nF
        const double var_IKr__gkr = 0.012500000000000001; // uS_per_nF
        const double var_IKr__K_o = var_Environment__K_o; // mM
        const double var_IKr__xr = var_chaste_interface__IKr__xr; // dimensionless
        const double var_IKr__ek = var_reversal_potentials__ek; // mV
        const double var_IKr__V = var_chaste_interface__cell__V; // mV
        const double var_IKr__rg = 1.0 / (1.0 + exp((var_IKr__V + 33.0) / 22.399999999999999)); // dimensionless
        const double var_IKr__xikr = mParameters[0] * var_IKr__gkr * sqrt(var_IKr__K_o / 5.4000000000000004) * var_IKr__xr * var_IKr__rg * (var_IKr__V - var_IKr__ek); // nA_per_nF
        const double var_cell__xikr = var_IKr__xikr; // nA_per_nF
        const double var_IKs__xs2 = var_chaste_interface__IKs__xs2; // dimensionless
        const double var_IKs__xs1 = var_chaste_interface__IKs__xs1; // dimensionless
        const double var_IKs__Ca_i_converter = var_chaste_interface__Ca__Ca_i; // millimolar
        const double var_IKs__Ca_i = 1000.0 * var_IKs__Ca_i_converter; // uM
        const double var_IKs__gksx = 1.0 + (0.80000000000000004 / (1.0 + pow(0.5 / var_IKs__Ca_i, 3.0))); // dimensionless
        const double var_IKs__gks = 0.1386; // uS_per_nF
        const double var_IKs__V = var_chaste_interface__cell__V; // mV
        const double var_reversal_potentials__prNaK = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__Na_o = var_Environment__Na_o; // mM
        const double var_reversal_potentials__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_reversal_potentials__eks = (1.0 / var_reversal_potentials__FonRT) * log((var_reversal_potentials__K_o + (var_reversal_potentials__prNaK * var_reversal_potentials__Na_o)) / (var_reversal_potentials__K_i + (var_reversal_potentials__prNaK * var_reversal_potentials__Na_i))); // mV
        const double var_IKs__eks = var_reversal_potentials__eks; // mV
        const double var_IKs__xiks = mParameters[1] * var_IKs__gks * var_IKs__gksx * var_IKs__xs1 * var_IKs__xs2 * (var_IKs__V - var_IKs__eks); // nA_per_nF
        const double var_cell__xiks = var_IKs__xiks; // nA_per_nF
        const double var_cell__chaste_interface__chaste_membrane_capacitance = HeartConfig::Instance()->GetCapacitance(); // uF_per_cm2
        const double var_chaste_interface__cell__i_Stim = 0.0;
        const double var_cell__i_Stim_converter = var_chaste_interface__cell__i_Stim; // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converter / var_cell__chaste_interface__chaste_membrane_capacitance; // nA_per_nF
        const double var_INa__V = var_chaste_interface__cell__V; // mV
        const double var_INa__xm = var_chaste_interface__INa__xm; // dimensionless
        const double var_INa__xj = var_chaste_interface__INa__xj; // dimensionless
        const double var_INa__xh = var_chaste_interface__INa__xh; // dimensionless
        const double var_INa__gna = 12.0; // uS_per_nF
        const double var_reversal_potentials__ena = (1.0 / var_reversal_potentials__FonRT) * log(var_reversal_potentials__Na_o / var_reversal_potentials__Na_i); // mV
        const double var_INa__ena = var_reversal_potentials__ena; // mV
        const double var_INa__xina = var_INa__gna * var_INa__xh * var_INa__xj * var_INa__xm * var_INa__xm * var_INa__xm * (var_INa__V - var_INa__ena); // nA_per_nF
        const double var_cell__xina = var_INa__xina; // nA_per_nF
        const double var_cell__Itotal = -(var_cell__xina + var_cell__xik1 + var_cell__xikr + var_cell__xiks + var_cell__xito + var_cell__xiNaCa + var_cell__xica + var_cell__xiNaK + var_cell__i_Stim); // nA_per_nF
        const double var_chaste_interface__cell__Itotal = var_cell__Itotal; // nA_per_nF
        const double var_chaste_interface__i_ionic = (var_chaste_interface__cell__Itotal) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = -(var_chaste_interface__i_ionic);
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamicmahajan_2008FromCellML::EvaluateYDerivatives(double var_chaste_interface__Environment__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.169816169406
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: millimolar; Initial value: 0.000256752008084
        double var_chaste_interface__INa__xm = rY[2];
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = rY[3];
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = rY[4];
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__ICaL__c1 = rY[5];
        // Units: dimensionless; Initial value: 0.000018211252
        double var_chaste_interface__ICaL__c2 = rY[6];
        // Units: dimensionless; Initial value: 0.979322592773
        double var_chaste_interface__ICaL__xi1ca = rY[7];
        // Units: dimensionless; Initial value: 0.001208153482
        double var_chaste_interface__ICaL__xi1ba = rY[8];
        // Units: dimensionless; Initial value: 0.000033616596
        double var_chaste_interface__ICaL__xi2ca = rY[9];
        // Units: dimensionless; Initial value: 0.004173008466
        double var_chaste_interface__ICaL__xi2ba = rY[10];
        // Units: dimensionless; Initial value: 0.015242594688
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = rY[14];
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = rY[15];
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = rY[16];
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = rY[17];
        // Units: dimensionless; Initial value: 0.993331326442
        double var_chaste_interface__Irel__Ca_JSR = rY[18];
        // Units: uM; Initial value: 97.505463697266
        double var_chaste_interface__Irel__xir = rY[19];
        // Units: uM_per_ms; Initial value: 0.006679257264
        double var_chaste_interface__Na__Na_i = rY[20];
        // Units: mM; Initial value: 11.441712311614
        double var_chaste_interface__Ca__Ca_dyad = rY[21];
        // Units: uM; Initial value: 1.716573130685
        double var_chaste_interface__Ca__Ca_submem = rY[22];
        // Units: uM; Initial value: 0.226941113355
        double var_chaste_interface__Ca__Ca_NSR = rY[23];
        // Units: uM; Initial value: 104.450004990523
        double var_chaste_interface__Ca__tropi = rY[24];
        // Units: uM; Initial value: 22.171689894953
        double var_chaste_interface__Ca__trops = rY[25];
        // Units: uM; Initial value: 19.864701949854
        
        
        // Mathematics
        double d_dt_chaste_interface__cell__V;
        const double var_Environment__R = 8.3144720000000003; // J_per_moleK
        const double var_Environment__T = 308.0; // kelvin
        const double var_Environment__F = 96.485341500000004; // coulomb_per_mmole
        const double var_Environment__K_o = 5.4000000000000004; // mM
        const double var_Environment__Ca_o = 1.8; // mM
        const double var_Environment__Na_o = 136.0; // mM
        const double var_Environment__FonRT = var_Environment__F / (var_Environment__R * var_Environment__T); // per_mV
        const double var_reversal_potentials__FonRT = var_Environment__FonRT; // per_mV
        const double var_Ito__ytos = var_chaste_interface__Ito__ytos; // dimensionless
        const double var_Ito__V = var_chaste_interface__cell__V; // mV
        const double var_Ito__rt2 = (var_Ito__V + 33.5) / 10.0; // dimensionless
        const double var_Ito__xtos = var_chaste_interface__Ito__xtos; // dimensionless
        const double var_Ito__xtof = var_chaste_interface__Ito__xtof; // dimensionless
        const double var_Ito__ytof = var_chaste_interface__Ito__ytof; // dimensionless
        const double var_INaK__xkmko = 1.5; // mM
        const double var_INaK__V = var_chaste_interface__cell__V; // mV
        const double var_INaK__FonRT = var_Environment__FonRT; // per_mV
        const double var_INaK__Na_o = var_Environment__Na_o; // mM
        const double var_INaK__sigma = (exp(var_INaK__Na_o / 67.299999999999997) - 1.0) / 7.0; // dimensionless
        const double var_INaK__fNaK = 1.0 / (1.0 + (0.1245 * exp((-0.10000000000000001) * var_INaK__V * var_INaK__FonRT)) + (0.036499999999999998 * var_INaK__sigma * exp((-var_INaK__V) * var_INaK__FonRT))); // dimensionless
        const double var_INaK__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INaK__K_o = var_Environment__K_o; // mM
        const double var_INaK__xkmnai = 12.0; // mM
        const double var_INaK__gNaK = 1.5; // nA_per_nF
        const double var_INaK__xiNaK = (((var_INaK__gNaK * var_INaK__fNaK * var_INaK__Na_i) / (var_INaK__Na_i + var_INaK__xkmnai)) * var_INaK__K_o) / (var_INaK__K_o + var_INaK__xkmko); // nA_per_nF
        const double var_cell__wca = 8.0; // mV_per_uM
        const double var_INaCa__gNaCa = 0.83999999999999997; // uM_per_ms
        const double var_INaCa__V = var_chaste_interface__cell__V; // mV
        const double var_INaCa__FonRT = var_Environment__FonRT; // per_mV
        const double var_INaCa__zw4 = 1.0 + (0.20000000000000001 * exp(var_INaCa__V * (0.34999999999999998 - 1.0) * var_INaCa__FonRT)); // dimensionless
        const double var_INaCa__xkdna = 0.29999999999999999; // uM
        const double var_INaCa__Ca_submem = var_chaste_interface__Ca__Ca_submem; // uM
        const double var_INaCa__aloss = 1.0 / (1.0 + pow(var_INaCa__xkdna / var_INaCa__Ca_submem, 3.0)); // dimensionless
        const double var_INaCa__Na_o = var_Environment__Na_o; // mM
        const double var_INaCa__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INaCa__Ca_o = var_Environment__Ca_o; // mM
        const double var_Ca__Ca_submem = var_chaste_interface__Ca__Ca_submem; // uM
        const double var_Ca__csm = var_Ca__Ca_submem / 1000.0; // mM
        const double var_INaCa__csm = var_Ca__csm; // mM
        const double var_INaCa__yz4 = (pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o) + (pow(var_INaCa__Na_o, 3.0) * var_INaCa__csm); // mM4
        const double var_INaCa__xmcao = 1.3; // mM
        const double var_INaCa__xmnao = 87.5; // mM
        const double var_INaCa__yz1 = (var_INaCa__xmcao * pow(var_INaCa__Na_i, 3.0)) + (pow(var_INaCa__xmnao, 3.0) * var_INaCa__csm); // mM4
        const double var_INaCa__xmcai = 0.0035999999999999999; // mM
        const double var_INaCa__xmnai = 12.300000000000001; // mM
        const double var_INaCa__yz3 = var_INaCa__xmcai * pow(var_INaCa__Na_o, 3.0) * (1.0 + pow(var_INaCa__Na_i / var_INaCa__xmnai, 3.0)); // mM4
        const double var_INaCa__yz2 = pow(var_INaCa__xmnai, 3.0) * var_INaCa__Ca_o * (1.0 + (var_INaCa__csm / var_INaCa__xmcai)); // mM4
        const double var_INaCa__zw8 = var_INaCa__yz1 + var_INaCa__yz2 + var_INaCa__yz3 + var_INaCa__yz4; // mM4
        const double var_INaCa__zw3 = (pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o * exp(var_INaCa__V * 0.34999999999999998 * var_INaCa__FonRT)) - (pow(var_INaCa__Na_o, 3.0) * var_INaCa__csm * exp(var_INaCa__V * (0.34999999999999998 - 1.0) * var_INaCa__FonRT)); // mM4
        const double var_INaCa__jNaCa = (var_INaCa__gNaCa * var_INaCa__aloss * var_INaCa__zw3) / (var_INaCa__zw4 * var_INaCa__zw8); // uM_per_ms
        const double var_INaCa__wca = var_cell__wca; // mV_per_uM
        const double var_INaCa__xiNaCa = var_INaCa__wca * var_INaCa__jNaCa; // nA_per_nF
        const double var_ICaL__Ca_o = var_Environment__Ca_o; // mM
        const double var_ICaL__V = var_chaste_interface__cell__V; // mV
        const double var_ICaL__pca = 0.00054000000000000001; // cm_per_s
        const double var_ICaL__FonRT = var_Environment__FonRT; // per_mV
        const double var_ICaL__F = var_Environment__F; // coulomb_per_mmole
        const double var_ICaL__za = var_ICaL__V * 2.0 * var_ICaL__FonRT; // dimensionless
        const double var_ICaL__csm = var_Ca__csm; // mM
        const double var_ICaL__rxa = (fabs(var_ICaL__za) < 0.001) ? ((4.0 * var_ICaL__pca * var_ICaL__F * var_ICaL__FonRT * ((var_ICaL__csm * exp(var_ICaL__za)) - (0.34100000000000003 * var_ICaL__Ca_o))) / (2.0 * var_ICaL__FonRT)) : ((4.0 * var_ICaL__pca * var_ICaL__V * var_ICaL__F * var_ICaL__FonRT * ((var_ICaL__csm * exp(var_ICaL__za)) - (0.34100000000000003 * var_ICaL__Ca_o))) / (exp(var_ICaL__za) - 1.0)); // mA_per_cm2
        const double var_ICaL__gca = 182.0; // mmole_per_coulomb_cm
        const double var_ICaL__xi1ba = var_chaste_interface__ICaL__xi1ba; // dimensionless
        const double var_ICaL__xi1ca = var_chaste_interface__ICaL__xi1ca; // dimensionless
        const double var_ICaL__c1 = var_chaste_interface__ICaL__c1; // dimensionless
        const double var_ICaL__c2 = var_chaste_interface__ICaL__c2; // dimensionless
        const double var_ICaL__xi2ca = var_chaste_interface__ICaL__xi2ca; // dimensionless
        const double var_ICaL__xi2ba = var_chaste_interface__ICaL__xi2ba; // dimensionless
        const double var_ICaL__po = (((((1.0 - var_ICaL__xi1ca) - var_ICaL__xi2ca) - var_ICaL__xi1ba) - var_ICaL__xi2ba) - var_ICaL__c1) - var_ICaL__c2; // dimensionless
        const double var_ICaL__jca = var_ICaL__gca * var_ICaL__po * var_ICaL__rxa; // uM_per_ms
        const double var_IKr__xr = var_chaste_interface__IKr__xr; // dimensionless
        const double var_IKr__V = var_chaste_interface__cell__V; // mV
        const double var_IKs__xs2 = var_chaste_interface__IKs__xs2; // dimensionless
        const double var_IKs__xs1 = var_chaste_interface__IKs__xs1; // dimensionless
        const double var_IKs__V = var_chaste_interface__cell__V; // mV
        const double var_reversal_potentials__Na_o = var_Environment__Na_o; // mM
        const double var_reversal_potentials__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INa__V = var_chaste_interface__cell__V; // mV
        const double var_INa__xm = var_chaste_interface__INa__xm; // dimensionless
        const double var_INa__xj = var_chaste_interface__INa__xj; // dimensionless
        const double var_INa__xh = var_chaste_interface__INa__xh; // dimensionless
        const double var_INa__gna = 12.0; // uS_per_nF
        const double var_reversal_potentials__ena = (1.0 / var_reversal_potentials__FonRT) * log(var_reversal_potentials__Na_o / var_reversal_potentials__Na_i); // mV
        const double var_INa__ena = var_reversal_potentials__ena; // mV
        const double var_INa__xina = var_INa__gna * var_INa__xh * var_INa__xj * var_INa__xm * var_INa__xm * var_INa__xm * (var_INa__V - var_INa__ena); // nA_per_nF
        const double var_INa__am = (fabs(var_INa__V + 47.130000000000003) > 0.001) ? ((0.32000000000000001 * 1.0 * (var_INa__V + 47.130000000000003)) / (1.0 - exp((-0.10000000000000001) * (var_INa__V + 47.130000000000003)))) : 3.2000000000000002; // per_ms
        const double var_INa__bm = 0.080000000000000002 * exp((-var_INa__V) / 11.0); // per_ms
        const double var_INa__ah = (var_INa__V < (-40.0)) ? (0.13500000000000001 * exp((80.0 + var_INa__V) / (-6.7999999999999998))) : 0.0; // per_ms
        const double var_INa__bh = (var_INa__V < (-40.0)) ? ((3.5600000000000001 * exp(0.079000000000000001 * var_INa__V)) + (310000.0 * exp(0.34999999999999998 * var_INa__V))) : (1.0 / (0.13 * (1.0 + exp((var_INa__V + 10.66) / (-11.1))))); // per_ms
        const double var_INa__aj = (var_INa__V < (-40.0)) ? (((((-127140.0) * exp(0.24440000000000001 * var_INa__V)) - (3.4740000000000003e-05 * exp((-0.043909999999999998) * var_INa__V))) * 1.0 * (var_INa__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_INa__V + 79.230000000000004)))) : 0.0; // per_ms
        const double var_INa__bj = (var_INa__V < (-40.0)) ? ((0.1212 * exp((-0.01052) * var_INa__V)) / (1.0 + exp((-0.13780000000000001) * (var_INa__V + 40.140000000000001)))) : ((0.29999999999999999 * exp((-2.5349999999999999e-07) * var_INa__V)) / (1.0 + exp((-0.10000000000000001) * (var_INa__V + 32.0)))); // per_ms
        const double var_INa__d_xm_d_Environment__time = (var_INa__am * (1.0 - var_INa__xm)) - (var_INa__bm * var_INa__xm); // 'per millisecond'
        const double var_INa__d_xh_d_Environment__time = (var_INa__ah * (1.0 - var_INa__xh)) - (var_INa__bh * var_INa__xh); // 'per millisecond'
        const double var_INa__d_xj_d_Environment__time = (var_INa__aj * (1.0 - var_INa__xj)) - (var_INa__bj * var_INa__xj); // 'per millisecond'
        const double var_ICaL__Ca_dyad = var_chaste_interface__Ca__Ca_dyad; // uM
        const double var_ICaL__vth = 0.0; // mV
        const double var_ICaL__s6 = 8.0; // mV
        const double var_ICaL__poinf = 1.0 / (1.0 + exp((-(var_ICaL__V - var_ICaL__vth)) / var_ICaL__s6)); // dimensionless
        const double var_ICaL__cat = 3.0; // uM
        const double var_ICaL__fca = 1.0 / (1.0 + pow(var_ICaL__cat / var_ICaL__Ca_dyad, 3.0)); // dimensionless
        const double var_ICaL__vx =  -40.0; // mV
        const double var_ICaL__sx = 3.0; // mV
        const double var_ICaL__vy =  -40.0; // mV
        const double var_ICaL__sy = 4.0; // mV
        const double var_ICaL__vyr =  -40.0; // mV
        const double var_ICaL__syr = 11.32; // mV
        const double var_ICaL__cpt = 6.0936500000000002; // uM
        const double var_ICaL__taupo = 1.0; // ms
        const double var_ICaL__alpha = var_ICaL__poinf / var_ICaL__taupo; // per_ms
        const double var_ICaL__beta = (1.0 - var_ICaL__poinf) / var_ICaL__taupo; // per_ms
        const double var_ICaL__k1 = 0.024167999999999999 * var_ICaL__fca; // per_ms
        const double var_ICaL__k2 = 0.000103615; // per_ms
        const double var_ICaL__k1t = 0.00413; // per_ms
        const double var_ICaL__k2t = 0.0022399999999999998; // per_ms
        const double var_ICaL__poi = 1.0 / (1.0 + exp((-(var_ICaL__V - var_ICaL__vx)) / var_ICaL__sx)); // dimensionless
        const double var_ICaL__tau3 = 3.0; // ms
        const double var_ICaL__k3 = (1.0 - var_ICaL__poi) / var_ICaL__tau3; // per_ms
        const double var_ICaL__k3t = var_ICaL__k3; // per_ms
        const double var_ICaL__Ps = 1.0 / (1.0 + exp((-(var_ICaL__V - var_ICaL__vyr)) / var_ICaL__syr)); // dimensionless
        const double var_ICaL__tca = 78.032899999999998; // ms
        const double var_ICaL__tau_ca = (var_ICaL__tca / (1.0 + pow(var_ICaL__Ca_dyad / var_ICaL__cpt, 4.0))) + 0.10000000000000001; // ms
        const double var_ICaL__recov = 10.0 + (4954.0 * exp(var_ICaL__V / 15.6)); // ms
        const double var_ICaL__Pr = 1.0 - (1.0 / (1.0 + exp((-(var_ICaL__V - var_ICaL__vy)) / var_ICaL__sy))); // dimensionless
        const double var_ICaL__tauca = ((var_ICaL__recov - var_ICaL__tau_ca) * var_ICaL__Pr) + var_ICaL__tau_ca; // ms
        const double var_ICaL__k6 = (var_ICaL__fca * var_ICaL__Ps) / var_ICaL__tauca; // per_ms
        const double var_ICaL__k5 = (1.0 - var_ICaL__Ps) / var_ICaL__tauca; // per_ms
        const double var_ICaL__tauba = ((var_ICaL__recov - 450.0) * var_ICaL__Pr) + 450.0; // ms
        const double var_ICaL__k6t = var_ICaL__Ps / var_ICaL__tauba; // per_ms
        const double var_ICaL__k5t = (1.0 - var_ICaL__Ps) / var_ICaL__tauba; // per_ms
        const double var_ICaL__k4 = (((((var_ICaL__k3 * var_ICaL__alpha) / var_ICaL__beta) * var_ICaL__k1) / var_ICaL__k2) * var_ICaL__k5) / var_ICaL__k6; // per_ms
        const double var_ICaL__k4t = (((((var_ICaL__k3t * var_ICaL__alpha) / var_ICaL__beta) * var_ICaL__k1t) / var_ICaL__k2t) * var_ICaL__k5t) / var_ICaL__k6t; // per_ms
        const double var_ICaL__r1 = 0.29999999999999999; // per_ms
        const double var_ICaL__r2 = 3.0; // per_ms
        const double var_ICaL__s1 = 0.018268800000000002 * var_ICaL__fca; // per_ms
        const double var_ICaL__s1t = 0.0019499999999999999; // per_ms
        const double var_ICaL__s2 = (((var_ICaL__s1 * var_ICaL__r1) / var_ICaL__r2) * var_ICaL__k2) / var_ICaL__k1; // per_ms
        const double var_ICaL__s2t = (((var_ICaL__s1t * var_ICaL__r1) / var_ICaL__r2) * var_ICaL__k2t) / var_ICaL__k1t; // per_ms
        const double var_ICaL__d_c1_d_Environment__time = ((var_ICaL__alpha * var_ICaL__c2) + (var_ICaL__k2 * var_ICaL__xi1ca) + (var_ICaL__k2t * var_ICaL__xi1ba) + (var_ICaL__r2 * var_ICaL__po)) - ((var_ICaL__beta + var_ICaL__r1 + var_ICaL__k1t + var_ICaL__k1) * var_ICaL__c1); // 'per millisecond'
        const double var_ICaL__d_c2_d_Environment__time = ((var_ICaL__beta * var_ICaL__c1) + (var_ICaL__k5 * var_ICaL__xi2ca) + (var_ICaL__k5t * var_ICaL__xi2ba)) - ((var_ICaL__k6 + var_ICaL__k6t + var_ICaL__alpha) * var_ICaL__c2); // 'per millisecond'
        const double var_ICaL__d_xi1ca_d_Environment__time = ((var_ICaL__k1 * var_ICaL__c1) + (var_ICaL__k4 * var_ICaL__xi2ca) + (var_ICaL__s1 * var_ICaL__po)) - ((var_ICaL__k3 + var_ICaL__k2 + var_ICaL__s2) * var_ICaL__xi1ca); // 'per millisecond'
        const double var_ICaL__d_xi1ba_d_Environment__time = ((var_ICaL__k1t * var_ICaL__c1) + (var_ICaL__k4t * var_ICaL__xi2ba) + (var_ICaL__s1t * var_ICaL__po)) - ((var_ICaL__k3t + var_ICaL__k2t + var_ICaL__s2t) * var_ICaL__xi1ba); // 'per millisecond'
        const double var_ICaL__d_xi2ca_d_Environment__time = ((var_ICaL__k3 * var_ICaL__xi1ca) + (var_ICaL__k6 * var_ICaL__c2)) - ((var_ICaL__k5 + var_ICaL__k4) * var_ICaL__xi2ca); // 'per millisecond'
        const double var_ICaL__d_xi2ba_d_Environment__time = ((var_ICaL__k3t * var_ICaL__xi1ba) + (var_ICaL__k6t * var_ICaL__c2)) - ((var_ICaL__k5t + var_ICaL__k4t) * var_ICaL__xi2ba); // 'per millisecond'
        const double var_IKr__xkrv1 = (fabs(var_IKr__V + 7.0) > 0.001) ? ((0.0013799999999999999 * 1.0 * (var_IKr__V + 7.0)) / (1.0 - exp((-0.123) * (var_IKr__V + 7.0)))) : (0.0013799999999999999 / 0.123); // per_ms
        const double var_IKr__xkrv2 = (fabs(var_IKr__V + 10.0) > 0.001) ? ((0.00060999999999999997 * 1.0 * (var_IKr__V + 10.0)) / (exp(0.14499999999999999 * (var_IKr__V + 10.0)) - 1.0)) : (0.00060999999999999997 / 0.14499999999999999); // per_ms
        const double var_IKr__taukr = 1.0 / (var_IKr__xkrv1 + var_IKr__xkrv2); // ms
        const double var_IKr__xkrinf = 1.0 / (1.0 + exp((-(var_IKr__V + 50.0)) / 7.5)); // dimensionless
        const double var_IKr__d_xr_d_Environment__time = (var_IKr__xkrinf - var_IKr__xr) / var_IKr__taukr; // 'per millisecond'
        const double var_IKs__xs1ss = 1.0 / (1.0 + exp((-(var_IKs__V - 1.5)) / 16.699999999999999)); // dimensionless
        const double var_IKs__xs2ss = var_IKs__xs1ss; // dimensionless
        const double var_IKs__tauxs1 = (fabs(var_IKs__V + 30.0) < (0.001 / 0.068699999999999997)) ? (1.0 / ((7.1899999999999999e-05 / 0.14799999999999999) + (0.00013100000000000001 / 0.068699999999999997))) : (1.0 / (((7.1899999999999999e-05 * (var_IKs__V + 30.0)) / (1.0 - exp((-0.14799999999999999) * (var_IKs__V + 30.0)))) + ((0.00013100000000000001 * (var_IKs__V + 30.0)) / (exp(0.068699999999999997 * (var_IKs__V + 30.0)) - 1.0)))); // ms
        const double var_IKs__tauxs2 = 4.0 * var_IKs__tauxs1; // ms
        const double var_IKs__d_xs1_d_Environment__time = (var_IKs__xs1ss - var_IKs__xs1) / var_IKs__tauxs1; // 'per millisecond'
        const double var_IKs__d_xs2_d_Environment__time = (var_IKs__xs2ss - var_IKs__xs2) / var_IKs__tauxs2; // 'per millisecond'
        const double var_Ito__rt1 = (-(var_Ito__V + 3.0)) / 15.0; // dimensionless
        const double var_Ito__rt3 = (var_Ito__V + 60.0) / 10.0; // dimensionless
        const double var_Ito__rt4 = (((-var_Ito__V) / 30.0) * var_Ito__V) / 30.0; // dimensionless
        const double var_Ito__rt5 = (var_Ito__V + 33.5) / 10.0; // dimensionless
        const double var_Ito__xtos_inf = 1.0 / (1.0 + exp(var_Ito__rt1)); // dimensionless
        const double var_Ito__ytos_inf = 1.0 / (1.0 + exp(var_Ito__rt2)); // dimensionless
        const double var_Ito__xtof_inf = var_Ito__xtos_inf; // dimensionless
        const double var_Ito__ytof_inf = var_Ito__ytos_inf; // dimensionless
        const double var_Ito__txs = (9.0 / (1.0 + exp(-var_Ito__rt1))) + 0.5; // ms
        const double var_Ito__tys = (3000.0 / (1.0 + exp(var_Ito__rt3))) + 30.0; // ms
        const double var_Ito__txf = (3.5 * exp(var_Ito__rt4)) + 1.5; // ms
        const double var_Ito__tyf = (20.0 / (1.0 + exp(var_Ito__rt5))) + 20.0; // ms
        const double var_Ito__d_xtos_d_Environment__time = (var_Ito__xtos_inf - var_Ito__xtos) / var_Ito__txs; // 'per millisecond'
        const double var_Ito__d_ytos_d_Environment__time = (var_Ito__ytos_inf - var_Ito__ytos) / var_Ito__tys; // 'per millisecond'
        const double var_Ito__d_xtof_d_Environment__time = (var_Ito__xtof_inf - var_Ito__xtof) / var_Ito__txf; // 'per millisecond'
        const double var_Ito__d_ytof_d_Environment__time = (var_Ito__ytof_inf - var_Ito__ytof) / var_Ito__tyf; // 'per millisecond'
        const double var_Irel__V = var_chaste_interface__cell__V; // mV
        const double var_Irel__Ca_NSR = var_chaste_interface__Ca__Ca_NSR; // uM
        const double var_Ileak_Iup_Ixfer__Ca_NSR = var_chaste_interface__Ca__Ca_NSR; // uM
        const double var_Ileak_Iup_Ixfer__gleak = 2.069e-05; // per_ms
        const double var_Ileak_Iup_Ixfer__kj = 50.0; // uM
        const double var_Ileak_Iup_Ixfer__Ca_i_converter = var_chaste_interface__Ca__Ca_i; // millimolar
        const double var_Ileak_Iup_Ixfer__Ca_i = 1000.0 * var_Ileak_Iup_Ixfer__Ca_i_converter; // uM
        const double var_Ileak_Iup_Ixfer__jleak = ((var_Ileak_Iup_Ixfer__gleak * var_Ileak_Iup_Ixfer__Ca_NSR * var_Ileak_Iup_Ixfer__Ca_NSR) / ((var_Ileak_Iup_Ixfer__Ca_NSR * var_Ileak_Iup_Ixfer__Ca_NSR) + (var_Ileak_Iup_Ixfer__kj * var_Ileak_Iup_Ixfer__kj))) * ((var_Ileak_Iup_Ixfer__Ca_NSR * 16.667000000000002) - var_Ileak_Iup_Ixfer__Ca_i); // uM_per_ms
        const double var_Ca__jleak = var_Ileak_Iup_Ixfer__jleak; // uM_per_ms
        const double var_Ileak_Iup_Ixfer__cup = 0.5; // uM
        const double var_Ileak_Iup_Ixfer__vup = 0.40000000000000002; // uM_per_ms
        const double var_Ileak_Iup_Ixfer__jup = (var_Ileak_Iup_Ixfer__vup * var_Ileak_Iup_Ixfer__Ca_i * var_Ileak_Iup_Ixfer__Ca_i) / ((var_Ileak_Iup_Ixfer__Ca_i * var_Ileak_Iup_Ixfer__Ca_i) + (var_Ileak_Iup_Ixfer__cup * var_Ileak_Iup_Ixfer__cup)); // uM_per_ms
        const double var_Ca__jup = var_Ileak_Iup_Ixfer__jup; // uM_per_ms
        const double var_Ca__xir = var_chaste_interface__Irel__xir; // uM_per_ms
        const double var_Ca__dCa_JSR = ((-var_Ca__xir) + var_Ca__jup) - var_Ca__jleak; // uM_per_ms
        const double var_Irel__dCa_JSR = var_Ca__dCa_JSR; // uM_per_ms
        const double var_Irel__po = var_ICaL__po; // dimensionless
        const double var_Irel__rxa = var_ICaL__rxa; // mA_per_cm2
        const double var_Irel__cstar = 90.0; // uM
        const double var_Irel__Ca_JSR = var_chaste_interface__Irel__Ca_JSR; // uM
        const double var_Irel__gryr = 2.5807899999999999; // per_ms
        const double var_Irel__gbarsr = 26841.799999999999; // dimensionless
        const double var_Irel__gdyad = 9000.0; // mmole_per_coulomb_cm
        const double var_Irel__ax = 0.35759999999999997; // per_mV
        const double var_Irel__ay = 0.050000000000000003; // per_mV
        const double var_Irel__av = 11.300000000000001; // per_ms
        const double var_Irel__bv = ((1.0 - var_Irel__av) * var_Irel__cstar) - 50.0; // uM_per_ms
        const double var_Irel__Qr0 = ((var_Irel__Ca_JSR > 50.0) && (var_Irel__Ca_JSR < var_Irel__cstar)) ? ((var_Irel__Ca_JSR - 50.0) / 1.0) : (var_Irel__Ca_JSR >= var_Irel__cstar) ? ((var_Irel__av * var_Irel__Ca_JSR) + var_Irel__bv) : 0.0; // uM_per_ms
        const double var_Irel__Qr = (var_Irel__Ca_NSR * var_Irel__Qr0) / var_Irel__cstar; // uM_per_ms
        const double var_Irel__sparkV = exp((-var_Irel__ay) * (var_Irel__V + 30.0)) / (1.0 + exp((-var_Irel__ay) * (var_Irel__V + 30.0))); // dimensionless
        const double var_Irel__spark_rate = (var_Irel__gryr / 1.0) * var_Irel__po * fabs(var_Irel__rxa) * var_Irel__sparkV; // per_ms
        const double var_Irel__taua = 100.0; // ms
        const double var_Irel__taur = 30.0; // ms
        const double var_Irel__xirp = (((var_Irel__po * var_Irel__Qr * fabs(var_Irel__rxa) * var_Irel__gbarsr) / 1.0) * exp((-var_Irel__ax) * (var_Irel__V + 30.0))) / (1.0 + exp((-var_Irel__ax) * (var_Irel__V + 30.0))); // uM_per_ms
        const double var_Irel__xicap = var_Irel__po * var_Irel__gdyad * fabs(var_Irel__rxa); // uM_per_ms
        const double var_Irel__xiryr = var_Irel__xirp + var_Irel__xicap; // uM_per_ms
        const double var_Irel__xir = var_chaste_interface__Irel__xir; // uM_per_ms
        const double var_Irel__d_Ca_JSR_d_Environment__time = (var_Irel__Ca_NSR - var_Irel__Ca_JSR) / var_Irel__taua; // 'micromolar per millisecond'
        const double var_Irel__d_xir_d_Environment__time = (var_Irel__spark_rate * var_Irel__Qr) - ((var_Irel__xir * (1.0 - ((var_Irel__taur * var_Irel__dCa_JSR) / var_Irel__Ca_NSR))) / var_Irel__taur); // 'micromolar per_ms per millisecond'
        const double var_Na__wca = var_cell__wca; // mV_per_uM
        const double var_Na__xina = var_INa__xina; // nA_per_nF
        const double var_Na__xiNaK = var_INaK__xiNaK; // nA_per_nF
        const double var_Na__xiNaCa = var_INaCa__xiNaCa; // nA_per_nF
        const double var_Na__d_Na_i_d_Environment__time = (-(var_Na__xina + (3.0 * var_Na__xiNaK) + (3.0 * var_Na__xiNaCa))) / (var_Na__wca * 1000.0); // 'millimolar per millisecond'
        const double var_Ca__xiryr = var_Irel__xiryr; // uM_per_ms
        const double var_Ca__Ca_dyad = var_chaste_interface__Ca__Ca_dyad; // uM
        const double var_Ca__Ca_i_converter = var_chaste_interface__Ca__Ca_i; // millimolar
        const double var_Ca__Ca_i = 1000.0 * var_Ca__Ca_i_converter; // uM
        const double var_Ca__bcal = 24.0; // uM
        const double var_Ca__xkcal = 7.0; // uM
        const double var_Ca__srmax = 47.0; // uM
        const double var_Ca__srkd = 0.59999999999999998; // uM
        const double var_Ca__bmem = 15.0; // uM
        const double var_Ca__kmem = 0.29999999999999999; // uM
        const double var_Ca__bsar = 42.0; // uM
        const double var_Ca__ksar = 13.0; // uM
        const double var_Ca__bpxs = (var_Ca__bcal * var_Ca__xkcal) / ((var_Ca__xkcal + var_Ca__Ca_submem) * (var_Ca__xkcal + var_Ca__Ca_submem)); // dimensionless
        const double var_Ca__spxs = (var_Ca__srmax * var_Ca__srkd) / ((var_Ca__srkd + var_Ca__Ca_submem) * (var_Ca__srkd + var_Ca__Ca_submem)); // dimensionless
        const double var_Ca__mempxs = (var_Ca__bmem * var_Ca__kmem) / ((var_Ca__kmem + var_Ca__Ca_submem) * (var_Ca__kmem + var_Ca__Ca_submem)); // dimensionless
        const double var_Ca__sarpxs = (var_Ca__bsar * var_Ca__ksar) / ((var_Ca__ksar + var_Ca__Ca_submem) * (var_Ca__ksar + var_Ca__Ca_submem)); // dimensionless
        const double var_Ca__dcsib = 1.0 / (1.0 + var_Ca__bpxs + var_Ca__spxs + var_Ca__mempxs + var_Ca__sarpxs); // dimensionless
        const double var_Ca__bpxi = (var_Ca__bcal * var_Ca__xkcal) / ((var_Ca__xkcal + var_Ca__Ca_i) * (var_Ca__xkcal + var_Ca__Ca_i)); // dimensionless
        const double var_Ca__spxi = (var_Ca__srmax * var_Ca__srkd) / ((var_Ca__srkd + var_Ca__Ca_i) * (var_Ca__srkd + var_Ca__Ca_i)); // dimensionless
        const double var_Ca__mempxi = (var_Ca__bmem * var_Ca__kmem) / ((var_Ca__kmem + var_Ca__Ca_i) * (var_Ca__kmem + var_Ca__Ca_i)); // dimensionless
        const double var_Ca__sarpxi = (var_Ca__bsar * var_Ca__ksar) / ((var_Ca__ksar + var_Ca__Ca_i) * (var_Ca__ksar + var_Ca__Ca_i)); // dimensionless
        const double var_Ca__dciib = 1.0 / (1.0 + var_Ca__bpxi + var_Ca__spxi + var_Ca__mempxi + var_Ca__sarpxi); // dimensionless
        const double var_Ca__xkon = 0.0327; // per_uM_per_ms
        const double var_Ca__xkoff = 0.019599999999999999; // per_ms
        const double var_Ca__btrop = 70.0; // uM
        const double var_Ca__tropi = var_chaste_interface__Ca__tropi; // uM
        const double var_Ca__xbi = (var_Ca__xkon * var_Ca__Ca_i * (var_Ca__btrop - var_Ca__tropi)) - (var_Ca__xkoff * var_Ca__tropi); // uM_per_ms
        const double var_Ca__trops = var_chaste_interface__Ca__trops; // uM
        const double var_Ca__xbs = (var_Ca__xkon * var_Ca__Ca_submem * (var_Ca__btrop - var_Ca__trops)) - (var_Ca__xkoff * var_Ca__trops); // uM_per_ms
        const double var_Ca__taud = 4.0; // ms
        const double var_Ca__taups = 0.5; // ms
        const double var_Ca__jd = (var_Ca__Ca_submem - var_Ca__Ca_i) / var_Ca__taud; // uM_per_ms
        const double var_Ca__jNaCa = var_INaCa__jNaCa; // uM_per_ms
        const double var_Ca__jca = var_ICaL__jca; // uM_per_ms
        const double var_Ca__d_Ca_i_d_Environment__time = var_Ca__dciib * (((var_Ca__jd - var_Ca__jup) + var_Ca__jleak) - var_Ca__xbi); // 'micromolar per millisecond'
        const double var_Ca__d_Ca_dyad_d_Environment__time = var_Ca__xiryr - ((var_Ca__Ca_dyad - var_Ca__Ca_submem) / var_Ca__taups); // 'micromolar per millisecond'
        const double var_Ca__d_Ca_submem_d_Environment__time = var_Ca__dcsib * ((50.0 * (((var_Ca__xir - var_Ca__jd) - var_Ca__jca) + var_Ca__jNaCa)) - var_Ca__xbs); // 'micromolar per millisecond'
        const double var_Ca__d_Ca_NSR_d_Environment__time = var_Ca__dCa_JSR; // 'micromolar per millisecond'
        const double var_Ca__d_tropi_d_Environment__time = var_Ca__xbi; // 'micromolar per millisecond'
        const double var_Ca__d_trops_d_Environment__time = var_Ca__xbs; // 'micromolar per millisecond'
        const double var_chaste_interface__Ca__d_Ca_i_d_Environment__time_converter = var_Ca__d_Ca_i_d_Environment__time; // ___units_45
        const double var_chaste_interface__Ca__d_Ca_i_d_Environment__time = 0.001 * var_chaste_interface__Ca__d_Ca_i_d_Environment__time_converter; // 'millimolar per millisecond'
        const double var_chaste_interface__INa__d_xm_d_Environment__time = var_INa__d_xm_d_Environment__time; // ___units_13
        const double var_chaste_interface__INa__d_xh_d_Environment__time = var_INa__d_xh_d_Environment__time; // ___units_13
        const double var_chaste_interface__INa__d_xj_d_Environment__time = var_INa__d_xj_d_Environment__time; // ___units_13
        const double var_chaste_interface__ICaL__d_c1_d_Environment__time = var_ICaL__d_c1_d_Environment__time; // ___units_13
        const double var_chaste_interface__ICaL__d_c2_d_Environment__time = var_ICaL__d_c2_d_Environment__time; // ___units_13
        const double var_chaste_interface__ICaL__d_xi1ca_d_Environment__time = var_ICaL__d_xi1ca_d_Environment__time; // ___units_13
        const double var_chaste_interface__ICaL__d_xi1ba_d_Environment__time = var_ICaL__d_xi1ba_d_Environment__time; // ___units_13
        const double var_chaste_interface__ICaL__d_xi2ca_d_Environment__time = var_ICaL__d_xi2ca_d_Environment__time; // ___units_13
        const double var_chaste_interface__ICaL__d_xi2ba_d_Environment__time = var_ICaL__d_xi2ba_d_Environment__time; // ___units_13
        const double var_chaste_interface__IKr__d_xr_d_Environment__time = var_IKr__d_xr_d_Environment__time; // ___units_13
        const double var_chaste_interface__IKs__d_xs1_d_Environment__time = var_IKs__d_xs1_d_Environment__time; // ___units_13
        const double var_chaste_interface__IKs__d_xs2_d_Environment__time = var_IKs__d_xs2_d_Environment__time; // ___units_13
        const double var_chaste_interface__Ito__d_xtos_d_Environment__time = var_Ito__d_xtos_d_Environment__time; // ___units_13
        const double var_chaste_interface__Ito__d_ytos_d_Environment__time = var_Ito__d_ytos_d_Environment__time; // ___units_13
        const double var_chaste_interface__Ito__d_xtof_d_Environment__time = var_Ito__d_xtof_d_Environment__time; // ___units_13
        const double var_chaste_interface__Ito__d_ytof_d_Environment__time = var_Ito__d_ytof_d_Environment__time; // ___units_13
        const double var_chaste_interface__Irel__d_Ca_JSR_d_Environment__time = var_Irel__d_Ca_JSR_d_Environment__time; // ___units_82
        const double var_chaste_interface__Irel__d_xir_d_Environment__time = var_Irel__d_xir_d_Environment__time; // ___units_83
        const double var_chaste_interface__Na__d_Na_i_d_Environment__time = var_Na__d_Na_i_d_Environment__time; // ___units_84
        const double var_chaste_interface__Ca__d_Ca_dyad_d_Environment__time = var_Ca__d_Ca_dyad_d_Environment__time; // ___units_82
        const double var_chaste_interface__Ca__d_Ca_submem_d_Environment__time = var_Ca__d_Ca_submem_d_Environment__time; // ___units_82
        const double var_chaste_interface__Ca__d_Ca_NSR_d_Environment__time = var_Ca__d_Ca_NSR_d_Environment__time; // ___units_82
        const double var_chaste_interface__Ca__d_tropi_d_Environment__time = var_Ca__d_tropi_d_Environment__time; // ___units_82
        const double var_chaste_interface__Ca__d_trops_d_Environment__time = var_Ca__d_trops_d_Environment__time; // ___units_82
        const double d_dt_chaste_interface__Ca__Ca_i = var_chaste_interface__Ca__d_Ca_i_d_Environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__INa__xm = var_chaste_interface__INa__d_xm_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__INa__xh = var_chaste_interface__INa__d_xh_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__INa__xj = var_chaste_interface__INa__d_xj_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__c1 = var_chaste_interface__ICaL__d_c1_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__c2 = var_chaste_interface__ICaL__d_c2_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__xi1ca = var_chaste_interface__ICaL__d_xi1ca_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__xi1ba = var_chaste_interface__ICaL__d_xi1ba_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__xi2ca = var_chaste_interface__ICaL__d_xi2ca_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__xi2ba = var_chaste_interface__ICaL__d_xi2ba_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKr__xr = var_chaste_interface__IKr__d_xr_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__xs1 = var_chaste_interface__IKs__d_xs1_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__xs2 = var_chaste_interface__IKs__d_xs2_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Ito__xtos = var_chaste_interface__Ito__d_xtos_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Ito__ytos = var_chaste_interface__Ito__d_ytos_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Ito__xtof = var_chaste_interface__Ito__d_xtof_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Ito__ytof = var_chaste_interface__Ito__d_ytof_d_Environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Irel__Ca_JSR = var_chaste_interface__Irel__d_Ca_JSR_d_Environment__time; // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Irel__xir = var_chaste_interface__Irel__d_xir_d_Environment__time; // 'micromolar per_ms per millisecond'
        const double d_dt_chaste_interface__Na__Na_i = var_chaste_interface__Na__d_Na_i_d_Environment__time; // 'millimolar per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_dyad = var_chaste_interface__Ca__d_Ca_dyad_d_Environment__time; // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_submem = var_chaste_interface__Ca__d_Ca_submem_d_Environment__time; // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_NSR = var_chaste_interface__Ca__d_Ca_NSR_d_Environment__time; // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Ca__tropi = var_chaste_interface__Ca__d_tropi_d_Environment__time; // 'micromolar per millisecond'
        const double d_dt_chaste_interface__Ca__trops = var_chaste_interface__Ca__d_trops_d_Environment__time; // 'micromolar per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__cell__V = 0.0;
        }
        else
        {
            const double var_reversal_potentials__K_i = 140.0; // mM
            const double var_reversal_potentials__K_o = var_Environment__K_o; // mM
            const double var_reversal_potentials__ek = (1.0 / var_reversal_potentials__FonRT) * log(var_reversal_potentials__K_o / var_reversal_potentials__K_i); // mV
            const double var_IK1__ek = var_reversal_potentials__ek; // mV
            const double var_IK1__V = var_chaste_interface__cell__V; // mV
            const double var_IK1__aki = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_IK1__V - var_IK1__ek) - 59.215000000000003))); // per_ms
            const double var_IK1__bki = ((0.49124000000000001 * exp(0.080320000000000003 * ((var_IK1__V - var_IK1__ek) + 5.476))) + (1.0 * exp(0.061749999999999999 * ((var_IK1__V - var_IK1__ek) - 594.30999999999995)))) / (1.0 + exp((-0.51429999999999998) * ((var_IK1__V - var_IK1__ek) + 4.7530000000000001))); // per_ms
            const double var_IK1__xkin = var_IK1__aki / (var_IK1__aki + var_IK1__bki); // dimensionless
            const double var_IK1__K_o = var_Environment__K_o; // mM
            const double var_IK1__gkix = 0.29999999999999999; // uS_per_nF
            const double var_IK1__xik1 = var_IK1__gkix * sqrt(var_IK1__K_o / 5.4000000000000004) * var_IK1__xkin * (var_IK1__V - var_IK1__ek); // nA_per_nF
            const double var_cell__xik1 = var_IK1__xik1; // nA_per_nF
            const double var_Ito__ek = var_reversal_potentials__ek; // mV
            const double var_Ito__gtos = 0.11; // uS_per_nF
            const double var_Ito__rs_inf = 1.0 / (1.0 + exp(var_Ito__rt2)); // dimensionless
            const double var_Ito__xitos = mParameters[2] * var_Ito__gtos * var_Ito__xtos * (var_Ito__ytos + (0.5 * var_Ito__rs_inf)) * (var_Ito__V - var_Ito__ek); // nA_per_nF
            const double var_Ito__gtof = 0.040000000000000001; // uS_per_nF
            const double var_Ito__xitof = var_Ito__gtof * var_Ito__xtof * var_Ito__ytof * (var_Ito__V - var_Ito__ek); // nA_per_nF
            const double var_Ito__xito = var_Ito__xitos + var_Ito__xitof; // nA_per_nF
            const double var_cell__xito = var_Ito__xito; // nA_per_nF
            const double var_cell__xiNaK = var_INaK__xiNaK; // nA_per_nF
            const double var_cell__xiNaCa = var_INaCa__xiNaCa; // nA_per_nF
            const double var_ICaL__wca = var_cell__wca; // mV_per_uM
            const double var_ICaL__xica = 2.0 * var_ICaL__wca * var_ICaL__jca; // nA_per_nF
            const double var_cell__xica = var_ICaL__xica; // nA_per_nF
            const double var_IKr__gkr = 0.012500000000000001; // uS_per_nF
            const double var_IKr__K_o = var_Environment__K_o; // mM
            const double var_IKr__ek = var_reversal_potentials__ek; // mV
            const double var_IKr__rg = 1.0 / (1.0 + exp((var_IKr__V + 33.0) / 22.399999999999999)); // dimensionless
            const double var_IKr__xikr = mParameters[0] * var_IKr__gkr * sqrt(var_IKr__K_o / 5.4000000000000004) * var_IKr__xr * var_IKr__rg * (var_IKr__V - var_IKr__ek); // nA_per_nF
            const double var_cell__xikr = var_IKr__xikr; // nA_per_nF
            const double var_IKs__Ca_i_converter = var_chaste_interface__Ca__Ca_i; // millimolar
            const double var_IKs__Ca_i = 1000.0 * var_IKs__Ca_i_converter; // uM
            const double var_IKs__gksx = 1.0 + (0.80000000000000004 / (1.0 + pow(0.5 / var_IKs__Ca_i, 3.0))); // dimensionless
            const double var_IKs__gks = 0.1386; // uS_per_nF
            const double var_reversal_potentials__prNaK = 0.018329999999999999; // dimensionless
            const double var_reversal_potentials__eks = (1.0 / var_reversal_potentials__FonRT) * log((var_reversal_potentials__K_o + (var_reversal_potentials__prNaK * var_reversal_potentials__Na_o)) / (var_reversal_potentials__K_i + (var_reversal_potentials__prNaK * var_reversal_potentials__Na_i))); // mV
            const double var_IKs__eks = var_reversal_potentials__eks; // mV
            const double var_IKs__xiks = mParameters[1] * var_IKs__gks * var_IKs__gksx * var_IKs__xs1 * var_IKs__xs2 * (var_IKs__V - var_IKs__eks); // nA_per_nF
            const double var_cell__xiks = var_IKs__xiks; // nA_per_nF
            const double var_cell__chaste_interface__chaste_membrane_capacitance = HeartConfig::Instance()->GetCapacitance(); // uF_per_cm2
            const double var_chaste_interface__cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time);
            const double var_cell__i_Stim_converter = var_chaste_interface__cell__i_Stim; // uA_per_cm2
            const double var_cell__i_Stim = var_cell__i_Stim_converter / var_cell__chaste_interface__chaste_membrane_capacitance; // nA_per_nF
            const double var_cell__xina = var_INa__xina; // nA_per_nF
            const double var_cell__Itotal = -(var_cell__xina + var_cell__xik1 + var_cell__xikr + var_cell__xiks + var_cell__xito + var_cell__xiNaCa + var_cell__xica + var_cell__xiNaK + var_cell__i_Stim); // nA_per_nF
            const double var_cell__d_V_d_Environment__time = var_cell__Itotal; // 'millivolt per millisecond'
            const double var_chaste_interface__cell__d_V_d_Environment__time = var_cell__d_V_d_Environment__time; // ___units_6
            d_dt_chaste_interface__cell__V = var_chaste_interface__cell__d_V_d_Environment__time; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__cell__V;
        rDY[1] = d_dt_chaste_interface__Ca__Ca_i;
        rDY[2] = d_dt_chaste_interface__INa__xm;
        rDY[3] = d_dt_chaste_interface__INa__xh;
        rDY[4] = d_dt_chaste_interface__INa__xj;
        rDY[5] = d_dt_chaste_interface__ICaL__c1;
        rDY[6] = d_dt_chaste_interface__ICaL__c2;
        rDY[7] = d_dt_chaste_interface__ICaL__xi1ca;
        rDY[8] = d_dt_chaste_interface__ICaL__xi1ba;
        rDY[9] = d_dt_chaste_interface__ICaL__xi2ca;
        rDY[10] = d_dt_chaste_interface__ICaL__xi2ba;
        rDY[11] = d_dt_chaste_interface__IKr__xr;
        rDY[12] = d_dt_chaste_interface__IKs__xs1;
        rDY[13] = d_dt_chaste_interface__IKs__xs2;
        rDY[14] = d_dt_chaste_interface__Ito__xtos;
        rDY[15] = d_dt_chaste_interface__Ito__ytos;
        rDY[16] = d_dt_chaste_interface__Ito__xtof;
        rDY[17] = d_dt_chaste_interface__Ito__ytof;
        rDY[18] = d_dt_chaste_interface__Irel__Ca_JSR;
        rDY[19] = d_dt_chaste_interface__Irel__xir;
        rDY[20] = d_dt_chaste_interface__Na__Na_i;
        rDY[21] = d_dt_chaste_interface__Ca__Ca_dyad;
        rDY[22] = d_dt_chaste_interface__Ca__Ca_submem;
        rDY[23] = d_dt_chaste_interface__Ca__Ca_NSR;
        rDY[24] = d_dt_chaste_interface__Ca__tropi;
        rDY[25] = d_dt_chaste_interface__Ca__trops;
    }
    
template<>
void OdeSystemInformation<Dynamicmahajan_2008FromCellML>::Initialise(void)
{
    this->mSystemName = "mahajan_shiferaw_model_2008";
    this->mFreeVariableName = "Environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-87.169816169406);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.000256752008084);

    // rY[2]:
    this->mVariableNames.push_back("INa__xm");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001075453357);

    // rY[3]:
    this->mVariableNames.push_back("INa__xh");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.990691306716);

    // rY[4]:
    this->mVariableNames.push_back("INa__xj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993888937283);

    // rY[5]:
    this->mVariableNames.push_back("ICaL__c1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000018211252);

    // rY[6]:
    this->mVariableNames.push_back("ICaL__c2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.979322592773);

    // rY[7]:
    this->mVariableNames.push_back("ICaL__xi1ca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001208153482);

    // rY[8]:
    this->mVariableNames.push_back("ICaL__xi1ba");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000033616596);

    // rY[9]:
    this->mVariableNames.push_back("ICaL__xi2ca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.004173008466);

    // rY[10]:
    this->mVariableNames.push_back("ICaL__xi2ba");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.015242594688);

    // rY[11]:
    this->mVariableNames.push_back("IKr__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.007074239331);

    // rY[12]:
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.048267587131);

    // rY[13]:
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.105468807033);

    // rY[14]:
    this->mVariableNames.push_back("Ito__xtos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00364776906);

    // rY[15]:
    this->mVariableNames.push_back("Ito__ytos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.174403618112);

    // rY[16]:
    this->mVariableNames.push_back("Ito__xtof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.003643592594);

    // rY[17]:
    this->mVariableNames.push_back("Ito__ytof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993331326442);

    // rY[18]:
    this->mVariableNames.push_back("Irel__Ca_JSR");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(97.505463697266);

    // rY[19]:
    this->mVariableNames.push_back("Irel__xir");
    this->mVariableUnits.push_back("uM_per_ms");
    this->mInitialConditions.push_back(0.006679257264);

    // rY[20]:
    this->mVariableNames.push_back("Na__Na_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(11.441712311614);

    // rY[21]:
    this->mVariableNames.push_back("Ca__Ca_dyad");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(1.716573130685);

    // rY[22]:
    this->mVariableNames.push_back("Ca__Ca_submem");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(0.226941113355);

    // rY[23]:
    this->mVariableNames.push_back("Ca__Ca_NSR");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(104.450004990523);

    // rY[24]:
    this->mVariableNames.push_back("Ca__tropi");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(22.171689894953);

    // rY[25]:
    this->mVariableNames.push_back("Ca__trops");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(19.864701949854);

    // mParameters[0]:
    this->mParameterNames.push_back("ScaleFactorGkr");
    this->mParameterUnits.push_back("dimensionless");
    
    // mParameters[1]:
    this->mParameterNames.push_back("ScaleFactorGks");
    this->mParameterUnits.push_back("dimensionless");
    
    // mParameters[2]:
    this->mParameterNames.push_back("ScaleFactorIto");
    this->mParameterUnits.push_back("dimensionless");
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamicmahajan_2008FromCellML)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamicmahajan_2008FromCellML(pSolver, pStimulus);
    }
    
}

