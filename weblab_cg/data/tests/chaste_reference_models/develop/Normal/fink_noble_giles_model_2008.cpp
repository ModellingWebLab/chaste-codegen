//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: fink_noble_giles_model_2008
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on Wed Sep 11 11:15:53 2019
//! 
//! <autogenerated>

#include "fink_noble_giles_model_2008.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Dynamicfink_noble_giles_model_2008FromCellML::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__i_Stim_Start = 10.0; // millisecond
        const double var_cell__i_Stim_Amplitude =  -52.0; // nanoA_per_nanoF
        const double var_chaste_interface__cell__i_Stim_Period = 1000.0; // millisecond
        const double var_chaste_interface__cell__i_Stim_PulseDuration = 1.0; // millisecond
        const double var_chaste_interface__cell__i_Stim_Amplitude_converter = var_cell__i_Stim_Amplitude; // nanoA_per_nanoF
        const double var_chaste_interface__cell__i_Stim_Amplitude = var_chaste_interface__cell__i_Stim_Amplitude_converter * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__i_Stim_Amplitude),
                var_chaste_interface__cell__i_Stim_PulseDuration,
                var_chaste_interface__cell__i_Stim_Period,
                var_chaste_interface__cell__i_Stim_Start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    Dynamicfink_noble_giles_model_2008FromCellML::Dynamicfink_noble_giles_model_2008FromCellML(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                27,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamicfink_noble_giles_model_2008FromCellML>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
    }
    
    Dynamicfink_noble_giles_model_2008FromCellML::~Dynamicfink_noble_giles_model_2008FromCellML()
    {
    }
    
    double Dynamicfink_noble_giles_model_2008FromCellML::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__iKr_Markov__Or4 = rY[4];
        // Units: dimensionless; Initial value: 0.014
        double var_chaste_interface__iKs_Xs_gate__Xs = rY[11];
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = rY[12];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__ito_r_gate__r = rY[13];
        // Units: dimensionless; Initial value: 2.11e-8
        double var_chaste_interface__iNa_m_gate__m = rY[14];
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = rY[15];
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = rY[16];
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = rY[17];
        // Units: dimensionless; Initial value: 5.06e-6
        double var_chaste_interface__iCaL_f_gate__f = rY[18];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = rY[19];
        // Units: dimensionless; Initial value: 0.9995
        double var_chaste_interface__iCaL_fCass_gate__fCass = rY[20];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__Ca__Ca_i = rY[21];
        // Units: millimolar; Initial value: 1.092e-4
        double var_chaste_interface__Ca__Ca_ss = rY[23];
        // Units: millimolar; Initial value: 1.893e-4
        double var_chaste_interface__Na__Na_i = rY[25];
        // Units: millimolar; Initial value: 7.940167
        double var_chaste_interface__K__K_i = rY[26];
        // Units: millimolar; Initial value: 141.0167
        
        const double var_Environment__R = 8314.4719999999998; // millijoule_per_mole_kelvin
        const double var_Environment__T = 310.0; // kelvin
        const double var_Environment__F = 96485.341499999995; // coulomb_per_mole
        const double var_Environment__K_o = 5.4000000000000004; // millimolar
        const double var_Environment__Ca_o = 2.0; // millimolar
        const double var_Environment__Na_o = 140.0; // millimolar
        const double var_iK1_rectification__phi = 0.88380000000000003; // dimensionless
        const double var_iK1_rectification__fac = 1.0648; // dimensionless
        const double var_reversal_potentials__K_i = var_chaste_interface__K__K_i; // millimolar
        const double var_reversal_potentials__R = var_Environment__R; // millijoule_per_mole_kelvin
        const double var_reversal_potentials__T = var_Environment__T; // kelvin
        const double var_reversal_potentials__F = var_Environment__F; // coulomb_per_mole
        const double var_reversal_potentials__K_o = var_Environment__K_o; // millimolar
        const double var_reversal_potentials__E_K = ((var_reversal_potentials__R * var_reversal_potentials__T) / var_reversal_potentials__F) * log(var_reversal_potentials__K_o / var_reversal_potentials__K_i); // millivolt
        const double var_IK1__E_K = var_reversal_potentials__E_K; // millivolt
        const double var_iK1_rectification__E_K = var_IK1__E_K; // millivolt
        const double var_IK1__V = var_chaste_interface__cell__V; // millivolt
        const double var_iK1_rectification__V = var_IK1__V; // millivolt
        const double var_iK1_rectification__KbMg = 0.45000000000000001 * exp((-(var_iK1_rectification__V - (var_iK1_rectification__fac * var_iK1_rectification__E_K))) / 20.0); // millimolar
        const double var_iK1_rectification__Mg_Buf = 0.0356; // millimolar
        const double var_iK1_rectification__temp = 1.0 + (var_iK1_rectification__Mg_Buf / var_iK1_rectification__KbMg); // dimensionless
        const double var_iK1_rectification__KiMg = 2.7999999999999998 * exp((-(var_iK1_rectification__V - (var_iK1_rectification__fac * var_iK1_rectification__E_K))) / 180.0); // millimolar
        const double var_iK1_rectification__SPM = 0.0014613; // millimolar
        const double var_iK1_rectification__Kd1SPM = 0.00069999999999999999 * exp((-((var_iK1_rectification__V - (var_iK1_rectification__fac * var_iK1_rectification__E_K)) + (8.0 * var_iK1_rectification__Mg_Buf))) / 4.7999999999999998); // millimolar
        const double var_iK1_rectification__rec1 = (var_iK1_rectification__temp * var_iK1_rectification__temp) / ((var_iK1_rectification__SPM / var_iK1_rectification__Kd1SPM) + (var_iK1_rectification__Mg_Buf / var_iK1_rectification__KiMg) + (var_iK1_rectification__temp * var_iK1_rectification__temp * var_iK1_rectification__temp)); // dimensionless
        const double var_iK1_rectification__Kd2SPM = 0.040000000000000001 * exp((-(var_iK1_rectification__V - (var_iK1_rectification__fac * var_iK1_rectification__E_K))) / 9.0999999999999996); // millimolar
        const double var_iK1_rectification__rec2 = 1.0 / (1.0 + (var_iK1_rectification__SPM / var_iK1_rectification__Kd2SPM)); // dimensionless
        const double var_iK1_rectification__xK1_inf = (var_iK1_rectification__phi * var_iK1_rectification__rec1) + ((1.0 - var_iK1_rectification__phi) * var_iK1_rectification__rec2); // dimensionless
        const double var_IK1__xK1_inf = var_iK1_rectification__xK1_inf; // dimensionless
        const double var_IK1__T = var_Environment__T; // kelvin
        const double var_IK1__K_o = var_Environment__K_o; // millimolar
        const double var_IK1__g_K1_0 = 0.68210000000000004; // microS_per_nanoF
        const double var_IK1__i_K1 = var_IK1__g_K1_0 * ((var_IK1__T / 35.0) - (55.0 / 7.0)) * sqrt(var_IK1__K_o / 5.4000000000000004) * var_IK1__xK1_inf * (var_IK1__V - var_IK1__E_K); // nanoA_per_nanoF
        const double var_cell__i_K1 = var_IK1__i_K1; // nanoA_per_nanoF
        const double var_Ito__r = var_chaste_interface__ito_r_gate__r; // dimensionless
        const double var_Ito__s = var_chaste_interface__ito_s_gate__s; // dimensionless
        const double var_Ito__V = var_chaste_interface__cell__V; // millivolt
        const double var_Ito__g_to = 0.20000000000000001; // microS_per_nanoF
        const double var_Ito__E_K = var_reversal_potentials__E_K; // millivolt
        const double var_Ito__i_to = var_Ito__g_to * var_Ito__r * var_Ito__s * (var_Ito__V - var_Ito__E_K); // nanoA_per_nanoF
        const double var_cell__i_to = var_Ito__i_to; // nanoA_per_nanoF
        const double var_IKr__K_o = var_Environment__K_o; // millimolar
        const double var_IKr__g_Kr_0 = 0.024; // microS_per_nanoF
        const double var_IKr__V = var_chaste_interface__cell__V; // millivolt
        const double var_IKr__Or4 = var_chaste_interface__iKr_Markov__Or4; // dimensionless
        const double var_IKr__T = var_Environment__T; // kelvin
        const double var_IKr__E_K = var_reversal_potentials__E_K; // millivolt
        const double var_IKr__i_Kr = var_IKr__g_Kr_0 * ((var_IKr__T / 35.0) - (55.0 / 7.0)) * sqrt(var_IKr__K_o / 5.4000000000000004) * var_IKr__Or4 * (var_IKr__V - var_IKr__E_K); // nanoA_per_nanoF
        const double var_cell__i_Kr = var_IKr__i_Kr; // nanoA_per_nanoF
        const double var_IKs__g_Ks = 0.039199999999999999; // microS_per_nanoF
        const double var_IKs__Xs = var_chaste_interface__iKs_Xs_gate__Xs; // dimensionless
        const double var_reversal_potentials__Na_o = var_Environment__Na_o; // millimolar
        const double var_reversal_potentials__Na_i = var_chaste_interface__Na__Na_i; // millimolar
        const double var_reversal_potentials__P_kna = 0.029999999999999999; // dimensionless
        const double var_reversal_potentials__E_Ks = ((var_reversal_potentials__R * var_reversal_potentials__T) / var_reversal_potentials__F) * log((var_reversal_potentials__K_o + (var_reversal_potentials__P_kna * var_reversal_potentials__Na_o)) / (var_reversal_potentials__K_i + (var_reversal_potentials__P_kna * var_reversal_potentials__Na_i))); // millivolt
        const double var_IKs__E_Ks = var_reversal_potentials__E_Ks; // millivolt
        const double var_IKs__V = var_chaste_interface__cell__V; // millivolt
        const double var_IKs__i_Ks = var_IKs__g_Ks * pow(var_IKs__Xs, 2.0) * (var_IKs__V - var_IKs__E_Ks); // nanoA_per_nanoF
        const double var_cell__i_Ks = var_IKs__i_Ks; // nanoA_per_nanoF
        const double var_ICaL__T = var_Environment__T; // kelvin
        const double var_ICaL__Ca_o = var_Environment__Ca_o; // millimolar
        const double var_ICaL__V = var_chaste_interface__cell__V; // millivolt
        const double var_ICaL__f2 = var_chaste_interface__iCaL_f2_gate__f2; // dimensionless
        const double var_ICaL__R = var_Environment__R; // millijoule_per_mole_kelvin
        const double var_ICaL__f = var_chaste_interface__iCaL_f_gate__f; // dimensionless
        const double var_ICaL__z = 2.0; // dimensionless
        const double var_ICaL__d = var_chaste_interface__iCaL_d_gate__d; // dimensionless
        const double var_ICaL__F = var_Environment__F; // coulomb_per_mole
        const double var_ICaL__g_CaL = 2.0000000000000002e-05; // litre_per_farad_millisecond
        const double var_ICaL__fCass = var_chaste_interface__iCaL_fCass_gate__fCass; // dimensionless
        const double var_ICaL__Ca_ss = var_chaste_interface__Ca__Ca_ss; // millimolar
        const double var_ICaL__i_CaL = (((var_ICaL__g_CaL * var_ICaL__d * var_ICaL__f * var_ICaL__f2 * var_ICaL__fCass * pow(var_ICaL__z, 2.0) * (var_ICaL__V - 15.0) * pow(var_ICaL__F, 2.0)) / (var_ICaL__R * var_ICaL__T)) * ((0.25 * var_ICaL__Ca_ss * exp((2.0 * (var_ICaL__V - 15.0) * var_ICaL__F) / (var_ICaL__R * var_ICaL__T))) - var_ICaL__Ca_o)) / (exp((2.0 * (var_ICaL__V - 15.0) * var_ICaL__F) / (var_ICaL__R * var_ICaL__T)) - 1.0); // nanoA_per_nanoF
        const double var_cell__i_CaL = var_ICaL__i_CaL; // nanoA_per_nanoF
        const double var_INaK__V = var_chaste_interface__cell__V; // millivolt
        const double var_INaK__Na_i = var_chaste_interface__Na__Na_i; // millimolar
        const double var_INaK__R = var_Environment__R; // millijoule_per_mole_kelvin
        const double var_INaK__P_NaK = 1.2969999999999999; // nanoA_per_nanoF
        const double var_INaK__F = var_Environment__F; // coulomb_per_mole
        const double var_INaK__T = var_Environment__T; // kelvin
        const double var_INaK__K_o = var_Environment__K_o; // millimolar
        const double var_INaK__K_mNa = 40.0; // millimolar
        const double var_INaK__K_mk = 1.0; // millimolar
        const double var_INaK__i_NaK = ((((var_INaK__P_NaK * var_INaK__K_o) / (var_INaK__K_o + var_INaK__K_mk)) * var_INaK__Na_i) / (var_INaK__Na_i + var_INaK__K_mNa)) / (1.0 + (0.1245 * exp(((-0.10000000000000001) * var_INaK__V * var_INaK__F) / (var_INaK__R * var_INaK__T))) + (0.035299999999999998 * exp(((-var_INaK__V) * var_INaK__F) / (var_INaK__R * var_INaK__T)))); // nanoA_per_nanoF
        const double var_cell__i_NaK = var_INaK__i_NaK; // nanoA_per_nanoF
        const double var_INa__V = var_chaste_interface__cell__V; // millivolt
        const double var_reversal_potentials__E_Na = ((var_reversal_potentials__R * var_reversal_potentials__T) / var_reversal_potentials__F) * log(var_reversal_potentials__Na_o / var_reversal_potentials__Na_i); // millivolt
        const double var_INa__E_Na = var_reversal_potentials__E_Na; // millivolt
        const double var_INa__g_Na = 11.0; // microS_per_nanoF
        const double var_INa__m = var_chaste_interface__iNa_m_gate__m; // dimensionless
        const double var_INa__j = var_chaste_interface__iNa_j_gate__j; // dimensionless
        const double var_INa__h = var_chaste_interface__iNa_h_gate__h; // dimensionless
        const double var_INa__i_Na = var_INa__g_Na * pow(var_INa__m, 3.0) * var_INa__h * var_INa__j * (var_INa__V - var_INa__E_Na); // nanoA_per_nanoF
        const double var_cell__i_Na = var_INa__i_Na; // nanoA_per_nanoF
        const double var_INab__E_Na = var_reversal_potentials__E_Na; // millivolt
        const double var_INab__g_bna = 0.00029; // microS_per_nanoF
        const double var_INab__V = var_chaste_interface__cell__V; // millivolt
        const double var_INab__i_b_Na = var_INab__g_bna * (var_INab__V - var_INab__E_Na); // nanoA_per_nanoF
        const double var_cell__i_b_Na = var_INab__i_b_Na; // nanoA_per_nanoF
        const double var_INaCa__K_sat = 0.10000000000000001; // dimensionless
        const double var_INaCa__Km_Ca = 1.3799999999999999; // millimolar
        const double var_INaCa__T = var_Environment__T; // kelvin
        const double var_INaCa__V = var_chaste_interface__cell__V; // millivolt
        const double var_INaCa__gamma = 0.34999999999999998; // dimensionless
        const double var_INaCa__R = var_Environment__R; // millijoule_per_mole_kelvin
        const double var_INaCa__Na_o = var_Environment__Na_o; // millimolar
        const double var_INaCa__Na_i = var_chaste_interface__Na__Na_i; // millimolar
        const double var_INaCa__alpha = 2.5; // dimensionless
        const double var_INaCa__K_NaCa = 200.0; // nanoA_per_nanoF
        const double var_INaCa__F = var_Environment__F; // coulomb_per_mole
        const double var_INaCa__Ca_i = var_chaste_interface__Ca__Ca_i; // millimolar
        const double var_INaCa__Km_Nai = 87.5; // millimolar
        const double var_INaCa__Ca_o = var_Environment__Ca_o; // millimolar
        const double var_INaCa__i_NaCa = (var_INaCa__K_NaCa * ((exp((var_INaCa__gamma * var_INaCa__V * var_INaCa__F) / (var_INaCa__R * var_INaCa__T)) * pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o) - (exp(((var_INaCa__gamma - 1.0) * var_INaCa__V * var_INaCa__F) / (var_INaCa__R * var_INaCa__T)) * pow(var_INaCa__Na_o, 3.0) * var_INaCa__Ca_i * var_INaCa__alpha))) / ((pow(var_INaCa__Km_Nai, 3.0) + pow(var_INaCa__Na_o, 3.0)) * (var_INaCa__Km_Ca + var_INaCa__Ca_o) * (1.0 + (var_INaCa__K_sat * exp(((var_INaCa__gamma - 1.0) * var_INaCa__V * var_INaCa__F) / (var_INaCa__R * var_INaCa__T))))); // nanoA_per_nanoF
        const double var_cell__i_NaCa = var_INaCa__i_NaCa; // nanoA_per_nanoF
        const double var_ICab__V = var_chaste_interface__cell__V; // millivolt
        const double var_reversal_potentials__Ca_o = var_Environment__Ca_o; // millimolar
        const double var_reversal_potentials__Ca_i = var_chaste_interface__Ca__Ca_i; // millimolar
        const double var_reversal_potentials__E_Ca = ((0.5 * var_reversal_potentials__R * var_reversal_potentials__T) / var_reversal_potentials__F) * log(var_reversal_potentials__Ca_o / var_reversal_potentials__Ca_i); // millivolt
        const double var_ICab__E_Ca = var_reversal_potentials__E_Ca; // millivolt
        const double var_ICab__g_bca = 0.00047360000000000002; // microS_per_nanoF
        const double var_ICab__i_b_Ca = var_ICab__g_bca * (var_ICab__V - var_ICab__E_Ca); // nanoA_per_nanoF
        const double var_cell__i_b_Ca = var_ICab__i_b_Ca; // nanoA_per_nanoF
        const double var_IpK__V = var_chaste_interface__cell__V; // millivolt
        const double var_IpK__g_pK = 0.0097300000000000008; // microS_per_nanoF
        const double var_IpK__E_K = var_reversal_potentials__E_K; // millivolt
        const double var_IpK__i_p_K = (var_IpK__g_pK * (var_IpK__V - var_IpK__E_K)) / (1.0 + exp((25.0 - var_IpK__V) / 5.9800000000000004)); // nanoA_per_nanoF
        const double var_cell__i_p_K = var_IpK__i_p_K; // nanoA_per_nanoF
        const double var_IpCa__g_pCa = 0.061899999999999997; // nanoA_per_nanoF
        const double var_IpCa__K_pCa = 0.00050000000000000001; // millimolar
        const double var_IpCa__Ca_i = var_chaste_interface__Ca__Ca_i; // millimolar
        const double var_IpCa__i_p_Ca = (var_IpCa__g_pCa * var_IpCa__Ca_i) / (var_IpCa__Ca_i + var_IpCa__K_pCa); // nanoA_per_nanoF
        const double var_cell__i_p_Ca = var_IpCa__i_p_Ca; // nanoA_per_nanoF
        const double var_cell__chaste_interface__chaste_membrane_capacitance = HeartConfig::Instance()->GetCapacitance(); // uF_per_cm2
        const double var_chaste_interface__cell__i_Stim = 0.0;
        const double var_cell__i_Stim_converter = var_chaste_interface__cell__i_Stim; // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converter / var_cell__chaste_interface__chaste_membrane_capacitance; // nanoA_per_nanoF
        const double var_cell__i_tot = var_cell__i_K1 + var_cell__i_to + var_cell__i_Kr + var_cell__i_Ks + var_cell__i_CaL + var_cell__i_NaK + var_cell__i_Na + var_cell__i_b_Na + var_cell__i_NaCa + var_cell__i_b_Ca + var_cell__i_p_K + var_cell__i_p_Ca + var_cell__i_Stim; // nanoA_per_nanoF
        const double var_chaste_interface__cell__i_tot = var_cell__i_tot; // nanoA_per_nanoF
        const double var_chaste_interface__i_ionic = (var_chaste_interface__cell__i_tot) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamicfink_noble_giles_model_2008FromCellML::EvaluateYDerivatives(double var_chaste_interface__Environment__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__iKr_Markov__Cr1 = rY[1];
        // Units: dimensionless; Initial value: 0.9786
        double var_chaste_interface__iKr_Markov__Cr2 = rY[2];
        // Units: dimensionless; Initial value: 0.0031
        double var_chaste_interface__iKr_Markov__Cr3 = rY[3];
        // Units: dimensionless; Initial value: 0.0029
        double var_chaste_interface__iKr_Markov__Or4 = rY[4];
        // Units: dimensionless; Initial value: 0.014
        double var_chaste_interface__iKr_Markov__Ir5 = rY[5];
        // Units: dimensionless; Initial value: 0.0014
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr1 = rY[6];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr2 = rY[7];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr3 = rY[8];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 = rY[9];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BIr5 = rY[10];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__iKs_Xs_gate__Xs = rY[11];
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = rY[12];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__ito_r_gate__r = rY[13];
        // Units: dimensionless; Initial value: 2.11e-8
        double var_chaste_interface__iNa_m_gate__m = rY[14];
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = rY[15];
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = rY[16];
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = rY[17];
        // Units: dimensionless; Initial value: 5.06e-6
        double var_chaste_interface__iCaL_f_gate__f = rY[18];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = rY[19];
        // Units: dimensionless; Initial value: 0.9995
        double var_chaste_interface__iCaL_fCass_gate__fCass = rY[20];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__Ca__Ca_i = rY[21];
        // Units: millimolar; Initial value: 1.092e-4
        double var_chaste_interface__Ca__Ca_SR = rY[22];
        // Units: millimolar; Initial value: 2.7656
        double var_chaste_interface__Ca__Ca_ss = rY[23];
        // Units: millimolar; Initial value: 1.893e-4
        double var_chaste_interface__Irel__R_prime = rY[24];
        // Units: dimensionless; Initial value: 0.9864
        double var_chaste_interface__Na__Na_i = rY[25];
        // Units: millimolar; Initial value: 7.940167
        double var_chaste_interface__K__K_i = rY[26];
        // Units: millimolar; Initial value: 141.0167
        
        
        // Mathematics
        double d_dt_chaste_interface__cell__V;
        const double var_Environment__R = 8314.4719999999998; // millijoule_per_mole_kelvin
        const double var_Environment__T = 310.0; // kelvin
        const double var_Environment__F = 96485.341499999995; // coulomb_per_mole
        const double var_Environment__K_o = 5.4000000000000004; // millimolar
        const double var_Environment__Ca_o = 2.0; // millimolar
        const double var_Environment__Na_o = 140.0; // millimolar
        const double var_cell__Cm = 0.115; // nanoF
        const double var_cell__Vol_c = 0.016403999999999998; // nanolitre
        const double var_iK1_rectification__phi = 0.88380000000000003; // dimensionless
        const double var_iK1_rectification__fac = 1.0648; // dimensionless
        const double var_reversal_potentials__K_i = var_chaste_interface__K__K_i; // millimolar
        const double var_reversal_potentials__R = var_Environment__R; // millijoule_per_mole_kelvin
        const double var_reversal_potentials__T = var_Environment__T; // kelvin
        const double var_reversal_potentials__F = var_Environment__F; // coulomb_per_mole
        const double var_reversal_potentials__K_o = var_Environment__K_o; // millimolar
        const double var_reversal_potentials__E_K = ((var_reversal_potentials__R * var_reversal_potentials__T) / var_reversal_potentials__F) * log(var_reversal_potentials__K_o / var_reversal_potentials__K_i); // millivolt
        const double var_IK1__E_K = var_reversal_potentials__E_K; // millivolt
        const double var_iK1_rectification__E_K = var_IK1__E_K; // millivolt
        const double var_IK1__V = var_chaste_interface__cell__V; // millivolt
        const double var_iK1_rectification__V = var_IK1__V; // millivolt
        const double var_iK1_rectification__KbMg = 0.45000000000000001 * exp((-(var_iK1_rectification__V - (var_iK1_rectification__fac * var_iK1_rectification__E_K))) / 20.0); // millimolar
        const double var_iK1_rectification__Mg_Buf = 0.0356; // millimolar
        const double var_iK1_rectification__temp = 1.0 + (var_iK1_rectification__Mg_Buf / var_iK1_rectification__KbMg); // dimensionless
        const double var_iK1_rectification__KiMg = 2.7999999999999998 * exp((-(var_iK1_rectification__V - (var_iK1_rectification__fac * var_iK1_rectification__E_K))) / 180.0); // millimolar
        const double var_iK1_rectification__SPM = 0.0014613; // millimolar
        const double var_iK1_rectification__Kd1SPM = 0.00069999999999999999 * exp((-((var_iK1_rectification__V - (var_iK1_rectification__fac * var_iK1_rectification__E_K)) + (8.0 * var_iK1_rectification__Mg_Buf))) / 4.7999999999999998); // millimolar
        const double var_iK1_rectification__rec1 = (var_iK1_rectification__temp * var_iK1_rectification__temp) / ((var_iK1_rectification__SPM / var_iK1_rectification__Kd1SPM) + (var_iK1_rectification__Mg_Buf / var_iK1_rectification__KiMg) + (var_iK1_rectification__temp * var_iK1_rectification__temp * var_iK1_rectification__temp)); // dimensionless
        const double var_iK1_rectification__Kd2SPM = 0.040000000000000001 * exp((-(var_iK1_rectification__V - (var_iK1_rectification__fac * var_iK1_rectification__E_K))) / 9.0999999999999996); // millimolar
        const double var_iK1_rectification__rec2 = 1.0 / (1.0 + (var_iK1_rectification__SPM / var_iK1_rectification__Kd2SPM)); // dimensionless
        const double var_iK1_rectification__xK1_inf = (var_iK1_rectification__phi * var_iK1_rectification__rec1) + ((1.0 - var_iK1_rectification__phi) * var_iK1_rectification__rec2); // dimensionless
        const double var_IK1__xK1_inf = var_iK1_rectification__xK1_inf; // dimensionless
        const double var_IK1__T = var_Environment__T; // kelvin
        const double var_IK1__K_o = var_Environment__K_o; // millimolar
        const double var_IK1__g_K1_0 = 0.68210000000000004; // microS_per_nanoF
        const double var_IK1__i_K1 = var_IK1__g_K1_0 * ((var_IK1__T / 35.0) - (55.0 / 7.0)) * sqrt(var_IK1__K_o / 5.4000000000000004) * var_IK1__xK1_inf * (var_IK1__V - var_IK1__E_K); // nanoA_per_nanoF
        const double var_Ito__r = var_chaste_interface__ito_r_gate__r; // dimensionless
        const double var_Ito__s = var_chaste_interface__ito_s_gate__s; // dimensionless
        const double var_Ito__V = var_chaste_interface__cell__V; // millivolt
        const double var_Ito__g_to = 0.20000000000000001; // microS_per_nanoF
        const double var_Ito__E_K = var_reversal_potentials__E_K; // millivolt
        const double var_Ito__i_to = var_Ito__g_to * var_Ito__r * var_Ito__s * (var_Ito__V - var_Ito__E_K); // nanoA_per_nanoF
        const double var_IKr__K_o = var_Environment__K_o; // millimolar
        const double var_IKr__g_Kr_0 = 0.024; // microS_per_nanoF
        const double var_IKr__V = var_chaste_interface__cell__V; // millivolt
        const double var_IKr__Or4 = var_chaste_interface__iKr_Markov__Or4; // dimensionless
        const double var_IKr__T = var_Environment__T; // kelvin
        const double var_IKr__E_K = var_reversal_potentials__E_K; // millivolt
        const double var_IKr__i_Kr = var_IKr__g_Kr_0 * ((var_IKr__T / 35.0) - (55.0 / 7.0)) * sqrt(var_IKr__K_o / 5.4000000000000004) * var_IKr__Or4 * (var_IKr__V - var_IKr__E_K); // nanoA_per_nanoF
        const double var_IKs__g_Ks = 0.039199999999999999; // microS_per_nanoF
        const double var_IKs__Xs = var_chaste_interface__iKs_Xs_gate__Xs; // dimensionless
        const double var_reversal_potentials__Na_o = var_Environment__Na_o; // millimolar
        const double var_reversal_potentials__Na_i = var_chaste_interface__Na__Na_i; // millimolar
        const double var_reversal_potentials__P_kna = 0.029999999999999999; // dimensionless
        const double var_reversal_potentials__E_Ks = ((var_reversal_potentials__R * var_reversal_potentials__T) / var_reversal_potentials__F) * log((var_reversal_potentials__K_o + (var_reversal_potentials__P_kna * var_reversal_potentials__Na_o)) / (var_reversal_potentials__K_i + (var_reversal_potentials__P_kna * var_reversal_potentials__Na_i))); // millivolt
        const double var_IKs__E_Ks = var_reversal_potentials__E_Ks; // millivolt
        const double var_IKs__V = var_chaste_interface__cell__V; // millivolt
        const double var_IKs__i_Ks = var_IKs__g_Ks * pow(var_IKs__Xs, 2.0) * (var_IKs__V - var_IKs__E_Ks); // nanoA_per_nanoF
        const double var_ICaL__T = var_Environment__T; // kelvin
        const double var_ICaL__Ca_o = var_Environment__Ca_o; // millimolar
        const double var_ICaL__V = var_chaste_interface__cell__V; // millivolt
        const double var_ICaL__f2 = var_chaste_interface__iCaL_f2_gate__f2; // dimensionless
        const double var_ICaL__R = var_Environment__R; // millijoule_per_mole_kelvin
        const double var_ICaL__f = var_chaste_interface__iCaL_f_gate__f; // dimensionless
        const double var_ICaL__z = 2.0; // dimensionless
        const double var_ICaL__d = var_chaste_interface__iCaL_d_gate__d; // dimensionless
        const double var_ICaL__F = var_Environment__F; // coulomb_per_mole
        const double var_ICaL__g_CaL = 2.0000000000000002e-05; // litre_per_farad_millisecond
        const double var_ICaL__fCass = var_chaste_interface__iCaL_fCass_gate__fCass; // dimensionless
        const double var_ICaL__Ca_ss = var_chaste_interface__Ca__Ca_ss; // millimolar
        const double var_ICaL__i_CaL = (((var_ICaL__g_CaL * var_ICaL__d * var_ICaL__f * var_ICaL__f2 * var_ICaL__fCass * pow(var_ICaL__z, 2.0) * (var_ICaL__V - 15.0) * pow(var_ICaL__F, 2.0)) / (var_ICaL__R * var_ICaL__T)) * ((0.25 * var_ICaL__Ca_ss * exp((2.0 * (var_ICaL__V - 15.0) * var_ICaL__F) / (var_ICaL__R * var_ICaL__T))) - var_ICaL__Ca_o)) / (exp((2.0 * (var_ICaL__V - 15.0) * var_ICaL__F) / (var_ICaL__R * var_ICaL__T)) - 1.0); // nanoA_per_nanoF
        const double var_INaK__V = var_chaste_interface__cell__V; // millivolt
        const double var_INaK__Na_i = var_chaste_interface__Na__Na_i; // millimolar
        const double var_INaK__R = var_Environment__R; // millijoule_per_mole_kelvin
        const double var_INaK__P_NaK = 1.2969999999999999; // nanoA_per_nanoF
        const double var_INaK__F = var_Environment__F; // coulomb_per_mole
        const double var_INaK__T = var_Environment__T; // kelvin
        const double var_INaK__K_o = var_Environment__K_o; // millimolar
        const double var_INaK__K_mNa = 40.0; // millimolar
        const double var_INaK__K_mk = 1.0; // millimolar
        const double var_INaK__i_NaK = ((((var_INaK__P_NaK * var_INaK__K_o) / (var_INaK__K_o + var_INaK__K_mk)) * var_INaK__Na_i) / (var_INaK__Na_i + var_INaK__K_mNa)) / (1.0 + (0.1245 * exp(((-0.10000000000000001) * var_INaK__V * var_INaK__F) / (var_INaK__R * var_INaK__T))) + (0.035299999999999998 * exp(((-var_INaK__V) * var_INaK__F) / (var_INaK__R * var_INaK__T)))); // nanoA_per_nanoF
        const double var_INa__V = var_chaste_interface__cell__V; // millivolt
        const double var_reversal_potentials__E_Na = ((var_reversal_potentials__R * var_reversal_potentials__T) / var_reversal_potentials__F) * log(var_reversal_potentials__Na_o / var_reversal_potentials__Na_i); // millivolt
        const double var_INa__E_Na = var_reversal_potentials__E_Na; // millivolt
        const double var_INa__g_Na = 11.0; // microS_per_nanoF
        const double var_INa__m = var_chaste_interface__iNa_m_gate__m; // dimensionless
        const double var_INa__j = var_chaste_interface__iNa_j_gate__j; // dimensionless
        const double var_INa__h = var_chaste_interface__iNa_h_gate__h; // dimensionless
        const double var_INa__i_Na = var_INa__g_Na * pow(var_INa__m, 3.0) * var_INa__h * var_INa__j * (var_INa__V - var_INa__E_Na); // nanoA_per_nanoF
        const double var_INab__E_Na = var_reversal_potentials__E_Na; // millivolt
        const double var_INab__g_bna = 0.00029; // microS_per_nanoF
        const double var_INab__V = var_chaste_interface__cell__V; // millivolt
        const double var_INab__i_b_Na = var_INab__g_bna * (var_INab__V - var_INab__E_Na); // nanoA_per_nanoF
        const double var_INaCa__K_sat = 0.10000000000000001; // dimensionless
        const double var_INaCa__Km_Ca = 1.3799999999999999; // millimolar
        const double var_INaCa__T = var_Environment__T; // kelvin
        const double var_INaCa__V = var_chaste_interface__cell__V; // millivolt
        const double var_INaCa__gamma = 0.34999999999999998; // dimensionless
        const double var_INaCa__R = var_Environment__R; // millijoule_per_mole_kelvin
        const double var_INaCa__Na_o = var_Environment__Na_o; // millimolar
        const double var_INaCa__Na_i = var_chaste_interface__Na__Na_i; // millimolar
        const double var_INaCa__alpha = 2.5; // dimensionless
        const double var_INaCa__K_NaCa = 200.0; // nanoA_per_nanoF
        const double var_INaCa__F = var_Environment__F; // coulomb_per_mole
        const double var_INaCa__Ca_i = var_chaste_interface__Ca__Ca_i; // millimolar
        const double var_INaCa__Km_Nai = 87.5; // millimolar
        const double var_INaCa__Ca_o = var_Environment__Ca_o; // millimolar
        const double var_INaCa__i_NaCa = (var_INaCa__K_NaCa * ((exp((var_INaCa__gamma * var_INaCa__V * var_INaCa__F) / (var_INaCa__R * var_INaCa__T)) * pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o) - (exp(((var_INaCa__gamma - 1.0) * var_INaCa__V * var_INaCa__F) / (var_INaCa__R * var_INaCa__T)) * pow(var_INaCa__Na_o, 3.0) * var_INaCa__Ca_i * var_INaCa__alpha))) / ((pow(var_INaCa__Km_Nai, 3.0) + pow(var_INaCa__Na_o, 3.0)) * (var_INaCa__Km_Ca + var_INaCa__Ca_o) * (1.0 + (var_INaCa__K_sat * exp(((var_INaCa__gamma - 1.0) * var_INaCa__V * var_INaCa__F) / (var_INaCa__R * var_INaCa__T))))); // nanoA_per_nanoF
        const double var_ICab__V = var_chaste_interface__cell__V; // millivolt
        const double var_reversal_potentials__Ca_o = var_Environment__Ca_o; // millimolar
        const double var_reversal_potentials__Ca_i = var_chaste_interface__Ca__Ca_i; // millimolar
        const double var_reversal_potentials__E_Ca = ((0.5 * var_reversal_potentials__R * var_reversal_potentials__T) / var_reversal_potentials__F) * log(var_reversal_potentials__Ca_o / var_reversal_potentials__Ca_i); // millivolt
        const double var_ICab__E_Ca = var_reversal_potentials__E_Ca; // millivolt
        const double var_ICab__g_bca = 0.00047360000000000002; // microS_per_nanoF
        const double var_ICab__i_b_Ca = var_ICab__g_bca * (var_ICab__V - var_ICab__E_Ca); // nanoA_per_nanoF
        const double var_IpK__V = var_chaste_interface__cell__V; // millivolt
        const double var_IpK__g_pK = 0.0097300000000000008; // microS_per_nanoF
        const double var_IpK__E_K = var_reversal_potentials__E_K; // millivolt
        const double var_IpK__i_p_K = (var_IpK__g_pK * (var_IpK__V - var_IpK__E_K)) / (1.0 + exp((25.0 - var_IpK__V) / 5.9800000000000004)); // nanoA_per_nanoF
        const double var_IpCa__g_pCa = 0.061899999999999997; // nanoA_per_nanoF
        const double var_IpCa__K_pCa = 0.00050000000000000001; // millimolar
        const double var_IpCa__Ca_i = var_chaste_interface__Ca__Ca_i; // millimolar
        const double var_IpCa__i_p_Ca = (var_IpCa__g_pCa * var_IpCa__Ca_i) / (var_IpCa__Ca_i + var_IpCa__K_pCa); // nanoA_per_nanoF
        const double var_chaste_interface__cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time);
        const double var_iKr_Markov__T_Base = 310.0; // kelvin
        const double var_iKr_Markov__T = var_IKr__T; // kelvin
        const double var_iKr_Markov__V = var_IKr__V; // millivolt
        const double var_iKr_Markov__beta_xr1 = ((1.0 * var_iKr_Markov__T) / var_iKr_Markov__T_Base) * exp(13.688000000000001 + ((var_iKr_Markov__T_Base / var_iKr_Markov__T) * (((-0.060299999999999999) * var_iKr_Markov__V) - 15.707000000000001))); // per_millisecond
        const double var_IKr__Cr1 = var_chaste_interface__iKr_Markov__Cr1; // dimensionless
        const double var_iKr_Markov__Cr1 = var_IKr__Cr1; // dimensionless
        const double var_IKr__Cr2 = var_chaste_interface__iKr_Markov__Cr2; // dimensionless
        const double var_iKr_Markov__Cr2 = var_IKr__Cr2; // dimensionless
        const double var_iKr_Markov__alpha_xr1 = ((1.0 * var_iKr_Markov__T) / var_iKr_Markov__T_Base) * exp(24.335000000000001 + ((var_iKr_Markov__T_Base / var_iKr_Markov__T) * ((0.0112 * var_iKr_Markov__V) - 25.914000000000001))); // per_millisecond
        const double var_iKr_Markov__d_Cr1_d_Environment__time = (var_iKr_Markov__beta_xr1 * var_iKr_Markov__Cr2) - (var_iKr_Markov__alpha_xr1 * var_iKr_Markov__Cr1); // per_millisecond
        const double var_IKr__iKr_Markov__d_Cr1_d_Environment__time = var_iKr_Markov__d_Cr1_d_Environment__time; // per_millisecond
        const double var_IKr__Cr3 = var_chaste_interface__iKr_Markov__Cr3; // dimensionless
        const double var_iKr_Markov__Cr3 = var_IKr__Cr3; // dimensionless
        const double var_iKr_Markov__beta_xr2 = ((1.0 * var_iKr_Markov__T) / var_iKr_Markov__T_Base) * exp(13.193 + ((var_iKr_Markov__T_Base / var_iKr_Markov__T) * ((0.0 * var_iKr_Markov__V) - 15.707000000000001))); // per_millisecond
        const double var_iKr_Markov__alpha_xr2 = ((1.0 * var_iKr_Markov__T) / var_iKr_Markov__T_Base) * exp(22.745999999999999 + ((var_iKr_Markov__T_Base / var_iKr_Markov__T) * ((0.0 * var_iKr_Markov__V) - 25.914000000000001))); // per_millisecond
        const double var_iKr_Markov__d_Cr2_d_Environment__time = ((var_iKr_Markov__alpha_xr1 * var_iKr_Markov__Cr1) + (var_iKr_Markov__beta_xr2 * var_iKr_Markov__Cr3)) - ((var_iKr_Markov__alpha_xr2 + var_iKr_Markov__beta_xr1) * var_iKr_Markov__Cr2); // per_millisecond
        const double var_IKr__iKr_Markov__d_Cr2_d_Environment__time = var_iKr_Markov__d_Cr2_d_Environment__time; // per_millisecond
        const double var_iKr_Markov__alpha_xr3 = ((1.0 * var_iKr_Markov__T) / var_iKr_Markov__T_Base) * exp(22.097999999999999 + ((var_iKr_Markov__T_Base / var_iKr_Markov__T) * ((0.036499999999999998 * var_iKr_Markov__V) - 25.914000000000001))); // per_millisecond
        const double var_iKr_Markov__beta_xr3 = ((1.0 * var_iKr_Markov__T) / var_iKr_Markov__T_Base) * exp(7.3129999999999997 + ((var_iKr_Markov__T_Base / var_iKr_Markov__T) * (((-0.039899999999999998) * var_iKr_Markov__V) - 15.707000000000001))); // per_millisecond
        const double var_iKr_Markov__Or4 = var_IKr__Or4; // dimensionless
        const double var_iKr_Markov__d_Cr3_d_Environment__time = ((var_iKr_Markov__alpha_xr2 * var_iKr_Markov__Cr2) + (var_iKr_Markov__beta_xr3 * var_iKr_Markov__Or4)) - ((var_iKr_Markov__alpha_xr3 + var_iKr_Markov__beta_xr2) * var_iKr_Markov__Cr3); // per_millisecond
        const double var_IKr__iKr_Markov__d_Cr3_d_Environment__time = var_iKr_Markov__d_Cr3_d_Environment__time; // per_millisecond
        const double var_IKr__Ir5 = var_chaste_interface__iKr_Markov__Ir5; // dimensionless
        const double var_iKr_Markov__Ir5 = var_IKr__Ir5; // dimensionless
        const double var_iKr_Markov__K_o = var_IKr__K_o; // millimolar
        const double var_iKr_Markov__alpha_xr4 = ((1.0 * var_iKr_Markov__T) / var_iKr_Markov__T_Base) * exp(30.015999999999998 + ((var_iKr_Markov__T_Base / var_iKr_Markov__T) * ((0.0223 * var_iKr_Markov__V) - 30.888000000000002))) * pow(5.4000000000000004 / var_iKr_Markov__K_o, 0.40000000000000002); // per_millisecond
        const double var_iKr_Markov_Sotalol_block__kDiss = 0.00125; // per_millisecond
        const double var_IKr__BOr4 = var_chaste_interface__iKr_Markov_Sotalol_block__BOr4; // dimensionless
        const double var_iKr_Markov__BOr4 = var_IKr__BOr4; // dimensionless
        const double var_iKr_Markov_Sotalol_block__BOr4 = var_iKr_Markov__BOr4; // dimensionless
        const double var_iKr_Markov_Sotalol_block__BtoO = var_iKr_Markov_Sotalol_block__BOr4 * var_iKr_Markov_Sotalol_block__kDiss; // per_millisecond
        const double var_iKr_Markov__BtoO = var_iKr_Markov_Sotalol_block__BtoO; // per_millisecond
        const double var_IKr__O = var_chaste_interface__iKr_Markov__Or4; // dimensionless
        const double var_iKr_Markov__O = var_IKr__O; // dimensionless
        const double var_iKr_Markov_Sotalol_block__O = var_iKr_Markov__O; // dimensionless
        const double var_iKr_Markov_Sotalol_block__Sotalol_mM = 0.0; // millimolar
        const double var_iKr_Markov_Sotalol_block__kBinding = 0.0050000000000000001; // per_millimolar_per_millisecond
        const double var_iKr_Markov_Sotalol_block__OtoB = var_iKr_Markov_Sotalol_block__O * var_iKr_Markov_Sotalol_block__Sotalol_mM * var_iKr_Markov_Sotalol_block__kBinding; // per_millisecond
        const double var_iKr_Markov__OtoB = var_iKr_Markov_Sotalol_block__OtoB; // per_millisecond
        const double var_iKr_Markov__beta_xr4 = ((1.0 * var_iKr_Markov__T) / var_iKr_Markov__T_Base) * exp(30.061 + ((var_iKr_Markov__T_Base / var_iKr_Markov__T) * (((-0.031199999999999999) * var_iKr_Markov__V) - 33.243000000000002))); // per_millisecond
        const double var_iKr_Markov__d_Or4_d_Environment__time = ((((var_iKr_Markov__alpha_xr3 * var_iKr_Markov__Cr3) + (var_iKr_Markov__beta_xr4 * var_iKr_Markov__Ir5)) - ((var_iKr_Markov__alpha_xr4 + var_iKr_Markov__beta_xr3) * var_iKr_Markov__Or4)) - var_iKr_Markov__OtoB) + var_iKr_Markov__BtoO; // per_millisecond
        const double var_IKr__iKr_Markov__d_Or4_d_Environment__time = var_iKr_Markov__d_Or4_d_Environment__time; // per_millisecond
        const double var_iKr_Markov__d_Ir5_d_Environment__time = (var_iKr_Markov__alpha_xr4 * var_iKr_Markov__Or4) - (var_iKr_Markov__beta_xr4 * var_iKr_Markov__Ir5); // per_millisecond
        const double var_IKr__iKr_Markov__d_Ir5_d_Environment__time = var_iKr_Markov__d_Ir5_d_Environment__time; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__beta_xr1 = var_iKr_Markov__beta_xr1; // per_millisecond
        const double var_IKr__BCr1 = var_chaste_interface__iKr_Markov_Sotalol_block__BCr1; // dimensionless
        const double var_iKr_Markov__BCr1 = var_IKr__BCr1; // dimensionless
        const double var_iKr_Markov_Sotalol_block__BCr1 = var_iKr_Markov__BCr1; // dimensionless
        const double var_iKr_Markov_Sotalol_block__alpha_xr1 = var_iKr_Markov__alpha_xr1; // per_millisecond
        const double var_IKr__BCr2 = var_chaste_interface__iKr_Markov_Sotalol_block__BCr2; // dimensionless
        const double var_iKr_Markov__BCr2 = var_IKr__BCr2; // dimensionless
        const double var_iKr_Markov_Sotalol_block__BCr2 = var_iKr_Markov__BCr2; // dimensionless
        const double var_iKr_Markov_Sotalol_block__d_BCr1_d_Environment__time = (var_iKr_Markov_Sotalol_block__beta_xr1 * var_iKr_Markov_Sotalol_block__BCr2) - (var_iKr_Markov_Sotalol_block__alpha_xr1 * var_iKr_Markov_Sotalol_block__BCr1); // per_millisecond
        const double var_iKr_Markov__iKr_Markov_Sotalol_block__d_BCr1_d_Environment__time = var_iKr_Markov_Sotalol_block__d_BCr1_d_Environment__time; // per_millisecond
        const double var_IKr__iKr_Markov_Sotalol_block__d_BCr1_d_Environment__time = var_iKr_Markov__iKr_Markov_Sotalol_block__d_BCr1_d_Environment__time; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__alpha_xr2 = var_iKr_Markov__alpha_xr2; // per_millisecond
        const double var_IKr__BCr3 = var_chaste_interface__iKr_Markov_Sotalol_block__BCr3; // dimensionless
        const double var_iKr_Markov__BCr3 = var_IKr__BCr3; // dimensionless
        const double var_iKr_Markov_Sotalol_block__BCr3 = var_iKr_Markov__BCr3; // dimensionless
        const double var_iKr_Markov_Sotalol_block__beta_xr2 = var_iKr_Markov__beta_xr2; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__d_BCr2_d_Environment__time = ((var_iKr_Markov_Sotalol_block__alpha_xr1 * var_iKr_Markov_Sotalol_block__BCr1) + (var_iKr_Markov_Sotalol_block__beta_xr2 * var_iKr_Markov_Sotalol_block__BCr3)) - ((var_iKr_Markov_Sotalol_block__alpha_xr2 + var_iKr_Markov_Sotalol_block__beta_xr1) * var_iKr_Markov_Sotalol_block__BCr2); // per_millisecond
        const double var_iKr_Markov__iKr_Markov_Sotalol_block__d_BCr2_d_Environment__time = var_iKr_Markov_Sotalol_block__d_BCr2_d_Environment__time; // per_millisecond
        const double var_IKr__iKr_Markov_Sotalol_block__d_BCr2_d_Environment__time = var_iKr_Markov__iKr_Markov_Sotalol_block__d_BCr2_d_Environment__time; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__beta_xr3 = var_iKr_Markov__beta_xr3; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__alpha_xr3 = var_iKr_Markov__alpha_xr3; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__d_BCr3_d_Environment__time = ((var_iKr_Markov_Sotalol_block__alpha_xr2 * var_iKr_Markov_Sotalol_block__BCr2) + (var_iKr_Markov_Sotalol_block__beta_xr3 * var_iKr_Markov_Sotalol_block__BOr4)) - ((var_iKr_Markov_Sotalol_block__alpha_xr3 + var_iKr_Markov_Sotalol_block__beta_xr2) * var_iKr_Markov_Sotalol_block__BCr3); // per_millisecond
        const double var_iKr_Markov__iKr_Markov_Sotalol_block__d_BCr3_d_Environment__time = var_iKr_Markov_Sotalol_block__d_BCr3_d_Environment__time; // per_millisecond
        const double var_IKr__iKr_Markov_Sotalol_block__d_BCr3_d_Environment__time = var_iKr_Markov__iKr_Markov_Sotalol_block__d_BCr3_d_Environment__time; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__alpha_xr4 = var_iKr_Markov__alpha_xr4; // per_millisecond
        const double var_IKr__BIr5 = var_chaste_interface__iKr_Markov_Sotalol_block__BIr5; // dimensionless
        const double var_iKr_Markov__BIr5 = var_IKr__BIr5; // dimensionless
        const double var_iKr_Markov_Sotalol_block__BIr5 = var_iKr_Markov__BIr5; // dimensionless
        const double var_iKr_Markov_Sotalol_block__beta_xr4 = var_iKr_Markov__beta_xr4; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__d_BOr4_d_Environment__time = ((((var_iKr_Markov_Sotalol_block__alpha_xr3 * var_iKr_Markov_Sotalol_block__BCr3) + (var_iKr_Markov_Sotalol_block__beta_xr4 * var_iKr_Markov_Sotalol_block__BIr5)) - ((var_iKr_Markov_Sotalol_block__alpha_xr4 + var_iKr_Markov_Sotalol_block__beta_xr3) * var_iKr_Markov_Sotalol_block__BOr4)) + var_iKr_Markov_Sotalol_block__OtoB) - var_iKr_Markov_Sotalol_block__BtoO; // per_millisecond
        const double var_iKr_Markov__iKr_Markov_Sotalol_block__d_BOr4_d_Environment__time = var_iKr_Markov_Sotalol_block__d_BOr4_d_Environment__time; // per_millisecond
        const double var_IKr__iKr_Markov_Sotalol_block__d_BOr4_d_Environment__time = var_iKr_Markov__iKr_Markov_Sotalol_block__d_BOr4_d_Environment__time; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__d_BIr5_d_Environment__time = (var_iKr_Markov_Sotalol_block__alpha_xr4 * var_iKr_Markov_Sotalol_block__BOr4) - (var_iKr_Markov_Sotalol_block__beta_xr4 * var_iKr_Markov_Sotalol_block__BIr5); // per_millisecond
        const double var_iKr_Markov__iKr_Markov_Sotalol_block__d_BIr5_d_Environment__time = var_iKr_Markov_Sotalol_block__d_BIr5_d_Environment__time; // per_millisecond
        const double var_IKr__iKr_Markov_Sotalol_block__d_BIr5_d_Environment__time = var_iKr_Markov__iKr_Markov_Sotalol_block__d_BIr5_d_Environment__time; // per_millisecond
        const double var_iKs_Xs_gate__Xs = var_IKs__Xs; // dimensionless
        const double var_iKs_Xs_gate__V = var_IKs__V; // millivolt
        const double var_iKs_Xs_gate__alpha_xs = 1400.0 / sqrt(1.0 + exp((5.0 - var_iKs_Xs_gate__V) / 6.0)); // dimensionless
        const double var_iKs_Xs_gate__beta_xs = 1.0 / (1.0 + exp((var_iKs_Xs_gate__V - 35.0) / 15.0)); // dimensionless
        const double var_iKs_Xs_gate__tau_xs = (1.0 * var_iKs_Xs_gate__alpha_xs * var_iKs_Xs_gate__beta_xs) + 80.0; // millisecond
        const double var_iKs_Xs_gate__xs_inf = 1.0 / (1.0 + exp(((-5.0) - var_iKs_Xs_gate__V) / 14.0)); // dimensionless
        const double var_iKs_Xs_gate__d_Xs_d_Environment__time = (var_iKs_Xs_gate__xs_inf - var_iKs_Xs_gate__Xs) / var_iKs_Xs_gate__tau_xs; // per_millisecond
        const double var_IKs__iKs_Xs_gate__d_Xs_d_Environment__time = var_iKs_Xs_gate__d_Xs_d_Environment__time; // per_millisecond
        const double var_ito_s_gate__V = var_Ito__V; // millivolt
        const double var_ito_s_gate__tau_s = (85.0 * exp((-pow(var_ito_s_gate__V + 45.0, 2.0)) / 320.0)) + (5.0 / (1.0 + exp((var_ito_s_gate__V - 20.0) / 5.0))) + 3.0; // millisecond
        const double var_ito_s_gate__s_inf = 1.0 / (1.0 + exp((var_ito_s_gate__V + 20.0) / 5.0)); // dimensionless
        const double var_ito_s_gate__s = var_Ito__s; // dimensionless
        const double var_ito_s_gate__d_s_d_Environment__time = (var_ito_s_gate__s_inf - var_ito_s_gate__s) / var_ito_s_gate__tau_s; // per_millisecond
        const double var_Ito__ito_s_gate__d_s_d_Environment__time = var_ito_s_gate__d_s_d_Environment__time; // per_millisecond
        const double var_ito_r_gate__V = var_Ito__V; // millivolt
        const double var_ito_r_gate__r_inf = 1.0 / (1.0 + exp((20.0 - var_ito_r_gate__V) / 6.0)); // dimensionless
        const double var_ito_r_gate__tau_r = (9.5 * exp((-pow(var_ito_r_gate__V + 40.0, 2.0)) / 1800.0)) + 0.80000000000000004; // millisecond
        const double var_ito_r_gate__r = var_Ito__r; // dimensionless
        const double var_ito_r_gate__d_r_d_Environment__time = (var_ito_r_gate__r_inf - var_ito_r_gate__r) / var_ito_r_gate__tau_r; // per_millisecond
        const double var_Ito__ito_r_gate__d_r_d_Environment__time = var_ito_r_gate__d_r_d_Environment__time; // per_millisecond
        const double var_INa__shift_INa_inact = 0.0; // millivolt
        const double var_iNa_m_gate__m = var_INa__m; // dimensionless
        const double var_iNa_m_gate__V = var_INa__V; // millivolt
        const double var_iNa_m_gate__alpha_m = 1.0 / (1.0 + exp(((-60.0) - var_iNa_m_gate__V) / 5.0)); // dimensionless
        const double var_iNa_m_gate__beta_m = (0.10000000000000001 / (1.0 + exp((var_iNa_m_gate__V + 35.0) / 5.0))) + (0.10000000000000001 / (1.0 + exp((var_iNa_m_gate__V - 50.0) / 200.0))); // dimensionless
        const double var_iNa_m_gate__tau_m = 1.0 * var_iNa_m_gate__alpha_m * var_iNa_m_gate__beta_m; // millisecond
        const double var_iNa_m_gate__m_inf = 1.0 / pow(1.0 + exp(((-56.859999999999999) - var_iNa_m_gate__V) / 9.0299999999999994), 2.0); // dimensionless
        const double var_iNa_m_gate__d_m_d_Environment__time = (var_iNa_m_gate__m_inf - var_iNa_m_gate__m) / var_iNa_m_gate__tau_m; // per_millisecond
        const double var_INa__iNa_m_gate__d_m_d_Environment__time = var_iNa_m_gate__d_m_d_Environment__time; // per_millisecond
        const double var_iNa_h_gate__V = var_INa__V; // millivolt
        const double var_iNa_h_gate__shift_INa_inact = var_INa__shift_INa_inact; // millivolt
        const double var_iNa_h_gate__alpha_h = (var_iNa_h_gate__V < ((-40.0) + var_iNa_h_gate__shift_INa_inact)) ? (0.057000000000000002 * exp((-((var_iNa_h_gate__V + 80.0) - var_iNa_h_gate__shift_INa_inact)) / 6.7999999999999998)) : 0.0; // per_millisecond
        const double var_iNa_h_gate__beta_h = (var_iNa_h_gate__V < ((-40.0) + var_iNa_h_gate__shift_INa_inact)) ? ((2.7000000000000002 * exp(0.079000000000000001 * (var_iNa_h_gate__V - var_iNa_h_gate__shift_INa_inact))) + (310000.0 * exp(0.34849999999999998 * (var_iNa_h_gate__V - var_iNa_h_gate__shift_INa_inact)))) : (0.77000000000000002 / (0.13 * (1.0 + exp(((var_iNa_h_gate__V + 10.66) - var_iNa_h_gate__shift_INa_inact) / (-11.1))))); // per_millisecond
        const double var_iNa_h_gate__tau_h = 1.0 / (var_iNa_h_gate__alpha_h + var_iNa_h_gate__beta_h); // millisecond
        const double var_iNa_h_gate__h = var_INa__h; // dimensionless
        const double var_iNa_h_gate__h_inf = 1.0 / pow(1.0 + exp(((var_iNa_h_gate__V + 71.549999999999997) - var_iNa_h_gate__shift_INa_inact) / 7.4299999999999997), 2.0); // dimensionless
        const double var_iNa_h_gate__d_h_d_Environment__time = (var_iNa_h_gate__h_inf - var_iNa_h_gate__h) / var_iNa_h_gate__tau_h; // per_millisecond
        const double var_INa__iNa_h_gate__d_h_d_Environment__time = var_iNa_h_gate__d_h_d_Environment__time; // per_millisecond
        const double var_iNa_j_gate__shift_INa_inact = var_INa__shift_INa_inact; // millivolt
        const double var_iNa_j_gate__V = var_INa__V; // millivolt
        const double var_iNa_j_gate__beta_j = (var_iNa_j_gate__V < ((-40.0) + var_iNa_j_gate__shift_INa_inact)) ? ((0.024240000000000001 * exp((-0.01052) * (var_iNa_j_gate__V - var_iNa_j_gate__shift_INa_inact))) / (1.0 + exp((-0.13780000000000001) * ((var_iNa_j_gate__V + 40.140000000000001) - var_iNa_j_gate__shift_INa_inact)))) : ((0.59999999999999998 * exp(0.057000000000000002 * (var_iNa_j_gate__V - var_iNa_j_gate__shift_INa_inact))) / (1.0 + exp((-0.10000000000000001) * ((var_iNa_j_gate__V + 32.0) - var_iNa_j_gate__shift_INa_inact)))); // per_millisecond
        const double var_iNa_j_gate__alpha_j = (var_iNa_j_gate__V < ((-40.0) + var_iNa_j_gate__shift_INa_inact)) ? ((((((-25428.0) * exp(0.24440000000000001 * (var_iNa_j_gate__V - var_iNa_j_gate__shift_INa_inact))) - (6.9480000000000002e-06 * exp((-0.043909999999999998) * (var_iNa_j_gate__V - var_iNa_j_gate__shift_INa_inact)))) * (var_iNa_j_gate__V + 37.780000000000001)) / 1.0) / (1.0 + exp(0.311 * ((var_iNa_j_gate__V + 79.230000000000004) - var_iNa_j_gate__shift_INa_inact)))) : 0.0; // per_millisecond
        const double var_iNa_j_gate__tau_j = 1.0 / (var_iNa_j_gate__alpha_j + var_iNa_j_gate__beta_j); // millisecond
        const double var_iNa_j_gate__j = var_INa__j; // dimensionless
        const double var_iNa_j_gate__j_inf = 1.0 / pow(1.0 + exp(((var_iNa_j_gate__V + 71.549999999999997) - var_iNa_j_gate__shift_INa_inact) / 7.4299999999999997), 2.0); // dimensionless
        const double var_iNa_j_gate__d_j_d_Environment__time = (var_iNa_j_gate__j_inf - var_iNa_j_gate__j) / var_iNa_j_gate__tau_j; // per_millisecond
        const double var_INa__iNa_j_gate__d_j_d_Environment__time = var_iNa_j_gate__d_j_d_Environment__time; // per_millisecond
        const double var_iCaL_d_gate__V = var_ICaL__V; // millivolt
        const double var_iCaL_d_gate__d_inf_shift = 5.0; // millivolt
        const double var_iCaL_d_gate__d_inf = 1.0 / (1.0 + exp((var_iCaL_d_gate__d_inf_shift - var_iCaL_d_gate__V) / 7.5)); // dimensionless
        const double var_iCaL_d_gate__d = var_ICaL__d; // dimensionless
        const double var_iCaL_d_gate__beta_d = 1.3999999999999999 / (1.0 + exp((var_iCaL_d_gate__V + 5.0) / 5.0)); // dimensionless
        const double var_iCaL_d_gate__gamma_d = 1.0 / (1.0 + exp((50.0 - var_iCaL_d_gate__V) / 20.0)); // millisecond
        const double var_iCaL_d_gate__alpha_d = (1.3999999999999999 / (1.0 + exp(((-35.0) - var_iCaL_d_gate__V) / 13.0))) + 0.25; // dimensionless
        const double var_iCaL_d_gate__tau_d = (1.0 * var_iCaL_d_gate__alpha_d * var_iCaL_d_gate__beta_d) + var_iCaL_d_gate__gamma_d; // millisecond
        const double var_iCaL_d_gate__d_d_d_Environment__time = (var_iCaL_d_gate__d_inf - var_iCaL_d_gate__d) / var_iCaL_d_gate__tau_d; // per_millisecond
        const double var_ICaL__iCaL_d_gate__d_d_d_Environment__time = var_iCaL_d_gate__d_d_d_Environment__time; // per_millisecond
        const double var_iCaL_f_gate__V = var_ICaL__V; // millivolt
        const double var_iCaL_f_gate__f_inf = 1.0 / (1.0 + exp((var_iCaL_f_gate__V + 20.0) / 7.0)); // dimensionless
        const double var_iCaL_f_gate__f = var_ICaL__f; // dimensionless
        const double var_iCaL_f_gate__tau_f = ((1102.5 * exp((-pow(var_iCaL_f_gate__V + 27.0, 2.0)) / 225.0)) + (200.0 / (1.0 + exp((13.0 - var_iCaL_f_gate__V) / 10.0))) + (180.0 / (1.0 + exp((var_iCaL_f_gate__V + 30.0) / 10.0))) + 20.0) / 4.0; // millisecond
        const double var_iCaL_f_gate__d_f_d_Environment__time = (var_iCaL_f_gate__f_inf - var_iCaL_f_gate__f) / var_iCaL_f_gate__tau_f; // per_millisecond
        const double var_ICaL__iCaL_f_gate__d_f_d_Environment__time = var_iCaL_f_gate__d_f_d_Environment__time; // per_millisecond
        const double var_iCaL_f2_gate__V = var_ICaL__V; // millivolt
        const double var_iCaL_f2_gate__tau_f2 = ((562.0 * exp((-pow(var_iCaL_f2_gate__V + 27.0, 2.0)) / 240.0)) + (31.0 / (1.0 + exp((25.0 - var_iCaL_f2_gate__V) / 10.0))) + (80.0 / (1.0 + exp((var_iCaL_f2_gate__V + 30.0) / 10.0)))) / 2.0; // millisecond
        const double var_iCaL_f2_gate__f2 = var_ICaL__f2; // dimensionless
        const double var_iCaL_f2_gate__f2_inf = (0.75 / (1.0 + exp((var_iCaL_f2_gate__V + 35.0) / 7.0))) + 0.25; // dimensionless
        const double var_iCaL_f2_gate__d_f2_d_Environment__time = (var_iCaL_f2_gate__f2_inf - var_iCaL_f2_gate__f2) / var_iCaL_f2_gate__tau_f2; // per_millisecond
        const double var_ICaL__iCaL_f2_gate__d_f2_d_Environment__time = var_iCaL_f2_gate__d_f2_d_Environment__time; // per_millisecond
        const double var_iCaL_fCass_gate__Ca_ss = var_ICaL__Ca_ss; // millimolar
        const double var_iCaL_fCass_gate__fCass_inf = (0.40000000000000002 / (1.0 + pow(var_iCaL_fCass_gate__Ca_ss / 0.050000000000000003, 2.0))) + 0.59999999999999998; // dimensionless
        const double var_iCaL_fCass_gate__fCass = var_ICaL__fCass; // dimensionless
        const double var_iCaL_fCass_gate__tau_fCass = (80.0 / (1.0 + pow(var_iCaL_fCass_gate__Ca_ss / 0.050000000000000003, 2.0))) + 2.0; // millisecond
        const double var_iCaL_fCass_gate__d_fCass_d_Environment__time = (var_iCaL_fCass_gate__fCass_inf - var_iCaL_fCass_gate__fCass) / var_iCaL_fCass_gate__tau_fCass; // per_millisecond
        const double var_ICaL__iCaL_fCass_gate__d_fCass_d_Environment__time = var_iCaL_fCass_gate__d_fCass_d_Environment__time; // per_millisecond
        const double var_Ca__Ca_i = var_chaste_interface__Ca__Ca_i; // millimolar
        const double var_Ca__Ca_SR = var_chaste_interface__Ca__Ca_SR; // millimolar
        const double var_Ca__Ca_ss = var_chaste_interface__Ca__Ca_ss; // millimolar
        const double var_Ca_buffer__Buf_c = 0.20000000000000001; // millimolar
        const double var_Ca_buffer__K_buf_c = 0.001; // millimolar
        const double var_Ca_buffer__Ca_i = var_Ca__Ca_i; // millimolar
        const double var_Ca_buffer__Ca_i_bufc = 1.0 / (1.0 + ((var_Ca_buffer__Buf_c * var_Ca_buffer__K_buf_c) / pow(var_Ca_buffer__Ca_i + var_Ca_buffer__K_buf_c, 2.0))); // dimensionless
        const double var_Ca__Ca_i_bufc = var_Ca_buffer__Ca_i_bufc; // dimensionless
        const double var_Ca_buffer__Buf_sr = 10.0; // millimolar
        const double var_Ca_buffer__Ca_SR = var_Ca__Ca_SR; // millimolar
        const double var_Ca_buffer__K_buf_sr = 0.29999999999999999; // millimolar
        const double var_Ca_buffer__Ca_sr_bufsr = 1.0 / (1.0 + ((var_Ca_buffer__Buf_sr * var_Ca_buffer__K_buf_sr) / pow(var_Ca_buffer__Ca_SR + var_Ca_buffer__K_buf_sr, 2.0))); // dimensionless
        const double var_Ca__Ca_sr_bufsr = var_Ca_buffer__Ca_sr_bufsr; // dimensionless
        const double var_Ca_buffer__Buf_ss = 0.40000000000000002; // millimolar
        const double var_Ca_buffer__Ca_ss = var_Ca__Ca_ss; // millimolar
        const double var_Ca_buffer__K_buf_ss = 0.00025000000000000001; // millimolar
        const double var_Ca_buffer__Ca_ss_bufss = 1.0 / (1.0 + ((var_Ca_buffer__Buf_ss * var_Ca_buffer__K_buf_ss) / pow(var_Ca_buffer__Ca_ss + var_Ca_buffer__K_buf_ss, 2.0))); // dimensionless
        const double var_Ca__Ca_ss_bufss = var_Ca_buffer__Ca_ss_bufss; // dimensionless
        const double var_Ca__V_sr = 0.0010939999999999999; // nanolitre
        const double var_Ca__V_ss = 5.4679999999999998e-05; // nanolitre
        const double var_Ca__Vol_c = var_cell__Vol_c; // nanolitre
        const double var_Ca__F = var_Environment__F; // coulomb_per_mole
        const double var_Ca__Cm = var_cell__Cm; // nanoF
        const double var_Ca__i_CaL = var_ICaL__i_CaL; // nanoA_per_nanoF
        const double var_Ca__i_NaCa = var_INaCa__i_NaCa; // nanoA_per_nanoF
        const double var_Ca__i_p_Ca = var_IpCa__i_p_Ca; // nanoA_per_nanoF
        const double var_Ca__i_b_Ca = var_ICab__i_b_Ca; // nanoA_per_nanoF
        const double var_Irel__min_sr = 1.0; // dimensionless
        const double var_Irel__Ca_SR = var_Ca__Ca_SR; // millimolar
        const double var_Irel__EC = 1.5; // millimolar
        const double var_Irel__max_sr = 2.5; // dimensionless
        const double var_Irel__kcasr = var_Irel__max_sr - ((var_Irel__max_sr - var_Irel__min_sr) / (1.0 + pow(var_Irel__EC / var_Irel__Ca_SR, 2.0))); // dimensionless
        const double var_Irel__k1_prime = 0.14999999999999999; // per_millimolar2_per_millisecond
        const double var_Irel__k1 = var_Irel__k1_prime / var_Irel__kcasr; // per_millimolar2_per_millisecond
        const double var_Irel__Ca_ss = var_Ca__Ca_ss; // millimolar
        const double var_Irel__k3 = 0.059999999999999998; // per_millisecond
        const double var_Ca__R_prime = var_chaste_interface__Irel__R_prime; // dimensionless
        const double var_Irel__R_prime = var_Ca__R_prime; // dimensionless
        const double var_Irel__O = (var_Irel__k1 * pow(var_Irel__Ca_ss, 2.0) * var_Irel__R_prime) / (var_Irel__k3 + (var_Irel__k1 * pow(var_Irel__Ca_ss, 2.0))); // dimensionless
        const double var_Irel__Vol_rel = 0.30599999999999999; // per_millisecond
        const double var_Irel__i_rel = var_Irel__Vol_rel * var_Irel__O * (var_Irel__Ca_SR - var_Irel__Ca_ss); // millimolar_per_millisecond
        const double var_Ca__i_rel = var_Irel__i_rel; // millimolar_per_millisecond
        const double var_Ileak_Iup_Ixfer__Vmax_up = 0.0063749999999999996; // millimolar_per_millisecond
        const double var_Ileak_Iup_Ixfer__K_up = 0.00025000000000000001; // millimolar
        const double var_Ileak_Iup_Ixfer__Ca_i = var_Ca__Ca_i; // millimolar
        const double var_Ileak_Iup_Ixfer__i_up = var_Ileak_Iup_Ixfer__Vmax_up / (1.0 + (pow(var_Ileak_Iup_Ixfer__K_up, 2.0) / pow(var_Ileak_Iup_Ixfer__Ca_i, 2.0))); // millimolar_per_millisecond
        const double var_Ca__i_up = var_Ileak_Iup_Ixfer__i_up; // millimolar_per_millisecond
        const double var_Ileak_Iup_Ixfer__Vol_leak = 0.00036000000000000002; // per_millisecond
        const double var_Ileak_Iup_Ixfer__Ca_SR = var_Ca__Ca_SR; // millimolar
        const double var_Ileak_Iup_Ixfer__i_leak = var_Ileak_Iup_Ixfer__Vol_leak * (var_Ileak_Iup_Ixfer__Ca_SR - var_Ileak_Iup_Ixfer__Ca_i); // millimolar_per_millisecond
        const double var_Ca__i_leak = var_Ileak_Iup_Ixfer__i_leak; // millimolar_per_millisecond
        const double var_Ileak_Iup_Ixfer__Ca_ss = var_Ca__Ca_ss; // millimolar
        const double var_Ileak_Iup_Ixfer__Vol_xfer = 0.0038; // per_millisecond
        const double var_Ileak_Iup_Ixfer__i_xfer = var_Ileak_Iup_Ixfer__Vol_xfer * (var_Ileak_Iup_Ixfer__Ca_ss - var_Ileak_Iup_Ixfer__Ca_i); // millimolar_per_millisecond
        const double var_Ca__i_xfer = var_Ileak_Iup_Ixfer__i_xfer; // millimolar_per_millisecond
        const double var_Ca__d_Ca_i_d_Environment__time = var_Ca__Ca_i_bufc * (((((var_Ca__i_leak - var_Ca__i_up) * var_Ca__V_sr) / var_Ca__Vol_c) + var_Ca__i_xfer) - ((((var_Ca__i_b_Ca + var_Ca__i_p_Ca) - (2.0 * var_Ca__i_NaCa)) * var_Ca__Cm) / (2.0 * var_Ca__Vol_c * var_Ca__F))); // millimolar_per_millisecond
        const double var_Ca__d_Ca_SR_d_Environment__time = var_Ca__Ca_sr_bufsr * (var_Ca__i_up - (var_Ca__i_rel + var_Ca__i_leak)); // millimolar_per_millisecond
        const double var_Ca__d_Ca_ss_d_Environment__time = var_Ca__Ca_ss_bufss * (((((-var_Ca__i_CaL) * var_Ca__Cm) / (2.0 * var_Ca__V_ss * var_Ca__F)) + ((var_Ca__i_rel * var_Ca__V_sr) / var_Ca__V_ss)) - ((var_Ca__i_xfer * var_Ca__Vol_c) / var_Ca__V_ss)); // millimolar_per_millisecond
        const double var_Irel__k2_prime = 0.044999999999999998; // per_millimolar_per_millisecond
        const double var_Irel__k2 = var_Irel__k2_prime * var_Irel__kcasr; // per_millimolar_per_millisecond
        const double var_Irel__k4 = 0.0050000000000000001; // per_millisecond
        const double var_Irel__d_R_prime_d_Environment__time = ((-var_Irel__k2) * var_Irel__Ca_ss * var_Irel__R_prime) + (var_Irel__k4 * (1.0 - var_Irel__R_prime)); // per_millisecond
        const double var_Ca__Irel__d_R_prime_d_Environment__time = var_Irel__d_R_prime_d_Environment__time; // per_millisecond
        const double var_Na__F = var_Environment__F; // coulomb_per_mole
        const double var_Na__Cm = var_cell__Cm; // nanoF
        const double var_Na__Vol_c = var_cell__Vol_c; // nanolitre
        const double var_Na__i_Na = var_INa__i_Na; // nanoA_per_nanoF
        const double var_Na__i_NaCa = var_INaCa__i_NaCa; // nanoA_per_nanoF
        const double var_Na__i_NaK = var_INaK__i_NaK; // nanoA_per_nanoF
        const double var_Na__i_b_Na = var_INab__i_b_Na; // nanoA_per_nanoF
        const double var_Na__d_Na_i_d_Environment__time = ((-(var_Na__i_Na + var_Na__i_b_Na + (3.0 * var_Na__i_NaK) + (3.0 * var_Na__i_NaCa))) * var_Na__Cm) / (var_Na__Vol_c * var_Na__F); // millimolar_per_millisecond
        const double var_K__F = var_Environment__F; // coulomb_per_mole
        const double var_K__Cm = var_cell__Cm; // nanoF
        const double var_K__Vol_c = var_cell__Vol_c; // nanolitre
        const double var_K__i_K1 = var_IK1__i_K1; // nanoA_per_nanoF
        const double var_K__i_to = var_Ito__i_to; // nanoA_per_nanoF
        const double var_K__i_NaK = var_INaK__i_NaK; // nanoA_per_nanoF
        const double var_K__i_Kr = var_IKr__i_Kr; // nanoA_per_nanoF
        const double var_K__i_Ks = var_IKs__i_Ks; // nanoA_per_nanoF
        const double var_K__i_p_K = var_IpK__i_p_K; // nanoA_per_nanoF
        const double var_K__i_Stim_converter = var_chaste_interface__cell__i_Stim; // uA_per_cm2
        const double var_K__chaste_interface__chaste_membrane_capacitance = HeartConfig::Instance()->GetCapacitance(); // uF_per_cm2
        const double var_K__i_Stim = var_K__i_Stim_converter / var_K__chaste_interface__chaste_membrane_capacitance; // nanoA_per_nanoF
        const double var_K__d_K_i_d_Environment__time = ((-((var_K__i_K1 + var_K__i_to + var_K__i_Kr + var_K__i_Ks + var_K__i_p_K + var_K__i_Stim) - (2.0 * var_K__i_NaK))) / (var_K__Vol_c * var_K__F)) * var_K__Cm; // millimolar_per_millisecond
        const double var_chaste_interface__iKr_Markov__d_Cr1_d_Environment__time = var_IKr__iKr_Markov__d_Cr1_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iKr_Markov__d_Cr2_d_Environment__time = var_IKr__iKr_Markov__d_Cr2_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iKr_Markov__d_Cr3_d_Environment__time = var_IKr__iKr_Markov__d_Cr3_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iKr_Markov__d_Or4_d_Environment__time = var_IKr__iKr_Markov__d_Or4_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iKr_Markov__d_Ir5_d_Environment__time = var_IKr__iKr_Markov__d_Ir5_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iKr_Markov_Sotalol_block__d_BCr1_d_Environment__time = var_IKr__iKr_Markov_Sotalol_block__d_BCr1_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iKr_Markov_Sotalol_block__d_BCr2_d_Environment__time = var_IKr__iKr_Markov_Sotalol_block__d_BCr2_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iKr_Markov_Sotalol_block__d_BCr3_d_Environment__time = var_IKr__iKr_Markov_Sotalol_block__d_BCr3_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iKr_Markov_Sotalol_block__d_BOr4_d_Environment__time = var_IKr__iKr_Markov_Sotalol_block__d_BOr4_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iKr_Markov_Sotalol_block__d_BIr5_d_Environment__time = var_IKr__iKr_Markov_Sotalol_block__d_BIr5_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iKs_Xs_gate__d_Xs_d_Environment__time = var_IKs__iKs_Xs_gate__d_Xs_d_Environment__time; // per_millisecond
        const double var_chaste_interface__ito_s_gate__d_s_d_Environment__time = var_Ito__ito_s_gate__d_s_d_Environment__time; // per_millisecond
        const double var_chaste_interface__ito_r_gate__d_r_d_Environment__time = var_Ito__ito_r_gate__d_r_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iNa_m_gate__d_m_d_Environment__time = var_INa__iNa_m_gate__d_m_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iNa_h_gate__d_h_d_Environment__time = var_INa__iNa_h_gate__d_h_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iNa_j_gate__d_j_d_Environment__time = var_INa__iNa_j_gate__d_j_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iCaL_d_gate__d_d_d_Environment__time = var_ICaL__iCaL_d_gate__d_d_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iCaL_f_gate__d_f_d_Environment__time = var_ICaL__iCaL_f_gate__d_f_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iCaL_f2_gate__d_f2_d_Environment__time = var_ICaL__iCaL_f2_gate__d_f2_d_Environment__time; // per_millisecond
        const double var_chaste_interface__iCaL_fCass_gate__d_fCass_d_Environment__time = var_ICaL__iCaL_fCass_gate__d_fCass_d_Environment__time; // per_millisecond
        const double var_chaste_interface__Ca__d_Ca_i_d_Environment__time = var_Ca__d_Ca_i_d_Environment__time; // millimolar_per_millisecond
        const double var_chaste_interface__Ca__d_Ca_SR_d_Environment__time = var_Ca__d_Ca_SR_d_Environment__time; // millimolar_per_millisecond
        const double var_chaste_interface__Ca__d_Ca_ss_d_Environment__time = var_Ca__d_Ca_ss_d_Environment__time; // millimolar_per_millisecond
        const double var_chaste_interface__Irel__d_R_prime_d_Environment__time = var_Ca__Irel__d_R_prime_d_Environment__time; // per_millisecond
        const double var_chaste_interface__Na__d_Na_i_d_Environment__time = var_Na__d_Na_i_d_Environment__time; // millimolar_per_millisecond
        const double var_chaste_interface__K__d_K_i_d_Environment__time = var_K__d_K_i_d_Environment__time; // millimolar_per_millisecond
        const double d_dt_chaste_interface__iKr_Markov__Cr1 = var_chaste_interface__iKr_Markov__d_Cr1_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov__Cr2 = var_chaste_interface__iKr_Markov__d_Cr2_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov__Cr3 = var_chaste_interface__iKr_Markov__d_Cr3_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov__Or4 = var_chaste_interface__iKr_Markov__d_Or4_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov__Ir5 = var_chaste_interface__iKr_Markov__d_Ir5_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr1 = var_chaste_interface__iKr_Markov_Sotalol_block__d_BCr1_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr2 = var_chaste_interface__iKr_Markov_Sotalol_block__d_BCr2_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr3 = var_chaste_interface__iKr_Markov_Sotalol_block__d_BCr3_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov_Sotalol_block__BOr4 = var_chaste_interface__iKr_Markov_Sotalol_block__d_BOr4_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov_Sotalol_block__BIr5 = var_chaste_interface__iKr_Markov_Sotalol_block__d_BIr5_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iKs_Xs_gate__Xs = var_chaste_interface__iKs_Xs_gate__d_Xs_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__ito_s_gate__s = var_chaste_interface__ito_s_gate__d_s_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__ito_r_gate__r = var_chaste_interface__ito_r_gate__d_r_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iNa_m_gate__m = var_chaste_interface__iNa_m_gate__d_m_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iNa_h_gate__h = var_chaste_interface__iNa_h_gate__d_h_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iNa_j_gate__j = var_chaste_interface__iNa_j_gate__d_j_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iCaL_d_gate__d = var_chaste_interface__iCaL_d_gate__d_d_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iCaL_f_gate__f = var_chaste_interface__iCaL_f_gate__d_f_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iCaL_f2_gate__f2 = var_chaste_interface__iCaL_f2_gate__d_f2_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__iCaL_fCass_gate__fCass = var_chaste_interface__iCaL_fCass_gate__d_fCass_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__Ca__Ca_i = var_chaste_interface__Ca__d_Ca_i_d_Environment__time; // millimolar_per_millisecond
        const double d_dt_chaste_interface__Ca__Ca_SR = var_chaste_interface__Ca__d_Ca_SR_d_Environment__time; // millimolar_per_millisecond
        const double d_dt_chaste_interface__Ca__Ca_ss = var_chaste_interface__Ca__d_Ca_ss_d_Environment__time; // millimolar_per_millisecond
        const double d_dt_chaste_interface__Irel__R_prime = var_chaste_interface__Irel__d_R_prime_d_Environment__time; // per_millisecond
        const double d_dt_chaste_interface__Na__Na_i = var_chaste_interface__Na__d_Na_i_d_Environment__time; // millimolar_per_millisecond
        const double d_dt_chaste_interface__K__K_i = var_chaste_interface__K__d_K_i_d_Environment__time; // millimolar_per_millisecond
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__cell__V = 0.0;
        }
        else
        {
            const double var_cell__i_K1 = var_IK1__i_K1; // nanoA_per_nanoF
            const double var_cell__i_to = var_Ito__i_to; // nanoA_per_nanoF
            const double var_cell__i_Kr = var_IKr__i_Kr; // nanoA_per_nanoF
            const double var_cell__i_Ks = var_IKs__i_Ks; // nanoA_per_nanoF
            const double var_cell__i_CaL = var_ICaL__i_CaL; // nanoA_per_nanoF
            const double var_cell__i_NaK = var_INaK__i_NaK; // nanoA_per_nanoF
            const double var_cell__i_Na = var_INa__i_Na; // nanoA_per_nanoF
            const double var_cell__i_b_Na = var_INab__i_b_Na; // nanoA_per_nanoF
            const double var_cell__i_NaCa = var_INaCa__i_NaCa; // nanoA_per_nanoF
            const double var_cell__i_b_Ca = var_ICab__i_b_Ca; // nanoA_per_nanoF
            const double var_cell__i_p_K = var_IpK__i_p_K; // nanoA_per_nanoF
            const double var_cell__i_p_Ca = var_IpCa__i_p_Ca; // nanoA_per_nanoF
            const double var_cell__chaste_interface__chaste_membrane_capacitance = HeartConfig::Instance()->GetCapacitance(); // uF_per_cm2
            const double var_cell__i_Stim_converter = var_chaste_interface__cell__i_Stim; // uA_per_cm2
            const double var_cell__i_Stim = var_cell__i_Stim_converter / var_cell__chaste_interface__chaste_membrane_capacitance; // nanoA_per_nanoF
            const double var_cell__i_tot = var_cell__i_K1 + var_cell__i_to + var_cell__i_Kr + var_cell__i_Ks + var_cell__i_CaL + var_cell__i_NaK + var_cell__i_Na + var_cell__i_b_Na + var_cell__i_NaCa + var_cell__i_b_Ca + var_cell__i_p_K + var_cell__i_p_Ca + var_cell__i_Stim; // nanoA_per_nanoF
            const double var_cell__d_V_d_Environment__time = -var_cell__i_tot; // 'millivolt per millisecond'
            const double var_chaste_interface__cell__d_V_d_Environment__time = var_cell__d_V_d_Environment__time; // ___units_2
            d_dt_chaste_interface__cell__V = var_chaste_interface__cell__d_V_d_Environment__time; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__cell__V;
        rDY[1] = d_dt_chaste_interface__iKr_Markov__Cr1;
        rDY[2] = d_dt_chaste_interface__iKr_Markov__Cr2;
        rDY[3] = d_dt_chaste_interface__iKr_Markov__Cr3;
        rDY[4] = d_dt_chaste_interface__iKr_Markov__Or4;
        rDY[5] = d_dt_chaste_interface__iKr_Markov__Ir5;
        rDY[6] = d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr1;
        rDY[7] = d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr2;
        rDY[8] = d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr3;
        rDY[9] = d_dt_chaste_interface__iKr_Markov_Sotalol_block__BOr4;
        rDY[10] = d_dt_chaste_interface__iKr_Markov_Sotalol_block__BIr5;
        rDY[11] = d_dt_chaste_interface__iKs_Xs_gate__Xs;
        rDY[12] = d_dt_chaste_interface__ito_s_gate__s;
        rDY[13] = d_dt_chaste_interface__ito_r_gate__r;
        rDY[14] = d_dt_chaste_interface__iNa_m_gate__m;
        rDY[15] = d_dt_chaste_interface__iNa_h_gate__h;
        rDY[16] = d_dt_chaste_interface__iNa_j_gate__j;
        rDY[17] = d_dt_chaste_interface__iCaL_d_gate__d;
        rDY[18] = d_dt_chaste_interface__iCaL_f_gate__f;
        rDY[19] = d_dt_chaste_interface__iCaL_f2_gate__f2;
        rDY[20] = d_dt_chaste_interface__iCaL_fCass_gate__fCass;
        rDY[21] = d_dt_chaste_interface__Ca__Ca_i;
        rDY[22] = d_dt_chaste_interface__Ca__Ca_SR;
        rDY[23] = d_dt_chaste_interface__Ca__Ca_ss;
        rDY[24] = d_dt_chaste_interface__Irel__R_prime;
        rDY[25] = d_dt_chaste_interface__Na__Na_i;
        rDY[26] = d_dt_chaste_interface__K__K_i;
    }
    
template<>
void OdeSystemInformation<Dynamicfink_noble_giles_model_2008FromCellML>::Initialise(void)
{
    this->mSystemName = "fink_noble_giles_model_2008";
    this->mFreeVariableName = "Environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-86.45);

    // rY[1]:
    this->mVariableNames.push_back("iKr_Markov__Cr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9786);

    // rY[2]:
    this->mVariableNames.push_back("iKr_Markov__Cr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0031);

    // rY[3]:
    this->mVariableNames.push_back("iKr_Markov__Cr3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0029);

    // rY[4]:
    this->mVariableNames.push_back("iKr_Markov__Or4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.014);

    // rY[5]:
    this->mVariableNames.push_back("iKr_Markov__Ir5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0014);

    // rY[6]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[7]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[8]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[9]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BOr4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[10]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BIr5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[11]:
    this->mVariableNames.push_back("iKs_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00303);

    // rY[12]:
    this->mVariableNames.push_back("ito_s_gate__s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1);

    // rY[13]:
    this->mVariableNames.push_back("ito_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.11e-8);

    // rY[14]:
    this->mVariableNames.push_back("iNa_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00132);

    // rY[15]:
    this->mVariableNames.push_back("iNa_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7768);

    // rY[16]:
    this->mVariableNames.push_back("iNa_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7766);

    // rY[17]:
    this->mVariableNames.push_back("iCaL_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.06e-6);

    // rY[18]:
    this->mVariableNames.push_back("iCaL_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999);

    // rY[19]:
    this->mVariableNames.push_back("iCaL_f2_gate__f2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9995);

    // rY[20]:
    this->mVariableNames.push_back("iCaL_fCass_gate__fCass");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1);

    // rY[21]:
    this->mVariableNames.push_back("Ca__Ca_i");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.092e-4);

    // rY[22]:
    this->mVariableNames.push_back("Ca__Ca_SR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(2.7656);

    // rY[23]:
    this->mVariableNames.push_back("Ca__Ca_ss");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.893e-4);

    // rY[24]:
    this->mVariableNames.push_back("Irel__R_prime");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9864);

    // rY[25]:
    this->mVariableNames.push_back("Na__Na_i");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.940167);

    // rY[26]:
    this->mVariableNames.push_back("K__K_i");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(141.0167);

    this->mAttributes["SuggestedForwardEulerTimestep"] = 0.001;
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamicfink_noble_giles_model_2008FromCellML)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamicfink_noble_giles_model_2008FromCellML(pSolver, pStimulus);
    }
    
}

