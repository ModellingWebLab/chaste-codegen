//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: decker_2009
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on Wed Sep 11 11:15:14 2019
//! 
//! <autogenerated>

#include "decker_2009.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Dynamicdecker_2009FromCellML::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_offset = 0.0; // millisecond
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_duration = 0.5; // millisecond
        const double var_membrane__stim_amplitude =  -80.0; // uA_per_uF
        const double var_chaste_interface__membrane__stim_amplitude_converter = var_membrane__stim_amplitude; // uA_per_uF
        const double var_chaste_interface__membrane__stim_amplitude = var_chaste_interface__membrane__stim_amplitude_converter * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double Dynamicdecker_2009FromCellML::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    
    Dynamicdecker_2009FromCellML::Dynamicdecker_2009FromCellML(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                48,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamicdecker_2009FromCellML>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
    }
    
    Dynamicdecker_2009FromCellML::~Dynamicdecker_2009FromCellML()
    {
    }
    
    double Dynamicdecker_2009FromCellML::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.472528
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: millimolar; Initial value: 7.09945e-5
        double var_chaste_interface__IKs__O1 = rY[17];
        // Units: dimensionless; Initial value: 1.051906959485266e-5
        double var_chaste_interface__IKs__O2 = rY[18];
        // Units: dimensionless; Initial value: 2.372219883411999e-6
        double var_chaste_interface__ICaL__O = rY[20];
        // Units: dimensionless; Initial value: 2.27419494597377e-5
        double var_chaste_interface__ICaL__O_star = rY[22];
        // Units: dimensionless; Initial value: 1.350122566369778e-15
        double var_chaste_interface__INa_m_gate__m = rY[27];
        // Units: dimensionless; Initial value: 0.001022252813581797
        double var_chaste_interface__INa_h_gate__h = rY[28];
        // Units: dimensionless; Initial value: 0.9913109066867
        double var_chaste_interface__INa_j_gate__j = rY[29];
        // Units: dimensionless; Initial value: 0.9970771239754529
        double var_chaste_interface__INaL_mL_gate__mL = rY[30];
        // Units: dimensionless; Initial value: 0.001022252813581797
        double var_chaste_interface__INaL_hL_gate__hL = rY[31];
        // Units: dimensionless; Initial value: 0.3593255076983574
        double var_chaste_interface__IKr_xr_gate__xr = rY[32];
        // Units: dimensionless; Initial value: 1.235996442041028e-8
        double var_chaste_interface__Ito1_a_gate__a = rY[33];
        // Units: dimensionless; Initial value: 1.773318268499115e-5
        double var_chaste_interface__Ito1_i1f_gate__i1f = rY[34];
        // Units: dimensionless; Initial value: 0.9979722
        double var_chaste_interface__Ito1_i1s_gate__i1s = rY[35];
        // Units: dimensionless; Initial value: 0.9874435
        double var_chaste_interface__Ito2_i2f_gate__i2f = rY[36];
        // Units: dimensionless; Initial value: 0.9960352
        double var_chaste_interface__Irel__Irel = rY[37];
        // Units: mM_per_ms; Initial value: 0.00107332
        double var_chaste_interface__Ca__Ca_ss_sr = rY[40];
        // Units: mM; Initial value: 9.04757e-5
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[41];
        // Units: mM; Initial value: 9.61545e-5
        double var_chaste_interface__Na__Na_i = rY[42];
        // Units: mM; Initial value: 6.935575
        double var_chaste_interface__Na__Na_ss_sr = rY[43];
        // Units: mM; Initial value: 6.935607
        double var_chaste_interface__Cl__Cl_i = rY[44];
        // Units: mM; Initial value: 20.26842
        double var_chaste_interface__K__K_i = rY[46];
        // Units: mM; Initial value: 145.5689
        
        const double var_model_parameters__F = 96487.0; // C_per_mole
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__K_o = 5.4000000000000004; // mM
        const double var_model_parameters__Ca_o = 1.8; // mM
        const double var_model_parameters__Na_o = 140.0; // mM
        const double var_model_parameters__Cl_o = 100.0; // mM
        const double var_chaste_interface__membrane__i_Stim = 0.0;
        const double var_membrane__i_Stim_converter = var_chaste_interface__membrane__i_Stim; // uA_per_cm2
        const double var_membrane__chaste_interface__chaste_membrane_capacitance = HeartConfig::Instance()->GetCapacitance(); // uF_per_cm2
        const double var_membrane__i_Stim = var_membrane__i_Stim_converter / var_membrane__chaste_interface__chaste_membrane_capacitance; // uA_per_uF
        const double var_ICaL__T = var_model_parameters__T; // kelvin
        const double var_ICaL__Ca_o = var_model_parameters__Ca_o; // mM
        const double var_ICaL__R = var_model_parameters__R; // J_per_kmole_K
        const double var_ICaL__gamma_Cao = 0.34100000000000003; // dimensionless
        const double var_ICaL__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_ICaL__gamma_Cai = 1.0; // dimensionless
        const double var_ICaL__F = var_model_parameters__F; // C_per_mole
        const double var_ICaL__Ca_ss_CaL = var_chaste_interface__Ca__Ca_ss_CaL; // mM
        const double var_ICaL__PCa = 0.00015552; // L_per_F_ms
        const double var_ICaL__ICaL_max = (((var_ICaL__PCa * 4.0 * var_ICaL__Vm * pow(var_ICaL__F, 2.0)) / (var_ICaL__R * var_ICaL__T)) * ((var_ICaL__gamma_Cai * var_ICaL__Ca_ss_CaL * exp((2.0 * var_ICaL__Vm * var_ICaL__F) / (var_ICaL__R * var_ICaL__T))) - (var_ICaL__gamma_Cao * var_ICaL__Ca_o))) / (exp((2.0 * var_ICaL__Vm * var_ICaL__F) / (var_ICaL__R * var_ICaL__T)) - 1.0); // uA_per_uF
        const double var_ICaL__O = var_chaste_interface__ICaL__O; // dimensionless
        const double var_ICaL__O_star = var_chaste_interface__ICaL__O_star; // dimensionless
        const double var_ICaL__ICaL = var_ICaL__ICaL_max * (var_ICaL__O + var_ICaL__O_star); // uA_per_uF
        const double var_membrane__ICaL = var_ICaL__ICaL; // uA_per_uF
        const double var_INaCa__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_INaCa__T = var_model_parameters__T; // kelvin
        const double var_INaCa__Na_ss_sr = var_chaste_interface__Na__Na_ss_sr; // mM
        const double var_INaCa__Ca_ss_sr = var_chaste_interface__Ca__Ca_ss_sr; // mM
        const double var_INaCa__R = var_model_parameters__R; // J_per_kmole_K
        const double var_INaCa__Na_o = var_model_parameters__Na_o; // mM
        const double var_INaCa__Vmax = 4.5; // uA_per_uF
        const double var_INaCa__F = var_model_parameters__F; // C_per_mole
        const double var_INaCa__Ca_o = var_model_parameters__Ca_o; // mM
        const double var_INaCa__eta = 0.27000000000000002; // dimensionless
        const double var_INaCa__num_ss = 0.20000000000000001 * var_INaCa__Vmax * ((pow(var_INaCa__Na_ss_sr, 3.0) * var_INaCa__Ca_o * exp((var_INaCa__eta * var_INaCa__Vm * var_INaCa__F) / (var_INaCa__R * var_INaCa__T))) - (pow(var_INaCa__Na_o, 3.0) * var_INaCa__Ca_ss_sr * exp(((var_INaCa__eta - 1.0) * var_INaCa__Vm * var_INaCa__F) / (var_INaCa__R * var_INaCa__T)))); // mM4_uA_per_uF
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__denom_ss_4 = (var_INaCa__KmCai * pow(var_INaCa__Na_o, 3.0) * (1.0 + pow(var_INaCa__Na_ss_sr / var_INaCa__KmNai, 3.0))) + (pow(var_INaCa__Na_ss_sr, 3.0) * var_INaCa__Ca_o) + (pow(var_INaCa__Na_o, 3.0) * var_INaCa__Ca_ss_sr); // mM4
        const double var_INaCa__ksat = 0.32000000000000001; // dimensionless
        const double var_INaCa__denom_ss_2 = 1.0 + (var_INaCa__ksat * exp(((var_INaCa__eta - 1.0) * var_INaCa__Vm * var_INaCa__F) / (var_INaCa__R * var_INaCa__T))); // dimensionless
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__denom_ss_3 = (var_INaCa__KmCao * pow(var_INaCa__Na_ss_sr, 3.0)) + (pow(var_INaCa__KmNao, 3.0) * var_INaCa__Ca_ss_sr) + (pow(var_INaCa__KmNai, 3.0) * var_INaCa__Ca_o * (1.0 + (var_INaCa__Ca_ss_sr / var_INaCa__KmCai))); // mM4
        const double var_INaCa__KmCa_act = 0.000125; // mM
        const double var_INaCa__denom_ss_1 = 1.0 + pow(var_INaCa__KmCa_act / var_INaCa__Ca_ss_sr, 2.0); // dimensionless
        const double var_INaCa__INaCa_ss_sr = var_INaCa__num_ss / (var_INaCa__denom_ss_1 * var_INaCa__denom_ss_2 * (var_INaCa__denom_ss_3 + var_INaCa__denom_ss_4)); // uA_per_uF
        const double var_membrane__INaCa_ss_sr = var_INaCa__INaCa_ss_sr; // uA_per_uF
        const double var_IpCa__KmpCa = 0.00050000000000000001; // mM
        const double var_IpCa__gpCa = 0.057500000000000002; // uA_per_uF
        const double var_IpCa__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_IpCa__IpCa = (var_IpCa__gpCa * var_IpCa__Ca_i) / (var_IpCa__KmpCa + var_IpCa__Ca_i); // uA_per_uF
        const double var_membrane__IpCa = var_IpCa__IpCa; // uA_per_uF
        const double var_ICab__PCab = 1.9950840000000001e-07; // L_per_F_ms
        const double var_ICab__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_ICab__F = var_model_parameters__F; // C_per_mole
        const double var_ICab__Ca_o = var_model_parameters__Ca_o; // mM
        const double var_ICab__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_ICab__T = var_model_parameters__T; // kelvin
        const double var_ICab__gamma_Ca_o = 0.34100000000000003; // dimensionless
        const double var_ICab__R = var_model_parameters__R; // J_per_kmole_K
        const double var_ICab__gamma_Ca_i = 1.0; // dimensionless
        const double var_ICab__ICab = (((var_ICab__PCab * 4.0 * var_ICab__Vm * pow(var_ICab__F, 2.0)) / (var_ICab__R * var_ICab__T)) * ((var_ICab__gamma_Ca_i * var_ICab__Ca_i * exp((2.0 * var_ICab__Vm * var_ICab__F) / (var_ICab__R * var_ICab__T))) - (var_ICab__gamma_Ca_o * var_ICab__Ca_o))) / (exp((2.0 * var_ICab__Vm * var_ICab__F) / (var_ICab__R * var_ICab__T)) - 1.0); // uA_per_uF
        const double var_membrane__ICab = var_ICab__ICab; // uA_per_uF
        const double var_INaCa__denom_2 = 1.0 + (var_INaCa__ksat * exp(((var_INaCa__eta - 1.0) * var_INaCa__Vm * var_INaCa__F) / (var_INaCa__R * var_INaCa__T))); // dimensionless
        const double var_INaCa__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INaCa__denom_3 = (var_INaCa__KmCao * pow(var_INaCa__Na_i, 3.0)) + (pow(var_INaCa__KmNao, 3.0) * var_INaCa__Ca_i) + (pow(var_INaCa__KmNai, 3.0) * var_INaCa__Ca_o * (1.0 + (var_INaCa__Ca_i / var_INaCa__KmCai))); // mM4
        const double var_INaCa__denom_1 = 1.0 + pow(var_INaCa__KmCa_act / var_INaCa__Ca_i, 2.0); // dimensionless
        const double var_INaCa__num = 0.80000000000000004 * var_INaCa__Vmax * ((pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o * exp((var_INaCa__eta * var_INaCa__Vm * var_INaCa__F) / (var_INaCa__R * var_INaCa__T))) - (pow(var_INaCa__Na_o, 3.0) * var_INaCa__Ca_i * exp(((var_INaCa__eta - 1.0) * var_INaCa__Vm * var_INaCa__F) / (var_INaCa__R * var_INaCa__T)))); // mM4_uA_per_uF
        const double var_INaCa__denom_4 = (var_INaCa__KmCai * pow(var_INaCa__Na_o, 3.0) * (1.0 + pow(var_INaCa__Na_i / var_INaCa__KmNai, 3.0))) + (pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o) + (pow(var_INaCa__Na_o, 3.0) * var_INaCa__Ca_i); // mM4
        const double var_INaCa__INaCa = var_INaCa__num / (var_INaCa__denom_1 * var_INaCa__denom_2 * (var_INaCa__denom_3 + var_INaCa__denom_4)); // uA_per_uF
        const double var_membrane__INaCa = var_INaCa__INaCa; // uA_per_uF
        const double var_membrane__caiont = (var_membrane__ICaL + var_membrane__ICab + var_membrane__IpCa) - (2.0 * (var_membrane__INaCa + var_membrane__INaCa_ss_sr)); // uA_per_uF
        const double var_INa__g_Na = 9.0749999999999993; // mS_per_uF
        const double var_INa__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_reversal_potentials__T = var_model_parameters__T; // kelvin
        const double var_reversal_potentials__R = var_model_parameters__R; // J_per_kmole_K
        const double var_reversal_potentials__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_reversal_potentials__Na_o = var_model_parameters__Na_o; // mM
        const double var_reversal_potentials__F = var_model_parameters__F; // C_per_mole
        const double var_reversal_potentials__ENa = ((var_reversal_potentials__R * var_reversal_potentials__T) / var_reversal_potentials__F) * log(var_reversal_potentials__Na_o / var_reversal_potentials__Na_i); // mV
        const double var_INa__ENa = var_reversal_potentials__ENa; // mV
        const double var_INa__m = var_chaste_interface__INa_m_gate__m; // dimensionless
        const double var_INa__j = var_chaste_interface__INa_j_gate__j; // dimensionless
        const double var_INa__h = var_chaste_interface__INa_h_gate__h; // dimensionless
        const double var_INa__INa = var_INa__g_Na * pow(var_INa__m, 3.0) * var_INa__h * var_INa__j * (var_INa__Vm - var_INa__ENa); // uA_per_uF
        const double var_membrane__INa = var_INa__INa; // uA_per_uF
        const double var_INab__PNab = 3.2000000000000001e-09; // L_per_F_ms
        const double var_INab__Na_o = var_model_parameters__Na_o; // mM
        const double var_INab__F = var_model_parameters__F; // C_per_mole
        const double var_INab__R = var_model_parameters__R; // J_per_kmole_K
        const double var_INab__T = var_model_parameters__T; // kelvin
        const double var_INab__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_INab__phi = (var_INab__F * var_INab__Vm) / (var_INab__R * var_INab__T); // dimensionless
        const double var_INab__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INab__INab = (var_INab__F * var_INab__PNab * var_INab__phi * ((var_INab__Na_i * exp(var_INab__phi)) - var_INab__Na_o)) / (exp(var_INab__phi) - 1.0); // uA_per_uF
        const double var_membrane__INab = var_INab__INab; // uA_per_uF
        const double var_INaL__mL = var_chaste_interface__INaL_mL_gate__mL; // dimensionless
        const double var_INaL__ENa = var_reversal_potentials__ENa; // mV
        const double var_INaL__hL = var_chaste_interface__INaL_hL_gate__hL; // dimensionless
        const double var_INaL__gNaL = 0.0064999999999999997; // mS_per_uF
        const double var_INaL__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_INaL__INaL = var_INaL__gNaL * pow(var_INaL__mL, 3.0) * var_INaL__hL * (var_INaL__Vm - var_INaL__ENa); // uA_per_uF
        const double var_membrane__INaL = var_INaL__INaL; // uA_per_uF
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__K_o = var_model_parameters__K_o; // mM
        const double var_INaK__PK = var_INaK__K_o / (var_INaK__K_o + var_INaK__kmko); // dimensionless
        const double var_INaK__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_INaK__F = var_model_parameters__F; // C_per_mole
        const double var_INaK__T = var_model_parameters__T; // kelvin
        const double var_INaK__sigma = 1.0; // dimensionless
        const double var_INaK__R = var_model_parameters__R; // J_per_kmole_K
        const double var_INaK__V_half =  -92.0; // mV
        const double var_INaK__phi = (var_INaK__sigma * (var_INaK__Vm - var_INaK__V_half) * var_INaK__F) / (var_INaK__R * var_INaK__T); // dimensionless
        const double var_INaK__fv = 1.0 / (1.0 + exp(-var_INaK__phi)); // dimensionless
        const double var_INaK__ibarnak = 1.3999999999999999; // uA_per_uF
        const double var_INaK__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INaK__kmnai = 2.6000000000000001; // mM
        const double var_INaK__PNa = pow(var_INaK__Na_i / (var_INaK__Na_i + var_INaK__kmnai), 3.0); // dimensionless
        const double var_INaK__INaK = var_INaK__ibarnak * var_INaK__fv * var_INaK__PK * var_INaK__PNa; // uA_per_uF
        const double var_membrane__INaK = var_INaK__INaK; // uA_per_uF
        const double var_membrane__naiont = var_membrane__INa + (3.0 * (var_membrane__INaCa + var_membrane__INaCa_ss_sr)) + (3.0 * var_membrane__INaK) + var_membrane__INaL + var_membrane__INab; // uA_per_uF
        const double var_reversal_potentials__K_i = var_chaste_interface__K__K_i; // mM
        const double var_reversal_potentials__K_o = var_model_parameters__K_o; // mM
        const double var_reversal_potentials__EK = ((var_reversal_potentials__R * var_reversal_potentials__T) / var_reversal_potentials__F) * log(var_reversal_potentials__K_o / var_reversal_potentials__K_i); // mV
        const double var_Ito1__EK = var_reversal_potentials__EK; // mV
        const double var_Ito1__i1f = var_chaste_interface__Ito1_i1f_gate__i1f; // dimensionless
        const double var_Ito1__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_Ito1__rto1 = exp(var_Ito1__Vm / 550.0); // dimensionless
        const double var_Ito1__i1s = var_chaste_interface__Ito1_i1s_gate__i1s; // dimensionless
        const double var_Ito1__gto1 = 0.4975; // mS_per_uF
        const double var_Ito1__a = var_chaste_interface__Ito1_a_gate__a; // dimensionless
        const double var_Ito1__Ito1 = var_Ito1__gto1 * pow(var_Ito1__a, 3.0) * var_Ito1__i1f * var_Ito1__i1s * var_Ito1__rto1 * (var_Ito1__Vm - var_Ito1__EK); // uA_per_uF
        const double var_membrane__Ito1 = var_Ito1__Ito1; // uA_per_uF
        const double var_IKr__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_IKr_r_gate__Vm = var_IKr__Vm; // mV
        const double var_IKr_r_gate__r = 1.0 / (1.0 + exp((var_IKr_r_gate__Vm + 10.0) / 15.4)); // dimensionless
        const double var_IKr__r = var_IKr_r_gate__r; // dimensionless
        const double var_IKr__xr = var_chaste_interface__IKr_xr_gate__xr; // dimensionless
        const double var_IKr__K_o = var_model_parameters__K_o; // mM
        const double var_IKr__gKr_max = 0.013854200000000001; // mS_per_uF
        const double var_IKr__gKr = var_IKr__gKr_max * sqrt(var_IKr__K_o / 5.4000000000000004); // mS_per_uF
        const double var_IKr__EK = var_reversal_potentials__EK; // mV
        const double var_IKr__IKr = var_IKr__gKr * var_IKr__xr * var_IKr__r * (var_IKr__Vm - var_IKr__EK); // uA_per_uF
        const double var_membrane__IKr = var_IKr__IKr; // uA_per_uF
        const double var_IKs__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_IKs__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_IKs__gKs = 0.082600000000000007 * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_IKs__Ca_i, 1.3999999999999999)))); // mS_per_uF
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = ((var_reversal_potentials__R * var_reversal_potentials__T) / var_reversal_potentials__F) * log((var_reversal_potentials__K_o + (var_reversal_potentials__prnak * var_reversal_potentials__Na_o)) / (var_reversal_potentials__K_i + (var_reversal_potentials__prnak * var_reversal_potentials__Na_i))); // mV
        const double var_IKs__EKs = var_reversal_potentials__EKs; // mV
        const double var_IKs__O2 = var_chaste_interface__IKs__O2; // dimensionless
        const double var_IKs__O1 = var_chaste_interface__IKs__O1; // dimensionless
        const double var_IKs__OKs = var_IKs__O1 + var_IKs__O2; // dimensionless
        const double var_IKs__IKs = var_IKs__gKs * var_IKs__OKs * (var_IKs__Vm - var_IKs__EKs); // uA_per_uF
        const double var_membrane__IKs = var_IKs__IKs; // uA_per_uF
        const double var_IKp__gKp = 0.0027599999999999999; // mS_per_uF
        const double var_IKp__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_IKp__Kp = 1.0 / (1.0 + exp((7.4880000000000004 - var_IKp__Vm) / 5.9800000000000004)); // dimensionless
        const double var_IKp__EK = var_reversal_potentials__EK; // mV
        const double var_IKp__IKp = var_IKp__gKp * var_IKp__Kp * (var_IKp__Vm - var_IKp__EK); // uA_per_uF
        const double var_membrane__IKp = var_IKp__IKp; // uA_per_uF
        const double var_IK1__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_IK1_K1_gate__Vm = var_IK1__Vm; // mV
        const double var_IK1__EK = var_reversal_potentials__EK; // mV
        const double var_IK1_K1_gate__EK = var_IK1__EK; // mV
        const double var_IK1_K1_gate__beta_k1 = ((0.49124000000000001 * exp(0.080320000000000003 * ((var_IK1_K1_gate__Vm - var_IK1_K1_gate__EK) + 5.476))) + exp(0.061749999999999999 * ((var_IK1_K1_gate__Vm - var_IK1_K1_gate__EK) - 594.30999999999995))) / (1.0 + exp((-0.51429999999999998) * ((var_IK1_K1_gate__Vm - var_IK1_K1_gate__EK) + 4.7530000000000001))); // dimensionless
        const double var_IK1_K1_gate__alpha_k1 = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_IK1_K1_gate__Vm - var_IK1_K1_gate__EK) - 59.215000000000003))); // dimensionless
        const double var_IK1_K1_gate__K1 = var_IK1_K1_gate__alpha_k1 / (var_IK1_K1_gate__alpha_k1 + var_IK1_K1_gate__beta_k1); // dimensionless
        const double var_IK1__K1 = var_IK1_K1_gate__K1; // dimensionless
        const double var_IK1__K_o = var_model_parameters__K_o; // mM
        const double var_IK1__gK1 = 0.5 * sqrt(var_IK1__K_o / 5.4000000000000004); // mS_per_uF
        const double var_IK1__IK1 = var_IK1__gK1 * var_IK1__K1 * (var_IK1__Vm - var_IK1__EK); // uA_per_uF
        const double var_membrane__IK1 = var_IK1__IK1; // uA_per_uF
        const double var_membrane__kiont = var_membrane__IKr + var_membrane__IKs + var_membrane__IK1 + var_membrane__IKp + ((-2.0) * var_membrane__INaK) + var_membrane__Ito1 + var_membrane__i_Stim; // uA_per_uF
        const double var_reversal_potentials__Cl_o = var_model_parameters__Cl_o; // mM
        const double var_reversal_potentials__Cl_i = var_chaste_interface__Cl__Cl_i; // mM
        const double var_reversal_potentials__ECl = (((-var_reversal_potentials__R) * var_reversal_potentials__T) / var_reversal_potentials__F) * log(var_reversal_potentials__Cl_o / var_reversal_potentials__Cl_i); // mV
        const double var_IClb__ECl = var_reversal_potentials__ECl; // mV
        const double var_IClb__gClb = 0.00022499999999999999; // mS_per_uF
        const double var_IClb__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_IClb__IClb = var_IClb__gClb * (var_IClb__Vm - var_IClb__ECl); // uA_per_uF
        const double var_membrane__IClb = var_IClb__IClb; // uA_per_uF
        const double var_Ito2__i2f = var_chaste_interface__Ito2_i2f_gate__i2f; // dimensionless
        const double var_Ito2__Irel = var_chaste_interface__Irel__Irel; // mM_per_ms
        const double var_Ito2__kCa_ito2 = 0.40000000000000002; // mM_per_ms
        const double var_Ito2__KCa_ito2 = 1.0 - (1.0 / (1.0 + pow(var_Ito2__Irel / var_Ito2__kCa_ito2, 2.0))); // dimensionless
        const double var_Ito2__F = var_model_parameters__F; // C_per_mole
        const double var_Ito2__zCl =  -1.0; // dimensionless
        const double var_Ito2__T = var_model_parameters__T; // kelvin
        const double var_Ito2__Cl_o = var_model_parameters__Cl_o; // mM
        const double var_Ito2__Cl_i = var_chaste_interface__Cl__Cl_i; // mM
        const double var_Ito2__R = var_model_parameters__R; // J_per_kmole_K
        const double var_Ito2__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_Ito2__PCl = 8.9999999999999996e-07; // L_per_F_ms
        const double var_Ito2__Ito2_max = (((var_Ito2__PCl * pow(var_Ito2__zCl, 2.0) * var_Ito2__Vm * pow(var_Ito2__F, 2.0)) / (var_Ito2__R * var_Ito2__T)) * (var_Ito2__Cl_i - (var_Ito2__Cl_o * exp((var_Ito2__Vm * var_Ito2__F) / (var_Ito2__R * var_Ito2__T))))) / (1.0 - exp((var_Ito2__Vm * var_Ito2__F) / (var_Ito2__R * var_Ito2__T))); // uA_per_uF
        const double var_Ito2__Ito2 = var_Ito2__Ito2_max * var_Ito2__i2f * var_Ito2__KCa_ito2; // uA_per_uF
        const double var_membrane__Ito2 = var_Ito2__Ito2; // uA_per_uF
        const double var_membrane__clont = var_membrane__IClb + var_membrane__Ito2; // uA_per_uF
        const double var_chaste_interface__membrane__naiont = var_membrane__naiont; // uA_per_uF
        const double var_chaste_interface__membrane__clont = var_membrane__clont; // uA_per_uF
        const double var_chaste_interface__membrane__caiont = var_membrane__caiont; // uA_per_uF
        const double var_chaste_interface__membrane__kiont = var_membrane__kiont; // uA_per_uF
        const double var_chaste_interface__i_ionic = (var_chaste_interface__membrane__naiont + var_chaste_interface__membrane__kiont + var_chaste_interface__membrane__caiont + var_chaste_interface__membrane__clont) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamicdecker_2009FromCellML::EvaluateYDerivatives(double var_chaste_interface__environment__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.472528
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: millimolar; Initial value: 7.09945e-5
        double var_chaste_interface__IKs__C1 = rY[2];
        // Units: dimensionless; Initial value: 0.476653873938053
        double var_chaste_interface__IKs__C2 = rY[3];
        // Units: dimensionless; Initial value: 0.2551771850026437
        double var_chaste_interface__IKs__C3 = rY[4];
        // Units: dimensionless; Initial value: 0.05122852186842027
        double var_chaste_interface__IKs__C4 = rY[5];
        // Units: dimensionless; Initial value: 0.004570874421666423
        double var_chaste_interface__IKs__C5 = rY[6];
        // Units: dimensionless; Initial value: 0.0001529389211563687
        double var_chaste_interface__IKs__C6 = rY[7];
        // Units: dimensionless; Initial value: 0.1328281770413747
        double var_chaste_interface__IKs__C7 = rY[8];
        // Units: dimensionless; Initial value: 0.05333228495514583
        double var_chaste_interface__IKs__C8 = rY[9];
        // Units: dimensionless; Initial value: 0.007137874613383642
        double var_chaste_interface__IKs__C9 = rY[10];
        // Units: dimensionless; Initial value: 0.0003184390970637536
        double var_chaste_interface__IKs__C10 = rY[11];
        // Units: dimensionless; Initial value: 0.01388061042363991
        double var_chaste_interface__IKs__C11 = rY[12];
        // Units: dimensionless; Initial value: 0.003715500164470033
        double var_chaste_interface__IKs__C12 = rY[13];
        // Units: dimensionless; Initial value: 0.0002486371465457659
        double var_chaste_interface__IKs__C13 = rY[14];
        // Units: dimensionless; Initial value: 0.0006446803014431032
        double var_chaste_interface__IKs__C14 = rY[15];
        // Units: dimensionless; Initial value: 8.628258026770862e-5
        double var_chaste_interface__IKs__C15 = rY[16];
        // Units: dimensionless; Initial value: 1.122823524761588e-5
        double var_chaste_interface__IKs__O1 = rY[17];
        // Units: dimensionless; Initial value: 1.051906959485266e-5
        double var_chaste_interface__IKs__O2 = rY[18];
        // Units: dimensionless; Initial value: 2.372219883411999e-6
        double var_chaste_interface__ICaL__C = rY[19];
        // Units: dimensionless; Initial value: 0.9999613782488198
        double var_chaste_interface__ICaL__O = rY[20];
        // Units: dimensionless; Initial value: 2.27419494597377e-5
        double var_chaste_interface__ICaL__C_star = rY[21];
        // Units: dimensionless; Initial value: 5.936477396599124e-11
        double var_chaste_interface__ICaL__O_star = rY[22];
        // Units: dimensionless; Initial value: 1.350122566369778e-15
        double var_chaste_interface__ICaL__CI = rY[23];
        // Units: dimensionless; Initial value: 1.587938121237188e-5
        double var_chaste_interface__ICaL__OI = rY[24];
        // Units: dimensionless; Initial value: 3.611420243201921e-10
        double var_chaste_interface__ICaL__CI_star = rY[25];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__ICaL__OI_star = rY[26];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__INa_m_gate__m = rY[27];
        // Units: dimensionless; Initial value: 0.001022252813581797
        double var_chaste_interface__INa_h_gate__h = rY[28];
        // Units: dimensionless; Initial value: 0.9913109066867
        double var_chaste_interface__INa_j_gate__j = rY[29];
        // Units: dimensionless; Initial value: 0.9970771239754529
        double var_chaste_interface__INaL_mL_gate__mL = rY[30];
        // Units: dimensionless; Initial value: 0.001022252813581797
        double var_chaste_interface__INaL_hL_gate__hL = rY[31];
        // Units: dimensionless; Initial value: 0.3593255076983574
        double var_chaste_interface__IKr_xr_gate__xr = rY[32];
        // Units: dimensionless; Initial value: 1.235996442041028e-8
        double var_chaste_interface__Ito1_a_gate__a = rY[33];
        // Units: dimensionless; Initial value: 1.773318268499115e-5
        double var_chaste_interface__Ito1_i1f_gate__i1f = rY[34];
        // Units: dimensionless; Initial value: 0.9979722
        double var_chaste_interface__Ito1_i1s_gate__i1s = rY[35];
        // Units: dimensionless; Initial value: 0.9874435
        double var_chaste_interface__Ito2_i2f_gate__i2f = rY[36];
        // Units: dimensionless; Initial value: 0.9960352
        double var_chaste_interface__Irel__Irel = rY[37];
        // Units: mM_per_ms; Initial value: 0.00107332
        double var_chaste_interface__Ca__Ca_JSR = rY[38];
        // Units: mM; Initial value: 0.917692717
        double var_chaste_interface__Ca__Ca_NSR = rY[39];
        // Units: mM; Initial value: 0.929835335
        double var_chaste_interface__Ca__Ca_ss_sr = rY[40];
        // Units: mM; Initial value: 9.04757e-5
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[41];
        // Units: mM; Initial value: 9.61545e-5
        double var_chaste_interface__Na__Na_i = rY[42];
        // Units: mM; Initial value: 6.935575
        double var_chaste_interface__Na__Na_ss_sr = rY[43];
        // Units: mM; Initial value: 6.935607
        double var_chaste_interface__Cl__Cl_i = rY[44];
        // Units: mM; Initial value: 20.26842
        double var_chaste_interface__Cl__Cl_ss = rY[45];
        // Units: mM; Initial value: 20.26842
        double var_chaste_interface__K__K_i = rY[46];
        // Units: mM; Initial value: 145.5689
        double var_chaste_interface__CaMK_active__CaMK_trap = rY[47];
        // Units: dimensionless; Initial value: 0.0018861341
        
        
        // Mathematics
        double d_dt_chaste_interface__membrane__Vm;
        const double var_model_parameters__F = 96487.0; // C_per_mole
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__K_o = 5.4000000000000004; // mM
        const double var_model_parameters__Ca_o = 1.8; // mM
        const double var_model_parameters__Na_o = 140.0; // mM
        const double var_model_parameters__Cl_o = 100.0; // mM
        const double var_cell_geometry__a = 0.0011000000000000001; // cm
        const double var_cell_geometry__l = 0.01; // cm
        const double var_cell_geometry__vcell = 1000.0 * M_PI * var_cell_geometry__a * var_cell_geometry__a * var_cell_geometry__l; // uL
        const double var_cell_geometry__Vmyo = var_cell_geometry__vcell * 0.67800000000000005; // uL
        const double var_cell_geometry__Vnsr = var_cell_geometry__vcell * 0.055199999999999999; // uL
        const double var_cell_geometry__Vjsr = var_cell_geometry__vcell * 0.0047999999999999996; // uL
        const double var_cell_geometry__Vss_sr = var_cell_geometry__vcell * 0.02; // uL
        const double var_cell_geometry__Vss_CaL = var_cell_geometry__vcell * 0.002; // uL
        const double var_cell_geometry__ageo = (2.0 * M_PI * var_cell_geometry__a * var_cell_geometry__a) + (2.0 * M_PI * var_cell_geometry__a * var_cell_geometry__l); // cm2
        const double var_cell_geometry__Acap = var_cell_geometry__ageo * 2.0; // cm2
        const double var_cell_geometry__F = var_model_parameters__F; // C_per_mole
        const double var_cell_geometry__AF = (1.0 * 1.0 * var_cell_geometry__Acap) / (var_cell_geometry__F * 1.0); // uF_mole_per_C
        const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double var_ICaL__T = var_model_parameters__T; // kelvin
        const double var_ICaL__Ca_o = var_model_parameters__Ca_o; // mM
        const double var_ICaL__R = var_model_parameters__R; // J_per_kmole_K
        const double var_ICaL__gamma_Cao = 0.34100000000000003; // dimensionless
        const double var_ICaL__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_ICaL__gamma_Cai = 1.0; // dimensionless
        const double var_ICaL__F = var_model_parameters__F; // C_per_mole
        const double var_ICaL__Ca_ss_CaL = var_chaste_interface__Ca__Ca_ss_CaL; // mM
        const double var_ICaL__PCa = 0.00015552; // L_per_F_ms
        const double var_ICaL__ICaL_max = (((var_ICaL__PCa * 4.0 * var_ICaL__Vm * pow(var_ICaL__F, 2.0)) / (var_ICaL__R * var_ICaL__T)) * ((var_ICaL__gamma_Cai * var_ICaL__Ca_ss_CaL * exp((2.0 * var_ICaL__Vm * var_ICaL__F) / (var_ICaL__R * var_ICaL__T))) - (var_ICaL__gamma_Cao * var_ICaL__Ca_o))) / (exp((2.0 * var_ICaL__Vm * var_ICaL__F) / (var_ICaL__R * var_ICaL__T)) - 1.0); // uA_per_uF
        const double var_ICaL__O = var_chaste_interface__ICaL__O; // dimensionless
        const double var_ICaL__O_star = var_chaste_interface__ICaL__O_star; // dimensionless
        const double var_ICaL__ICaL = var_ICaL__ICaL_max * (var_ICaL__O + var_ICaL__O_star); // uA_per_uF
        const double var_INaCa__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_INaCa__T = var_model_parameters__T; // kelvin
        const double var_INaCa__Na_ss_sr = var_chaste_interface__Na__Na_ss_sr; // mM
        const double var_INaCa__Ca_ss_sr = var_chaste_interface__Ca__Ca_ss_sr; // mM
        const double var_INaCa__R = var_model_parameters__R; // J_per_kmole_K
        const double var_INaCa__Na_o = var_model_parameters__Na_o; // mM
        const double var_INaCa__Vmax = 4.5; // uA_per_uF
        const double var_INaCa__F = var_model_parameters__F; // C_per_mole
        const double var_INaCa__Ca_o = var_model_parameters__Ca_o; // mM
        const double var_INaCa__eta = 0.27000000000000002; // dimensionless
        const double var_INaCa__num_ss = 0.20000000000000001 * var_INaCa__Vmax * ((pow(var_INaCa__Na_ss_sr, 3.0) * var_INaCa__Ca_o * exp((var_INaCa__eta * var_INaCa__Vm * var_INaCa__F) / (var_INaCa__R * var_INaCa__T))) - (pow(var_INaCa__Na_o, 3.0) * var_INaCa__Ca_ss_sr * exp(((var_INaCa__eta - 1.0) * var_INaCa__Vm * var_INaCa__F) / (var_INaCa__R * var_INaCa__T)))); // mM4_uA_per_uF
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__denom_ss_4 = (var_INaCa__KmCai * pow(var_INaCa__Na_o, 3.0) * (1.0 + pow(var_INaCa__Na_ss_sr / var_INaCa__KmNai, 3.0))) + (pow(var_INaCa__Na_ss_sr, 3.0) * var_INaCa__Ca_o) + (pow(var_INaCa__Na_o, 3.0) * var_INaCa__Ca_ss_sr); // mM4
        const double var_INaCa__ksat = 0.32000000000000001; // dimensionless
        const double var_INaCa__denom_ss_2 = 1.0 + (var_INaCa__ksat * exp(((var_INaCa__eta - 1.0) * var_INaCa__Vm * var_INaCa__F) / (var_INaCa__R * var_INaCa__T))); // dimensionless
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__denom_ss_3 = (var_INaCa__KmCao * pow(var_INaCa__Na_ss_sr, 3.0)) + (pow(var_INaCa__KmNao, 3.0) * var_INaCa__Ca_ss_sr) + (pow(var_INaCa__KmNai, 3.0) * var_INaCa__Ca_o * (1.0 + (var_INaCa__Ca_ss_sr / var_INaCa__KmCai))); // mM4
        const double var_INaCa__KmCa_act = 0.000125; // mM
        const double var_INaCa__denom_ss_1 = 1.0 + pow(var_INaCa__KmCa_act / var_INaCa__Ca_ss_sr, 2.0); // dimensionless
        const double var_INaCa__INaCa_ss_sr = var_INaCa__num_ss / (var_INaCa__denom_ss_1 * var_INaCa__denom_ss_2 * (var_INaCa__denom_ss_3 + var_INaCa__denom_ss_4)); // uA_per_uF
        const double var_IpCa__KmpCa = 0.00050000000000000001; // mM
        const double var_IpCa__gpCa = 0.057500000000000002; // uA_per_uF
        const double var_IpCa__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_IpCa__IpCa = (var_IpCa__gpCa * var_IpCa__Ca_i) / (var_IpCa__KmpCa + var_IpCa__Ca_i); // uA_per_uF
        const double var_ICab__PCab = 1.9950840000000001e-07; // L_per_F_ms
        const double var_ICab__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_ICab__F = var_model_parameters__F; // C_per_mole
        const double var_ICab__Ca_o = var_model_parameters__Ca_o; // mM
        const double var_ICab__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_ICab__T = var_model_parameters__T; // kelvin
        const double var_ICab__gamma_Ca_o = 0.34100000000000003; // dimensionless
        const double var_ICab__R = var_model_parameters__R; // J_per_kmole_K
        const double var_ICab__gamma_Ca_i = 1.0; // dimensionless
        const double var_ICab__ICab = (((var_ICab__PCab * 4.0 * var_ICab__Vm * pow(var_ICab__F, 2.0)) / (var_ICab__R * var_ICab__T)) * ((var_ICab__gamma_Ca_i * var_ICab__Ca_i * exp((2.0 * var_ICab__Vm * var_ICab__F) / (var_ICab__R * var_ICab__T))) - (var_ICab__gamma_Ca_o * var_ICab__Ca_o))) / (exp((2.0 * var_ICab__Vm * var_ICab__F) / (var_ICab__R * var_ICab__T)) - 1.0); // uA_per_uF
        const double var_INaCa__denom_2 = 1.0 + (var_INaCa__ksat * exp(((var_INaCa__eta - 1.0) * var_INaCa__Vm * var_INaCa__F) / (var_INaCa__R * var_INaCa__T))); // dimensionless
        const double var_INaCa__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INaCa__denom_3 = (var_INaCa__KmCao * pow(var_INaCa__Na_i, 3.0)) + (pow(var_INaCa__KmNao, 3.0) * var_INaCa__Ca_i) + (pow(var_INaCa__KmNai, 3.0) * var_INaCa__Ca_o * (1.0 + (var_INaCa__Ca_i / var_INaCa__KmCai))); // mM4
        const double var_INaCa__denom_1 = 1.0 + pow(var_INaCa__KmCa_act / var_INaCa__Ca_i, 2.0); // dimensionless
        const double var_INaCa__num = 0.80000000000000004 * var_INaCa__Vmax * ((pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o * exp((var_INaCa__eta * var_INaCa__Vm * var_INaCa__F) / (var_INaCa__R * var_INaCa__T))) - (pow(var_INaCa__Na_o, 3.0) * var_INaCa__Ca_i * exp(((var_INaCa__eta - 1.0) * var_INaCa__Vm * var_INaCa__F) / (var_INaCa__R * var_INaCa__T)))); // mM4_uA_per_uF
        const double var_INaCa__denom_4 = (var_INaCa__KmCai * pow(var_INaCa__Na_o, 3.0) * (1.0 + pow(var_INaCa__Na_i / var_INaCa__KmNai, 3.0))) + (pow(var_INaCa__Na_i, 3.0) * var_INaCa__Ca_o) + (pow(var_INaCa__Na_o, 3.0) * var_INaCa__Ca_i); // mM4
        const double var_INaCa__INaCa = var_INaCa__num / (var_INaCa__denom_1 * var_INaCa__denom_2 * (var_INaCa__denom_3 + var_INaCa__denom_4)); // uA_per_uF
        const double var_INa__g_Na = 9.0749999999999993; // mS_per_uF
        const double var_INa__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_reversal_potentials__T = var_model_parameters__T; // kelvin
        const double var_reversal_potentials__R = var_model_parameters__R; // J_per_kmole_K
        const double var_reversal_potentials__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_reversal_potentials__Na_o = var_model_parameters__Na_o; // mM
        const double var_reversal_potentials__F = var_model_parameters__F; // C_per_mole
        const double var_reversal_potentials__ENa = ((var_reversal_potentials__R * var_reversal_potentials__T) / var_reversal_potentials__F) * log(var_reversal_potentials__Na_o / var_reversal_potentials__Na_i); // mV
        const double var_INa__ENa = var_reversal_potentials__ENa; // mV
        const double var_INa__m = var_chaste_interface__INa_m_gate__m; // dimensionless
        const double var_INa__j = var_chaste_interface__INa_j_gate__j; // dimensionless
        const double var_INa__h = var_chaste_interface__INa_h_gate__h; // dimensionless
        const double var_INa__INa = var_INa__g_Na * pow(var_INa__m, 3.0) * var_INa__h * var_INa__j * (var_INa__Vm - var_INa__ENa); // uA_per_uF
        const double var_INab__PNab = 3.2000000000000001e-09; // L_per_F_ms
        const double var_INab__Na_o = var_model_parameters__Na_o; // mM
        const double var_INab__F = var_model_parameters__F; // C_per_mole
        const double var_INab__R = var_model_parameters__R; // J_per_kmole_K
        const double var_INab__T = var_model_parameters__T; // kelvin
        const double var_INab__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_INab__phi = (var_INab__F * var_INab__Vm) / (var_INab__R * var_INab__T); // dimensionless
        const double var_INab__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INab__INab = (var_INab__F * var_INab__PNab * var_INab__phi * ((var_INab__Na_i * exp(var_INab__phi)) - var_INab__Na_o)) / (exp(var_INab__phi) - 1.0); // uA_per_uF
        const double var_INaL__mL = var_chaste_interface__INaL_mL_gate__mL; // dimensionless
        const double var_INaL__ENa = var_reversal_potentials__ENa; // mV
        const double var_INaL__hL = var_chaste_interface__INaL_hL_gate__hL; // dimensionless
        const double var_INaL__gNaL = 0.0064999999999999997; // mS_per_uF
        const double var_INaL__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_INaL__INaL = var_INaL__gNaL * pow(var_INaL__mL, 3.0) * var_INaL__hL * (var_INaL__Vm - var_INaL__ENa); // uA_per_uF
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__K_o = var_model_parameters__K_o; // mM
        const double var_INaK__PK = var_INaK__K_o / (var_INaK__K_o + var_INaK__kmko); // dimensionless
        const double var_INaK__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_INaK__F = var_model_parameters__F; // C_per_mole
        const double var_INaK__T = var_model_parameters__T; // kelvin
        const double var_INaK__sigma = 1.0; // dimensionless
        const double var_INaK__R = var_model_parameters__R; // J_per_kmole_K
        const double var_INaK__V_half =  -92.0; // mV
        const double var_INaK__phi = (var_INaK__sigma * (var_INaK__Vm - var_INaK__V_half) * var_INaK__F) / (var_INaK__R * var_INaK__T); // dimensionless
        const double var_INaK__fv = 1.0 / (1.0 + exp(-var_INaK__phi)); // dimensionless
        const double var_INaK__ibarnak = 1.3999999999999999; // uA_per_uF
        const double var_INaK__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_INaK__kmnai = 2.6000000000000001; // mM
        const double var_INaK__PNa = pow(var_INaK__Na_i / (var_INaK__Na_i + var_INaK__kmnai), 3.0); // dimensionless
        const double var_INaK__INaK = var_INaK__ibarnak * var_INaK__fv * var_INaK__PK * var_INaK__PNa; // uA_per_uF
        const double var_reversal_potentials__K_i = var_chaste_interface__K__K_i; // mM
        const double var_reversal_potentials__K_o = var_model_parameters__K_o; // mM
        const double var_reversal_potentials__EK = ((var_reversal_potentials__R * var_reversal_potentials__T) / var_reversal_potentials__F) * log(var_reversal_potentials__K_o / var_reversal_potentials__K_i); // mV
        const double var_Ito1__EK = var_reversal_potentials__EK; // mV
        const double var_Ito1__i1f = var_chaste_interface__Ito1_i1f_gate__i1f; // dimensionless
        const double var_Ito1__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_Ito1__rto1 = exp(var_Ito1__Vm / 550.0); // dimensionless
        const double var_Ito1__i1s = var_chaste_interface__Ito1_i1s_gate__i1s; // dimensionless
        const double var_Ito1__gto1 = 0.4975; // mS_per_uF
        const double var_Ito1__a = var_chaste_interface__Ito1_a_gate__a; // dimensionless
        const double var_Ito1__Ito1 = var_Ito1__gto1 * pow(var_Ito1__a, 3.0) * var_Ito1__i1f * var_Ito1__i1s * var_Ito1__rto1 * (var_Ito1__Vm - var_Ito1__EK); // uA_per_uF
        const double var_IKr__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_IKr_r_gate__Vm = var_IKr__Vm; // mV
        const double var_IKr_r_gate__r = 1.0 / (1.0 + exp((var_IKr_r_gate__Vm + 10.0) / 15.4)); // dimensionless
        const double var_IKr__r = var_IKr_r_gate__r; // dimensionless
        const double var_IKr__xr = var_chaste_interface__IKr_xr_gate__xr; // dimensionless
        const double var_IKr__K_o = var_model_parameters__K_o; // mM
        const double var_IKr__gKr_max = 0.013854200000000001; // mS_per_uF
        const double var_IKr__gKr = var_IKr__gKr_max * sqrt(var_IKr__K_o / 5.4000000000000004); // mS_per_uF
        const double var_IKr__EK = var_reversal_potentials__EK; // mV
        const double var_IKr__IKr = var_IKr__gKr * var_IKr__xr * var_IKr__r * (var_IKr__Vm - var_IKr__EK); // uA_per_uF
        const double var_IKs__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_IKs__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_IKs__gKs = 0.082600000000000007 * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_IKs__Ca_i, 1.3999999999999999)))); // mS_per_uF
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = ((var_reversal_potentials__R * var_reversal_potentials__T) / var_reversal_potentials__F) * log((var_reversal_potentials__K_o + (var_reversal_potentials__prnak * var_reversal_potentials__Na_o)) / (var_reversal_potentials__K_i + (var_reversal_potentials__prnak * var_reversal_potentials__Na_i))); // mV
        const double var_IKs__EKs = var_reversal_potentials__EKs; // mV
        const double var_IKs__O2 = var_chaste_interface__IKs__O2; // dimensionless
        const double var_IKs__O1 = var_chaste_interface__IKs__O1; // dimensionless
        const double var_IKs__OKs = var_IKs__O1 + var_IKs__O2; // dimensionless
        const double var_IKs__IKs = var_IKs__gKs * var_IKs__OKs * (var_IKs__Vm - var_IKs__EKs); // uA_per_uF
        const double var_IKp__gKp = 0.0027599999999999999; // mS_per_uF
        const double var_IKp__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_IKp__Kp = 1.0 / (1.0 + exp((7.4880000000000004 - var_IKp__Vm) / 5.9800000000000004)); // dimensionless
        const double var_IKp__EK = var_reversal_potentials__EK; // mV
        const double var_IKp__IKp = var_IKp__gKp * var_IKp__Kp * (var_IKp__Vm - var_IKp__EK); // uA_per_uF
        const double var_IK1__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_IK1_K1_gate__Vm = var_IK1__Vm; // mV
        const double var_IK1__EK = var_reversal_potentials__EK; // mV
        const double var_IK1_K1_gate__EK = var_IK1__EK; // mV
        const double var_IK1_K1_gate__beta_k1 = ((0.49124000000000001 * exp(0.080320000000000003 * ((var_IK1_K1_gate__Vm - var_IK1_K1_gate__EK) + 5.476))) + exp(0.061749999999999999 * ((var_IK1_K1_gate__Vm - var_IK1_K1_gate__EK) - 594.30999999999995))) / (1.0 + exp((-0.51429999999999998) * ((var_IK1_K1_gate__Vm - var_IK1_K1_gate__EK) + 4.7530000000000001))); // dimensionless
        const double var_IK1_K1_gate__alpha_k1 = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_IK1_K1_gate__Vm - var_IK1_K1_gate__EK) - 59.215000000000003))); // dimensionless
        const double var_IK1_K1_gate__K1 = var_IK1_K1_gate__alpha_k1 / (var_IK1_K1_gate__alpha_k1 + var_IK1_K1_gate__beta_k1); // dimensionless
        const double var_IK1__K1 = var_IK1_K1_gate__K1; // dimensionless
        const double var_IK1__K_o = var_model_parameters__K_o; // mM
        const double var_IK1__gK1 = 0.5 * sqrt(var_IK1__K_o / 5.4000000000000004); // mS_per_uF
        const double var_IK1__IK1 = var_IK1__gK1 * var_IK1__K1 * (var_IK1__Vm - var_IK1__EK); // uA_per_uF
        const double var_reversal_potentials__Cl_o = var_model_parameters__Cl_o; // mM
        const double var_reversal_potentials__Cl_i = var_chaste_interface__Cl__Cl_i; // mM
        const double var_reversal_potentials__ECl = (((-var_reversal_potentials__R) * var_reversal_potentials__T) / var_reversal_potentials__F) * log(var_reversal_potentials__Cl_o / var_reversal_potentials__Cl_i); // mV
        const double var_IClb__ECl = var_reversal_potentials__ECl; // mV
        const double var_IClb__gClb = 0.00022499999999999999; // mS_per_uF
        const double var_IClb__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_IClb__IClb = var_IClb__gClb * (var_IClb__Vm - var_IClb__ECl); // uA_per_uF
        const double var_Ito2__i2f = var_chaste_interface__Ito2_i2f_gate__i2f; // dimensionless
        const double var_Ito2__Irel = var_chaste_interface__Irel__Irel; // mM_per_ms
        const double var_Ito2__kCa_ito2 = 0.40000000000000002; // mM_per_ms
        const double var_Ito2__KCa_ito2 = 1.0 - (1.0 / (1.0 + pow(var_Ito2__Irel / var_Ito2__kCa_ito2, 2.0))); // dimensionless
        const double var_Ito2__F = var_model_parameters__F; // C_per_mole
        const double var_Ito2__zCl =  -1.0; // dimensionless
        const double var_Ito2__T = var_model_parameters__T; // kelvin
        const double var_Ito2__Cl_o = var_model_parameters__Cl_o; // mM
        const double var_Ito2__Cl_i = var_chaste_interface__Cl__Cl_i; // mM
        const double var_Ito2__R = var_model_parameters__R; // J_per_kmole_K
        const double var_Ito2__Vm = var_chaste_interface__membrane__Vm; // mV
        const double var_Ito2__PCl = 8.9999999999999996e-07; // L_per_F_ms
        const double var_Ito2__Ito2_max = (((var_Ito2__PCl * pow(var_Ito2__zCl, 2.0) * var_Ito2__Vm * pow(var_Ito2__F, 2.0)) / (var_Ito2__R * var_Ito2__T)) * (var_Ito2__Cl_i - (var_Ito2__Cl_o * exp((var_Ito2__Vm * var_Ito2__F) / (var_Ito2__R * var_Ito2__T))))) / (1.0 - exp((var_Ito2__Vm * var_Ito2__F) / (var_Ito2__R * var_Ito2__T))); // uA_per_uF
        const double var_Ito2__Ito2 = var_Ito2__Ito2_max * var_Ito2__i2f * var_Ito2__KCa_ito2; // uA_per_uF
        const double var_IKs__C1 = var_chaste_interface__IKs__C1; // dimensionless
        const double var_IKs__C2 = var_chaste_interface__IKs__C2; // dimensionless
        const double var_IKs__C3 = var_chaste_interface__IKs__C3; // dimensionless
        const double var_IKs__C4 = var_chaste_interface__IKs__C4; // dimensionless
        const double var_IKs__C5 = var_chaste_interface__IKs__C5; // dimensionless
        const double var_IKs__C6 = var_chaste_interface__IKs__C6; // dimensionless
        const double var_IKs__C7 = var_chaste_interface__IKs__C7; // dimensionless
        const double var_IKs__C8 = var_chaste_interface__IKs__C8; // dimensionless
        const double var_IKs__C9 = var_chaste_interface__IKs__C9; // dimensionless
        const double var_IKs__C10 = var_chaste_interface__IKs__C10; // dimensionless
        const double var_IKs__C11 = var_chaste_interface__IKs__C11; // dimensionless
        const double var_IKs__C12 = var_chaste_interface__IKs__C12; // dimensionless
        const double var_IKs__C13 = var_chaste_interface__IKs__C13; // dimensionless
        const double var_IKs__C14 = var_chaste_interface__IKs__C14; // dimensionless
        const double var_IKs__C15 = var_chaste_interface__IKs__C15; // dimensionless
        const double var_IKs__R = var_model_parameters__R; // J_per_kmole_K
        const double var_IKs__T = var_model_parameters__T; // kelvin
        const double var_IKs__F = var_model_parameters__F; // C_per_mole
        const double var_IKs__alpha = 0.014864 * exp((0.029877000000000001 * var_IKs__Vm * var_IKs__F) / (var_IKs__R * var_IKs__T)); // per_ms
        const double var_IKs__beta = 0.083986000000000005 * exp(((-0.055461000000000003) * var_IKs__Vm * var_IKs__F) / (var_IKs__R * var_IKs__T)); // per_ms
        const double var_IKs__delta = 0.0031172999999999999 * exp(((-0.42625000000000002) * var_IKs__Vm * var_IKs__F) / (var_IKs__R * var_IKs__T)); // per_ms
        const double var_IKs__gamma = 0.014600999999999999 * exp((0.24465000000000001 * var_IKs__Vm * var_IKs__F) / (var_IKs__R * var_IKs__T)); // per_ms
        const double var_IKs__eta = 0.07732 * exp(((-0.064726000000000006) * var_IKs__Vm * var_IKs__F) / (var_IKs__R * var_IKs__T)); // per_ms
        const double var_IKs__theta = 0.089538000000000006; // per_ms
        const double var_IKs__omega = 0.79405000000000003 * exp(((-0.080173999999999995) * var_IKs__Vm * var_IKs__F) / (var_IKs__R * var_IKs__T)); // per_ms
        const double var_IKs__psi = 0.58638000000000001 * exp((0.28205999999999998 * var_IKs__Vm * var_IKs__F) / (var_IKs__R * var_IKs__T)); // per_ms
        const double var_IKs__d_C1_d_environment__time = ((-4.0) * var_IKs__alpha * var_IKs__C1) + (var_IKs__beta * var_IKs__C2); // 'per millisecond'
        const double var_IKs__d_C2_d_environment__time = ((-((3.0 * var_IKs__alpha) + var_IKs__beta + var_IKs__gamma)) * var_IKs__C2) + (4.0 * var_IKs__alpha * var_IKs__C1) + (2.0 * var_IKs__beta * var_IKs__C3) + (var_IKs__delta * var_IKs__C6); // 'per millisecond'
        const double var_IKs__d_C3_d_environment__time = ((-((2.0 * var_IKs__alpha) + (2.0 * var_IKs__beta) + (2.0 * var_IKs__gamma))) * var_IKs__C3) + (3.0 * var_IKs__alpha * var_IKs__C2) + (3.0 * var_IKs__beta * var_IKs__C4) + (var_IKs__delta * var_IKs__C7); // 'per millisecond'
        const double var_IKs__d_C4_d_environment__time = ((-(var_IKs__alpha + (3.0 * var_IKs__beta) + (3.0 * var_IKs__gamma))) * var_IKs__C4) + (2.0 * var_IKs__alpha * var_IKs__C3) + (4.0 * var_IKs__beta * var_IKs__C5) + (var_IKs__delta * var_IKs__C8); // 'per millisecond'
        const double var_IKs__d_C5_d_environment__time = ((-((4.0 * var_IKs__beta) + (4.0 * var_IKs__gamma))) * var_IKs__C5) + (var_IKs__alpha * var_IKs__C4) + (var_IKs__delta * var_IKs__C9); // 'per millisecond'
        const double var_IKs__d_C6_d_environment__time = ((-((3.0 * var_IKs__alpha) + var_IKs__delta)) * var_IKs__C6) + (var_IKs__beta * var_IKs__C7) + (var_IKs__gamma * var_IKs__C2); // 'per millisecond'
        const double var_IKs__d_C7_d_environment__time = ((-((2.0 * var_IKs__alpha) + var_IKs__beta + var_IKs__gamma + var_IKs__delta)) * var_IKs__C7) + (3.0 * var_IKs__alpha * var_IKs__C6) + (2.0 * var_IKs__beta * var_IKs__C8) + (2.0 * var_IKs__gamma * var_IKs__C3) + (2.0 * var_IKs__delta * var_IKs__C10); // 'per millisecond'
        const double var_IKs__d_C8_d_environment__time = ((-(var_IKs__alpha + (2.0 * var_IKs__beta) + (2.0 * var_IKs__gamma) + var_IKs__delta)) * var_IKs__C8) + (2.0 * var_IKs__alpha * var_IKs__C7) + (3.0 * var_IKs__beta * var_IKs__C9) + (3.0 * var_IKs__gamma * var_IKs__C4) + (2.0 * var_IKs__delta * var_IKs__C11); // 'per millisecond'
        const double var_IKs__d_C9_d_environment__time = ((-((3.0 * var_IKs__beta) + (3.0 * var_IKs__gamma) + var_IKs__delta)) * var_IKs__C9) + (var_IKs__alpha * var_IKs__C8) + (4.0 * var_IKs__gamma * var_IKs__C5) + (2.0 * var_IKs__delta * var_IKs__C12); // 'per millisecond'
        const double var_IKs__d_C10_d_environment__time = ((-((2.0 * var_IKs__alpha) + (2.0 * var_IKs__delta))) * var_IKs__C10) + (var_IKs__beta * var_IKs__C11) + (var_IKs__gamma * var_IKs__C7); // 'per millisecond'
        const double var_IKs__d_C11_d_environment__time = ((-(var_IKs__alpha + var_IKs__beta + var_IKs__gamma + (2.0 * var_IKs__delta))) * var_IKs__C11) + (2.0 * var_IKs__alpha * var_IKs__C10) + (2.0 * var_IKs__beta * var_IKs__C12) + (2.0 * var_IKs__gamma * var_IKs__C8) + (3.0 * var_IKs__delta * var_IKs__C13); // 'per millisecond'
        const double var_IKs__d_C12_d_environment__time = ((-((2.0 * var_IKs__beta) + (2.0 * var_IKs__gamma) + (2.0 * var_IKs__delta))) * var_IKs__C12) + (var_IKs__alpha * var_IKs__C11) + (3.0 * var_IKs__gamma * var_IKs__C9) + (3.0 * var_IKs__delta * var_IKs__C14); // 'per millisecond'
        const double var_IKs__d_C13_d_environment__time = ((-(var_IKs__alpha + (3.0 * var_IKs__delta))) * var_IKs__C13) + (var_IKs__beta * var_IKs__C14) + (var_IKs__gamma * var_IKs__C11); // 'per millisecond'
        const double var_IKs__d_C14_d_environment__time = ((-(var_IKs__beta + var_IKs__gamma + (3.0 * var_IKs__delta))) * var_IKs__C14) + (var_IKs__alpha * var_IKs__C13) + (2.0 * var_IKs__gamma * var_IKs__C12) + (4.0 * var_IKs__delta * var_IKs__C15); // 'per millisecond'
        const double var_IKs__d_C15_d_environment__time = ((-((4.0 * var_IKs__delta) + var_IKs__theta)) * var_IKs__C15) + (var_IKs__gamma * var_IKs__C14) + (var_IKs__eta * var_IKs__O1); // 'per millisecond'
        const double var_IKs__d_O1_d_environment__time = ((-(var_IKs__eta + var_IKs__psi)) * var_IKs__O1) + (var_IKs__omega * var_IKs__O2) + (var_IKs__theta * var_IKs__C15); // 'per millisecond'
        const double var_IKs__d_O2_d_environment__time = ((-var_IKs__omega) * var_IKs__O2) + (var_IKs__psi * var_IKs__O1); // 'per millisecond'
        const double var_ICaL__C = var_chaste_interface__ICaL__C; // dimensionless
        const double var_ICaL__C_star = var_chaste_interface__ICaL__C_star; // dimensionless
        const double var_ICaL__CI = var_chaste_interface__ICaL__CI; // dimensionless
        const double var_ICaL__OI = var_chaste_interface__ICaL__OI; // dimensionless
        const double var_ICaL__CI_star = var_chaste_interface__ICaL__CI_star; // dimensionless
        const double var_ICaL__OI_star = var_chaste_interface__ICaL__OI_star; // dimensionless
        const double var_ICaL__ACT_tau = 0.58999999999999997 + ((0.80000000000000004 * exp(0.051999999999999998 * (var_ICaL__Vm + 13.0))) / (1.0 + exp(0.13200000000000001 * (var_ICaL__Vm + 13.0)))); // ms
        const double var_ICaL__IV_tau = 1.0 / ((1.0 / (24.827999999999999 * (1.0 + exp((var_ICaL__Vm + 49.100000000000001) / 10.349)))) + (1.0 / (30.553000000000001 * (1.0 + exp((-(var_ICaL__Vm + 0.21299999999999999)) / 10.807))))); // ms
        const double var_ICaL__IV_beta_infinity_star = 25.0 - (17.5 / (1.0 + pow(0.0030000000000000001 / var_ICaL__Ca_ss_CaL, 4.0))); // dimensionless
        const double var_ICaL__IV_beta_star = 1.0 / (var_ICaL__IV_beta_infinity_star * (1.0 + exp((-(var_ICaL__Vm + 0.21299999999999999)) / 10.807))); // dimensionless
        const double var_ICaL__IV_tau_star = 1.0 / ((1.0 / (24.827999999999999 * (1.0 + exp((var_ICaL__Vm + 49.100000000000001) / 10.349)))) + var_ICaL__IV_beta_star); // ms
        const double var_ICaL__ACT_infinity = 1.0 / (1.0 + exp((-(var_ICaL__Vm - 13.56)) / 9.4499999999999993)); // dimensionless
        const double var_ICaL__IV_infinity = ((1.0 / (1.0 + exp((var_ICaL__Vm + 17.5) / 3.0))) + 0.25) / 1.25; // dimensionless
        const double var_ICaL__IV_infinity_star = ((1.0 / (1.0 + exp((var_ICaL__Vm + 17.5) / 3.0))) + 0.0001) / 1.0001; // dimensionless
        const double var_ICaL__alpha = var_ICaL__ACT_infinity / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__beta = (1.0 - var_ICaL__ACT_infinity) / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__delta = 3.0 / (1.0 + pow(0.0030000000000000001 / var_ICaL__Ca_ss_CaL, 4.0)); // per_ms
        const double var_ICaL__x = var_ICaL__IV_infinity / var_ICaL__IV_tau; // per_ms
        const double var_ICaL__y = (1.0 - var_ICaL__IV_infinity) / var_ICaL__IV_tau; // per_ms
        const double var_ICaL__theta = 1.0; // per_ms
        const double var_ICaL__y_star = (1.0 - var_ICaL__IV_infinity_star) / var_ICaL__IV_tau_star; // per_ms
        const double var_ICaL__x_star = var_ICaL__IV_infinity_star / var_ICaL__IV_tau_star; // per_ms
        const double var_ICaL__theta_I = 9.9999999999999995e-07; // per_ms
        const double var_ICaL__delta_I = (var_ICaL__theta_I * var_ICaL__x * var_ICaL__y_star * var_ICaL__delta) / (var_ICaL__y * var_ICaL__x_star * var_ICaL__theta); // per_ms
        const double var_ICaL__d_C_d_environment__time = ((-(var_ICaL__alpha + var_ICaL__delta + var_ICaL__y)) * var_ICaL__C) + (var_ICaL__beta * var_ICaL__O) + (var_ICaL__theta * var_ICaL__C_star) + (var_ICaL__x * var_ICaL__CI); // 'per millisecond'
        const double var_ICaL__d_O_d_environment__time = ((-(var_ICaL__beta + var_ICaL__delta + var_ICaL__y)) * var_ICaL__O) + (var_ICaL__alpha * var_ICaL__C) + (var_ICaL__theta * var_ICaL__O_star) + (var_ICaL__x * var_ICaL__OI); // 'per millisecond'
        const double var_ICaL__d_C_star_d_environment__time = ((-(var_ICaL__alpha + var_ICaL__theta + var_ICaL__y_star)) * var_ICaL__C_star) + (var_ICaL__delta * var_ICaL__C) + (var_ICaL__beta * var_ICaL__O_star) + (var_ICaL__x_star * var_ICaL__CI_star); // 'per millisecond'
        const double var_ICaL__d_O_star_d_environment__time = ((-(var_ICaL__beta + var_ICaL__theta + var_ICaL__y_star)) * var_ICaL__O_star) + (var_ICaL__delta * var_ICaL__O) + (var_ICaL__alpha * var_ICaL__C_star) + (var_ICaL__x_star * var_ICaL__OI_star); // 'per millisecond'
        const double var_ICaL__d_CI_d_environment__time = ((-(var_ICaL__alpha + var_ICaL__delta_I + var_ICaL__x)) * var_ICaL__CI) + (var_ICaL__y * var_ICaL__C) + (var_ICaL__theta_I * var_ICaL__CI_star) + (var_ICaL__beta * var_ICaL__OI); // 'per millisecond'
        const double var_ICaL__d_OI_d_environment__time = ((-(var_ICaL__beta + var_ICaL__delta_I + var_ICaL__x)) * var_ICaL__OI) + (var_ICaL__y * var_ICaL__O) + (var_ICaL__theta_I * var_ICaL__OI_star) + (var_ICaL__alpha * var_ICaL__CI); // 'per millisecond'
        const double var_ICaL__d_CI_star_d_environment__time = ((-(var_ICaL__alpha + var_ICaL__theta_I + var_ICaL__x_star)) * var_ICaL__CI_star) + (var_ICaL__delta_I * var_ICaL__CI) + (var_ICaL__y_star * var_ICaL__C_star) + (var_ICaL__beta * var_ICaL__OI_star); // 'per millisecond'
        const double var_ICaL__d_OI_star_d_environment__time = ((-(var_ICaL__beta + var_ICaL__theta_I + var_ICaL__x_star)) * var_ICaL__OI_star) + (var_ICaL__delta_I * var_ICaL__OI) + (var_ICaL__y_star * var_ICaL__O_star) + (var_ICaL__alpha * var_ICaL__CI_star); // 'per millisecond'
        const double var_INa_m_gate__Vm = var_INa__Vm; // mV
        const double var_INa_m_gate__am = (0.32000000000000001 * (var_INa_m_gate__Vm + 47.130000000000003)) / (1.0 - exp((-0.10000000000000001) * (var_INa_m_gate__Vm + 47.130000000000003))); // per_ms
        const double var_INa_m_gate__bm = 0.080000000000000002 * exp((-var_INa_m_gate__Vm) / 11.0); // per_ms
        const double var_INa_m_gate__m = var_INa__m; // dimensionless
        const double var_INa_m_gate__d_m_d_environment__time = (var_INa_m_gate__am * (1.0 - var_INa_m_gate__m)) - (var_INa_m_gate__bm * var_INa_m_gate__m); // 'per millisecond'
        const double var_INa__INa_m_gate__d_m_d_environment__time = var_INa_m_gate__d_m_d_environment__time; // ___units_19
        const double var_INa_h_gate__Vm = var_INa__Vm; // mV
        const double var_INa_h_gate__bh = (var_INa_h_gate__Vm >= (-40.0)) ? (1.0 / (0.13 * (1.0 + exp((var_INa_h_gate__Vm + 10.66) / (-11.1))))) : ((3.5600000000000001 * exp(0.079000000000000001 * var_INa_h_gate__Vm)) + (310000.0 * exp(0.34999999999999998 * var_INa_h_gate__Vm))); // per_ms
        const double var_INa_h_gate__h = var_INa__h; // dimensionless
        const double var_INa_h_gate__ah = (var_INa_h_gate__Vm >= (-40.0)) ? 0.0 : (0.13500000000000001 * exp((80.0 + var_INa_h_gate__Vm) / (-6.7999999999999998))); // per_ms
        const double var_INa_h_gate__d_h_d_environment__time = (var_INa_h_gate__ah * (1.0 - var_INa_h_gate__h)) - (var_INa_h_gate__bh * var_INa_h_gate__h); // 'per millisecond'
        const double var_INa__INa_h_gate__d_h_d_environment__time = var_INa_h_gate__d_h_d_environment__time; // ___units_19
        const double var_INa_j_gate__Vm = var_INa__Vm; // mV
        const double var_INa_j_gate__aj = (var_INa_j_gate__Vm >= (-40.0)) ? 0.0 : (((((-127140.0) * exp(0.24440000000000001 * var_INa_j_gate__Vm)) - (6.9480000000000006e-05 * exp((-0.043909999999999998) * var_INa_j_gate__Vm))) * (var_INa_j_gate__Vm + 37.780000000000001)) / (1.0 + exp(0.311 * (var_INa_j_gate__Vm + 79.230000000000004)))); // per_ms
        const double var_INa_j_gate__bj = (var_INa_j_gate__Vm >= (-40.0)) ? ((0.29999999999999999 * exp((-2.5349999999999999e-07) * var_INa_j_gate__Vm)) / (1.0 + exp((-0.10000000000000001) * (var_INa_j_gate__Vm + 32.0)))) : ((0.1212 * exp((-0.01052) * var_INa_j_gate__Vm)) / (1.0 + exp((-0.13780000000000001) * (var_INa_j_gate__Vm + 40.140000000000001)))); // per_ms
        const double var_INa_j_gate__j = var_INa__j; // dimensionless
        const double var_INa_j_gate__d_j_d_environment__time = (var_INa_j_gate__aj * (1.0 - var_INa_j_gate__j)) - (var_INa_j_gate__bj * var_INa_j_gate__j); // 'per millisecond'
        const double var_INa__INa_j_gate__d_j_d_environment__time = var_INa_j_gate__d_j_d_environment__time; // ___units_19
        const double var_INaL_mL_gate__Vm = var_INaL__Vm; // mV
        const double var_INaL_mL_gate__amL = (0.32000000000000001 * (var_INaL_mL_gate__Vm + 47.130000000000003)) / (1.0 - exp((-0.10000000000000001) * (var_INaL_mL_gate__Vm + 47.130000000000003))); // per_ms
        const double var_INaL_mL_gate__bmL = 0.080000000000000002 * exp((-var_INaL_mL_gate__Vm) / 11.0); // per_ms
        const double var_INaL_mL_gate__mL = var_INaL__mL; // dimensionless
        const double var_INaL_mL_gate__d_mL_d_environment__time = (var_INaL_mL_gate__amL * (1.0 - var_INaL_mL_gate__mL)) - (var_INaL_mL_gate__bmL * var_INaL_mL_gate__mL); // 'per millisecond'
        const double var_INaL__INaL_mL_gate__d_mL_d_environment__time = var_INaL_mL_gate__d_mL_d_environment__time; // ___units_19
        const double var_INaL_hL_gate__tau_hL = 600.0; // ms
        const double var_INaL_hL_gate__Vm = var_INaL__Vm; // mV
        const double var_INaL_hL_gate__hL_infinity = 1.0 / (1.0 + exp((var_INaL_hL_gate__Vm + 91.0) / 6.0999999999999996)); // dimensionless
        const double var_INaL_hL_gate__hL = var_INaL__hL; // dimensionless
        const double var_INaL_hL_gate__d_hL_d_environment__time = (var_INaL_hL_gate__hL_infinity - var_INaL_hL_gate__hL) / var_INaL_hL_gate__tau_hL; // 'per millisecond'
        const double var_INaL__INaL_hL_gate__d_hL_d_environment__time = var_INaL_hL_gate__d_hL_d_environment__time; // ___units_19
        const double var_CT_Na_Cl__ENa = var_reversal_potentials__ENa; // mV
        const double var_CT_Na_Cl__ECl = var_reversal_potentials__ECl; // mV
        const double var_CT_Na_Cl__CT_Na_Cl_max = 2.4610800000000002e-05; // mM_per_ms
        const double var_CT_Na_Cl__CT_Na_Cl = (var_CT_Na_Cl__CT_Na_Cl_max * pow(var_CT_Na_Cl__ENa - var_CT_Na_Cl__ECl, 4.0)) / (pow(var_CT_Na_Cl__ENa - var_CT_Na_Cl__ECl, 4.0) + pow(87.825100000000006, 4.0)); // mM_per_ms
        const double var_CT_K_Cl__ECl = var_reversal_potentials__ECl; // mV
        const double var_CT_K_Cl__EK = var_reversal_potentials__EK; // mV
        const double var_CT_K_Cl__CT_K_Cl_max = 1.77e-05; // mM_per_ms
        const double var_CT_K_Cl__CT_K_Cl = (var_CT_K_Cl__CT_K_Cl_max * (var_CT_K_Cl__EK - var_CT_K_Cl__ECl)) / ((var_CT_K_Cl__EK + 87.825100000000006) - var_CT_K_Cl__ECl); // mM_per_ms
        const double var_IKr_xr_gate__xr = var_IKr__xr; // dimensionless
        const double var_IKr_xr_gate__Vm = var_IKr__Vm; // mV
        const double var_IKr_xr_gate__tau_xr = 1.0 / (((0.00059999999999999995 * (var_IKr_xr_gate__Vm - 1.7383999999999999)) / (1.0 - exp((-0.13600000000000001) * (var_IKr_xr_gate__Vm - 1.7383999999999999)))) + ((0.00029999999999999997 * (var_IKr_xr_gate__Vm + 38.360799999999998)) / (exp(0.1522 * (var_IKr_xr_gate__Vm + 38.360799999999998)) - 1.0))); // ms
        const double var_IKr_xr_gate__xr_infinity = 1.0 / (1.0 + exp((-(var_IKr_xr_gate__Vm + 10.085000000000001)) / 4.25)); // dimensionless
        const double var_IKr_xr_gate__d_xr_d_environment__time = (var_IKr_xr_gate__xr_infinity - var_IKr_xr_gate__xr) / var_IKr_xr_gate__tau_xr; // 'per millisecond'
        const double var_IKr__IKr_xr_gate__d_xr_d_environment__time = var_IKr_xr_gate__d_xr_d_environment__time; // ___units_19
        const double var_Ito1_a_gate__a = var_Ito1__a; // dimensionless
        const double var_Ito1_a_gate__Vm = var_Ito1__Vm; // mV
        const double var_Ito1_a_gate__a_infinity = 1.0 / (1.0 + exp((var_Ito1_a_gate__Vm + 9.4369999999999994) / (-7.133))); // dimensionless
        const double var_Ito1_a_gate__beta_a = 3.5 / (1.0 + exp((var_Ito1_a_gate__Vm + 100.0) / 29.381399999999999)); // per_ms
        const double var_Ito1_a_gate__alpha_a = 1.0 / (1.2089000000000001 * (1.0 + exp((var_Ito1_a_gate__Vm - 18.4099) / (-29.381399999999999)))); // per_ms
        const double var_Ito1_a_gate__tau_a = 1.0 / (var_Ito1_a_gate__alpha_a + var_Ito1_a_gate__beta_a); // ms
        const double var_Ito1_a_gate__d_a_d_environment__time = (var_Ito1_a_gate__a_infinity - var_Ito1_a_gate__a) / var_Ito1_a_gate__tau_a; // 'per millisecond'
        const double var_Ito1__Ito1_a_gate__d_a_d_environment__time = var_Ito1_a_gate__d_a_d_environment__time; // ___units_19
        const double var_Ito1_i1f_gate__i1f = var_Ito1__i1f; // dimensionless
        const double var_Ito1_i1f_gate__Vm = var_Ito1__Vm; // mV
        const double var_Ito1_i1f_gate__beta_i1f = 1.0 / (9.7952999999999992 * (1.0 + exp((var_Ito1_i1f_gate__Vm + 19.0) / (-9.0)))); // per_ms
        const double var_Ito1_i1f_gate__alpha_i1f = 0.025000000000000001 / (1.0 + exp((var_Ito1_i1f_gate__Vm + 58.0) / 5.0)); // per_ms
        const double var_Ito1_i1f_gate__d_i1f_d_environment__time = (var_Ito1_i1f_gate__alpha_i1f * (1.0 - var_Ito1_i1f_gate__i1f)) - (var_Ito1_i1f_gate__beta_i1f * var_Ito1_i1f_gate__i1f); // 'per millisecond'
        const double var_Ito1__Ito1_i1f_gate__d_i1f_d_environment__time = var_Ito1_i1f_gate__d_i1f_d_environment__time; // ___units_19
        const double var_Ito1_i1s_gate__i1s = var_Ito1__i1s; // dimensionless
        const double var_Ito1_i1s_gate__Vm = var_Ito1__Vm; // mV
        const double var_Ito1_i1s_gate__beta_i1s = 1.0 / (9.7952999999999992 * (1.0 + exp((var_Ito1_i1s_gate__Vm + 19.0) / (-9.0)))); // per_ms
        const double var_Ito1_i1s_gate__alpha_i1s = 1.0 / (250.0 * (1.0 + exp((var_Ito1_i1s_gate__Vm + 60.0) / 5.0))); // per_ms
        const double var_Ito1_i1s_gate__d_i1s_d_environment__time = (var_Ito1_i1s_gate__alpha_i1s * (1.0 - var_Ito1_i1s_gate__i1s)) - (var_Ito1_i1s_gate__beta_i1s * var_Ito1_i1s_gate__i1s); // 'per millisecond'
        const double var_Ito1__Ito1_i1s_gate__d_i1s_d_environment__time = var_Ito1_i1s_gate__d_i1s_d_environment__time; // ___units_19
        const double var_Ito2_i2f_gate__i2f = var_Ito2__i2f; // dimensionless
        const double var_Ito2_i2f_gate__tau_i2f = 8.0; // ms
        const double var_Ito2_i2f_gate__Vm = var_Ito2__Vm; // mV
        const double var_Ito2_i2f_gate__alpha_i2f = 0.025000000000000001 / (1.0 + exp((var_Ito2_i2f_gate__Vm + 58.0) / 5.0)); // per_ms
        const double var_Ito2_i2f_gate__beta_i2f = 1.0 / (5.0 * (1.0 + exp((var_Ito2_i2f_gate__Vm + 19.0) / (-9.0)))); // per_ms
        const double var_Ito2_i2f_gate__i2f_infinity = var_Ito2_i2f_gate__alpha_i2f / (var_Ito2_i2f_gate__alpha_i2f + var_Ito2_i2f_gate__beta_i2f); // dimensionless
        const double var_Ito2_i2f_gate__d_i2f_d_environment__time = (var_Ito2_i2f_gate__i2f_infinity - var_Ito2_i2f_gate__i2f) / var_Ito2_i2f_gate__tau_i2f; // 'per millisecond'
        const double var_Ito2__Ito2_i2f_gate__d_i2f_d_environment__time = var_Ito2_i2f_gate__d_i2f_d_environment__time; // ___units_19
        const double var_Irel__Irel = var_chaste_interface__Irel__Irel; // mM_per_ms
        const double var_Irel__Krel_infinity = 1.0; // mM
        const double var_Irel__kappa = 0.1125; // mM_per_uA_per_uF_per_ms_per_ms
        const double var_Irel__beta_0 = 4.75; // ms
        const double var_Irel__delta_beta_0 = 1.0; // dimensionless
        const double var_CaMK_active__CaMK_0 = 0.050000000000000003; // dimensionless
        const double var_CaMK_active__Km = 0.0015; // mM
        const double var_CaMK_active__CaMK_trap = var_chaste_interface__CaMK_active__CaMK_trap; // dimensionless
        const double var_CaMK_active__Ca_ss_sr = var_chaste_interface__Ca__Ca_ss_sr; // mM
        const double var_CaMK_active__CaMK_active = ((var_CaMK_active__CaMK_0 * (1.0 - var_CaMK_active__CaMK_trap)) / (1.0 + (var_CaMK_active__Km / var_CaMK_active__Ca_ss_sr))) + var_CaMK_active__CaMK_trap; // dimensionless
        const double var_Irel__CaMK_active = var_CaMK_active__CaMK_active; // dimensionless
        const double var_Irel__K_beta = 0.28000000000000003; // mM
        const double var_Irel__h_beta = 10.0; // dimensionless
        const double var_Irel__delta_beta_CaMK = var_Irel__delta_beta_0 / (1.0 + pow(var_Irel__K_beta / (1.0 * var_Irel__CaMK_active), var_Irel__h_beta)); // dimensionless
        const double var_Irel__beta_tau = var_Irel__beta_0 * (1.0 + var_Irel__delta_beta_CaMK); // ms
        const double var_Irel__alpha_rel = var_Irel__beta_tau * var_Irel__kappa; // mM_per_uA_per_uF_per_ms
        const double var_Irel__Ca_JSR = var_chaste_interface__Ca__Ca_JSR; // mM
        const double var_Irel__ICaL = var_ICaL__ICaL; // uA_per_uF
        const double var_Irel__h_rel = 8.0; // dimensionless
        const double var_Irel__rel_infinity = (var_Irel__ICaL * var_Irel__alpha_rel) / (1.0 + pow(var_Irel__Krel_infinity / var_Irel__Ca_JSR, var_Irel__h_rel)); // mM_per_ms
        const double var_Irel__Krel_tau = 0.0123; // mM
        const double var_Irel__tau_rel = var_Irel__beta_tau / (1.0 + (var_Irel__Krel_tau / var_Irel__Ca_JSR)); // ms
        const double var_Irel__d_Irel_d_environment__time = (-(var_Irel__rel_infinity + var_Irel__Irel)) / var_Irel__tau_rel; // 'mM per millisecond per ms'
        const double var_Iup__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_Iup__iupbar = 0.0043750000000000004; // mM_per_ms
        const double var_Iup__delta_kmPLB_bar = 0.00017000000000000001; // mM
        const double var_Iup__CaMK_active = var_CaMK_active__CaMK_active; // dimensionless
        const double var_Iup__kmCaMK = 0.14999999999999999; // mM
        const double var_Iup__delta_kmPLB = (var_Iup__delta_kmPLB_bar * var_Iup__CaMK_active * 1.0) / (var_Iup__kmCaMK + (var_Iup__CaMK_active * 1.0)); // mM
        const double var_Iup__kmup = 0.00092000000000000003; // mM
        const double var_Iup__delta_iupCaMK_bar = 0.75; // dimensionless
        const double var_Iup__delta_iupCaMK = (var_Iup__delta_iupCaMK_bar * var_Iup__CaMK_active * 1.0) / (var_Iup__kmCaMK + (var_Iup__CaMK_active * 1.0)); // dimensionless
        const double var_Iup__Iup = ((var_Iup__delta_iupCaMK + 1.0) * var_Iup__iupbar * var_Iup__Ca_i) / ((var_Iup__Ca_i + var_Iup__kmup) - var_Iup__delta_kmPLB); // mM_per_ms
        const double var_Ileak__nsrbar = 15.0; // mM
        const double var_Ileak__Ca_NSR = var_chaste_interface__Ca__Ca_NSR; // mM
        const double var_Ileak__Ileak = (0.0043750000000000004 / var_Ileak__nsrbar) * var_Ileak__Ca_NSR; // mM_per_ms
        const double var_Itr__Ca_JSR = var_chaste_interface__Ca__Ca_JSR; // mM
        const double var_Itr__tautr = 25.0; // ms
        const double var_Itr__Ca_NSR = var_chaste_interface__Ca__Ca_NSR; // mM
        const double var_Itr__Itr = (var_Itr__Ca_NSR - var_Itr__Ca_JSR) / var_Itr__tautr; // mM_per_ms
        const double var_Ca__Ca_JSR = var_chaste_interface__Ca__Ca_JSR; // mM
        const double var_Ca__Ca_i = var_chaste_interface__Ca__Ca_i; // mM
        const double var_Ca__Ca_ss_sr = var_chaste_interface__Ca__Ca_ss_sr; // mM
        const double var_Ca__Ca_ss_CaL = var_chaste_interface__Ca__Ca_ss_CaL; // mM
        const double var_Ca__tau_diff = 0.20000000000000001; // ms
        const double var_Ca__tau_diff_ss = 2.0; // ms
        const double var_Ca__Idiff = (var_Ca__Ca_ss_sr - var_Ca__Ca_i) / var_Ca__tau_diff; // mM_per_ms
        const double var_Ca__Idiff_ss = (var_Ca__Ca_ss_sr - var_Ca__Ca_ss_CaL) / var_Ca__tau_diff_ss; // mM_per_ms
        const double var_Ca__trpn_bar = 0.070000000000000007; // mM
        const double var_Ca__km_trpn = 0.00050000000000000001; // mM
        const double var_Ca__km_cmdn = 0.0023800000000000002; // mM
        const double var_Ca__cmdn_bar = 0.050000000000000003; // mM
        const double var_Ca__bmyo = 1.0 / (1.0 + ((var_Ca__cmdn_bar * var_Ca__km_cmdn) / pow(var_Ca__Ca_i + var_Ca__km_cmdn, 2.0)) + ((var_Ca__km_trpn * var_Ca__trpn_bar) / pow(var_Ca__Ca_i + var_Ca__km_trpn, 2.0))); // dimensionless
        const double var_Ca__KmBSL = 0.0086999999999999994; // mM
        const double var_Ca__BSRmax = 0.047; // mM
        const double var_Ca__BSLmax = 1.1240000000000001; // mM
        const double var_Ca__KmBSR = 0.00087000000000000001; // mM
        const double var_Ca__bss = 1.0 / (1.0 + ((var_Ca__BSRmax * var_Ca__KmBSR) / pow(var_Ca__KmBSR + var_Ca__Ca_ss_CaL, 2.0)) + ((var_Ca__BSLmax * var_Ca__KmBSL) / pow(var_Ca__KmBSL + var_Ca__Ca_ss_CaL, 2.0))); // dimensionless
        const double var_Ca__bss_sr = 1.0 / (1.0 + ((var_Ca__BSRmax * var_Ca__KmBSR) / pow(var_Ca__KmBSR + var_Ca__Ca_ss_sr, 2.0)) + ((var_Ca__BSLmax * var_Ca__KmBSL) / pow(var_Ca__KmBSL + var_Ca__Ca_ss_sr, 2.0))); // dimensionless
        const double var_Ca__kmcsqn = 0.80000000000000004; // mM
        const double var_Ca__csqnbar = 10.0; // mM
        const double var_Ca__bcsqn = 1.0 / (1.0 + ((var_Ca__kmcsqn * var_Ca__csqnbar) / pow(var_Ca__Ca_JSR + var_Ca__kmcsqn, 2.0))); // dimensionless
        const double var_Ca__AF = var_cell_geometry__AF; // uF_mole_per_C
        const double var_Ca__INaCa = var_INaCa__INaCa; // uA_per_uF
        const double var_Ca__INaCa_ss_sr = var_INaCa__INaCa_ss_sr; // uA_per_uF
        const double var_Ca__ICaL = var_ICaL__ICaL; // uA_per_uF
        const double var_Ca__ICab = var_ICab__ICab; // uA_per_uF
        const double var_Ca__IpCa = var_IpCa__IpCa; // uA_per_uF
        const double var_Ca__Vmyo = var_cell_geometry__Vmyo; // uL
        const double var_Ca__Vss_sr = var_cell_geometry__Vss_sr; // uL
        const double var_Ca__Vss_CaL = var_cell_geometry__Vss_CaL; // uL
        const double var_Ca__Vnsr = var_cell_geometry__Vnsr; // uL
        const double var_Ca__Vjsr = var_cell_geometry__Vjsr; // uL
        const double var_Ca__Iup = var_Iup__Iup; // mM_per_ms
        const double var_Ca__Itr = var_Itr__Itr; // mM_per_ms
        const double var_Ca__Ileak = var_Ileak__Ileak; // mM_per_ms
        const double var_Ca__Irel = var_chaste_interface__Irel__Irel; // mM_per_ms
        const double var_Ca__d_Ca_i_d_environment__time = var_Ca__bmyo * ((((-((var_Ca__ICab + var_Ca__IpCa) - (2.0 * var_Ca__INaCa))) * var_Ca__AF) / (var_Ca__Vmyo * 2.0)) + (((var_Ca__Ileak - var_Ca__Iup) * var_Ca__Vnsr) / var_Ca__Vmyo) + ((var_Ca__Idiff * var_Ca__Vss_CaL) / var_Ca__Vmyo)); // 'millimole per litre per millisecond'
        const double var_Ca__d_Ca_JSR_d_environment__time = var_Ca__bcsqn * (var_Ca__Itr - var_Ca__Irel); // 'millimole per litre per millisecond'
        const double var_Ca__d_Ca_NSR_d_environment__time = var_Ca__Iup - (var_Ca__Ileak + ((var_Ca__Itr * var_Ca__Vjsr) / var_Ca__Vnsr)); // 'millimole per litre per millisecond'
        const double var_Ca__d_Ca_ss_sr_d_environment__time = var_Ca__bss_sr * (-((var_Ca__Idiff + var_Ca__Idiff_ss) - (((2.0 * var_Ca__INaCa_ss_sr * var_Ca__AF) / (2.0 * var_Ca__Vss_sr)) + ((var_Ca__Irel * var_Ca__Vjsr) / var_Ca__Vss_sr)))); // 'millimole per litre per millisecond'
        const double var_Ca__d_Ca_ss_CaL_d_environment__time = var_Ca__bss * (-(((var_Ca__ICaL * var_Ca__AF) / (2.0 * var_Ca__Vss_CaL)) - ((var_Ca__Idiff_ss * var_Ca__Vss_sr) / var_Ca__Vss_CaL))); // 'millimole per litre per millisecond'
        const double var_Na__Na_i = var_chaste_interface__Na__Na_i; // mM
        const double var_Na__Na_ss_sr = var_chaste_interface__Na__Na_ss_sr; // mM
        const double var_Na__tau_diff = var_Ca__tau_diff; // ms
        const double var_Na__Idiff_Na = (var_Na__Na_ss_sr - var_Na__Na_i) / var_Na__tau_diff; // mM_per_ms
        const double var_Na__AF = var_cell_geometry__AF; // uF_mole_per_C
        const double var_Na__INaCa = var_INaCa__INaCa; // uA_per_uF
        const double var_Na__INaCa_ss_sr = var_INaCa__INaCa_ss_sr; // uA_per_uF
        const double var_Na__INaK = var_INaK__INaK; // uA_per_uF
        const double var_Na__INa = var_INa__INa; // uA_per_uF
        const double var_Na__INaL = var_INaL__INaL; // uA_per_uF
        const double var_Na__INab = var_INab__INab; // uA_per_uF
        const double var_Na__Vmyo = var_cell_geometry__Vmyo; // uL
        const double var_Na__Vss_sr = var_cell_geometry__Vss_sr; // uL
        const double var_Na__CT_Na_Cl = var_CT_Na_Cl__CT_Na_Cl; // mM_per_ms
        const double var_Na__d_Na_i_d_environment__time = -(((((3.0 * var_Na__INaCa) + (3.0 * var_Na__INaK) + var_Na__INa + var_Na__INaL + var_Na__INab) * var_Na__AF) / var_Na__Vmyo) - (var_Na__CT_Na_Cl + ((var_Na__Idiff_Na * var_Na__Vss_sr) / var_Na__Vmyo))); // 'millimole per litre per millisecond'
        const double var_Na__d_Na_ss_sr_d_environment__time = -(((3.0 * var_Na__INaCa_ss_sr * var_Na__AF) / var_Na__Vss_sr) + var_Na__Idiff_Na); // 'millimole per litre per millisecond'
        const double var_Cl__Cl_i = var_chaste_interface__Cl__Cl_i; // mM
        const double var_Cl__Cl_ss = var_chaste_interface__Cl__Cl_ss; // mM
        const double var_Cl__tau_diff = var_Ca__tau_diff; // ms
        const double var_Cl__Idiff_Cl = (var_Cl__Cl_ss - var_Cl__Cl_i) / var_Cl__tau_diff; // mM_per_ms
        const double var_Cl__AF = var_cell_geometry__AF; // uF_mole_per_C
        const double var_Cl__Ito2 = var_Ito2__Ito2; // uA_per_uF
        const double var_Cl__IClb = var_IClb__IClb; // uA_per_uF
        const double var_Cl__Vmyo = var_cell_geometry__Vmyo; // uL
        const double var_Cl__Vss_sr = var_cell_geometry__Vss_sr; // uL
        const double var_Cl__CT_Na_Cl = var_CT_Na_Cl__CT_Na_Cl; // mM_per_ms
        const double var_Cl__CT_K_Cl = var_CT_K_Cl__CT_K_Cl; // mM_per_ms
        const double var_Cl__d_Cl_i_d_environment__time = -(((var_Cl__IClb * var_Cl__AF) / ((-1.0) * var_Cl__Vmyo)) - (var_Cl__CT_Na_Cl + var_Cl__CT_K_Cl + ((var_Cl__Idiff_Cl * var_Cl__Vss_sr) / var_Cl__Vmyo))); // 'millimole per litre per millisecond'
        const double var_Cl__d_Cl_ss_d_environment__time = -(((var_Cl__Ito2 * var_Cl__AF) / ((-1.0) * var_Cl__Vss_sr)) + var_Cl__Idiff_Cl); // 'millimole per litre per millisecond'
        const double var_K__AF = var_cell_geometry__AF; // uF_mole_per_C
        const double var_K__IKs = var_IKs__IKs; // uA_per_uF
        const double var_K__IKr = var_IKr__IKr; // uA_per_uF
        const double var_K__IK1 = var_IK1__IK1; // uA_per_uF
        const double var_K__Ito1 = var_Ito1__Ito1; // uA_per_uF
        const double var_K__IKp = var_IKp__IKp; // uA_per_uF
        const double var_K__INaK = var_INaK__INaK; // uA_per_uF
        const double var_K__I_stim_converter = var_chaste_interface__membrane__i_Stim; // uA_per_cm2
        const double var_K__chaste_interface__chaste_membrane_capacitance = HeartConfig::Instance()->GetCapacitance(); // uF_per_cm2
        const double var_K__I_stim = var_K__I_stim_converter / var_K__chaste_interface__chaste_membrane_capacitance; // uA_per_uF
        const double var_K__Vmyo = var_cell_geometry__Vmyo; // uL
        const double var_K__CT_K_Cl = var_CT_K_Cl__CT_K_Cl; // mM_per_ms
        const double var_K__d_K_i_d_environment__time = -(((((var_K__IKs + var_K__IKr + var_K__IK1 + var_K__Ito1 + var_K__IKp + var_K__I_stim) - (2.0 * var_K__INaK)) * var_K__AF) / var_K__Vmyo) - var_K__CT_K_Cl); // 'millimole per litre per millisecond'
        const double var_CaMK_active__alpha_CaMK = 0.050000000000000003; // per_ms
        const double var_CaMK_active__beta_CaMK = 0.00068000000000000005; // per_ms
        const double var_CaMK_active__d_CaMK_trap_d_environment__time = (var_CaMK_active__alpha_CaMK * var_CaMK_active__CaMK_active * (var_CaMK_active__CaMK_active - var_CaMK_active__CaMK_trap)) - (var_CaMK_active__beta_CaMK * var_CaMK_active__CaMK_trap); // 'per millisecond'
        const double var_chaste_interface__Ca__d_Ca_i_d_environment__time = var_Ca__d_Ca_i_d_environment__time; // ___units_85
        const double var_chaste_interface__IKs__d_C1_d_environment__time = var_IKs__d_C1_d_environment__time; // ___units_19
        const double var_chaste_interface__IKs__d_C2_d_environment__time = var_IKs__d_C2_d_environment__time; // ___units_19
        const double var_chaste_interface__IKs__d_C3_d_environment__time = var_IKs__d_C3_d_environment__time; // ___units_19
        const double var_chaste_interface__IKs__d_C4_d_environment__time = var_IKs__d_C4_d_environment__time; // ___units_19
        const double var_chaste_interface__IKs__d_C5_d_environment__time = var_IKs__d_C5_d_environment__time; // ___units_19
        const double var_chaste_interface__IKs__d_C6_d_environment__time = var_IKs__d_C6_d_environment__time; // ___units_19
        const double var_chaste_interface__IKs__d_C7_d_environment__time = var_IKs__d_C7_d_environment__time; // ___units_19
        const double var_chaste_interface__IKs__d_C8_d_environment__time = var_IKs__d_C8_d_environment__time; // ___units_19
        const double var_chaste_interface__IKs__d_C9_d_environment__time = var_IKs__d_C9_d_environment__time; // ___units_19
        const double var_chaste_interface__IKs__d_C10_d_environment__time = var_IKs__d_C10_d_environment__time; // ___units_19
        const double var_chaste_interface__IKs__d_C11_d_environment__time = var_IKs__d_C11_d_environment__time; // ___units_19
        const double var_chaste_interface__IKs__d_C12_d_environment__time = var_IKs__d_C12_d_environment__time; // ___units_19
        const double var_chaste_interface__IKs__d_C13_d_environment__time = var_IKs__d_C13_d_environment__time; // ___units_19
        const double var_chaste_interface__IKs__d_C14_d_environment__time = var_IKs__d_C14_d_environment__time; // ___units_19
        const double var_chaste_interface__IKs__d_C15_d_environment__time = var_IKs__d_C15_d_environment__time; // ___units_19
        const double var_chaste_interface__IKs__d_O1_d_environment__time = var_IKs__d_O1_d_environment__time; // ___units_19
        const double var_chaste_interface__IKs__d_O2_d_environment__time = var_IKs__d_O2_d_environment__time; // ___units_19
        const double var_chaste_interface__ICaL__d_C_d_environment__time = var_ICaL__d_C_d_environment__time; // ___units_19
        const double var_chaste_interface__ICaL__d_O_d_environment__time = var_ICaL__d_O_d_environment__time; // ___units_19
        const double var_chaste_interface__ICaL__d_C_star_d_environment__time = var_ICaL__d_C_star_d_environment__time; // ___units_19
        const double var_chaste_interface__ICaL__d_O_star_d_environment__time = var_ICaL__d_O_star_d_environment__time; // ___units_19
        const double var_chaste_interface__ICaL__d_CI_d_environment__time = var_ICaL__d_CI_d_environment__time; // ___units_19
        const double var_chaste_interface__ICaL__d_OI_d_environment__time = var_ICaL__d_OI_d_environment__time; // ___units_19
        const double var_chaste_interface__ICaL__d_CI_star_d_environment__time = var_ICaL__d_CI_star_d_environment__time; // ___units_19
        const double var_chaste_interface__ICaL__d_OI_star_d_environment__time = var_ICaL__d_OI_star_d_environment__time; // ___units_19
        const double var_chaste_interface__INa_m_gate__d_m_d_environment__time = var_INa__INa_m_gate__d_m_d_environment__time; // ___units_19
        const double var_chaste_interface__INa_h_gate__d_h_d_environment__time = var_INa__INa_h_gate__d_h_d_environment__time; // ___units_19
        const double var_chaste_interface__INa_j_gate__d_j_d_environment__time = var_INa__INa_j_gate__d_j_d_environment__time; // ___units_19
        const double var_chaste_interface__INaL_mL_gate__d_mL_d_environment__time = var_INaL__INaL_mL_gate__d_mL_d_environment__time; // ___units_19
        const double var_chaste_interface__INaL_hL_gate__d_hL_d_environment__time = var_INaL__INaL_hL_gate__d_hL_d_environment__time; // ___units_19
        const double var_chaste_interface__IKr_xr_gate__d_xr_d_environment__time = var_IKr__IKr_xr_gate__d_xr_d_environment__time; // ___units_19
        const double var_chaste_interface__Ito1_a_gate__d_a_d_environment__time = var_Ito1__Ito1_a_gate__d_a_d_environment__time; // ___units_19
        const double var_chaste_interface__Ito1_i1f_gate__d_i1f_d_environment__time = var_Ito1__Ito1_i1f_gate__d_i1f_d_environment__time; // ___units_19
        const double var_chaste_interface__Ito1_i1s_gate__d_i1s_d_environment__time = var_Ito1__Ito1_i1s_gate__d_i1s_d_environment__time; // ___units_19
        const double var_chaste_interface__Ito2_i2f_gate__d_i2f_d_environment__time = var_Ito2__Ito2_i2f_gate__d_i2f_d_environment__time; // ___units_19
        const double var_chaste_interface__Irel__d_Irel_d_environment__time = var_Irel__d_Irel_d_environment__time; // ___units_87
        const double var_chaste_interface__Ca__d_Ca_JSR_d_environment__time = var_Ca__d_Ca_JSR_d_environment__time; // ___units_88
        const double var_chaste_interface__Ca__d_Ca_NSR_d_environment__time = var_Ca__d_Ca_NSR_d_environment__time; // ___units_88
        const double var_chaste_interface__Ca__d_Ca_ss_sr_d_environment__time = var_Ca__d_Ca_ss_sr_d_environment__time; // ___units_88
        const double var_chaste_interface__Ca__d_Ca_ss_CaL_d_environment__time = var_Ca__d_Ca_ss_CaL_d_environment__time; // ___units_88
        const double var_chaste_interface__Na__d_Na_i_d_environment__time = var_Na__d_Na_i_d_environment__time; // ___units_88
        const double var_chaste_interface__Na__d_Na_ss_sr_d_environment__time = var_Na__d_Na_ss_sr_d_environment__time; // ___units_88
        const double var_chaste_interface__Cl__d_Cl_i_d_environment__time = var_Cl__d_Cl_i_d_environment__time; // ___units_88
        const double var_chaste_interface__Cl__d_Cl_ss_d_environment__time = var_Cl__d_Cl_ss_d_environment__time; // ___units_88
        const double var_chaste_interface__K__d_K_i_d_environment__time = var_K__d_K_i_d_environment__time; // ___units_88
        const double var_chaste_interface__CaMK_active__d_CaMK_trap_d_environment__time = var_CaMK_active__d_CaMK_trap_d_environment__time; // ___units_19
        const double d_dt_chaste_interface__Ca__Ca_i = var_chaste_interface__Ca__d_Ca_i_d_environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__IKs__C1 = var_chaste_interface__IKs__d_C1_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C2 = var_chaste_interface__IKs__d_C2_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C3 = var_chaste_interface__IKs__d_C3_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C4 = var_chaste_interface__IKs__d_C4_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C5 = var_chaste_interface__IKs__d_C5_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C6 = var_chaste_interface__IKs__d_C6_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C7 = var_chaste_interface__IKs__d_C7_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C8 = var_chaste_interface__IKs__d_C8_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C9 = var_chaste_interface__IKs__d_C9_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C10 = var_chaste_interface__IKs__d_C10_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C11 = var_chaste_interface__IKs__d_C11_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C12 = var_chaste_interface__IKs__d_C12_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C13 = var_chaste_interface__IKs__d_C13_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C14 = var_chaste_interface__IKs__d_C14_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C15 = var_chaste_interface__IKs__d_C15_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__O1 = var_chaste_interface__IKs__d_O1_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs__O2 = var_chaste_interface__IKs__d_O2_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__C = var_chaste_interface__ICaL__d_C_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__O = var_chaste_interface__ICaL__d_O_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__C_star = var_chaste_interface__ICaL__d_C_star_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__O_star = var_chaste_interface__ICaL__d_O_star_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__CI = var_chaste_interface__ICaL__d_CI_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__OI = var_chaste_interface__ICaL__d_OI_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__CI_star = var_chaste_interface__ICaL__d_CI_star_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__OI_star = var_chaste_interface__ICaL__d_OI_star_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__INa_m_gate__m = var_chaste_interface__INa_m_gate__d_m_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__INa_h_gate__h = var_chaste_interface__INa_h_gate__d_h_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__INa_j_gate__j = var_chaste_interface__INa_j_gate__d_j_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__INaL_mL_gate__mL = var_chaste_interface__INaL_mL_gate__d_mL_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__INaL_hL_gate__hL = var_chaste_interface__INaL_hL_gate__d_hL_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKr_xr_gate__xr = var_chaste_interface__IKr_xr_gate__d_xr_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Ito1_a_gate__a = var_chaste_interface__Ito1_a_gate__d_a_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Ito1_i1f_gate__i1f = var_chaste_interface__Ito1_i1f_gate__d_i1f_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Ito1_i1s_gate__i1s = var_chaste_interface__Ito1_i1s_gate__d_i1s_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Ito2_i2f_gate__i2f = var_chaste_interface__Ito2_i2f_gate__d_i2f_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Irel__Irel = var_chaste_interface__Irel__d_Irel_d_environment__time; // 'mM per millisecond per ms'
        const double d_dt_chaste_interface__Ca__Ca_JSR = var_chaste_interface__Ca__d_Ca_JSR_d_environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_NSR = var_chaste_interface__Ca__d_Ca_NSR_d_environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_ss_sr = var_chaste_interface__Ca__d_Ca_ss_sr_d_environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_ss_CaL = var_chaste_interface__Ca__d_Ca_ss_CaL_d_environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Na__Na_i = var_chaste_interface__Na__d_Na_i_d_environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Na__Na_ss_sr = var_chaste_interface__Na__d_Na_ss_sr_d_environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Cl__Cl_i = var_chaste_interface__Cl__d_Cl_i_d_environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Cl__Cl_ss = var_chaste_interface__Cl__d_Cl_ss_d_environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__K__K_i = var_chaste_interface__K__d_K_i_d_environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__CaMK_active__CaMK_trap = var_chaste_interface__CaMK_active__d_CaMK_trap_d_environment__time; // 'per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__Vm = 0.0;
        }
        else
        {
            const double var_membrane__i_Stim_converter = var_chaste_interface__membrane__i_Stim; // uA_per_cm2
            const double var_membrane__chaste_interface__chaste_membrane_capacitance = HeartConfig::Instance()->GetCapacitance(); // uF_per_cm2
            const double var_membrane__i_Stim = var_membrane__i_Stim_converter / var_membrane__chaste_interface__chaste_membrane_capacitance; // uA_per_uF
            const double var_membrane__ICaL = var_ICaL__ICaL; // uA_per_uF
            const double var_membrane__INaCa_ss_sr = var_INaCa__INaCa_ss_sr; // uA_per_uF
            const double var_membrane__IpCa = var_IpCa__IpCa; // uA_per_uF
            const double var_membrane__ICab = var_ICab__ICab; // uA_per_uF
            const double var_membrane__INaCa = var_INaCa__INaCa; // uA_per_uF
            const double var_membrane__caiont = (var_membrane__ICaL + var_membrane__ICab + var_membrane__IpCa) - (2.0 * (var_membrane__INaCa + var_membrane__INaCa_ss_sr)); // uA_per_uF
            const double var_membrane__INa = var_INa__INa; // uA_per_uF
            const double var_membrane__INab = var_INab__INab; // uA_per_uF
            const double var_membrane__INaL = var_INaL__INaL; // uA_per_uF
            const double var_membrane__INaK = var_INaK__INaK; // uA_per_uF
            const double var_membrane__naiont = var_membrane__INa + (3.0 * (var_membrane__INaCa + var_membrane__INaCa_ss_sr)) + (3.0 * var_membrane__INaK) + var_membrane__INaL + var_membrane__INab; // uA_per_uF
            const double var_membrane__Ito1 = var_Ito1__Ito1; // uA_per_uF
            const double var_membrane__IKr = var_IKr__IKr; // uA_per_uF
            const double var_membrane__IKs = var_IKs__IKs; // uA_per_uF
            const double var_membrane__IKp = var_IKp__IKp; // uA_per_uF
            const double var_membrane__IK1 = var_IK1__IK1; // uA_per_uF
            const double var_membrane__kiont = var_membrane__IKr + var_membrane__IKs + var_membrane__IK1 + var_membrane__IKp + ((-2.0) * var_membrane__INaK) + var_membrane__Ito1 + var_membrane__i_Stim; // uA_per_uF
            const double var_membrane__IClb = var_IClb__IClb; // uA_per_uF
            const double var_membrane__Ito2 = var_Ito2__Ito2; // uA_per_uF
            const double var_membrane__clont = var_membrane__IClb + var_membrane__Ito2; // uA_per_uF
            const double var_membrane__d_Vm_d_environment__time = -(var_membrane__naiont + var_membrane__kiont + var_membrane__caiont + var_membrane__clont); // 'millivolt per millisecond'
            const double var_chaste_interface__membrane__d_Vm_d_environment__time = var_membrane__d_Vm_d_environment__time; // ___units_13
            d_dt_chaste_interface__membrane__Vm = var_chaste_interface__membrane__d_Vm_d_environment__time; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__membrane__Vm;
        rDY[1] = d_dt_chaste_interface__Ca__Ca_i;
        rDY[2] = d_dt_chaste_interface__IKs__C1;
        rDY[3] = d_dt_chaste_interface__IKs__C2;
        rDY[4] = d_dt_chaste_interface__IKs__C3;
        rDY[5] = d_dt_chaste_interface__IKs__C4;
        rDY[6] = d_dt_chaste_interface__IKs__C5;
        rDY[7] = d_dt_chaste_interface__IKs__C6;
        rDY[8] = d_dt_chaste_interface__IKs__C7;
        rDY[9] = d_dt_chaste_interface__IKs__C8;
        rDY[10] = d_dt_chaste_interface__IKs__C9;
        rDY[11] = d_dt_chaste_interface__IKs__C10;
        rDY[12] = d_dt_chaste_interface__IKs__C11;
        rDY[13] = d_dt_chaste_interface__IKs__C12;
        rDY[14] = d_dt_chaste_interface__IKs__C13;
        rDY[15] = d_dt_chaste_interface__IKs__C14;
        rDY[16] = d_dt_chaste_interface__IKs__C15;
        rDY[17] = d_dt_chaste_interface__IKs__O1;
        rDY[18] = d_dt_chaste_interface__IKs__O2;
        rDY[19] = d_dt_chaste_interface__ICaL__C;
        rDY[20] = d_dt_chaste_interface__ICaL__O;
        rDY[21] = d_dt_chaste_interface__ICaL__C_star;
        rDY[22] = d_dt_chaste_interface__ICaL__O_star;
        rDY[23] = d_dt_chaste_interface__ICaL__CI;
        rDY[24] = d_dt_chaste_interface__ICaL__OI;
        rDY[25] = d_dt_chaste_interface__ICaL__CI_star;
        rDY[26] = d_dt_chaste_interface__ICaL__OI_star;
        rDY[27] = d_dt_chaste_interface__INa_m_gate__m;
        rDY[28] = d_dt_chaste_interface__INa_h_gate__h;
        rDY[29] = d_dt_chaste_interface__INa_j_gate__j;
        rDY[30] = d_dt_chaste_interface__INaL_mL_gate__mL;
        rDY[31] = d_dt_chaste_interface__INaL_hL_gate__hL;
        rDY[32] = d_dt_chaste_interface__IKr_xr_gate__xr;
        rDY[33] = d_dt_chaste_interface__Ito1_a_gate__a;
        rDY[34] = d_dt_chaste_interface__Ito1_i1f_gate__i1f;
        rDY[35] = d_dt_chaste_interface__Ito1_i1s_gate__i1s;
        rDY[36] = d_dt_chaste_interface__Ito2_i2f_gate__i2f;
        rDY[37] = d_dt_chaste_interface__Irel__Irel;
        rDY[38] = d_dt_chaste_interface__Ca__Ca_JSR;
        rDY[39] = d_dt_chaste_interface__Ca__Ca_NSR;
        rDY[40] = d_dt_chaste_interface__Ca__Ca_ss_sr;
        rDY[41] = d_dt_chaste_interface__Ca__Ca_ss_CaL;
        rDY[42] = d_dt_chaste_interface__Na__Na_i;
        rDY[43] = d_dt_chaste_interface__Na__Na_ss_sr;
        rDY[44] = d_dt_chaste_interface__Cl__Cl_i;
        rDY[45] = d_dt_chaste_interface__Cl__Cl_ss;
        rDY[46] = d_dt_chaste_interface__K__K_i;
        rDY[47] = d_dt_chaste_interface__CaMK_active__CaMK_trap;
    }
    
template<>
void OdeSystemInformation<Dynamicdecker_2009FromCellML>::Initialise(void)
{
    this->mSystemName = "decker_2009";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-87.472528);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.09945e-5);

    // rY[2]:
    this->mVariableNames.push_back("IKs__C1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.476653873938053);

    // rY[3]:
    this->mVariableNames.push_back("IKs__C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.2551771850026437);

    // rY[4]:
    this->mVariableNames.push_back("IKs__C3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.05122852186842027);

    // rY[5]:
    this->mVariableNames.push_back("IKs__C4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.004570874421666423);

    // rY[6]:
    this->mVariableNames.push_back("IKs__C5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001529389211563687);

    // rY[7]:
    this->mVariableNames.push_back("IKs__C6");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.1328281770413747);

    // rY[8]:
    this->mVariableNames.push_back("IKs__C7");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.05333228495514583);

    // rY[9]:
    this->mVariableNames.push_back("IKs__C8");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.007137874613383642);

    // rY[10]:
    this->mVariableNames.push_back("IKs__C9");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0003184390970637536);

    // rY[11]:
    this->mVariableNames.push_back("IKs__C10");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.01388061042363991);

    // rY[12]:
    this->mVariableNames.push_back("IKs__C11");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.003715500164470033);

    // rY[13]:
    this->mVariableNames.push_back("IKs__C12");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0002486371465457659);

    // rY[14]:
    this->mVariableNames.push_back("IKs__C13");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0006446803014431032);

    // rY[15]:
    this->mVariableNames.push_back("IKs__C14");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.628258026770862e-5);

    // rY[16]:
    this->mVariableNames.push_back("IKs__C15");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.122823524761588e-5);

    // rY[17]:
    this->mVariableNames.push_back("IKs__O1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.051906959485266e-5);

    // rY[18]:
    this->mVariableNames.push_back("IKs__O2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.372219883411999e-6);

    // rY[19]:
    this->mVariableNames.push_back("ICaL__C");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999613782488198);

    // rY[20]:
    this->mVariableNames.push_back("ICaL__O");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.27419494597377e-5);

    // rY[21]:
    this->mVariableNames.push_back("ICaL__C_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.936477396599124e-11);

    // rY[22]:
    this->mVariableNames.push_back("ICaL__O_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.350122566369778e-15);

    // rY[23]:
    this->mVariableNames.push_back("ICaL__CI");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.587938121237188e-5);

    // rY[24]:
    this->mVariableNames.push_back("ICaL__OI");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.611420243201921e-10);

    // rY[25]:
    this->mVariableNames.push_back("ICaL__CI_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[26]:
    this->mVariableNames.push_back("ICaL__OI_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[27]:
    this->mVariableNames.push_back("INa_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001022252813581797);

    // rY[28]:
    this->mVariableNames.push_back("INa_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9913109066867);

    // rY[29]:
    this->mVariableNames.push_back("INa_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9970771239754529);

    // rY[30]:
    this->mVariableNames.push_back("INaL_mL_gate__mL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001022252813581797);

    // rY[31]:
    this->mVariableNames.push_back("INaL_hL_gate__hL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.3593255076983574);

    // rY[32]:
    this->mVariableNames.push_back("IKr_xr_gate__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.235996442041028e-8);

    // rY[33]:
    this->mVariableNames.push_back("Ito1_a_gate__a");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.773318268499115e-5);

    // rY[34]:
    this->mVariableNames.push_back("Ito1_i1f_gate__i1f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9979722);

    // rY[35]:
    this->mVariableNames.push_back("Ito1_i1s_gate__i1s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9874435);

    // rY[36]:
    this->mVariableNames.push_back("Ito2_i2f_gate__i2f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9960352);

    // rY[37]:
    this->mVariableNames.push_back("Irel__Irel");
    this->mVariableUnits.push_back("mM_per_ms");
    this->mInitialConditions.push_back(0.00107332);

    // rY[38]:
    this->mVariableNames.push_back("Ca__Ca_JSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.917692717);

    // rY[39]:
    this->mVariableNames.push_back("Ca__Ca_NSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.929835335);

    // rY[40]:
    this->mVariableNames.push_back("Ca__Ca_ss_sr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(9.04757e-5);

    // rY[41]:
    this->mVariableNames.push_back("Ca__Ca_ss_CaL");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(9.61545e-5);

    // rY[42]:
    this->mVariableNames.push_back("Na__Na_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(6.935575);

    // rY[43]:
    this->mVariableNames.push_back("Na__Na_ss_sr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(6.935607);

    // rY[44]:
    this->mVariableNames.push_back("Cl__Cl_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(20.26842);

    // rY[45]:
    this->mVariableNames.push_back("Cl__Cl_ss");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(20.26842);

    // rY[46]:
    this->mVariableNames.push_back("K__K_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(145.5689);

    // rY[47]:
    this->mVariableNames.push_back("CaMK_active__CaMK_trap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0018861341);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamicdecker_2009FromCellML)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamicdecker_2009FromCellML(pSolver, pStimulus);
    }
    
}

