//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: priebe_beuckelmann_model_1998
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on Fri Nov 29 17:06:14 2019
//! 
//! <autogenerated>

#include "priebe_beuckelmann_model_1998.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Dynamicpriebe_beuckelmann_model_1998FromCellML::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_offset = 0.0; // millisecond
        const double var_chaste_interface__cell__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_cell__stim_amplitude =  -15.0; // uA_per_uF
        const double var_chaste_interface__cell__stim_amplitude_converter = var_cell__stim_amplitude; // uA_per_uF
        const double var_chaste_interface__cell__stim_amplitude = var_chaste_interface__cell__stim_amplitude_converter * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double Dynamicpriebe_beuckelmann_model_1998FromCellML::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    
    Dynamicpriebe_beuckelmann_model_1998FromCellML::Dynamicpriebe_beuckelmann_model_1998FromCellML(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                22,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamicpriebe_beuckelmann_model_1998FromCellML>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
    }
    
    Dynamicpriebe_beuckelmann_model_1998FromCellML::~Dynamicpriebe_beuckelmann_model_1998FromCellML()
    {
    }
    
    double Dynamicpriebe_beuckelmann_model_1998FromCellML::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
        // Units: millimolar; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = rY[5];
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = rY[6];
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = rY[7];
        // Units: dimensionless; Initial value: 1.75032478501027e-5
        double var_chaste_interface__Ito_t_gate__t = rY[8];
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[9];
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[10];
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
        // Units: mM; Initial value: 10
        double var_chaste_interface__Ionic_concentrations__Ki = rY[19];
        // Units: mM; Initial value: 140
        
        const double var_cell__R = 8.3142999999999994; // joule_per_mole_kelvin
        const double var_cell__T = 310.14999999999998; // kelvin
        const double var_cell__F = 96.486699999999999; // coulomb_per_millimole
        const double var_cell__FonRT = var_cell__F / (var_cell__R * var_cell__T); // per_mV
        const double var_cell__failing = 0.0; // dimensionless
        const double var_INa__V = var_chaste_interface__cell__V; // mV
        const double var_INa__Nai = var_chaste_interface__Ionic_concentrations__Nai; // mM
        const double var_INa__FonRT = var_cell__FonRT; // per_mV
        const double var_Ionic_concentrations__Nao = 138.0; // mM
        const double var_INa__Nao = var_Ionic_concentrations__Nao; // mM
        const double var_INa__E_Na = log(var_INa__Nao / var_INa__Nai) / var_INa__FonRT; // mV
        const double var_INa__g_Na = 16.0; // mS_per_uF
        const double var_INa__m = var_chaste_interface__INa_m_gate__m; // dimensionless
        const double var_INa__j = var_chaste_interface__INa_j_gate__j; // dimensionless
        const double var_INa__h = var_chaste_interface__INa_h_gate__h; // dimensionless
        const double var_INa__i_Na = var_INa__g_Na * pow(var_INa__m, 3.0) * var_INa__h * var_INa__j * (var_INa__V - var_INa__E_Na); // uA_per_uF
        const double var_cell__i_Na = var_INa__i_Na; // uA_per_uF
        const double var_ICa__f = var_chaste_interface__ICa_f_gate__f; // dimensionless
        const double var_ICa_f_Ca_gate__Km_Ca = 0.00059999999999999995; // mM
        const double var_ICa__Cai = var_chaste_interface__Ionic_concentrations__Cai; // mM
        const double var_ICa_f_Ca_gate__Cai = var_ICa__Cai; // mM
        const double var_ICa_f_Ca_gate__f_Ca = var_ICa_f_Ca_gate__Km_Ca / (var_ICa_f_Ca_gate__Km_Ca + var_ICa_f_Ca_gate__Cai); // dimensionless
        const double var_ICa__f_Ca = var_ICa_f_Ca_gate__f_Ca; // dimensionless
        const double var_ICa__V = var_chaste_interface__cell__V; // mV
        const double var_ICa__d = var_chaste_interface__ICa_d_gate__d; // dimensionless
        const double var_ICa__FonRT = var_cell__FonRT; // per_mV
        const double var_Ionic_concentrations__Cao = 2.0; // mM
        const double var_ICa__Cao = var_Ionic_concentrations__Cao; // mM
        const double var_ICa__E_Ca = log(var_ICa__Cao / var_ICa__Cai) / (2.0 * var_ICa__FonRT); // mV
        const double var_ICa__g_Ca_max = 0.064000000000000001; // mS_per_uF
        const double var_ICa__i_Ca = var_ICa__g_Ca_max * var_ICa__d * var_ICa__f * var_ICa__f_Ca * (var_ICa__V - var_ICa__E_Ca); // uA_per_uF
        const double var_cell__i_Ca = var_ICa__i_Ca; // uA_per_uF
        const double var_Ito__r = var_chaste_interface__Ito_r_gate__r; // dimensionless
        const double var_Ito__V = var_chaste_interface__cell__V; // mV
        const double var_Ito__t = var_chaste_interface__Ito_t_gate__t; // dimensionless
        const double var_Ito__FonRT = var_cell__FonRT; // per_mV
        const double var_Ito__Nao = var_Ionic_concentrations__Nao; // mM
        const double var_Ito__Ki = var_chaste_interface__Ionic_concentrations__Ki; // mM
        const double var_Ito__Nai = var_chaste_interface__Ionic_concentrations__Nai; // mM
        const double var_Ionic_concentrations__Ko = 4.0; // mM
        const double var_Ito__Ko = var_Ionic_concentrations__Ko; // mM
        const double var_Ito__E_to = log(((0.042999999999999997 * var_Ito__Nao) + var_Ito__Ko) / ((0.042999999999999997 * var_Ito__Nai) + var_Ito__Ki)) / var_Ito__FonRT; // mV
        const double var_Ito__failing = var_cell__failing; // dimensionless
        const double var_Ito__g_to_max = (var_Ito__failing == 0.0) ? 0.29999999999999999 : 0.191; // mS_per_uF
        const double var_Ito__i_to = var_Ito__g_to_max * var_Ito__r * var_Ito__t * (var_Ito__V - var_Ito__E_to); // uA_per_uF
        const double var_cell__i_to = var_Ito__i_to; // uA_per_uF
        const double var_IKr__Xr = var_chaste_interface__IKr_Xr_gate__Xr; // dimensionless
        const double var_IKr__V = var_chaste_interface__cell__V; // mV
        const double var_IKr__rik = 1.0 / (1.0 + exp((var_IKr__V + 26.0) / 23.0)); // dimensionless
        const double var_IKr__g_Kr_max = 0.014999999999999999; // mS_per_uF
        const double var_IKr__FonRT = var_cell__FonRT; // per_mV
        const double var_IKr__Ki = var_chaste_interface__Ionic_concentrations__Ki; // mM
        const double var_IKr__Ko = var_Ionic_concentrations__Ko; // mM
        const double var_IKr__E_K = log(var_IKr__Ko / var_IKr__Ki) / var_IKr__FonRT; // mV
        const double var_IKr__i_Kr = var_IKr__g_Kr_max * var_IKr__Xr * var_IKr__rik * (var_IKr__V - var_IKr__E_K); // uA_per_uF
        const double var_cell__i_Kr = var_IKr__i_Kr; // uA_per_uF
        const double var_IKs__Xs = var_chaste_interface__IKs_Xs_gate__Xs; // dimensionless
        const double var_IKs__Nao = var_Ionic_concentrations__Nao; // mM
        const double var_IKs__Ki = var_chaste_interface__Ionic_concentrations__Ki; // mM
        const double var_IKs__Ko = var_Ionic_concentrations__Ko; // mM
        const double var_IKs__FonRT = var_cell__FonRT; // per_mV
        const double var_IKs__Nai = var_chaste_interface__Ionic_concentrations__Nai; // mM
        const double var_IKs__E_Ks = log(((0.018329999999999999 * var_IKs__Nao) + var_IKs__Ko) / ((0.018329999999999999 * var_IKs__Nai) + var_IKs__Ki)) / var_IKs__FonRT; // mV
        const double var_IKs__g_Ks_max = 0.02; // mS_per_uF
        const double var_IKs__V = var_chaste_interface__cell__V; // mV
        const double var_IKs__i_Ks = var_IKs__g_Ks_max * pow(var_IKs__Xs, 2.0) * (var_IKs__V - var_IKs__E_Ks); // uA_per_uF
        const double var_cell__i_Ks = var_IKs__i_Ks; // uA_per_uF
        const double var_IK1__V = var_chaste_interface__cell__V; // mV
        const double var_IK1_K1_gate__V = var_IK1__V; // mV
        const double var_IK1__Ki = var_chaste_interface__Ionic_concentrations__Ki; // mM
        const double var_IK1__FonRT = var_cell__FonRT; // per_mV
        const double var_IK1__Ko = var_Ionic_concentrations__Ko; // mM
        const double var_IK1__E_K1 = log(var_IK1__Ko / var_IK1__Ki) / var_IK1__FonRT; // mV
        const double var_IK1_K1_gate__E_K1 = var_IK1__E_K1; // mV
        const double var_IK1_K1_gate__beta_K1 = ((3.0 * exp(0.00020000000000000001 * (var_IK1_K1_gate__V + 100.0 + (-var_IK1_K1_gate__E_K1)))) + (1.0 * exp(0.10000000000000001 * (var_IK1_K1_gate__V - (10.0 + var_IK1_K1_gate__E_K1))))) / (1.0 + exp((-0.5) * (var_IK1_K1_gate__V - var_IK1_K1_gate__E_K1))); // per_ms
        const double var_IK1_K1_gate__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * (var_IK1_K1_gate__V - (var_IK1_K1_gate__E_K1 + 200.0)))); // per_ms
        const double var_IK1_K1_gate__K1_infinity = var_IK1_K1_gate__alpha_K1 / (var_IK1_K1_gate__alpha_K1 + var_IK1_K1_gate__beta_K1); // dimensionless
        const double var_IK1__K1_infinity = var_IK1_K1_gate__K1_infinity; // dimensionless
        const double var_IK1__failing = var_cell__failing; // dimensionless
        const double var_IK1__g_K1_max = (var_IK1__failing == 0.0) ? 2.5 : 2.0; // mS_per_uF
        const double var_IK1__i_K1 = var_IK1__g_K1_max * var_IK1__K1_infinity * (var_IK1__V - var_IK1__E_K1); // uA_per_uF
        const double var_cell__i_K1 = var_IK1__i_K1; // uA_per_uF
        const double var_INaCa__K_mNa = 87.5; // mM
        const double var_INaCa__K_sat = 0.10000000000000001; // dimensionless
        const double var_INaCa__Nao = var_Ionic_concentrations__Nao; // mM
        const double var_INaCa__Cao = var_Ionic_concentrations__Cao; // mM
        const double var_INaCa__V = var_chaste_interface__cell__V; // mV
        const double var_INaCa__K_mCa = 1.3799999999999999; // mM
        const double var_INaCa__Nai = var_chaste_interface__Ionic_concentrations__Nai; // mM
        const double var_INaCa__FonRT = var_cell__FonRT; // per_mV
        const double var_INaCa__failing = var_cell__failing; // dimensionless
        const double var_INaCa__K_NaCa = (var_INaCa__failing == 0.0) ? 1000.0 : 1650.0; // uA_per_uF
        const double var_INaCa__Cai = var_chaste_interface__Ionic_concentrations__Cai; // mM
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__i_NaCa = ((((((var_INaCa__K_NaCa * 1.0) / (pow(var_INaCa__K_mNa, 3.0) + pow(var_INaCa__Nao, 3.0))) * 1.0) / (var_INaCa__K_mCa + var_INaCa__Cao)) * 1.0) / (1.0 + (var_INaCa__K_sat * exp((var_INaCa__eta - 1.0) * var_INaCa__V * var_INaCa__FonRT)))) * ((exp(var_INaCa__eta * var_INaCa__V * var_INaCa__FonRT) * pow(var_INaCa__Nai, 3.0) * var_INaCa__Cao) - (exp((var_INaCa__eta - 1.0) * var_INaCa__V * var_INaCa__FonRT) * pow(var_INaCa__Nao, 3.0) * var_INaCa__Cai)); // uA_per_uF
        const double var_cell__i_NaCa = var_INaCa__i_NaCa; // uA_per_uF
        const double var_INaK__K_mNai = 10.0; // mM
        const double var_INaK__V = var_chaste_interface__cell__V; // mV
        const double var_INaK__FonRT = var_cell__FonRT; // per_mV
        const double var_INaK__Nao = var_Ionic_concentrations__Nao; // mM
        const double var_INaK__sigma = (1.0 / 7.0) * (exp(var_INaK__Nao / 67.299999999999997) - 1.0); // dimensionless
        const double var_INaK__f_NaK = 1.0 / (1.0 + (0.1245 * exp((-0.10000000000000001) * var_INaK__V * var_INaK__FonRT)) + (0.036499999999999998 * var_INaK__sigma * exp((-var_INaK__V) * var_INaK__FonRT))); // dimensionless
        const double var_INaK__Nai = var_chaste_interface__Ionic_concentrations__Nai; // mM
        const double var_INaK__K_mKo = 1.5; // mM
        const double var_INaK__Ko = var_Ionic_concentrations__Ko; // mM
        const double var_INaK__failing = var_cell__failing; // dimensionless
        const double var_INaK__I_NaK_max = (var_INaK__failing == 0.0) ? 1.3 : 0.75; // uA_per_uF
        const double var_INaK__i_NaK = (((var_INaK__I_NaK_max * var_INaK__f_NaK * 1.0) / (1.0 + pow(var_INaK__K_mNai / var_INaK__Nai, 1.5))) * var_INaK__Ko) / (var_INaK__Ko + var_INaK__K_mKo); // uA_per_uF
        const double var_cell__i_NaK = var_INaK__i_NaK; // uA_per_uF
        const double var_INab__failing = var_cell__failing; // dimensionless
        const double var_INab__g_b_Na_max = (var_INab__failing == 0.0) ? 0.001 : 0.0; // mS_per_uF
        const double var_INab__E_Na = var_INa__E_Na; // mV
        const double var_INab__V = var_chaste_interface__cell__V; // mV
        const double var_INab__i_b_Na = var_INab__g_b_Na_max * (var_INab__V - var_INab__E_Na); // uA_per_uF
        const double var_cell__i_b_Na = var_INab__i_b_Na; // uA_per_uF
        const double var_ICab__V = var_chaste_interface__cell__V; // mV
        const double var_ICab__failing = var_cell__failing; // dimensionless
        const double var_ICab__g_b_Ca_max = (var_ICab__failing == 0.0) ? 0.00084999999999999995 : 0.0012999999999999999; // mS_per_uF
        const double var_ICab__E_Ca = var_ICa__E_Ca; // mV
        const double var_ICab__i_b_Ca = var_ICab__g_b_Ca_max * (var_ICab__V - var_ICab__E_Ca); // uA_per_uF
        const double var_cell__i_b_Ca = var_ICab__i_b_Ca; // uA_per_uF
        const double var_cell__chaste_interface__chaste_membrane_capacitance = HeartConfig::Instance()->GetCapacitance(); // uF_per_cm2
        const double var_chaste_interface__cell__i_Stim = 0.0;
        const double var_cell__i_Stim_converter = var_chaste_interface__cell__i_Stim; // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converter / var_cell__chaste_interface__chaste_membrane_capacitance; // uA_per_uF
        const double var_cell__I_tot = var_cell__i_Na + var_cell__i_Ca + var_cell__i_to + var_cell__i_Kr + var_cell__i_Ks + var_cell__i_K1 + var_cell__i_NaCa + var_cell__i_NaK + var_cell__i_b_Na + var_cell__i_b_Ca + var_cell__i_Stim; // uA_per_uF
        const double var_cell__dVdt = (-1.0) * var_cell__I_tot; // mV_per_ms
        const double var_chaste_interface__cell__dVdt = var_cell__dVdt; // mV_per_ms
        const double var_chaste_interface__i_ionic = (var_chaste_interface__cell__dVdt) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = -(var_chaste_interface__i_ionic);
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamicpriebe_beuckelmann_model_1998FromCellML::EvaluateYDerivatives(double var_chaste_interface__environment__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
        // Units: millimolar; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = rY[5];
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = rY[6];
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = rY[7];
        // Units: dimensionless; Initial value: 1.75032478501027e-5
        double var_chaste_interface__Ito_t_gate__t = rY[8];
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[9];
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[10];
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Irel__APtrack = rY[11];
        // Units: dimensionless; Initial value: -1.372158997089e-136
        double var_chaste_interface__Irel__APtrack2 = rY[12];
        // Units: dimensionless; Initial value: -7.58517896402761e-136
        double var_chaste_interface__Irel__APtrack3 = rY[13];
        // Units: dimensionless; Initial value: 4.82035353592764e-5
        double var_chaste_interface__Irel__Cainfluxtrack = rY[14];
        // Units: mM; Initial value: -7.71120176147331e-138
        double var_chaste_interface__Irel__OVRLDtrack = rY[15];
        // Units: dimensionless; Initial value: 1e-6
        double var_chaste_interface__Irel__OVRLDtrack2 = rY[16];
        // Units: dimensionless; Initial value: 1e-6
        double var_chaste_interface__Irel__OVRLDtrack3 = rY[17];
        // Units: dimensionless; Initial value: 1e-6
        double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
        // Units: mM; Initial value: 10
        double var_chaste_interface__Ionic_concentrations__Ki = rY[19];
        // Units: mM; Initial value: 140
        double var_chaste_interface__Ionic_concentrations__Ca_JSR = rY[20];
        // Units: mM; Initial value: 2.5
        double var_chaste_interface__Ionic_concentrations__Ca_NSR = rY[21];
        // Units: mM; Initial value: 2.5
        
        
        // Mathematics
        double d_dt_chaste_interface__cell__V;
        const double var_cell__R = 8.3142999999999994; // joule_per_mole_kelvin
        const double var_cell__T = 310.14999999999998; // kelvin
        const double var_cell__F = 96.486699999999999; // coulomb_per_millimole
        const double var_cell__FonRT = var_cell__F / (var_cell__R * var_cell__T); // per_mV
        const double var_cell__Cm = 153.40000000000001; // pF
        const double var_cell__failing = 0.0; // dimensionless
        const double var_INa__V = var_chaste_interface__cell__V; // mV
        const double var_INa__Nai = var_chaste_interface__Ionic_concentrations__Nai; // mM
        const double var_INa__FonRT = var_cell__FonRT; // per_mV
        const double var_Ionic_concentrations__Nao = 138.0; // mM
        const double var_INa__Nao = var_Ionic_concentrations__Nao; // mM
        const double var_INa__E_Na = log(var_INa__Nao / var_INa__Nai) / var_INa__FonRT; // mV
        const double var_INa__g_Na = 16.0; // mS_per_uF
        const double var_INa__m = var_chaste_interface__INa_m_gate__m; // dimensionless
        const double var_INa__j = var_chaste_interface__INa_j_gate__j; // dimensionless
        const double var_INa__h = var_chaste_interface__INa_h_gate__h; // dimensionless
        const double var_INa__i_Na = var_INa__g_Na * pow(var_INa__m, 3.0) * var_INa__h * var_INa__j * (var_INa__V - var_INa__E_Na); // uA_per_uF
        const double var_cell__i_Na = var_INa__i_Na; // uA_per_uF
        const double var_ICa__f = var_chaste_interface__ICa_f_gate__f; // dimensionless
        const double var_ICa_f_Ca_gate__Km_Ca = 0.00059999999999999995; // mM
        const double var_ICa__Cai = var_chaste_interface__Ionic_concentrations__Cai; // mM
        const double var_ICa_f_Ca_gate__Cai = var_ICa__Cai; // mM
        const double var_ICa_f_Ca_gate__f_Ca = var_ICa_f_Ca_gate__Km_Ca / (var_ICa_f_Ca_gate__Km_Ca + var_ICa_f_Ca_gate__Cai); // dimensionless
        const double var_ICa__f_Ca = var_ICa_f_Ca_gate__f_Ca; // dimensionless
        const double var_ICa__V = var_chaste_interface__cell__V; // mV
        const double var_ICa__d = var_chaste_interface__ICa_d_gate__d; // dimensionless
        const double var_ICa__FonRT = var_cell__FonRT; // per_mV
        const double var_Ionic_concentrations__Cao = 2.0; // mM
        const double var_ICa__Cao = var_Ionic_concentrations__Cao; // mM
        const double var_ICa__E_Ca = log(var_ICa__Cao / var_ICa__Cai) / (2.0 * var_ICa__FonRT); // mV
        const double var_ICa__g_Ca_max = 0.064000000000000001; // mS_per_uF
        const double var_ICa__i_Ca = var_ICa__g_Ca_max * var_ICa__d * var_ICa__f * var_ICa__f_Ca * (var_ICa__V - var_ICa__E_Ca); // uA_per_uF
        const double var_cell__i_Ca = var_ICa__i_Ca; // uA_per_uF
        const double var_Ito__r = var_chaste_interface__Ito_r_gate__r; // dimensionless
        const double var_Ito__V = var_chaste_interface__cell__V; // mV
        const double var_Ito__t = var_chaste_interface__Ito_t_gate__t; // dimensionless
        const double var_Ito__FonRT = var_cell__FonRT; // per_mV
        const double var_Ito__Nao = var_Ionic_concentrations__Nao; // mM
        const double var_Ito__Ki = var_chaste_interface__Ionic_concentrations__Ki; // mM
        const double var_Ito__Nai = var_chaste_interface__Ionic_concentrations__Nai; // mM
        const double var_Ionic_concentrations__Ko = 4.0; // mM
        const double var_Ito__Ko = var_Ionic_concentrations__Ko; // mM
        const double var_Ito__E_to = log(((0.042999999999999997 * var_Ito__Nao) + var_Ito__Ko) / ((0.042999999999999997 * var_Ito__Nai) + var_Ito__Ki)) / var_Ito__FonRT; // mV
        const double var_Ito__failing = var_cell__failing; // dimensionless
        const double var_Ito__g_to_max = (var_Ito__failing == 0.0) ? 0.29999999999999999 : 0.191; // mS_per_uF
        const double var_Ito__i_to = var_Ito__g_to_max * var_Ito__r * var_Ito__t * (var_Ito__V - var_Ito__E_to); // uA_per_uF
        const double var_cell__i_to = var_Ito__i_to; // uA_per_uF
        const double var_IKr__Xr = var_chaste_interface__IKr_Xr_gate__Xr; // dimensionless
        const double var_IKr__V = var_chaste_interface__cell__V; // mV
        const double var_IKr__rik = 1.0 / (1.0 + exp((var_IKr__V + 26.0) / 23.0)); // dimensionless
        const double var_IKr__g_Kr_max = 0.014999999999999999; // mS_per_uF
        const double var_IKr__FonRT = var_cell__FonRT; // per_mV
        const double var_IKr__Ki = var_chaste_interface__Ionic_concentrations__Ki; // mM
        const double var_IKr__Ko = var_Ionic_concentrations__Ko; // mM
        const double var_IKr__E_K = log(var_IKr__Ko / var_IKr__Ki) / var_IKr__FonRT; // mV
        const double var_IKr__i_Kr = var_IKr__g_Kr_max * var_IKr__Xr * var_IKr__rik * (var_IKr__V - var_IKr__E_K); // uA_per_uF
        const double var_cell__i_Kr = var_IKr__i_Kr; // uA_per_uF
        const double var_IKs__Xs = var_chaste_interface__IKs_Xs_gate__Xs; // dimensionless
        const double var_IKs__Nao = var_Ionic_concentrations__Nao; // mM
        const double var_IKs__Ki = var_chaste_interface__Ionic_concentrations__Ki; // mM
        const double var_IKs__Ko = var_Ionic_concentrations__Ko; // mM
        const double var_IKs__FonRT = var_cell__FonRT; // per_mV
        const double var_IKs__Nai = var_chaste_interface__Ionic_concentrations__Nai; // mM
        const double var_IKs__E_Ks = log(((0.018329999999999999 * var_IKs__Nao) + var_IKs__Ko) / ((0.018329999999999999 * var_IKs__Nai) + var_IKs__Ki)) / var_IKs__FonRT; // mV
        const double var_IKs__g_Ks_max = 0.02; // mS_per_uF
        const double var_IKs__V = var_chaste_interface__cell__V; // mV
        const double var_IKs__i_Ks = var_IKs__g_Ks_max * pow(var_IKs__Xs, 2.0) * (var_IKs__V - var_IKs__E_Ks); // uA_per_uF
        const double var_cell__i_Ks = var_IKs__i_Ks; // uA_per_uF
        const double var_IK1__V = var_chaste_interface__cell__V; // mV
        const double var_IK1_K1_gate__V = var_IK1__V; // mV
        const double var_IK1__Ki = var_chaste_interface__Ionic_concentrations__Ki; // mM
        const double var_IK1__FonRT = var_cell__FonRT; // per_mV
        const double var_IK1__Ko = var_Ionic_concentrations__Ko; // mM
        const double var_IK1__E_K1 = log(var_IK1__Ko / var_IK1__Ki) / var_IK1__FonRT; // mV
        const double var_IK1_K1_gate__E_K1 = var_IK1__E_K1; // mV
        const double var_IK1_K1_gate__beta_K1 = ((3.0 * exp(0.00020000000000000001 * (var_IK1_K1_gate__V + 100.0 + (-var_IK1_K1_gate__E_K1)))) + (1.0 * exp(0.10000000000000001 * (var_IK1_K1_gate__V - (10.0 + var_IK1_K1_gate__E_K1))))) / (1.0 + exp((-0.5) * (var_IK1_K1_gate__V - var_IK1_K1_gate__E_K1))); // per_ms
        const double var_IK1_K1_gate__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * (var_IK1_K1_gate__V - (var_IK1_K1_gate__E_K1 + 200.0)))); // per_ms
        const double var_IK1_K1_gate__K1_infinity = var_IK1_K1_gate__alpha_K1 / (var_IK1_K1_gate__alpha_K1 + var_IK1_K1_gate__beta_K1); // dimensionless
        const double var_IK1__K1_infinity = var_IK1_K1_gate__K1_infinity; // dimensionless
        const double var_IK1__failing = var_cell__failing; // dimensionless
        const double var_IK1__g_K1_max = (var_IK1__failing == 0.0) ? 2.5 : 2.0; // mS_per_uF
        const double var_IK1__i_K1 = var_IK1__g_K1_max * var_IK1__K1_infinity * (var_IK1__V - var_IK1__E_K1); // uA_per_uF
        const double var_cell__i_K1 = var_IK1__i_K1; // uA_per_uF
        const double var_INaCa__K_mNa = 87.5; // mM
        const double var_INaCa__K_sat = 0.10000000000000001; // dimensionless
        const double var_INaCa__Nao = var_Ionic_concentrations__Nao; // mM
        const double var_INaCa__Cao = var_Ionic_concentrations__Cao; // mM
        const double var_INaCa__V = var_chaste_interface__cell__V; // mV
        const double var_INaCa__K_mCa = 1.3799999999999999; // mM
        const double var_INaCa__Nai = var_chaste_interface__Ionic_concentrations__Nai; // mM
        const double var_INaCa__FonRT = var_cell__FonRT; // per_mV
        const double var_INaCa__failing = var_cell__failing; // dimensionless
        const double var_INaCa__K_NaCa = (var_INaCa__failing == 0.0) ? 1000.0 : 1650.0; // uA_per_uF
        const double var_INaCa__Cai = var_chaste_interface__Ionic_concentrations__Cai; // mM
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__i_NaCa = ((((((var_INaCa__K_NaCa * 1.0) / (pow(var_INaCa__K_mNa, 3.0) + pow(var_INaCa__Nao, 3.0))) * 1.0) / (var_INaCa__K_mCa + var_INaCa__Cao)) * 1.0) / (1.0 + (var_INaCa__K_sat * exp((var_INaCa__eta - 1.0) * var_INaCa__V * var_INaCa__FonRT)))) * ((exp(var_INaCa__eta * var_INaCa__V * var_INaCa__FonRT) * pow(var_INaCa__Nai, 3.0) * var_INaCa__Cao) - (exp((var_INaCa__eta - 1.0) * var_INaCa__V * var_INaCa__FonRT) * pow(var_INaCa__Nao, 3.0) * var_INaCa__Cai)); // uA_per_uF
        const double var_cell__i_NaCa = var_INaCa__i_NaCa; // uA_per_uF
        const double var_INaK__K_mNai = 10.0; // mM
        const double var_INaK__V = var_chaste_interface__cell__V; // mV
        const double var_INaK__FonRT = var_cell__FonRT; // per_mV
        const double var_INaK__Nao = var_Ionic_concentrations__Nao; // mM
        const double var_INaK__sigma = (1.0 / 7.0) * (exp(var_INaK__Nao / 67.299999999999997) - 1.0); // dimensionless
        const double var_INaK__f_NaK = 1.0 / (1.0 + (0.1245 * exp((-0.10000000000000001) * var_INaK__V * var_INaK__FonRT)) + (0.036499999999999998 * var_INaK__sigma * exp((-var_INaK__V) * var_INaK__FonRT))); // dimensionless
        const double var_INaK__Nai = var_chaste_interface__Ionic_concentrations__Nai; // mM
        const double var_INaK__K_mKo = 1.5; // mM
        const double var_INaK__Ko = var_Ionic_concentrations__Ko; // mM
        const double var_INaK__failing = var_cell__failing; // dimensionless
        const double var_INaK__I_NaK_max = (var_INaK__failing == 0.0) ? 1.3 : 0.75; // uA_per_uF
        const double var_INaK__i_NaK = (((var_INaK__I_NaK_max * var_INaK__f_NaK * 1.0) / (1.0 + pow(var_INaK__K_mNai / var_INaK__Nai, 1.5))) * var_INaK__Ko) / (var_INaK__Ko + var_INaK__K_mKo); // uA_per_uF
        const double var_cell__i_NaK = var_INaK__i_NaK; // uA_per_uF
        const double var_INab__failing = var_cell__failing; // dimensionless
        const double var_INab__g_b_Na_max = (var_INab__failing == 0.0) ? 0.001 : 0.0; // mS_per_uF
        const double var_INab__E_Na = var_INa__E_Na; // mV
        const double var_INab__V = var_chaste_interface__cell__V; // mV
        const double var_INab__i_b_Na = var_INab__g_b_Na_max * (var_INab__V - var_INab__E_Na); // uA_per_uF
        const double var_cell__i_b_Na = var_INab__i_b_Na; // uA_per_uF
        const double var_ICab__V = var_chaste_interface__cell__V; // mV
        const double var_ICab__failing = var_cell__failing; // dimensionless
        const double var_ICab__g_b_Ca_max = (var_ICab__failing == 0.0) ? 0.00084999999999999995 : 0.0012999999999999999; // mS_per_uF
        const double var_ICab__E_Ca = var_ICa__E_Ca; // mV
        const double var_ICab__i_b_Ca = var_ICab__g_b_Ca_max * (var_ICab__V - var_ICab__E_Ca); // uA_per_uF
        const double var_cell__i_b_Ca = var_ICab__i_b_Ca; // uA_per_uF
        const double var_cell__chaste_interface__chaste_membrane_capacitance = HeartConfig::Instance()->GetCapacitance(); // uF_per_cm2
        const double var_chaste_interface__cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double var_cell__i_Stim_converter = var_chaste_interface__cell__i_Stim; // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converter / var_cell__chaste_interface__chaste_membrane_capacitance; // uA_per_uF
        const double var_cell__I_tot = var_cell__i_Na + var_cell__i_Ca + var_cell__i_to + var_cell__i_Kr + var_cell__i_Ks + var_cell__i_K1 + var_cell__i_NaCa + var_cell__i_NaK + var_cell__i_b_Na + var_cell__i_b_Ca + var_cell__i_Stim; // uA_per_uF
        const double var_cell__dVdt = (-1.0) * var_cell__I_tot; // mV_per_ms
        const double var_INa_m_gate__V = var_INa__V; // mV
        const double var_INa_m_gate__alpha_m = (fabs(var_INa_m_gate__V + 47.130000000000003) > 0.001) ? ((0.32000000000000001 * (var_INa_m_gate__V + 47.130000000000003)) / (1.0 - exp((-0.10000000000000001) * (var_INa_m_gate__V + 47.130000000000003)))) : 3.2000000000000002; // per_ms
        const double var_INa_m_gate__m = var_INa__m; // dimensionless
        const double var_INa_m_gate__beta_m = 0.080000000000000002 * exp((-var_INa_m_gate__V) / 11.0); // per_ms
        const double var_INa_m_gate__d_m_d_environment__time = (var_INa_m_gate__alpha_m * (1.0 - var_INa_m_gate__m)) - (var_INa_m_gate__beta_m * var_INa_m_gate__m); // 'per millisecond'
        const double var_INa__INa_m_gate__d_m_d_environment__time = var_INa_m_gate__d_m_d_environment__time; // ___units_16
        const double var_INa_h_gate__V = var_INa__V; // mV
        const double var_INa_h_gate__alpha_h = (var_INa_h_gate__V < (-40.0)) ? (0.13500000000000001 * exp((80.0 + var_INa_h_gate__V) / (-6.7999999999999998))) : 0.0; // per_ms
        const double var_INa_h_gate__h = var_INa__h; // dimensionless
        const double var_INa_h_gate__beta_h = (var_INa_h_gate__V < (-40.0)) ? ((3.5600000000000001 * exp(0.079000000000000001 * var_INa_h_gate__V)) + (310000.0 * exp(0.34999999999999998 * var_INa_h_gate__V))) : (1.0 / (0.13 * (1.0 + exp((-(var_INa_h_gate__V + 10.66)) / 11.1)))); // per_ms
        const double var_INa_h_gate__d_h_d_environment__time = (var_INa_h_gate__alpha_h * (1.0 - var_INa_h_gate__h)) - (var_INa_h_gate__beta_h * var_INa_h_gate__h); // 'per millisecond'
        const double var_INa__INa_h_gate__d_h_d_environment__time = var_INa_h_gate__d_h_d_environment__time; // ___units_16
        const double var_INa_j_gate__V = var_INa__V; // mV
        const double var_INa_j_gate__beta_j = (var_INa_j_gate__V < (-40.0)) ? ((0.1212 * exp((-0.01052) * var_INa_j_gate__V)) / (1.0 + exp((-0.13780000000000001) * (var_INa_j_gate__V + 40.140000000000001)))) : ((0.29999999999999999 * exp((-2.5349999999999999e-07) * var_INa_j_gate__V)) / (1.0 + exp((-0.10000000000000001) * (var_INa_j_gate__V + 32.0)))); // per_ms
        const double var_INa_j_gate__j = var_INa__j; // dimensionless
        const double var_INa_j_gate__alpha_j = (var_INa_j_gate__V < (-40.0)) ? (((((-127140.0) * exp(0.24399999999999999 * var_INa_j_gate__V)) - (3.4740000000000003e-05 * exp((-0.043909999999999998) * var_INa_j_gate__V))) * (var_INa_j_gate__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_INa_j_gate__V + 79.230000000000004)))) : 0.0; // per_ms
        const double var_INa_j_gate__d_j_d_environment__time = (var_INa_j_gate__alpha_j * (1.0 - var_INa_j_gate__j)) - (var_INa_j_gate__beta_j * var_INa_j_gate__j); // 'per millisecond'
        const double var_INa__INa_j_gate__d_j_d_environment__time = var_INa_j_gate__d_j_d_environment__time; // ___units_16
        const double var_ICa_d_gate__d = var_ICa__d; // dimensionless
        const double var_ICa_d_gate__V = var_ICa__V; // mV
        const double var_ICa_d_gate__alpha_d = (14.985900000000001 / (16.6813 * sqrt(2.0 * M_PI))) * exp((-pow((var_ICa_d_gate__V - 22.359999999999999) / 16.6813, 2.0)) / 2.0); // per_ms
        const double var_ICa_d_gate__beta_d = 0.14710000000000001 - ((5.2999999999999998 / (14.93 * sqrt(2.0 * M_PI))) * exp((-pow((var_ICa_d_gate__V - 6.2744) / 14.93, 2.0)) / 2.0)); // per_ms
        const double var_ICa_d_gate__d_d_d_environment__time = (var_ICa_d_gate__alpha_d * (1.0 - var_ICa_d_gate__d)) - (var_ICa_d_gate__beta_d * var_ICa_d_gate__d); // 'per millisecond'
        const double var_ICa__ICa_d_gate__d_d_d_environment__time = var_ICa_d_gate__d_d_d_environment__time; // ___units_16
        const double var_ICa_f_gate__f = var_ICa__f; // dimensionless
        const double var_ICa_f_gate__V = var_ICa__V; // mV
        const double var_ICa_f_gate__alpha_f = 0.0068719999999999996 / (1.0 + exp((var_ICa_f_gate__V - 6.1546000000000003) / 6.1223000000000001)); // per_ms
        const double var_ICa_f_gate__beta_f = (((0.068699999999999997 * exp((-0.1081) * (var_ICa_f_gate__V + 9.8254999999999999))) + 0.0112) / (1.0 + exp((-0.27789999999999998) * (var_ICa_f_gate__V + 9.8254999999999999)))) + 0.00054739999999999997; // per_ms
        const double var_ICa_f_gate__d_f_d_environment__time = (var_ICa_f_gate__alpha_f * (1.0 - var_ICa_f_gate__f)) - (var_ICa_f_gate__beta_f * var_ICa_f_gate__f); // 'per millisecond'
        const double var_ICa__ICa_f_gate__d_f_d_environment__time = var_ICa_f_gate__d_f_d_environment__time; // ___units_16
        const double var_Ito_r_gate__V = var_Ito__V; // mV
        const double var_Ito_r_gate__alpha_r = (0.52659999999999996 * exp((-0.0166) * (var_Ito_r_gate__V - 42.291200000000003))) / (1.0 + exp((-0.094299999999999995) * (var_Ito_r_gate__V - 42.291200000000003))); // per_ms
        const double var_Ito_r_gate__beta_r = ((5.1860000000000002e-05 * var_Ito_r_gate__V) + (0.51490000000000002 * exp((-0.13439999999999999) * (var_Ito_r_gate__V - 5.0026999999999999)))) / (1.0 + exp((-0.1348) * (var_Ito_r_gate__V - 5.1860000000000002e-05))); // per_ms
        const double var_Ito_r_gate__r = var_Ito__r; // dimensionless
        const double var_Ito_r_gate__d_r_d_environment__time = (var_Ito_r_gate__alpha_r * (1.0 - var_Ito_r_gate__r)) - (var_Ito_r_gate__beta_r * var_Ito_r_gate__r); // 'per millisecond'
        const double var_Ito__Ito_r_gate__d_r_d_environment__time = var_Ito_r_gate__d_r_d_environment__time; // ___units_16
        const double var_Ito_t_gate__V = var_Ito__V; // mV
        const double var_Ito_t_gate__beta_t = ((0.0001215 * var_Ito_t_gate__V) + (0.076700000000000004 * exp((-1.6600000000000001e-09) * (var_Ito_t_gate__V + 34.023499999999999)))) / (1.0 + exp((-0.16039999999999999) * (var_Ito_t_gate__V + 34.023499999999999))); // per_ms
        const double var_Ito_t_gate__alpha_t = ((5.6119999999999998e-05 * var_Ito_t_gate__V) + (0.072099999999999997 * exp((-0.17299999999999999) * (var_Ito_t_gate__V + 34.253100000000003)))) / (1.0 + exp((-0.17319999999999999) * (var_Ito_t_gate__V + 34.253100000000003))); // per_ms
        const double var_Ito_t_gate__t = var_Ito__t; // dimensionless
        const double var_Ito_t_gate__d_t_d_environment__time = (var_Ito_t_gate__alpha_t * (1.0 - var_Ito_t_gate__t)) - (var_Ito_t_gate__beta_t * var_Ito_t_gate__t); // 'per millisecond'
        const double var_Ito__Ito_t_gate__d_t_d_environment__time = var_Ito_t_gate__d_t_d_environment__time; // ___units_16
        const double var_IKs_Xs_gate__V = var_IKs__V; // mV
        const double var_IKs_Xs_gate__alpha_Xs = 0.0030130000000000001 / (1.0 + exp((7.4454000000000002 - (var_IKs_Xs_gate__V + 10.0)) / 14.3171)); // per_ms
        const double var_IKs_Xs_gate__Xs = var_IKs__Xs; // dimensionless
        const double var_IKs_Xs_gate__beta_Xs = 0.0058700000000000002 / (1.0 + exp((5.9500000000000002 + var_IKs_Xs_gate__V + 10.0) / 15.82)); // per_ms
        const double var_IKs_Xs_gate__d_Xs_d_environment__time = (var_IKs_Xs_gate__alpha_Xs * (1.0 - var_IKs_Xs_gate__Xs)) - (var_IKs_Xs_gate__beta_Xs * var_IKs_Xs_gate__Xs); // 'per millisecond'
        const double var_IKs__IKs_Xs_gate__d_Xs_d_environment__time = var_IKs_Xs_gate__d_Xs_d_environment__time; // ___units_16
        const double var_IKr_Xr_gate__V = var_IKr__V; // mV
        const double var_IKr_Xr_gate__beta_Xr = (0.016 * exp(0.0016000000000000001 * (var_IKr_Xr_gate__V + 65.659999999999997))) / (1.0 + exp(0.078299999999999995 * (var_IKr_Xr_gate__V + 65.659999999999997))); // per_ms
        const double var_IKr_Xr_gate__Xr = var_IKr__Xr; // dimensionless
        const double var_IKr_Xr_gate__alpha_Xr = (0.0050000000000000001 * exp(0.00052660000000000001 * (var_IKr_Xr_gate__V + 4.0670000000000002))) / (1.0 + exp((-0.12620000000000001) * (var_IKr_Xr_gate__V + 4.0670000000000002))); // per_ms
        const double var_IKr_Xr_gate__d_Xr_d_environment__time = (var_IKr_Xr_gate__alpha_Xr * (1.0 - var_IKr_Xr_gate__Xr)) - (var_IKr_Xr_gate__beta_Xr * var_IKr_Xr_gate__Xr); // 'per millisecond'
        const double var_IKr__IKr_Xr_gate__d_Xr_d_environment__time = var_IKr_Xr_gate__d_Xr_d_environment__time; // ___units_16
        const double var_Irel__Cai = var_chaste_interface__Ionic_concentrations__Cai; // mM
        const double var_Irel__OVRLDtrack2 = var_chaste_interface__Irel__OVRLDtrack2; // dimensionless
        const double var_Irel__delta_Ca_ith = 5.0000000000000004e-06; // mM
        const double var_Irel__APtrack2 = var_chaste_interface__Irel__APtrack2; // dimensionless
        const double var_Irel__Cainfluxtrack = var_chaste_interface__Irel__Cainfluxtrack; // mM
        const double var_Irel__K_mrel = 0.00080000000000000004; // mM
        const double var_Irel__G_rel_overload = 3.0; // per_ms
        const double var_Irel__G_rel_max = 22.0; // per_ms
        const double var_Irel__G_rel = (var_Irel__Cainfluxtrack > var_Irel__delta_Ca_ith) ? (((1.0 * var_Irel__G_rel_max * (var_Irel__Cainfluxtrack - var_Irel__delta_Ca_ith)) / ((var_Irel__K_mrel + var_Irel__Cainfluxtrack) - var_Irel__delta_Ca_ith)) * (1.0 - var_Irel__APtrack2) * var_Irel__APtrack2) : ((var_Irel__Cainfluxtrack <= var_Irel__delta_Ca_ith) && (var_Irel__OVRLDtrack2 > 0.0)) ? (0.0 * var_Irel__G_rel_overload * (1.0 - var_Irel__OVRLDtrack2) * var_Irel__OVRLDtrack2) : 0.0; // per_ms
        const double var_Irel__Ca_JSR = var_chaste_interface__Ionic_concentrations__Ca_JSR; // mM
        const double var_Irel__i_rel = var_Irel__G_rel * (var_Irel__Ca_JSR - var_Irel__Cai); // mM_per_ms
        const double var_calcium_buffers_in_the_JSR__K_mCSQN = 0.80000000000000004; // mM
        const double var_Irel__K_mCSQN = var_calcium_buffers_in_the_JSR__K_mCSQN; // mM
        const double var_Irel__F = var_cell__F; // coulomb_per_millimole
        const double var_Ionic_concentrations__preplength = 100.0; // um
        const double var_Ionic_concentrations__radius = 11.0; // um
        const double var_Ionic_concentrations__volume = M_PI * var_Ionic_concentrations__preplength * pow(var_Ionic_concentrations__radius, 2.0); // fL
        const double var_Ionic_concentrations__V_myo = 0.68000000000000005 * var_Ionic_concentrations__volume; // fL
        const double var_Irel__V_myo = var_Ionic_concentrations__V_myo; // fL
        const double var_Ionic_concentrations__V_JSR = 0.0047999999999999996 * var_Ionic_concentrations__volume; // fL
        const double var_Irel__i_NaCa = var_INaCa__i_NaCa; // uA_per_uF
        const double var_Irel__i_Ca = var_ICa__i_Ca; // uA_per_uF
        const double var_Irel__i_b_Ca = var_ICab__i_b_Ca; // uA_per_uF
        const double var_Irel__dVdt = var_cell__dVdt; // mV_per_ms
        const double var_Irel__Cm = var_cell__Cm; // pF
        const double var_Irel__APtrack = var_chaste_interface__Irel__APtrack; // dimensionless
        const double var_Irel__APtrack3 = var_chaste_interface__Irel__APtrack3; // dimensionless
        const double var_Irel__OVRLDtrack = var_chaste_interface__Irel__OVRLDtrack; // dimensionless
        const double var_Irel__OVRLDtrack3 = var_chaste_interface__Irel__OVRLDtrack3; // dimensionless
        const double var_Irel__CSQNthresh = 0.69999999999999996; // mM
        const double var_Irel__Logicthresh = 0.97999999999999998; // dimensionless
        const double var_Irel__d_APtrack_d_environment__time = (var_Irel__dVdt > 150.0) ? ((100.0 * (1.0 - var_Irel__APtrack)) - (0.5 * var_Irel__APtrack)) : ((-0.5) * var_Irel__APtrack); // 'per millisecond'
        const double var_Irel__d_APtrack2_d_environment__time = ((var_Irel__APtrack < 0.20000000000000001) && (var_Irel__APtrack > 0.17999999999999999)) ? ((100.0 * (1.0 - var_Irel__APtrack2)) - (0.5 * var_Irel__APtrack2)) : ((-0.5) * var_Irel__APtrack2); // 'per millisecond'
        const double var_Irel__d_APtrack3_d_environment__time = ((var_Irel__APtrack < 0.20000000000000001) && (var_Irel__APtrack > 0.17999999999999999)) ? ((100.0 * (1.0 - var_Irel__APtrack3)) - (0.5 * var_Irel__APtrack3)) : ((-0.01) * var_Irel__APtrack3); // 'per millisecond'
        const double var_Irel__d_Cainfluxtrack_d_environment__time = (var_Irel__APtrack > 0.20000000000000001) ? (((-var_Irel__Cm) * ((var_Irel__i_Ca - var_Irel__i_NaCa) + var_Irel__i_b_Ca)) / (2.0 * var_Irel__V_myo * var_Irel__F)) : ((var_Irel__APtrack2 > 0.01) && (var_Irel__APtrack <= 0.20000000000000001)) ? 0.0 : ((-0.5) * var_Irel__Cainfluxtrack); // 'millimole per litre per millisecond'
        const double var_Irel__d_OVRLDtrack_d_environment__time = (((1.0 / (1.0 + (var_Irel__K_mCSQN / var_Irel__Ca_JSR))) > var_Irel__CSQNthresh) && (var_Irel__OVRLDtrack3 < 0.37) && (var_Irel__APtrack3 < 0.37)) ? (0.0 * 50.0 * (1.0 - var_Irel__OVRLDtrack)) : ((-0.0) * 0.5 * var_Irel__OVRLDtrack); // 'per millisecond'
        const double var_Irel__d_OVRLDtrack2_d_environment__time = ((var_Irel__OVRLDtrack > var_Irel__Logicthresh) && (var_Irel__OVRLDtrack2 < var_Irel__Logicthresh)) ? (0.0 * 50.0 * (1.0 - var_Irel__OVRLDtrack2)) : ((-0.0) * 0.5 * var_Irel__OVRLDtrack2); // 'per millisecond'
        const double var_Irel__d_OVRLDtrack3_d_environment__time = ((var_Irel__OVRLDtrack > var_Irel__Logicthresh) && (var_Irel__OVRLDtrack3 < var_Irel__Logicthresh)) ? (0.0 * 50.0 * (1.0 - var_Irel__OVRLDtrack3)) : ((-0.0) * 0.01 * var_Irel__OVRLDtrack3); // 'per millisecond'
        const double var_Iup__failing = var_cell__failing; // dimensionless
        const double var_Iup__I_up_max = (var_Iup__failing == 0.0) ? 0.0044999999999999997 : 0.0015; // mM_per_ms
        const double var_Iup__K_mup = 0.00092000000000000003; // mM
        const double var_Iup__Cai = var_chaste_interface__Ionic_concentrations__Cai; // mM
        const double var_Iup__i_up = (var_Iup__I_up_max * var_Iup__Cai) / (var_Iup__Cai + var_Iup__K_mup); // mM_per_ms
        const double var_Ileak__failing = var_cell__failing; // dimensionless
        const double var_Ileak__K_leak = (var_Ileak__failing == 0.0) ? 0.00025999999999999998 : 0.00017000000000000001; // per_ms
        const double var_Ileak__Ca_NSR = var_chaste_interface__Ionic_concentrations__Ca_NSR; // mM
        const double var_Ileak__i_leak = var_Ileak__K_leak * var_Ileak__Ca_NSR; // mM_per_ms
        const double var_Itr__tau_tr = 180.0; // ms
        const double var_Itr__Ca_JSR = var_chaste_interface__Ionic_concentrations__Ca_JSR; // mM
        const double var_Itr__Ca_NSR = var_chaste_interface__Ionic_concentrations__Ca_NSR; // mM
        const double var_Itr__i_tr = (1.0 * (var_Itr__Ca_NSR - var_Itr__Ca_JSR)) / var_Itr__tau_tr; // mM_per_ms
        const double var_calcium_buffers_in_the_myoplasm__K_mTn = 0.00050000000000000001; // mM
        const double var_calcium_buffers_in_the_myoplasm__K_mCMDN = 0.0023800000000000002; // mM
        const double var_calcium_buffers_in_the_myoplasm__Tn_max = 0.070000000000000007; // mM
        const double var_calcium_buffers_in_the_myoplasm__CMDN_max = 0.050000000000000003; // mM
        const double var_calcium_buffers_in_the_myoplasm__Cai = var_chaste_interface__Ionic_concentrations__Cai; // mM
        const double var_calcium_buffers_in_the_myoplasm__buffon = 1.0; // dimensionless
        const double var_calcium_buffers_in_the_myoplasm__Cai_bufc = 1.0 / (1.0 + (var_calcium_buffers_in_the_myoplasm__buffon * (((var_calcium_buffers_in_the_myoplasm__CMDN_max * var_calcium_buffers_in_the_myoplasm__K_mCMDN) / pow(var_calcium_buffers_in_the_myoplasm__K_mCMDN + var_calcium_buffers_in_the_myoplasm__Cai, 2.0)) + ((var_calcium_buffers_in_the_myoplasm__Tn_max * var_calcium_buffers_in_the_myoplasm__K_mTn) / pow(var_calcium_buffers_in_the_myoplasm__K_mTn + var_calcium_buffers_in_the_myoplasm__Cai, 2.0))))); // dimensionless
        const double var_calcium_buffers_in_the_JSR__CSQN_max = 10.0; // mM
        const double var_calcium_buffers_in_the_JSR__Ca_JSR = var_chaste_interface__Ionic_concentrations__Ca_JSR; // mM
        const double var_calcium_buffers_in_the_JSR__Ca_JSR_bufc = 1.0 / (1.0 + ((var_calcium_buffers_in_the_JSR__CSQN_max * var_calcium_buffers_in_the_JSR__K_mCSQN) / pow(var_calcium_buffers_in_the_JSR__K_mCSQN + var_calcium_buffers_in_the_JSR__Ca_JSR, 2.0))); // dimensionless
        const double var_Ionic_concentrations__V_NSR = 0.055199999999999999 * var_Ionic_concentrations__volume; // fL
        const double var_Ionic_concentrations__F = var_cell__F; // coulomb_per_millimole
        const double var_Ionic_concentrations__i_Na = var_INa__i_Na; // uA_per_uF
        const double var_Ionic_concentrations__i_b_Na = var_INab__i_b_Na; // uA_per_uF
        const double var_Ionic_concentrations__i_NaCa = var_INaCa__i_NaCa; // uA_per_uF
        const double var_Ionic_concentrations__i_NaK = var_INaK__i_NaK; // uA_per_uF
        const double var_Ionic_concentrations__i_Ca = var_ICa__i_Ca; // uA_per_uF
        const double var_Ionic_concentrations__i_b_Ca = var_ICab__i_b_Ca; // uA_per_uF
        const double var_Ionic_concentrations__i_Kr = var_IKr__i_Kr; // uA_per_uF
        const double var_Ionic_concentrations__i_K1 = var_IK1__i_K1; // uA_per_uF
        const double var_Ionic_concentrations__i_Ks = var_IKs__i_Ks; // uA_per_uF
        const double var_Ionic_concentrations__i_to = var_Ito__i_to; // uA_per_uF
        const double var_Ionic_concentrations__chaste_interface__chaste_membrane_capacitance = HeartConfig::Instance()->GetCapacitance(); // uF_per_cm2
        const double var_Ionic_concentrations__i_Stim_converter = var_chaste_interface__cell__i_Stim; // uA_per_cm2
        const double var_Ionic_concentrations__i_Stim = var_Ionic_concentrations__i_Stim_converter / var_Ionic_concentrations__chaste_interface__chaste_membrane_capacitance; // uA_per_uF
        const double var_Ionic_concentrations__i_tr = var_Itr__i_tr; // mM_per_ms
        const double var_Ionic_concentrations__i_rel = var_Irel__i_rel; // mM_per_ms
        const double var_Ionic_concentrations__i_leak = var_Ileak__i_leak; // mM_per_ms
        const double var_Ionic_concentrations__i_up = var_Iup__i_up; // mM_per_ms
        const double var_Ionic_concentrations__Cm = var_cell__Cm; // pF
        const double var_Ionic_concentrations__Cai_bufc = var_calcium_buffers_in_the_myoplasm__Cai_bufc; // dimensionless
        const double var_Ionic_concentrations__Ca_JSR_bufc = var_calcium_buffers_in_the_JSR__Ca_JSR_bufc; // dimensionless
        const double var_Ionic_concentrations__d_Cai_d_environment__time = var_Ionic_concentrations__Cai_bufc * ((((-var_Ionic_concentrations__Cm) * ((var_Ionic_concentrations__i_Ca - (2.0 * var_Ionic_concentrations__i_NaCa)) + var_Ionic_concentrations__i_b_Ca)) / (2.0 * var_Ionic_concentrations__V_myo * var_Ionic_concentrations__F)) + ((var_Ionic_concentrations__i_rel * var_Ionic_concentrations__V_JSR) / var_Ionic_concentrations__V_myo) + (((var_Ionic_concentrations__i_leak - var_Ionic_concentrations__i_up) * var_Ionic_concentrations__V_NSR) / var_Ionic_concentrations__V_myo)); // 'millimole per litre per millisecond'
        const double var_Ionic_concentrations__d_Nai_d_environment__time = ((-1.0) * var_Ionic_concentrations__Cm * (var_Ionic_concentrations__i_Na + var_Ionic_concentrations__i_b_Na + (var_Ionic_concentrations__i_NaCa * 3.0) + (var_Ionic_concentrations__i_NaK * 3.0))) / (var_Ionic_concentrations__V_myo * var_Ionic_concentrations__F); // 'millimole per litre per millisecond'
        const double var_Ionic_concentrations__d_Ki_d_environment__time = ((-1.0) * var_Ionic_concentrations__Cm * ((var_Ionic_concentrations__i_to + var_Ionic_concentrations__i_Kr + var_Ionic_concentrations__i_K1 + var_Ionic_concentrations__i_Stim + var_Ionic_concentrations__i_Ks) - (2.0 * var_Ionic_concentrations__i_NaK))) / (var_Ionic_concentrations__V_myo * var_Ionic_concentrations__F); // 'millimole per litre per millisecond'
        const double var_Ionic_concentrations__d_Ca_JSR_d_environment__time = var_Ionic_concentrations__Ca_JSR_bufc * (var_Ionic_concentrations__i_tr - var_Ionic_concentrations__i_rel); // 'millimole per litre per millisecond'
        const double var_Ionic_concentrations__d_Ca_NSR_d_environment__time = (-1.0) * ((var_Ionic_concentrations__i_leak + ((var_Ionic_concentrations__V_JSR / var_Ionic_concentrations__V_NSR) * var_Ionic_concentrations__i_tr)) - var_Ionic_concentrations__i_up); // 'millimole per litre per millisecond'
        const double var_chaste_interface__Ionic_concentrations__d_Cai_d_environment__time = var_Ionic_concentrations__d_Cai_d_environment__time; // ___units_45
        const double var_chaste_interface__INa_m_gate__d_m_d_environment__time = var_INa__INa_m_gate__d_m_d_environment__time; // ___units_16
        const double var_chaste_interface__INa_h_gate__d_h_d_environment__time = var_INa__INa_h_gate__d_h_d_environment__time; // ___units_16
        const double var_chaste_interface__INa_j_gate__d_j_d_environment__time = var_INa__INa_j_gate__d_j_d_environment__time; // ___units_16
        const double var_chaste_interface__ICa_d_gate__d_d_d_environment__time = var_ICa__ICa_d_gate__d_d_d_environment__time; // ___units_16
        const double var_chaste_interface__ICa_f_gate__d_f_d_environment__time = var_ICa__ICa_f_gate__d_f_d_environment__time; // ___units_16
        const double var_chaste_interface__Ito_r_gate__d_r_d_environment__time = var_Ito__Ito_r_gate__d_r_d_environment__time; // ___units_16
        const double var_chaste_interface__Ito_t_gate__d_t_d_environment__time = var_Ito__Ito_t_gate__d_t_d_environment__time; // ___units_16
        const double var_chaste_interface__IKs_Xs_gate__d_Xs_d_environment__time = var_IKs__IKs_Xs_gate__d_Xs_d_environment__time; // ___units_16
        const double var_chaste_interface__IKr_Xr_gate__d_Xr_d_environment__time = var_IKr__IKr_Xr_gate__d_Xr_d_environment__time; // ___units_16
        const double var_chaste_interface__Irel__d_APtrack_d_environment__time = var_Irel__d_APtrack_d_environment__time; // ___units_16
        const double var_chaste_interface__Irel__d_APtrack2_d_environment__time = var_Irel__d_APtrack2_d_environment__time; // ___units_16
        const double var_chaste_interface__Irel__d_APtrack3_d_environment__time = var_Irel__d_APtrack3_d_environment__time; // ___units_16
        const double var_chaste_interface__Irel__d_Cainfluxtrack_d_environment__time = var_Irel__d_Cainfluxtrack_d_environment__time; // ___units_47
        const double var_chaste_interface__Irel__d_OVRLDtrack_d_environment__time = var_Irel__d_OVRLDtrack_d_environment__time; // ___units_16
        const double var_chaste_interface__Irel__d_OVRLDtrack2_d_environment__time = var_Irel__d_OVRLDtrack2_d_environment__time; // ___units_16
        const double var_chaste_interface__Irel__d_OVRLDtrack3_d_environment__time = var_Irel__d_OVRLDtrack3_d_environment__time; // ___units_16
        const double var_chaste_interface__Ionic_concentrations__d_Nai_d_environment__time = var_Ionic_concentrations__d_Nai_d_environment__time; // ___units_47
        const double var_chaste_interface__Ionic_concentrations__d_Ki_d_environment__time = var_Ionic_concentrations__d_Ki_d_environment__time; // ___units_47
        const double var_chaste_interface__Ionic_concentrations__d_Ca_JSR_d_environment__time = var_Ionic_concentrations__d_Ca_JSR_d_environment__time; // ___units_47
        const double var_chaste_interface__Ionic_concentrations__d_Ca_NSR_d_environment__time = var_Ionic_concentrations__d_Ca_NSR_d_environment__time; // ___units_47
        const double d_dt_chaste_interface__Ionic_concentrations__Cai = var_chaste_interface__Ionic_concentrations__d_Cai_d_environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__INa_m_gate__m = var_chaste_interface__INa_m_gate__d_m_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__INa_h_gate__h = var_chaste_interface__INa_h_gate__d_h_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__INa_j_gate__j = var_chaste_interface__INa_j_gate__d_j_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICa_d_gate__d = var_chaste_interface__ICa_d_gate__d_d_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__ICa_f_gate__f = var_chaste_interface__ICa_f_gate__d_f_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Ito_r_gate__r = var_chaste_interface__Ito_r_gate__d_r_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Ito_t_gate__t = var_chaste_interface__Ito_t_gate__d_t_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKs_Xs_gate__Xs = var_chaste_interface__IKs_Xs_gate__d_Xs_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__IKr_Xr_gate__Xr = var_chaste_interface__IKr_Xr_gate__d_Xr_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Irel__APtrack = var_chaste_interface__Irel__d_APtrack_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Irel__APtrack2 = var_chaste_interface__Irel__d_APtrack2_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Irel__APtrack3 = var_chaste_interface__Irel__d_APtrack3_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Irel__Cainfluxtrack = var_chaste_interface__Irel__d_Cainfluxtrack_d_environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Irel__OVRLDtrack = var_chaste_interface__Irel__d_OVRLDtrack_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Irel__OVRLDtrack2 = var_chaste_interface__Irel__d_OVRLDtrack2_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Irel__OVRLDtrack3 = var_chaste_interface__Irel__d_OVRLDtrack3_d_environment__time; // 'per millisecond'
        const double d_dt_chaste_interface__Ionic_concentrations__Nai = var_chaste_interface__Ionic_concentrations__d_Nai_d_environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ionic_concentrations__Ki = var_chaste_interface__Ionic_concentrations__d_Ki_d_environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ionic_concentrations__Ca_JSR = var_chaste_interface__Ionic_concentrations__d_Ca_JSR_d_environment__time; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ionic_concentrations__Ca_NSR = var_chaste_interface__Ionic_concentrations__d_Ca_NSR_d_environment__time; // 'millimole per litre per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__cell__V = 0.0;
        }
        else
        {
            const double var_cell__d_V_d_environment__time = var_cell__dVdt; // 'millivolt per millisecond'
            const double var_chaste_interface__cell__d_V_d_environment__time = var_cell__d_V_d_environment__time; // ___units_6
            d_dt_chaste_interface__cell__V = var_chaste_interface__cell__d_V_d_environment__time; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__cell__V;
        rDY[1] = d_dt_chaste_interface__Ionic_concentrations__Cai;
        rDY[2] = d_dt_chaste_interface__INa_m_gate__m;
        rDY[3] = d_dt_chaste_interface__INa_h_gate__h;
        rDY[4] = d_dt_chaste_interface__INa_j_gate__j;
        rDY[5] = d_dt_chaste_interface__ICa_d_gate__d;
        rDY[6] = d_dt_chaste_interface__ICa_f_gate__f;
        rDY[7] = d_dt_chaste_interface__Ito_r_gate__r;
        rDY[8] = d_dt_chaste_interface__Ito_t_gate__t;
        rDY[9] = d_dt_chaste_interface__IKs_Xs_gate__Xs;
        rDY[10] = d_dt_chaste_interface__IKr_Xr_gate__Xr;
        rDY[11] = d_dt_chaste_interface__Irel__APtrack;
        rDY[12] = d_dt_chaste_interface__Irel__APtrack2;
        rDY[13] = d_dt_chaste_interface__Irel__APtrack3;
        rDY[14] = d_dt_chaste_interface__Irel__Cainfluxtrack;
        rDY[15] = d_dt_chaste_interface__Irel__OVRLDtrack;
        rDY[16] = d_dt_chaste_interface__Irel__OVRLDtrack2;
        rDY[17] = d_dt_chaste_interface__Irel__OVRLDtrack3;
        rDY[18] = d_dt_chaste_interface__Ionic_concentrations__Nai;
        rDY[19] = d_dt_chaste_interface__Ionic_concentrations__Ki;
        rDY[20] = d_dt_chaste_interface__Ionic_concentrations__Ca_JSR;
        rDY[21] = d_dt_chaste_interface__Ionic_concentrations__Ca_NSR;
    }
    
template<>
void OdeSystemInformation<Dynamicpriebe_beuckelmann_model_1998FromCellML>::Initialise(void)
{
    this->mSystemName = "priebe_beuckelmann_model_1998";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-90.7796417483135);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0002);

    // rY[2]:
    this->mVariableNames.push_back("INa_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000585525582501575);

    // rY[3]:
    this->mVariableNames.push_back("INa_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.995865529216237);

    // rY[4]:
    this->mVariableNames.push_back("INa_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.997011204496203);

    // rY[5]:
    this->mVariableNames.push_back("ICa_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.50653215966786e-10);

    // rY[6]:
    this->mVariableNames.push_back("ICa_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.92130376850548);

    // rY[7]:
    this->mVariableNames.push_back("Ito_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.75032478501027e-5);

    // rY[8]:
    this->mVariableNames.push_back("Ito_t_gate__t");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999897251531651);

    // rY[9]:
    this->mVariableNames.push_back("IKs_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00885658064818147);

    // rY[10]:
    this->mVariableNames.push_back("IKr_Xr_gate__Xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000215523048438941);

    // rY[11]:
    this->mVariableNames.push_back("Irel__APtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(-1.372158997089e-136);

    // rY[12]:
    this->mVariableNames.push_back("Irel__APtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(-7.58517896402761e-136);

    // rY[13]:
    this->mVariableNames.push_back("Irel__APtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(4.82035353592764e-5);

    // rY[14]:
    this->mVariableNames.push_back("Irel__Cainfluxtrack");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(-7.71120176147331e-138);

    // rY[15]:
    this->mVariableNames.push_back("Irel__OVRLDtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-6);

    // rY[16]:
    this->mVariableNames.push_back("Irel__OVRLDtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-6);

    // rY[17]:
    this->mVariableNames.push_back("Irel__OVRLDtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-6);

    // rY[18]:
    this->mVariableNames.push_back("Ionic_concentrations__Nai");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(10);

    // rY[19]:
    this->mVariableNames.push_back("Ionic_concentrations__Ki");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(140);

    // rY[20]:
    this->mVariableNames.push_back("Ionic_concentrations__Ca_JSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(2.5);

    // rY[21]:
    this->mVariableNames.push_back("Ionic_concentrations__Ca_NSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(2.5);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamicpriebe_beuckelmann_model_1998FromCellML)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamicpriebe_beuckelmann_model_1998FromCellML(pSolver, pStimulus);
    }
    
}

