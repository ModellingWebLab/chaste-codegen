//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: decker_2009
//! 
//! Processed by weblab_cg: https://github.com/ModellingWebLab/weblab-cg
//!     (translator: weblab_cg, model type: normal, options: )
//! on 2019-12-17 10:22:23
//! 
//! <autogenerated>

#include "decker_2009.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Celldecker_2009FromCellML::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_amplitude = -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_chaste_interface__membrane__stim_duration = 0.5; // millisecond
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_offset = 0.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double Celldecker_2009FromCellML::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    
    Celldecker_2009FromCellML::Celldecker_2009FromCellML(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                48,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Celldecker_2009FromCellML>::Instance();
        Init();
        
        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
    }
    
    Celldecker_2009FromCellML::~Celldecker_2009FromCellML()
    {
    }

    double Celldecker_2009FromCellML::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.472528
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 7.09945e-05
        double var_chaste_interface__IKs__O1 = rY[17];
        // Units: dimensionless; Initial value: 1.051906959485266e-05
        double var_chaste_interface__IKs__O2 = rY[18];
        // Units: dimensionless; Initial value: 2.372219883411999e-06
        double var_chaste_interface__ICaL__O = rY[20];
        // Units: dimensionless; Initial value: 2.27419494597377e-05
        double var_chaste_interface__ICaL__O_star = rY[22];
        // Units: dimensionless; Initial value: 1.350122566369778e-15
        double var_chaste_interface__INa_m_gate__m = rY[27];
        // Units: dimensionless; Initial value: 0.001022252813581797
        double var_chaste_interface__INa_h_gate__h = rY[28];
        // Units: dimensionless; Initial value: 0.9913109066867
        double var_chaste_interface__INa_j_gate__j = rY[29];
        // Units: dimensionless; Initial value: 0.9970771239754529
        double var_chaste_interface__INaL_mL_gate__mL = rY[30];
        // Units: dimensionless; Initial value: 0.001022252813581797
        double var_chaste_interface__INaL_hL_gate__hL = rY[31];
        // Units: dimensionless; Initial value: 0.3593255076983574
        double var_chaste_interface__IKr_xr_gate__xr = rY[32];
        // Units: dimensionless; Initial value: 1.235996442041028e-08
        double var_chaste_interface__Ito1_a_gate__a = rY[33];
        // Units: dimensionless; Initial value: 1.773318268499115e-05
        double var_chaste_interface__Ito1_i1f_gate__i1f = rY[34];
        // Units: dimensionless; Initial value: 0.9979722
        double var_chaste_interface__Ito1_i1s_gate__i1s = rY[35];
        // Units: dimensionless; Initial value: 0.9874435
        double var_chaste_interface__Ito2_i2f_gate__i2f = rY[36];
        // Units: dimensionless; Initial value: 0.9960352
        double var_chaste_interface__Irel__Irel = rY[37];
        // Units: mM_per_ms; Initial value: 0.00107332
        double var_chaste_interface__Ca__Ca_ss_sr = rY[40];
        // Units: mM; Initial value: 9.04757e-05
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[41];
        // Units: mM; Initial value: 9.61545e-05
        double var_chaste_interface__Na__Na_i = rY[42];
        // Units: mM; Initial value: 6.935575
        double var_chaste_interface__Na__Na_ss_sr = rY[43];
        // Units: mM; Initial value: 6.935607
        double var_chaste_interface__Cl__Cl_i = rY[44];
        // Units: mM; Initial value: 20.26842
        double var_chaste_interface__K__K_i = rY[46];
        // Units: mM; Initial value: 145.5689
        
        const double var_ICaL__PCa = 0.00015552; // L_per_F_ms
        const double var_ICaL__gamma_Cai = 1.0; // dimensionless
        const double var_ICaL__gamma_Cao = 0.341; // dimensionless
        const double var_ICab__PCab = 1.995084e-07; // L_per_F_ms
        const double var_ICab__gamma_Ca_i = 1.0; // dimensionless
        const double var_ICab__gamma_Ca_o = 0.341; // dimensionless
        const double var_IClb__gClb = 0.000225; // mS_per_uF
        const double var_IKp__gKp = 0.00276; // mS_per_uF
        const double var_IKr__gKr_max = 0.0138542; // mS_per_uF
        const double var_IKs__OKs = var_chaste_interface__IKs__O1 + var_chaste_interface__IKs__O2; // dimensionless
        const double var_IKs__gKs = (0.6 / (pow((3.8e-05 / var_chaste_interface__Ca__Ca_i), 1.4) + 1.0) + 1.0) * 0.0826; // mS_per_uF
        const double var_INa__g_Na = 9.075; // mS_per_uF
        const double var_INaCa__KmCa_act = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0036; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.3; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__Vmax = 4.5; // uA_per_uF
        const double var_INaCa__denom_1 = pow((var_INaCa__KmCa_act / var_chaste_interface__Ca__Ca_i), 2.0) + 1.0; // dimensionless
        const double var_INaCa__denom_ss_1 = pow((var_INaCa__KmCa_act / var_chaste_interface__Ca__Ca_ss_sr), 2.0) + 1.0; // dimensionless
        const double var_INaCa__eta = 0.27; // dimensionless
        const double var_INaCa__ksat = 0.32; // dimensionless
        const double var_INaK__V_half = -92.0; // mV
        const double var_INaK__ibarnak = 1.4; // uA_per_uF
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 2.6; // mM
        const double var_INaK__sigma = 1.0; // dimensionless
        const double var_INaL__gNaL = 0.0065; // mS_per_uF
        const double var_INab__PNab = 3.2e-09; // L_per_F_ms
        const double var_IpCa__KmpCa = 0.0005; // mM
        const double var_IpCa__gpCa = 0.0575; // uA_per_uF
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * var_IpCa__gpCa / (var_chaste_interface__Ca__Ca_i + var_IpCa__KmpCa); // uA_per_uF
        const double var_Ito1__gto1 = 0.4975; // mS_per_uF
        const double var_Ito2__PCl = 9e-07; // L_per_F_ms
        const double var_Ito2__kCa_ito2 = 0.4; // mM_per_ms
        const double var_Ito2__KCa_ito2 = -1.0 / (pow((var_chaste_interface__Irel__Irel / var_Ito2__kCa_ito2), 2.0) + 1.0) + 1.0; // dimensionless
        const double var_Ito2__zCl = -1.0; // dimensionless
        const double var_INaK__PNa = pow((var_chaste_interface__Na__Na_i / (var_INaK__kmnai + var_chaste_interface__Na__Na_i)), 3.0); // dimensionless
        const double var_IKp__Kp = 1.0 / (1.0 + exp((-var_chaste_interface__membrane__Vm + 7.488) / 5.98)); // dimensionless
        const double var_IKr_r_gate__r = 1.0 / (1.0 + exp((10.0 + var_chaste_interface__membrane__Vm) / 15.4)); // dimensionless
        const double var_Ito1__rto1 = exp(var_chaste_interface__membrane__Vm / 550.0); // dimensionless
        const double var_membrane__i_Stim = 0.0; // uA_per_uF
        const double var_model_parameters__Ca_o = 1.8; // mM
        const double var_INaCa__denom_3 = pow(var_INaCa__KmNao, 3.0) * var_chaste_interface__Ca__Ca_i + pow(var_chaste_interface__Na__Na_i, 3.0) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3.0) * (var_chaste_interface__Ca__Ca_i / var_INaCa__KmCai + 1.0) * var_model_parameters__Ca_o; // mM4
        const double var_INaCa__denom_ss_3 = pow(var_INaCa__KmNao, 3.0) * var_chaste_interface__Ca__Ca_ss_sr + pow(var_chaste_interface__Na__Na_ss_sr, 3.0) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3.0) * (var_chaste_interface__Ca__Ca_ss_sr / var_INaCa__KmCai + 1.0) * var_model_parameters__Ca_o; // mM4
        const double var_model_parameters__Cl_o = 100.0; // mM
        const double var_model_parameters__F = 96487.0; // C_per_mole
        const double var_model_parameters__K_o = 5.4; // mM
        const double var_IK1__gK1 = sqrt(var_model_parameters__K_o / 5.4) * 0.5; // mS_per_uF
        const double var_IKr__gKr = sqrt(var_model_parameters__K_o / 5.4) * var_IKr__gKr_max; // mS_per_uF
        const double var_INaK__PK = var_model_parameters__K_o / (var_INaK__kmko + var_model_parameters__K_o); // dimensionless
        const double var_model_parameters__Na_o = 140.0; // mM
        const double var_INaCa__denom_4 = pow(var_chaste_interface__Na__Na_i, 3.0) * var_model_parameters__Ca_o + pow(var_model_parameters__Na_o, 3.0) * var_chaste_interface__Ca__Ca_i + pow(var_model_parameters__Na_o, 3.0) * (pow((var_chaste_interface__Na__Na_i / var_INaCa__KmNai), 3.0) + 1.0) * var_INaCa__KmCai; // mM4
        const double var_INaCa__denom_ss_4 = pow(var_chaste_interface__Na__Na_ss_sr, 3.0) * var_model_parameters__Ca_o + pow(var_model_parameters__Na_o, 3.0) * var_chaste_interface__Ca__Ca_ss_sr + pow(var_model_parameters__Na_o, 3.0) * (pow((var_chaste_interface__Na__Na_ss_sr / var_INaCa__KmNai), 3.0) + 1.0) * var_INaCa__KmCai; // mM4
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_ICaL__ICaL_max = pow(var_model_parameters__F, 2.0) * (-var_ICaL__gamma_Cao * var_model_parameters__Ca_o + var_chaste_interface__Ca__Ca_ss_CaL * var_ICaL__gamma_Cai * exp(2.0 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * 4.0 * var_ICaL__PCa * var_chaste_interface__membrane__Vm / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * var_model_parameters__R * var_model_parameters__T); // uA_per_uF
        const double var_ICaL__ICaL = (var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__O_star) * var_ICaL__ICaL_max; // uA_per_uF
        const double var_ICab__ICab = pow(var_model_parameters__F, 2.0) * (-var_ICab__gamma_Ca_o * var_model_parameters__Ca_o + var_chaste_interface__Ca__Ca_i * var_ICab__gamma_Ca_i * exp(2.0 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * 4.0 * var_ICab__PCab * var_chaste_interface__membrane__Vm / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * var_model_parameters__R * var_model_parameters__T); // uA_per_uF
        const double var_INaCa__denom_2 = var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) + 1.0; // dimensionless
        const double var_INaCa__denom_ss_2 = var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) + 1.0; // dimensionless
        const double var_INaCa__num = (pow(var_chaste_interface__Na__Na_i, 3.0) * var_model_parameters__Ca_o * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(var_model_parameters__Na_o, 3.0) * var_chaste_interface__Ca__Ca_i * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * 0.8 * var_INaCa__Vmax; // mM4_uA_per_uF
        const double var_INaCa__INaCa = var_INaCa__num / ((var_INaCa__denom_3 + var_INaCa__denom_4) * var_INaCa__denom_1 * var_INaCa__denom_2); // uA_per_uF
        const double var_INaCa__num_ss = (pow(var_chaste_interface__Na__Na_ss_sr, 3.0) * var_model_parameters__Ca_o * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(var_model_parameters__Na_o, 3.0) * var_chaste_interface__Ca__Ca_ss_sr * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * 0.2 * var_INaCa__Vmax; // mM4_uA_per_uF
        const double var_INaCa__INaCa_ss_sr = var_INaCa__num_ss / ((var_INaCa__denom_ss_3 + var_INaCa__denom_ss_4) * var_INaCa__denom_ss_1 * var_INaCa__denom_ss_2); // uA_per_uF
        const double var_INaK__phi = (-var_INaK__V_half + var_chaste_interface__membrane__Vm) * var_INaK__sigma * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INaK__fv = 1.0 / (1.0 + exp(-var_INaK__phi)); // dimensionless
        const double var_INaK__INaK = var_INaK__PK * var_INaK__PNa * var_INaK__fv * var_INaK__ibarnak; // uA_per_uF
        const double var_INab__phi = var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INab__INab = (-var_model_parameters__Na_o + var_chaste_interface__Na__Na_i * exp(var_INab__phi)) * var_INab__PNab * var_INab__phi * var_model_parameters__F / (-1.0 + exp(var_INab__phi)); // uA_per_uF
        const double var_Ito2__Ito2_max = pow(var_Ito2__zCl, 2.0) * pow(var_model_parameters__F, 2.0) * (-var_model_parameters__Cl_o * exp(var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) + var_chaste_interface__Cl__Cl_i) * var_Ito2__PCl * var_chaste_interface__membrane__Vm / ((-exp(var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) + 1.0) * var_model_parameters__R * var_model_parameters__T); // uA_per_uF
        const double var_Ito2__Ito2 = var_Ito2__Ito2_max * var_Ito2__KCa_ito2 * var_chaste_interface__Ito2_i2f_gate__i2f; // uA_per_uF
        const double var_membrane__caiont = -(var_INaCa__INaCa + var_INaCa__INaCa_ss_sr) * 2.0 + var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa; // uA_per_uF
        const double var_reversal_potentials__ECl = -var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__Cl_o / var_chaste_interface__Cl__Cl_i) / var_model_parameters__F; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__membrane__Vm) * var_IClb__gClb; // uA_per_uF
        const double var_membrane__clont = var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
        const double var_reversal_potentials__EK = var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__K_o / var_chaste_interface__K__K_i) / var_model_parameters__F; // mV
        const double var_IK1_K1_gate__alpha_k1 = 1.02 / (1.0 + exp((-59.215 - var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * 0.2385)); // dimensionless
        const double var_IK1_K1_gate__beta_k1 = (0.49124 * exp((-var_reversal_potentials__EK + 5.476 + var_chaste_interface__membrane__Vm) * 0.08032) + exp((-594.31 - var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * 0.06175)) / (1.0 + exp(-(-var_reversal_potentials__EK + 4.753 + var_chaste_interface__membrane__Vm) * 0.5143)); // dimensionless
        const double var_IK1_K1_gate__K1 = var_IK1_K1_gate__alpha_k1 / (var_IK1_K1_gate__alpha_k1 + var_IK1_K1_gate__beta_k1); // dimensionless
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IK1__gK1 * var_IK1_K1_gate__K1; // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKp__Kp * var_IKp__gKp; // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKr__gKr * var_IKr_r_gate__r * var_chaste_interface__IKr_xr_gate__xr; // uA_per_uF
        const double var_Ito1__Ito1 = pow(var_chaste_interface__Ito1_a_gate__a, 3.0) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_Ito1__gto1 * var_Ito1__rto1 * var_chaste_interface__Ito1_i1f_gate__i1f * var_chaste_interface__Ito1_i1s_gate__i1s; // uA_per_uF
        const double var_reversal_potentials__ENa = var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__Na_o / var_chaste_interface__Na__Na_i) / var_model_parameters__F; // mV
        const double var_INa__INa = pow(var_chaste_interface__INa_m_gate__m, 3.0) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * var_INa__g_Na * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INaL__INaL = pow(var_chaste_interface__INaL_mL_gate__mL, 3.0) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * var_INaL__gNaL * var_chaste_interface__INaL_hL_gate__hL; // uA_per_uF
        const double var_membrane__naiont = (var_INaCa__INaCa + var_INaCa__INaCa_ss_sr) * 3.0 + 3.0 * var_INaK__INaK + var_INa__INa + var_INaL__INaL + var_INab__INab; // uA_per_uF
        const double var_reversal_potentials__prnak = 0.01833; // dimensionless
        const double var_reversal_potentials__EKs = var_model_parameters__R * var_model_parameters__T * log((var_model_parameters__Na_o * var_reversal_potentials__prnak + var_model_parameters__K_o) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_model_parameters__F; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__Vm) * var_IKs__OKs * var_IKs__gKs; // uA_per_uF
        const double var_membrane__kiont = -2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito1__Ito1 + var_membrane__i_Stim; // uA_per_uF
        const double var_chaste_interface__i_ionic = (var_membrane__caiont + var_membrane__clont + var_membrane__kiont + var_membrane__naiont) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Celldecker_2009FromCellML::EvaluateYDerivatives(double var_chaste_interface__environment__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.472528
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 7.09945e-05
        double var_chaste_interface__IKs__C1 = rY[2];
        // Units: dimensionless; Initial value: 0.476653873938053
        double var_chaste_interface__IKs__C2 = rY[3];
        // Units: dimensionless; Initial value: 0.2551771850026437
        double var_chaste_interface__IKs__C3 = rY[4];
        // Units: dimensionless; Initial value: 0.05122852186842027
        double var_chaste_interface__IKs__C4 = rY[5];
        // Units: dimensionless; Initial value: 0.004570874421666423
        double var_chaste_interface__IKs__C5 = rY[6];
        // Units: dimensionless; Initial value: 0.0001529389211563687
        double var_chaste_interface__IKs__C6 = rY[7];
        // Units: dimensionless; Initial value: 0.1328281770413747
        double var_chaste_interface__IKs__C7 = rY[8];
        // Units: dimensionless; Initial value: 0.05333228495514583
        double var_chaste_interface__IKs__C8 = rY[9];
        // Units: dimensionless; Initial value: 0.007137874613383642
        double var_chaste_interface__IKs__C9 = rY[10];
        // Units: dimensionless; Initial value: 0.0003184390970637536
        double var_chaste_interface__IKs__C10 = rY[11];
        // Units: dimensionless; Initial value: 0.01388061042363991
        double var_chaste_interface__IKs__C11 = rY[12];
        // Units: dimensionless; Initial value: 0.003715500164470033
        double var_chaste_interface__IKs__C12 = rY[13];
        // Units: dimensionless; Initial value: 0.0002486371465457659
        double var_chaste_interface__IKs__C13 = rY[14];
        // Units: dimensionless; Initial value: 0.0006446803014431032
        double var_chaste_interface__IKs__C14 = rY[15];
        // Units: dimensionless; Initial value: 8.628258026770862e-05
        double var_chaste_interface__IKs__C15 = rY[16];
        // Units: dimensionless; Initial value: 1.122823524761588e-05
        double var_chaste_interface__IKs__O1 = rY[17];
        // Units: dimensionless; Initial value: 1.051906959485266e-05
        double var_chaste_interface__IKs__O2 = rY[18];
        // Units: dimensionless; Initial value: 2.372219883411999e-06
        double var_chaste_interface__ICaL__C = rY[19];
        // Units: dimensionless; Initial value: 0.9999613782488198
        double var_chaste_interface__ICaL__O = rY[20];
        // Units: dimensionless; Initial value: 2.27419494597377e-05
        double var_chaste_interface__ICaL__C_star = rY[21];
        // Units: dimensionless; Initial value: 5.936477396599124e-11
        double var_chaste_interface__ICaL__O_star = rY[22];
        // Units: dimensionless; Initial value: 1.350122566369778e-15
        double var_chaste_interface__ICaL__CI = rY[23];
        // Units: dimensionless; Initial value: 1.587938121237188e-05
        double var_chaste_interface__ICaL__OI = rY[24];
        // Units: dimensionless; Initial value: 3.611420243201921e-10
        double var_chaste_interface__ICaL__CI_star = rY[25];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ICaL__OI_star = rY[26];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INa_m_gate__m = rY[27];
        // Units: dimensionless; Initial value: 0.001022252813581797
        double var_chaste_interface__INa_h_gate__h = rY[28];
        // Units: dimensionless; Initial value: 0.9913109066867
        double var_chaste_interface__INa_j_gate__j = rY[29];
        // Units: dimensionless; Initial value: 0.9970771239754529
        double var_chaste_interface__INaL_mL_gate__mL = rY[30];
        // Units: dimensionless; Initial value: 0.001022252813581797
        double var_chaste_interface__INaL_hL_gate__hL = rY[31];
        // Units: dimensionless; Initial value: 0.3593255076983574
        double var_chaste_interface__IKr_xr_gate__xr = rY[32];
        // Units: dimensionless; Initial value: 1.235996442041028e-08
        double var_chaste_interface__Ito1_a_gate__a = rY[33];
        // Units: dimensionless; Initial value: 1.773318268499115e-05
        double var_chaste_interface__Ito1_i1f_gate__i1f = rY[34];
        // Units: dimensionless; Initial value: 0.9979722
        double var_chaste_interface__Ito1_i1s_gate__i1s = rY[35];
        // Units: dimensionless; Initial value: 0.9874435
        double var_chaste_interface__Ito2_i2f_gate__i2f = rY[36];
        // Units: dimensionless; Initial value: 0.9960352
        double var_chaste_interface__Irel__Irel = rY[37];
        // Units: mM_per_ms; Initial value: 0.00107332
        double var_chaste_interface__Ca__Ca_JSR = rY[38];
        // Units: mM; Initial value: 0.917692717
        double var_chaste_interface__Ca__Ca_NSR = rY[39];
        // Units: mM; Initial value: 0.929835335
        double var_chaste_interface__Ca__Ca_ss_sr = rY[40];
        // Units: mM; Initial value: 9.04757e-05
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[41];
        // Units: mM; Initial value: 9.61545e-05
        double var_chaste_interface__Na__Na_i = rY[42];
        // Units: mM; Initial value: 6.935575
        double var_chaste_interface__Na__Na_ss_sr = rY[43];
        // Units: mM; Initial value: 6.935607
        double var_chaste_interface__Cl__Cl_i = rY[44];
        // Units: mM; Initial value: 20.26842
        double var_chaste_interface__Cl__Cl_ss = rY[45];
        // Units: mM; Initial value: 20.26842
        double var_chaste_interface__K__K_i = rY[46];
        // Units: mM; Initial value: 145.5689
        double var_chaste_interface__CaMK_active__CaMK_trap = rY[47];
        // Units: dimensionless; Initial value: 0.0018861341
        
        // Mathematics
        double d_dt_chaste_interface_var_membrane__Vm;
        const double var_CT_K_Cl__CT_K_Cl_max = 1.77e-05; // mM_per_ms
        const double var_CT_Na_Cl__CT_Na_Cl_max = 2.46108e-05; // mM_per_ms
        const double var_Ca__BSLmax = 1.124; // mM
        const double var_Ca__BSRmax = 0.047; // mM
        const double var_Ca__KmBSL = 0.0087; // mM
        const double var_Ca__KmBSR = 0.00087; // mM
        const double var_Ca__bss = 1.0 / (pow((var_chaste_interface__Ca__Ca_ss_CaL + var_Ca__KmBSL), (-2.0)) * var_Ca__BSLmax * var_Ca__KmBSL + pow((var_chaste_interface__Ca__Ca_ss_CaL + var_Ca__KmBSR), (-2.0)) * var_Ca__BSRmax * var_Ca__KmBSR + 1.0); // dimensionless
        const double var_Ca__bss_sr = 1.0 / (pow((var_chaste_interface__Ca__Ca_ss_sr + var_Ca__KmBSL), (-2.0)) * var_Ca__BSLmax * var_Ca__KmBSL + pow((var_chaste_interface__Ca__Ca_ss_sr + var_Ca__KmBSR), (-2.0)) * var_Ca__BSRmax * var_Ca__KmBSR + 1.0); // dimensionless
        const double var_Ca__cmdn_bar = 0.05; // mM
        const double var_Ca__csqnbar = 10.0; // mM
        const double var_Ca__km_cmdn = 0.00238; // mM
        const double var_Ca__km_trpn = 0.0005; // mM
        const double var_Ca__kmcsqn = 0.8; // mM
        const double var_Ca__bcsqn = 1.0 / (pow((var_chaste_interface__Ca__Ca_JSR + var_Ca__kmcsqn), (-2.0)) * var_Ca__csqnbar * var_Ca__kmcsqn + 1.0); // dimensionless
        const double var_Ca__tau_diff = 0.2; // ms
        const double var_Ca__Idiff = (-var_chaste_interface__Ca__Ca_i + var_chaste_interface__Ca__Ca_ss_sr) / var_Ca__tau_diff; // mM_per_ms
        const double var_Ca__tau_diff_ss = 2.0; // ms
        const double var_Ca__Idiff_ss = (-var_chaste_interface__Ca__Ca_ss_CaL + var_chaste_interface__Ca__Ca_ss_sr) / var_Ca__tau_diff_ss; // mM_per_ms
        const double var_Ca__trpn_bar = 0.07; // mM
        const double var_Ca__bmyo = 1.0 / (pow((var_chaste_interface__Ca__Ca_i + var_Ca__km_cmdn), (-2.0)) * var_Ca__cmdn_bar * var_Ca__km_cmdn + pow((var_chaste_interface__Ca__Ca_i + var_Ca__km_trpn), (-2.0)) * var_Ca__km_trpn * var_Ca__trpn_bar + 1.0); // dimensionless
        const double var_CaMK_active__CaMK_0 = 0.05; // dimensionless
        const double var_CaMK_active__Km = 0.0015; // mM
        const double var_CaMK_active__CaMK_active = (-var_chaste_interface__CaMK_active__CaMK_trap + 1.0) * var_CaMK_active__CaMK_0 / (var_CaMK_active__Km / var_chaste_interface__Ca__Ca_ss_sr + 1.0) + var_chaste_interface__CaMK_active__CaMK_trap; // dimensionless
        const double var_CaMK_active__alpha_CaMK = 0.05; // per_ms
        const double var_CaMK_active__beta_CaMK = 0.00068; // per_ms
        const double var_Cl__Idiff_Cl = (-var_chaste_interface__Cl__Cl_i + var_chaste_interface__Cl__Cl_ss) / var_Ca__tau_diff; // mM_per_ms
        const double d_dt_chaste_interface_var_CaMK_active__CaMK_trap = -var_chaste_interface__CaMK_active__CaMK_trap * var_CaMK_active__beta_CaMK + (-var_chaste_interface__CaMK_active__CaMK_trap + var_CaMK_active__CaMK_active) * var_CaMK_active__CaMK_active * var_CaMK_active__alpha_CaMK; // 1 / millisecond
        const double var_ICaL__IV_beta_infinity_star = -17.5 / (pow((0.003 / var_chaste_interface__Ca__Ca_ss_CaL), 4.0) + 1.0) + 25.0; // dimensionless
        const double var_ICaL__PCa = 0.00015552; // L_per_F_ms
        const double var_ICaL__delta = 3.0 / (pow((0.003 / var_chaste_interface__Ca__Ca_ss_CaL), 4.0) + 1.0); // per_ms
        const double var_ICaL__gamma_Cai = 1.0; // dimensionless
        const double var_ICaL__gamma_Cao = 0.341; // dimensionless
        const double var_ICaL__theta = 1.0; // per_ms
        const double var_ICaL__theta_I = 1e-06; // per_ms
        const double var_ICab__PCab = 1.995084e-07; // L_per_F_ms
        const double var_ICab__gamma_Ca_i = 1.0; // dimensionless
        const double var_ICab__gamma_Ca_o = 0.341; // dimensionless
        const double var_IClb__gClb = 0.000225; // mS_per_uF
        const double var_IKp__gKp = 0.00276; // mS_per_uF
        const double var_IKr__gKr_max = 0.0138542; // mS_per_uF
        const double var_IKs__OKs = var_chaste_interface__IKs__O1 + var_chaste_interface__IKs__O2; // dimensionless
        const double var_IKs__gKs = (0.6 / (pow((3.8e-05 / var_chaste_interface__Ca__Ca_i), 1.4) + 1.0) + 1.0) * 0.0826; // mS_per_uF
        const double var_IKs__theta = 0.089538; // per_ms
        const double var_INa__g_Na = 9.075; // mS_per_uF
        const double var_INaCa__KmCa_act = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0036; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.3; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__Vmax = 4.5; // uA_per_uF
        const double var_INaCa__denom_1 = pow((var_INaCa__KmCa_act / var_chaste_interface__Ca__Ca_i), 2.0) + 1.0; // dimensionless
        const double var_INaCa__denom_ss_1 = pow((var_INaCa__KmCa_act / var_chaste_interface__Ca__Ca_ss_sr), 2.0) + 1.0; // dimensionless
        const double var_INaCa__eta = 0.27; // dimensionless
        const double var_INaCa__ksat = 0.32; // dimensionless
        const double var_INaK__V_half = -92.0; // mV
        const double var_INaK__ibarnak = 1.4; // uA_per_uF
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 2.6; // mM
        const double var_INaK__sigma = 1.0; // dimensionless
        const double var_INaL__gNaL = 0.0065; // mS_per_uF
        const double var_INaL_hL_gate__tau_hL = 600.0; // ms
        const double var_INab__PNab = 3.2e-09; // L_per_F_ms
        const double var_Ileak__nsrbar = 15.0; // mM
        const double var_Ileak__Ileak = 0.004375 * var_chaste_interface__Ca__Ca_NSR / var_Ileak__nsrbar; // mM_per_ms
        const double var_IpCa__KmpCa = 0.0005; // mM
        const double var_IpCa__gpCa = 0.0575; // uA_per_uF
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * var_IpCa__gpCa / (var_chaste_interface__Ca__Ca_i + var_IpCa__KmpCa); // uA_per_uF
        const double var_Irel__K_beta = 0.28; // mM
        const double var_Irel__Krel_infinity = 1.0; // mM
        const double var_Irel__Krel_tau = 0.0123; // mM
        const double var_Irel__beta_0 = 4.75; // ms
        const double var_Irel__delta_beta_0 = 1.0; // dimensionless
        const double var_Irel__h_beta = 10.0; // dimensionless
        const double var_Irel__delta_beta_CaMK = var_Irel__delta_beta_0 / (pow((var_Irel__K_beta / (1.0 * var_CaMK_active__CaMK_active)), var_Irel__h_beta) + 1.0); // dimensionless
        const double var_Irel__beta_tau = (1.0 + var_Irel__delta_beta_CaMK) * var_Irel__beta_0; // ms
        const double var_Irel__h_rel = 8.0; // dimensionless
        const double var_Irel__kappa = 0.1125; // mM_per_uA_per_uF_per_ms_per_ms
        const double var_Irel__alpha_rel = var_Irel__beta_tau * var_Irel__kappa; // mM_per_uA_per_uF_per_ms
        const double var_Irel__tau_rel = var_Irel__beta_tau / (var_Irel__Krel_tau / var_chaste_interface__Ca__Ca_JSR + 1.0); // ms
        const double var_Ito1__gto1 = 0.4975; // mS_per_uF
        const double var_Ito2__PCl = 9e-07; // L_per_F_ms
        const double var_Ito2__kCa_ito2 = 0.4; // mM_per_ms
        const double var_Ito2__KCa_ito2 = -1.0 / (pow((var_chaste_interface__Irel__Irel / var_Ito2__kCa_ito2), 2.0) + 1.0) + 1.0; // dimensionless
        const double var_Ito2__zCl = -1.0; // dimensionless
        const double var_Ito2_i2f_gate__tau_i2f = 8.0; // ms
        const double var_Itr__tautr = 25.0; // ms
        const double var_Itr__Itr = (-var_chaste_interface__Ca__Ca_JSR + var_chaste_interface__Ca__Ca_NSR) / var_Itr__tautr; // mM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_JSR = (-var_chaste_interface__Irel__Irel + var_Itr__Itr) * var_Ca__bcsqn; // mM / millisecond
        const double var_Iup__delta_iupCaMK_bar = 0.75; // dimensionless
        const double var_Iup__delta_kmPLB_bar = 0.00017; // mM
        const double var_Iup__iupbar = 0.004375; // mM_per_ms
        const double var_Iup__kmCaMK = 0.15; // mM
        const double var_Iup__delta_iupCaMK = 1.0 * var_CaMK_active__CaMK_active * var_Iup__delta_iupCaMK_bar / (1.0 * var_CaMK_active__CaMK_active + var_Iup__kmCaMK); // dimensionless
        const double var_Iup__delta_kmPLB = 1.0 * var_CaMK_active__CaMK_active * var_Iup__delta_kmPLB_bar / (1.0 * var_CaMK_active__CaMK_active + var_Iup__kmCaMK); // mM
        const double var_Iup__kmup = 0.00092; // mM
        const double var_Iup__Iup = (1.0 + var_Iup__delta_iupCaMK) * var_chaste_interface__Ca__Ca_i * var_Iup__iupbar / (-var_Iup__delta_kmPLB + var_chaste_interface__Ca__Ca_i + var_Iup__kmup); // mM_per_ms
        const double var_INaK__PNa = pow((var_chaste_interface__Na__Na_i / (var_INaK__kmnai + var_chaste_interface__Na__Na_i)), 3.0); // dimensionless
        const double var_Na__Idiff_Na = (-var_chaste_interface__Na__Na_i + var_chaste_interface__Na__Na_ss_sr) / var_Ca__tau_diff; // mM_per_ms
        const double var_cell_geometry__a = 0.0011; // cm
        const double var_cell_geometry__l = 0.01; // cm
        const double var_cell_geometry__ageo = M_PI * pow(var_cell_geometry__a, 2) * 2.0 + M_PI * 2.0 * var_cell_geometry__a * var_cell_geometry__l; // cm2
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__ageo; // cm2
        const double var_cell_geometry__vcell = M_PI * pow(var_cell_geometry__a, 2) * 1000.0 * var_cell_geometry__l; // uL
        const double var_cell_geometry__Vjsr = 0.0048 * var_cell_geometry__vcell; // uL
        const double var_cell_geometry__Vmyo = 0.678 * var_cell_geometry__vcell; // uL
        const double var_cell_geometry__Vnsr = 0.0552 * var_cell_geometry__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_NSR = -var_Ileak__Ileak - var_Itr__Itr * var_cell_geometry__Vjsr / var_cell_geometry__Vnsr + var_Iup__Iup; // mM / millisecond
        const double var_cell_geometry__Vss_CaL = 0.002 * var_cell_geometry__vcell; // uL
        const double var_cell_geometry__Vss_sr = 0.02 * var_cell_geometry__vcell; // uL
        const double var_ICaL__ACT_infinity = 1.0 / (1.0 + exp((-var_chaste_interface__membrane__Vm + 13.56) / 9.45)); // dimensionless
        const double var_ICaL__ACT_tau = 0.8 * exp((13.0 + var_chaste_interface__membrane__Vm) * 0.052) / (1.0 + exp((13.0 + var_chaste_interface__membrane__Vm) * 0.132)) + 0.59; // ms
        const double var_ICaL__IV_beta_star = 1.0 / ((1.0 + exp((-0.213 - var_chaste_interface__membrane__Vm) / 10.807)) * var_ICaL__IV_beta_infinity_star); // dimensionless
        const double var_ICaL__IV_infinity = (1.0 / (1.0 + exp((17.5 + var_chaste_interface__membrane__Vm) / 3.0)) + 0.25) / 1.25; // dimensionless
        const double var_ICaL__IV_infinity_star = (1.0 / (1.0 + exp((17.5 + var_chaste_interface__membrane__Vm) / 3.0)) + 0.0001) / 1.0001; // dimensionless
        const double var_ICaL__IV_tau = 1.0 / (1.0 / ((1.0 + exp((49.1 + var_chaste_interface__membrane__Vm) / 10.349)) * 24.828) + 1.0 / ((1.0 + exp((-0.213 - var_chaste_interface__membrane__Vm) / 10.807)) * 30.553)); // ms
        const double var_ICaL__IV_tau_star = 1.0 / (1.0 / ((1.0 + exp((49.1 + var_chaste_interface__membrane__Vm) / 10.349)) * 24.828) + var_ICaL__IV_beta_star); // ms
        const double var_ICaL__alpha = var_ICaL__ACT_infinity / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__beta = (-var_ICaL__ACT_infinity + 1.0) / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__x = var_ICaL__IV_infinity / var_ICaL__IV_tau; // per_ms
        const double var_ICaL__x_star = var_ICaL__IV_infinity_star / var_ICaL__IV_tau_star; // per_ms
        const double var_ICaL__y = (-var_ICaL__IV_infinity + 1.0) / var_ICaL__IV_tau; // per_ms
        const double d_dt_chaste_interface_var_ICaL__C = (-var_ICaL__alpha - var_ICaL__delta - var_ICaL__y) * var_chaste_interface__ICaL__C + var_chaste_interface__ICaL__CI * var_ICaL__x + var_chaste_interface__ICaL__C_star * var_ICaL__theta + var_chaste_interface__ICaL__O * var_ICaL__beta; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL__O = (-var_ICaL__beta - var_ICaL__delta - var_ICaL__y) * var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__C * var_ICaL__alpha + var_chaste_interface__ICaL__OI * var_ICaL__x + var_chaste_interface__ICaL__O_star * var_ICaL__theta; // 1 / millisecond
        const double var_ICaL__y_star = (-var_ICaL__IV_infinity_star + 1.0) / var_ICaL__IV_tau_star; // per_ms
        const double d_dt_chaste_interface_var_ICaL__C_star = (-var_ICaL__alpha - var_ICaL__theta - var_ICaL__y_star) * var_chaste_interface__ICaL__C_star + var_chaste_interface__ICaL__C * var_ICaL__delta + var_chaste_interface__ICaL__CI_star * var_ICaL__x_star + var_chaste_interface__ICaL__O_star * var_ICaL__beta; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL__O_star = (-var_ICaL__beta - var_ICaL__theta - var_ICaL__y_star) * var_chaste_interface__ICaL__O_star + var_chaste_interface__ICaL__C_star * var_ICaL__alpha + var_chaste_interface__ICaL__O * var_ICaL__delta + var_chaste_interface__ICaL__OI_star * var_ICaL__x_star; // 1 / millisecond
        const double var_ICaL__delta_I = var_ICaL__delta * var_ICaL__theta_I * var_ICaL__x * var_ICaL__y_star / (var_ICaL__theta * var_ICaL__x_star * var_ICaL__y); // per_ms
        const double d_dt_chaste_interface_var_ICaL__CI = (-var_ICaL__alpha - var_ICaL__delta_I - var_ICaL__x) * var_chaste_interface__ICaL__CI + var_chaste_interface__ICaL__C * var_ICaL__y + var_chaste_interface__ICaL__CI_star * var_ICaL__theta_I + var_chaste_interface__ICaL__OI * var_ICaL__beta; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL__CI_star = (-var_ICaL__alpha - var_ICaL__theta_I - var_ICaL__x_star) * var_chaste_interface__ICaL__CI_star + var_chaste_interface__ICaL__CI * var_ICaL__delta_I + var_chaste_interface__ICaL__C_star * var_ICaL__y_star + var_chaste_interface__ICaL__OI_star * var_ICaL__beta; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL__OI = (-var_ICaL__beta - var_ICaL__delta_I - var_ICaL__x) * var_chaste_interface__ICaL__OI + var_chaste_interface__ICaL__CI * var_ICaL__alpha + var_chaste_interface__ICaL__O * var_ICaL__y + var_chaste_interface__ICaL__OI_star * var_ICaL__theta_I; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL__OI_star = (-var_ICaL__beta - var_ICaL__theta_I - var_ICaL__x_star) * var_chaste_interface__ICaL__OI_star + var_chaste_interface__ICaL__CI_star * var_ICaL__alpha + var_chaste_interface__ICaL__OI * var_ICaL__delta_I + var_chaste_interface__ICaL__O_star * var_ICaL__y_star; // 1 / millisecond
        const double var_IKp__Kp = 1.0 / (1.0 + exp((-var_chaste_interface__membrane__Vm + 7.488) / 5.98)); // dimensionless
        const double var_IKr_r_gate__r = 1.0 / (1.0 + exp((10.0 + var_chaste_interface__membrane__Vm) / 15.4)); // dimensionless
        const double var_IKr_xr_gate__tau_xr = 1.0 / ((38.3608 + var_chaste_interface__membrane__Vm) * 0.0003 / (-1.0 + exp((38.3608 + var_chaste_interface__membrane__Vm) * 0.1522)) + (-1.7384 + var_chaste_interface__membrane__Vm) * 0.0006 / (-exp(-(-1.7384 + var_chaste_interface__membrane__Vm) * 0.136) + 1.0)); // ms
        const double var_IKr_xr_gate__xr_infinity = 1.0 / (1.0 + exp((-10.085 - var_chaste_interface__membrane__Vm) / 4.25)); // dimensionless
        const double d_dt_chaste_interface_var_IKr_xr_gate__xr = (-var_chaste_interface__IKr_xr_gate__xr + var_IKr_xr_gate__xr_infinity) / var_IKr_xr_gate__tau_xr; // 1 / millisecond
        const double var_INaL_hL_gate__hL_infinity = 1.0 / (1.0 + exp((91.0 + var_chaste_interface__membrane__Vm) / 6.1)); // dimensionless
        const double d_dt_chaste_interface_var_INaL_hL_gate__hL = (-var_chaste_interface__INaL_hL_gate__hL + var_INaL_hL_gate__hL_infinity) / var_INaL_hL_gate__tau_hL; // 1 / millisecond
        const double var_INaL_mL_gate__amL = (47.13 + var_chaste_interface__membrane__Vm) * 0.32 / (-exp(-(47.13 + var_chaste_interface__membrane__Vm) * 0.1) + 1.0); // per_ms
        const double var_INaL_mL_gate__bmL = 0.08 * exp(-var_chaste_interface__membrane__Vm / 11.0); // per_ms
        const double d_dt_chaste_interface_var_INaL_mL_gate__mL = (-var_chaste_interface__INaL_mL_gate__mL + 1.0) * var_INaL_mL_gate__amL - var_INaL_mL_gate__bmL * var_chaste_interface__INaL_mL_gate__mL; // 1 / millisecond
        const double var_INa_h_gate__ah = ((40.0 >= -var_chaste_interface__membrane__Vm) ? (0.0) : (0.135 * exp(-(80.0 + var_chaste_interface__membrane__Vm) / 6.8))); // per_ms
        const double var_INa_h_gate__bh = ((40.0 >= -var_chaste_interface__membrane__Vm) ? (1.0 / ((1.0 + exp(-(10.66 + var_chaste_interface__membrane__Vm) / 11.1)) * 0.13)) : (3.56 * exp(0.079 * var_chaste_interface__membrane__Vm) + 310000.0 * exp(0.35 * var_chaste_interface__membrane__Vm))); // per_ms
        const double d_dt_chaste_interface_var_INa_h_gate__h = (-var_chaste_interface__INa_h_gate__h + 1.0) * var_INa_h_gate__ah - var_INa_h_gate__bh * var_chaste_interface__INa_h_gate__h; // 1 / millisecond
        const double var_INa_j_gate__aj = ((40.0 >= -var_chaste_interface__membrane__Vm) ? (0.0) : ((-127140.0 * exp(0.2444 * var_chaste_interface__membrane__Vm) - 6.948e-05 * exp(-0.04391 * var_chaste_interface__membrane__Vm)) * (37.78 + var_chaste_interface__membrane__Vm) / (1.0 + exp((79.23 + var_chaste_interface__membrane__Vm) * 0.311)))); // per_ms
        const double var_INa_j_gate__bj = ((40.0 >= -var_chaste_interface__membrane__Vm) ? (0.3 * exp(-2.535e-07 * var_chaste_interface__membrane__Vm) / (1.0 + exp(-(32.0 + var_chaste_interface__membrane__Vm) * 0.1))) : (0.1212 * exp(-0.01052 * var_chaste_interface__membrane__Vm) / (1.0 + exp(-(40.14 + var_chaste_interface__membrane__Vm) * 0.1378)))); // per_ms
        const double d_dt_chaste_interface_var_INa_j_gate__j = (-var_chaste_interface__INa_j_gate__j + 1.0) * var_INa_j_gate__aj - var_INa_j_gate__bj * var_chaste_interface__INa_j_gate__j; // 1 / millisecond
        const double var_INa_m_gate__am = (47.13 + var_chaste_interface__membrane__Vm) * 0.32 / (-exp(-(47.13 + var_chaste_interface__membrane__Vm) * 0.1) + 1.0); // per_ms
        const double var_INa_m_gate__bm = 0.08 * exp(-var_chaste_interface__membrane__Vm / 11.0); // per_ms
        const double d_dt_chaste_interface_var_INa_m_gate__m = (-var_chaste_interface__INa_m_gate__m + 1.0) * var_INa_m_gate__am - var_INa_m_gate__bm * var_chaste_interface__INa_m_gate__m; // 1 / millisecond
        const double var_Ito1__rto1 = exp(var_chaste_interface__membrane__Vm / 550.0); // dimensionless
        const double var_Ito1_a_gate__a_infinity = 1.0 / (1.0 + exp(-(9.437 + var_chaste_interface__membrane__Vm) / 7.133)); // dimensionless
        const double var_Ito1_a_gate__alpha_a = 1.0 / ((1.0 + exp(-(-18.4099 + var_chaste_interface__membrane__Vm) / 29.3814)) * 1.2089); // per_ms
        const double var_Ito1_a_gate__beta_a = 3.5 / (1.0 + exp((100.0 + var_chaste_interface__membrane__Vm) / 29.3814)); // per_ms
        const double var_Ito1_a_gate__tau_a = 1.0 / (var_Ito1_a_gate__alpha_a + var_Ito1_a_gate__beta_a); // ms
        const double d_dt_chaste_interface_var_Ito1_a_gate__a = (-var_chaste_interface__Ito1_a_gate__a + var_Ito1_a_gate__a_infinity) / var_Ito1_a_gate__tau_a; // 1 / millisecond
        const double var_Ito1_i1f_gate__alpha_i1f = 0.025 / (1.0 + exp((58.0 + var_chaste_interface__membrane__Vm) / 5.0)); // per_ms
        const double var_Ito1_i1f_gate__beta_i1f = 1.0 / ((1.0 + exp(-(19.0 + var_chaste_interface__membrane__Vm) / 9.0)) * 9.7953); // per_ms
        const double d_dt_chaste_interface_var_Ito1_i1f_gate__i1f = (-var_chaste_interface__Ito1_i1f_gate__i1f + 1.0) * var_Ito1_i1f_gate__alpha_i1f - var_Ito1_i1f_gate__beta_i1f * var_chaste_interface__Ito1_i1f_gate__i1f; // 1 / millisecond
        const double var_Ito1_i1s_gate__alpha_i1s = 1.0 / ((1.0 + exp((60.0 + var_chaste_interface__membrane__Vm) / 5.0)) * 250.0); // per_ms
        const double var_Ito1_i1s_gate__beta_i1s = 1.0 / ((1.0 + exp(-(19.0 + var_chaste_interface__membrane__Vm) / 9.0)) * 9.7953); // per_ms
        const double d_dt_chaste_interface_var_Ito1_i1s_gate__i1s = (-var_chaste_interface__Ito1_i1s_gate__i1s + 1.0) * var_Ito1_i1s_gate__alpha_i1s - var_Ito1_i1s_gate__beta_i1s * var_chaste_interface__Ito1_i1s_gate__i1s; // 1 / millisecond
        const double var_Ito2_i2f_gate__alpha_i2f = 0.025 / (1.0 + exp((58.0 + var_chaste_interface__membrane__Vm) / 5.0)); // per_ms
        const double var_Ito2_i2f_gate__beta_i2f = 1.0 / ((1.0 + exp(-(19.0 + var_chaste_interface__membrane__Vm) / 9.0)) * 5.0); // per_ms
        const double var_Ito2_i2f_gate__i2f_infinity = var_Ito2_i2f_gate__alpha_i2f / (var_Ito2_i2f_gate__alpha_i2f + var_Ito2_i2f_gate__beta_i2f); // dimensionless
        const double d_dt_chaste_interface_var_Ito2_i2f_gate__i2f = (-var_chaste_interface__Ito2_i2f_gate__i2f + var_Ito2_i2f_gate__i2f_infinity) / var_Ito2_i2f_gate__tau_i2f; // 1 / millisecond
        const double var_membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time)/ HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_model_parameters__Ca_o = 1.8; // mM
        const double var_INaCa__denom_3 = pow(var_INaCa__KmNao, 3.0) * var_chaste_interface__Ca__Ca_i + pow(var_chaste_interface__Na__Na_i, 3.0) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3.0) * (var_chaste_interface__Ca__Ca_i / var_INaCa__KmCai + 1.0) * var_model_parameters__Ca_o; // mM4
        const double var_INaCa__denom_ss_3 = pow(var_INaCa__KmNao, 3.0) * var_chaste_interface__Ca__Ca_ss_sr + pow(var_chaste_interface__Na__Na_ss_sr, 3.0) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3.0) * (var_chaste_interface__Ca__Ca_ss_sr / var_INaCa__KmCai + 1.0) * var_model_parameters__Ca_o; // mM4
        const double var_model_parameters__Cl_o = 100.0; // mM
        const double var_model_parameters__F = 96487.0; // C_per_mole
        const double var_cell_geometry__AF = 1.0 * 1.0 * var_cell_geometry__Acap / (1.0 * var_model_parameters__F); // uF_mole_per_C
        const double var_model_parameters__K_o = 5.4; // mM
        const double var_IK1__gK1 = sqrt(var_model_parameters__K_o / 5.4) * 0.5; // mS_per_uF
        const double var_IKr__gKr = sqrt(var_model_parameters__K_o / 5.4) * var_IKr__gKr_max; // mS_per_uF
        const double var_INaK__PK = var_model_parameters__K_o / (var_INaK__kmko + var_model_parameters__K_o); // dimensionless
        const double var_model_parameters__Na_o = 140.0; // mM
        const double var_INaCa__denom_4 = pow(var_chaste_interface__Na__Na_i, 3.0) * var_model_parameters__Ca_o + pow(var_model_parameters__Na_o, 3.0) * var_chaste_interface__Ca__Ca_i + pow(var_model_parameters__Na_o, 3.0) * (pow((var_chaste_interface__Na__Na_i / var_INaCa__KmNai), 3.0) + 1.0) * var_INaCa__KmCai; // mM4
        const double var_INaCa__denom_ss_4 = pow(var_chaste_interface__Na__Na_ss_sr, 3.0) * var_model_parameters__Ca_o + pow(var_model_parameters__Na_o, 3.0) * var_chaste_interface__Ca__Ca_ss_sr + pow(var_model_parameters__Na_o, 3.0) * (pow((var_chaste_interface__Na__Na_ss_sr / var_INaCa__KmNai), 3.0) + 1.0) * var_INaCa__KmCai; // mM4
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_ICaL__ICaL_max = pow(var_model_parameters__F, 2.0) * (-var_ICaL__gamma_Cao * var_model_parameters__Ca_o + var_chaste_interface__Ca__Ca_ss_CaL * var_ICaL__gamma_Cai * exp(2.0 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * 4.0 * var_ICaL__PCa * var_chaste_interface__membrane__Vm / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * var_model_parameters__R * var_model_parameters__T); // uA_per_uF
        const double var_ICaL__ICaL = (var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__O_star) * var_ICaL__ICaL_max; // uA_per_uF
        const double d_dt_chaste_interface_var_Ca__Ca_ss_CaL = (var_Ca__Idiff_ss * var_cell_geometry__Vss_sr / var_cell_geometry__Vss_CaL - var_ICaL__ICaL * var_cell_geometry__AF / (2.0 * var_cell_geometry__Vss_CaL)) * var_Ca__bss; // mM / millisecond
        const double var_ICab__ICab = pow(var_model_parameters__F, 2.0) * (-var_ICab__gamma_Ca_o * var_model_parameters__Ca_o + var_chaste_interface__Ca__Ca_i * var_ICab__gamma_Ca_i * exp(2.0 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * 4.0 * var_ICab__PCab * var_chaste_interface__membrane__Vm / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * var_model_parameters__R * var_model_parameters__T); // uA_per_uF
        const double var_IKs__alpha = 0.014864 * exp(0.029877 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986 * exp(-0.055461 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C1 = var_chaste_interface__IKs__C2 * var_IKs__beta - 4.0 * var_chaste_interface__IKs__C1 * var_IKs__alpha; // 1 / millisecond
        const double var_IKs__delta = 0.0031173 * exp(-0.42625 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__eta = 0.07732 * exp(-0.064726 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.014601 * exp(0.24465 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C10 = (-2.0 * var_IKs__alpha - 2.0 * var_IKs__delta) * var_chaste_interface__IKs__C10 + var_chaste_interface__IKs__C11 * var_IKs__beta + var_chaste_interface__IKs__C7 * var_IKs__gamma; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs__C11 = (-var_IKs__alpha - var_IKs__beta - var_IKs__gamma - 2.0 * var_IKs__delta) * var_chaste_interface__IKs__C11 + 2.0 * var_chaste_interface__IKs__C10 * var_IKs__alpha + 2.0 * var_chaste_interface__IKs__C12 * var_IKs__beta + 2.0 * var_chaste_interface__IKs__C8 * var_IKs__gamma + 3.0 * var_chaste_interface__IKs__C13 * var_IKs__delta; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs__C12 = (-2.0 * var_IKs__beta - 2.0 * var_IKs__gamma - 2.0 * var_IKs__delta) * var_chaste_interface__IKs__C12 + var_chaste_interface__IKs__C11 * var_IKs__alpha + 3.0 * var_chaste_interface__IKs__C9 * var_IKs__gamma + 3.0 * var_chaste_interface__IKs__C14 * var_IKs__delta; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs__C13 = (-var_IKs__alpha - 3.0 * var_IKs__delta) * var_chaste_interface__IKs__C13 + var_chaste_interface__IKs__C11 * var_IKs__gamma + var_chaste_interface__IKs__C14 * var_IKs__beta; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs__C14 = (-var_IKs__beta - var_IKs__gamma - 3.0 * var_IKs__delta) * var_chaste_interface__IKs__C14 + var_chaste_interface__IKs__C13 * var_IKs__alpha + 2.0 * var_chaste_interface__IKs__C12 * var_IKs__gamma + 4.0 * var_chaste_interface__IKs__C15 * var_IKs__delta; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs__C15 = (-var_IKs__theta - 4.0 * var_IKs__delta) * var_chaste_interface__IKs__C15 + var_chaste_interface__IKs__C14 * var_IKs__gamma + var_chaste_interface__IKs__O1 * var_IKs__eta; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs__C2 = (-var_IKs__beta - var_IKs__gamma - 3.0 * var_IKs__alpha) * var_chaste_interface__IKs__C2 + var_chaste_interface__IKs__C6 * var_IKs__delta + 2.0 * var_chaste_interface__IKs__C3 * var_IKs__beta + 4.0 * var_chaste_interface__IKs__C1 * var_IKs__alpha; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs__C3 = (-2.0 * var_IKs__alpha - 2.0 * var_IKs__beta - 2.0 * var_IKs__gamma) * var_chaste_interface__IKs__C3 + var_chaste_interface__IKs__C7 * var_IKs__delta + 3.0 * var_chaste_interface__IKs__C2 * var_IKs__alpha + 3.0 * var_chaste_interface__IKs__C4 * var_IKs__beta; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs__C4 = (-var_IKs__alpha - 3.0 * var_IKs__beta - 3.0 * var_IKs__gamma) * var_chaste_interface__IKs__C4 + var_chaste_interface__IKs__C8 * var_IKs__delta + 2.0 * var_chaste_interface__IKs__C3 * var_IKs__alpha + 4.0 * var_chaste_interface__IKs__C5 * var_IKs__beta; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs__C5 = (-4.0 * var_IKs__beta - 4.0 * var_IKs__gamma) * var_chaste_interface__IKs__C5 + var_chaste_interface__IKs__C4 * var_IKs__alpha + var_chaste_interface__IKs__C9 * var_IKs__delta; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs__C6 = (-var_IKs__delta - 3.0 * var_IKs__alpha) * var_chaste_interface__IKs__C6 + var_chaste_interface__IKs__C2 * var_IKs__gamma + var_chaste_interface__IKs__C7 * var_IKs__beta; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs__C7 = (-var_IKs__beta - var_IKs__delta - var_IKs__gamma - 2.0 * var_IKs__alpha) * var_chaste_interface__IKs__C7 + 2.0 * var_chaste_interface__IKs__C8 * var_IKs__beta + 2.0 * var_chaste_interface__IKs__C3 * var_IKs__gamma + 2.0 * var_chaste_interface__IKs__C10 * var_IKs__delta + 3.0 * var_chaste_interface__IKs__C6 * var_IKs__alpha; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs__C8 = (-var_IKs__alpha - var_IKs__delta - 2.0 * var_IKs__beta - 2.0 * var_IKs__gamma) * var_chaste_interface__IKs__C8 + 2.0 * var_chaste_interface__IKs__C7 * var_IKs__alpha + 2.0 * var_chaste_interface__IKs__C11 * var_IKs__delta + 3.0 * var_chaste_interface__IKs__C9 * var_IKs__beta + 3.0 * var_chaste_interface__IKs__C4 * var_IKs__gamma; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs__C9 = (-var_IKs__delta - 3.0 * var_IKs__beta - 3.0 * var_IKs__gamma) * var_chaste_interface__IKs__C9 + var_chaste_interface__IKs__C8 * var_IKs__alpha + 2.0 * var_chaste_interface__IKs__C12 * var_IKs__delta + 4.0 * var_chaste_interface__IKs__C5 * var_IKs__gamma; // 1 / millisecond
        const double var_IKs__omega = 0.79405 * exp(-0.080174 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__psi = 0.58638 * exp(0.28206 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__O1 = (-var_IKs__eta - var_IKs__psi) * var_chaste_interface__IKs__O1 + var_chaste_interface__IKs__C15 * var_IKs__theta + var_chaste_interface__IKs__O2 * var_IKs__omega; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs__O2 = var_chaste_interface__IKs__O1 * var_IKs__psi - var_chaste_interface__IKs__O2 * var_IKs__omega; // 1 / millisecond
        const double var_INaCa__denom_2 = var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) + 1.0; // dimensionless
        const double var_INaCa__denom_ss_2 = var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) + 1.0; // dimensionless
        const double var_INaCa__num = (pow(var_chaste_interface__Na__Na_i, 3.0) * var_model_parameters__Ca_o * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(var_model_parameters__Na_o, 3.0) * var_chaste_interface__Ca__Ca_i * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * 0.8 * var_INaCa__Vmax; // mM4_uA_per_uF
        const double var_INaCa__INaCa = var_INaCa__num / ((var_INaCa__denom_3 + var_INaCa__denom_4) * var_INaCa__denom_1 * var_INaCa__denom_2); // uA_per_uF
        const double d_dt_chaste_interface_var_Ca__Ca_i = ((-var_Iup__Iup + var_Ileak__Ileak) * var_cell_geometry__Vnsr / var_cell_geometry__Vmyo + var_Ca__Idiff * var_cell_geometry__Vss_CaL / var_cell_geometry__Vmyo + (-var_ICab__ICab - var_IpCa__IpCa + 2.0 * var_INaCa__INaCa) * var_cell_geometry__AF / (2.0 * var_cell_geometry__Vmyo)) * var_Ca__bmyo; // millimolar / millisecond
        const double var_INaCa__num_ss = (pow(var_chaste_interface__Na__Na_ss_sr, 3.0) * var_model_parameters__Ca_o * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(var_model_parameters__Na_o, 3.0) * var_chaste_interface__Ca__Ca_ss_sr * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * 0.2 * var_INaCa__Vmax; // mM4_uA_per_uF
        const double var_INaCa__INaCa_ss_sr = var_INaCa__num_ss / ((var_INaCa__denom_ss_3 + var_INaCa__denom_ss_4) * var_INaCa__denom_ss_1 * var_INaCa__denom_ss_2); // uA_per_uF
        const double d_dt_chaste_interface_var_Ca__Ca_ss_sr = (-var_Ca__Idiff - var_Ca__Idiff_ss + var_chaste_interface__Irel__Irel * var_cell_geometry__Vjsr / var_cell_geometry__Vss_sr + 2.0 * var_INaCa__INaCa_ss_sr * var_cell_geometry__AF / (2.0 * var_cell_geometry__Vss_sr)) * var_Ca__bss_sr; // mM / millisecond
        const double d_dt_chaste_interface_var_Na__Na_ss_sr = -var_Na__Idiff_Na - 3.0 * var_INaCa__INaCa_ss_sr * var_cell_geometry__AF / var_cell_geometry__Vss_sr; // mM / millisecond
        const double var_INaK__phi = (-var_INaK__V_half + var_chaste_interface__membrane__Vm) * var_INaK__sigma * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INaK__fv = 1.0 / (1.0 + exp(-var_INaK__phi)); // dimensionless
        const double var_INaK__INaK = var_INaK__PK * var_INaK__PNa * var_INaK__fv * var_INaK__ibarnak; // uA_per_uF
        const double var_INab__phi = var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INab__INab = (-var_model_parameters__Na_o + var_chaste_interface__Na__Na_i * exp(var_INab__phi)) * var_INab__PNab * var_INab__phi * var_model_parameters__F / (-1.0 + exp(var_INab__phi)); // uA_per_uF
        const double var_Irel__rel_infinity = var_ICaL__ICaL * var_Irel__alpha_rel / (pow((var_Irel__Krel_infinity / var_chaste_interface__Ca__Ca_JSR), var_Irel__h_rel) + 1.0); // mM_per_ms
        const double d_dt_chaste_interface_var_Irel__Irel = (-var_chaste_interface__Irel__Irel - var_Irel__rel_infinity) / var_Irel__tau_rel; // mM_per_ms / millisecond
        const double var_Ito2__Ito2_max = pow(var_Ito2__zCl, 2.0) * pow(var_model_parameters__F, 2.0) * (-var_model_parameters__Cl_o * exp(var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) + var_chaste_interface__Cl__Cl_i) * var_Ito2__PCl * var_chaste_interface__membrane__Vm / ((-exp(var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) + 1.0) * var_model_parameters__R * var_model_parameters__T); // uA_per_uF
        const double var_Ito2__Ito2 = var_Ito2__Ito2_max * var_Ito2__KCa_ito2 * var_chaste_interface__Ito2_i2f_gate__i2f; // uA_per_uF
        const double d_dt_chaste_interface_var_Cl__Cl_ss = -var_Cl__Idiff_Cl + var_Ito2__Ito2 * var_cell_geometry__AF / (1.0 * var_cell_geometry__Vss_sr); // mM / millisecond
        const double var_reversal_potentials__ECl = -var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__Cl_o / var_chaste_interface__Cl__Cl_i) / var_model_parameters__F; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__membrane__Vm) * var_IClb__gClb; // uA_per_uF
        const double var_reversal_potentials__EK = var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__K_o / var_chaste_interface__K__K_i) / var_model_parameters__F; // mV
        const double var_CT_K_Cl__CT_K_Cl = (-var_reversal_potentials__ECl + var_reversal_potentials__EK) * var_CT_K_Cl__CT_K_Cl_max / (-var_reversal_potentials__ECl + 87.8251 + var_reversal_potentials__EK); // mM_per_ms
        const double var_IK1_K1_gate__alpha_k1 = 1.02 / (1.0 + exp((-59.215 - var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * 0.2385)); // dimensionless
        const double var_IK1_K1_gate__beta_k1 = (0.49124 * exp((-var_reversal_potentials__EK + 5.476 + var_chaste_interface__membrane__Vm) * 0.08032) + exp((-594.31 - var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * 0.06175)) / (1.0 + exp(-(-var_reversal_potentials__EK + 4.753 + var_chaste_interface__membrane__Vm) * 0.5143)); // dimensionless
        const double var_IK1_K1_gate__K1 = var_IK1_K1_gate__alpha_k1 / (var_IK1_K1_gate__alpha_k1 + var_IK1_K1_gate__beta_k1); // dimensionless
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IK1__gK1 * var_IK1_K1_gate__K1; // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKp__Kp * var_IKp__gKp; // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKr__gKr * var_IKr_r_gate__r * var_chaste_interface__IKr_xr_gate__xr; // uA_per_uF
        const double var_Ito1__Ito1 = pow(var_chaste_interface__Ito1_a_gate__a, 3.0) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_Ito1__gto1 * var_Ito1__rto1 * var_chaste_interface__Ito1_i1f_gate__i1f * var_chaste_interface__Ito1_i1s_gate__i1s; // uA_per_uF
        const double var_reversal_potentials__ENa = var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__Na_o / var_chaste_interface__Na__Na_i) / var_model_parameters__F; // mV
        const double var_CT_Na_Cl__CT_Na_Cl = pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4.0) * var_CT_Na_Cl__CT_Na_Cl_max / (pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4.0) + pow(87.8251, 4.0)); // mM_per_ms
        const double d_dt_chaste_interface_var_Cl__Cl_i = var_Cl__Idiff_Cl * var_cell_geometry__Vss_sr / var_cell_geometry__Vmyo + var_IClb__IClb * var_cell_geometry__AF / (1.0 * var_cell_geometry__Vmyo) + var_CT_K_Cl__CT_K_Cl + var_CT_Na_Cl__CT_Na_Cl; // mM / millisecond
        const double var_INa__INa = pow(var_chaste_interface__INa_m_gate__m, 3.0) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * var_INa__g_Na * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INaL__INaL = pow(var_chaste_interface__INaL_mL_gate__mL, 3.0) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * var_INaL__gNaL * var_chaste_interface__INaL_hL_gate__hL; // uA_per_uF
        const double d_dt_chaste_interface_var_Na__Na_i = var_Na__Idiff_Na * var_cell_geometry__Vss_sr / var_cell_geometry__Vmyo - (3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + var_INa__INa + var_INaL__INaL + var_INab__INab) * var_cell_geometry__AF / var_cell_geometry__Vmyo + var_CT_Na_Cl__CT_Na_Cl; // mM / millisecond
        const double var_reversal_potentials__prnak = 0.01833; // dimensionless
        const double var_reversal_potentials__EKs = var_model_parameters__R * var_model_parameters__T * log((var_model_parameters__Na_o * var_reversal_potentials__prnak + var_model_parameters__K_o) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_model_parameters__F; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__Vm) * var_IKs__OKs * var_IKs__gKs; // uA_per_uF
        const double d_dt_chaste_interface_var_K__K_i = -(-2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito1__Ito1 + var_membrane__i_Stim) * var_cell_geometry__AF / var_cell_geometry__Vmyo + var_CT_K_Cl__CT_K_Cl; // mM / millisecond
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__Vm = 0.0;
        }
        else
        {
            const double var_membrane__caiont = -(var_INaCa__INaCa + var_INaCa__INaCa_ss_sr) * 2.0 + var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa; // uA_per_uF
            const double var_membrane__clont = var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
            const double var_membrane__naiont = (var_INaCa__INaCa + var_INaCa__INaCa_ss_sr) * 3.0 + 3.0 * var_INaK__INaK + var_INa__INa + var_INaL__INaL + var_INab__INab; // uA_per_uF
            const double var_membrane__kiont = -2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito1__Ito1 + var_membrane__i_Stim; // uA_per_uF
            d_dt_chaste_interface_var_membrane__Vm = -var_membrane__caiont - var_membrane__clont - var_membrane__kiont - var_membrane__naiont; // millivolt / millisecond
        }
        
        rDY[0] = d_dt_chaste_interface_var_membrane__Vm;
        rDY[1] = d_dt_chaste_interface_var_Ca__Ca_i;
        rDY[2] = d_dt_chaste_interface_var_IKs__C1;
        rDY[3] = d_dt_chaste_interface_var_IKs__C2;
        rDY[4] = d_dt_chaste_interface_var_IKs__C3;
        rDY[5] = d_dt_chaste_interface_var_IKs__C4;
        rDY[6] = d_dt_chaste_interface_var_IKs__C5;
        rDY[7] = d_dt_chaste_interface_var_IKs__C6;
        rDY[8] = d_dt_chaste_interface_var_IKs__C7;
        rDY[9] = d_dt_chaste_interface_var_IKs__C8;
        rDY[10] = d_dt_chaste_interface_var_IKs__C9;
        rDY[11] = d_dt_chaste_interface_var_IKs__C10;
        rDY[12] = d_dt_chaste_interface_var_IKs__C11;
        rDY[13] = d_dt_chaste_interface_var_IKs__C12;
        rDY[14] = d_dt_chaste_interface_var_IKs__C13;
        rDY[15] = d_dt_chaste_interface_var_IKs__C14;
        rDY[16] = d_dt_chaste_interface_var_IKs__C15;
        rDY[17] = d_dt_chaste_interface_var_IKs__O1;
        rDY[18] = d_dt_chaste_interface_var_IKs__O2;
        rDY[19] = d_dt_chaste_interface_var_ICaL__C;
        rDY[20] = d_dt_chaste_interface_var_ICaL__O;
        rDY[21] = d_dt_chaste_interface_var_ICaL__C_star;
        rDY[22] = d_dt_chaste_interface_var_ICaL__O_star;
        rDY[23] = d_dt_chaste_interface_var_ICaL__CI;
        rDY[24] = d_dt_chaste_interface_var_ICaL__OI;
        rDY[25] = d_dt_chaste_interface_var_ICaL__CI_star;
        rDY[26] = d_dt_chaste_interface_var_ICaL__OI_star;
        rDY[27] = d_dt_chaste_interface_var_INa_m_gate__m;
        rDY[28] = d_dt_chaste_interface_var_INa_h_gate__h;
        rDY[29] = d_dt_chaste_interface_var_INa_j_gate__j;
        rDY[30] = d_dt_chaste_interface_var_INaL_mL_gate__mL;
        rDY[31] = d_dt_chaste_interface_var_INaL_hL_gate__hL;
        rDY[32] = d_dt_chaste_interface_var_IKr_xr_gate__xr;
        rDY[33] = d_dt_chaste_interface_var_Ito1_a_gate__a;
        rDY[34] = d_dt_chaste_interface_var_Ito1_i1f_gate__i1f;
        rDY[35] = d_dt_chaste_interface_var_Ito1_i1s_gate__i1s;
        rDY[36] = d_dt_chaste_interface_var_Ito2_i2f_gate__i2f;
        rDY[37] = d_dt_chaste_interface_var_Irel__Irel;
        rDY[38] = d_dt_chaste_interface_var_Ca__Ca_JSR;
        rDY[39] = d_dt_chaste_interface_var_Ca__Ca_NSR;
        rDY[40] = d_dt_chaste_interface_var_Ca__Ca_ss_sr;
        rDY[41] = d_dt_chaste_interface_var_Ca__Ca_ss_CaL;
        rDY[42] = d_dt_chaste_interface_var_Na__Na_i;
        rDY[43] = d_dt_chaste_interface_var_Na__Na_ss_sr;
        rDY[44] = d_dt_chaste_interface_var_Cl__Cl_i;
        rDY[45] = d_dt_chaste_interface_var_Cl__Cl_ss;
        rDY[46] = d_dt_chaste_interface_var_K__K_i;
        rDY[47] = d_dt_chaste_interface_var_CaMK_active__CaMK_trap;
    }

template<>
void OdeSystemInformation<Celldecker_2009FromCellML>::Initialise(void)
{
    this->mSystemName = "decker_2009";
    this->mFreeVariableName = "ar_environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-87.472528);
    
    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.09945e-05);
    
    // rY[2]:
    this->mVariableNames.push_back("ar_IKs__C1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.476653873938053);
    
    // rY[3]:
    this->mVariableNames.push_back("ar_IKs__C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.2551771850026437);
    
    // rY[4]:
    this->mVariableNames.push_back("ar_IKs__C3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.05122852186842027);
    
    // rY[5]:
    this->mVariableNames.push_back("ar_IKs__C4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.004570874421666423);
    
    // rY[6]:
    this->mVariableNames.push_back("ar_IKs__C5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001529389211563687);
    
    // rY[7]:
    this->mVariableNames.push_back("ar_IKs__C6");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.1328281770413747);
    
    // rY[8]:
    this->mVariableNames.push_back("ar_IKs__C7");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.05333228495514583);
    
    // rY[9]:
    this->mVariableNames.push_back("ar_IKs__C8");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.007137874613383642);
    
    // rY[10]:
    this->mVariableNames.push_back("ar_IKs__C9");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0003184390970637536);
    
    // rY[11]:
    this->mVariableNames.push_back("ar_IKs__C10");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.01388061042363991);
    
    // rY[12]:
    this->mVariableNames.push_back("ar_IKs__C11");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.003715500164470033);
    
    // rY[13]:
    this->mVariableNames.push_back("ar_IKs__C12");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0002486371465457659);
    
    // rY[14]:
    this->mVariableNames.push_back("ar_IKs__C13");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0006446803014431032);
    
    // rY[15]:
    this->mVariableNames.push_back("ar_IKs__C14");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.628258026770862e-05);
    
    // rY[16]:
    this->mVariableNames.push_back("ar_IKs__C15");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.122823524761588e-05);
    
    // rY[17]:
    this->mVariableNames.push_back("ar_IKs__O1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.051906959485266e-05);
    
    // rY[18]:
    this->mVariableNames.push_back("ar_IKs__O2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.372219883411999e-06);
    
    // rY[19]:
    this->mVariableNames.push_back("ar_ICaL__C");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999613782488198);
    
    // rY[20]:
    this->mVariableNames.push_back("ar_ICaL__O");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.27419494597377e-05);
    
    // rY[21]:
    this->mVariableNames.push_back("ar_ICaL__C_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.936477396599124e-11);
    
    // rY[22]:
    this->mVariableNames.push_back("ar_ICaL__O_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.350122566369778e-15);
    
    // rY[23]:
    this->mVariableNames.push_back("ar_ICaL__CI");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.587938121237188e-05);
    
    // rY[24]:
    this->mVariableNames.push_back("ar_ICaL__OI");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.611420243201921e-10);
    
    // rY[25]:
    this->mVariableNames.push_back("ar_ICaL__CI_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);
    
    // rY[26]:
    this->mVariableNames.push_back("ar_ICaL__OI_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);
    
    // rY[27]:
    this->mVariableNames.push_back("ar_INa_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001022252813581797);
    
    // rY[28]:
    this->mVariableNames.push_back("ar_INa_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9913109066867);
    
    // rY[29]:
    this->mVariableNames.push_back("ar_INa_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9970771239754529);
    
    // rY[30]:
    this->mVariableNames.push_back("ar_INaL_mL_gate__mL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001022252813581797);
    
    // rY[31]:
    this->mVariableNames.push_back("ar_INaL_hL_gate__hL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.3593255076983574);
    
    // rY[32]:
    this->mVariableNames.push_back("ar_IKr_xr_gate__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.235996442041028e-08);
    
    // rY[33]:
    this->mVariableNames.push_back("ar_Ito1_a_gate__a");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.773318268499115e-05);
    
    // rY[34]:
    this->mVariableNames.push_back("ar_Ito1_i1f_gate__i1f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9979722);
    
    // rY[35]:
    this->mVariableNames.push_back("ar_Ito1_i1s_gate__i1s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9874435);
    
    // rY[36]:
    this->mVariableNames.push_back("ar_Ito2_i2f_gate__i2f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9960352);
    
    // rY[37]:
    this->mVariableNames.push_back("ar_Irel__Irel");
    this->mVariableUnits.push_back("mM_per_ms");
    this->mInitialConditions.push_back(0.00107332);
    
    // rY[38]:
    this->mVariableNames.push_back("ar_Ca__Ca_JSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.917692717);
    
    // rY[39]:
    this->mVariableNames.push_back("ar_Ca__Ca_NSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.929835335);
    
    // rY[40]:
    this->mVariableNames.push_back("ar_Ca__Ca_ss_sr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(9.04757e-05);
    
    // rY[41]:
    this->mVariableNames.push_back("ar_Ca__Ca_ss_CaL");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(9.61545e-05);
    
    // rY[42]:
    this->mVariableNames.push_back("ar_Na__Na_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(6.935575);
    
    // rY[43]:
    this->mVariableNames.push_back("ar_Na__Na_ss_sr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(6.935607);
    
    // rY[44]:
    this->mVariableNames.push_back("ar_Cl__Cl_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(20.26842);
    
    // rY[45]:
    this->mVariableNames.push_back("ar_Cl__Cl_ss");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(20.26842);
    
    // rY[46]:
    this->mVariableNames.push_back("ar_K__K_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(145.5689);
    
    // rY[47]:
    this->mVariableNames.push_back("ar_CaMK_active__CaMK_trap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0018861341);
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Celldecker_2009FromCellML)
