//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: hodgkin_huxley_squid_axon_model_1952_modified
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on Wed Sep 11 11:16:17 2019
//! 
//! <autogenerated>

#include "hodgkin_huxley_squid_axon_model_1952_modified.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    Dynamichodgkin_huxley_squid_axon_model_1952_modifiedFromCellML::Dynamichodgkin_huxley_squid_axon_model_1952_modifiedFromCellML(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                4,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamichodgkin_huxley_squid_axon_model_1952_modifiedFromCellML>::Instance();
        Init();

    }
    
    Dynamichodgkin_huxley_squid_axon_model_1952_modifiedFromCellML::~Dynamichodgkin_huxley_squid_axon_model_1952_modifiedFromCellML()
    {
    }
    
    double Dynamichodgkin_huxley_squid_axon_model_1952_modifiedFromCellML::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -75
        double var_chaste_interface__sodium_channel_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.05
        double var_chaste_interface__sodium_channel_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.6
        double var_chaste_interface__potassium_channel_n_gate__n = rY[3];
        // Units: dimensionless; Initial value: 0.325
        
        const double var_membrane__E_R =  -75.0; // millivolt
        const double var_sodium_channel__h = var_chaste_interface__sodium_channel_h_gate__h; // dimensionless
        const double var_sodium_channel__m = var_chaste_interface__sodium_channel_m_gate__m; // dimensionless
        const double var_sodium_channel__g_Na = 120.0; // milliS_per_cm2
        const double var_sodium_channel__E_R = var_membrane__E_R; // millivolt
        const double var_sodium_channel__E_Na = var_sodium_channel__E_R + 115.0; // millivolt
        const double var_sodium_channel__V = var_chaste_interface__membrane__V; // millivolt
        const double var_sodium_channel__i_Na = var_sodium_channel__g_Na * pow(var_sodium_channel__m, 3.0) * var_sodium_channel__h * (var_sodium_channel__V - var_sodium_channel__E_Na); // microA_per_cm2
        const double var_potassium_channel__n = var_chaste_interface__potassium_channel_n_gate__n; // dimensionless
        const double var_potassium_channel__E_R = var_membrane__E_R; // millivolt
        const double var_potassium_channel__E_K = var_potassium_channel__E_R - 12.0; // millivolt
        const double var_potassium_channel__g_K = 36.0; // milliS_per_cm2
        const double var_potassium_channel__V = var_chaste_interface__membrane__V; // millivolt
        const double var_potassium_channel__i_K = var_potassium_channel__g_K * pow(var_potassium_channel__n, 4.0) * (var_potassium_channel__V - var_potassium_channel__E_K); // microA_per_cm2
        const double var_leakage_current__g_L = 0.29999999999999999; // milliS_per_cm2
        const double var_leakage_current__E_R = var_membrane__E_R; // millivolt
        const double var_leakage_current__E_L = var_leakage_current__E_R + 10.613; // millivolt
        const double var_leakage_current__V = var_chaste_interface__membrane__V; // millivolt
        const double var_leakage_current__i_L = var_leakage_current__g_L * (var_leakage_current__V - var_leakage_current__E_L); // microA_per_cm2
        const double var_chaste_interface__potassium_channel__i_K = var_potassium_channel__i_K; // microA_per_cm2
        const double var_chaste_interface__sodium_channel__i_Na = var_sodium_channel__i_Na; // microA_per_cm2
        const double var_chaste_interface__leakage_current__i_L = var_leakage_current__i_L; // microA_per_cm2
        const double var_chaste_interface__i_ionic = var_chaste_interface__sodium_channel__i_Na + var_chaste_interface__potassium_channel__i_K + var_chaste_interface__leakage_current__i_L; // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamichodgkin_huxley_squid_axon_model_1952_modifiedFromCellML::EvaluateYDerivatives(double var_chaste_interface__environment__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -75
        double var_chaste_interface__sodium_channel_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.05
        double var_chaste_interface__sodium_channel_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.6
        double var_chaste_interface__potassium_channel_n_gate__n = rY[3];
        // Units: dimensionless; Initial value: 0.325
        
        
        // Mathematics
        double d_dt_chaste_interface__membrane__V;
        const double var_sodium_channel__h = var_chaste_interface__sodium_channel_h_gate__h; // dimensionless
        const double var_sodium_channel__m = var_chaste_interface__sodium_channel_m_gate__m; // dimensionless
        const double var_sodium_channel__V = var_chaste_interface__membrane__V; // millivolt
        const double var_potassium_channel__n = var_chaste_interface__potassium_channel_n_gate__n; // dimensionless
        const double var_potassium_channel__V = var_chaste_interface__membrane__V; // millivolt
        const double var_sodium_channel_m_gate__m = var_sodium_channel__m; // dimensionless
        const double var_sodium_channel_m_gate__V = var_sodium_channel__V; // millivolt
        const double var_sodium_channel_m_gate__beta_m = 4.0 * exp((-(var_sodium_channel_m_gate__V + 75.0)) / 18.0); // per_millisecond
        const double var_sodium_channel_m_gate__alpha_m = ((-0.10000000000000001) * (var_sodium_channel_m_gate__V + 50.0)) / (exp((-(var_sodium_channel_m_gate__V + 50.0)) / 10.0) - 1.0); // per_millisecond
        const double var_sodium_channel_m_gate__d_m_d_environment__time = (var_sodium_channel_m_gate__alpha_m * (1.0 - var_sodium_channel_m_gate__m)) - (var_sodium_channel_m_gate__beta_m * var_sodium_channel_m_gate__m); // per_millisecond
        const double var_sodium_channel__sodium_channel_m_gate__d_m_d_environment__time = var_sodium_channel_m_gate__d_m_d_environment__time; // per_millisecond
        const double var_sodium_channel_h_gate__h = var_sodium_channel__h; // dimensionless
        const double var_sodium_channel_h_gate__V = var_sodium_channel__V; // millivolt
        const double var_sodium_channel_h_gate__beta_h = 1.0 / (exp((-(var_sodium_channel_h_gate__V + 45.0)) / 10.0) + 1.0); // per_millisecond
        const double var_sodium_channel_h_gate__alpha_h = 0.070000000000000007 * exp((-(var_sodium_channel_h_gate__V + 75.0)) / 20.0); // per_millisecond
        const double var_sodium_channel_h_gate__d_h_d_environment__time = (var_sodium_channel_h_gate__alpha_h * (1.0 - var_sodium_channel_h_gate__h)) - (var_sodium_channel_h_gate__beta_h * var_sodium_channel_h_gate__h); // per_millisecond
        const double var_sodium_channel__sodium_channel_h_gate__d_h_d_environment__time = var_sodium_channel_h_gate__d_h_d_environment__time; // per_millisecond
        const double var_potassium_channel_n_gate__V = var_potassium_channel__V; // millivolt
        const double var_potassium_channel_n_gate__beta_n = 0.125 * exp((var_potassium_channel_n_gate__V + 75.0) / 80.0); // per_millisecond
        const double var_potassium_channel_n_gate__n = var_potassium_channel__n; // dimensionless
        const double var_potassium_channel_n_gate__alpha_n = ((-0.01) * (var_potassium_channel_n_gate__V + 65.0)) / (exp((-(var_potassium_channel_n_gate__V + 65.0)) / 10.0) - 1.0); // per_millisecond
        const double var_potassium_channel_n_gate__d_n_d_environment__time = (var_potassium_channel_n_gate__alpha_n * (1.0 - var_potassium_channel_n_gate__n)) - (var_potassium_channel_n_gate__beta_n * var_potassium_channel_n_gate__n); // per_millisecond
        const double var_potassium_channel__potassium_channel_n_gate__d_n_d_environment__time = var_potassium_channel_n_gate__d_n_d_environment__time; // per_millisecond
        const double var_chaste_interface__sodium_channel_m_gate__d_m_d_environment__time = var_sodium_channel__sodium_channel_m_gate__d_m_d_environment__time; // per_millisecond
        const double var_chaste_interface__sodium_channel_h_gate__d_h_d_environment__time = var_sodium_channel__sodium_channel_h_gate__d_h_d_environment__time; // per_millisecond
        const double var_chaste_interface__potassium_channel_n_gate__d_n_d_environment__time = var_potassium_channel__potassium_channel_n_gate__d_n_d_environment__time; // per_millisecond
        const double d_dt_chaste_interface__sodium_channel_m_gate__m = var_chaste_interface__sodium_channel_m_gate__d_m_d_environment__time; // per_millisecond
        const double d_dt_chaste_interface__sodium_channel_h_gate__h = var_chaste_interface__sodium_channel_h_gate__d_h_d_environment__time; // per_millisecond
        const double d_dt_chaste_interface__potassium_channel_n_gate__n = var_chaste_interface__potassium_channel_n_gate__d_n_d_environment__time; // per_millisecond
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            const double var_membrane__E_R =  -75.0; // millivolt
            const double var_membrane__Cm = 1.0; // microF_per_cm2
            const double var_sodium_channel__g_Na = 120.0; // milliS_per_cm2
            const double var_sodium_channel__E_R = var_membrane__E_R; // millivolt
            const double var_sodium_channel__E_Na = var_sodium_channel__E_R + 115.0; // millivolt
            const double var_sodium_channel__i_Na = var_sodium_channel__g_Na * pow(var_sodium_channel__m, 3.0) * var_sodium_channel__h * (var_sodium_channel__V - var_sodium_channel__E_Na); // microA_per_cm2
            const double var_membrane__i_Na = var_sodium_channel__i_Na; // microA_per_cm2
            const double var_potassium_channel__E_R = var_membrane__E_R; // millivolt
            const double var_potassium_channel__E_K = var_potassium_channel__E_R - 12.0; // millivolt
            const double var_potassium_channel__g_K = 36.0; // milliS_per_cm2
            const double var_potassium_channel__i_K = var_potassium_channel__g_K * pow(var_potassium_channel__n, 4.0) * (var_potassium_channel__V - var_potassium_channel__E_K); // microA_per_cm2
            const double var_membrane__i_K = var_potassium_channel__i_K; // microA_per_cm2
            const double var_leakage_current__g_L = 0.29999999999999999; // milliS_per_cm2
            const double var_leakage_current__E_R = var_membrane__E_R; // millivolt
            const double var_leakage_current__E_L = var_leakage_current__E_R + 10.613; // millivolt
            const double var_leakage_current__V = var_chaste_interface__membrane__V; // millivolt
            const double var_leakage_current__i_L = var_leakage_current__g_L * (var_leakage_current__V - var_leakage_current__E_L); // microA_per_cm2
            const double var_membrane__i_L = var_leakage_current__i_L; // microA_per_cm2
            const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
            const double var_membrane__i_Stim = var_chaste_interface__membrane__i_Stim; // microA_per_cm2
            const double var_membrane__d_V_d_environment__time = (-(var_membrane__i_Stim + var_membrane__i_Na + var_membrane__i_K + var_membrane__i_L)) / var_membrane__Cm; // 'millivolt per millisecond'
            const double var_chaste_interface__membrane__d_V_d_environment__time = var_membrane__d_V_d_environment__time; // ___units_1
            d_dt_chaste_interface__membrane__V = var_chaste_interface__membrane__d_V_d_environment__time; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__membrane__V;
        rDY[1] = d_dt_chaste_interface__sodium_channel_m_gate__m;
        rDY[2] = d_dt_chaste_interface__sodium_channel_h_gate__h;
        rDY[3] = d_dt_chaste_interface__potassium_channel_n_gate__n;
    }
    
template<>
void OdeSystemInformation<Dynamichodgkin_huxley_squid_axon_model_1952_modifiedFromCellML>::Initialise(void)
{
    this->mSystemName = "hodgkin_huxley_squid_axon_model_1952_modified";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-75);

    // rY[1]:
    this->mVariableNames.push_back("sodium_channel_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.05);

    // rY[2]:
    this->mVariableNames.push_back("sodium_channel_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.6);

    // rY[3]:
    this->mVariableNames.push_back("potassium_channel_n_gate__n");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.325);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamichodgkin_huxley_squid_axon_model_1952_modifiedFromCellML)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamichodgkin_huxley_squid_axon_model_1952_modifiedFromCellML(pSolver, pStimulus);
    }
    
}

