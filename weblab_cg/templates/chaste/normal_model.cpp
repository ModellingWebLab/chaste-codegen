//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: {{model_name_from_file}}
//! 
//! Processed by webalab_cg - CellML Tools in Python
//!     (translators: , webalab_cg: , options: normal)
//! on {{generation_date}}
//! 
//! <autogenerated>

#include "{{model_name_from_file}}.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"
	{%- if not cellml_default_stimulus_equations is none %}

    boost::shared_ptr<RegularStimulus> {{class_name}}FromCellML::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata{% if cellml_default_stimulus_equations["membrane_stimulus_current_offset"] is defined %}{%- for eq in cellml_default_stimulus_equations["membrane_stimulus_current_offset"] %}
		const double {{ eq.lhs }} = {{ eq.rhs }}; // {{eq.units}}
		{%- endfor %}{% endif %}
		{%- for eq in cellml_default_stimulus_equations["membrane_stimulus_current_period"] %}
		const double {{ eq.lhs }} = {{ eq.rhs }}; // {{eq.units}}
		{%- endfor %}
		{%- for eq in cellml_default_stimulus_equations["membrane_stimulus_current_duration"] %}
		const double {{ eq.lhs }} = {{ eq.rhs }}; // {{eq.units}}
		{%- endfor %}
		{%- for eq in cellml_default_stimulus_equations["membrane_stimulus_current_amplitude"] %}
		const double {{ eq.lhs }} = {{ eq.rhs }}; // {{eq.units}}
		{%- endfor %}
		{% if cellml_default_stimulus_equations["membrane_stimulus_current_end"] is defined %}{%- for eq in cellml_default_stimulus_equations["membrane_stimulus_current_end"] %}
		const double {{ eq.lhs }} = {{ eq.rhs }};{%- endfor %}{% endif %}boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs({{cellml_default_stimulus_equations["membrane_stimulus_current_amplitude"][-1].lhs}}),
                {{cellml_default_stimulus_equations["membrane_stimulus_current_duration"][-1].lhs}},
                {{cellml_default_stimulus_equations["membrane_stimulus_current_period"][-1].lhs}},
				{% if cellml_default_stimulus_equations["membrane_stimulus_current_offset"] is defined %}{{cellml_default_stimulus_equations["membrane_stimulus_current_offset"][-1].lhs}}{%- else %}0.0{%- endif %}
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
	{%- endif %}
	{%- if use_get_intracellular_calcium_concentration %}
    
    double {{class_name}}FromCellML::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[{{cytosolic_calcium_concentration_index}}];
    }
	{%- endif %}
	
    {{class_name}}FromCellML::{{class_name}}FromCellML(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                {{state_vars|length}},
                {{membrane_voltage_index}},
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<{{class_name}}FromCellML>::Instance();
        Init();{%- if not cellml_default_stimulus_equations is none %}
		
        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;{%- endif %}
    }
    
    {{class_name}}FromCellML::~{{class_name}}FromCellML()
    {
    }
    
    double {{class_name}}FromCellML::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
		{%- for state_var in state_vars %}
		{% if state_var.in_ionic %}double {{ state_var.var }} = {% if loop.index0 == membrane_voltage_index %}(mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[{{loop.index0}}]);{%- else %}rY[{{loop.index0}}];{%- endif %}{%- endif %}
		// Units: {{state_var.units}}; Initial value: {{state_var.initial_value}}{%- endfor %}
        {% for ionic_var in ionic_vars %}
        const double {{ionic_var.lhs}} = {{ionic_var.rhs}}; // {{ionic_var.units}}
		{%- endfor %}
        {%- for ionic_var in ionic_interface_vars %}
        const double {{ionic_var.lhs}} = {{ionic_var.rhs}}; // {{ionic_var.units}}
		{%- endfor %}
		const double var_chaste_interface__i_ionic = {% if use_capacitance_i_ionic %}({% endif %}{%- for ionic_var in ionic_interface_vars %}{%- if ionic_var.conversion_factor != 1.0 %}({{ionic_var.conversion_factor}} * {% endif %}{{ionic_var.lhs}}{%- if ionic_var.conversion_factor != 1.0 %}){%- endif %}{%- if not loop.last %} + {% endif %}{%- endfor %}{%- if use_capacitance_i_ionic  %}) * HeartConfig::Instance()->GetCapacitance(){% endif %}; // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void {{class_name}}FromCellML::EvaluateYDerivatives(double var_chaste_interface__environment__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
		{%- for state_var in state_vars %}
		double {{ state_var.var }} = {% if loop.index0 == membrane_voltage_index %}(mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[{{loop.index0}}]);{%- else %}rY[{{loop.index0}}];{%- endif %}
		// Units: {{state_var.units}}; Initial value: {{state_var.initial_value}}
		{%- endfor %}
        
        // Mathematics
        //todo
        {%- for deriv in y_derivative_equations %}
        const double {{deriv.lhs}} = {{deriv.rhs}}; // {{deriv.units}}
		{%- endfor %}
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            //todo
        }
		{% for deriv in y_derivatives %}
        rDY[{{loop.index0}}] = {{deriv}};
		{%- endfor %}
    }
    
template<>
void OdeSystemInformation<{{class_name}}FromCellML>::Initialise(void)
{
    this->mSystemName = "{{free_variable.system_name}}";
    this->mFreeVariableName = "{{free_variable.name}}";
    this->mFreeVariableUnits = "{{free_variable.units}}";
    
    {% for ode_info in ode_system_information %}// rY[{{loop.index0}}]:
    this->mVariableNames.push_back("{{ode_info.name}}");
    this->mVariableUnits.push_back("{{ode_info.units}}");
    this->mInitialConditions.push_back({{ode_info.initial_value}});
	
	{% endfor %}this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT({{class_name}}FromCellML)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new {{class_name}}FromCellML(pSolver, pStimulus);
    }
    
}

