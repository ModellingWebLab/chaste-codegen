//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: {{model_name}}
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on {{generation_date}}
//! 
//! <autogenerated>

#include "{{model_name}}.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"
	{%- if not cellml_default_stimulus_equations is none %}

    boost::shared_ptr<RegularStimulus> Dynamic{{model_name}}FromCellML::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata{% if cellml_default_stimulus_equations["offset"] is defined %}{%- for eq in cellml_default_stimulus_equations["offset"] %}
		const double {{ eq.lhs }} = {{ eq.rhs }}; // millisecond
		{%- endfor %}{% endif %}
		{%- for eq in cellml_default_stimulus_equations["period"] %}
		const double {{ eq.lhs }} = {{ eq.rhs }}; // millisecond
		{%- endfor %}
		{%- for eq in cellml_default_stimulus_equations["duration"] %}
		const double {{ eq.lhs }} = {{ eq.rhs }}; // millisecond
		{%- endfor %}
		{%- for eq in cellml_default_stimulus_equations["amplitude"] %}
		const double {{ eq.lhs }} = {{ eq.rhs }}; // uA_per_cm2
		{%- endfor %}
		{% if cellml_default_stimulus_equations["end"] is defined %}{%- for eq in cellml_default_stimulus_equations["end"] %}
		const double {{ eq.lhs }} = {{ eq.rhs }};{%- endfor %}{% endif %}boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs({{cellml_default_stimulus_equations["amplitude"][0].lhs}}),
                {{cellml_default_stimulus_equations["duration"][0].lhs}},
                {{cellml_default_stimulus_equations["period"][0].lhs}},
				{% if cellml_default_stimulus_equations["offset"] is defined %}{{cellml_default_stimulus_equations["offset"][0].lhs}}{%- else %}0.0{%- endif %}
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
	{%- endif %}
	{%- if use_get_intracellular_calcium_concentration %}
    
    double Dynamic{{model_name}}FromCellML::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[{{cytosolic_calcium_concentration_index}}];
    }
	{%- endif %}
	
    Dynamic{{model_name}}FromCellML::Dynamic{{model_name}}FromCellML(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                {{state_vars|length}},
                {{membrane_voltage_index}},
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamic{{model_name}}FromCellML>::Instance();
        Init();{%- if not cellml_default_stimulus_equations is none %}
		
        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;{%- endif %}
    }
    
    Dynamic{{model_name}}FromCellML::~Dynamic{{model_name}}FromCellML()
    {
    }
    
    double Dynamic{{model_name}}FromCellML::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
		{%- for state_var in state_vars %}
		double {{ state_var }} = {% if loop.index0 == membrane_voltage_index %}(mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[{{loop.index0}}]);{%- else %}rY[{{loop.index0}}];{%- endif %}
		{{initial_value_comments_state_vars[loop.index0]}}{%- endfor %}
        {% for ionic_var in ionic_vars %}
        const double {{ionic_var.lhs}} = {{ionic_var.rhs}}; // microA_per_cm2
		{%- endfor %}
        const double var_chaste_interface__i_ionic = var_sodium_channel__i_Na + var_potassium_channel__i_K + var_leakage_current__i_L; // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamic{{model_name}}FromCellML::EvaluateYDerivatives(double var_chaste_interface__environment__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
		{%- for state_var in state_vars %}
		double {{ state_var }} = {% if loop.index0 == membrane_voltage_index %}(mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[{{loop.index0}}]);{%- else %}rY[{{loop.index0}}];{%- endif %}
		{{initial_value_comments_state_vars[loop.index0]}}
		{%- endfor %}
        
        // Mathematics
        double d_dt_chaste_interface__membrane__V;
        const double d_dt_chaste_interface__sodium_channel_m_gate__m = ((( -0.10000000000000001 * (var_chaste_interface__membrane__V + 50.0)) / (exp((-(var_chaste_interface__membrane__V + 50.0)) * 0.10000000000000001) - 1.0)) * (1.0 - var_chaste_interface__sodium_channel_m_gate__m)) - ((4.0 * exp((-(var_chaste_interface__membrane__V + 75.0)) * 0.055555555555555552)) * var_chaste_interface__sodium_channel_m_gate__m); // per_millisecond
        const double d_dt_chaste_interface__sodium_channel_h_gate__h = ((0.070000000000000007 * exp((-(var_chaste_interface__membrane__V + 75.0)) * 0.050000000000000003)) * (1.0 - var_chaste_interface__sodium_channel_h_gate__h)) - ((1.0 / (exp((-(var_chaste_interface__membrane__V + 45.0)) * 0.10000000000000001) + 1.0)) * var_chaste_interface__sodium_channel_h_gate__h); // per_millisecond
        const double d_dt_chaste_interface__potassium_channel_n_gate__n = ((( -0.01 * (var_chaste_interface__membrane__V + 65.0)) / (exp((-(var_chaste_interface__membrane__V + 65.0)) * 0.10000000000000001) - 1.0)) * (1.0 - var_chaste_interface__potassium_channel_n_gate__n)) - ((0.125 * exp((var_chaste_interface__membrane__V + 75.0) * 0.012500000000000001)) * var_chaste_interface__potassium_channel_n_gate__n); // per_millisecond
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            const double var_membrane__Cm = 1.0; // microF_per_cm2
            const double var_sodium_channel__i_Na = 120.0 * pow(var_chaste_interface__sodium_channel_m_gate__m, 3.0) * var_chaste_interface__sodium_channel_h_gate__h * (var_chaste_interface__membrane__V - 40.0); // microA_per_cm2
            const double var_potassium_channel__i_K = 36.0 * pow(var_chaste_interface__potassium_channel_n_gate__n, 4.0) * (var_chaste_interface__membrane__V -  -87.0); // microA_per_cm2
            const double var_leakage_current__i_L = 0.29999999999999999 * (var_chaste_interface__membrane__V -  -64.387); // microA_per_cm2
            const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
            d_dt_chaste_interface__membrane__V = (-(var_chaste_interface__membrane__i_Stim + var_sodium_channel__i_Na + var_potassium_channel__i_K + var_leakage_current__i_L)) / var_membrane__Cm; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__membrane__V;
        rDY[1] = d_dt_chaste_interface__sodium_channel_m_gate__m;
        rDY[2] = d_dt_chaste_interface__sodium_channel_h_gate__h;
        rDY[3] = d_dt_chaste_interface__potassium_channel_n_gate__n;
    }
    
template<>
void OdeSystemInformation<Dynamic{{model_name}}FromCellML>::Initialise(void)
{
    this->mSystemName = "{{model_name}}";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-75);

    // rY[1]:
    this->mVariableNames.push_back("sodium_channel_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.05);

    // rY[2]:
    this->mVariableNames.push_back("sodium_channel_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.6);

    // rY[3]:
    this->mVariableNames.push_back("potassium_channel_n_gate__n");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.325);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamic{{model_name}}FromCellML)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamic{{model_name}}FromCellML(pSolver, pStimulus);
    }
    
}

