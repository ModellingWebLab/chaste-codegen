    void {{class_name}}::ComputeOneStepExceptVoltage(const std::vector<double> &rDY, const std::vector<double> &rAlphaOrTau, const std::vector<double> &rBetaOrInf)
    {
        {{vector_decl}} rY = rGetStateVariables();
        {% for deriv in derivative_alpha_beta %}{% if loop.index0 != membrane_voltage_index %}
        {% if deriv.type=='non_linear'%}{{state_vec_ind_start}}{{loop.index0}}{{vec_ind_end}} += mDt * {{vec_ind_start}}{{loop.index0}}{{vec_ind_end}};
        {%- elif deriv.type=='inftau'%}{{state_vec_ind_start}}{{loop.index0}}{{vec_ind_end}} = rBetaOrInf[{{loop.index0}}] + ({{state_vec_ind_start}}{{loop.index0}}{{vec_ind_end}} - rBetaOrInf[{{loop.index0}}])*exp(-mDt/rAlphaOrTau[{{loop.index0}}]);
        {%- else%}{
            const double tau_inv = rAlphaOrTau[{{loop.index0}}] + rBetaOrInf[{{loop.index0}}];
            const double y_inf = rAlphaOrTau[{{loop.index0}}] / tau_inv;
            {{state_vec_ind_start}}{{loop.index0}}{{vec_ind_end}} = y_inf + ({{state_vec_ind_start}}{{loop.index0}}{{vec_ind_end}} - y_inf)*exp(-mDt*tau_inv);
        }
        {%- endif %}{%- endif %}
        {%- endfor %}
    }