
    void {{class_name}}::UpdateTransmembranePotential(double {{free_variable.var_name}})
    {
        std::vector<double>& rY = rGetStateVariables();
        unsigned v_index = GetVoltageIndex();
        const double delta = 1e-8;

        {% for deriv in y_derivative_equations %}{%- if deriv.is_voltage%}double {{deriv.lhs}};{%- endif %}{%- endfor %}
        {% for state_var in state_vars %}{%- if state_var.in_voltage_deriv %}double {{ state_var.var }} = {% if loop.index0 == membrane_voltage_index %}(mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[{{loop.index0}}]);{%- else %}rY[{{loop.index0}}];{%- endif %}
        // Units: {{state_var.units}}; Initial value: {{state_var.initial_value}}
        {% endif %}{%- endfor %}

        // Mathematics      
        {%- for deriv in y_derivative_equations %}{% if deriv.in_membrane_voltage %}
        {% if not deriv.is_voltage%}const double {% endif %}{{deriv.lhs}} = {{deriv.rhs}}; // {{deriv.units}}{%- endif %}
        {%- endfor %}

        double evalF = {% for deriv in y_derivative_equations %}{%- if deriv.is_voltage%}{{deriv.lhs}};{%- endif %}{%- endfor %}
        mEvalF[{{membrane_voltage_index}}] = d_dt_chaste_interface__cell__V;
        double partialF = EvaluatePartialDerivative{{membrane_voltage_index}}({{free_variable.var_name}}, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] += evalF*mDt;
        }
        else
        {
            rY[v_index] += (evalF/partialF)*(exp(partialF*mDt)-1.0);
        }
    }