{%- if jacobian_equations|length > 0 %}
    void {{class_name}}::ComputeJacobian(double {{free_variable.var_name}}, const double rCurrentGuess[{{nonlinear_state_vars|length}}], double rJacobian[{{nonlinear_state_vars|length}}][{{nonlinear_state_vars|length}}])
    {
        std::vector<double>& rY = rGetStateVariables();
        {% for state_var in state_vars %}
        {%- if state_var.in_jacobian %}double {{ state_var.var }} = {% if loop.index0 == membrane_voltage_index %}(mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[{{loop.index0}}]);{%- else %}rY[{{loop.index0}}];{%- endif %}
        // Units: {{state_var.units}}; Initial value: {{state_var.initial_value}}
        {% endif %}{%- endfor %}{% include "BE/cpp/non_linear_state_vars" %}

        {% for equation in jacobian_equations %}const double {{equation.lhs}} = {{equation.rhs}};
        {% endfor %}
        // Matrix entries{% for entry in jacobian_entries %}
        rJacobian[{{entry.i}}][{{entry.j}}] = {%- if entry.i == entry.j %} 1.0 {% endif -%}-(mDt * ({{entry.entry}}));
        {%- endfor %}
    }{% endif -%}