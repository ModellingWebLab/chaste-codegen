#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version 0.0.1
//!
//! Model: LivshitzRudy2007
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: normal)
//! on 2020-02-13 18:17:54
//!
//! <autogenerated>

#include "livshitz_rudy_2007.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Celllivshitz_rudy_2007FromCellMLCvode::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude = -15.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_chaste_interface__cell__stim_offset = 100.0; // millisecond
        const double var_chaste_interface__cell__stim_period = 400.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    Celllivshitz_rudy_2007FromCellMLCvode::Celllivshitz_rudy_2007FromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                18,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Celllivshitz_rudy_2007FromCellMLCvode>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
    }

    Celllivshitz_rudy_2007FromCellMLCvode::~Celllivshitz_rudy_2007FromCellMLCvode()
    {
    }
    
    double Celllivshitz_rudy_2007FromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -89.4356034692784
        double var_chaste_interface__INa__H = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.994401369032678
        double var_chaste_interface__INa__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.000734780346592185
        double var_chaste_interface__INa__J = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.996100688673679
        double var_chaste_interface__ICaL__d = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 3.2514786721066e-27
        double var_chaste_interface__ICaL__f = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.997404948824816
        double var_chaste_interface__IKr__xr = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.000162194715543637
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.0285147332973946
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.0764114040188678
        double var_chaste_interface__ICaT__b = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.000927461915392873
        double var_chaste_interface__ICaT__g = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.952834331760863
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 12);
        // Units: mM; Initial value: 16.612739313555
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 13);
        // Units: mM; Initial value: 139.730914103161
        double var_chaste_interface__Ca__Ca_T = NV_Ith_S(rY, 14);
        // Units: mM; Initial value: 0.0257059808595638
        
        const double var_Ca__cmdnbar = 0.050000000000000003; // mM
        const double var_Ca__kmcmdn = 0.0023800000000000002; // mM
        const double var_Ca__kmtrpn = 0.00050000000000000001; // mM
        const double var_Ca__dmyo = -var_chaste_interface__Ca__Ca_T * var_Ca__kmcmdn * var_Ca__kmtrpn; // mM3
        const double var_Ca__trpnbar = 0.070000000000000007; // mM
        const double var_Ca__bmyo = -var_chaste_interface__Ca__Ca_T + var_Ca__cmdnbar + var_Ca__kmcmdn + var_Ca__kmtrpn + var_Ca__trpnbar; // mM
        const double var_Ca__cmyo = var_Ca__cmdnbar * var_Ca__kmtrpn + var_Ca__kmcmdn * var_Ca__kmtrpn + var_Ca__kmcmdn * var_Ca__trpnbar - (var_Ca__kmcmdn + var_Ca__kmtrpn) * var_chaste_interface__Ca__Ca_T; // mM2
        const double var_Ca__Ca_i = -0.33333333333333331 * var_Ca__bmyo + 1.1547005383792515 * sqrt(-var_Ca__cmyo + 0.33333333333333331 * pow(var_Ca__bmyo, 2)) * cos(0.33333333333333331 * acos(0.096225044864937631 * pow((-var_Ca__cmyo + 0.33333333333333331 * pow(var_Ca__bmyo, 2)), (-1.5)) * (-2.0 * pow(var_Ca__bmyo, 3) - 27.0 * var_Ca__dmyo + 9.0 * var_Ca__bmyo * var_Ca__cmyo))); // mM
        const double var_Environment__Ca_o = 1.8; // mM
        const double var_Environment__F = 96485.0; // C_per_mole
        const double var_Environment__K_o = 4.5; // mM
        const double var_Environment__Na_o = 140.0; // mM
        const double var_Environment__R = 8314.0; // mJ_per_mole_K
        const double var_Environment__Temp = 310.0; // kelvin
        const double var_Environment__FonRT = var_Environment__F / (var_Environment__R * var_Environment__Temp); // per_mV
        const double var_ICaL__gacai = 1.0; // dimensionless
        const double var_ICaL__gacao = 0.34100000000000003; // dimensionless
        const double var_ICaL__gaki = 0.75; // dimensionless
        const double var_ICaL__gako = 0.75; // dimensionless
        const double var_ICaL__ganai = 0.75; // dimensionless
        const double var_ICaL__ganao = 0.75; // dimensionless
        const double var_ICaL__kmca = 0.00059999999999999995; // mM
        const double var_ICaL__fca = 1.0 / (1.0 + var_Ca__Ca_i / var_ICaL__kmca); // dimensionless
        const double var_ICaL__pca = 0.00054000000000000001; // L_per_F_ms
        const double var_ICaL__pk = 1.9299999999999999e-7; // L_per_F_ms
        const double var_ICaL__pna = 6.75e-7; // L_per_F_ms
        const double var_ICaT__gcat = 0.050000000000000003; // mS_per_uF
        const double var_ICab__gcab = 0.003016; // mS_per_uF
        const double var_IK1__GK1max = 0.75; // mS_per_uF
        const double var_IK1__GK1_ = 0.43033148291193518 * sqrt(var_Environment__K_o) * var_IK1__GK1max; // mS_per_uF
        const double var_IKp__GKpmax = 0.0055199999999999997; // mS_per_uF
        const double var_IKr__gkrmax = 0.02614; // mS_per_uF
        const double var_IKs__GKsmax = 0.433; // mS_per_uF
        const double var_IKs__gks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow(1 / var_Ca__Ca_i, 1.3999999999999999))) * var_IKs__GKsmax; // mS_per_uF
        const double var_INa__GNa = 16.0; // mS_per_uF
        const double var_INaCa__c1 = 0.00025000000000000001; // uA_per_uF
        const double var_INaCa__c2 = 0.0001; // dimensionless
        const double var_INaCa__gammas = 0.14999999999999999; // dimensionless
        const double var_INaK__ibarnak = 2.25; // uA_per_uF
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * var_Environment__Na_o); // dimensionless
        const double var_INab__GNab = 0.0040000000000000001; // mS_per_uF
        const double var_IpCa__ibarpca = 1.1499999999999999; // uA_per_uF
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__ipca = var_Ca__Ca_i * var_IpCa__ibarpca / (var_Ca__Ca_i + var_IpCa__kmpca); // uA_per_uF
        const double var_ICaL__ibarca = 4.0 * (-var_Environment__Ca_o * var_ICaL__gacao + var_Ca__Ca_i * var_ICaL__gacai * exp(2.0 * var_Environment__FonRT * var_chaste_interface__cell__V)) * var_Environment__F * var_Environment__FonRT * var_ICaL__pca * var_chaste_interface__cell__V / (-1.0 + exp(2.0 * var_Environment__FonRT * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_ICaL__ibark = (-var_Environment__K_o * var_ICaL__gako + var_ICaL__gaki * var_chaste_interface__K__K_i * exp(var_Environment__FonRT * var_chaste_interface__cell__V)) * var_Environment__F * var_Environment__FonRT * var_ICaL__pk * var_chaste_interface__cell__V / (-1.0 + exp(var_Environment__FonRT * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_ICaL__ibarna = (-var_Environment__Na_o * var_ICaL__ganao + var_ICaL__ganai * var_chaste_interface__Na__Na_i * exp(var_Environment__FonRT * var_chaste_interface__cell__V)) * var_Environment__F * var_Environment__FonRT * var_ICaL__pna * var_chaste_interface__cell__V / (-1.0 + exp(var_Environment__FonRT * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_ICaL__ilca = var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_ICaL__fca * var_ICaL__ibarca; // uA_per_uF
        const double var_ICaL__ilcak = var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_ICaL__fca * var_ICaL__ibark; // uA_per_uF
        const double var_ICaL__ilcana = var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_ICaL__fca * var_ICaL__ibarna; // uA_per_uF
        const double var_ICab__icab = (-0.5 * log(var_Environment__Ca_o / var_Ca__Ca_i) / var_Environment__FonRT + var_chaste_interface__cell__V) * var_ICab__gcab; // uA_per_uF
        const double var_IKr__r = 1.0 / (1.0 + exp(0.4017857142857143 + 0.044642857142857144 * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaCa__inaca = (-pow(var_Environment__Na_o, 3.0) * var_Ca__Ca_i + pow(var_chaste_interface__Na__Na_i, 3.0) * var_Environment__Ca_o * exp(var_Environment__FonRT * var_chaste_interface__cell__V)) * var_INaCa__c1 * exp((-1.0 + var_INaCa__gammas) * var_Environment__FonRT * var_chaste_interface__cell__V) / (1.0 + (pow(var_Environment__Na_o, 3.0) * var_Ca__Ca_i + pow(var_chaste_interface__Na__Na_i, 3.0) * var_Environment__Ca_o * exp(var_Environment__FonRT * var_chaste_interface__cell__V)) * var_INaCa__c2 * exp((-1.0 + var_INaCa__gammas) * var_Environment__FonRT * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_INaK__fnak = 1.0 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_Environment__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaK__inak = var_INaK__fnak * var_INaK__ibarnak / ((1.0 + pow((var_INaK__kmnai / var_chaste_interface__Na__Na_i), 2.0)) * (1.0 + var_INaK__kmko / var_Environment__K_o)); // uA_per_uF
        const double var_cell__i_Stim = 0.0; // uA_per_uF
        const double var_reversal_potentials__ECa = 0.5 * log(var_Environment__Ca_o / var_Ca__Ca_i) / var_Environment__FonRT; // mV
        const double var_ICaT__icat = pow(var_chaste_interface__ICaT__b, 2) * (-var_reversal_potentials__ECa + var_chaste_interface__cell__V) * var_chaste_interface__ICaT__g * var_ICaT__gcat; // uA_per_uF
        const double var_cell__caiont = -2.0 * var_INaCa__inaca + var_ICaL__ilca + var_ICaT__icat + var_ICab__icab + var_IpCa__ipca; // uA_per_uF
        const double var_reversal_potentials__EK = log(var_Environment__K_o / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)); // per_ms
        const double var_IK1__bk1 = (1.0 * exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__gK1 = var_IK1__GK1_ * var_IK1__ak1 / (var_IK1__ak1 + var_IK1__bk1); // mS_per_uF
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IK1__gK1; // uA_per_uF
        const double var_IKp__ikp = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKp__GKpmax / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_IKr__ikr = 0.43033148291193518 * sqrt(var_Environment__K_o) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKr__gkrmax * var_IKr__r * var_chaste_interface__IKr__xr; // uA_per_uF
        const double var_reversal_potentials__ENa = log(var_Environment__Na_o / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__ina = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INa__GNa * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // uA_per_uF
        const double var_INab__inab = (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INab__GNab; // uA_per_uF
        const double var_cell__naiont = 3.0 * var_INaCa__inaca + 3.0 * var_INaK__inak + var_ICaL__ilcana + var_INa__ina + var_INab__inab; // uA_per_uF
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((var_Environment__Na_o * var_reversal_potentials__prnak + var_Environment__K_o) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_Environment__FonRT; // mV
        const double var_IKs__iks = (-var_reversal_potentials__EKs + var_chaste_interface__cell__V) * var_IKs__gks * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_uF
        const double var_cell__kiont = -2.0 * var_INaK__inak + var_ICaL__ilcak + var_IK1__IK1 + var_IKp__ikp + var_IKr__ikr + var_IKs__iks + var_cell__i_Stim; // uA_per_uF
        const double var_chaste_interface__i_ionic = (var_cell__caiont + var_cell__kiont + var_cell__naiont) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Celllivshitz_rudy_2007FromCellMLCvode::EvaluateYDerivatives(double var_chaste_interface__Environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -89.4356034692784
        double var_chaste_interface__INa__H = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.994401369032678
        double var_chaste_interface__INa__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.000734780346592185
        double var_chaste_interface__INa__J = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.996100688673679
        double var_chaste_interface__ICaL__d = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 3.2514786721066e-27
        double var_chaste_interface__ICaL__f = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.997404948824816
        double var_chaste_interface__IKr__xr = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.000162194715543637
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.0285147332973946
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.0764114040188678
        double var_chaste_interface__ICaT__b = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.000927461915392873
        double var_chaste_interface__ICaT__g = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.952834331760863
        double var_chaste_interface__Irel__Rel = NV_Ith_S(rY, 11);
        // Units: mM_per_ms; Initial value: 1.06874246141923e-23
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 12);
        // Units: mM; Initial value: 16.612739313555
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 13);
        // Units: mM; Initial value: 139.730914103161
        double var_chaste_interface__Ca__Ca_T = NV_Ith_S(rY, 14);
        // Units: mM; Initial value: 0.0257059808595638
        double var_chaste_interface__Ca__Ca_JSR_T = NV_Ith_S(rY, 15);
        // Units: mM; Initial value: 7.87371650296567
        double var_chaste_interface__Ca__Ca_NSR = NV_Ith_S(rY, 16);
        // Units: mM; Initial value: 2.71518235696672
        
        // Units: dimensionless; Initial value: 1e-12
        
        
        // Mathematics
        double d_dt_chaste_interface_var_cell__V;
        const double var_Ca__cmdnbar = 0.050000000000000003; // mM
        const double var_Ca__kmcmdn = 0.0023800000000000002; // mM
        const double var_Ca__kmtrpn = 0.00050000000000000001; // mM
        const double var_Ca__dmyo = -var_chaste_interface__Ca__Ca_T * var_Ca__kmcmdn * var_Ca__kmtrpn; // mM3
        const double var_Ca__trpnbar = 0.070000000000000007; // mM
        const double var_Ca__bmyo = -var_chaste_interface__Ca__Ca_T + var_Ca__cmdnbar + var_Ca__kmcmdn + var_Ca__kmtrpn + var_Ca__trpnbar; // mM
        const double var_Ca__cmyo = var_Ca__cmdnbar * var_Ca__kmtrpn + var_Ca__kmcmdn * var_Ca__kmtrpn + var_Ca__kmcmdn * var_Ca__trpnbar - (var_Ca__kmcmdn + var_Ca__kmtrpn) * var_chaste_interface__Ca__Ca_T; // mM2
        const double var_Ca__Ca_i = -0.33333333333333331 * var_Ca__bmyo + 1.1547005383792515 * sqrt(-var_Ca__cmyo + 0.33333333333333331 * pow(var_Ca__bmyo, 2)) * cos(0.33333333333333331 * acos(0.096225044864937631 * pow((-var_Ca__cmyo + 0.33333333333333331 * pow(var_Ca__bmyo, 2)), (-1.5)) * (-2.0 * pow(var_Ca__bmyo, 3) - 27.0 * var_Ca__dmyo + 9.0 * var_Ca__bmyo * var_Ca__cmyo))); // mM
        const double d_dt_chaste_interface_var_Ca__Over = 0.0; // 1 / ms
        const double var_Environment__Ca_o = 1.8; // mM
        const double var_Environment__F = 96485.0; // C_per_mole
        const double var_Environment__K_o = 4.5; // mM
        const double var_Environment__Na_o = 140.0; // mM
        const double var_Environment__R = 8314.0; // mJ_per_mole_K
        const double var_Environment__Temp = 310.0; // kelvin
        const double var_Environment__FonRT = var_Environment__F / (var_Environment__R * var_Environment__Temp); // per_mV
        const double var_ICaL__gacai = 1.0; // dimensionless
        const double var_ICaL__gacao = 0.34100000000000003; // dimensionless
        const double var_ICaL__gaki = 0.75; // dimensionless
        const double var_ICaL__gako = 0.75; // dimensionless
        const double var_ICaL__ganai = 0.75; // dimensionless
        const double var_ICaL__ganao = 0.75; // dimensionless
        const double var_ICaL__kmca = 0.00059999999999999995; // mM
        const double var_ICaL__fca = 1.0 / (1.0 + var_Ca__Ca_i / var_ICaL__kmca); // dimensionless
        const double var_ICaL__pca = 0.00054000000000000001; // L_per_F_ms
        const double var_ICaL__pk = 1.9299999999999999e-7; // L_per_F_ms
        const double var_ICaL__pna = 6.75e-7; // L_per_F_ms
        const double var_ICaT__gcat = 0.050000000000000003; // mS_per_uF
        const double var_ICab__gcab = 0.003016; // mS_per_uF
        const double var_IK1__GK1max = 0.75; // mS_per_uF
        const double var_IK1__GK1_ = 0.43033148291193518 * sqrt(var_Environment__K_o) * var_IK1__GK1max; // mS_per_uF
        const double var_IKp__GKpmax = 0.0055199999999999997; // mS_per_uF
        const double var_IKr__gkrmax = 0.02614; // mS_per_uF
        const double var_IKs__GKsmax = 0.433; // mS_per_uF
        const double var_IKs__gks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow(1 / var_Ca__Ca_i, 1.3999999999999999))) * var_IKs__GKsmax; // mS_per_uF
        const double var_INa__GNa = 16.0; // mS_per_uF
        const double var_INa__perc_reduced_inact_for_IpNa = 0.0; // dimensionless
        const double var_INa__shift_h = 0.0; // mV
        const double var_INaCa__c1 = 0.00025000000000000001; // uA_per_uF
        const double var_INaCa__c2 = 0.0001; // dimensionless
        const double var_INaCa__gammas = 0.14999999999999999; // dimensionless
        const double var_INaK__ibarnak = 2.25; // uA_per_uF
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * var_Environment__Na_o); // dimensionless
        const double var_INab__GNab = 0.0040000000000000001; // mS_per_uF
        const double var_IpCa__ibarpca = 1.1499999999999999; // uA_per_uF
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__ipca = var_Ca__Ca_i * var_IpCa__ibarpca / (var_Ca__Ca_i + var_IpCa__kmpca); // uA_per_uF
        const double var_Irel__K_Relss = 1.0; // mM
        const double var_Irel__csqnbar = 10.0; // mM
        const double var_Irel__kappa = 0.125; // mM_per_mV_ms
        const double var_Irel__kmcsqn = 0.80000000000000004; // mM
        const double var_Irel__bbb = -var_chaste_interface__Ca__Ca_JSR_T + var_Irel__csqnbar + var_Irel__kmcsqn; // mM
        const double var_Irel__c = var_chaste_interface__Ca__Ca_JSR_T * var_Irel__kmcsqn; // mM2
        const double var_Irel__Ca_JSR_free = 1.0 * sqrt(0.25 * pow(var_Irel__bbb, 2.0) + var_Irel__c) - 0.5 * var_Irel__bbb; // mM
        const double var_Irel__qn = 9.0; // dimensionless
        const double var_Irel__tau = 4.75; // ms
        const double var_Irel__alpha_Rel = var_Irel__kappa * var_Irel__tau; // mM_per_mV
        const double var_Irel__tau_Rel = var_Irel__tau / (1.0 + 0.0123 / var_Irel__Ca_JSR_free); // ms
        const double var_Itr__tautr = 120.0; // ms
        const double var_Itr__itr = (-var_Irel__Ca_JSR_free + var_chaste_interface__Ca__Ca_NSR) / var_Itr__tautr; // mM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_JSR_T = -var_chaste_interface__Irel__Rel + var_Itr__itr; // mM / ms
        const double var_Iup_Ileak__iupbar = 0.0087500000000000008; // mM_per_ms
        const double var_Iup_Ileak__kmup = 0.00092000000000000003; // mM
        const double var_Iup_Ileak__iup = var_Ca__Ca_i * var_Iup_Ileak__iupbar / (var_Ca__Ca_i + var_Iup_Ileak__kmup); // mM_per_ms
        const double var_Iup_Ileak__leak_factor = 1.0; // dimensionless
        const double var_Iup_Ileak__nsrbar = 15.0; // mM
        const double var_Iup_Ileak__ileak = var_chaste_interface__Ca__Ca_NSR * var_Iup_Ileak__iupbar * var_Iup_Ileak__leak_factor / var_Iup_Ileak__nsrbar; // mM_per_ms
        const double var_Na__conc_clamp = 1.0; // dimensionless
        const double var_ICaL__dss0 = 1.0 / (1.0 + exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ICaL__dss1 = 1.0 / (1.0 + exp(-2500.0 - 41.666666666666664 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ICaL__dss = var_ICaL__dss0 * var_ICaL__dss1; // dimensionless
        const double var_ICaL__fss = 1.0 / (1.0 + exp(4.0 + 0.125 * var_chaste_interface__cell__V)) + 0.59999999999999998 / (1.0 + exp(2.5 - 0.050000000000000003 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ICaL__ibarca = 4.0 * (-var_Environment__Ca_o * var_ICaL__gacao + var_Ca__Ca_i * var_ICaL__gacai * exp(2.0 * var_Environment__FonRT * var_chaste_interface__cell__V)) * var_Environment__F * var_Environment__FonRT * var_ICaL__pca * var_chaste_interface__cell__V / (-1.0 + exp(2.0 * var_Environment__FonRT * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_ICaL__ibark = (-var_Environment__K_o * var_ICaL__gako + var_ICaL__gaki * var_chaste_interface__K__K_i * exp(var_Environment__FonRT * var_chaste_interface__cell__V)) * var_Environment__F * var_Environment__FonRT * var_ICaL__pk * var_chaste_interface__cell__V / (-1.0 + exp(var_Environment__FonRT * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_ICaL__ibarna = (-var_Environment__Na_o * var_ICaL__ganao + var_ICaL__ganai * var_chaste_interface__Na__Na_i * exp(var_Environment__FonRT * var_chaste_interface__cell__V)) * var_Environment__F * var_Environment__FonRT * var_ICaL__pna * var_chaste_interface__cell__V / (-1.0 + exp(var_Environment__FonRT * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_ICaL__ilca = var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_ICaL__fca * var_ICaL__ibarca; // uA_per_uF
        const double var_ICaL__ilcak = var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_ICaL__fca * var_ICaL__ibark; // uA_per_uF
        const double var_ICaL__ilcana = var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_ICaL__fca * var_ICaL__ibarna; // uA_per_uF
        const double var_ICaL__taud = 28.571428571428569 * (1.0 - exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__cell__V)) * var_ICaL__dss0 / (10.0 + var_chaste_interface__cell__V); // ms
        const double d_dt_chaste_interface_var_ICaL__d = (-var_chaste_interface__ICaL__d + var_ICaL__dss) / var_ICaL__taud; // 1 / ms
        const double var_ICaL__tauf = 1.0 / (0.02 + 0.019699999999999999 * exp(-0.113569 * pow((1 + 0.10000000000000001 * var_chaste_interface__cell__V), 2.0))); // ms
        const double d_dt_chaste_interface_var_ICaL__f = (-var_chaste_interface__ICaL__f + var_ICaL__fss) / var_ICaL__tauf; // 1 / ms
        const double var_ICaT__aa = 1.0 - 1.0 / (1.0 + exp(-416.66666666666669 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ICaT__bss = 1.0 / (1.0 + exp(-1.2962962962962963 - 0.092592592592592587 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ICaT__gss = 1.0 / (1.0 + exp(10.714285714285715 + 0.17857142857142858 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ICaT__taub = 3.7000000000000002 + 6.0999999999999996 / (1.0 + exp(5.5555555555555554 + 0.22222222222222221 * var_chaste_interface__cell__V)); // ms
        const double d_dt_chaste_interface_var_ICaT__b = (-var_chaste_interface__ICaT__b + var_ICaT__bss) / var_ICaT__taub; // 1 / ms
        const double var_ICaT__taug = 12.0 - 12.0 * var_ICaT__aa + 1.0 * (12.0 - 0.875 * var_chaste_interface__cell__V) * var_ICaT__aa; // ms
        const double d_dt_chaste_interface_var_ICaT__g = (-var_chaste_interface__ICaT__g + var_ICaT__gss) / var_ICaT__taug; // 1 / ms
        const double var_ICab__icab = (-0.5 * log(var_Environment__Ca_o / var_Ca__Ca_i) / var_Environment__FonRT + var_chaste_interface__cell__V) * var_ICab__gcab; // uA_per_uF
        const double var_IKr__r = 1.0 / (1.0 + exp(0.4017857142857143 + 0.044642857142857144 * var_chaste_interface__cell__V)); // dimensionless
        const double var_IKr__tauxr = 1.0 / (0.00060999999999999997 * (38.899999999999999 + var_chaste_interface__cell__V) / (-1.0 + exp(5.6404999999999994 + 0.14499999999999999 * var_chaste_interface__cell__V)) + 0.0013799999999999999 * (14.199999999999999 + var_chaste_interface__cell__V) / (1.0 - exp(-1.7465999999999999 - 0.123 * var_chaste_interface__cell__V))); // ms
        const double var_IKr__xrss = 1.0 / (1.0 + exp(-2.3729411764705883 - 0.23529411764705882 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_IKr__xr = (-var_chaste_interface__IKr__xr + var_IKr__xrss) / var_IKr__tauxr; // 1 / ms
        const double var_IKs__tauxs = 1.0 / (0.00013100000000000001 * (30.0 + var_chaste_interface__cell__V) / (-1.0 + exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__cell__V)) + 7.1899999999999999e-5 * (30.0 + var_chaste_interface__cell__V) / (1.0 - exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__cell__V))); // ms
        const double var_IKs__xss = 1.0 / (1.0 + exp(0.089820359281437126 - 0.059880239520958084 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs1 = (-var_chaste_interface__IKs__xs1 + var_IKs__xss) / var_IKs__tauxs; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__xs2 = 0.25 * (-var_chaste_interface__IKs__xs2 + var_IKs__xss) / var_IKs__tauxs; // 1 / ms
        const double var_INa__a = 1.0 - 1.0 / (1.0 + exp(-1666.6666666666667 - 41.666666666666664 * var_chaste_interface__cell__V)); // per_ms
        const double var_INa__aH = 0.13500000000000001 * var_INa__a * exp(-11.764705882352942 + 0.14705882352941177 * var_INa__shift_h - 0.14705882352941177 * var_chaste_interface__cell__V); // per_ms
        const double var_INa__aj = 1.0 * (37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * var_INa__shift_h) - 3.4740000000000003e-5 * exp(0.043909999999999998 * var_INa__shift_h - 0.043909999999999998 * var_chaste_interface__cell__V)) * var_INa__a / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V)); // per_ms
        const double var_INa__am = 0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double var_INa__bH = (3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * var_INa__shift_h) + 310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V - 0.34999999999999998 * var_INa__shift_h)) * var_INa__a + 7.6923076923076916 * (1.0 - var_INa__a) / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__cell__V)); // per_ms
        const double var_INa__H_inf = 0.01 * var_INa__perc_reduced_inact_for_IpNa + (1.0 - 0.01 * var_INa__perc_reduced_inact_for_IpNa) * var_INa__aH / (var_INa__aH + var_INa__bH); // dimensionless
        const double var_INa__bj = 0.1212 * var_INa__a * exp(0.01052 * var_INa__shift_h - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V)) + 0.29999999999999999 * (1.0 - var_INa__a) * exp(2.5349999999999999e-7 * var_INa__shift_h - 2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double var_INa__bm = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__cell__V); // per_ms
        const double d_dt_chaste_interface_var_INa__m = (1.0 - var_chaste_interface__INa__m) * var_INa__am - var_INa__bm * var_chaste_interface__INa__m; // 1 / ms
        const double var_INa__j_inf = 0.01 * var_INa__perc_reduced_inact_for_IpNa + (1.0 - 0.01 * var_INa__perc_reduced_inact_for_IpNa) * var_INa__aj / (var_INa__aj + var_INa__bj); // dimensionless
        const double var_INa__tau_H = 1.0 / (var_INa__aH + var_INa__bH); // ms
        const double d_dt_chaste_interface_var_INa__H = (-var_chaste_interface__INa__H + var_INa__H_inf) / var_INa__tau_H; // 1 / ms
        const double var_INa__tau_j = 1.0 / (var_INa__aj + var_INa__bj); // ms
        const double d_dt_chaste_interface_var_INa__J = (-var_chaste_interface__INa__J + var_INa__j_inf) / var_INa__tau_j; // 1 / ms
        const double var_INaCa__inaca = (-pow(var_Environment__Na_o, 3.0) * var_Ca__Ca_i + pow(var_chaste_interface__Na__Na_i, 3.0) * var_Environment__Ca_o * exp(var_Environment__FonRT * var_chaste_interface__cell__V)) * var_INaCa__c1 * exp((-1.0 + var_INaCa__gammas) * var_Environment__FonRT * var_chaste_interface__cell__V) / (1.0 + (pow(var_Environment__Na_o, 3.0) * var_Ca__Ca_i + pow(var_chaste_interface__Na__Na_i, 3.0) * var_Environment__Ca_o * exp(var_Environment__FonRT * var_chaste_interface__cell__V)) * var_INaCa__c2 * exp((-1.0 + var_INaCa__gammas) * var_Environment__FonRT * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_INaK__fnak = 1.0 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_Environment__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaK__inak = var_INaK__fnak * var_INaK__ibarnak / ((1.0 + pow((var_INaK__kmnai / var_chaste_interface__Na__Na_i), 2.0)) * (1.0 + var_INaK__kmko / var_Environment__K_o)); // uA_per_uF
        const double var_Irel__Rel_ss = var_ICaL__ilca * var_Irel__alpha_Rel / (1.0 + pow((var_Irel__K_Relss / var_Irel__Ca_JSR_free), var_Irel__qn)); // mM_per_ms
        const double d_dt_chaste_interface_var_Irel__Rel = (-var_chaste_interface__Irel__Rel - var_Irel__Rel_ss) / var_Irel__tau_Rel; // mM_per_ms / ms
        const double var_cell__i_Stim_converter = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converter / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_cell__l = 0.01; // cm
        const double var_cell__ra = 0.0011000000000000001; // cm
        const double var_cell__ageo = 2.0 * M_PI * pow(var_cell__ra, 2) + 2.0 * M_PI * var_cell__l * var_cell__ra; // cm2
        const double var_cell__Acap = 2.0 * var_cell__ageo; // uF
        const double var_cell__AF = var_cell__Acap / var_Environment__F; // uF_mole_per_C
        const double var_cell__vcell = 1000.0 * M_PI * pow(var_cell__ra, 2) * var_cell__l; // uL
        const double var_cell__vjsr = 0.0047999999999999996 * var_cell__vcell; // uL
        const double var_cell__vmyo = 0.68000000000000005 * var_cell__vcell; // uL
        const double var_cell__vnsr = 0.055199999999999999 * var_cell__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_NSR = -var_Iup_Ileak__ileak - var_Itr__itr * var_cell__vjsr / var_cell__vnsr + var_Iup_Ileak__iup; // mM / ms
        const double var_reversal_potentials__ECa = 0.5 * log(var_Environment__Ca_o / var_Ca__Ca_i) / var_Environment__FonRT; // mV
        const double var_ICaT__icat = pow(var_chaste_interface__ICaT__b, 2) * (-var_reversal_potentials__ECa + var_chaste_interface__cell__V) * var_chaste_interface__ICaT__g * var_ICaT__gcat; // uA_per_uF
        const double var_cell__caiont = -2.0 * var_INaCa__inaca + var_ICaL__ilca + var_ICaT__icat + var_ICab__icab + var_IpCa__ipca; // uA_per_uF
        const double d_dt_chaste_interface_var_Ca__Ca_T = (-var_Iup_Ileak__iup + var_Iup_Ileak__ileak) * var_cell__vnsr / var_cell__vmyo + var_chaste_interface__Irel__Rel * var_cell__vjsr / var_cell__vmyo - 0.5 * var_cell__AF * var_cell__caiont / var_cell__vmyo; // mM / ms
        const double var_reversal_potentials__EK = log(var_Environment__K_o / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)); // per_ms
        const double var_IK1__bk1 = (1.0 * exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__gK1 = var_IK1__GK1_ * var_IK1__ak1 / (var_IK1__ak1 + var_IK1__bk1); // mS_per_uF
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IK1__gK1; // uA_per_uF
        const double var_IKp__ikp = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKp__GKpmax / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_IKr__ikr = 0.43033148291193518 * sqrt(var_Environment__K_o) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKr__gkrmax * var_IKr__r * var_chaste_interface__IKr__xr; // uA_per_uF
        const double var_reversal_potentials__ENa = log(var_Environment__Na_o / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__ina = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INa__GNa * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // uA_per_uF
        const double var_INab__inab = (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INab__GNab; // uA_per_uF
        const double var_cell__naiont = 3.0 * var_INaCa__inaca + 3.0 * var_INaK__inak + var_ICaL__ilcana + var_INa__ina + var_INab__inab; // uA_per_uF
        const double d_dt_chaste_interface_var_Na__Na_i = -var_Na__conc_clamp * var_cell__AF * var_cell__naiont / var_cell__vmyo; // mM / ms
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((var_Environment__Na_o * var_reversal_potentials__prnak + var_Environment__K_o) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_Environment__FonRT; // mV
        const double var_IKs__iks = (-var_reversal_potentials__EKs + var_chaste_interface__cell__V) * var_IKs__gks * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_uF
        const double var_cell__kiont = -2.0 * var_INaK__inak + var_ICaL__ilcak + var_IK1__IK1 + var_IKp__ikp + var_IKr__ikr + var_IKs__iks + var_cell__i_Stim; // uA_per_uF
        const double d_dt_chaste_interface_var_K__K_i = -var_Na__conc_clamp * var_cell__AF * var_cell__kiont / var_cell__vmyo; // mM / ms

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_cell__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_cell__V = -var_cell__caiont - var_cell__kiont - var_cell__naiont; // mV / ms
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_cell__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_INa__H;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_INa__m;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_INa__J;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_ICaL__d;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_ICaL__f;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_IKr__xr;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_IKs__xs1;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_IKs__xs2;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_ICaT__b;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_ICaT__g;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_Irel__Rel;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_Na__Na_i;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_K__K_i;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_Ca__Ca_T;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_Ca__Ca_JSR_T;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_Ca__Ca_NSR;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_Ca__Over;
    }

    void Celllivshitz_rudy_2007FromCellMLCvode::EvaluateAnalyticJacobian(double var_chaste_interface__Environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -89.4356034692784
        double var_chaste_interface__INa__H = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.994401369032678
        double var_chaste_interface__INa__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.000734780346592185
        double var_chaste_interface__INa__J = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.996100688673679
        double var_chaste_interface__ICaL__d = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 3.2514786721066e-27
        double var_chaste_interface__ICaL__f = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.997404948824816
        double var_chaste_interface__IKr__xr = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.000162194715543637
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.0285147332973946
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.0764114040188678
        double var_chaste_interface__ICaT__b = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.000927461915392873
        double var_chaste_interface__ICaT__g = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.952834331760863
        double var_chaste_interface__Irel__Rel = NV_Ith_S(rY, 11);
        // Units: mM_per_ms; Initial value: 1.06874246141923e-23
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 12);
        // Units: mM; Initial value: 16.612739313555
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 13);
        // Units: mM; Initial value: 139.730914103161
        double var_chaste_interface__Ca__Ca_T = NV_Ith_S(rY, 14);
        // Units: mM; Initial value: 0.0257059808595638
        double var_chaste_interface__Ca__Ca_JSR_T = NV_Ith_S(rY, 15);
        // Units: mM; Initial value: 7.87371650296567
        

        
        const double var_x0 = exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V);
        const double var_x1 = 1.0 + var_x0;
        const double var_x2 = 1 / var_x1;
        const double var_x3 = 1 / var_chaste_interface__K__K_i;
        const double var_x4 = log(4.5 * var_x3);
        const double var_x5 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 6.3708927812613352 * var_x4);
        const double var_x6 = 1.0 + var_x5;
        const double var_x7 = 1 / var_x6;
        const double var_x8 = exp(-2.4444678999999998 + 13.738155796237756 * var_x4 - 0.51429999999999998 * var_chaste_interface__cell__V);
        const double var_x9 = 1.0 + var_x8;
        const double var_x10 = 1 / var_x9;
        const double var_x11 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 1.6494869150645177 * var_x4);
        const double var_x12 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 2.1455350448256203 * var_x4);
        const double var_x13 = 1.0 * var_x11 + 0.49124000000000001 * var_x12;
        const double var_x14 = var_x10 * var_x13;
        const double var_x15 = 1 / (var_x14 + 1.02 * var_x7);
        const double var_x16 = var_x15 * var_x7;
        const double var_x17 = exp(0.4017857142857143 + 0.044642857142857144 * var_chaste_interface__cell__V);
        const double var_x18 = 1.0 + var_x17;
        const double var_x19 = 1 / var_x18;
        const double var_x20 = 0.023862446088641735 * var_x19;
        const double var_x21 = pow(var_chaste_interface__ICaT__b, 2);
        const double var_x22 = 0.050000000000000003 * var_x21;
        const double var_x23 = 0.12288000000000002 - var_chaste_interface__Ca__Ca_T;
        const double var_x24 = pow(var_x23, 2);
        const double var_x25 = -0.00057837000000000014 + var_x24 + 0.0086400000000000001 * var_chaste_interface__Ca__Ca_T;
        const double var_x26 = sqrt(var_x25);
        const double var_x27 = pow(var_x23, 3);
        const double var_x28 = var_x23 * (0.00019279000000000003 - 0.0028800000000000002 * var_chaste_interface__Ca__Ca_T);
        const double var_x29 = 9.0 * var_x28 + 3.2129999999999999e-5 * var_chaste_interface__Ca__Ca_T - 2.0 * var_x27;
        const double var_x30 = 0.5 * pow(var_x25, (-1.5));
        const double var_x31 = 0.33333333333333331 * acos(var_x29 * var_x30);
        const double var_x32 = cos(var_x31);
        const double var_x33 = var_x26 * var_x32;
        const double var_x34 = 0.33333333333333331 * var_chaste_interface__Ca__Ca_T + 0.66666666666666663 * var_x33;
        const double var_x35 = -0.040960000000000003 + var_x34;
        const double var_x36 = 1 / var_x35;
        const double var_x37 = pow(var_x36, 1.3999999999999999);
        const double var_x38 = 1.0 + 6.4818210260626455e-7 * var_x37;
        const double var_x39 = 0.25979999999999998 / var_x38;
        const double var_x40 = -0.433 - var_x39;
        const double var_x41 = var_x40 * var_chaste_interface__IKs__xs2;
        const double var_x42 = var_x41 * var_chaste_interface__IKs__xs1;
        const double var_x43 = 914666.66666666663 * var_chaste_interface__Ca__Ca_T;
        const double var_x44 = 0.037435883507802623 * var_chaste_interface__cell__V;
        const double var_x45 = exp(var_x44);
        const double var_x46 = var_x45 * pow(var_chaste_interface__Na__Na_i, 3.0);
        const double var_x47 = 1.8 * var_x46;
        const double var_x48 = 1829333.3333333333 * var_x33;
        const double var_x49 = 112394.24000000002 + var_x47 - var_x43 - var_x48;
        const double var_x50 = exp(-0.031820500981632228 * var_chaste_interface__cell__V);
        const double var_x51 = var_x50 * (-112394.24000000002 + var_x43 + var_x47 + var_x48);
        const double var_x52 = 1.0 + 0.0001 * var_x51;
        const double var_x53 = var_x50 / var_x52;
        const double var_x54 = var_x49 * var_x53;
        const double var_x55 = pow(var_chaste_interface__INa__m, 3);
        const double var_x56 = var_x55 * var_chaste_interface__INa__J;
        const double var_x57 = 16.0 * var_x56;
        const double var_x58 = 1 / var_chaste_interface__Na__Na_i;
        const double var_x59 = pow(var_x58, 2.0);
        const double var_x60 = exp(-0.0037435883507802624 * var_chaste_interface__cell__V);
        const double var_x61 = (-0.14285714285714285 + 0.14285714285714285 * exp(2.0802377414561666)) * exp(-var_x44);
        const double var_x62 = 1.0 + 0.1245 * var_x60 + 0.036499999999999998 * var_x61;
        const double var_x63 = (0.0013664097480347956 * var_x61 + 0.00046607674967214267 * var_x60) / (pow(var_x62, 2) * (1.0 + 100.0 * var_x59));
        const double var_x64 = -26.712338705498262 * var_x4 + var_chaste_interface__cell__V;
        const double var_x65 = var_x0 * var_x64 / pow(var_x1, 2);
        const double var_x66 = var_x17 * var_x64 * var_chaste_interface__IKr__xr / pow(var_x18, 2);
        const double var_x67 = var_x5 / pow(var_x6, 2);
        const double var_x68 = var_x15 * var_x64;
        const double var_x69 = var_x67 * var_x68;
        const double var_x70 = var_x49 / pow(var_x52, 2);
        const double var_x71 = var_x50 * var_x70 * (3.1820500981632229e-6 * var_x51 - 6.7384590314044727e-6 * var_x46 * var_x50);
        const double var_x72 = var_x46 * var_x53;
        const double var_x73 = var_x13 * var_x8 / pow(var_x9, 2);
        const double var_x74 = 0.24326999999999999 * var_x67 - 0.51429999999999998 * var_x73 - var_x10 * (0.061749999999999999 * var_x11 + 0.039456396800000001 * var_x12);
        const double var_x75 = var_x64 * var_x7 / pow((var_x7 + 0.98039215686274506 * var_x14), 2);
        const double var_x76 = 0.67122862439358577 * var_x75;
        const double var_x77 = -1.0 + var_x45;
        const double var_x78 = 1 / var_x77;
        const double var_x79 = 1 / (-67.26666666666668 + 555.55555555555554 * var_chaste_interface__Ca__Ca_T + 1111.1111111111111 * var_x33);
        const double var_x80 = var_x79 * var_chaste_interface__ICaL__f;
        const double var_x81 = var_x80 * var_chaste_interface__ICaL__d;
        const double var_x82 = var_x78 * var_x81;
        const double var_x83 = 0.75 * var_x45;
        const double var_x84 = -105.0 + var_x83 * var_chaste_interface__Na__Na_i;
        const double var_x85 = 0.0024381008236689771 * var_x84;
        const double var_x86 = -3.375 + var_x83 * var_chaste_interface__K__K_i;
        const double var_x87 = 0.0006971162355083149 * var_x86;
        const double var_x88 = exp(0.074871767015605245 * var_chaste_interface__cell__V);
        const double var_x89 = -1.0 + var_x88;
        const double var_x90 = 1 / var_x89;
        const double var_x91 = var_x35 * var_x88;
        const double var_x92 = -0.61380000000000001 + 1.0 * var_x91;
        const double var_x93 = var_x90 * var_x92;
        const double var_x94 = 7.8019226357407261 * var_x93;
        const double var_x95 = var_x45 * var_chaste_interface__cell__V;
        const double var_x96 = var_x81 * var_x95 / pow(var_x77, 2);
        const double var_x97 = var_x86 * var_x96;
        const double var_x98 = var_x81 * var_chaste_interface__cell__V;
        const double var_x99 = 0.58414373385695639 * var_x98;
        const double var_x100 = var_x88 * var_x92 / pow(var_x89, 2);
        const double var_x101 = var_x84 * var_x96;
        const double var_x102 = var_x82 * var_x95;
        const double var_x103 = var_x102 * var_chaste_interface__K__K_i;
        const double var_x104 = var_x102 * var_chaste_interface__Na__Na_i;
        const double var_x105 = var_x90 * var_x91;
        const double var_x106 = -26.712338705498262 * log(140.0 * var_x58) + var_chaste_interface__cell__V;
        const double var_x107 = var_x106 * var_chaste_interface__INa__H;
        const double var_x108 = var_x107 * pow(var_chaste_interface__INa__m, 2) * var_chaste_interface__INa__J;
        const double var_x109 = var_x107 * var_x55;
        const double var_x110 = var_x80 * var_chaste_interface__cell__V;
        const double var_x111 = var_x110 * var_x78;
        const double var_x112 = var_chaste_interface__ICaL__d * var_chaste_interface__cell__V;
        const double var_x113 = var_x112 * var_x79;
        const double var_x114 = var_x113 * var_x78;
        const double var_x115 = 1 / (0.018329999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i);
        const double var_x116 = -26.712338705498262 * log(7.0662000000000003 * var_x115) + var_chaste_interface__cell__V;
        const double var_x117 = var_x116 * var_chaste_interface__IKs__xs1;
        const double var_x118 = -13.356169352749131 * log(1.8 * var_x36) + var_chaste_interface__cell__V;
        const double var_x119 = var_x118 * var_chaste_interface__ICaT__b * var_chaste_interface__ICaT__g;
        const double var_x120 = var_x115 * var_x42;
        const double var_x121 = var_x56 * var_x58 * var_chaste_interface__INa__H;
        const double var_x122 = var_x45 * pow(var_chaste_interface__Na__Na_i, 2.0);
        const double var_x123 = var_x122 * var_x53;
        const double var_x124 = var_x58 * var_x59 / (var_x62 * pow((0.01 + var_x59), 2));
        const double var_x125 = var_x70 * exp(-0.063641001963264457 * var_chaste_interface__cell__V);
        const double var_x126 = var_x122 * var_x125;
        const double var_x127 = var_x2 * var_x3;
        const double var_x128 = var_x16 * var_x3;
        const double var_x129 = var_x19 * var_x3 * var_chaste_interface__IKr__xr;
        const double var_x130 = var_x3 * var_x67;
        const double var_x131 = 6.4983106368865622 * var_x130 - var_x10 * (1.6494869150645177 * var_x11 * var_x3 + 1.0539726354201377 * var_x12 * var_x3) - 13.738155796237756 * var_x3 * var_x73;
        const double var_x132 = var_x130 * var_x68;
        const double var_x133 = var_x32 * (-0.11856000000000001 + var_chaste_interface__Ca__Ca_T) / var_x26;
        const double var_x134 = 0.66666666666666663 * var_x133;
        const double var_x135 = var_x26 * (var_x30 * (-0.0048880296000000005 + 6.0 * var_x24 + 0.051840000000000004 * var_chaste_interface__Ca__Ca_T) - 0.75 * var_x29 * pow(var_x25, (-2.5)) * (-0.23712000000000003 + 2 * var_chaste_interface__Ca__Ca_T)) * sin(var_x31) / sqrt(0.049382716049382713 - pow(var_x25, (-3.0)) * pow((var_x28 + 3.5699999999999997e-6 * var_chaste_interface__Ca__Ca_T - 0.22222222222222221 * var_x27), 2));
        const double var_x136 = 0.049382716049382713 * var_x135;
        const double var_x137 = -0.33333333333333331 - var_x134 - var_x136;
        const double var_x138 = var_x137 * var_x36;
        const double var_x139 = 0.33333333333333331 + var_x134 + var_x136;
        const double var_x140 = var_x139 / (-0.040460000000000003 + var_x34);
        const double var_x141 = 1829333.3333333333 * var_x133;
        const double var_x142 = 135506.17283950615 * var_x135;
        const double var_x143 = var_x53 * (-914666.66666666663 - var_x141 - var_x142);
        const double var_x144 = var_x33 + 0.5 * var_chaste_interface__Ca__Ca_T;
        const double var_x145 = var_x137 * var_x35;
        const double var_x146 = var_x145 / pow((-0.060690000000000008 + var_x144), 2);
        const double var_x147 = var_x138 * var_x21 * var_chaste_interface__ICaT__g;
        const double var_x148 = var_x125 * (914666.66666666663 + var_x141 + var_x142);
        const double var_x149 = var_x117 * var_x138 * var_x37 * var_chaste_interface__IKs__xs2 / pow(var_x38, 2);
        const double var_x150 = var_x139 * var_x88 * var_x90;
        const double var_x151 = var_x150 * var_x98;
        const double var_x152 = var_x112 * (-555.55555555555554 - 1111.1111111111111 * var_x133 - 82.304526748971185 * var_x135) * var_chaste_interface__ICaL__f / pow((-0.06054000000000001 + var_x144), 2);
        const double var_x153 = var_x152 * var_x93;
        const double var_x154 = var_x152 * var_x78;
        const double var_x155 = var_x154 * var_x84;
        const double var_x156 = var_x154 * var_x86;
        const double var_x157 = -41.666666666666664 * var_chaste_interface__cell__V;
        const double var_x158 = exp(-1666.6666666666667 + var_x157);
        const double var_x159 = 1.0 + var_x158;
        const double var_x160 = 1 / var_x159;
        const double var_x161 = 1.0 - 1.0 * var_x160;
        const double var_x162 = exp(0.34999999999999998 * var_chaste_interface__cell__V);
        const double var_x163 = exp(0.079000000000000001 * var_chaste_interface__cell__V);
        const double var_x164 = 310000.0 * var_x162 + 3.5600000000000001 * var_x163;
        const double var_x165 = var_x161 * var_x164;
        const double var_x166 = exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__cell__V);
        const double var_x167 = var_x161 * var_x166;
        const double var_x168 = 0.13500000000000001 * var_x167;
        const double var_x169 = exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__cell__V);
        const double var_x170 = 1.0 + var_x169;
        const double var_x171 = 1 / var_x170;
        const double var_x172 = var_x160 * var_x171;
        const double var_x173 = 7.6923076923076916 * var_x172;
        const double var_x174 = var_x168 + var_x173;
        const double var_x175 = 1 / (var_x165 + var_x174);
        const double var_x176 = var_x161 * (0.28123999999999999 * var_x163 + 108500.0 * var_x162);
        const double var_x177 = 0.019852941176470591 * var_x167;
        const double var_x178 = var_x158 / pow(var_x159, 2);
        const double var_x179 = 320.51282051282044 * var_x171 * var_x178;
        const double var_x180 = 0.693000693000693 * var_x160 * var_x169 / pow(var_x170, 2);
        const double var_x181 = 41.666666666666664 * var_x178;
        const double var_x182 = var_x164 * var_x181;
        const double var_x183 = 5.625 * var_x166 * var_x178;
        const double var_x184 = 1.0 * var_x165;
        const double var_x185 = 1.0 - var_chaste_interface__INa__m;
        const double var_x186 = 0.10000000000000001 * var_chaste_interface__cell__V;
        const double var_x187 = -var_x186;
        const double var_x188 = exp(-4.7130000000000001 + var_x187);
        const double var_x189 = 1.0 - var_x188;
        const double var_x190 = 0.32000000000000001 / var_x189;
        const double var_x191 = exp(-0.090909090909090912 * var_chaste_interface__cell__V);
        const double var_x192 = 47.130000000000003 + var_chaste_interface__cell__V;
        const double var_x193 = exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V);
        const double var_x194 = 1.0 + var_x193;
        const double var_x195 = 1 / var_x194;
        const double var_x196 = exp(-0.01052 * var_chaste_interface__cell__V);
        const double var_x197 = var_x161 * var_x196;
        const double var_x198 = var_x195 * var_x197;
        const double var_x199 = 0.1212 * var_x198;
        const double var_x200 = exp(-3.2000000000000002 + var_x187);
        const double var_x201 = 1.0 + var_x200;
        const double var_x202 = exp(-2.5349999999999999e-7 * var_chaste_interface__cell__V);
        const double var_x203 = var_x202 / var_x201;
        const double var_x204 = var_x160 * var_x203;
        const double var_x205 = 0.29999999999999999 * var_x204;
        const double var_x206 = 37.780000000000001 + var_chaste_interface__cell__V;
        const double var_x207 = exp(0.24440000000000001 * var_chaste_interface__cell__V);
        const double var_x208 = exp(-0.043909999999999998 * var_chaste_interface__cell__V);
        const double var_x209 = -127140.0 * var_x207 - 3.4740000000000003e-5 * var_x208;
        const double var_x210 = var_x161 * var_x209;
        const double var_x211 = exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V);
        const double var_x212 = 1.0 + var_x211;
        const double var_x213 = 1 / var_x212;
        const double var_x214 = 1.0 * var_x213;
        const double var_x215 = var_x210 * var_x214;
        const double var_x216 = var_x206 * var_x215;
        const double var_x217 = var_x199 + var_x205 + var_x216;
        const double var_x218 = 1 / var_x217;
        const double var_x219 = 7.6049999999999996e-8 * var_x204;
        const double var_x220 = 0.001275024 * var_x198;
        const double var_x221 = var_x161 * var_x206 * var_x214 * (1.5254334000000001e-6 * var_x208 - 31073.016 * var_x207);
        const double var_x222 = 0.016701360000000002 * var_x193 * var_x197 / pow(var_x194, 2);
        const double var_x223 = 12.499999999999998 * var_x178 * var_x203;
        const double var_x224 = 0.029999999999999999 * var_x160 * var_x200 * var_x202 / pow(var_x201, 2);
        const double var_x225 = 5.0499999999999998 * var_x178 * var_x195 * var_x196;
        const double var_x226 = 0.311 * var_x206 * var_x210 * var_x211 / pow(var_x212, 2);
        const double var_x227 = var_x181 * var_x206 * var_x209 * var_x213;
        const double var_x228 = exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__cell__V);
        const double var_x229 = 1.0 - var_x228;
        const double var_x230 = 1 / var_x229;
        const double var_x231 = exp(-2500.0 + var_x157);
        const double var_x232 = 1.0 + var_x231;
        const double var_x233 = 1 / var_x232;
        const double var_x234 = 1.0 + var_x228;
        const double var_x235 = 1 / var_x234;
        const double var_x236 = -var_chaste_interface__ICaL__d + 1.0 * var_x233 * var_x235;
        const double var_x237 = var_x230 * var_x236;
        const double var_x238 = 0.035000000000000003 * var_x234;
        const double var_x239 = 10.0 + var_chaste_interface__cell__V;
        const double var_x240 = var_x230 * var_x238 * var_x239;
        const double var_x241 = 0.005608974358974359 * var_x228 * var_x239;
        const double var_x242 = 1 + var_x186;
        const double var_x243 = exp(-0.113569 * pow(var_x242, 2.0));
        const double var_x244 = 0.019699999999999999 * var_x243;
        const double var_x245 = exp(2.5 - 0.050000000000000003 * var_chaste_interface__cell__V);
        const double var_x246 = 1.0 + var_x245;
        const double var_x247 = exp(4.0 + 0.125 * var_chaste_interface__cell__V);
        const double var_x248 = 1.0 + var_x247;
        const double var_x249 = exp(-2.3729411764705883 - 0.23529411764705882 * var_chaste_interface__cell__V);
        const double var_x250 = 1.0 + var_x249;
        const double var_x251 = exp(5.6404999999999994 + 0.14499999999999999 * var_chaste_interface__cell__V);
        const double var_x252 = -1.0 + var_x251;
        const double var_x253 = 0.00060999999999999997 / var_x252;
        const double var_x254 = exp(-1.7465999999999999 - 0.123 * var_chaste_interface__cell__V);
        const double var_x255 = 1.0 - var_x254;
        const double var_x256 = 0.0013799999999999999 / var_x255;
        const double var_x257 = 14.199999999999999 + var_chaste_interface__cell__V;
        const double var_x258 = 38.899999999999999 + var_chaste_interface__cell__V;
        const double var_x259 = var_x253 * var_x258;
        const double var_x260 = var_x256 * var_x257;
        const double var_x261 = exp(0.089820359281437126 - 0.059880239520958084 * var_chaste_interface__cell__V);
        const double var_x262 = 1.0 + var_x261;
        const double var_x263 = 1.0 / var_x262;
        const double var_x264 = exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__cell__V);
        const double var_x265 = -1.0 + var_x264;
        const double var_x266 = 1 / var_x265;
        const double var_x267 = 0.00013100000000000001 * var_x266;
        const double var_x268 = exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__cell__V);
        const double var_x269 = 1.0 - var_x268;
        const double var_x270 = 1 / var_x269;
        const double var_x271 = 7.1899999999999999e-5 * var_x270;
        const double var_x272 = 30.0 + var_chaste_interface__cell__V;
        const double var_x273 = var_x267 + var_x271 - 8.9997000000000013e-6 * var_x264 * var_x272 / pow(var_x265, 2) - 1.0641199999999999e-5 * var_x268 * var_x272 / pow(var_x269, 2);
        const double var_x274 = var_x267 * var_x272;
        const double var_x275 = var_x271 * var_x272;
        const double var_x276 = var_x261 * (var_x274 + var_x275) / pow(var_x262, 2);
        const double var_x277 = exp(-1.2962962962962963 - 0.092592592592592587 * var_chaste_interface__cell__V);
        const double var_x278 = 1.0 + var_x277;
        const double var_x279 = exp(5.5555555555555554 + 0.22222222222222221 * var_chaste_interface__cell__V);
        const double var_x280 = 1.0 + var_x279;
        const double var_x281 = 1 / var_x280;
        const double var_x282 = 1 / (3.7000000000000002 + 6.0999999999999996 * var_x281);
        const double var_x283 = exp(-416.66666666666669 * var_chaste_interface__cell__V);
        const double var_x284 = 1.0 + var_x283;
        const double var_x285 = 1 / var_x284;
        const double var_x286 = 12.0 - 0.875 * var_chaste_interface__cell__V;
        const double var_x287 = var_x286 * (1.0 - 1.0 * var_x285);
        const double var_x288 = exp(10.714285714285715 + 0.17857142857142858 * var_chaste_interface__cell__V);
        const double var_x289 = 1.0 + var_x288;
        const double var_x290 = var_x283 / pow(var_x284, 2);
        const double var_x291 = 1 / (1.0 * var_x287 + 12.0 * var_x285);
        const double var_x292 = 1 - 0.092592592592592587 * var_chaste_interface__Ca__Ca_JSR_T;
        const double var_x293 = sqrt(pow(var_x292, 2.0) + 0.027434842249657063 * var_chaste_interface__Ca__Ca_JSR_T);
        const double var_x294 = 1 / (-5.4000000000000004 + 0.5 * var_chaste_interface__Ca__Ca_JSR_T + 5.4000000000000004 * var_x293);
        const double var_x295 = 0.002589473684210526 * var_x294;
        const double var_x296 = 0.21052631578947367 + var_x295;
        const double var_x297 = pow(var_x294, 9.0);
        const double var_x298 = 1.0 + 1.0 * var_x297;
        const double var_x299 = 1 / var_x298;
        const double var_x300 = var_x299 * var_x81;
        const double var_x301 = 4.6323915649710559 * var_x93;
        const double var_x302 = var_x300 * var_x301;
        const double var_x303 = var_x300 * var_chaste_interface__cell__V;
        const double var_x304 = 0.34683534197756788 * var_x303;
        const double var_x305 = var_x296 * var_x299 * var_x301;
        const double var_x306 = (0.013717421124828532 - 0.092592592592592587 * pow(var_x292, 1.0)) / var_x293;
        const double var_x307 = -0.5 - 5.4000000000000004 * var_x306;
        const double var_x308 = 0.00098433188611789972 * var_x56;
        const double var_x309 = 1.4999377389423059e-7 * var_x84;
        const double var_x310 = 1.4680354103637137e-6 * var_x19;
        const double var_x311 = 0.433 + var_x39;
        const double var_x312 = 6.1520742882368733e-5 * var_x311;
        const double var_x313 = var_x312 * var_chaste_interface__IKs__xs2;
        const double var_x314 = 4.129448361660385e-5 * var_x75;
        const double var_x315 = 4.2887108683831854e-8 * var_x86;
        const double var_x316 = var_x115 * var_x311 * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2;
        const double var_x317 = 1.5380185720592186e-6 * var_x21;
        const double var_x318 = 0.0002399900382307689 * var_x93;
        const double var_x319 = 1.7968478228480326e-5 * var_x98;
        const double var_x320 = var_x139 / (-0.040040000000000006 + var_x34);
        const double var_x321 = var_x145 / pow((-0.060060000000000009 + var_x144), 2);

        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (-0.0070159999999999997 + var_x42 + 2.6097162183887174e-5 * var_x97 + 7.9551252454080567e-6 * var_x54 + 0.0010652877718143631 * var_x66 + 0.16655558320535216 * var_x69 + 9.1272458415149444e-5 * var_x101 - 1.6875 * var_x63 - 0.00025000000000000001 * var_x71 - 0.69834626081908668 * var_x16 - 0.0055199999999999997 * var_x2 - 1.9572871637915381e-5 * var_x103 - 1.684614757851118e-5 * var_x72 - 6.845434381136209e-5 * var_x104 - 0.00092307692307692305 * var_x65 + var_x100 * var_x99 - var_x105 * var_x99 - var_x20 * var_chaste_interface__IKr__xr - var_x22 * var_chaste_interface__ICaT__g - var_x57 * var_chaste_interface__INa__H - var_x74 * var_x76 - var_x81 * var_x94 - var_x82 * var_x85 - var_x82 * var_x87);
        IJth(rJacobian, 1, 0) = (var_x174 + var_x184) * (-var_x175 * var_x177 - var_x175 * var_x183 + 0.0022815000000000005 * var_x167 * (var_x177 + var_x182 + var_x183 - var_x176 - var_x179 - var_x180) / pow((var_x172 + 0.017550000000000003 * var_x167 + 0.13 * var_x165), 2)) + (-var_chaste_interface__INa__H + var_x168 * var_x175) * (var_x179 + var_x180 - var_x177 - var_x182 - var_x183 + 1.0 * var_x176);
        IJth(rJacobian, 2, 0) = var_x185 * var_x190 + 0.0072727272727272727 * var_x191 * var_chaste_interface__INa__m - 0.032000000000000001 * var_x185 * var_x188 * var_x192 / pow(var_x189, 2);
        IJth(rJacobian, 3, 0) = var_x217 * (var_x215 * var_x218 + var_x218 * var_x221 - var_x218 * var_x226 - var_x218 * var_x227 + var_x216 * (var_x219 + var_x220 + var_x225 + var_x226 + var_x227 - var_x215 - var_x221 - var_x222 - var_x223 - var_x224) / pow(var_x217, 2)) + (-var_chaste_interface__INa__J + var_x216 * var_x218) * (var_x215 + var_x221 + var_x222 + var_x223 + var_x224 - var_x219 - var_x220 - var_x225 - var_x226 - var_x227);
        IJth(rJacobian, 4, 0) = var_x237 * var_x238 + var_x240 * (0.16025641025641024 * var_x228 * var_x233 / pow(var_x234, 2) + 41.666666666666664 * var_x231 * var_x235 / pow(var_x232, 2)) - var_x237 * var_x241 - var_x234 * var_x236 * var_x241 / pow(var_x229, 2);
        IJth(rJacobian, 5, 0) = (0.02 + var_x244) * (0.029999999999999999 * var_x245 / pow(var_x246, 2) - 0.125 * var_x247 / pow(var_x248, 2)) - 0.00044746186 * var_x243 * pow(var_x242, 1.0) * (-var_chaste_interface__ICaL__f + 1.0 / var_x248 + 0.59999999999999998 / var_x246);
        IJth(rJacobian, 6, 0) = (-var_chaste_interface__IKr__xr + 1.0 / var_x250) * (var_x253 + var_x256 - 0.00016973999999999998 * var_x254 * var_x257 / pow(var_x255, 2) - 8.8449999999999995e-5 * var_x251 * var_x258 / pow(var_x252, 2)) + 0.23529411764705882 * var_x249 * (var_x259 + var_x260) / pow(var_x250, 2);
        IJth(rJacobian, 7, 0) = 0.059880239520958084 * var_x276 + var_x273 * (var_x263 - var_chaste_interface__IKs__xs1);
        IJth(rJacobian, 8, 0) = 0.014970059880239521 * var_x276 + 0.25 * var_x273 * (var_x263 - var_chaste_interface__IKs__xs2);
        IJth(rJacobian, 9, 0) = 0.092592592592592587 * var_x277 * var_x282 / pow(var_x278, 2) + 0.036429872495446269 * var_x279 * (-var_chaste_interface__ICaT__b + 1.0 / var_x278) / (pow(var_x280, 2) * pow((0.60655737704918045 + var_x281), 2));
        IJth(rJacobian, 10, 0) = 0.0069444444444444441 * (-var_chaste_interface__ICaT__g + 1.0 / var_x289) * (0.875 - 0.875 * var_x285 - 5000.0 * var_x290 + 416.66666666666669 * var_x286 * var_x290) / pow((var_x285 + 0.083333333333333329 * var_x287), 2) - 0.17857142857142858 * var_x288 * var_x291 / pow(var_x289, 2);
        IJth(rJacobian, 11, 0) = var_x296 * (-var_x302 + var_x100 * var_x304 - var_x105 * var_x304);
        IJth(rJacobian, 12, 0) = -2.4608297152947497e-7 + 1.4682156444593687e-9 * var_x54 + 5.6151494464001023e-9 * var_x101 - 0.00031144876084199171 * var_x63 - 4.6140557161776553e-8 * var_x71 - 4.2113620848000766e-9 * var_x104 - 3.1091625412080751e-9 * var_x72 - var_x308 * var_chaste_interface__INa__H - var_x309 * var_x82;
        IJth(rJacobian, 13, 0) = 0.00020763250722799449 * var_x63 + 1.0246623209999443e-5 * var_x69 + 6.5537295105522939e-8 * var_x66 + 1.6055168046743996e-9 * var_x97 - 4.296278075471465e-5 * var_x16 - 3.3959450071067542e-7 * var_x2 - 1.2041376035057997e-9 * var_x103 - 5.6788378045263449e-8 * var_x65 - var_x310 * var_chaste_interface__IKr__xr - var_x313 * var_chaste_interface__IKs__xs1 - var_x314 * var_x74 - var_x315 * var_x82;
        IJth(rJacobian, 14, 0) = -9.2773280266612054e-8 + 1.5380185720592186e-8 * var_x71 + 1.0363875137360252e-9 * var_x72 - 4.8940521481978966e-10 * var_x54 + var_x100 * var_x319 - var_x105 * var_x319 - var_x317 * var_chaste_interface__ICaT__g - var_x318 * var_x81;
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x106 * var_x57);
        IJth(rJacobian, 1, 1) = -var_x168 - var_x173 - var_x184;
        IJth(rJacobian, 12, 1) = -var_x106 * var_x308;
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (-48.0 * var_x108);
        IJth(rJacobian, 2, 2) = -0.080000000000000002 * var_x191 - var_x190 * var_x192;
        IJth(rJacobian, 12, 2) = -0.0029529956583536992 * var_x108;
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (-16.0 * var_x109);
        IJth(rJacobian, 3, 3) = -var_x199 - var_x205 - var_x216;
        IJth(rJacobian, 12, 3) = -0.00098433188611789972 * var_x109;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x110 * var_x94 - var_x111 * var_x85 - var_x111 * var_x87);
        IJth(rJacobian, 4, 4) = -var_x240;
        IJth(rJacobian, 11, 4) = -var_x110 * var_x305;
        IJth(rJacobian, 12, 4) = -var_x111 * var_x309;
        IJth(rJacobian, 13, 4) = -var_x111 * var_x315;
        IJth(rJacobian, 14, 4) = -var_x110 * var_x318;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x113 * var_x94 - var_x114 * var_x85 - var_x114 * var_x87);
        IJth(rJacobian, 5, 5) = -0.02 - var_x244;
        IJth(rJacobian, 11, 5) = -var_x113 * var_x305;
        IJth(rJacobian, 12, 5) = -var_x114 * var_x309;
        IJth(rJacobian, 13, 5) = -var_x114 * var_x315;
        IJth(rJacobian, 14, 5) = -var_x113 * var_x318;
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x20 * var_x64);
        IJth(rJacobian, 6, 6) = -var_x259 - var_x260;
        IJth(rJacobian, 13, 6) = -var_x310 * var_x64;
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (var_x116 * var_x41);
        IJth(rJacobian, 7, 7) = -var_x274 - var_x275;
        IJth(rJacobian, 13, 7) = -var_x116 * var_x313;
        IJth(rJacobian, 0, 8) = mSetVoltageDerivativeToZero ? 0.0 : (var_x117 * var_x40);
        IJth(rJacobian, 8, 8) = -3.2750000000000003e-5 * var_x266 * var_x272 - 1.7975e-5 * var_x270 * var_x272;
        IJth(rJacobian, 13, 8) = -var_x117 * var_x312;
        IJth(rJacobian, 0, 9) = mSetVoltageDerivativeToZero ? 0.0 : (-0.10000000000000001 * var_x119);
        IJth(rJacobian, 9, 9) = -var_x282;
        IJth(rJacobian, 14, 9) = -3.0760371441184371e-6 * var_x119;
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x118 * var_x22);
        IJth(rJacobian, 10, 10) = -var_x291;
        IJth(rJacobian, 14, 10) = -var_x118 * var_x317;
        IJth(rJacobian, 11, 11) = -0.21052631578947367 - var_x295;
        IJth(rJacobian, 14, 11) = 0.0070588235294117632;
        IJth(rJacobian, 15, 11) = -1;
        IJth(rJacobian, 0, 12) = mSetVoltageDerivativeToZero ? 0.0 : (0.48963716847178312 * var_x120 + 1.35e-7 * var_x126 - 427.39741928797218 * var_x121 - 0.0018285756177517328 * var_x102 - 0.10684935482199305 * var_x58 - 0.0013500000000000001 * var_x123 - 0.033750000000000002 * var_x124);
        IJth(rJacobian, 12, 12) = 2.4915900867359342e-11 * var_x126 - 6.5734516851508208e-6 * var_x58 - 1.1249533042067294e-7 * var_x102 - 0.02629380674060328 * var_x121 - 2.4915900867359341e-7 * var_x123 - 6.2289752168398339e-6 * var_x124;
        IJth(rJacobian, 13, 12) = 4.1526501445598901e-6 * var_x124 - 3.012284234720363e-5 * var_x316;
        IJth(rJacobian, 14, 12) = 8.3053002891197804e-8 * var_x123 - 8.3053002891197811e-12 * var_x126;
        IJth(rJacobian, 0, 13) = mSetVoltageDerivativeToZero ? 0.0 : (26.712338705498262 * var_x120 + 4.4490891518731646 * var_x132 - 0.00052283717663123618 * var_x102 - 0.14745210965435041 * var_x127 - 18.654461852717674 * var_x128 - 0.63742174226149018 * var_x129 - var_x131 * var_x76);
        IJth(rJacobian, 13, 13) = 0.000273711269773125 * var_x132 - 3.216533151287389e-8 * var_x102 - 9.0713633255081325e-6 * var_x127 - 3.9214659113300655e-5 * var_x129 - 0.0011476363512500001 * var_x128 - 0.001643362921287705 * var_x316 - var_x131 * var_x314;
        IJth(rJacobian, 0, 14) = mSetVoltageDerivativeToZero ? 0.0 : (0.040282206767891376 * var_x138 + 0.6678084676374566 * var_x147 + 2.5000000000000002e-8 * var_x148 + 2.3575679435995049e-7 * var_x149 - 0.00025000000000000001 * var_x143 - 1.1499999999999999 * var_x140 - 7.8019226357407261 * var_x151 - 6.3195573349499882e-6 * var_x153 - 1.9748616671718717e-9 * var_x155 - 5.6466415076173509e-10 * var_x156 - 2.5874999999999999 * var_x146);
        IJth(rJacobian, 11, 14) = var_x296 * (-4.6323915649710559 * var_x150 * var_x303 - 3.7522371676265554e-6 * var_x153 * var_x299);
        IJth(rJacobian, 12, 14) = 4.6140557161776553e-12 * var_x148 - 4.6140557161776553e-8 * var_x143 - 1.2149495685432678e-13 * var_x155;
        IJth(rJacobian, 13, 14) = 1.4503933128589994e-11 * var_x149 - 3.4738558033903803e-14 * var_x156;
        IJth(rJacobian, 14, 14) = 1.5380185720592186e-8 * var_x143 + 1.2390956426509296e-6 * var_x138 + 2.0542036516096317e-5 * var_x147 - 0.0002399900382307689 * var_x151 - 3.5374427157362023e-5 * var_x140 - 0.00071029411764705886 * var_x320 - 7.9592461104064564e-5 * var_x146 - 0.0015981617647058827 * var_x321 - 1.9439193096692283e-10 * var_x153 - 1.5380185720592186e-12 * var_x148;
        IJth(rJacobian, 16, 14) = 0.0087500000000000008 * var_x320 + 0.019687500000000004 * var_x321;
        IJth(rJacobian, 11, 15) = 8.8802252544942581e-5 * var_x307 * (-var_chaste_interface__Irel__Rel - var_x302 * var_chaste_interface__cell__V) / pow((-1 + var_x293 + 0.092592592592592587 * var_chaste_interface__Ca__Ca_JSR_T), 2) + 41.691524084739505 * var_x294 * var_x296 * var_x297 * var_x307 * var_x93 * var_x98 / pow(var_x298, 2);
        IJth(rJacobian, 15, 15) = -0.0041666666666666666 - 0.045000000000000005 * var_x306;
        IJth(rJacobian, 16, 15) = 0.0003623188405797101 + 0.0039130434782608699 * var_x306;
        IJth(rJacobian, 14, 16) = 4.7352941176470591e-5;
        IJth(rJacobian, 15, 16) = 0.0083333333333333332;
        IJth(rJacobian, 16, 16) = -0.0013079710144927536;
    }

template<>
void OdeSystemInformation<Celllivshitz_rudy_2007FromCellMLCvode>::Initialise(void)
{
    this->mSystemName = "LivshitzRudy2007";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "ms";

    // NV_Ith_S(rY,0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-89.4356034692784);

    // NV_Ith_S(rY,1):
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.994401369032678);

    // NV_Ith_S(rY,2):
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000734780346592185);

    // NV_Ith_S(rY,3):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.996100688673679);

    // NV_Ith_S(rY,4):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.2514786721066e-27);

    // NV_Ith_S(rY,5):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.997404948824816);

    // NV_Ith_S(rY,6):
    this->mVariableNames.push_back("IKr__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000162194715543637);

    // NV_Ith_S(rY,7):
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0285147332973946);

    // NV_Ith_S(rY,8):
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0764114040188678);

    // NV_Ith_S(rY,9):
    this->mVariableNames.push_back("ICaT__b");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000927461915392873);

    // NV_Ith_S(rY,10):
    this->mVariableNames.push_back("ICaT__g");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.952834331760863);

    // NV_Ith_S(rY,11):
    this->mVariableNames.push_back("SR_release_current");
    this->mVariableUnits.push_back("mM_per_ms");
    this->mInitialConditions.push_back(1.06874246141923e-23);

    // NV_Ith_S(rY,12):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(16.612739313555);

    // NV_Ith_S(rY,13):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(139.730914103161);

    // NV_Ith_S(rY,14):
    this->mVariableNames.push_back("Ca__Ca_T");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.0257059808595638);

    // NV_Ith_S(rY,15):
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(7.87371650296567);

    // NV_Ith_S(rY,16):
    this->mVariableNames.push_back("Ca__Ca_NSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(2.71518235696672);

    // NV_Ith_S(rY,17):
    this->mVariableNames.push_back("Ca__Over");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-12);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Celllivshitz_rudy_2007FromCellMLCvode)
#endif // CHASTE_CVODE
