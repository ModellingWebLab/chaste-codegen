//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: tentusscher_model_2004_endo
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on Wed Mar 11 16:54:57 2020
//! 
//! <autogenerated>

#include "ten_tusscher_model_2004_endo.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "CardiacNewtonSolver.hpp"
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    double Dynamicten_tusscher_model_2004_endoFromCellMLBackwardEuler::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    
    Dynamicten_tusscher_model_2004_endoFromCellMLBackwardEuler::Dynamicten_tusscher_model_2004_endoFromCellMLBackwardEuler(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractBackwardEulerCardiacCell<6>(
                17,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamicten_tusscher_model_2004_endoFromCellMLBackwardEuler>::Instance();
        Init();

    }
    
    Dynamicten_tusscher_model_2004_endoFromCellMLBackwardEuler::~Dynamicten_tusscher_model_2004_endoFromCellMLBackwardEuler()
    {
    }
    
    double Dynamicten_tusscher_model_2004_endoFromCellMLBackwardEuler::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.2
        double var_chaste_interface__calcium_dynamics__Ca_i = rY[1];
        // Units: millimolar; Initial value: 0.0002
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = rY[2];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = rY[3];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = rY[4];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[5];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[6];
        // Units: dimensionless; Initial value: 0.75
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[7];
        // Units: dimensionless; Initial value: 0.75
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[8];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[9];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__L_type_Ca_current_fCa_gate__fCa = rY[10];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__transient_outward_current_s_gate__s = rY[11];
        // Units: dimensionless; Initial value: 0.3212
        double var_chaste_interface__transient_outward_current_r_gate__r = rY[12];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__sodium_dynamics__Na_i = rY[15];
        // Units: millimolar; Initial value: 11.6
        double var_chaste_interface__potassium_dynamics__K_i = rY[16];
        // Units: millimolar; Initial value: 138.3
        
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(5.4000000000000004 / var_chaste_interface__potassium_dynamics__K_i); // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 200.0))); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = (var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + (((3.0 * exp(0.00020000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) + 100.0))) + exp(0.10000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 10.0))) / (1.0 + exp( -0.5 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)))))) * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K) * 5.4050000000000002; // picoA_per_picoF
        const double var_transient_outward_current__g_to = 0.072999999999999995; // nanoS_per_picoF
        const double var_transient_outward_current__i_to = var_transient_outward_current__g_to * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__g_Kr = 0.096000000000000002; // nanoS_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr = var_rapid_time_dependent_potassium_current__g_Kr * 1.0 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks = 0.245 * pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0) * (var_chaste_interface__membrane__V - (26.713760659695648 * log(9.6000000000000014 / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i))))); // picoA_per_picoF
        const double var_L_type_Ca_current__g_CaL = 0.000175; // litre_per_farad_second
        const double var_L_type_Ca_current__i_CaL = (((var_L_type_Ca_current__g_CaL * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_fCa_gate__fCa * var_chaste_interface__membrane__V * 37237684497.486488) * 3.8797490106562429e-07) * ((var_chaste_interface__calcium_dynamics__Ca_i * exp((var_chaste_interface__membrane__V * 192970.68299999999) * 3.8797490106562429e-07)) - 0.68200000000000005)) / (exp((var_chaste_interface__membrane__V * 192970.68299999999) * 3.8797490106562429e-07) - 1.0); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = ((1.1491875 * var_chaste_interface__sodium_dynamics__Na_i) / (var_chaste_interface__sodium_dynamics__Na_i + 40.0)) / (1.0 + (0.1245 * exp((var_chaste_interface__membrane__V *  -9648.5341499999995) * 3.8797490106562429e-07)) + (0.035299999999999998 * exp(((-var_chaste_interface__membrane__V) * 96485.341499999995) * 3.8797490106562429e-07))); // picoA_per_picoF
        const double var_fast_sodium_current__g_Na = 14.837999999999999; // nanoS_per_picoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(140.0 / var_chaste_interface__sodium_dynamics__Na_i); // millivolt
        const double var_fast_sodium_current__i_Na = var_fast_sodium_current__g_Na * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na = 0.00029 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa = (1000.0 * ((exp((var_chaste_interface__membrane__V * 33769.869524999995) * 3.8797490106562429e-07) * pow(var_chaste_interface__sodium_dynamics__Na_i, 3.0) * 2.0) - (exp((var_chaste_interface__membrane__V *  -62715.471975) * 3.8797490106562429e-07) * var_chaste_interface__calcium_dynamics__Ca_i * 6860000.0))) / ((1.0 + (0.10000000000000001 * exp((var_chaste_interface__membrane__V *  -62715.471975) * 3.8797490106562429e-07))) * 11539055.9375); // picoA_per_picoF
        const double var_calcium_background_current__i_b_Ca = 0.00059199999999999997 * (var_chaste_interface__membrane__V - (13.356880329847824 * log(2.0 / var_chaste_interface__calcium_dynamics__Ca_i))); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K = (0.0146 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)) / (1.0 + exp((25.0 - var_chaste_interface__membrane__V) * 0.16722408026755853)); // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca = (0.82499999999999996 * var_chaste_interface__calcium_dynamics__Ca_i) / (var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001); // picoA_per_picoF
        const double var_chaste_interface__i_ionic = (var_inward_rectifier_potassium_current__i_K1 + var_transient_outward_current__i_to + var_rapid_time_dependent_potassium_current__i_Kr + var_slow_time_dependent_potassium_current__i_Ks + var_L_type_Ca_current__i_CaL + var_sodium_potassium_pump_current__i_NaK + var_fast_sodium_current__i_Na + var_sodium_background_current__i_b_Na + var_sodium_calcium_exchanger_current__i_NaCa + var_calcium_background_current__i_b_Ca + var_potassium_pump_current__i_p_K + var_calcium_pump_current__i_p_Ca) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamicten_tusscher_model_2004_endoFromCellMLBackwardEuler::ComputeResidual(double var_chaste_interface__environment__time, const double rCurrentGuess[6], double rResidual[6])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.2
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = rY[2];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = rY[3];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = rY[4];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[5];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[6];
        // Units: dimensionless; Initial value: 0.75
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[7];
        // Units: dimensionless; Initial value: 0.75
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[8];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[9];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__transient_outward_current_s_gate__s = rY[11];
        // Units: dimensionless; Initial value: 0.3212
        double var_chaste_interface__transient_outward_current_r_gate__r = rY[12];
        // Units: dimensionless; Initial value: 0
        
        //output_nonlinear_state_assignments
        double var_chaste_interface__L_type_Ca_current_fCa_gate__fCa = rCurrentGuess[0];
        double var_chaste_interface__calcium_dynamics__Ca_SR = rCurrentGuess[1];
        double var_chaste_interface__calcium_dynamics__Ca_i = rCurrentGuess[2];
        double var_chaste_interface__calcium_dynamics__g = rCurrentGuess[3];
        double var_chaste_interface__potassium_dynamics__K_i = rCurrentGuess[4];
        double var_chaste_interface__sodium_dynamics__Na_i = rCurrentGuess[5];
        
        //output_equations
        const double var_membrane__Cm = 0.185; // microF
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(5.4000000000000004 / var_chaste_interface__potassium_dynamics__K_i); // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 200.0))); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = (var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + (((3.0 * exp(0.00020000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) + 100.0))) + exp(0.10000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 10.0))) / (1.0 + exp( -0.5 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)))))) * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K) * 5.4050000000000002; // picoA_per_picoF
        const double var_transient_outward_current__g_to = 0.072999999999999995; // nanoS_per_picoF
        const double var_transient_outward_current__i_to = var_transient_outward_current__g_to * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__g_Kr = 0.096000000000000002; // nanoS_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr = var_rapid_time_dependent_potassium_current__g_Kr * 1.0 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks = 0.245 * pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0) * (var_chaste_interface__membrane__V - (26.713760659695648 * log(9.6000000000000014 / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i))))); // picoA_per_picoF
        const double var_L_type_Ca_current__g_CaL = 0.000175; // litre_per_farad_second
        const double var_L_type_Ca_current__i_CaL = (((var_L_type_Ca_current__g_CaL * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_fCa_gate__fCa * var_chaste_interface__membrane__V * 37237684497.486488) * 3.8797490106562429e-07) * ((var_chaste_interface__calcium_dynamics__Ca_i * exp((var_chaste_interface__membrane__V * 192970.68299999999) * 3.8797490106562429e-07)) - 0.68200000000000005)) / (exp((var_chaste_interface__membrane__V * 192970.68299999999) * 3.8797490106562429e-07) - 1.0); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = ((1.1491875 * var_chaste_interface__sodium_dynamics__Na_i) / (var_chaste_interface__sodium_dynamics__Na_i + 40.0)) / (1.0 + (0.1245 * exp((var_chaste_interface__membrane__V *  -9648.5341499999995) * 3.8797490106562429e-07)) + (0.035299999999999998 * exp(((-var_chaste_interface__membrane__V) * 96485.341499999995) * 3.8797490106562429e-07))); // picoA_per_picoF
        const double var_fast_sodium_current__g_Na = 14.837999999999999; // nanoS_per_picoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(140.0 / var_chaste_interface__sodium_dynamics__Na_i); // millivolt
        const double var_fast_sodium_current__i_Na = var_fast_sodium_current__g_Na * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na = 0.00029 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa = (1000.0 * ((exp((var_chaste_interface__membrane__V * 33769.869524999995) * 3.8797490106562429e-07) * pow(var_chaste_interface__sodium_dynamics__Na_i, 3.0) * 2.0) - (exp((var_chaste_interface__membrane__V *  -62715.471975) * 3.8797490106562429e-07) * var_chaste_interface__calcium_dynamics__Ca_i * 6860000.0))) / ((1.0 + (0.10000000000000001 * exp((var_chaste_interface__membrane__V *  -62715.471975) * 3.8797490106562429e-07))) * 11539055.9375); // picoA_per_picoF
        const double var_calcium_background_current__i_b_Ca = 0.00059199999999999997 * (var_chaste_interface__membrane__V - (13.356880329847824 * log(2.0 / var_chaste_interface__calcium_dynamics__Ca_i))); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K = (0.0146 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)) / (1.0 + exp((25.0 - var_chaste_interface__membrane__V) * 0.16722408026755853)); // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca = (0.82499999999999996 * var_chaste_interface__calcium_dynamics__Ca_i) / (var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001); // picoA_per_picoF
        const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double var_L_type_Ca_current_fCa_gate__fCa_inf = ((1.0 / (1.0 + pow(var_chaste_interface__calcium_dynamics__Ca_i * 3076.9230769230771, 8.0))) + (0.10000000000000001 / (1.0 + exp((var_chaste_interface__calcium_dynamics__Ca_i - 0.00050000000000000001) * 10000.0))) + (0.20000000000000001 / (1.0 + exp((var_chaste_interface__calcium_dynamics__Ca_i - 0.00075000000000000002) * 1250.0))) + 0.23000000000000001) * 0.68493150684931503; // dimensionless
        const double var_calcium_dynamics__i_rel = (((0.016463999999999999 * pow(var_chaste_interface__calcium_dynamics__Ca_SR, 2.0)) / (0.0625 + pow(var_chaste_interface__calcium_dynamics__Ca_SR, 2.0))) + 0.0082319999999999997) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__calcium_dynamics__g; // millimolar_per_millisecond
        const double var_calcium_dynamics__i_up = 0.00042499999999999998 / (1.0 + (6.2499999999999997e-08 / pow(var_chaste_interface__calcium_dynamics__Ca_i, 2.0))); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_leak = 8.0000000000000007e-05 * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_i); // millimolar_per_millisecond
        const double var_calcium_dynamics__g_inf = (var_chaste_interface__calcium_dynamics__Ca_i < 0.00035) ? (1.0 / (1.0 + pow(var_chaste_interface__calcium_dynamics__Ca_i * 2857.1428571428573, 6.0))) : (1.0 / (1.0 + pow(var_chaste_interface__calcium_dynamics__Ca_i * 2857.1428571428573, 16.0))); // dimensionless
        const double d_dt_chaste_interface__calcium_dynamics__Ca_i = (1.0 / (1.0 + (0.00014999999999999999 / pow(var_chaste_interface__calcium_dynamics__Ca_i + 0.001, 2.0)))) * (((var_calcium_dynamics__i_leak - var_calcium_dynamics__i_up) + var_calcium_dynamics__i_rel) - (((1.0 * ((var_L_type_Ca_current__i_CaL + var_calcium_background_current__i_b_Ca + var_calcium_pump_current__i_p_Ca) - (2.0 * var_sodium_calcium_exchanger_current__i_NaCa))) * 0.00031590674984870111) * var_membrane__Cm)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__L_type_Ca_current_fCa_gate__fCa = ((var_L_type_Ca_current_fCa_gate__fCa_inf > var_chaste_interface__L_type_Ca_current_fCa_gate__fCa) && (var_chaste_interface__membrane__V >  -60.0)) ? 0.0 : ((var_L_type_Ca_current_fCa_gate__fCa_inf - var_chaste_interface__L_type_Ca_current_fCa_gate__fCa) * 0.5); // per_millisecond
        const double d_dt_chaste_interface__calcium_dynamics__Ca_SR = (((1.0 / (1.0 + (3.0 / pow(var_chaste_interface__calcium_dynamics__Ca_SR + 0.29999999999999999, 2.0)))) * 0.016403999999999998) * 914.0767824497259) * (var_calcium_dynamics__i_up - (var_calcium_dynamics__i_rel + var_calcium_dynamics__i_leak)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__calcium_dynamics__g = ((var_calcium_dynamics__g_inf > var_chaste_interface__calcium_dynamics__g) && (var_chaste_interface__membrane__V >  -60.0)) ? 0.0 : ((var_calcium_dynamics__g_inf - var_chaste_interface__calcium_dynamics__g) * 0.5); // per_millisecond
        const double d_dt_chaste_interface__sodium_dynamics__Na_i = (( -1.0 * (var_fast_sodium_current__i_Na + var_sodium_background_current__i_b_Na + (3.0 * var_sodium_potassium_pump_current__i_NaK) + (3.0 * var_sodium_calcium_exchanger_current__i_NaCa))) * 0.00063181349969740222) * var_membrane__Cm; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__potassium_dynamics__K_i = (( -1.0 * ((var_inward_rectifier_potassium_current__i_K1 + var_transient_outward_current__i_to + var_rapid_time_dependent_potassium_current__i_Kr + var_slow_time_dependent_potassium_current__i_Ks + var_potassium_pump_current__i_p_K + (var_chaste_interface__membrane__i_Stim / HeartConfig::Instance()->GetCapacitance())) - (2.0 * var_sodium_potassium_pump_current__i_NaK))) * 0.00063181349969740222) * var_membrane__Cm; // 'millimole per litre per millisecond'
        
        rResidual[2] = rCurrentGuess[2] - rY[1] - mDt*d_dt_chaste_interface__calcium_dynamics__Ca_i;
        rResidual[0] = rCurrentGuess[0] - rY[10] - mDt*d_dt_chaste_interface__L_type_Ca_current_fCa_gate__fCa;
        rResidual[1] = rCurrentGuess[1] - rY[13] - mDt*d_dt_chaste_interface__calcium_dynamics__Ca_SR;
        rResidual[3] = rCurrentGuess[3] - rY[14] - mDt*d_dt_chaste_interface__calcium_dynamics__g;
        rResidual[5] = rCurrentGuess[5] - rY[15] - mDt*d_dt_chaste_interface__sodium_dynamics__Na_i;
        rResidual[4] = rCurrentGuess[4] - rY[16] - mDt*d_dt_chaste_interface__potassium_dynamics__K_i;
    }
    
    void Dynamicten_tusscher_model_2004_endoFromCellMLBackwardEuler::ComputeJacobian(double var_chaste_interface__environment__time, const double rCurrentGuess[6], double rJacobian[6][6])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.2
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = rY[2];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = rY[3];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = rY[4];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[5];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[6];
        // Units: dimensionless; Initial value: 0.75
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[7];
        // Units: dimensionless; Initial value: 0.75
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[8];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[9];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__transient_outward_current_s_gate__s = rY[11];
        // Units: dimensionless; Initial value: 0.3212
        double var_chaste_interface__transient_outward_current_r_gate__r = rY[12];
        // Units: dimensionless; Initial value: 0
        
        double var_chaste_interface__L_type_Ca_current_fCa_gate__fCa = rCurrentGuess[0];
        double var_chaste_interface__calcium_dynamics__Ca_SR = rCurrentGuess[1];
        double var_chaste_interface__calcium_dynamics__Ca_i = rCurrentGuess[2];
        double var_chaste_interface__calcium_dynamics__g = rCurrentGuess[3];
        double var_chaste_interface__potassium_dynamics__K_i = rCurrentGuess[4];
        double var_chaste_interface__sodium_dynamics__Na_i = rCurrentGuess[5];
        
        const double var_chaste_interface__environment__dt = mDt;

        const double var_membrane__Cm = 0.185; // microF
        const double var_transient_outward_current__g_to = 0.072999999999999995; // nanoS_per_picoF
        const double var_rapid_time_dependent_potassium_current__g_Kr = 0.096000000000000002; // nanoS_per_picoF
        const double var_L_type_Ca_current__g_CaL = 0.000175; // litre_per_farad_second
        const double var_fast_sodium_current__g_Na = 14.837999999999999; // nanoS_per_picoF
        const double var_t4 = 1.0 / var_chaste_interface__potassium_dynamics__K_i; // dimensionless
        const double var_t8 = 26.713760659695648 * log(5.4000000000000004 * var_t4); // dimensionless
        const double var_t11 = exp(((0.059999999999999998 * var_chaste_interface__membrane__V) - (0.059999999999999998 * var_t8)) - 12.0); // dimensionless
        const double var_t12 = 1.0 + var_t11; // dimensionless
        const double var_t14 = 1.0 / pow(var_t12, 2.0); // dimensionless
        const double var_t15 = 5.4050000000000002 * var_t14; // dimensionless
        const double var_t16 = 1.0 / var_t12; // dimensionless
        const double var_t21 = exp(((0.00020000000000000001 * var_chaste_interface__membrane__V) - (0.00020000000000000001 * var_t8)) + 0.02); // dimensionless
        const double var_t23 = 0.10000000000000001 * var_chaste_interface__membrane__V; // dimensionless
        const double var_t26 = exp((var_t23 - (0.10000000000000001 * var_t8)) - 1.0); // dimensionless
        const double var_t27 = (3.0 * var_t21) + var_t26; // dimensionless
        const double var_t31 = exp(( -0.5 * var_chaste_interface__membrane__V) + (0.5 * var_t8)); // dimensionless
        const double var_t32 = 1.0 + var_t31; // dimensionless
        const double var_t33 = 1.0 / var_t32; // dimensionless
        const double var_t35 = (0.10000000000000001 * var_t16) + (var_t27 * var_t33); // dimensionless
        const double var_t36 = 1.0 / var_t35; // dimensionless
        const double var_t39 = var_chaste_interface__membrane__V - var_t8; // dimensionless
        const double var_t40 = 2.3237900077244502 * var_t39; // dimensionless
        const double var_t44 = 5.4050000000000002 * var_t16; // dimensionless
        const double var_t47 = var_t44 / pow(var_t35, 2.0); // dimensionless
        const double var_t56 = var_t27 / pow(var_t32, 2.0); // dimensionless
        const double var_t63 = var_t36 * 2.3237900077244502; // dimensionless
        const double var_t64 = var_t44 * var_t63; // dimensionless
        const double var_t66 = var_transient_outward_current__g_to * var_chaste_interface__transient_outward_current_r_gate__r; // dimensionless
        const double var_t67 = var_t66 * var_chaste_interface__transient_outward_current_s_gate__s; // dimensionless
        const double var_t70 = ((var_rapid_time_dependent_potassium_current__g_Kr * 2.3237900077244502) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2; // dimensionless
        const double var_t73 = 0.245 * pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0); // dimensionless
        const double var_t74 = var_L_type_Ca_current__g_CaL * var_chaste_interface__L_type_Ca_current_d_gate__d; // dimensionless
        const double var_t75 = var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_fCa_gate__fCa; // dimensionless
        const double var_t83 = (var_chaste_interface__membrane__V * 96485.341499999995) * 3.8797490106562429e-07; // dimensionless
        const double var_t85 = exp(2.0 * var_t83); // dimensionless
        const double var_t86 = var_chaste_interface__calcium_dynamics__Ca_i * var_t85; // dimensionless
        const double var_t88 = var_t86 - 0.68200000000000005; // dimensionless
        const double var_t90 = var_t85 - 1.0; // dimensionless
        const double var_t91 = 1.0 / var_t90; // dimensionless
        const double var_t93 = (3611.8217397063131 * var_t88) * var_t91; // dimensionless
        const double var_t97 = (var_t74 * var_t75) * var_chaste_interface__membrane__V; // dimensionless
        const double var_t120 = var_chaste_interface__sodium_dynamics__Na_i + 40.0; // dimensionless
        const double var_t121 = 1.0 / var_t120; // dimensionless
        const double var_t124 = exp( -0.10000000000000001 * var_t83); // dimensionless
        const double var_t126 = exp(-var_t83); // dimensionless
        const double var_t128 = (1.0 + (0.1245 * var_t124)) + (0.035299999999999998 * var_t126); // dimensionless
        const double var_t142 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2.0); // dimensionless
        const double var_t146 = ((var_fast_sodium_current__g_Na * var_t142) * var_chaste_interface__fast_sodium_current_m_gate__m) * (var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j); // dimensionless
        const double var_t152 = exp((0.34999999999999998 * var_chaste_interface__membrane__V) * 0.037433890822745473); // dimensionless
        const double var_t154 = pow(var_chaste_interface__sodium_dynamics__Na_i, 2.0); // dimensionless
        const double var_t155 = var_t154 * var_chaste_interface__sodium_dynamics__Na_i; // dimensionless
        const double var_t164 = exp(( -0.65000000000000002 * var_chaste_interface__membrane__V) * 0.037433890822745473); // dimensionless
        const double var_t169 = ((var_t164 * 2744000.0) * var_chaste_interface__calcium_dynamics__Ca_i) * 2.5; // dimensionless
        const double var_t181 = 1.0 + (0.10000000000000001 * var_t164); // dimensionless
        const double var_t182 = 1.0 / var_t181; // dimensionless
        const double var_t183 = 8.666220229942447e-08 * var_t182; // dimensionless
        const double var_t188 = 1000.0 * (((var_t152 * var_t155) * 2.0) - var_t169); // dimensionless
        const double var_t200 = exp(4.1806020080000001 - (0.16722408029999999 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_t201 = 1.0 + var_t200; // dimensionless
        const double var_t202 = 1.0 / var_t201; // dimensionless
        const double var_t222 = 1.0 / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i)); // dimensionless
        const double var_t231 = 1.0 / var_chaste_interface__sodium_dynamics__Na_i; // dimensionless
        const double var_t264 = 1000.0 * var_t164; // dimensionless
        const double var_t267 = 0.29585798816568049 * var_t182; // dimensionless
        const double var_t272 = 1.0 / var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t276 = var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001; // dimensionless
        const double var_t277 = 1.0 / var_t276; // dimensionless
        const double var_t279 = 0.82499999999999996 * var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t284 = var_t73 * 8314.4719999999998; // dimensionless
        const double var_t289 = 1.0 / var_t128; // dimensionless
        const double var_t291 = (1.1491875 * var_t121) * var_t289; // dimensionless
        const double var_t296 = ((1.1491875 * var_chaste_interface__sodium_dynamics__Na_i) / pow(var_t120, 2.0)) * var_t289; // dimensionless
        const double var_t312 = 1.0364268649036186e-05 * var_t4; // dimensionless
        const double var_t313 = var_t312 * var_t11; // dimensionless
        const double var_t338 = 2577486.3199999998 * var_t312; // dimensionless
        const double var_t722 = pow(var_chaste_interface__calcium_dynamics__Ca_i, 2.0); // dimensionless
        const double var_t723 = pow(var_t722, 2.0); // dimensionless
        const double var_t724 = pow(var_t723, 2.0); // dimensionless
        const double var_t726 = 1.0 + (8.0340237690000001e+27 * var_t724); // dimensionless
        const double var_t731 = exp((10000.0 * var_chaste_interface__calcium_dynamics__Ca_i) - 5.0); // dimensionless
        const double var_t732 = 1.0 + var_t731; // dimensionless
        const double var_t737 = exp((1250.0 * var_chaste_interface__calcium_dynamics__Ca_i) - 0.9375); // dimensionless
        const double var_t738 = 1.0 + var_t737; // dimensionless
        const double var_t743 =  -60.0 < var_chaste_interface__membrane__V; // dimensionless
        const double var_t744 = (var_chaste_interface__L_type_Ca_current_fCa_gate__fCa < ((((0.68493150680000003 / var_t726) + (0.068493150680000003 / var_t732)) + (0.13698630140000001 / var_t738)) + 0.15753424660000001)) && var_t743; // dimensionless
        const double var_t749 = var_t722 * var_chaste_interface__calcium_dynamics__Ca_i; // dimensionless
        const double var_t750 = var_t723 * var_t749; // dimensionless
        const double var_t828 = var_chaste_interface__calcium_dynamics__Ca_i + 0.001; // dimensionless
        const double var_t829 = pow(var_t828, 2.0); // dimensionless
        const double var_t832 = 1.0 + (0.00014999999999999999 / var_t829); // dimensionless
        const double var_t833 = 1.0 / var_t832; // dimensionless
        const double var_t840 = 0.00063181349969740233 * var_membrane__Cm; // dimensionless
        const double var_t843 = pow(var_chaste_interface__calcium_dynamics__Ca_SR, 2.0); // dimensionless
        const double var_t846 = 0.0625 + var_t843; // dimensionless
        const double var_t847 = 1.0 / var_t846; // dimensionless
        const double var_t849 = ((0.016463999999999999 * var_t843) * var_t847) + 0.0082319999999999997; // dimensionless
        const double var_t873 = 8.0000000000000007e-05 * (var_chaste_interface__calcium_dynamics__Ca_SR - var_chaste_interface__calcium_dynamics__Ca_i); // dimensionless
        const double var_t877 = 1.0 + (6.2499999999999997e-08 / var_t722); // dimensionless
        const double var_t879 = 0.00042499999999999998 / var_t877; // dimensionless
        const double var_t881 = (var_t849 * var_chaste_interface__L_type_Ca_current_d_gate__d) * var_chaste_interface__calcium_dynamics__g; // dimensionless
        const double var_t896 = 1.0364268649036186e-05 * var_membrane__Cm; // dimensionless
        const double var_t912 = ((0.00084999999999999995 / pow(var_t877, 2.0)) * 6.2499999999999997e-08) / var_t749; // dimensionless
        const double var_t931 = 8.0000000000000007e-05 + (((2.0 * (((0.016463999999999999 * var_chaste_interface__calcium_dynamics__Ca_SR) * var_t847) - (((0.016463999999999999 * var_t843) * var_chaste_interface__calcium_dynamics__Ca_SR) / pow(var_t846, 2.0)))) * var_chaste_interface__L_type_Ca_current_d_gate__d) * var_chaste_interface__calcium_dynamics__g); // dimensionless
        const double var_t943 = var_chaste_interface__calcium_dynamics__Ca_SR + 0.29999999999999999; // dimensionless
        const double var_t944 = pow(var_t943, 2.0); // dimensionless
        const double var_t947 = 1.0 + (3.0 / var_t944); // dimensionless
        const double var_t949 = (1.0 / var_t947) * 0.016403999999999998; // dimensionless
        const double var_t976 = (5.43991024e+20 * var_t723) * var_t722; // dimensionless
        const double var_t980 = 1.9720198860000001e+55 * pow(var_t724, 2.0); // dimensionless
        const double var_t985 = (var_chaste_interface__calcium_dynamics__g < ((var_chaste_interface__calcium_dynamics__Ca_i < 0.00035) ? (1.0 / (1.0 + var_t976)) : (1.0 / (1.0 + var_t980)))) && var_t743; // dimensionless
        
        rJacobian[0][0] = 1.0 - (var_chaste_interface__environment__dt * (var_t744 ? 0.0 :  -0.5));
        rJacobian[0][1] = 0.0;
        rJacobian[0][2] = -(var_chaste_interface__environment__dt * (var_t744 ? 0.0 : (((( -2.201102402e+28 / pow(var_t726, 2.0)) * var_t750) - ((342.46575339999998 / pow(var_t732, 2.0)) * var_t731)) - ((85.616438380000005 / pow(var_t738, 2.0)) * var_t737))));
        rJacobian[0][3] = 0.0;
        rJacobian[0][4] = 0.0;
        rJacobian[0][5] = 0.0;
        rJacobian[1][0] = 0.0;
        rJacobian[1][1] = 1.0 - (var_chaste_interface__environment__dt * (((((((((2.0 / pow(var_t947, 2.0)) * 0.016403999999999998) * 914.0767824497259) * ((var_t879 - var_t881) - var_t873)) * 10.0) * 0.29999999999999999) / var_t944) / var_t943) - ((var_t949 * 914.0767824497259) * var_t931)));
        rJacobian[1][2] = -(var_chaste_interface__environment__dt * ((var_t949 * 914.0767824497259) * (var_t912 + 8.0000000000000007e-05)));
        rJacobian[1][3] = -(var_chaste_interface__environment__dt * (((-var_t949) * (914.0767824497259 * var_t849)) * var_chaste_interface__L_type_Ca_current_d_gate__d));
        rJacobian[1][4] = 0.0;
        rJacobian[1][5] = 0.0;
        rJacobian[2][0] = -(var_chaste_interface__environment__dt * (((( -2.0 * ((var_t833 * var_L_type_Ca_current__g_CaL) * var_chaste_interface__L_type_Ca_current_d_gate__d)) * (var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__membrane__V)) * 96485.341499999995) * ((((3.8797490106562429e-07 * var_t88) * var_t91) * 60.960741282614002) * var_membrane__Cm)));
        rJacobian[2][1] = -(var_chaste_interface__environment__dt * (var_t833 * var_t931));
        rJacobian[2][2] = 1.0 - (var_chaste_interface__environment__dt * ((((((2.0 / pow(var_t832, 2.0)) * (((var_t873 - var_t879) + var_t881) - (((0.5 * (((((4.0 * var_t97) * var_t93) + (0.00059199999999999997 * (var_chaste_interface__membrane__V - (13.356880329847824 * log(2.0 * var_t272))))) + (var_t279 * var_t277)) - ((2.0 * var_t188) * var_t183))) * 60.960741282614002) * var_t896))) * 0.00014999999999999999) / var_t829) / var_t828) + (var_t833 * (( -8.0000000000000007e-05 - var_t912) - (((0.5 * (((((((((4.0 * var_t97) * 1119664.739308957) * 0.0032258064516129032) * var_t85) * var_t91) + (0.0079072731552699109 * var_t272)) + (0.82499999999999996 * var_t277)) - (var_t279 / pow(var_t276, 2.0))) + (2.0 * ((((var_t264 * 2744000.0) * 2.5) * 2.9291824377205469e-07) * var_t267)))) * 60.960741282614002) * var_t896)))));
        rJacobian[2][3] = -(var_chaste_interface__environment__dt * ((var_t833 * var_t849) * var_chaste_interface__L_type_Ca_current_d_gate__d));
        rJacobian[2][4] = 0.0;
        rJacobian[2][5] = -(var_chaste_interface__environment__dt * (((((((3.0 * var_t833) * 1000.0) * var_t152) * var_t154) * 2.0) * var_t183) * var_t840));
        rJacobian[3][0] = 0.0;
        rJacobian[3][1] = 0.0;
        rJacobian[3][2] = -(var_chaste_interface__environment__dt * (var_t985 ? 0.0 : (((var_chaste_interface__calcium_dynamics__Ca_i <= 0.00035) ? ((( -3.2639461439999999e+21 / pow(1.0 + var_t976, 2.0)) * var_t723) * var_chaste_interface__calcium_dynamics__Ca_i) : (0.00035 < var_chaste_interface__calcium_dynamics__Ca_i) ? ((( -3.1552318180000002e+56 / pow(1.0 + var_t980, 2.0)) * var_t724) * var_t750) : NAN) * 0.5)));
        rJacobian[3][3] = 1.0 - (var_chaste_interface__environment__dt * (var_t985 ? 0.0 :  -0.5));
        rJacobian[3][4] = 0.0;
        rJacobian[3][5] = 0.0;
        rJacobian[4][0] = 0.0;
        rJacobian[4][1] = 0.0;
        rJacobian[4][2] = 0.0;
        rJacobian[4][3] = 0.0;
        rJacobian[4][4] = 1.0 - (var_chaste_interface__environment__dt * (((((((((((((0.0025819888969999998 * var_t15) * var_t63) * var_t39) * 2577486.3199999998) * var_t313) + (((0.043033148290000003 * var_t47) * var_t40) * (((((( -0.0060000000000000001 * var_t14) * 8314.4719999999998) * 310.0) * var_t313) + ((((1546.4917919999998 * var_t312) * var_t21) + ((257748.63199999998 * var_t312) * var_t26)) * var_t33)) + (((((0.5 * var_t56) * 8314.4719999999998) * 0.0032129232812012176) * var_t4) * var_t31)))) - ((0.043033148290000003 * var_t64) * var_t338)) - (var_t67 * var_t338)) - ((0.43033148290000001 * var_t70) * var_t338)) - ((var_t284 * 0.0032129232812012176) * var_t222)) - ((37631.300272 * var_t312) * var_t202)) * 60.960741282614002) * var_t896));
        rJacobian[4][5] = -(var_chaste_interface__environment__dt * (((-(((((var_t284 * 0.0032129232812012176) * var_t222) * 0.029999999999999999) - (2.0 * var_t291)) + (2.0 * var_t296))) * 60.960741282614002) * var_t896));
        rJacobian[5][0] = 0.0;
        rJacobian[5][1] = 0.0;
        rJacobian[5][2] = -(var_chaste_interface__environment__dt * ((((((3.0 * var_t264) * 2744000.0) * 2.5) * 2.9291824377205469e-07) * var_t267) * var_t840));
        rJacobian[5][3] = 0.0;
        rJacobian[5][4] = 0.0;
        rJacobian[5][5] = 1.0 - (var_chaste_interface__environment__dt * (((-(((((((var_t146 * 2577486.3199999998) * 1.0364268649036186e-05) * var_t231) + (0.0077469905913117379 * var_t231)) + (3.0 * var_t291)) - (3.0 * var_t296)) + (9.0 * (((((1000.0 * var_t152) * var_t154) * 2.0) * 2.9291824377205469e-07) * var_t267)))) * 60.960741282614002) * var_t896));
    }
    
    void Dynamicten_tusscher_model_2004_endoFromCellMLBackwardEuler::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.2
        double var_chaste_interface__calcium_dynamics__Ca_i = rY[1];
        // Units: millimolar; Initial value: 0.0002
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = rY[2];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = rY[3];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = rY[4];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[5];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[6];
        // Units: dimensionless; Initial value: 0.75
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[7];
        // Units: dimensionless; Initial value: 0.75
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[8];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[9];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__L_type_Ca_current_fCa_gate__fCa = rY[10];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__transient_outward_current_s_gate__s = rY[11];
        // Units: dimensionless; Initial value: 0.3212
        double var_chaste_interface__transient_outward_current_r_gate__r = rY[12];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__sodium_dynamics__Na_i = rY[15];
        // Units: millimolar; Initial value: 11.6
        double var_chaste_interface__potassium_dynamics__K_i = rY[16];
        // Units: millimolar; Initial value: 138.3
        
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(5.4000000000000004 / var_chaste_interface__potassium_dynamics__K_i); // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 200.0))); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = (var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + (((3.0 * exp(0.00020000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) + 100.0))) + exp(0.10000000000000001 * ((var_chaste_interface__membrane__V - var_reversal_potentials__E_K) - 10.0))) / (1.0 + exp( -0.5 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)))))) * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K) * 5.4050000000000002; // picoA_per_picoF
        const double var_transient_outward_current__g_to = 0.072999999999999995; // nanoS_per_picoF
        const double var_transient_outward_current__i_to = var_transient_outward_current__g_to * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__g_Kr = 0.096000000000000002; // nanoS_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr = var_rapid_time_dependent_potassium_current__g_Kr * 1.0 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K); // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks = 0.245 * pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2.0) * (var_chaste_interface__membrane__V - (26.713760659695648 * log(9.6000000000000014 / (var_chaste_interface__potassium_dynamics__K_i + (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i))))); // picoA_per_picoF
        const double var_L_type_Ca_current__g_CaL = 0.000175; // litre_per_farad_second
        const double var_L_type_Ca_current__i_CaL = (((var_L_type_Ca_current__g_CaL * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__L_type_Ca_current_fCa_gate__fCa * var_chaste_interface__membrane__V * 37237684497.486488) * 3.8797490106562429e-07) * ((var_chaste_interface__calcium_dynamics__Ca_i * exp((var_chaste_interface__membrane__V * 192970.68299999999) * 3.8797490106562429e-07)) - 0.68200000000000005)) / (exp((var_chaste_interface__membrane__V * 192970.68299999999) * 3.8797490106562429e-07) - 1.0); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = ((1.1491875 * var_chaste_interface__sodium_dynamics__Na_i) / (var_chaste_interface__sodium_dynamics__Na_i + 40.0)) / (1.0 + (0.1245 * exp((var_chaste_interface__membrane__V *  -9648.5341499999995) * 3.8797490106562429e-07)) + (0.035299999999999998 * exp(((-var_chaste_interface__membrane__V) * 96485.341499999995) * 3.8797490106562429e-07))); // picoA_per_picoF
        const double var_fast_sodium_current__g_Na = 14.837999999999999; // nanoS_per_picoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(140.0 / var_chaste_interface__sodium_dynamics__Na_i); // millivolt
        const double var_fast_sodium_current__i_Na = var_fast_sodium_current__g_Na * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3.0) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na = 0.00029 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_Na); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa = (1000.0 * ((exp((var_chaste_interface__membrane__V * 33769.869524999995) * 3.8797490106562429e-07) * pow(var_chaste_interface__sodium_dynamics__Na_i, 3.0) * 2.0) - (exp((var_chaste_interface__membrane__V *  -62715.471975) * 3.8797490106562429e-07) * var_chaste_interface__calcium_dynamics__Ca_i * 6860000.0))) / ((1.0 + (0.10000000000000001 * exp((var_chaste_interface__membrane__V *  -62715.471975) * 3.8797490106562429e-07))) * 11539055.9375); // picoA_per_picoF
        const double var_calcium_background_current__i_b_Ca = 0.00059199999999999997 * (var_chaste_interface__membrane__V - (13.356880329847824 * log(2.0 / var_chaste_interface__calcium_dynamics__Ca_i))); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K = (0.0146 * (var_chaste_interface__membrane__V - var_reversal_potentials__E_K)) / (1.0 + exp((25.0 - var_chaste_interface__membrane__V) * 0.16722408026755853)); // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca = (0.82499999999999996 * var_chaste_interface__calcium_dynamics__Ca_i) / (var_chaste_interface__calcium_dynamics__Ca_i + 0.00050000000000000001); // picoA_per_picoF
        const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double d_dt_chaste_interface__membrane__V = -(var_inward_rectifier_potassium_current__i_K1 + var_transient_outward_current__i_to + var_rapid_time_dependent_potassium_current__i_Kr + var_slow_time_dependent_potassium_current__i_Ks + var_L_type_Ca_current__i_CaL + var_sodium_potassium_pump_current__i_NaK + var_fast_sodium_current__i_Na + var_sodium_background_current__i_b_Na + var_sodium_calcium_exchanger_current__i_NaCa + var_calcium_background_current__i_b_Ca + var_potassium_pump_current__i_p_K + var_calcium_pump_current__i_p_Ca + (var_chaste_interface__membrane__i_Stim / HeartConfig::Instance()->GetCapacitance())); // 'millivolt per millisecond'
        
        rY[0] += mDt*d_dt_chaste_interface__membrane__V;
    }
    
    void Dynamicten_tusscher_model_2004_endoFromCellMLBackwardEuler::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.2
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = rY[2];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = rY[3];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = rY[4];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[5];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[6];
        // Units: dimensionless; Initial value: 0.75
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[7];
        // Units: dimensionless; Initial value: 0.75
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[8];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[9];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__transient_outward_current_s_gate__s = rY[11];
        // Units: dimensionless; Initial value: 0.3212
        double var_chaste_interface__transient_outward_current_r_gate__r = rY[12];
        // Units: dimensionless; Initial value: 0
        
        const double var_chaste_interface__environment__dt = mDt;

        const double var_rapid_time_dependent_potassium_current_Xr1_gate__tau_xr1 = 1.0 * (450.0 / (1.0 + exp(( -45.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))) * (6.0 / (1.0 + exp((var_chaste_interface__membrane__V + 30.0) * 0.086956521739130432))); // millisecond
        const double var_rapid_time_dependent_potassium_current_Xr2_gate__tau_xr2 = 1.0 * (3.0 / (1.0 + exp(( -60.0 - var_chaste_interface__membrane__V) * 0.050000000000000003))) * (1.1200000000000001 / (1.0 + exp((var_chaste_interface__membrane__V - 60.0) * 0.050000000000000003))); // millisecond
        const double var_slow_time_dependent_potassium_current_Xs_gate__tau_xs = 1.0 * (1100.0 / sqrt(1.0 + exp(( -10.0 - var_chaste_interface__membrane__V) * 0.16666666666666666))) * (1.0 / (1.0 + exp((var_chaste_interface__membrane__V - 60.0) * 0.050000000000000003))); // millisecond
        const double var_fast_sodium_current_m_gate__tau_m = 1.0 * (1.0 / (1.0 + exp(( -60.0 - var_chaste_interface__membrane__V) * 0.20000000000000001))) * ((0.10000000000000001 / (1.0 + exp((var_chaste_interface__membrane__V + 35.0) * 0.20000000000000001))) + (0.10000000000000001 / (1.0 + exp((var_chaste_interface__membrane__V - 50.0) * 0.0050000000000000001)))); // millisecond
        const double var_fast_sodium_current_h_gate__tau_h = 1.0 / (((var_chaste_interface__membrane__V <  -40.0) ? (0.057000000000000002 * exp((-(var_chaste_interface__membrane__V + 80.0)) * 0.14705882352941177)) : 0.0) + ((var_chaste_interface__membrane__V <  -40.0) ? ((2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) + (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane__V))) : (0.77000000000000002 / (0.13 * (1.0 + exp((var_chaste_interface__membrane__V + 10.66) *  -0.0900900900900901)))))); // millisecond
        const double var_fast_sodium_current_j_gate__tau_j = 1.0 / (((var_chaste_interface__membrane__V <  -40.0) ? ((((( -25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V)) - (6.9480000000000002e-06 * exp( -0.043909999999999998 * var_chaste_interface__membrane__V))) * (var_chaste_interface__membrane__V + 37.780000000000001)) * 1.0) / (1.0 + exp(0.311 * (var_chaste_interface__membrane__V + 79.230000000000004)))) : 0.0) + ((var_chaste_interface__membrane__V <  -40.0) ? ((0.024240000000000001 * exp( -0.01052 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__membrane__V + 40.140000000000001)))) : ((0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane__V)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__V + 32.0)))))); // millisecond
        const double var_L_type_Ca_current_d_gate__tau_d = (1.0 * ((1.3999999999999999 / (1.0 + exp(( -35.0 - var_chaste_interface__membrane__V) * 0.076923076923076927))) + 0.25) * (1.3999999999999999 / (1.0 + exp((var_chaste_interface__membrane__V + 5.0) * 0.20000000000000001)))) + (1.0 / (1.0 + exp((50.0 - var_chaste_interface__membrane__V) * 0.050000000000000003))); // millisecond
        const double var_L_type_Ca_current_f_gate__tau_f = (1125.0 * exp((-pow(var_chaste_interface__membrane__V + 27.0, 2.0)) * 0.0041666666666666666)) + 80.0 + (165.0 / (1.0 + exp((25.0 - var_chaste_interface__membrane__V) * 0.10000000000000001))); // millisecond
        const double var_transient_outward_current_s_gate__tau_s = (1000.0 * exp((-pow(var_chaste_interface__membrane__V + 67.0, 2.0)) * 0.001)) + (0.0 / (1.0 + exp((var_chaste_interface__membrane__V - 20.0) * 0.20000000000000001))) + 8.0; // millisecond
        const double var_transient_outward_current_r_gate__tau_r = (9.5 * exp((-pow(var_chaste_interface__membrane__V + 40.0, 2.0)) * 0.00055555555555555556)) + 0.80000000000000004; // millisecond
        
        rY[8] = (var_chaste_interface__L_type_Ca_current_d_gate__d + (((1.0 / (1.0 + exp(( -5.0 - var_chaste_interface__membrane__V) * 0.13333333333333333))) / var_L_type_Ca_current_d_gate__tau_d) * var_chaste_interface__environment__dt)) / (1.0 - (( -1.0 / var_L_type_Ca_current_d_gate__tau_d) * var_chaste_interface__environment__dt));
        rY[9] = (var_chaste_interface__L_type_Ca_current_f_gate__f + (((1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 20.0) * 0.14285714285714285))) / var_L_type_Ca_current_f_gate__tau_f) * var_chaste_interface__environment__dt)) / (1.0 - (( -1.0 / var_L_type_Ca_current_f_gate__tau_f) * var_chaste_interface__environment__dt));
        rY[6] = (var_chaste_interface__fast_sodium_current_h_gate__h + (((1.0 / pow(1.0 + exp((var_chaste_interface__membrane__V + 71.549999999999997) * 0.13458950201884254), 2.0)) / var_fast_sodium_current_h_gate__tau_h) * var_chaste_interface__environment__dt)) / (1.0 - (( -1.0 / var_fast_sodium_current_h_gate__tau_h) * var_chaste_interface__environment__dt));
        rY[7] = (var_chaste_interface__fast_sodium_current_j_gate__j + (((1.0 / pow(1.0 + exp((var_chaste_interface__membrane__V + 71.549999999999997) * 0.13458950201884254), 2.0)) / var_fast_sodium_current_j_gate__tau_j) * var_chaste_interface__environment__dt)) / (1.0 - (( -1.0 / var_fast_sodium_current_j_gate__tau_j) * var_chaste_interface__environment__dt));
        rY[5] = (var_chaste_interface__fast_sodium_current_m_gate__m + (((1.0 / pow(1.0 + exp(( -56.859999999999999 - var_chaste_interface__membrane__V) * 0.11074197120708749), 2.0)) / var_fast_sodium_current_m_gate__tau_m) * var_chaste_interface__environment__dt)) / (1.0 - (( -1.0 / var_fast_sodium_current_m_gate__tau_m) * var_chaste_interface__environment__dt));
        rY[2] = (var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 + (((1.0 / (1.0 + exp(( -26.0 - var_chaste_interface__membrane__V) * 0.14285714285714285))) / var_rapid_time_dependent_potassium_current_Xr1_gate__tau_xr1) * var_chaste_interface__environment__dt)) / (1.0 - (( -1.0 / var_rapid_time_dependent_potassium_current_Xr1_gate__tau_xr1) * var_chaste_interface__environment__dt));
        rY[3] = (var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 + (((1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 88.0) * 0.041666666666666664))) / var_rapid_time_dependent_potassium_current_Xr2_gate__tau_xr2) * var_chaste_interface__environment__dt)) / (1.0 - (( -1.0 / var_rapid_time_dependent_potassium_current_Xr2_gate__tau_xr2) * var_chaste_interface__environment__dt));
        rY[4] = (var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs + (((1.0 / (1.0 + exp(( -5.0 - var_chaste_interface__membrane__V) * 0.071428571428571425))) / var_slow_time_dependent_potassium_current_Xs_gate__tau_xs) * var_chaste_interface__environment__dt)) / (1.0 - (( -1.0 / var_slow_time_dependent_potassium_current_Xs_gate__tau_xs) * var_chaste_interface__environment__dt));
        rY[12] = (var_chaste_interface__transient_outward_current_r_gate__r + (((1.0 / (1.0 + exp((20.0 - var_chaste_interface__membrane__V) * 0.16666666666666666))) / var_transient_outward_current_r_gate__tau_r) * var_chaste_interface__environment__dt)) / (1.0 - (( -1.0 / var_transient_outward_current_r_gate__tau_r) * var_chaste_interface__environment__dt));
        rY[11] = (var_chaste_interface__transient_outward_current_s_gate__s + (((1.0 / (1.0 + exp((var_chaste_interface__membrane__V + 28.0) * 0.20000000000000001))) / var_transient_outward_current_s_gate__tau_s) * var_chaste_interface__environment__dt)) / (1.0 - (( -1.0 / var_transient_outward_current_s_gate__tau_s) * var_chaste_interface__environment__dt));
        
        double _guess[6] = {rY[10],rY[13],rY[1],rY[14],rY[16],rY[15]};
        CardiacNewtonSolver<6,Dynamicten_tusscher_model_2004_endoFromCellMLBackwardEuler>* _p_solver = CardiacNewtonSolver<6,Dynamicten_tusscher_model_2004_endoFromCellMLBackwardEuler>::Instance();
        _p_solver->Solve(*this, var_chaste_interface__environment__time, _guess);
        rY[10] = _guess[0];
        rY[13] = _guess[1];
        rY[1] = _guess[2];
        rY[14] = _guess[3];
        rY[16] = _guess[4];
        rY[15] = _guess[5];
    }
    
template<>
void OdeSystemInformation<Dynamicten_tusscher_model_2004_endoFromCellMLBackwardEuler>::Initialise(void)
{
    this->mSystemName = "tentusscher_model_2004_endo";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-86.2);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0002);

    // rY[2]:
    this->mVariableNames.push_back("rapid_time_dependent_potassium_current_Xr1_gate__Xr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[3]:
    this->mVariableNames.push_back("rapid_time_dependent_potassium_current_Xr2_gate__Xr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1);

    // rY[4]:
    this->mVariableNames.push_back("slow_time_dependent_potassium_current_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[5]:
    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[6]:
    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.75);

    // rY[7]:
    this->mVariableNames.push_back("fast_sodium_current_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.75);

    // rY[8]:
    this->mVariableNames.push_back("L_type_Ca_current_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[9]:
    this->mVariableNames.push_back("L_type_Ca_current_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1);

    // rY[10]:
    this->mVariableNames.push_back("L_type_Ca_current_fCa_gate__fCa");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1);

    // rY[11]:
    this->mVariableNames.push_back("transient_outward_current_s_gate__s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.3212);

    // rY[12]:
    this->mVariableNames.push_back("transient_outward_current_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[13]:
    this->mVariableNames.push_back("calcium_dynamics__Ca_SR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.2);

    // rY[14]:
    this->mVariableNames.push_back("calcium_dynamics__g");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1);

    // rY[15]:
    this->mVariableNames.push_back("sodium_dynamics__Na_i");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(11.6);

    // rY[16]:
    this->mVariableNames.push_back("potassium_dynamics__K_i");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(138.3);

    this->mAttributes["SuggestedForwardEulerTimestep"] = 0.001;
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamicten_tusscher_model_2004_endoFromCellMLBackwardEuler)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamicten_tusscher_model_2004_endoFromCellMLBackwardEuler(pSolver, pStimulus);
    }
    
}

