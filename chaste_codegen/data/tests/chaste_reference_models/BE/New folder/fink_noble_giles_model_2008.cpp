//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: fink_noble_giles_model_2008
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on Wed Mar 11 16:46:40 2020
//! 
//! <autogenerated>

#include "fink_noble_giles_model_2008.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "CardiacNewtonSolver.hpp"
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Dynamicfink_noble_giles_model_2008FromCellMLBackwardEuler::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__i_Stim_Start = 10.0; // millisecond
        const double var_chaste_interface__cell__i_Stim_Period = 1000.0; // millisecond
        const double var_chaste_interface__cell__i_Stim_PulseDuration = 1.0; // millisecond
        const double var_chaste_interface__cell__i_Stim_Amplitude =  -52.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__i_Stim_Amplitude),
                var_chaste_interface__cell__i_Stim_PulseDuration,
                var_chaste_interface__cell__i_Stim_Period,
                var_chaste_interface__cell__i_Stim_Start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    Dynamicfink_noble_giles_model_2008FromCellMLBackwardEuler::Dynamicfink_noble_giles_model_2008FromCellMLBackwardEuler(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractBackwardEulerCardiacCell<17>(
                27,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamicfink_noble_giles_model_2008FromCellMLBackwardEuler>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
    }
    
    Dynamicfink_noble_giles_model_2008FromCellMLBackwardEuler::~Dynamicfink_noble_giles_model_2008FromCellMLBackwardEuler()
    {
    }
    
    double Dynamicfink_noble_giles_model_2008FromCellMLBackwardEuler::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__iKr_Markov__Or4 = rY[4];
        // Units: dimensionless; Initial value: 0.014
        double var_chaste_interface__iKs_Xs_gate__Xs = rY[11];
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = rY[12];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__ito_r_gate__r = rY[13];
        // Units: dimensionless; Initial value: 2.11e-8
        double var_chaste_interface__iNa_m_gate__m = rY[14];
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = rY[15];
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = rY[16];
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = rY[17];
        // Units: dimensionless; Initial value: 5.06e-6
        double var_chaste_interface__iCaL_f_gate__f = rY[18];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = rY[19];
        // Units: dimensionless; Initial value: 0.9995
        double var_chaste_interface__iCaL_fCass_gate__fCass = rY[20];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__Ca__Ca_i = rY[21];
        // Units: millimolar; Initial value: 1.092e-4
        double var_chaste_interface__Ca__Ca_ss = rY[23];
        // Units: millimolar; Initial value: 1.893e-4
        double var_chaste_interface__Na__Na_i = rY[25];
        // Units: millimolar; Initial value: 7.940167
        double var_chaste_interface__K__K_i = rY[26];
        // Units: millimolar; Initial value: 141.0167
        
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(5.4000000000000004 / var_chaste_interface__K__K_i); // millivolt
        const double var_iK1_rectification__temp = 1.0 + (0.0356 / (0.45000000000000001 * exp((-(var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K))) * 0.050000000000000003))); // dimensionless
        const double var_IK1__i_K1 = ((0.88380000000000003 * ((var_iK1_rectification__temp * var_iK1_rectification__temp) / ((0.0014613 / (0.00069999999999999999 * exp((-((var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K)) + 0.2848)) * 0.20833333333333334))) + (0.0356 / (2.7999999999999998 * exp((-(var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K))) * 0.0055555555555555558))) + (var_iK1_rectification__temp * var_iK1_rectification__temp * var_iK1_rectification__temp)))) + (0.11619999999999997 * (1.0 / (1.0 + (0.0014613 / (0.040000000000000001 * exp((-(var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K))) * 0.10989010989010989))))))) * (var_chaste_interface__cell__V - var_reversal_potentials__E_K) * 0.68210000000000059; // nanoA_per_nanoF
        const double var_Ito__i_to = 0.20000000000000001 * var_chaste_interface__ito_r_gate__r * var_chaste_interface__ito_s_gate__s * (var_chaste_interface__cell__V - var_reversal_potentials__E_K); // nanoA_per_nanoF
        const double var_IKr__i_Kr = var_chaste_interface__iKr_Markov__Or4 * (var_chaste_interface__cell__V - var_reversal_potentials__E_K) * 0.024000000000000021; // nanoA_per_nanoF
        const double var_IKs__i_Ks = 0.039199999999999999 * pow(var_chaste_interface__iKs_Xs_gate__Xs, 2.0) * (var_chaste_interface__cell__V - (26.713760659695648 * log(9.6000000000000014 / (var_chaste_interface__K__K_i + (0.029999999999999999 * var_chaste_interface__Na__Na_i))))); // nanoA_per_nanoF
        const double var_ICaL__i_CaL = (((var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f_gate__f * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * (var_chaste_interface__cell__V - 15.0) * 744753.68994972983) * 3.8797490106562429e-07) * ((0.25 * var_chaste_interface__Ca__Ca_ss * exp(((var_chaste_interface__cell__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07)) - 2.0)) / (exp(((var_chaste_interface__cell__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07) - 1.0); // nanoA_per_nanoF
        const double var_INaK__i_NaK = ((1.0943437499999999 * var_chaste_interface__Na__Na_i) / (var_chaste_interface__Na__Na_i + 40.0)) / (1.0 + (0.1245 * exp((var_chaste_interface__cell__V *  -9648.5341499999995) * 3.8797490106562429e-07)) + (0.035299999999999998 * exp(((-var_chaste_interface__cell__V) * 96485.341499999995) * 3.8797490106562429e-07))); // nanoA_per_nanoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(140.0 / var_chaste_interface__Na__Na_i); // millivolt
        const double var_INa__i_Na = 11.0 * pow(var_chaste_interface__iNa_m_gate__m, 3.0) * var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j * (var_chaste_interface__cell__V - var_reversal_potentials__E_Na); // nanoA_per_nanoF
        const double var_INab__i_b_Na = 0.00029 * (var_chaste_interface__cell__V - var_reversal_potentials__E_Na); // nanoA_per_nanoF
        const double var_INaCa__i_NaCa = (200.0 * ((exp((var_chaste_interface__cell__V * 33769.869524999995) * 3.8797490106562429e-07) * pow(var_chaste_interface__Na__Na_i, 3.0) * 2.0) - (exp((var_chaste_interface__cell__V *  -62715.471975) * 3.8797490106562429e-07) * var_chaste_interface__Ca__Ca_i * 6860000.0))) / ((1.0 + (0.10000000000000001 * exp((var_chaste_interface__cell__V *  -62715.471975) * 3.8797490106562429e-07))) * 11539055.9375); // nanoA_per_nanoF
        const double var_ICab__i_b_Ca = 0.00047360000000000002 * (var_chaste_interface__cell__V - (13.356880329847824 * log(2.0 / var_chaste_interface__Ca__Ca_i))); // nanoA_per_nanoF
        const double var_IpK__i_p_K = (0.0097300000000000008 * (var_chaste_interface__cell__V - var_reversal_potentials__E_K)) / (1.0 + exp((25.0 - var_chaste_interface__cell__V) * 0.16722408026755853)); // nanoA_per_nanoF
        const double var_IpCa__i_p_Ca = (0.061899999999999997 * var_chaste_interface__Ca__Ca_i) / (var_chaste_interface__Ca__Ca_i + 0.00050000000000000001); // nanoA_per_nanoF
        const double var_chaste_interface__cell__i_Stim = 0.0;
        const double var_cell__i_tot = var_IK1__i_K1 + var_Ito__i_to + var_IKr__i_Kr + var_IKs__i_Ks + var_ICaL__i_CaL + var_INaK__i_NaK + var_INa__i_Na + var_INab__i_b_Na + var_INaCa__i_NaCa + var_ICab__i_b_Ca + var_IpK__i_p_K + var_IpCa__i_p_Ca + (var_chaste_interface__cell__i_Stim / HeartConfig::Instance()->GetCapacitance()); // nanoA_per_nanoF
        const double var_chaste_interface__i_ionic = (var_cell__i_tot) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamicfink_noble_giles_model_2008FromCellMLBackwardEuler::ComputeResidual(double var_chaste_interface__Environment__time, const double rCurrentGuess[17], double rResidual[17])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__iKs_Xs_gate__Xs = rY[11];
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = rY[12];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__ito_r_gate__r = rY[13];
        // Units: dimensionless; Initial value: 2.11e-8
        double var_chaste_interface__iNa_m_gate__m = rY[14];
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = rY[15];
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = rY[16];
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = rY[17];
        // Units: dimensionless; Initial value: 5.06e-6
        double var_chaste_interface__iCaL_f_gate__f = rY[18];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = rY[19];
        // Units: dimensionless; Initial value: 0.9995
        
        //output_nonlinear_state_assignments
        double var_chaste_interface__Ca__Ca_SR = rCurrentGuess[0];
        double var_chaste_interface__Ca__Ca_i = rCurrentGuess[1];
        double var_chaste_interface__Ca__Ca_ss = rCurrentGuess[2];
        double var_chaste_interface__Irel__R_prime = rCurrentGuess[3];
        double var_chaste_interface__K__K_i = rCurrentGuess[4];
        double var_chaste_interface__Na__Na_i = rCurrentGuess[5];
        double var_chaste_interface__iCaL_fCass_gate__fCass = rCurrentGuess[6];
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr1 = rCurrentGuess[7];
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr2 = rCurrentGuess[8];
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr3 = rCurrentGuess[9];
        double var_chaste_interface__iKr_Markov_Sotalol_block__BIr5 = rCurrentGuess[10];
        double var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 = rCurrentGuess[11];
        double var_chaste_interface__iKr_Markov__Cr1 = rCurrentGuess[12];
        double var_chaste_interface__iKr_Markov__Cr2 = rCurrentGuess[13];
        double var_chaste_interface__iKr_Markov__Cr3 = rCurrentGuess[14];
        double var_chaste_interface__iKr_Markov__Ir5 = rCurrentGuess[15];
        double var_chaste_interface__iKr_Markov__Or4 = rCurrentGuess[16];
        
        //output_equations
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(5.4000000000000004 / var_chaste_interface__K__K_i); // millivolt
        const double var_iK1_rectification__temp = 1.0 + (0.0356 / (0.45000000000000001 * exp((-(var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K))) * 0.050000000000000003))); // dimensionless
        const double var_IK1__i_K1 = ((0.88380000000000003 * ((var_iK1_rectification__temp * var_iK1_rectification__temp) / ((0.0014613 / (0.00069999999999999999 * exp((-((var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K)) + 0.2848)) * 0.20833333333333334))) + (0.0356 / (2.7999999999999998 * exp((-(var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K))) * 0.0055555555555555558))) + (var_iK1_rectification__temp * var_iK1_rectification__temp * var_iK1_rectification__temp)))) + (0.11619999999999997 * (1.0 / (1.0 + (0.0014613 / (0.040000000000000001 * exp((-(var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K))) * 0.10989010989010989))))))) * (var_chaste_interface__cell__V - var_reversal_potentials__E_K) * 0.68210000000000059; // nanoA_per_nanoF
        const double var_Ito__i_to = 0.20000000000000001 * var_chaste_interface__ito_r_gate__r * var_chaste_interface__ito_s_gate__s * (var_chaste_interface__cell__V - var_reversal_potentials__E_K); // nanoA_per_nanoF
        const double var_IKr__i_Kr = var_chaste_interface__iKr_Markov__Or4 * (var_chaste_interface__cell__V - var_reversal_potentials__E_K) * 0.024000000000000021; // nanoA_per_nanoF
        const double var_IKs__i_Ks = 0.039199999999999999 * pow(var_chaste_interface__iKs_Xs_gate__Xs, 2.0) * (var_chaste_interface__cell__V - (26.713760659695648 * log(9.6000000000000014 / (var_chaste_interface__K__K_i + (0.029999999999999999 * var_chaste_interface__Na__Na_i))))); // nanoA_per_nanoF
        const double var_ICaL__i_CaL = (((var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f_gate__f * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * (var_chaste_interface__cell__V - 15.0) * 744753.68994972983) * 3.8797490106562429e-07) * ((0.25 * var_chaste_interface__Ca__Ca_ss * exp(((var_chaste_interface__cell__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07)) - 2.0)) / (exp(((var_chaste_interface__cell__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07) - 1.0); // nanoA_per_nanoF
        const double var_INaK__i_NaK = ((1.0943437499999999 * var_chaste_interface__Na__Na_i) / (var_chaste_interface__Na__Na_i + 40.0)) / (1.0 + (0.1245 * exp((var_chaste_interface__cell__V *  -9648.5341499999995) * 3.8797490106562429e-07)) + (0.035299999999999998 * exp(((-var_chaste_interface__cell__V) * 96485.341499999995) * 3.8797490106562429e-07))); // nanoA_per_nanoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(140.0 / var_chaste_interface__Na__Na_i); // millivolt
        const double var_INa__i_Na = 11.0 * pow(var_chaste_interface__iNa_m_gate__m, 3.0) * var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j * (var_chaste_interface__cell__V - var_reversal_potentials__E_Na); // nanoA_per_nanoF
        const double var_INab__i_b_Na = 0.00029 * (var_chaste_interface__cell__V - var_reversal_potentials__E_Na); // nanoA_per_nanoF
        const double var_INaCa__i_NaCa = (200.0 * ((exp((var_chaste_interface__cell__V * 33769.869524999995) * 3.8797490106562429e-07) * pow(var_chaste_interface__Na__Na_i, 3.0) * 2.0) - (exp((var_chaste_interface__cell__V *  -62715.471975) * 3.8797490106562429e-07) * var_chaste_interface__Ca__Ca_i * 6860000.0))) / ((1.0 + (0.10000000000000001 * exp((var_chaste_interface__cell__V *  -62715.471975) * 3.8797490106562429e-07))) * 11539055.9375); // nanoA_per_nanoF
        const double var_ICab__i_b_Ca = 0.00047360000000000002 * (var_chaste_interface__cell__V - (13.356880329847824 * log(2.0 / var_chaste_interface__Ca__Ca_i))); // nanoA_per_nanoF
        const double var_IpK__i_p_K = (0.0097300000000000008 * (var_chaste_interface__cell__V - var_reversal_potentials__E_K)) / (1.0 + exp((25.0 - var_chaste_interface__cell__V) * 0.16722408026755853)); // nanoA_per_nanoF
        const double var_IpCa__i_p_Ca = (0.061899999999999997 * var_chaste_interface__Ca__Ca_i) / (var_chaste_interface__Ca__Ca_i + 0.00050000000000000001); // nanoA_per_nanoF
        const double var_chaste_interface__cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time);
        const double var_iKr_Markov__beta_xr1 = 1.0 * exp(13.688000000000001 + (1.0 * (( -0.060299999999999999 * var_chaste_interface__cell__V) - 15.707000000000001))); // per_millisecond
        const double var_iKr_Markov__alpha_xr1 = 1.0 * exp(24.335000000000001 + (1.0 * ((0.0112 * var_chaste_interface__cell__V) - 25.914000000000001))); // per_millisecond
        const double var_iKr_Markov__beta_xr2 = 1.0 * exp(13.193 + (1.0 * ((0.0 * var_chaste_interface__cell__V) - 15.707000000000001))); // per_millisecond
        const double var_iKr_Markov__alpha_xr2 = 1.0 * exp(22.745999999999999 + (1.0 * ((0.0 * var_chaste_interface__cell__V) - 25.914000000000001))); // per_millisecond
        const double var_iKr_Markov__alpha_xr3 = 1.0 * exp(22.097999999999999 + (1.0 * ((0.036499999999999998 * var_chaste_interface__cell__V) - 25.914000000000001))); // per_millisecond
        const double var_iKr_Markov__beta_xr3 = 1.0 * exp(7.3129999999999997 + (1.0 * (( -0.039899999999999998 * var_chaste_interface__cell__V) - 15.707000000000001))); // per_millisecond
        const double var_iKr_Markov__alpha_xr4 = exp(30.015999999999998 + (1.0 * ((0.0223 * var_chaste_interface__cell__V) - 30.888000000000002))) * 1.0; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__BtoO = var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 * 0.00125; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__OtoB = var_chaste_interface__iKr_Markov__Or4 * 0.0; // per_millisecond
        const double var_iKr_Markov__beta_xr4 = 1.0 * exp(30.061 + (1.0 * (( -0.031199999999999999 * var_chaste_interface__cell__V) - 33.243000000000002))); // per_millisecond
        const double var_Irel__kcasr = 2.5 - (1.5 / (1.0 + pow(1.5 / var_chaste_interface__Ca__Ca_SR, 2.0))); // dimensionless
        const double var_Irel__k1 = 0.14999999999999999 / var_Irel__kcasr; // per_millimolar2_per_millisecond
        const double var_Irel__i_rel = 0.30599999999999999 * ((var_Irel__k1 * pow(var_chaste_interface__Ca__Ca_ss, 2.0) * var_chaste_interface__Irel__R_prime) / (0.059999999999999998 + (var_Irel__k1 * pow(var_chaste_interface__Ca__Ca_ss, 2.0)))) * (var_chaste_interface__Ca__Ca_SR - var_chaste_interface__Ca__Ca_ss); // millimolar_per_millisecond
        const double var_Ileak_Iup_Ixfer__i_up = 0.0063749999999999996 / (1.0 + (6.2499999999999997e-08 / pow(var_chaste_interface__Ca__Ca_i, 2.0))); // millimolar_per_millisecond
        const double var_Ileak_Iup_Ixfer__i_leak = 0.00036000000000000002 * (var_chaste_interface__Ca__Ca_SR - var_chaste_interface__Ca__Ca_i); // millimolar_per_millisecond
        const double var_Ileak_Iup_Ixfer__i_xfer = 0.0038 * (var_chaste_interface__Ca__Ca_ss - var_chaste_interface__Ca__Ca_i); // millimolar_per_millisecond
        const double d_dt_chaste_interface__iKr_Markov__Cr1 = (var_iKr_Markov__beta_xr1 * var_chaste_interface__iKr_Markov__Cr2) - (var_iKr_Markov__alpha_xr1 * var_chaste_interface__iKr_Markov__Cr1); // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov__Cr2 = ((var_iKr_Markov__alpha_xr1 * var_chaste_interface__iKr_Markov__Cr1) + (var_iKr_Markov__beta_xr2 * var_chaste_interface__iKr_Markov__Cr3)) - ((var_iKr_Markov__alpha_xr2 + var_iKr_Markov__beta_xr1) * var_chaste_interface__iKr_Markov__Cr2); // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov__Cr3 = ((var_iKr_Markov__alpha_xr2 * var_chaste_interface__iKr_Markov__Cr2) + (var_iKr_Markov__beta_xr3 * var_chaste_interface__iKr_Markov__Or4)) - ((var_iKr_Markov__alpha_xr3 + var_iKr_Markov__beta_xr2) * var_chaste_interface__iKr_Markov__Cr3); // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov__Or4 = ((((var_iKr_Markov__alpha_xr3 * var_chaste_interface__iKr_Markov__Cr3) + (var_iKr_Markov__beta_xr4 * var_chaste_interface__iKr_Markov__Ir5)) - ((var_iKr_Markov__alpha_xr4 + var_iKr_Markov__beta_xr3) * var_chaste_interface__iKr_Markov__Or4)) - var_iKr_Markov_Sotalol_block__OtoB) + var_iKr_Markov_Sotalol_block__BtoO; // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov__Ir5 = (var_iKr_Markov__alpha_xr4 * var_chaste_interface__iKr_Markov__Or4) - (var_iKr_Markov__beta_xr4 * var_chaste_interface__iKr_Markov__Ir5); // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr1 = (var_iKr_Markov__beta_xr1 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr2) - (var_iKr_Markov__alpha_xr1 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr1); // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr2 = ((var_iKr_Markov__alpha_xr1 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr1) + (var_iKr_Markov__beta_xr2 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr3)) - ((var_iKr_Markov__alpha_xr2 + var_iKr_Markov__beta_xr1) * var_chaste_interface__iKr_Markov_Sotalol_block__BCr2); // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr3 = ((var_iKr_Markov__alpha_xr2 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr2) + (var_iKr_Markov__beta_xr3 * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4)) - ((var_iKr_Markov__alpha_xr3 + var_iKr_Markov__beta_xr2) * var_chaste_interface__iKr_Markov_Sotalol_block__BCr3); // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov_Sotalol_block__BOr4 = ((((var_iKr_Markov__alpha_xr3 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr3) + (var_iKr_Markov__beta_xr4 * var_chaste_interface__iKr_Markov_Sotalol_block__BIr5)) - ((var_iKr_Markov__alpha_xr4 + var_iKr_Markov__beta_xr3) * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4)) + var_iKr_Markov_Sotalol_block__OtoB) - var_iKr_Markov_Sotalol_block__BtoO; // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov_Sotalol_block__BIr5 = (var_iKr_Markov__alpha_xr4 * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4) - (var_iKr_Markov__beta_xr4 * var_chaste_interface__iKr_Markov_Sotalol_block__BIr5); // per_millisecond
        const double d_dt_chaste_interface__iCaL_fCass_gate__fCass = (((0.40000000000000002 / (1.0 + pow(var_chaste_interface__Ca__Ca_ss * 20.0, 2.0))) + 0.59999999999999998) - var_chaste_interface__iCaL_fCass_gate__fCass) / ((80.0 / (1.0 + pow(var_chaste_interface__Ca__Ca_ss * 20.0, 2.0))) + 2.0); // per_millisecond
        const double d_dt_chaste_interface__Ca__Ca_i = (1.0 / (1.0 + (0.00020000000000000001 / pow(var_chaste_interface__Ca__Ca_i + 0.001, 2.0)))) * (((((var_Ileak_Iup_Ixfer__i_leak - var_Ileak_Iup_Ixfer__i_up) * 0.0010939999999999999) * 60.960741282614002) + var_Ileak_Iup_Ixfer__i_xfer) - ((((var_ICab__i_b_Ca + var_IpCa__i_p_Ca) - (2.0 * var_INaCa__i_NaCa)) * 0.115) * 0.00031590674984870111)); // millimolar_per_millisecond
        const double d_dt_chaste_interface__Ca__Ca_SR = (1.0 / (1.0 + (3.0 / pow(var_chaste_interface__Ca__Ca_SR + 0.29999999999999999, 2.0)))) * (var_Ileak_Iup_Ixfer__i_up - (var_Irel__i_rel + var_Ileak_Iup_Ixfer__i_leak)); // millimolar_per_millisecond
        const double d_dt_chaste_interface__Ca__Ca_ss = (1.0 / (1.0 + (0.0001 / pow(var_chaste_interface__Ca__Ca_ss + 0.00025000000000000001, 2.0)))) * (((((-var_ICaL__i_CaL) * 0.115) * 0.094772024954610345) + ((var_Irel__i_rel * 0.0010939999999999999) * 18288.2223847842)) - ((var_Ileak_Iup_Ixfer__i_xfer * 0.016403999999999998) * 18288.2223847842)); // millimolar_per_millisecond
        const double d_dt_chaste_interface__Irel__R_prime = ((-(0.044999999999999998 * var_Irel__kcasr)) * var_chaste_interface__Ca__Ca_ss * var_chaste_interface__Irel__R_prime) + (0.0050000000000000001 * (1.0 - var_chaste_interface__Irel__R_prime)); // per_millisecond
        const double d_dt_chaste_interface__Na__Na_i = ((-(var_INa__i_Na + var_INab__i_b_Na + (3.0 * var_INaK__i_NaK) + (3.0 * var_INaCa__i_NaCa))) * 0.115) * 0.00063181349969740222; // millimolar_per_millisecond
        const double d_dt_chaste_interface__K__K_i = ((-((var_IK1__i_K1 + var_Ito__i_to + var_IKr__i_Kr + var_IKs__i_Ks + var_IpK__i_p_K + (var_chaste_interface__cell__i_Stim / HeartConfig::Instance()->GetCapacitance())) - (2.0 * var_INaK__i_NaK))) * 0.00063181349969740222) * 0.115; // millimolar_per_millisecond
        
        rResidual[12] = rCurrentGuess[12] - rY[1] - mDt*d_dt_chaste_interface__iKr_Markov__Cr1;
        rResidual[13] = rCurrentGuess[13] - rY[2] - mDt*d_dt_chaste_interface__iKr_Markov__Cr2;
        rResidual[14] = rCurrentGuess[14] - rY[3] - mDt*d_dt_chaste_interface__iKr_Markov__Cr3;
        rResidual[16] = rCurrentGuess[16] - rY[4] - mDt*d_dt_chaste_interface__iKr_Markov__Or4;
        rResidual[15] = rCurrentGuess[15] - rY[5] - mDt*d_dt_chaste_interface__iKr_Markov__Ir5;
        rResidual[7] = rCurrentGuess[7] - rY[6] - mDt*d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr1;
        rResidual[8] = rCurrentGuess[8] - rY[7] - mDt*d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr2;
        rResidual[9] = rCurrentGuess[9] - rY[8] - mDt*d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr3;
        rResidual[11] = rCurrentGuess[11] - rY[9] - mDt*d_dt_chaste_interface__iKr_Markov_Sotalol_block__BOr4;
        rResidual[10] = rCurrentGuess[10] - rY[10] - mDt*d_dt_chaste_interface__iKr_Markov_Sotalol_block__BIr5;
        rResidual[6] = rCurrentGuess[6] - rY[20] - mDt*d_dt_chaste_interface__iCaL_fCass_gate__fCass;
        rResidual[1] = rCurrentGuess[1] - rY[21] - mDt*d_dt_chaste_interface__Ca__Ca_i;
        rResidual[0] = rCurrentGuess[0] - rY[22] - mDt*d_dt_chaste_interface__Ca__Ca_SR;
        rResidual[2] = rCurrentGuess[2] - rY[23] - mDt*d_dt_chaste_interface__Ca__Ca_ss;
        rResidual[3] = rCurrentGuess[3] - rY[24] - mDt*d_dt_chaste_interface__Irel__R_prime;
        rResidual[5] = rCurrentGuess[5] - rY[25] - mDt*d_dt_chaste_interface__Na__Na_i;
        rResidual[4] = rCurrentGuess[4] - rY[26] - mDt*d_dt_chaste_interface__K__K_i;
    }
    
    void Dynamicfink_noble_giles_model_2008FromCellMLBackwardEuler::ComputeJacobian(double var_chaste_interface__Environment__time, const double rCurrentGuess[17], double rJacobian[17][17])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__iKs_Xs_gate__Xs = rY[11];
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = rY[12];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__ito_r_gate__r = rY[13];
        // Units: dimensionless; Initial value: 2.11e-8
        double var_chaste_interface__iNa_m_gate__m = rY[14];
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = rY[15];
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = rY[16];
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = rY[17];
        // Units: dimensionless; Initial value: 5.06e-6
        double var_chaste_interface__iCaL_f_gate__f = rY[18];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = rY[19];
        // Units: dimensionless; Initial value: 0.9995
        
        double var_chaste_interface__Ca__Ca_SR = rCurrentGuess[0];
        double var_chaste_interface__Ca__Ca_i = rCurrentGuess[1];
        double var_chaste_interface__Ca__Ca_ss = rCurrentGuess[2];
        double var_chaste_interface__Irel__R_prime = rCurrentGuess[3];
        double var_chaste_interface__K__K_i = rCurrentGuess[4];
        double var_chaste_interface__Na__Na_i = rCurrentGuess[5];
        double var_chaste_interface__iCaL_fCass_gate__fCass = rCurrentGuess[6];
        double var_chaste_interface__iKr_Markov__Or4 = rCurrentGuess[16];
        
        const double var_chaste_interface__Environment__dt = mDt;

        const double var_t8 = 1.0 / var_chaste_interface__K__K_i; // dimensionless
        const double var_t10 = log(5.4000000000000004 * var_t8); // dimensionless
        const double var_t12 = 28.444812350443925 * var_t10; // dimensionless
        const double var_t13 = (-var_chaste_interface__cell__V) + var_t12; // dimensionless
        const double var_t15 = 1.0 / exp(0.050000000000000003 * var_t13); // dimensionless
        const double var_t18 = 1.0 + (0.079111111103200002 * var_t15); // dimensionless
        const double var_t26 = 0.0014613 / exp((( -0.20833333330000001 * var_chaste_interface__cell__V) + (0.20833333330000001 * var_t12)) - 0.0593333333096); // dimensionless
        const double var_t30 = 0.0356 / exp(0.0055555555555555558 * var_t13); // dimensionless
        const double var_t32 = pow(var_t18, 2.0); // dimensionless
        const double var_t34 = ((1428.5714290000001 * var_t26) + (0.35714285709999999 * var_t30)) + (var_t32 * var_t18); // dimensionless
        const double var_t35 = 1.0 / var_t34; // dimensionless
        const double var_t38 = (((0.88380000000000003 * var_t18) * var_t35) * 0.0356) * var_t15; // dimensionless
        const double var_t40 = 0.88380000000000003 * var_t32; // dimensionless
        const double var_t42 = 1.0 / pow(var_t34, 2.0); // dimensionless
        const double var_t45 = var_t32 * 0.0356; // dimensionless
        const double var_t57 = 0.0014613 / exp(( -0.1098901099 * var_chaste_interface__cell__V) + (0.1098901099 * var_t12)); // dimensionless
        const double var_t59 = 1.0 + (25.0 * var_t57); // dimensionless
        const double var_t63 = (0.11619999999999997 / pow(var_t59, 2.0)) * var_t57; // dimensionless
        const double var_t70 = var_chaste_interface__cell__V - (26.713760659695648 * var_t10); // dimensionless
        const double var_t79 = 1.5850571642688489 * ((var_t40 * var_t35) + (0.11619999999999997 / var_t59)); // dimensionless
        const double var_t81 = 0.20000000000000001 * var_chaste_interface__ito_r_gate__r; // dimensionless
        const double var_t82 = var_t81 * var_chaste_interface__ito_s_gate__s; // dimensionless
        const double var_t85 = 0.055770960185386853 * var_chaste_interface__iKr_Markov__Or4; // dimensionless
        const double var_t88 = 0.039199999999999999 * pow(var_chaste_interface__iKs_Xs_gate__Xs, 2.0); // dimensionless
        const double var_t89 = 2.0000000000000002e-05 * var_chaste_interface__iCaL_d_gate__d; // dimensionless
        const double var_t90 = var_chaste_interface__iCaL_f_gate__f * var_chaste_interface__iCaL_f2_gate__f2; // dimensionless
        const double var_t99 = var_chaste_interface__cell__V - 15.0; // dimensionless
        const double var_t104 = exp(((2.0 * var_t99) * 96485.341499999995) * 3.8797490106562429e-07); // dimensionless
        const double var_t107 = ((0.25 * var_chaste_interface__Ca__Ca_ss) * var_t104) - 2.0; // dimensionless
        const double var_t109 = var_t104 - 1.0; // dimensionless
        const double var_t110 = 1.0 / var_t109; // dimensionless
        const double var_t114 = var_t89 * var_chaste_interface__iCaL_f_gate__f; // dimensionless
        const double var_t115 = var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass; // dimensionless
        const double var_t126 = var_t104 * var_t110; // dimensionless
        const double var_t143 = var_chaste_interface__Na__Na_i + 40.0; // dimensionless
        const double var_t144 = 1.0 / var_t143; // dimensionless
        const double var_t147 = (var_chaste_interface__cell__V * 96485.341499999995) * 3.8797490106562429e-07; // dimensionless
        const double var_t149 = exp( -0.10000000000000001 * var_t147); // dimensionless
        const double var_t151 = exp(-var_t147); // dimensionless
        const double var_t153 = (1.0 + (0.1245 * var_t149)) + (0.035299999999999998 * var_t151); // dimensionless
        const double var_t167 = pow(var_chaste_interface__iNa_m_gate__m, 2.0); // dimensionless
        const double var_t171 = ((11.0 * var_t167) * var_chaste_interface__iNa_m_gate__m) * (var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j); // dimensionless
        const double var_t177 = exp((0.34999999999999998 * var_chaste_interface__cell__V) * 0.037433890822745473); // dimensionless
        const double var_t179 = pow(var_chaste_interface__Na__Na_i, 2.0); // dimensionless
        const double var_t180 = var_t179 * var_chaste_interface__Na__Na_i; // dimensionless
        const double var_t189 = exp(( -0.65000000000000002 * var_chaste_interface__cell__V) * 0.037433890822745473); // dimensionless
        const double var_t194 = ((var_t189 * 2744000.0) * var_chaste_interface__Ca__Ca_i) * 2.5; // dimensionless
        const double var_t206 = 1.0 + (0.10000000000000001 * var_t189); // dimensionless
        const double var_t207 = 1.0 / var_t206; // dimensionless
        const double var_t208 = 8.666220229942447e-08 * var_t207; // dimensionless
        const double var_t213 = 200.0 * (((var_t177 * var_t180) * 2.0) - var_t194); // dimensionless
        const double var_t225 = exp(4.1806020080000001 - (0.16722408029999999 * var_chaste_interface__cell__V)); // dimensionless
        const double var_t226 = 1.0 + var_t225; // dimensionless
        const double var_t227 = 1.0 / var_t226; // dimensionless
        const double var_t244 = 1.0 / (var_chaste_interface__K__K_i + (0.029999999999999999 * var_chaste_interface__Na__Na_i)); // dimensionless
        const double var_t256 = 1.0 / var_chaste_interface__Na__Na_i; // dimensionless
        const double var_t284 = 200.0 * var_t189; // dimensionless
        const double var_t287 = 0.29585798816568049 * var_t207; // dimensionless
        const double var_t291 = 1.0 / var_chaste_interface__Ca__Ca_i; // dimensionless
        const double var_t295 = var_chaste_interface__Ca__Ca_i + 0.00050000000000000001; // dimensionless
        const double var_t296 = 1.0 / var_t295; // dimensionless
        const double var_t298 = 0.061899999999999997 * var_chaste_interface__Ca__Ca_i; // dimensionless
        const double var_t308 = var_t88 * 8314.4719999999998; // dimensionless
        const double var_t313 = 1.0 / var_t153; // dimensionless
        const double var_t315 = (1.0943437499999999 * var_t144) * var_t313; // dimensionless
        const double var_t320 = ((1.0943437499999999 * var_chaste_interface__Na__Na_i) / pow(var_t143, 2.0)) * var_t313; // dimensionless
        const double var_t335 = 28.444812350443925 * var_t8; // dimensionless
        const double var_t339 = 1.0364268649036186e-05 * var_t8; // dimensionless
        const double var_t340 = 2577486.3199999998 * var_t339; // dimensionless
        const double var_t377 = exp(13.688000000000001 + (1.0 * (( -0.060299999999999999 * var_chaste_interface__cell__V) - 15.707000000000001))); // dimensionless
        const double var_t384 = exp(24.335000000000001 + (1.0 * ((0.0112 * var_chaste_interface__cell__V) - 25.914000000000001))); // dimensionless
        const double var_t390 = 1.0 * var_t384; // dimensionless
        const double var_t391 = 1.0 * var_t377; // dimensionless
        const double var_t396 =  -0.042087689162480936 - var_t391; // dimensionless
        const double var_t405 = exp(7.3129999999999997 + (1.0 * (( -0.039899999999999998 * var_chaste_interface__cell__V) - 15.707000000000001))); // dimensionless
        const double var_t412 = exp(22.097999999999999 + (1.0 * ((0.036499999999999998 * var_chaste_interface__cell__V) - 25.914000000000001))); // dimensionless
        const double var_t416 = 1.0 * var_t412; // dimensionless
        const double var_t417 = (-var_t416) - 0.080943815563846916; // dimensionless
        const double var_t418 = 1.0 * var_t405; // dimensionless
        const double var_t423 = exp(30.061 + (1.0 * (( -0.031199999999999999 * var_chaste_interface__cell__V) - 33.243000000000002))); // dimensionless
        const double var_t433 = exp(30.015999999999998 + (1.0 * ((0.0223 * var_chaste_interface__cell__V) - 30.888000000000002))) * 0.50938071193859957; // dimensionless
        const double var_t440 = 1.9631681700000001 * var_t433; // dimensionless
        const double var_t443 = 1.0 * var_t423; // dimensionless
        const double var_t943 = pow(var_chaste_interface__Ca__Ca_ss, 2.0); // dimensionless
        const double var_t945 = 1.0 + (400.0 * var_t943); // dimensionless
        const double var_t946 = 1.0 / var_t945; // dimensionless
        const double var_t948 = (80.0 * var_t946) + 2.0; // dimensionless
        const double var_t949 = 1.0 / var_t948; // dimensionless
        const double var_t952 = (1.0 / pow(var_t945, 2.0)) * var_chaste_interface__Ca__Ca_ss; // dimensionless
        const double var_t964 = var_chaste_interface__Ca__Ca_i + 0.001; // dimensionless
        const double var_t965 = pow(var_t964, 2.0); // dimensionless
        const double var_t968 = 1.0 + (0.00020000000000000001 / var_t965); // dimensionless
        const double var_t969 = 1.0 / var_t968; // dimensionless
        const double var_t982 = 0.00036000000000000002 * (var_chaste_interface__Ca__Ca_SR - var_chaste_interface__Ca__Ca_i); // dimensionless
        const double var_t984 = pow(var_chaste_interface__Ca__Ca_i, 2.0); // dimensionless
        const double var_t987 = 1.0 + (6.2499999999999997e-08 / var_t984); // dimensionless
        const double var_t989 = 0.0063749999999999996 / var_t987; // dimensionless
        const double var_t994 = 0.0038 * (var_chaste_interface__Ca__Ca_ss - var_chaste_interface__Ca__Ca_i); // dimensionless
        const double var_t1025 =  -0.00036000000000000002 - ((((0.012749999999999999 / pow(var_t987, 2.0)) * 6.2499999999999997e-08) / var_t984) / var_chaste_interface__Ca__Ca_i); // dimensionless
        const double var_t1048 = var_chaste_interface__Ca__Ca_SR + 0.29999999999999999; // dimensionless
        const double var_t1049 = pow(var_t1048, 2.0); // dimensionless
        const double var_t1052 = 1.0 + (3.0 / var_t1049); // dimensionless
        const double var_t1053 = 1.0 / var_t1052; // dimensionless
        const double var_t1060 = pow(var_chaste_interface__Ca__Ca_SR, 2.0); // dimensionless
        const double var_t1063 = 1.0 + (2.25 / var_t1060); // dimensionless
        const double var_t1066 = 2.5 - (1.5 / var_t1063); // dimensionless
        const double var_t1067 = 1.0 / var_t1066; // dimensionless
        const double var_t1068 = 0.045899999999999996 * var_t1067; // dimensionless
        const double var_t1069 = var_t943 * var_chaste_interface__Irel__R_prime; // dimensionless
        const double var_t1070 = 0.14999999999999999 * var_t1067; // dimensionless
        const double var_t1072 = 0.059999999999999998 + (var_t1070 * var_t943); // dimensionless
        const double var_t1073 = 1.0 / var_t1072; // dimensionless
        const double var_t1074 = var_chaste_interface__Ca__Ca_SR - var_chaste_interface__Ca__Ca_ss; // dimensionless
        const double var_t1075 = var_t1073 * var_t1074; // dimensionless
        const double var_t1085 = pow(var_t1066, 2.0); // dimensionless
        const double var_t1086 = 1.0 / var_t1085; // dimensionless
        const double var_t1092 = 1.0 / pow(var_t1063, 2.0); // dimensionless
        const double var_t1095 = (1.0 / var_t1060) / var_chaste_interface__Ca__Ca_SR; // dimensionless
        const double var_t1096 = (var_t1092 * 2.25) * var_t1095; // dimensionless
        const double var_t1103 = (1.0 / var_t1085) / var_t1066; // dimensionless
        const double var_t1104 = pow(var_t943, 2.0); // dimensionless
        const double var_t1109 = 1.0 / pow(var_t1072, 2.0); // dimensionless
        const double var_t1110 = var_t1109 * var_t1074; // dimensionless
        const double var_t1115 = var_t1069 * var_t1073; // dimensionless
        const double var_t1116 = var_t1068 * var_t1115; // dimensionless
        const double var_t1120 = var_chaste_interface__Ca__Ca_ss * var_chaste_interface__Irel__R_prime; // dimensionless
        const double var_t1125 = var_t943 * var_chaste_interface__Ca__Ca_ss; // dimensionless
        const double var_t1134 = var_t1067 * var_t943; // dimensionless
        const double var_t1138 = var_chaste_interface__Ca__Ca_ss + 0.00025000000000000001; // dimensionless
        const double var_t1139 = pow(var_t1138, 2.0); // dimensionless
        const double var_t1142 = 1.0 + (0.0001 / var_t1139); // dimensionless
        const double var_t1143 = 1.0 / var_t1142; // dimensionless
        const double var_t1148 = ((0.037433890822745473 * var_t107) * var_t110) * 2103.145574250183; // dimensionless
        const double var_t1151 = 4.0 * var_t99; // dimensionless
        const double var_t1153 = var_t114 * (var_t115 * var_t1151); // dimensionless
        const double var_t1191 = (var_t1074 * 0.0010939999999999999) * 18288.2223847842; // dimensionless
        const double var_t1193 = 2.25 * var_t1095; // dimensionless
        const double var_t1195 = ((var_t1191 * 1.5) * var_t1092) * var_t1193; // dimensionless
        const double var_t1204 = 0.045899999999999996 * var_t1134; // dimensionless
        const double var_t1205 = var_chaste_interface__Irel__R_prime * var_t1073; // dimensionless
        const double var_t1208 = ((var_t1204 * var_t1205) * 0.0010939999999999999) * 18288.2223847842; // dimensionless
        const double var_t1215 = var_t1205 * var_t1191; // dimensionless
        const double var_t1253 = 0.044999999999999998 * var_t1066; // dimensionless
        
        rJacobian[0][0] = 1.0 - (var_chaste_interface__Environment__dt * ((((((2.0 / pow(var_t1052, 2.0)) * ((var_t989 - ((var_t1068 * var_t1069) * var_t1075)) - var_t982)) * 3.0) / var_t1049) / var_t1048) + (var_t1053 * ((((((((( -0.091799999999999993 * var_t1086) * var_t943) * var_chaste_interface__Irel__R_prime) * var_t1075) * 1.5) * var_t1096) + ((((((0.013769999999999999 * var_t1103) * var_t1104) * var_chaste_interface__Irel__R_prime) * var_t1110) * 1.5) * var_t1096)) - var_t1116) - 0.00036000000000000002))));
        rJacobian[0][1] = -(var_chaste_interface__Environment__dt * ((-var_t1053) * var_t1025));
        rJacobian[0][2] = -(var_chaste_interface__Environment__dt * (var_t1053 * ((((( -2.0 * var_t1068) * var_t1120) * var_t1075) + ((((0.013769999999999999 * var_t1086) * var_t1125) * var_chaste_interface__Irel__R_prime) * var_t1110)) + var_t1116)));
        rJacobian[0][3] = -(var_chaste_interface__Environment__dt * (((((-var_t1053) * 0.30599999999999999) * 0.14999999999999999) * var_t1134) * var_t1075));
        rJacobian[0][4] = 0.0;
        rJacobian[0][5] = 0.0;
        rJacobian[0][6] = 0.0;
        rJacobian[0][7] = 0.0;
        rJacobian[0][8] = 0.0;
        rJacobian[0][9] = 0.0;
        rJacobian[0][10] = 0.0;
        rJacobian[0][11] = 0.0;
        rJacobian[0][12] = 0.0;
        rJacobian[0][13] = 0.0;
        rJacobian[0][14] = 0.0;
        rJacobian[0][15] = 0.0;
        rJacobian[0][16] = 0.0;
        rJacobian[1][0] = -(var_chaste_interface__Environment__dt * (((var_t969 * 0.00036000000000000002) * 0.0010939999999999999) * 60.960741282614002));
        rJacobian[1][1] = 1.0 - (var_chaste_interface__Environment__dt * ((((((2.0 / pow(var_t968, 2.0)) * (((((var_t982 - var_t989) * 0.0010939999999999999) * 60.960741282614002) + var_t994) - (((0.5 * (((0.00047360000000000002 * (var_chaste_interface__cell__V - (13.356880329847824 * log(2.0 * var_t291)))) + (var_t298 * var_t296)) - ((2.0 * var_t213) * var_t208))) * 0.115) * 0.00063181349969740233))) * 0.00020000000000000001) / var_t965) / var_t964) + (var_t969 * ((((var_t1025 * 0.0010939999999999999) * 60.960741282614002) - 0.0038) - (((0.5 * ((((0.0063258185242159298 * var_t291) + (0.061899999999999997 * var_t296)) - (var_t298 / pow(var_t295, 2.0))) + (2.0 * ((((var_t284 * 2744000.0) * 2.5) * 2.9291824377205469e-07) * var_t287)))) * 0.115) * 0.00063181349969740233)))));
        rJacobian[1][2] = -(var_chaste_interface__Environment__dt * (var_t969 * 0.0038));
        rJacobian[1][3] = 0.0;
        rJacobian[1][4] = 0.0;
        rJacobian[1][5] = -(var_chaste_interface__Environment__dt * (((((((3.0 * var_t969) * 200.0) * var_t177) * var_t179) * 2.0) * var_t208) * 7.2658552465201267e-05));
        rJacobian[1][6] = 0.0;
        rJacobian[1][7] = 0.0;
        rJacobian[1][8] = 0.0;
        rJacobian[1][9] = 0.0;
        rJacobian[1][10] = 0.0;
        rJacobian[1][11] = 0.0;
        rJacobian[1][12] = 0.0;
        rJacobian[1][13] = 0.0;
        rJacobian[1][14] = 0.0;
        rJacobian[1][15] = 0.0;
        rJacobian[1][16] = 0.0;
        rJacobian[2][0] = -(var_chaste_interface__Environment__dt * (var_t1143 * (((((0.091799999999999993 * var_t1086) * var_t1115) * var_t1195) - (((((0.013769999999999999 * var_t1103) * var_t1104) * var_chaste_interface__Irel__R_prime) * var_t1109) * var_t1195)) + var_t1208)));
        rJacobian[2][1] = -(var_chaste_interface__Environment__dt * ((var_t1143 * 0.0038) * 300.0));
        rJacobian[2][2] = 1.0 - (var_chaste_interface__Environment__dt * ((((((2.0 / pow(var_t1142, 2.0)) * (((( -0.5 * var_t1153) * var_t1148) + (var_t1204 * var_t1215)) - (var_t994 * 300.0))) * 0.0001) / var_t1139) / var_t1138) + (var_t1143 * ((((((( -0.125 * var_t1153) * 0.037433890822745473) * (var_t126 * 2103.145574250183)) + (((0.091799999999999993 * var_t1067) * var_chaste_interface__Ca__Ca_ss) * var_t1215)) - (((((0.013769999999999999 * var_t1086) * var_t1125) * var_chaste_interface__Irel__R_prime) * var_t1109) * var_t1191)) - var_t1208) - 1.1399999999999999))));
        rJacobian[2][3] = -(var_chaste_interface__Environment__dt * (((((var_t1143 * 0.30599999999999999) * var_t1070) * var_t943) * var_t1073) * var_t1191));
        rJacobian[2][4] = 0.0;
        rJacobian[2][5] = 0.0;
        rJacobian[2][6] = -(var_chaste_interface__Environment__dt * (((( -0.5 * ((var_t1143 * 2.0000000000000002e-05) * var_chaste_interface__iCaL_d_gate__d)) * var_t90) * var_t1151) * var_t1148));
        rJacobian[2][7] = 0.0;
        rJacobian[2][8] = 0.0;
        rJacobian[2][9] = 0.0;
        rJacobian[2][10] = 0.0;
        rJacobian[2][11] = 0.0;
        rJacobian[2][12] = 0.0;
        rJacobian[2][13] = 0.0;
        rJacobian[2][14] = 0.0;
        rJacobian[2][15] = 0.0;
        rJacobian[2][16] = 0.0;
        rJacobian[3][0] = -(var_chaste_interface__Environment__dt * (((0.13500000000000001 * var_t1092) * var_t1193) * var_t1120));
        rJacobian[3][1] = 0.0;
        rJacobian[3][2] = -(var_chaste_interface__Environment__dt * ((-var_t1253) * var_chaste_interface__Irel__R_prime));
        rJacobian[3][3] = 1.0 - (var_chaste_interface__Environment__dt * (((-var_t1253) * var_chaste_interface__Ca__Ca_ss) - 0.0050000000000000001));
        rJacobian[3][4] = 0.0;
        rJacobian[3][5] = 0.0;
        rJacobian[3][6] = 0.0;
        rJacobian[3][7] = 0.0;
        rJacobian[3][8] = 0.0;
        rJacobian[3][9] = 0.0;
        rJacobian[3][10] = 0.0;
        rJacobian[3][11] = 0.0;
        rJacobian[3][12] = 0.0;
        rJacobian[3][13] = 0.0;
        rJacobian[3][14] = 0.0;
        rJacobian[3][15] = 0.0;
        rJacobian[3][16] = 0.0;
        rJacobian[4][0] = 0.0;
        rJacobian[4][1] = 0.0;
        rJacobian[4][2] = 0.0;
        rJacobian[4][3] = 0.0;
        rJacobian[4][4] = 1.0 - (var_chaste_interface__Environment__dt * ((((((((( -0.68209999998108262 * ((((0.22222222220000001 * var_t38) * var_t335) - ((var_t40 * var_t42) * (((((297.61904770000001 * var_t26) * 1.0648) * var_t340) + (((0.0019841269840000001 * var_t30) * 1.0648) * var_t340)) + ((((0.33333333329999998 * var_t45) * var_t15) * 1.0648) * var_t340)))) - ((2.7472527480000002 * var_t63) * var_t335))) * var_t70) - ((0.43033148290000001 * var_t79) * var_t340)) - (var_t82 * var_t340)) - ((0.43033148290000001 * var_t85) * var_t340)) - ((var_t308 * 0.0032129232812012176) * var_t244)) - ((25078.9418936 * var_t339) * var_t227)) * 60.960741282614002) * 1.1918908946391615e-06));
        rJacobian[4][5] = -(var_chaste_interface__Environment__dt * (((((-(((var_t308 * 0.0032129232812012176) * var_t244) * 0.029999999999999999)) + (2.0 * var_t315)) - (2.0 * var_t320)) * 60.960741282614002) * 1.1918908946391615e-06));
        rJacobian[4][6] = 0.0;
        rJacobian[4][7] = 0.0;
        rJacobian[4][8] = 0.0;
        rJacobian[4][9] = 0.0;
        rJacobian[4][10] = 0.0;
        rJacobian[4][11] = 0.0;
        rJacobian[4][12] = 0.0;
        rJacobian[4][13] = 0.0;
        rJacobian[4][14] = 0.0;
        rJacobian[4][15] = 0.0;
        rJacobian[4][16] = -(var_chaste_interface__Environment__dt * ((( -0.023999999999334384 * var_t70) * 60.960741282614002) * 1.1918908946391615e-06));
        rJacobian[5][0] = 0.0;
        rJacobian[5][1] = -(var_chaste_interface__Environment__dt * ((((((3.0 * var_t284) * 2744000.0) * 2.5) * 2.9291824377205469e-07) * var_t287) * 7.2658552465201267e-05));
        rJacobian[5][2] = 0.0;
        rJacobian[5][3] = 0.0;
        rJacobian[5][4] = 0.0;
        rJacobian[5][5] = 1.0 - (var_chaste_interface__Environment__dt * (((((((-(((var_t171 * 2577486.3199999998) * 1.0364268649036186e-05) * var_t256)) - (0.0077469905913117379 * var_t256)) - (3.0 * var_t315)) + (3.0 * var_t320)) - (9.0 * (((((200.0 * var_t177) * var_t179) * 2.0) * 2.9291824377205469e-07) * var_t287))) * 0.115) * 0.00063181349969740233));
        rJacobian[5][6] = 0.0;
        rJacobian[5][7] = 0.0;
        rJacobian[5][8] = 0.0;
        rJacobian[5][9] = 0.0;
        rJacobian[5][10] = 0.0;
        rJacobian[5][11] = 0.0;
        rJacobian[5][12] = 0.0;
        rJacobian[5][13] = 0.0;
        rJacobian[5][14] = 0.0;
        rJacobian[5][15] = 0.0;
        rJacobian[5][16] = 0.0;
        rJacobian[6][0] = 0.0;
        rJacobian[6][1] = 0.0;
        rJacobian[6][2] = -(var_chaste_interface__Environment__dt * ((( -320.0 * var_t952) * var_t949) + (((64000.0 * (((0.40000000000000002 * var_t946) + 0.59999999999999998) - var_chaste_interface__iCaL_fCass_gate__fCass)) / pow(var_t948, 2.0)) * var_t952)));
        rJacobian[6][3] = 0.0;
        rJacobian[6][4] = 0.0;
        rJacobian[6][5] = 0.0;
        rJacobian[6][6] = 1.0 - (var_chaste_interface__Environment__dt * (-var_t949));
        rJacobian[6][7] = 0.0;
        rJacobian[6][8] = 0.0;
        rJacobian[6][9] = 0.0;
        rJacobian[6][10] = 0.0;
        rJacobian[6][11] = 0.0;
        rJacobian[6][12] = 0.0;
        rJacobian[6][13] = 0.0;
        rJacobian[6][14] = 0.0;
        rJacobian[6][15] = 0.0;
        rJacobian[6][16] = 0.0;
        rJacobian[7][0] = 0.0;
        rJacobian[7][1] = 0.0;
        rJacobian[7][2] = 0.0;
        rJacobian[7][3] = 0.0;
        rJacobian[7][4] = 0.0;
        rJacobian[7][5] = 0.0;
        rJacobian[7][6] = 0.0;
        rJacobian[7][7] = 1.0 - (var_chaste_interface__Environment__dt * (-var_t390));
        rJacobian[7][8] = -(var_chaste_interface__Environment__dt * var_t391);
        rJacobian[7][9] = 0.0;
        rJacobian[7][10] = 0.0;
        rJacobian[7][11] = 0.0;
        rJacobian[7][12] = 0.0;
        rJacobian[7][13] = 0.0;
        rJacobian[7][14] = 0.0;
        rJacobian[7][15] = 0.0;
        rJacobian[7][16] = 0.0;
        rJacobian[8][0] = 0.0;
        rJacobian[8][1] = 0.0;
        rJacobian[8][2] = 0.0;
        rJacobian[8][3] = 0.0;
        rJacobian[8][4] = 0.0;
        rJacobian[8][5] = 0.0;
        rJacobian[8][6] = 0.0;
        rJacobian[8][7] = -(var_chaste_interface__Environment__dt * var_t390);
        rJacobian[8][8] = 1.0 - (var_chaste_interface__Environment__dt * var_t396);
        rJacobian[8][9] = -(var_chaste_interface__Environment__dt * 0.080943815563846916);
        rJacobian[8][10] = 0.0;
        rJacobian[8][11] = 0.0;
        rJacobian[8][12] = 0.0;
        rJacobian[8][13] = 0.0;
        rJacobian[8][14] = 0.0;
        rJacobian[8][15] = 0.0;
        rJacobian[8][16] = 0.0;
        rJacobian[9][0] = 0.0;
        rJacobian[9][1] = 0.0;
        rJacobian[9][2] = 0.0;
        rJacobian[9][3] = 0.0;
        rJacobian[9][4] = 0.0;
        rJacobian[9][5] = 0.0;
        rJacobian[9][6] = 0.0;
        rJacobian[9][7] = 0.0;
        rJacobian[9][8] = -(var_chaste_interface__Environment__dt * 0.042087689162480936);
        rJacobian[9][9] = 1.0 - (var_chaste_interface__Environment__dt * var_t417);
        rJacobian[9][10] = 0.0;
        rJacobian[9][11] = -(var_chaste_interface__Environment__dt * var_t418);
        rJacobian[9][12] = 0.0;
        rJacobian[9][13] = 0.0;
        rJacobian[9][14] = 0.0;
        rJacobian[9][15] = 0.0;
        rJacobian[9][16] = 0.0;
        rJacobian[10][0] = 0.0;
        rJacobian[10][1] = 0.0;
        rJacobian[10][2] = 0.0;
        rJacobian[10][3] = 0.0;
        rJacobian[10][4] = 0.0;
        rJacobian[10][5] = 0.0;
        rJacobian[10][6] = 0.0;
        rJacobian[10][7] = 0.0;
        rJacobian[10][8] = 0.0;
        rJacobian[10][9] = 0.0;
        rJacobian[10][10] = 1.0 - (var_chaste_interface__Environment__dt * (-var_t443));
        rJacobian[10][11] = -(var_chaste_interface__Environment__dt * var_t440);
        rJacobian[10][12] = 0.0;
        rJacobian[10][13] = 0.0;
        rJacobian[10][14] = 0.0;
        rJacobian[10][15] = 0.0;
        rJacobian[10][16] = 0.0;
        rJacobian[11][0] = 0.0;
        rJacobian[11][1] = 0.0;
        rJacobian[11][2] = 0.0;
        rJacobian[11][3] = 0.0;
        rJacobian[11][4] = 0.0;
        rJacobian[11][5] = 0.0;
        rJacobian[11][6] = 0.0;
        rJacobian[11][7] = 0.0;
        rJacobian[11][8] = 0.0;
        rJacobian[11][9] = -(var_chaste_interface__Environment__dt * var_t416);
        rJacobian[11][10] = -(var_chaste_interface__Environment__dt * var_t443);
        rJacobian[11][11] = 1.0 - (var_chaste_interface__Environment__dt * (((-var_t440) - var_t418) - 0.00125));
        rJacobian[11][12] = 0.0;
        rJacobian[11][13] = 0.0;
        rJacobian[11][14] = 0.0;
        rJacobian[11][15] = 0.0;
        rJacobian[11][16] = -(var_chaste_interface__Environment__dt * 0.0);
        rJacobian[12][0] = 0.0;
        rJacobian[12][1] = 0.0;
        rJacobian[12][2] = 0.0;
        rJacobian[12][3] = 0.0;
        rJacobian[12][4] = 0.0;
        rJacobian[12][5] = 0.0;
        rJacobian[12][6] = 0.0;
        rJacobian[12][7] = 0.0;
        rJacobian[12][8] = 0.0;
        rJacobian[12][9] = 0.0;
        rJacobian[12][10] = 0.0;
        rJacobian[12][11] = 0.0;
        rJacobian[12][12] = 1.0 - (var_chaste_interface__Environment__dt * (-var_t390));
        rJacobian[12][13] = -(var_chaste_interface__Environment__dt * var_t391);
        rJacobian[12][14] = 0.0;
        rJacobian[12][15] = 0.0;
        rJacobian[12][16] = 0.0;
        rJacobian[13][0] = 0.0;
        rJacobian[13][1] = 0.0;
        rJacobian[13][2] = 0.0;
        rJacobian[13][3] = 0.0;
        rJacobian[13][4] = 0.0;
        rJacobian[13][5] = 0.0;
        rJacobian[13][6] = 0.0;
        rJacobian[13][7] = 0.0;
        rJacobian[13][8] = 0.0;
        rJacobian[13][9] = 0.0;
        rJacobian[13][10] = 0.0;
        rJacobian[13][11] = 0.0;
        rJacobian[13][12] = -(var_chaste_interface__Environment__dt * var_t390);
        rJacobian[13][13] = 1.0 - (var_chaste_interface__Environment__dt * var_t396);
        rJacobian[13][14] = -(var_chaste_interface__Environment__dt * 0.080943815563846916);
        rJacobian[13][15] = 0.0;
        rJacobian[13][16] = 0.0;
        rJacobian[14][0] = 0.0;
        rJacobian[14][1] = 0.0;
        rJacobian[14][2] = 0.0;
        rJacobian[14][3] = 0.0;
        rJacobian[14][4] = 0.0;
        rJacobian[14][5] = 0.0;
        rJacobian[14][6] = 0.0;
        rJacobian[14][7] = 0.0;
        rJacobian[14][8] = 0.0;
        rJacobian[14][9] = 0.0;
        rJacobian[14][10] = 0.0;
        rJacobian[14][11] = 0.0;
        rJacobian[14][12] = 0.0;
        rJacobian[14][13] = -(var_chaste_interface__Environment__dt * 0.042087689162480936);
        rJacobian[14][14] = 1.0 - (var_chaste_interface__Environment__dt * var_t417);
        rJacobian[14][15] = 0.0;
        rJacobian[14][16] = -(var_chaste_interface__Environment__dt * var_t418);
        rJacobian[15][0] = 0.0;
        rJacobian[15][1] = 0.0;
        rJacobian[15][2] = 0.0;
        rJacobian[15][3] = 0.0;
        rJacobian[15][4] = 0.0;
        rJacobian[15][5] = 0.0;
        rJacobian[15][6] = 0.0;
        rJacobian[15][7] = 0.0;
        rJacobian[15][8] = 0.0;
        rJacobian[15][9] = 0.0;
        rJacobian[15][10] = 0.0;
        rJacobian[15][11] = 0.0;
        rJacobian[15][12] = 0.0;
        rJacobian[15][13] = 0.0;
        rJacobian[15][14] = 0.0;
        rJacobian[15][15] = 1.0 - (var_chaste_interface__Environment__dt * (-var_t443));
        rJacobian[15][16] = -(var_chaste_interface__Environment__dt * var_t440);
        rJacobian[16][0] = 0.0;
        rJacobian[16][1] = 0.0;
        rJacobian[16][2] = 0.0;
        rJacobian[16][3] = 0.0;
        rJacobian[16][4] = 0.0;
        rJacobian[16][5] = 0.0;
        rJacobian[16][6] = 0.0;
        rJacobian[16][7] = 0.0;
        rJacobian[16][8] = 0.0;
        rJacobian[16][9] = 0.0;
        rJacobian[16][10] = 0.0;
        rJacobian[16][11] = -(var_chaste_interface__Environment__dt * 0.00125);
        rJacobian[16][12] = 0.0;
        rJacobian[16][13] = 0.0;
        rJacobian[16][14] = -(var_chaste_interface__Environment__dt * var_t416);
        rJacobian[16][15] = -(var_chaste_interface__Environment__dt * var_t443);
        rJacobian[16][16] = 1.0 - (var_chaste_interface__Environment__dt * (((-var_t440) - var_t418) - 0.0));
    }
    
    void Dynamicfink_noble_giles_model_2008FromCellMLBackwardEuler::UpdateTransmembranePotential(double var_chaste_interface__Environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__iKr_Markov__Or4 = rY[4];
        // Units: dimensionless; Initial value: 0.014
        double var_chaste_interface__iKs_Xs_gate__Xs = rY[11];
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = rY[12];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__ito_r_gate__r = rY[13];
        // Units: dimensionless; Initial value: 2.11e-8
        double var_chaste_interface__iNa_m_gate__m = rY[14];
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = rY[15];
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = rY[16];
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = rY[17];
        // Units: dimensionless; Initial value: 5.06e-6
        double var_chaste_interface__iCaL_f_gate__f = rY[18];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = rY[19];
        // Units: dimensionless; Initial value: 0.9995
        double var_chaste_interface__iCaL_fCass_gate__fCass = rY[20];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__Ca__Ca_i = rY[21];
        // Units: millimolar; Initial value: 1.092e-4
        double var_chaste_interface__Ca__Ca_ss = rY[23];
        // Units: millimolar; Initial value: 1.893e-4
        double var_chaste_interface__Na__Na_i = rY[25];
        // Units: millimolar; Initial value: 7.940167
        double var_chaste_interface__K__K_i = rY[26];
        // Units: millimolar; Initial value: 141.0167
        
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(5.4000000000000004 / var_chaste_interface__K__K_i); // millivolt
        const double var_iK1_rectification__temp = 1.0 + (0.0356 / (0.45000000000000001 * exp((-(var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K))) * 0.050000000000000003))); // dimensionless
        const double var_IK1__i_K1 = ((0.88380000000000003 * ((var_iK1_rectification__temp * var_iK1_rectification__temp) / ((0.0014613 / (0.00069999999999999999 * exp((-((var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K)) + 0.2848)) * 0.20833333333333334))) + (0.0356 / (2.7999999999999998 * exp((-(var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K))) * 0.0055555555555555558))) + (var_iK1_rectification__temp * var_iK1_rectification__temp * var_iK1_rectification__temp)))) + (0.11619999999999997 * (1.0 / (1.0 + (0.0014613 / (0.040000000000000001 * exp((-(var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K))) * 0.10989010989010989))))))) * (var_chaste_interface__cell__V - var_reversal_potentials__E_K) * 0.68210000000000059; // nanoA_per_nanoF
        const double var_Ito__i_to = 0.20000000000000001 * var_chaste_interface__ito_r_gate__r * var_chaste_interface__ito_s_gate__s * (var_chaste_interface__cell__V - var_reversal_potentials__E_K); // nanoA_per_nanoF
        const double var_IKr__i_Kr = var_chaste_interface__iKr_Markov__Or4 * (var_chaste_interface__cell__V - var_reversal_potentials__E_K) * 0.024000000000000021; // nanoA_per_nanoF
        const double var_IKs__i_Ks = 0.039199999999999999 * pow(var_chaste_interface__iKs_Xs_gate__Xs, 2.0) * (var_chaste_interface__cell__V - (26.713760659695648 * log(9.6000000000000014 / (var_chaste_interface__K__K_i + (0.029999999999999999 * var_chaste_interface__Na__Na_i))))); // nanoA_per_nanoF
        const double var_ICaL__i_CaL = (((var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f_gate__f * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * (var_chaste_interface__cell__V - 15.0) * 744753.68994972983) * 3.8797490106562429e-07) * ((0.25 * var_chaste_interface__Ca__Ca_ss * exp(((var_chaste_interface__cell__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07)) - 2.0)) / (exp(((var_chaste_interface__cell__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07) - 1.0); // nanoA_per_nanoF
        const double var_INaK__i_NaK = ((1.0943437499999999 * var_chaste_interface__Na__Na_i) / (var_chaste_interface__Na__Na_i + 40.0)) / (1.0 + (0.1245 * exp((var_chaste_interface__cell__V *  -9648.5341499999995) * 3.8797490106562429e-07)) + (0.035299999999999998 * exp(((-var_chaste_interface__cell__V) * 96485.341499999995) * 3.8797490106562429e-07))); // nanoA_per_nanoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(140.0 / var_chaste_interface__Na__Na_i); // millivolt
        const double var_INa__i_Na = 11.0 * pow(var_chaste_interface__iNa_m_gate__m, 3.0) * var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j * (var_chaste_interface__cell__V - var_reversal_potentials__E_Na); // nanoA_per_nanoF
        const double var_INab__i_b_Na = 0.00029 * (var_chaste_interface__cell__V - var_reversal_potentials__E_Na); // nanoA_per_nanoF
        const double var_INaCa__i_NaCa = (200.0 * ((exp((var_chaste_interface__cell__V * 33769.869524999995) * 3.8797490106562429e-07) * pow(var_chaste_interface__Na__Na_i, 3.0) * 2.0) - (exp((var_chaste_interface__cell__V *  -62715.471975) * 3.8797490106562429e-07) * var_chaste_interface__Ca__Ca_i * 6860000.0))) / ((1.0 + (0.10000000000000001 * exp((var_chaste_interface__cell__V *  -62715.471975) * 3.8797490106562429e-07))) * 11539055.9375); // nanoA_per_nanoF
        const double var_ICab__i_b_Ca = 0.00047360000000000002 * (var_chaste_interface__cell__V - (13.356880329847824 * log(2.0 / var_chaste_interface__Ca__Ca_i))); // nanoA_per_nanoF
        const double var_IpK__i_p_K = (0.0097300000000000008 * (var_chaste_interface__cell__V - var_reversal_potentials__E_K)) / (1.0 + exp((25.0 - var_chaste_interface__cell__V) * 0.16722408026755853)); // nanoA_per_nanoF
        const double var_IpCa__i_p_Ca = (0.061899999999999997 * var_chaste_interface__Ca__Ca_i) / (var_chaste_interface__Ca__Ca_i + 0.00050000000000000001); // nanoA_per_nanoF
        const double var_chaste_interface__cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time);
        const double var_cell__i_tot = var_IK1__i_K1 + var_Ito__i_to + var_IKr__i_Kr + var_IKs__i_Ks + var_ICaL__i_CaL + var_INaK__i_NaK + var_INa__i_Na + var_INab__i_b_Na + var_INaCa__i_NaCa + var_ICab__i_b_Ca + var_IpK__i_p_K + var_IpCa__i_p_Ca + (var_chaste_interface__cell__i_Stim / HeartConfig::Instance()->GetCapacitance()); // nanoA_per_nanoF
        const double d_dt_chaste_interface__cell__V = -var_cell__i_tot; // 'millivolt per millisecond'
        
        rY[0] += mDt*d_dt_chaste_interface__cell__V;
    }
    
    void Dynamicfink_noble_giles_model_2008FromCellMLBackwardEuler::ComputeOneStepExceptVoltage(double var_chaste_interface__Environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__iKs_Xs_gate__Xs = rY[11];
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = rY[12];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__ito_r_gate__r = rY[13];
        // Units: dimensionless; Initial value: 2.11e-8
        double var_chaste_interface__iNa_m_gate__m = rY[14];
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = rY[15];
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = rY[16];
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = rY[17];
        // Units: dimensionless; Initial value: 5.06e-6
        double var_chaste_interface__iCaL_f_gate__f = rY[18];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = rY[19];
        // Units: dimensionless; Initial value: 0.9995
        
        const double var_chaste_interface__Environment__dt = mDt;

        const double var_iKs_Xs_gate__tau_xs = (1.0 * (1400.0 / sqrt(1.0 + exp((5.0 - var_chaste_interface__cell__V) * 0.16666666666666666))) * (1.0 / (1.0 + exp((var_chaste_interface__cell__V - 35.0) * 0.066666666666666666)))) + 80.0; // millisecond
        const double var_ito_s_gate__tau_s = (85.0 * exp((-pow(var_chaste_interface__cell__V + 45.0, 2.0)) * 0.0031250000000000002)) + (5.0 / (1.0 + exp((var_chaste_interface__cell__V - 20.0) * 0.20000000000000001))) + 3.0; // millisecond
        const double var_ito_r_gate__tau_r = (9.5 * exp((-pow(var_chaste_interface__cell__V + 40.0, 2.0)) * 0.00055555555555555556)) + 0.80000000000000004; // millisecond
        const double var_iNa_m_gate__tau_m = 1.0 * (1.0 / (1.0 + exp(( -60.0 - var_chaste_interface__cell__V) * 0.20000000000000001))) * ((0.10000000000000001 / (1.0 + exp((var_chaste_interface__cell__V + 35.0) * 0.20000000000000001))) + (0.10000000000000001 / (1.0 + exp((var_chaste_interface__cell__V - 50.0) * 0.0050000000000000001)))); // millisecond
        const double var_iNa_h_gate__tau_h = 1.0 / (((var_chaste_interface__cell__V <  -40.0) ? (0.057000000000000002 * exp((-((var_chaste_interface__cell__V + 80.0) - 0.0)) * 0.14705882352941177)) : 0.0) + ((var_chaste_interface__cell__V <  -40.0) ? ((2.7000000000000002 * exp(0.079000000000000001 * (var_chaste_interface__cell__V - 0.0))) + (310000.0 * exp(0.34849999999999998 * (var_chaste_interface__cell__V - 0.0)))) : (0.77000000000000002 / (0.13 * (1.0 + exp(((var_chaste_interface__cell__V + 10.66) - 0.0) *  -0.0900900900900901)))))); // millisecond
        const double var_iNa_j_gate__tau_j = 1.0 / (((var_chaste_interface__cell__V <  -40.0) ? ((((( -25428.0 * exp(0.24440000000000001 * (var_chaste_interface__cell__V - 0.0))) - (6.9480000000000002e-06 * exp( -0.043909999999999998 * (var_chaste_interface__cell__V - 0.0)))) * (var_chaste_interface__cell__V + 37.780000000000001)) * 1.0) / (1.0 + exp(0.311 * ((var_chaste_interface__cell__V + 79.230000000000004) - 0.0)))) : 0.0) + ((var_chaste_interface__cell__V <  -40.0) ? ((0.024240000000000001 * exp( -0.01052 * (var_chaste_interface__cell__V - 0.0))) / (1.0 + exp( -0.13780000000000001 * ((var_chaste_interface__cell__V + 40.140000000000001) - 0.0)))) : ((0.59999999999999998 * exp(0.057000000000000002 * (var_chaste_interface__cell__V - 0.0))) / (1.0 + exp( -0.10000000000000001 * ((var_chaste_interface__cell__V + 32.0) - 0.0)))))); // millisecond
        const double var_iCaL_d_gate__tau_d = (1.0 * ((1.3999999999999999 / (1.0 + exp(( -35.0 - var_chaste_interface__cell__V) * 0.076923076923076927))) + 0.25) * (1.3999999999999999 / (1.0 + exp((var_chaste_interface__cell__V + 5.0) * 0.20000000000000001)))) + (1.0 / (1.0 + exp((50.0 - var_chaste_interface__cell__V) * 0.050000000000000003))); // millisecond
        const double var_iCaL_f_gate__tau_f = ((1102.5 * exp((-pow(var_chaste_interface__cell__V + 27.0, 2.0)) * 0.0044444444444444444)) + (200.0 / (1.0 + exp((13.0 - var_chaste_interface__cell__V) * 0.10000000000000001))) + (180.0 / (1.0 + exp((var_chaste_interface__cell__V + 30.0) * 0.10000000000000001))) + 20.0) * 0.25; // millisecond
        const double var_iCaL_f2_gate__tau_f2 = ((562.0 * exp((-pow(var_chaste_interface__cell__V + 27.0, 2.0)) * 0.0041666666666666666)) + (31.0 / (1.0 + exp((25.0 - var_chaste_interface__cell__V) * 0.10000000000000001))) + (80.0 / (1.0 + exp((var_chaste_interface__cell__V + 30.0) * 0.10000000000000001)))) * 0.5; // millisecond
        
        rY[17] = (var_chaste_interface__iCaL_d_gate__d + (((1.0 / (1.0 + exp((5.0 - var_chaste_interface__cell__V) * 0.13333333333333333))) / var_iCaL_d_gate__tau_d) * var_chaste_interface__Environment__dt)) / (1.0 - (( -1.0 / var_iCaL_d_gate__tau_d) * var_chaste_interface__Environment__dt));
        rY[19] = (var_chaste_interface__iCaL_f2_gate__f2 + ((((0.75 / (1.0 + exp((var_chaste_interface__cell__V + 35.0) * 0.14285714285714285))) + 0.25) / var_iCaL_f2_gate__tau_f2) * var_chaste_interface__Environment__dt)) / (1.0 - (( -1.0 / var_iCaL_f2_gate__tau_f2) * var_chaste_interface__Environment__dt));
        rY[18] = (var_chaste_interface__iCaL_f_gate__f + (((1.0 / (1.0 + exp((var_chaste_interface__cell__V + 20.0) * 0.14285714285714285))) / var_iCaL_f_gate__tau_f) * var_chaste_interface__Environment__dt)) / (1.0 - (( -1.0 / var_iCaL_f_gate__tau_f) * var_chaste_interface__Environment__dt));
        rY[11] = (var_chaste_interface__iKs_Xs_gate__Xs + (((1.0 / (1.0 + exp(( -5.0 - var_chaste_interface__cell__V) * 0.071428571428571425))) / var_iKs_Xs_gate__tau_xs) * var_chaste_interface__Environment__dt)) / (1.0 - (( -1.0 / var_iKs_Xs_gate__tau_xs) * var_chaste_interface__Environment__dt));
        rY[15] = (var_chaste_interface__iNa_h_gate__h + (((1.0 / pow(1.0 + exp(((var_chaste_interface__cell__V + 71.549999999999997) - 0.0) * 0.13458950201884254), 2.0)) / var_iNa_h_gate__tau_h) * var_chaste_interface__Environment__dt)) / (1.0 - (( -1.0 / var_iNa_h_gate__tau_h) * var_chaste_interface__Environment__dt));
        rY[16] = (var_chaste_interface__iNa_j_gate__j + (((1.0 / pow(1.0 + exp(((var_chaste_interface__cell__V + 71.549999999999997) - 0.0) * 0.13458950201884254), 2.0)) / var_iNa_j_gate__tau_j) * var_chaste_interface__Environment__dt)) / (1.0 - (( -1.0 / var_iNa_j_gate__tau_j) * var_chaste_interface__Environment__dt));
        rY[14] = (var_chaste_interface__iNa_m_gate__m + (((1.0 / pow(1.0 + exp(( -56.859999999999999 - var_chaste_interface__cell__V) * 0.11074197120708749), 2.0)) / var_iNa_m_gate__tau_m) * var_chaste_interface__Environment__dt)) / (1.0 - (( -1.0 / var_iNa_m_gate__tau_m) * var_chaste_interface__Environment__dt));
        rY[13] = (var_chaste_interface__ito_r_gate__r + (((1.0 / (1.0 + exp((20.0 - var_chaste_interface__cell__V) * 0.16666666666666666))) / var_ito_r_gate__tau_r) * var_chaste_interface__Environment__dt)) / (1.0 - (( -1.0 / var_ito_r_gate__tau_r) * var_chaste_interface__Environment__dt));
        rY[12] = (var_chaste_interface__ito_s_gate__s + (((1.0 / (1.0 + exp((var_chaste_interface__cell__V + 20.0) * 0.20000000000000001))) / var_ito_s_gate__tau_s) * var_chaste_interface__Environment__dt)) / (1.0 - (( -1.0 / var_ito_s_gate__tau_s) * var_chaste_interface__Environment__dt));
        
        double _guess[17] = {rY[22],rY[21],rY[23],rY[24],rY[26],rY[25],rY[20],rY[6],rY[7],rY[8],rY[10],rY[9],rY[1],rY[2],rY[3],rY[5],rY[4]};
        CardiacNewtonSolver<17,Dynamicfink_noble_giles_model_2008FromCellMLBackwardEuler>* _p_solver = CardiacNewtonSolver<17,Dynamicfink_noble_giles_model_2008FromCellMLBackwardEuler>::Instance();
        _p_solver->Solve(*this, var_chaste_interface__Environment__time, _guess);
        rY[22] = _guess[0];
        rY[21] = _guess[1];
        rY[23] = _guess[2];
        rY[24] = _guess[3];
        rY[26] = _guess[4];
        rY[25] = _guess[5];
        rY[20] = _guess[6];
        rY[6] = _guess[7];
        rY[7] = _guess[8];
        rY[8] = _guess[9];
        rY[10] = _guess[10];
        rY[9] = _guess[11];
        rY[1] = _guess[12];
        rY[2] = _guess[13];
        rY[3] = _guess[14];
        rY[5] = _guess[15];
        rY[4] = _guess[16];
    }
    
template<>
void OdeSystemInformation<Dynamicfink_noble_giles_model_2008FromCellMLBackwardEuler>::Initialise(void)
{
    this->mSystemName = "fink_noble_giles_model_2008";
    this->mFreeVariableName = "Environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-86.45);

    // rY[1]:
    this->mVariableNames.push_back("iKr_Markov__Cr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9786);

    // rY[2]:
    this->mVariableNames.push_back("iKr_Markov__Cr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0031);

    // rY[3]:
    this->mVariableNames.push_back("iKr_Markov__Cr3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0029);

    // rY[4]:
    this->mVariableNames.push_back("iKr_Markov__Or4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.014);

    // rY[5]:
    this->mVariableNames.push_back("iKr_Markov__Ir5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0014);

    // rY[6]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[7]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[8]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[9]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BOr4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[10]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BIr5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[11]:
    this->mVariableNames.push_back("iKs_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00303);

    // rY[12]:
    this->mVariableNames.push_back("ito_s_gate__s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1);

    // rY[13]:
    this->mVariableNames.push_back("ito_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.11e-8);

    // rY[14]:
    this->mVariableNames.push_back("iNa_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00132);

    // rY[15]:
    this->mVariableNames.push_back("iNa_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7768);

    // rY[16]:
    this->mVariableNames.push_back("iNa_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7766);

    // rY[17]:
    this->mVariableNames.push_back("iCaL_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.06e-6);

    // rY[18]:
    this->mVariableNames.push_back("iCaL_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999);

    // rY[19]:
    this->mVariableNames.push_back("iCaL_f2_gate__f2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9995);

    // rY[20]:
    this->mVariableNames.push_back("iCaL_fCass_gate__fCass");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1);

    // rY[21]:
    this->mVariableNames.push_back("Ca__Ca_i");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.092e-4);

    // rY[22]:
    this->mVariableNames.push_back("Ca__Ca_SR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(2.7656);

    // rY[23]:
    this->mVariableNames.push_back("Ca__Ca_ss");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.893e-4);

    // rY[24]:
    this->mVariableNames.push_back("Irel__R_prime");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9864);

    // rY[25]:
    this->mVariableNames.push_back("Na__Na_i");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.940167);

    // rY[26]:
    this->mVariableNames.push_back("K__K_i");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(141.0167);

    this->mAttributes["SuggestedForwardEulerTimestep"] = 0.001;
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamicfink_noble_giles_model_2008FromCellMLBackwardEuler)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamicfink_noble_giles_model_2008FromCellMLBackwardEuler(pSolver, pStimulus);
    }
    
}

