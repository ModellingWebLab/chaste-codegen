#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: mcallister_noble_tsien_1975_modelB
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvode)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "mcallister_noble_tsien_1975_b.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"



    Cellmcallister_noble_tsien_1975_bFromCellMLCvode::Cellmcallister_noble_tsien_1975_bFromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                10,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellmcallister_noble_tsien_1975_bFromCellMLCvode>::Instance();
        Init();
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 1.0; // (var_secondary_inward_current__g_si_mult) [dimensionless]
        NV_Ith_S(this->mParameters, 1) = 10.0; // (var_membrane__C) [microF_per_cm2]
        NV_Ith_S(this->mParameters, 2) = 150.0; // (var_fast_sodium_current__g_Na) [milliS_per_cm2]
        NV_Ith_S(this->mParameters, 3) = 25.0; // (var_plateau_potassium_current2__g_x2) [microA_per_cm2]
    }

    Cellmcallister_noble_tsien_1975_bFromCellMLCvode::~Cellmcallister_noble_tsien_1975_bFromCellMLCvode()
    {
    }

    
    double Cellmcallister_noble_tsien_1975_bFromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -78.041367
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.02566853
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.78656359
        double var_chaste_interface__secondary_inward_current_d_gate__d = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.00293135
        double var_chaste_interface__secondary_inward_current_f_gate__f = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.80873917
        double var_chaste_interface__pacemaker_potassium_current_s_gate__s = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.75473994
        double var_chaste_interface__plateau_potassium_current1_x1_gate__x1 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.02030289
        double var_chaste_interface__plateau_potassium_current2_x2_gate__x2 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.0176854
        double var_chaste_interface__transient_chloride_current_q_gate__q = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.11285794
        double var_chaste_interface__transient_chloride_current_r_gate__r = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.13500116
        
        const double var_chloride_background_current__g_Clb = 0.01; // milliS_per_cm2
        const double var_fast_sodium_current__E_Na = 40.0; // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 2) * var_chaste_interface__fast_sodium_current_h_gate__h; // microA_per_cm2
        const double var_pacemaker_potassium_current__E_K = -110.0; // millivolt
        const double var_pacemaker_potassium_current__I_K2 = 2.7999999999999998 * (-1.0 + exp(0.040000000000000001 * var_chaste_interface__membrane__V - 0.040000000000000001 * var_pacemaker_potassium_current__E_K)) / (exp(2.3999999999999999 + 0.040000000000000001 * var_chaste_interface__membrane__V) + exp(4.7999999999999998 + 0.080000000000000002 * var_chaste_interface__membrane__V)); // microA_per_cm2
        const double var_pacemaker_potassium_current__i_K2 = var_pacemaker_potassium_current__I_K2 * var_chaste_interface__pacemaker_potassium_current_s_gate__s; // microA_per_cm2
        const double var_plateau_potassium_current1__I_x1 = 1.2 * (-1.0 + exp(3.7999999999999998 + 0.040000000000000001 * var_chaste_interface__membrane__V)) / exp(1.8 + 0.040000000000000001 * var_chaste_interface__membrane__V); // microA_per_cm2
        const double var_plateau_potassium_current1__i_x1 = var_plateau_potassium_current1__I_x1 * var_chaste_interface__plateau_potassium_current1_x1_gate__x1; // microA_per_cm2
        const double var_plateau_potassium_current2__I_x2 = 25.0 + 0.38500000000000001 * var_chaste_interface__membrane__V + NV_Ith_S(mParameters, 3); // microA_per_cm2
        const double var_plateau_potassium_current2__i_x2 = var_plateau_potassium_current2__I_x2 * var_chaste_interface__plateau_potassium_current2_x2_gate__x2; // microA_per_cm2
        const double var_secondary_inward_current__E_si = 70.0; // millivolt
        const double var_secondary_inward_current__g_si = 0.80000000000000004; // milliS_per_cm2
        const double var_secondary_inward_current__g_si_ = 0.040000000000000001; // milliS_per_cm2
        const double var_secondary_inward_current_d1_gate__d1 = 1 / (1.0 + exp(-6.0 - 0.14999999999999999 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_secondary_inward_current__i_si = ((-var_secondary_inward_current__E_si + var_chaste_interface__membrane__V) * var_secondary_inward_current__g_si_ * var_secondary_inward_current_d1_gate__d1 + (-var_secondary_inward_current__E_si + var_chaste_interface__membrane__V) * var_secondary_inward_current__g_si * var_chaste_interface__secondary_inward_current_d_gate__d * var_chaste_interface__secondary_inward_current_f_gate__f) * NV_Ith_S(mParameters, 0); // microA_per_cm2
        const double var_sodium_background_current__g_Nab = 0.105; // milliS_per_cm2
        const double var_sodium_background_current__i_Na_b = (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * var_sodium_background_current__g_Nab; // microA_per_cm2
        const double var_time_independent_outward_current__i_K1 = (-1 + exp(4.4000000000000004 + 0.040000000000000001 * var_chaste_interface__membrane__V)) / (exp(2.3999999999999999 + 0.040000000000000001 * var_chaste_interface__membrane__V) + exp(4.7999999999999998 + 0.080000000000000002 * var_chaste_interface__membrane__V)) + ((fabs(30.0 + var_chaste_interface__membrane__V) < 2.4999999999886224e-6) ? (4.9999999999772453e-7 / (1.0 - exp(-9.9999999999544901e-8)) - 200000.00000091019 * (29.999997499999999 + var_chaste_interface__membrane__V) * (-4.9999999999772453e-7 / (1.0 - exp(9.9999999999544901e-8)) - 4.9999999999772453e-7 / (1.0 - exp(-9.9999999999544901e-8)))) : (0.20000000000000001 * (30.0 + var_chaste_interface__membrane__V) / (1.0 - exp(-1.2 - 0.040000000000000001 * var_chaste_interface__membrane__V)))); // microA_per_cm2
        const double var_transient_chloride_current__E_Cl = -70.0; // millivolt
        const double var_chloride_background_current__i_Cl_b = (-var_transient_chloride_current__E_Cl + var_chaste_interface__membrane__V) * var_chloride_background_current__g_Clb; // microA_per_cm2
        const double var_transient_chloride_current__g_qr = 2.5; // milliS_per_cm2
        const double var_transient_chloride_current__i_qr = (-var_transient_chloride_current__E_Cl + var_chaste_interface__membrane__V) * var_transient_chloride_current__g_qr * var_chaste_interface__transient_chloride_current_q_gate__q * var_chaste_interface__transient_chloride_current_r_gate__r; // microA_per_cm2
        const double var_chaste_interface__i_ionic = var_chloride_background_current__i_Cl_b + var_fast_sodium_current__i_Na + var_pacemaker_potassium_current__i_K2 + var_plateau_potassium_current1__i_x1 + var_plateau_potassium_current2__i_x2 + var_secondary_inward_current__i_si + var_sodium_background_current__i_Na_b + var_time_independent_outward_current__i_K1 + var_transient_chloride_current__i_qr; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellmcallister_noble_tsien_1975_bFromCellMLCvode::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -78.041367
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.02566853
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.78656359
        double var_chaste_interface__secondary_inward_current_d_gate__d = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.00293135
        double var_chaste_interface__secondary_inward_current_f_gate__f = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.80873917
        double var_chaste_interface__pacemaker_potassium_current_s_gate__s = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.75473994
        double var_chaste_interface__plateau_potassium_current1_x1_gate__x1 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.02030289
        double var_chaste_interface__plateau_potassium_current2_x2_gate__x2 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.0176854
        double var_chaste_interface__transient_chloride_current_q_gate__q = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.11285794
        double var_chaste_interface__transient_chloride_current_r_gate__r = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.13500116

        // Mathematics
        double d_dt_chaste_interface_var_membrane__V;
        const double var_fast_sodium_current_h_gate__alpha_h = 0.0085000000000000006 * exp(-13.064 - 0.184 * var_chaste_interface__membrane__V); // per_millisecond
        const double var_fast_sodium_current_h_gate__beta_h = 2.5 / (1.0 + exp(-0.82000000000000006 - 0.082000000000000003 * var_chaste_interface__membrane__V)); // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_h_gate__h = (1.0 - var_chaste_interface__fast_sodium_current_h_gate__h) * var_fast_sodium_current_h_gate__alpha_h - var_fast_sodium_current_h_gate__beta_h * var_chaste_interface__fast_sodium_current_h_gate__h; // 1 / millisecond
        const double var_fast_sodium_current_m_gate__alpha_m = ((fabs(47.0 + var_chaste_interface__membrane__V) < 1.0000000000287557e-6) ? (9.9999999997324451e-7 / (1.0 - exp(-9.9999999997324457e-8)) - 499999.99998562218 * (46.999999000000003 + var_chaste_interface__membrane__V) * (-9.9999999997324451e-7 / (1.0 - exp(-9.9999999997324457e-8)) - 1.0000000000842668e-6 / (1.0 - exp(1.0000000000842668e-7)))) : ((47.0 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.7000000000000002 - 0.10000000000000001 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_fast_sodium_current_m_gate__beta_m = 40.0 * exp(-4.032 - 0.056000000000000001 * var_chaste_interface__membrane__V); // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_m_gate__m = (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m) * var_fast_sodium_current_m_gate__alpha_m - var_fast_sodium_current_m_gate__beta_m * var_chaste_interface__fast_sodium_current_m_gate__m; // 1 / millisecond
        const double var_pacemaker_potassium_current_s_gate__E_s = -52.0; // millivolt
        const double var_pacemaker_potassium_current_s_gate__alpha_s = ((fabs(52.0 + var_chaste_interface__membrane__V) < 5.0000000001437783e-7) ? (5.0000000001437788e-10 / (1.0 - exp(-1.0000000000287557e-7)) - 999999.99997124437 * (51.999999500000001 + var_chaste_interface__membrane__V) * (-5.0000000001437788e-10 / (1.0 - exp(1.0000000000287557e-7)) - 5.0000000001437788e-10 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.001 * (52.0 + var_chaste_interface__membrane__V) / (1.0 - exp(-10.4 - 0.20000000000000001 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_pacemaker_potassium_current_s_gate__beta_s = 5.0000000000000002e-5 * exp(0.067000000000000004 * var_pacemaker_potassium_current_s_gate__E_s - 0.067000000000000004 * var_chaste_interface__membrane__V); // per_millisecond
        const double d_dt_chaste_interface_var_pacemaker_potassium_current_s_gate__s = (1.0 - var_chaste_interface__pacemaker_potassium_current_s_gate__s) * var_pacemaker_potassium_current_s_gate__alpha_s - var_pacemaker_potassium_current_s_gate__beta_s * var_chaste_interface__pacemaker_potassium_current_s_gate__s; // 1 / millisecond
        const double var_plateau_potassium_current1_x1_gate__alpha_x1 = 0.00050000000000000001 * exp(4.1322314049586781 + 0.082644628099173556 * var_chaste_interface__membrane__V) / (1.0 + exp(2.8571428571428572 + 0.057142857142857141 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_plateau_potassium_current1_x1_gate__beta_x1 = 0.0012999999999999999 * exp(-1.1997600479904018 - 0.059988002399520089 * var_chaste_interface__membrane__V) / (1.0 + exp(-0.80000000000000004 - 0.040000000000000001 * var_chaste_interface__membrane__V)); // per_millisecond
        const double d_dt_chaste_interface_var_plateau_potassium_current1_x1_gate__x1 = (1.0 - var_chaste_interface__plateau_potassium_current1_x1_gate__x1) * var_plateau_potassium_current1_x1_gate__alpha_x1 - var_plateau_potassium_current1_x1_gate__beta_x1 * var_chaste_interface__plateau_potassium_current1_x1_gate__x1; // 1 / millisecond
        const double var_plateau_potassium_current2_x2_gate__alpha_x2 = 0.000127 / (1.0 + exp(-3.7999999999999998 - 0.20000000000000001 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_plateau_potassium_current2_x2_gate__beta_x2 = 0.00029999999999999997 * exp(-1.1997600479904018 - 0.059988002399520089 * var_chaste_interface__membrane__V) / (1.0 + exp(-0.80000000000000004 - 0.040000000000000001 * var_chaste_interface__membrane__V)); // per_millisecond
        const double d_dt_chaste_interface_var_plateau_potassium_current2_x2_gate__x2 = (1.0 - var_chaste_interface__plateau_potassium_current2_x2_gate__x2) * var_plateau_potassium_current2_x2_gate__alpha_x2 - var_plateau_potassium_current2_x2_gate__beta_x2 * var_chaste_interface__plateau_potassium_current2_x2_gate__x2; // 1 / millisecond
        const double var_secondary_inward_current_d_gate__alpha_d = ((fabs(40.0 + var_chaste_interface__membrane__V) < 1.0000000000010001e-6) ? (1.999999999946489e-9 / (1.0 - exp(-9.9999999997324457e-8)) - 499999.99999949994 * (39.999999000000003 + var_chaste_interface__membrane__V) * (-1.999999999946489e-9 / (1.0 - exp(-9.9999999997324457e-8)) - 2.0000000000575115e-9 / (1.0 - exp(1.0000000000287557e-7)))) : (0.002 * (40.0 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.0 - 0.10000000000000001 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_secondary_inward_current_d_gate__beta_d = 0.02 * exp(-3.552 - 0.088800000000000004 * var_chaste_interface__membrane__V); // per_millisecond
        const double d_dt_chaste_interface_var_secondary_inward_current_d_gate__d = (1.0 - var_chaste_interface__secondary_inward_current_d_gate__d) * var_secondary_inward_current_d_gate__alpha_d - var_secondary_inward_current_d_gate__beta_d * var_chaste_interface__secondary_inward_current_d_gate__d; // 1 / millisecond
        const double var_secondary_inward_current_f_gate__alpha_f = 0.00098700000000000003 * exp(-2.3999999999999999 - 0.040000000000000001 * var_chaste_interface__membrane__V); // per_millisecond
        const double var_secondary_inward_current_f_gate__beta_f = 0.02 / (1.0 + exp(-2.262 - 0.086999999999999994 * var_chaste_interface__membrane__V)); // per_millisecond
        const double d_dt_chaste_interface_var_secondary_inward_current_f_gate__f = (1.0 - var_chaste_interface__secondary_inward_current_f_gate__f) * var_secondary_inward_current_f_gate__alpha_f - var_secondary_inward_current_f_gate__beta_f * var_chaste_interface__secondary_inward_current_f_gate__f; // 1 / millisecond
        const double var_transient_chloride_current_q_gate__alpha_q = ((fabs(var_chaste_interface__membrane__V) < 9.9999999999999995e-7) ? (7.9999999999999988e-9 / (1.0 - exp(-9.9999999999999995e-8)) - 500000.00000000006 * (-9.9999999999999995e-7 + var_chaste_interface__membrane__V) * (-7.9999999999999988e-9 / (1.0 - exp(9.9999999999999995e-8)) - 7.9999999999999988e-9 / (1.0 - exp(-9.9999999999999995e-8)))) : (0.0080000000000000002 * var_chaste_interface__membrane__V / (1.0 - exp(-0.10000000000000001 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_transient_chloride_current_q_gate__beta_q = 0.080000000000000002 * exp(-0.088800000000000004 * var_chaste_interface__membrane__V); // per_millisecond
        const double d_dt_chaste_interface_var_transient_chloride_current_q_gate__q = (1.0 - var_chaste_interface__transient_chloride_current_q_gate__q) * var_transient_chloride_current_q_gate__alpha_q - var_transient_chloride_current_q_gate__beta_q * var_chaste_interface__transient_chloride_current_q_gate__q; // 1 / millisecond
        const double var_transient_chloride_current_r_gate__alpha_r = 3.3000000000000003e-5 * exp(-0.058823529411764705 * var_chaste_interface__membrane__V); // per_millisecond
        const double var_transient_chloride_current_r_gate__beta_r = 0.033000000000000002 / (1.0 + exp(-3.75 - 0.125 * var_chaste_interface__membrane__V)); // per_millisecond
        const double d_dt_chaste_interface_var_transient_chloride_current_r_gate__r = (1.0 - var_chaste_interface__transient_chloride_current_r_gate__r) * var_transient_chloride_current_r_gate__alpha_r - var_transient_chloride_current_r_gate__beta_r * var_chaste_interface__transient_chloride_current_r_gate__r; // 1 / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__V = 0.0;
        }
        else
        {
            const double var_chloride_background_current__g_Clb = 0.01; // milliS_per_cm2
            const double var_fast_sodium_current__E_Na = 40.0; // millivolt
            const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 2) * var_chaste_interface__fast_sodium_current_h_gate__h; // microA_per_cm2
            const double var_pacemaker_potassium_current__E_K = -110.0; // millivolt
            const double var_pacemaker_potassium_current__I_K2 = 2.7999999999999998 * (-1.0 + exp(0.040000000000000001 * var_chaste_interface__membrane__V - 0.040000000000000001 * var_pacemaker_potassium_current__E_K)) / (exp(2.3999999999999999 + 0.040000000000000001 * var_chaste_interface__membrane__V) + exp(4.7999999999999998 + 0.080000000000000002 * var_chaste_interface__membrane__V)); // microA_per_cm2
            const double var_pacemaker_potassium_current__i_K2 = var_pacemaker_potassium_current__I_K2 * var_chaste_interface__pacemaker_potassium_current_s_gate__s; // microA_per_cm2
            const double var_plateau_potassium_current1__I_x1 = 1.2 * (-1.0 + exp(3.7999999999999998 + 0.040000000000000001 * var_chaste_interface__membrane__V)) / exp(1.8 + 0.040000000000000001 * var_chaste_interface__membrane__V); // microA_per_cm2
            const double var_plateau_potassium_current1__i_x1 = var_plateau_potassium_current1__I_x1 * var_chaste_interface__plateau_potassium_current1_x1_gate__x1; // microA_per_cm2
            const double var_plateau_potassium_current2__I_x2 = 25.0 + 0.38500000000000001 * var_chaste_interface__membrane__V + NV_Ith_S(mParameters, 3); // microA_per_cm2
            const double var_plateau_potassium_current2__i_x2 = var_plateau_potassium_current2__I_x2 * var_chaste_interface__plateau_potassium_current2_x2_gate__x2; // microA_per_cm2
            const double var_secondary_inward_current__E_si = 70.0; // millivolt
            const double var_secondary_inward_current__g_si = 0.80000000000000004; // milliS_per_cm2
            const double var_secondary_inward_current__g_si_ = 0.040000000000000001; // milliS_per_cm2
            const double var_secondary_inward_current_d1_gate__d1 = 1 / (1.0 + exp(-6.0 - 0.14999999999999999 * var_chaste_interface__membrane__V)); // dimensionless
            const double var_secondary_inward_current__i_si = ((-var_secondary_inward_current__E_si + var_chaste_interface__membrane__V) * var_secondary_inward_current__g_si_ * var_secondary_inward_current_d1_gate__d1 + (-var_secondary_inward_current__E_si + var_chaste_interface__membrane__V) * var_secondary_inward_current__g_si * var_chaste_interface__secondary_inward_current_d_gate__d * var_chaste_interface__secondary_inward_current_f_gate__f) * NV_Ith_S(mParameters, 0); // microA_per_cm2
            const double var_sodium_background_current__g_Nab = 0.105; // milliS_per_cm2
            const double var_sodium_background_current__i_Na_b = (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * var_sodium_background_current__g_Nab; // microA_per_cm2
            const double var_time_independent_outward_current__i_K1 = (-1 + exp(4.4000000000000004 + 0.040000000000000001 * var_chaste_interface__membrane__V)) / (exp(2.3999999999999999 + 0.040000000000000001 * var_chaste_interface__membrane__V) + exp(4.7999999999999998 + 0.080000000000000002 * var_chaste_interface__membrane__V)) + ((fabs(30.0 + var_chaste_interface__membrane__V) < 2.4999999999886224e-6) ? (4.9999999999772453e-7 / (1.0 - exp(-9.9999999999544901e-8)) - 200000.00000091019 * (29.999997499999999 + var_chaste_interface__membrane__V) * (-4.9999999999772453e-7 / (1.0 - exp(9.9999999999544901e-8)) - 4.9999999999772453e-7 / (1.0 - exp(-9.9999999999544901e-8)))) : (0.20000000000000001 * (30.0 + var_chaste_interface__membrane__V) / (1.0 - exp(-1.2 - 0.040000000000000001 * var_chaste_interface__membrane__V)))); // microA_per_cm2
            const double var_transient_chloride_current__E_Cl = -70.0; // millivolt
            const double var_chloride_background_current__i_Cl_b = (-var_transient_chloride_current__E_Cl + var_chaste_interface__membrane__V) * var_chloride_background_current__g_Clb; // microA_per_cm2
            const double var_transient_chloride_current__g_qr = 2.5; // milliS_per_cm2
            const double var_transient_chloride_current__i_qr = (-var_transient_chloride_current__E_Cl + var_chaste_interface__membrane__V) * var_transient_chloride_current__g_qr * var_chaste_interface__transient_chloride_current_q_gate__q * var_chaste_interface__transient_chloride_current_r_gate__r; // microA_per_cm2
            d_dt_chaste_interface_var_membrane__V = (-var_chloride_background_current__i_Cl_b - var_fast_sodium_current__i_Na - var_pacemaker_potassium_current__i_K2 - var_plateau_potassium_current1__i_x1 - var_plateau_potassium_current2__i_x2 - var_secondary_inward_current__i_si - var_sodium_background_current__i_Na_b - var_time_independent_outward_current__i_K1 - var_transient_chloride_current__i_qr) / NV_Ith_S(mParameters, 1); // millivolt / millisecond
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_membrane__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_fast_sodium_current_m_gate__m;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_fast_sodium_current_h_gate__h;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_secondary_inward_current_d_gate__d;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_secondary_inward_current_f_gate__f;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_pacemaker_potassium_current_s_gate__s;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_plateau_potassium_current1_x1_gate__x1;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_plateau_potassium_current2_x2_gate__x2;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_transient_chloride_current_q_gate__q;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_transient_chloride_current_r_gate__r;
    }

    void Cellmcallister_noble_tsien_1975_bFromCellMLCvode::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -78.041367
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.02566853
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.78656359
        double var_chaste_interface__secondary_inward_current_d_gate__d = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.00293135
        double var_chaste_interface__secondary_inward_current_f_gate__f = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.80873917
        double var_chaste_interface__pacemaker_potassium_current_s_gate__s = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.75473994
        double var_chaste_interface__plateau_potassium_current1_x1_gate__x1 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.02030289
        double var_chaste_interface__plateau_potassium_current2_x2_gate__x2 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.0176854
        double var_chaste_interface__transient_chloride_current_q_gate__q = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.11285794
        double var_chaste_interface__transient_chloride_current_r_gate__r = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.13500116
        const double var_x0 = 1 / NV_Ith_S(mParameters, 1);
        const double var_x1 = 0.040000000000000001 * var_chaste_interface__membrane__V;
        const double var_x2 = exp(2.3999999999999999 + var_x1);
        const double var_x3 = exp(4.7999999999999998 + 0.080000000000000002 * var_chaste_interface__membrane__V);
        const double var_x4 = var_x2 + var_x3;
        const double var_x5 = 1 / var_x4;
        const double var_x6 = exp(4.4000000000000004 + var_x1);
        const double var_x7 = var_x5 * var_x6;
        const double var_x8 = (-0.040000000000000001 * var_x2 - 0.080000000000000002 * var_x3) / pow(var_x4, 2);
        const double var_x9 = 0.040000000000000001 * var_x7 + var_x8 * (-1 + var_x6);
        const double var_x10 = 30.0 + var_chaste_interface__membrane__V;
        const double var_x11 = -var_x1;
        const double var_x12 = exp(-1.2 + var_x11);
        const double var_x13 = 1.0 - var_x12;
        const double var_x14 = exp(-6.0 - 0.14999999999999999 * var_chaste_interface__membrane__V);
        const double var_x15 = 1.0 + var_x14;
        const double var_x16 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * NV_Ith_S(mParameters, 2);
        const double var_x17 = 1 / exp(1.8 + var_x1);
        const double var_x18 = exp(3.7999999999999998 + var_x1);
        const double var_x19 = var_x17 * (-1.0 + var_x18);
        const double var_x20 = 0.048000000000000001 * var_chaste_interface__plateau_potassium_current1_x1_gate__x1;
        const double var_x21 = -2.7999999999999998 + 2.7999999999999998 * var_x6;
        const double var_x22 = var_x0 * (-40.0 + var_chaste_interface__membrane__V);
        const double var_x23 = var_x0 * (-56.0 + 0.80000000000000004 * var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 0);
        const double var_x24 = var_x0 * (-175.0 - 2.5 * var_chaste_interface__membrane__V);
        const double var_x25 = 1 / (1.0 - exp(1.0000000000842668e-7));
        const double var_x26 = 1 / (1.0 - exp(-9.9999999997324457e-8));
        const double var_x27 = fabs(47.0 + var_chaste_interface__membrane__V) < 1.0000000000287557e-6;
        const double var_x28 = exp(-4.7000000000000002 - 0.10000000000000001 * var_chaste_interface__membrane__V);
        const double var_x29 = 1.0 - var_x28;
        const double var_x30 = 1 / var_x29;
        const double var_x31 = 47.0 + var_chaste_interface__membrane__V;
        const double var_x32 = exp(-4.032 - 0.056000000000000001 * var_chaste_interface__membrane__V);
        const double var_x33 = 9.9999999997324451e-7 * var_x26;
        const double var_x34 = exp(-13.064 - 0.184 * var_chaste_interface__membrane__V);
        const double var_x35 = exp(-0.82000000000000006 - 0.082000000000000003 * var_chaste_interface__membrane__V);
        const double var_x36 = 1.0 + var_x35;
        const double var_x37 = 1 / (1.0 - exp(-9.9999999997324457e-8));
        const double var_x38 = 1 / (1.0 - exp(1.0000000000287557e-7));
        const double var_x39 = 40.0 + var_chaste_interface__membrane__V;
        const double var_x40 = fabs(var_x39) < 1.0000000000010001e-6;
        const double var_x41 = -0.10000000000000001 * var_chaste_interface__membrane__V;
        const double var_x42 = exp(-4.0 + var_x41);
        const double var_x43 = 1.0 - var_x42;
        const double var_x44 = 0.002 / var_x43;
        const double var_x45 = -0.088800000000000004 * var_chaste_interface__membrane__V;
        const double var_x46 = exp(-3.552 + var_x45);
        const double var_x47 = 1.999999999946489e-9 * var_x37;
        const double var_x48 = exp(-2.3999999999999999 - 0.040000000000000001 * var_chaste_interface__membrane__V);
        const double var_x49 = exp(-2.262 - 0.086999999999999994 * var_chaste_interface__membrane__V);
        const double var_x50 = 1.0 + var_x49;
        const double var_x51 = 1 / (1.0 - exp(-1.0000000000287557e-7));
        const double var_x52 = 52.0 + var_chaste_interface__membrane__V;
        const double var_x53 = fabs(var_x52) < 5.0000000001437783e-7;
        const double var_x54 = exp(-10.4 - 0.20000000000000001 * var_chaste_interface__membrane__V);
        const double var_x55 = 1.0 - var_x54;
        const double var_x56 = 0.001 / var_x55;
        const double var_x57 = exp(-3.484 - 0.067000000000000004 * var_chaste_interface__membrane__V);
        const double var_x58 = 5.0000000001437788e-10 * var_x51;
        const double var_x59 = exp(-0.80000000000000004 + var_x11);
        const double var_x60 = 1.0 + var_x59;
        const double var_x61 = exp(-1.1997600479904018 - 0.059988002399520089 * var_chaste_interface__membrane__V);
        const double var_x62 = var_x61 / var_x60;
        const double var_x63 = 1.0 - var_chaste_interface__plateau_potassium_current1_x1_gate__x1;
        const double var_x64 = exp(2.8571428571428572 + 0.057142857142857141 * var_chaste_interface__membrane__V);
        const double var_x65 = 1.0 + var_x64;
        const double var_x66 = exp(4.1322314049586781 + 0.082644628099173556 * var_chaste_interface__membrane__V);
        const double var_x67 = var_x66 / var_x65;
        const double var_x68 = var_x59 * var_x61 / pow(var_x60, 2);
        const double var_x69 = exp(-3.7999999999999998 - 0.20000000000000001 * var_chaste_interface__membrane__V);
        const double var_x70 = 1.0 + var_x69;
        const double var_x71 = 1 / (1.0 - exp(9.9999999999999995e-8));
        const double var_x72 = 1 / (1.0 - exp(-9.9999999999999995e-8));
        const double var_x73 = fabs(var_chaste_interface__membrane__V) < 9.9999999999999995e-7;
        const double var_x74 = exp(var_x41);
        const double var_x75 = 1.0 - var_x74;
        const double var_x76 = 0.0080000000000000002 / var_x75;
        const double var_x77 = exp(var_x45);
        const double var_x78 = 7.9999999999999988e-9 * var_x72;
        const double var_x79 = exp(-0.058823529411764705 * var_chaste_interface__membrane__V);
        const double var_x80 = exp(-3.75 - 0.125 * var_chaste_interface__membrane__V);
        const double var_x81 = 1.0 + var_x80;
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (var_x0 * (-0.11499999999999999 - ((fabs(var_x10) < 2.4999999999886224e-6) ? (var_x9 + 0.10000000000000001 / (1.0 - exp(9.9999999999544901e-8)) + 0.10000000000000001 / (1.0 - exp(-9.9999999999544901e-8))) : (var_x9 + 0.20000000000000001 / var_x13 - 0.0080000000000000002 * var_x10 * var_x12 / pow(var_x13, 2))) - 0.38500000000000001 * var_chaste_interface__plateau_potassium_current2_x2_gate__x2 + var_x19 * var_x20 + (-0.040000000000000001 / var_x15 - 0.80000000000000004 * var_chaste_interface__secondary_inward_current_d_gate__d * var_chaste_interface__secondary_inward_current_f_gate__f - 0.0060000000000000001 * var_x14 * (-70.0 + var_chaste_interface__membrane__V) / pow(var_x15, 2)) * NV_Ith_S(mParameters, 0) - var_x16 * var_chaste_interface__fast_sodium_current_h_gate__h - 2.5 * var_chaste_interface__transient_chloride_current_q_gate__q * var_chaste_interface__transient_chloride_current_r_gate__r - 0.11199999999999999 * var_x7 * var_chaste_interface__pacemaker_potassium_current_s_gate__s - var_x17 * var_x18 * var_x20 - var_x21 * var_x8 * var_chaste_interface__pacemaker_potassium_current_s_gate__s));
        IJth(rJacobian, 1, 0) = (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m) * ((var_x27) ? (0.50000000002775558 * var_x25 + 0.49999999997224442 * var_x26) : (var_x30 - 0.10000000000000001 * var_x28 * var_x31 / pow(var_x29, 2))) + 2.2400000000000002 * var_x32 * var_chaste_interface__fast_sodium_current_m_gate__m;
        IJth(rJacobian, 2, 0) = -0.184 * var_x34 * (0.0085000000000000006 - 0.0085000000000000006 * var_chaste_interface__fast_sodium_current_h_gate__h) - 0.20500000000000002 * var_x35 * var_chaste_interface__fast_sodium_current_h_gate__h / pow(var_x36, 2);
        IJth(rJacobian, 3, 0) = (1.0 - var_chaste_interface__secondary_inward_current_d_gate__d) * ((var_x40) ? (0.00099999999997224445 * var_x37 + 0.0010000000000277556 * var_x38) : (var_x44 - 0.00020000000000000001 * var_x39 * var_x42 / pow(var_x43, 2))) + 0.001776 * var_x46 * var_chaste_interface__secondary_inward_current_d_gate__d;
        IJth(rJacobian, 4, 0) = -0.040000000000000001 * var_x48 * (0.00098700000000000003 - 0.00098700000000000003 * var_chaste_interface__secondary_inward_current_f_gate__f) - 0.00174 * var_x49 * var_chaste_interface__secondary_inward_current_f_gate__f / pow(var_x50, 2);
        IJth(rJacobian, 5, 0) = (1.0 - var_chaste_interface__pacemaker_potassium_current_s_gate__s) * ((var_x53) ? (0.00050000000000000001 * var_x38 + 0.00050000000000000001 * var_x51) : (var_x56 - 0.00020000000000000001 * var_x52 * var_x54 / pow(var_x55, 2))) + 3.3500000000000005e-6 * var_x57 * var_chaste_interface__pacemaker_potassium_current_s_gate__s;
        IJth(rJacobian, 6, 0) = 7.7984403119376114e-5 * var_x62 * var_chaste_interface__plateau_potassium_current1_x1_gate__x1 + 4.132231404958678e-5 * var_x63 * var_x67 - 5.1999999999999997e-5 * var_x68 * var_chaste_interface__plateau_potassium_current1_x1_gate__x1 - 2.8571428571428571e-5 * var_x63 * var_x64 * var_x66 / pow(var_x65, 2);
        IJth(rJacobian, 7, 0) = 1.7996400719856025e-5 * var_x62 * var_chaste_interface__plateau_potassium_current2_x2_gate__x2 - 1.1999999999999999e-5 * var_x68 * var_chaste_interface__plateau_potassium_current2_x2_gate__x2 + 2.5400000000000001e-5 * var_x69 * (1.0 - var_chaste_interface__plateau_potassium_current2_x2_gate__x2) / pow(var_x70, 2);
        IJth(rJacobian, 8, 0) = (1.0 - var_chaste_interface__transient_chloride_current_q_gate__q) * ((var_x73) ? (0.0040000000000000001 * var_x71 + 0.0040000000000000001 * var_x72) : (var_x76 - 0.00080000000000000004 * var_x74 * var_chaste_interface__membrane__V / pow(var_x75, 2))) + 0.0071040000000000001 * var_x77 * var_chaste_interface__transient_chloride_current_q_gate__q;
        IJth(rJacobian, 9, 0) = -0.058823529411764705 * var_x79 * (3.3000000000000003e-5 - 3.3000000000000003e-5 * var_chaste_interface__transient_chloride_current_r_gate__r) - 0.0041250000000000002 * var_x80 * var_chaste_interface__transient_chloride_current_r_gate__r / pow(var_x81, 2);
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x22 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2) * NV_Ith_S(mParameters, 2) * var_chaste_interface__fast_sodium_current_h_gate__h);
        IJth(rJacobian, 1, 1) = -((var_x27) ? (var_x33 - 499999.99998562218 * (46.999999000000003 + var_chaste_interface__membrane__V) * (-var_x33 - 1.0000000000842668e-6 * var_x25)) : (var_x30 * var_x31)) - 40.0 * var_x32;
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x16 * var_x22);
        IJth(rJacobian, 2, 2) = -2.5 / var_x36 - 0.0085000000000000006 * var_x34;
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x23 * var_chaste_interface__secondary_inward_current_f_gate__f);
        IJth(rJacobian, 3, 3) = -((var_x40) ? (var_x47 - 499999.99999949994 * (39.999999000000003 + var_chaste_interface__membrane__V) * (-var_x47 - 2.0000000000575115e-9 * var_x38)) : (var_x39 * var_x44)) - 0.02 * var_x46;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x23 * var_chaste_interface__secondary_inward_current_d_gate__d);
        IJth(rJacobian, 4, 4) = -0.00098700000000000003 * var_x48 - 0.02 / var_x50;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x0 * var_x21 * var_x5);
        IJth(rJacobian, 5, 5) = -((var_x53) ? (var_x58 - 999999.99997124437 * (51.999999500000001 + var_chaste_interface__membrane__V) * (-var_x58 - 5.0000000001437788e-10 * var_x38)) : (var_x52 * var_x56)) - 5.0000000000000002e-5 * var_x57;
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (-1.2 * var_x0 * var_x19);
        IJth(rJacobian, 6, 6) = -0.00050000000000000001 * var_x67 - 0.0012999999999999999 * var_x62;
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (var_x0 * (-25.0 - NV_Ith_S(mParameters, 3) - 0.38500000000000001 * var_chaste_interface__membrane__V));
        IJth(rJacobian, 7, 7) = -0.000127 / var_x70 - 0.00029999999999999997 * var_x62;
        IJth(rJacobian, 0, 8) = mSetVoltageDerivativeToZero ? 0.0 : (var_x24 * var_chaste_interface__transient_chloride_current_r_gate__r);
        IJth(rJacobian, 8, 8) = -((var_x73) ? (var_x78 - 500000.00000000006 * (-9.9999999999999995e-7 + var_chaste_interface__membrane__V) * (-var_x78 - 7.9999999999999988e-9 * var_x71)) : (var_x76 * var_chaste_interface__membrane__V)) - 0.080000000000000002 * var_x77;
        IJth(rJacobian, 0, 9) = mSetVoltageDerivativeToZero ? 0.0 : (var_x24 * var_chaste_interface__transient_chloride_current_q_gate__q);
        IJth(rJacobian, 9, 9) = -0.033000000000000002 / var_x81 - 3.3000000000000003e-5 * var_x79;
    }

    N_Vector Cellmcallister_noble_tsien_1975_bFromCellMLCvode::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -78.041367
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.02566853
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.78656359
        
        // Mathematics
        const double var_fast_sodium_current__E_Na = 40.0; // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 2) * var_chaste_interface__fast_sodium_current_h_gate__h; // microA_per_cm2
        const double var_time_independent_outward_current__i_K1 = (-1 + exp(4.4000000000000004 + 0.040000000000000001 * var_chaste_interface__membrane__V)) / (exp(2.3999999999999999 + 0.040000000000000001 * var_chaste_interface__membrane__V) + exp(4.7999999999999998 + 0.080000000000000002 * var_chaste_interface__membrane__V)) + ((fabs(30.0 + var_chaste_interface__membrane__V) < 2.4999999999886224e-6) ? (4.9999999999772453e-7 / (1.0 - exp(-9.9999999999544901e-8)) - 200000.00000091019 * (29.999997499999999 + var_chaste_interface__membrane__V) * (-4.9999999999772453e-7 / (1.0 - exp(9.9999999999544901e-8)) - 4.9999999999772453e-7 / (1.0 - exp(-9.9999999999544901e-8)))) : (0.20000000000000001 * (30.0 + var_chaste_interface__membrane__V) / (1.0 - exp(-1.2 - 0.040000000000000001 * var_chaste_interface__membrane__V)))); // microA_per_cm2

        N_Vector dqs = N_VNew_Serial(3);
        NV_Ith_S(dqs, 0) = var_fast_sodium_current__i_Na;
        NV_Ith_S(dqs, 1) = var_time_independent_outward_current__i_K1;
        NV_Ith_S(dqs, 2) = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellmcallister_noble_tsien_1975_bFromCellMLCvode>::Initialise(void)
{
    this->mSystemName = "mcallister_noble_tsien_1975_modelB";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-78.041367);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.02566853);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.78656359);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("secondary_inward_current_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00293135);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("secondary_inward_current_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.80873917);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("pacemaker_potassium_current_s_gate__s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.75473994);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("plateau_potassium_current1_x1_gate__x1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.02030289);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("plateau_potassium_current2_x2_gate__x2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0176854);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("transient_chloride_current_q_gate__q");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.11285794);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("transient_chloride_current_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.13500116);

    // mParameters[0]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[1]:
    this->mParameterNames.push_back("membrane_capacitance");
    this->mParameterUnits.push_back("microF_per_cm2");

    // mParameters[2]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_cm2");

    // mParameters[3]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("microA_per_cm2");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("microA_per_cm2");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("microA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    
    this->mAttributes["SuggestedCycleLength"] = 2000;
    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellmcallister_noble_tsien_1975_bFromCellMLCvode)

#endif // CHASTE_CVODE
