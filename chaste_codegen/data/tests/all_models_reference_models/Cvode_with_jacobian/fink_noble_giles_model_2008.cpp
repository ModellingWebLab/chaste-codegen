#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: fink_noble_giles_model_2008
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvode)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "fink_noble_giles_model_2008.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"


    boost::shared_ptr<RegularStimulus> Cellfink_noble_giles_model_2008FromCellMLCvode::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -11.999999999999998 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_chaste_interface__cell__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__cell__stim_start = 100.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellfink_noble_giles_model_2008FromCellMLCvode::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellfink_noble_giles_model_2008FromCellMLCvode::Cellfink_noble_giles_model_2008FromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                27,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellfink_noble_giles_model_2008FromCellMLCvode>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 0.00036000000000000002; // (var_Ileak_Iup_Ixfer__Vol_leak) [per_millisecond]
        NV_Ith_S(this->mParameters, 1) = 0.30599999999999999; // (var_Irel__Vol_rel) [per_millisecond]
        NV_Ith_S(this->mParameters, 2) = 0.0063749999999999996; // (var_Ileak_Iup_Ixfer__Vmax_up) [millimolar_per_millisecond]
        NV_Ith_S(this->mParameters, 3) = 0.115; // (var_cell__Cm) [nanoF]
        NV_Ith_S(this->mParameters, 4) = 1.0; // (var_Na__conc_clamp) [dimensionless]
        NV_Ith_S(this->mParameters, 5) = 2.0; // (var_Environment__Ca_o) [millimolar]
        NV_Ith_S(this->mParameters, 6) = 5.4000000000000004; // (var_Environment__K_o) [millimolar]
        NV_Ith_S(this->mParameters, 7) = 140.0; // (var_Environment__Na_o) [millimolar]
        NV_Ith_S(this->mParameters, 8) = 2.0000000000000002e-5; // (var_ICaL__g_CaL) [litre_per_farad_millisecond]
        NV_Ith_S(this->mParameters, 9) = 11.0; // (var_INa__g_Na) [microS_per_nanoF]
        NV_Ith_S(this->mParameters, 10) = 0; // (var_INa__perc_reduced_inact_for_IpNa) [dimensionless]
        NV_Ith_S(this->mParameters, 11) = 0; // (var_INa__shift_INa_inact) [millivolt]
        NV_Ith_S(this->mParameters, 12) = 0.68210000000000004; // (var_IK1__g_K1_0) [microS_per_nanoF]
        NV_Ith_S(this->mParameters, 13) = 0.024; // (var_IKr__g_Kr_0) [microS_per_nanoF]
        NV_Ith_S(this->mParameters, 14) = 0.039199999999999999; // (var_IKs__g_Ks) [microS_per_nanoF]
        NV_Ith_S(this->mParameters, 15) = 200.0; // (var_INaCa__K_NaCa) [nanoA_per_nanoF]
        NV_Ith_S(this->mParameters, 16) = 0.20000000000000001; // (var_Ito__g_to) [microS_per_nanoF]
    }

    Cellfink_noble_giles_model_2008FromCellMLCvode::~Cellfink_noble_giles_model_2008FromCellMLCvode()
    {
    }

    
    double Cellfink_noble_giles_model_2008FromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__Ca__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.0001092
        double var_chaste_interface__iKr_Markov__Or4 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.014
        double var_chaste_interface__iKs_Xs_gate__Xs = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ito_r_gate__r = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 2.11e-08
        double var_chaste_interface__iNa_m_gate__m = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 5.06e-06
        double var_chaste_interface__iCaL_f_gate__f = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.9995
        double var_chaste_interface__iCaL_fCass_gate__fCass = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ca__Ca_ss = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 0.0001893
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 25);
        // Units: millimolar; Initial value: 7.940167
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 26);
        // Units: millimolar; Initial value: 141.0167
        
        const double var_Environment__F = 96485.341499999995; // coulomb_per_mole
        const double var_Environment__R = 8314.4719999999998; // millijoule_per_mole_kelvin
        const double var_Environment__T = 310.0; // kelvin
        const double var_ICab__g_bca = 0.00047360000000000002; // microS_per_nanoF
        const double var_INaCa__K_sat = 0.10000000000000001; // dimensionless
        const double var_INaCa__Km_Ca = 1.3799999999999999; // millimolar
        const double var_INaCa__Km_Nai = 87.5; // millimolar
        const double var_INaCa__alpha = 2.5; // dimensionless
        const double var_INaCa__gamma = 0.34999999999999998; // dimensionless
        const double var_INaK__K_mNa = 40.0; // millimolar
        const double var_INaK__K_mk = 1.0; // millimolar
        const double var_INaK__P_NaK = 1.2969999999999999; // nanoA_per_nanoF
        const double var_INab__g_bna = 0.00029; // microS_per_nanoF
        const double var_IpCa__K_pCa = 0.00050000000000000001; // millimolar
        const double var_IpCa__g_pCa = 0.061899999999999997; // nanoA_per_nanoF
        const double var_IpCa__i_p_Ca = var_chaste_interface__Ca__Ca_i * var_IpCa__g_pCa / (var_chaste_interface__Ca__Ca_i + var_IpCa__K_pCa); // nanoA_per_nanoF
        const double var_IpK__g_pK = 0.0097300000000000008; // microS_per_nanoF
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 5) * exp(var_Environment__F * var_INaCa__gamma * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T)) - pow(NV_Ith_S(mParameters, 7), 3) * var_chaste_interface__Ca__Ca_i * var_INaCa__alpha * exp((-1.0 + var_INaCa__gamma) * var_Environment__F * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T))) * NV_Ith_S(mParameters, 15) / ((1.0 + var_INaCa__K_sat * exp((-1.0 + var_INaCa__gamma) * var_Environment__F * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T))) * (pow(NV_Ith_S(mParameters, 7), 3) + pow(var_INaCa__Km_Nai, 3)) * (NV_Ith_S(mParameters, 5) + var_INaCa__Km_Ca)); // nanoA_per_nanoF
        const double var_INaK__i_NaK = NV_Ith_S(mParameters, 6) * var_INaK__P_NaK * var_chaste_interface__Na__Na_i / ((NV_Ith_S(mParameters, 6) + var_INaK__K_mk) * (var_INaK__K_mNa + var_chaste_interface__Na__Na_i) * (1.0 + 0.035299999999999998 * exp(-var_Environment__F * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T)) + 0.1245 * exp(-0.10000000000000001 * var_Environment__F * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T)))); // nanoA_per_nanoF
        const double var_cell__i_Stim = 0.0; // nanoA_per_nanoF
        const double var_ICaL__i_CaL = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356880329828957e-6) ? (374338.90822798351 * (-14.999998664311967 + var_chaste_interface__cell__V) * (0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(9.9999999999858739e-8)) + 0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) - 0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) : (14447.286958825251 * (-15.0 + var_chaste_interface__cell__V) * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-1.1230167246823641 + 0.074867781645490947 * var_chaste_interface__cell__V)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-1.1230167246823641 + 0.074867781645490947 * var_chaste_interface__cell__V)))); // nanoA_per_nanoF
        const double var_iK1_rectification__Mg_Buf = 0.0356; // millimolar
        const double var_iK1_rectification__SPM = 0.0014613; // millimolar
        const double var_iK1_rectification__fac = 1.0648; // dimensionless
        const double var_iK1_rectification__phi = 0.88380000000000003; // dimensionless
        const double var_reversal_potentials__E_Ca = 0.5 * var_Environment__R * var_Environment__T * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__Ca__Ca_i) / var_Environment__F; // millivolt
        const double var_ICab__i_b_Ca = (-var_reversal_potentials__E_Ca + var_chaste_interface__cell__V) * var_ICab__g_bca; // nanoA_per_nanoF
        const double var_reversal_potentials__E_K = var_Environment__R * var_Environment__T * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__K__K_i) / var_Environment__F; // millivolt
        const double var_IKr__i_Kr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * (-7.8571428571428568 + 0.028571428571428571 * var_Environment__T) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 13) * var_chaste_interface__iKr_Markov__Or4; // nanoA_per_nanoF
        const double var_IpK__i_p_K = (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * var_IpK__g_pK / (1.0 + exp(4.1806020066889626 - 0.16722408026755853 * var_chaste_interface__cell__V)); // nanoA_per_nanoF
        const double var_Ito__i_to = (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 16) * var_chaste_interface__ito_r_gate__r * var_chaste_interface__ito_s_gate__s; // nanoA_per_nanoF
        const double var_iK1_rectification__KbMg = 0.45000000000000001 * exp(-0.050000000000000003 * var_chaste_interface__cell__V + 0.050000000000000003 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__Kd1SPM = 0.00069999999999999999 * exp(-0.20833333333333334 * var_chaste_interface__cell__V - 1.6666666666666667 * var_iK1_rectification__Mg_Buf + 0.20833333333333334 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__Kd2SPM = 0.040000000000000001 * exp(-0.10989010989010989 * var_chaste_interface__cell__V + 0.10989010989010989 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__KiMg = 2.7999999999999998 * exp(-0.0055555555555555558 * var_chaste_interface__cell__V + 0.0055555555555555558 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__rec2 = 1 / (1.0 + var_iK1_rectification__SPM / var_iK1_rectification__Kd2SPM); // dimensionless
        const double var_iK1_rectification__temp = 1.0 + var_iK1_rectification__Mg_Buf / var_iK1_rectification__KbMg; // dimensionless
        const double var_iK1_rectification__rec1 = pow(var_iK1_rectification__temp, 2) / (pow(var_iK1_rectification__temp, 3) + var_iK1_rectification__SPM / var_iK1_rectification__Kd1SPM + var_iK1_rectification__Mg_Buf / var_iK1_rectification__KiMg); // dimensionless
        const double var_iK1_rectification__xK1_inf = (1.0 - var_iK1_rectification__phi) * var_iK1_rectification__rec2 + var_iK1_rectification__phi * var_iK1_rectification__rec1; // dimensionless
        const double var_IK1__i_K1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * (-7.8571428571428568 + 0.028571428571428571 * var_Environment__T) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 12) * var_iK1_rectification__xK1_inf; // nanoA_per_nanoF
        const double var_reversal_potentials__E_Na = var_Environment__R * var_Environment__T * log(NV_Ith_S(mParameters, 7) / var_chaste_interface__Na__Na_i) / var_Environment__F; // millivolt
        const double var_INa__i_Na = pow(var_chaste_interface__iNa_m_gate__m, 3) * (-var_reversal_potentials__E_Na + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 9) * var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j; // nanoA_per_nanoF
        const double var_INab__i_b_Na = (-var_reversal_potentials__E_Na + var_chaste_interface__cell__V) * var_INab__g_bna; // nanoA_per_nanoF
        const double var_reversal_potentials__P_kna = 0.029999999999999999; // dimensionless
        const double var_reversal_potentials__E_Ks = var_Environment__R * var_Environment__T * log((NV_Ith_S(mParameters, 7) * var_reversal_potentials__P_kna + NV_Ith_S(mParameters, 6)) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__P_kna + var_chaste_interface__K__K_i)) / var_Environment__F; // millivolt
        const double var_IKs__i_Ks = pow(var_chaste_interface__iKs_Xs_gate__Xs, 2) * (-var_reversal_potentials__E_Ks + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 14); // nanoA_per_nanoF
        const double var_cell__i_tot = var_ICaL__i_CaL + var_ICab__i_b_Ca + var_IK1__i_K1 + var_IKr__i_Kr + var_IKs__i_Ks + var_INa__i_Na + var_INaCa__i_NaCa + var_INaK__i_NaK + var_INab__i_b_Na + var_IpCa__i_p_Ca + var_IpK__i_p_K + var_Ito__i_to + var_cell__i_Stim; // nanoA_per_nanoF
        const double var_chaste_interface__i_ionic = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_cell__i_tot; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellfink_noble_giles_model_2008FromCellMLCvode::EvaluateYDerivatives(double var_chaste_interface__Environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__Ca__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.0001092
        double var_chaste_interface__iKr_Markov__Cr1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.9786
        double var_chaste_interface__iKr_Markov__Cr2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.0031
        double var_chaste_interface__iKr_Markov__Cr3 = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0029
        double var_chaste_interface__iKr_Markov__Or4 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.014
        double var_chaste_interface__iKr_Markov__Ir5 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.0014
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr1 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr2 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr3 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BIr5 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__iKs_Xs_gate__Xs = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ito_r_gate__r = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 2.11e-08
        double var_chaste_interface__iNa_m_gate__m = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 5.06e-06
        double var_chaste_interface__iCaL_f_gate__f = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.9995
        double var_chaste_interface__iCaL_fCass_gate__fCass = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ca__Ca_SR = NV_Ith_S(rY, 22);
        // Units: millimolar; Initial value: 2.7656
        double var_chaste_interface__Ca__Ca_ss = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 0.0001893
        double var_chaste_interface__Irel__R_prime = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 0.9864
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 25);
        // Units: millimolar; Initial value: 7.940167
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 26);
        // Units: millimolar; Initial value: 141.0167

        // Mathematics
        double d_dt_chaste_interface_var_cell__V;
        const double var_Ca__V_sr = 0.0010939999999999999; // nanolitre
        const double var_Ca__V_ss = 5.4679999999999998e-5; // nanolitre
        const double var_Ca_buffer__Buf_c = 0.20000000000000001; // millimolar
        const double var_Ca_buffer__Buf_sr = 10.0; // millimolar
        const double var_Ca_buffer__Buf_ss = 0.40000000000000002; // millimolar
        const double var_Ca_buffer__K_buf_c = 0.001; // millimolar
        const double var_Ca_buffer__Ca_i_bufc = 1 / (1.0 + var_Ca_buffer__Buf_c * var_Ca_buffer__K_buf_c / pow((var_chaste_interface__Ca__Ca_i + var_Ca_buffer__K_buf_c), 2)); // dimensionless
        const double var_Ca_buffer__K_buf_sr = 0.29999999999999999; // millimolar
        const double var_Ca_buffer__Ca_sr_bufsr = 1 / (1.0 + var_Ca_buffer__Buf_sr * var_Ca_buffer__K_buf_sr / pow((var_chaste_interface__Ca__Ca_SR + var_Ca_buffer__K_buf_sr), 2)); // dimensionless
        const double var_Ca_buffer__K_buf_ss = 0.00025000000000000001; // millimolar
        const double var_Ca_buffer__Ca_ss_bufss = 1 / (1.0 + var_Ca_buffer__Buf_ss * var_Ca_buffer__K_buf_ss / pow((var_chaste_interface__Ca__Ca_ss + var_Ca_buffer__K_buf_ss), 2)); // dimensionless
        const double var_Environment__F = 96485.341499999995; // coulomb_per_mole
        const double var_Environment__R = 8314.4719999999998; // millijoule_per_mole_kelvin
        const double var_Environment__T = 310.0; // kelvin
        const double var_ICab__g_bca = 0.00047360000000000002; // microS_per_nanoF
        const double var_INaCa__K_sat = 0.10000000000000001; // dimensionless
        const double var_INaCa__Km_Ca = 1.3799999999999999; // millimolar
        const double var_INaCa__Km_Nai = 87.5; // millimolar
        const double var_INaCa__alpha = 2.5; // dimensionless
        const double var_INaCa__gamma = 0.34999999999999998; // dimensionless
        const double var_INaK__K_mNa = 40.0; // millimolar
        const double var_INaK__K_mk = 1.0; // millimolar
        const double var_INaK__P_NaK = 1.2969999999999999; // nanoA_per_nanoF
        const double var_INab__g_bna = 0.00029; // microS_per_nanoF
        const double var_Ileak_Iup_Ixfer__K_up = 0.00025000000000000001; // millimolar
        const double var_Ileak_Iup_Ixfer__Vol_xfer = 0.0038; // per_millisecond
        const double var_Ileak_Iup_Ixfer__i_leak = (-var_chaste_interface__Ca__Ca_i + var_chaste_interface__Ca__Ca_SR) * NV_Ith_S(mParameters, 0); // millimolar_per_millisecond
        const double var_Ileak_Iup_Ixfer__i_up = NV_Ith_S(mParameters, 2) / (1.0 + pow(var_Ileak_Iup_Ixfer__K_up, 2) / pow(var_chaste_interface__Ca__Ca_i, 2)); // millimolar_per_millisecond
        const double var_Ileak_Iup_Ixfer__i_xfer = (-var_chaste_interface__Ca__Ca_i + var_chaste_interface__Ca__Ca_ss) * var_Ileak_Iup_Ixfer__Vol_xfer; // millimolar_per_millisecond
        const double var_IpCa__K_pCa = 0.00050000000000000001; // millimolar
        const double var_IpCa__g_pCa = 0.061899999999999997; // nanoA_per_nanoF
        const double var_IpCa__i_p_Ca = var_chaste_interface__Ca__Ca_i * var_IpCa__g_pCa / (var_chaste_interface__Ca__Ca_i + var_IpCa__K_pCa); // nanoA_per_nanoF
        const double var_IpK__g_pK = 0.0097300000000000008; // microS_per_nanoF
        const double var_Irel__EC = 1.5; // millimolar
        const double var_Irel__k1_prime = 0.14999999999999999; // per_millimolar2_per_millisecond
        const double var_Irel__k2_prime = 0.044999999999999998; // per_millimolar_per_millisecond
        const double var_Irel__k3 = 0.059999999999999998; // per_millisecond
        const double var_Irel__k4 = 0.0050000000000000001; // per_millisecond
        const double var_Irel__max_sr = 2.5; // dimensionless
        const double var_Irel__min_sr = 1.0; // dimensionless
        const double var_Irel__kcasr = -(-var_Irel__min_sr + var_Irel__max_sr) / (1.0 + pow(var_Irel__EC, 2) / pow(var_chaste_interface__Ca__Ca_SR, 2)) + var_Irel__max_sr; // dimensionless
        const double var_Irel__k1 = var_Irel__k1_prime / var_Irel__kcasr; // per_millimolar2_per_millisecond
        const double var_Irel__O = pow(var_chaste_interface__Ca__Ca_ss, 2) * var_chaste_interface__Irel__R_prime * var_Irel__k1 / (pow(var_chaste_interface__Ca__Ca_ss, 2) * var_Irel__k1 + var_Irel__k3); // dimensionless
        const double var_Irel__i_rel = (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_SR) * var_Irel__O * NV_Ith_S(mParameters, 1); // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca__Ca_SR = (-var_Ileak_Iup_Ixfer__i_leak - var_Irel__i_rel + var_Ileak_Iup_Ixfer__i_up) * var_Ca_buffer__Ca_sr_bufsr; // millimolar / millisecond
        const double var_Irel__k2 = var_Irel__k2_prime * var_Irel__kcasr; // per_millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Irel__R_prime = (1.0 - var_chaste_interface__Irel__R_prime) * var_Irel__k4 - var_chaste_interface__Ca__Ca_ss * var_chaste_interface__Irel__R_prime * var_Irel__k2; // 1 / millisecond
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 5) * exp(var_Environment__F * var_INaCa__gamma * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T)) - pow(NV_Ith_S(mParameters, 7), 3) * var_chaste_interface__Ca__Ca_i * var_INaCa__alpha * exp((-1.0 + var_INaCa__gamma) * var_Environment__F * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T))) * NV_Ith_S(mParameters, 15) / ((1.0 + var_INaCa__K_sat * exp((-1.0 + var_INaCa__gamma) * var_Environment__F * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T))) * (pow(NV_Ith_S(mParameters, 7), 3) + pow(var_INaCa__Km_Nai, 3)) * (NV_Ith_S(mParameters, 5) + var_INaCa__Km_Ca)); // nanoA_per_nanoF
        const double var_INaK__i_NaK = NV_Ith_S(mParameters, 6) * var_INaK__P_NaK * var_chaste_interface__Na__Na_i / ((NV_Ith_S(mParameters, 6) + var_INaK__K_mk) * (var_INaK__K_mNa + var_chaste_interface__Na__Na_i) * (1.0 + 0.035299999999999998 * exp(-var_Environment__F * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T)) + 0.1245 * exp(-0.10000000000000001 * var_Environment__F * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T)))); // nanoA_per_nanoF
        const double var_cell__Vol_c = 0.016403999999999998; // nanolitre
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_cell__i_Stim = 1.0000000000000002 * var_cell__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // nanoA_per_nanoF
        const double var_iCaL_d_gate__alpha_d = 0.25 + 1.3999999999999999 / (1.0 + exp(-2.6923076923076925 - 0.076923076923076927 * var_chaste_interface__cell__V)); // dimensionless
        const double var_iCaL_d_gate__beta_d = 1.3999999999999999 / (1.0 + exp(1.0 + 0.20000000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double var_iCaL_d_gate__d_inf_shift = 5.0; // millivolt
        const double var_iCaL_d_gate__d_inf = 1 / (1.0 + exp(0.13333333333333333 * var_iCaL_d_gate__d_inf_shift - 0.13333333333333333 * var_chaste_interface__cell__V)); // dimensionless
        const double var_iCaL_d_gate__gamma_d = 1 / (1.0 + exp(2.5 - 0.050000000000000003 * var_chaste_interface__cell__V)); // millisecond
        const double var_iCaL_d_gate__tau_d = var_iCaL_d_gate__alpha_d * var_iCaL_d_gate__beta_d + var_iCaL_d_gate__gamma_d; // millisecond
        const double d_dt_chaste_interface_var_iCaL_d_gate__d = (-var_chaste_interface__iCaL_d_gate__d + var_iCaL_d_gate__d_inf) / var_iCaL_d_gate__tau_d; // 1 / millisecond
        const double var_iCaL_f2_gate__f2_inf = 0.25 + 0.75 / (1.0 + exp(5.0 + 0.14285714285714285 * var_chaste_interface__cell__V)); // dimensionless
        const double var_iCaL_f2_gate__tau_f2 = 40.0 / (1.0 + exp(3.0 + 0.10000000000000001 * var_chaste_interface__cell__V)) + 15.5 / (1.0 + exp(2.5 - 0.10000000000000001 * var_chaste_interface__cell__V)) + 281.0 * exp(-3.0375000000000001 * pow((1 + 0.037037037037037035 * var_chaste_interface__cell__V), 2)); // millisecond
        const double d_dt_chaste_interface_var_iCaL_f2_gate__f2 = (-var_chaste_interface__iCaL_f2_gate__f2 + var_iCaL_f2_gate__f2_inf) / var_iCaL_f2_gate__tau_f2; // 1 / millisecond
        const double var_iCaL_fCass_gate__fCass_inf = 0.59999999999999998 + 0.40000000000000002 / (1.0 + 399.99999999999994 * pow(var_chaste_interface__Ca__Ca_ss, 2)); // dimensionless
        const double var_iCaL_fCass_gate__tau_fCass = 2.0 + 80.0 / (1.0 + 399.99999999999994 * pow(var_chaste_interface__Ca__Ca_ss, 2)); // millisecond
        const double d_dt_chaste_interface_var_iCaL_fCass_gate__fCass = (-var_chaste_interface__iCaL_fCass_gate__fCass + var_iCaL_fCass_gate__fCass_inf) / var_iCaL_fCass_gate__tau_fCass; // 1 / millisecond
        const double var_ICaL__i_CaL = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356880329828957e-6) ? (374338.90822798351 * (-14.999998664311967 + var_chaste_interface__cell__V) * (0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(9.9999999999858739e-8)) + 0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) - 0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) : (14447.286958825251 * (-15.0 + var_chaste_interface__cell__V) * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-1.1230167246823641 + 0.074867781645490947 * var_chaste_interface__cell__V)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-1.1230167246823641 + 0.074867781645490947 * var_chaste_interface__cell__V)))); // nanoA_per_nanoF
        const double d_dt_chaste_interface_var_Ca__Ca_ss = (var_Ca__V_sr * var_Irel__i_rel / var_Ca__V_ss - var_Ileak_Iup_Ixfer__i_xfer * var_cell__Vol_c / var_Ca__V_ss - 0.5 * var_ICaL__i_CaL * NV_Ith_S(mParameters, 3) / (var_Ca__V_ss * var_Environment__F)) * var_Ca_buffer__Ca_ss_bufss; // millimolar / millisecond
        const double var_iCaL_f_gate__f_inf = 1 / (1.0 + exp(2.8571428571428572 + 0.14285714285714285 * var_chaste_interface__cell__V)); // dimensionless
        const double var_iCaL_f_gate__tau_f = 5.0 + 50.0 / (1.0 + exp(1.3 - 0.10000000000000001 * var_chaste_interface__cell__V)) + 45.0 / (1.0 + exp(3.0 + 0.10000000000000001 * var_chaste_interface__cell__V)) + 275.625 * exp(-3.2400000000000002 * pow((1 + 0.037037037037037035 * var_chaste_interface__cell__V), 2)); // millisecond
        const double d_dt_chaste_interface_var_iCaL_f_gate__f = (-var_chaste_interface__iCaL_f_gate__f + var_iCaL_f_gate__f_inf) / var_iCaL_f_gate__tau_f; // 1 / millisecond
        const double var_iK1_rectification__Mg_Buf = 0.0356; // millimolar
        const double var_iK1_rectification__SPM = 0.0014613; // millimolar
        const double var_iK1_rectification__fac = 1.0648; // dimensionless
        const double var_iK1_rectification__phi = 0.88380000000000003; // dimensionless
        const double var_iKr_Markov__T_Base = 310.0; // kelvin
        const double var_iKr_Markov__alpha_xr1 = var_Environment__T * exp(24.335000000000001 + (-25.914000000000001 + 0.0112 * var_chaste_interface__cell__V) * var_iKr_Markov__T_Base / var_Environment__T) / var_iKr_Markov__T_Base; // per_millisecond
        const double var_iKr_Markov__alpha_xr2 = var_Environment__T * exp(22.745999999999999 - 25.914000000000001 * var_iKr_Markov__T_Base / var_Environment__T) / var_iKr_Markov__T_Base; // per_millisecond
        const double var_iKr_Markov__alpha_xr3 = var_Environment__T * exp(22.097999999999999 + (-25.914000000000001 + 0.036499999999999998 * var_chaste_interface__cell__V) * var_iKr_Markov__T_Base / var_Environment__T) / var_iKr_Markov__T_Base; // per_millisecond
        const double var_iKr_Markov__alpha_xr4 = 1.9631681698237122 * pow((1 / NV_Ith_S(mParameters, 6)), 0.40000000000000002) * var_Environment__T * exp(30.015999999999998 + (-30.888000000000002 + 0.0223 * var_chaste_interface__cell__V) * var_iKr_Markov__T_Base / var_Environment__T) / var_iKr_Markov__T_Base; // per_millisecond
        const double var_iKr_Markov__beta_xr1 = var_Environment__T * exp(13.688000000000001 + (-15.707000000000001 - 0.060299999999999999 * var_chaste_interface__cell__V) * var_iKr_Markov__T_Base / var_Environment__T) / var_iKr_Markov__T_Base; // per_millisecond
        const double d_dt_chaste_interface_var_iKr_Markov__Cr1 = var_chaste_interface__iKr_Markov__Cr2 * var_iKr_Markov__beta_xr1 - var_chaste_interface__iKr_Markov__Cr1 * var_iKr_Markov__alpha_xr1; // 1 / millisecond
        const double var_iKr_Markov__beta_xr2 = var_Environment__T * exp(13.193 - 15.707000000000001 * var_iKr_Markov__T_Base / var_Environment__T) / var_iKr_Markov__T_Base; // per_millisecond
        const double d_dt_chaste_interface_var_iKr_Markov__Cr2 = var_chaste_interface__iKr_Markov__Cr1 * var_iKr_Markov__alpha_xr1 + var_chaste_interface__iKr_Markov__Cr3 * var_iKr_Markov__beta_xr2 - (var_iKr_Markov__alpha_xr2 + var_iKr_Markov__beta_xr1) * var_chaste_interface__iKr_Markov__Cr2; // 1 / millisecond
        const double var_iKr_Markov__beta_xr3 = var_Environment__T * exp(7.3129999999999997 + (-15.707000000000001 - 0.039899999999999998 * var_chaste_interface__cell__V) * var_iKr_Markov__T_Base / var_Environment__T) / var_iKr_Markov__T_Base; // per_millisecond
        const double d_dt_chaste_interface_var_iKr_Markov__Cr3 = var_chaste_interface__iKr_Markov__Cr2 * var_iKr_Markov__alpha_xr2 + var_chaste_interface__iKr_Markov__Or4 * var_iKr_Markov__beta_xr3 - (var_iKr_Markov__alpha_xr3 + var_iKr_Markov__beta_xr2) * var_chaste_interface__iKr_Markov__Cr3; // 1 / millisecond
        const double var_iKr_Markov__beta_xr4 = var_Environment__T * exp(30.061 + (-33.243000000000002 - 0.031199999999999999 * var_chaste_interface__cell__V) * var_iKr_Markov__T_Base / var_Environment__T) / var_iKr_Markov__T_Base; // per_millisecond
        const double d_dt_chaste_interface_var_iKr_Markov__Ir5 = var_chaste_interface__iKr_Markov__Or4 * var_iKr_Markov__alpha_xr4 - var_chaste_interface__iKr_Markov__Ir5 * var_iKr_Markov__beta_xr4; // 1 / millisecond
        const double d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr1 = var_iKr_Markov__beta_xr1 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr2 - var_iKr_Markov__alpha_xr1 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr1; // 1 / millisecond
        const double d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr2 = var_iKr_Markov__alpha_xr1 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr1 + var_iKr_Markov__beta_xr2 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr3 - (var_iKr_Markov__alpha_xr2 + var_iKr_Markov__beta_xr1) * var_chaste_interface__iKr_Markov_Sotalol_block__BCr2; // 1 / millisecond
        const double d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr3 = var_iKr_Markov__alpha_xr2 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr2 + var_iKr_Markov__beta_xr3 * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 - (var_iKr_Markov__alpha_xr3 + var_iKr_Markov__beta_xr2) * var_chaste_interface__iKr_Markov_Sotalol_block__BCr3; // 1 / millisecond
        const double d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BIr5 = var_iKr_Markov__alpha_xr4 * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 - var_iKr_Markov__beta_xr4 * var_chaste_interface__iKr_Markov_Sotalol_block__BIr5; // 1 / millisecond
        const double var_iKr_Markov_Sotalol_block__Sotalol_mM = 0; // millimolar
        const double var_iKr_Markov_Sotalol_block__kBinding = 0.0050000000000000001; // per_millimolar_per_millisecond
        const double var_iKr_Markov_Sotalol_block__OtoB = var_chaste_interface__iKr_Markov__Or4 * var_iKr_Markov_Sotalol_block__Sotalol_mM * var_iKr_Markov_Sotalol_block__kBinding; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__kDiss = 0.00125; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__BtoO = var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 * var_iKr_Markov_Sotalol_block__kDiss; // per_millisecond
        const double d_dt_chaste_interface_var_iKr_Markov__Or4 = -var_iKr_Markov_Sotalol_block__OtoB + var_chaste_interface__iKr_Markov__Cr3 * var_iKr_Markov__alpha_xr3 + var_chaste_interface__iKr_Markov__Ir5 * var_iKr_Markov__beta_xr4 - (var_iKr_Markov__alpha_xr4 + var_iKr_Markov__beta_xr3) * var_chaste_interface__iKr_Markov__Or4 + var_iKr_Markov_Sotalol_block__BtoO; // 1 / millisecond
        const double d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BOr4 = -var_iKr_Markov_Sotalol_block__BtoO + var_iKr_Markov__alpha_xr3 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr3 + var_iKr_Markov__beta_xr4 * var_chaste_interface__iKr_Markov_Sotalol_block__BIr5 - (var_iKr_Markov__alpha_xr4 + var_iKr_Markov__beta_xr3) * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 + var_iKr_Markov_Sotalol_block__OtoB; // 1 / millisecond
        const double var_iKs_Xs_gate__alpha_xs = 1400.0 / sqrt(1.0 + exp(0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__cell__V)); // dimensionless
        const double var_iKs_Xs_gate__beta_xs = 1 / (1.0 + exp(-2.3333333333333335 + 0.066666666666666666 * var_chaste_interface__cell__V)); // dimensionless
        const double var_iKs_Xs_gate__tau_xs = 80.0 + var_iKs_Xs_gate__alpha_xs * var_iKs_Xs_gate__beta_xs; // millisecond
        const double var_iKs_Xs_gate__xs_inf = 1 / (1.0 + exp(-0.35714285714285715 - 0.071428571428571425 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_iKs_Xs_gate__Xs = (-var_chaste_interface__iKs_Xs_gate__Xs + var_iKs_Xs_gate__xs_inf) / var_iKs_Xs_gate__tau_xs; // 1 / millisecond
        const double var_iNa_h_gate__alpha_h = ((var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 11)) ? (0.057000000000000002 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 11) - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_millisecond
        const double var_iNa_h_gate__beta_h = ((var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 11)) ? (310000.0 * exp(0.34849999999999998 * var_chaste_interface__cell__V - 0.34849999999999998 * NV_Ith_S(mParameters, 11)) + 2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * NV_Ith_S(mParameters, 11))) : (5.9230769230769234 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 11) - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_millisecond
        const double var_iNa_h_gate__h_inf = 0.01 * NV_Ith_S(mParameters, 10) + (1.0 - 0.01 * NV_Ith_S(mParameters, 10)) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__cell__V - 0.13458950201884254 * NV_Ith_S(mParameters, 11))), 2); // dimensionless
        const double var_iNa_h_gate__tau_h = 1 / (var_iNa_h_gate__alpha_h + var_iNa_h_gate__beta_h); // millisecond
        const double d_dt_chaste_interface_var_iNa_h_gate__h = (-var_chaste_interface__iNa_h_gate__h + var_iNa_h_gate__h_inf) / var_iNa_h_gate__tau_h; // 1 / millisecond
        const double var_iNa_j_gate__alpha_j = ((var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 11)) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-25428.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * NV_Ith_S(mParameters, 11)) - 6.9480000000000002e-6 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 11) - 0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * NV_Ith_S(mParameters, 11)))) : (0)); // per_millisecond
        const double var_iNa_j_gate__beta_j = ((var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 11)) ? (0.024240000000000001 * exp(0.01052 * NV_Ith_S(mParameters, 11) - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 11) - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__cell__V - 0.057000000000000002 * NV_Ith_S(mParameters, 11)) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 11) - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_millisecond
        const double var_iNa_j_gate__j_inf = 0.01 * NV_Ith_S(mParameters, 10) + (1.0 - 0.01 * NV_Ith_S(mParameters, 10)) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__cell__V - 0.13458950201884254 * NV_Ith_S(mParameters, 11))), 2); // dimensionless
        const double var_iNa_j_gate__tau_j = 1 / (var_iNa_j_gate__alpha_j + var_iNa_j_gate__beta_j); // millisecond
        const double d_dt_chaste_interface_var_iNa_j_gate__j = (-var_chaste_interface__iNa_j_gate__j + var_iNa_j_gate__j_inf) / var_iNa_j_gate__tau_j; // 1 / millisecond
        const double var_iNa_m_gate__alpha_m = 1 / (1.0 + exp(-12.0 - 0.20000000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double var_iNa_m_gate__beta_m = 0.10000000000000001 / (1.0 + exp(7.0 + 0.20000000000000001 * var_chaste_interface__cell__V)) + 0.10000000000000001 / (1.0 + exp(-0.25 + 0.0050000000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double var_iNa_m_gate__m_inf = 1 / pow((1.0 + exp(-6.2967884828349945 - 0.11074197120708749 * var_chaste_interface__cell__V)), 2); // dimensionless
        const double var_iNa_m_gate__tau_m = var_iNa_m_gate__alpha_m * var_iNa_m_gate__beta_m; // millisecond
        const double d_dt_chaste_interface_var_iNa_m_gate__m = (-var_chaste_interface__iNa_m_gate__m + var_iNa_m_gate__m_inf) / var_iNa_m_gate__tau_m; // 1 / millisecond
        const double var_ito_r_gate__r_inf = 1 / (1.0 + exp(3.3333333333333335 - 0.16666666666666666 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ito_r_gate__tau_r = 0.80000000000000004 + 9.5 * exp(-0.88888888888888884 * pow((1 + 0.025000000000000001 * var_chaste_interface__cell__V), 2)); // millisecond
        const double d_dt_chaste_interface_var_ito_r_gate__r = (-var_chaste_interface__ito_r_gate__r + var_ito_r_gate__r_inf) / var_ito_r_gate__tau_r; // 1 / millisecond
        const double var_ito_s_gate__s_inf = 1 / (1.0 + exp(4.0 + 0.20000000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ito_s_gate__tau_s = 3.0 + 5.0 / (1.0 + exp(-4.0 + 0.20000000000000001 * var_chaste_interface__cell__V)) + 85.0 * exp(-6.328125 * pow((1 + 0.022222222222222223 * var_chaste_interface__cell__V), 2)); // millisecond
        const double d_dt_chaste_interface_var_ito_s_gate__s = (-var_chaste_interface__ito_s_gate__s + var_ito_s_gate__s_inf) / var_ito_s_gate__tau_s; // 1 / millisecond
        const double var_reversal_potentials__E_Ca = 0.5 * var_Environment__R * var_Environment__T * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__Ca__Ca_i) / var_Environment__F; // millivolt
        const double var_ICab__i_b_Ca = (-var_reversal_potentials__E_Ca + var_chaste_interface__cell__V) * var_ICab__g_bca; // nanoA_per_nanoF
        const double d_dt_chaste_interface_var_Ca__Ca_i = ((-var_Ileak_Iup_Ixfer__i_up + var_Ileak_Iup_Ixfer__i_leak) * var_Ca__V_sr / var_cell__Vol_c - 0.5 * (-2.0 * var_INaCa__i_NaCa + var_ICab__i_b_Ca + var_IpCa__i_p_Ca) * NV_Ith_S(mParameters, 3) / (var_Environment__F * var_cell__Vol_c) + var_Ileak_Iup_Ixfer__i_xfer) * var_Ca_buffer__Ca_i_bufc; // millimolar / millisecond
        const double var_reversal_potentials__E_K = var_Environment__R * var_Environment__T * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__K__K_i) / var_Environment__F; // millivolt
        const double var_IKr__i_Kr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * (-7.8571428571428568 + 0.028571428571428571 * var_Environment__T) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 13) * var_chaste_interface__iKr_Markov__Or4; // nanoA_per_nanoF
        const double var_IpK__i_p_K = (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * var_IpK__g_pK / (1.0 + exp(4.1806020066889626 - 0.16722408026755853 * var_chaste_interface__cell__V)); // nanoA_per_nanoF
        const double var_Ito__i_to = (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 16) * var_chaste_interface__ito_r_gate__r * var_chaste_interface__ito_s_gate__s; // nanoA_per_nanoF
        const double var_iK1_rectification__KbMg = 0.45000000000000001 * exp(-0.050000000000000003 * var_chaste_interface__cell__V + 0.050000000000000003 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__Kd1SPM = 0.00069999999999999999 * exp(-0.20833333333333334 * var_chaste_interface__cell__V - 1.6666666666666667 * var_iK1_rectification__Mg_Buf + 0.20833333333333334 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__Kd2SPM = 0.040000000000000001 * exp(-0.10989010989010989 * var_chaste_interface__cell__V + 0.10989010989010989 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__KiMg = 2.7999999999999998 * exp(-0.0055555555555555558 * var_chaste_interface__cell__V + 0.0055555555555555558 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__rec2 = 1 / (1.0 + var_iK1_rectification__SPM / var_iK1_rectification__Kd2SPM); // dimensionless
        const double var_iK1_rectification__temp = 1.0 + var_iK1_rectification__Mg_Buf / var_iK1_rectification__KbMg; // dimensionless
        const double var_iK1_rectification__rec1 = pow(var_iK1_rectification__temp, 2) / (pow(var_iK1_rectification__temp, 3) + var_iK1_rectification__SPM / var_iK1_rectification__Kd1SPM + var_iK1_rectification__Mg_Buf / var_iK1_rectification__KiMg); // dimensionless
        const double var_iK1_rectification__xK1_inf = (1.0 - var_iK1_rectification__phi) * var_iK1_rectification__rec2 + var_iK1_rectification__phi * var_iK1_rectification__rec1; // dimensionless
        const double var_IK1__i_K1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * (-7.8571428571428568 + 0.028571428571428571 * var_Environment__T) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 12) * var_iK1_rectification__xK1_inf; // nanoA_per_nanoF
        const double var_reversal_potentials__E_Na = var_Environment__R * var_Environment__T * log(NV_Ith_S(mParameters, 7) / var_chaste_interface__Na__Na_i) / var_Environment__F; // millivolt
        const double var_INa__i_Na = pow(var_chaste_interface__iNa_m_gate__m, 3) * (-var_reversal_potentials__E_Na + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 9) * var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j; // nanoA_per_nanoF
        const double var_INab__i_b_Na = (-var_reversal_potentials__E_Na + var_chaste_interface__cell__V) * var_INab__g_bna; // nanoA_per_nanoF
        const double d_dt_chaste_interface_var_Na__Na_i = -(3.0 * var_INaCa__i_NaCa + 3.0 * var_INaK__i_NaK + var_INa__i_Na + var_INab__i_b_Na) * NV_Ith_S(mParameters, 4) * NV_Ith_S(mParameters, 3) / (var_Environment__F * var_cell__Vol_c); // millimolar / millisecond
        const double var_reversal_potentials__P_kna = 0.029999999999999999; // dimensionless
        const double var_reversal_potentials__E_Ks = var_Environment__R * var_Environment__T * log((NV_Ith_S(mParameters, 7) * var_reversal_potentials__P_kna + NV_Ith_S(mParameters, 6)) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__P_kna + var_chaste_interface__K__K_i)) / var_Environment__F; // millivolt
        const double var_IKs__i_Ks = pow(var_chaste_interface__iKs_Xs_gate__Xs, 2) * (-var_reversal_potentials__E_Ks + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 14); // nanoA_per_nanoF
        const double d_dt_chaste_interface_var_K__K_i = -(-2.0 * var_INaK__i_NaK + var_IK1__i_K1 + var_IKr__i_Kr + var_IKs__i_Ks + var_IpK__i_p_K + var_Ito__i_to + var_cell__i_Stim) * NV_Ith_S(mParameters, 4) * NV_Ith_S(mParameters, 3) / (var_Environment__F * var_cell__Vol_c); // millimolar / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_cell__V = 0.0;
        }
        else
        {
            const double var_cell__i_tot = var_ICaL__i_CaL + var_ICab__i_b_Ca + var_IK1__i_K1 + var_IKr__i_Kr + var_IKs__i_Ks + var_INa__i_Na + var_INaCa__i_NaCa + var_INaK__i_NaK + var_INab__i_b_Na + var_IpCa__i_p_Ca + var_IpK__i_p_K + var_Ito__i_to + var_cell__i_Stim; // nanoA_per_nanoF
            d_dt_chaste_interface_var_cell__V = -var_cell__i_tot; // millivolt / millisecond
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_cell__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_Ca__Ca_i;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_iKr_Markov__Cr1;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_iKr_Markov__Cr2;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_iKr_Markov__Cr3;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_iKr_Markov__Or4;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_iKr_Markov__Ir5;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr1;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr2;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr3;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BOr4;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BIr5;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_iKs_Xs_gate__Xs;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_ito_s_gate__s;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_ito_r_gate__r;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_iNa_m_gate__m;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_iNa_h_gate__h;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_iNa_j_gate__j;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_iCaL_d_gate__d;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_iCaL_f_gate__f;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_iCaL_f2_gate__f2;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_iCaL_fCass_gate__fCass;
        NV_Ith_S(rDY,22) = d_dt_chaste_interface_var_Ca__Ca_SR;
        NV_Ith_S(rDY,23) = d_dt_chaste_interface_var_Ca__Ca_ss;
        NV_Ith_S(rDY,24) = d_dt_chaste_interface_var_Irel__R_prime;
        NV_Ith_S(rDY,25) = d_dt_chaste_interface_var_Na__Na_i;
        NV_Ith_S(rDY,26) = d_dt_chaste_interface_var_K__K_i;
    }

    void Cellfink_noble_giles_model_2008FromCellMLCvode::EvaluateAnalyticJacobian(double var_chaste_interface__Environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__Ca__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.0001092
        double var_chaste_interface__iKr_Markov__Cr1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.9786
        double var_chaste_interface__iKr_Markov__Cr2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.0031
        double var_chaste_interface__iKr_Markov__Cr3 = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0029
        double var_chaste_interface__iKr_Markov__Or4 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.014
        double var_chaste_interface__iKr_Markov__Ir5 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.0014
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr1 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr2 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr3 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BIr5 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__iKs_Xs_gate__Xs = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ito_r_gate__r = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 2.11e-08
        double var_chaste_interface__iNa_m_gate__m = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 5.06e-06
        double var_chaste_interface__iCaL_f_gate__f = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.9995
        double var_chaste_interface__iCaL_fCass_gate__fCass = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ca__Ca_SR = NV_Ith_S(rY, 22);
        // Units: millimolar; Initial value: 2.7656
        double var_chaste_interface__Ca__Ca_ss = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 0.0001893
        double var_chaste_interface__Irel__R_prime = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 0.9864
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 25);
        // Units: millimolar; Initial value: 7.940167
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 26);
        // Units: millimolar; Initial value: 141.0167
        const double var_x0 = exp(9.9999999999858739e-8);
        const double var_x1 = 1 / (-1.0 + var_x0);
        const double var_x2 = -NV_Ith_S(mParameters, 5);
        const double var_x3 = 0.25 * var_chaste_interface__Ca__Ca_ss;
        const double var_x4 = var_x1 * (var_x2 + var_x0 * var_x3);
        const double var_x5 = var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f_gate__f;
        const double var_x6 = var_x4 * var_x5;
        const double var_x7 = NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass;
        const double var_x8 = 7223.6434794126253 * var_x7;
        const double var_x9 = exp(-9.9999999999858739e-8);
        const double var_x10 = 1 / (-1.0 + var_x9);
        const double var_x11 = var_x10 * (var_x2 + var_x3 * var_x9);
        const double var_x12 = var_x11 * var_x5;
        const double var_x13 = -15.0 + var_chaste_interface__cell__V;
        const double var_x14 = fabs(var_x13) < 1.3356880329828957e-6;
        const double var_x15 = exp(-1.1230167246823641 + 0.074867781645490947 * var_chaste_interface__cell__V);
        const double var_x16 = -1.0 + var_x15;
        const double var_x17 = 1 / var_x16;
        const double var_x18 = var_x5 * var_x7;
        const double var_x19 = var_x17 * var_x18;
        const double var_x20 = var_x2 + var_x15 * var_x3;
        const double var_x21 = 14447.286958825251 * var_x20;
        const double var_x22 = var_x19 * var_x21;
        const double var_x23 = var_x13 * var_x15;
        const double var_x24 = var_x19 * var_x23;
        const double var_x25 = ((var_x14) ? (var_x12 * var_x8 + var_x6 * var_x8) : (var_x22 + 270.40908135076944 * var_x24 * var_chaste_interface__Ca__Ca_ss - 1081.6363254030778 * var_x18 * var_x20 * var_x23 / pow(var_x16, 2)));
        const double var_x26 = exp(4.1806020066889626 - 0.16722408026755853 * var_chaste_interface__cell__V);
        const double var_x27 = 1.0 + var_x26;
        const double var_x28 = 1 / var_x27;
        const double var_x29 = pow(var_chaste_interface__iKs_Xs_gate__Xs, 2) * NV_Ith_S(mParameters, 14);
        const double var_x30 = NV_Ith_S(mParameters, 16) * var_chaste_interface__ito_r_gate__r;
        const double var_x31 = var_x30 * var_chaste_interface__ito_s_gate__s;
        const double var_x32 = sqrt(NV_Ith_S(mParameters, 6));
        const double var_x33 = 0.43033148291193518 * var_x32;
        const double var_x34 = 1 / var_chaste_interface__K__K_i;
        const double var_x35 = log(var_x34 * NV_Ith_S(mParameters, 6));
        const double var_x36 = 1 / exp(3.1258035549938383 * var_x35 - 0.10989010989010989 * var_chaste_interface__cell__V);
        const double var_x37 = 1.0 + 0.036532500000000002 * var_x36;
        const double var_x38 = -0.050000000000000003 * var_chaste_interface__cell__V;
        const double var_x39 = 1 / exp(var_x38 + 1.4222406175221964 * var_x35);
        const double var_x40 = 1.0 + 0.079111111111111104 * var_x39;
        const double var_x41 = pow(var_x40, 2);
        const double var_x42 = pow(var_x40, 3);
        const double var_x43 = 1 / exp(-0.059333333333333335 + 5.9260025730091517 * var_x35 - 0.20833333333333334 * var_chaste_interface__cell__V);
        const double var_x44 = 1 / exp(0.15802673528024405 * var_x35 - 0.0055555555555555558 * var_chaste_interface__cell__V);
        const double var_x45 = 1 / (var_x42 + 2.0875714285714286 * var_x43 + 0.012714285714285714 * var_x44);
        const double var_x46 = (0.11619999999999997 / var_x37 + 0.88380000000000003 * var_x41 * var_x45) * NV_Ith_S(mParameters, 12);
        const double var_x47 = var_x33 * NV_Ith_S(mParameters, 13);
        const double var_x48 = 26.713760659695652 * var_x35;
        const double var_x49 = -var_x48 + var_chaste_interface__cell__V;
        const double var_x50 = var_x26 * var_x49 / pow(var_x27, 2);
        const double var_x51 = pow(var_chaste_interface__iNa_m_gate__m, 3);
        const double var_x52 = var_x51 * NV_Ith_S(mParameters, 9) * var_chaste_interface__iNa_j_gate__j;
        const double var_x53 = var_x52 * var_chaste_interface__iNa_h_gate__h;
        const double var_x54 = var_x36 / pow(var_x37, 2);
        const double var_x55 = var_x39 * var_x40 * var_x45;
        const double var_x56 = var_x39 * var_x41;
        const double var_x57 = 0.20280156807699834 * var_x41 / pow((var_x43 + 0.0060904673920481765 * var_x44 + 0.47902552521727226 * var_x42), 2);
        const double var_x58 = 0.00699184 * var_x55 - 0.00046649192307692298 * var_x54 + var_x57 * (-7.0634920634920635e-5 * var_x44 - 0.011866666666666666 * var_x56 - 0.43491071428571432 * var_x43);
        const double var_x59 = var_x49 * NV_Ith_S(mParameters, 12);
        const double var_x60 = var_x33 * var_x59;
        const double var_x61 = exp(-0.024332029034784559 * var_chaste_interface__cell__V);
        const double var_x62 = pow(NV_Ith_S(mParameters, 7), 3);
        const double var_x63 = var_x61 * var_x62;
        const double var_x64 = var_x63 * var_chaste_interface__Ca__Ca_i;
        const double var_x65 = NV_Ith_S(mParameters, 5) * exp(0.013101861787960915 * var_chaste_interface__cell__V);
        const double var_x66 = var_x65 * pow(var_chaste_interface__Na__Na_i, 3);
        const double var_x67 = 1.0 + 0.10000000000000001 * var_x61;
        const double var_x68 = NV_Ith_S(mParameters, 15) / ((669921.875 + var_x62) * (1.3799999999999999 + NV_Ith_S(mParameters, 5)));
        const double var_x69 = var_x68 / var_x67;
        const double var_x70 = var_x69 * (0.060830072586961395 * var_x64 + 0.013101861787960915 * var_x66);
        const double var_x71 = var_x66 - 2.5 * var_x64;
        const double var_x72 = var_x61 * var_x68 * var_x71 / pow(var_x67, 2);
        const double var_x73 = 1 / (1.0 + NV_Ith_S(mParameters, 6));
        const double var_x74 = 1 / (40.0 + var_chaste_interface__Na__Na_i);
        const double var_x75 = exp(-0.037433890822745473 * var_chaste_interface__cell__V);
        const double var_x76 = exp(-0.0037433890822745472 * var_chaste_interface__cell__V);
        const double var_x77 = 1.0 + 0.035299999999999998 * var_x75 + 0.1245 * var_x76;
        const double var_x78 = var_x73 * var_x74 * (0.001321416346042915 * var_x75 + 0.00046605194074318115 * var_x76) * NV_Ith_S(mParameters, 6) * var_chaste_interface__Na__Na_i / pow(var_x77, 2);
        const double var_x79 = 0.00050000000000000001 + var_chaste_interface__Ca__Ca_i;
        const double var_x80 = 1 / var_x79;
        const double var_x81 = 0.061899999999999997 * var_x80;
        const double var_x82 = 1 / var_chaste_interface__Ca__Ca_i;
        const double var_x83 = var_chaste_interface__Ca__Ca_i / pow(var_x79, 2);
        const double var_x84 = var_x63 * var_x69;
        const double var_x85 = 1 / (0.029999999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i);
        const double var_x86 = (-26.713760659695652 * log(var_x85 * (0.029999999999999999 * NV_Ith_S(mParameters, 7) + NV_Ith_S(mParameters, 6))) + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 14) * var_chaste_interface__iKs_Xs_gate__Xs;
        const double var_x87 = var_x48 - var_chaste_interface__cell__V;
        const double var_x88 = NV_Ith_S(mParameters, 16) * var_chaste_interface__ito_s_gate__s;
        const double var_x89 = 1 / var_chaste_interface__Na__Na_i;
        const double var_x90 = -26.713760659695652 * log(var_x89 * NV_Ith_S(mParameters, 7)) + var_chaste_interface__cell__V;
        const double var_x91 = var_x90 * NV_Ith_S(mParameters, 9) * var_chaste_interface__iNa_h_gate__h;
        const double var_x92 = var_x91 * pow(var_chaste_interface__iNa_m_gate__m, 2) * var_chaste_interface__iNa_j_gate__j;
        const double var_x93 = var_x52 * var_x90;
        const double var_x94 = var_x51 * var_x91;
        const double var_x95 = -5615083.1234197523 + 374338.90822798351 * var_chaste_interface__cell__V;
        const double var_x96 = 0.019297068299972742 * var_x7;
        const double var_x97 = var_x96 * var_chaste_interface__iCaL_f_gate__f;
        const double var_x98 = var_x4 * var_x97;
        const double var_x99 = var_x11 * var_x97;
        const double var_x100 = var_x13 * var_x17 * var_x21;
        const double var_x101 = var_x100 * var_x7;
        const double var_x102 = ((var_x14) ? (-var_x99 + var_x95 * (var_x98 + var_x99)) : (var_x101 * var_chaste_interface__iCaL_f_gate__f));
        const double var_x103 = var_x96 * var_chaste_interface__iCaL_d_gate__d;
        const double var_x104 = var_x103 * var_x11;
        const double var_x105 = ((var_x14) ? (-var_x104 + var_x95 * (var_x104 + var_x103 * var_x4)) : (var_x101 * var_chaste_interface__iCaL_d_gate__d));
        const double var_x106 = 0.019297068299972742 * NV_Ith_S(mParameters, 8);
        const double var_x107 = var_x106 * var_chaste_interface__iCaL_fCass_gate__fCass;
        const double var_x108 = var_x107 * var_x12;
        const double var_x109 = var_x100 * var_x5 * NV_Ith_S(mParameters, 8);
        const double var_x110 = ((var_x14) ? (-var_x108 + var_x95 * (var_x108 + var_x107 * var_x6)) : (var_x109 * var_chaste_interface__iCaL_fCass_gate__fCass));
        const double var_x111 = var_x106 * var_chaste_interface__iCaL_f2_gate__f2;
        const double var_x112 = var_x111 * var_x12;
        const double var_x113 = ((var_x14) ? (-var_x112 + var_x95 * (var_x112 + var_x111 * var_x6)) : (var_x109 * var_chaste_interface__iCaL_f2_gate__f2));
        const double var_x114 = 0.0048242670749931854 * var_x18;
        const double var_x115 = var_x10 * var_x114 * var_x9;
        const double var_x116 = ((var_x14) ? (-var_x115 + var_x95 * (var_x115 + var_x0 * var_x1 * var_x114)) : (3611.8217397063127 * var_x24));
        const double var_x117 = var_x29 * var_x85;
        const double var_x118 = var_x73 * NV_Ith_S(mParameters, 6) / var_x77;
        const double var_x119 = var_x118 * var_x74;
        const double var_x120 = var_x118 * var_chaste_interface__Na__Na_i / pow((1 + 0.025000000000000001 * var_chaste_interface__Na__Na_i), 2);
        const double var_x121 = var_x53 * var_x89;
        const double var_x122 = var_x65 * var_x69 * pow(var_chaste_interface__Na__Na_i, 2);
        const double var_x123 = var_x28 * var_x34;
        const double var_x124 = var_x31 * var_x34;
        const double var_x125 = var_x57 * (-12.370953657054676 * var_x34 * var_x43 - 0.33754510655860126 * var_x34 * var_x56 - 0.0020091970628488172 * var_x34 * var_x44) + 0.19888157678432786 * var_x34 * var_x55 - 0.013269275214920797 * var_x34 * var_x54;
        const double var_x126 = var_x32 * var_x34;
        const double var_x127 = 11.495772238841345 * var_x126;
        const double var_x128 = NV_Ith_S(mParameters, 13) * var_chaste_interface__iKr_Markov__Or4;
        const double var_x129 = 0.001 + var_chaste_interface__Ca__Ca_i;
        const double var_x130 = 1.0 + 0.00020000000000000001 / pow(var_x129, 2);
        const double var_x131 = 1 / var_x130;
        const double var_x132 = var_x131;
        const double var_x133 = 0.066691050963179718 * NV_Ith_S(mParameters, 0);
        const double var_x134 = 1.0 + 6.2499999999999997e-8 / pow(var_chaste_interface__Ca__Ca_i, 2);
        const double var_x135 = NV_Ith_S(mParameters, 2) / (pow(var_x134, 2) * pow(var_chaste_interface__Ca__Ca_i, 3));
        const double var_x136 = -var_chaste_interface__Ca__Ca_i + var_chaste_interface__Ca__Ca_SR;
        const double var_x137 = NV_Ith_S(mParameters, 2) / var_x134;
        const double var_x138 = exp(-1.5790000000000006 + 0.0112 * var_chaste_interface__cell__V);
        const double var_x139 = 0.0112 * var_x138;
        const double var_x140 = var_x139 * var_chaste_interface__iKr_Markov__Cr1;
        const double var_x141 = exp(-2.0190000000000001 - 0.060299999999999999 * var_chaste_interface__cell__V);
        const double var_x142 = 0.060299999999999999 * var_x141;
        const double var_x143 = var_x142 * var_chaste_interface__iKr_Markov__Cr2;
        const double var_x144 = var_x138;
        const double var_x145 = -var_x144;
        const double var_x146 = var_x141;
        const double var_x147 = exp(-3.1680000000000028);
        const double var_x148 = -var_x146 - var_x147;
        const double var_x149 = exp(-2.5140000000000011);
        const double var_x150 = exp(-3.8160000000000025 + 0.036499999999999998 * var_chaste_interface__cell__V);
        const double var_x151 = 0.036499999999999998 * var_x150;
        const double var_x152 = var_x151 * var_chaste_interface__iKr_Markov__Cr3;
        const double var_x153 = exp(-8.3940000000000019 - 0.039899999999999998 * var_chaste_interface__cell__V);
        const double var_x154 = 0.039899999999999998 * var_x153;
        const double var_x155 = var_x150;
        const double var_x156 = -var_x149 - var_x155;
        const double var_x157 = var_x153;
        const double var_x158 = pow((1 / NV_Ith_S(mParameters, 6)), 0.40000000000000002) * exp(-0.87200000000000344 + 0.0223 * var_chaste_interface__cell__V);
        const double var_x159 = 0.043778650187068779 * var_x158;
        const double var_x160 = var_x154 - var_x159;
        const double var_x161 = exp(-3.1820000000000022 - 0.031199999999999999 * var_chaste_interface__cell__V);
        const double var_x162 = 0.031199999999999999 * var_x161;
        const double var_x163 = var_x162 * var_chaste_interface__iKr_Markov__Ir5;
        const double var_x164 = 1.9631681698237122 * var_x158;
        const double var_x165 = -var_x157 - var_x164;
        const double var_x166 = var_x161;
        const double var_x167 = -var_x166;
        const double var_x168 = var_x139 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr1;
        const double var_x169 = var_x142 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr2;
        const double var_x170 = var_x151 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr3;
        const double var_x171 = var_x162 * var_chaste_interface__iKr_Markov_Sotalol_block__BIr5;
        const double var_x172 = -0.16666666666666666 * var_chaste_interface__cell__V;
        const double var_x173 = exp(0.83333333333333337 + var_x172);
        const double var_x174 = 1.0 + var_x173;
        const double var_x175 = 1 / sqrt(var_x174);
        const double var_x176 = exp(-2.3333333333333335 + 0.066666666666666666 * var_chaste_interface__cell__V);
        const double var_x177 = 1.0 + var_x176;
        const double var_x178 = 1 / var_x177;
        const double var_x179 = var_x175 * var_x178;
        const double var_x180 = exp(-0.35714285714285715 - 0.071428571428571425 * var_chaste_interface__cell__V);
        const double var_x181 = 1.0 + var_x180;
        const double var_x182 = 1 / (80.0 + 1400.0 * var_x179);
        const double var_x183 = 0.20000000000000001 * var_chaste_interface__cell__V;
        const double var_x184 = exp(-4.0 + var_x183);
        const double var_x185 = 1.0 + var_x184;
        const double var_x186 = 1 / var_x185;
        const double var_x187 = exp(-6.328125 * pow((1 + 0.022222222222222223 * var_chaste_interface__cell__V), 2));
        const double var_x188 = exp(4.0 + var_x183);
        const double var_x189 = 1.0 + var_x188;
        const double var_x190 = 85.0 * var_x187;
        const double var_x191 = 1 / (3.0 + var_x190 + 5.0 * var_x186);
        const double var_x192 = exp(3.3333333333333335 + var_x172);
        const double var_x193 = 1.0 + var_x192;
        const double var_x194 = exp(-0.88888888888888884 * pow((1 + 0.025000000000000001 * var_chaste_interface__cell__V), 2));
        const double var_x195 = 1 / (0.80000000000000004 + 9.5 * var_x194);
        const double var_x196 = exp(7.0 + var_x183);
        const double var_x197 = 1.0 + var_x196;
        const double var_x198 = 1 / var_x197;
        const double var_x199 = exp(-0.25 + 0.0050000000000000001 * var_chaste_interface__cell__V);
        const double var_x200 = 1.0 + var_x199;
        const double var_x201 = 1 / var_x200;
        const double var_x202 = 1 / (0.10000000000000001 * var_x198 + 0.10000000000000001 * var_x201);
        const double var_x203 = exp(-6.2967884828349945 - 0.11074197120708749 * var_chaste_interface__cell__V);
        const double var_x204 = 1.0 + var_x203;
        const double var_x205 = -var_chaste_interface__iNa_m_gate__m + 1 / pow(var_x204, 2);
        const double var_x206 = exp(-12.0 - var_x183);
        const double var_x207 = 1.0 + var_x206;
        const double var_x208 = var_x202 * var_x207;
        const double var_x209 = exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 11) - 0.14705882352941177 * var_chaste_interface__cell__V);
        const double var_x210 = var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 11);
        const double var_x211 = exp(0.34849999999999998 * var_chaste_interface__cell__V - 0.34849999999999998 * NV_Ith_S(mParameters, 11));
        const double var_x212 = exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * NV_Ith_S(mParameters, 11));
        const double var_x213 = exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 11) - 0.0900900900900901 * var_chaste_interface__cell__V);
        const double var_x214 = 1.0 + var_x213;
        const double var_x215 = 0.01 * NV_Ith_S(mParameters, 10);
        const double var_x216 = exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__cell__V - 0.13458950201884254 * NV_Ith_S(mParameters, 11));
        const double var_x217 = 1.0 + var_x216;
        const double var_x218 = 1.0 - var_x215;
        const double var_x219 = var_x215 + var_x218 / pow(var_x217, 2);
        const double var_x220 = ((var_x210) ? (0.057000000000000002 * var_x209) : (0));
        const double var_x221 = ((var_x210) ? (310000.0 * var_x211 + 2.7000000000000002 * var_x212) : (5.9230769230769234 / var_x214));
        const double var_x222 = 0.26917900403768508 * var_x216 * var_x218 / pow(var_x217, 3);
        const double var_x223 = exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 11) - 0.13780000000000001 * var_chaste_interface__cell__V);
        const double var_x224 = 1.0 + var_x223;
        const double var_x225 = exp(0.01052 * NV_Ith_S(mParameters, 11) - 0.01052 * var_chaste_interface__cell__V);
        const double var_x226 = var_x225 / var_x224;
        const double var_x227 = exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 11) - 0.10000000000000001 * var_chaste_interface__cell__V);
        const double var_x228 = 1.0 + var_x227;
        const double var_x229 = exp(0.057000000000000002 * var_chaste_interface__cell__V - 0.057000000000000002 * NV_Ith_S(mParameters, 11));
        const double var_x230 = var_x229 / var_x228;
        const double var_x231 = exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * NV_Ith_S(mParameters, 11));
        const double var_x232 = exp(0.043909999999999998 * NV_Ith_S(mParameters, 11) - 0.043909999999999998 * var_chaste_interface__cell__V);
        const double var_x233 = -25428.0 * var_x231 - 6.9480000000000002e-6 * var_x232;
        const double var_x234 = exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * NV_Ith_S(mParameters, 11));
        const double var_x235 = 1.0 + var_x234;
        const double var_x236 = 1 / var_x235;
        const double var_x237 = var_x233 * var_x236;
        const double var_x238 = 37.780000000000001 + var_chaste_interface__cell__V;
        const double var_x239 = ((var_x210) ? (0.024240000000000001 * var_x226) : (0.59999999999999998 * var_x230));
        const double var_x240 = ((var_x210) ? (var_x237 * var_x238) : (0));
        const double var_x241 = exp(2.5 + var_x38);
        const double var_x242 = 1.0 + var_x241;
        const double var_x243 = 1 / var_x242;
        const double var_x244 = exp(1.0 + var_x183);
        const double var_x245 = 1.0 + var_x244;
        const double var_x246 = 1 / var_x245;
        const double var_x247 = exp(-2.6923076923076925 - 0.076923076923076927 * var_chaste_interface__cell__V);
        const double var_x248 = 1.0 + var_x247;
        const double var_x249 = 0.25 + 1.3999999999999999 / var_x248;
        const double var_x250 = var_x246 * var_x249;
        const double var_x251 = exp(0.66666666666666663 - 0.13333333333333333 * var_chaste_interface__cell__V);
        const double var_x252 = 1.0 + var_x251;
        const double var_x253 = 1 / (var_x243 + 1.3999999999999999 * var_x250);
        const double var_x254 = 0.10000000000000001 * var_chaste_interface__cell__V;
        const double var_x255 = exp(3.0 + var_x254);
        const double var_x256 = 1.0 + var_x255;
        const double var_x257 = 1 / var_x256;
        const double var_x258 = -var_x254;
        const double var_x259 = exp(1.3 + var_x258);
        const double var_x260 = 1.0 + var_x259;
        const double var_x261 = 1 / var_x260;
        const double var_x262 = pow((1 + 0.037037037037037035 * var_chaste_interface__cell__V), 2);
        const double var_x263 = exp(-3.2400000000000002 * var_x262);
        const double var_x264 = 0.14285714285714285 * var_chaste_interface__cell__V;
        const double var_x265 = exp(2.8571428571428572 + var_x264);
        const double var_x266 = 1.0 + var_x265;
        const double var_x267 = var_x255 / pow(var_x256, 2);
        const double var_x268 = 275.625 * var_x263;
        const double var_x269 = 1 / (5.0 + var_x268 + 50.0 * var_x261 + 45.0 * var_x257);
        const double var_x270 = exp(2.5 + var_x258);
        const double var_x271 = 1.0 + var_x270;
        const double var_x272 = 1 / var_x271;
        const double var_x273 = exp(-3.0375000000000001 * var_x262);
        const double var_x274 = exp(5.0 + var_x264);
        const double var_x275 = 1.0 + var_x274;
        const double var_x276 = 281.0 * var_x273;
        const double var_x277 = 1 / (var_x276 + 40.0 * var_x257 + 15.5 * var_x272);
        const double var_x278 = pow(var_chaste_interface__Ca__Ca_ss, 2);
        const double var_x279 = 1 / (1.0 + 399.99999999999994 * var_x278);
        const double var_x280 = 1 / (2.0 + 80.0 * var_x279);
        const double var_x281 = var_chaste_interface__Ca__Ca_ss / pow((0.0025000000000000005 + var_x278), 2);
        const double var_x282 = 0.29999999999999999 + var_chaste_interface__Ca__Ca_SR;
        const double var_x283 = pow(var_x282, (-2));
        const double var_x284 = 1 / (1.0 + 3.0 * var_x283);
        const double var_x285 = var_x284;
        const double var_x286 = pow(var_chaste_interface__Ca__Ca_SR, (-2));
        const double var_x287 = 1 / (1.0 + 2.25 * var_x286);
        const double var_x288 = 1 / (2.5 - 1.5 * var_x287);
        const double var_x289 = var_x278 * var_x288;
        const double var_x290 = 0.14999999999999999 * var_x289;
        const double var_x291 = 1 / (0.059999999999999998 + var_x290);
        const double var_x292 = var_chaste_interface__Irel__R_prime * NV_Ith_S(mParameters, 1);
        const double var_x293 = var_x291 * var_x292;
        const double var_x294 = var_x290 * var_x293;
        const double var_x295 = 1 / (pow((0.44444444444444442 + var_x286), 2) * pow(var_chaste_interface__Ca__Ca_SR, 3));
        const double var_x296 = -var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_SR;
        const double var_x297 = var_x296 / pow((1 - 0.59999999999999998 * var_x287), 2);
        const double var_x298 = var_x278 * var_x293 * var_x295 * var_x297;
        const double var_x299 = var_x292 * var_x297 / pow((0.40000000000000002 + var_x289), 2);
        const double var_x300 = var_x288 * var_x295 * var_x299 * pow(var_chaste_interface__Ca__Ca_ss, 4);
        const double var_x301 = var_x299 * pow(var_chaste_interface__Ca__Ca_ss, 3);
        const double var_x302 = var_chaste_interface__Ca__Ca_ss * var_chaste_interface__Irel__R_prime;
        const double var_x303 = var_x291 * var_x296 * NV_Ith_S(mParameters, 1);
        const double var_x304 = var_x288 * var_x302 * var_x303;
        const double var_x305 = 0.00025000000000000001 + var_chaste_interface__Ca__Ca_ss;
        const double var_x306 = 1.0 + 0.0001 / pow(var_x305, 2);
        const double var_x307 = 1 / var_x306;
        const double var_x308 = 0.094772024954610332 * NV_Ith_S(mParameters, 3);
        const double var_x309 = var_x307 * var_x308;
        const double var_x310 = 3.0010972933430868 * var_x289;
        const double var_x311 = var_x293 * var_x310;
        const double var_x312 = var_x307;
        const double var_x313 = var_x99 * var_chaste_interface__iCaL_d_gate__d;
        const double var_x314 = -0.11249999999999999 + 0.067500000000000004 * var_x287;
        const double var_x315 = NV_Ith_S(mParameters, 4) * NV_Ith_S(mParameters, 3);
        const double var_x316 = 0.00063181349969740233 * var_x315;
        const double var_x317 = 0.00027188924024856262 * var_x32;
        const double var_x318 = var_x317 * var_x59;
        const double var_x319 = var_x315 * var_x49;
        const double var_x320 = 0.00063181349969740233 * var_x319;
        const double var_x321 = 0.0072631840899465916 * var_x126;
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (-0.00076360000000000002 - var_x25 - var_x29 - var_x31 - var_x53 - var_x70 - 0.0024332029034784559 * var_x72 - 0.0097300000000000008 * var_x28 - 1.2969999999999999 * var_x78 - 0.0016270903010033445 * var_x50 - var_x33 * var_x46 - var_x47 * var_chaste_interface__iKr_Markov__Or4 - var_x58 * var_x60);
        IJth(rJacobian, 1, 0) = var_x132 * (-1.4961343672834486e-7 + 0.00063181349969740233 * var_x70 + 1.5373304419206038e-6 * var_x72) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 2, 0) = -var_x140 - var_x143;
        IJth(rJacobian, 3, 0) = var_x140 + var_x143;
        IJth(rJacobian, 4, 0) = -var_x152 - var_x154 * var_chaste_interface__iKr_Markov__Or4;
        IJth(rJacobian, 5, 0) = var_x152 - var_x163 + var_x160 * var_chaste_interface__iKr_Markov__Or4;
        IJth(rJacobian, 6, 0) = var_x163 + var_x159 * var_chaste_interface__iKr_Markov__Or4;
        IJth(rJacobian, 7, 0) = -var_x168 - var_x169;
        IJth(rJacobian, 8, 0) = var_x168 + var_x169;
        IJth(rJacobian, 9, 0) = -var_x170 - var_x154 * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4;
        IJth(rJacobian, 10, 0) = var_x170 - var_x171 + var_x160 * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4;
        IJth(rJacobian, 11, 0) = var_x171 + var_x159 * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4;
        IJth(rJacobian, 12, 0) = 5.1020408163265302e-7 * (-var_chaste_interface__iKs_Xs_gate__Xs + 1 / var_x181) * (93.333333333333329 * var_x175 * var_x176 / pow(var_x177, 2) - 116.66666666666667 * var_x173 * var_x178 / pow(var_x174, (3 / 2))) / pow((0.057142857142857141 + var_x179), 2) + 0.071428571428571425 * var_x180 * var_x182 / pow(var_x181, 2);
        IJth(rJacobian, 13, 0) = 0.00013840830449826991 * (-var_chaste_interface__ito_s_gate__s + 1 / var_x189) * (-var_x190 * (-0.28125 - 0.0062500000000000003 * var_chaste_interface__cell__V) + var_x184 / pow(var_x185, 2)) / pow((0.035294117647058823 + var_x187 + 0.058823529411764705 * var_x186), 2) - 0.20000000000000001 * var_x188 * var_x191 / pow(var_x189, 2);
        IJth(rJacobian, 14, 0) = 0.16666666666666666 * var_x192 * var_x195 / pow(var_x193, 2) - 0.10526315789473684 * var_x194 * (-0.044444444444444446 - 0.0011111111111111111 * var_chaste_interface__cell__V) * (-var_chaste_interface__ito_r_gate__r + 1 / var_x193) / pow((0.084210526315789472 + var_x194), 2);
        IJth(rJacobian, 15, 0) = 0.22148394241417499 * var_x203 * var_x208 / pow(var_x204, 3) - 0.20000000000000001 * var_x202 * var_x205 * var_x206 + 99.999999999999986 * var_x205 * var_x207 * (0.02 * var_x196 / pow(var_x197, 2) + 0.00050000000000000001 * var_x199 / pow(var_x200, 2)) / pow((var_x198 + var_x201), 2);
        IJth(rJacobian, 16, 0) = (var_x219 - var_chaste_interface__iNa_h_gate__h) * (((var_x210) ? (-0.008382352941176471 * var_x209) : (0)) + ((var_x210) ? (108035.0 * var_x211 + 0.21330000000000002 * var_x212) : (0.53361053361053368 * var_x213 / pow(var_x214, 2)))) - var_x222 * (var_x220 + var_x221);
        IJth(rJacobian, 17, 0) = (var_x219 - var_chaste_interface__iNa_j_gate__j) * (((var_x210) ? (-0.00025500480000000003 * var_x226 + 0.0033402720000000005 * var_x223 * var_x225 / pow(var_x224, 2)) : (0.034200000000000001 * var_x230 + 0.059999999999999998 * var_x227 * var_x229 / pow(var_x228, 2))) + ((var_x210) ? (var_x237 + var_x236 * var_x238 * (3.0508668000000001e-7 * var_x232 - 6214.6032000000005 * var_x231) - 0.311 * var_x233 * var_x234 * var_x238 / pow(var_x235, 2)) : (0))) - var_x222 * (var_x239 + var_x240);
        IJth(rJacobian, 18, 0) = 0.51020408163265307 * (-var_chaste_interface__iCaL_d_gate__d + 1 / var_x252) * (-0.050000000000000003 * var_x241 / pow(var_x242, 2) + 0.27999999999999997 * var_x244 * var_x249 / pow(var_x245, 2) - 0.15076923076923074 * var_x246 * var_x247 / pow(var_x248, 2)) / pow((var_x250 + 0.7142857142857143 * var_x243), 2) + 0.13333333333333333 * var_x251 * var_x253 / pow(var_x252, 2);
        IJth(rJacobian, 19, 0) = 1.3163239596670111e-5 * (-var_chaste_interface__iCaL_f_gate__f + 1 / var_x266) * (4.5 * var_x267 - var_x268 * (-0.23999999999999999 - 0.0088888888888888889 * var_chaste_interface__cell__V) - 5.0 * var_x259 / pow(var_x260, 2)) / pow((0.018140589569160998 + var_x263 + 0.16326530612244897 * var_x257 + 0.18140589569160998 * var_x261), 2) - 0.14285714285714285 * var_x265 * var_x269 / pow(var_x266, 2);
        IJth(rJacobian, 20, 0) = 1.2664479933131545e-5 * (0.25 - var_chaste_interface__iCaL_f2_gate__f2 + 0.75 / var_x275) * (4.0 * var_x267 - var_x276 * (-0.22500000000000001 - 0.0083333333333333332 * var_chaste_interface__cell__V) - 1.55 * var_x270 / pow(var_x271, 2)) / pow((var_x273 + 0.055160142348754451 * var_x272 + 0.14234875444839859 * var_x257), 2) - 0.10714285714285714 * var_x274 * var_x277 / pow(var_x275, 2);
        IJth(rJacobian, 23, 0) = -var_x25 * var_x309;
        IJth(rJacobian, 25, 0) = var_x315 * (-1.8322591491224666e-7 - 0.0018954404990922068 * var_x70 - 4.6119913257618111e-6 * var_x72 - 0.0024583863273225921 * var_x78 - 0.00063181349969740233 * var_x53);
        IJth(rJacobian, 26, 0) = var_x315 * (0.0016389242182150614 * var_x78 - 6.1475453520557248e-6 * var_x28 - 1.0280176174006229e-6 * var_x50 - 0.00063181349969740233 * var_x29 - 0.00063181349969740233 * var_x31 - var_x128 * var_x317 - var_x317 * var_x46 - var_x318 * var_x58);
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x81 + 2.5 * var_x84 + 0.061899999999999997 * var_x83 - 0.0063258185242159298 * var_x82);
        IJth(rJacobian, 1, 1) = var_x132 * (-0.0038 - var_x133 - 8.3363813703974642e-9 * var_x135 + (1.9554627815634599e-5 * var_x83 - 1.9554627815634599e-5 * var_x80 - 0.0015795337492435057 * var_x84 - 1.9983687701177615e-6 * var_x82) * NV_Ith_S(mParameters, 3)) + 0.00040000000000000002 * (0.0038 * var_chaste_interface__Ca__Ca_ss - 0.0038 * var_chaste_interface__Ca__Ca_i - 0.066691050963179718 * var_x137 + var_x133 * var_x136 - 0.00031590674984870116 * (0.00047360000000000002 * var_chaste_interface__cell__V - 0.0063258185242159298 * log(var_x82 * NV_Ith_S(mParameters, 5)) + var_x81 * var_chaste_interface__Ca__Ca_i - 2.0 * var_x69 * var_x71) * NV_Ith_S(mParameters, 3)) / (pow(var_x129, 3) * pow(var_x130, 2));
        IJth(rJacobian, 22, 1) = var_x285 * (1.2499999999999999e-7 * var_x135 + NV_Ith_S(mParameters, 0));
        IJth(rJacobian, 23, 1) = 1.1399999999999999 * var_x307;
        IJth(rJacobian, 25, 1) = 0.0047386012477305169 * var_x315 * var_x84;
        IJth(rJacobian, 2, 2) = var_x145;
        IJth(rJacobian, 3, 2) = var_x144;
        IJth(rJacobian, 2, 3) = var_x146;
        IJth(rJacobian, 3, 3) = var_x148;
        IJth(rJacobian, 4, 3) = var_x147;
        IJth(rJacobian, 3, 4) = var_x149;
        IJth(rJacobian, 4, 4) = var_x156;
        IJth(rJacobian, 5, 4) = var_x155;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x47 * var_x49);
        IJth(rJacobian, 4, 5) = var_x157;
        IJth(rJacobian, 5, 5) = var_x165;
        IJth(rJacobian, 6, 5) = var_x164;
        IJth(rJacobian, 26, 5) = -var_x317 * var_x319 * NV_Ith_S(mParameters, 13);
        IJth(rJacobian, 5, 6) = var_x166;
        IJth(rJacobian, 6, 6) = var_x167;
        IJth(rJacobian, 7, 7) = var_x145;
        IJth(rJacobian, 8, 7) = var_x144;
        IJth(rJacobian, 7, 8) = var_x146;
        IJth(rJacobian, 8, 8) = var_x148;
        IJth(rJacobian, 9, 8) = var_x147;
        IJth(rJacobian, 8, 9) = var_x149;
        IJth(rJacobian, 9, 9) = var_x156;
        IJth(rJacobian, 10, 9) = var_x155;
        IJth(rJacobian, 5, 10) = 0.00125;
        IJth(rJacobian, 9, 10) = var_x157;
        IJth(rJacobian, 10, 10) = -0.00125 + var_x165;
        IJth(rJacobian, 11, 10) = var_x164;
        IJth(rJacobian, 10, 11) = var_x166;
        IJth(rJacobian, 11, 11) = var_x167;
        IJth(rJacobian, 0, 12) = mSetVoltageDerivativeToZero ? 0.0 : (-2 * var_x86);
        IJth(rJacobian, 12, 12) = -var_x182;
        IJth(rJacobian, 26, 12) = -0.0012636269993948047 * var_x315 * var_x86;
        IJth(rJacobian, 0, 13) = mSetVoltageDerivativeToZero ? 0.0 : (var_x30 * var_x87);
        IJth(rJacobian, 13, 13) = -var_x191;
        IJth(rJacobian, 26, 13) = -var_x30 * var_x320;
        IJth(rJacobian, 0, 14) = mSetVoltageDerivativeToZero ? 0.0 : (var_x87 * var_x88);
        IJth(rJacobian, 14, 14) = -var_x195;
        IJth(rJacobian, 26, 14) = -var_x320 * var_x88;
        IJth(rJacobian, 0, 15) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x92);
        IJth(rJacobian, 15, 15) = -var_x208;
        IJth(rJacobian, 25, 15) = -0.0018954404990922068 * var_x315 * var_x92;
        IJth(rJacobian, 0, 16) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x93);
        IJth(rJacobian, 16, 16) = -var_x220 - var_x221;
        IJth(rJacobian, 25, 16) = -var_x316 * var_x93;
        IJth(rJacobian, 0, 17) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x94);
        IJth(rJacobian, 17, 17) = -var_x239 - var_x240;
        IJth(rJacobian, 25, 17) = -var_x316 * var_x94;
        IJth(rJacobian, 0, 18) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x102);
        IJth(rJacobian, 18, 18) = -var_x253;
        IJth(rJacobian, 23, 18) = -var_x102 * var_x309;
        IJth(rJacobian, 0, 19) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x105);
        IJth(rJacobian, 19, 19) = -var_x269;
        IJth(rJacobian, 23, 19) = -var_x105 * var_x309;
        IJth(rJacobian, 0, 20) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x110);
        IJth(rJacobian, 20, 20) = -var_x277;
        IJth(rJacobian, 23, 20) = -var_x110 * var_x309;
        IJth(rJacobian, 0, 21) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x113);
        IJth(rJacobian, 21, 21) = -var_x280;
        IJth(rJacobian, 23, 21) = -var_x113 * var_x309;
        IJth(rJacobian, 1, 22) = var_x131 * var_x133;
        IJth(rJacobian, 22, 22) = var_x285 * (-var_x294 - NV_Ith_S(mParameters, 0) + 0.21333333333333335 * var_x300 - 0.032000000000000001 * var_x298) + 0.66666666666666674 * (var_x137 - var_x136 * NV_Ith_S(mParameters, 0) - var_x294 * var_x296) / (pow(var_x282, 3) * pow((0.33333333333333337 + var_x283), 2));
        IJth(rJacobian, 23, 22) = var_x312 * (var_x311 + 0.64023408924652514 * var_x298 - 4.2682272616435011 * var_x300);
        IJth(rJacobian, 24, 22) = 0.059999999999999998 * var_x295 * var_x302;
        IJth(rJacobian, 0, 23) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x116);
        IJth(rJacobian, 1, 23) = 0.0038 * var_x131;
        IJth(rJacobian, 21, 23) = -0.0020000000000000005 * var_x280 * var_x281 + 6.2500000000000001e-5 * var_x281 * (0.59999999999999998 - var_chaste_interface__iCaL_fCass_gate__fCass + 0.40000000000000002 * var_x279) / pow((0.025000000000000001 + var_x279), 2);
        IJth(rJacobian, 22, 23) = var_x285 * (var_x294 + 0.32000000000000001 * var_x301 - 0.29999999999999999 * var_x304);
        IJth(rJacobian, 23, 23) = var_x312 * (-1.1399999999999999 - var_x311 + 6.0021945866861737 * var_x304 - 6.4023408924652525 * var_x301 - var_x116 * var_x308) + 0.00020000000000000001 * (1.1399999999999999 * var_chaste_interface__Ca__Ca_i - 1.1399999999999999 * var_chaste_interface__Ca__Ca_ss + var_x296 * var_x311 - var_x308 * ((var_x14) ? (-var_x313 + 374338.90822798351 * (-14.999998664311967 + var_chaste_interface__cell__V) * (var_x313 + var_x98 * var_chaste_interface__iCaL_d_gate__d)) : (var_x13 * var_x22))) / (pow(var_x305, 3) * pow(var_x306, 2));
        IJth(rJacobian, 24, 23) = var_x314 * var_chaste_interface__Irel__R_prime;
        IJth(rJacobian, 22, 24) = -var_x284 * var_x290 * var_x303;
        IJth(rJacobian, 23, 24) = var_x303 * var_x307 * var_x310;
        IJth(rJacobian, 24, 24) = -0.0050000000000000001 + var_x314 * var_chaste_interface__Ca__Ca_ss;
        IJth(rJacobian, 0, 25) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x122 + 0.00081062499999999993 * var_x120 - 1.2969999999999999 * var_x119 - 26.713760659695652 * var_x121 - 0.80141281979086942 * var_x117 - 0.0077469905913117388 * var_x89);
        IJth(rJacobian, 1, 25) = 0.0018954404990922068 * var_x122 * var_x131 * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 25, 25) = var_x315 * (1.5364914545766202e-6 * var_x120 - 0.016878114612481093 * var_x121 - 4.8946532376195178e-6 * var_x89 - 0.0056863214972766203 * var_x122 - 0.0024583863273225921 * var_x119);
        IJth(rJacobian, 26, 25) = var_x315 * (0.0016389242182150614 * var_x119 - 1.0243276363844134e-6 * var_x120 - 0.00050634343837443281 * var_x117);
        IJth(rJacobian, 0, 26) = mSetVoltageDerivativeToZero ? 0.0 : (-26.713760659695652 * var_x117 - 26.713760659695652 * var_x124 - 0.25992489121883872 * var_x123 - var_x125 * var_x60 - var_x127 * var_x128 - var_x127 * var_x46);
        IJth(rJacobian, 26, 26) = var_x315 * (-0.016878114612481093 * var_x117 - 0.016878114612481093 * var_x124 - 0.00016422405517944107 * var_x123 - var_x125 * var_x318 - var_x128 * var_x321 - var_x321 * var_x46);
    }

    N_Vector Cellfink_noble_giles_model_2008FromCellMLCvode::ComputeDerivedQuantities(double var_chaste_interface__Environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__Ca__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.0001092
        double var_chaste_interface__iKr_Markov__Or4 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.014
        double var_chaste_interface__iKs_Xs_gate__Xs = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ito_r_gate__r = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 2.11e-08
        double var_chaste_interface__iNa_m_gate__m = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 5.06e-06
        double var_chaste_interface__iCaL_f_gate__f = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.9995
        double var_chaste_interface__iCaL_fCass_gate__fCass = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ca__Ca_SR = NV_Ith_S(rY, 22);
        // Units: millimolar; Initial value: 2.7656
        double var_chaste_interface__Ca__Ca_ss = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 0.0001893
        double var_chaste_interface__Irel__R_prime = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 0.9864
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 25);
        // Units: millimolar; Initial value: 7.940167
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 26);
        // Units: millimolar; Initial value: 141.0167
        
        // Mathematics
        const double var_Environment__F = 96485.341499999995; // coulomb_per_mole
        const double var_Environment__R = 8314.4719999999998; // millijoule_per_mole_kelvin
        const double var_Environment__T = 310.0; // kelvin
        const double var_INaCa__K_sat = 0.10000000000000001; // dimensionless
        const double var_INaCa__Km_Ca = 1.3799999999999999; // millimolar
        const double var_INaCa__Km_Nai = 87.5; // millimolar
        const double var_INaCa__alpha = 2.5; // dimensionless
        const double var_INaCa__gamma = 0.34999999999999998; // dimensionless
        const double var_Irel__EC = 1.5; // millimolar
        const double var_Irel__k1_prime = 0.14999999999999999; // per_millimolar2_per_millisecond
        const double var_Irel__k3 = 0.059999999999999998; // per_millisecond
        const double var_Irel__max_sr = 2.5; // dimensionless
        const double var_Irel__min_sr = 1.0; // dimensionless
        const double var_Irel__kcasr = -(-var_Irel__min_sr + var_Irel__max_sr) / (1.0 + pow(var_Irel__EC, 2) / pow(var_chaste_interface__Ca__Ca_SR, 2)) + var_Irel__max_sr; // dimensionless
        const double var_Irel__k1 = var_Irel__k1_prime / var_Irel__kcasr; // per_millimolar2_per_millisecond
        const double var_Irel__O = pow(var_chaste_interface__Ca__Ca_ss, 2) * var_chaste_interface__Irel__R_prime * var_Irel__k1 / (pow(var_chaste_interface__Ca__Ca_ss, 2) * var_Irel__k1 + var_Irel__k3); // dimensionless
        const double var_Irel__i_rel = (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_SR) * var_Irel__O * NV_Ith_S(mParameters, 1); // millimolar_per_millisecond
        const double var_cell__Cm_converted = 0.001 * NV_Ith_S(mParameters, 3); // uF
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 5) * exp(var_Environment__F * var_INaCa__gamma * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T)) - pow(NV_Ith_S(mParameters, 7), 3) * var_chaste_interface__Ca__Ca_i * var_INaCa__alpha * exp((-1.0 + var_INaCa__gamma) * var_Environment__F * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T))) * NV_Ith_S(mParameters, 15) / ((1.0 + var_INaCa__K_sat * exp((-1.0 + var_INaCa__gamma) * var_Environment__F * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T))) * (pow(NV_Ith_S(mParameters, 7), 3) + pow(var_INaCa__Km_Nai, 3)) * (NV_Ith_S(mParameters, 5) + var_INaCa__Km_Ca)); // nanoA_per_nanoF
        const double var_INaCa__i_NaCa_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_INaCa__i_NaCa; // uA_per_cm2
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_iCaL_f2_gate__tau_f2 = 40.0 / (1.0 + exp(3.0 + 0.10000000000000001 * var_chaste_interface__cell__V)) + 15.5 / (1.0 + exp(2.5 - 0.10000000000000001 * var_chaste_interface__cell__V)) + 281.0 * exp(-3.0375000000000001 * pow((1 + 0.037037037037037035 * var_chaste_interface__cell__V), 2)); // millisecond
        const double var_iCaL_fCass_gate__tau_fCass = 2.0 + 80.0 / (1.0 + 399.99999999999994 * pow(var_chaste_interface__Ca__Ca_ss, 2)); // millisecond
        const double var_ICaL__i_CaL = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356880329828957e-6) ? (374338.90822798351 * (-14.999998664311967 + var_chaste_interface__cell__V) * (0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(9.9999999999858739e-8)) + 0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) - 0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) : (14447.286958825251 * (-15.0 + var_chaste_interface__cell__V) * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-1.1230167246823641 + 0.074867781645490947 * var_chaste_interface__cell__V)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-1.1230167246823641 + 0.074867781645490947 * var_chaste_interface__cell__V)))); // nanoA_per_nanoF
        const double var_ICaL__i_CaL_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_ICaL__i_CaL; // uA_per_cm2
        const double var_iCaL_f_gate__tau_f = 5.0 + 50.0 / (1.0 + exp(1.3 - 0.10000000000000001 * var_chaste_interface__cell__V)) + 45.0 / (1.0 + exp(3.0 + 0.10000000000000001 * var_chaste_interface__cell__V)) + 275.625 * exp(-3.2400000000000002 * pow((1 + 0.037037037037037035 * var_chaste_interface__cell__V), 2)); // millisecond
        const double var_iK1_rectification__Mg_Buf = 0.0356; // millimolar
        const double var_iK1_rectification__SPM = 0.0014613; // millimolar
        const double var_iK1_rectification__fac = 1.0648; // dimensionless
        const double var_iK1_rectification__phi = 0.88380000000000003; // dimensionless
        const double var_iNa_h_gate__alpha_h = ((var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 11)) ? (0.057000000000000002 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 11) - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_millisecond
        const double var_iNa_h_gate__beta_h = ((var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 11)) ? (310000.0 * exp(0.34849999999999998 * var_chaste_interface__cell__V - 0.34849999999999998 * NV_Ith_S(mParameters, 11)) + 2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * NV_Ith_S(mParameters, 11))) : (5.9230769230769234 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 11) - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_millisecond
        const double var_iNa_h_gate__tau_h = 1 / (var_iNa_h_gate__alpha_h + var_iNa_h_gate__beta_h); // millisecond
        const double var_iNa_j_gate__alpha_j = ((var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 11)) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-25428.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * NV_Ith_S(mParameters, 11)) - 6.9480000000000002e-6 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 11) - 0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * NV_Ith_S(mParameters, 11)))) : (0)); // per_millisecond
        const double var_iNa_j_gate__beta_j = ((var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 11)) ? (0.024240000000000001 * exp(0.01052 * NV_Ith_S(mParameters, 11) - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 11) - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__cell__V - 0.057000000000000002 * NV_Ith_S(mParameters, 11)) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 11) - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_millisecond
        const double var_iNa_j_gate__tau_j = 1 / (var_iNa_j_gate__alpha_j + var_iNa_j_gate__beta_j); // millisecond
        const double var_reversal_potentials__E_K = var_Environment__R * var_Environment__T * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__K__K_i) / var_Environment__F; // millivolt
        const double var_IKr__i_Kr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * (-7.8571428571428568 + 0.028571428571428571 * var_Environment__T) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 13) * var_chaste_interface__iKr_Markov__Or4; // nanoA_per_nanoF
        const double var_IKr__i_Kr_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_IKr__i_Kr; // uA_per_cm2
        const double var_Ito__i_to = (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 16) * var_chaste_interface__ito_r_gate__r * var_chaste_interface__ito_s_gate__s; // nanoA_per_nanoF
        const double var_Ito__i_to_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_Ito__i_to; // uA_per_cm2
        const double var_iK1_rectification__KbMg = 0.45000000000000001 * exp(-0.050000000000000003 * var_chaste_interface__cell__V + 0.050000000000000003 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__Kd1SPM = 0.00069999999999999999 * exp(-0.20833333333333334 * var_chaste_interface__cell__V - 1.6666666666666667 * var_iK1_rectification__Mg_Buf + 0.20833333333333334 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__Kd2SPM = 0.040000000000000001 * exp(-0.10989010989010989 * var_chaste_interface__cell__V + 0.10989010989010989 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__KiMg = 2.7999999999999998 * exp(-0.0055555555555555558 * var_chaste_interface__cell__V + 0.0055555555555555558 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__rec2 = 1 / (1.0 + var_iK1_rectification__SPM / var_iK1_rectification__Kd2SPM); // dimensionless
        const double var_iK1_rectification__temp = 1.0 + var_iK1_rectification__Mg_Buf / var_iK1_rectification__KbMg; // dimensionless
        const double var_iK1_rectification__rec1 = pow(var_iK1_rectification__temp, 2) / (pow(var_iK1_rectification__temp, 3) + var_iK1_rectification__SPM / var_iK1_rectification__Kd1SPM + var_iK1_rectification__Mg_Buf / var_iK1_rectification__KiMg); // dimensionless
        const double var_iK1_rectification__xK1_inf = (1.0 - var_iK1_rectification__phi) * var_iK1_rectification__rec2 + var_iK1_rectification__phi * var_iK1_rectification__rec1; // dimensionless
        const double var_IK1__i_K1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * (-7.8571428571428568 + 0.028571428571428571 * var_Environment__T) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 12) * var_iK1_rectification__xK1_inf; // nanoA_per_nanoF
        const double var_IK1__i_K1_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_IK1__i_K1; // uA_per_cm2
        const double var_reversal_potentials__E_Na = var_Environment__R * var_Environment__T * log(NV_Ith_S(mParameters, 7) / var_chaste_interface__Na__Na_i) / var_Environment__F; // millivolt
        const double var_INa__i_Na = pow(var_chaste_interface__iNa_m_gate__m, 3) * (-var_reversal_potentials__E_Na + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 9) * var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j; // nanoA_per_nanoF
        const double var_INa__i_Na_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_INa__i_Na; // uA_per_cm2
        const double var_reversal_potentials__P_kna = 0.029999999999999999; // dimensionless
        const double var_reversal_potentials__E_Ks = var_Environment__R * var_Environment__T * log((NV_Ith_S(mParameters, 7) * var_reversal_potentials__P_kna + NV_Ith_S(mParameters, 6)) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__P_kna + var_chaste_interface__K__K_i)) / var_Environment__F; // millivolt
        const double var_IKs__i_Ks = pow(var_chaste_interface__iKs_Xs_gate__Xs, 2) * (-var_reversal_potentials__E_Ks + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 14); // nanoA_per_nanoF
        const double var_IKs__i_Ks_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_IKs__i_Ks; // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(16);
        NV_Ith_S(dqs, 0) = var_Irel__i_rel;
        NV_Ith_S(dqs, 1) = var_ICaL__i_CaL_converted;
        NV_Ith_S(dqs, 2) = var_iCaL_f2_gate__tau_f2;
        NV_Ith_S(dqs, 3) = var_iCaL_fCass_gate__tau_fCass;
        NV_Ith_S(dqs, 4) = var_iCaL_f_gate__tau_f;
        NV_Ith_S(dqs, 5) = var_cell__Cm_converted;
        NV_Ith_S(dqs, 6) = var_INa__i_Na_converted;
        NV_Ith_S(dqs, 7) = var_iNa_h_gate__tau_h;
        NV_Ith_S(dqs, 8) = var_iNa_j_gate__tau_j;
        NV_Ith_S(dqs, 9) = var_IK1__i_K1_converted;
        NV_Ith_S(dqs, 10) = var_IKr__i_Kr_converted;
        NV_Ith_S(dqs, 11) = var_IKs__i_Ks_converted;
        NV_Ith_S(dqs, 12) = var_INaCa__i_NaCa_converted;
        NV_Ith_S(dqs, 13) = var_cell__i_Stim_converted;
        NV_Ith_S(dqs, 14) = var_Ito__i_to_converted;
        NV_Ith_S(dqs, 15) = var_chaste_interface__Environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellfink_noble_giles_model_2008FromCellMLCvode>::Initialise(void)
{
    this->mSystemName = "fink_noble_giles_model_2008";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-86.45);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0001092);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("iKr_Markov__Cr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9786);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("iKr_Markov__Cr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0031);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("iKr_Markov__Cr3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0029);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("iKr_Markov__Or4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.014);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("iKr_Markov__Ir5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0014);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BOr4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BIr5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("iKs_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00303);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("ito_s_gate__s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("ito_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.11e-08);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00132);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7768);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7766);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.06e-06);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f2_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9995);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 22):
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(2.7656);

    // NV_Ith_S(rY, 23):
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0001893);

    // NV_Ith_S(rY, 24):
    this->mVariableNames.push_back("Irel__R_prime");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9864);

    // NV_Ith_S(rY, 25):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.940167);

    // NV_Ith_S(rY, 26):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(141.0167);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("millimolar_per_millisecond");

    // mParameters[3]:
    this->mParameterNames.push_back("cell__Cm");
    this->mParameterUnits.push_back("nanoF");

    // mParameters[4]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[7]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("litre_per_farad_millisecond");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("microS_per_nanoF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("millivolt");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("microS_per_nanoF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("microS_per_nanoF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("microS_per_nanoF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("nanoA_per_nanoF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("microS_per_nanoF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f2_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_fCa_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_capacitance");
    this->mDerivedQuantityUnits.push_back("uF");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellfink_noble_giles_model_2008FromCellMLCvode)

#endif // CHASTE_CVODE
