#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: fox_model_2001
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvode)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "fox_mcharg_gilmour_2002.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"


    boost::shared_ptr<RegularStimulus> Cellfox_mcharg_gilmour_2002FromCellMLCvode::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_amplitude_converted = -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__stim_duration = 1.0; // millisecond
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_start = 100.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude_converted),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellfox_mcharg_gilmour_2002FromCellMLCvode::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellfox_mcharg_gilmour_2002FromCellMLCvode::Cellfox_mcharg_gilmour_2002FromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                13,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellfox_mcharg_gilmour_2002FromCellMLCvode>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 9.9999999999999995e-7; // (var_calcium_dynamics__P_leak) [per_millisecond]
        NV_Ith_S(this->mParameters, 1) = 6.0; // (var_calcium_dynamics__P_rel) [per_millisecond]
        NV_Ith_S(this->mParameters, 2) = 0.10000000000000001; // (var_calcium_dynamics__V_up) [micromolar_per_millisecond]
        NV_Ith_S(this->mParameters, 3) = 149.40000000000001; // (var_standard_ionic_concentrations__K_i) [millimolar]
        NV_Ith_S(this->mParameters, 4) = 10.0; // (var_standard_ionic_concentrations__Na_i) [millimolar]
        NV_Ith_S(this->mParameters, 5) = 2000.0; // (var_standard_ionic_concentrations__Ca_o) [micromolar]
        NV_Ith_S(this->mParameters, 6) = 4.0; // (var_standard_ionic_concentrations__K_o) [millimolar]
        NV_Ith_S(this->mParameters, 7) = 138.0; // (var_standard_ionic_concentrations__Na_o) [millimolar]
        NV_Ith_S(this->mParameters, 8) = 2.26e-5; // (var_L_type_Ca_current__P_Ca) [cm_per_millisecond]
        NV_Ith_S(this->mParameters, 9) = 30.0; // (var_L_type_Ca_current_f_Ca_gate__tau_f_Ca) [millisecond]
        NV_Ith_S(this->mParameters, 10) = 12.800000000000001; // (var_fast_sodium_current__g_Na) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 11) = 0; // (var_fast_sodium_current__perc_reduced_inact_for_IpNa) [dimensionless]
        NV_Ith_S(this->mParameters, 12) = 0; // (var_fast_sodium_current__shift_INa_inact) [millivolt]
        NV_Ith_S(this->mParameters, 13) = 2.7999999999999998; // (var_time_independent_potassium_current__g_K1) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 14) = 0.013599999999999999; // (var_rapid_activating_delayed_rectifiyer_K_current__g_Kr) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 15) = 0.024500000000000001; // (var_slow_activating_delayed_rectifiyer_K_current__g_Ks) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 16) = 1500.0; // (var_Na_Ca_exchanger__K_NaCa) [microA_per_microF]
        NV_Ith_S(this->mParameters, 17) = 0.23815; // (var_transient_outward_potassium_current__g_to) [milliS_per_microF]
    }

    Cellfox_mcharg_gilmour_2002FromCellMLCvode::~Cellfox_mcharg_gilmour_2002FromCellMLCvode()
    {
    }

    
    double Cellfox_mcharg_gilmour_2002FromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__calcium_dynamics__Ca_i_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 4.72e-05
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 3.742e-05
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.942
        
        const double var_Na_Ca_exchanger__K_mCa = 1380.0; // micromolar
        const double var_Na_Ca_exchanger__K_mNa = 87.5; // millimolar
        const double var_Na_Ca_exchanger__K_sat = 0.20000000000000001; // dimensionless
        const double var_Na_Ca_exchanger__eta = 0.34999999999999998; // dimensionless
        const double var_calcium_background_current__g_Cab = 0.00038420000000000001; // milliS_per_microF
        const double var_calcium_dynamics__Ca_i = 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted; // micromolar
        const double var_membrane__F = 96.5; // coulomb_per_millimole
        const double var_membrane__R = 8.3140000000000001; // joule_per_mole_kelvin
        const double var_membrane__T = 310.0; // kelvin
        const double var_plateau_potassium_current__g_Kp = 0.0022160000000000001; // milliS_per_microF
        const double var_plateau_potassium_current_Kp_gate__Kp_V = 1 / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_rapid_activating_delayed_rectifiyer_K_current__R_V = 1 / (1.0 + 2.5 * exp(2.8000000000000003 + 0.10000000000000001 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_sarcolemmal_calcium_pump__K_mpCa = 0.050000000000000003; // micromolar
        const double var_sarcolemmal_calcium_pump__i_pCa_max = 0.050000000000000003; // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = var_calcium_dynamics__Ca_i * var_sarcolemmal_calcium_pump__i_pCa_max / (var_calcium_dynamics__Ca_i + var_sarcolemmal_calcium_pump__K_mpCa); // microA_per_microF
        const double var_sodium_background_current__g_Nab = 0.0030999999999999999; // milliS_per_microF
        const double var_sodium_potassium_pump__K_mKo = 1.5; // millimolar
        const double var_sodium_potassium_pump__K_mNai = 10.0; // millimolar
        const double var_sodium_potassium_pump__i_NaK_max = 0.69299999999999995; // microA_per_microF
        const double var_L_type_Ca_current__i_Ca_max = ((fabs(var_chaste_interface__membrane__V) < 1.3354093264248704e-6) ? (374417.03461708582 * (1.3354093264248704e-6 + var_chaste_interface__membrane__V) * (1.9299999999999998e-5 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(9.9999999999999995e-8)) + 1.9299999999999998e-5 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(-9.9999999999999995e-8))) - 1.9299999999999998e-5 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(-9.9999999999999995e-8))) : (14.452497536219512 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(0.074883406923417162 * var_chaste_interface__membrane__V)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__membrane__V / (-1.0 + exp(0.074883406923417162 * var_chaste_interface__membrane__V)))); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca = var_L_type_Ca_current__i_Ca_max * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f; // microA_per_microF
        const double var_L_type_Ca_current__i_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_L_type_Ca_current__i_Ca; // uA_per_cm2
        const double var_calcium_background_current__E_Ca = 0.5 * var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 5) / var_calcium_dynamics__Ca_i) / var_membrane__F; // millivolt
        const double var_calcium_background_current__i_Ca_b = (-var_calcium_background_current__E_Ca + var_chaste_interface__membrane__V) * var_calcium_background_current__g_Cab; // microA_per_microF
        const double var_L_type_Ca_current__i_CaK = ((fabs(var_chaste_interface__membrane__V) < 2.6708186528497407e-6) ? (187208.51730854291 * (2.6708186528497407e-6 + var_chaste_interface__membrane__V) * (5.5873499999999997e-9 * (-NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 3) * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(9.9999999999999995e-8))) + 5.5873499999999997e-9 * (-NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 3) * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(-9.9999999999999995e-8)))) - 5.5873499999999997e-9 * (-NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 3) * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(-9.9999999999999995e-8)))) : (0.0020919990183677745 * (-NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 3) * exp(0.037441703461708581 * var_chaste_interface__membrane__V)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__membrane__V / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(0.037441703461708581 * var_chaste_interface__membrane__V))))); // microA_per_microF
        const double var_rapid_activating_delayed_rectifiyer_K_current__E_K = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 6) / NV_Ith_S(mParameters, 3)) / var_membrane__F; // millivolt
        const double var_plateau_potassium_current__i_Kp = (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * var_plateau_potassium_current__g_Kp * var_plateau_potassium_current_Kp_gate__Kp_V; // microA_per_microF
        const double var_rapid_activating_delayed_rectifiyer_K_current__i_Kr = 0.5 * sqrt(NV_Ith_S(mParameters, 6)) * (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * var_rapid_activating_delayed_rectifiyer_K_current__R_V * NV_Ith_S(mParameters, 14) * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr; // microA_per_microF
        const double var_rapid_activating_delayed_rectifiyer_K_current__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_rapid_activating_delayed_rectifiyer_K_current__i_Kr; // uA_per_cm2
        const double var_Na_Ca_exchanger__i_NaCa = (pow(NV_Ith_S(mParameters, 4), 3) * NV_Ith_S(mParameters, 5) * exp(var_Na_Ca_exchanger__eta * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T)) - pow(NV_Ith_S(mParameters, 7), 3) * var_calcium_dynamics__Ca_i * exp((-1.0 + var_Na_Ca_exchanger__eta) * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * NV_Ith_S(mParameters, 16) / ((1.0 + var_Na_Ca_exchanger__K_sat * exp((-1.0 + var_Na_Ca_exchanger__eta) * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * (pow(var_Na_Ca_exchanger__K_mNa, 3) + pow(NV_Ith_S(mParameters, 7), 3)) * (var_Na_Ca_exchanger__K_mCa + NV_Ith_S(mParameters, 5))); // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_Na_Ca_exchanger__i_NaCa; // uA_per_cm2
        const double var_fast_sodium_current__E_Na = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 7) / NV_Ith_S(mParameters, 4)) / var_membrane__F; // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 10) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // microA_per_microF
        const double var_fast_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_slow_activating_delayed_rectifiyer_K_current__E_Ks = var_membrane__R * var_membrane__T * log((NV_Ith_S(mParameters, 6) + 0.018329999999999999 * NV_Ith_S(mParameters, 7)) / (NV_Ith_S(mParameters, 3) + 0.018329999999999999 * NV_Ith_S(mParameters, 4))) / var_membrane__F; // millivolt
        const double var_slow_activating_delayed_rectifiyer_K_current__i_Ks = pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2) * (-var_slow_activating_delayed_rectifiyer_K_current__E_Ks + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 15); // microA_per_microF
        const double var_slow_activating_delayed_rectifiyer_K_current__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_slow_activating_delayed_rectifiyer_K_current__i_Ks; // uA_per_cm2
        const double var_sodium_background_current__i_Na_b = (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * var_sodium_background_current__g_Nab; // microA_per_microF
        const double var_sodium_potassium_pump__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 7)); // dimensionless
        const double var_sodium_potassium_pump__f_NaK = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T)) + 0.036499999999999998 * var_sodium_potassium_pump__sigma * exp(-var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))); // dimensionless
        const double var_sodium_potassium_pump__i_NaK = var_sodium_potassium_pump__f_NaK * var_sodium_potassium_pump__i_NaK_max * NV_Ith_S(mParameters, 6) / ((1.0 + pow((var_sodium_potassium_pump__K_mNai / NV_Ith_S(mParameters, 4)), 1.5)) * (var_sodium_potassium_pump__K_mKo + NV_Ith_S(mParameters, 6))); // microA_per_microF
        const double var_time_independent_potassium_current__K_mK1 = 13.0; // millimolar
        const double var_time_independent_potassium_current_K1_gate__K1_infinity = 1 / (2.0 + exp(1.6200000000000001 * (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * var_membrane__F / (var_membrane__R * var_membrane__T))); // dimensionless
        const double var_time_independent_potassium_current__i_K1 = (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 13) * var_time_independent_potassium_current_K1_gate__K1_infinity / (NV_Ith_S(mParameters, 6) + var_time_independent_potassium_current__K_mK1); // microA_per_microF
        const double var_time_independent_potassium_current__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_time_independent_potassium_current__i_K1; // uA_per_cm2
        const double var_transient_outward_potassium_current__i_to = (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 17) * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to; // microA_per_microF
        const double var_transient_outward_potassium_current__i_to_converted = HeartConfig::Instance()->GetCapacitance() * var_transient_outward_potassium_current__i_to; // uA_per_cm2
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_L_type_Ca_current__i_CaK + HeartConfig::Instance()->GetCapacitance() * var_calcium_background_current__i_Ca_b + HeartConfig::Instance()->GetCapacitance() * var_plateau_potassium_current__i_Kp + HeartConfig::Instance()->GetCapacitance() * var_sarcolemmal_calcium_pump__i_p_Ca + HeartConfig::Instance()->GetCapacitance() * var_sodium_background_current__i_Na_b + HeartConfig::Instance()->GetCapacitance() * var_sodium_potassium_pump__i_NaK + var_L_type_Ca_current__i_Ca_converted + var_Na_Ca_exchanger__i_NaCa_converted + var_fast_sodium_current__i_Na_converted + var_rapid_activating_delayed_rectifiyer_K_current__i_Kr_converted + var_slow_activating_delayed_rectifiyer_K_current__i_Ks_converted + var_time_independent_potassium_current__i_K1_converted + var_transient_outward_potassium_current__i_to_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellfox_mcharg_gilmour_2002FromCellMLCvode::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__calcium_dynamics__Ca_i_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 4.72e-05
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 3.742e-05
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.942
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 12);
        // Units: micromolar; Initial value: 320.0

        // Mathematics
        double d_dt_chaste_interface_var_membrane__V;
        const double var_L_type_Ca_current__C_sc = 1.0; // microF_per_cm2
        const double var_L_type_Ca_current_f_Ca_gate__K_mfCa = 0.17999999999999999; // micromolar
        const double var_Na_Ca_exchanger__K_mCa = 1380.0; // micromolar
        const double var_Na_Ca_exchanger__K_mNa = 87.5; // millimolar
        const double var_Na_Ca_exchanger__K_sat = 0.20000000000000001; // dimensionless
        const double var_Na_Ca_exchanger__eta = 0.34999999999999998; // dimensionless
        const double var_calcium_background_current__g_Cab = 0.00038420000000000001; // milliS_per_microF
        const double var_calcium_dynamics__A_Cap = 0.00015339999999999999; // cm2
        const double var_calcium_dynamics__CMDN_tot = 10.0; // micromolar
        const double var_calcium_dynamics__CSQN_tot = 10000.0; // micromolar
        const double var_calcium_dynamics__Ca_i = 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted; // micromolar
        const double var_L_type_Ca_current_f_Ca_gate__f_Ca_infinity = 1 / (1.0 + pow(var_calcium_dynamics__Ca_i, 3) / pow(var_L_type_Ca_current_f_Ca_gate__K_mfCa, 3)); // dimensionless
        const double d_dt_chaste_interface_var_L_type_Ca_current_f_Ca_gate__f_Ca = (-var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca + var_L_type_Ca_current_f_Ca_gate__f_Ca_infinity) / NV_Ith_S(mParameters, 9); // 1 / millisecond
        const double var_calcium_dynamics__K_mCMDN = 2.0; // micromolar
        const double var_calcium_dynamics__K_mCSQN = 600.0; // micromolar
        const double var_calcium_dynamics__K_mup = 0.32000000000000001; // micromolar
        const double var_calcium_dynamics__J_leak = (-var_calcium_dynamics__Ca_i + var_chaste_interface__calcium_dynamics__Ca_SR) * NV_Ith_S(mParameters, 0); // micromolar_per_millisecond
        const double var_calcium_dynamics__V_SR = 1.9999999999999999e-6; // microlitre
        const double var_calcium_dynamics__V_myo = 2.584e-5; // microlitre
        const double var_calcium_dynamics__J_up = NV_Ith_S(mParameters, 2) / (1.0 + pow(var_calcium_dynamics__K_mup, 2) / pow(var_calcium_dynamics__Ca_i, 2)); // micromolar_per_millisecond
        const double var_calcium_dynamics__beta_SR = 1 / (1.0 + var_calcium_dynamics__CSQN_tot * var_calcium_dynamics__K_mCSQN / pow((var_chaste_interface__calcium_dynamics__Ca_SR + var_calcium_dynamics__K_mCSQN), 2)); // dimensionless
        const double var_calcium_dynamics__beta_i = 1 / (1.0 + var_calcium_dynamics__CMDN_tot * var_calcium_dynamics__K_mCMDN / pow((var_calcium_dynamics__Ca_i + var_calcium_dynamics__K_mCMDN), 2)); // dimensionless
        const double var_calcium_dynamics__gamma = 1 / (1.0 + 8000000000.0 / pow(var_chaste_interface__calcium_dynamics__Ca_SR, 3)); // dimensionless
        const double var_membrane__F = 96.5; // coulomb_per_millimole
        const double var_membrane__R = 8.3140000000000001; // joule_per_mole_kelvin
        const double var_membrane__T = 310.0; // kelvin
        const double var_L_type_Ca_current_d_gate__E0_m = 40.0 + var_chaste_interface__membrane__V; // millivolt
        const double var_L_type_Ca_current_d_gate__d_infinity = 1 / (1.0 + exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_L_type_Ca_current_d_gate__tau_d = 1 / (0.25 * exp(-0.01 * var_chaste_interface__membrane__V) / (1.0 + exp(-0.070000000000000007 * var_chaste_interface__membrane__V)) + 0.070000000000000007 * exp(-0.050000000000000003 * var_L_type_Ca_current_d_gate__E0_m) / (1.0 + exp(0.050000000000000003 * var_L_type_Ca_current_d_gate__E0_m))); // millisecond
        const double d_dt_chaste_interface_var_L_type_Ca_current_d_gate__d = (-var_chaste_interface__L_type_Ca_current_d_gate__d + var_L_type_Ca_current_d_gate__d_infinity) / var_L_type_Ca_current_d_gate__tau_d; // 1 / millisecond
        const double var_L_type_Ca_current_f_gate__f_infinity = 1 / (1.0 + exp(2.5 + 0.20000000000000001 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_L_type_Ca_current_f_gate__tau_f = 30.0 + 200.0 / (1.0 + exp(2.1052631578947367 + 0.10526315789473684 * var_chaste_interface__membrane__V)); // millisecond
        const double d_dt_chaste_interface_var_L_type_Ca_current_f_gate__f = (-var_chaste_interface__L_type_Ca_current_f_gate__f + var_L_type_Ca_current_f_gate__f_infinity) / var_L_type_Ca_current_f_gate__tau_f; // 1 / millisecond
        const double var_calcium_dynamics__J_rel = (-var_calcium_dynamics__Ca_i + var_chaste_interface__calcium_dynamics__Ca_SR * var_calcium_dynamics__gamma) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f * NV_Ith_S(mParameters, 1) / (1.0 + 1.6499999999999999 * exp(0.050000000000000003 * var_chaste_interface__membrane__V)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_dynamics__Ca_SR = (-var_calcium_dynamics__J_leak - var_calcium_dynamics__J_rel + var_calcium_dynamics__J_up) * var_calcium_dynamics__V_myo * var_calcium_dynamics__beta_SR / var_calcium_dynamics__V_SR; // micromolar / millisecond
        const double var_fast_sodium_current_h_gate__alpha_h = 0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 12) - 0.14705882352941177 * var_chaste_interface__membrane__V); // per_millisecond
        const double var_fast_sodium_current_h_gate__beta_h = 7.5 / (1.0 + exp(-1.1000000000000001 + 0.10000000000000001 * NV_Ith_S(mParameters, 12) - 0.10000000000000001 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_fast_sodium_current_h_gate__h_inf = 0.01 * NV_Ith_S(mParameters, 11) + (1.0 - 0.01 * NV_Ith_S(mParameters, 11)) * var_fast_sodium_current_h_gate__alpha_h / (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h); // dimensionless
        const double var_fast_sodium_current_h_gate__tau_h = 1 / (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h); // millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_h_gate__h = (-var_chaste_interface__fast_sodium_current_h_gate__h + var_fast_sodium_current_h_gate__h_inf) / var_fast_sodium_current_h_gate__tau_h; // 1 / millisecond
        const double var_fast_sodium_current_j_gate__alpha_j = 0.17499999999999999 * exp(-4.3478260869565215 + 0.043478260869565216 * NV_Ith_S(mParameters, 12) - 0.043478260869565216 * var_chaste_interface__membrane__V) / (1.0 + exp(11.85 + 0.14999999999999999 * var_chaste_interface__membrane__V - 0.14999999999999999 * NV_Ith_S(mParameters, 12))); // per_millisecond
        const double var_fast_sodium_current_j_gate__beta_j = 0.29999999999999999 / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 12) - 0.10000000000000001 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_fast_sodium_current_j_gate__j_inf = 0.01 * NV_Ith_S(mParameters, 11) + (1.0 - 0.01 * NV_Ith_S(mParameters, 11)) * var_fast_sodium_current_j_gate__alpha_j / (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j); // dimensionless
        const double var_fast_sodium_current_j_gate__tau_j = 1 / (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j); // millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_j_gate__j = (-var_chaste_interface__fast_sodium_current_j_gate__j + var_fast_sodium_current_j_gate__j_inf) / var_fast_sodium_current_j_gate__tau_j; // 1 / millisecond
        const double var_fast_sodium_current_m_gate__alpha_m = ((fabs(47.130000000000003 + var_chaste_interface__membrane__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_fast_sodium_current_m_gate__beta_m = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__membrane__V); // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_m_gate__m = (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m) * var_fast_sodium_current_m_gate__alpha_m - var_fast_sodium_current_m_gate__beta_m * var_chaste_interface__fast_sodium_current_m_gate__m; // 1 / millisecond
        const double var_rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr_inf = 1 / (1.0 + exp(-2.1819999999999999 - 0.18190000000000001 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__tau_X_kr = 43.0 + 1 / (exp(-7.6769999999999996 - 0.012800000000000001 * var_chaste_interface__membrane__V) + exp(-5.4950000000000001 + 0.1691 * var_chaste_interface__membrane__V)); // millisecond
        const double d_dt_chaste_interface_var_rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = (-var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr + var_rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr_inf) / var_rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__tau_X_kr; // 1 / millisecond
        const double var_sarcolemmal_calcium_pump__K_mpCa = 0.050000000000000003; // micromolar
        const double var_sarcolemmal_calcium_pump__i_pCa_max = 0.050000000000000003; // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = var_calcium_dynamics__Ca_i * var_sarcolemmal_calcium_pump__i_pCa_max / (var_calcium_dynamics__Ca_i + var_sarcolemmal_calcium_pump__K_mpCa); // microA_per_microF
        const double var_slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks_infinity = 1 / (1.0 + exp(1.1764705882352942 - 0.073529411764705885 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_slow_activating_delayed_rectifiyer_K_current_X_ks_gate__tau_X_ks = ((fabs(-10.0 + var_chaste_interface__membrane__V) < 1.455604075689676e-6) ? (1 / (-1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) - 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8)) + 343500.00000040967 * (-9.9999985443959236 + var_chaste_interface__membrane__V) * (1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) + 1.0465793304208771e-10 / (1.0 - exp(-2.1542940320207204e-7)) + 1.9068413391534758e-10 / (-1.0 + exp(9.9999999999880736e-8)) + 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8))))) : (1 / (0.00013100000000000001 * (-10.0 + var_chaste_interface__membrane__V) / (-1.0 + exp(-0.68699999999999994 + 0.068699999999999997 * var_chaste_interface__membrane__V)) + 7.1899999999999999e-5 * (-10.0 + var_chaste_interface__membrane__V) / (1.0 - exp(1.48 - 0.14799999999999999 * var_chaste_interface__membrane__V))))); // millisecond
        const double d_dt_chaste_interface_var_slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = (-var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks + var_slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks_infinity) / var_slow_activating_delayed_rectifiyer_K_current_X_ks_gate__tau_X_ks; // 1 / millisecond
        const double var_L_type_Ca_current__i_Ca_max = ((fabs(var_chaste_interface__membrane__V) < 1.3354093264248704e-6) ? (374417.03461708582 * (1.3354093264248704e-6 + var_chaste_interface__membrane__V) * (1.9299999999999998e-5 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(9.9999999999999995e-8)) + 1.9299999999999998e-5 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(-9.9999999999999995e-8))) - 1.9299999999999998e-5 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(-9.9999999999999995e-8))) : (14.452497536219512 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(0.074883406923417162 * var_chaste_interface__membrane__V)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__membrane__V / (-1.0 + exp(0.074883406923417162 * var_chaste_interface__membrane__V)))); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca = var_L_type_Ca_current__i_Ca_max * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f; // microA_per_microF
        const double var_calcium_background_current__E_Ca = 0.5 * var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 5) / var_calcium_dynamics__Ca_i) / var_membrane__F; // millivolt
        const double var_calcium_background_current__i_Ca_b = (-var_calcium_background_current__E_Ca + var_chaste_interface__membrane__V) * var_calcium_background_current__g_Cab; // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = (pow(NV_Ith_S(mParameters, 4), 3) * NV_Ith_S(mParameters, 5) * exp(var_Na_Ca_exchanger__eta * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T)) - pow(NV_Ith_S(mParameters, 7), 3) * var_calcium_dynamics__Ca_i * exp((-1.0 + var_Na_Ca_exchanger__eta) * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * NV_Ith_S(mParameters, 16) / ((1.0 + var_Na_Ca_exchanger__K_sat * exp((-1.0 + var_Na_Ca_exchanger__eta) * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * (pow(var_Na_Ca_exchanger__K_mNa, 3) + pow(NV_Ith_S(mParameters, 7), 3)) * (var_Na_Ca_exchanger__K_mCa + NV_Ith_S(mParameters, 5))); // microA_per_microF
        const double var_calcium_dynamics__Ca_i_orig_deriv = (-var_calcium_dynamics__J_up - 0.5 * (-2.0 * var_Na_Ca_exchanger__i_NaCa + var_L_type_Ca_current__i_Ca + var_calcium_background_current__i_Ca_b + var_sarcolemmal_calcium_pump__i_p_Ca) * var_L_type_Ca_current__C_sc * var_calcium_dynamics__A_Cap / (var_calcium_dynamics__V_myo * var_membrane__F) + var_calcium_dynamics__J_leak + var_calcium_dynamics__J_rel) * var_calcium_dynamics__beta_i; // micromolar / millisecond
        const double d_dt_chaste_interface_var_calcium_dynamics__Ca_i_converted = 0.001 * var_calcium_dynamics__Ca_i_orig_deriv; // millimolar / millisecond
        const double var_transient_outward_potassium_current_X_to_gate__alpha_X_to = 0.045159999999999999 * exp(0.035770000000000003 * var_chaste_interface__membrane__V); // per_millisecond
        const double var_transient_outward_potassium_current_X_to_gate__beta_X_to = 0.098900000000000002 * exp(-0.062370000000000002 * var_chaste_interface__membrane__V); // per_millisecond
        const double d_dt_chaste_interface_var_transient_outward_potassium_current_X_to_gate__X_to = (1.0 - var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to) * var_transient_outward_potassium_current_X_to_gate__alpha_X_to - var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to * var_transient_outward_potassium_current_X_to_gate__beta_X_to; // 1 / millisecond
        const double var_transient_outward_potassium_current_Y_to_gate__alpha_Y_to = 0.0054149999999999997 * exp(-6.7000000000000002 - 0.20000000000000001 * var_chaste_interface__membrane__V) / (1.0 + 0.051334999999999999 * exp(-6.7000000000000002 - 0.20000000000000001 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_transient_outward_potassium_current_Y_to_gate__beta_Y_to = 0.0054149999999999997 * exp(6.7000000000000002 + 0.20000000000000001 * var_chaste_interface__membrane__V) / (1.0 + 0.051334999999999999 * exp(6.7000000000000002 + 0.20000000000000001 * var_chaste_interface__membrane__V)); // per_millisecond
        const double d_dt_chaste_interface_var_transient_outward_potassium_current_Y_to_gate__Y_to = (1.0 - var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to) * var_transient_outward_potassium_current_Y_to_gate__alpha_Y_to - var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to * var_transient_outward_potassium_current_Y_to_gate__beta_Y_to; // 1 / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__V = 0.0;
        }
        else
        {
            const double var_membrane__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
            const double var_membrane__i_Stim = var_membrane__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
            const double var_plateau_potassium_current__g_Kp = 0.0022160000000000001; // milliS_per_microF
            const double var_plateau_potassium_current_Kp_gate__Kp_V = 1 / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__V)); // dimensionless
            const double var_rapid_activating_delayed_rectifiyer_K_current__R_V = 1 / (1.0 + 2.5 * exp(2.8000000000000003 + 0.10000000000000001 * var_chaste_interface__membrane__V)); // dimensionless
            const double var_sodium_background_current__g_Nab = 0.0030999999999999999; // milliS_per_microF
            const double var_sodium_potassium_pump__K_mKo = 1.5; // millimolar
            const double var_sodium_potassium_pump__K_mNai = 10.0; // millimolar
            const double var_sodium_potassium_pump__i_NaK_max = 0.69299999999999995; // microA_per_microF
            const double var_L_type_Ca_current__i_CaK = ((fabs(var_chaste_interface__membrane__V) < 2.6708186528497407e-6) ? (187208.51730854291 * (2.6708186528497407e-6 + var_chaste_interface__membrane__V) * (5.5873499999999997e-9 * (-NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 3) * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(9.9999999999999995e-8))) + 5.5873499999999997e-9 * (-NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 3) * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(-9.9999999999999995e-8)))) - 5.5873499999999997e-9 * (-NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 3) * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(-9.9999999999999995e-8)))) : (0.0020919990183677745 * (-NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 3) * exp(0.037441703461708581 * var_chaste_interface__membrane__V)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__membrane__V / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(0.037441703461708581 * var_chaste_interface__membrane__V))))); // microA_per_microF
            const double var_rapid_activating_delayed_rectifiyer_K_current__E_K = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 6) / NV_Ith_S(mParameters, 3)) / var_membrane__F; // millivolt
            const double var_plateau_potassium_current__i_Kp = (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * var_plateau_potassium_current__g_Kp * var_plateau_potassium_current_Kp_gate__Kp_V; // microA_per_microF
            const double var_rapid_activating_delayed_rectifiyer_K_current__i_Kr = 0.5 * sqrt(NV_Ith_S(mParameters, 6)) * (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * var_rapid_activating_delayed_rectifiyer_K_current__R_V * NV_Ith_S(mParameters, 14) * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr; // microA_per_microF
            const double var_fast_sodium_current__E_Na = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 7) / NV_Ith_S(mParameters, 4)) / var_membrane__F; // millivolt
            const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 10) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // microA_per_microF
            const double var_slow_activating_delayed_rectifiyer_K_current__E_Ks = var_membrane__R * var_membrane__T * log((NV_Ith_S(mParameters, 6) + 0.018329999999999999 * NV_Ith_S(mParameters, 7)) / (NV_Ith_S(mParameters, 3) + 0.018329999999999999 * NV_Ith_S(mParameters, 4))) / var_membrane__F; // millivolt
            const double var_slow_activating_delayed_rectifiyer_K_current__i_Ks = pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2) * (-var_slow_activating_delayed_rectifiyer_K_current__E_Ks + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 15); // microA_per_microF
            const double var_sodium_background_current__i_Na_b = (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * var_sodium_background_current__g_Nab; // microA_per_microF
            const double var_sodium_potassium_pump__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 7)); // dimensionless
            const double var_sodium_potassium_pump__f_NaK = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T)) + 0.036499999999999998 * var_sodium_potassium_pump__sigma * exp(-var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))); // dimensionless
            const double var_sodium_potassium_pump__i_NaK = var_sodium_potassium_pump__f_NaK * var_sodium_potassium_pump__i_NaK_max * NV_Ith_S(mParameters, 6) / ((1.0 + pow((var_sodium_potassium_pump__K_mNai / NV_Ith_S(mParameters, 4)), 1.5)) * (var_sodium_potassium_pump__K_mKo + NV_Ith_S(mParameters, 6))); // microA_per_microF
            const double var_time_independent_potassium_current__K_mK1 = 13.0; // millimolar
            const double var_time_independent_potassium_current_K1_gate__K1_infinity = 1 / (2.0 + exp(1.6200000000000001 * (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * var_membrane__F / (var_membrane__R * var_membrane__T))); // dimensionless
            const double var_time_independent_potassium_current__i_K1 = (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 13) * var_time_independent_potassium_current_K1_gate__K1_infinity / (NV_Ith_S(mParameters, 6) + var_time_independent_potassium_current__K_mK1); // microA_per_microF
            const double var_transient_outward_potassium_current__i_to = (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 17) * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to; // microA_per_microF
            d_dt_chaste_interface_var_membrane__V = -var_L_type_Ca_current__i_Ca - var_L_type_Ca_current__i_CaK - var_Na_Ca_exchanger__i_NaCa - var_calcium_background_current__i_Ca_b - var_fast_sodium_current__i_Na - var_membrane__i_Stim - var_plateau_potassium_current__i_Kp - var_rapid_activating_delayed_rectifiyer_K_current__i_Kr - var_sarcolemmal_calcium_pump__i_p_Ca - var_slow_activating_delayed_rectifiyer_K_current__i_Ks - var_sodium_background_current__i_Na_b - var_sodium_potassium_pump__i_NaK - var_time_independent_potassium_current__i_K1 - var_transient_outward_potassium_current__i_to; // millivolt / millisecond
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_membrane__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_calcium_dynamics__Ca_i_converted;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_fast_sodium_current_m_gate__m;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_fast_sodium_current_h_gate__h;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_fast_sodium_current_j_gate__j;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_transient_outward_potassium_current_X_to_gate__X_to;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_transient_outward_potassium_current_Y_to_gate__Y_to;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_L_type_Ca_current_f_gate__f;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_L_type_Ca_current_d_gate__d;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_L_type_Ca_current_f_Ca_gate__f_Ca;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_calcium_dynamics__Ca_SR;
    }

    void Cellfox_mcharg_gilmour_2002FromCellMLCvode::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__calcium_dynamics__Ca_i_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 4.72e-05
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 3.742e-05
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.942
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 12);
        // Units: micromolar; Initial value: 320.0
        const double var_x0 = 0.5 + 187208.51730854291 * var_chaste_interface__membrane__V;
        const double var_x1 = exp(9.9999999999999995e-8);
        const double var_x2 = 1 / (-1.0 + var_x1);
        const double var_x3 = -NV_Ith_S(mParameters, 6);
        const double var_x4 = var_x2 * (var_x3 + var_x1 * NV_Ith_S(mParameters, 3));
        const double var_x5 = -0.34100000000000003 * NV_Ith_S(mParameters, 5);
        const double var_x6 = 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted;
        const double var_x7 = var_x2 * (var_x5 + var_x1 * var_x6);
        const double var_x8 = 7.2262487681097562 * NV_Ith_S(mParameters, 8);
        const double var_x9 = exp(-9.9999999999999995e-8);
        const double var_x10 = 1 / (-1.0 + var_x9);
        const double var_x11 = var_x10 * (var_x5 + var_x6 * var_x9);
        const double var_x12 = fabs(var_chaste_interface__membrane__V);
        const double var_x13 = var_x12 < 1.3354093264248704e-6;
        const double var_x14 = exp(0.074883406923417162 * var_chaste_interface__membrane__V);
        const double var_x15 = var_x5 + var_x14 * var_x6;
        const double var_x16 = -1.0 + var_x14;
        const double var_x17 = NV_Ith_S(mParameters, 8) / var_x16;
        const double var_x18 = 14.452497536219512 * var_x15 * var_x17;
        const double var_x19 = var_x14 * var_chaste_interface__membrane__V;
        const double var_x20 = var_x17 * var_x19;
        const double var_x21 = var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f;
        const double var_x22 = var_x21 * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca;
        const double var_x23 = var_x22 * ((var_x13) ? (var_x11 * var_x8 + var_x7 * var_x8) : (var_x18 + 1082.2522540644097 * var_x20 * var_chaste_interface__calcium_dynamics__Ca_i_converted - 1.0822522540644097 * var_x15 * var_x19 * NV_Ith_S(mParameters, 8) / pow(var_x16, 2)));
        const double var_x24 = 1.9299999999999998e-5 * NV_Ith_S(mParameters, 8);
        const double var_x25 = var_x11 * var_x24;
        const double var_x26 = ((var_x13) ? (-var_x25 + 374417.03461708582 * (1.3354093264248704e-6 + var_chaste_interface__membrane__V) * (var_x25 + var_x24 * var_x7)) : (var_x18 * var_chaste_interface__membrane__V));
        const double var_x27 = pow((0.26500000000000001 - var_x26), (-2));
        const double var_x28 = 1.48064775e-9 * var_x27;
        const double var_x29 = var_x23 * var_x28;
        const double var_x30 = var_x10 * (var_x3 + var_x9 * NV_Ith_S(mParameters, 3));
        const double var_x31 = var_x29 * var_x30;
        const double var_x32 = 1 / (1.0 - 3.773584905660377 * var_x26);
        const double var_x33 = var_x22 * var_x32;
        const double var_x34 = 0.0010459995091838873 * var_x33;
        const double var_x35 = var_x12 < 2.6708186528497407e-6;
        const double var_x36 = 0.037441703461708581 * var_chaste_interface__membrane__V;
        const double var_x37 = exp(var_x36);
        const double var_x38 = -1.0 + var_x37;
        const double var_x39 = 1 / var_x38;
        const double var_x40 = var_x33 * var_x39;
        const double var_x41 = var_x37 * NV_Ith_S(mParameters, 3);
        const double var_x42 = var_x3 + var_x41;
        const double var_x43 = 0.0020919990183677745 * var_x42;
        const double var_x44 = 7.8328006887911654e-5 * var_chaste_interface__membrane__V;
        const double var_x45 = var_x39 * var_chaste_interface__membrane__V;
        const double var_x46 = 0.00055437973986746029 * var_x27 * var_x42 * var_x45;
        const double var_x47 = exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__V);
        const double var_x48 = 1.0 + var_x47;
        const double var_x49 = NV_Ith_S(mParameters, 17) * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to;
        const double var_x50 = log(NV_Ith_S(mParameters, 6) / NV_Ith_S(mParameters, 3));
        const double var_x51 = 26.708186528497411 * var_x50;
        const double var_x52 = -var_x51 + var_chaste_interface__membrane__V;
        const double var_x53 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3);
        const double var_x54 = var_x53 * NV_Ith_S(mParameters, 10) * var_chaste_interface__fast_sodium_current_j_gate__j;
        const double var_x55 = sqrt(NV_Ith_S(mParameters, 6));
        const double var_x56 = var_x55 * NV_Ith_S(mParameters, 14) * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr;
        const double var_x57 = 0.10000000000000001 * var_chaste_interface__membrane__V;
        const double var_x58 = exp(2.8000000000000003 + var_x57);
        const double var_x59 = 0.5 / (1.0 + 2.5 * var_x58);
        const double var_x60 = exp(0.06065555960796791 * var_chaste_interface__membrane__V - 1.6200000000000001 * var_x50);
        const double var_x61 = NV_Ith_S(mParameters, 6);
        const double var_x62 = NV_Ith_S(mParameters, 13) / (13.0 + NV_Ith_S(mParameters, 6));
        const double var_x63 = exp(-0.024337107250110578 * var_chaste_interface__membrane__V);
        const double var_x64 = pow(NV_Ith_S(mParameters, 7), 3);
        const double var_x65 = var_x63 * var_x64;
        const double var_x66 = pow(NV_Ith_S(mParameters, 4), 3) * NV_Ith_S(mParameters, 5) * exp(0.013104596211598003 * var_chaste_interface__membrane__V);
        const double var_x67 = 1.0 + 0.20000000000000001 * var_x63;
        const double var_x68 = NV_Ith_S(mParameters, 16) / ((1380.0 + NV_Ith_S(mParameters, 5)) * (669921.875 + var_x64));
        const double var_x69 = var_x68 / var_x67;
        const double var_x70 = var_x69 * (0.013104596211598003 * var_x66 + 24.337107250110581 * var_x65 * var_chaste_interface__calcium_dynamics__Ca_i_converted);
        const double var_x71 = 1 / NV_Ith_S(mParameters, 4);
        const double var_x72 = exp(-0.0037441703461708587 * var_chaste_interface__membrane__V);
        const double var_x73 = exp(0.01485884101040119 * NV_Ith_S(mParameters, 7));
        const double var_x74 = exp(-var_x36);
        const double var_x75 = var_x66 - var_x6 * var_x65;
        const double var_x76 = var_x63 * var_x68 * var_x75 / pow(var_x67, 2);
        const double var_x77 = 0.019299999999999998 * NV_Ith_S(mParameters, 8);
        const double var_x78 = var_x10 * var_x77 * var_x9;
        const double var_x79 = var_x22 * ((var_x13) ? (-var_x78 + (0.5 + 374417.03461708582 * var_chaste_interface__membrane__V) * (var_x78 + var_x1 * var_x2 * var_x77)) : (14452.497536219513 * var_x20));
        const double var_x80 = var_x28 * var_x79;
        const double var_x81 = var_x30 * var_x80;
        const double var_x82 = 1 / (0.050000000000000003 + var_x6);
        const double var_x83 = 1 / var_chaste_interface__calcium_dynamics__Ca_i_converted;
        const double var_x84 = var_chaste_interface__calcium_dynamics__Ca_i_converted / pow((5.0000000000000002e-5 + var_chaste_interface__calcium_dynamics__Ca_i_converted), 2);
        const double var_x85 = var_x65 * var_x69;
        const double var_x86 = -26.708186528497411 * log(var_x71 * NV_Ith_S(mParameters, 7)) + var_chaste_interface__membrane__V;
        const double var_x87 = var_x86 * NV_Ith_S(mParameters, 10) * var_chaste_interface__fast_sodium_current_h_gate__h;
        const double var_x88 = var_x51 - var_chaste_interface__membrane__V;
        const double var_x89 = var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca;
        const double var_x90 = 5.5873499999999997e-9 * var_x32;
        const double var_x91 = var_x89 * var_x90;
        const double var_x92 = var_x30 * var_x91;
        const double var_x93 = var_x32 * var_x43 * var_x45;
        const double var_x94 = var_x26 * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca;
        const double var_x95 = var_x94 * var_chaste_interface__L_type_Ca_current_d_gate__d;
        const double var_x96 = var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f;
        const double var_x97 = var_x90 * var_x96;
        const double var_x98 = var_x30 * var_x97;
        const double var_x99 = var_x94 * var_chaste_interface__L_type_Ca_current_f_gate__f;
        const double var_x100 = var_x21 * var_x90;
        const double var_x101 = var_x100 * var_x30;
        const double var_x102 = var_x21 * var_x26;
        const double var_x103 = exp(0.050000000000000003 * var_chaste_interface__membrane__V);
        const double var_x104 = -var_x6;
        const double var_x105 = pow(var_chaste_interface__calcium_dynamics__Ca_SR, (-3));
        const double var_x106 = 1 / (1.0 + 8000000000.0 * var_x105);
        const double var_x107 = var_x104 + var_x106 * var_chaste_interface__calcium_dynamics__Ca_SR;
        const double var_x108 = var_x103 * var_x107 * var_x22 * NV_Ith_S(mParameters, 1) / pow((0.60606060606060608 + var_x103), 2);
        const double var_x109 = 0.002 + var_chaste_interface__calcium_dynamics__Ca_i_converted;
        const double var_x110 = 1.0 + 2.0000000000000002e-5 / pow(var_x109, 2);
        const double var_x111 = 0.001 / var_x110;
        const double var_x112 = 1.537961789569932 * var_x82;
        const double var_x113 = 1000.0 * NV_Ith_S(mParameters, 0);
        const double var_x114 = pow(var_chaste_interface__calcium_dynamics__Ca_i_converted, 2);
        const double var_x115 = 1.0 + 1.024e-7 / var_x114;
        const double var_x116 = pow(var_chaste_interface__calcium_dynamics__Ca_i_converted, 3);
        const double var_x117 = 2.0480000000000001e-7 * NV_Ith_S(mParameters, 2) / (pow(var_x115, 2) * var_x116);
        const double var_x118 = NV_Ith_S(mParameters, 1) / (1.0 + 1.6499999999999999 * var_x103);
        const double var_x119 = var_x118 * var_x22;
        const double var_x120 = 1000.0 * var_x119;
        const double var_x121 = (var_x104 + var_chaste_interface__calcium_dynamics__Ca_SR) * NV_Ith_S(mParameters, 0);
        const double var_x122 = NV_Ith_S(mParameters, 2) / var_x115;
        const double var_x123 = 0.03075923579139864 * var_x95;
        const double var_x124 = var_x107 * var_x118;
        const double var_x125 = var_x124 * var_x22;
        const double var_x126 = var_x124 * var_x89;
        const double var_x127 = var_x124 * var_x96;
        const double var_x128 = var_x124 * var_x21;
        const double var_x129 = var_x119 * (var_x106 + 3.75e-10 * var_x105 / pow((1.2500000000000001e-10 + var_x105), 2));
        const double var_x130 = 1 / (1.0 - exp(1.0000000000287557e-7));
        const double var_x131 = 1 / (1.0 - exp(-1.0000000000287557e-7));
        const double var_x132 = 47.130000000000003 + var_chaste_interface__membrane__V;
        const double var_x133 = fabs(var_x132) < 1.0000000000287557e-6;
        const double var_x134 = -var_x57;
        const double var_x135 = exp(-4.7130000000000001 + var_x134);
        const double var_x136 = 1.0 - var_x135;
        const double var_x137 = 0.32000000000000001 / var_x136;
        const double var_x138 = exp(-0.090909090909090912 * var_chaste_interface__membrane__V);
        const double var_x139 = 3.200000000092018e-7 * var_x131;
        const double var_x140 = var_x134 + 0.10000000000000001 * NV_Ith_S(mParameters, 12);
        const double var_x141 = exp(-1.1000000000000001 + var_x140);
        const double var_x142 = 1.0 + var_x141;
        const double var_x143 = 1 / var_x142;
        const double var_x144 = 7.5 * var_x143;
        const double var_x145 = exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 12) - 0.14705882352941177 * var_chaste_interface__membrane__V);
        const double var_x146 = 0.13500000000000001 * var_x145;
        const double var_x147 = var_x144 + var_x146;
        const double var_x148 = 0.019852941176470591 * var_x145;
        const double var_x149 = 0.01 * NV_Ith_S(mParameters, 11);
        const double var_x150 = 1.0 - var_x149;
        const double var_x151 = var_x150 / var_x147;
        const double var_x152 = 0.75 * var_x141 / pow(var_x142, 2);
        const double var_x153 = exp(-3.2000000000000002 + var_x140);
        const double var_x154 = 1.0 + var_x153;
        const double var_x155 = 1 / var_x154;
        const double var_x156 = 0.29999999999999999 * var_x155;
        const double var_x157 = exp(11.85 + 0.14999999999999999 * var_chaste_interface__membrane__V - 0.14999999999999999 * NV_Ith_S(mParameters, 12));
        const double var_x158 = 1.0 + var_x157;
        const double var_x159 = exp(-4.3478260869565215 + 0.043478260869565216 * NV_Ith_S(mParameters, 12) - 0.043478260869565216 * var_chaste_interface__membrane__V);
        const double var_x160 = var_x159 / var_x158;
        const double var_x161 = 0.17499999999999999 * var_x160;
        const double var_x162 = var_x156 + var_x161;
        const double var_x163 = 0.0076086956521739125 * var_x160;
        const double var_x164 = var_x150 / var_x162;
        const double var_x165 = 0.029999999999999999 * var_x153 / pow(var_x154, 2);
        const double var_x166 = 0.026249999999999999 * var_x157 * var_x159 / pow(var_x158, 2);
        const double var_x167 = exp(-2.1819999999999999 - 0.18190000000000001 * var_chaste_interface__membrane__V);
        const double var_x168 = 1.0 + var_x167;
        const double var_x169 = exp(-7.6769999999999996 - 0.012800000000000001 * var_chaste_interface__membrane__V);
        const double var_x170 = exp(-5.4950000000000001 + 0.1691 * var_chaste_interface__membrane__V);
        const double var_x171 = var_x169 + var_x170;
        const double var_x172 = 1 / var_x171;
        const double var_x173 = 1 / (43.0 + var_x172);
        const double var_x174 = exp(1.1764705882352942 - 0.073529411764705885 * var_chaste_interface__membrane__V);
        const double var_x175 = 1.0 + var_x174;
        const double var_x176 = 1 / (-1.0 + exp(9.9999999999880736e-8));
        const double var_x177 = 1 / (-1.0 + exp(-9.9999999999880736e-8));
        const double var_x178 = 1 / (1.0 - exp(2.1542940320207204e-7));
        const double var_x179 = 1 / (1.0 - exp(-2.1542940320207204e-7));
        const double var_x180 = -10.0 + var_chaste_interface__membrane__V;
        const double var_x181 = fabs(var_x180) < 1.455604075689676e-6;
        const double var_x182 = exp(-0.68699999999999994 + 0.068699999999999997 * var_chaste_interface__membrane__V);
        const double var_x183 = -1.0 + var_x182;
        const double var_x184 = 0.00013100000000000001 / var_x183;
        const double var_x185 = exp(1.48 - 0.14799999999999999 * var_chaste_interface__membrane__V);
        const double var_x186 = 1.0 - var_x185;
        const double var_x187 = 7.1899999999999999e-5 / var_x186;
        const double var_x188 = 1.0465793304208771e-10 * var_x178;
        const double var_x189 = 1.9068413391534758e-10 * var_x177;
        const double var_x190 = ((var_x181) ? (-var_x188 - var_x189 + 343500.00000040967 * (-9.9999985443959236 + var_chaste_interface__membrane__V) * (var_x188 + var_x189 + 1.0465793304208771e-10 * var_x179 + 1.9068413391534758e-10 * var_x176)) : (var_x180 * var_x184 + var_x180 * var_x187));
        const double var_x191 = exp(0.035770000000000003 * var_chaste_interface__membrane__V);
        const double var_x192 = exp(-0.062370000000000002 * var_chaste_interface__membrane__V);
        const double var_x193 = 0.20000000000000001 * var_chaste_interface__membrane__V;
        const double var_x194 = exp(6.7000000000000002 + var_x193);
        const double var_x195 = 1.0 + 0.051334999999999999 * var_x194;
        const double var_x196 = exp(-6.7000000000000002 - var_x193);
        const double var_x197 = 1.0 + 0.051334999999999999 * var_x196;
        const double var_x198 = 1.0 - var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to;
        const double var_x199 = var_x194 / var_x195;
        const double var_x200 = var_x196 / var_x197;
        const double var_x201 = exp(2.5 + var_x193);
        const double var_x202 = 1.0 + var_x201;
        const double var_x203 = exp(2.1052631578947367 + 0.10526315789473684 * var_chaste_interface__membrane__V);
        const double var_x204 = 1.0 + var_x203;
        const double var_x205 = 1 / var_x204;
        const double var_x206 = 1 / (30.0 + 200.0 * var_x205);
        const double var_x207 = exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__membrane__V);
        const double var_x208 = 1.0 + var_x207;
        const double var_x209 = exp(-0.070000000000000007 * var_chaste_interface__membrane__V);
        const double var_x210 = 1.0 + var_x209;
        const double var_x211 = exp(-0.01 * var_chaste_interface__membrane__V);
        const double var_x212 = var_x211 / var_x210;
        const double var_x213 = 0.050000000000000003 * var_chaste_interface__membrane__V;
        const double var_x214 = exp(2.0 + var_x213);
        const double var_x215 = 1.0 + var_x214;
        const double var_x216 = exp(-2.0 - var_x213);
        const double var_x217 = var_x216 / var_x215;
        const double var_x218 = 0.25 * var_x212;
        const double var_x219 = 0.070000000000000007 * var_x217;
        const double var_x220 = 1 / NV_Ith_S(mParameters, 9);
        const double var_x221 = 1 + 0.0016666666666666668 * var_chaste_interface__calcium_dynamics__Ca_SR;
        const double var_x222 = pow(var_x221, (-2));
        const double var_x223 = 1 / (1.0 + 16.666666666666668 * var_x222);
        const double var_x224 = 12.92 * var_x223;
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (-0.0034841999999999998 - var_x23 - var_x70 - ((var_x35) ? (-var_x31 + var_x0 * (var_x31 + var_x29 * var_x4) + var_x30 * var_x34 + var_x34 * var_x4) : (var_x23 * var_x46 + var_x40 * var_x43 + var_x40 * var_x41 * var_x44 - var_x33 * var_x37 * var_x42 * var_x44 / pow(var_x38, 2))) - 0.0022160000000000001 / var_x48 - 0.0048674214500221162 * var_x76 - var_x49 * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to - var_x54 * var_chaste_interface__fast_sodium_current_h_gate__h - var_x56 * var_x59 - pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2) * NV_Ith_S(mParameters, 15) - var_x61 * var_x62 / (2.0 + var_x60) - 0.00037056856187290968 * var_x47 * var_x52 / pow(var_x48, 2) + 0.02 * var_x52 * var_x56 * var_x58 / pow((0.40000000000000002 + var_x58), 2) + 0.015163889901991977 * var_x52 * var_x60 * var_x62 * NV_Ith_S(mParameters, 6) / pow((1 + 0.5 * var_x60), 2) - 0.69299999999999995 * (0.00046614920809827186 * var_x72 + 0.037441703461708581 * var_x74 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x73)) * NV_Ith_S(mParameters, 6) / ((1.0 + 31.622776601683793 * pow(var_x71, 1.5)) * (1.5 + NV_Ith_S(mParameters, 6)) * pow((1.0 + 0.1245 * var_x72 + 0.036499999999999998 * var_x74 * (-0.14285714285714285 + 0.14285714285714285 * var_x73)), 2)));
        IJth(rJacobian, 1, 0) = var_x111 * (-1.1817698391055359e-5 + 0.00029943632815468348 * var_x76 + 0.061518471582797281 * var_x70 - 0.03075923579139864 * var_x23 - 0.030303030303030304 * var_x108);
        IJth(rJacobian, 2, 0) = (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m) * ((var_x133) ? (0.16 * var_x130 + 0.16 * var_x131) : (var_x137 - 0.032000000000000001 * var_x132 * var_x135 / pow(var_x136, 2))) + 0.0072727272727272727 * var_x138 * var_chaste_interface__fast_sodium_current_m_gate__m;
        IJth(rJacobian, 3, 0) = var_x147 * (-var_x148 * var_x151 + 0.0024000000000000002 * var_x145 * var_x150 * (var_x148 - var_x152) / pow((var_x143 + 0.018000000000000002 * var_x145), 2)) + (var_x152 - var_x148) * (var_x149 - var_chaste_interface__fast_sodium_current_h_gate__h + var_x146 * var_x151);
        IJth(rJacobian, 4, 0) = var_x162 * (-var_x163 * var_x164 - var_x164 * var_x166 + 1.9444444444444444 * var_x150 * var_x160 * (var_x163 + var_x166 - var_x165) / pow((var_x155 + 0.58333333333333337 * var_x160), 2)) + (var_x149 - var_chaste_interface__fast_sodium_current_j_gate__j + var_x161 * var_x164) * (var_x165 - var_x163 - var_x166);
        IJth(rJacobian, 5, 0) = 0.18190000000000001 * var_x167 * var_x173 / pow(var_x168, 2) - 0.00054083288263926451 * (-var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr + 1 / var_x168) * (0.012800000000000001 * var_x169 - 0.1691 * var_x170) / (pow(var_x171, 2) * pow((1 + 0.023255813953488372 * var_x172), 2));
        IJth(rJacobian, 6, 0) = (-var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks + 1 / var_x175) * ((var_x181) ? (6.5500000000000006e-5 * var_x176 + 6.5500000000000006e-5 * var_x177 + 3.595e-5 * var_x178 + 3.595e-5 * var_x179) : (var_x184 + var_x187 - 8.9997000000000013e-6 * var_x180 * var_x182 / pow(var_x183, 2) - 1.0641199999999999e-5 * var_x180 * var_x185 / pow(var_x186, 2))) + 0.073529411764705885 * var_x174 * var_x190 / pow(var_x175, 2);
        IJth(rJacobian, 7, 0) = 0.035770000000000003 * var_x191 * (0.045159999999999999 - 0.045159999999999999 * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to) + 0.0061683930000000003 * var_x192 * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to;
        IJth(rJacobian, 8, 0) = -0.001083 * var_x198 * var_x200 - 0.001083 * var_x199 * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to + 5.5595804999999994e-5 * var_x198 * pow(var_x196, 2) / pow(var_x197, 2) + 5.5595804999999994e-5 * pow(var_x194, 2) * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to / pow(var_x195, 2);
        IJth(rJacobian, 9, 0) = -0.20000000000000001 * var_x201 * var_x206 / pow(var_x202, 2) + 0.0005263157894736842 * var_x203 * (-var_chaste_interface__L_type_Ca_current_f_gate__f + 1 / var_x202) / (pow(var_x204, 2) * pow((0.14999999999999999 + var_x205), 2));
        IJth(rJacobian, 10, 0) = (-var_chaste_interface__L_type_Ca_current_d_gate__d + 1 / var_x208) * (-0.0025000000000000001 * var_x212 - 0.0035000000000000005 * var_x217 + 0.017500000000000002 * var_x209 * var_x211 / pow(var_x210, 2) - 0.0035000000000000005 * var_x214 * var_x216 / pow(var_x215, 2)) + 0.16025641025641024 * var_x207 * (var_x218 + var_x219) / pow(var_x208, 2);
        IJth(rJacobian, 12, 0) = 0.39151515151515154 * var_x108 * var_x223;
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x79 - ((var_x35) ? (-var_x81 + var_x0 * (var_x81 + var_x4 * var_x80)) : (var_x46 * var_x79)) + 0.050000000000000003 * var_x84 + 1000.0 * var_x85 - 50.0 * var_x82 - 0.0051306426321243524 * var_x83);
        IJth(rJacobian, 1, 1) = var_x111 * (-var_x112 - var_x113 - var_x117 - var_x120 + 0.001537961789569932 * var_x84 - 0.00015781464648291512 * var_x83 - 61.518471582797282 * var_x85 - 0.03075923579139864 * var_x79) + 4.0000000000000001e-8 * (var_x121 + var_x125 - var_x122 + 0.00015781464648291512 * log(0.001 * var_x83 * NV_Ith_S(mParameters, 5)) - 1.1817698391055359e-5 * var_chaste_interface__membrane__V - var_x112 * var_chaste_interface__calcium_dynamics__Ca_i_converted - var_x123 * var_chaste_interface__L_type_Ca_current_f_gate__f + 0.061518471582797281 * var_x69 * var_x75) / (pow(var_x109, 3) * pow(var_x110, 2));
        IJth(rJacobian, 11, 1) = -1.7495999999999999e-11 * var_x114 * var_x220 / pow((5.8319999999999994e-12 + var_x116), 2);
        IJth(rJacobian, 12, 1) = var_x224 * (var_x113 + var_x117 + var_x120);
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x87 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2) * var_chaste_interface__fast_sodium_current_j_gate__j);
        IJth(rJacobian, 2, 2) = -((var_x133) ? (var_x139 - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__V) * (-var_x139 - 3.200000000092018e-7 * var_x130)) : (var_x132 * var_x137)) - 0.080000000000000002 * var_x138;
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x54 * var_x86);
        IJth(rJacobian, 3, 3) = -var_x144 - var_x146;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x53 * var_x87);
        IJth(rJacobian, 4, 4) = -var_x156 - var_x161;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x52 * var_x55 * var_x59 * NV_Ith_S(mParameters, 14));
        IJth(rJacobian, 5, 5) = -var_x173;
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (-2 * (-26.708186528497411 * log((var_x61 + 0.018329999999999999 * NV_Ith_S(mParameters, 7)) / (NV_Ith_S(mParameters, 3) + 0.018329999999999999 * NV_Ith_S(mParameters, 4))) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 15) * var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks);
        IJth(rJacobian, 6, 6) = -var_x190;
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (var_x49 * var_x88);
        IJth(rJacobian, 7, 7) = -0.045159999999999999 * var_x191 - 0.098900000000000002 * var_x192;
        IJth(rJacobian, 0, 8) = mSetVoltageDerivativeToZero ? 0.0 : (var_x88 * NV_Ith_S(mParameters, 17) * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to);
        IJth(rJacobian, 8, 8) = -0.0054149999999999997 * var_x199 - 0.0054149999999999997 * var_x200;
        IJth(rJacobian, 0, 9) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x95 - ((var_x35) ? (-var_x92 + var_x0 * (var_x92 + var_x4 * var_x91)) : (var_x89 * var_x93)));
        IJth(rJacobian, 1, 9) = var_x111 * (var_x126 - var_x123);
        IJth(rJacobian, 9, 9) = -var_x206;
        IJth(rJacobian, 12, 9) = -var_x126 * var_x224;
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x99 - ((var_x35) ? (-var_x98 + var_x0 * (var_x98 + var_x4 * var_x97)) : (var_x93 * var_x96)));
        IJth(rJacobian, 1, 10) = var_x111 * (var_x127 - 0.03075923579139864 * var_x99);
        IJth(rJacobian, 10, 10) = -var_x218 - var_x219;
        IJth(rJacobian, 12, 10) = -var_x127 * var_x224;
        IJth(rJacobian, 0, 11) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x102 - ((var_x35) ? (-var_x101 + var_x0 * (var_x101 + var_x100 * var_x4)) : (var_x21 * var_x93)));
        IJth(rJacobian, 1, 11) = var_x111 * (var_x128 - 0.03075923579139864 * var_x102);
        IJth(rJacobian, 11, 11) = -var_x220;
        IJth(rJacobian, 12, 11) = -var_x128 * var_x224;
        IJth(rJacobian, 1, 12) = var_x111 * (var_x129 + NV_Ith_S(mParameters, 0));
        IJth(rJacobian, 12, 12) = var_x224 * (-var_x129 - NV_Ith_S(mParameters, 0)) + 0.0025839999999999999 * (var_x122 - var_x121 - var_x125) / (pow(var_x221, 3) * pow((0.059999999999999998 + var_x222), 2));
    }

    N_Vector Cellfox_mcharg_gilmour_2002FromCellMLCvode::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__calcium_dynamics__Ca_i_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 4.72e-05
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 3.742e-05
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.942
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 12);
        // Units: micromolar; Initial value: 320.0
        
        // Mathematics
        const double var_Na_Ca_exchanger__K_mCa = 1380.0; // micromolar
        const double var_Na_Ca_exchanger__K_mNa = 87.5; // millimolar
        const double var_Na_Ca_exchanger__K_sat = 0.20000000000000001; // dimensionless
        const double var_Na_Ca_exchanger__eta = 0.34999999999999998; // dimensionless
        const double var_calcium_dynamics__Ca_i = 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted; // micromolar
        const double var_calcium_dynamics__gamma = 1 / (1.0 + 8000000000.0 / pow(var_chaste_interface__calcium_dynamics__Ca_SR, 3)); // dimensionless
        const double var_membrane__F = 96.5; // coulomb_per_millimole
        const double var_membrane__R = 8.3140000000000001; // joule_per_mole_kelvin
        const double var_membrane__T = 310.0; // kelvin
        const double var_L_type_Ca_current_f_gate__tau_f = 30.0 + 200.0 / (1.0 + exp(2.1052631578947367 + 0.10526315789473684 * var_chaste_interface__membrane__V)); // millisecond
        const double var_calcium_dynamics__J_rel = (-var_calcium_dynamics__Ca_i + var_chaste_interface__calcium_dynamics__Ca_SR * var_calcium_dynamics__gamma) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f * NV_Ith_S(mParameters, 1) / (1.0 + 1.6499999999999999 * exp(0.050000000000000003 * var_chaste_interface__membrane__V)); // micromolar_per_millisecond
        const double var_fast_sodium_current_h_gate__alpha_h = 0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 12) - 0.14705882352941177 * var_chaste_interface__membrane__V); // per_millisecond
        const double var_fast_sodium_current_h_gate__beta_h = 7.5 / (1.0 + exp(-1.1000000000000001 + 0.10000000000000001 * NV_Ith_S(mParameters, 12) - 0.10000000000000001 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_fast_sodium_current_h_gate__tau_h = 1 / (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h); // millisecond
        const double var_fast_sodium_current_j_gate__alpha_j = 0.17499999999999999 * exp(-4.3478260869565215 + 0.043478260869565216 * NV_Ith_S(mParameters, 12) - 0.043478260869565216 * var_chaste_interface__membrane__V) / (1.0 + exp(11.85 + 0.14999999999999999 * var_chaste_interface__membrane__V - 0.14999999999999999 * NV_Ith_S(mParameters, 12))); // per_millisecond
        const double var_fast_sodium_current_j_gate__beta_j = 0.29999999999999999 / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 12) - 0.10000000000000001 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_fast_sodium_current_j_gate__tau_j = 1 / (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j); // millisecond
        const double var_membrane__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_rapid_activating_delayed_rectifiyer_K_current__R_V = 1 / (1.0 + 2.5 * exp(2.8000000000000003 + 0.10000000000000001 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_L_type_Ca_current__i_Ca_max = ((fabs(var_chaste_interface__membrane__V) < 1.3354093264248704e-6) ? (374417.03461708582 * (1.3354093264248704e-6 + var_chaste_interface__membrane__V) * (1.9299999999999998e-5 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(9.9999999999999995e-8)) + 1.9299999999999998e-5 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(-9.9999999999999995e-8))) - 1.9299999999999998e-5 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(-9.9999999999999995e-8))) : (14.452497536219512 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(0.074883406923417162 * var_chaste_interface__membrane__V)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__membrane__V / (-1.0 + exp(0.074883406923417162 * var_chaste_interface__membrane__V)))); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca = var_L_type_Ca_current__i_Ca_max * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f; // microA_per_microF
        const double var_L_type_Ca_current__i_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_L_type_Ca_current__i_Ca; // uA_per_cm2
        const double var_rapid_activating_delayed_rectifiyer_K_current__E_K = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 6) / NV_Ith_S(mParameters, 3)) / var_membrane__F; // millivolt
        const double var_rapid_activating_delayed_rectifiyer_K_current__i_Kr = 0.5 * sqrt(NV_Ith_S(mParameters, 6)) * (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * var_rapid_activating_delayed_rectifiyer_K_current__R_V * NV_Ith_S(mParameters, 14) * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr; // microA_per_microF
        const double var_rapid_activating_delayed_rectifiyer_K_current__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_rapid_activating_delayed_rectifiyer_K_current__i_Kr; // uA_per_cm2
        const double var_Na_Ca_exchanger__i_NaCa = (pow(NV_Ith_S(mParameters, 4), 3) * NV_Ith_S(mParameters, 5) * exp(var_Na_Ca_exchanger__eta * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T)) - pow(NV_Ith_S(mParameters, 7), 3) * var_calcium_dynamics__Ca_i * exp((-1.0 + var_Na_Ca_exchanger__eta) * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * NV_Ith_S(mParameters, 16) / ((1.0 + var_Na_Ca_exchanger__K_sat * exp((-1.0 + var_Na_Ca_exchanger__eta) * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * (pow(var_Na_Ca_exchanger__K_mNa, 3) + pow(NV_Ith_S(mParameters, 7), 3)) * (var_Na_Ca_exchanger__K_mCa + NV_Ith_S(mParameters, 5))); // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_Na_Ca_exchanger__i_NaCa; // uA_per_cm2
        const double var_fast_sodium_current__E_Na = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 7) / NV_Ith_S(mParameters, 4)) / var_membrane__F; // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 10) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // microA_per_microF
        const double var_fast_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_slow_activating_delayed_rectifiyer_K_current__E_Ks = var_membrane__R * var_membrane__T * log((NV_Ith_S(mParameters, 6) + 0.018329999999999999 * NV_Ith_S(mParameters, 7)) / (NV_Ith_S(mParameters, 3) + 0.018329999999999999 * NV_Ith_S(mParameters, 4))) / var_membrane__F; // millivolt
        const double var_slow_activating_delayed_rectifiyer_K_current__i_Ks = pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2) * (-var_slow_activating_delayed_rectifiyer_K_current__E_Ks + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 15); // microA_per_microF
        const double var_slow_activating_delayed_rectifiyer_K_current__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_slow_activating_delayed_rectifiyer_K_current__i_Ks; // uA_per_cm2
        const double var_time_independent_potassium_current__K_mK1 = 13.0; // millimolar
        const double var_time_independent_potassium_current_K1_gate__K1_infinity = 1 / (2.0 + exp(1.6200000000000001 * (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * var_membrane__F / (var_membrane__R * var_membrane__T))); // dimensionless
        const double var_time_independent_potassium_current__i_K1 = (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 6) * NV_Ith_S(mParameters, 13) * var_time_independent_potassium_current_K1_gate__K1_infinity / (NV_Ith_S(mParameters, 6) + var_time_independent_potassium_current__K_mK1); // microA_per_microF
        const double var_time_independent_potassium_current__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_time_independent_potassium_current__i_K1; // uA_per_cm2
        const double var_transient_outward_potassium_current__i_to = (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 17) * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to; // microA_per_microF
        const double var_transient_outward_potassium_current__i_to_converted = HeartConfig::Instance()->GetCapacitance() * var_transient_outward_potassium_current__i_to; // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(14);
        NV_Ith_S(dqs, 0) = var_calcium_dynamics__J_rel;
        NV_Ith_S(dqs, 1) = var_chaste_interface__calcium_dynamics__Ca_i_converted;
        NV_Ith_S(dqs, 2) = var_L_type_Ca_current__i_Ca_converted;
        NV_Ith_S(dqs, 3) = var_L_type_Ca_current_f_gate__tau_f;
        NV_Ith_S(dqs, 4) = var_fast_sodium_current__i_Na_converted;
        NV_Ith_S(dqs, 5) = var_fast_sodium_current_h_gate__tau_h;
        NV_Ith_S(dqs, 6) = var_fast_sodium_current_j_gate__tau_j;
        NV_Ith_S(dqs, 7) = var_time_independent_potassium_current__i_K1_converted;
        NV_Ith_S(dqs, 8) = var_rapid_activating_delayed_rectifiyer_K_current__i_Kr_converted;
        NV_Ith_S(dqs, 9) = var_slow_activating_delayed_rectifiyer_K_current__i_Ks_converted;
        NV_Ith_S(dqs, 10) = var_Na_Ca_exchanger__i_NaCa_converted;
        NV_Ith_S(dqs, 11) = var_membrane__i_Stim_converted;
        NV_Ith_S(dqs, 12) = var_transient_outward_potassium_current__i_to_converted;
        NV_Ith_S(dqs, 13) = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellfox_mcharg_gilmour_2002FromCellMLCvode>::Initialise(void)
{
    this->mSystemName = "fox_model_2001";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-94.7);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(4.72e-05);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00024676);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99869);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99887);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.229);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("transient_outward_potassium_current_X_to_gate__X_to");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.742e-05);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("transient_outward_potassium_current_Y_to_gate__Y_to");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.983);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.942);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(320.0);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("micromolar_per_millisecond");

    // mParameters[3]:
    this->mParameterNames.push_back("cytosolic_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[4]:
    this->mParameterNames.push_back("cytosolic_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[7]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("cm_per_millisecond");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_fCa_gate_tau");
    this->mParameterUnits.push_back("millisecond");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("millivolt");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("microA_per_microF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("micromolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_concentration");
    this->mDerivedQuantityUnits.push_back("millimolar");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellfox_mcharg_gilmour_2002FromCellMLCvode)

#endif // CHASTE_CVODE
