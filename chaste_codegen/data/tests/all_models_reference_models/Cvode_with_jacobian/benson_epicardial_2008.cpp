#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: benson_epicardial_2008
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvode)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "benson_epicardial_2008.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"


    boost::shared_ptr<RegularStimulus> Cellbenson_epicardial_2008FromCellMLCvode::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -20.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 3.0; // ms
        const double var_chaste_interface__cell__stim_offset = 0; // ms
        const double var_chaste_interface__cell__stim_period = 1000.0; // ms
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellbenson_epicardial_2008FromCellMLCvode::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellbenson_epicardial_2008FromCellMLCvode::Cellbenson_epicardial_2008FromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                29,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellbenson_epicardial_2008FromCellMLCvode>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 3000.0; // (var_Irel__Grel_max) [per_ms]
        NV_Ith_S(this->mParameters, 1) = 1.8; // (var_Environment__Ca_o) [mM]
        NV_Ith_S(this->mParameters, 2) = 5.4000000000000004; // (var_Environment__K_o) [mM]
        NV_Ith_S(this->mParameters, 3) = 140.0; // (var_Environment__Na_o) [mM]
        NV_Ith_S(this->mParameters, 4) = 0.000243; // (var_ICaL__pca) [L_per_F_ms]
        NV_Ith_S(this->mParameters, 5) = 11.5; // (var_INa__GNa_max) [mS_per_uF]
        NV_Ith_S(this->mParameters, 6) = 0.5; // (var_IK1__gK1_max) [mS_per_uF]
        NV_Ith_S(this->mParameters, 7) = 0.013854200000000001; // (var_IKr__gkr_max) [mS_per_uF]
        NV_Ith_S(this->mParameters, 8) = 0.024897499999999999; // (var_IKs__gks_max) [mS_per_uF]
        NV_Ith_S(this->mParameters, 9) = 4.5; // (var_INaCa__NCXmax) [uA_per_uF]
        NV_Ith_S(this->mParameters, 10) = 0.19; // (var_Ito__gitodv) [mS_per_uF]
    }

    Cellbenson_epicardial_2008FromCellMLCvode::~Cellbenson_epicardial_2008FromCellMLCvode()
    {
    }

    
    double Cellbenson_epicardial_2008FromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 0.00012131666
        double var_chaste_interface__INa__H = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.987317750543
        double var_chaste_interface__INa__m = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INa__J = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.991924983076
        double var_chaste_interface__ICaL__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 1.64013e-06
        double var_chaste_interface__ICaL__dp = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__IKr__xr = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 7.24074e-06
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.019883138161
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.019890650554
        double var_chaste_interface__Ito__ydv = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.013970786703
        double var_chaste_interface__Ito__ydv2 = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.99996472752
        double var_chaste_interface__Ito__zdv = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.829206149767
        double var_chaste_interface__Ito2__AA = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.000816605172
        double var_chaste_interface__INal__mL = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INal__hL = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.26130711759
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 23);
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 24);
        // Units: mM; Initial value: 135.469546216758
        double var_chaste_interface__Cl__Cl_i = NV_Ith_S(rY, 25);
        // Units: mM; Initial value: 15.59207157178
        double var_chaste_interface__Ca__Ca_ss = NV_Ith_S(rY, 28);
        // Units: mM; Initial value: 0.00012271265
        
        const double var_Environment__Cl_o = 100.0; // mM
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_Environment__tissue = 0; // dimensionless
        const double var_IClb__GClb = 0.00022499999999999999; // mS_per_uF
        const double var_IKr__gkr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 2)) * NV_Ith_S(mParameters, 7); // mS_per_uF
        const double var_IKs__gks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * NV_Ith_S(mParameters, 8); // mS_per_uF
        const double var_INa__GNa = ((var_Environment__tissue == 0) ? (NV_Ith_S(mParameters, 5)) : (4.0 * NV_Ith_S(mParameters, 5))); // mS_per_uF
        const double var_INa__gNa = pow(var_chaste_interface__INa__m, 3) * var_INa__GNa * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // mS_per_uF
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__allo = 1 / (1.0 + pow(var_INaCa__KmCa, 2) / pow(var_INaCa__ca_i_NaCa, 2)); // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INaK__ibarnak = 0.61875000000000002; // uA_per_uF
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 3)); // dimensionless
        const double var_INal__GNaL = 0.0064999999999999997; // mS_per_uF
        const double var_IpCa__ibarpca = 0.057500000000000002; // uA_per_uF
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * var_IpCa__ibarpca / (var_chaste_interface__Ca__Ca_i + var_IpCa__kmpca); // uA_per_uF
        const double var_INaCa__denom2 = pow(var_INaCa__KmNao, 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_INaCa__ca_i_NaCa / var_INaCa__KmCai) * NV_Ith_S(mParameters, 1); // mM4
        const double var_INaCa__denom3 = pow(NV_Ith_S(mParameters, 3), 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 1) + pow(NV_Ith_S(mParameters, 3), 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * NV_Ith_S(mParameters, 4) / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * NV_Ith_S(mParameters, 4) / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * NV_Ith_S(mParameters, 4) / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_ss * exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)) * NV_Ith_S(mParameters, 4) / (-1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICaL__ICaL = ((var_Environment__tissue == 0) ? (pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca) : (var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca)); // uA_per_uF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (3.8499135947999997e-9 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 3.8499135947999997e-9 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 3.8499135947999997e-9 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.0028824983370005666 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_i * exp(0.074871767015599999 * var_chaste_interface__cell__V)) * var_chaste_interface__cell__V / (-1.0 + exp(0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_IKr__r = 1 / (1.0 + exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaCa__denom1 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__num = pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 1) * exp(var_Environment__FonRT * var_INaCa__eta * var_chaste_interface__cell__V) - pow(NV_Ith_S(mParameters, 3), 3) * var_INaCa__ca_i_NaCa * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__INaCa = NV_Ith_S(mParameters, 9) * var_INaCa__allo * var_INaCa__num / ((var_INaCa__denom2 + var_INaCa__denom3) * var_INaCa__denom1); // uA_per_uF
        const double var_INaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_Environment__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaK__INaK = NV_Ith_S(mParameters, 2) * var_INaK__fnak * var_INaK__ibarnak / ((1.0 + pow(var_INaK__kmnai, 2) / pow(var_chaste_interface__Na__Na_i, 2)) * (NV_Ith_S(mParameters, 2) + var_INaK__kmko)); // uA_per_uF
        const double var_Ito__rv = exp(0.0033333333333333335 * var_chaste_interface__cell__V); // dimensionless
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (3.8593999999999993e-9 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(9.9999999999999995e-8)) + 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) - 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) : (0.001444800488100033 * (-100.0 * exp(0.0374358835078 * var_chaste_interface__cell__V) + var_chaste_interface__Cl__Cl_i) * var_chaste_interface__cell__V / (1.0 - exp(0.0374358835078 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_chaste_interface__Ito2__AA * var_Ito2__Ito2_max; // uA_per_uF
        const double var_cell__caiont = -2.0 * var_INaCa__INaCa + var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa; // uA_per_uF
        const double var_cell__i_Stim = 0.0; // uA_per_uF
        const double var_reversal_potentials__ECl = -log(var_Environment__Cl_o / var_chaste_interface__Cl__Cl_i) / var_Environment__FonRT; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__cell__V) * var_IClb__GClb; // uA_per_uF
        const double var_cell__clont = 0.5 * var_cell__i_Stim + var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
        const double var_reversal_potentials__EK = log(NV_Ith_S(mParameters, 2) / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)); // per_ms
        const double var_IK1__bk1 = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__IK1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 2)) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IK1__ak1 * NV_Ith_S(mParameters, 6) / (var_IK1__ak1 + var_IK1__bk1); // uA_per_uF
        const double var_IKp__IKp = 0.0027599999999999999 * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKr__gkr * var_IKr__r * var_chaste_interface__IKr__xr; // uA_per_uF
        const double var_Ito__Ito = pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 10) * var_Ito__rv * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv; // uA_per_uF
        const double var_reversal_potentials__ENa = log(NV_Ith_S(mParameters, 3) / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__INa = (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INa__gNa; // uA_per_uF
        const double var_INal__INal = pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INal__GNaL * var_chaste_interface__INal__hL; // uA_per_uF
        const double var_cell__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + var_INa__INa + var_INal__INal; // uA_per_uF
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((NV_Ith_S(mParameters, 3) * var_reversal_potentials__prnak + NV_Ith_S(mParameters, 2)) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_Environment__FonRT; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__cell__V) * var_IKs__gks * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_uF
        const double var_cell__kiont = 0.5 * var_cell__i_Stim - 2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito__Ito; // uA_per_uF
        const double var_chaste_interface__i_ionic = (var_cell__caiont + var_cell__clont + var_cell__kiont + var_cell__naiont) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellbenson_epicardial_2008FromCellMLCvode::EvaluateYDerivatives(double var_chaste_interface__Environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 0.00012131666
        double var_chaste_interface__INa__H = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.987317750543
        double var_chaste_interface__INa__m = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INa__J = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.991924983076
        double var_chaste_interface__ICaL__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 1.64013e-06
        double var_chaste_interface__ICaL__dp = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__IKr__xr = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 7.24074e-06
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.019883138161
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.019890650554
        double var_chaste_interface__Ito__ydv = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.013970786703
        double var_chaste_interface__Ito__ydv2 = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.99996472752
        double var_chaste_interface__Ito__zdv = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.829206149767
        double var_chaste_interface__Ito2__AA = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.000816605172
        double var_chaste_interface__INal__mL = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INal__hL = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.26130711759
        double var_chaste_interface__Irel__CaMKtrap = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.021123704774
        double var_chaste_interface__Irel__ro = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Irel__ri = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.862666650318
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 23);
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 24);
        // Units: mM; Initial value: 135.469546216758
        double var_chaste_interface__Cl__Cl_i = NV_Ith_S(rY, 25);
        // Units: mM; Initial value: 15.59207157178
        double var_chaste_interface__Ca__Ca_jsr = NV_Ith_S(rY, 26);
        // Units: mM; Initial value: 1.737580994071
        double var_chaste_interface__Ca__Ca_nsr = NV_Ith_S(rY, 27);
        // Units: mM; Initial value: 1.832822335168
        double var_chaste_interface__Ca__Ca_ss = NV_Ith_S(rY, 28);
        // Units: mM; Initial value: 0.00012271265

        // Mathematics
        double d_dt_chaste_interface_var_cell__V;
        const double var_Ca__BSLmax = 1.1240000000000001; // mM
        const double var_Ca__BSRmax = 0.047; // mM
        const double var_Ca__KmBSL = 0.0086999999999999994; // mM
        const double var_Ca__KmBSR = 0.00087000000000000001; // mM
        const double var_Ca__bss = 1 / (1.0 + var_Ca__BSLmax * var_Ca__KmBSL / pow((var_chaste_interface__Ca__Ca_ss + var_Ca__KmBSL), 2) + var_Ca__BSRmax * var_Ca__KmBSR / pow((var_chaste_interface__Ca__Ca_ss + var_Ca__KmBSR), 2)); // dimensionless
        const double var_Ca__cbar = 0.050000000000000003; // mM
        const double var_Ca__csqnbar = 10.0; // mM
        const double var_Ca__kmc = 0.0023800000000000002; // mM
        const double var_Ca__kmcsqn = 0.80000000000000004; // mM
        const double var_Ca__bcsqn = 1 / (1.0 + var_Ca__csqnbar * var_Ca__kmcsqn / pow((var_chaste_interface__Ca__Ca_jsr + var_Ca__kmcsqn), 2)); // dimensionless
        const double var_Ca__kmt = 0.00050000000000000001; // mM
        const double var_Ca__tbar = 0.070000000000000007; // mM
        const double var_Ca__bmyo = 1 / (1.0 + var_Ca__cbar * var_Ca__kmc / pow((var_chaste_interface__Ca__Ca_i + var_Ca__kmc), 2) + var_Ca__kmt * var_Ca__tbar / pow((var_chaste_interface__Ca__Ca_i + var_Ca__kmt), 2)); // dimensionless
        const double var_Environment__Cl_o = 100.0; // mM
        const double var_Environment__F = 96485.0; // C_per_mole
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_Environment__tissue = 0; // dimensionless
        const double var_IClb__GClb = 0.00022499999999999999; // mS_per_uF
        const double var_IKr__gkr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 2)) * NV_Ith_S(mParameters, 7); // mS_per_uF
        const double var_IKs__gks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * NV_Ith_S(mParameters, 8); // mS_per_uF
        const double var_INa__GNa = ((var_Environment__tissue == 0) ? (NV_Ith_S(mParameters, 5)) : (4.0 * NV_Ith_S(mParameters, 5))); // mS_per_uF
        const double var_INa__gNa = pow(var_chaste_interface__INa__m, 3) * var_INa__GNa * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // mS_per_uF
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__allo = 1 / (1.0 + pow(var_INaCa__KmCa, 2) / pow(var_INaCa__ca_i_NaCa, 2)); // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INaK__ibarnak = 0.61875000000000002; // uA_per_uF
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 3)); // dimensionless
        const double var_INal__GNaL = 0.0064999999999999997; // mS_per_uF
        const double var_Idiff_Itr__idiff = 5.0 * var_chaste_interface__Ca__Ca_ss - 5.0 * var_chaste_interface__Ca__Ca_i; // mM_per_ms
        const double var_Idiff_Itr__itr = 0.0083333333333333332 * var_chaste_interface__Ca__Ca_nsr - 0.0083333333333333332 * var_chaste_interface__Ca__Ca_jsr; // mM_per_ms
        const double var_IpCa__ibarpca = 0.057500000000000002; // uA_per_uF
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * var_IpCa__ibarpca / (var_chaste_interface__Ca__Ca_i + var_IpCa__kmpca); // uA_per_uF
        const double var_Irel__CaMK0 = 0.050000000000000003; // dimensionless
        const double var_Irel__Km = 0.0015; // mM
        const double var_Irel__CaMKbound = (1.0 - var_chaste_interface__Irel__CaMKtrap) * var_Irel__CaMK0 / (1.0 + var_Irel__Km / var_chaste_interface__Ca__Ca_ss); // dimensionless
        const double var_Irel__CaMKactive = var_Irel__CaMKbound + var_chaste_interface__Irel__CaMKtrap; // dimensionless
        const double d_dt_chaste_interface_var_Irel__CaMKtrap = -0.00068000000000000005 * var_chaste_interface__Irel__CaMKtrap + 0.050000000000000003 * (-var_chaste_interface__Irel__CaMKtrap + var_Irel__CaMKactive) * var_Irel__CaMKactive; // 1 / ms
        const double var_ICaL__taufca = 0.5 + 1 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca__Ca_ss) + 10.0 * var_Irel__CaMKactive / (0.14999999999999999 + var_Irel__CaMKactive); // ms
        const double var_Irel__KmCaMK = 0.14999999999999999; // dimensionless
        const double var_Irel__dro_inf = pow(var_chaste_interface__Ca__Ca_jsr, 1.8999999999999999) / (pow(var_chaste_interface__Ca__Ca_jsr, 1.8999999999999999) + 1644.6531773416521 * pow((var_chaste_interface__Ca__Ca_ss / (0.0028 + var_chaste_interface__Ca__Ca_ss)), 1.8999999999999999)); // dimensionless
        const double var_Irel__dtau_rel_max = 10.0; // ms
        const double var_Irel__dtau_rel = var_Irel__CaMKactive * var_Irel__dtau_rel_max / (var_Irel__CaMKactive + var_Irel__KmCaMK); // ms
        const double var_Ito2__Kmto2 = 0.1502; // mM
        const double var_Ito2__AAss = 1 / (1.0 + var_Ito2__Kmto2 / var_chaste_interface__Ca__Ca_ss); // dimensionless
        const double d_dt_chaste_interface_var_Ito2__AA = var_Ito2__AAss - var_chaste_interface__Ito2__AA; // 1 / ms
        const double var_Iup_Ileak__Kmup = 0.00092000000000000003; // mM
        const double var_Iup_Ileak__dJupmax = 0.75; // dimensionless
        const double var_Iup_Ileak__dJup = var_Irel__CaMKactive * var_Iup_Ileak__dJupmax / (var_Irel__CaMKactive + var_Irel__KmCaMK); // dimensionless
        const double var_Iup_Ileak__dKmPLBmax = 0.00017000000000000001; // mM
        const double var_Iup_Ileak__dKmPLB = var_Irel__CaMKactive * var_Iup_Ileak__dKmPLBmax / (var_Irel__CaMKactive + var_Irel__KmCaMK); // mM
        const double var_Iup_Ileak__iupmax = 0.0043750000000000004; // mM_per_ms
        const double var_Iup_Ileak__iup = (1.0 + var_Iup_Ileak__dJup) * var_chaste_interface__Ca__Ca_i * var_Iup_Ileak__iupmax / (-var_Iup_Ileak__dKmPLB + var_chaste_interface__Ca__Ca_i + var_Iup_Ileak__Kmup); // mM_per_ms
        const double var_Iup_Ileak__nsrmax = 15.0; // mM
        const double var_Iup_Ileak__ileak = var_chaste_interface__Ca__Ca_nsr * var_Iup_Ileak__iupmax / var_Iup_Ileak__nsrmax; // mM_per_ms
        const double var_K__CTKClmax = 7.0755999999999996e-6; // mM_per_ms
        const double var_Na__CTNaClmax = 9.8442999999999999e-6; // mM_per_ms
        const double var_INaCa__denom2 = pow(var_INaCa__KmNao, 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_INaCa__ca_i_NaCa / var_INaCa__KmCai) * NV_Ith_S(mParameters, 1); // mM4
        const double var_INaCa__denom3 = pow(NV_Ith_S(mParameters, 3), 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 1) + pow(NV_Ith_S(mParameters, 3), 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_ICaL__dpss = 9.0 - 8.0 / (1.0 + exp(-19.117647058823529 - 0.29411764705882354 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_ICaL__dp = 0.10000000000000001 * var_ICaL__dpss - 0.10000000000000001 * var_chaste_interface__ICaL__dp; // 1 / ms
        const double var_ICaL__dss = 1 / (1.0 + exp(0.59347181008902072 - 0.14836795252225518 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ICaL__f2ss = 0.23000000000000001 + 0.77000000000000002 / (1.0 + exp(2.4457142857142857 + 0.14285714285714285 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ICaL__fss = 0.29999999999999999 + 0.69999999999999996 / (1.0 + exp(2.4457142857142857 + 0.14285714285714285 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * NV_Ith_S(mParameters, 4) / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * NV_Ith_S(mParameters, 4) / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * NV_Ith_S(mParameters, 4) / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_ss * exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)) * NV_Ith_S(mParameters, 4) / (-1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICaL__ICaL = ((var_Environment__tissue == 0) ? (pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca) : (var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca)); // uA_per_uF
        const double var_ICaL__fca2ss = 1 / (1.0 - 100.0 * var_ICaL__ICaL); // dimensionless
        const double var_ICaL__fcass = 0.14999999999999999 + 0.55000000000000004 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca__Ca_ss) + 0.29999999999999999 / (1.0 - 20.0 * var_ICaL__ICaL); // dimensionless
        const double d_dt_chaste_interface_var_ICaL__fca = (-var_chaste_interface__ICaL__fca + var_ICaL__fcass) / var_ICaL__taufca; // 1 / ms
        const double var_ICaL__taud = 0.58999999999999997 + 0.80000000000000004 * exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__cell__V) / (1.0 + exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__cell__V)); // ms
        const double d_dt_chaste_interface_var_ICaL__d = (-var_chaste_interface__ICaL__d + var_ICaL__dss) / var_ICaL__taud; // 1 / ms
        const double var_ICaL__tauf = 1 / (0.052900000000000003 + 0.24110000000000001 * exp(-0.19019454876899997 * pow((-1 + 0.10318426646304972 * var_chaste_interface__cell__V), 2))); // ms
        const double d_dt_chaste_interface_var_ICaL__f = (-var_chaste_interface__ICaL__f + var_ICaL__fss) / var_ICaL__tauf; // 1 / ms
        const double var_ICaL__tauf2 = 1 / (0.0054000000000000003 + 0.042299999999999997 * exp(-1.20074125971556 * pow((-1 + 0.053842757610673787 * var_chaste_interface__cell__V), 2))); // ms
        const double d_dt_chaste_interface_var_ICaL__f2 = (-var_chaste_interface__ICaL__f2 + var_ICaL__f2ss) / var_ICaL__tauf2; // 1 / ms
        const double var_ICaL__taufca2 = 125.0 + 300.0 / (1.0 + exp(-4.375 - 25.0 * var_ICaL__ICaL)); // ms
        const double d_dt_chaste_interface_var_ICaL__fca2 = (-var_chaste_interface__ICaL__fca2 + var_ICaL__fca2ss) / var_ICaL__taufca2; // 1 / ms
        const double var_ICab__ICab = ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (3.8499135947999997e-9 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 3.8499135947999997e-9 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 3.8499135947999997e-9 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.0028824983370005666 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_i * exp(0.074871767015599999 * var_chaste_interface__cell__V)) * var_chaste_interface__cell__V / (-1.0 + exp(0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_IKr__r = 1 / (1.0 + exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__cell__V)); // dimensionless
        const double var_IKr__tauxr = 1 / (((fabs(-1.7383999999999999 + var_chaste_interface__cell__V) < 7.352941176468758e-7) ? (4.4117647058812543e-10 / (1.0 - exp(-9.9999999999975114e-8)) - 680000.00000016927 * (-1.7384007352941175 + var_chaste_interface__cell__V) * (-4.4117647058812543e-10 / (1.0 - exp(9.9999999999975114e-8)) - 4.4117647058812543e-10 / (1.0 - exp(-9.9999999999975114e-8)))) : (0.00059999999999999995 * (-1.7383999999999999 + var_chaste_interface__cell__V) / (1.0 - exp(0.2364224 - 0.13600000000000001 * var_chaste_interface__cell__V)))) + ((fabs(38.360799999999998 + var_chaste_interface__cell__V) < 6.5703022339436146e-7) ? (-1.9710906701830842e-10 / (-1.0 + exp(-1.0000000000062181e-7)) + 760999.99999526795 * (38.360800657030218 + var_chaste_interface__cell__V) * (1.9710906701830842e-10 / (-1.0 + exp(1.0000000000062181e-7)) + 1.9710906701830842e-10 / (-1.0 + exp(-1.0000000000062181e-7)))) : (0.00029999999999999997 * (38.360799999999998 + var_chaste_interface__cell__V) / (-1.0 + exp(5.8385137599999997 + 0.1522 * var_chaste_interface__cell__V))))); // ms
        const double var_IKr__xrss = 1 / (1.0 + exp(-2.3729411764705883 - 0.23529411764705882 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_IKr__xr = (-var_chaste_interface__IKr__xr + var_IKr__xrss) / var_IKr__tauxr; // 1 / ms
        const double var_IKs__tauxs = 1 / (((fabs(44.600000000000001 + var_chaste_interface__cell__V) < 1.0030090258350555e-8) ? (7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)) - 49850000.061936118 * (44.599999989969909 + var_chaste_interface__cell__V) * (-7.6328986866047728e-13 / (1.0 - exp(9.9999999875755032e-8)) - 7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)))) : (7.6100000000000007e-5 * (44.600000000000001 + var_chaste_interface__cell__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__cell__V)))) + ((fabs(-0.55000000000000004 + var_chaste_interface__cell__V) < 7.8124999999948028e-7) ? (-2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)) + 640000.00000042573 * (-0.54999921875000002 + var_chaste_interface__cell__V) * (2.8124999999996902e-10 / (-1.0 + exp(9.9999999999988984e-8)) + 2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)))) : (0.00036000000000000002 * (-0.55000000000000004 + var_chaste_interface__cell__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__cell__V))))); // ms
        const double var_IKs__xss = 1 / (1.0 + exp(0.4251012145748988 - 0.04048582995951417 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs1 = (-var_chaste_interface__IKs__xs1 + var_IKs__xss) / var_IKs__tauxs; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__xs2 = 0.5 * (-var_chaste_interface__IKs__xs2 + var_IKs__xss) / var_IKs__tauxs; // 1 / ms
        const double var_INa__ah = ((var_chaste_interface__cell__V >= -40.0) ? (0) : (0.13500000000000001 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__cell__V))); // per_ms
        const double var_INa__aj = ((var_chaste_interface__cell__V >= -40.0) ? (0) : ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V) - 3.4740000000000003e-5 * exp(-0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INa__am = ((fabs(47.130000000000003 + var_chaste_interface__cell__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INa__bh = ((var_chaste_interface__cell__V >= -40.0) ? (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__cell__V))) : (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V))); // per_ms
        const double d_dt_chaste_interface_var_INa__H = (1.0 - var_chaste_interface__INa__H) * var_INa__ah - var_chaste_interface__INa__H * var_INa__bh; // 1 / ms
        const double var_INa__bj = ((var_chaste_interface__cell__V >= -40.0) ? (0.29999999999999999 * exp(-2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__cell__V))) : (0.1212 * exp(-0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double d_dt_chaste_interface_var_INa__J = (1.0 - var_chaste_interface__INa__J) * var_INa__aj - var_chaste_interface__INa__J * var_INa__bj; // 1 / ms
        const double var_INa__bm = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__cell__V); // per_ms
        const double d_dt_chaste_interface_var_INa__m = (1.0 - var_chaste_interface__INa__m) * var_INa__am - var_INa__bm * var_chaste_interface__INa__m; // 1 / ms
        const double var_INaCa__denom1 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__num = pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 1) * exp(var_Environment__FonRT * var_INaCa__eta * var_chaste_interface__cell__V) - pow(NV_Ith_S(mParameters, 3), 3) * var_INaCa__ca_i_NaCa * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__INaCa = NV_Ith_S(mParameters, 9) * var_INaCa__allo * var_INaCa__num / ((var_INaCa__denom2 + var_INaCa__denom3) * var_INaCa__denom1); // uA_per_uF
        const double var_INaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_Environment__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaK__INaK = NV_Ith_S(mParameters, 2) * var_INaK__fnak * var_INaK__ibarnak / ((1.0 + pow(var_INaK__kmnai, 2) / pow(var_chaste_interface__Na__Na_i, 2)) * (NV_Ith_S(mParameters, 2) + var_INaK__kmko)); // uA_per_uF
        const double var_INal__amL = ((fabs(47.130000000000003 + var_chaste_interface__cell__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INal__bmL = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__cell__V); // per_ms
        const double d_dt_chaste_interface_var_INal__mL = (1.0 - var_chaste_interface__INal__mL) * var_INal__amL - var_INal__bmL * var_chaste_interface__INal__mL; // 1 / ms
        const double var_INal__hLss = 1 / (1.0 + exp(14.918032786885247 + 0.16393442622950821 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_INal__hL = 0.0016666666666666668 * var_INal__hLss - 0.0016666666666666668 * var_chaste_interface__INal__hL; // 1 / ms
        const double var_Irel__cafac = 1 / (1.0 + exp(3.3333333333333335 + 66.666666666666671 * var_ICaL__ICaL)); // dimensionless
        const double var_Irel__riss = 1 / (1.0 + exp(-16.0 + 80.0 * var_Irel__cafac + 40000.0 * var_chaste_interface__Ca__Ca_ss)); // dimensionless
        const double var_Irel__ross = var_Irel__dro_inf / (1.0 + 1 / pow(var_ICaL__ICaL, 2)); // dimensionless
        const double d_dt_chaste_interface_var_Irel__ro = 0.33333333333333331 * var_Irel__ross - 0.33333333333333331 * var_chaste_interface__Irel__ro; // 1 / ms
        const double var_Irel__tauri = 3.0 + (350.0 - var_Irel__dtau_rel) / (1.0 + exp(-15.0 + 5000.0 * var_chaste_interface__Ca__Ca_ss + 15.0 * var_Irel__cafac)) + var_Irel__dtau_rel; // ms
        const double d_dt_chaste_interface_var_Irel__ri = (-var_chaste_interface__Irel__ri + var_Irel__riss) / var_Irel__tauri; // 1 / ms
        const double var_Irel__vg = ((var_Environment__tissue == 0) ? (1 / (1.0 + exp(2.6000000000000001 + 0.20000000000000001 * var_ICaL__ibarca))) : (1.0)); // dimensionless
        const double var_Irel__Grel = NV_Ith_S(mParameters, 0) * var_Irel__vg; // per_ms
        const double var_Irel__irelcicr = (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_jsr) * var_Irel__Grel * var_chaste_interface__Irel__ri * var_chaste_interface__Irel__ro; // mM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_jsr = (-var_Irel__irelcicr + var_Idiff_Itr__itr) * var_Ca__bcsqn; // mM / ms
        const double var_Ito__ay = 25.0 * exp(-1.6000000000000001 + 0.040000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(-1.6000000000000001 + 0.040000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double var_Ito__ay2 = 0.029999999999999999 / (1.0 + exp(12.0 + 0.20000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double var_Ito__ay3 = 0.0038999999999999998 / (1.0 + exp(12.6 + 0.20000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double var_Ito__by = 25.0 * exp(-3.6000000000000001 - 0.040000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(-3.6000000000000001 - 0.040000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_Ito__ydv = (1.0 - var_chaste_interface__Ito__ydv) * var_Ito__ay - var_Ito__by * var_chaste_interface__Ito__ydv; // 1 / ms
        const double var_Ito__by2 = 0.20000000000000001 * exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_Ito__ydv2 = (1.0 - var_chaste_interface__Ito__ydv2) * var_Ito__ay2 - var_Ito__by2 * var_chaste_interface__Ito__ydv2; // 1 / ms
        const double var_Ito__by3 = 0.10000000000000001 * exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_Ito__zdv = (1.0 - var_chaste_interface__Ito__zdv) * var_Ito__ay3 - var_Ito__by3 * var_chaste_interface__Ito__zdv; // 1 / ms
        const double var_Ito__rv = exp(0.0033333333333333335 * var_chaste_interface__cell__V); // dimensionless
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (3.8593999999999993e-9 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(9.9999999999999995e-8)) + 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) - 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) : (0.001444800488100033 * (-100.0 * exp(0.0374358835078 * var_chaste_interface__cell__V) + var_chaste_interface__Cl__Cl_i) * var_chaste_interface__cell__V / (1.0 - exp(0.0374358835078 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_chaste_interface__Ito2__AA * var_Ito2__Ito2_max; // uA_per_uF
        const double var_cell__a = 0.0011000000000000001; // cm
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_cell__l = 0.01; // cm
        const double var_cell__ageo = 2.0 * M_PI * pow(var_cell__a, 2) + 2.0 * M_PI * var_cell__a * var_cell__l; // cm2
        const double var_cell__Acap = 2.0 * var_cell__ageo; // uF
        const double var_cell__AF = var_cell__Acap / var_Environment__F; // uF_mole_per_C
        const double var_cell__vcell = 1000.0 * M_PI * pow(var_cell__a, 2) * var_cell__l; // uL
        const double var_cell__vjsr = 0.0047999999999999996 * var_cell__vcell; // uL
        const double var_cell__vmyo = 0.68000000000000005 * var_cell__vcell; // uL
        const double var_cell__vnsr = 0.055199999999999999 * var_cell__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_nsr = -var_Iup_Ileak__ileak - var_Idiff_Itr__itr * var_cell__vjsr / var_cell__vnsr + var_Iup_Ileak__iup; // mM / ms
        const double var_cell__vss = 0.02 * var_cell__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_i = ((-var_Iup_Ileak__iup + var_Iup_Ileak__ileak) * var_cell__vnsr / var_cell__vmyo + var_Idiff_Itr__idiff * var_cell__vss / var_cell__vmyo + 0.5 * (-var_ICab__ICab - var_IpCa__IpCa + 2.0 * var_INaCa__INaCa) * var_cell__AF / var_cell__vmyo) * var_Ca__bmyo; // mM / ms
        const double d_dt_chaste_interface_var_Ca__Ca_ss = (-var_Idiff_Itr__idiff + var_Irel__irelcicr * var_cell__vjsr / var_cell__vss - 0.5 * var_ICaL__ICaL * var_cell__AF / var_cell__vss) * var_Ca__bss; // mM / ms
        const double var_reversal_potentials__ECl = -log(var_Environment__Cl_o / var_chaste_interface__Cl__Cl_i) / var_Environment__FonRT; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__cell__V) * var_IClb__GClb; // uA_per_uF
        const double var_cell__clont = 0.5 * var_cell__i_Stim + var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
        const double var_reversal_potentials__EK = log(NV_Ith_S(mParameters, 2) / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)); // per_ms
        const double var_IK1__bk1 = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__IK1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 2)) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IK1__ak1 * NV_Ith_S(mParameters, 6) / (var_IK1__ak1 + var_IK1__bk1); // uA_per_uF
        const double var_IKp__IKp = 0.0027599999999999999 * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKr__gkr * var_IKr__r * var_chaste_interface__IKr__xr; // uA_per_uF
        const double var_Ito__Ito = pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 10) * var_Ito__rv * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv; // uA_per_uF
        const double var_K__CTKCl = (-var_reversal_potentials__ECl + var_reversal_potentials__EK) * var_K__CTKClmax / (87.825100000000006 - var_reversal_potentials__ECl + var_reversal_potentials__EK); // mM_per_ms
        const double var_reversal_potentials__ENa = log(NV_Ith_S(mParameters, 3) / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__INa = (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INa__gNa; // uA_per_uF
        const double var_INal__INal = pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INal__GNaL * var_chaste_interface__INal__hL; // uA_per_uF
        const double var_Na__CTNaCl = pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4) * var_Na__CTNaClmax / (59494197.640692554 + pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4)); // mM_per_ms
        const double d_dt_chaste_interface_var_Cl__Cl_i = var_cell__AF * var_cell__clont / var_cell__vmyo + var_K__CTKCl + var_Na__CTNaCl; // mM / ms
        const double var_cell__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + var_INa__INa + var_INal__INal; // uA_per_uF
        const double d_dt_chaste_interface_var_Na__Na_i = -var_cell__AF * var_cell__naiont / var_cell__vmyo + var_Na__CTNaCl; // mM / ms
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((NV_Ith_S(mParameters, 3) * var_reversal_potentials__prnak + NV_Ith_S(mParameters, 2)) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_Environment__FonRT; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__cell__V) * var_IKs__gks * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_uF
        const double var_cell__kiont = 0.5 * var_cell__i_Stim - 2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito__Ito; // uA_per_uF
        const double d_dt_chaste_interface_var_K__K_i = -var_cell__AF * var_cell__kiont / var_cell__vmyo + var_K__CTKCl; // mM / ms

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_cell__V = 0.0;
        }
        else
        {
            const double var_cell__caiont = -2.0 * var_INaCa__INaCa + var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa; // uA_per_uF
            d_dt_chaste_interface_var_cell__V = -var_cell__caiont - var_cell__clont - var_cell__kiont - var_cell__naiont; // mV / ms
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_cell__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_Ca__Ca_i;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_INa__H;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_INa__m;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_INa__J;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_ICaL__d;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_ICaL__dp;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_ICaL__f;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_ICaL__fca;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_ICaL__fca2;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_ICaL__f2;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_IKr__xr;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_IKs__xs1;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_IKs__xs2;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_Ito__ydv;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_Ito__ydv2;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_Ito__zdv;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_Ito2__AA;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_INal__mL;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_INal__hL;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_Irel__CaMKtrap;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_Irel__ro;
        NV_Ith_S(rDY,22) = d_dt_chaste_interface_var_Irel__ri;
        NV_Ith_S(rDY,23) = d_dt_chaste_interface_var_Na__Na_i;
        NV_Ith_S(rDY,24) = d_dt_chaste_interface_var_K__K_i;
        NV_Ith_S(rDY,25) = d_dt_chaste_interface_var_Cl__Cl_i;
        NV_Ith_S(rDY,26) = d_dt_chaste_interface_var_Ca__Ca_jsr;
        NV_Ith_S(rDY,27) = d_dt_chaste_interface_var_Ca__Ca_nsr;
        NV_Ith_S(rDY,28) = d_dt_chaste_interface_var_Ca__Ca_ss;
    }

    void Cellbenson_epicardial_2008FromCellMLCvode::EvaluateAnalyticJacobian(double var_chaste_interface__Environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 0.00012131666
        double var_chaste_interface__INa__H = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.987317750543
        double var_chaste_interface__INa__m = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INa__J = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.991924983076
        double var_chaste_interface__ICaL__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 1.64013e-06
        double var_chaste_interface__ICaL__dp = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__IKr__xr = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 7.24074e-06
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.019883138161
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.019890650554
        double var_chaste_interface__Ito__ydv = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.013970786703
        double var_chaste_interface__Ito__ydv2 = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.99996472752
        double var_chaste_interface__Ito__zdv = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.829206149767
        double var_chaste_interface__Ito2__AA = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.000816605172
        double var_chaste_interface__INal__mL = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INal__hL = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.26130711759
        double var_chaste_interface__Irel__CaMKtrap = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.021123704774
        double var_chaste_interface__Irel__ro = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Irel__ri = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.862666650318
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 23);
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 24);
        // Units: mM; Initial value: 135.469546216758
        double var_chaste_interface__Cl__Cl_i = NV_Ith_S(rY, 25);
        // Units: mM; Initial value: 15.59207157178
        double var_chaste_interface__Ca__Ca_jsr = NV_Ith_S(rY, 26);
        // Units: mM; Initial value: 1.737580994071
        double var_chaste_interface__Ca__Ca_nsr = NV_Ith_S(rY, 27);
        // Units: mM; Initial value: 1.832822335168
        double var_chaste_interface__Ca__Ca_ss = NV_Ith_S(rY, 28);
        // Units: mM; Initial value: 0.00012271265
        const double var_x0 = 7224.0024405001659 * NV_Ith_S(mParameters, 4);
        const double var_x1 = exp(9.9999999999763197e-8);
        const double var_x2 = 1 / (-1.0 + var_x1);
        const double var_x3 = -0.34100000000000003 * NV_Ith_S(mParameters, 1);
        const double var_x4 = var_chaste_interface__Ca__Ca_ss;
        const double var_x5 = var_x2 * (var_x3 + var_x1 * var_x4);
        const double var_x6 = exp(-9.9999999999763197e-8);
        const double var_x7 = 1 / (-1.0 + var_x6);
        const double var_x8 = var_x7 * (var_x3 + var_x4 * var_x6);
        const double var_x9 = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp);
        const double var_x10 = var_x9 * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca2;
        const double var_x11 = var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__fca;
        const double var_x12 = var_x10 * var_x11;
        const double var_x13 = -15.0 + var_chaste_interface__cell__V;
        const double var_x14 = fabs(var_x13) < 1.3356169352718439e-6;
        const double var_x15 = 0.074871767015599999 * var_chaste_interface__cell__V;
        const double var_x16 = exp(-1.1230765052339999 + var_x15);
        const double var_x17 = var_x3 + var_x16 * var_x4;
        const double var_x18 = -1.0 + var_x16;
        const double var_x19 = NV_Ith_S(mParameters, 4) / var_x18;
        const double var_x20 = 14448.004881000332 * var_x17 * var_x19;
        const double var_x21 = var_x12 * var_x20;
        const double var_x22 = var_x19 * var_chaste_interface__Ca__Ca_ss;
        const double var_x23 = var_x13 * var_x16;
        const double var_x24 = var_x12 * var_x23;
        const double var_x25 = 1081.7476552905084 * var_x24;
        const double var_x26 = pow(var_x18, 2);
        const double var_x27 = var_x17 * NV_Ith_S(mParameters, 4) / var_x26;
        const double var_x28 = ((var_x14) ? (var_x12 * (var_x0 * var_x5 + var_x0 * var_x8)) : (var_x21 + var_x22 * var_x25 - var_x25 * var_x27));
        const double var_x29 = exp(9.9999999999999995e-8);
        const double var_x30 = 1 / (-1.0 + var_x29);
        const double var_x31 = var_x30 * (var_x3 + var_x29 * var_chaste_interface__Ca__Ca_i);
        const double var_x32 = exp(-9.9999999999999995e-8);
        const double var_x33 = 1 / (-1.0 + var_x32);
        const double var_x34 = var_x33 * (var_x3 + var_x32 * var_chaste_interface__Ca__Ca_i);
        const double var_x35 = fabs(var_chaste_interface__cell__V);
        const double var_x36 = var_x35 < 1.3356169352750065e-6;
        const double var_x37 = exp(var_x15);
        const double var_x38 = var_x37 * var_chaste_interface__Ca__Ca_i;
        const double var_x39 = var_x3 + var_x38;
        const double var_x40 = -1.0 + var_x37;
        const double var_x41 = 1 / var_x40;
        const double var_x42 = 0.0028824983370005666 * var_x41;
        const double var_x43 = var_x39 * var_x42;
        const double var_x44 = var_x37 * var_chaste_interface__cell__V;
        const double var_x45 = ((var_x36) ? (0.0014412491685002833 * var_x31 + 0.0014412491685002833 * var_x34) : (var_x43 + 0.00021581774391076088 * var_x38 * var_x41 * var_chaste_interface__cell__V - 0.00021581774391076088 * var_x39 * var_x44 / pow(var_x40, 2)));
        const double var_x46 = exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V);
        const double var_x47 = 1.0 + var_x46;
        const double var_x48 = 1 / var_x47;
        const double var_x49 = 1 / (1.0 - var_x29);
        const double var_x50 = -100.0 * var_x29 + var_chaste_interface__Cl__Cl_i;
        const double var_x51 = 1 / (1.0 - var_x32);
        const double var_x52 = -100.0 * var_x32 + var_chaste_interface__Cl__Cl_i;
        const double var_x53 = var_x35 < 2.671233870550013e-6;
        const double var_x54 = 0.0374358835078 * var_chaste_interface__cell__V;
        const double var_x55 = exp(var_x54);
        const double var_x56 = -100.0 * var_x55 + var_chaste_interface__Cl__Cl_i;
        const double var_x57 = 1.0 - var_x55;
        const double var_x58 = 1 / var_x57;
        const double var_x59 = 0.001444800488100033 * var_x58;
        const double var_x60 = var_x56 * var_x59;
        const double var_x61 = var_x55 * var_chaste_interface__cell__V;
        const double var_x62 = ((var_x53) ? (0.00072240024405001652 * var_x49 * var_x50 + 0.00072240024405001652 * var_x51 * var_x52) : (var_x60 - 0.005408738276452542 * var_x58 * var_x61 + 5.4087382764525417e-5 * var_x56 * var_x61 / pow(var_x57, 2))) * var_chaste_interface__Ito2__AA;
        const double var_x63 = pow(var_chaste_interface__INal__mL, 3);
        const double var_x64 = 0.0064999999999999997 * var_x63;
        const double var_x65 = 1 / var_chaste_interface__K__K_i;
        const double var_x66 = log(var_x65 * NV_Ith_S(mParameters, 2));
        const double var_x67 = 26.712338705500134 * var_x66;
        const double var_x68 = -var_x67 + var_chaste_interface__cell__V;
        const double var_x69 = var_x46 * var_x68 / pow(var_x47, 2);
        const double var_x70 = 1 / var_chaste_interface__Ca__Ca_i;
        const double var_x71 = pow(var_x70, 1.3999999999999999);
        const double var_x72 = 1.0 + 6.4818210260626455e-7 * var_x71;
        const double var_x73 = 1 / var_x72;
        const double var_x74 = -1.0 - 0.59999999999999998 * var_x73;
        const double var_x75 = NV_Ith_S(mParameters, 8) * var_chaste_interface__IKs__xs2;
        const double var_x76 = var_x74 * var_x75;
        const double var_x77 = var_x76 * var_chaste_interface__IKs__xs1;
        const double var_x78 = pow(var_chaste_interface__INa__m, 3);
        const double var_x79 = var_x78 * NV_Ith_S(mParameters, 5) * var_chaste_interface__INa__J;
        const double var_x80 = var_x79 * var_chaste_interface__INa__H;
        const double var_x81 = exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__cell__V);
        const double var_x82 = 1.0 + var_x81;
        const double var_x83 = sqrt(NV_Ith_S(mParameters, 2));
        const double var_x84 = var_x83 * NV_Ith_S(mParameters, 7) / var_x82;
        const double var_x85 = 0.43033148291193518 * var_x84;
        const double var_x86 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 6.370892781261781 * var_x66);
        const double var_x87 = 1.0 + var_x86;
        const double var_x88 = 1 / var_x87;
        const double var_x89 = exp(-2.4444678999999998 + 13.738155796238718 * var_x66 - 0.51429999999999998 * var_chaste_interface__cell__V);
        const double var_x90 = 1.0 + var_x89;
        const double var_x91 = 1 / var_x90;
        const double var_x92 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 1.6494869150646332 * var_x66);
        const double var_x93 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 2.1455350448257708 * var_x66);
        const double var_x94 = var_x92 + 0.49124000000000001 * var_x93;
        const double var_x95 = var_x91 * var_x94;
        const double var_x96 = var_x83 * NV_Ith_S(mParameters, 6) / (var_x95 + 1.02 * var_x88);
        const double var_x97 = var_x88 * var_x96;
        const double var_x98 = pow(var_chaste_interface__Ito__ydv, 3);
        const double var_x99 = exp(0.0033333333333333335 * var_chaste_interface__cell__V);
        const double var_x100 = var_x98 * var_x99 * NV_Ith_S(mParameters, 10) * var_chaste_interface__Ito__zdv;
        const double var_x101 = var_x100 * var_chaste_interface__Ito__ydv2;
        const double var_x102 = exp(0.01310255922773 * var_chaste_interface__cell__V);
        const double var_x103 = pow(var_chaste_interface__Na__Na_i, 3);
        const double var_x104 = var_x103 * NV_Ith_S(mParameters, 1);
        const double var_x105 = var_x102 * var_x104;
        const double var_x106 = exp(-0.024333324280070002 * var_chaste_interface__cell__V);
        const double var_x107 = pow(NV_Ith_S(mParameters, 3), 3);
        const double var_x108 = var_x107 * var_chaste_interface__Ca__Ca_i;
        const double var_x109 = 1.0 + 0.27000000000000002 * var_x106;
        const double var_x110 = 1 / var_x109;
        const double var_x111 = 1.0 + 6.9444444444444451e-9 / pow(var_chaste_interface__Ca__Ca_i, 2);
        const double var_x112 = 1 / var_x111;
        const double var_x113 = 1.5 * var_x107;
        const double var_x114 = var_x113 * var_chaste_interface__Ca__Ca_i;
        const double var_x115 = var_x107 * (1.0 + 0.00053738391835633597 * var_x103);
        const double var_x116 = (1.0 + 416.66666666666669 * var_chaste_interface__Ca__Ca_i) * NV_Ith_S(mParameters, 1);
        const double var_x117 = 1 / (var_x104 + var_x114 + 1004882.8125 * var_chaste_interface__Ca__Ca_i + 0.0035999999999999999 * var_x115 + 1.3 * var_x103 + 1860.8670000000004 * var_x116);
        const double var_x118 = var_x112 * var_x117 * NV_Ith_S(mParameters, 9);
        const double var_x119 = var_x110 * var_x118;
        const double var_x120 = var_x119 * (0.01310255922773 * var_x105 + 0.036499986420104998 * var_x106 * var_x108);
        const double var_x121 = pow(var_chaste_interface__Na__Na_i, 2);
        const double var_x122 = 1 / var_x121;
        const double var_x123 = exp(-0.00374358835078 * var_chaste_interface__cell__V);
        const double var_x124 = exp(0.01485884101040119 * NV_Ith_S(mParameters, 3));
        const double var_x125 = exp(-var_x54);
        const double var_x126 = 1.0 + 0.1245 * var_x123 + 0.036499999999999998 * var_x125 * (-0.14285714285714285 + 0.14285714285714285 * var_x124);
        const double var_x127 = NV_Ith_S(mParameters, 2) / (1.5 + NV_Ith_S(mParameters, 2));
        const double var_x128 = var_x127 * (0.00046607674967211004 * var_x123 + 0.0374358835078 * var_x125 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x124)) / (pow(var_x126, 2) * (1.0 + 100.0 * var_x122));
        const double var_x129 = var_x86 / pow(var_x87, 2);
        const double var_x130 = var_x68 * var_x96;
        const double var_x131 = var_x129 * var_x130;
        const double var_x132 = var_x68 * var_x83;
        const double var_x133 = var_x132 * var_x81 * NV_Ith_S(mParameters, 7) * var_chaste_interface__IKr__xr / pow(var_x82, 2);
        const double var_x134 = var_x89 * var_x94 / pow(var_x90, 2);
        const double var_x135 = 0.24326999999999999 * var_x129 - 0.51429999999999998 * var_x134 - var_x91 * (0.061749999999999999 * var_x92 + 0.039456396800000001 * var_x93);
        const double var_x136 = var_x132 * var_x88 * NV_Ith_S(mParameters, 6) / pow((var_x88 + 0.98039215686274506 * var_x95), 2);
        const double var_x137 = 0.42189361069797565 * var_x136;
        const double var_x138 = var_x105 - var_x106 * var_x114;
        const double var_x139 = var_x106 * var_x118 * var_x138 / pow(var_x109, 2);
        const double var_x140 = var_x101 * var_x68;
        const double var_x141 = 3.8499135947999997e-9 * var_x32 * var_x33;
        const double var_x142 = ((var_x36) ? (-var_x141 + (0.5 + 374358.83507800003 * var_chaste_interface__cell__V) * (var_x141 + 3.8499135947999997e-9 * var_x29 * var_x30)) : (var_x42 * var_x44));
        const double var_x143 = 0.00050000000000000001 + var_chaste_interface__Ca__Ca_i;
        const double var_x144 = 1 / var_x143;
        const double var_x145 = pow(var_x143, (-2));
        const double var_x146 = var_x145 * var_chaste_interface__Ca__Ca_i;
        const double var_x147 = var_x106 * var_x119;
        const double var_x148 = -1004882.8125 - var_x113 - 775361.25000000012 * NV_Ith_S(mParameters, 1);
        const double var_x149 = var_x110 * var_x138 * NV_Ith_S(mParameters, 9);
        const double var_x150 = var_x112 * var_x149 / pow((1.2936831875607387e-6 * var_x103 + 0.0018518248862973764 * var_x116 + 1.4927113702623908e-6 * var_x108 + 9.9514091350826051e-7 * var_x104 + 3.5825072886297377e-9 * var_x115 + var_chaste_interface__Ca__Ca_i), 2);
        const double var_x151 = 9.9030543773805519e-13 * var_x150;
        const double var_x152 = var_x117 * var_x149 / (pow(var_x111, 2) * pow(var_chaste_interface__Ca__Ca_i, 3));
        const double var_x153 = 1 / (0.018329999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i);
        const double var_x154 = -26.712338705500134 * log(var_x153 * (0.018329999999999999 * NV_Ith_S(mParameters, 3) + NV_Ith_S(mParameters, 2))) + var_chaste_interface__cell__V;
        const double var_x155 = var_x154 * var_chaste_interface__IKs__xs1;
        const double var_x156 = var_x155 * var_x70 * var_x71 * var_x75 / pow(var_x72, 2);
        const double var_x157 = 1 / var_chaste_interface__Na__Na_i;
        const double var_x158 = log(var_x157 * NV_Ith_S(mParameters, 3));
        const double var_x159 = -26.712338705500134 * var_x158 + var_chaste_interface__cell__V;
        const double var_x160 = var_x159 * var_x79;
        const double var_x161 = var_x159 * NV_Ith_S(mParameters, 5) * var_chaste_interface__INa__H;
        const double var_x162 = var_x161 * pow(var_chaste_interface__INa__m, 2) * var_chaste_interface__INa__J;
        const double var_x163 = var_x161 * var_x78;
        const double var_x164 = -14.999998664383064 + var_chaste_interface__cell__V;
        const double var_x165 = 0.019296999999954306 * NV_Ith_S(mParameters, 4);
        const double var_x166 = var_x165 * var_x8;
        const double var_x167 = var_x164 * (var_x166 + var_x165 * var_x5);
        const double var_x168 = -var_x166 + 374358.83507888648 * var_x167;
        const double var_x169 = var_x10 * var_x168;
        const double var_x170 = var_x169 * var_chaste_interface__ICaL__fca;
        const double var_x171 = var_x170 * var_chaste_interface__ICaL__f;
        const double var_x172 = var_chaste_interface__ICaL__dp / var_chaste_interface__ICaL__d;
        const double var_x173 = var_x13 * var_x21;
        const double var_x174 = ((var_x14) ? (var_x171 * var_x172) : (var_x172 * var_x173));
        const double var_x175 = log(var_chaste_interface__ICaL__d);
        const double var_x176 = ((var_x14) ? (var_x171 * var_x175) : (var_x173 * var_x175));
        const double var_x177 = var_x13 * var_x20;
        const double var_x178 = var_x10 * var_x177;
        const double var_x179 = ((var_x14) ? (var_x170) : (var_x178 * var_chaste_interface__ICaL__fca));
        const double var_x180 = ((var_x14) ? (var_x169 * var_chaste_interface__ICaL__f) : (var_x178 * var_chaste_interface__ICaL__f));
        const double var_x181 = var_x11 * var_x9;
        const double var_x182 = var_x168 * var_x181;
        const double var_x183 = var_x177 * var_x181;
        const double var_x184 = ((var_x14) ? (var_x182 * var_chaste_interface__ICaL__f2) : (var_x183 * var_chaste_interface__ICaL__f2));
        const double var_x185 = ((var_x14) ? (var_x182 * var_chaste_interface__ICaL__fca2) : (var_x183 * var_chaste_interface__ICaL__fca2));
        const double var_x186 = var_x155 * NV_Ith_S(mParameters, 8);
        const double var_x187 = var_x68 * var_x99 * NV_Ith_S(mParameters, 10) * var_chaste_interface__Ito__ydv2;
        const double var_x188 = var_x187 * pow(var_chaste_interface__Ito__ydv, 2) * var_chaste_interface__Ito__zdv;
        const double var_x189 = var_x100 * var_x68;
        const double var_x190 = var_x187 * var_x98;
        const double var_x191 = 3.8593999999999993e-9 * var_x49;
        const double var_x192 = 3.8593999999999993e-9 * var_x51;
        const double var_x193 = var_x192 * var_x52;
        const double var_x194 = ((var_x53) ? (-var_x193 + 187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (var_x193 + var_x191 * var_x50)) : (var_x60 * var_chaste_interface__cell__V));
        const double var_x195 = var_x159 * pow(var_chaste_interface__INal__mL, 2) * var_chaste_interface__INal__hL;
        const double var_x196 = var_x157 * var_x63 * var_chaste_interface__INal__hL;
        const double var_x197 = var_x153 * var_x77;
        const double var_x198 = var_x157 * var_x80;
        const double var_x199 = var_x127 / (var_x103 * var_x126 * pow((0.01 + var_x122), 2));
        const double var_x200 = var_x121 * NV_Ith_S(mParameters, 1);
        const double var_x201 = -3 * var_x200 - 3.9000000000000004 * var_x121 - 5.8037463182484285e-6 * var_x107 * var_x121;
        const double var_x202 = var_x102 * var_x119 * var_x200;
        const double var_x203 = var_x48 * var_x65;
        const double var_x204 = var_x65 * var_x97;
        const double var_x205 = var_x65 * var_x84 * var_chaste_interface__IKr__xr;
        const double var_x206 = var_x101 * var_x65;
        const double var_x207 = var_x129 * var_x65;
        const double var_x208 = 6.4983106368870169 * var_x207 - var_x91 * (1.6494869150646332 * var_x65 * var_x92 + 1.0539726354202117 * var_x65 * var_x93) - 13.738155796238718 * var_x134 * var_x65;
        const double var_x209 = var_x130 * var_x207;
        const double var_x210 = 1 / var_chaste_interface__Cl__Cl_i;
        const double var_x211 = ((var_x53) ? (-var_x192 + (0.5 + 187179.41753900002 * var_chaste_interface__cell__V) * (var_x191 + var_x192)) : (var_x59 * var_chaste_interface__cell__V)) * var_chaste_interface__Ito2__AA;
        const double var_x212 = var_x6 * var_x7;
        const double var_x213 = var_x165 * var_x212;
        const double var_x214 = var_x213 + var_x1 * var_x165 * var_x2;
        const double var_x215 = ((var_x14) ? (var_x12 * (-var_x213 + var_x214 * (-5615382.0261832969 + 374358.83507888648 * var_chaste_interface__cell__V))) : (14448.004881000332 * var_x19 * var_x24));
        const double var_x216 = 0.0023800000000000002 + var_chaste_interface__Ca__Ca_i;
        const double var_x217 = 1.0 + 0.00011900000000000002 / pow(var_x216, 2) + 3.5000000000000004e-5 * var_x145;
        const double var_x218 = 1 / var_x217;
        const double var_x219 = var_x218;
        const double var_x220 = 1.768721357868101e-6 * var_x144;
        const double var_x221 = 1.0 - var_chaste_interface__Irel__CaMKtrap;
        const double var_x222 = 1 / var_chaste_interface__Ca__Ca_ss;
        const double var_x223 = 1.0 + 0.0015 * var_x222;
        const double var_x224 = 1 / var_x223;
        const double var_x225 = 0.050000000000000003 * var_x224;
        const double var_x226 = var_x221 * var_x225 + var_chaste_interface__Irel__CaMKtrap;
        const double var_x227 = 0.14999999999999999 + var_x226;
        const double var_x228 = 1 / var_x227;
        const double var_x229 = var_x226 * var_x228;
        const double var_x230 = 0.00092000000000000003 - 0.00017000000000000001 * var_x229 + var_chaste_interface__Ca__Ca_i;
        const double var_x231 = 1 / var_x230;
        const double var_x232 = 1.0 + 0.75 * var_x229;
        const double var_x233 = var_x231 * var_x232;
        const double var_x234 = 0.00035514705882352943 * var_x233;
        const double var_x235 = 0.00035514705882352943 * var_chaste_interface__Ca__Ca_i;
        const double var_x236 = var_x232 / pow(var_x230, 2);
        const double var_x237 = var_x235 * var_x236;
        const double var_x238 = 6.0924326210094507e-17 * var_x150;
        const double var_x239 = var_x107 * var_x147;
        const double var_x240 = 3.8499135947999997e-9 * var_x34;
        const double var_x241 = 1 - var_x225;
        const double var_x242 = var_x228 * var_x241;
        const double var_x243 = var_x226 / pow(var_x227, 2);
        const double var_x244 = var_x243 * (-1 + var_x225);
        const double var_x245 = 0.75 * var_x242 + 0.75 * var_x244;
        const double var_x246 = var_x231 * var_x235;
        const double var_x247 = 0.00017000000000000001 * var_x242 + 0.00017000000000000001 * var_x244;
        const double var_x248 = pow(var_chaste_interface__Ca__Ca_ss, (-2));
        const double var_x249 = var_x221 * var_x248 / pow(var_x223, 2);
        const double var_x250 = var_x228 * var_x249;
        const double var_x251 = var_x243 * var_x249;
        const double var_x252 = 5.6250000000000005e-5 * var_x250 - 5.6250000000000005e-5 * var_x251;
        const double var_x253 = 1.2750000000000002e-8 * var_x250 - 1.2750000000000002e-8 * var_x251;
        const double var_x254 = var_chaste_interface__cell__V >= -40.0;
        const double var_x255 = exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__cell__V);
        const double var_x256 = exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__cell__V);
        const double var_x257 = 1.0 + var_x256;
        const double var_x258 = exp(0.079000000000000001 * var_chaste_interface__cell__V);
        const double var_x259 = exp(0.34999999999999998 * var_chaste_interface__cell__V);
        const double var_x260 = 1 / (1.0 - exp(1.0000000000287557e-7));
        const double var_x261 = 1 / (1.0 - exp(-1.0000000000287557e-7));
        const double var_x262 = 47.130000000000003 + var_chaste_interface__cell__V;
        const double var_x263 = fabs(var_x262) < 1.0000000000287557e-6;
        const double var_x264 = -0.10000000000000001 * var_chaste_interface__cell__V;
        const double var_x265 = exp(-4.7130000000000001 + var_x264);
        const double var_x266 = 1.0 - var_x265;
        const double var_x267 = 0.32000000000000001 / var_x266;
        const double var_x268 = ((var_x263) ? (0.16 * var_x260 + 0.16 * var_x261) : (var_x267 - 0.032000000000000001 * var_x262 * var_x265 / pow(var_x266, 2)));
        const double var_x269 = exp(-0.090909090909090912 * var_chaste_interface__cell__V);
        const double var_x270 = 0.0072727272727272727 * var_x269;
        const double var_x271 = 3.200000000092018e-7 * var_x261;
        const double var_x272 = -((var_x263) ? (var_x271 - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-var_x271 - 3.200000000092018e-7 * var_x260)) : (var_x262 * var_x267)) - 0.080000000000000002 * var_x269;
        const double var_x273 = exp(0.24440000000000001 * var_chaste_interface__cell__V);
        const double var_x274 = exp(-0.043909999999999998 * var_chaste_interface__cell__V);
        const double var_x275 = -127140.0 * var_x273 - 3.4740000000000003e-5 * var_x274;
        const double var_x276 = exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V);
        const double var_x277 = 1.0 + var_x276;
        const double var_x278 = 1 / var_x277;
        const double var_x279 = var_x275 * var_x278;
        const double var_x280 = 37.780000000000001 + var_chaste_interface__cell__V;
        const double var_x281 = exp(-3.2000000000000002 + var_x264);
        const double var_x282 = 1.0 + var_x281;
        const double var_x283 = exp(-2.5349999999999999e-7 * var_chaste_interface__cell__V);
        const double var_x284 = var_x283 / var_x282;
        const double var_x285 = exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V);
        const double var_x286 = 1.0 + var_x285;
        const double var_x287 = exp(-0.01052 * var_chaste_interface__cell__V);
        const double var_x288 = var_x287 / var_x286;
        const double var_x289 = exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__cell__V);
        const double var_x290 = 1.0 + var_x289;
        const double var_x291 = exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__cell__V);
        const double var_x292 = var_x291 / var_x290;
        const double var_x293 = exp(0.59347181008902072 - 0.14836795252225518 * var_chaste_interface__cell__V);
        const double var_x294 = 1.0 + var_x293;
        const double var_x295 = 1 / (0.58999999999999997 + 0.80000000000000004 * var_x292);
        const double var_x296 = exp(-19.117647058823529 - 0.29411764705882354 * var_chaste_interface__cell__V);
        const double var_x297 = exp(2.4457142857142857 + 0.14285714285714285 * var_chaste_interface__cell__V);
        const double var_x298 = 1.0 + var_x297;
        const double var_x299 = 1 / var_x298;
        const double var_x300 = 0.24110000000000001 * exp(-0.19019454876899997 * pow((-1 + 0.10318426646304972 * var_chaste_interface__cell__V), 2));
        const double var_x301 = var_x297 / pow(var_x298, 2);
        const double var_x302 = 1 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca__Ca_ss);
        const double var_x303 = 10.0 * var_x229;
        const double var_x304 = 1 / (0.5 + var_x303 + var_x302);
        const double var_x305 = ((var_x14) ? (var_x171) : (var_x173));
        const double var_x306 = -var_x305;
        const double var_x307 = 0.014999999999999999 / pow((0.050000000000000003 + var_x306), 2);
        const double var_x308 = var_x304 * var_x307;
        const double var_x309 = -10.0 * var_x242 - 10.0 * var_x244;
        const double var_x310 = 0.01 * (0.14999999999999999 - var_chaste_interface__ICaL__fca + 0.55000000000000004 * var_x302 + 0.29999999999999999 / (1.0 - 20.0 * var_x305)) / pow((0.050000000000000003 + var_x229 + 0.10000000000000001 * var_x302), 2);
        const double var_x311 = pow((0.0030000000000000001 + var_chaste_interface__Ca__Ca_ss), (-2));
        const double var_x312 = 0.00075000000000000002 * var_x251 - 0.00075000000000000002 * var_x250;
        const double var_x313 = exp(-4.375 - 25.0 * var_x305);
        const double var_x314 = 1.0 + var_x313;
        const double var_x315 = 1 / var_x314;
        const double var_x316 = 1 / (125.0 + 300.0 * var_x315);
        const double var_x317 = 0.01 / pow((0.01 + var_x306), 2);
        const double var_x318 = var_x316 * var_x317;
        const double var_x319 = 0.083333333333333329 * var_x313 * (-var_chaste_interface__ICaL__fca2 + 1 / (1.0 - 100.0 * var_x305)) / (pow(var_x314, 2) * pow((0.41666666666666669 + var_x315), 2));
        const double var_x320 = 0.042299999999999997 * exp(-1.20074125971556 * pow((-1 + 0.053842757610673787 * var_chaste_interface__cell__V), 2));
        const double var_x321 = exp(-2.3729411764705883 - 0.23529411764705882 * var_chaste_interface__cell__V);
        const double var_x322 = 1.0 + var_x321;
        const double var_x323 = 1 / (-1.0 + exp(1.0000000000062181e-7));
        const double var_x324 = 1 / (-1.0 + exp(-1.0000000000062181e-7));
        const double var_x325 = exp(0.2364224 - 0.13600000000000001 * var_chaste_interface__cell__V);
        const double var_x326 = 1.0 - var_x325;
        const double var_x327 = 0.00059999999999999995 / var_x326;
        const double var_x328 = -1.7383999999999999 + var_chaste_interface__cell__V;
        const double var_x329 = var_x327 - 8.1600000000000005e-5 * var_x325 * var_x328 / pow(var_x326, 2);
        const double var_x330 = 38.360799999999998 + var_chaste_interface__cell__V;
        const double var_x331 = fabs(var_x330) < 6.5703022339436146e-7;
        const double var_x332 = 1 / (1.0 - exp(9.9999999999975114e-8));
        const double var_x333 = 1 / (1.0 - exp(-9.9999999999975114e-8));
        const double var_x334 = exp(5.8385137599999997 + 0.1522 * var_chaste_interface__cell__V);
        const double var_x335 = -1.0 + var_x334;
        const double var_x336 = 0.00029999999999999997 / var_x335;
        const double var_x337 = var_x336 - 4.566e-5 * var_x330 * var_x334 / pow(var_x335, 2);
        const double var_x338 = fabs(var_x328) < 7.352941176468758e-7;
        const double var_x339 = 1.9710906701830842e-10 * var_x324;
        const double var_x340 = var_x327 * var_x328;
        const double var_x341 = 4.4117647058812543e-10 * var_x333;
        const double var_x342 = var_x330 * var_x336;
        const double var_x343 = ((var_x331) ? (var_x340 - var_x339 + 760999.99999526795 * (38.360800657030218 + var_chaste_interface__cell__V) * (var_x339 + 1.9710906701830842e-10 * var_x323)) : ((var_x338) ? (var_x341 + var_x342 - 680000.00000016927 * (-1.7384007352941175 + var_chaste_interface__cell__V) * (-var_x341 - 4.4117647058812543e-10 * var_x332)) : (var_x340 + var_x342)));
        const double var_x344 = exp(0.4251012145748988 - 0.04048582995951417 * var_chaste_interface__cell__V);
        const double var_x345 = 1.0 + var_x344;
        const double var_x346 = 1 / var_x345;
        const double var_x347 = 1 / (-1.0 + exp(-9.999999999987797e-8));
        const double var_x348 = 1 / (-1.0 + exp(9.9999999999988984e-8));
        const double var_x349 = exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__cell__V);
        const double var_x350 = 1.0 - var_x349;
        const double var_x351 = 7.6100000000000007e-5 / var_x350;
        const double var_x352 = 44.600000000000001 + var_chaste_interface__cell__V;
        const double var_x353 = var_x351 - 0.00075871700000000012 * var_x349 * var_x352 / pow(var_x350, 2);
        const double var_x354 = -0.55000000000000004 + var_chaste_interface__cell__V;
        const double var_x355 = fabs(var_x354) < 7.8124999999948028e-7;
        const double var_x356 = 1 / (1.0 - exp(9.9999999875755032e-8));
        const double var_x357 = 1 / (1.0 - exp(-9.9999999875755032e-8));
        const double var_x358 = exp(-0.070400000000000004 + 0.128 * var_chaste_interface__cell__V);
        const double var_x359 = -1.0 + var_x358;
        const double var_x360 = 0.00036000000000000002 / var_x359;
        const double var_x361 = var_x360 - 4.6080000000000006e-5 * var_x354 * var_x358 / pow(var_x359, 2);
        const double var_x362 = fabs(var_x352) < 1.0030090258350555e-8;
        const double var_x363 = ((var_x355) ? (var_x353 + 0.0001799999999999001 * var_x347 + 0.00018000000000009992 * var_x348) : ((var_x362) ? (var_x361 + 3.8050000000000003e-5 * var_x356 + 3.8050000000000003e-5 * var_x357) : (var_x353 + var_x361)));
        const double var_x364 = 2.8124999999965681e-10 * var_x347;
        const double var_x365 = var_x351 * var_x352;
        const double var_x366 = 7.6328986866047728e-13 * var_x357;
        const double var_x367 = var_x354 * var_x360;
        const double var_x368 = ((var_x355) ? (var_x365 - var_x364 + 640000.00000042573 * (-0.54999921875000002 + var_chaste_interface__cell__V) * (var_x364 + 2.8124999999996902e-10 * var_x348)) : ((var_x362) ? (var_x366 + var_x367 - 49850000.061936118 * (44.599999989969909 + var_chaste_interface__cell__V) * (-var_x366 - 7.6328986866047728e-13 * var_x356)) : (var_x365 + var_x367)));
        const double var_x369 = var_x344 * var_x368 / pow(var_x345, 2);
        const double var_x370 = 0.040000000000000001 * var_chaste_interface__cell__V;
        const double var_x371 = exp(-1.6000000000000001 + var_x370);
        const double var_x372 = 1.0 + var_x371;
        const double var_x373 = var_x371 / var_x372;
        const double var_x374 = 1.0 - var_chaste_interface__Ito__ydv;
        const double var_x375 = exp(-3.6000000000000001 - var_x370);
        const double var_x376 = 1.0 + var_x375;
        const double var_x377 = var_x375 / var_x376;
        const double var_x378 = var_chaste_interface__Ito__ydv;
        const double var_x379 = 0.040000000000000001 * var_chaste_interface__Ito__ydv2;
        const double var_x380 = 0.20000000000000001 * var_chaste_interface__cell__V;
        const double var_x381 = exp(5.0 + var_x380);
        const double var_x382 = 1.0 + var_x381;
        const double var_x383 = pow(var_x381, 2) / pow(var_x382, 2);
        const double var_x384 = var_x381 / var_x382;
        const double var_x385 = exp(12.0 + var_x380);
        const double var_x386 = 1.0 + var_x385;
        const double var_x387 = 0.02 * var_chaste_interface__Ito__zdv;
        const double var_x388 = exp(12.6 + var_x380);
        const double var_x389 = 1.0 + var_x388;
        const double var_x390 = exp(14.918032786885247 + 0.16393442622950821 * var_chaste_interface__cell__V);
        const double var_x391 = 0.0025000000000000005 * var_x224;
        const double var_x392 = var_x5 * NV_Ith_S(mParameters, 4);
        const double var_x393 = var_x8 * NV_Ith_S(mParameters, 4);
        const double var_x394 = var_x167 - 5.1546799999759483e-8 * var_x393;
        const double var_x395 = pow(var_chaste_interface__ICaL__d, (-2 * var_chaste_interface__ICaL__dp));
        const double var_x396 = pow(var_chaste_interface__ICaL__f2, (-2));
        const double var_x397 = pow(var_chaste_interface__ICaL__fca, (-2));
        const double var_x398 = pow(var_chaste_interface__ICaL__fca2, (-2));
        const double var_x399 = var_x395 * var_x396 * var_x397 * var_x398;
        const double var_x400 = pow(var_chaste_interface__ICaL__f, (-2));
        const double var_x401 = 7.1354903911398109e-12 * var_x400;
        const double var_x402 = var_x399 * var_x401 / pow(var_x394, 3);
        const double var_x403 = -1 + 0.066666666666666666 * var_chaste_interface__cell__V;
        const double var_x404 = pow(var_x17, (-2));
        const double var_x405 = pow(NV_Ith_S(mParameters, 4), (-2));
        const double var_x406 = var_x399 * var_x400;
        const double var_x407 = var_x404 * var_x405 * var_x406;
        const double var_x408 = pow(var_x403, (-2));
        const double var_x409 = var_x16 * var_x408;
        const double var_x410 = 3.1882311526515621e-12 * var_x409;
        const double var_x411 = var_x26 * var_x405 * var_x406 / pow(var_x17, 3);
        const double var_x412 = pow(var_chaste_interface__Ca__Ca_jsr, 1.8999999999999999);
        const double var_x413 = 0.0028 + var_chaste_interface__Ca__Ca_ss;
        const double var_x414 = 1 / var_x413;
        const double var_x415 = pow((var_x414 * var_chaste_interface__Ca__Ca_ss), 1.8999999999999999);
        const double var_x416 = 1 / (var_x412 + 1644.6531773416521 * var_x415);
        const double var_x417 = pow(var_x394, (-2));
        const double var_x418 = var_x399 * var_x417;
        const double var_x419 = var_x26 * var_x404 * var_x405 * var_x408;
        const double var_x420 = var_x406 * var_x419;
        const double var_x421 = 1.0 + ((var_x14) ? (var_x401 * var_x418) : (2.1291277605263905e-11 * var_x420));
        const double var_x422 = 0.33333333333333331 * var_x412 * var_x416 / pow(var_x421, 2);
        const double var_x423 = 1.4270980782279622e-11 * var_x418;
        const double var_x424 = var_x400 * var_x423;
        const double var_x425 = 4.258255521052781e-11 * var_x420;
        const double var_x426 = pow(var_chaste_interface__ICaL__f, (-3));
        const double var_x427 = 4.258255521052781e-11 * var_x419;
        const double var_x428 = var_x395 * var_x396 * var_x400;
        const double var_x429 = 1.4270980782279622e-11 * var_x417 * var_x428;
        const double var_x430 = var_x398 / pow(var_chaste_interface__ICaL__fca, 3);
        const double var_x431 = var_x427 * var_x428;
        const double var_x432 = var_x397 / pow(var_chaste_interface__ICaL__fca2, 3);
        const double var_x433 = var_x395 * var_x397 * var_x398 * var_x400 / pow(var_chaste_interface__ICaL__f2, 3);
        const double var_x434 = 1 / var_x421;
        const double var_x435 = var_x434 / pow((var_x415 + 0.00060803092942449902 * var_x412), 2);
        const double var_x436 = var_x212 * NV_Ith_S(mParameters, 4);
        const double var_x437 = exp(3.3333333333333335 + 66.666666666666671 * var_x305);
        const double var_x438 = 1.0 + var_x437;
        const double var_x439 = var_x437 / pow(var_x438, 2);
        const double var_x440 = var_x28 * var_x439;
        const double var_x441 = 1 / var_x438;
        const double var_x442 = exp(-16.0 + 80.0 * var_x441 + 40000.0 * var_chaste_interface__Ca__Ca_ss);
        const double var_x443 = 1.0 + var_x442;
        const double var_x444 = exp(-15.0 + 5000.0 * var_chaste_interface__Ca__Ca_ss + 15.0 * var_x441);
        const double var_x445 = 1.0 + var_x444;
        const double var_x446 = 1 / var_x445;
        const double var_x447 = 350.0 - var_x303;
        const double var_x448 = var_x446 * var_x447;
        const double var_x449 = 1 / (3.0 + var_x303 + var_x448);
        const double var_x450 = var_x442 * var_x449 / pow(var_x443, 2);
        const double var_x451 = 5333.333333333333 * var_x450;
        const double var_x452 = (-var_chaste_interface__Irel__ri + 1 / var_x443) / pow((0.29999999999999999 + var_x229 + 0.10000000000000001 * var_x448), 2);
        const double var_x453 = var_x444 * var_x447 / pow(var_x445, 2);
        const double var_x454 = 10.0 * var_x452 * var_x453;
        const double var_x455 = var_x439 * var_x451;
        const double var_x456 = var_x439 * var_x454;
        const double var_x457 = 0.01 * var_x452;
        const double var_x458 = var_x215 * var_x439;
        const double var_x459 = 3.998848287353967e-7 * var_x63;
        const double var_x460 = 1.827729786302835e-16 * var_x150;
        const double var_x461 = log(100.0 * var_x210);
        const double var_x462 = var_x158 + var_x461;
        const double var_x463 = pow(var_x462, 4);
        const double var_x464 = 2.8839711417381356e-9 * pow(var_x462, 7) / pow((1 + 0.008558014922736952 * var_x463), 2);
        const double var_x465 = 20.048989239405216 * pow(var_x462, 3) / (59494197.640692554 + 509152.23122530844 * var_x463);
        const double var_x466 = var_x157 * var_x464 - var_x157 * var_x465;
        const double var_x467 = var_x210 * var_x464 - var_x210 * var_x465;
        const double var_x468 = -6.1520742882368733e-5 - 3.6912445729421236e-5 * var_x73;
        const double var_x469 = var_x468 * var_x75;
        const double var_x470 = var_x469 * var_chaste_interface__IKs__xs1;
        const double var_x471 = 2.6474312514413617e-5 * var_x84;
        const double var_x472 = 2.595520834746433e-5 * var_x136;
        const double var_x473 = var_x153 * var_x470;
        const double var_x474 = var_x67 + 26.712338705500134 * var_x461;
        const double var_x475 = 0.00018900582374463672 / (87.825100000000006 + var_x474);
        const double var_x476 = 2.4504050574883893e-8 * var_x474 / pow((1 + 0.30415380916731244 * var_x461 + 0.30415380916731244 * var_x66), 2);
        const double var_x477 = var_x476 * var_x65 - var_x475 * var_x65;
        const double var_x478 = var_x210 * var_x476 - var_x210 * var_x475;
        const double var_x479 = exp(2.6000000000000001 + 74871.767015777295 * var_x167 - 0.0038593999999908609 * var_x393);
        const double var_x480 = 1.0 + var_x479;
        const double var_x481 = var_x479 / pow(var_x480, 2);
        const double var_x482 = 2889.6009762000663 * var_x19;
        const double var_x483 = var_x17 * var_x482;
        const double var_x484 = 216.34953105810169 * var_x23;
        const double var_x485 = exp(2.6000000000000001 + var_x13 * var_x483);
        const double var_x486 = 1.0 + var_x485;
        const double var_x487 = var_x485 / pow(var_x486, 2);
        const double var_x488 = NV_Ith_S(mParameters, 0) * var_chaste_interface__Irel__ri * var_chaste_interface__Irel__ro;
        const double var_x489 = var_x488 * ((var_x14) ? (-var_x481 * (1444.8004881000331 * var_x392 + 1444.8004881000331 * var_x393)) : (-var_x487 * (var_x483 + var_x22 * var_x484 - var_x27 * var_x484)));
        const double var_x490 = -var_chaste_interface__Ca__Ca_jsr + var_chaste_interface__Ca__Ca_ss;
        const double var_x491 = 0.80000000000000004 + var_chaste_interface__Ca__Ca_jsr;
        const double var_x492 = pow(var_x491, (-2));
        const double var_x493 = 1 / (1.0 + 8.0 * var_x492);
        const double var_x494 = var_x493;
        const double var_x495 = var_x490 * var_x494;
        const double var_x496 = ((var_x14) ? (1 / var_x480) : (1 / var_x486));
        const double var_x497 = var_x496 * NV_Ith_S(mParameters, 0);
        const double var_x498 = var_x497 * var_chaste_interface__Irel__ri;
        const double var_x499 = var_x497 * var_chaste_interface__Irel__ro;
        const double var_x500 = var_x488 * var_x496;
        const double var_x501 = var_x500 * (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_jsr);
        const double var_x502 = var_x488 * ((var_x14) ? (-var_x481 * (-0.0038593999999908609 * var_x436 + var_x214 * (-1123076.4052366593 + 74871.767015777295 * var_chaste_interface__cell__V))) : (-var_x23 * var_x482 * var_x487));
        const double var_x503 = 0.0043750000000000004 * var_chaste_interface__Ca__Ca_i;
        const double var_x504 = var_x236 * var_x503;
        const double var_x505 = var_x231 * var_x503;
        const double var_x506 = 0.23999999999999996 * var_chaste_interface__Ca__Ca_jsr - 0.23999999999999996 * var_chaste_interface__Ca__Ca_ss;
        const double var_x507 = 0.0086999999999999994 + var_chaste_interface__Ca__Ca_ss;
        const double var_x508 = 0.00087000000000000001 + var_chaste_interface__Ca__Ca_ss;
        const double var_x509 = 1.0 + 0.0097788000000000007 / pow(var_x507, 2) + 4.0890000000000003e-5 / pow(var_x508, 2);
        const double var_x510 = 1 / var_x509;
        const double var_x511 = var_x510;
        const double var_x512 = 0.0010458526290002684 * var_x510;
        const double var_x513 = var_x506 * var_x511;
        const double var_x514 = 0.23999999999999996 * var_x500;
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (-0.00022499999999999999 + var_x77 - var_x101 - var_x28 - var_x45 - var_x62 - var_x80 + 0.10468673984798647 * var_x131 + 0.027943602786489299 * var_x133 - var_x120 - 0.61875000000000002 * var_x128 - 0.0027599999999999999 * var_x48 - 0.0065699975556189009 * var_x139 - 0.0033333333333333335 * var_x140 - 0.4389381125701739 * var_x97 - 0.00046153846153846147 * var_x69 - var_x135 * var_x137 - var_x64 * var_chaste_interface__INal__hL - var_x85 * var_chaste_interface__IKr__xr);
        IJth(rJacobian, 1, 0) = var_x219 * (6.1520742882368733e-5 * var_x120 + 4.0419113035702141e-7 * var_x139 - 3.0760371441184366e-5 * var_x45);
        IJth(rJacobian, 2, 0) = (1.0 - var_chaste_interface__INa__H) * ((var_x254) ? (0) : (-0.019852941176470591 * var_x255)) - ((var_x254) ? (0.693000693000693 * var_x256 / pow(var_x257, 2)) : (0.28123999999999999 * var_x258 + 108500.0 * var_x259)) * var_chaste_interface__INa__H;
        IJth(rJacobian, 3, 0) = var_x268 * (1.0 - var_chaste_interface__INa__m) + var_x270 * var_chaste_interface__INa__m;
        IJth(rJacobian, 4, 0) = (1.0 - var_chaste_interface__INa__J) * ((var_x254) ? (0) : (var_x279 + var_x278 * var_x280 * (1.5254334000000001e-6 * var_x274 - 31073.016 * var_x273) - 0.311 * var_x275 * var_x276 * var_x280 / pow(var_x277, 2))) - ((var_x254) ? (-7.6049999999999996e-8 * var_x284 + 0.029999999999999999 * var_x281 * var_x283 / pow(var_x282, 2)) : (-0.001275024 * var_x288 + 0.016701360000000002 * var_x285 * var_x287 / pow(var_x286, 2))) * var_chaste_interface__INa__J;
        IJth(rJacobian, 5, 0) = 1.5624999999999998 * (-var_chaste_interface__ICaL__d + 1 / var_x294) * (-0.041599999999999998 * var_x292 + 0.10560000000000001 * var_x289 * var_x291 / pow(var_x290, 2)) / pow((0.73749999999999993 + var_x292), 2) + 0.14836795252225518 * var_x293 * var_x295 / pow(var_x294, 2);
        IJth(rJacobian, 6, 0) = -0.23529411764705882 * var_x296 / pow((1.0 + var_x296), 2);
        IJth(rJacobian, 7, 0) = -0.099999999999999992 * var_x301 * (0.052900000000000003 + var_x300) + var_x300 * (0.039250169999999994 - 0.0040499999999999998 * var_chaste_interface__cell__V) * (0.29999999999999999 - var_chaste_interface__ICaL__f + 0.69999999999999996 * var_x299);
        IJth(rJacobian, 8, 0) = var_x28 * var_x308;
        IJth(rJacobian, 9, 0) = var_x28 * var_x318 - var_x28 * var_x319;
        IJth(rJacobian, 10, 0) = -0.11 * var_x301 * (0.0054000000000000003 + var_x320) + var_x320 * (0.12930244120000001 - 0.0069619999999999994 * var_chaste_interface__cell__V) * (0.23000000000000001 - var_chaste_interface__ICaL__f2 + 0.77000000000000002 * var_x299);
        IJth(rJacobian, 11, 0) = (-var_chaste_interface__IKr__xr + 1 / var_x322) * ((var_x331) ? (var_x329 + 0.00014999999999999999 * var_x323 + 0.00014999999999999999 * var_x324) : ((var_x338) ? (var_x337 + 0.00029999999999999997 * var_x332 + 0.00029999999999999997 * var_x333) : (var_x329 + var_x337))) + 0.23529411764705882 * var_x321 * var_x343 / pow(var_x322, 2);
        IJth(rJacobian, 12, 0) = 0.04048582995951417 * var_x369 + var_x363 * (-var_chaste_interface__IKs__xs1 + var_x346);
        IJth(rJacobian, 13, 0) = 0.020242914979757085 * var_x369 + var_x363 * (0.5 * var_x346 - 0.5 * var_chaste_interface__IKs__xs2);
        IJth(rJacobian, 14, 0) = var_x373 * var_x374 + var_x377 * var_x378 - var_x374 * pow(var_x371, 2) / pow(var_x372, 2) - var_x378 * pow(var_x375, 2) / pow(var_x376, 2);
        IJth(rJacobian, 15, 0) = var_x379 * var_x383 - var_x379 * var_x384 - 0.0060000000000000001 * var_x385 * (1.0 - var_chaste_interface__Ito__ydv2) / pow(var_x386, 2);
        IJth(rJacobian, 16, 0) = var_x383 * var_x387 - var_x384 * var_x387 - 0.00077999999999999999 * var_x388 * (1.0 - var_chaste_interface__Ito__zdv) / pow(var_x389, 2);
        IJth(rJacobian, 18, 0) = var_x268 * (1.0 - var_chaste_interface__INal__mL) + var_x270 * var_chaste_interface__INal__mL;
        IJth(rJacobian, 19, 0) = -0.00027322404371584699 * var_x390 / pow((1.0 + var_x390), 2);
        IJth(rJacobian, 21, 0) = -var_x422 * ((var_x14) ? (var_x402 * (-0.038593999999908611 * var_x392 - 0.038593999999908611 * var_x393)) : (var_x18 * var_x407 * var_x410 - var_x410 * var_x411 * var_chaste_interface__Ca__Ca_ss - 2.8388370140351874e-12 * var_x26 * var_x407 / pow(var_x403, 3)));
        IJth(rJacobian, 22, 0) = var_x440 * var_x451 - var_x440 * var_x454;
        IJth(rJacobian, 23, 0) = -1.2125733910710643e-6 * var_x139 - 0.0001845622286471062 * var_x120 - 6.1520742882368733e-5 * var_x80 - 0.00011419787897539696 * var_x128 - var_x459 * var_chaste_interface__INal__hL;
        IJth(rJacobian, 24, 0) = var_x470 + 7.6131919316931303e-5 * var_x128 + 6.4404060053814002e-6 * var_x131 + 1.7191112022346505e-6 * var_x133 - 2.7003798764701889e-5 * var_x97 - 2.0506914294122911e-7 * var_x140 - 1.6979725035533768e-7 * var_x48 - 6.1520742882368733e-5 * var_x101 - 2.8394189022631718e-8 * var_x69 - var_x135 * var_x472 - var_x471 * var_chaste_interface__IKr__xr;
        IJth(rJacobian, 25, 0) = 1.3842167148532964e-8 + 6.1520742882368733e-5 * var_x62;
        IJth(rJacobian, 26, 0) = var_x489 * var_x495;
        IJth(rJacobian, 28, 0) = var_x511 * (-0.0010458526290002684 * var_x28 + var_x489 * var_x506);
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x142 + 0.057500000000000002 * var_x146 - 0.057500000000000002 * var_x144 - 1.388888888888889e-8 * var_x152 - 5.4447296618926212e-7 * var_x156 + var_x113 * var_x147 - var_x148 * var_x151);
        IJth(rJacobian, 1, 1) = var_x219 * (-0.14705882352941174 + var_x237 - var_x220 - var_x234 + 8.544547622551213e-13 * var_x152 + 1.768721357868101e-6 * var_x146 - 9.2281114323553099e-5 * var_x239 - 3.0760371441184366e-5 * var_x142 + var_x148 * var_x238) + (0.00023800000000000004 / pow(var_x216, 3) + 7.0000000000000007e-5 / pow(var_x143, 3)) * (0.14705882352941174 * var_chaste_interface__Ca__Ca_ss + 2.3676470588235295e-5 * var_chaste_interface__Ca__Ca_nsr - 3.0760371441184366e-5 * ((var_x36) ? (-var_x240 + 374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (var_x240 + 3.8499135947999997e-9 * var_x31)) : (var_x43 * var_chaste_interface__cell__V)) - 0.14705882352941174 * var_chaste_interface__Ca__Ca_i - var_x220 * var_chaste_interface__Ca__Ca_i - var_x234 * var_chaste_interface__Ca__Ca_i + 6.1520742882368733e-5 * var_x119 * var_x138) / pow(var_x217, 2);
        IJth(rJacobian, 23, 1) = 0.00027684334297065928 * var_x239 - 2.563364286765364e-12 * var_x152 - var_x148 * var_x460;
        IJth(rJacobian, 24, 1) = -3.3496381359330236e-11 * var_x156;
        IJth(rJacobian, 27, 1) = -var_x504 + 0.0043750000000000004 * var_x233;
        IJth(rJacobian, 28, 1) = 5.0 * var_x510;
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x160);
        IJth(rJacobian, 2, 2) = -((var_x254) ? (0) : (0.13500000000000001 * var_x255)) - ((var_x254) ? (7.6923076923076916 / var_x257) : (310000.0 * var_x259 + 3.5600000000000001 * var_x258));
        IJth(rJacobian, 23, 2) = -6.1520742882368733e-5 * var_x160;
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x162);
        IJth(rJacobian, 3, 3) = var_x272;
        IJth(rJacobian, 23, 3) = -0.0001845622286471062 * var_x162;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x163);
        IJth(rJacobian, 4, 4) = -((var_x254) ? (0) : (var_x279 * var_x280)) - ((var_x254) ? (0.29999999999999999 * var_x284) : (0.1212 * var_x288));
        IJth(rJacobian, 23, 4) = -6.1520742882368733e-5 * var_x163;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x174);
        IJth(rJacobian, 5, 5) = -var_x295;
        IJth(rJacobian, 8, 5) = var_x174 * var_x308;
        IJth(rJacobian, 9, 5) = var_x174 * var_x318 - var_x174 * var_x319;
        IJth(rJacobian, 21, 5) = -var_x422 * ((var_x14) ? (-var_x172 * var_x424) : (-var_x172 * var_x425));
        IJth(rJacobian, 22, 5) = var_x174 * var_x455 - var_x174 * var_x456;
        IJth(rJacobian, 28, 5) = -var_x174 * var_x512;
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x176);
        IJth(rJacobian, 6, 6) = -0.10000000000000001;
        IJth(rJacobian, 8, 6) = var_x176 * var_x308;
        IJth(rJacobian, 9, 6) = var_x176 * var_x318 - var_x176 * var_x319;
        IJth(rJacobian, 21, 6) = -var_x422 * ((var_x14) ? (-var_x175 * var_x424) : (-var_x175 * var_x425));
        IJth(rJacobian, 22, 6) = var_x176 * var_x455 - var_x176 * var_x456;
        IJth(rJacobian, 28, 6) = -var_x176 * var_x512;
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x179);
        IJth(rJacobian, 7, 7) = -0.052900000000000003 - var_x300;
        IJth(rJacobian, 8, 7) = var_x179 * var_x308;
        IJth(rJacobian, 9, 7) = var_x179 * var_x318 - var_x179 * var_x319;
        IJth(rJacobian, 21, 7) = -var_x422 * ((var_x14) ? (-var_x423 * var_x426) : (-var_x399 * var_x426 * var_x427));
        IJth(rJacobian, 22, 7) = var_x179 * var_x455 - var_x179 * var_x456;
        IJth(rJacobian, 28, 7) = -var_x179 * var_x512;
        IJth(rJacobian, 0, 8) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x180);
        IJth(rJacobian, 8, 8) = var_x304 * (-1 + var_x180 * var_x307);
        IJth(rJacobian, 9, 8) = var_x180 * var_x318 - var_x180 * var_x319;
        IJth(rJacobian, 21, 8) = -var_x422 * ((var_x14) ? (-var_x429 * var_x430) : (-var_x430 * var_x431));
        IJth(rJacobian, 22, 8) = var_x180 * var_x455 - var_x180 * var_x456;
        IJth(rJacobian, 28, 8) = -var_x180 * var_x512;
        IJth(rJacobian, 0, 9) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x184);
        IJth(rJacobian, 8, 9) = var_x184 * var_x308;
        IJth(rJacobian, 9, 9) = var_x316 * (-1 + var_x184 * var_x317) - var_x184 * var_x319;
        IJth(rJacobian, 21, 9) = -var_x422 * ((var_x14) ? (-var_x429 * var_x432) : (-var_x431 * var_x432));
        IJth(rJacobian, 22, 9) = var_x184 * var_x455 - var_x184 * var_x456;
        IJth(rJacobian, 28, 9) = -var_x184 * var_x512;
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x185);
        IJth(rJacobian, 8, 10) = var_x185 * var_x308;
        IJth(rJacobian, 9, 10) = var_x185 * var_x318 - var_x185 * var_x319;
        IJth(rJacobian, 10, 10) = -0.0054000000000000003 - var_x320;
        IJth(rJacobian, 21, 10) = -var_x422 * ((var_x14) ? (-1.4270980782279622e-11 * var_x417 * var_x433) : (-var_x427 * var_x433));
        IJth(rJacobian, 22, 10) = var_x185 * var_x455 - var_x185 * var_x456;
        IJth(rJacobian, 28, 10) = -var_x185 * var_x512;
        IJth(rJacobian, 0, 11) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x68 * var_x85);
        IJth(rJacobian, 11, 11) = -var_x343;
        IJth(rJacobian, 24, 11) = -var_x471 * var_x68;
        IJth(rJacobian, 0, 12) = mSetVoltageDerivativeToZero ? 0.0 : (var_x154 * var_x76);
        IJth(rJacobian, 12, 12) = -var_x368;
        IJth(rJacobian, 24, 12) = var_x154 * var_x469;
        IJth(rJacobian, 0, 13) = mSetVoltageDerivativeToZero ? 0.0 : (var_x186 * var_x74);
        IJth(rJacobian, 13, 13) = -0.5 * var_x368;
        IJth(rJacobian, 24, 13) = var_x186 * var_x468;
        IJth(rJacobian, 0, 14) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x188);
        IJth(rJacobian, 14, 14) = -25.0 * var_x373 - 25.0 * var_x377;
        IJth(rJacobian, 24, 14) = -0.0001845622286471062 * var_x188;
        IJth(rJacobian, 0, 15) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x189);
        IJth(rJacobian, 15, 15) = -0.029999999999999999 / var_x386 - 0.20000000000000001 * var_x384;
        IJth(rJacobian, 24, 15) = -6.1520742882368733e-5 * var_x189;
        IJth(rJacobian, 0, 16) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x190);
        IJth(rJacobian, 16, 16) = -0.10000000000000001 * var_x384 - 0.0038999999999999998 / var_x389;
        IJth(rJacobian, 24, 16) = -6.1520742882368733e-5 * var_x190;
        IJth(rJacobian, 0, 17) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x194);
        IJth(rJacobian, 17, 17) = -1.0;
        IJth(rJacobian, 25, 17) = 6.1520742882368733e-5 * var_x194;
        IJth(rJacobian, 0, 18) = mSetVoltageDerivativeToZero ? 0.0 : (-0.0195 * var_x195);
        IJth(rJacobian, 18, 18) = var_x272;
        IJth(rJacobian, 23, 18) = -1.1996544862061903e-6 * var_x195;
        IJth(rJacobian, 0, 19) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x159 * var_x64);
        IJth(rJacobian, 19, 19) = -0.0016666666666666668;
        IJth(rJacobian, 23, 19) = -var_x159 * var_x459;
        IJth(rJacobian, 1, 20) = var_x219 * (-var_x237 * var_x247 - var_x245 * var_x246);
        IJth(rJacobian, 8, 20) = var_x309 * var_x310;
        IJth(rJacobian, 20, 20) = -0.00068000000000000005 - var_x226 * var_x391 + var_x221 * var_x241 * var_x391;
        IJth(rJacobian, 22, 20) = var_x457 * (var_x309 - var_x309 * var_x446);
        IJth(rJacobian, 27, 20) = var_x245 * var_x505 + var_x247 * var_x504;
        IJth(rJacobian, 21, 21) = -0.33333333333333331;
        IJth(rJacobian, 26, 21) = var_x495 * var_x498;
        IJth(rJacobian, 28, 21) = var_x498 * var_x513;
        IJth(rJacobian, 22, 22) = -var_x449;
        IJth(rJacobian, 26, 22) = var_x495 * var_x499;
        IJth(rJacobian, 28, 22) = var_x499 * var_x513;
        IJth(rJacobian, 0, 23) = mSetVoltageDerivativeToZero ? 0.0 : (0.48963716847181743 * var_x197 - 3.0 * var_x202 - 26.712338705500134 * var_x198 - 0.012375000000000001 * var_x199 - 0.17363020158575085 * var_x196 - var_x151 * var_x201);
        IJth(rJacobian, 1, 23) = var_x219 * (0.0001845622286471062 * var_x202 + var_x201 * var_x238);
        IJth(rJacobian, 23, 23) = var_x466 - 0.0016433629212878199 * var_x198 - 1.068185898837083e-5 * var_x196 - 0.00055368668594131857 * var_x202 - 2.283957579507939e-6 * var_x199 - var_x201 * var_x460;
        IJth(rJacobian, 24, 23) = 1.5226383863386261e-6 * var_x199 + 0.48963716847181743 * var_x473;
        IJth(rJacobian, 25, 23) = var_x466;
        IJth(rJacobian, 0, 24) = mSetVoltageDerivativeToZero ? 0.0 : (26.712338705500134 * var_x197 + 2.7964276527939922 * var_x209 - 26.712338705500134 * var_x206 - 0.073726054827180365 * var_x203 - 11.725063533727431 * var_x204 - 11.495160327183756 * var_x205 - var_x137 * var_x208);
        IJth(rJacobian, 24, 24) = var_x477 + 26.712338705500134 * var_x473 + 0.00017203830661668509 * var_x209 - 0.00070719080288027735 * var_x205 - 4.535681662754383e-6 * var_x203 - 0.0016433629212878199 * var_x206 - 0.00072133461893788295 * var_x204 - var_x208 * var_x472;
        IJth(rJacobian, 25, 24) = var_x477;
        IJth(rJacobian, 0, 25) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x211 + 0.00601027620873753 * var_x210);
        IJth(rJacobian, 23, 25) = var_x467;
        IJth(rJacobian, 24, 25) = var_x478;
        IJth(rJacobian, 25, 25) = var_x467 + var_x478 + 6.1520742882368733e-5 * var_x211 - 3.6975665728975948e-7 * var_x210;
        IJth(rJacobian, 21, 26) = -2.3414435371998602e-7 * var_x435 * pow(var_chaste_interface__Ca__Ca_jsr, 2.7999999999999998) + 0.6333333333333333 * var_x416 * var_x434 * pow(var_chaste_interface__Ca__Ca_jsr, 0.89999999999999991);
        IJth(rJacobian, 26, 26) = var_x494 * (-0.0083333333333333332 - var_x500) + 0.25 * (-var_x501 + 0.0083333333333333332 * var_chaste_interface__Ca__Ca_nsr - 0.0083333333333333332 * var_chaste_interface__Ca__Ca_jsr) / (pow(var_x491, 3) * pow((0.125 + var_x492), 2));
        IJth(rJacobian, 27, 26) = 0.00072463768115942019;
        IJth(rJacobian, 28, 26) = var_x510 * var_x514;
        IJth(rJacobian, 1, 27) = 2.3676470588235295e-5 * var_x218;
        IJth(rJacobian, 26, 27) = 0.0083333333333333332 * var_x493;
        IJth(rJacobian, 27, 27) = -0.0010163043478260869;
        IJth(rJacobian, 0, 28) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x215);
        IJth(rJacobian, 1, 28) = var_x219 * (0.14705882352941174 - var_x237 * var_x253 - var_x246 * var_x252);
        IJth(rJacobian, 8, 28) = var_x304 * (-0.0016500000000000002 * var_x311 + var_x215 * var_x307) + var_x310 * (var_x312 + 0.0030000000000000001 * var_x311);
        IJth(rJacobian, 9, 28) = var_x215 * var_x318 - var_x215 * var_x319;
        IJth(rJacobian, 17, 28) = 0.1502 * var_x248 / pow((1.0 + 0.1502 * var_x222), 2);
        IJth(rJacobian, 20, 28) = 3.7500000000000005e-6 * var_x226 * var_x249 + 1.8750000000000003e-7 * var_x248 * pow(var_x221, 2) / pow(var_x223, 3);
        IJth(rJacobian, 21, 28) = -var_x422 * ((var_x14) ? (var_x402 * (1.0309359999951897e-7 * var_x436 - 2 * var_x164 * var_x214)) : (-4.258255521052781e-11 * var_x409 * var_x411)) - 0.00020267697647483301 * var_x222 * var_x412 * var_x413 * var_x415 * var_x435 * (1.8999999999999999 * var_x414 - 1.8999999999999999 * var_chaste_interface__Ca__Ca_ss / pow(var_x413, 2));
        IJth(rJacobian, 22, 28) = var_x457 * (var_x312 + var_x453 * (5000.0 - 1000.0 * var_x458) - var_x312 * var_x446) - var_x450 * (40000.0 - 5333.333333333333 * var_x458);
        IJth(rJacobian, 26, 28) = var_x494 * (var_x500 + var_x490 * var_x502);
        IJth(rJacobian, 27, 28) = var_x252 * var_x505 + var_x253 * var_x504;
        IJth(rJacobian, 28, 28) = var_x511 * (-5.0 - var_x514 - 0.0010458526290002684 * var_x215 + var_x502 * var_x506) + (0.019557600000000001 / pow(var_x507, 3) + 8.1780000000000006e-5 / pow(var_x508, 3)) * (0.23999999999999996 * var_x501 + 5.0 * var_chaste_interface__Ca__Ca_i - 5.0 * var_chaste_interface__Ca__Ca_ss - 0.0010458526290002684 * var_x305) / pow(var_x509, 2);
    }

    N_Vector Cellbenson_epicardial_2008FromCellMLCvode::ComputeDerivedQuantities(double var_chaste_interface__Environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 0.00012131666
        double var_chaste_interface__INa__H = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.987317750543
        double var_chaste_interface__INa__m = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INa__J = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.991924983076
        double var_chaste_interface__ICaL__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 1.64013e-06
        double var_chaste_interface__ICaL__dp = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__IKr__xr = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 7.24074e-06
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.019883138161
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.019890650554
        double var_chaste_interface__Ito__ydv = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.013970786703
        double var_chaste_interface__Ito__ydv2 = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.99996472752
        double var_chaste_interface__Ito__zdv = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.829206149767
        double var_chaste_interface__Irel__ro = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Irel__ri = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.862666650318
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 23);
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 24);
        // Units: mM; Initial value: 135.469546216758
        double var_chaste_interface__Ca__Ca_jsr = NV_Ith_S(rY, 26);
        // Units: mM; Initial value: 1.737580994071
        double var_chaste_interface__Ca__Ca_ss = NV_Ith_S(rY, 28);
        // Units: mM; Initial value: 0.00012271265
        
        // Mathematics
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_Environment__tissue = 0; // dimensionless
        const double var_IKr__gkr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 2)) * NV_Ith_S(mParameters, 7); // mS_per_uF
        const double var_IKs__gks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * NV_Ith_S(mParameters, 8); // mS_per_uF
        const double var_INa__GNa = ((var_Environment__tissue == 0) ? (NV_Ith_S(mParameters, 5)) : (4.0 * NV_Ith_S(mParameters, 5))); // mS_per_uF
        const double var_INa__gNa = pow(var_chaste_interface__INa__m, 3) * var_INa__GNa * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // mS_per_uF
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__allo = 1 / (1.0 + pow(var_INaCa__KmCa, 2) / pow(var_INaCa__ca_i_NaCa, 2)); // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INaCa__denom2 = pow(var_INaCa__KmNao, 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_INaCa__ca_i_NaCa / var_INaCa__KmCai) * NV_Ith_S(mParameters, 1); // mM4
        const double var_INaCa__denom3 = pow(NV_Ith_S(mParameters, 3), 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 1) + pow(NV_Ith_S(mParameters, 3), 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * NV_Ith_S(mParameters, 4) / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * NV_Ith_S(mParameters, 4) / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * NV_Ith_S(mParameters, 4) / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * NV_Ith_S(mParameters, 1) + var_chaste_interface__Ca__Ca_ss * exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)) * NV_Ith_S(mParameters, 4) / (-1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICaL__ICaL = ((var_Environment__tissue == 0) ? (pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca) : (var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca)); // uA_per_uF
        const double var_ICaL__ICaL_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaL; // uA_per_cm2
        const double var_IKr__r = 1 / (1.0 + exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaCa__denom1 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__num = pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 1) * exp(var_Environment__FonRT * var_INaCa__eta * var_chaste_interface__cell__V) - pow(NV_Ith_S(mParameters, 3), 3) * var_INaCa__ca_i_NaCa * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__INaCa = NV_Ith_S(mParameters, 9) * var_INaCa__allo * var_INaCa__num / ((var_INaCa__denom2 + var_INaCa__denom3) * var_INaCa__denom1); // uA_per_uF
        const double var_INaCa__INaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa__INaCa; // uA_per_cm2
        const double var_Irel__vg = ((var_Environment__tissue == 0) ? (1 / (1.0 + exp(2.6000000000000001 + 0.20000000000000001 * var_ICaL__ibarca))) : (1.0)); // dimensionless
        const double var_Irel__Grel = NV_Ith_S(mParameters, 0) * var_Irel__vg; // per_ms
        const double var_Irel__irelcicr = (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_jsr) * var_Irel__Grel * var_chaste_interface__Irel__ri * var_chaste_interface__Irel__ro; // mM_per_ms
        const double var_Ito__rv = exp(0.0033333333333333335 * var_chaste_interface__cell__V); // dimensionless
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_reversal_potentials__EK = log(NV_Ith_S(mParameters, 2) / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)); // per_ms
        const double var_IK1__bk1 = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__IK1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 2)) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IK1__ak1 * NV_Ith_S(mParameters, 6) / (var_IK1__ak1 + var_IK1__bk1); // uA_per_uF
        const double var_IK1__IK1_converted = HeartConfig::Instance()->GetCapacitance() * var_IK1__IK1; // uA_per_cm2
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKr__gkr * var_IKr__r * var_chaste_interface__IKr__xr; // uA_per_uF
        const double var_IKr__IKr_converted = HeartConfig::Instance()->GetCapacitance() * var_IKr__IKr; // uA_per_cm2
        const double var_Ito__Ito = pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 10) * var_Ito__rv * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv; // uA_per_uF
        const double var_Ito__Ito_converted = HeartConfig::Instance()->GetCapacitance() * var_Ito__Ito; // uA_per_cm2
        const double var_reversal_potentials__ENa = log(NV_Ith_S(mParameters, 3) / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__INa = (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INa__gNa; // uA_per_uF
        const double var_INa__INa_converted = HeartConfig::Instance()->GetCapacitance() * var_INa__INa; // uA_per_cm2
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((NV_Ith_S(mParameters, 3) * var_reversal_potentials__prnak + NV_Ith_S(mParameters, 2)) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_Environment__FonRT; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__cell__V) * var_IKs__gks * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_uF
        const double var_IKs__IKs_converted = HeartConfig::Instance()->GetCapacitance() * var_IKs__IKs; // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(10);
        NV_Ith_S(dqs, 0) = var_Irel__irelcicr;
        NV_Ith_S(dqs, 1) = var_ICaL__ICaL_converted;
        NV_Ith_S(dqs, 2) = var_INa__INa_converted;
        NV_Ith_S(dqs, 3) = var_IK1__IK1_converted;
        NV_Ith_S(dqs, 4) = var_IKr__IKr_converted;
        NV_Ith_S(dqs, 5) = var_IKs__IKs_converted;
        NV_Ith_S(dqs, 6) = var_INaCa__INaCa_converted;
        NV_Ith_S(dqs, 7) = var_cell__i_Stim_converted;
        NV_Ith_S(dqs, 8) = var_Ito__Ito_converted;
        NV_Ith_S(dqs, 9) = var_chaste_interface__Environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellbenson_epicardial_2008FromCellMLCvode>::Initialise(void)
{
    this->mSystemName = "benson_epicardial_2008";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "ms";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-85.781844107117);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00012131666);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("INa__H");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.987317750543);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("INa__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001356538159);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.991924983076);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("ICaL__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.64013e-06);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("ICaL__dp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.98230672628);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("ICaL__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999961508634);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("ICaL__fca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.97836624923);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("ICaL__fca2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.893052931249);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("ICaL__f2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.992234519148);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("IKr__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(7.24074e-06);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.019883138161);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.019890650554);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("Ito__ydv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.013970786703);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("Ito__ydv2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99996472752);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("Ito__zdv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.829206149767);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("Ito2__AA");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000816605172);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("INal__mL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001356538159);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("INal__hL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.26130711759);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("Irel_CaMKtrap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.021123704774);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("Irel__ro");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 22):
    this->mVariableNames.push_back("Irel__ri");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.862666650318);

    // NV_Ith_S(rY, 23):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(12.972433387269);

    // NV_Ith_S(rY, 24):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(135.469546216758);

    // NV_Ith_S(rY, 25):
    this->mVariableNames.push_back("Cl__Cl_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(15.59207157178);

    // NV_Ith_S(rY, 26):
    this->mVariableNames.push_back("Ca__Ca_jsr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(1.737580994071);

    // NV_Ith_S(rY, 27):
    this->mVariableNames.push_back("Ca__Ca_nsr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(1.832822335168);

    // NV_Ith_S(rY, 28):
    this->mVariableNames.push_back("Ca__Ca_ss");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00012271265);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_ms");

    // mParameters[1]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[2]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[4]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("L_per_F_ms");

    // mParameters[5]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("mM_per_ms");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("ms");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellbenson_epicardial_2008FromCellMLCvode)

#endif // CHASTE_CVODE
