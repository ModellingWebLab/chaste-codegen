#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: priebe_beuckelmann_1998
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvode)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "priebe_beuckelmann_1998.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"


    boost::shared_ptr<RegularStimulus> Cellpriebe_beuckelmann_1998FromCellMLCvode::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -15.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 3.0; // ms
        const double var_chaste_interface__cell__stim_offset = 100.0; // ms
        const double var_chaste_interface__cell__stim_period = 2000.0; // ms
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLCvode::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellpriebe_beuckelmann_1998FromCellMLCvode::Cellpriebe_beuckelmann_1998FromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                22,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellpriebe_beuckelmann_1998FromCellMLCvode>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 22.0; // (var_Irel__G_rel_max) [per_ms]
        NV_Ith_S(this->mParameters, 1) = 153.40000000000001; // (var_cell__Cm) [pF]
        NV_Ith_S(this->mParameters, 2) = 1.0; // (var_Ionic_concentrations__conc_clamp) [dimensionless]
        NV_Ith_S(this->mParameters, 3) = 2.0; // (var_Ionic_concentrations__Cao) [mM]
        NV_Ith_S(this->mParameters, 4) = 4.0; // (var_Ionic_concentrations__Ko) [mM]
        NV_Ith_S(this->mParameters, 5) = 138.0; // (var_Ionic_concentrations__Nao) [mM]
        NV_Ith_S(this->mParameters, 6) = 96.486699999999999; // (var_cell__F) [coulomb_per_millimole]
        NV_Ith_S(this->mParameters, 7) = 8.3142999999999994; // (var_cell__R) [joule_per_mole_kelvin]
        NV_Ith_S(this->mParameters, 8) = 0.064000000000000001; // (var_ICa__g_Ca_max) [mS_per_uF]
        NV_Ith_S(this->mParameters, 9) = 16.0; // (var_INa__g_Na) [mS_per_uF]
        NV_Ith_S(this->mParameters, 10) = 0; // (var_INa__perc_reduced_inact_for_IpNa) [dimensionless]
        NV_Ith_S(this->mParameters, 11) = 0; // (var_INa__shift_INa_inact) [mV]
        NV_Ith_S(this->mParameters, 12) = 1.0; // (var_IK1__g_K1_scale) [dimensionless]
        NV_Ith_S(this->mParameters, 13) = 0.014999999999999999; // (var_IKr__g_Kr_max) [mS_per_uF]
        NV_Ith_S(this->mParameters, 14) = 0.02; // (var_IKs__g_Ks_max) [mS_per_uF]
        NV_Ith_S(this->mParameters, 15) = 1000.0; // (var_INaCa__K_NaCa_normal) [uA_per_uF]
        NV_Ith_S(this->mParameters, 16) = 1.0; // (var_Ito__g_to_max_factor) [dimensionless]
        NV_Ith_S(this->mParameters, 17) = 310.14999999999998; // (var_cell__T) [kelvin]
    }

    Cellpriebe_beuckelmann_1998FromCellMLCvode::~Cellpriebe_beuckelmann_1998FromCellMLCvode()
    {
    }

    
    double Cellpriebe_beuckelmann_1998FromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 1.75032478501027e-05
        double var_chaste_interface__Ito_t_gate__t = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Ionic_concentrations__Nai = NV_Ith_S(rY, 18);
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__Ionic_concentrations__Ki = NV_Ith_S(rY, 19);
        // Units: mM; Initial value: 140.0
        
        const double var_ICa_f_Ca_gate__Km_Ca = 0.00059999999999999995; // mM
        const double var_INaCa__K_mCa = 1.3799999999999999; // mM
        const double var_INaCa__K_mNa = 87.5; // mM
        const double var_INaCa__K_sat = 0.10000000000000001; // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaK__K_mKo = 1.5; // mM
        const double var_INaK__K_mNai = 10.0; // mM
        const double var_ICa_f_Ca_gate__f_Ca = var_ICa_f_Ca_gate__Km_Ca / (var_ICa_f_Ca_gate__Km_Ca + var_chaste_interface__Ionic_concentrations__Cai); // dimensionless
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 5)); // dimensionless
        const double var_cell__FonRT = NV_Ith_S(mParameters, 6) / (NV_Ith_S(mParameters, 7) * NV_Ith_S(mParameters, 17)); // per_mV
        const double var_ICa__E_Ca = 0.5 * log(NV_Ith_S(mParameters, 3) / var_chaste_interface__Ionic_concentrations__Cai) / var_cell__FonRT; // mV
        const double var_IK1__E_K1 = log(NV_Ith_S(mParameters, 4) / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_IKr__E_K = log(NV_Ith_S(mParameters, 4) / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_IKs__E_Ks = log((NV_Ith_S(mParameters, 4) + 0.018329999999999999 * NV_Ith_S(mParameters, 5)) / (var_chaste_interface__Ionic_concentrations__Ki + 0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT; // mV
        const double var_INa__E_Na = log(NV_Ith_S(mParameters, 5) / var_chaste_interface__Ionic_concentrations__Nai) / var_cell__FonRT; // mV
        const double var_Ito__E_to = log((NV_Ith_S(mParameters, 4) + 0.042999999999999997 * NV_Ith_S(mParameters, 5)) / (var_chaste_interface__Ionic_concentrations__Ki + 0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT; // mV
        const double var_ICa__i_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 8) * var_chaste_interface__ICa_d_gate__d * var_ICa_f_Ca_gate__f_Ca * var_chaste_interface__ICa_f_gate__f; // uA_per_uF
        const double var_IK1_K1_gate__alpha_K1 = 0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)); // per_ms
        const double var_IK1_K1_gate__beta_K1 = (exp(-1.0 + 0.10000000000000001 * var_chaste_interface__cell__V - 0.10000000000000001 * var_IK1__E_K1) + 3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.00020000000000000001 * var_IK1__E_K1)) / (1.0 + exp(0.5 * var_IK1__E_K1 - 0.5 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1_K1_gate__K1_infinity = var_IK1_K1_gate__alpha_K1 / (var_IK1_K1_gate__alpha_K1 + var_IK1_K1_gate__beta_K1); // dimensionless
        const double var_IKr__rik = 1 / (1.0 + exp(1.1304347826086956 + 0.043478260869565216 * var_chaste_interface__cell__V)); // dimensionless
        const double var_IKr__i_Kr = (-var_IKr__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 13) * var_IKr__rik * var_chaste_interface__IKr_Xr_gate__Xr; // uA_per_uF
        const double var_IKs__i_Ks = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (-var_IKs__E_Ks + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 14); // uA_per_uF
        const double var_INa__i_Na = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_INa__E_Na + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 9) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INaK__f_NaK = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_cell__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_cell__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_cell__failing = 0; // dimensionless
        const double var_ICab__g_b_Ca_max = ((var_cell__failing == 0) ? (0.00084999999999999995) : (0.0012999999999999999)); // mS_per_uF
        const double var_ICab__i_b_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * var_ICab__g_b_Ca_max; // uA_per_uF
        const double var_IK1__g_K1_max = ((var_cell__failing == 0) ? (2.5) : (2.0)); // mS_per_uF
        const double var_IK1__i_K1 = (-var_IK1__E_K1 + var_chaste_interface__cell__V) * var_IK1__g_K1_max * NV_Ith_S(mParameters, 12) * var_IK1_K1_gate__K1_infinity; // uA_per_uF
        const double var_INaCa__K_NaCa = ((var_cell__failing == 0) ? (NV_Ith_S(mParameters, 15)) : (1650.0)); // uA_per_uF
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Ionic_concentrations__Nai, 3) * NV_Ith_S(mParameters, 3) * exp(var_INaCa__eta * var_cell__FonRT * var_chaste_interface__cell__V) - pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__Ionic_concentrations__Cai * exp((-1.0 + var_INaCa__eta) * var_cell__FonRT * var_chaste_interface__cell__V)) * var_INaCa__K_NaCa / ((1.0 + var_INaCa__K_sat * exp((-1.0 + var_INaCa__eta) * var_cell__FonRT * var_chaste_interface__cell__V)) * (pow(var_INaCa__K_mNa, 3) + pow(NV_Ith_S(mParameters, 5), 3)) * (var_INaCa__K_mCa + NV_Ith_S(mParameters, 3))); // uA_per_uF
        const double var_INaK__I_NaK_max = ((var_cell__failing == 0) ? (1.3) : (0.75)); // uA_per_uF
        const double var_INaK__i_NaK = var_INaK__I_NaK_max * var_INaK__f_NaK * NV_Ith_S(mParameters, 4) / ((1.0 + pow((var_INaK__K_mNai / var_chaste_interface__Ionic_concentrations__Nai), 1.5)) * (var_INaK__K_mKo + NV_Ith_S(mParameters, 4))); // uA_per_uF
        const double var_INab__g_b_Na_max = ((var_cell__failing == 0) ? (0.001) : (0)); // mS_per_uF
        const double var_INab__i_b_Na = (-var_INa__E_Na + var_chaste_interface__cell__V) * var_INab__g_b_Na_max; // uA_per_uF
        const double var_Ito__g_to_max = ((var_cell__failing == 0) ? (0.29999999999999999 * NV_Ith_S(mParameters, 16)) : (0.191 * NV_Ith_S(mParameters, 16))); // mS_per_uF
        const double var_Ito__i_to = (-var_Ito__E_to + var_chaste_interface__cell__V) * var_Ito__g_to_max * var_chaste_interface__Ito_r_gate__r * var_chaste_interface__Ito_t_gate__t; // uA_per_uF
        const double var_cell__i_Stim = 0.0; // uA_per_uF
        const double var_cell__I_tot = var_ICa__i_Ca + var_ICab__i_b_Ca + var_IK1__i_K1 + var_IKr__i_Kr + var_IKs__i_Ks + var_INa__i_Na + var_INaCa__i_NaCa + var_INaK__i_NaK + var_INab__i_b_Na + var_Ito__i_to + var_cell__i_Stim; // uA_per_uF
        const double var_cell__dVdt = -var_cell__I_tot; // mV_per_ms
        const double var_chaste_interface__i_ionic = -HeartConfig::Instance()->GetCapacitance() * var_cell__dVdt; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellpriebe_beuckelmann_1998FromCellMLCvode::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 1.75032478501027e-05
        double var_chaste_interface__Ito_t_gate__t = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Irel__APtrack = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: -1.372158997089e-136
        double var_chaste_interface__Irel__APtrack2 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: -7.58517896402761e-136
        double var_chaste_interface__Irel__APtrack3 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 4.82035353592764e-05
        double var_chaste_interface__Irel__Cainfluxtrack = NV_Ith_S(rY, 14);
        // Units: mM; Initial value: -7.71120176147331e-138
        
        
        
        double var_chaste_interface__Ionic_concentrations__Nai = NV_Ith_S(rY, 18);
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__Ionic_concentrations__Ki = NV_Ith_S(rY, 19);
        // Units: mM; Initial value: 140.0
        double var_chaste_interface__Ionic_concentrations__Ca_JSR = NV_Ith_S(rY, 20);
        // Units: mM; Initial value: 2.5
        double var_chaste_interface__Ionic_concentrations__Ca_NSR = NV_Ith_S(rY, 21);
        // Units: mM; Initial value: 2.5

        // Mathematics
        double d_dt_chaste_interface_var_cell__V;
        const double d_dt_chaste_interface_var_Irel__OVRLDtrack = 0; // 1 / ms
        const double d_dt_chaste_interface_var_Irel__OVRLDtrack2 = 0; // 1 / ms
        const double d_dt_chaste_interface_var_Irel__OVRLDtrack3 = 0; // 1 / ms
        const double var_ICa_f_Ca_gate__Km_Ca = 0.00059999999999999995; // mM
        const double var_INaCa__K_mCa = 1.3799999999999999; // mM
        const double var_INaCa__K_mNa = 87.5; // mM
        const double var_INaCa__K_sat = 0.10000000000000001; // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaK__K_mKo = 1.5; // mM
        const double var_INaK__K_mNai = 10.0; // mM
        const double var_ICa_f_Ca_gate__f_Ca = var_ICa_f_Ca_gate__Km_Ca / (var_ICa_f_Ca_gate__Km_Ca + var_chaste_interface__Ionic_concentrations__Cai); // dimensionless
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 5)); // dimensionless
        const double var_Ionic_concentrations__preplength = 100.0; // um
        const double var_Ionic_concentrations__radius = 11.0; // um
        const double var_Ionic_concentrations__volume = M_PI * pow(var_Ionic_concentrations__radius, 2) * var_Ionic_concentrations__preplength; // fL
        const double var_Ionic_concentrations__V_JSR = 0.0047999999999999996 * var_Ionic_concentrations__volume; // fL
        const double var_Ionic_concentrations__V_NSR = 0.055199999999999999 * var_Ionic_concentrations__volume; // fL
        const double var_Ionic_concentrations__V_myo = 0.68000000000000005 * var_Ionic_concentrations__volume; // fL
        const double d_dt_chaste_interface_var_Irel__APtrack2 = (((var_chaste_interface__Irel__APtrack > 0.17999999999999999) && (var_chaste_interface__Irel__APtrack < 0.20000000000000001)) ? (100.0 - 100.5 * var_chaste_interface__Irel__APtrack2) : (-0.5 * var_chaste_interface__Irel__APtrack2)); // 1 / ms
        const double d_dt_chaste_interface_var_Irel__APtrack3 = (((var_chaste_interface__Irel__APtrack > 0.17999999999999999) && (var_chaste_interface__Irel__APtrack < 0.20000000000000001)) ? (100.0 - 100.5 * var_chaste_interface__Irel__APtrack3) : (-0.01 * var_chaste_interface__Irel__APtrack3)); // 1 / ms
        const double var_Irel__K_mrel = 0.00080000000000000004; // mM
        const double var_Irel__delta_Ca_ith = 5.0000000000000004e-6; // mM
        const double var_Irel__G_rel = ((var_chaste_interface__Irel__Cainfluxtrack > var_Irel__delta_Ca_ith) ? ((1.0 - var_chaste_interface__Irel__APtrack2) * (-var_Irel__delta_Ca_ith + var_chaste_interface__Irel__Cainfluxtrack) * var_chaste_interface__Irel__APtrack2 * NV_Ith_S(mParameters, 0) / (-var_Irel__delta_Ca_ith + var_chaste_interface__Irel__Cainfluxtrack + var_Irel__K_mrel)) : (0)); // per_ms
        const double var_Irel__i_rel = (-var_chaste_interface__Ionic_concentrations__Cai + var_chaste_interface__Ionic_concentrations__Ca_JSR) * var_Irel__G_rel; // mM_per_ms
        const double var_Itr__tau_tr = 180.0; // ms
        const double var_Itr__i_tr = (-var_chaste_interface__Ionic_concentrations__Ca_JSR + var_chaste_interface__Ionic_concentrations__Ca_NSR) / var_Itr__tau_tr; // mM_per_ms
        const double var_Iup__K_mup = 0.00092000000000000003; // mM
        const double var_calcium_buffers_in_the_JSR__CSQN_max = 10.0; // mM
        const double var_calcium_buffers_in_the_JSR__K_mCSQN = 0.80000000000000004; // mM
        const double var_calcium_buffers_in_the_JSR__Ca_JSR_bufc = 1 / (1.0 + var_calcium_buffers_in_the_JSR__CSQN_max * var_calcium_buffers_in_the_JSR__K_mCSQN / pow((var_chaste_interface__Ionic_concentrations__Ca_JSR + var_calcium_buffers_in_the_JSR__K_mCSQN), 2)); // dimensionless
        const double d_dt_chaste_interface_var_Ionic_concentrations__Ca_JSR = (-var_Irel__i_rel + var_Itr__i_tr) * var_calcium_buffers_in_the_JSR__Ca_JSR_bufc; // mM / ms
        const double var_calcium_buffers_in_the_myoplasm__CMDN_max = 0.050000000000000003; // mM
        const double var_calcium_buffers_in_the_myoplasm__K_mCMDN = 0.0023800000000000002; // mM
        const double var_calcium_buffers_in_the_myoplasm__K_mTn = 0.00050000000000000001; // mM
        const double var_calcium_buffers_in_the_myoplasm__Tn_max = 0.070000000000000007; // mM
        const double var_calcium_buffers_in_the_myoplasm__buffon = 1.0; // dimensionless
        const double var_calcium_buffers_in_the_myoplasm__Cai_bufc = 1 / (1.0 + (var_calcium_buffers_in_the_myoplasm__CMDN_max * var_calcium_buffers_in_the_myoplasm__K_mCMDN / pow((var_chaste_interface__Ionic_concentrations__Cai + var_calcium_buffers_in_the_myoplasm__K_mCMDN), 2) + var_calcium_buffers_in_the_myoplasm__K_mTn * var_calcium_buffers_in_the_myoplasm__Tn_max / pow((var_chaste_interface__Ionic_concentrations__Cai + var_calcium_buffers_in_the_myoplasm__K_mTn), 2)) * var_calcium_buffers_in_the_myoplasm__buffon); // dimensionless
        const double var_cell__FonRT = NV_Ith_S(mParameters, 6) / (NV_Ith_S(mParameters, 7) * NV_Ith_S(mParameters, 17)); // per_mV
        const double var_ICa__E_Ca = 0.5 * log(NV_Ith_S(mParameters, 3) / var_chaste_interface__Ionic_concentrations__Cai) / var_cell__FonRT; // mV
        const double var_IK1__E_K1 = log(NV_Ith_S(mParameters, 4) / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_IKr__E_K = log(NV_Ith_S(mParameters, 4) / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_IKs__E_Ks = log((NV_Ith_S(mParameters, 4) + 0.018329999999999999 * NV_Ith_S(mParameters, 5)) / (var_chaste_interface__Ionic_concentrations__Ki + 0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT; // mV
        const double var_INa__E_Na = log(NV_Ith_S(mParameters, 5) / var_chaste_interface__Ionic_concentrations__Nai) / var_cell__FonRT; // mV
        const double var_Ito__E_to = log((NV_Ith_S(mParameters, 4) + 0.042999999999999997 * NV_Ith_S(mParameters, 5)) / (var_chaste_interface__Ionic_concentrations__Ki + 0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT; // mV
        const double var_ICa__i_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 8) * var_chaste_interface__ICa_d_gate__d * var_ICa_f_Ca_gate__f_Ca * var_chaste_interface__ICa_f_gate__f; // uA_per_uF
        const double var_ICa_d_gate__alpha_d = 0.63524014987941491 * exp(-0.89836705491478086 * pow((-1 + 0.044722719141323794 * var_chaste_interface__cell__V), 2)) / sqrt(M_PI); // per_ms
        const double var_ICa_d_gate__beta_d = 0.14710000000000001 - 0.25101580310038191 * exp(-0.08830693125184777 * pow((-1 + 0.15937778911130945 * var_chaste_interface__cell__V), 2)) / sqrt(M_PI); // per_ms
        const double d_dt_chaste_interface_var_ICa_d_gate__d = (1.0 - var_chaste_interface__ICa_d_gate__d) * var_ICa_d_gate__alpha_d - var_ICa_d_gate__beta_d * var_chaste_interface__ICa_d_gate__d; // 1 / ms
        const double var_ICa_f_gate__alpha_f = 0.0068719999999999996 / (1.0 + exp(-1.0052757950443461 + 0.16333730787449161 * var_chaste_interface__cell__V)); // per_ms
        const double var_ICa_f_gate__beta_f = 0.00054739999999999997 + (0.0112 + 0.068699999999999997 * exp(-1.06213655 - 0.1081 * var_chaste_interface__cell__V)) / (1.0 + exp(-2.7305064499999996 - 0.27789999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_ICa_f_gate__f = (1.0 - var_chaste_interface__ICa_f_gate__f) * var_ICa_f_gate__alpha_f - var_ICa_f_gate__beta_f * var_chaste_interface__ICa_f_gate__f; // 1 / ms
        const double var_IK1_K1_gate__alpha_K1 = 0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)); // per_ms
        const double var_IK1_K1_gate__beta_K1 = (exp(-1.0 + 0.10000000000000001 * var_chaste_interface__cell__V - 0.10000000000000001 * var_IK1__E_K1) + 3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.00020000000000000001 * var_IK1__E_K1)) / (1.0 + exp(0.5 * var_IK1__E_K1 - 0.5 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1_K1_gate__K1_infinity = var_IK1_K1_gate__alpha_K1 / (var_IK1_K1_gate__alpha_K1 + var_IK1_K1_gate__beta_K1); // dimensionless
        const double var_IKr__rik = 1 / (1.0 + exp(1.1304347826086956 + 0.043478260869565216 * var_chaste_interface__cell__V)); // dimensionless
        const double var_IKr__i_Kr = (-var_IKr__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 13) * var_IKr__rik * var_chaste_interface__IKr_Xr_gate__Xr; // uA_per_uF
        const double var_IKr_Xr_gate__alpha_Xr = 0.0050000000000000001 * exp(0.0021416822000000003 + 0.00052660000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(-0.51325540000000003 - 0.12620000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double var_IKr_Xr_gate__beta_Xr = 0.016 * exp(0.105056 + 0.0016000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(5.1411779999999991 + 0.078299999999999995 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_IKr_Xr_gate__Xr = (1.0 - var_chaste_interface__IKr_Xr_gate__Xr) * var_IKr_Xr_gate__alpha_Xr - var_chaste_interface__IKr_Xr_gate__Xr * var_IKr_Xr_gate__beta_Xr; // 1 / ms
        const double var_IKs__i_Ks = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (-var_IKs__E_Ks + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 14); // uA_per_uF
        const double var_IKs_Xs_gate__alpha_Xs = 0.0030130000000000001 / (1.0 + exp(-0.17842998931347828 - 0.069846547135942336 * var_chaste_interface__cell__V)); // per_ms
        const double var_IKs_Xs_gate__beta_Xs = 0.0058700000000000002 / (1.0 + exp(1.0082174462705435 + 0.063211125158027806 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_IKs_Xs_gate__Xs = (1.0 - var_chaste_interface__IKs_Xs_gate__Xs) * var_IKs_Xs_gate__alpha_Xs - var_chaste_interface__IKs_Xs_gate__Xs * var_IKs_Xs_gate__beta_Xs; // 1 / ms
        const double var_INa__i_Na = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_INa__E_Na + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 9) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INaK__f_NaK = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_cell__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_cell__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INa_h_gate__alpha_h = ((var_chaste_interface__cell__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 11) - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_ms
        const double var_INa_h_gate__beta_h = ((var_chaste_interface__cell__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V - 0.34999999999999998 * NV_Ith_S(mParameters, 11)) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * NV_Ith_S(mParameters, 11))) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * NV_Ith_S(mParameters, 11) - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INa_h_gate__h_inf = 0.01 * NV_Ith_S(mParameters, 10) + (1.0 - 0.01 * NV_Ith_S(mParameters, 10)) * var_INa_h_gate__alpha_h / (var_INa_h_gate__alpha_h + var_INa_h_gate__beta_h); // dimensionless
        const double var_INa_h_gate__tau_h = 1 / (var_INa_h_gate__alpha_h + var_INa_h_gate__beta_h); // ms
        const double d_dt_chaste_interface_var_INa_h_gate__h = (-var_chaste_interface__INa_h_gate__h + var_INa_h_gate__h_inf) / var_INa_h_gate__tau_h; // 1 / ms
        const double var_INa_j_gate__alpha_j = ((var_chaste_interface__cell__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24399999999999999 * var_chaste_interface__cell__V - 0.24399999999999999 * NV_Ith_S(mParameters, 11)) - 3.4740000000000003e-5 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 11) - 0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * NV_Ith_S(mParameters, 11)))) : (0)); // per_ms
        const double var_INa_j_gate__beta_j = ((var_chaste_interface__cell__V < -40.0) ? (0.1212 * exp(0.01052 * NV_Ith_S(mParameters, 11) - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 11) - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.29999999999999999 * exp(2.5349999999999999e-7 * NV_Ith_S(mParameters, 11) - 2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 11) - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INa_j_gate__j_inf = 0.01 * NV_Ith_S(mParameters, 10) + (1.0 - 0.01 * NV_Ith_S(mParameters, 10)) * var_INa_j_gate__alpha_j / (var_INa_j_gate__alpha_j + var_INa_j_gate__beta_j); // dimensionless
        const double var_INa_j_gate__tau_j = 1 / (var_INa_j_gate__alpha_j + var_INa_j_gate__beta_j); // ms
        const double d_dt_chaste_interface_var_INa_j_gate__j = (-var_chaste_interface__INa_j_gate__j + var_INa_j_gate__j_inf) / var_INa_j_gate__tau_j; // 1 / ms
        const double var_INa_m_gate__alpha_m = ((fabs(47.130000000000003 + var_chaste_interface__cell__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INa_m_gate__beta_m = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__cell__V); // per_ms
        const double d_dt_chaste_interface_var_INa_m_gate__m = (1.0 - var_chaste_interface__INa_m_gate__m) * var_INa_m_gate__alpha_m - var_INa_m_gate__beta_m * var_chaste_interface__INa_m_gate__m; // 1 / ms
        const double var_Ito_r_gate__alpha_r = 0.52659999999999996 * exp(0.70203392000000009 - 0.0166 * var_chaste_interface__cell__V) / (1.0 + exp(3.9880601600000003 - 0.094299999999999995 * var_chaste_interface__cell__V)); // per_ms
        const double var_Ito_r_gate__beta_r = (0.51490000000000002 * exp(0.67236288 - 0.13439999999999999 * var_chaste_interface__cell__V) + 5.1860000000000002e-5 * var_chaste_interface__cell__V) / (1.0 + exp(6.9907280000000006e-6 - 0.1348 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_Ito_r_gate__r = (1.0 - var_chaste_interface__Ito_r_gate__r) * var_Ito_r_gate__alpha_r - var_Ito_r_gate__beta_r * var_chaste_interface__Ito_r_gate__r; // 1 / ms
        const double var_Ito_t_gate__alpha_t = (5.6119999999999998e-5 * var_chaste_interface__cell__V + 0.072099999999999997 * exp(-5.9257863000000004 - 0.17299999999999999 * var_chaste_interface__cell__V)) / (1.0 + exp(-5.9326369200000002 - 0.17319999999999999 * var_chaste_interface__cell__V)); // per_ms
        const double var_Ito_t_gate__beta_t = (0.0001215 * var_chaste_interface__cell__V + 0.076700000000000004 * exp(-5.6479010000000002e-8 - 1.6600000000000001e-9 * var_chaste_interface__cell__V)) / (1.0 + exp(-5.4573693999999993 - 0.16039999999999999 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_Ito_t_gate__t = (1.0 - var_chaste_interface__Ito_t_gate__t) * var_Ito_t_gate__alpha_t - var_Ito_t_gate__beta_t * var_chaste_interface__Ito_t_gate__t; // 1 / ms
        const double var_cell__failing = 0; // dimensionless
        const double var_ICab__g_b_Ca_max = ((var_cell__failing == 0) ? (0.00084999999999999995) : (0.0012999999999999999)); // mS_per_uF
        const double var_ICab__i_b_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * var_ICab__g_b_Ca_max; // uA_per_uF
        const double var_IK1__g_K1_max = ((var_cell__failing == 0) ? (2.5) : (2.0)); // mS_per_uF
        const double var_IK1__i_K1 = (-var_IK1__E_K1 + var_chaste_interface__cell__V) * var_IK1__g_K1_max * NV_Ith_S(mParameters, 12) * var_IK1_K1_gate__K1_infinity; // uA_per_uF
        const double var_INaCa__K_NaCa = ((var_cell__failing == 0) ? (NV_Ith_S(mParameters, 15)) : (1650.0)); // uA_per_uF
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Ionic_concentrations__Nai, 3) * NV_Ith_S(mParameters, 3) * exp(var_INaCa__eta * var_cell__FonRT * var_chaste_interface__cell__V) - pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__Ionic_concentrations__Cai * exp((-1.0 + var_INaCa__eta) * var_cell__FonRT * var_chaste_interface__cell__V)) * var_INaCa__K_NaCa / ((1.0 + var_INaCa__K_sat * exp((-1.0 + var_INaCa__eta) * var_cell__FonRT * var_chaste_interface__cell__V)) * (pow(var_INaCa__K_mNa, 3) + pow(NV_Ith_S(mParameters, 5), 3)) * (var_INaCa__K_mCa + NV_Ith_S(mParameters, 3))); // uA_per_uF
        const double d_dt_chaste_interface_var_Irel__Cainfluxtrack = ((var_chaste_interface__Irel__APtrack > 0.20000000000000001) ? (-0.5 * (-var_INaCa__i_NaCa + var_ICa__i_Ca + var_ICab__i_b_Ca) * NV_Ith_S(mParameters, 1) / (var_Ionic_concentrations__V_myo * NV_Ith_S(mParameters, 6))) : ((var_chaste_interface__Irel__APtrack2 > 0.01) ? (0) : (-0.5 * var_chaste_interface__Irel__Cainfluxtrack))); // mM / ms
        const double var_INaK__I_NaK_max = ((var_cell__failing == 0) ? (1.3) : (0.75)); // uA_per_uF
        const double var_INaK__i_NaK = var_INaK__I_NaK_max * var_INaK__f_NaK * NV_Ith_S(mParameters, 4) / ((1.0 + pow((var_INaK__K_mNai / var_chaste_interface__Ionic_concentrations__Nai), 1.5)) * (var_INaK__K_mKo + NV_Ith_S(mParameters, 4))); // uA_per_uF
        const double var_INab__g_b_Na_max = ((var_cell__failing == 0) ? (0.001) : (0)); // mS_per_uF
        const double var_INab__i_b_Na = (-var_INa__E_Na + var_chaste_interface__cell__V) * var_INab__g_b_Na_max; // uA_per_uF
        const double d_dt_chaste_interface_var_Ionic_concentrations__Nai = -(3.0 * var_INaCa__i_NaCa + 3.0 * var_INaK__i_NaK + var_INa__i_Na + var_INab__i_b_Na) * NV_Ith_S(mParameters, 2) * NV_Ith_S(mParameters, 1) / (var_Ionic_concentrations__V_myo * NV_Ith_S(mParameters, 6)); // mM / ms
        const double var_Ileak__K_leak = ((var_cell__failing == 0) ? (0.00025999999999999998) : (0.00017000000000000001)); // per_ms
        const double var_Ileak__i_leak = var_Ileak__K_leak * var_chaste_interface__Ionic_concentrations__Ca_NSR; // mM_per_ms
        const double var_Ito__g_to_max = ((var_cell__failing == 0) ? (0.29999999999999999 * NV_Ith_S(mParameters, 16)) : (0.191 * NV_Ith_S(mParameters, 16))); // mS_per_uF
        const double var_Ito__i_to = (-var_Ito__E_to + var_chaste_interface__cell__V) * var_Ito__g_to_max * var_chaste_interface__Ito_r_gate__r * var_chaste_interface__Ito_t_gate__t; // uA_per_uF
        const double var_Iup__I_up_max = ((var_cell__failing == 0) ? (0.0044999999999999997) : (0.0015)); // mM_per_ms
        const double var_Iup__i_up = var_chaste_interface__Ionic_concentrations__Cai * var_Iup__I_up_max / (var_chaste_interface__Ionic_concentrations__Cai + var_Iup__K_mup); // mM_per_ms
        const double d_dt_chaste_interface_var_Ionic_concentrations__Ca_NSR = var_Iup__i_up - var_Ileak__i_leak - var_Ionic_concentrations__V_JSR * var_Itr__i_tr / var_Ionic_concentrations__V_NSR; // mM / ms
        const double d_dt_chaste_interface_var_Ionic_concentrations__Cai = ((-var_Iup__i_up + var_Ileak__i_leak) * var_Ionic_concentrations__V_NSR / var_Ionic_concentrations__V_myo + var_Ionic_concentrations__V_JSR * var_Irel__i_rel / var_Ionic_concentrations__V_myo - 0.5 * (-2.0 * var_INaCa__i_NaCa + var_ICa__i_Ca + var_ICab__i_b_Ca) * NV_Ith_S(mParameters, 1) / (var_Ionic_concentrations__V_myo * NV_Ith_S(mParameters, 6))) * var_calcium_buffers_in_the_myoplasm__Cai_bufc; // mM / ms
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double d_dt_chaste_interface_var_Ionic_concentrations__Ki = -(-2.0 * var_INaK__i_NaK + var_IK1__i_K1 + var_IKr__i_Kr + var_IKs__i_Ks + var_Ito__i_to + var_cell__i_Stim) * NV_Ith_S(mParameters, 2) * NV_Ith_S(mParameters, 1) / (var_Ionic_concentrations__V_myo * NV_Ith_S(mParameters, 6)); // mM / ms
        const double var_cell__I_tot = var_ICa__i_Ca + var_ICab__i_b_Ca + var_IK1__i_K1 + var_IKr__i_Kr + var_IKs__i_Ks + var_INa__i_Na + var_INaCa__i_NaCa + var_INaK__i_NaK + var_INab__i_b_Na + var_Ito__i_to + var_cell__i_Stim; // uA_per_uF
        const double var_cell__dVdt = -var_cell__I_tot; // mV_per_ms
        const double d_dt_chaste_interface_var_Irel__APtrack = ((var_cell__dVdt > 150.0) ? (100.0 - 100.5 * var_chaste_interface__Irel__APtrack) : (-0.5 * var_chaste_interface__Irel__APtrack)); // 1 / ms

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_cell__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_cell__V = var_cell__dVdt; // mV / ms
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_cell__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_Ionic_concentrations__Cai;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_INa_m_gate__m;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_INa_h_gate__h;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_INa_j_gate__j;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_ICa_d_gate__d;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_ICa_f_gate__f;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_Ito_r_gate__r;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_Ito_t_gate__t;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_IKs_Xs_gate__Xs;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_IKr_Xr_gate__Xr;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_Irel__APtrack;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_Irel__APtrack2;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_Irel__APtrack3;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_Irel__Cainfluxtrack;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_Irel__OVRLDtrack;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_Irel__OVRLDtrack2;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_Irel__OVRLDtrack3;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_Ionic_concentrations__Nai;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_Ionic_concentrations__Ki;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_Ionic_concentrations__Ca_JSR;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_Ionic_concentrations__Ca_NSR;
    }

    void Cellpriebe_beuckelmann_1998FromCellMLCvode::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 1.75032478501027e-05
        double var_chaste_interface__Ito_t_gate__t = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Irel__APtrack = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: -1.372158997089e-136
        double var_chaste_interface__Irel__APtrack2 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: -7.58517896402761e-136
        double var_chaste_interface__Irel__Cainfluxtrack = NV_Ith_S(rY, 14);
        // Units: mM; Initial value: -7.71120176147331e-138
        double var_chaste_interface__Ionic_concentrations__Nai = NV_Ith_S(rY, 18);
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__Ionic_concentrations__Ki = NV_Ith_S(rY, 19);
        // Units: mM; Initial value: 140.0
        double var_chaste_interface__Ionic_concentrations__Ca_JSR = NV_Ith_S(rY, 20);
        // Units: mM; Initial value: 2.5
        double var_chaste_interface__Ionic_concentrations__Ca_NSR = NV_Ith_S(rY, 21);
        // Units: mM; Initial value: 2.5
        const double var_x0 = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * NV_Ith_S(mParameters, 14);
        const double var_x1 = var_x0;
        const double var_x2 = NV_Ith_S(mParameters, 13) * var_chaste_interface__IKr_Xr_gate__Xr;
        const double var_x3 = exp(1.1304347826086956 + 0.043478260869565216 * var_chaste_interface__cell__V);
        const double var_x4 = 1.0 + var_x3;
        const double var_x5 = 1 / var_x4;
        const double var_x6 = var_x5;
        const double var_x7 = var_x2 * var_x6;
        const double var_x8 = NV_Ith_S(mParameters, 16) * var_chaste_interface__Ito_t_gate__t;
        const double var_x9 = var_x8 * var_chaste_interface__Ito_r_gate__r;
        const double var_x10 = 0.29999999999999999 * var_x9;
        const double var_x11 = 1 / var_chaste_interface__Ionic_concentrations__Ki;
        const double var_x12 = 1 / NV_Ith_S(mParameters, 6);
        const double var_x13 = var_x12 * NV_Ith_S(mParameters, 7) * NV_Ith_S(mParameters, 17);
        const double var_x14 = var_x13 * log(var_x11 * NV_Ith_S(mParameters, 4));
        const double var_x15 = exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_x14);
        const double var_x16 = 1.0 + var_x15;
        const double var_x17 = 1 / var_x16;
        const double var_x18 = exp(0.5 * var_x14 - 0.5 * var_chaste_interface__cell__V);
        const double var_x19 = 1.0 + var_x18;
        const double var_x20 = 1 / var_x19;
        const double var_x21 = 0.10000000000000001 * var_chaste_interface__cell__V;
        const double var_x22 = exp(-1.0 + var_x21 - 0.10000000000000001 * var_x14);
        const double var_x23 = exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.00020000000000000001 * var_x14);
        const double var_x24 = var_x22 + 3.0 * var_x23;
        const double var_x25 = 0.10000000000000001 * var_x17 + var_x20 * var_x24;
        const double var_x26 = NV_Ith_S(mParameters, 12) / var_x25;
        const double var_x27 = 0.25 * var_x17;
        const double var_x28 = var_x26 * var_x27;
        const double var_x29 = pow(var_chaste_interface__INa_m_gate__m, 3);
        const double var_x30 = var_x29 * NV_Ith_S(mParameters, 9) * var_chaste_interface__INa_j_gate__j;
        const double var_x31 = var_x30 * var_chaste_interface__INa_h_gate__h;
        const double var_x32 = var_x31;
        const double var_x33 = 0.00059999999999999995 + var_chaste_interface__Ionic_concentrations__Cai;
        const double var_x34 = 1 / var_x33;
        const double var_x35 = var_x34 * NV_Ith_S(mParameters, 8) * var_chaste_interface__ICa_f_gate__f;
        const double var_x36 = 0.00059999999999999995 * var_x35;
        const double var_x37 = var_x36 * var_chaste_interface__ICa_d_gate__d;
        const double var_x38 = -var_x14 + var_chaste_interface__cell__V;
        const double var_x39 = 0.043478260869565216 * var_x2 * var_x3 * var_x38 / pow(var_x4, 2);
        const double var_x40 = var_x15 / pow(var_x16, 2);
        const double var_x41 = 0.014999999999999999 * var_x26 * var_x38 * var_x40;
        const double var_x42 = 1 / var_chaste_interface__Ionic_concentrations__Nai;
        const double var_x43 = pow(var_x42, 1.5);
        const double var_x44 = 1 / (1.5 + NV_Ith_S(mParameters, 4));
        const double var_x45 = var_x44 * NV_Ith_S(mParameters, 4) / (1.0 + 31.622776601683793 * var_x43);
        const double var_x46 = 1.3 * var_x45;
        const double var_x47 = NV_Ith_S(mParameters, 6) / (NV_Ith_S(mParameters, 7) * NV_Ith_S(mParameters, 17));
        const double var_x48 = exp(-var_x21 * var_x47);
        const double var_x49 = exp(0.01485884101040119 * NV_Ith_S(mParameters, 5));
        const double var_x50 = var_x47 * var_chaste_interface__cell__V;
        const double var_x51 = exp(-var_x50);
        const double var_x52 = 1.0 + 0.1245 * var_x48 + 0.036499999999999998 * var_x51 * (-0.14285714285714285 + 0.14285714285714285 * var_x49);
        const double var_x53 = (0.012450000000000001 * var_x47 * var_x48 + var_x47 * var_x51 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x49)) / pow(var_x52, 2);
        const double var_x54 = 0.10000000000000001 * var_x22;
        const double var_x55 = 0.00060000000000000006 * var_x23;
        const double var_x56 = 0.0060000000000000001 * var_x40;
        const double var_x57 = 0.5 * var_x18 * var_x24 / pow(var_x19, 2);
        const double var_x58 = var_x27 * var_x38 * NV_Ith_S(mParameters, 12) / pow(var_x25, 2);
        const double var_x59 = var_x58 * (var_x56 - var_x57 - var_x20 * (var_x54 + var_x55));
        const double var_x60 = 0.34999999999999998 * var_chaste_interface__cell__V;
        const double var_x61 = NV_Ith_S(mParameters, 3) * exp(var_x47 * var_x60);
        const double var_x62 = var_x61 * pow(var_chaste_interface__Ionic_concentrations__Nai, 3);
        const double var_x63 = exp(-0.65000000000000002 * var_x50);
        const double var_x64 = pow(NV_Ith_S(mParameters, 5), 3);
        const double var_x65 = var_x63 * var_x64;
        const double var_x66 = var_x65 * var_chaste_interface__Ionic_concentrations__Cai;
        const double var_x67 = 1.0 + 0.10000000000000001 * var_x63;
        const double var_x68 = NV_Ith_S(mParameters, 15) / ((669921.875 + var_x64) * (1.3799999999999999 + NV_Ith_S(mParameters, 3)));
        const double var_x69 = var_x68 / var_x67;
        const double var_x70 = var_x69 * (0.34999999999999998 * var_x47 * var_x62 + 0.65000000000000002 * var_x47 * var_x66);
        const double var_x71 = var_x62 - var_x66;
        const double var_x72 = var_x47 * var_x63 * var_x68 * var_x71 / pow(var_x67, 2);
        const double var_x73 = -var_x70 - 0.065000000000000002 * var_x72;
        const double var_x74 = 1 / var_chaste_interface__Ionic_concentrations__Cai;
        const double var_x75 = 0.00042499999999999998 * var_x13;
        const double var_x76 = var_x74 * var_x75;
        const double var_x77 = log(var_x74 * NV_Ith_S(mParameters, 3));
        const double var_x78 = -0.5 * var_x13 * var_x77 + var_chaste_interface__cell__V;
        const double var_x79 = 0.00059999999999999995 * var_x78 * NV_Ith_S(mParameters, 8) * var_chaste_interface__ICa_d_gate__d;
        const double var_x80 = var_x79 * var_chaste_interface__ICa_f_gate__f / pow(var_x33, 2);
        const double var_x81 = var_x65 * var_x69;
        const double var_x82 = var_x81;
        const double var_x83 = 0.00029999999999999997 * var_x13 * var_x35 * var_x74 * var_chaste_interface__ICa_d_gate__d;
        const double var_x84 = var_x13 * log(var_x42 * NV_Ith_S(mParameters, 5));
        const double var_x85 = -var_x84 + var_chaste_interface__cell__V;
        const double var_x86 = NV_Ith_S(mParameters, 9) * var_chaste_interface__INa_h_gate__h;
        const double var_x87 = var_x85 * var_x86 * pow(var_chaste_interface__INa_m_gate__m, 2) * var_chaste_interface__INa_j_gate__j;
        const double var_x88 = var_x85;
        const double var_x89 = var_x29 * var_x86;
        const double var_x90 = 0.29999999999999999 * var_chaste_interface__cell__V;
        const double var_x91 = var_chaste_interface__Ionic_concentrations__Ki;
        const double var_x92 = 1 / (var_x91 + 0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai);
        const double var_x93 = NV_Ith_S(mParameters, 4);
        const double var_x94 = var_x13 * log(var_x92 * (var_x93 + 0.042999999999999997 * NV_Ith_S(mParameters, 5)));
        const double var_x95 = 0.29999999999999999 * var_x94;
        const double var_x96 = (var_x95 - var_x90) * NV_Ith_S(mParameters, 16);
        const double var_x97 = 1 / (var_x91 + 0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai);
        const double var_x98 = -var_x13 * log(var_x97 * (var_x93 + 0.018329999999999999 * NV_Ith_S(mParameters, 5))) + var_chaste_interface__cell__V;
        const double var_x99 = var_x98 * NV_Ith_S(mParameters, 14) * var_chaste_interface__IKs_Xs_gate__Xs;
        const double var_x100 = var_x38 * NV_Ith_S(mParameters, 13);
        const double var_x101 = var_x13 * var_x42;
        const double var_x102 = 0.001 * var_x101;
        const double var_x103 = var_x13 * var_x97;
        const double var_x104 = 0.018329999999999999 * var_x0 * var_x103;
        const double var_x105 = 1 / var_x52;
        const double var_x106 = var_x105 * var_x42 * var_x43 * var_x44 * NV_Ith_S(mParameters, 4) / pow((0.031622776601683791 + var_x43), 2);
        const double var_x107 = var_x61 * var_x69 * pow(var_chaste_interface__Ionic_concentrations__Nai, 2);
        const double var_x108 = var_x13 * var_x92;
        const double var_x109 = 0.012899999999999998 * var_x108 * var_x9;
        const double var_x110 = var_x11 * var_x13;
        const double var_x111 = var_x58 * (var_x110 * var_x56 - var_x110 * var_x57 - var_x20 * (var_x110 * var_x54 + var_x110 * var_x55));
        const double var_x112 = var_x1 * var_x103;
        const double var_x113 = var_x110 * var_x7;
        const double var_x114 = var_x10 * var_x108;
        const double var_x115 = var_x110 * var_x28;
        const double var_x116 = var_x110 * var_x41;
        const double var_x117 = 0.0023800000000000002 + var_chaste_interface__Ionic_concentrations__Cai;
        const double var_x118 = 0.00050000000000000001 + var_chaste_interface__Ionic_concentrations__Cai;
        const double var_x119 = 1.0 + 0.00011900000000000002 / pow(var_x117, 2) + 3.5000000000000004e-5 / pow(var_x118, 2);
        const double var_x120 = 1 / var_x119;
        const double var_x121 = 0.00084999999999999995 + var_x37;
        const double var_x122 = var_x12 * NV_Ith_S(mParameters, 1) / M_PI;
        const double var_x123 = 6.076810889645114e-5 * var_x122;
        const double var_x124 = 1.0 - var_chaste_interface__Irel__APtrack2;
        const double var_x125 = 0.00079500000000000003 + var_chaste_interface__Irel__Cainfluxtrack;
        const double var_x126 = 1 / var_x125;
        const double var_x127 = -5.0000000000000004e-6 + var_chaste_interface__Irel__Cainfluxtrack;
        const double var_x128 = var_x126 * var_x127 * NV_Ith_S(mParameters, 0);
        const double var_x129 = var_x124 * var_x128;
        const double var_x130 = var_chaste_interface__Irel__Cainfluxtrack > 5.0000000000000004e-6;
        const double var_x131 = ((var_x130) ? (var_x129 * var_chaste_interface__Irel__APtrack2) : (0));
        const double var_x132 = 0.0070588235294117632 * var_x131;
        const double var_x133 = 0.00092000000000000003 + var_chaste_interface__Ionic_concentrations__Cai;
        const double var_x134 = 1 / var_x133;
        const double var_x135 = 0.00036529411764705876 * var_x134;
        const double var_x136 = var_chaste_interface__Ionic_concentrations__Cai / pow(var_x133, 2);
        const double var_x137 = var_x76 + var_x83 - var_x80;
        const double var_x138 = var_x120;
        const double var_x139 = -var_chaste_interface__Ionic_concentrations__Cai + var_chaste_interface__Ionic_concentrations__Ca_JSR;
        const double var_x140 = var_x69 * var_x71;
        const double var_x141 = var_x37 * var_x78 - var_x75 * var_x77;
        const double var_x142 = 3.6460865337870681e-8 * var_x122 * var_x78;
        const double var_x143 = var_x142 * var_x35;
        const double var_x144 = var_x142 * var_x34 * NV_Ith_S(mParameters, 8) * var_chaste_interface__ICa_d_gate__d;
        const double var_x145 = ((var_x130) ? (var_x129 - var_x128 * var_chaste_interface__Irel__APtrack2) : (0));
        const double var_x146 = var_x138 * (0.0070588235294117632 * var_chaste_interface__Ionic_concentrations__Ca_JSR - 0.0070588235294117632 * var_chaste_interface__Ionic_concentrations__Cai);
        const double var_x147 = var_x124 * var_chaste_interface__Irel__APtrack2 * NV_Ith_S(mParameters, 0);
        const double var_x148 = ((var_x130) ? (var_x126 * var_x147 - var_x127 * var_x147 / pow(var_x125, 2)) : (0));
        const double var_x149 = var_x107 * var_x122;
        const double var_x150 = 1 / (1.0 - exp(1.0000000000287557e-7));
        const double var_x151 = 1 / (1.0 - exp(-1.0000000000287557e-7));
        const double var_x152 = 47.130000000000003 + var_chaste_interface__cell__V;
        const double var_x153 = fabs(var_x152) < 1.0000000000287557e-6;
        const double var_x154 = -var_x21;
        const double var_x155 = exp(-4.7130000000000001 + var_x154);
        const double var_x156 = 1.0 - var_x155;
        const double var_x157 = 0.32000000000000001 / var_x156;
        const double var_x158 = exp(-0.090909090909090912 * var_chaste_interface__cell__V);
        const double var_x159 = 3.200000000092018e-7 * var_x151;
        const double var_x160 = exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 11) - 0.14705882352941177 * var_chaste_interface__cell__V);
        const double var_x161 = var_chaste_interface__cell__V < -40.0;
        const double var_x162 = ((var_x161) ? (0.13500000000000001 * var_x160) : (0));
        const double var_x163 = var_x162;
        const double var_x164 = exp(var_x60 - 0.34999999999999998 * NV_Ith_S(mParameters, 11));
        const double var_x165 = exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * NV_Ith_S(mParameters, 11));
        const double var_x166 = exp(-0.96036036036036043 - 0.0900900900900901 * NV_Ith_S(mParameters, 11) - 0.0900900900900901 * var_chaste_interface__cell__V);
        const double var_x167 = 1.0 + var_x166;
        const double var_x168 = ((var_x161) ? (310000.0 * var_x164 + 3.5600000000000001 * var_x165) : (7.6923076923076916 / var_x167));
        const double var_x169 = var_x168;
        const double var_x170 = ((var_x161) ? (-0.019852941176470591 * var_x160) : (0));
        const double var_x171 = var_x162 + var_x168;
        const double var_x172 = 0.01 * NV_Ith_S(mParameters, 10);
        const double var_x173 = 1.0 - var_x172;
        const double var_x174 = var_x173 / var_x171;
        const double var_x175 = ((var_x161) ? (0.28123999999999999 * var_x165 + 108500.0 * var_x164) : (0.693000693000693 * var_x166 / pow(var_x167, 2)));
        const double var_x176 = exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 11) - 0.13780000000000001 * var_chaste_interface__cell__V);
        const double var_x177 = 1.0 + var_x176;
        const double var_x178 = exp(0.01052 * NV_Ith_S(mParameters, 11) - 0.01052 * var_chaste_interface__cell__V);
        const double var_x179 = var_x178 / var_x177;
        const double var_x180 = exp(-3.2000000000000002 + var_x154 + 0.10000000000000001 * NV_Ith_S(mParameters, 11));
        const double var_x181 = 1.0 + var_x180;
        const double var_x182 = exp(2.5349999999999999e-7 * NV_Ith_S(mParameters, 11) - 2.5349999999999999e-7 * var_chaste_interface__cell__V);
        const double var_x183 = var_x182 / var_x181;
        const double var_x184 = ((var_x161) ? (0.1212 * var_x179) : (0.29999999999999999 * var_x183));
        const double var_x185 = var_x184;
        const double var_x186 = 37.780000000000001 + var_chaste_interface__cell__V;
        const double var_x187 = exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * NV_Ith_S(mParameters, 11));
        const double var_x188 = 1.0 + var_x187;
        const double var_x189 = 1 / var_x188;
        const double var_x190 = exp(0.24399999999999999 * var_chaste_interface__cell__V - 0.24399999999999999 * NV_Ith_S(mParameters, 11));
        const double var_x191 = exp(0.043909999999999998 * NV_Ith_S(mParameters, 11) - 0.043909999999999998 * var_chaste_interface__cell__V);
        const double var_x192 = -127140.0 * var_x190 - 3.4740000000000003e-5 * var_x191;
        const double var_x193 = var_x189 * var_x192;
        const double var_x194 = ((var_x161) ? (var_x186 * var_x193) : (0));
        const double var_x195 = var_x194;
        const double var_x196 = ((var_x161) ? (var_x193 + var_x186 * var_x189 * (1.5254334000000001e-6 * var_x191 - 31022.16 * var_x190) - 0.311 * var_x186 * var_x187 * var_x192 / pow(var_x188, 2)) : (0));
        const double var_x197 = var_x184 + var_x194;
        const double var_x198 = var_x173 / var_x197;
        const double var_x199 = ((var_x161) ? (-0.001275024 * var_x179 + 0.016701360000000002 * var_x176 * var_x178 / pow(var_x177, 2)) : (-7.6049999999999996e-8 * var_x183 + 0.029999999999999999 * var_x180 * var_x182 / pow(var_x181, 2)));
        const double var_x200 = 1 / sqrt(M_PI);
        const double var_x201 = 0.25101580310038191 * var_x200 * exp(-0.08830693125184777 * pow((-1 + 0.15937778911130945 * var_chaste_interface__cell__V), 2));
        const double var_x202 = 0.63524014987941491 * var_x200 * exp(-0.89836705491478086 * pow((-1 + 0.044722719141323794 * var_chaste_interface__cell__V), 2));
        const double var_x203 = exp(-2.7305064499999996 - 0.27789999999999998 * var_chaste_interface__cell__V);
        const double var_x204 = 1.0 + var_x203;
        const double var_x205 = 1 / var_x204;
        const double var_x206 = exp(-1.06213655 - 0.1081 * var_chaste_interface__cell__V);
        const double var_x207 = 0.0112 + 0.068699999999999997 * var_x206;
        const double var_x208 = exp(-1.0052757950443461 + 0.16333730787449161 * var_chaste_interface__cell__V);
        const double var_x209 = 1.0 + var_x208;
        const double var_x210 = exp(6.9907280000000006e-6 - 0.1348 * var_chaste_interface__cell__V);
        const double var_x211 = 1.0 + var_x210;
        const double var_x212 = 1 / var_x211;
        const double var_x213 = exp(0.67236288 - 0.13439999999999999 * var_chaste_interface__cell__V);
        const double var_x214 = 1.0 - var_chaste_interface__Ito_r_gate__r;
        const double var_x215 = exp(3.9880601600000003 - 0.094299999999999995 * var_chaste_interface__cell__V);
        const double var_x216 = 1.0 + var_x215;
        const double var_x217 = exp(0.70203392000000009 - 0.0166 * var_chaste_interface__cell__V);
        const double var_x218 = var_x217 / var_x216;
        const double var_x219 = 0.51490000000000002 * var_x213 + 5.1860000000000002e-5 * var_chaste_interface__cell__V;
        const double var_x220 = exp(-5.9326369200000002 - 0.17319999999999999 * var_chaste_interface__cell__V);
        const double var_x221 = 1.0 + var_x220;
        const double var_x222 = 1 / var_x221;
        const double var_x223 = 1.0 - var_chaste_interface__Ito_t_gate__t;
        const double var_x224 = exp(-5.9257863000000004 - 0.17299999999999999 * var_chaste_interface__cell__V);
        const double var_x225 = exp(-5.4573693999999993 - 0.16039999999999999 * var_chaste_interface__cell__V);
        const double var_x226 = 1.0 + var_x225;
        const double var_x227 = 1 / var_x226;
        const double var_x228 = exp(-5.6479010000000002e-8 - 1.6600000000000001e-9 * var_chaste_interface__cell__V);
        const double var_x229 = 5.6119999999999998e-5 * var_chaste_interface__cell__V + 0.072099999999999997 * var_x224;
        const double var_x230 = 0.0001215 * var_chaste_interface__cell__V + 0.076700000000000004 * var_x228;
        const double var_x231 = exp(-0.17842998931347828 - 0.069846547135942336 * var_chaste_interface__cell__V);
        const double var_x232 = 1.0 + var_x231;
        const double var_x233 = exp(1.0082174462705435 + 0.063211125158027806 * var_chaste_interface__cell__V);
        const double var_x234 = 1.0 + var_x233;
        const double var_x235 = 1.0 - var_chaste_interface__IKr_Xr_gate__Xr;
        const double var_x236 = exp(-0.51325540000000003 - 0.12620000000000001 * var_chaste_interface__cell__V);
        const double var_x237 = 1.0 + var_x236;
        const double var_x238 = exp(0.0021416822000000003 + 0.00052660000000000001 * var_chaste_interface__cell__V);
        const double var_x239 = var_x238 / var_x237;
        const double var_x240 = exp(5.1411779999999991 + 0.078299999999999995 * var_chaste_interface__cell__V);
        const double var_x241 = 1.0 + var_x240;
        const double var_x242 = exp(0.105056 + 0.0016000000000000001 * var_chaste_interface__cell__V);
        const double var_x243 = var_x242 / var_x241;
        const double var_x244 = (var_chaste_interface__Irel__APtrack > 0.17999999999999999) && (var_chaste_interface__Irel__APtrack < 0.20000000000000001);
        const double var_x245 = var_chaste_interface__Irel__APtrack > 0.20000000000000001;
        const double var_x246 = var_x45 * var_x53;
        const double var_x247 = var_x122 * NV_Ith_S(mParameters, 2);
        const double var_x248 = 0.00012153621779290228 * var_x247;
        const double var_x249 = 0.00036460865337870681 * var_x247;
        const double var_x250 = var_x248 * var_x85;
        const double var_x251 = var_x248 * (var_x90 - var_x95);
        const double var_x252 = 0.80000000000000004 + var_chaste_interface__Ionic_concentrations__Ca_JSR;
        const double var_x253 = pow(var_x252, (-2));
        const double var_x254 = 1 / (1.0 + 8.0 * var_x253);
        const double var_x255 = var_x254;
        const double var_x256 = var_x255 * (-var_chaste_interface__Ionic_concentrations__Ca_JSR + var_chaste_interface__Ionic_concentrations__Cai);
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (-0.0018500000000000001 + var_x39 + var_x41 + var_x73 - var_x1 - var_x10 - var_x28 - var_x32 - var_x37 - var_x59 - var_x7 - var_x46 * var_x53);
        IJth(rJacobian, 1, 0) = -var_x120 * var_x123 * (var_x121 - 2.0 * var_x70 - 0.13 * var_x72);
        IJth(rJacobian, 2, 0) = (1.0 - var_chaste_interface__INa_m_gate__m) * ((var_x153) ? (0.16 * var_x150 + 0.16 * var_x151) : (var_x157 - 0.032000000000000001 * var_x152 * var_x155 / pow(var_x156, 2))) + 0.0072727272727272727 * var_x158 * var_chaste_interface__INa_m_gate__m;
        IJth(rJacobian, 3, 0) = (var_x163 + var_x169) * (var_x170 * var_x174 + var_x162 * var_x173 * (-var_x170 - var_x175) / pow(var_x171, 2)) + (var_x170 + var_x175) * (var_x172 - var_chaste_interface__INa_h_gate__h + var_x162 * var_x174);
        IJth(rJacobian, 4, 0) = (var_x185 + var_x195) * (var_x196 * var_x198 + var_x173 * var_x194 * (-var_x196 - var_x199) / pow(var_x197, 2)) + (var_x196 + var_x199) * (var_x172 - var_chaste_interface__INa_j_gate__j + var_x194 * var_x198);
        IJth(rJacobian, 5, 0) = var_x201 * (0.028148326932247791 - 0.0044862181136439798 * var_chaste_interface__cell__V) * var_chaste_interface__ICa_d_gate__d + var_x202 * (1.0 - var_chaste_interface__ICa_d_gate__d) * (0.080354834965543909 - 0.0035936867158114449 * var_chaste_interface__cell__V);
        IJth(rJacobian, 6, 0) = (0.0074264700000000001 * var_x205 * var_x206 - 0.27789999999999998 * var_x203 * var_x207 / pow(var_x204, 2)) * var_chaste_interface__ICa_f_gate__f - 0.0011224539797135063 * var_x208 * (1.0 - var_chaste_interface__ICa_f_gate__f) / pow(var_x209, 2);
        IJth(rJacobian, 7, 0) = -0.0087415599999999989 * var_x214 * var_x218 - var_x212 * (5.1860000000000002e-5 - 0.069202559999999996 * var_x213) * var_chaste_interface__Ito_r_gate__r + 0.049658379999999995 * var_x214 * var_x215 * var_x217 / pow(var_x216, 2) - 0.1348 * var_x210 * var_x219 * var_chaste_interface__Ito_r_gate__r / pow(var_x211, 2);
        IJth(rJacobian, 8, 0) = var_x222 * var_x223 * (5.6119999999999998e-5 - 0.012473299999999998 * var_x224) - var_x227 * (0.0001215 - 1.2732200000000002e-10 * var_x228) * var_chaste_interface__Ito_t_gate__t + 0.17319999999999999 * var_x220 * var_x223 * var_x229 / pow(var_x221, 2) - 0.16039999999999999 * var_x225 * var_x230 * var_chaste_interface__Ito_t_gate__t / pow(var_x226, 2);
        IJth(rJacobian, 9, 0) = 0.00021044764652059425 * var_x231 * (1.0 - var_chaste_interface__IKs_Xs_gate__Xs) / pow(var_x232, 2) + 0.00037104930467762328 * var_x233 * var_chaste_interface__IKs_Xs_gate__Xs / pow(var_x234, 2);
        IJth(rJacobian, 10, 0) = 2.633e-6 * var_x235 * var_x239 - 2.5600000000000002e-5 * var_x243 * var_chaste_interface__IKr_Xr_gate__Xr + 0.0012527999999999999 * var_x240 * var_x242 * var_chaste_interface__IKr_Xr_gate__Xr / pow(var_x241, 2) + 0.00063100000000000005 * var_x235 * var_x236 * var_x238 / pow(var_x237, 2);
        IJth(rJacobian, 14, 0) = ((var_x245) ? (-var_x123 * (var_x121 + var_x73)) : (0));
        IJth(rJacobian, 18, 0) = -var_x248 * (0.001 + var_x31 + 3.0 * var_x70 + 3.9000000000000004 * var_x246 + 0.19500000000000001 * var_x72);
        IJth(rJacobian, 19, 0) = -var_x248 * (var_x0 + var_x10 + var_x28 + var_x59 + var_x7 - var_x39 - var_x41 - 2.6000000000000001 * var_x246);
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (var_x80 + var_x82 - var_x76 - var_x83);
        IJth(rJacobian, 1, 1) = var_x138 * (-var_x132 - var_x135 + 0.00036529411764705876 * var_x136 - var_x123 * (var_x137 + 2.0 * var_x81)) + (0.00023800000000000004 / pow(var_x117, 3) + 7.0000000000000007e-5 / pow(var_x118, 3)) * (2.1105882352941172e-5 * var_chaste_interface__Ionic_concentrations__Ca_NSR + var_x132 * var_x139 - var_x123 * (var_x141 + 0.00084999999999999995 * var_chaste_interface__cell__V - 2.0 * var_x140) - var_x135 * var_chaste_interface__Ionic_concentrations__Cai) / pow(var_x119, 2);
        IJth(rJacobian, 14, 1) = ((var_x245) ? (-var_x123 * (var_x137 + var_x82)) : (0));
        IJth(rJacobian, 18, 1) = var_x249 * var_x81;
        IJth(rJacobian, 20, 1) = var_x131 * var_x255;
        IJth(rJacobian, 21, 1) = 0.0044999999999999997 * var_x134 - 0.0044999999999999997 * var_x136;
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (-3.0 * var_x87);
        IJth(rJacobian, 2, 2) = -((var_x153) ? (var_x159 - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-var_x159 - 3.200000000092018e-7 * var_x150)) : (var_x152 * var_x157)) - 0.080000000000000002 * var_x158;
        IJth(rJacobian, 18, 2) = -var_x249 * var_x87;
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x30 * var_x88);
        IJth(rJacobian, 3, 3) = -var_x163 - var_x169;
        IJth(rJacobian, 18, 3) = -var_x250 * var_x30;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x88 * var_x89);
        IJth(rJacobian, 4, 4) = -var_x185 - var_x195;
        IJth(rJacobian, 18, 4) = -var_x250 * var_x89;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x36 * var_x78);
        IJth(rJacobian, 1, 5) = -var_x120 * var_x143;
        IJth(rJacobian, 5, 5) = -0.14710000000000001 + var_x201 - var_x202;
        IJth(rJacobian, 14, 5) = ((var_x245) ? (-var_x143) : (0));
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x34 * var_x79);
        IJth(rJacobian, 1, 6) = -var_x120 * var_x144;
        IJth(rJacobian, 6, 6) = -0.00054739999999999997 - 0.0068719999999999996 / var_x209 - var_x205 * var_x207;
        IJth(rJacobian, 14, 6) = ((var_x245) ? (-var_x144) : (0));
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (var_x96 * var_chaste_interface__Ito_t_gate__t);
        IJth(rJacobian, 7, 7) = -0.52659999999999996 * var_x218 - var_x212 * var_x219;
        IJth(rJacobian, 19, 7) = -var_x251 * var_x8;
        IJth(rJacobian, 0, 8) = mSetVoltageDerivativeToZero ? 0.0 : (var_x96 * var_chaste_interface__Ito_r_gate__r);
        IJth(rJacobian, 8, 8) = -var_x222 * var_x229 - var_x227 * var_x230;
        IJth(rJacobian, 19, 8) = -var_x251 * NV_Ith_S(mParameters, 16) * var_chaste_interface__Ito_r_gate__r;
        IJth(rJacobian, 0, 9) = mSetVoltageDerivativeToZero ? 0.0 : (-2.0 * var_x99);
        IJth(rJacobian, 9, 9) = -0.0058700000000000002 / var_x234 - 0.0030130000000000001 / var_x232;
        IJth(rJacobian, 19, 9) = -0.00024307243558580456 * var_x247 * var_x99;
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x100 * var_x6);
        IJth(rJacobian, 10, 10) = -0.016 * var_x243 - 0.0050000000000000001 * var_x239;
        IJth(rJacobian, 19, 10) = -var_x100 * var_x248 * var_x5;
        IJth(rJacobian, 11, 11) = ((var_x141 + var_x140 + 0.0018500000000000001 * var_chaste_interface__cell__V - 0.001 * var_x84 + var_x1 * var_x98 + var_x10 * (-var_x94 + var_chaste_interface__cell__V) + var_x105 * var_x46 + var_x28 * var_x38 + var_x32 * var_x85 + var_x38 * var_x7 + GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance() < -150.0) ? (-100.5) : (-0.5));
        IJth(rJacobian, 1, 12) = var_x145 * var_x146;
        IJth(rJacobian, 12, 12) = ((var_x244) ? (-100.5) : (-0.5));
        IJth(rJacobian, 20, 12) = var_x145 * var_x256;
        IJth(rJacobian, 13, 13) = ((var_x244) ? (-100.5) : (-0.01));
        IJth(rJacobian, 1, 14) = var_x146 * var_x148;
        IJth(rJacobian, 14, 14) = (((var_x245) || (var_chaste_interface__Irel__APtrack2 > 0.01)) ? (0) : (-0.5));
        IJth(rJacobian, 20, 14) = var_x148 * var_x256;
        IJth(rJacobian, 0, 18) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x102 - var_x104 - var_x109 - 3.0 * var_x107 - 0.061664414373283398 * var_x106 - var_x101 * var_x32);
        IJth(rJacobian, 1, 18) = 0.00036460865337870681 * var_x120 * var_x149;
        IJth(rJacobian, 14, 18) = ((var_x245) ? (0.00018230432668935341 * var_x149) : (0));
        IJth(rJacobian, 18, 18) = -var_x248 * (var_x102 + 9.0 * var_x107 + 0.18499324311985019 * var_x106 + var_x101 * var_x31);
        IJth(rJacobian, 19, 18) = -var_x248 * (var_x104 + var_x109 - 0.1233288287465668 * var_x106);
        IJth(rJacobian, 0, 19) = mSetVoltageDerivativeToZero ? 0.0 : (var_x116 - var_x111 - var_x112 - var_x113 - var_x114 - var_x115);
        IJth(rJacobian, 19, 19) = -var_x248 * (var_x111 + var_x112 + var_x113 + var_x114 + var_x115 - var_x116);
        IJth(rJacobian, 1, 20) = var_x120 * var_x132;
        IJth(rJacobian, 20, 20) = var_x255 * (-0.0055555555555555558 - var_x131) + 0.25 * (0.0055555555555555558 * var_chaste_interface__Ionic_concentrations__Ca_NSR - 0.0055555555555555558 * var_chaste_interface__Ionic_concentrations__Ca_JSR - var_x131 * var_x139) / (pow(var_x252, 3) * pow((0.125 + var_x253), 2));
        IJth(rJacobian, 21, 20) = 0.00048309178743961351;
        IJth(rJacobian, 1, 21) = 2.1105882352941172e-5 * var_x120;
        IJth(rJacobian, 20, 21) = 0.0055555555555555558 * var_x254;
        IJth(rJacobian, 21, 21) = -0.00074309178743961349;
    }

    N_Vector Cellpriebe_beuckelmann_1998FromCellMLCvode::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 1.75032478501027e-05
        double var_chaste_interface__Ito_t_gate__t = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Irel__APtrack2 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: -7.58517896402761e-136
        double var_chaste_interface__Irel__Cainfluxtrack = NV_Ith_S(rY, 14);
        // Units: mM; Initial value: -7.71120176147331e-138
        double var_chaste_interface__Ionic_concentrations__Nai = NV_Ith_S(rY, 18);
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__Ionic_concentrations__Ki = NV_Ith_S(rY, 19);
        // Units: mM; Initial value: 140.0
        double var_chaste_interface__Ionic_concentrations__Ca_JSR = NV_Ith_S(rY, 20);
        // Units: mM; Initial value: 2.5
        double var_chaste_interface__Ionic_concentrations__Ca_NSR = NV_Ith_S(rY, 21);
        // Units: mM; Initial value: 2.5
        
        // Mathematics
        const double var_ICa_f_Ca_gate__Km_Ca = 0.00059999999999999995; // mM
        const double var_INaCa__K_mCa = 1.3799999999999999; // mM
        const double var_INaCa__K_mNa = 87.5; // mM
        const double var_INaCa__K_sat = 0.10000000000000001; // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_ICa_f_Ca_gate__f_Ca = var_ICa_f_Ca_gate__Km_Ca / (var_ICa_f_Ca_gate__Km_Ca + var_chaste_interface__Ionic_concentrations__Cai); // dimensionless
        const double var_Irel__K_mrel = 0.00080000000000000004; // mM
        const double var_Irel__delta_Ca_ith = 5.0000000000000004e-6; // mM
        const double var_Irel__G_rel = ((var_chaste_interface__Irel__Cainfluxtrack > var_Irel__delta_Ca_ith) ? ((1.0 - var_chaste_interface__Irel__APtrack2) * (-var_Irel__delta_Ca_ith + var_chaste_interface__Irel__Cainfluxtrack) * var_chaste_interface__Irel__APtrack2 * NV_Ith_S(mParameters, 0) / (-var_Irel__delta_Ca_ith + var_chaste_interface__Irel__Cainfluxtrack + var_Irel__K_mrel)) : (0)); // per_ms
        const double var_Irel__i_rel = (-var_chaste_interface__Ionic_concentrations__Cai + var_chaste_interface__Ionic_concentrations__Ca_JSR) * var_Irel__G_rel; // mM_per_ms
        const double var_Iup__K_mup = 0.00092000000000000003; // mM
        const double var_cell__Cm_converted = 9.9999999999999995e-7 * NV_Ith_S(mParameters, 1); // uF
        const double var_cell__FonRT = NV_Ith_S(mParameters, 6) / (NV_Ith_S(mParameters, 7) * NV_Ith_S(mParameters, 17)); // per_mV
        const double var_ICa__E_Ca = 0.5 * log(NV_Ith_S(mParameters, 3) / var_chaste_interface__Ionic_concentrations__Cai) / var_cell__FonRT; // mV
        const double var_IK1__E_K1 = log(NV_Ith_S(mParameters, 4) / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_IKr__E_K = log(NV_Ith_S(mParameters, 4) / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_IKs__E_Ks = log((NV_Ith_S(mParameters, 4) + 0.018329999999999999 * NV_Ith_S(mParameters, 5)) / (var_chaste_interface__Ionic_concentrations__Ki + 0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT; // mV
        const double var_INa__E_Na = log(NV_Ith_S(mParameters, 5) / var_chaste_interface__Ionic_concentrations__Nai) / var_cell__FonRT; // mV
        const double var_Ito__E_to = log((NV_Ith_S(mParameters, 4) + 0.042999999999999997 * NV_Ith_S(mParameters, 5)) / (var_chaste_interface__Ionic_concentrations__Ki + 0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT; // mV
        const double var_ICa__i_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 8) * var_chaste_interface__ICa_d_gate__d * var_ICa_f_Ca_gate__f_Ca * var_chaste_interface__ICa_f_gate__f; // uA_per_uF
        const double var_ICa__i_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_ICa__i_Ca; // uA_per_cm2
        const double var_ICa_f_gate__alpha_f = 0.0068719999999999996 / (1.0 + exp(-1.0052757950443461 + 0.16333730787449161 * var_chaste_interface__cell__V)); // per_ms
        const double var_ICa_f_gate__beta_f = 0.00054739999999999997 + (0.0112 + 0.068699999999999997 * exp(-1.06213655 - 0.1081 * var_chaste_interface__cell__V)) / (1.0 + exp(-2.7305064499999996 - 0.27789999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_ICa_f_gate__tau_f = 1 / (var_ICa_f_gate__alpha_f + var_ICa_f_gate__beta_f); // ms
        const double var_IK1_K1_gate__alpha_K1 = 0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)); // per_ms
        const double var_IK1_K1_gate__beta_K1 = (exp(-1.0 + 0.10000000000000001 * var_chaste_interface__cell__V - 0.10000000000000001 * var_IK1__E_K1) + 3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.00020000000000000001 * var_IK1__E_K1)) / (1.0 + exp(0.5 * var_IK1__E_K1 - 0.5 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1_K1_gate__K1_infinity = var_IK1_K1_gate__alpha_K1 / (var_IK1_K1_gate__alpha_K1 + var_IK1_K1_gate__beta_K1); // dimensionless
        const double var_IKr__rik = 1 / (1.0 + exp(1.1304347826086956 + 0.043478260869565216 * var_chaste_interface__cell__V)); // dimensionless
        const double var_IKr__i_Kr = (-var_IKr__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 13) * var_IKr__rik * var_chaste_interface__IKr_Xr_gate__Xr; // uA_per_uF
        const double var_IKr__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_IKr__i_Kr; // uA_per_cm2
        const double var_IKs__i_Ks = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (-var_IKs__E_Ks + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 14); // uA_per_uF
        const double var_IKs__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_IKs__i_Ks; // uA_per_cm2
        const double var_INa__i_Na = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_INa__E_Na + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 9) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INa__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_INa__i_Na; // uA_per_cm2
        const double var_INa_h_gate__alpha_h = ((var_chaste_interface__cell__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 11) - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_ms
        const double var_INa_h_gate__beta_h = ((var_chaste_interface__cell__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V - 0.34999999999999998 * NV_Ith_S(mParameters, 11)) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * NV_Ith_S(mParameters, 11))) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * NV_Ith_S(mParameters, 11) - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INa_h_gate__tau_h = 1 / (var_INa_h_gate__alpha_h + var_INa_h_gate__beta_h); // ms
        const double var_INa_j_gate__alpha_j = ((var_chaste_interface__cell__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24399999999999999 * var_chaste_interface__cell__V - 0.24399999999999999 * NV_Ith_S(mParameters, 11)) - 3.4740000000000003e-5 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 11) - 0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * NV_Ith_S(mParameters, 11)))) : (0)); // per_ms
        const double var_INa_j_gate__beta_j = ((var_chaste_interface__cell__V < -40.0) ? (0.1212 * exp(0.01052 * NV_Ith_S(mParameters, 11) - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 11) - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.29999999999999999 * exp(2.5349999999999999e-7 * NV_Ith_S(mParameters, 11) - 2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 11) - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INa_j_gate__tau_j = 1 / (var_INa_j_gate__alpha_j + var_INa_j_gate__beta_j); // ms
        const double var_cell__failing = 0; // dimensionless
        const double var_ICab__g_b_Ca_max = ((var_cell__failing == 0) ? (0.00084999999999999995) : (0.0012999999999999999)); // mS_per_uF
        const double var_ICab__i_b_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * var_ICab__g_b_Ca_max; // uA_per_uF
        const double var_ICab__i_b_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_ICab__i_b_Ca; // uA_per_cm2
        const double var_IK1__g_K1_max = ((var_cell__failing == 0) ? (2.5) : (2.0)); // mS_per_uF
        const double var_IK1__i_K1 = (-var_IK1__E_K1 + var_chaste_interface__cell__V) * var_IK1__g_K1_max * NV_Ith_S(mParameters, 12) * var_IK1_K1_gate__K1_infinity; // uA_per_uF
        const double var_IK1__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_IK1__i_K1; // uA_per_cm2
        const double var_INaCa__K_NaCa = ((var_cell__failing == 0) ? (NV_Ith_S(mParameters, 15)) : (1650.0)); // uA_per_uF
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Ionic_concentrations__Nai, 3) * NV_Ith_S(mParameters, 3) * exp(var_INaCa__eta * var_cell__FonRT * var_chaste_interface__cell__V) - pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__Ionic_concentrations__Cai * exp((-1.0 + var_INaCa__eta) * var_cell__FonRT * var_chaste_interface__cell__V)) * var_INaCa__K_NaCa / ((1.0 + var_INaCa__K_sat * exp((-1.0 + var_INaCa__eta) * var_cell__FonRT * var_chaste_interface__cell__V)) * (pow(var_INaCa__K_mNa, 3) + pow(NV_Ith_S(mParameters, 5), 3)) * (var_INaCa__K_mCa + NV_Ith_S(mParameters, 3))); // uA_per_uF
        const double var_INaCa__i_NaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa__i_NaCa; // uA_per_cm2
        const double var_INab__g_b_Na_max = ((var_cell__failing == 0) ? (0.001) : (0)); // mS_per_uF
        const double var_INab__i_b_Na = (-var_INa__E_Na + var_chaste_interface__cell__V) * var_INab__g_b_Na_max; // uA_per_uF
        const double var_INab__i_b_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_INab__i_b_Na; // uA_per_cm2
        const double var_Ileak__K_leak = ((var_cell__failing == 0) ? (0.00025999999999999998) : (0.00017000000000000001)); // per_ms
        const double var_Ileak__i_leak = var_Ileak__K_leak * var_chaste_interface__Ionic_concentrations__Ca_NSR; // mM_per_ms
        const double var_Ito__g_to_max = ((var_cell__failing == 0) ? (0.29999999999999999 * NV_Ith_S(mParameters, 16)) : (0.191 * NV_Ith_S(mParameters, 16))); // mS_per_uF
        const double var_Ito__i_to = (-var_Ito__E_to + var_chaste_interface__cell__V) * var_Ito__g_to_max * var_chaste_interface__Ito_r_gate__r * var_chaste_interface__Ito_t_gate__t; // uA_per_uF
        const double var_Ito__i_to_converted = HeartConfig::Instance()->GetCapacitance() * var_Ito__i_to; // uA_per_cm2
        const double var_Iup__I_up_max = ((var_cell__failing == 0) ? (0.0044999999999999997) : (0.0015)); // mM_per_ms
        const double var_Iup__i_up = var_chaste_interface__Ionic_concentrations__Cai * var_Iup__I_up_max / (var_chaste_interface__Ionic_concentrations__Cai + var_Iup__K_mup); // mM_per_ms
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(26);
        NV_Ith_S(dqs, 0) = var_Ileak__i_leak;
        NV_Ith_S(dqs, 1) = var_Irel__i_rel;
        NV_Ith_S(dqs, 2) = var_Iup__i_up;
        NV_Ith_S(dqs, 3) = var_Iup__I_up_max;
        NV_Ith_S(dqs, 4) = var_ICa__E_Ca;
        NV_Ith_S(dqs, 5) = var_ICa__i_Ca_converted;
        NV_Ith_S(dqs, 6) = var_ICa_f_Ca_gate__f_Ca;
        NV_Ith_S(dqs, 7) = var_ICa_f_gate__tau_f;
        NV_Ith_S(dqs, 8) = var_ICab__i_b_Ca_converted;
        NV_Ith_S(dqs, 9) = var_ICab__g_b_Ca_max;
        NV_Ith_S(dqs, 10) = var_INab__i_b_Na_converted;
        NV_Ith_S(dqs, 11) = var_INab__g_b_Na_max;
        NV_Ith_S(dqs, 12) = var_cell__Cm_converted;
        NV_Ith_S(dqs, 13) = var_INa__i_Na_converted;
        NV_Ith_S(dqs, 14) = var_INa_h_gate__tau_h;
        NV_Ith_S(dqs, 15) = var_INa_j_gate__tau_j;
        NV_Ith_S(dqs, 16) = var_IK1__i_K1_converted;
        NV_Ith_S(dqs, 17) = var_IKr__i_Kr_converted;
        NV_Ith_S(dqs, 18) = var_IKs__i_Ks_converted;
        NV_Ith_S(dqs, 19) = var_INaCa__i_NaCa_converted;
        NV_Ith_S(dqs, 20) = var_cell__i_Stim_converted;
        NV_Ith_S(dqs, 21) = var_Ito__i_to_converted;
        NV_Ith_S(dqs, 22) = var_Ito__g_to_max;
        NV_Ith_S(dqs, 23) = var_IKr__E_K;
        NV_Ith_S(dqs, 24) = var_INa__E_Na;
        NV_Ith_S(dqs, 25) = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellpriebe_beuckelmann_1998FromCellMLCvode>::Initialise(void)
{
    this->mSystemName = "priebe_beuckelmann_1998";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "ms";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-90.7796417483135);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.0002);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000585525582501575);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.995865529216237);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.997011204496203);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.50653215966786e-10);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.92130376850548);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("Ito_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.75032478501027e-05);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("Ito_t_gate__t");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999897251531651);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("IKs_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00885658064818147);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("IKr_Xr_gate__Xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000215523048438941);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("Irel__APtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(-1.372158997089e-136);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("Irel__APtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(-7.58517896402761e-136);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("Irel__APtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(4.82035353592764e-05);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("Irel__Cainfluxtrack");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(-7.71120176147331e-138);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("Irel__OVRLDtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-06);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("Irel__OVRLDtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-06);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("Irel__OVRLDtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-06);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(10.0);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(140.0);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(2.5);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("NSR_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(2.5);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_ms");

    // mParameters[1]:
    this->mParameterNames.push_back("cell__Cm");
    this->mParameterUnits.push_back("pF");

    // mParameters[2]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[6]:
    this->mParameterNames.push_back("faraday_constant");
    this->mParameterUnits.push_back("coulomb_per_millimole");

    // mParameters[7]:
    this->mParameterNames.push_back("gas_constant");
    this->mParameterUnits.push_back("joule_per_mole_kelvin");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("mV");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[17]:
    this->mParameterNames.push_back("temperature");
    this->mParameterUnits.push_back("kelvin");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_leak_current");
    this->mDerivedQuantityUnits.push_back("mM_per_ms");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("mM_per_ms");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("SR_uptake_current");
    this->mDerivedQuantityUnits.push_back("mM_per_ms");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("SR_uptake_current_max");
    this->mDerivedQuantityUnits.push_back("mM_per_ms");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("calcium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("mV");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f_gate_tau");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_background_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_background_calcium_current_conductance");
    this->mDerivedQuantityUnits.push_back("mS_per_uF");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_background_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_background_sodium_current_conductance");
    this->mDerivedQuantityUnits.push_back("mS_per_uF");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_capacitance");
    this->mDerivedQuantityUnits.push_back("uF");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [17]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [18]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [19]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [20]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [21]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [22]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current_conductance");
    this->mDerivedQuantityUnits.push_back("mS_per_uF");

    // Derived Quantity index [23]:
    this->mDerivedQuantityNames.push_back("potassium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("mV");

    // Derived Quantity index [24]:
    this->mDerivedQuantityNames.push_back("sodium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("mV");

    // Derived Quantity index [25]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("ms");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellpriebe_beuckelmann_1998FromCellMLCvode)

#endif // CHASTE_CVODE
