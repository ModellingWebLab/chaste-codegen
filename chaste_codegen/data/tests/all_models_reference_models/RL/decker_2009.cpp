//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: decker_2009
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on (date omitted as unimportant)
//! 
//! <autogenerated>

#include "decker_2009.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Dynamicdecker_2009FromCellMLRushLarsen::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_offset = 0.0; // millisecond
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_duration = 0.5; // millisecond
        const double var_chaste_interface__membrane__stim_amplitude =  -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double Dynamicdecker_2009FromCellMLRushLarsen::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    
    Dynamicdecker_2009FromCellMLRushLarsen::Dynamicdecker_2009FromCellMLRushLarsen(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractRushLarsenCardiacCell(
                48,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamicdecker_2009FromCellMLRushLarsen>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
    }
    
    Dynamicdecker_2009FromCellMLRushLarsen::~Dynamicdecker_2009FromCellMLRushLarsen()
    {
    }
    
    double Dynamicdecker_2009FromCellMLRushLarsen::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.472528
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: millimolar; Initial value: 7.09945e-5
        double var_chaste_interface__IKs__O1 = rY[17];
        // Units: dimensionless; Initial value: 1.051906959485266e-5
        double var_chaste_interface__IKs__O2 = rY[18];
        // Units: dimensionless; Initial value: 2.372219883411999e-6
        double var_chaste_interface__ICaL__O = rY[20];
        // Units: dimensionless; Initial value: 2.27419494597377e-5
        double var_chaste_interface__ICaL__O_star = rY[22];
        // Units: dimensionless; Initial value: 1.350122566369778e-15
        double var_chaste_interface__INa_m_gate__m = rY[27];
        // Units: dimensionless; Initial value: 0.001022252813581797
        double var_chaste_interface__INa_h_gate__h = rY[28];
        // Units: dimensionless; Initial value: 0.9913109066867
        double var_chaste_interface__INa_j_gate__j = rY[29];
        // Units: dimensionless; Initial value: 0.9970771239754529
        double var_chaste_interface__INaL_mL_gate__mL = rY[30];
        // Units: dimensionless; Initial value: 0.001022252813581797
        double var_chaste_interface__INaL_hL_gate__hL = rY[31];
        // Units: dimensionless; Initial value: 0.3593255076983574
        double var_chaste_interface__IKr_xr_gate__xr = rY[32];
        // Units: dimensionless; Initial value: 1.235996442041028e-8
        double var_chaste_interface__Ito1_a_gate__a = rY[33];
        // Units: dimensionless; Initial value: 1.773318268499115e-5
        double var_chaste_interface__Ito1_i1f_gate__i1f = rY[34];
        // Units: dimensionless; Initial value: 0.9979722
        double var_chaste_interface__Ito1_i1s_gate__i1s = rY[35];
        // Units: dimensionless; Initial value: 0.9874435
        double var_chaste_interface__Ito2_i2f_gate__i2f = rY[36];
        // Units: dimensionless; Initial value: 0.9960352
        double var_chaste_interface__Irel__Irel = rY[37];
        // Units: mM_per_ms; Initial value: 0.00107332
        double var_chaste_interface__Ca__Ca_ss_sr = rY[40];
        // Units: mM; Initial value: 9.04757e-5
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[41];
        // Units: mM; Initial value: 9.61545e-5
        double var_chaste_interface__Na__Na_i = rY[42];
        // Units: mM; Initial value: 6.935575
        double var_chaste_interface__Na__Na_ss_sr = rY[43];
        // Units: mM; Initial value: 6.935607
        double var_chaste_interface__Cl__Cl_i = rY[44];
        // Units: mM; Initial value: 20.26842
        double var_chaste_interface__K__K_i = rY[46];
        // Units: mM; Initial value: 145.5689
        
        const double var_chaste_interface__membrane__i_Stim = 0.0;
        const double var_ICaL__PCa = 0.00015552; // L_per_F_ms
        const double var_ICaL__ICaL = ((((var_ICaL__PCa * var_chaste_interface__membrane__Vm * 37238964676.0) * 3.8799692706433766e-07) * ((1.0 * var_chaste_interface__Ca__Ca_ss_CaL * exp((var_chaste_interface__membrane__Vm * 192974.0) * 3.8799692706433766e-07)) - 0.61380000000000001)) / (exp((var_chaste_interface__membrane__Vm * 192974.0) * 3.8799692706433766e-07) - 1.0)) * (var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__O_star); // uA_per_uF
        const double var_INaCa__INaCa_ss_sr = (((pow(var_chaste_interface__Na__Na_ss_sr, 3.0) * 1.8 * exp((var_chaste_interface__membrane__Vm * 26051.490000000002) * 3.8799692706433766e-07)) - (2744000.0 * var_chaste_interface__Ca__Ca_ss_sr * exp((var_chaste_interface__membrane__Vm *  -70435.509999999995) * 3.8799692706433766e-07))) * 0.90000000000000002) / ((1.0 + pow(0.000125 / var_chaste_interface__Ca__Ca_ss_sr, 2.0)) * (1.0 + (0.32000000000000001 * exp((var_chaste_interface__membrane__Vm *  -70435.509999999995) * 3.8799692706433766e-07))) * (((1.3 * pow(var_chaste_interface__Na__Na_ss_sr, 3.0)) + (669921.875 * var_chaste_interface__Ca__Ca_ss_sr) + ((1.0 + (var_chaste_interface__Ca__Ca_ss_sr * 277.77777777777777)) * 3349.5606000000007)) + (((1.0 + pow(var_chaste_interface__Na__Na_ss_sr * 0.081300813008130079, 3.0)) * 9878.3999999999996) + (pow(var_chaste_interface__Na__Na_ss_sr, 3.0) * 1.8) + (2744000.0 * var_chaste_interface__Ca__Ca_ss_sr)))); // uA_per_uF
        const double var_IpCa__IpCa = (0.057500000000000002 * var_chaste_interface__Ca__Ca_i) / (0.00050000000000000001 + var_chaste_interface__Ca__Ca_i); // uA_per_uF
        const double var_ICab__ICab = (((var_chaste_interface__membrane__Vm * 7429.4862601652785) * 3.8799692706433766e-07) * ((1.0 * var_chaste_interface__Ca__Ca_i * exp((var_chaste_interface__membrane__Vm * 192974.0) * 3.8799692706433766e-07)) - 0.61380000000000001)) / (exp((var_chaste_interface__membrane__Vm * 192974.0) * 3.8799692706433766e-07) - 1.0); // uA_per_uF
        const double var_INaCa__INaCa = (((pow(var_chaste_interface__Na__Na_i, 3.0) * 1.8 * exp((var_chaste_interface__membrane__Vm * 26051.490000000002) * 3.8799692706433766e-07)) - (2744000.0 * var_chaste_interface__Ca__Ca_i * exp((var_chaste_interface__membrane__Vm *  -70435.509999999995) * 3.8799692706433766e-07))) * 3.6000000000000001) / ((1.0 + pow(0.000125 / var_chaste_interface__Ca__Ca_i, 2.0)) * (1.0 + (0.32000000000000001 * exp((var_chaste_interface__membrane__Vm *  -70435.509999999995) * 3.8799692706433766e-07))) * (((1.3 * pow(var_chaste_interface__Na__Na_i, 3.0)) + (669921.875 * var_chaste_interface__Ca__Ca_i) + ((1.0 + (var_chaste_interface__Ca__Ca_i * 277.77777777777777)) * 3349.5606000000007)) + (((1.0 + pow(var_chaste_interface__Na__Na_i * 0.081300813008130079, 3.0)) * 9878.3999999999996) + (pow(var_chaste_interface__Na__Na_i, 3.0) * 1.8) + (2744000.0 * var_chaste_interface__Ca__Ca_i)))); // uA_per_uF
        const double var_membrane__caiont = (var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa) - (2.0 * (var_INaCa__INaCa + var_INaCa__INaCa_ss_sr)); // uA_per_uF
        const double var_INa__g_Na = 9.0749999999999993; // mS_per_uF
        const double var_reversal_potentials__ENa = 26.711785007306684 * log(140.0 / var_chaste_interface__Na__Na_i); // mV
        const double var_INa__INa = var_INa__g_Na * pow(var_chaste_interface__INa_m_gate__m, 3.0) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j * (var_chaste_interface__membrane__Vm - var_reversal_potentials__ENa); // uA_per_uF
        const double var_INab__phi = (96487.0 * var_chaste_interface__membrane__Vm) * 3.8799692706433766e-07; // dimensionless
        const double var_INab__INab = (var_INab__phi * ((var_chaste_interface__Na__Na_i * exp(var_INab__phi)) - 140.0) * 0.00030875839999999999) / (exp(var_INab__phi) - 1.0); // uA_per_uF
        const double var_INaL__INaL = 0.0064999999999999997 * pow(var_chaste_interface__INaL_mL_gate__mL, 3.0) * var_chaste_interface__INaL_hL_gate__hL * (var_chaste_interface__membrane__Vm - var_reversal_potentials__ENa); // uA_per_uF
        const double var_INaK__INaK = (1.0 / (1.0 + exp(-(((var_chaste_interface__membrane__Vm -  -92.0) * 96487.0) * 3.8799692706433766e-07)))) * pow(var_chaste_interface__Na__Na_i / (var_chaste_interface__Na__Na_i + 2.6000000000000001), 3.0) * 1.0956521739130434; // uA_per_uF
        const double var_membrane__naiont = var_INa__INa + (3.0 * (var_INaCa__INaCa + var_INaCa__INaCa_ss_sr)) + (3.0 * var_INaK__INaK) + var_INaL__INaL + var_INab__INab; // uA_per_uF
        const double var_reversal_potentials__EK = 26.711785007306684 * log(5.4000000000000004 / var_chaste_interface__K__K_i); // mV
        const double var_Ito1__Ito1 = 0.4975 * pow(var_chaste_interface__Ito1_a_gate__a, 3.0) * var_chaste_interface__Ito1_i1f_gate__i1f * var_chaste_interface__Ito1_i1s_gate__i1s * exp(var_chaste_interface__membrane__Vm * 0.0018181818181818182) * (var_chaste_interface__membrane__Vm - var_reversal_potentials__EK); // uA_per_uF
        const double var_IKr__gKr_max = 0.013854200000000001; // mS_per_uF
        const double var_IKr__IKr = (var_IKr__gKr_max * 1.0) * var_chaste_interface__IKr_xr_gate__xr * (1.0 / (1.0 + exp((var_chaste_interface__membrane__Vm + 10.0) * 0.064935064935064929))) * (var_chaste_interface__membrane__Vm - var_reversal_potentials__EK); // uA_per_uF
        const double var_IKs__IKs = (0.082600000000000007 * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_chaste_interface__Ca__Ca_i, 1.3999999999999999))))) * (var_chaste_interface__IKs__O1 + var_chaste_interface__IKs__O2) * (var_chaste_interface__membrane__Vm - (26.711785007306684 * log(7.9662000000000006 / (var_chaste_interface__K__K_i + (0.018329999999999999 * var_chaste_interface__Na__Na_i))))); // uA_per_uF
        const double var_IKp__IKp = 0.0027599999999999999 * (1.0 / (1.0 + exp((7.4880000000000004 - var_chaste_interface__membrane__Vm) * 0.16722408026755853))) * (var_chaste_interface__membrane__Vm - var_reversal_potentials__EK); // uA_per_uF
        const double var_IK1_K1_gate__alpha_k1 = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__membrane__Vm - var_reversal_potentials__EK) - 59.215000000000003))); // dimensionless
        const double var_IK1__IK1 = 0.5 * (var_IK1_K1_gate__alpha_k1 / (var_IK1_K1_gate__alpha_k1 + (((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__membrane__Vm - var_reversal_potentials__EK) + 5.476))) + exp(0.061749999999999999 * ((var_chaste_interface__membrane__Vm - var_reversal_potentials__EK) - 594.30999999999995))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__membrane__Vm - var_reversal_potentials__EK) + 4.7530000000000001)))))) * (var_chaste_interface__membrane__Vm - var_reversal_potentials__EK); // uA_per_uF
        const double var_membrane__kiont = var_IKr__IKr + var_IKs__IKs + var_IK1__IK1 + var_IKp__IKp + ( -2.0 * var_INaK__INaK) + var_Ito1__Ito1 + (var_chaste_interface__membrane__i_Stim / HeartConfig::Instance()->GetCapacitance()); // uA_per_uF
        const double var_reversal_potentials__ECl =  -26.711785007306684 * log(100.0 / var_chaste_interface__Cl__Cl_i); // mV
        const double var_IClb__IClb = 0.00022499999999999999 * (var_chaste_interface__membrane__Vm - var_reversal_potentials__ECl); // uA_per_uF
        const double var_Ito2__Ito2 = ((((var_chaste_interface__membrane__Vm * 8378.7670521) * 3.8799692706433766e-07) * (var_chaste_interface__Cl__Cl_i - (100.0 * exp((var_chaste_interface__membrane__Vm * 96487.0) * 3.8799692706433766e-07)))) / (1.0 - exp((var_chaste_interface__membrane__Vm * 96487.0) * 3.8799692706433766e-07))) * var_chaste_interface__Ito2_i2f_gate__i2f * (1.0 - (1.0 / (1.0 + pow(var_chaste_interface__Irel__Irel * 2.5, 2.0)))); // uA_per_uF
        const double var_membrane__clont = var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
        const double var_chaste_interface__i_ionic = (var_membrane__naiont + var_membrane__kiont + var_membrane__caiont + var_membrane__clont) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamicdecker_2009FromCellMLRushLarsen::EvaluateEquations(double var_chaste_interface__environment__time, std::vector<double> &rDY, std::vector<double> &rAlphaOrTau, std::vector<double> &rBetaOrInf)
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.472528
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: millimolar; Initial value: 7.09945e-5
        double var_chaste_interface__IKs__C1 = rY[2];
        // Units: dimensionless; Initial value: 0.476653873938053
        double var_chaste_interface__IKs__C2 = rY[3];
        // Units: dimensionless; Initial value: 0.2551771850026437
        double var_chaste_interface__IKs__C3 = rY[4];
        // Units: dimensionless; Initial value: 0.05122852186842027
        double var_chaste_interface__IKs__C4 = rY[5];
        // Units: dimensionless; Initial value: 0.004570874421666423
        double var_chaste_interface__IKs__C5 = rY[6];
        // Units: dimensionless; Initial value: 0.0001529389211563687
        double var_chaste_interface__IKs__C6 = rY[7];
        // Units: dimensionless; Initial value: 0.1328281770413747
        double var_chaste_interface__IKs__C7 = rY[8];
        // Units: dimensionless; Initial value: 0.05333228495514583
        double var_chaste_interface__IKs__C8 = rY[9];
        // Units: dimensionless; Initial value: 0.007137874613383642
        double var_chaste_interface__IKs__C9 = rY[10];
        // Units: dimensionless; Initial value: 0.0003184390970637536
        double var_chaste_interface__IKs__C10 = rY[11];
        // Units: dimensionless; Initial value: 0.01388061042363991
        double var_chaste_interface__IKs__C11 = rY[12];
        // Units: dimensionless; Initial value: 0.003715500164470033
        double var_chaste_interface__IKs__C12 = rY[13];
        // Units: dimensionless; Initial value: 0.0002486371465457659
        double var_chaste_interface__IKs__C13 = rY[14];
        // Units: dimensionless; Initial value: 0.0006446803014431032
        double var_chaste_interface__IKs__C14 = rY[15];
        // Units: dimensionless; Initial value: 8.628258026770862e-5
        double var_chaste_interface__IKs__C15 = rY[16];
        // Units: dimensionless; Initial value: 1.122823524761588e-5
        double var_chaste_interface__IKs__O1 = rY[17];
        // Units: dimensionless; Initial value: 1.051906959485266e-5
        double var_chaste_interface__IKs__O2 = rY[18];
        // Units: dimensionless; Initial value: 2.372219883411999e-6
        double var_chaste_interface__ICaL__C = rY[19];
        // Units: dimensionless; Initial value: 0.9999613782488198
        double var_chaste_interface__ICaL__O = rY[20];
        // Units: dimensionless; Initial value: 2.27419494597377e-5
        double var_chaste_interface__ICaL__C_star = rY[21];
        // Units: dimensionless; Initial value: 5.936477396599124e-11
        double var_chaste_interface__ICaL__O_star = rY[22];
        // Units: dimensionless; Initial value: 1.350122566369778e-15
        double var_chaste_interface__ICaL__CI = rY[23];
        // Units: dimensionless; Initial value: 1.587938121237188e-5
        double var_chaste_interface__ICaL__OI = rY[24];
        // Units: dimensionless; Initial value: 3.611420243201921e-10
        double var_chaste_interface__ICaL__CI_star = rY[25];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__ICaL__OI_star = rY[26];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__INa_m_gate__m = rY[27];
        // Units: dimensionless; Initial value: 0.001022252813581797
        double var_chaste_interface__INa_h_gate__h = rY[28];
        // Units: dimensionless; Initial value: 0.9913109066867
        double var_chaste_interface__INa_j_gate__j = rY[29];
        // Units: dimensionless; Initial value: 0.9970771239754529
        double var_chaste_interface__INaL_mL_gate__mL = rY[30];
        // Units: dimensionless; Initial value: 0.001022252813581797
        double var_chaste_interface__INaL_hL_gate__hL = rY[31];
        // Units: dimensionless; Initial value: 0.3593255076983574
        double var_chaste_interface__IKr_xr_gate__xr = rY[32];
        // Units: dimensionless; Initial value: 1.235996442041028e-8
        double var_chaste_interface__Ito1_a_gate__a = rY[33];
        // Units: dimensionless; Initial value: 1.773318268499115e-5
        double var_chaste_interface__Ito1_i1f_gate__i1f = rY[34];
        // Units: dimensionless; Initial value: 0.9979722
        double var_chaste_interface__Ito1_i1s_gate__i1s = rY[35];
        // Units: dimensionless; Initial value: 0.9874435
        double var_chaste_interface__Ito2_i2f_gate__i2f = rY[36];
        // Units: dimensionless; Initial value: 0.9960352
        double var_chaste_interface__Irel__Irel = rY[37];
        // Units: mM_per_ms; Initial value: 0.00107332
        double var_chaste_interface__Ca__Ca_JSR = rY[38];
        // Units: mM; Initial value: 0.917692717
        double var_chaste_interface__Ca__Ca_NSR = rY[39];
        // Units: mM; Initial value: 0.929835335
        double var_chaste_interface__Ca__Ca_ss_sr = rY[40];
        // Units: mM; Initial value: 9.04757e-5
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[41];
        // Units: mM; Initial value: 9.61545e-5
        double var_chaste_interface__Na__Na_i = rY[42];
        // Units: mM; Initial value: 6.935575
        double var_chaste_interface__Na__Na_ss_sr = rY[43];
        // Units: mM; Initial value: 6.935607
        double var_chaste_interface__Cl__Cl_i = rY[44];
        // Units: mM; Initial value: 20.26842
        double var_chaste_interface__Cl__Cl_ss = rY[45];
        // Units: mM; Initial value: 20.26842
        double var_chaste_interface__K__K_i = rY[46];
        // Units: mM; Initial value: 145.5689
        double var_chaste_interface__CaMK_active__CaMK_trap = rY[47];
        // Units: dimensionless; Initial value: 0.0018861341
        
        
        // Mathematics
        double d_dt_chaste_interface__membrane__Vm;
        const double var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double var_ICaL__PCa = 0.00015552; // L_per_F_ms
        const double var_ICaL__ICaL = ((((var_ICaL__PCa * var_chaste_interface__membrane__Vm * 37238964676.0) * 3.8799692706433766e-07) * ((1.0 * var_chaste_interface__Ca__Ca_ss_CaL * exp((var_chaste_interface__membrane__Vm * 192974.0) * 3.8799692706433766e-07)) - 0.61380000000000001)) / (exp((var_chaste_interface__membrane__Vm * 192974.0) * 3.8799692706433766e-07) - 1.0)) * (var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__O_star); // uA_per_uF
        const double var_INaCa__INaCa_ss_sr = (((pow(var_chaste_interface__Na__Na_ss_sr, 3.0) * 1.8 * exp((var_chaste_interface__membrane__Vm * 26051.490000000002) * 3.8799692706433766e-07)) - (2744000.0 * var_chaste_interface__Ca__Ca_ss_sr * exp((var_chaste_interface__membrane__Vm *  -70435.509999999995) * 3.8799692706433766e-07))) * 0.90000000000000002) / ((1.0 + pow(0.000125 / var_chaste_interface__Ca__Ca_ss_sr, 2.0)) * (1.0 + (0.32000000000000001 * exp((var_chaste_interface__membrane__Vm *  -70435.509999999995) * 3.8799692706433766e-07))) * (((1.3 * pow(var_chaste_interface__Na__Na_ss_sr, 3.0)) + (669921.875 * var_chaste_interface__Ca__Ca_ss_sr) + ((1.0 + (var_chaste_interface__Ca__Ca_ss_sr * 277.77777777777777)) * 3349.5606000000007)) + (((1.0 + pow(var_chaste_interface__Na__Na_ss_sr * 0.081300813008130079, 3.0)) * 9878.3999999999996) + (pow(var_chaste_interface__Na__Na_ss_sr, 3.0) * 1.8) + (2744000.0 * var_chaste_interface__Ca__Ca_ss_sr)))); // uA_per_uF
        const double var_IpCa__IpCa = (0.057500000000000002 * var_chaste_interface__Ca__Ca_i) / (0.00050000000000000001 + var_chaste_interface__Ca__Ca_i); // uA_per_uF
        const double var_ICab__ICab = (((var_chaste_interface__membrane__Vm * 7429.4862601652785) * 3.8799692706433766e-07) * ((1.0 * var_chaste_interface__Ca__Ca_i * exp((var_chaste_interface__membrane__Vm * 192974.0) * 3.8799692706433766e-07)) - 0.61380000000000001)) / (exp((var_chaste_interface__membrane__Vm * 192974.0) * 3.8799692706433766e-07) - 1.0); // uA_per_uF
        const double var_INaCa__INaCa = (((pow(var_chaste_interface__Na__Na_i, 3.0) * 1.8 * exp((var_chaste_interface__membrane__Vm * 26051.490000000002) * 3.8799692706433766e-07)) - (2744000.0 * var_chaste_interface__Ca__Ca_i * exp((var_chaste_interface__membrane__Vm *  -70435.509999999995) * 3.8799692706433766e-07))) * 3.6000000000000001) / ((1.0 + pow(0.000125 / var_chaste_interface__Ca__Ca_i, 2.0)) * (1.0 + (0.32000000000000001 * exp((var_chaste_interface__membrane__Vm *  -70435.509999999995) * 3.8799692706433766e-07))) * (((1.3 * pow(var_chaste_interface__Na__Na_i, 3.0)) + (669921.875 * var_chaste_interface__Ca__Ca_i) + ((1.0 + (var_chaste_interface__Ca__Ca_i * 277.77777777777777)) * 3349.5606000000007)) + (((1.0 + pow(var_chaste_interface__Na__Na_i * 0.081300813008130079, 3.0)) * 9878.3999999999996) + (pow(var_chaste_interface__Na__Na_i, 3.0) * 1.8) + (2744000.0 * var_chaste_interface__Ca__Ca_i)))); // uA_per_uF
        const double var_INa__g_Na = 9.0749999999999993; // mS_per_uF
        const double var_reversal_potentials__ENa = 26.711785007306684 * log(140.0 / var_chaste_interface__Na__Na_i); // mV
        const double var_INa__INa = var_INa__g_Na * pow(var_chaste_interface__INa_m_gate__m, 3.0) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j * (var_chaste_interface__membrane__Vm - var_reversal_potentials__ENa); // uA_per_uF
        const double var_INab__phi = (96487.0 * var_chaste_interface__membrane__Vm) * 3.8799692706433766e-07; // dimensionless
        const double var_INab__INab = (var_INab__phi * ((var_chaste_interface__Na__Na_i * exp(var_INab__phi)) - 140.0) * 0.00030875839999999999) / (exp(var_INab__phi) - 1.0); // uA_per_uF
        const double var_INaL__INaL = 0.0064999999999999997 * pow(var_chaste_interface__INaL_mL_gate__mL, 3.0) * var_chaste_interface__INaL_hL_gate__hL * (var_chaste_interface__membrane__Vm - var_reversal_potentials__ENa); // uA_per_uF
        const double var_INaK__INaK = (1.0 / (1.0 + exp(-(((var_chaste_interface__membrane__Vm -  -92.0) * 96487.0) * 3.8799692706433766e-07)))) * pow(var_chaste_interface__Na__Na_i / (var_chaste_interface__Na__Na_i + 2.6000000000000001), 3.0) * 1.0956521739130434; // uA_per_uF
        const double var_reversal_potentials__EK = 26.711785007306684 * log(5.4000000000000004 / var_chaste_interface__K__K_i); // mV
        const double var_Ito1__Ito1 = 0.4975 * pow(var_chaste_interface__Ito1_a_gate__a, 3.0) * var_chaste_interface__Ito1_i1f_gate__i1f * var_chaste_interface__Ito1_i1s_gate__i1s * exp(var_chaste_interface__membrane__Vm * 0.0018181818181818182) * (var_chaste_interface__membrane__Vm - var_reversal_potentials__EK); // uA_per_uF
        const double var_IKr__gKr_max = 0.013854200000000001; // mS_per_uF
        const double var_IKr__IKr = (var_IKr__gKr_max * 1.0) * var_chaste_interface__IKr_xr_gate__xr * (1.0 / (1.0 + exp((var_chaste_interface__membrane__Vm + 10.0) * 0.064935064935064929))) * (var_chaste_interface__membrane__Vm - var_reversal_potentials__EK); // uA_per_uF
        const double var_IKs__IKs = (0.082600000000000007 * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_chaste_interface__Ca__Ca_i, 1.3999999999999999))))) * (var_chaste_interface__IKs__O1 + var_chaste_interface__IKs__O2) * (var_chaste_interface__membrane__Vm - (26.711785007306684 * log(7.9662000000000006 / (var_chaste_interface__K__K_i + (0.018329999999999999 * var_chaste_interface__Na__Na_i))))); // uA_per_uF
        const double var_IKp__IKp = 0.0027599999999999999 * (1.0 / (1.0 + exp((7.4880000000000004 - var_chaste_interface__membrane__Vm) * 0.16722408026755853))) * (var_chaste_interface__membrane__Vm - var_reversal_potentials__EK); // uA_per_uF
        const double var_IK1_K1_gate__alpha_k1 = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__membrane__Vm - var_reversal_potentials__EK) - 59.215000000000003))); // dimensionless
        const double var_IK1__IK1 = 0.5 * (var_IK1_K1_gate__alpha_k1 / (var_IK1_K1_gate__alpha_k1 + (((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__membrane__Vm - var_reversal_potentials__EK) + 5.476))) + exp(0.061749999999999999 * ((var_chaste_interface__membrane__Vm - var_reversal_potentials__EK) - 594.30999999999995))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__membrane__Vm - var_reversal_potentials__EK) + 4.7530000000000001)))))) * (var_chaste_interface__membrane__Vm - var_reversal_potentials__EK); // uA_per_uF
        const double var_reversal_potentials__ECl =  -26.711785007306684 * log(100.0 / var_chaste_interface__Cl__Cl_i); // mV
        const double var_IClb__IClb = 0.00022499999999999999 * (var_chaste_interface__membrane__Vm - var_reversal_potentials__ECl); // uA_per_uF
        const double var_Ito2__Ito2 = ((((var_chaste_interface__membrane__Vm * 8378.7670521) * 3.8799692706433766e-07) * (var_chaste_interface__Cl__Cl_i - (100.0 * exp((var_chaste_interface__membrane__Vm * 96487.0) * 3.8799692706433766e-07)))) / (1.0 - exp((var_chaste_interface__membrane__Vm * 96487.0) * 3.8799692706433766e-07))) * var_chaste_interface__Ito2_i2f_gate__i2f * (1.0 - (1.0 / (1.0 + pow(var_chaste_interface__Irel__Irel * 2.5, 2.0)))); // uA_per_uF
        const double var_IKs__alpha = 0.014864 * exp((var_chaste_interface__membrane__Vm * 2882.7420990000001) * 3.8799692706433766e-07); // per_ms
        const double var_IKs__beta = 0.083986000000000005 * exp((var_chaste_interface__membrane__Vm *  -5351.2655070000001) * 3.8799692706433766e-07); // per_ms
        const double var_IKs__delta = 0.0031172999999999999 * exp((var_chaste_interface__membrane__Vm *  -41127.583750000005) * 3.8799692706433766e-07); // per_ms
        const double var_IKs__gamma = 0.014600999999999999 * exp((var_chaste_interface__membrane__Vm * 23605.544550000002) * 3.8799692706433766e-07); // per_ms
        const double var_IKs__eta = 0.07732 * exp((var_chaste_interface__membrane__Vm *  -6245.2175620000007) * 3.8799692706433766e-07); // per_ms
        const double var_IKs__omega = 0.79405000000000003 * exp((var_chaste_interface__membrane__Vm *  -7735.7487379999993) * 3.8799692706433766e-07); // per_ms
        const double var_IKs__psi = 0.58638000000000001 * exp((var_chaste_interface__membrane__Vm * 27215.123219999998) * 3.8799692706433766e-07); // per_ms
        const double var_ICaL__ACT_tau = 0.58999999999999997 + ((0.80000000000000004 * exp(0.051999999999999998 * (var_chaste_interface__membrane__Vm + 13.0))) / (1.0 + exp(0.13200000000000001 * (var_chaste_interface__membrane__Vm + 13.0)))); // ms
        const double var_ICaL__IV_tau = 1.0 / ((1.0 / (24.827999999999999 * (1.0 + exp((var_chaste_interface__membrane__Vm + 49.100000000000001) * 0.096627693496956227)))) + (1.0 / (30.553000000000001 * (1.0 + exp((-(var_chaste_interface__membrane__Vm + 0.21299999999999999)) * 0.092532617747756077))))); // ms
        const double var_ICaL__IV_tau_star = 1.0 / ((1.0 / (24.827999999999999 * (1.0 + exp((var_chaste_interface__membrane__Vm + 49.100000000000001) * 0.096627693496956227)))) + (1.0 / ((25.0 - (17.5 / (1.0 + pow(0.0030000000000000001 / var_chaste_interface__Ca__Ca_ss_CaL, 4.0)))) * (1.0 + exp((-(var_chaste_interface__membrane__Vm + 0.21299999999999999)) * 0.092532617747756077))))); // ms
        const double var_ICaL__ACT_infinity = 1.0 / (1.0 + exp((-(var_chaste_interface__membrane__Vm - 13.56)) * 0.10582010582010583)); // dimensionless
        const double var_ICaL__IV_infinity = ((1.0 / (1.0 + exp((var_chaste_interface__membrane__Vm + 17.5) * 0.33333333333333331))) + 0.25) * 0.80000000000000004; // dimensionless
        const double var_ICaL__IV_infinity_star = ((1.0 / (1.0 + exp((var_chaste_interface__membrane__Vm + 17.5) * 0.33333333333333331))) + 0.0001) * 0.99990000999900008; // dimensionless
        const double var_ICaL__alpha = var_ICaL__ACT_infinity / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__beta = (1.0 - var_ICaL__ACT_infinity) / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__delta = 3.0 / (1.0 + pow(0.0030000000000000001 / var_chaste_interface__Ca__Ca_ss_CaL, 4.0)); // per_ms
        const double var_ICaL__x = var_ICaL__IV_infinity / var_ICaL__IV_tau; // per_ms
        const double var_ICaL__y = (1.0 - var_ICaL__IV_infinity) / var_ICaL__IV_tau; // per_ms
        const double var_ICaL__y_star = (1.0 - var_ICaL__IV_infinity_star) / var_ICaL__IV_tau_star; // per_ms
        const double var_ICaL__x_star = var_ICaL__IV_infinity_star / var_ICaL__IV_tau_star; // per_ms
        const double var_ICaL__delta_I = (9.9999999999999995e-07 * var_ICaL__x * var_ICaL__y_star * var_ICaL__delta) / (var_ICaL__y * var_ICaL__x_star * 1.0); // per_ms
        const double var_CT_Na_Cl__CT_Na_Cl = (2.4610800000000002e-05 * pow(var_reversal_potentials__ENa - var_reversal_potentials__ECl, 4.0)) / (pow(var_reversal_potentials__ENa - var_reversal_potentials__ECl, 4.0) + 59494197.640692554); // mM_per_ms
        const double var_CT_K_Cl__CT_K_Cl = (1.77e-05 * (var_reversal_potentials__EK - var_reversal_potentials__ECl)) / ((var_reversal_potentials__EK + 87.825100000000006) - var_reversal_potentials__ECl); // mM_per_ms
        const double var_Ito2_i2f_gate__alpha_i2f = 0.025000000000000001 / (1.0 + exp((var_chaste_interface__membrane__Vm + 58.0) * 0.20000000000000001)); // per_ms
        const double var_CaMK_active__CaMK_active = ((0.050000000000000003 * (1.0 - var_chaste_interface__CaMK_active__CaMK_trap)) / (1.0 + (0.0015 / var_chaste_interface__Ca__Ca_ss_sr))) + var_chaste_interface__CaMK_active__CaMK_trap; // dimensionless
        const double var_Irel__beta_tau = 4.75 * (1.0 + (1.0 / (1.0 + pow(0.28000000000000003 / (1.0 * var_CaMK_active__CaMK_active), 10.0)))); // ms
        const double var_Iup__Iup = ((((var_CaMK_active__CaMK_active * 0.75) / (0.14999999999999999 + (var_CaMK_active__CaMK_active * 1.0))) + 1.0) * 0.0043750000000000004 * var_chaste_interface__Ca__Ca_i) / ((var_chaste_interface__Ca__Ca_i + 0.00092000000000000003) - ((var_CaMK_active__CaMK_active * 0.00017000000000000001) / (0.14999999999999999 + (var_CaMK_active__CaMK_active * 1.0)))); // mM_per_ms
        const double var_Ileak__Ileak = 0.00029166666666666669 * var_chaste_interface__Ca__Ca_NSR; // mM_per_ms
        const double var_Itr__Itr = (var_chaste_interface__Ca__Ca_NSR - var_chaste_interface__Ca__Ca_JSR) * 0.040000000000000001; // mM_per_ms
        const double var_Ca__Idiff = (var_chaste_interface__Ca__Ca_ss_sr - var_chaste_interface__Ca__Ca_i) * 5.0; // mM_per_ms
        const double var_Ca__Idiff_ss = (var_chaste_interface__Ca__Ca_ss_sr - var_chaste_interface__Ca__Ca_ss_CaL) * 0.5; // mM_per_ms
        const double var_Na__Idiff_Na = (var_chaste_interface__Na__Na_ss_sr - var_chaste_interface__Na__Na_i) * 5.0; // mM_per_ms
        const double var_Cl__Idiff_Cl = (var_chaste_interface__Cl__Cl_ss - var_chaste_interface__Cl__Cl_i) * 5.0; // mM_per_ms
        const double d_dt_chaste_interface__Ca__Ca_i = (1.0 / (1.0 + (0.00011900000000000002 / pow(var_chaste_interface__Ca__Ca_i + 0.0023800000000000002, 2.0)) + (3.5000000000000004e-05 / pow(var_chaste_interface__Ca__Ca_i + 0.00050000000000000001, 2.0)))) * ((((-((var_ICab__ICab + var_IpCa__IpCa) - (2.0 * var_INaCa__INaCa))) * 1.5902182180120172e-09) * 19400.149088458438) + (((var_Ileak__Ileak - var_Iup__Iup) * 2.0983325651856948e-06) * 38800.298176916876) + ((var_Ca__Idiff * 7.6026542216872995e-08) * 38800.298176916876)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__IKs__C1 = ( -4.0 * var_IKs__alpha * var_chaste_interface__IKs__C1) + (var_IKs__beta * var_chaste_interface__IKs__C2); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C2 = ((-((3.0 * var_IKs__alpha) + var_IKs__beta + var_IKs__gamma)) * var_chaste_interface__IKs__C2) + (4.0 * var_IKs__alpha * var_chaste_interface__IKs__C1) + (2.0 * var_IKs__beta * var_chaste_interface__IKs__C3) + (var_IKs__delta * var_chaste_interface__IKs__C6); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C3 = ((-((2.0 * var_IKs__alpha) + (2.0 * var_IKs__beta) + (2.0 * var_IKs__gamma))) * var_chaste_interface__IKs__C3) + (3.0 * var_IKs__alpha * var_chaste_interface__IKs__C2) + (3.0 * var_IKs__beta * var_chaste_interface__IKs__C4) + (var_IKs__delta * var_chaste_interface__IKs__C7); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C4 = ((-(var_IKs__alpha + (3.0 * var_IKs__beta) + (3.0 * var_IKs__gamma))) * var_chaste_interface__IKs__C4) + (2.0 * var_IKs__alpha * var_chaste_interface__IKs__C3) + (4.0 * var_IKs__beta * var_chaste_interface__IKs__C5) + (var_IKs__delta * var_chaste_interface__IKs__C8); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C5 = ((-((4.0 * var_IKs__beta) + (4.0 * var_IKs__gamma))) * var_chaste_interface__IKs__C5) + (var_IKs__alpha * var_chaste_interface__IKs__C4) + (var_IKs__delta * var_chaste_interface__IKs__C9); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C6 = ((-((3.0 * var_IKs__alpha) + var_IKs__delta)) * var_chaste_interface__IKs__C6) + (var_IKs__beta * var_chaste_interface__IKs__C7) + (var_IKs__gamma * var_chaste_interface__IKs__C2); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C7 = ((-((2.0 * var_IKs__alpha) + var_IKs__beta + var_IKs__gamma + var_IKs__delta)) * var_chaste_interface__IKs__C7) + (3.0 * var_IKs__alpha * var_chaste_interface__IKs__C6) + (2.0 * var_IKs__beta * var_chaste_interface__IKs__C8) + (2.0 * var_IKs__gamma * var_chaste_interface__IKs__C3) + (2.0 * var_IKs__delta * var_chaste_interface__IKs__C10); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C8 = ((-(var_IKs__alpha + (2.0 * var_IKs__beta) + (2.0 * var_IKs__gamma) + var_IKs__delta)) * var_chaste_interface__IKs__C8) + (2.0 * var_IKs__alpha * var_chaste_interface__IKs__C7) + (3.0 * var_IKs__beta * var_chaste_interface__IKs__C9) + (3.0 * var_IKs__gamma * var_chaste_interface__IKs__C4) + (2.0 * var_IKs__delta * var_chaste_interface__IKs__C11); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C9 = ((-((3.0 * var_IKs__beta) + (3.0 * var_IKs__gamma) + var_IKs__delta)) * var_chaste_interface__IKs__C9) + (var_IKs__alpha * var_chaste_interface__IKs__C8) + (4.0 * var_IKs__gamma * var_chaste_interface__IKs__C5) + (2.0 * var_IKs__delta * var_chaste_interface__IKs__C12); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C10 = ((-((2.0 * var_IKs__alpha) + (2.0 * var_IKs__delta))) * var_chaste_interface__IKs__C10) + (var_IKs__beta * var_chaste_interface__IKs__C11) + (var_IKs__gamma * var_chaste_interface__IKs__C7); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C11 = ((-(var_IKs__alpha + var_IKs__beta + var_IKs__gamma + (2.0 * var_IKs__delta))) * var_chaste_interface__IKs__C11) + (2.0 * var_IKs__alpha * var_chaste_interface__IKs__C10) + (2.0 * var_IKs__beta * var_chaste_interface__IKs__C12) + (2.0 * var_IKs__gamma * var_chaste_interface__IKs__C8) + (3.0 * var_IKs__delta * var_chaste_interface__IKs__C13); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C12 = ((-((2.0 * var_IKs__beta) + (2.0 * var_IKs__gamma) + (2.0 * var_IKs__delta))) * var_chaste_interface__IKs__C12) + (var_IKs__alpha * var_chaste_interface__IKs__C11) + (3.0 * var_IKs__gamma * var_chaste_interface__IKs__C9) + (3.0 * var_IKs__delta * var_chaste_interface__IKs__C14); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C13 = ((-(var_IKs__alpha + (3.0 * var_IKs__delta))) * var_chaste_interface__IKs__C13) + (var_IKs__beta * var_chaste_interface__IKs__C14) + (var_IKs__gamma * var_chaste_interface__IKs__C11); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C14 = ((-(var_IKs__beta + var_IKs__gamma + (3.0 * var_IKs__delta))) * var_chaste_interface__IKs__C14) + (var_IKs__alpha * var_chaste_interface__IKs__C13) + (2.0 * var_IKs__gamma * var_chaste_interface__IKs__C12) + (4.0 * var_IKs__delta * var_chaste_interface__IKs__C15); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__C15 = ((-((4.0 * var_IKs__delta) + 0.089538000000000006)) * var_chaste_interface__IKs__C15) + (var_IKs__gamma * var_chaste_interface__IKs__C14) + (var_IKs__eta * var_chaste_interface__IKs__O1); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__O1 = ((-(var_IKs__eta + var_IKs__psi)) * var_chaste_interface__IKs__O1) + (var_IKs__omega * var_chaste_interface__IKs__O2) + (0.089538000000000006 * var_chaste_interface__IKs__C15); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__O2 = ((-var_IKs__omega) * var_chaste_interface__IKs__O2) + (var_IKs__psi * var_chaste_interface__IKs__O1); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__C = ((-(var_ICaL__alpha + var_ICaL__delta + var_ICaL__y)) * var_chaste_interface__ICaL__C) + (var_ICaL__beta * var_chaste_interface__ICaL__O) + (1.0 * var_chaste_interface__ICaL__C_star) + (var_ICaL__x * var_chaste_interface__ICaL__CI); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__O = ((-(var_ICaL__beta + var_ICaL__delta + var_ICaL__y)) * var_chaste_interface__ICaL__O) + (var_ICaL__alpha * var_chaste_interface__ICaL__C) + (1.0 * var_chaste_interface__ICaL__O_star) + (var_ICaL__x * var_chaste_interface__ICaL__OI); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__C_star = ((-(var_ICaL__alpha + 1.0 + var_ICaL__y_star)) * var_chaste_interface__ICaL__C_star) + (var_ICaL__delta * var_chaste_interface__ICaL__C) + (var_ICaL__beta * var_chaste_interface__ICaL__O_star) + (var_ICaL__x_star * var_chaste_interface__ICaL__CI_star); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__O_star = ((-(var_ICaL__beta + 1.0 + var_ICaL__y_star)) * var_chaste_interface__ICaL__O_star) + (var_ICaL__delta * var_chaste_interface__ICaL__O) + (var_ICaL__alpha * var_chaste_interface__ICaL__C_star) + (var_ICaL__x_star * var_chaste_interface__ICaL__OI_star); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__CI = ((-(var_ICaL__alpha + var_ICaL__delta_I + var_ICaL__x)) * var_chaste_interface__ICaL__CI) + (var_ICaL__y * var_chaste_interface__ICaL__C) + (9.9999999999999995e-07 * var_chaste_interface__ICaL__CI_star) + (var_ICaL__beta * var_chaste_interface__ICaL__OI); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__OI = ((-(var_ICaL__beta + var_ICaL__delta_I + var_ICaL__x)) * var_chaste_interface__ICaL__OI) + (var_ICaL__y * var_chaste_interface__ICaL__O) + (9.9999999999999995e-07 * var_chaste_interface__ICaL__OI_star) + (var_ICaL__alpha * var_chaste_interface__ICaL__CI); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__CI_star = ((-(var_ICaL__alpha + 9.9999999999999995e-07 + var_ICaL__x_star)) * var_chaste_interface__ICaL__CI_star) + (var_ICaL__delta_I * var_chaste_interface__ICaL__CI) + (var_ICaL__y_star * var_chaste_interface__ICaL__C_star) + (var_ICaL__beta * var_chaste_interface__ICaL__OI_star); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__OI_star = ((-(var_ICaL__beta + 9.9999999999999995e-07 + var_ICaL__x_star)) * var_chaste_interface__ICaL__OI_star) + (var_ICaL__delta_I * var_chaste_interface__ICaL__OI) + (var_ICaL__y_star * var_chaste_interface__ICaL__O_star) + (var_ICaL__alpha * var_chaste_interface__ICaL__CI_star); // 'per millisecond'
        const double d_dt_chaste_interface__INaL_hL_gate__hL = ((1.0 / (1.0 + exp((var_chaste_interface__membrane__Vm + 91.0) * 0.16393442622950821))) - var_chaste_interface__INaL_hL_gate__hL) * 0.0016666666666666668; // 'per millisecond'
        const double d_dt_chaste_interface__Ito2_i2f_gate__i2f = ((var_Ito2_i2f_gate__alpha_i2f / (var_Ito2_i2f_gate__alpha_i2f + (1.0 / (5.0 * (1.0 + exp((var_chaste_interface__membrane__Vm + 19.0) *  -0.1111111111111111)))))) - var_chaste_interface__Ito2_i2f_gate__i2f) * 0.125; // 'per millisecond'
        const double d_dt_chaste_interface__Irel__Irel = (-(((var_ICaL__ICaL * (var_Irel__beta_tau * 0.1125)) / (1.0 + pow(1.0 / var_chaste_interface__Ca__Ca_JSR, 8.0))) + var_chaste_interface__Irel__Irel)) / (var_Irel__beta_tau / (1.0 + (0.0123 / var_chaste_interface__Ca__Ca_JSR))); // 'mM per millisecond per ms'
        const double d_dt_chaste_interface__Ca__Ca_JSR = (1.0 / (1.0 + (8.0 / pow(var_chaste_interface__Ca__Ca_JSR + 0.80000000000000004, 2.0)))) * (var_Itr__Itr - var_chaste_interface__Irel__Irel); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_NSR = var_Iup__Iup - (var_Ileak__Ileak + ((var_Itr__Itr * 1.8246370132049518e-07) * 476568.87978169642)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_ss_sr = (1.0 / (1.0 + (4.0890000000000003e-05 / pow(0.00087000000000000001 + var_chaste_interface__Ca__Ca_ss_sr, 2.0)) + (0.0097788000000000007 / pow(0.0086999999999999994 + var_chaste_interface__Ca__Ca_ss_sr, 2.0)))) * (-((var_Ca__Idiff + var_Ca__Idiff_ss) - (((var_INaCa__INaCa_ss_sr * 3.1804364360240345e-09) * 657665.05409874103) + ((var_chaste_interface__Irel__Irel * 1.8246370132049518e-07) * 1315330.1081974821)))); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_ss_CaL = (1.0 / (1.0 + (4.0890000000000003e-05 / pow(0.00087000000000000001 + var_chaste_interface__Ca__Ca_ss_CaL, 2.0)) + (0.0097788000000000007 / pow(0.0086999999999999994 + var_chaste_interface__Ca__Ca_ss_CaL, 2.0)))) * (-(((var_ICaL__ICaL * 1.5902182180120172e-09) * 6576650.5409874106) - ((var_Ca__Idiff_ss * 7.6026542216873e-07) * 13153301.081974821))); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Na__Na_i = -(((((3.0 * var_INaCa__INaCa) + (3.0 * var_INaK__INaK) + var_INa__INa + var_INaL__INaL + var_INab__INab) * 1.5902182180120172e-09) * 38800.298176916876) - (var_CT_Na_Cl__CT_Na_Cl + ((var_Na__Idiff_Na * 7.6026542216873e-07) * 38800.298176916876))); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Na__Na_ss_sr = -(((var_INaCa__INaCa_ss_sr * 4.7706546540360517e-09) * 1315330.1081974821) + var_Na__Idiff_Na); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Cl__Cl_i = -(((var_IClb__IClb * 1.5902182180120172e-09) *  -38800.298176916876) - (var_CT_Na_Cl__CT_Na_Cl + var_CT_K_Cl__CT_K_Cl + ((var_Cl__Idiff_Cl * 7.6026542216873e-07) * 38800.298176916876))); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Cl__Cl_ss = -(((var_Ito2__Ito2 * 1.5902182180120172e-09) *  -1315330.1081974821) + var_Cl__Idiff_Cl); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__K__K_i = -(((((var_IKs__IKs + var_IKr__IKr + var_IK1__IK1 + var_Ito1__Ito1 + var_IKp__IKp + (var_chaste_interface__membrane__i_Stim / HeartConfig::Instance()->GetCapacitance())) - (2.0 * var_INaK__INaK)) * 1.5902182180120172e-09) * 38800.298176916876) - var_CT_K_Cl__CT_K_Cl); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__CaMK_active__CaMK_trap = (0.050000000000000003 * var_CaMK_active__CaMK_active * (var_CaMK_active__CaMK_active - var_chaste_interface__CaMK_active__CaMK_trap)) - (0.00068000000000000005 * var_chaste_interface__CaMK_active__CaMK_trap); // 'per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__Vm = 0.0;
        }
        else
        {
            const double var_membrane__caiont = (var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa) - (2.0 * (var_INaCa__INaCa + var_INaCa__INaCa_ss_sr)); // uA_per_uF
            const double var_membrane__naiont = var_INa__INa + (3.0 * (var_INaCa__INaCa + var_INaCa__INaCa_ss_sr)) + (3.0 * var_INaK__INaK) + var_INaL__INaL + var_INab__INab; // uA_per_uF
            const double var_membrane__kiont = var_IKr__IKr + var_IKs__IKs + var_IK1__IK1 + var_IKp__IKp + ( -2.0 * var_INaK__INaK) + var_Ito1__Ito1 + (var_chaste_interface__membrane__i_Stim / HeartConfig::Instance()->GetCapacitance()); // uA_per_uF
            const double var_membrane__clont = var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
            d_dt_chaste_interface__membrane__Vm = -(var_membrane__naiont + var_membrane__kiont + var_membrane__caiont + var_membrane__clont); // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__membrane__Vm;
        rDY[1] = d_dt_chaste_interface__Ca__Ca_i;
        rDY[2] = d_dt_chaste_interface__IKs__C1;
        rDY[3] = d_dt_chaste_interface__IKs__C2;
        rDY[4] = d_dt_chaste_interface__IKs__C3;
        rDY[5] = d_dt_chaste_interface__IKs__C4;
        rDY[6] = d_dt_chaste_interface__IKs__C5;
        rDY[7] = d_dt_chaste_interface__IKs__C6;
        rDY[8] = d_dt_chaste_interface__IKs__C7;
        rDY[9] = d_dt_chaste_interface__IKs__C8;
        rDY[10] = d_dt_chaste_interface__IKs__C9;
        rDY[11] = d_dt_chaste_interface__IKs__C10;
        rDY[12] = d_dt_chaste_interface__IKs__C11;
        rDY[13] = d_dt_chaste_interface__IKs__C12;
        rDY[14] = d_dt_chaste_interface__IKs__C13;
        rDY[15] = d_dt_chaste_interface__IKs__C14;
        rDY[16] = d_dt_chaste_interface__IKs__C15;
        rDY[17] = d_dt_chaste_interface__IKs__O1;
        rDY[18] = d_dt_chaste_interface__IKs__O2;
        rDY[19] = d_dt_chaste_interface__ICaL__C;
        rDY[20] = d_dt_chaste_interface__ICaL__O;
        rDY[21] = d_dt_chaste_interface__ICaL__C_star;
        rDY[22] = d_dt_chaste_interface__ICaL__O_star;
        rDY[23] = d_dt_chaste_interface__ICaL__CI;
        rDY[24] = d_dt_chaste_interface__ICaL__OI;
        rDY[25] = d_dt_chaste_interface__ICaL__CI_star;
        rDY[26] = d_dt_chaste_interface__ICaL__OI_star;
        rAlphaOrTau[27] = (0.32000000000000001 * (var_chaste_interface__membrane__Vm + 47.130000000000003)) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__membrane__Vm + 47.130000000000003)));
        rBetaOrInf[27] = 0.080000000000000002 * exp((-var_chaste_interface__membrane__Vm) * 0.090909090909090912);
        rAlphaOrTau[28] = (var_chaste_interface__membrane__Vm >=  -40.0) ? 0.0 : (0.13500000000000001 * exp((80.0 + var_chaste_interface__membrane__Vm) *  -0.14705882352941177));
        rBetaOrInf[28] = (var_chaste_interface__membrane__Vm >=  -40.0) ? (1.0 / (0.13 * (1.0 + exp((var_chaste_interface__membrane__Vm + 10.66) *  -0.0900900900900901)))) : ((3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__Vm)) + (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__Vm)));
        rAlphaOrTau[29] = (var_chaste_interface__membrane__Vm >=  -40.0) ? 0.0 : (((( -127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__Vm)) - (6.9480000000000006e-05 * exp( -0.043909999999999998 * var_chaste_interface__membrane__Vm))) * (var_chaste_interface__membrane__Vm + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__membrane__Vm + 79.230000000000004))));
        rBetaOrInf[29] = (var_chaste_interface__membrane__Vm >=  -40.0) ? ((0.29999999999999999 * exp( -2.5349999999999999e-07 * var_chaste_interface__membrane__Vm)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__membrane__Vm + 32.0)))) : ((0.1212 * exp( -0.01052 * var_chaste_interface__membrane__Vm)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__membrane__Vm + 40.140000000000001))));
        rAlphaOrTau[30] = (0.32000000000000001 * (var_chaste_interface__membrane__Vm + 47.130000000000003)) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__membrane__Vm + 47.130000000000003)));
        rBetaOrInf[30] = 0.080000000000000002 * exp((-var_chaste_interface__membrane__Vm) * 0.090909090909090912);
        rDY[31] = d_dt_chaste_interface__INaL_hL_gate__hL;
        rAlphaOrTau[32] = 1.0 / (((0.00059999999999999995 * (var_chaste_interface__membrane__Vm - 1.7383999999999999)) / (1.0 - exp( -0.13600000000000001 * (var_chaste_interface__membrane__Vm - 1.7383999999999999)))) + ((0.00029999999999999997 * (var_chaste_interface__membrane__Vm + 38.360799999999998)) / (exp(0.1522 * (var_chaste_interface__membrane__Vm + 38.360799999999998)) - 1.0)));
        rBetaOrInf[32] = 1.0 / (1.0 + exp((-(var_chaste_interface__membrane__Vm + 10.085000000000001)) * 0.23529411764705882));
        rAlphaOrTau[33] = 1.0 / ((1.0 / (1.2089000000000001 * (1.0 + exp((var_chaste_interface__membrane__Vm - 18.4099) *  -0.034035137876343539)))) + (3.5 / (1.0 + exp((var_chaste_interface__membrane__Vm + 100.0) * 0.034035137876343539))));
        rBetaOrInf[33] = 1.0 / (1.0 + exp((var_chaste_interface__membrane__Vm + 9.4369999999999994) *  -0.14019346698443852));
        rAlphaOrTau[34] = 0.025000000000000001 / (1.0 + exp((var_chaste_interface__membrane__Vm + 58.0) * 0.20000000000000001));
        rBetaOrInf[34] = 1.0 / (9.7952999999999992 * (1.0 + exp((var_chaste_interface__membrane__Vm + 19.0) *  -0.1111111111111111)));
        rAlphaOrTau[35] = 1.0 / (250.0 * (1.0 + exp((var_chaste_interface__membrane__Vm + 60.0) * 0.20000000000000001)));
        rBetaOrInf[35] = 1.0 / (9.7952999999999992 * (1.0 + exp((var_chaste_interface__membrane__Vm + 19.0) *  -0.1111111111111111)));
        rDY[36] = d_dt_chaste_interface__Ito2_i2f_gate__i2f;
        rDY[37] = d_dt_chaste_interface__Irel__Irel;
        rDY[38] = d_dt_chaste_interface__Ca__Ca_JSR;
        rDY[39] = d_dt_chaste_interface__Ca__Ca_NSR;
        rDY[40] = d_dt_chaste_interface__Ca__Ca_ss_sr;
        rDY[41] = d_dt_chaste_interface__Ca__Ca_ss_CaL;
        rDY[42] = d_dt_chaste_interface__Na__Na_i;
        rDY[43] = d_dt_chaste_interface__Na__Na_ss_sr;
        rDY[44] = d_dt_chaste_interface__Cl__Cl_i;
        rDY[45] = d_dt_chaste_interface__Cl__Cl_ss;
        rDY[46] = d_dt_chaste_interface__K__K_i;
        rDY[47] = d_dt_chaste_interface__CaMK_active__CaMK_trap;
    }
    
    void Dynamicdecker_2009FromCellMLRushLarsen::ComputeOneStepExceptVoltage(const std::vector<double> &rDY, const std::vector<double> &rAlphaOrTau, const std::vector<double> &rBetaOrInf)
    {
        std::vector<double>& rY = rGetStateVariables();
        rY[1] += mDt * rDY[1];
        rY[2] += mDt * rDY[2];
        rY[3] += mDt * rDY[3];
        rY[4] += mDt * rDY[4];
        rY[5] += mDt * rDY[5];
        rY[6] += mDt * rDY[6];
        rY[7] += mDt * rDY[7];
        rY[8] += mDt * rDY[8];
        rY[9] += mDt * rDY[9];
        rY[10] += mDt * rDY[10];
        rY[11] += mDt * rDY[11];
        rY[12] += mDt * rDY[12];
        rY[13] += mDt * rDY[13];
        rY[14] += mDt * rDY[14];
        rY[15] += mDt * rDY[15];
        rY[16] += mDt * rDY[16];
        rY[17] += mDt * rDY[17];
        rY[18] += mDt * rDY[18];
        rY[19] += mDt * rDY[19];
        rY[20] += mDt * rDY[20];
        rY[21] += mDt * rDY[21];
        rY[22] += mDt * rDY[22];
        rY[23] += mDt * rDY[23];
        rY[24] += mDt * rDY[24];
        rY[25] += mDt * rDY[25];
        rY[26] += mDt * rDY[26];
        {
            const double tau_inv = rAlphaOrTau[27] + rBetaOrInf[27];
            const double y_inf = rAlphaOrTau[27] / tau_inv;
            rY[27] = y_inf + (rY[27] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[28] + rBetaOrInf[28];
            const double y_inf = rAlphaOrTau[28] / tau_inv;
            rY[28] = y_inf + (rY[28] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[29] + rBetaOrInf[29];
            const double y_inf = rAlphaOrTau[29] / tau_inv;
            rY[29] = y_inf + (rY[29] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[30] + rBetaOrInf[30];
            const double y_inf = rAlphaOrTau[30] / tau_inv;
            rY[30] = y_inf + (rY[30] - y_inf)*exp(-mDt*tau_inv);
        }
        rY[31] += mDt * rDY[31];
        rY[32] = rBetaOrInf[32] + (rY[32] - rBetaOrInf[32])*exp(-mDt/rAlphaOrTau[32]);
        rY[33] = rBetaOrInf[33] + (rY[33] - rBetaOrInf[33])*exp(-mDt/rAlphaOrTau[33]);
        {
            const double tau_inv = rAlphaOrTau[34] + rBetaOrInf[34];
            const double y_inf = rAlphaOrTau[34] / tau_inv;
            rY[34] = y_inf + (rY[34] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[35] + rBetaOrInf[35];
            const double y_inf = rAlphaOrTau[35] / tau_inv;
            rY[35] = y_inf + (rY[35] - y_inf)*exp(-mDt*tau_inv);
        }
        rY[36] += mDt * rDY[36];
        rY[37] += mDt * rDY[37];
        rY[38] += mDt * rDY[38];
        rY[39] += mDt * rDY[39];
        rY[40] += mDt * rDY[40];
        rY[41] += mDt * rDY[41];
        rY[42] += mDt * rDY[42];
        rY[43] += mDt * rDY[43];
        rY[44] += mDt * rDY[44];
        rY[45] += mDt * rDY[45];
        rY[46] += mDt * rDY[46];
        rY[47] += mDt * rDY[47];
    }
    
template<>
void OdeSystemInformation<Dynamicdecker_2009FromCellMLRushLarsen>::Initialise(void)
{
    this->mSystemName = "decker_2009";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-87.472528);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.09945e-5);

    // rY[2]:
    this->mVariableNames.push_back("IKs__C1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.476653873938053);

    // rY[3]:
    this->mVariableNames.push_back("IKs__C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.2551771850026437);

    // rY[4]:
    this->mVariableNames.push_back("IKs__C3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.05122852186842027);

    // rY[5]:
    this->mVariableNames.push_back("IKs__C4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.004570874421666423);

    // rY[6]:
    this->mVariableNames.push_back("IKs__C5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001529389211563687);

    // rY[7]:
    this->mVariableNames.push_back("IKs__C6");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.1328281770413747);

    // rY[8]:
    this->mVariableNames.push_back("IKs__C7");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.05333228495514583);

    // rY[9]:
    this->mVariableNames.push_back("IKs__C8");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.007137874613383642);

    // rY[10]:
    this->mVariableNames.push_back("IKs__C9");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0003184390970637536);

    // rY[11]:
    this->mVariableNames.push_back("IKs__C10");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.01388061042363991);

    // rY[12]:
    this->mVariableNames.push_back("IKs__C11");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.003715500164470033);

    // rY[13]:
    this->mVariableNames.push_back("IKs__C12");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0002486371465457659);

    // rY[14]:
    this->mVariableNames.push_back("IKs__C13");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0006446803014431032);

    // rY[15]:
    this->mVariableNames.push_back("IKs__C14");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.628258026770862e-5);

    // rY[16]:
    this->mVariableNames.push_back("IKs__C15");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.122823524761588e-5);

    // rY[17]:
    this->mVariableNames.push_back("IKs__O1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.051906959485266e-5);

    // rY[18]:
    this->mVariableNames.push_back("IKs__O2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.372219883411999e-6);

    // rY[19]:
    this->mVariableNames.push_back("ICaL__C");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999613782488198);

    // rY[20]:
    this->mVariableNames.push_back("ICaL__O");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.27419494597377e-5);

    // rY[21]:
    this->mVariableNames.push_back("ICaL__C_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.936477396599124e-11);

    // rY[22]:
    this->mVariableNames.push_back("ICaL__O_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.350122566369778e-15);

    // rY[23]:
    this->mVariableNames.push_back("ICaL__CI");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.587938121237188e-5);

    // rY[24]:
    this->mVariableNames.push_back("ICaL__OI");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.611420243201921e-10);

    // rY[25]:
    this->mVariableNames.push_back("ICaL__CI_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[26]:
    this->mVariableNames.push_back("ICaL__OI_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[27]:
    this->mVariableNames.push_back("INa_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001022252813581797);

    // rY[28]:
    this->mVariableNames.push_back("INa_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9913109066867);

    // rY[29]:
    this->mVariableNames.push_back("INa_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9970771239754529);

    // rY[30]:
    this->mVariableNames.push_back("INaL_mL_gate__mL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001022252813581797);

    // rY[31]:
    this->mVariableNames.push_back("INaL_hL_gate__hL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.3593255076983574);

    // rY[32]:
    this->mVariableNames.push_back("IKr_xr_gate__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.235996442041028e-8);

    // rY[33]:
    this->mVariableNames.push_back("Ito1_a_gate__a");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.773318268499115e-5);

    // rY[34]:
    this->mVariableNames.push_back("Ito1_i1f_gate__i1f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9979722);

    // rY[35]:
    this->mVariableNames.push_back("Ito1_i1s_gate__i1s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9874435);

    // rY[36]:
    this->mVariableNames.push_back("Ito2_i2f_gate__i2f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9960352);

    // rY[37]:
    this->mVariableNames.push_back("Irel__Irel");
    this->mVariableUnits.push_back("mM_per_ms");
    this->mInitialConditions.push_back(0.00107332);

    // rY[38]:
    this->mVariableNames.push_back("Ca__Ca_JSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.917692717);

    // rY[39]:
    this->mVariableNames.push_back("Ca__Ca_NSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.929835335);

    // rY[40]:
    this->mVariableNames.push_back("Ca__Ca_ss_sr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(9.04757e-5);

    // rY[41]:
    this->mVariableNames.push_back("Ca__Ca_ss_CaL");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(9.61545e-5);

    // rY[42]:
    this->mVariableNames.push_back("Na__Na_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(6.935575);

    // rY[43]:
    this->mVariableNames.push_back("Na__Na_ss_sr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(6.935607);

    // rY[44]:
    this->mVariableNames.push_back("Cl__Cl_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(20.26842);

    // rY[45]:
    this->mVariableNames.push_back("Cl__Cl_ss");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(20.26842);

    // rY[46]:
    this->mVariableNames.push_back("K__K_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(145.5689);

    // rY[47]:
    this->mVariableNames.push_back("CaMK_active__CaMK_trap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0018861341);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamicdecker_2009FromCellMLRushLarsen)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamicdecker_2009FromCellMLRushLarsen(pSolver, pStimulus);
    }
    
}

