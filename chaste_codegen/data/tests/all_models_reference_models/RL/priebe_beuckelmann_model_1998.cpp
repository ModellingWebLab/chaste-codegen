//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: priebe_beuckelmann_model_1998
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on (date omitted as unimportant)
//! 
//! <autogenerated>

#include "priebe_beuckelmann_model_1998.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Dynamicpriebe_beuckelmann_model_1998FromCellMLRushLarsen::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_offset = 0.0; // millisecond
        const double var_chaste_interface__cell__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_chaste_interface__cell__stim_amplitude =  -15.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double Dynamicpriebe_beuckelmann_model_1998FromCellMLRushLarsen::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    
    Dynamicpriebe_beuckelmann_model_1998FromCellMLRushLarsen::Dynamicpriebe_beuckelmann_model_1998FromCellMLRushLarsen(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractRushLarsenCardiacCell(
                22,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamicpriebe_beuckelmann_model_1998FromCellMLRushLarsen>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
    }
    
    Dynamicpriebe_beuckelmann_model_1998FromCellMLRushLarsen::~Dynamicpriebe_beuckelmann_model_1998FromCellMLRushLarsen()
    {
    }
    
    double Dynamicpriebe_beuckelmann_model_1998FromCellMLRushLarsen::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
        // Units: millimolar; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = rY[5];
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = rY[6];
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = rY[7];
        // Units: dimensionless; Initial value: 1.75032478501027e-5
        double var_chaste_interface__Ito_t_gate__t = rY[8];
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[9];
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[10];
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
        // Units: mM; Initial value: 10
        double var_chaste_interface__Ionic_concentrations__Ki = rY[19];
        // Units: mM; Initial value: 140
        
        const double var_INa__E_Na = log(138.0 / var_chaste_interface__Ionic_concentrations__Nai) * 26.725757487819564; // mV
        const double var_INa__g_Na = 16.0; // mS_per_uF
        const double var_INa__i_Na = var_INa__g_Na * pow(var_chaste_interface__INa_m_gate__m, 3.0) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j * (var_chaste_interface__cell__V - var_INa__E_Na); // uA_per_uF
        const double var_ICa__E_Ca = log(2.0 / var_chaste_interface__Ionic_concentrations__Cai) * 13.362878743909782; // mV
        const double var_ICa__g_Ca_max = 0.064000000000000001; // mS_per_uF
        const double var_ICa__i_Ca = var_ICa__g_Ca_max * var_chaste_interface__ICa_d_gate__d * var_chaste_interface__ICa_f_gate__f * (0.00059999999999999995 / (0.00059999999999999995 + var_chaste_interface__Ionic_concentrations__Cai)) * (var_chaste_interface__cell__V - var_ICa__E_Ca); // uA_per_uF
        const double var_Ito__i_to = 0.29999999999999999 * var_chaste_interface__Ito_r_gate__r * var_chaste_interface__Ito_t_gate__t * (var_chaste_interface__cell__V - (log(9.9339999999999993 / ((0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai) + var_chaste_interface__Ionic_concentrations__Ki)) * 26.725757487819564)); // uA_per_uF
        const double var_IKr__g_Kr_max = 0.014999999999999999; // mS_per_uF
        const double var_IKr__i_Kr = var_IKr__g_Kr_max * var_chaste_interface__IKr_Xr_gate__Xr * (1.0 / (1.0 + exp((var_chaste_interface__cell__V + 26.0) * 0.043478260869565216))) * (var_chaste_interface__cell__V - (log(4.0 / var_chaste_interface__Ionic_concentrations__Ki) * 26.725757487819564)); // uA_per_uF
        const double var_IKs__i_Ks = 0.02 * pow(var_chaste_interface__IKs_Xs_gate__Xs, 2.0) * (var_chaste_interface__cell__V - (log(6.5295399999999999 / ((0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai) + var_chaste_interface__Ionic_concentrations__Ki)) * 26.725757487819564)); // uA_per_uF
        const double var_IK1__E_K1 = log(4.0 / var_chaste_interface__Ionic_concentrations__Ki) * 26.725757487819564; // mV
        const double var_IK1_K1_gate__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * (var_chaste_interface__cell__V - (var_IK1__E_K1 + 200.0)))); // per_ms
        const double var_IK1__i_K1 = 2.5 * (var_IK1_K1_gate__alpha_K1 / (var_IK1_K1_gate__alpha_K1 + (((3.0 * exp(0.00020000000000000001 * (var_chaste_interface__cell__V + 100.0 + (-var_IK1__E_K1)))) + (1.0 * exp(0.10000000000000001 * (var_chaste_interface__cell__V - (10.0 + var_IK1__E_K1))))) / (1.0 + exp( -0.5 * (var_chaste_interface__cell__V - var_IK1__E_K1)))))) * (var_chaste_interface__cell__V - var_IK1__E_K1); // uA_per_uF
        const double var_INaCa__i_NaCa = (8.9708471082494196e-05 / (1.0 + (0.10000000000000001 * exp(var_chaste_interface__cell__V *  -0.024321106718724127)))) * ((exp(var_chaste_interface__cell__V * 0.013095980540851452) * pow(var_chaste_interface__Ionic_concentrations__Nai, 3.0) * 2.0) - (exp(var_chaste_interface__cell__V *  -0.024321106718724127) * 2628072.0 * var_chaste_interface__Ionic_concentrations__Cai)); // uA_per_uF
        const double var_INaK__i_NaK = ((((1.0 / (1.0 + (0.1245 * exp(var_chaste_interface__cell__V *  -0.0037417087259575578)) + (exp((-var_chaste_interface__cell__V) * 0.037417087259575578) * 0.035310840049036757))) * 1.3) / (1.0 + pow(10.0 / var_chaste_interface__Ionic_concentrations__Nai, 1.5))) * 4.0) * 0.18181818181818182; // uA_per_uF
        const double var_INab__i_b_Na = 0.001 * (var_chaste_interface__cell__V - var_INa__E_Na); // uA_per_uF
        const double var_ICab__i_b_Ca = 0.00084999999999999995 * (var_chaste_interface__cell__V - var_ICa__E_Ca); // uA_per_uF
        const double var_chaste_interface__cell__i_Stim = 0.0;
        const double var_cell__dVdt =  -1.0 * (var_INa__i_Na + var_ICa__i_Ca + var_Ito__i_to + var_IKr__i_Kr + var_IKs__i_Ks + var_IK1__i_K1 + var_INaCa__i_NaCa + var_INaK__i_NaK + var_INab__i_b_Na + var_ICab__i_b_Ca + (var_chaste_interface__cell__i_Stim / HeartConfig::Instance()->GetCapacitance())); // mV_per_ms
        const double var_chaste_interface__i_ionic = (var_cell__dVdt) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = -(var_chaste_interface__i_ionic);
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamicpriebe_beuckelmann_model_1998FromCellMLRushLarsen::EvaluateEquations(double var_chaste_interface__environment__time, std::vector<double> &rDY, std::vector<double> &rAlphaOrTau, std::vector<double> &rBetaOrInf)
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
        // Units: millimolar; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = rY[5];
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = rY[6];
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = rY[7];
        // Units: dimensionless; Initial value: 1.75032478501027e-5
        double var_chaste_interface__Ito_t_gate__t = rY[8];
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[9];
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[10];
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Irel__APtrack = rY[11];
        // Units: dimensionless; Initial value: -1.372158997089e-136
        double var_chaste_interface__Irel__APtrack2 = rY[12];
        // Units: dimensionless; Initial value: -7.58517896402761e-136
        double var_chaste_interface__Irel__APtrack3 = rY[13];
        // Units: dimensionless; Initial value: 4.82035353592764e-5
        double var_chaste_interface__Irel__Cainfluxtrack = rY[14];
        // Units: mM; Initial value: -7.71120176147331e-138
        double var_chaste_interface__Irel__OVRLDtrack = rY[15];
        // Units: dimensionless; Initial value: 1e-6
        double var_chaste_interface__Irel__OVRLDtrack2 = rY[16];
        // Units: dimensionless; Initial value: 1e-6
        double var_chaste_interface__Irel__OVRLDtrack3 = rY[17];
        // Units: dimensionless; Initial value: 1e-6
        double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
        // Units: mM; Initial value: 10
        double var_chaste_interface__Ionic_concentrations__Ki = rY[19];
        // Units: mM; Initial value: 140
        double var_chaste_interface__Ionic_concentrations__Ca_JSR = rY[20];
        // Units: mM; Initial value: 2.5
        double var_chaste_interface__Ionic_concentrations__Ca_NSR = rY[21];
        // Units: mM; Initial value: 2.5
        
        
        // Mathematics
        double d_dt_chaste_interface__cell__V;
        const double var_INa__E_Na = log(138.0 / var_chaste_interface__Ionic_concentrations__Nai) * 26.725757487819564; // mV
        const double var_INa__g_Na = 16.0; // mS_per_uF
        const double var_INa__i_Na = var_INa__g_Na * pow(var_chaste_interface__INa_m_gate__m, 3.0) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j * (var_chaste_interface__cell__V - var_INa__E_Na); // uA_per_uF
        const double var_ICa__E_Ca = log(2.0 / var_chaste_interface__Ionic_concentrations__Cai) * 13.362878743909782; // mV
        const double var_ICa__g_Ca_max = 0.064000000000000001; // mS_per_uF
        const double var_ICa__i_Ca = var_ICa__g_Ca_max * var_chaste_interface__ICa_d_gate__d * var_chaste_interface__ICa_f_gate__f * (0.00059999999999999995 / (0.00059999999999999995 + var_chaste_interface__Ionic_concentrations__Cai)) * (var_chaste_interface__cell__V - var_ICa__E_Ca); // uA_per_uF
        const double var_Ito__i_to = 0.29999999999999999 * var_chaste_interface__Ito_r_gate__r * var_chaste_interface__Ito_t_gate__t * (var_chaste_interface__cell__V - (log(9.9339999999999993 / ((0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai) + var_chaste_interface__Ionic_concentrations__Ki)) * 26.725757487819564)); // uA_per_uF
        const double var_IKr__g_Kr_max = 0.014999999999999999; // mS_per_uF
        const double var_IKr__i_Kr = var_IKr__g_Kr_max * var_chaste_interface__IKr_Xr_gate__Xr * (1.0 / (1.0 + exp((var_chaste_interface__cell__V + 26.0) * 0.043478260869565216))) * (var_chaste_interface__cell__V - (log(4.0 / var_chaste_interface__Ionic_concentrations__Ki) * 26.725757487819564)); // uA_per_uF
        const double var_IKs__i_Ks = 0.02 * pow(var_chaste_interface__IKs_Xs_gate__Xs, 2.0) * (var_chaste_interface__cell__V - (log(6.5295399999999999 / ((0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai) + var_chaste_interface__Ionic_concentrations__Ki)) * 26.725757487819564)); // uA_per_uF
        const double var_IK1__E_K1 = log(4.0 / var_chaste_interface__Ionic_concentrations__Ki) * 26.725757487819564; // mV
        const double var_IK1_K1_gate__alpha_K1 = 0.10000000000000001 / (1.0 + exp(0.059999999999999998 * (var_chaste_interface__cell__V - (var_IK1__E_K1 + 200.0)))); // per_ms
        const double var_IK1__i_K1 = 2.5 * (var_IK1_K1_gate__alpha_K1 / (var_IK1_K1_gate__alpha_K1 + (((3.0 * exp(0.00020000000000000001 * (var_chaste_interface__cell__V + 100.0 + (-var_IK1__E_K1)))) + (1.0 * exp(0.10000000000000001 * (var_chaste_interface__cell__V - (10.0 + var_IK1__E_K1))))) / (1.0 + exp( -0.5 * (var_chaste_interface__cell__V - var_IK1__E_K1)))))) * (var_chaste_interface__cell__V - var_IK1__E_K1); // uA_per_uF
        const double var_INaCa__i_NaCa = (8.9708471082494196e-05 / (1.0 + (0.10000000000000001 * exp(var_chaste_interface__cell__V *  -0.024321106718724127)))) * ((exp(var_chaste_interface__cell__V * 0.013095980540851452) * pow(var_chaste_interface__Ionic_concentrations__Nai, 3.0) * 2.0) - (exp(var_chaste_interface__cell__V *  -0.024321106718724127) * 2628072.0 * var_chaste_interface__Ionic_concentrations__Cai)); // uA_per_uF
        const double var_INaK__i_NaK = ((((1.0 / (1.0 + (0.1245 * exp(var_chaste_interface__cell__V *  -0.0037417087259575578)) + (exp((-var_chaste_interface__cell__V) * 0.037417087259575578) * 0.035310840049036757))) * 1.3) / (1.0 + pow(10.0 / var_chaste_interface__Ionic_concentrations__Nai, 1.5))) * 4.0) * 0.18181818181818182; // uA_per_uF
        const double var_INab__i_b_Na = 0.001 * (var_chaste_interface__cell__V - var_INa__E_Na); // uA_per_uF
        const double var_ICab__i_b_Ca = 0.00084999999999999995 * (var_chaste_interface__cell__V - var_ICa__E_Ca); // uA_per_uF
        const double var_chaste_interface__cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        const double var_cell__dVdt =  -1.0 * (var_INa__i_Na + var_ICa__i_Ca + var_Ito__i_to + var_IKr__i_Kr + var_IKs__i_Ks + var_IK1__i_K1 + var_INaCa__i_NaCa + var_INaK__i_NaK + var_INab__i_b_Na + var_ICab__i_b_Ca + (var_chaste_interface__cell__i_Stim / HeartConfig::Instance()->GetCapacitance())); // mV_per_ms
        const double var_Irel__i_rel = ((var_chaste_interface__Irel__Cainfluxtrack > 5.0000000000000004e-06) ? ((((var_chaste_interface__Irel__Cainfluxtrack - 5.0000000000000004e-06) * 22.0) / ((0.00080000000000000004 + var_chaste_interface__Irel__Cainfluxtrack) - 5.0000000000000004e-06)) * (1.0 - var_chaste_interface__Irel__APtrack2) * var_chaste_interface__Irel__APtrack2) : ((var_chaste_interface__Irel__Cainfluxtrack <= 5.0000000000000004e-06) && (var_chaste_interface__Irel__OVRLDtrack2 > 0.0)) ? ((1.0 - var_chaste_interface__Irel__OVRLDtrack2) * var_chaste_interface__Irel__OVRLDtrack2 * 0.0) : 0.0) * (var_chaste_interface__Ionic_concentrations__Ca_JSR - var_chaste_interface__Ionic_concentrations__Cai); // mM_per_ms
        const double var_Iup__i_up = (0.0044999999999999997 * var_chaste_interface__Ionic_concentrations__Cai) / (var_chaste_interface__Ionic_concentrations__Cai + 0.00092000000000000003); // mM_per_ms
        const double var_Ileak__i_leak = 0.00025999999999999998 * var_chaste_interface__Ionic_concentrations__Ca_NSR; // mM_per_ms
        const double var_Itr__i_tr = (1.0 * (var_chaste_interface__Ionic_concentrations__Ca_NSR - var_chaste_interface__Ionic_concentrations__Ca_JSR)) * 0.0055555555555555558; // mM_per_ms
        const double d_dt_chaste_interface__Ionic_concentrations__Cai = (1.0 / (1.0 + (1.0 * ((0.00011900000000000002 / pow(0.0023800000000000002 + var_chaste_interface__Ionic_concentrations__Cai, 2.0)) + (3.5000000000000004e-05 / pow(0.00050000000000000001 + var_chaste_interface__Ionic_concentrations__Cai, 2.0)))))) * ((( -153.40000000000001 * ((var_ICa__i_Ca - (2.0 * var_INaCa__i_NaCa)) + var_ICab__i_b_Ca)) * 2.0047415681574306e-07) + ((var_Irel__i_rel * 182.46370132049518) * 3.8686179652867115e-05) + (((var_Ileak__i_leak - var_Iup__i_up) * 2098.3325651856949) * 3.8686179652867115e-05)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Irel__APtrack = (var_cell__dVdt > 150.0) ? ((100.0 * (1.0 - var_chaste_interface__Irel__APtrack)) - (0.5 * var_chaste_interface__Irel__APtrack)) : ( -0.5 * var_chaste_interface__Irel__APtrack); // 'per millisecond'
        const double d_dt_chaste_interface__Irel__APtrack2 = ((var_chaste_interface__Irel__APtrack < 0.20000000000000001) && (var_chaste_interface__Irel__APtrack > 0.17999999999999999)) ? ((100.0 * (1.0 - var_chaste_interface__Irel__APtrack2)) - (0.5 * var_chaste_interface__Irel__APtrack2)) : ( -0.5 * var_chaste_interface__Irel__APtrack2); // 'per millisecond'
        const double d_dt_chaste_interface__Irel__APtrack3 = ((var_chaste_interface__Irel__APtrack < 0.20000000000000001) && (var_chaste_interface__Irel__APtrack > 0.17999999999999999)) ? ((100.0 * (1.0 - var_chaste_interface__Irel__APtrack3)) - (0.5 * var_chaste_interface__Irel__APtrack3)) : ( -0.01 * var_chaste_interface__Irel__APtrack3); // 'per millisecond'
        const double d_dt_chaste_interface__Irel__Cainfluxtrack = (var_chaste_interface__Irel__APtrack > 0.20000000000000001) ? (( -153.40000000000001 * ((var_ICa__i_Ca - var_INaCa__i_NaCa) + var_ICab__i_b_Ca)) * 2.0047415681574306e-07) : ((var_chaste_interface__Irel__APtrack2 > 0.01) && (var_chaste_interface__Irel__APtrack <= 0.20000000000000001)) ? 0.0 : ( -0.5 * var_chaste_interface__Irel__Cainfluxtrack); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Irel__OVRLDtrack = (((1.0 / (1.0 + (0.80000000000000004 / var_chaste_interface__Ionic_concentrations__Ca_JSR))) > 0.69999999999999996) && (var_chaste_interface__Irel__OVRLDtrack3 < 0.37) && (var_chaste_interface__Irel__APtrack3 < 0.37)) ? ((1.0 - var_chaste_interface__Irel__OVRLDtrack) * 0.0) : (var_chaste_interface__Irel__OVRLDtrack *  -0.0); // 'per millisecond'
        const double d_dt_chaste_interface__Irel__OVRLDtrack2 = ((var_chaste_interface__Irel__OVRLDtrack > 0.97999999999999998) && (var_chaste_interface__Irel__OVRLDtrack2 < 0.97999999999999998)) ? ((1.0 - var_chaste_interface__Irel__OVRLDtrack2) * 0.0) : (var_chaste_interface__Irel__OVRLDtrack2 *  -0.0); // 'per millisecond'
        const double d_dt_chaste_interface__Irel__OVRLDtrack3 = ((var_chaste_interface__Irel__OVRLDtrack > 0.97999999999999998) && (var_chaste_interface__Irel__OVRLDtrack3 < 0.97999999999999998)) ? ((1.0 - var_chaste_interface__Irel__OVRLDtrack3) * 0.0) : (var_chaste_interface__Irel__OVRLDtrack3 *  -0.0); // 'per millisecond'
        const double d_dt_chaste_interface__Ionic_concentrations__Nai = ((var_INa__i_Na + var_INab__i_b_Na + (var_INaCa__i_NaCa * 3.0) + (var_INaK__i_NaK * 3.0)) *  -153.40000000000001) * 4.0094831363148611e-07; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ionic_concentrations__Ki = (((var_Ito__i_to + var_IKr__i_Kr + var_IK1__i_K1 + (var_chaste_interface__cell__i_Stim / HeartConfig::Instance()->GetCapacitance()) + var_IKs__i_Ks) - (2.0 * var_INaK__i_NaK)) *  -153.40000000000001) * 4.0094831363148611e-07; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ionic_concentrations__Ca_JSR = (1.0 / (1.0 + (8.0 / pow(0.80000000000000004 + var_chaste_interface__Ionic_concentrations__Ca_JSR, 2.0)))) * (var_Itr__i_tr - var_Irel__i_rel); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ionic_concentrations__Ca_NSR =  -1.0 * ((var_Ileak__i_leak + (0.086956521739130418 * var_Itr__i_tr)) - var_Iup__i_up); // 'millimole per litre per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__cell__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface__cell__V = var_cell__dVdt; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__cell__V;
        rDY[1] = d_dt_chaste_interface__Ionic_concentrations__Cai;
        rAlphaOrTau[2] = (fabs(var_chaste_interface__cell__V + 47.130000000000003) > 0.001) ? ((0.32000000000000001 * (var_chaste_interface__cell__V + 47.130000000000003)) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__cell__V + 47.130000000000003)))) : 3.2000000000000002;
        rBetaOrInf[2] = 0.080000000000000002 * exp((-var_chaste_interface__cell__V) * 0.090909090909090912);
        rAlphaOrTau[3] = (var_chaste_interface__cell__V <  -40.0) ? (0.13500000000000001 * exp((80.0 + var_chaste_interface__cell__V) *  -0.14705882352941177)) : 0.0;
        rBetaOrInf[3] = (var_chaste_interface__cell__V <  -40.0) ? ((3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V)) + (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V))) : (1.0 / (0.13 * (1.0 + exp((-(var_chaste_interface__cell__V + 10.66)) * 0.0900900900900901))));
        rAlphaOrTau[4] = (var_chaste_interface__cell__V <  -40.0) ? (((( -127140.0 * exp(0.24399999999999999 * var_chaste_interface__cell__V)) - (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__cell__V))) * (var_chaste_interface__cell__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__cell__V + 79.230000000000004)))) : 0.0;
        rBetaOrInf[4] = (var_chaste_interface__cell__V <  -40.0) ? ((0.1212 * exp( -0.01052 * var_chaste_interface__cell__V)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__cell__V + 40.140000000000001)))) : ((0.29999999999999999 * exp( -2.5349999999999999e-07 * var_chaste_interface__cell__V)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__cell__V + 32.0))));
        rAlphaOrTau[5] = 0.3583958756132814 * exp((-pow((var_chaste_interface__cell__V - 22.359999999999999) * 0.059947366212465457, 2.0)) * 0.5);
        rBetaOrInf[5] = 0.14710000000000001 - (0.14162050141511009 * exp((-pow((var_chaste_interface__cell__V - 6.2744) * 0.066979236436704628, 2.0)) * 0.5));
        rAlphaOrTau[6] = 0.0068719999999999996 / (1.0 + exp((var_chaste_interface__cell__V - 6.1546000000000003) * 0.16333730787449161));
        rBetaOrInf[6] = (((0.068699999999999997 * exp( -0.1081 * (var_chaste_interface__cell__V + 9.8254999999999999))) + 0.0112) / (1.0 + exp( -0.27789999999999998 * (var_chaste_interface__cell__V + 9.8254999999999999)))) + 0.00054739999999999997;
        rAlphaOrTau[7] = (0.52659999999999996 * exp( -0.0166 * (var_chaste_interface__cell__V - 42.291200000000003))) / (1.0 + exp( -0.094299999999999995 * (var_chaste_interface__cell__V - 42.291200000000003)));
        rBetaOrInf[7] = ((5.1860000000000002e-05 * var_chaste_interface__cell__V) + (0.51490000000000002 * exp( -0.13439999999999999 * (var_chaste_interface__cell__V - 5.0026999999999999)))) / (1.0 + exp( -0.1348 * (var_chaste_interface__cell__V - 5.1860000000000002e-05)));
        rAlphaOrTau[8] = ((5.6119999999999998e-05 * var_chaste_interface__cell__V) + (0.072099999999999997 * exp( -0.17299999999999999 * (var_chaste_interface__cell__V + 34.253100000000003)))) / (1.0 + exp( -0.17319999999999999 * (var_chaste_interface__cell__V + 34.253100000000003)));
        rBetaOrInf[8] = ((0.0001215 * var_chaste_interface__cell__V) + (0.076700000000000004 * exp( -1.6600000000000001e-09 * (var_chaste_interface__cell__V + 34.023499999999999)))) / (1.0 + exp( -0.16039999999999999 * (var_chaste_interface__cell__V + 34.023499999999999)));
        rAlphaOrTau[9] = 0.0030130000000000001 / (1.0 + exp((7.4454000000000002 - (var_chaste_interface__cell__V + 10.0)) * 0.069846547135942336));
        rBetaOrInf[9] = 0.0058700000000000002 / (1.0 + exp((var_chaste_interface__cell__V + 15.949999999999999) * 0.063211125158027806));
        rAlphaOrTau[10] = (0.0050000000000000001 * exp(0.00052660000000000001 * (var_chaste_interface__cell__V + 4.0670000000000002))) / (1.0 + exp( -0.12620000000000001 * (var_chaste_interface__cell__V + 4.0670000000000002)));
        rBetaOrInf[10] = (0.016 * exp(0.0016000000000000001 * (var_chaste_interface__cell__V + 65.659999999999997))) / (1.0 + exp(0.078299999999999995 * (var_chaste_interface__cell__V + 65.659999999999997)));
        rDY[11] = d_dt_chaste_interface__Irel__APtrack;
        rDY[12] = d_dt_chaste_interface__Irel__APtrack2;
        rDY[13] = d_dt_chaste_interface__Irel__APtrack3;
        rDY[14] = d_dt_chaste_interface__Irel__Cainfluxtrack;
        rDY[15] = d_dt_chaste_interface__Irel__OVRLDtrack;
        rDY[16] = d_dt_chaste_interface__Irel__OVRLDtrack2;
        rDY[17] = d_dt_chaste_interface__Irel__OVRLDtrack3;
        rDY[18] = d_dt_chaste_interface__Ionic_concentrations__Nai;
        rDY[19] = d_dt_chaste_interface__Ionic_concentrations__Ki;
        rDY[20] = d_dt_chaste_interface__Ionic_concentrations__Ca_JSR;
        rDY[21] = d_dt_chaste_interface__Ionic_concentrations__Ca_NSR;
    }
    
    void Dynamicpriebe_beuckelmann_model_1998FromCellMLRushLarsen::ComputeOneStepExceptVoltage(const std::vector<double> &rDY, const std::vector<double> &rAlphaOrTau, const std::vector<double> &rBetaOrInf)
    {
        std::vector<double>& rY = rGetStateVariables();
        rY[1] += mDt * rDY[1];
        {
            const double tau_inv = rAlphaOrTau[2] + rBetaOrInf[2];
            const double y_inf = rAlphaOrTau[2] / tau_inv;
            rY[2] = y_inf + (rY[2] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[3] + rBetaOrInf[3];
            const double y_inf = rAlphaOrTau[3] / tau_inv;
            rY[3] = y_inf + (rY[3] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[4] + rBetaOrInf[4];
            const double y_inf = rAlphaOrTau[4] / tau_inv;
            rY[4] = y_inf + (rY[4] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[5] + rBetaOrInf[5];
            const double y_inf = rAlphaOrTau[5] / tau_inv;
            rY[5] = y_inf + (rY[5] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[6] + rBetaOrInf[6];
            const double y_inf = rAlphaOrTau[6] / tau_inv;
            rY[6] = y_inf + (rY[6] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[7] + rBetaOrInf[7];
            const double y_inf = rAlphaOrTau[7] / tau_inv;
            rY[7] = y_inf + (rY[7] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[8] + rBetaOrInf[8];
            const double y_inf = rAlphaOrTau[8] / tau_inv;
            rY[8] = y_inf + (rY[8] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[9] + rBetaOrInf[9];
            const double y_inf = rAlphaOrTau[9] / tau_inv;
            rY[9] = y_inf + (rY[9] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[10] + rBetaOrInf[10];
            const double y_inf = rAlphaOrTau[10] / tau_inv;
            rY[10] = y_inf + (rY[10] - y_inf)*exp(-mDt*tau_inv);
        }
        rY[11] += mDt * rDY[11];
        rY[12] += mDt * rDY[12];
        rY[13] += mDt * rDY[13];
        rY[14] += mDt * rDY[14];
        rY[15] += mDt * rDY[15];
        rY[16] += mDt * rDY[16];
        rY[17] += mDt * rDY[17];
        rY[18] += mDt * rDY[18];
        rY[19] += mDt * rDY[19];
        rY[20] += mDt * rDY[20];
        rY[21] += mDt * rDY[21];
    }
    
template<>
void OdeSystemInformation<Dynamicpriebe_beuckelmann_model_1998FromCellMLRushLarsen>::Initialise(void)
{
    this->mSystemName = "priebe_beuckelmann_model_1998";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-90.7796417483135);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0002);

    // rY[2]:
    this->mVariableNames.push_back("INa_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000585525582501575);

    // rY[3]:
    this->mVariableNames.push_back("INa_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.995865529216237);

    // rY[4]:
    this->mVariableNames.push_back("INa_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.997011204496203);

    // rY[5]:
    this->mVariableNames.push_back("ICa_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.50653215966786e-10);

    // rY[6]:
    this->mVariableNames.push_back("ICa_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.92130376850548);

    // rY[7]:
    this->mVariableNames.push_back("Ito_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.75032478501027e-5);

    // rY[8]:
    this->mVariableNames.push_back("Ito_t_gate__t");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999897251531651);

    // rY[9]:
    this->mVariableNames.push_back("IKs_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00885658064818147);

    // rY[10]:
    this->mVariableNames.push_back("IKr_Xr_gate__Xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000215523048438941);

    // rY[11]:
    this->mVariableNames.push_back("Irel__APtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(-1.372158997089e-136);

    // rY[12]:
    this->mVariableNames.push_back("Irel__APtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(-7.58517896402761e-136);

    // rY[13]:
    this->mVariableNames.push_back("Irel__APtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(4.82035353592764e-5);

    // rY[14]:
    this->mVariableNames.push_back("Irel__Cainfluxtrack");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(-7.71120176147331e-138);

    // rY[15]:
    this->mVariableNames.push_back("Irel__OVRLDtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-6);

    // rY[16]:
    this->mVariableNames.push_back("Irel__OVRLDtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-6);

    // rY[17]:
    this->mVariableNames.push_back("Irel__OVRLDtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-6);

    // rY[18]:
    this->mVariableNames.push_back("Ionic_concentrations__Nai");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(10);

    // rY[19]:
    this->mVariableNames.push_back("Ionic_concentrations__Ki");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(140);

    // rY[20]:
    this->mVariableNames.push_back("Ionic_concentrations__Ca_JSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(2.5);

    // rY[21]:
    this->mVariableNames.push_back("Ionic_concentrations__Ca_NSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(2.5);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamicpriebe_beuckelmann_model_1998FromCellMLRushLarsen)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamicpriebe_beuckelmann_model_1998FromCellMLRushLarsen(pSolver, pStimulus);
    }
    
}

