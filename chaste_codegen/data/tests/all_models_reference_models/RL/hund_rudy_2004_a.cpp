//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: hund_rudy_2004
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on (date omitted as unimportant)
//! 
//! <autogenerated>

#include "hund_rudy_2004_a.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Dynamichund_rudy_2004_aFromCellMLRushLarsen::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_offset = 0.0; // millisecond
        const double var_chaste_interface__cell__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_chaste_interface__cell__stim_amplitude =  -15.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double Dynamichund_rudy_2004_aFromCellMLRushLarsen::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    
    Dynamichund_rudy_2004_aFromCellMLRushLarsen::Dynamichund_rudy_2004_aFromCellMLRushLarsen(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractRushLarsenCardiacCell(
                29,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamichund_rudy_2004_aFromCellMLRushLarsen>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
    }
    
    Dynamichund_rudy_2004_aFromCellMLRushLarsen::~Dynamichund_rudy_2004_aFromCellMLRushLarsen()
    {
    }
    
    double Dynamichund_rudy_2004_aFromCellMLRushLarsen::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: millimolar; Initial value: 0.00012131666
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.987317750543
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.991924983076
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 0.00000164013
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.00000724074
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.019883138161
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.019890650554
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.013970786703
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.99996472752
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.829206149767
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.000816605172
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.26130711759
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 135.469546216758
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 15.59207157178
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        
        const double var_INa__G_Na_mult = 1.0; // dimensionless
        const double var_reversal_potentials__ENa = log(140.0 / var_chaste_interface__Na__Na_i) * 26.712338705500134; // mV
        const double var_ICaL__G_CaL_mult = 1.0; // dimensionless
        const double var_ICaL__ibarca = (var_ICaL__G_CaL_mult * (var_chaste_interface__cell__V - 15.0) * ((1.0 * var_chaste_interface__Ca__Ca_ss * exp((var_chaste_interface__cell__V - 15.0) * 0.074871767015599999)) - 0.61380000000000001) * 3.5108651860830804) / (exp((var_chaste_interface__cell__V - 15.0) * 0.074871767015599999) - 1.0); // uA_per_uF
        const double var_ICaL__ICaL = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca; // uA_per_uF
        const double var_reversal_potentials__EK = log(5.4000000000000004 / var_chaste_interface__K__K_i) * 26.712338705500134; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__cell__V - var_reversal_potentials__EK) - 59.215000000000003))); // per_ms
        const double var_IKr__G_Kr_mult = 1.0; // dimensionless
        const double var_IpCa__IpCa = (0.057500000000000002 * var_chaste_interface__Ca__Ca_i) / (0.00050000000000000001 + var_chaste_interface__Ca__Ca_i); // uA_per_uF
        const double var_ICab__ICab = (var_chaste_interface__cell__V * ((var_chaste_interface__Ca__Ca_i * exp(var_chaste_interface__cell__V * 0.074871767015599999)) - 0.61380000000000001) * 0.0028824983370005666) / (exp(var_chaste_interface__cell__V * 0.074871767015599999) - 1.0); // uA_per_uF
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__INaCa = (4.5 * (1.0 / (1.0 + pow(0.000125 / var_INaCa__ca_i_NaCa, 2.0))) * ((pow(var_chaste_interface__Na__Na_i, 3.0) * 1.8 * exp(var_chaste_interface__cell__V * 0.01310255922773)) - (2744000.0 * var_INaCa__ca_i_NaCa * exp(var_chaste_interface__cell__V *  -0.024333324280070002)))) / ((1.0 + (0.27000000000000002 * exp(var_chaste_interface__cell__V *  -0.024333324280070002))) * (((1.3 * pow(var_chaste_interface__Na__Na_i, 3.0)) + (669921.875 * var_INaCa__ca_i_NaCa) + ((1.0 + (var_INaCa__ca_i_NaCa * 277.77777777777777)) * 3349.5606000000007)) + (((1.0 + pow(var_chaste_interface__Na__Na_i * 0.081300813008130079, 3.0)) * 9878.3999999999996) + (pow(var_chaste_interface__Na__Na_i, 3.0) * 1.8) + (2744000.0 * var_INaCa__ca_i_NaCa)))); // uA_per_uF
        const double var_INaK__INaK = ((((1.0 / (1.0 + (0.1245 * exp(var_chaste_interface__cell__V *  -0.00374358835078)) + (exp((-var_chaste_interface__cell__V) * 0.0374358835078) * 0.036533226130519084))) * 0.61875000000000002) / (1.0 + pow(10.0 / var_chaste_interface__Na__Na_i, 2.0))) * 5.4000000000000004) * 0.14492753623188406; // uA_per_uF
        const double var_reversal_potentials__ECl = (-log(100.0 / var_chaste_interface__Cl__Cl_i)) * 26.712338705500134; // mV
        const double var_cell__caiont = (var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa) - (2.0 * var_INaCa__INaCa); // uA_per_uF
        const double var_cell__naiont = (var_INa__G_Na_mult * (8.25 * var_chaste_interface__INa__m * var_chaste_interface__INa__m * var_chaste_interface__INa__m * var_chaste_interface__INa__H * var_chaste_interface__INa__J) * (var_chaste_interface__cell__V - var_reversal_potentials__ENa)) + (3.0 * var_INaCa__INaCa) + (3.0 * var_INaK__INaK) + (0.0064999999999999997 * pow(var_chaste_interface__INal__mL, 3.0) * var_chaste_interface__INal__hL * (var_chaste_interface__cell__V - var_reversal_potentials__ENa)); // uA_per_uF
        const double var_chaste_interface__cell__i_Stim = 0.0;
        const double var_cell__i_Stim = var_chaste_interface__cell__i_Stim / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_cell__kiont = (((var_IKr__G_Kr_mult * 0.013854200000000001 * var_chaste_interface__IKr__xr * (1.0 / (1.0 + exp((var_chaste_interface__cell__V + 10.0) * 0.064935064935064929))) * (var_chaste_interface__cell__V - var_reversal_potentials__EK)) + ((0.024897499999999999 * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_chaste_interface__Ca__Ca_i, 1.3999999999999999))))) * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 * (var_chaste_interface__cell__V - (log(7.9662000000000006 / (var_chaste_interface__K__K_i + (0.018329999999999999 * var_chaste_interface__Na__Na_i))) * 26.712338705500134))) + (((var_IK1__ak1 * 0.5) / (var_IK1__ak1 + (((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__cell__V - var_reversal_potentials__EK) + 5.476))) + (1.0 * exp(0.061749999999999999 * ((var_chaste_interface__cell__V - var_reversal_potentials__EK) - 594.30999999999995)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__cell__V - var_reversal_potentials__EK) + 4.7530000000000001)))))) * (var_chaste_interface__cell__V - var_reversal_potentials__EK)) + ((0.0027599999999999999 * (var_chaste_interface__cell__V - var_reversal_potentials__EK)) / (1.0 + exp((7.4880000000000004 - var_chaste_interface__cell__V) * 0.16722408026755853)))) - (2.0 * var_INaK__INaK)) + (0.19 * pow(var_chaste_interface__Ito__ydv, 3.0) * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv * exp(var_chaste_interface__cell__V * 0.0033333333333333335) * (var_chaste_interface__cell__V - var_reversal_potentials__EK)) + (0.5 * var_cell__i_Stim); // uA_per_uF
        const double var_cell__clont = (0.00022499999999999999 * (var_chaste_interface__cell__V - var_reversal_potentials__ECl)) + (((var_chaste_interface__cell__V * (var_chaste_interface__Cl__Cl_i - (100.0 * exp(var_chaste_interface__cell__V * 0.0374358835078))) * 0.001444800488100033) / (1.0 - exp(var_chaste_interface__cell__V * 0.0374358835078))) * var_chaste_interface__Ito2__AA) + (0.5 * var_cell__i_Stim); // uA_per_uF
        const double var_chaste_interface__i_ionic = (var_cell__naiont + var_cell__kiont + var_cell__caiont + var_cell__clont) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamichund_rudy_2004_aFromCellMLRushLarsen::EvaluateEquations(double var_chaste_interface__Environment__time, std::vector<double> &rDY, std::vector<double> &rAlphaOrTau, std::vector<double> &rBetaOrInf)
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: millimolar; Initial value: 0.00012131666
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.987317750543
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.991924983076
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 0.00000164013
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.00000724074
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.019883138161
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.019890650554
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.013970786703
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.99996472752
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.829206149767
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.000816605172
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.26130711759
        double var_chaste_interface__Irel__CaMKtrap = rY[20];
        // Units: dimensionless; Initial value: 0.021123704774
        double var_chaste_interface__Irel__ro = rY[21];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__Irel__ri = rY[22];
        // Units: dimensionless; Initial value: 0.862666650318
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 135.469546216758
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 15.59207157178
        double var_chaste_interface__Ca__Ca_jsr = rY[26];
        // Units: mM; Initial value: 1.737580994071
        double var_chaste_interface__Ca__Ca_nsr = rY[27];
        // Units: mM; Initial value: 1.832822335168
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        
        
        // Mathematics
        double d_dt_chaste_interface__cell__V;
        const double var_INa__G_Na_mult = 1.0; // dimensionless
        const double var_reversal_potentials__ENa = log(140.0 / var_chaste_interface__Na__Na_i) * 26.712338705500134; // mV
        const double var_ICaL__G_CaL_mult = 1.0; // dimensionless
        const double var_ICaL__ibarca = (var_ICaL__G_CaL_mult * (var_chaste_interface__cell__V - 15.0) * ((1.0 * var_chaste_interface__Ca__Ca_ss * exp((var_chaste_interface__cell__V - 15.0) * 0.074871767015599999)) - 0.61380000000000001) * 3.5108651860830804) / (exp((var_chaste_interface__cell__V - 15.0) * 0.074871767015599999) - 1.0); // uA_per_uF
        const double var_ICaL__ICaL = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca; // uA_per_uF
        const double var_reversal_potentials__EK = log(5.4000000000000004 / var_chaste_interface__K__K_i) * 26.712338705500134; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__cell__V - var_reversal_potentials__EK) - 59.215000000000003))); // per_ms
        const double var_IKr__G_Kr_mult = 1.0; // dimensionless
        const double var_IpCa__IpCa = (0.057500000000000002 * var_chaste_interface__Ca__Ca_i) / (0.00050000000000000001 + var_chaste_interface__Ca__Ca_i); // uA_per_uF
        const double var_ICab__ICab = (var_chaste_interface__cell__V * ((var_chaste_interface__Ca__Ca_i * exp(var_chaste_interface__cell__V * 0.074871767015599999)) - 0.61380000000000001) * 0.0028824983370005666) / (exp(var_chaste_interface__cell__V * 0.074871767015599999) - 1.0); // uA_per_uF
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__INaCa = (4.5 * (1.0 / (1.0 + pow(0.000125 / var_INaCa__ca_i_NaCa, 2.0))) * ((pow(var_chaste_interface__Na__Na_i, 3.0) * 1.8 * exp(var_chaste_interface__cell__V * 0.01310255922773)) - (2744000.0 * var_INaCa__ca_i_NaCa * exp(var_chaste_interface__cell__V *  -0.024333324280070002)))) / ((1.0 + (0.27000000000000002 * exp(var_chaste_interface__cell__V *  -0.024333324280070002))) * (((1.3 * pow(var_chaste_interface__Na__Na_i, 3.0)) + (669921.875 * var_INaCa__ca_i_NaCa) + ((1.0 + (var_INaCa__ca_i_NaCa * 277.77777777777777)) * 3349.5606000000007)) + (((1.0 + pow(var_chaste_interface__Na__Na_i * 0.081300813008130079, 3.0)) * 9878.3999999999996) + (pow(var_chaste_interface__Na__Na_i, 3.0) * 1.8) + (2744000.0 * var_INaCa__ca_i_NaCa)))); // uA_per_uF
        const double var_INaK__INaK = ((((1.0 / (1.0 + (0.1245 * exp(var_chaste_interface__cell__V *  -0.00374358835078)) + (exp((-var_chaste_interface__cell__V) * 0.0374358835078) * 0.036533226130519084))) * 0.61875000000000002) / (1.0 + pow(10.0 / var_chaste_interface__Na__Na_i, 2.0))) * 5.4000000000000004) * 0.14492753623188406; // uA_per_uF
        const double var_reversal_potentials__ECl = (-log(100.0 / var_chaste_interface__Cl__Cl_i)) * 26.712338705500134; // mV
        const double var_cell__naiont = (var_INa__G_Na_mult * (8.25 * var_chaste_interface__INa__m * var_chaste_interface__INa__m * var_chaste_interface__INa__m * var_chaste_interface__INa__H * var_chaste_interface__INa__J) * (var_chaste_interface__cell__V - var_reversal_potentials__ENa)) + (3.0 * var_INaCa__INaCa) + (3.0 * var_INaK__INaK) + (0.0064999999999999997 * pow(var_chaste_interface__INal__mL, 3.0) * var_chaste_interface__INal__hL * (var_chaste_interface__cell__V - var_reversal_potentials__ENa)); // uA_per_uF
        const double var_chaste_interface__cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time);
        const double var_cell__i_Stim = var_chaste_interface__cell__i_Stim / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_cell__kiont = (((var_IKr__G_Kr_mult * 0.013854200000000001 * var_chaste_interface__IKr__xr * (1.0 / (1.0 + exp((var_chaste_interface__cell__V + 10.0) * 0.064935064935064929))) * (var_chaste_interface__cell__V - var_reversal_potentials__EK)) + ((0.024897499999999999 * (1.0 + (0.59999999999999998 / (1.0 + pow(3.8000000000000002e-05 / var_chaste_interface__Ca__Ca_i, 1.3999999999999999))))) * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 * (var_chaste_interface__cell__V - (log(7.9662000000000006 / (var_chaste_interface__K__K_i + (0.018329999999999999 * var_chaste_interface__Na__Na_i))) * 26.712338705500134))) + (((var_IK1__ak1 * 0.5) / (var_IK1__ak1 + (((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__cell__V - var_reversal_potentials__EK) + 5.476))) + (1.0 * exp(0.061749999999999999 * ((var_chaste_interface__cell__V - var_reversal_potentials__EK) - 594.30999999999995)))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__cell__V - var_reversal_potentials__EK) + 4.7530000000000001)))))) * (var_chaste_interface__cell__V - var_reversal_potentials__EK)) + ((0.0027599999999999999 * (var_chaste_interface__cell__V - var_reversal_potentials__EK)) / (1.0 + exp((7.4880000000000004 - var_chaste_interface__cell__V) * 0.16722408026755853)))) - (2.0 * var_INaK__INaK)) + (0.19 * pow(var_chaste_interface__Ito__ydv, 3.0) * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv * exp(var_chaste_interface__cell__V * 0.0033333333333333335) * (var_chaste_interface__cell__V - var_reversal_potentials__EK)) + (0.5 * var_cell__i_Stim); // uA_per_uF
        const double var_cell__clont = (0.00022499999999999999 * (var_chaste_interface__cell__V - var_reversal_potentials__ECl)) + (((var_chaste_interface__cell__V * (var_chaste_interface__Cl__Cl_i - (100.0 * exp(var_chaste_interface__cell__V * 0.0374358835078))) * 0.001444800488100033) / (1.0 - exp(var_chaste_interface__cell__V * 0.0374358835078))) * var_chaste_interface__Ito2__AA) + (0.5 * var_cell__i_Stim); // uA_per_uF
        const double var_Irel__CaMKactive = ((0.050000000000000003 * (1.0 - var_chaste_interface__Irel__CaMKtrap)) / (1.0 + (0.0015 / var_chaste_interface__Ca__Ca_ss))) + var_chaste_interface__Irel__CaMKtrap; // dimensionless
        const double var_IKs__xss = 1.0 / (1.0 + exp((-(var_chaste_interface__cell__V - 10.5)) * 0.04048582995951417)); // dimensionless
        const double var_IKs__tauxs = 1.0 / (((7.6100000000000007e-05 * (var_chaste_interface__cell__V + 44.600000000000001)) / (1.0 - exp( -9.9700000000000006 * (var_chaste_interface__cell__V + 44.600000000000001)))) + ((0.00036000000000000002 * (var_chaste_interface__cell__V - 0.55000000000000004)) / (exp(0.128 * (var_chaste_interface__cell__V - 0.55000000000000004)) - 1.0))); // ms
        const double var_Irel__dtau_rel = (10.0 * var_Irel__CaMKactive) / (0.14999999999999999 + var_Irel__CaMKactive); // ms
        const double var_Irel__cafac = 1.0 / (1.0 + exp((var_ICaL__ICaL + 0.050000000000000003) * 66.666666666666671)); // dimensionless
        const double var_Irel__irelcicr = (3000.0 * (1.0 / (1.0 + exp((var_ICaL__ibarca + 13.0) * 0.20000000000000001)))) * var_chaste_interface__Irel__ro * var_chaste_interface__Irel__ri * (var_chaste_interface__Ca__Ca_jsr - var_chaste_interface__Ca__Ca_ss); // mM_per_ms
        const double var_Iup_Ileak__iup = ((((0.75 * var_Irel__CaMKactive) / (0.14999999999999999 + var_Irel__CaMKactive)) + 1.0) * 0.0043750000000000004 * var_chaste_interface__Ca__Ca_i) / ((var_chaste_interface__Ca__Ca_i + 0.00092000000000000003) - ((0.00017000000000000001 * var_Irel__CaMKactive) / (0.14999999999999999 + var_Irel__CaMKactive))); // mM_per_ms
        const double var_Iup_Ileak__ileak = (0.0043750000000000004 * var_chaste_interface__Ca__Ca_nsr) * 0.066666666666666666; // mM_per_ms
        const double var_Idiff_Itr__idiff = (var_chaste_interface__Ca__Ca_ss - var_chaste_interface__Ca__Ca_i) * 5.0; // mM_per_ms
        const double var_Idiff_Itr__itr = (var_chaste_interface__Ca__Ca_nsr - var_chaste_interface__Ca__Ca_jsr) * 0.0083333333333333332; // mM_per_ms
        const double var_Na__CTNaCl = (9.8442999999999999e-06 * pow(var_reversal_potentials__ENa - var_reversal_potentials__ECl, 4.0)) / (pow(var_reversal_potentials__ENa - var_reversal_potentials__ECl, 4.0) + 59494197.640692554); // mM_per_ms
        const double var_K__CTKCl = (7.0755999999999996e-06 * (var_reversal_potentials__EK - var_reversal_potentials__ECl)) / ((var_reversal_potentials__EK - var_reversal_potentials__ECl) + 87.825100000000006); // mM_per_ms
        const double d_dt_chaste_interface__Ca__Ca_i = (1.0 / (1.0 + (0.00011900000000000002 / pow(var_chaste_interface__Ca__Ca_i + 0.0023800000000000002, 2.0)) + (3.5000000000000004e-05 / pow(var_chaste_interface__Ca__Ca_i + 0.00050000000000000001, 2.0)))) * ((((-((var_ICab__ICab + var_IpCa__IpCa) - (2.0 * var_INaCa__INaCa))) * 1.5902511810263306e-09) * 19343.089826433559) + (((var_Iup_Ileak__ileak - var_Iup_Ileak__iup) * 2.0983325651856948e-06) * 38686.179652867118) + ((var_Idiff_Itr__idiff * 7.6026542216873e-07) * 38686.179652867118)); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__ICaL__dp = ((9.0 - (8.0 / (1.0 + exp((-(var_chaste_interface__cell__V + 65.0)) * 0.29411764705882354)))) - var_chaste_interface__ICaL__dp) * 0.10000000000000001; // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__fca = (((0.29999999999999999 / (1.0 - (var_ICaL__ICaL * 20.0))) + (0.55000000000000004 / (1.0 + (var_chaste_interface__Ca__Ca_ss * 333.33333333333331))) + 0.14999999999999999) - var_chaste_interface__ICaL__fca) / (((10.0 * var_Irel__CaMKactive) / (0.14999999999999999 + var_Irel__CaMKactive)) + (1.0 / (1.0 + (var_chaste_interface__Ca__Ca_ss * 333.33333333333331))) + 0.5); // 'per millisecond'
        const double d_dt_chaste_interface__ICaL__fca2 = ((1.0 / (1.0 - (var_ICaL__ICaL * 100.0))) - var_chaste_interface__ICaL__fca2) / ((300.0 / (1.0 + exp(((-var_ICaL__ICaL) - 0.17499999999999999) * 25.0))) + 125.0); // 'per millisecond'
        const double d_dt_chaste_interface__IKs__xs2 = ((var_IKs__xss - var_chaste_interface__IKs__xs2) / var_IKs__tauxs) * 0.5; // 'per millisecond'
        const double d_dt_chaste_interface__Ito2__AA = ((1.0 / (1.0 + (0.1502 / var_chaste_interface__Ca__Ca_ss))) - var_chaste_interface__Ito2__AA) * 1.0; // 'per millisecond'
        const double d_dt_chaste_interface__INal__hL = ((1.0 / (1.0 + exp((var_chaste_interface__cell__V + 91.0) * 0.16393442622950821))) - var_chaste_interface__INal__hL) * 0.0016666666666666668; // 'per millisecond'
        const double d_dt_chaste_interface__Irel__CaMKtrap = (0.050000000000000003 * var_Irel__CaMKactive * (var_Irel__CaMKactive - var_chaste_interface__Irel__CaMKtrap)) - (0.00068000000000000005 * var_chaste_interface__Irel__CaMKtrap); // 'per millisecond'
        const double d_dt_chaste_interface__Irel__ro = (((pow(var_chaste_interface__Ca__Ca_jsr, 1.8999999999999999) / (pow(var_chaste_interface__Ca__Ca_jsr, 1.8999999999999999) + pow((49.280000000000001 * var_chaste_interface__Ca__Ca_ss) / (var_chaste_interface__Ca__Ca_ss + 0.0028), 1.8999999999999999))) / (pow(1.0 / var_ICaL__ICaL, 2.0) + 1.0)) - var_chaste_interface__Irel__ro) * 0.33333333333333331; // 'per millisecond'
        const double d_dt_chaste_interface__Irel__ri = ((1.0 / (1.0 + exp(((var_chaste_interface__Ca__Ca_ss - 0.00040000000000000002) + (0.002 * var_Irel__cafac)) * 40000.0))) - var_chaste_interface__Irel__ri) / (3.0 + var_Irel__dtau_rel + ((350.0 - var_Irel__dtau_rel) / (1.0 + exp(((var_chaste_interface__Ca__Ca_ss - 0.0030000000000000001) + (0.0030000000000000001 * var_Irel__cafac)) * 5000.0)))); // 'per millisecond'
        const double d_dt_chaste_interface__Na__Na_i = (((-var_cell__naiont) * 1.5902511810263306e-09) * 38686.179652867118) + var_Na__CTNaCl; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__K__K_i = (((-var_cell__kiont) * 1.5902511810263306e-09) * 38686.179652867118) + var_K__CTKCl; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Cl__Cl_i = ((var_cell__clont * 1.5902511810263306e-09) * 38686.179652867118) + var_Na__CTNaCl + var_K__CTKCl; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_jsr = (1.0 / (1.0 + (8.0 / pow(var_chaste_interface__Ca__Ca_jsr + 0.80000000000000004, 2.0)))) * (var_Idiff_Itr__itr - var_Irel__irelcicr); // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_nsr = (var_Iup_Ileak__iup - ((var_Idiff_Itr__itr * 1.8246370132049518e-07) * 476568.87978169642)) - var_Iup_Ileak__ileak; // 'millimole per litre per millisecond'
        const double d_dt_chaste_interface__Ca__Ca_ss = (1.0 / (1.0 + (4.0890000000000003e-05 / pow(0.00087000000000000001 + var_chaste_interface__Ca__Ca_ss, 2.0)) + (0.0097788000000000007 / pow(0.0086999999999999994 + var_chaste_interface__Ca__Ca_ss, 2.0)))) * (((((-var_ICaL__ICaL) * 1.5902511810263306e-09) * 657665.05409874103) + ((var_Irel__irelcicr * 1.8246370132049518e-07) * 1315330.1081974821)) - var_Idiff_Itr__idiff); // 'millimole per litre per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__cell__V = 0.0;
        }
        else
        {
            const double var_cell__caiont = (var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa) - (2.0 * var_INaCa__INaCa); // uA_per_uF
            d_dt_chaste_interface__cell__V = -(var_cell__naiont + var_cell__kiont + var_cell__caiont + var_cell__clont); // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__cell__V;
        rDY[1] = d_dt_chaste_interface__Ca__Ca_i;
        rAlphaOrTau[2] = (var_chaste_interface__cell__V >=  -40.0) ? 0.0 : (0.13500000000000001 * exp((80.0 + var_chaste_interface__cell__V) *  -0.14705882352941177));
        rBetaOrInf[2] = (var_chaste_interface__cell__V >=  -40.0) ? (1.0 / (0.13 * (1.0 + exp((var_chaste_interface__cell__V + 10.66) *  -0.0900900900900901)))) : ((3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V)) + (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V)));
        rAlphaOrTau[3] = ((var_chaste_interface__cell__V + 47.130000000000003) * 0.32000000000000001) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__cell__V + 47.130000000000003)));
        rBetaOrInf[3] = 0.080000000000000002 * exp((-var_chaste_interface__cell__V) * 0.090909090909090912);
        rAlphaOrTau[4] = (var_chaste_interface__cell__V >=  -40.0) ? 0.0 : (((( -127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V)) - (3.4740000000000003e-05 * exp( -0.043909999999999998 * var_chaste_interface__cell__V))) * 1.0 * (var_chaste_interface__cell__V + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__cell__V + 79.230000000000004))));
        rBetaOrInf[4] = (var_chaste_interface__cell__V >=  -40.0) ? ((0.29999999999999999 * exp( -2.5349999999999999e-07 * var_chaste_interface__cell__V)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__cell__V + 32.0)))) : ((0.1212 * exp( -0.01052 * var_chaste_interface__cell__V)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__cell__V + 40.140000000000001))));
        rAlphaOrTau[5] = 0.58999999999999997 + ((0.80000000000000004 * exp(0.051999999999999998 * (var_chaste_interface__cell__V + 13.0))) / (1.0 + exp(0.13200000000000001 * (var_chaste_interface__cell__V + 13.0))));
        rBetaOrInf[5] = 1.0 / (1.0 + exp((-(var_chaste_interface__cell__V - 4.0)) * 0.14836795252225518));
        rDY[6] = d_dt_chaste_interface__ICaL__dp;
        rAlphaOrTau[7] = 1.0 / ((0.24110000000000001 * exp(-pow(0.044999999999999998 * (var_chaste_interface__cell__V - 9.6913999999999998), 2.0))) + 0.052900000000000003);
        rBetaOrInf[7] = (0.69999999999999996 / (1.0 + exp((var_chaste_interface__cell__V + 17.120000000000001) * 0.14285714285714285))) + 0.29999999999999999;
        rDY[8] = d_dt_chaste_interface__ICaL__fca;
        rDY[9] = d_dt_chaste_interface__ICaL__fca2;
        rAlphaOrTau[10] = 1.0 / ((0.042299999999999997 * exp(-pow(0.058999999999999997 * (var_chaste_interface__cell__V - 18.572600000000001), 2.0))) + 0.0054000000000000003);
        rBetaOrInf[10] = (0.77000000000000002 / (1.0 + exp((var_chaste_interface__cell__V + 17.120000000000001) * 0.14285714285714285))) + 0.23000000000000001;
        rAlphaOrTau[11] = 1.0 / (((0.00059999999999999995 * (var_chaste_interface__cell__V - 1.7383999999999999)) / (1.0 - exp( -0.13600000000000001 * (var_chaste_interface__cell__V - 1.7383999999999999)))) + ((0.00029999999999999997 * (var_chaste_interface__cell__V + 38.360799999999998)) / (exp(0.1522 * (var_chaste_interface__cell__V + 38.360799999999998)) - 1.0)));
        rBetaOrInf[11] = 1.0 / (1.0 + exp((-(var_chaste_interface__cell__V + 10.085000000000001)) * 0.23529411764705882));
        rAlphaOrTau[12] = var_IKs__tauxs;
        rBetaOrInf[12] = var_IKs__xss;
        rDY[13] = d_dt_chaste_interface__IKs__xs2;
        rAlphaOrTau[14] = (25.0 * exp((var_chaste_interface__cell__V - 40.0) * 0.040000000000000001)) / (1.0 + exp((var_chaste_interface__cell__V - 40.0) * 0.040000000000000001));
        rBetaOrInf[14] = (25.0 * exp((-(var_chaste_interface__cell__V + 90.0)) * 0.040000000000000001)) / (1.0 + exp((-(var_chaste_interface__cell__V + 90.0)) * 0.040000000000000001));
        rAlphaOrTau[15] = 0.029999999999999999 / (1.0 + exp((var_chaste_interface__cell__V + 60.0) * 0.20000000000000001));
        rBetaOrInf[15] = (0.20000000000000001 * exp((var_chaste_interface__cell__V + 25.0) * 0.20000000000000001)) / (1.0 + exp((var_chaste_interface__cell__V + 25.0) * 0.20000000000000001));
        rAlphaOrTau[16] = 0.0022499999999999998 / (1.0 + exp((var_chaste_interface__cell__V + 60.0) * 0.20000000000000001));
        rBetaOrInf[16] = (0.10000000000000001 * exp((var_chaste_interface__cell__V + 25.0) * 0.20000000000000001)) / (1.0 + exp((var_chaste_interface__cell__V + 25.0) * 0.20000000000000001));
        rDY[17] = d_dt_chaste_interface__Ito2__AA;
        rAlphaOrTau[18] = ((var_chaste_interface__cell__V + 47.130000000000003) * 0.32000000000000001) / (1.0 - exp( -0.10000000000000001 * (var_chaste_interface__cell__V + 47.130000000000003)));
        rBetaOrInf[18] = 0.080000000000000002 * exp((-var_chaste_interface__cell__V) * 0.090909090909090912);
        rDY[19] = d_dt_chaste_interface__INal__hL;
        rDY[20] = d_dt_chaste_interface__Irel__CaMKtrap;
        rDY[21] = d_dt_chaste_interface__Irel__ro;
        rDY[22] = d_dt_chaste_interface__Irel__ri;
        rDY[23] = d_dt_chaste_interface__Na__Na_i;
        rDY[24] = d_dt_chaste_interface__K__K_i;
        rDY[25] = d_dt_chaste_interface__Cl__Cl_i;
        rDY[26] = d_dt_chaste_interface__Ca__Ca_jsr;
        rDY[27] = d_dt_chaste_interface__Ca__Ca_nsr;
        rDY[28] = d_dt_chaste_interface__Ca__Ca_ss;
    }
    
    void Dynamichund_rudy_2004_aFromCellMLRushLarsen::ComputeOneStepExceptVoltage(const std::vector<double> &rDY, const std::vector<double> &rAlphaOrTau, const std::vector<double> &rBetaOrInf)
    {
        std::vector<double>& rY = rGetStateVariables();
        rY[1] += mDt * rDY[1];
        {
            const double tau_inv = rAlphaOrTau[2] + rBetaOrInf[2];
            const double y_inf = rAlphaOrTau[2] / tau_inv;
            rY[2] = y_inf + (rY[2] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[3] + rBetaOrInf[3];
            const double y_inf = rAlphaOrTau[3] / tau_inv;
            rY[3] = y_inf + (rY[3] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[4] + rBetaOrInf[4];
            const double y_inf = rAlphaOrTau[4] / tau_inv;
            rY[4] = y_inf + (rY[4] - y_inf)*exp(-mDt*tau_inv);
        }
        rY[5] = rBetaOrInf[5] + (rY[5] - rBetaOrInf[5])*exp(-mDt/rAlphaOrTau[5]);
        rY[6] += mDt * rDY[6];
        rY[7] = rBetaOrInf[7] + (rY[7] - rBetaOrInf[7])*exp(-mDt/rAlphaOrTau[7]);
        rY[8] += mDt * rDY[8];
        rY[9] += mDt * rDY[9];
        rY[10] = rBetaOrInf[10] + (rY[10] - rBetaOrInf[10])*exp(-mDt/rAlphaOrTau[10]);
        rY[11] = rBetaOrInf[11] + (rY[11] - rBetaOrInf[11])*exp(-mDt/rAlphaOrTau[11]);
        rY[12] = rBetaOrInf[12] + (rY[12] - rBetaOrInf[12])*exp(-mDt/rAlphaOrTau[12]);
        rY[13] += mDt * rDY[13];
        {
            const double tau_inv = rAlphaOrTau[14] + rBetaOrInf[14];
            const double y_inf = rAlphaOrTau[14] / tau_inv;
            rY[14] = y_inf + (rY[14] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[15] + rBetaOrInf[15];
            const double y_inf = rAlphaOrTau[15] / tau_inv;
            rY[15] = y_inf + (rY[15] - y_inf)*exp(-mDt*tau_inv);
        }
        {
            const double tau_inv = rAlphaOrTau[16] + rBetaOrInf[16];
            const double y_inf = rAlphaOrTau[16] / tau_inv;
            rY[16] = y_inf + (rY[16] - y_inf)*exp(-mDt*tau_inv);
        }
        rY[17] += mDt * rDY[17];
        {
            const double tau_inv = rAlphaOrTau[18] + rBetaOrInf[18];
            const double y_inf = rAlphaOrTau[18] / tau_inv;
            rY[18] = y_inf + (rY[18] - y_inf)*exp(-mDt*tau_inv);
        }
        rY[19] += mDt * rDY[19];
        rY[20] += mDt * rDY[20];
        rY[21] += mDt * rDY[21];
        rY[22] += mDt * rDY[22];
        rY[23] += mDt * rDY[23];
        rY[24] += mDt * rDY[24];
        rY[25] += mDt * rDY[25];
        rY[26] += mDt * rDY[26];
        rY[27] += mDt * rDY[27];
        rY[28] += mDt * rDY[28];
    }
    
template<>
void OdeSystemInformation<Dynamichund_rudy_2004_aFromCellMLRushLarsen>::Initialise(void)
{
    this->mSystemName = "hund_rudy_2004";
    this->mFreeVariableName = "Environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-85.781844107117);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00012131666);

    // rY[2]:
    this->mVariableNames.push_back("INa__H");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.987317750543);

    // rY[3]:
    this->mVariableNames.push_back("INa__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001356538159);

    // rY[4]:
    this->mVariableNames.push_back("INa__J");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.991924983076);

    // rY[5]:
    this->mVariableNames.push_back("ICaL__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00000164013);

    // rY[6]:
    this->mVariableNames.push_back("ICaL__dp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.98230672628);

    // rY[7]:
    this->mVariableNames.push_back("ICaL__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999961508634);

    // rY[8]:
    this->mVariableNames.push_back("ICaL__fca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.97836624923);

    // rY[9]:
    this->mVariableNames.push_back("ICaL__fca2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.893052931249);

    // rY[10]:
    this->mVariableNames.push_back("ICaL__f2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.992234519148);

    // rY[11]:
    this->mVariableNames.push_back("IKr__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00000724074);

    // rY[12]:
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.019883138161);

    // rY[13]:
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.019890650554);

    // rY[14]:
    this->mVariableNames.push_back("Ito__ydv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.013970786703);

    // rY[15]:
    this->mVariableNames.push_back("Ito__ydv2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99996472752);

    // rY[16]:
    this->mVariableNames.push_back("Ito__zdv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.829206149767);

    // rY[17]:
    this->mVariableNames.push_back("Ito2__AA");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000816605172);

    // rY[18]:
    this->mVariableNames.push_back("INal__mL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001356538159);

    // rY[19]:
    this->mVariableNames.push_back("INal__hL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.26130711759);

    // rY[20]:
    this->mVariableNames.push_back("Irel__CaMKtrap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.021123704774);

    // rY[21]:
    this->mVariableNames.push_back("Irel__ro");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[22]:
    this->mVariableNames.push_back("Irel__ri");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.862666650318);

    // rY[23]:
    this->mVariableNames.push_back("Na__Na_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(12.972433387269);

    // rY[24]:
    this->mVariableNames.push_back("K__K_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(135.469546216758);

    // rY[25]:
    this->mVariableNames.push_back("Cl__Cl_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(15.59207157178);

    // rY[26]:
    this->mVariableNames.push_back("Ca__Ca_jsr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(1.737580994071);

    // rY[27]:
    this->mVariableNames.push_back("Ca__Ca_nsr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(1.832822335168);

    // rY[28]:
    this->mVariableNames.push_back("Ca__Ca_ss");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00012271265);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamichund_rudy_2004_aFromCellMLRushLarsen)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamichund_rudy_2004_aFromCellMLRushLarsen(pSolver, pStimulus);
    }
    
}

