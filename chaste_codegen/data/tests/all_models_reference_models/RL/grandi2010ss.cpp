//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: grandi2010
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on (date omitted as unimportant)
//! 
//! <autogenerated>

#include "grandi2010ss.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Dynamicgrandi2010ssFromCellMLRushLarsen::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_offset = 0.0; // millisecond
        const double var_chaste_interface__cell__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_chaste_interface__cell__stim_amplitude =  -15.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    double Dynamicgrandi2010ssFromCellMLRushLarsen::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[37];
    }
    
    Dynamicgrandi2010ssFromCellMLRushLarsen::Dynamicgrandi2010ssFromCellMLRushLarsen(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractRushLarsenCardiacCell(
                38,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamicgrandi2010ssFromCellMLRushLarsen>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
    }
    
    Dynamicgrandi2010ssFromCellMLRushLarsen::~Dynamicgrandi2010ssFromCellMLRushLarsen()
    {
    }
    
    double Dynamicgrandi2010ssFromCellMLRushLarsen::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__sVm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -81.3842590704928
        double var_chaste_interface__cell__sm = rY[1];
        // Units: dimensionless; Initial value: 0.00384941567866232
        double var_chaste_interface__cell__sh = rY[2];
        // Units: dimensionless; Initial value: 0.623723834301669
        double var_chaste_interface__cell__sj = rY[3];
        // Units: dimensionless; Initial value: 0.622080736932815
        double var_chaste_interface__cell__sd = rY[4];
        // Units: dimensionless; Initial value: 2.95884913218079e-6
        double var_chaste_interface__cell__sf = rY[5];
        // Units: dimensionless; Initial value: 0.995094078386247
        double var_chaste_interface__cell__sfcaBj = rY[6];
        // Units: dimensionless; Initial value: 0.0246274349529557
        double var_chaste_interface__cell__sfcaBsl = rY[7];
        // Units: dimensionless; Initial value: 0.0150911724206476
        double var_chaste_interface__cell__sxtos = rY[8];
        // Units: dimensionless; Initial value: 0.000442853722673121
        double var_chaste_interface__cell__sytos = rY[9];
        // Units: dimensionless; Initial value: 0.789013894749951
        double var_chaste_interface__cell__sxtof = rY[10];
        // Units: dimensionless; Initial value: 0.000442846429332686
        double var_chaste_interface__cell__sytof = rY[11];
        // Units: dimensionless; Initial value: 0.999995784674368
        double var_chaste_interface__cell__sxkr = rY[12];
        // Units: dimensionless; Initial value: 0.020160578118589
        double var_chaste_interface__cell__sxks = rY[13];
        // Units: dimensionless; Initial value: 0.00430143235332308
        double var_chaste_interface__cell__sNaj = rY[32];
        // Units: dimensionless; Initial value: 8.21411036389602
        double var_chaste_interface__cell__sNasl = rY[33];
        // Units: dimensionless; Initial value: 8.21322794157889
        double var_chaste_interface__cell__sNai = rY[34];
        // Units: dimensionless; Initial value: 8.21340895351653
        double var_chaste_interface__cell__sCaj = rY[35];
        // Units: dimensionless; Initial value: 0.000175648385857736
        double var_chaste_interface__cell__sCasl = rY[36];
        // Units: dimensionless; Initial value: 0.000105614570409386
        
        const double var_cell__G_CaL_mult = 1.0; // dimensionless
        const double var_cell__GNa = 23.0; // dimensionless
        const double var_cell__pNa = var_cell__G_CaL_mult * 7.4999999999999993e-09; // dimensionless
        const double var_cell__pCa = var_cell__G_CaL_mult * 0.00027; // dimensionless
        const double var_cell__ena_junc = 26.712338705498265 * log(140.0 / var_chaste_interface__cell__sNaj); // dimensionless
        const double var_cell__I_Na_junc = 0.11 * var_cell__GNa * pow(var_chaste_interface__cell__sm, 3.0) * var_chaste_interface__cell__sh * var_chaste_interface__cell__sj * (var_chaste_interface__cell__sVm - var_cell__ena_junc); // dimensionless
        const double var_cell__ena_sl = 26.712338705498265 * log(140.0 / var_chaste_interface__cell__sNasl); // dimensionless
        const double var_cell__I_Na_sl = 0.89000000000000001 * var_cell__GNa * pow(var_chaste_interface__cell__sm, 3.0) * var_chaste_interface__cell__sh * var_chaste_interface__cell__sj * (var_chaste_interface__cell__sVm - var_cell__ena_sl); // dimensionless
        const double var_cell__I_nabk_junc = (var_chaste_interface__cell__sVm - var_cell__ena_junc) * 6.567e-05; // dimensionless
        const double var_cell__I_nabk_sl = (var_chaste_interface__cell__sVm - var_cell__ena_sl) * 0.00053133; // dimensionless
        const double var_cell__fnak = 1.0 / (1.0 + (0.1245 * exp(var_chaste_interface__cell__sVm *  -0.0037435883507802616)) + (exp((-var_chaste_interface__cell__sVm) * 0.037435883507802616) * 0.036533226130519084)); // dimensionless
        const double var_cell__I_nak_junc = ((var_cell__fnak * 1.0692000000000002) / (1.0 + pow(11.0 / var_chaste_interface__cell__sNaj, 4.0))) * 0.14492753623188406; // dimensionless
        const double var_cell__I_nak_sl = ((var_cell__fnak * 8.6508000000000003) / (1.0 + pow(11.0 / var_chaste_interface__cell__sNasl, 4.0))) * 0.14492753623188406; // dimensionless
        const double var_cell__gkr_mult = 1.0; // dimensionless
        const double var_cell__eks = 26.712338705498265 * log(7.9662000000000006 / (120.0 + (0.018329999999999999 * var_chaste_interface__cell__sNai))); // dimensionless
        const double var_cell__kp_kp = 1.0 / (1.0 + exp(7.4880000000000004 - (var_chaste_interface__cell__sVm * 0.16722408026755853))); // dimensionless
        const double var_cell__aki = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__cell__sVm -  -82.837440942604402) - 59.215000000000003))); // dimensionless
        const double var_cell__I_Ca_junc = ((var_cell__pCa * var_chaste_interface__cell__sVm * ((0.34100000000000003 * var_chaste_interface__cell__sCaj * exp(var_chaste_interface__cell__sVm * 0.074871767015605231)) - 0.61380000000000001) * 14448.004881001341) / (exp(var_chaste_interface__cell__sVm * 0.074871767015605231) - 1.0)) * var_chaste_interface__cell__sd * var_chaste_interface__cell__sf * ((1.0 - var_chaste_interface__cell__sfcaBj) + 0.0) * 0.40500000000000003; // dimensionless
        const double var_cell__I_Ca_sl = ((var_cell__pCa * var_chaste_interface__cell__sVm * ((0.34100000000000003 * var_chaste_interface__cell__sCasl * exp(var_chaste_interface__cell__sVm * 0.074871767015605231)) - 0.61380000000000001) * 14448.004881001341) / (exp(var_chaste_interface__cell__sVm * 0.074871767015605231) - 1.0)) * var_chaste_interface__cell__sd * var_chaste_interface__cell__sf * ((1.0 - var_chaste_interface__cell__sfcaBsl) + 0.0) * 0.044999999999999991; // dimensionless
        const double var_cell__I_CaK = (((var_cell__G_CaL_mult * 1.35e-07) * var_chaste_interface__cell__sVm * ((exp(var_chaste_interface__cell__sVm * 0.037435883507802616) * 90.0) - 4.0500000000000007) * 3612.0012202503353) / (exp(var_chaste_interface__cell__sVm * 0.037435883507802616) - 1.0)) * var_chaste_interface__cell__sd * var_chaste_interface__cell__sf * ((0.90000000000000002 * (0.0 + (1.0 - var_chaste_interface__cell__sfcaBj))) + (0.099999999999999978 * (0.0 + (1.0 - var_chaste_interface__cell__sfcaBsl)))) * 0.45000000000000001; // dimensionless
        const double var_cell__I_CaNa_junc = ((var_cell__pNa * var_chaste_interface__cell__sVm * ((0.75 * var_chaste_interface__cell__sNaj * exp(var_chaste_interface__cell__sVm * 0.037435883507802616)) - 105.0) * 3612.0012202503353) / (exp(var_chaste_interface__cell__sVm * 0.037435883507802616) - 1.0)) * var_chaste_interface__cell__sd * var_chaste_interface__cell__sf * ((1.0 - var_chaste_interface__cell__sfcaBj) + 0.0) * 0.40500000000000003; // dimensionless
        const double var_cell__I_CaNa_sl = ((var_cell__pNa * var_chaste_interface__cell__sVm * ((0.75 * var_chaste_interface__cell__sNasl * exp(var_chaste_interface__cell__sVm * 0.037435883507802616)) - 105.0) * 3612.0012202503353) / (exp(var_chaste_interface__cell__sVm * 0.037435883507802616) - 1.0)) * var_chaste_interface__cell__sd * var_chaste_interface__cell__sf * ((1.0 - var_chaste_interface__cell__sfcaBsl) + 0.0) * 0.044999999999999991; // dimensionless
        const double var_cell__I_ncx_junc = (((1.0 / (1.0 + pow(0.00014999999999999999 / var_chaste_interface__cell__sCaj, 2.0))) * ((exp(var_chaste_interface__cell__sVm * 0.010107688547106707) * pow(var_chaste_interface__cell__sNaj, 3.0) * 1.8) - (exp(var_chaste_interface__cell__sVm *  -0.027328194960695908) * 2744000.0 * var_chaste_interface__cell__sCaj)) * 0.495) / (((1.0 + pow(var_chaste_interface__cell__sNaj * 0.081366965012205056, 3.0)) * 9850.9599999999991) + (669921.875 * var_chaste_interface__cell__sCaj * (1.0 + (var_chaste_interface__cell__sCaj * 278.55153203342621))) + (1.3 * pow(var_chaste_interface__cell__sNaj, 3.0)) + (pow(var_chaste_interface__cell__sNaj, 3.0) * 1.8) + (2744000.0 * var_chaste_interface__cell__sCaj))) / (1.0 + (0.32000000000000001 * exp(var_chaste_interface__cell__sVm *  -0.027328194960695908))); // dimensionless
        const double var_cell__I_ncx_sl = (((1.0 / (1.0 + pow(0.00014999999999999999 / var_chaste_interface__cell__sCasl, 2.0))) * ((exp(var_chaste_interface__cell__sVm * 0.010107688547106707) * pow(var_chaste_interface__cell__sNasl, 3.0) * 1.8) - (exp(var_chaste_interface__cell__sVm *  -0.027328194960695908) * 2744000.0 * var_chaste_interface__cell__sCasl)) * 4.0049999999999999) / (((1.0 + pow(var_chaste_interface__cell__sNasl * 0.081366965012205056, 3.0)) * 9850.9599999999991) + (669921.875 * var_chaste_interface__cell__sCasl * (1.0 + (var_chaste_interface__cell__sCasl * 278.55153203342621))) + (1.3 * pow(var_chaste_interface__cell__sNasl, 3.0)) + (pow(var_chaste_interface__cell__sNasl, 3.0) * 1.8) + (2744000.0 * var_chaste_interface__cell__sCasl))) / (1.0 + (0.32000000000000001 * exp(var_chaste_interface__cell__sVm *  -0.027328194960695908))); // dimensionless
        const double var_cell__I_pca_junc = (pow(var_chaste_interface__cell__sCaj, 1.6000000000000001) * 0.0074029999999999999) / (5.2281977629563632e-06 + pow(var_chaste_interface__cell__sCaj, 1.6000000000000001)); // dimensionless
        const double var_cell__I_pca_sl = (pow(var_chaste_interface__cell__sCasl, 1.6000000000000001) * 0.059896999999999999) / (5.2281977629563632e-06 + pow(var_chaste_interface__cell__sCasl, 1.6000000000000001)); // dimensionless
        const double var_cell__I_cabk_junc = (var_chaste_interface__cell__sVm - (13.356169352749133 * log(1.8 / var_chaste_interface__cell__sCaj))) * 6.0643000000000002e-05; // dimensionless
        const double var_cell__I_cabk_sl = (var_chaste_interface__cell__sVm - (13.356169352749133 * log(1.8 / var_chaste_interface__cell__sCasl))) * 0.00049065700000000003; // dimensionless
        const double var_cell__I_Na_tot_junc = var_cell__I_Na_junc + var_cell__I_nabk_junc + (3.0 * var_cell__I_ncx_junc) + (3.0 * var_cell__I_nak_junc) + var_cell__I_CaNa_junc; // dimensionless
        const double var_cell__I_Na_tot_sl = var_cell__I_Na_sl + var_cell__I_nabk_sl + (3.0 * var_cell__I_ncx_sl) + (3.0 * var_cell__I_nak_sl) + var_cell__I_CaNa_sl; // dimensionless
        const double var_cell__I_Ca_tot_junc = (var_cell__I_Ca_junc + var_cell__I_cabk_junc + var_cell__I_pca_junc) - (2.0 * var_cell__I_ncx_junc); // dimensionless
        const double var_cell__I_Ca_tot_sl = (var_cell__I_Ca_sl + var_cell__I_cabk_sl + var_cell__I_pca_sl) - (2.0 * var_cell__I_ncx_sl); // dimensionless
        const double var_cell__I_tot = (var_cell__I_Na_tot_junc + var_cell__I_Na_tot_sl) + ((((0.006029375 / (1.0 + (0.10000000000000001 / var_chaste_interface__cell__sCaj))) * (var_chaste_interface__cell__sVm -  -61.507432902288166)) + ((0.048783125000000004 / (1.0 + (0.10000000000000001 / var_chaste_interface__cell__sCasl))) * (var_chaste_interface__cell__sVm -  -61.507432902288166))) + (0.0089999999999999993 * (var_chaste_interface__cell__sVm -  -61.507432902288166))) + (var_cell__I_Ca_tot_junc + var_cell__I_Ca_tot_sl) + (((((0.015599999999999999 * var_chaste_interface__cell__sxtos * var_chaste_interface__cell__sytos * (var_chaste_interface__cell__sVm -  -82.837440942604402)) + (0.1144 * var_chaste_interface__cell__sxtof * var_chaste_interface__cell__sytof * (var_chaste_interface__cell__sVm -  -82.837440942604402))) + ((var_cell__gkr_mult * 0.035000000000000003) * var_chaste_interface__cell__sxkr * (1.0 / (1.0 + exp((var_chaste_interface__cell__sVm + 74.0) * 0.041666666666666664))) * (var_chaste_interface__cell__sVm -  -82.837440942604402)) + ((pow(var_chaste_interface__cell__sxks, 2.0) * (var_chaste_interface__cell__sVm - var_cell__eks) * 0.00038500000000000003) + (pow(var_chaste_interface__cell__sxks, 2.0) * (var_chaste_interface__cell__sVm - var_cell__eks) * 0.0031150000000000001)) + ((var_cell__aki / (var_cell__aki + (((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__cell__sVm + 5.476) -  -82.837440942604402))) + exp(0.061749999999999999 * ((var_chaste_interface__cell__sVm -  -82.837440942604402) - 594.30999999999995))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__cell__sVm -  -82.837440942604402) + 4.7530000000000001)))))) * (var_chaste_interface__cell__sVm -  -82.837440942604402) * 0.34999999999999998)) - (2.0 * (var_cell__I_nak_junc + var_cell__I_nak_sl))) + var_cell__I_CaK + ((var_cell__kp_kp * (var_chaste_interface__cell__sVm -  -82.837440942604402) * 0.00022000000000000001) + (var_cell__kp_kp * (var_chaste_interface__cell__sVm -  -82.837440942604402) * 0.0017800000000000001))); // uA_per_uF
        const double var_chaste_interface__i_ionic = (var_cell__I_tot) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamicgrandi2010ssFromCellMLRushLarsen::EvaluateEquations(double var_chaste_interface__cell__time, std::vector<double> &rDY, std::vector<double> &rAlphaOrTau, std::vector<double> &rBetaOrInf)
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__sVm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -81.3842590704928
        double var_chaste_interface__cell__sm = rY[1];
        // Units: dimensionless; Initial value: 0.00384941567866232
        double var_chaste_interface__cell__sh = rY[2];
        // Units: dimensionless; Initial value: 0.623723834301669
        double var_chaste_interface__cell__sj = rY[3];
        // Units: dimensionless; Initial value: 0.622080736932815
        double var_chaste_interface__cell__sd = rY[4];
        // Units: dimensionless; Initial value: 2.95884913218079e-6
        double var_chaste_interface__cell__sf = rY[5];
        // Units: dimensionless; Initial value: 0.995094078386247
        double var_chaste_interface__cell__sfcaBj = rY[6];
        // Units: dimensionless; Initial value: 0.0246274349529557
        double var_chaste_interface__cell__sfcaBsl = rY[7];
        // Units: dimensionless; Initial value: 0.0150911724206476
        double var_chaste_interface__cell__sxtos = rY[8];
        // Units: dimensionless; Initial value: 0.000442853722673121
        double var_chaste_interface__cell__sytos = rY[9];
        // Units: dimensionless; Initial value: 0.789013894749951
        double var_chaste_interface__cell__sxtof = rY[10];
        // Units: dimensionless; Initial value: 0.000442846429332686
        double var_chaste_interface__cell__sytof = rY[11];
        // Units: dimensionless; Initial value: 0.999995784674368
        double var_chaste_interface__cell__sxkr = rY[12];
        // Units: dimensionless; Initial value: 0.020160578118589
        double var_chaste_interface__cell__sxks = rY[13];
        // Units: dimensionless; Initial value: 0.00430143235332308
        double var_chaste_interface__cell__sRyRr = rY[14];
        // Units: dimensionless; Initial value: 0.893326456705696
        double var_chaste_interface__cell__sRyRo = rY[15];
        // Units: dimensionless; Initial value: 7.56436968249499e-7
        double var_chaste_interface__cell__sRyRi = rY[16];
        // Units: dimensionless; Initial value: 9.03266331737064e-8
        double var_chaste_interface__cell__sNaBj = rY[17];
        // Units: dimensionless; Initial value: 3.41097946062695
        double var_chaste_interface__cell__sNaBsl = rY[18];
        // Units: dimensionless; Initial value: 0.744248540671373
        double var_chaste_interface__cell__sTnCL = rY[19];
        // Units: dimensionless; Initial value: 0.00904644567707666
        double var_chaste_interface__cell__sTnCHc = rY[20];
        // Units: dimensionless; Initial value: 0.1183943202639
        double var_chaste_interface__cell__sTnCHm = rY[21];
        // Units: dimensionless; Initial value: 0.0101423649465603
        double var_chaste_interface__cell__sCaM = rY[22];
        // Units: dimensionless; Initial value: 0.000299824763475116
        double var_chaste_interface__cell__sMyoc = rY[23];
        // Units: dimensionless; Initial value: 0.00201443980536826
        double var_chaste_interface__cell__sMyom = rY[24];
        // Units: dimensionless; Initial value: 0.137467597337588
        double var_chaste_interface__cell__sSRB = rY[25];
        // Units: dimensionless; Initial value: 0.00220110816535249
        double var_chaste_interface__cell__sSLLj = rY[26];
        // Units: dimensionless; Initial value: 0.00739549938515031
        double var_chaste_interface__cell__sSLLsl = rY[27];
        // Units: dimensionless; Initial value: 0.00979616077807075
        double var_chaste_interface__cell__sSLHj = rY[28];
        // Units: dimensionless; Initial value: 0.0735225248399363
        double var_chaste_interface__cell__sSLHsl = rY[29];
        // Units: dimensionless; Initial value: 0.113642236788144
        double var_chaste_interface__cell__sCsqnb = rY[30];
        // Units: dimensionless; Initial value: 1.20762712858574
        double var_chaste_interface__cell__sCa_sr = rY[31];
        // Units: dimensionless; Initial value: 0.563755421404699
        double var_chaste_interface__cell__sNaj = rY[32];
        // Units: dimensionless; Initial value: 8.21411036389602
        double var_chaste_interface__cell__sNasl = rY[33];
        // Units: dimensionless; Initial value: 8.21322794157889
        double var_chaste_interface__cell__sNai = rY[34];
        // Units: dimensionless; Initial value: 8.21340895351653
        double var_chaste_interface__cell__sCaj = rY[35];
        // Units: dimensionless; Initial value: 0.000175648385857736
        double var_chaste_interface__cell__sCasl = rY[36];
        // Units: dimensionless; Initial value: 0.000105614570409386
        double var_chaste_interface__cell__sCai = rY[37];
        // Units: dimensionless; Initial value: 8.85230799863012e-5
        
        
        // Mathematics
        double d_dt_chaste_interface__cell__sVm;
        const double var_cell__G_CaL_mult = 1.0; // dimensionless
        const double var_cell__GNa = 23.0; // dimensionless
        const double var_cell__pNa = var_cell__G_CaL_mult * 7.4999999999999993e-09; // dimensionless
        const double var_cell__pCa = var_cell__G_CaL_mult * 0.00027; // dimensionless
        const double var_cell__ena_junc = 26.712338705498265 * log(140.0 / var_chaste_interface__cell__sNaj); // dimensionless
        const double var_cell__I_Na_junc = 0.11 * var_cell__GNa * pow(var_chaste_interface__cell__sm, 3.0) * var_chaste_interface__cell__sh * var_chaste_interface__cell__sj * (var_chaste_interface__cell__sVm - var_cell__ena_junc); // dimensionless
        const double var_cell__ena_sl = 26.712338705498265 * log(140.0 / var_chaste_interface__cell__sNasl); // dimensionless
        const double var_cell__I_Na_sl = 0.89000000000000001 * var_cell__GNa * pow(var_chaste_interface__cell__sm, 3.0) * var_chaste_interface__cell__sh * var_chaste_interface__cell__sj * (var_chaste_interface__cell__sVm - var_cell__ena_sl); // dimensionless
        const double var_cell__I_nabk_junc = (var_chaste_interface__cell__sVm - var_cell__ena_junc) * 6.567e-05; // dimensionless
        const double var_cell__I_nabk_sl = (var_chaste_interface__cell__sVm - var_cell__ena_sl) * 0.00053133; // dimensionless
        const double var_cell__fnak = 1.0 / (1.0 + (0.1245 * exp(var_chaste_interface__cell__sVm *  -0.0037435883507802616)) + (exp((-var_chaste_interface__cell__sVm) * 0.037435883507802616) * 0.036533226130519084)); // dimensionless
        const double var_cell__I_nak_junc = ((var_cell__fnak * 1.0692000000000002) / (1.0 + pow(11.0 / var_chaste_interface__cell__sNaj, 4.0))) * 0.14492753623188406; // dimensionless
        const double var_cell__I_nak_sl = ((var_cell__fnak * 8.6508000000000003) / (1.0 + pow(11.0 / var_chaste_interface__cell__sNasl, 4.0))) * 0.14492753623188406; // dimensionless
        const double var_cell__xtoss = 1.0 / (1.0 + exp((-(var_chaste_interface__cell__sVm - 19.0)) * 0.076923076923076927)); // dimensionless
        const double var_cell__ytoss = 1.0 / (1.0 + exp((var_chaste_interface__cell__sVm + 19.5) * 0.20000000000000001)); // dimensionless
        const double var_cell__dss = 1.0 / (1.0 + exp((-(var_chaste_interface__cell__sVm + 5.0)) * 0.16666666666666666)); // dimensionless
        const double var_cell__I_Ca_junc = ((var_cell__pCa * var_chaste_interface__cell__sVm * ((0.34100000000000003 * var_chaste_interface__cell__sCaj * exp(var_chaste_interface__cell__sVm * 0.074871767015605231)) - 0.61380000000000001) * 14448.004881001341) / (exp(var_chaste_interface__cell__sVm * 0.074871767015605231) - 1.0)) * var_chaste_interface__cell__sd * var_chaste_interface__cell__sf * ((1.0 - var_chaste_interface__cell__sfcaBj) + 0.0) * 0.40500000000000003; // dimensionless
        const double var_cell__I_Ca_sl = ((var_cell__pCa * var_chaste_interface__cell__sVm * ((0.34100000000000003 * var_chaste_interface__cell__sCasl * exp(var_chaste_interface__cell__sVm * 0.074871767015605231)) - 0.61380000000000001) * 14448.004881001341) / (exp(var_chaste_interface__cell__sVm * 0.074871767015605231) - 1.0)) * var_chaste_interface__cell__sd * var_chaste_interface__cell__sf * ((1.0 - var_chaste_interface__cell__sfcaBsl) + 0.0) * 0.044999999999999991; // dimensionless
        const double var_cell__I_CaNa_junc = ((var_cell__pNa * var_chaste_interface__cell__sVm * ((0.75 * var_chaste_interface__cell__sNaj * exp(var_chaste_interface__cell__sVm * 0.037435883507802616)) - 105.0) * 3612.0012202503353) / (exp(var_chaste_interface__cell__sVm * 0.037435883507802616) - 1.0)) * var_chaste_interface__cell__sd * var_chaste_interface__cell__sf * ((1.0 - var_chaste_interface__cell__sfcaBj) + 0.0) * 0.40500000000000003; // dimensionless
        const double var_cell__I_CaNa_sl = ((var_cell__pNa * var_chaste_interface__cell__sVm * ((0.75 * var_chaste_interface__cell__sNasl * exp(var_chaste_interface__cell__sVm * 0.037435883507802616)) - 105.0) * 3612.0012202503353) / (exp(var_chaste_interface__cell__sVm * 0.037435883507802616) - 1.0)) * var_chaste_interface__cell__sd * var_chaste_interface__cell__sf * ((1.0 - var_chaste_interface__cell__sfcaBsl) + 0.0) * 0.044999999999999991; // dimensionless
        const double var_cell__I_ncx_junc = (((1.0 / (1.0 + pow(0.00014999999999999999 / var_chaste_interface__cell__sCaj, 2.0))) * ((exp(var_chaste_interface__cell__sVm * 0.010107688547106707) * pow(var_chaste_interface__cell__sNaj, 3.0) * 1.8) - (exp(var_chaste_interface__cell__sVm *  -0.027328194960695908) * 2744000.0 * var_chaste_interface__cell__sCaj)) * 0.495) / (((1.0 + pow(var_chaste_interface__cell__sNaj * 0.081366965012205056, 3.0)) * 9850.9599999999991) + (669921.875 * var_chaste_interface__cell__sCaj * (1.0 + (var_chaste_interface__cell__sCaj * 278.55153203342621))) + (1.3 * pow(var_chaste_interface__cell__sNaj, 3.0)) + (pow(var_chaste_interface__cell__sNaj, 3.0) * 1.8) + (2744000.0 * var_chaste_interface__cell__sCaj))) / (1.0 + (0.32000000000000001 * exp(var_chaste_interface__cell__sVm *  -0.027328194960695908))); // dimensionless
        const double var_cell__I_ncx_sl = (((1.0 / (1.0 + pow(0.00014999999999999999 / var_chaste_interface__cell__sCasl, 2.0))) * ((exp(var_chaste_interface__cell__sVm * 0.010107688547106707) * pow(var_chaste_interface__cell__sNasl, 3.0) * 1.8) - (exp(var_chaste_interface__cell__sVm *  -0.027328194960695908) * 2744000.0 * var_chaste_interface__cell__sCasl)) * 4.0049999999999999) / (((1.0 + pow(var_chaste_interface__cell__sNasl * 0.081366965012205056, 3.0)) * 9850.9599999999991) + (669921.875 * var_chaste_interface__cell__sCasl * (1.0 + (var_chaste_interface__cell__sCasl * 278.55153203342621))) + (1.3 * pow(var_chaste_interface__cell__sNasl, 3.0)) + (pow(var_chaste_interface__cell__sNasl, 3.0) * 1.8) + (2744000.0 * var_chaste_interface__cell__sCasl))) / (1.0 + (0.32000000000000001 * exp(var_chaste_interface__cell__sVm *  -0.027328194960695908))); // dimensionless
        const double var_cell__I_pca_junc = (pow(var_chaste_interface__cell__sCaj, 1.6000000000000001) * 0.0074029999999999999) / (5.2281977629563632e-06 + pow(var_chaste_interface__cell__sCaj, 1.6000000000000001)); // dimensionless
        const double var_cell__I_pca_sl = (pow(var_chaste_interface__cell__sCasl, 1.6000000000000001) * 0.059896999999999999) / (5.2281977629563632e-06 + pow(var_chaste_interface__cell__sCasl, 1.6000000000000001)); // dimensionless
        const double var_cell__I_cabk_junc = (var_chaste_interface__cell__sVm - (13.356169352749133 * log(1.8 / var_chaste_interface__cell__sCaj))) * 6.0643000000000002e-05; // dimensionless
        const double var_cell__I_cabk_sl = (var_chaste_interface__cell__sVm - (13.356169352749133 * log(1.8 / var_chaste_interface__cell__sCasl))) * 0.00049065700000000003; // dimensionless
        const double var_cell__kCaSR = 15.0 - (14.0 / (1.0 + pow(0.45000000000000001 / var_chaste_interface__cell__sCa_sr, 2.5))); // dimensionless
        const double var_cell__koSRCa = 10.0 / var_cell__kCaSR; // dimensionless
        const double var_cell__kiSRCa = 0.5 * var_cell__kCaSR; // dimensionless
        const double var_cell__RI = ((1.0 - var_chaste_interface__cell__sRyRr) - var_chaste_interface__cell__sRyRo) - var_chaste_interface__cell__sRyRi; // dimensionless
        const double var_cell__J_SRCarel = 25.0 * var_chaste_interface__cell__sRyRo * (var_chaste_interface__cell__sCa_sr - var_chaste_interface__cell__sCaj); // dimensionless
        const double var_cell__J_serca = ((pow(var_chaste_interface__cell__sCai * 4065.0406504065036, 1.7869999999999999) - pow(var_chaste_interface__cell__sCa_sr * 0.58823529411764708, 1.7869999999999999)) * 0.0053114) / (1.0 + pow(var_chaste_interface__cell__sCai * 4065.0406504065036, 1.7869999999999999) + pow(var_chaste_interface__cell__sCa_sr * 0.58823529411764708, 1.7869999999999999)); // dimensionless
        const double var_cell__J_SRleak = 5.3480000000000003e-06 * (var_chaste_interface__cell__sCa_sr - var_chaste_interface__cell__sCaj); // dimensionless
        const double var_cell__I_Na_tot_junc = var_cell__I_Na_junc + var_cell__I_nabk_junc + (3.0 * var_cell__I_ncx_junc) + (3.0 * var_cell__I_nak_junc) + var_cell__I_CaNa_junc; // dimensionless
        const double var_cell__I_Na_tot_sl = var_cell__I_Na_sl + var_cell__I_nabk_sl + (3.0 * var_cell__I_ncx_sl) + (3.0 * var_cell__I_nak_sl) + var_cell__I_CaNa_sl; // dimensionless
        const double var_cell__I_Ca_tot_junc = (var_cell__I_Ca_junc + var_cell__I_cabk_junc + var_cell__I_pca_junc) - (2.0 * var_cell__I_ncx_junc); // dimensionless
        const double var_cell__I_Ca_tot_sl = (var_cell__I_Ca_sl + var_cell__I_cabk_sl + var_cell__I_pca_sl) - (2.0 * var_cell__I_ncx_sl); // dimensionless
        const double var_cell__d_sSLHj_d_cell__time = (100.0 * var_chaste_interface__cell__sCaj * (0.19897959183673469 - var_chaste_interface__cell__sSLHj)) - (0.029999999999999999 * var_chaste_interface__cell__sSLHj); // 'per millisecond'
        const double var_cell__d_sSLLj_d_cell__time = (100.0 * var_chaste_interface__cell__sCaj * (0.554730983302412 - var_chaste_interface__cell__sSLLj)) - (1.3 * var_chaste_interface__cell__sSLLj); // 'per millisecond'
        const double var_cell__d_sSRB_d_cell__time = (100.0 * var_chaste_interface__cell__sCai * (0.017100000000000001 - var_chaste_interface__cell__sSRB)) - (0.059999999999999998 * var_chaste_interface__cell__sSRB); // 'per millisecond'
        const double var_cell__d_sTnCL_d_cell__time = (32.700000000000003 * var_chaste_interface__cell__sCai * (0.070000000000000007 - var_chaste_interface__cell__sTnCL)) - (0.019599999999999999 * var_chaste_interface__cell__sTnCL); // 'per millisecond'
        const double var_cell__d_sCaM_d_cell__time = (34.0 * var_chaste_interface__cell__sCai * (0.024 - var_chaste_interface__cell__sCaM)) - (0.23799999999999999 * var_chaste_interface__cell__sCaM); // 'per millisecond'
        const double var_cell__d_sMyom_d_cell__time = (((0.14000000000000001 - var_chaste_interface__cell__sMyoc) - var_chaste_interface__cell__sMyom) * 0.015699999999999999) - (5.7000000000000003e-05 * var_chaste_interface__cell__sMyom); // 'per millisecond'
        const double var_cell__d_sTnCHm_d_cell__time = (((0.14000000000000001 - var_chaste_interface__cell__sTnCHc) - var_chaste_interface__cell__sTnCHm) * 0.0030000000000000001) - (0.0033300000000000001 * var_chaste_interface__cell__sTnCHm); // 'per millisecond'
        const double var_cell__d_sTnCHc_d_cell__time = (2.3700000000000001 * var_chaste_interface__cell__sCai * ((0.14000000000000001 - var_chaste_interface__cell__sTnCHc) - var_chaste_interface__cell__sTnCHm)) - (3.1999999999999999e-05 * var_chaste_interface__cell__sTnCHc); // 'per millisecond'
        const double var_cell__d_sMyoc_d_cell__time = (13.800000000000001 * var_chaste_interface__cell__sCai * ((0.14000000000000001 - var_chaste_interface__cell__sMyoc) - var_chaste_interface__cell__sMyom)) - (0.00046000000000000001 * var_chaste_interface__cell__sMyoc); // 'per millisecond'
        const double var_cell__d_sSLLsl_d_cell__time = (100.0 * var_chaste_interface__cell__sCasl * (1.2155 - var_chaste_interface__cell__sSLLsl)) - (1.3 * var_chaste_interface__cell__sSLLsl); // 'per millisecond'
        const double var_cell__d_sSLHsl_d_cell__time = (100.0 * var_chaste_interface__cell__sCasl * (0.4355 - var_chaste_interface__cell__sSLHsl)) - (0.029999999999999999 * var_chaste_interface__cell__sSLHsl); // 'per millisecond'
        const double var_cell__d_sNaBj_d_cell__time = (0.0001 * var_chaste_interface__cell__sNaj * (7.5609999999999999 - var_chaste_interface__cell__sNaBj)) - (0.001 * var_chaste_interface__cell__sNaBj); // 'per millisecond'
        const double var_cell__d_sNaBsl_d_cell__time = (0.0001 * var_chaste_interface__cell__sNasl * (1.6499999999999999 - var_chaste_interface__cell__sNaBsl)) - (0.001 * var_chaste_interface__cell__sNaBsl); // 'per millisecond'
        const double var_cell__d_sCsqnb_d_cell__time = (100.0 * var_chaste_interface__cell__sCa_sr * (2.6000000000000005 - var_chaste_interface__cell__sCsqnb)) - (65.0 * var_chaste_interface__cell__sCsqnb); // 'per millisecond'
        const double d_dt_chaste_interface__cell__sfcaBj = (1.7 * var_chaste_interface__cell__sCaj * (1.0 - var_chaste_interface__cell__sfcaBj)) - (0.011900000000000001 * var_chaste_interface__cell__sfcaBj); // 'per millisecond'
        const double d_dt_chaste_interface__cell__sfcaBsl = (1.7 * var_chaste_interface__cell__sCasl * (1.0 - var_chaste_interface__cell__sfcaBsl)) - (0.011900000000000001 * var_chaste_interface__cell__sfcaBsl); // 'per millisecond'
        const double d_dt_chaste_interface__cell__sRyRr = ((0.0050000000000000001 * var_cell__RI) - (var_cell__kiSRCa * var_chaste_interface__cell__sCaj * var_chaste_interface__cell__sRyRr)) - ((var_cell__koSRCa * pow(var_chaste_interface__cell__sCaj, 2.0) * var_chaste_interface__cell__sRyRr) - (0.059999999999999998 * var_chaste_interface__cell__sRyRo)); // 'per millisecond'
        const double d_dt_chaste_interface__cell__sRyRo = ((var_cell__koSRCa * pow(var_chaste_interface__cell__sCaj, 2.0) * var_chaste_interface__cell__sRyRr) - (0.059999999999999998 * var_chaste_interface__cell__sRyRo)) - ((var_cell__kiSRCa * var_chaste_interface__cell__sCaj * var_chaste_interface__cell__sRyRo) - (0.0050000000000000001 * var_chaste_interface__cell__sRyRi)); // 'per millisecond'
        const double d_dt_chaste_interface__cell__sRyRi = ((var_cell__kiSRCa * var_chaste_interface__cell__sCaj * var_chaste_interface__cell__sRyRo) - (0.0050000000000000001 * var_chaste_interface__cell__sRyRi)) - ((0.059999999999999998 * var_chaste_interface__cell__sRyRi) - (var_cell__koSRCa * pow(var_chaste_interface__cell__sCaj, 2.0) * var_cell__RI)); // 'per millisecond'
        const double d_dt_chaste_interface__cell__sNaBj = var_cell__d_sNaBj_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sNaBsl = var_cell__d_sNaBsl_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sTnCL = var_cell__d_sTnCL_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sTnCHc = var_cell__d_sTnCHc_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sTnCHm = var_cell__d_sTnCHm_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sCaM = var_cell__d_sCaM_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sMyoc = var_cell__d_sMyoc_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sMyom = var_cell__d_sMyom_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sSRB = var_cell__d_sSRB_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sSLLj = var_cell__d_sSLLj_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sSLLsl = var_cell__d_sSLLsl_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sSLHj = var_cell__d_sSLHj_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sSLHsl = var_cell__d_sSLHsl_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sCsqnb = var_cell__d_sCsqnb_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sCa_sr = (var_cell__J_serca - (((var_cell__J_SRleak * 2.1454132580905549e-11) * 865634091772.01501) + var_cell__J_SRCarel)) - var_cell__d_sCsqnb_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sNaj = ((((-var_cell__I_Na_tot_junc) * 1.3809999999999999e-10) * 582577664.49937046) + (1.0293616034529682 * (var_chaste_interface__cell__sNasl - var_chaste_interface__cell__sNaj))) - var_cell__d_sNaBj_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sNasl = ((((-var_cell__I_Na_tot_sl) * 1.3809999999999999e-10) * 15700468.058258032) + (0.027741295213057491 * (var_chaste_interface__cell__sNaj - var_chaste_interface__cell__sNasl)) + (2.4822913381052425 * (var_chaste_interface__cell__sNai - var_chaste_interface__cell__sNasl))) - var_cell__d_sNaBsl_d_cell__time; // 'per millisecond'
        const double d_dt_chaste_interface__cell__sNai = 0.076378195018622849 * (var_chaste_interface__cell__sNasl - var_chaste_interface__cell__sNai); // 'per millisecond'
        const double d_dt_chaste_interface__cell__sCaj = (((((-var_cell__I_Ca_tot_junc) * 1.3809999999999999e-10) * 291288832.24968523) + (46.324382692617242 * (var_chaste_interface__cell__sCasl - var_chaste_interface__cell__sCaj))) - (var_cell__d_sSLLj_d_cell__time + var_cell__d_sSLHj_d_cell__time)) + ((var_cell__J_SRCarel * 1.1552225235872218e-12) * 56210005959221.758) + ((var_cell__J_SRleak * 2.1454132580905549e-11) * 56210005959221.758); // 'per millisecond'
        const double d_dt_chaste_interface__cell__sCasl = ((((-var_cell__I_Ca_tot_sl) * 1.3809999999999999e-10) * 7850234.0291290162) + (1.2484421135660346 * (var_chaste_interface__cell__sCaj - var_chaste_interface__cell__sCasl)) + (5.6417253011099264 * (var_chaste_interface__cell__sCai - var_chaste_interface__cell__sCasl))) - (var_cell__d_sSLLsl_d_cell__time + var_cell__d_sSLHsl_d_cell__time); // 'per millisecond'
        const double d_dt_chaste_interface__cell__sCai = ((((-var_cell__J_serca) * 1.1552225235872218e-12) * 46611066480.031578) - (var_cell__d_sTnCL_d_cell__time + var_cell__d_sTnCHc_d_cell__time + var_cell__d_sTnCHm_d_cell__time + var_cell__d_sCaM_d_cell__time + var_cell__d_sMyoc_d_cell__time + var_cell__d_sMyom_d_cell__time + var_cell__d_sSRB_d_cell__time)) + (0.17359154772645927 * (var_chaste_interface__cell__sCasl - var_chaste_interface__cell__sCai)); // 'per millisecond'
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__cell__sVm = 0.0;
        }
        else
        {
            const double var_chaste_interface__cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__cell__time);
            const double var_cell__gkr_mult = 1.0; // dimensionless
            const double var_cell__eks = 26.712338705498265 * log(7.9662000000000006 / (120.0 + (0.018329999999999999 * var_chaste_interface__cell__sNai))); // dimensionless
            const double var_cell__kp_kp = 1.0 / (1.0 + exp(7.4880000000000004 - (var_chaste_interface__cell__sVm * 0.16722408026755853))); // dimensionless
            const double var_cell__aki = 1.02 / (1.0 + exp(0.23849999999999999 * ((var_chaste_interface__cell__sVm -  -82.837440942604402) - 59.215000000000003))); // dimensionless
            const double var_cell__I_CaK = (((var_cell__G_CaL_mult * 1.35e-07) * var_chaste_interface__cell__sVm * ((exp(var_chaste_interface__cell__sVm * 0.037435883507802616) * 90.0) - 4.0500000000000007) * 3612.0012202503353) / (exp(var_chaste_interface__cell__sVm * 0.037435883507802616) - 1.0)) * var_chaste_interface__cell__sd * var_chaste_interface__cell__sf * ((0.90000000000000002 * (0.0 + (1.0 - var_chaste_interface__cell__sfcaBj))) + (0.099999999999999978 * (0.0 + (1.0 - var_chaste_interface__cell__sfcaBsl)))) * 0.45000000000000001; // dimensionless
            const double var_cell__I_tot = (var_cell__I_Na_tot_junc + var_cell__I_Na_tot_sl) + ((((0.006029375 / (1.0 + (0.10000000000000001 / var_chaste_interface__cell__sCaj))) * (var_chaste_interface__cell__sVm -  -61.507432902288166)) + ((0.048783125000000004 / (1.0 + (0.10000000000000001 / var_chaste_interface__cell__sCasl))) * (var_chaste_interface__cell__sVm -  -61.507432902288166))) + (0.0089999999999999993 * (var_chaste_interface__cell__sVm -  -61.507432902288166))) + (var_cell__I_Ca_tot_junc + var_cell__I_Ca_tot_sl) + (((((0.015599999999999999 * var_chaste_interface__cell__sxtos * var_chaste_interface__cell__sytos * (var_chaste_interface__cell__sVm -  -82.837440942604402)) + (0.1144 * var_chaste_interface__cell__sxtof * var_chaste_interface__cell__sytof * (var_chaste_interface__cell__sVm -  -82.837440942604402))) + ((var_cell__gkr_mult * 0.035000000000000003) * var_chaste_interface__cell__sxkr * (1.0 / (1.0 + exp((var_chaste_interface__cell__sVm + 74.0) * 0.041666666666666664))) * (var_chaste_interface__cell__sVm -  -82.837440942604402)) + ((pow(var_chaste_interface__cell__sxks, 2.0) * (var_chaste_interface__cell__sVm - var_cell__eks) * 0.00038500000000000003) + (pow(var_chaste_interface__cell__sxks, 2.0) * (var_chaste_interface__cell__sVm - var_cell__eks) * 0.0031150000000000001)) + ((var_cell__aki / (var_cell__aki + (((0.49124000000000001 * exp(0.080320000000000003 * ((var_chaste_interface__cell__sVm + 5.476) -  -82.837440942604402))) + exp(0.061749999999999999 * ((var_chaste_interface__cell__sVm -  -82.837440942604402) - 594.30999999999995))) / (1.0 + exp( -0.51429999999999998 * ((var_chaste_interface__cell__sVm -  -82.837440942604402) + 4.7530000000000001)))))) * (var_chaste_interface__cell__sVm -  -82.837440942604402) * 0.34999999999999998)) - (2.0 * (var_cell__I_nak_junc + var_cell__I_nak_sl))) + var_cell__I_CaK + ((var_cell__kp_kp * (var_chaste_interface__cell__sVm -  -82.837440942604402) * 0.00022000000000000001) + (var_cell__kp_kp * (var_chaste_interface__cell__sVm -  -82.837440942604402) * 0.0017800000000000001))); // uA_per_uF
            const double var_cell__d_sVm_d_cell__time = -(var_cell__I_tot + (var_chaste_interface__cell__i_Stim / HeartConfig::Instance()->GetCapacitance())); // 'millivolt per millisecond'
            d_dt_chaste_interface__cell__sVm = var_cell__d_sVm_d_cell__time; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__cell__sVm;
        rAlphaOrTau[1] = (0.12920000000000001 * exp(-pow((var_chaste_interface__cell__sVm + 45.789999999999999) * 0.064350064350064351, 2.0))) + (0.064869999999999997 * exp(-pow((var_chaste_interface__cell__sVm - 4.8230000000000004) * 0.019561815336463225, 2.0)));
        rBetaOrInf[1] = 1.0 / pow(1.0 + exp((-(56.859999999999999 + var_chaste_interface__cell__sVm)) * 0.11074197120708749), 2.0);
        rAlphaOrTau[2] = 1.0 / (((var_chaste_interface__cell__sVm >=  -40.0) ? 0.0 : (0.057000000000000002 * exp((-(var_chaste_interface__cell__sVm + 80.0)) * 0.14705882352941177))) + ((var_chaste_interface__cell__sVm >=  -40.0) ? (0.77000000000000002 / (0.13 * (1.0 + exp((-(var_chaste_interface__cell__sVm + 10.66)) * 0.0900900900900901)))) : ((2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__cell__sVm)) + (310000.0 * exp(0.34849999999999998 * var_chaste_interface__cell__sVm)))));
        rBetaOrInf[2] = 1.0 / pow(1.0 + exp((var_chaste_interface__cell__sVm + 71.549999999999997) * 0.13458950201884254), 2.0);
        rAlphaOrTau[3] = 1.0 / (((var_chaste_interface__cell__sVm >=  -40.0) ? 0.0 : (((( -25428.0 * exp(0.24440000000000001 * var_chaste_interface__cell__sVm)) - (6.9480000000000002e-06 * exp( -0.043909999999999998 * var_chaste_interface__cell__sVm))) * (var_chaste_interface__cell__sVm + 37.780000000000001)) / (1.0 + exp(0.311 * (var_chaste_interface__cell__sVm + 79.230000000000004))))) + ((var_chaste_interface__cell__sVm >=  -40.0) ? ((0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__cell__sVm)) / (1.0 + exp( -0.10000000000000001 * (var_chaste_interface__cell__sVm + 32.0)))) : ((0.024240000000000001 * exp( -0.01052 * var_chaste_interface__cell__sVm)) / (1.0 + exp( -0.13780000000000001 * (var_chaste_interface__cell__sVm + 40.140000000000001))))));
        rBetaOrInf[3] = 1.0 / pow(1.0 + exp((var_chaste_interface__cell__sVm + 71.549999999999997) * 0.13458950201884254), 2.0);
        rAlphaOrTau[4] = (var_cell__dss * (1.0 - exp((-(var_chaste_interface__cell__sVm + 5.0)) * 0.16666666666666666))) / (0.035000000000000003 * (var_chaste_interface__cell__sVm + 5.0));
        rBetaOrInf[4] = var_cell__dss;
        rAlphaOrTau[5] = 1.0 / ((0.019699999999999999 * exp(-pow(0.033700000000000001 * (var_chaste_interface__cell__sVm + 14.5), 2.0))) + 0.02);
        rBetaOrInf[5] = (1.0 / (1.0 + exp((var_chaste_interface__cell__sVm + 35.0) * 0.1111111111111111))) + (0.59999999999999998 / (1.0 + exp((50.0 - var_chaste_interface__cell__sVm) * 0.050000000000000003)));
        rDY[6] = d_dt_chaste_interface__cell__sfcaBj;
        rDY[7] = d_dt_chaste_interface__cell__sfcaBsl;
        rAlphaOrTau[8] = (9.0 / (1.0 + exp((var_chaste_interface__cell__sVm + 3.0) * 0.066666666666666666))) + 0.5;
        rBetaOrInf[8] = var_cell__xtoss;
        rAlphaOrTau[9] = (800.0 / (1.0 + exp((var_chaste_interface__cell__sVm + 60.0) * 0.10000000000000001))) + 30.0;
        rBetaOrInf[9] = var_cell__ytoss;
        rAlphaOrTau[10] = (8.5 * exp(-pow((var_chaste_interface__cell__sVm + 45.0) * 0.02, 2.0))) + 0.5;
        rBetaOrInf[10] = var_cell__xtoss;
        rAlphaOrTau[11] = (85.0 * exp((-pow(var_chaste_interface__cell__sVm + 40.0, 2.0)) * 0.0045454545454545452)) + 7.0;
        rBetaOrInf[11] = var_cell__ytoss;
        rAlphaOrTau[12] = (((550.0 / (1.0 + exp(( -22.0 - var_chaste_interface__cell__sVm) * 0.1111111111111111))) * 6.0) / (1.0 + exp((var_chaste_interface__cell__sVm -  -11.0) * 0.1111111111111111))) + (230.0 / (1.0 + exp((var_chaste_interface__cell__sVm -  -40.0) * 0.050000000000000003)));
        rBetaOrInf[12] = 1.0 / (1.0 + exp((-(var_chaste_interface__cell__sVm + 10.0)) * 0.20000000000000001));
        rAlphaOrTau[13] = 990.10000000000002 / (1.0 + exp((-(var_chaste_interface__cell__sVm + 2.4359999999999999)) * 0.070821529745042494));
        rBetaOrInf[13] = 1.0 / (1.0 + exp((-(var_chaste_interface__cell__sVm + 3.7999999999999998)) * 0.070175438596491224));
        rDY[14] = d_dt_chaste_interface__cell__sRyRr;
        rDY[15] = d_dt_chaste_interface__cell__sRyRo;
        rDY[16] = d_dt_chaste_interface__cell__sRyRi;
        rDY[17] = d_dt_chaste_interface__cell__sNaBj;
        rDY[18] = d_dt_chaste_interface__cell__sNaBsl;
        rDY[19] = d_dt_chaste_interface__cell__sTnCL;
        rDY[20] = d_dt_chaste_interface__cell__sTnCHc;
        rDY[21] = d_dt_chaste_interface__cell__sTnCHm;
        rDY[22] = d_dt_chaste_interface__cell__sCaM;
        rDY[23] = d_dt_chaste_interface__cell__sMyoc;
        rDY[24] = d_dt_chaste_interface__cell__sMyom;
        rDY[25] = d_dt_chaste_interface__cell__sSRB;
        rDY[26] = d_dt_chaste_interface__cell__sSLLj;
        rDY[27] = d_dt_chaste_interface__cell__sSLLsl;
        rDY[28] = d_dt_chaste_interface__cell__sSLHj;
        rDY[29] = d_dt_chaste_interface__cell__sSLHsl;
        rDY[30] = d_dt_chaste_interface__cell__sCsqnb;
        rDY[31] = d_dt_chaste_interface__cell__sCa_sr;
        rDY[32] = d_dt_chaste_interface__cell__sNaj;
        rDY[33] = d_dt_chaste_interface__cell__sNasl;
        rDY[34] = d_dt_chaste_interface__cell__sNai;
        rDY[35] = d_dt_chaste_interface__cell__sCaj;
        rDY[36] = d_dt_chaste_interface__cell__sCasl;
        rDY[37] = d_dt_chaste_interface__cell__sCai;
    }
    
    void Dynamicgrandi2010ssFromCellMLRushLarsen::ComputeOneStepExceptVoltage(const std::vector<double> &rDY, const std::vector<double> &rAlphaOrTau, const std::vector<double> &rBetaOrInf)
    {
        std::vector<double>& rY = rGetStateVariables();
        rY[1] = rBetaOrInf[1] + (rY[1] - rBetaOrInf[1])*exp(-mDt/rAlphaOrTau[1]);
        rY[2] = rBetaOrInf[2] + (rY[2] - rBetaOrInf[2])*exp(-mDt/rAlphaOrTau[2]);
        rY[3] = rBetaOrInf[3] + (rY[3] - rBetaOrInf[3])*exp(-mDt/rAlphaOrTau[3]);
        rY[4] = rBetaOrInf[4] + (rY[4] - rBetaOrInf[4])*exp(-mDt/rAlphaOrTau[4]);
        rY[5] = rBetaOrInf[5] + (rY[5] - rBetaOrInf[5])*exp(-mDt/rAlphaOrTau[5]);
        rY[6] += mDt * rDY[6];
        rY[7] += mDt * rDY[7];
        rY[8] = rBetaOrInf[8] + (rY[8] - rBetaOrInf[8])*exp(-mDt/rAlphaOrTau[8]);
        rY[9] = rBetaOrInf[9] + (rY[9] - rBetaOrInf[9])*exp(-mDt/rAlphaOrTau[9]);
        rY[10] = rBetaOrInf[10] + (rY[10] - rBetaOrInf[10])*exp(-mDt/rAlphaOrTau[10]);
        rY[11] = rBetaOrInf[11] + (rY[11] - rBetaOrInf[11])*exp(-mDt/rAlphaOrTau[11]);
        rY[12] = rBetaOrInf[12] + (rY[12] - rBetaOrInf[12])*exp(-mDt/rAlphaOrTau[12]);
        rY[13] = rBetaOrInf[13] + (rY[13] - rBetaOrInf[13])*exp(-mDt/rAlphaOrTau[13]);
        rY[14] += mDt * rDY[14];
        rY[15] += mDt * rDY[15];
        rY[16] += mDt * rDY[16];
        rY[17] += mDt * rDY[17];
        rY[18] += mDt * rDY[18];
        rY[19] += mDt * rDY[19];
        rY[20] += mDt * rDY[20];
        rY[21] += mDt * rDY[21];
        rY[22] += mDt * rDY[22];
        rY[23] += mDt * rDY[23];
        rY[24] += mDt * rDY[24];
        rY[25] += mDt * rDY[25];
        rY[26] += mDt * rDY[26];
        rY[27] += mDt * rDY[27];
        rY[28] += mDt * rDY[28];
        rY[29] += mDt * rDY[29];
        rY[30] += mDt * rDY[30];
        rY[31] += mDt * rDY[31];
        rY[32] += mDt * rDY[32];
        rY[33] += mDt * rDY[33];
        rY[34] += mDt * rDY[34];
        rY[35] += mDt * rDY[35];
        rY[36] += mDt * rDY[36];
        rY[37] += mDt * rDY[37];
    }
    
template<>
void OdeSystemInformation<Dynamicgrandi2010ssFromCellMLRushLarsen>::Initialise(void)
{
    this->mSystemName = "grandi2010";
    this->mFreeVariableName = "cell__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-81.3842590704928);

    // rY[1]:
    this->mVariableNames.push_back("cell__sm");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00384941567866232);

    // rY[2]:
    this->mVariableNames.push_back("cell__sh");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.623723834301669);

    // rY[3]:
    this->mVariableNames.push_back("cell__sj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.622080736932815);

    // rY[4]:
    this->mVariableNames.push_back("cell__sd");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.95884913218079e-6);

    // rY[5]:
    this->mVariableNames.push_back("cell__sf");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.995094078386247);

    // rY[6]:
    this->mVariableNames.push_back("cell__sfcaBj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0246274349529557);

    // rY[7]:
    this->mVariableNames.push_back("cell__sfcaBsl");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0150911724206476);

    // rY[8]:
    this->mVariableNames.push_back("cell__sxtos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000442853722673121);

    // rY[9]:
    this->mVariableNames.push_back("cell__sytos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.789013894749951);

    // rY[10]:
    this->mVariableNames.push_back("cell__sxtof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000442846429332686);

    // rY[11]:
    this->mVariableNames.push_back("cell__sytof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999995784674368);

    // rY[12]:
    this->mVariableNames.push_back("cell__sxkr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.020160578118589);

    // rY[13]:
    this->mVariableNames.push_back("cell__sxks");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00430143235332308);

    // rY[14]:
    this->mVariableNames.push_back("cell__sRyRr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.893326456705696);

    // rY[15]:
    this->mVariableNames.push_back("cell__sRyRo");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(7.56436968249499e-7);

    // rY[16]:
    this->mVariableNames.push_back("cell__sRyRi");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(9.03266331737064e-8);

    // rY[17]:
    this->mVariableNames.push_back("cell__sNaBj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.41097946062695);

    // rY[18]:
    this->mVariableNames.push_back("cell__sNaBsl");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.744248540671373);

    // rY[19]:
    this->mVariableNames.push_back("cell__sTnCL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00904644567707666);

    // rY[20]:
    this->mVariableNames.push_back("cell__sTnCHc");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.1183943202639);

    // rY[21]:
    this->mVariableNames.push_back("cell__sTnCHm");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0101423649465603);

    // rY[22]:
    this->mVariableNames.push_back("cell__sCaM");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000299824763475116);

    // rY[23]:
    this->mVariableNames.push_back("cell__sMyoc");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00201443980536826);

    // rY[24]:
    this->mVariableNames.push_back("cell__sMyom");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.137467597337588);

    // rY[25]:
    this->mVariableNames.push_back("cell__sSRB");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00220110816535249);

    // rY[26]:
    this->mVariableNames.push_back("cell__sSLLj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00739549938515031);

    // rY[27]:
    this->mVariableNames.push_back("cell__sSLLsl");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00979616077807075);

    // rY[28]:
    this->mVariableNames.push_back("cell__sSLHj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0735225248399363);

    // rY[29]:
    this->mVariableNames.push_back("cell__sSLHsl");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.113642236788144);

    // rY[30]:
    this->mVariableNames.push_back("cell__sCsqnb");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.20762712858574);

    // rY[31]:
    this->mVariableNames.push_back("cell__sCa_sr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.563755421404699);

    // rY[32]:
    this->mVariableNames.push_back("cell__sNaj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.21411036389602);

    // rY[33]:
    this->mVariableNames.push_back("cell__sNasl");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.21322794157889);

    // rY[34]:
    this->mVariableNames.push_back("cell__sNai");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.21340895351653);

    // rY[35]:
    this->mVariableNames.push_back("cell__sCaj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000175648385857736);

    // rY[36]:
    this->mVariableNames.push_back("cell__sCasl");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000105614570409386);

    // rY[37]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.85230799863012e-5);

    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamicgrandi2010ssFromCellMLRushLarsen)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamicgrandi2010ssFromCellMLRushLarsen(pSolver, pStimulus);
    }
    
}

