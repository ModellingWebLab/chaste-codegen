//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: fink_noble_giles_model_2008
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: , pycml: , optimize: )
//! on (date omitted as unimportant)
//! 
//! <autogenerated>

#include "fink_noble_giles_model_2008.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Dynamicfink_noble_giles_model_2008FromCellMLRushLarsen::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__i_Stim_Start = 10.0; // millisecond
        const double var_chaste_interface__cell__i_Stim_Period = 1000.0; // millisecond
        const double var_chaste_interface__cell__i_Stim_PulseDuration = 1.0; // millisecond
        const double var_chaste_interface__cell__i_Stim_Amplitude =  -52.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__i_Stim_Amplitude),
                var_chaste_interface__cell__i_Stim_PulseDuration,
                var_chaste_interface__cell__i_Stim_Period,
                var_chaste_interface__cell__i_Stim_Start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    
    Dynamicfink_noble_giles_model_2008FromCellMLRushLarsen::Dynamicfink_noble_giles_model_2008FromCellMLRushLarsen(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractRushLarsenCardiacCell(
                27,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Dynamicfink_noble_giles_model_2008FromCellMLRushLarsen>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
    }
    
    Dynamicfink_noble_giles_model_2008FromCellMLRushLarsen::~Dynamicfink_noble_giles_model_2008FromCellMLRushLarsen()
    {
    }
    
    double Dynamicfink_noble_giles_model_2008FromCellMLRushLarsen::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__iKr_Markov__Or4 = rY[4];
        // Units: dimensionless; Initial value: 0.014
        double var_chaste_interface__iKs_Xs_gate__Xs = rY[11];
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = rY[12];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__ito_r_gate__r = rY[13];
        // Units: dimensionless; Initial value: 2.11e-8
        double var_chaste_interface__iNa_m_gate__m = rY[14];
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = rY[15];
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = rY[16];
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = rY[17];
        // Units: dimensionless; Initial value: 5.06e-6
        double var_chaste_interface__iCaL_f_gate__f = rY[18];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = rY[19];
        // Units: dimensionless; Initial value: 0.9995
        double var_chaste_interface__iCaL_fCass_gate__fCass = rY[20];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__Ca__Ca_i = rY[21];
        // Units: millimolar; Initial value: 1.092e-4
        double var_chaste_interface__Ca__Ca_ss = rY[23];
        // Units: millimolar; Initial value: 1.893e-4
        double var_chaste_interface__Na__Na_i = rY[25];
        // Units: millimolar; Initial value: 7.940167
        double var_chaste_interface__K__K_i = rY[26];
        // Units: millimolar; Initial value: 141.0167
        
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(5.4000000000000004 / var_chaste_interface__K__K_i); // millivolt
        const double var_iK1_rectification__temp = 1.0 + (0.0356 / (0.45000000000000001 * exp((-(var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K))) * 0.050000000000000003))); // dimensionless
        const double var_IK1__i_K1 = ((0.88380000000000003 * ((var_iK1_rectification__temp * var_iK1_rectification__temp) / ((0.0014613 / (0.00069999999999999999 * exp((-((var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K)) + 0.2848)) * 0.20833333333333334))) + (0.0356 / (2.7999999999999998 * exp((-(var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K))) * 0.0055555555555555558))) + (var_iK1_rectification__temp * var_iK1_rectification__temp * var_iK1_rectification__temp)))) + (0.11619999999999997 * (1.0 / (1.0 + (0.0014613 / (0.040000000000000001 * exp((-(var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K))) * 0.10989010989010989))))))) * (var_chaste_interface__cell__V - var_reversal_potentials__E_K) * 0.68210000000000059; // nanoA_per_nanoF
        const double var_Ito__i_to = 0.20000000000000001 * var_chaste_interface__ito_r_gate__r * var_chaste_interface__ito_s_gate__s * (var_chaste_interface__cell__V - var_reversal_potentials__E_K); // nanoA_per_nanoF
        const double var_IKr__i_Kr = var_chaste_interface__iKr_Markov__Or4 * (var_chaste_interface__cell__V - var_reversal_potentials__E_K) * 0.024000000000000021; // nanoA_per_nanoF
        const double var_IKs__i_Ks = 0.039199999999999999 * pow(var_chaste_interface__iKs_Xs_gate__Xs, 2.0) * (var_chaste_interface__cell__V - (26.713760659695648 * log(9.6000000000000014 / (var_chaste_interface__K__K_i + (0.029999999999999999 * var_chaste_interface__Na__Na_i))))); // nanoA_per_nanoF
        const double var_ICaL__i_CaL = (((var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f_gate__f * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * (var_chaste_interface__cell__V - 15.0) * 744753.68994972983) * 3.8797490106562429e-07) * ((0.25 * var_chaste_interface__Ca__Ca_ss * exp(((var_chaste_interface__cell__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07)) - 2.0)) / (exp(((var_chaste_interface__cell__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07) - 1.0); // nanoA_per_nanoF
        const double var_INaK__i_NaK = ((1.0943437499999999 * var_chaste_interface__Na__Na_i) / (var_chaste_interface__Na__Na_i + 40.0)) / (1.0 + (0.1245 * exp((var_chaste_interface__cell__V *  -9648.5341499999995) * 3.8797490106562429e-07)) + (0.035299999999999998 * exp(((-var_chaste_interface__cell__V) * 96485.341499999995) * 3.8797490106562429e-07))); // nanoA_per_nanoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(140.0 / var_chaste_interface__Na__Na_i); // millivolt
        const double var_INa__i_Na = 11.0 * pow(var_chaste_interface__iNa_m_gate__m, 3.0) * var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j * (var_chaste_interface__cell__V - var_reversal_potentials__E_Na); // nanoA_per_nanoF
        const double var_INab__i_b_Na = 0.00029 * (var_chaste_interface__cell__V - var_reversal_potentials__E_Na); // nanoA_per_nanoF
        const double var_INaCa__i_NaCa = (200.0 * ((exp((var_chaste_interface__cell__V * 33769.869524999995) * 3.8797490106562429e-07) * pow(var_chaste_interface__Na__Na_i, 3.0) * 2.0) - (exp((var_chaste_interface__cell__V *  -62715.471975) * 3.8797490106562429e-07) * var_chaste_interface__Ca__Ca_i * 6860000.0))) / ((1.0 + (0.10000000000000001 * exp((var_chaste_interface__cell__V *  -62715.471975) * 3.8797490106562429e-07))) * 11539055.9375); // nanoA_per_nanoF
        const double var_ICab__i_b_Ca = 0.00047360000000000002 * (var_chaste_interface__cell__V - (13.356880329847824 * log(2.0 / var_chaste_interface__Ca__Ca_i))); // nanoA_per_nanoF
        const double var_IpK__i_p_K = (0.0097300000000000008 * (var_chaste_interface__cell__V - var_reversal_potentials__E_K)) / (1.0 + exp((25.0 - var_chaste_interface__cell__V) * 0.16722408026755853)); // nanoA_per_nanoF
        const double var_IpCa__i_p_Ca = (0.061899999999999997 * var_chaste_interface__Ca__Ca_i) / (var_chaste_interface__Ca__Ca_i + 0.00050000000000000001); // nanoA_per_nanoF
        const double var_chaste_interface__cell__i_Stim = 0.0;
        const double var_cell__i_tot = var_IK1__i_K1 + var_Ito__i_to + var_IKr__i_Kr + var_IKs__i_Ks + var_ICaL__i_CaL + var_INaK__i_NaK + var_INa__i_Na + var_INab__i_b_Na + var_INaCa__i_NaCa + var_ICab__i_b_Ca + var_IpK__i_p_K + var_IpCa__i_p_Ca + (var_chaste_interface__cell__i_Stim / HeartConfig::Instance()->GetCapacitance()); // nanoA_per_nanoF
        const double var_chaste_interface__i_ionic = (var_cell__i_tot) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void Dynamicfink_noble_giles_model_2008FromCellMLRushLarsen::EvaluateEquations(double var_chaste_interface__Environment__time, std::vector<double> &rDY, std::vector<double> &rAlphaOrTau, std::vector<double> &rBetaOrInf)
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__iKr_Markov__Cr1 = rY[1];
        // Units: dimensionless; Initial value: 0.9786
        double var_chaste_interface__iKr_Markov__Cr2 = rY[2];
        // Units: dimensionless; Initial value: 0.0031
        double var_chaste_interface__iKr_Markov__Cr3 = rY[3];
        // Units: dimensionless; Initial value: 0.0029
        double var_chaste_interface__iKr_Markov__Or4 = rY[4];
        // Units: dimensionless; Initial value: 0.014
        double var_chaste_interface__iKr_Markov__Ir5 = rY[5];
        // Units: dimensionless; Initial value: 0.0014
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr1 = rY[6];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr2 = rY[7];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr3 = rY[8];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 = rY[9];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BIr5 = rY[10];
        // Units: dimensionless; Initial value: 0
        double var_chaste_interface__iKs_Xs_gate__Xs = rY[11];
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = rY[12];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__ito_r_gate__r = rY[13];
        // Units: dimensionless; Initial value: 2.11e-8
        double var_chaste_interface__iNa_m_gate__m = rY[14];
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = rY[15];
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = rY[16];
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = rY[17];
        // Units: dimensionless; Initial value: 5.06e-6
        double var_chaste_interface__iCaL_f_gate__f = rY[18];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = rY[19];
        // Units: dimensionless; Initial value: 0.9995
        double var_chaste_interface__iCaL_fCass_gate__fCass = rY[20];
        // Units: dimensionless; Initial value: 1
        double var_chaste_interface__Ca__Ca_i = rY[21];
        // Units: millimolar; Initial value: 1.092e-4
        double var_chaste_interface__Ca__Ca_SR = rY[22];
        // Units: millimolar; Initial value: 2.7656
        double var_chaste_interface__Ca__Ca_ss = rY[23];
        // Units: millimolar; Initial value: 1.893e-4
        double var_chaste_interface__Irel__R_prime = rY[24];
        // Units: dimensionless; Initial value: 0.9864
        double var_chaste_interface__Na__Na_i = rY[25];
        // Units: millimolar; Initial value: 7.940167
        double var_chaste_interface__K__K_i = rY[26];
        // Units: millimolar; Initial value: 141.0167
        
        
        // Mathematics
        double d_dt_chaste_interface__cell__V;
        const double var_reversal_potentials__E_K = 26.713760659695648 * log(5.4000000000000004 / var_chaste_interface__K__K_i); // millivolt
        const double var_iK1_rectification__temp = 1.0 + (0.0356 / (0.45000000000000001 * exp((-(var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K))) * 0.050000000000000003))); // dimensionless
        const double var_IK1__i_K1 = ((0.88380000000000003 * ((var_iK1_rectification__temp * var_iK1_rectification__temp) / ((0.0014613 / (0.00069999999999999999 * exp((-((var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K)) + 0.2848)) * 0.20833333333333334))) + (0.0356 / (2.7999999999999998 * exp((-(var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K))) * 0.0055555555555555558))) + (var_iK1_rectification__temp * var_iK1_rectification__temp * var_iK1_rectification__temp)))) + (0.11619999999999997 * (1.0 / (1.0 + (0.0014613 / (0.040000000000000001 * exp((-(var_chaste_interface__cell__V - (1.0648 * var_reversal_potentials__E_K))) * 0.10989010989010989))))))) * (var_chaste_interface__cell__V - var_reversal_potentials__E_K) * 0.68210000000000059; // nanoA_per_nanoF
        const double var_Ito__i_to = 0.20000000000000001 * var_chaste_interface__ito_r_gate__r * var_chaste_interface__ito_s_gate__s * (var_chaste_interface__cell__V - var_reversal_potentials__E_K); // nanoA_per_nanoF
        const double var_IKr__i_Kr = var_chaste_interface__iKr_Markov__Or4 * (var_chaste_interface__cell__V - var_reversal_potentials__E_K) * 0.024000000000000021; // nanoA_per_nanoF
        const double var_IKs__i_Ks = 0.039199999999999999 * pow(var_chaste_interface__iKs_Xs_gate__Xs, 2.0) * (var_chaste_interface__cell__V - (26.713760659695648 * log(9.6000000000000014 / (var_chaste_interface__K__K_i + (0.029999999999999999 * var_chaste_interface__Na__Na_i))))); // nanoA_per_nanoF
        const double var_ICaL__i_CaL = (((var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f_gate__f * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * (var_chaste_interface__cell__V - 15.0) * 744753.68994972983) * 3.8797490106562429e-07) * ((0.25 * var_chaste_interface__Ca__Ca_ss * exp(((var_chaste_interface__cell__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07)) - 2.0)) / (exp(((var_chaste_interface__cell__V - 15.0) * 192970.68299999999) * 3.8797490106562429e-07) - 1.0); // nanoA_per_nanoF
        const double var_INaK__i_NaK = ((1.0943437499999999 * var_chaste_interface__Na__Na_i) / (var_chaste_interface__Na__Na_i + 40.0)) / (1.0 + (0.1245 * exp((var_chaste_interface__cell__V *  -9648.5341499999995) * 3.8797490106562429e-07)) + (0.035299999999999998 * exp(((-var_chaste_interface__cell__V) * 96485.341499999995) * 3.8797490106562429e-07))); // nanoA_per_nanoF
        const double var_reversal_potentials__E_Na = 26.713760659695648 * log(140.0 / var_chaste_interface__Na__Na_i); // millivolt
        const double var_INa__i_Na = 11.0 * pow(var_chaste_interface__iNa_m_gate__m, 3.0) * var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j * (var_chaste_interface__cell__V - var_reversal_potentials__E_Na); // nanoA_per_nanoF
        const double var_INab__i_b_Na = 0.00029 * (var_chaste_interface__cell__V - var_reversal_potentials__E_Na); // nanoA_per_nanoF
        const double var_INaCa__i_NaCa = (200.0 * ((exp((var_chaste_interface__cell__V * 33769.869524999995) * 3.8797490106562429e-07) * pow(var_chaste_interface__Na__Na_i, 3.0) * 2.0) - (exp((var_chaste_interface__cell__V *  -62715.471975) * 3.8797490106562429e-07) * var_chaste_interface__Ca__Ca_i * 6860000.0))) / ((1.0 + (0.10000000000000001 * exp((var_chaste_interface__cell__V *  -62715.471975) * 3.8797490106562429e-07))) * 11539055.9375); // nanoA_per_nanoF
        const double var_ICab__i_b_Ca = 0.00047360000000000002 * (var_chaste_interface__cell__V - (13.356880329847824 * log(2.0 / var_chaste_interface__Ca__Ca_i))); // nanoA_per_nanoF
        const double var_IpK__i_p_K = (0.0097300000000000008 * (var_chaste_interface__cell__V - var_reversal_potentials__E_K)) / (1.0 + exp((25.0 - var_chaste_interface__cell__V) * 0.16722408026755853)); // nanoA_per_nanoF
        const double var_IpCa__i_p_Ca = (0.061899999999999997 * var_chaste_interface__Ca__Ca_i) / (var_chaste_interface__Ca__Ca_i + 0.00050000000000000001); // nanoA_per_nanoF
        const double var_chaste_interface__cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time);
        const double var_iKr_Markov__beta_xr1 = 1.0 * exp(13.688000000000001 + (1.0 * (( -0.060299999999999999 * var_chaste_interface__cell__V) - 15.707000000000001))); // per_millisecond
        const double var_iKr_Markov__alpha_xr1 = 1.0 * exp(24.335000000000001 + (1.0 * ((0.0112 * var_chaste_interface__cell__V) - 25.914000000000001))); // per_millisecond
        const double var_iKr_Markov__beta_xr2 = 1.0 * exp(13.193 + (1.0 * ((0.0 * var_chaste_interface__cell__V) - 15.707000000000001))); // per_millisecond
        const double var_iKr_Markov__alpha_xr2 = 1.0 * exp(22.745999999999999 + (1.0 * ((0.0 * var_chaste_interface__cell__V) - 25.914000000000001))); // per_millisecond
        const double var_iKr_Markov__alpha_xr3 = 1.0 * exp(22.097999999999999 + (1.0 * ((0.036499999999999998 * var_chaste_interface__cell__V) - 25.914000000000001))); // per_millisecond
        const double var_iKr_Markov__beta_xr3 = 1.0 * exp(7.3129999999999997 + (1.0 * (( -0.039899999999999998 * var_chaste_interface__cell__V) - 15.707000000000001))); // per_millisecond
        const double var_iKr_Markov__alpha_xr4 = exp(30.015999999999998 + (1.0 * ((0.0223 * var_chaste_interface__cell__V) - 30.888000000000002))) * 1.0; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__BtoO = var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 * 0.00125; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__OtoB = var_chaste_interface__iKr_Markov__Or4 * 0.0; // per_millisecond
        const double var_iKr_Markov__beta_xr4 = 1.0 * exp(30.061 + (1.0 * (( -0.031199999999999999 * var_chaste_interface__cell__V) - 33.243000000000002))); // per_millisecond
        const double var_Irel__kcasr = 2.5 - (1.5 / (1.0 + pow(1.5 / var_chaste_interface__Ca__Ca_SR, 2.0))); // dimensionless
        const double var_Irel__k1 = 0.14999999999999999 / var_Irel__kcasr; // per_millimolar2_per_millisecond
        const double var_Irel__i_rel = 0.30599999999999999 * ((var_Irel__k1 * pow(var_chaste_interface__Ca__Ca_ss, 2.0) * var_chaste_interface__Irel__R_prime) / (0.059999999999999998 + (var_Irel__k1 * pow(var_chaste_interface__Ca__Ca_ss, 2.0)))) * (var_chaste_interface__Ca__Ca_SR - var_chaste_interface__Ca__Ca_ss); // millimolar_per_millisecond
        const double var_Ileak_Iup_Ixfer__i_up = 0.0063749999999999996 / (1.0 + (6.2499999999999997e-08 / pow(var_chaste_interface__Ca__Ca_i, 2.0))); // millimolar_per_millisecond
        const double var_Ileak_Iup_Ixfer__i_leak = 0.00036000000000000002 * (var_chaste_interface__Ca__Ca_SR - var_chaste_interface__Ca__Ca_i); // millimolar_per_millisecond
        const double var_Ileak_Iup_Ixfer__i_xfer = 0.0038 * (var_chaste_interface__Ca__Ca_ss - var_chaste_interface__Ca__Ca_i); // millimolar_per_millisecond
        const double d_dt_chaste_interface__iKr_Markov__Cr1 = (var_iKr_Markov__beta_xr1 * var_chaste_interface__iKr_Markov__Cr2) - (var_iKr_Markov__alpha_xr1 * var_chaste_interface__iKr_Markov__Cr1); // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov__Cr2 = ((var_iKr_Markov__alpha_xr1 * var_chaste_interface__iKr_Markov__Cr1) + (var_iKr_Markov__beta_xr2 * var_chaste_interface__iKr_Markov__Cr3)) - ((var_iKr_Markov__alpha_xr2 + var_iKr_Markov__beta_xr1) * var_chaste_interface__iKr_Markov__Cr2); // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov__Cr3 = ((var_iKr_Markov__alpha_xr2 * var_chaste_interface__iKr_Markov__Cr2) + (var_iKr_Markov__beta_xr3 * var_chaste_interface__iKr_Markov__Or4)) - ((var_iKr_Markov__alpha_xr3 + var_iKr_Markov__beta_xr2) * var_chaste_interface__iKr_Markov__Cr3); // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov__Or4 = ((((var_iKr_Markov__alpha_xr3 * var_chaste_interface__iKr_Markov__Cr3) + (var_iKr_Markov__beta_xr4 * var_chaste_interface__iKr_Markov__Ir5)) - ((var_iKr_Markov__alpha_xr4 + var_iKr_Markov__beta_xr3) * var_chaste_interface__iKr_Markov__Or4)) - var_iKr_Markov_Sotalol_block__OtoB) + var_iKr_Markov_Sotalol_block__BtoO; // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov__Ir5 = (var_iKr_Markov__alpha_xr4 * var_chaste_interface__iKr_Markov__Or4) - (var_iKr_Markov__beta_xr4 * var_chaste_interface__iKr_Markov__Ir5); // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr1 = (var_iKr_Markov__beta_xr1 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr2) - (var_iKr_Markov__alpha_xr1 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr1); // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr2 = ((var_iKr_Markov__alpha_xr1 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr1) + (var_iKr_Markov__beta_xr2 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr3)) - ((var_iKr_Markov__alpha_xr2 + var_iKr_Markov__beta_xr1) * var_chaste_interface__iKr_Markov_Sotalol_block__BCr2); // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr3 = ((var_iKr_Markov__alpha_xr2 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr2) + (var_iKr_Markov__beta_xr3 * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4)) - ((var_iKr_Markov__alpha_xr3 + var_iKr_Markov__beta_xr2) * var_chaste_interface__iKr_Markov_Sotalol_block__BCr3); // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov_Sotalol_block__BOr4 = ((((var_iKr_Markov__alpha_xr3 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr3) + (var_iKr_Markov__beta_xr4 * var_chaste_interface__iKr_Markov_Sotalol_block__BIr5)) - ((var_iKr_Markov__alpha_xr4 + var_iKr_Markov__beta_xr3) * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4)) + var_iKr_Markov_Sotalol_block__OtoB) - var_iKr_Markov_Sotalol_block__BtoO; // per_millisecond
        const double d_dt_chaste_interface__iKr_Markov_Sotalol_block__BIr5 = (var_iKr_Markov__alpha_xr4 * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4) - (var_iKr_Markov__beta_xr4 * var_chaste_interface__iKr_Markov_Sotalol_block__BIr5); // per_millisecond
        const double d_dt_chaste_interface__iCaL_fCass_gate__fCass = (((0.40000000000000002 / (1.0 + pow(var_chaste_interface__Ca__Ca_ss * 20.0, 2.0))) + 0.59999999999999998) - var_chaste_interface__iCaL_fCass_gate__fCass) / ((80.0 / (1.0 + pow(var_chaste_interface__Ca__Ca_ss * 20.0, 2.0))) + 2.0); // per_millisecond
        const double d_dt_chaste_interface__Ca__Ca_i = (1.0 / (1.0 + (0.00020000000000000001 / pow(var_chaste_interface__Ca__Ca_i + 0.001, 2.0)))) * (((((var_Ileak_Iup_Ixfer__i_leak - var_Ileak_Iup_Ixfer__i_up) * 0.0010939999999999999) * 60.960741282614002) + var_Ileak_Iup_Ixfer__i_xfer) - ((((var_ICab__i_b_Ca + var_IpCa__i_p_Ca) - (2.0 * var_INaCa__i_NaCa)) * 0.115) * 0.00031590674984870111)); // millimolar_per_millisecond
        const double d_dt_chaste_interface__Ca__Ca_SR = (1.0 / (1.0 + (3.0 / pow(var_chaste_interface__Ca__Ca_SR + 0.29999999999999999, 2.0)))) * (var_Ileak_Iup_Ixfer__i_up - (var_Irel__i_rel + var_Ileak_Iup_Ixfer__i_leak)); // millimolar_per_millisecond
        const double d_dt_chaste_interface__Ca__Ca_ss = (1.0 / (1.0 + (0.0001 / pow(var_chaste_interface__Ca__Ca_ss + 0.00025000000000000001, 2.0)))) * (((((-var_ICaL__i_CaL) * 0.115) * 0.094772024954610345) + ((var_Irel__i_rel * 0.0010939999999999999) * 18288.2223847842)) - ((var_Ileak_Iup_Ixfer__i_xfer * 0.016403999999999998) * 18288.2223847842)); // millimolar_per_millisecond
        const double d_dt_chaste_interface__Irel__R_prime = ((-(0.044999999999999998 * var_Irel__kcasr)) * var_chaste_interface__Ca__Ca_ss * var_chaste_interface__Irel__R_prime) + (0.0050000000000000001 * (1.0 - var_chaste_interface__Irel__R_prime)); // per_millisecond
        const double d_dt_chaste_interface__Na__Na_i = ((-(var_INa__i_Na + var_INab__i_b_Na + (3.0 * var_INaK__i_NaK) + (3.0 * var_INaCa__i_NaCa))) * 0.115) * 0.00063181349969740222; // millimolar_per_millisecond
        const double d_dt_chaste_interface__K__K_i = ((-((var_IK1__i_K1 + var_Ito__i_to + var_IKr__i_Kr + var_IKs__i_Ks + var_IpK__i_p_K + (var_chaste_interface__cell__i_Stim / HeartConfig::Instance()->GetCapacitance())) - (2.0 * var_INaK__i_NaK))) * 0.00063181349969740222) * 0.115; // millimolar_per_millisecond
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__cell__V = 0.0;
        }
        else
        {
            const double var_cell__i_tot = var_IK1__i_K1 + var_Ito__i_to + var_IKr__i_Kr + var_IKs__i_Ks + var_ICaL__i_CaL + var_INaK__i_NaK + var_INa__i_Na + var_INab__i_b_Na + var_INaCa__i_NaCa + var_ICab__i_b_Ca + var_IpK__i_p_K + var_IpCa__i_p_Ca + (var_chaste_interface__cell__i_Stim / HeartConfig::Instance()->GetCapacitance()); // nanoA_per_nanoF
            d_dt_chaste_interface__cell__V = -var_cell__i_tot; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__cell__V;
        rDY[1] = d_dt_chaste_interface__iKr_Markov__Cr1;
        rDY[2] = d_dt_chaste_interface__iKr_Markov__Cr2;
        rDY[3] = d_dt_chaste_interface__iKr_Markov__Cr3;
        rDY[4] = d_dt_chaste_interface__iKr_Markov__Or4;
        rDY[5] = d_dt_chaste_interface__iKr_Markov__Ir5;
        rDY[6] = d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr1;
        rDY[7] = d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr2;
        rDY[8] = d_dt_chaste_interface__iKr_Markov_Sotalol_block__BCr3;
        rDY[9] = d_dt_chaste_interface__iKr_Markov_Sotalol_block__BOr4;
        rDY[10] = d_dt_chaste_interface__iKr_Markov_Sotalol_block__BIr5;
        rAlphaOrTau[11] = (1.0 * (1400.0 / sqrt(1.0 + exp((5.0 - var_chaste_interface__cell__V) * 0.16666666666666666))) * (1.0 / (1.0 + exp((var_chaste_interface__cell__V - 35.0) * 0.066666666666666666)))) + 80.0;
        rBetaOrInf[11] = 1.0 / (1.0 + exp(( -5.0 - var_chaste_interface__cell__V) * 0.071428571428571425));
        rAlphaOrTau[12] = (85.0 * exp((-pow(var_chaste_interface__cell__V + 45.0, 2.0)) * 0.0031250000000000002)) + (5.0 / (1.0 + exp((var_chaste_interface__cell__V - 20.0) * 0.20000000000000001))) + 3.0;
        rBetaOrInf[12] = 1.0 / (1.0 + exp((var_chaste_interface__cell__V + 20.0) * 0.20000000000000001));
        rAlphaOrTau[13] = (9.5 * exp((-pow(var_chaste_interface__cell__V + 40.0, 2.0)) * 0.00055555555555555556)) + 0.80000000000000004;
        rBetaOrInf[13] = 1.0 / (1.0 + exp((20.0 - var_chaste_interface__cell__V) * 0.16666666666666666));
        rAlphaOrTau[14] = 1.0 * (1.0 / (1.0 + exp(( -60.0 - var_chaste_interface__cell__V) * 0.20000000000000001))) * ((0.10000000000000001 / (1.0 + exp((var_chaste_interface__cell__V + 35.0) * 0.20000000000000001))) + (0.10000000000000001 / (1.0 + exp((var_chaste_interface__cell__V - 50.0) * 0.0050000000000000001))));
        rBetaOrInf[14] = 1.0 / pow(1.0 + exp(( -56.859999999999999 - var_chaste_interface__cell__V) * 0.11074197120708749), 2.0);
        rAlphaOrTau[15] = 1.0 / (((var_chaste_interface__cell__V <  -40.0) ? (0.057000000000000002 * exp((-((var_chaste_interface__cell__V + 80.0) - 0.0)) * 0.14705882352941177)) : 0.0) + ((var_chaste_interface__cell__V <  -40.0) ? ((2.7000000000000002 * exp(0.079000000000000001 * (var_chaste_interface__cell__V - 0.0))) + (310000.0 * exp(0.34849999999999998 * (var_chaste_interface__cell__V - 0.0)))) : (0.77000000000000002 / (0.13 * (1.0 + exp(((var_chaste_interface__cell__V + 10.66) - 0.0) *  -0.0900900900900901))))));
        rBetaOrInf[15] = 1.0 / pow(1.0 + exp(((var_chaste_interface__cell__V + 71.549999999999997) - 0.0) * 0.13458950201884254), 2.0);
        rAlphaOrTau[16] = 1.0 / (((var_chaste_interface__cell__V <  -40.0) ? ((((( -25428.0 * exp(0.24440000000000001 * (var_chaste_interface__cell__V - 0.0))) - (6.9480000000000002e-06 * exp( -0.043909999999999998 * (var_chaste_interface__cell__V - 0.0)))) * (var_chaste_interface__cell__V + 37.780000000000001)) * 1.0) / (1.0 + exp(0.311 * ((var_chaste_interface__cell__V + 79.230000000000004) - 0.0)))) : 0.0) + ((var_chaste_interface__cell__V <  -40.0) ? ((0.024240000000000001 * exp( -0.01052 * (var_chaste_interface__cell__V - 0.0))) / (1.0 + exp( -0.13780000000000001 * ((var_chaste_interface__cell__V + 40.140000000000001) - 0.0)))) : ((0.59999999999999998 * exp(0.057000000000000002 * (var_chaste_interface__cell__V - 0.0))) / (1.0 + exp( -0.10000000000000001 * ((var_chaste_interface__cell__V + 32.0) - 0.0))))));
        rBetaOrInf[16] = 1.0 / pow(1.0 + exp(((var_chaste_interface__cell__V + 71.549999999999997) - 0.0) * 0.13458950201884254), 2.0);
        rAlphaOrTau[17] = (1.0 * ((1.3999999999999999 / (1.0 + exp(( -35.0 - var_chaste_interface__cell__V) * 0.076923076923076927))) + 0.25) * (1.3999999999999999 / (1.0 + exp((var_chaste_interface__cell__V + 5.0) * 0.20000000000000001)))) + (1.0 / (1.0 + exp((50.0 - var_chaste_interface__cell__V) * 0.050000000000000003)));
        rBetaOrInf[17] = 1.0 / (1.0 + exp((5.0 - var_chaste_interface__cell__V) * 0.13333333333333333));
        rAlphaOrTau[18] = ((1102.5 * exp((-pow(var_chaste_interface__cell__V + 27.0, 2.0)) * 0.0044444444444444444)) + (200.0 / (1.0 + exp((13.0 - var_chaste_interface__cell__V) * 0.10000000000000001))) + (180.0 / (1.0 + exp((var_chaste_interface__cell__V + 30.0) * 0.10000000000000001))) + 20.0) * 0.25;
        rBetaOrInf[18] = 1.0 / (1.0 + exp((var_chaste_interface__cell__V + 20.0) * 0.14285714285714285));
        rAlphaOrTau[19] = ((562.0 * exp((-pow(var_chaste_interface__cell__V + 27.0, 2.0)) * 0.0041666666666666666)) + (31.0 / (1.0 + exp((25.0 - var_chaste_interface__cell__V) * 0.10000000000000001))) + (80.0 / (1.0 + exp((var_chaste_interface__cell__V + 30.0) * 0.10000000000000001)))) * 0.5;
        rBetaOrInf[19] = (0.75 / (1.0 + exp((var_chaste_interface__cell__V + 35.0) * 0.14285714285714285))) + 0.25;
        rDY[20] = d_dt_chaste_interface__iCaL_fCass_gate__fCass;
        rDY[21] = d_dt_chaste_interface__Ca__Ca_i;
        rDY[22] = d_dt_chaste_interface__Ca__Ca_SR;
        rDY[23] = d_dt_chaste_interface__Ca__Ca_ss;
        rDY[24] = d_dt_chaste_interface__Irel__R_prime;
        rDY[25] = d_dt_chaste_interface__Na__Na_i;
        rDY[26] = d_dt_chaste_interface__K__K_i;
    }
    
    void Dynamicfink_noble_giles_model_2008FromCellMLRushLarsen::ComputeOneStepExceptVoltage(const std::vector<double> &rDY, const std::vector<double> &rAlphaOrTau, const std::vector<double> &rBetaOrInf)
    {
        std::vector<double>& rY = rGetStateVariables();
        rY[1] += mDt * rDY[1];
        rY[2] += mDt * rDY[2];
        rY[3] += mDt * rDY[3];
        rY[4] += mDt * rDY[4];
        rY[5] += mDt * rDY[5];
        rY[6] += mDt * rDY[6];
        rY[7] += mDt * rDY[7];
        rY[8] += mDt * rDY[8];
        rY[9] += mDt * rDY[9];
        rY[10] += mDt * rDY[10];
        rY[11] = rBetaOrInf[11] + (rY[11] - rBetaOrInf[11])*exp(-mDt/rAlphaOrTau[11]);
        rY[12] = rBetaOrInf[12] + (rY[12] - rBetaOrInf[12])*exp(-mDt/rAlphaOrTau[12]);
        rY[13] = rBetaOrInf[13] + (rY[13] - rBetaOrInf[13])*exp(-mDt/rAlphaOrTau[13]);
        rY[14] = rBetaOrInf[14] + (rY[14] - rBetaOrInf[14])*exp(-mDt/rAlphaOrTau[14]);
        rY[15] = rBetaOrInf[15] + (rY[15] - rBetaOrInf[15])*exp(-mDt/rAlphaOrTau[15]);
        rY[16] = rBetaOrInf[16] + (rY[16] - rBetaOrInf[16])*exp(-mDt/rAlphaOrTau[16]);
        rY[17] = rBetaOrInf[17] + (rY[17] - rBetaOrInf[17])*exp(-mDt/rAlphaOrTau[17]);
        rY[18] = rBetaOrInf[18] + (rY[18] - rBetaOrInf[18])*exp(-mDt/rAlphaOrTau[18]);
        rY[19] = rBetaOrInf[19] + (rY[19] - rBetaOrInf[19])*exp(-mDt/rAlphaOrTau[19]);
        rY[20] += mDt * rDY[20];
        rY[21] += mDt * rDY[21];
        rY[22] += mDt * rDY[22];
        rY[23] += mDt * rDY[23];
        rY[24] += mDt * rDY[24];
        rY[25] += mDt * rDY[25];
        rY[26] += mDt * rDY[26];
    }
    
template<>
void OdeSystemInformation<Dynamicfink_noble_giles_model_2008FromCellMLRushLarsen>::Initialise(void)
{
    this->mSystemName = "fink_noble_giles_model_2008";
    this->mFreeVariableName = "Environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-86.45);

    // rY[1]:
    this->mVariableNames.push_back("iKr_Markov__Cr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9786);

    // rY[2]:
    this->mVariableNames.push_back("iKr_Markov__Cr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0031);

    // rY[3]:
    this->mVariableNames.push_back("iKr_Markov__Cr3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0029);

    // rY[4]:
    this->mVariableNames.push_back("iKr_Markov__Or4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.014);

    // rY[5]:
    this->mVariableNames.push_back("iKr_Markov__Ir5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0014);

    // rY[6]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[7]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[8]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[9]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BOr4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[10]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BIr5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0);

    // rY[11]:
    this->mVariableNames.push_back("iKs_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00303);

    // rY[12]:
    this->mVariableNames.push_back("ito_s_gate__s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1);

    // rY[13]:
    this->mVariableNames.push_back("ito_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.11e-8);

    // rY[14]:
    this->mVariableNames.push_back("iNa_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00132);

    // rY[15]:
    this->mVariableNames.push_back("iNa_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7768);

    // rY[16]:
    this->mVariableNames.push_back("iNa_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7766);

    // rY[17]:
    this->mVariableNames.push_back("iCaL_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.06e-6);

    // rY[18]:
    this->mVariableNames.push_back("iCaL_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999);

    // rY[19]:
    this->mVariableNames.push_back("iCaL_f2_gate__f2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9995);

    // rY[20]:
    this->mVariableNames.push_back("iCaL_fCass_gate__fCass");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1);

    // rY[21]:
    this->mVariableNames.push_back("Ca__Ca_i");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.092e-4);

    // rY[22]:
    this->mVariableNames.push_back("Ca__Ca_SR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(2.7656);

    // rY[23]:
    this->mVariableNames.push_back("Ca__Ca_ss");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.893e-4);

    // rY[24]:
    this->mVariableNames.push_back("Irel__R_prime");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9864);

    // rY[25]:
    this->mVariableNames.push_back("Na__Na_i");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.940167);

    // rY[26]:
    this->mVariableNames.push_back("K__K_i");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(141.0167);

    this->mAttributes["SuggestedForwardEulerTimestep"] = 0.001;
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Dynamicfink_noble_giles_model_2008FromCellMLRushLarsen)
extern "C"
{
    AbstractCardiacCellInterface* MakeCardiacCell(
            boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
            boost::shared_ptr<AbstractStimulusFunction> pStimulus)
    {
        return new Dynamicfink_noble_giles_model_2008FromCellMLRushLarsen(pSolver, pStimulus);
    }
    
}

