//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: Corrias_rabbit_purkinje_model
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: RushLarsenOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "corrias_purkinje_2011.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<25; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane__Vm)
    {
        const double _offset_0 = var_chaste_interface__membrane__Vm - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__Vm)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__Vm>mTableMaxs[0] || var_chaste_interface__membrane__Vm<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables(const Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables&);
    Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables& operator= (const Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables&);
    Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 25;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][25];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return exp(0.018716945411372737 * var_chaste_interface__membrane__Vm);
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return exp(-0.018716945411372737 * var_chaste_interface__membrane__Vm);
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 1.0 + exp(9.1999999999999993 + 0.10000000000000001 * var_chaste_interface__membrane__Vm);
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 1.0 + exp(0.29411764705882354 - 0.058823529411764705 * var_chaste_interface__membrane__Vm);
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 1.0 + exp(1.4732142857142858 + 0.044642857142857144 * var_chaste_interface__membrane__Vm);
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 1.0 + exp(0.0080000000000000002 * var_chaste_interface__membrane__Vm);
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 1.0 + exp(-1.7777777777777777 - 0.022222222222222223 * var_chaste_interface__membrane__Vm);
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 1.4285714285714286 / (1.0 + exp(-2.6545454545454543 - 0.18181818181818182 * var_chaste_interface__membrane__Vm));
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 1 / (1.0 + exp(-8.6909090909090896 - 0.18181818181818182 * var_chaste_interface__membrane__Vm));
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return ((fabs(30.0 + var_chaste_interface__membrane__Vm) < 1.455604075689676e-6) ? (1 / (-1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) - 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8)) + 343500.00000040967 * (30.000001455604075 + var_chaste_interface__membrane__Vm) * (1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) + 1.0465793304208771e-10 / (1.0 - exp(-2.1542940320207204e-7)) + 1.9068413391534758e-10 / (-1.0 + exp(9.9999999999880736e-8)) + 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8))))) : (1 / (0.00013100000000000001 * (30.0 + var_chaste_interface__membrane__Vm) / (-1.0 + exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__membrane__Vm)) + 7.1899999999999999e-5 * (30.0 + var_chaste_interface__membrane__Vm) / (1.0 - exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__membrane__Vm)))));
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[9] < 2){
                    double left = f(var_chaste_interface__membrane__Vm - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__Vm + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[9] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[9] >= 2){
                    EXCEPTION("Lookup table 9 at ["<<i<<"][9] has non-finite value: " << val);
                }
                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 1 / (1.0 + exp(0.089820359281437126 - 0.059880239520958084 * var_chaste_interface__membrane__Vm));
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 200.0 / (1.0 + exp(-5.0 - 0.20000000000000001 * var_chaste_interface__membrane__Vm));
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 0.066666666666666666 / (1.0 + exp(-6.0 - 0.20000000000000001 * var_chaste_interface__membrane__Vm));
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 0.20000000000000001 / (1.0 + exp(0.77777777777777779 - 0.1111111111111111 * var_chaste_interface__membrane__Vm));
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 1 / (1.0 + exp(5.5956678700361007 + 0.18050541516245489 * var_chaste_interface__membrane__Vm));
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 0.001593625498007968 + 0.027888446215139438 * exp(-0.16483600000000001 * pow((1 + 0.068965517241379309 * var_chaste_interface__membrane__Vm), 2));
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 1 / (1.0 + exp(17.545219638242894 + 0.25839793281653745 * var_chaste_interface__membrane__Vm));
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return exp(-0.051189999999999999 * var_chaste_interface__membrane__Vm);
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 1 / (1.0 + exp(10.9 + 0.10000000000000001 * var_chaste_interface__membrane__Vm));
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 0.00016666666666666666 * exp(3.6000000000000001 + 0.11 * var_chaste_interface__membrane__Vm) + 0.00016666666666666666 * exp(-2.8999999999999999 - 0.040000000000000001 * var_chaste_interface__membrane__Vm);
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 1 / (1.0 + exp(-6.666666666666667 - 0.13333333333333333 * var_chaste_interface__membrane__Vm));
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return ((fabs(7.0 + var_chaste_interface__membrane__Vm) < 8.1300813008222672e-7) ? (1.1219512195134727e-9 / (1.0 - exp(-1.0000000000011388e-7)) - 614999.99999929965 * (6.9999991869918698 + var_chaste_interface__membrane__Vm) * (-1.1219512195134727e-9 / (1.0 - exp(1.0000000000011388e-7)) - 1.1219512195134727e-9 / (1.0 - exp(-1.0000000000011388e-7)))) : (0.0013799999999999999 * (7.0 + var_chaste_interface__membrane__Vm) / (1.0 - exp(-0.86099999999999999 - 0.123 * var_chaste_interface__membrane__Vm)))) + ((fabs(10.0 + var_chaste_interface__membrane__Vm) < 6.8965517241448282e-7) ? (-4.2068965517283451e-11 / (-1.0 + exp(-1.000000000001e-7)) + 724999.99999927497 * (10.000000689655172 + var_chaste_interface__membrane__Vm) * (4.2068965517283451e-11 / (-1.0 + exp(1.000000000001e-7)) + 4.2068965517283451e-11 / (-1.0 + exp(-1.000000000001e-7)))) : (6.0999999999999999e-5 * (10.0 + var_chaste_interface__membrane__Vm) / (-1.0 + exp(1.45 + 0.14499999999999999 * var_chaste_interface__membrane__Vm))));
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 0.90000000000000002 / (1.0 + exp(12.0 + 0.15873015873015872 * var_chaste_interface__membrane__Vm));
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 120.0 + exp(4.0 + 0.040000000000000001 * var_chaste_interface__membrane__Vm);
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__Vm) {
                    return 0.0028571428571428571 / (1.0 + exp(3.4375 + 0.125 * var_chaste_interface__membrane__Vm));
                };
                const double var_chaste_interface__membrane__Vm = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__Vm);

                _lookup_table_0[i][24] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[25];

    // Lookup tables
    double (*_lookup_table_0)[25];
    int _lookup_table_0_num_misshit_piecewise[25] = {0};

};

std::shared_ptr<Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables> Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables::mpInstance;


    boost::shared_ptr<RegularStimulus> Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_membrane__Cm_converted = 9.9999999999999995e-7 * mParameters[8]; // uF
        const double var_chaste_interface__membrane__stim_amplitude_converted = -0.0043200000000000001 * HeartConfig::Instance()->GetCapacitance() / var_membrane__Cm_converted; // uA_per_cm2
        const double var_chaste_interface__membrane__stim_duration = 0.5; // time_units
        const double var_chaste_interface__membrane__stim_period = 500.0; // time_units
        const double var_chaste_interface__membrane__stim_start = 10.0; // time_units
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude_converted),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt::Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractRushLarsenCardiacCell(
                22,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 10.0; // (var_i_leak__LEAK_max) [current_per_millimolar_units]
        this->mParameters[1] = 2500.0; // (var_i_rel_per__REL_max) [current_per_millimolar_units]
        this->mParameters[2] = 0.001; // (var_i_rel_per__Krel) [millimolar]
        this->mParameters[3] = 120.0; // (var_i_serca_per__SERCA_max) [current_units]
        this->mParameters[4] = 2.0; // (var_Environment__Ca_o) [millimolar]
        this->mParameters[5] = 5.4000000000000004; // (var_Environment__K_o) [millimolar]
        this->mParameters[6] = 140.0; // (var_Environment__Na_o) [millimolar]
        this->mParameters[7] = 5.4000000000000004; // (var_i_cal__G_max_Ltype) [conductance_units]
        this->mParameters[8] = 69.0; // (var_membrane__Cm) [capacitance_units]
        this->mParameters[9] = 1140.0; // (var_i_na_fast__G_max_na_fast) [conductance_units]
        this->mParameters[10] = 0; // (var_y_na_fast__shift_INa_inact) [voltage_units]
        this->mParameters[11] = 20.0; // (var_i_k1__G_max_k1) [conductance_units]
        this->mParameters[12] = 1.5; // (var_i_kr__G_max_kr) [conductance_units]
        this->mParameters[13] = 3.0; // (var_i_ks__G_max_ks) [conductance_units]
        this->mParameters[14] = 0.001; // (var_i_naca__g_NaCa) [current_units]
        this->mParameters[15] = 10.0; // (var_i_to_fast__G_max_to_fast) [conductance_units]
    }

    Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt::~Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt()
    {
    }

    AbstractLookupTableCollection* Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt::GetLookupTableCollection()
    {
        return Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables::Instance();
    }
    
    double Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: voltage_units; Initial value: -88.744
        double var_chaste_interface__membrane__Ca_i_peripheral = rY[2];
        // Units: millimolar; Initial value: 8.37523918148654e-06
        double var_chaste_interface__membrane__Na_i = rY[4];
        // Units: millimolar; Initial value: 6.75814832463522
        double var_chaste_interface__membrane__K_i = rY[5];
        // Units: millimolar; Initial value: 139.943221899032
        double var_chaste_interface__x_Ttype__x_Ttype = rY[6];
        // Units: dimensionless; Initial value: 0.00058439023999374
        double var_chaste_interface__y_Ttype__y_Ttype = rY[7];
        // Units: dimensionless; Initial value: 0.900843399895183
        double var_chaste_interface__x_Ltype__x_Ltype = rY[8];
        // Units: dimensionless; Initial value: 1.39762741967807e-06
        double var_chaste_interface__y_Ltype__y_Ltype = rY[9];
        // Units: dimensionless; Initial value: 0.762933565557978
        double var_chaste_interface__y_ca_Ltype__y_ca_Ltype = rY[10];
        // Units: dimensionless; Initial value: 0.990616705407034
        double var_chaste_interface__x_to_fast__x_to_fast = rY[11];
        // Units: dimensionless; Initial value: 2.39836311045441e-05
        double var_chaste_interface__y_to_fast__y_to_fast = rY[12];
        // Units: dimensionless; Initial value: 0.865769351306921
        double var_chaste_interface__x_na_fast__x_na_fast = rY[13];
        // Units: dimensionless; Initial value: 2.90568689212866e-06
        double var_chaste_interface__y_na_fast__y_na_fast = rY[14];
        // Units: dimensionless; Initial value: 0.993212025695132
        double var_chaste_interface__x_na_late__x_na_late = rY[15];
        // Units: dimensionless; Initial value: 7.9043398966996e-06
        double var_chaste_interface__y_na_late__y_na_late = rY[16];
        // Units: dimensionless; Initial value: 0.839555875175682
        double var_chaste_interface__y_kr__y_kr = rY[17];
        // Units: dimensionless; Initial value: 0.202112622607795
        double var_chaste_interface__x_ks__x_ks = rY[18];
        // Units: dimensionless; Initial value: 0.0147603344538846
        double var_chaste_interface__y_ks__y_ks = rY[19];
        // Units: dimensionless; Initial value: 0.0385082219915004
        double var_chaste_interface__y_gate_f_k__y_gate_f_k = rY[20];
        // Units: dimensionless; Initial value: 0.011099
        double var_chaste_interface__y_gate_f_na__y_gate_f_na = rY[21];
        // Units: dimensionless; Initial value: 0.011099
        
        // Lookup table indexing
        const bool _oob_0 = Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__Vm);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__Vm);

        const double var_i_pmca__i_pmca = 5.0 / (1.0 + 1.0000000000000002e-6 * pow((1 / var_chaste_interface__membrane__Ca_i_peripheral), 1.5)); // current_units
        const double var_membrane__Cm_converted = 9.9999999999999995e-7 * mParameters[8]; // uF
        const double var_i_cab__i_cab = 0.0001 * var_chaste_interface__membrane__Vm - 0.0013356880329847825 * log(mParameters[4] / var_chaste_interface__membrane__Ca_i_peripheral); // current_units
        const double var_i_kb__i_kb = 0.01 * var_chaste_interface__membrane__Vm - 0.26713760659695651 * log(mParameters[5] / var_chaste_interface__membrane__K_i); // current_units
        const double var_i_nab__i_nab = 0.01 * var_chaste_interface__membrane__Vm - 0.26713760659695651 * log(mParameters[6] / var_chaste_interface__membrane__Na_i); // current_units
        const double var_i_naca__i_naca_converted = 0.0005120091132039999 * (pow(var_chaste_interface__membrane__Na_i, 3.0) * mParameters[4] * _lt_0_row[0] - pow(mParameters[6], 3.0) * var_chaste_interface__membrane__Ca_i_peripheral * _lt_0_row[1]) * HeartConfig::Instance()->GetCapacitance() * mParameters[14] / ((1.0 + 144.92753623188406 * var_chaste_interface__membrane__Ca_i_peripheral) * (1.0 + 0.001 * pow(mParameters[6], 3.0) * var_chaste_interface__membrane__Ca_i_peripheral + 0.001 * pow(var_chaste_interface__membrane__Na_i, 3.0) * mParameters[4]) * var_membrane__Cm_converted); // uA_per_cm2
        const double var_i_k1__i_k1_converted = 2.594687096950745e-7 * pow(mParameters[5], 0.80000000000000004) * (-26.713760659695652 * log(mParameters[5] / var_chaste_interface__membrane__K_i) + var_chaste_interface__membrane__Vm) * HeartConfig::Instance()->GetCapacitance() * mParameters[11] / ((_lt_0_row[2]) * var_membrane__Cm_converted); // uA_per_cm2
        const double var_i_to_sustained__i_to_sustained = 3.0 * (-26.713760659695652 * log(mParameters[5] / var_chaste_interface__membrane__K_i) + var_chaste_interface__membrane__Vm) / (_lt_0_row[3]); // current_units
        const double var_i_cat__i_cat = 0.90000000000000002 * (-13.356880329847826 * log(mParameters[4] / var_chaste_interface__membrane__Ca_i_peripheral) + var_chaste_interface__membrane__Vm) * var_chaste_interface__x_Ttype__x_Ttype * var_chaste_interface__y_Ttype__y_Ttype; // current_units
        const double var_i_cal__i_cal_converted = 9.9999999999999995e-7 * (-13.356880329847826 * log(mParameters[4] / var_chaste_interface__membrane__Ca_i_peripheral) + var_chaste_interface__membrane__Vm) * HeartConfig::Instance()->GetCapacitance() * mParameters[7] * var_chaste_interface__x_Ltype__x_Ltype * var_chaste_interface__y_Ltype__y_Ltype * var_chaste_interface__y_ca_Ltype__y_ca_Ltype / var_membrane__Cm_converted; // uA_per_cm2
        const double var_i_f_k__i_f_k = 0.18870967699999999 * (-26.713760659695652 * log(mParameters[5] / var_chaste_interface__membrane__K_i) + var_chaste_interface__membrane__Vm) * var_chaste_interface__y_gate_f_k__y_gate_f_k; // current_units
        const double var_i_f_na__i_f_na = 0.045290323 * (-26.713760659695652 * log(mParameters[6] / var_chaste_interface__membrane__Na_i) + var_chaste_interface__membrane__Vm) * var_chaste_interface__y_gate_f_na__y_gate_f_na; // current_units
        const double var_i_kr__i_kr_converted = 1.8518518518518516e-7 * (-26.713760659695652 * log(mParameters[5] / var_chaste_interface__membrane__K_i) + var_chaste_interface__membrane__Vm) * HeartConfig::Instance()->GetCapacitance() * mParameters[5] * mParameters[12] * var_chaste_interface__y_kr__y_kr / ((_lt_0_row[4]) * var_membrane__Cm_converted); // uA_per_cm2
        const double var_i_ks__i_ks_converted = 9.9999999999999995e-7 * (-26.713760659695652 * log(mParameters[5] / var_chaste_interface__membrane__K_i) + var_chaste_interface__membrane__Vm) * HeartConfig::Instance()->GetCapacitance() * mParameters[13] * var_chaste_interface__x_ks__x_ks * var_chaste_interface__y_ks__y_ks / var_membrane__Cm_converted; // uA_per_cm2
        const double var_i_na_fast__i_na_fast_converted = 9.9999999999999995e-7 * (-26.713760659695652 * log(mParameters[6] / var_chaste_interface__membrane__Na_i) + var_chaste_interface__membrane__Vm) * HeartConfig::Instance()->GetCapacitance() * mParameters[9] * var_chaste_interface__x_na_fast__x_na_fast * var_chaste_interface__y_na_fast__y_na_fast / var_membrane__Cm_converted; // uA_per_cm2
        const double var_i_na_late__i_na_late = 2.0 * (-26.713760659695652 * log(mParameters[6] / var_chaste_interface__membrane__Na_i) + var_chaste_interface__membrane__Vm) * var_chaste_interface__x_na_late__x_na_late * var_chaste_interface__y_na_late__y_na_late; // current_units
        const double var_i_nak__i_nak = 442.19999999999999 / ((1.0 + 31.98 / var_chaste_interface__membrane__Na_i) * (1.0 + 2.536253862184366 * pow((1 / mParameters[5]), 1.45)) * (_lt_0_row[5]) * (_lt_0_row[6])); // current_units
        const double var_i_to_fast__i_to_fast_converted = 9.9999999999999995e-7 * (-26.713760659695652 * log(mParameters[5] / var_chaste_interface__membrane__K_i) + var_chaste_interface__membrane__Vm) * HeartConfig::Instance()->GetCapacitance() * mParameters[15] * var_chaste_interface__x_to_fast__x_to_fast * var_chaste_interface__y_to_fast__y_to_fast / var_membrane__Cm_converted; // uA_per_cm2
        const double var_chaste_interface__i_ionic = ((var_i_cal__i_cal_converted + var_i_k1__i_k1_converted + var_i_kr__i_kr_converted + var_i_ks__i_ks_converted + var_i_na_fast__i_na_fast_converted + var_i_naca__i_naca_converted + var_i_to_fast__i_to_fast_converted) * var_membrane__Cm_converted + 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_cab__i_cab + 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_cat__i_cat + 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_f_k__i_f_k + 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_f_na__i_f_na + 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_kb__i_kb + 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_na_late__i_na_late + 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_nab__i_nab + 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_nak__i_nak + 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_pmca__i_pmca + 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_to_sustained__i_to_sustained) / var_membrane__Cm_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt::EvaluateEquations(double var_chaste_interface__Time__time, std::vector<double> &rDY, std::vector<double> &rAlphaOrTau, std::vector<double> &rBetaOrInf)
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: voltage_units; Initial value: -88.744
        double var_chaste_interface__membrane__Ca_i_bulk = rY[1];
        // Units: millimolar; Initial value: 3.09001620863236e-05
        double var_chaste_interface__membrane__Ca_i_peripheral = rY[2];
        // Units: millimolar; Initial value: 8.37523918148654e-06
        double var_chaste_interface__membrane__Ca_sr = rY[3];
        // Units: millimolar; Initial value: 0.1607
        double var_chaste_interface__membrane__Na_i = rY[4];
        // Units: millimolar; Initial value: 6.75814832463522
        double var_chaste_interface__membrane__K_i = rY[5];
        // Units: millimolar; Initial value: 139.943221899032
        double var_chaste_interface__x_Ttype__x_Ttype = rY[6];
        // Units: dimensionless; Initial value: 0.00058439023999374
        double var_chaste_interface__y_Ttype__y_Ttype = rY[7];
        // Units: dimensionless; Initial value: 0.900843399895183
        double var_chaste_interface__x_Ltype__x_Ltype = rY[8];
        // Units: dimensionless; Initial value: 1.39762741967807e-06
        double var_chaste_interface__y_Ltype__y_Ltype = rY[9];
        // Units: dimensionless; Initial value: 0.762933565557978
        double var_chaste_interface__y_ca_Ltype__y_ca_Ltype = rY[10];
        // Units: dimensionless; Initial value: 0.990616705407034
        double var_chaste_interface__x_to_fast__x_to_fast = rY[11];
        // Units: dimensionless; Initial value: 2.39836311045441e-05
        double var_chaste_interface__y_to_fast__y_to_fast = rY[12];
        // Units: dimensionless; Initial value: 0.865769351306921
        double var_chaste_interface__x_na_fast__x_na_fast = rY[13];
        // Units: dimensionless; Initial value: 2.90568689212866e-06
        double var_chaste_interface__y_na_fast__y_na_fast = rY[14];
        // Units: dimensionless; Initial value: 0.993212025695132
        double var_chaste_interface__x_na_late__x_na_late = rY[15];
        // Units: dimensionless; Initial value: 7.9043398966996e-06
        double var_chaste_interface__y_na_late__y_na_late = rY[16];
        // Units: dimensionless; Initial value: 0.839555875175682
        double var_chaste_interface__y_kr__y_kr = rY[17];
        // Units: dimensionless; Initial value: 0.202112622607795
        double var_chaste_interface__x_ks__x_ks = rY[18];
        // Units: dimensionless; Initial value: 0.0147603344538846
        double var_chaste_interface__y_ks__y_ks = rY[19];
        // Units: dimensionless; Initial value: 0.0385082219915004
        double var_chaste_interface__y_gate_f_k__y_gate_f_k = rY[20];
        // Units: dimensionless; Initial value: 0.011099
        double var_chaste_interface__y_gate_f_na__y_gate_f_na = rY[21];
        // Units: dimensionless; Initial value: 0.011099

        // Lookup table indexing
        const bool _oob_0 = Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__Vm);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Time__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__Vm);

        // Mathematics
        double d_dt_chaste_interface_var_membrane__Vm;
        const double var_Environment__F = 96485.341499999995; // F_units
        const double var_Environment__R = 8314.4719999999998; // R_units
        const double var_Environment__T = 310.0; // Temperature_units
        const double var_Environment__RToF = var_Environment__R * var_Environment__T / var_Environment__F; // voltage_units
        const double var_i_cab__G_max_cab = 0.0001; // conductance_units
        const double var_i_cat__G_max_Ttype = 0.90000000000000002; // conductance_units
        const double var_i_diff__DIFF_max = 5000.0; // current_per_millimolar_units
        const double var_i_f_k__G_f_k = 0.18870967699999999; // conductance_units
        const double var_i_f_na__G_f_na = 0.045290323; // conductance_units
        const double var_i_kb__G_max_kb = 0.01; // conductance_units
        const double var_i_na_late__G_max_na_late = 2.0; // conductance_units
        const double var_i_nab__G_max_nab = 0.01; // conductance_units
        const double var_i_naca__d_NaCa = 0.001; // dimensionless
        const double var_i_naca__gamma = 0.5; // dimensionless
        const double var_i_naca__n_NaCa = 3.0; // dimensionless
        const double var_i_nak__g_nak = 442.19999999999999; // current_units
        const double var_i_pmca__Hpmca = 1.5; // dimensionless
        const double var_i_pmca__Kpmca = 0.0001; // millimolar
        const double var_i_pmca__PMCA_max = 5.0; // current_units
        const double var_i_serca_bulk__H = 1.6000000000000001; // dimensionless
        const double var_i_serca_bulk__Kmf = 0.00024600000000000002; // millimolar
        const double var_i_serca_bulk__Kmr = 1.7; // millimolar
        const double var_i_serca_per__H = 1.6000000000000001; // dimensionless
        const double var_i_serca_per__Kmf = 0.00024600000000000002; // millimolar
        const double var_i_serca_per__Kmr = 1.7; // millimolar
        const double var_i_to_sustained__G_max_to_sustained = 3.0; // conductance_units
        const double var_i_cab__E_ca = 0.5 * var_Environment__RToF * log(mParameters[4] / var_chaste_interface__membrane__Ca_i_peripheral); // voltage_units
        const double var_i_cal__E_Ca = 0.5 * var_Environment__RToF * log(mParameters[4] / var_chaste_interface__membrane__Ca_i_peripheral); // voltage_units
        const double var_i_cat__E_Ca = 0.5 * var_Environment__RToF * log(mParameters[4] / var_chaste_interface__membrane__Ca_i_peripheral); // voltage_units
        const double var_i_diff__i_diff = (-var_chaste_interface__membrane__Ca_i_bulk + var_chaste_interface__membrane__Ca_i_peripheral) * var_i_diff__DIFF_max; // current_units
        const double var_i_pmca__i_pmca = var_i_pmca__PMCA_max / (1.0 + pow((var_i_pmca__Kpmca / var_chaste_interface__membrane__Ca_i_peripheral), var_i_pmca__Hpmca)); // current_units
        const double var_i_leak__i_leak = (-var_chaste_interface__membrane__Ca_i_bulk + var_chaste_interface__membrane__Ca_sr) * mParameters[0]; // current_units
        const double var_i_rel_per__i_rel_per = mParameters[1] * var_chaste_interface__membrane__Ca_sr / (1.0 + pow(mParameters[2], 2) / pow(var_chaste_interface__membrane__Ca_i_peripheral, 2)); // current_units
        const double var_i_serca_bulk__i_serca_bulk = (pow((var_chaste_interface__membrane__Ca_i_bulk / var_i_serca_bulk__Kmf), var_i_serca_bulk__H) - pow((var_chaste_interface__membrane__Ca_sr / var_i_serca_bulk__Kmr), var_i_serca_bulk__H)) * mParameters[3] / (1.0 + pow((var_chaste_interface__membrane__Ca_i_bulk / var_i_serca_bulk__Kmf), var_i_serca_bulk__H) + pow((var_chaste_interface__membrane__Ca_sr / var_i_serca_bulk__Kmr), var_i_serca_bulk__H)); // current_units
        const double var_i_serca_per__i_serca_per = (pow((var_chaste_interface__membrane__Ca_i_peripheral / var_i_serca_per__Kmf), var_i_serca_per__H) - pow((var_chaste_interface__membrane__Ca_sr / var_i_serca_per__Kmr), var_i_serca_per__H)) * mParameters[3] / (1.0 + pow((var_chaste_interface__membrane__Ca_i_peripheral / var_i_serca_per__Kmf), var_i_serca_per__H) + pow((var_chaste_interface__membrane__Ca_sr / var_i_serca_per__Kmr), var_i_serca_per__H)); // current_units
        const double var_membrane__Cm_converted = 9.9999999999999995e-7 * mParameters[8]; // uF
        const double var_i_f_k__E_k = var_Environment__RToF * log(mParameters[5] / var_chaste_interface__membrane__K_i); // voltage_units
        const double var_i_k1__E_k = var_Environment__RToF * log(mParameters[5] / var_chaste_interface__membrane__K_i); // voltage_units
        const double var_i_kb__E_k = var_Environment__RToF * log(mParameters[5] / var_chaste_interface__membrane__K_i); // voltage_units
        const double var_i_kr__E_k = var_Environment__RToF * log(mParameters[5] / var_chaste_interface__membrane__K_i); // voltage_units
        const double var_i_ks__E_k = var_Environment__RToF * log(mParameters[5] / var_chaste_interface__membrane__K_i); // voltage_units
        const double var_i_to_fast__E_k = var_Environment__RToF * log(mParameters[5] / var_chaste_interface__membrane__K_i); // voltage_units
        const double var_i_to_sustained__E_k = var_Environment__RToF * log(mParameters[5] / var_chaste_interface__membrane__K_i); // voltage_units
        const double var_i_f_na__E_na = var_Environment__RToF * log(mParameters[6] / var_chaste_interface__membrane__Na_i); // voltage_units
        const double var_i_na_fast__E_na = var_Environment__RToF * log(mParameters[6] / var_chaste_interface__membrane__Na_i); // voltage_units
        const double var_i_na_late__E_na = var_Environment__RToF * log(mParameters[6] / var_chaste_interface__membrane__Na_i); // voltage_units
        const double var_i_nab__E_na = var_Environment__RToF * log(mParameters[6] / var_chaste_interface__membrane__Na_i); // voltage_units
        const double var_i_cab__i_cab = (-var_i_cab__E_ca + var_chaste_interface__membrane__Vm) * var_i_cab__G_max_cab; // current_units
        const double var_i_kb__i_kb = (-var_i_kb__E_k + var_chaste_interface__membrane__Vm) * var_i_kb__G_max_kb; // current_units
        const double var_i_nab__i_nab = (-var_i_nab__E_na + var_chaste_interface__membrane__Vm) * var_i_nab__G_max_nab; // current_units
        const double var_i_naca__i_naca = 512.00911320399996 * (pow(var_chaste_interface__membrane__Na_i, var_i_naca__n_NaCa) * mParameters[4] * exp((-2.0 + var_i_naca__n_NaCa) * var_i_naca__gamma * var_chaste_interface__membrane__Vm / var_Environment__RToF) - pow(mParameters[6], var_i_naca__n_NaCa) * var_chaste_interface__membrane__Ca_i_peripheral * exp((-1.0 + var_i_naca__gamma) * (-2.0 + var_i_naca__n_NaCa) * var_chaste_interface__membrane__Vm / var_Environment__RToF)) * mParameters[14] / ((1.0 + 144.92753623188406 * var_chaste_interface__membrane__Ca_i_peripheral) * (1.0 + (pow(mParameters[6], var_i_naca__n_NaCa) * var_chaste_interface__membrane__Ca_i_peripheral + pow(var_chaste_interface__membrane__Na_i, var_i_naca__n_NaCa) * mParameters[4]) * var_i_naca__d_NaCa)); // current_units
        const double var_membrane__bulk_fraction = 0.59999999999999998; // dimensionless
        const double var_membrane__cell_volume = 13266.5; // volume_units
        const double var_membrane__bulk_volume = var_membrane__bulk_fraction * var_membrane__cell_volume; // volume_units
        const double d_dt_chaste_interface_var_membrane__Ca_i_bulk = 500.0 * (-var_i_serca_bulk__i_serca_bulk + var_i_diff__i_diff + var_i_leak__i_leak) / (var_Environment__F * var_membrane__bulk_volume); // millimolar / time_units
        const double var_membrane__i_stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Time__time); // uA_per_cm2
        const double var_membrane__i_stim = 1000000.0 * var_membrane__Cm_converted * var_membrane__i_stim_converted / HeartConfig::Instance()->GetCapacitance(); // current_units
        const double var_membrane__periphery_fraction = 0.20000000000000001; // dimensionless
        const double var_membrane__diffusable_volume = (var_membrane__bulk_fraction + var_membrane__periphery_fraction) * var_membrane__cell_volume; // volume_units
        const double var_membrane__peripheral_volume = var_membrane__cell_volume * var_membrane__periphery_fraction; // volume_units
        const double var_membrane__sr_fraction = 0.059999999999999998; // dimensionless
        const double var_membrane__sr_volume = var_membrane__cell_volume * var_membrane__sr_fraction; // volume_units
        const double d_dt_chaste_interface_var_membrane__Ca_sr = 500.0 * (-var_i_leak__i_leak - var_i_rel_per__i_rel_per + var_i_serca_bulk__i_serca_bulk + var_i_serca_per__i_serca_per) / (var_Environment__F * var_membrane__sr_volume); // millimolar / time_units
        const double var_x_Ltype__tau_x_Ltype = 0.69999999999999996; // time_units
        const double var_x_Ltype__x_inf_Ltype = 1 / (1.0 + exp(-2.6545454545454543 - 0.18181818181818182 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_x_Ttype__tau_x_Ttype = 1.0; // time_units
        const double var_x_Ttype__x_inf_Ttype = _lt_0_row[8]; // dimensionless
        const double var_x_k1__x_k1 = 1 / (_lt_0_row[2]); // dimensionless
        const double var_i_k1__i_k1 = 0.25946870969507452 * pow(mParameters[5], 0.80000000000000004) * (-var_i_k1__E_k + var_chaste_interface__membrane__Vm) * mParameters[11] * var_x_k1__x_k1; // current_units
        const double var_x_kr__x_kr = 1 / (_lt_0_row[4]); // dimensionless
        const double var_x_ks__tau_x_ks = ((fabs(30.0 + var_chaste_interface__membrane__Vm) < 1.455604075689676e-6) ? (1 / (-1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) - 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8)) + 343500.00000040967 * (30.000001455604075 + var_chaste_interface__membrane__Vm) * (1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) + 1.0465793304208771e-10 / (1.0 - exp(-2.1542940320207204e-7)) + 1.9068413391534758e-10 / (-1.0 + exp(9.9999999999880736e-8)) + 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8))))) : (1 / (0.00013100000000000001 * (30.0 + var_chaste_interface__membrane__Vm) / (-1.0 + exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__membrane__Vm)) + 7.1899999999999999e-5 * (30.0 + var_chaste_interface__membrane__Vm) / (1.0 - exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__membrane__Vm))))); // time_units
        const double var_x_ks__x_inf_ks = _lt_0_row[10]; // dimensionless
        const double var_x_na_fast__tau_x_na_fast = 0.0050000000000000001; // time_units
        const double var_x_na_fast__x_inf_na_fast = 1 / (1.0 + exp(-5.0 - 0.20000000000000001 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_x_na_late__tau_x_na_late = 15.0; // time_units
        const double var_x_na_late__x_inf_na_late = 1 / (1.0 + exp(-6.0 - 0.20000000000000001 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_x_nak__x_nak = 1 / (_lt_0_row[6]); // dimensionless
        const double var_x_to_fast__tau_x_to_fast = 5.0; // time_units
        const double var_x_to_fast__x_inf_to_fast = 1 / (1.0 + exp(0.77777777777777779 - 0.1111111111111111 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_x_to_sustained__x_to_sustained = 1 / (_lt_0_row[3]); // dimensionless
        const double var_i_to_sustained__i_to_sustained = (-var_i_to_sustained__E_k + var_chaste_interface__membrane__Vm) * var_i_to_sustained__G_max_to_sustained * var_x_to_sustained__x_to_sustained; // current_units
        const double var_y_Ltype__tau_y_Ltype = 25.100000000000001 / (0.040000000000000001 + 0.69999999999999996 * exp(-0.16483600000000001 * pow((1 + 0.068965517241379309 * var_chaste_interface__membrane__Vm), 2))); // time_units
        const double var_y_Ltype__y_inf_Ltype = _lt_0_row[14]; // dimensionless
        const double var_y_Ttype__tau_y_Ttype = 1.4227099999999999 * _lt_0_row[17]; // time_units
        const double var_i_cat__i_cat = (-var_i_cat__E_Ca + var_chaste_interface__membrane__Vm) * var_i_cat__G_max_Ttype * var_chaste_interface__x_Ttype__x_Ttype * var_chaste_interface__y_Ttype__y_Ttype; // current_units
        const double var_y_Ttype__y_inf_Ttype = _lt_0_row[16]; // dimensionless
        const double var_y_ca_Ltype__tau_y_ca_Ltype = 2.0 + 80.0 / (1.0 + 99999999.999999985 * pow(var_chaste_interface__membrane__Ca_i_peripheral, 2)); // time_units
        const double var_i_cal__i_cal = (-var_i_cal__E_Ca + var_chaste_interface__membrane__Vm) * mParameters[7] * var_chaste_interface__x_Ltype__x_Ltype * var_chaste_interface__y_Ltype__y_Ltype * var_chaste_interface__y_ca_Ltype__y_ca_Ltype; // current_units
        const double d_dt_chaste_interface_var_membrane__Ca_i_peripheral = 500.0 * (var_i_rel_per__i_rel_per + 2.0 * var_i_naca__i_naca - var_i_cab__i_cab - var_i_cal__i_cal - var_i_cat__i_cat - var_i_diff__i_diff - var_i_pmca__i_pmca - var_i_serca_per__i_serca_per) / (var_Environment__F * var_membrane__peripheral_volume); // millimolar / time_units
        const double var_y_ca_Ltype__y_ca_inf_Ltype = 0.40000000000000002 + 0.59999999999999998 / (1.0 + 99999999.999999985 * pow(var_chaste_interface__membrane__Ca_i_peripheral, 2)); // dimensionless
        const double d_dt_chaste_interface_var_y_ca_Ltype__y_ca_Ltype = (-var_chaste_interface__y_ca_Ltype__y_ca_Ltype + var_y_ca_Ltype__y_ca_inf_Ltype) / var_y_ca_Ltype__tau_y_ca_Ltype; // 1 / time_units
        const double var_y_gate_f_k__tau_y_f_gate = 6000.0 / (exp(3.6000000000000001 + 0.11 * var_chaste_interface__membrane__Vm) + exp(-2.8999999999999999 - 0.040000000000000001 * var_chaste_interface__membrane__Vm)); // time_units
        const double var_i_f_k__i_f_k = (-var_i_f_k__E_k + var_chaste_interface__membrane__Vm) * var_i_f_k__G_f_k * var_chaste_interface__y_gate_f_k__y_gate_f_k; // current_units
        const double var_y_gate_f_k__y_inf_f_gate = _lt_0_row[18]; // dimensionless
        const double var_y_gate_f_na__tau_y_f_gate = 6000.0 / (exp(3.6000000000000001 + 0.11 * var_chaste_interface__membrane__Vm) + exp(-2.8999999999999999 - 0.040000000000000001 * var_chaste_interface__membrane__Vm)); // time_units
        const double var_i_f_na__i_f_na = (-var_i_f_na__E_na + var_chaste_interface__membrane__Vm) * var_i_f_na__G_f_na * var_chaste_interface__y_gate_f_na__y_gate_f_na; // current_units
        const double var_y_gate_f_na__y_inf_f_gate = _lt_0_row[18]; // dimensionless
        const double var_y_kr__y_inf_kr = _lt_0_row[20]; // dimensionless
        const double var_i_kr__i_kr = 0.18518518518518517 * (-var_i_kr__E_k + var_chaste_interface__membrane__Vm) * mParameters[5] * mParameters[12] * var_x_kr__x_kr * var_chaste_interface__y_kr__y_kr; // current_units
        const double var_y_kr__ykrv1 = ((fabs(7.0 + var_chaste_interface__membrane__Vm) < 8.1300813008222672e-7) ? (1.1219512195134727e-9 / (1.0 - exp(-1.0000000000011388e-7)) - 614999.99999929965 * (6.9999991869918698 + var_chaste_interface__membrane__Vm) * (-1.1219512195134727e-9 / (1.0 - exp(1.0000000000011388e-7)) - 1.1219512195134727e-9 / (1.0 - exp(-1.0000000000011388e-7)))) : (0.0013799999999999999 * (7.0 + var_chaste_interface__membrane__Vm) / (1.0 - exp(-0.86099999999999999 - 0.123 * var_chaste_interface__membrane__Vm)))); // rate_constants_units
        const double var_y_kr__ykrv2 = ((fabs(10.0 + var_chaste_interface__membrane__Vm) < 6.8965517241448282e-7) ? (-4.2068965517283451e-11 / (-1.0 + exp(-1.000000000001e-7)) + 724999.99999927497 * (10.000000689655172 + var_chaste_interface__membrane__Vm) * (4.2068965517283451e-11 / (-1.0 + exp(1.000000000001e-7)) + 4.2068965517283451e-11 / (-1.0 + exp(-1.000000000001e-7)))) : (6.0999999999999999e-5 * (10.0 + var_chaste_interface__membrane__Vm) / (-1.0 + exp(1.45 + 0.14499999999999999 * var_chaste_interface__membrane__Vm)))); // rate_constants_units
        const double var_y_kr__tau_y_kr = 1 / (var_y_kr__ykrv1 + var_y_kr__ykrv2); // time_units
        const double var_y_ks__tau_y_ks = 4.0 * var_x_ks__tau_x_ks; // time_units
        const double var_y_ks__y_inf_ks = var_x_ks__x_inf_ks; // dimensionless
        const double var_i_ks__i_ks = (-var_i_ks__E_k + var_chaste_interface__membrane__Vm) * mParameters[13] * var_chaste_interface__x_ks__x_ks * var_chaste_interface__y_ks__y_ks; // current_units
        const double var_y_na_fast__tau_y_na_fast = 2.0; // time_units
        const double var_y_na_fast__y_inf_na_fast = 1 / (1.0 + exp(17.424242424242426 + 0.25252525252525254 * var_chaste_interface__membrane__Vm - 0.25252525252525254 * mParameters[10])); // dimensionless
        const double var_i_na_fast__i_na_fast = (-var_i_na_fast__E_na + var_chaste_interface__membrane__Vm) * mParameters[9] * var_chaste_interface__x_na_fast__x_na_fast * var_chaste_interface__y_na_fast__y_na_fast; // current_units
        const double var_y_na_late__tau_y_na_late = _lt_0_row[23]; // time_units
        const double var_y_na_late__y_inf_na_late = 0.10000000000000001 + _lt_0_row[22]; // dimensionless
        const double var_i_na_late__i_na_late = (-var_i_na_late__E_na + var_chaste_interface__membrane__Vm) * var_i_na_late__G_max_na_late * var_chaste_interface__x_na_late__x_na_late * var_chaste_interface__y_na_late__y_na_late; // current_units
        const double var_y_nak__y_nak = 1 / (_lt_0_row[5]); // dimensionless
        const double var_i_nak__i_nak = var_i_nak__g_nak * var_x_nak__x_nak * var_y_nak__y_nak / ((1.0 + 31.98 / var_chaste_interface__membrane__Na_i) * (1.0 + 2.536253862184366 * pow((1 / mParameters[5]), 1.45))); // current_units
        const double d_dt_chaste_interface_var_membrane__Na_i = 1000.0 * (-var_i_f_na__i_f_na - var_i_na_fast__i_na_fast - var_i_na_late__i_na_late - var_i_nab__i_nab - 3.0 * var_i_naca__i_naca - 3.0 * var_i_nak__i_nak) / (var_Environment__F * var_membrane__diffusable_volume); // millimolar / time_units
        const double var_y_to_fast__tau_y_to_fast = 350.0; // time_units
        const double var_y_to_fast__y_inf_to_fast = 1 / (1.0 + exp(3.4375 + 0.125 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_i_to_fast__i_to_fast = (-var_i_to_fast__E_k + var_chaste_interface__membrane__Vm) * mParameters[15] * var_chaste_interface__x_to_fast__x_to_fast * var_chaste_interface__y_to_fast__y_to_fast; // current_units
        const double d_dt_chaste_interface_var_membrane__K_i = 1000.0 * (2.0 * var_i_nak__i_nak - var_i_f_k__i_f_k - var_i_k1__i_k1 - var_i_kb__i_kb - var_i_kr__i_kr - var_i_ks__i_ks - var_i_to_fast__i_to_fast - var_i_to_sustained__i_to_sustained - var_membrane__i_stim) / (var_Environment__F * var_membrane__diffusable_volume); // millimolar / time_units

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__Vm = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_membrane__Vm = -(var_i_cab__i_cab + var_i_cal__i_cal + var_i_cat__i_cat + var_i_f_k__i_f_k + var_i_f_na__i_f_na + var_i_k1__i_k1 + var_i_kb__i_kb + var_i_kr__i_kr + var_i_ks__i_ks + var_i_na_fast__i_na_fast + var_i_na_late__i_na_late + var_i_nab__i_nab + var_i_naca__i_naca + var_i_nak__i_nak + var_i_pmca__i_pmca + var_i_to_fast__i_to_fast + var_i_to_sustained__i_to_sustained + var_membrane__i_stim) / mParameters[8]; // voltage_units / time_units
        }
        
        rDY[0] = d_dt_chaste_interface_var_membrane__Vm;
        rDY[1] = d_dt_chaste_interface_var_membrane__Ca_i_bulk;
        rDY[2] = d_dt_chaste_interface_var_membrane__Ca_i_peripheral;
        rDY[3] = d_dt_chaste_interface_var_membrane__Ca_sr;
        rDY[4] = d_dt_chaste_interface_var_membrane__Na_i;
        rDY[5] = d_dt_chaste_interface_var_membrane__K_i;
        rAlphaOrTau[6] = var_x_Ttype__tau_x_Ttype;
        rBetaOrInf[6] = var_x_Ttype__x_inf_Ttype;
        rAlphaOrTau[7] = var_y_Ttype__tau_y_Ttype;
        rBetaOrInf[7] = var_y_Ttype__y_inf_Ttype;
        rAlphaOrTau[8] = var_x_Ltype__tau_x_Ltype;
        rBetaOrInf[8] = var_x_Ltype__x_inf_Ltype;
        rAlphaOrTau[9] = var_y_Ltype__tau_y_Ltype;
        rBetaOrInf[9] = var_y_Ltype__y_inf_Ltype;
        rDY[10] = d_dt_chaste_interface_var_y_ca_Ltype__y_ca_Ltype;
        rAlphaOrTau[11] = var_x_to_fast__tau_x_to_fast;
        rBetaOrInf[11] = var_x_to_fast__x_inf_to_fast;
        rAlphaOrTau[12] = var_y_to_fast__tau_y_to_fast;
        rBetaOrInf[12] = var_y_to_fast__y_inf_to_fast;
        rAlphaOrTau[13] = var_x_na_fast__tau_x_na_fast;
        rBetaOrInf[13] = var_x_na_fast__x_inf_na_fast;
        rAlphaOrTau[14] = var_y_na_fast__tau_y_na_fast;
        rBetaOrInf[14] = var_y_na_fast__y_inf_na_fast;
        rAlphaOrTau[15] = var_x_na_late__tau_x_na_late;
        rBetaOrInf[15] = var_x_na_late__x_inf_na_late;
        rAlphaOrTau[16] = var_y_na_late__tau_y_na_late;
        rBetaOrInf[16] = var_y_na_late__y_inf_na_late;
        rAlphaOrTau[17] = var_y_kr__tau_y_kr;
        rBetaOrInf[17] = var_y_kr__y_inf_kr;
        rAlphaOrTau[18] = var_x_ks__tau_x_ks;
        rBetaOrInf[18] = var_x_ks__x_inf_ks;
        rAlphaOrTau[19] = var_y_ks__tau_y_ks;
        rBetaOrInf[19] = var_y_ks__y_inf_ks;
        rAlphaOrTau[20] = var_y_gate_f_k__tau_y_f_gate;
        rBetaOrInf[20] = var_y_gate_f_k__y_inf_f_gate;
        rAlphaOrTau[21] = var_y_gate_f_na__tau_y_f_gate;
        rBetaOrInf[21] = var_y_gate_f_na__y_inf_f_gate;
    }
    void Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt::ComputeOneStepExceptVoltage(const std::vector<double> &rDY, const std::vector<double> &rAlphaOrTau, const std::vector<double> &rBetaOrInf)
    {

        std::vector<double>& rY = rGetStateVariables();
        
        rY[1] += mDt * rDY[1];
        rY[2] += mDt * rDY[2];
        rY[3] += mDt * rDY[3];
        rY[4] += mDt * rDY[4];
        rY[5] += mDt * rDY[5];
        rY[6] = rBetaOrInf[6] + (rY[6] - rBetaOrInf[6])*exp(-mDt/rAlphaOrTau[6]);
        rY[7] = rBetaOrInf[7] + (rY[7] - rBetaOrInf[7])*exp(-mDt/rAlphaOrTau[7]);
        rY[8] = rBetaOrInf[8] + (rY[8] - rBetaOrInf[8])*exp(-mDt/rAlphaOrTau[8]);
        rY[9] = rBetaOrInf[9] + (rY[9] - rBetaOrInf[9])*exp(-mDt/rAlphaOrTau[9]);
        rY[10] += mDt * rDY[10];
        rY[11] = rBetaOrInf[11] + (rY[11] - rBetaOrInf[11])*exp(-mDt/rAlphaOrTau[11]);
        rY[12] = rBetaOrInf[12] + (rY[12] - rBetaOrInf[12])*exp(-mDt/rAlphaOrTau[12]);
        rY[13] = rBetaOrInf[13] + (rY[13] - rBetaOrInf[13])*exp(-mDt/rAlphaOrTau[13]);
        rY[14] = rBetaOrInf[14] + (rY[14] - rBetaOrInf[14])*exp(-mDt/rAlphaOrTau[14]);
        rY[15] = rBetaOrInf[15] + (rY[15] - rBetaOrInf[15])*exp(-mDt/rAlphaOrTau[15]);
        rY[16] = rBetaOrInf[16] + (rY[16] - rBetaOrInf[16])*exp(-mDt/rAlphaOrTau[16]);
        rY[17] = rBetaOrInf[17] + (rY[17] - rBetaOrInf[17])*exp(-mDt/rAlphaOrTau[17]);
        rY[18] = rBetaOrInf[18] + (rY[18] - rBetaOrInf[18])*exp(-mDt/rAlphaOrTau[18]);
        rY[19] = rBetaOrInf[19] + (rY[19] - rBetaOrInf[19])*exp(-mDt/rAlphaOrTau[19]);
        rY[20] = rBetaOrInf[20] + (rY[20] - rBetaOrInf[20])*exp(-mDt/rAlphaOrTau[20]);
        rY[21] = rBetaOrInf[21] + (rY[21] - rBetaOrInf[21])*exp(-mDt/rAlphaOrTau[21]);
    }

    std::vector<double> Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt::ComputeDerivedQuantities(double var_chaste_interface__Time__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: voltage_units; Initial value: -88.744
        double var_chaste_interface__membrane__Ca_i_peripheral = rY[2];
        // Units: millimolar; Initial value: 8.37523918148654e-06
        double var_chaste_interface__membrane__Ca_sr = rY[3];
        // Units: millimolar; Initial value: 0.1607
        double var_chaste_interface__membrane__Na_i = rY[4];
        // Units: millimolar; Initial value: 6.75814832463522
        double var_chaste_interface__membrane__K_i = rY[5];
        // Units: millimolar; Initial value: 139.943221899032
        double var_chaste_interface__x_Ltype__x_Ltype = rY[8];
        // Units: dimensionless; Initial value: 1.39762741967807e-06
        double var_chaste_interface__y_Ltype__y_Ltype = rY[9];
        // Units: dimensionless; Initial value: 0.762933565557978
        double var_chaste_interface__y_ca_Ltype__y_ca_Ltype = rY[10];
        // Units: dimensionless; Initial value: 0.990616705407034
        double var_chaste_interface__x_to_fast__x_to_fast = rY[11];
        // Units: dimensionless; Initial value: 2.39836311045441e-05
        double var_chaste_interface__y_to_fast__y_to_fast = rY[12];
        // Units: dimensionless; Initial value: 0.865769351306921
        double var_chaste_interface__x_na_fast__x_na_fast = rY[13];
        // Units: dimensionless; Initial value: 2.90568689212866e-06
        double var_chaste_interface__y_na_fast__y_na_fast = rY[14];
        // Units: dimensionless; Initial value: 0.993212025695132
        double var_chaste_interface__y_kr__y_kr = rY[17];
        // Units: dimensionless; Initial value: 0.202112622607795
        double var_chaste_interface__x_ks__x_ks = rY[18];
        // Units: dimensionless; Initial value: 0.0147603344538846
        double var_chaste_interface__y_ks__y_ks = rY[19];
        // Units: dimensionless; Initial value: 0.0385082219915004
        
        // Lookup table indexing
        const bool _oob_0 = Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__Vm);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Time__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__Vm);

        // Mathematics
        const double var_Environment__F = 96485.341499999995; // F_units
        const double var_Environment__R = 8314.4719999999998; // R_units
        const double var_Environment__T = 310.0; // Temperature_units
        const double var_Environment__RToF = var_Environment__R * var_Environment__T / var_Environment__F; // voltage_units
        const double var_i_naca__d_NaCa = 0.001; // dimensionless
        const double var_i_naca__gamma = 0.5; // dimensionless
        const double var_i_naca__n_NaCa = 3.0; // dimensionless
        const double var_i_cal__E_Ca = 0.5 * var_Environment__RToF * log(mParameters[4] / var_chaste_interface__membrane__Ca_i_peripheral); // voltage_units
        const double var_i_rel_per__i_rel_per = mParameters[1] * var_chaste_interface__membrane__Ca_sr / (1.0 + pow(mParameters[2], 2) / pow(var_chaste_interface__membrane__Ca_i_peripheral, 2)); // current_units
        const double var_membrane__Cm_converted = 9.9999999999999995e-7 * mParameters[8]; // uF
        const double var_i_k1__E_k = var_Environment__RToF * log(mParameters[5] / var_chaste_interface__membrane__K_i); // voltage_units
        const double var_i_kr__E_k = var_Environment__RToF * log(mParameters[5] / var_chaste_interface__membrane__K_i); // voltage_units
        const double var_i_ks__E_k = var_Environment__RToF * log(mParameters[5] / var_chaste_interface__membrane__K_i); // voltage_units
        const double var_i_to_fast__E_k = var_Environment__RToF * log(mParameters[5] / var_chaste_interface__membrane__K_i); // voltage_units
        const double var_i_na_fast__E_na = var_Environment__RToF * log(mParameters[6] / var_chaste_interface__membrane__Na_i); // voltage_units
        const double var_i_naca__i_naca = 512.00911320399996 * (pow(var_chaste_interface__membrane__Na_i, var_i_naca__n_NaCa) * mParameters[4] * exp((-2.0 + var_i_naca__n_NaCa) * var_i_naca__gamma * var_chaste_interface__membrane__Vm / var_Environment__RToF) - pow(mParameters[6], var_i_naca__n_NaCa) * var_chaste_interface__membrane__Ca_i_peripheral * exp((-1.0 + var_i_naca__gamma) * (-2.0 + var_i_naca__n_NaCa) * var_chaste_interface__membrane__Vm / var_Environment__RToF)) * mParameters[14] / ((1.0 + 144.92753623188406 * var_chaste_interface__membrane__Ca_i_peripheral) * (1.0 + (pow(mParameters[6], var_i_naca__n_NaCa) * var_chaste_interface__membrane__Ca_i_peripheral + pow(var_chaste_interface__membrane__Na_i, var_i_naca__n_NaCa) * mParameters[4]) * var_i_naca__d_NaCa)); // current_units
        const double var_i_naca__i_naca_converted = 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_naca__i_naca / var_membrane__Cm_converted; // uA_per_cm2
        const double var_membrane__i_stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Time__time); // uA_per_cm2
        const double var_x_k1__x_k1 = 1 / (_lt_0_row[2]); // dimensionless
        const double var_i_k1__i_k1 = 0.25946870969507452 * pow(mParameters[5], 0.80000000000000004) * (-var_i_k1__E_k + var_chaste_interface__membrane__Vm) * mParameters[11] * var_x_k1__x_k1; // current_units
        const double var_i_k1__i_k1_converted = 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_k1__i_k1 / var_membrane__Cm_converted; // uA_per_cm2
        const double var_x_kr__x_kr = 1 / (_lt_0_row[4]); // dimensionless
        const double var_i_cal__i_cal = (-var_i_cal__E_Ca + var_chaste_interface__membrane__Vm) * mParameters[7] * var_chaste_interface__x_Ltype__x_Ltype * var_chaste_interface__y_Ltype__y_Ltype * var_chaste_interface__y_ca_Ltype__y_ca_Ltype; // current_units
        const double var_i_cal__i_cal_converted = 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_cal__i_cal / var_membrane__Cm_converted; // uA_per_cm2
        const double var_i_kr__i_kr = 0.18518518518518517 * (-var_i_kr__E_k + var_chaste_interface__membrane__Vm) * mParameters[5] * mParameters[12] * var_x_kr__x_kr * var_chaste_interface__y_kr__y_kr; // current_units
        const double var_i_kr__i_kr_converted = 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_kr__i_kr / var_membrane__Cm_converted; // uA_per_cm2
        const double var_i_ks__i_ks = (-var_i_ks__E_k + var_chaste_interface__membrane__Vm) * mParameters[13] * var_chaste_interface__x_ks__x_ks * var_chaste_interface__y_ks__y_ks; // current_units
        const double var_i_ks__i_ks_converted = 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_ks__i_ks / var_membrane__Cm_converted; // uA_per_cm2
        const double var_i_na_fast__i_na_fast = (-var_i_na_fast__E_na + var_chaste_interface__membrane__Vm) * mParameters[9] * var_chaste_interface__x_na_fast__x_na_fast * var_chaste_interface__y_na_fast__y_na_fast; // current_units
        const double var_i_na_fast__i_na_fast_converted = 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_na_fast__i_na_fast / var_membrane__Cm_converted; // uA_per_cm2
        const double var_i_to_fast__i_to_fast = (-var_i_to_fast__E_k + var_chaste_interface__membrane__Vm) * mParameters[15] * var_chaste_interface__x_to_fast__x_to_fast * var_chaste_interface__y_to_fast__y_to_fast; // current_units
        const double var_i_to_fast__i_to_fast_converted = 9.9999999999999995e-7 * HeartConfig::Instance()->GetCapacitance() * var_i_to_fast__i_to_fast / var_membrane__Cm_converted; // uA_per_cm2

        std::vector<double> dqs(11);
        dqs[0] = var_i_rel_per__i_rel_per;
        dqs[1] = var_i_cal__i_cal_converted;
        dqs[2] = var_membrane__Cm_converted;
        dqs[3] = var_i_na_fast__i_na_fast_converted;
        dqs[4] = var_i_k1__i_k1_converted;
        dqs[5] = var_i_kr__i_kr_converted;
        dqs[6] = var_i_ks__i_ks_converted;
        dqs[7] = var_i_naca__i_naca_converted;
        dqs[8] = var_membrane__i_stim_converted;
        dqs[9] = var_i_to_fast__i_to_fast_converted;
        dqs[10] = var_chaste_interface__Time__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt>::Initialise(void)
{
    this->mSystemName = "Corrias_rabbit_purkinje_model";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "time_units";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("voltage_units");
    this->mInitialConditions.push_back(-88.744);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(3.09001620863236e-05);

    // rY[2]:
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.37523918148654e-06);

    // rY[3]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.1607);

    // rY[4]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(6.75814832463522);

    // rY[5]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(139.943221899032);

    // rY[6]:
    this->mVariableNames.push_back("x_Ttype__x_Ttype");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00058439023999374);

    // rY[7]:
    this->mVariableNames.push_back("y_Ttype__y_Ttype");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.900843399895183);

    // rY[8]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.39762741967807e-06);

    // rY[9]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.762933565557978);

    // rY[10]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.990616705407034);

    // rY[11]:
    this->mVariableNames.push_back("x_to_fast__x_to_fast");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.39836311045441e-05);

    // rY[12]:
    this->mVariableNames.push_back("y_to_fast__y_to_fast");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.865769351306921);

    // rY[13]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.90568689212866e-06);

    // rY[14]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993212025695132);

    // rY[15]:
    this->mVariableNames.push_back("x_na_late__x_na_late");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(7.9043398966996e-06);

    // rY[16]:
    this->mVariableNames.push_back("y_na_late__y_na_late");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.839555875175682);

    // rY[17]:
    this->mVariableNames.push_back("y_kr__y_kr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.202112622607795);

    // rY[18]:
    this->mVariableNames.push_back("x_ks__x_ks");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0147603344538846);

    // rY[19]:
    this->mVariableNames.push_back("y_ks__y_ks");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0385082219915004);

    // rY[20]:
    this->mVariableNames.push_back("y_gate_f_k__y_gate_f_k");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.011099);

    // rY[21]:
    this->mVariableNames.push_back("y_gate_f_na__y_gate_f_na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.011099);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("current_per_millimolar_units");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("current_per_millimolar_units");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_release_kmcads");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[3]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("current_units");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("conductance_units");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane__Cm");
    this->mParameterUnits.push_back("capacitance_units");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("conductance_units");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("voltage_units");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("conductance_units");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("conductance_units");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("conductance_units");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("current_units");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("conductance_units");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("current_units");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_capacitance");
    this->mDerivedQuantityUnits.push_back("uF");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("time_units");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellcorrias_purkinje_2011FromCellMLRushLarsenOpt)

