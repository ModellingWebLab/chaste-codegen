#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: aslanidi_2009
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvodeOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "aslanidi_Purkinje_model_2009.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<35; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables(const Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables&);
    Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables& operator= (const Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables&);
    Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 35;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][35];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return -100.0 * exp(0.037435883507802616 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[0] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] >= 2){
                    EXCEPTION("Lookup table 0 at ["<<i<<"][0] has non-finite value: " << val);
                }
                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 - exp(0.037435883507802616 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[1] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] >= 2){
                    EXCEPTION("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val);
                }
                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-0.024333324280071702 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(0.013102559227730915 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + 0.27000000000000002 * exp(-0.024333324280071702 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-0.037435883507802616 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.1245 * exp(-0.003743588350780262 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + exp(-0.26470588235294124 + 0.049019607843137261 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-1.1230765052340785 + 0.074871767015605231 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[9] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[9] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[9] >= 2){
                    EXCEPTION("Lookup table 9 at ["<<i<<"][9] has non-finite value: " << val);
                }
                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return -1.0 + exp(-1.1230765052340785 + 0.074871767015605231 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[10] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[10] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[10] >= 2){
                    EXCEPTION("Lookup table 10 at ["<<i<<"][10] has non-finite value: " << val);
                }
                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(0.074871767015605231 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[11] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[11] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[11] >= 2){
                    EXCEPTION("Lookup table 11 at ["<<i<<"][11] has non-finite value: " << val);
                }
                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return -1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[12] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[12] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[12] >= 2){
                    EXCEPTION("Lookup table 12 at ["<<i<<"][12] has non-finite value: " << val);
                }
                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(0.59347181008902072 - 0.14836795252225518 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.58999999999999997 + 0.80000000000000004 * exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__V) / (1.0 + exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(1.8 + 0.10000000000000001 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(-5.4098360655737707 - 0.16393442622950821 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0680000000000001 * exp(0.54333333333333333 + 0.033333333333333333 * var_chaste_interface__membrane__V) + 1.0680000000000001 * exp(-0.54333333333333333 - 0.033333333333333333 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(9.0909090909090917 + 0.15151515151515152 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.014999999999999999 * exp(4.6558441558441563 + 0.064935064935064929 * var_chaste_interface__membrane__V) + 0.014999999999999999 * exp(-0.86074429771908767 - 0.012004801920768308 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(-0.0069387755102040824 - 0.081632653061224483 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 100.0 + 900.0 / (1.0 + exp(0.20000000000000001 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(0.65693430656934315 - 0.072992700729927015 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((fabs(-0.55000000000000004 + var_chaste_interface__membrane__V) < 7.8125000002593481e-7) ? (2.8125000000933653e-10 / (-1.0 + exp(1.0000000000331966e-7)) + 7.6100000000000007e-5 * (44.600000000000001 + var_chaste_interface__membrane__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__membrane__V)) - 639999.9999787542 * (-0.55000078125000007 + var_chaste_interface__membrane__V) * (-2.8125000000933653e-10 / (-1.0 + exp(1.0000000000331966e-7)) - 2.8125000000933653e-10 / (-1.0 + exp(-1.0000000000331966e-7)))) : ((fabs(44.600000000000001 + var_chaste_interface__membrane__V) < 1.0030088759549471e-8) ? (-7.6329002496322579e-13 / (1.0 - exp(1.0000002035326362e-7)) + 0.00036000000000000002 * (-0.55000000000000004 + var_chaste_interface__membrane__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__membrane__V)) + 49850007.511046082 * (44.600000010030094 + var_chaste_interface__membrane__V) * (7.6329002496322579e-13 / (1.0 - exp(1.0000002035326362e-7)) + 7.6328948424020387e-13 / (1.0 - exp(-9.9999949512152856e-8)))) : (7.6100000000000007e-5 * (44.600000000000001 + var_chaste_interface__membrane__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__membrane__V)) + 0.00036000000000000002 * (-0.55000000000000004 + var_chaste_interface__membrane__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__membrane__V)))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[23] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[23] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[23] >= 2){
                    EXCEPTION("Lookup table 23 at ["<<i<<"][23] has non-finite value: " << val);
                }
                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((fabs(-0.55000000000000004 + var_chaste_interface__membrane__V) < 7.8125000002593481e-7) ? (1.4062500000466826e-10 / (-1.0 + exp(1.0000000000331966e-7)) + 3.8050000000000003e-5 * (44.600000000000001 + var_chaste_interface__membrane__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__membrane__V)) - 319999.9999893771 * (-0.55000078125000007 + var_chaste_interface__membrane__V) * (-2.8125000000933653e-10 / (-1.0 + exp(1.0000000000331966e-7)) - 2.8125000000933653e-10 / (-1.0 + exp(-1.0000000000331966e-7)))) : ((fabs(44.600000000000001 + var_chaste_interface__membrane__V) < 1.0030088759549471e-8) ? (-3.8164501248161289e-13 / (1.0 - exp(1.0000002035326362e-7)) + 0.00018000000000000001 * (-0.55000000000000004 + var_chaste_interface__membrane__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__membrane__V)) + 24925003.755523041 * (44.600000010030094 + var_chaste_interface__membrane__V) * (7.6329002496322579e-13 / (1.0 - exp(1.0000002035326362e-7)) + 7.6328948424020387e-13 / (1.0 - exp(-9.9999949512152856e-8)))) : (3.8050000000000003e-5 * (44.600000000000001 + var_chaste_interface__membrane__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__membrane__V)) + 0.00018000000000000001 * (-0.55000000000000004 + var_chaste_interface__membrane__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__membrane__V)))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[24] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[24] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[24] >= 2){
                    EXCEPTION("Lookup table 24 at ["<<i<<"][24] has non-finite value: " << val);
                }
                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(11.311475409836067 + 0.16393442622950821 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 175.0 + 125.0 / (1.0 + exp(-4.166666666666667 - 0.16666666666666666 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][26] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((fabs(47.130000000000003 + var_chaste_interface__membrane__V) < 1.0000000010279564e-6) ? (-3.2000000146581445e-7 / (1.0 - exp(1.0000000045806701e-7)) + 499999.99948602181 * (47.130001000000007 + var_chaste_interface__membrane__V) * (3.2000000146581445e-7 / (1.0 - exp(1.0000000045806701e-7)) + 3.1999999919207769e-7 / (1.0 - exp(-9.9999999747524276e-8)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[27] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[27] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[27] >= 2){
                    EXCEPTION("Lookup table 27 at ["<<i<<"][27] has non-finite value: " << val);
                }
                _lookup_table_0[i][27] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][28] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 25.0 * exp(-3.7999999999999998 + 0.050000000000000003 * var_chaste_interface__membrane__V) / (1.0 + exp(-3.7999999999999998 + 0.050000000000000003 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][29] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 25.0 * exp(-2.7000000000000002 - 0.050000000000000003 * var_chaste_interface__membrane__V) / (1.0 + exp(-2.7000000000000002 - 0.050000000000000003 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][30] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.0044200000000000003 / ((1.0 + exp(1.7333333333333334 + 0.066666666666666666 * var_chaste_interface__membrane__V)) * (0.0044200000000000003 / (1.0 + exp(1.7333333333333334 + 0.066666666666666666 * var_chaste_interface__membrane__V)) + 0.050000000000000003 * exp(-0.66666666666666663 + 0.066666666666666666 * var_chaste_interface__membrane__V) / (1.0 + exp(-0.66666666666666663 + 0.066666666666666666 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][31] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 21.5 + 30.0 / (1.0 + exp(-2.5 + 0.10000000000000001 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][32] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.029999999999999999 / ((1.0 + exp(1.6666666666666667 + 0.066666666666666666 * var_chaste_interface__membrane__V)) * (0.029999999999999999 / (1.0 + exp(1.6666666666666667 + 0.066666666666666666 * var_chaste_interface__membrane__V)) + 0.10000000000000001 * exp(-2.6666666666666665 + 0.066666666666666666 * var_chaste_interface__membrane__V) / (1.0 + exp(-2.6666666666666665 + 0.066666666666666666 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][33] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 6.0 + 5.0 / (1.0 + exp(-1.6499999999999999 + 0.10000000000000001 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][34] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[35];

    // Lookup tables
    double (*_lookup_table_0)[35];
    int _lookup_table_0_num_misshit_piecewise[35] = {0};

};

std::shared_ptr<Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables> Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables::mpInstance;


    boost::shared_ptr<RegularStimulus> Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_amplitude_converted = -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__stim_duration = 1.0; // millisecond
        const double var_chaste_interface__membrane__stim_period = 800.0; // millisecond
        const double var_chaste_interface__membrane__stim_start = 100.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude_converted),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt::Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                30,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 0.0043750000000000004; // (var_q_leak__q_leak_max) [millimolar_per_millisecond]
        NV_Ith_S(this->mParameters, 1) = 3000.0; // (var_q_rel__g_rel_max) [per_millisecond]
        NV_Ith_S(this->mParameters, 2) = 0.0043750000000000004; // (var_q_up__q_up_max) [millimolar_per_millisecond]
        NV_Ith_S(this->mParameters, 3) = 1.0; // (var_intracellular_ion_concentrations__conc_clamp) [dimensionless]
        NV_Ith_S(this->mParameters, 4) = 1.8; // (var_model_parameters__Ca_o) [millimolar]
        NV_Ith_S(this->mParameters, 5) = 5.4000000000000004; // (var_model_parameters__K_o) [millimolar]
        NV_Ith_S(this->mParameters, 6) = 140.0; // (var_model_parameters__Na_o) [millimolar]
        NV_Ith_S(this->mParameters, 7) = 0.3392328; // (var_i_Ca_L__g_Ca_L) [dimensionless]
        NV_Ith_S(this->mParameters, 8) = 8.0; // (var_i_Na__g_Na) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 9) = 0; // (var_i_Na__perc_reduced_inact_for_IpNa) [dimensionless]
        NV_Ith_S(this->mParameters, 10) = 0; // (var_i_Na__shift_INa_inact) [millivolt]
        NV_Ith_S(this->mParameters, 11) = 0.25; // (var_i_K1__g_K1_max) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 12) = 0.040008488000000002; // (var_i_Kr__g_Kr_max) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 13) = 0.052581329000000003; // (var_i_Ks__g_Ks_max) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 14) = 4.5; // (var_i_NaCa__i_NaCa_max) [microA_per_microF]
        NV_Ith_S(this->mParameters, 15) = 0.14135944; // (var_i_to_1__g_to_1) [milliS_per_microF]
    }

    Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt::~Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt()
    {
    }

    AbstractLookupTableCollection* Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt::GetLookupTableCollection()
    {
        return Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables::Instance();
    }
    
    double Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -83.43812846286808
        double var_chaste_interface__Ca_i__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.00022355433459434943
        double var_chaste_interface__i_Na_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.9786390933308567
        double var_chaste_interface__i_Na_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.09866447258167589
        double var_chaste_interface__i_Na_L_m_L_gate__m_L = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_L_h_L_gate__h_L = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.8946968372659203
        double var_chaste_interface__i_Ca_L_d_gate__d = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 2.322223865147363e-06
        double var_chaste_interface__i_Ca_L_f_gate__f = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.9985607329462358
        double var_chaste_interface__i_Ca_L_f2_gate__f2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.8173435436674658
        double var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9610551285529658
        double var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.868690796671854
        double var_chaste_interface__i_Ca_T_b_gate__b = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.0002563937630984438
        double var_chaste_interface__i_Ca_T_g_gate__g = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.9720432601848331
        double var_chaste_interface__i_to_1_a_gate__a = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.0004238729429342389
        double var_chaste_interface__i_to_1_i_gate__i = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.9990935802459496
        double var_chaste_interface__i_to_1_i2_gate__i2 = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.9777368439681764
        double var_chaste_interface__i_Kr_xr_gate__xr = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.07084939408222911
        double var_chaste_interface__i_Ks_xs1_gate__xs1 = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.0011737654433043125
        double var_chaste_interface__i_Ks_xs2_gate__xs2 = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.001179442867470093
        double var_chaste_interface__i_to_2_a_gate__a = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.0014909437525000811
        double var_chaste_interface__intracellular_ion_concentrations__Na_i = NV_Ith_S(rY, 21);
        // Units: millimolar; Initial value: 9.927155552932733
        double var_chaste_interface__intracellular_ion_concentrations__Cl_i = NV_Ith_S(rY, 22);
        // Units: millimolar; Initial value: 18.904682470140408
        double var_chaste_interface__intracellular_ion_concentrations__K_i = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 141.9670801746057
        double var_chaste_interface__Ca_r__Ca_r = NV_Ith_S(rY, 27);
        // Units: millimolar; Initial value: 0.00022418117117903934
        
        // Lookup table indexing
        const bool _oob_0 = Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        const double var_equilibrium_potentials__E_K = 26.712338705498265 * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__intracellular_ion_concentrations__K_i); // millivolt
        const double var_equilibrium_potentials__E_Na = 26.712338705498265 * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__intracellular_ion_concentrations__Na_i); // millivolt
        const double var_membrane__i_tot = 0.0077250000000000001 * var_chaste_interface__membrane__V + 0.0060102762087371094 * log(100.0 / var_chaste_interface__intracellular_ion_concentrations__Cl_i) - 0.0025000000000000001 * var_equilibrium_potentials__E_Na - 0.0050000000000000001 * var_equilibrium_potentials__E_K + (0.0040000000000000001 + 0.4389381125701739 * sqrt(NV_Ith_S(mParameters, 5)) * NV_Ith_S(mParameters, 11) / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_equilibrium_potentials__E_K)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_equilibrium_potentials__E_K)) + (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 0.080320000000000003 * var_equilibrium_potentials__E_K) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 0.061749999999999999 * var_equilibrium_potentials__E_K)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_equilibrium_potentials__E_K - 0.51429999999999998 * var_chaste_interface__membrane__V))))) * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) + 20.0 * ((fabs(var_chaste_interface__membrane__V) < 2.6712338705498262e-6) ? (3.8593999999999993e-9 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__intracellular_ion_concentrations__Cl_i) / (1.0 - exp(9.9999999999999995e-8)) - 187179.41753901311 * (-2.6712338705498262e-6 + var_chaste_interface__membrane__V) * (-3.8593999999999993e-9 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__intracellular_ion_concentrations__Cl_i) / (1.0 - exp(9.9999999999999995e-8)) - 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__intracellular_ion_concentrations__Cl_i) / (1.0 - exp(-9.9999999999999995e-8)))) : (0.0014448004881001341 * (_lt_0_row[0] + var_chaste_interface__intracellular_ion_concentrations__Cl_i) * var_chaste_interface__membrane__V / (_lt_0_row[1]))) * var_chaste_interface__i_to_2_a_gate__a + 0.0027599999999999999 * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) / (_lt_0_row[2]) + 0.057500000000000002 * var_chaste_interface__Ca_i__Ca_i / (0.00050000000000000001 + var_chaste_interface__Ca_i__Ca_i) + 0.13 * (-50.0 + var_chaste_interface__membrane__V) * var_chaste_interface__i_Ca_T_b_gate__b * var_chaste_interface__i_Ca_T_g_gate__g + 0.037374999999999999 * pow(var_chaste_interface__i_Na_L_m_L_gate__m_L, 3) * (-var_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) * var_chaste_interface__i_Na_L_h_L_gate__h_L + (-1.5 * pow(NV_Ith_S(mParameters, 6), 3) * var_chaste_interface__Ca_i__Ca_i * _lt_0_row[3] + 0.40000000000000002 * pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * NV_Ith_S(mParameters, 14) * NV_Ith_S(mParameters, 4) * _lt_0_row[4]) / ((_lt_0_row[5]) * (1.0 + 6.9444444444444451e-9 / pow(var_chaste_interface__Ca_i__Ca_i, 2)) * (1004882.8125 * var_chaste_interface__Ca_i__Ca_i + 1.3 * pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) + pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * NV_Ith_S(mParameters, 4) + 1.5 * pow(NV_Ith_S(mParameters, 6), 3) * var_chaste_interface__Ca_i__Ca_i + 0.0035999999999999999 * pow(NV_Ith_S(mParameters, 6), 3) * (1.0 + 0.081300813008130079 * var_chaste_interface__intracellular_ion_concentrations__Na_i) + 1860.8670000000004 * (1.0 + 416.66666666666669 * var_chaste_interface__Ca_i__Ca_i) * NV_Ith_S(mParameters, 4))) + pow(var_chaste_interface__i_Na_m_gate__m, 3) * (-var_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) * (0.20000000000000001 * var_chaste_interface__i_Na_j_gate__j + 0.80000000000000004 * var_chaste_interface__i_Na_h_gate__h) * NV_Ith_S(mParameters, 8) + (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * (0.20000000000000001 * var_chaste_interface__i_to_1_i2_gate__i2 + 0.80000000000000004 * var_chaste_interface__i_to_1_i_gate__i) * NV_Ith_S(mParameters, 15) * var_chaste_interface__i_to_1_a_gate__a + 0.61875000000000002 * NV_Ith_S(mParameters, 5) / ((1.0 + 100.0 / pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 2)) * (1.5 + NV_Ith_S(mParameters, 5)) * (1.0 + _lt_0_row[7] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 6))) * _lt_0_row[6])) + (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca_i__Ca_i), 1.3999999999999999))) * (-26.712338705498265 * log((0.018329999999999999 * NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 5)) / (0.018329999999999999 * var_chaste_interface__intracellular_ion_concentrations__Na_i + var_chaste_interface__intracellular_ion_concentrations__K_i)) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 13) * var_chaste_interface__i_Ks_xs1_gate__xs1 * var_chaste_interface__i_Ks_xs2_gate__xs2 + 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 5)) * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 12) * var_chaste_interface__i_Kr_xr_gate__xr / (_lt_0_row[8]) + ((fabs(-15.0 + var_chaste_interface__membrane__V) < 1.3356169352718439e-6) ? (4.6891709968709491e-6 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_r__Ca_r * exp(9.9999999933270713e-8)) / (-1.0 + exp(9.9999999933270713e-8)) - 374358.83507888648 * (-15.000001335616934 + var_chaste_interface__membrane__V) * (-4.6891709968709491e-6 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_r__Ca_r * exp(9.9999999933270713e-8)) / (-1.0 + exp(9.9999999933270713e-8)) - 4.6891710031074985e-6 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_r__Ca_r * exp(-1.0000000006626968e-7)) / (-1.0 + exp(-1.0000000006626968e-7)))) : (3.510865186083326 * (-15.0 + var_chaste_interface__membrane__V) * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_r__Ca_r * _lt_0_row[9]) / (_lt_0_row[10]))) * NV_Ith_S(mParameters, 7) * var_chaste_interface__i_Ca_L_d_gate__d * var_chaste_interface__i_Ca_L_f2_gate__f2 * var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 * var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca * var_chaste_interface__i_Ca_L_f_gate__f + ((fabs(var_chaste_interface__membrane__V) < 1.3356169352749131e-6) ? (3.8499135947999997e-9 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_i__Ca_i * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 374358.83507802623 * (-1.3356169352749131e-6 + var_chaste_interface__membrane__V) * (-3.8499135947999997e-9 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_i__Ca_i * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 3.8499135947999997e-9 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_i__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.0028824983370007683 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_i__Ca_i * _lt_0_row[11]) * var_chaste_interface__membrane__V / (_lt_0_row[12]))); // microA_per_microF
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_membrane__i_tot; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -83.43812846286808
        double var_chaste_interface__Ca_i__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.00022355433459434943
        double var_chaste_interface__i_Na_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.9786390933308567
        double var_chaste_interface__i_Na_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.09866447258167589
        double var_chaste_interface__i_Na_L_m_L_gate__m_L = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_L_h_L_gate__h_L = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.8946968372659203
        double var_chaste_interface__i_Ca_L_d_gate__d = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 2.322223865147363e-06
        double var_chaste_interface__i_Ca_L_f_gate__f = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.9985607329462358
        double var_chaste_interface__i_Ca_L_f2_gate__f2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.8173435436674658
        double var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9610551285529658
        double var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.868690796671854
        double var_chaste_interface__i_Ca_T_b_gate__b = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.0002563937630984438
        double var_chaste_interface__i_Ca_T_g_gate__g = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.9720432601848331
        double var_chaste_interface__i_to_1_a_gate__a = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.0004238729429342389
        double var_chaste_interface__i_to_1_i_gate__i = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.9990935802459496
        double var_chaste_interface__i_to_1_i2_gate__i2 = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.9777368439681764
        double var_chaste_interface__i_Kr_xr_gate__xr = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.07084939408222911
        double var_chaste_interface__i_Ks_xs1_gate__xs1 = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.0011737654433043125
        double var_chaste_interface__i_Ks_xs2_gate__xs2 = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.001179442867470093
        double var_chaste_interface__i_to_2_a_gate__a = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.0014909437525000811
        double var_chaste_interface__intracellular_ion_concentrations__Na_i = NV_Ith_S(rY, 21);
        // Units: millimolar; Initial value: 9.927155552932733
        double var_chaste_interface__intracellular_ion_concentrations__Cl_i = NV_Ith_S(rY, 22);
        // Units: millimolar; Initial value: 18.904682470140408
        double var_chaste_interface__intracellular_ion_concentrations__K_i = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 141.9670801746057
        double var_chaste_interface__Ca_MK_act__Ca_MK_trap = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 8.789168284782809e-06
        double var_chaste_interface__Ca_NSR__Ca_NSR = NV_Ith_S(rY, 25);
        // Units: millimolar; Initial value: 1.2132524695849454
        double var_chaste_interface__Ca_JSR__Ca_JSR = NV_Ith_S(rY, 26);
        // Units: millimolar; Initial value: 1.1433050636518596
        double var_chaste_interface__Ca_r__Ca_r = NV_Ith_S(rY, 27);
        // Units: millimolar; Initial value: 0.00022418117117903934
        double var_chaste_interface__q_rel_ri_gate__ri = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.7802870066567904
        double var_chaste_interface__q_rel_ro_gate__ro = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 1.2785734760674763e-09

        // Lookup table indexing
        const bool _oob_0 = Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        double d_dt_chaste_interface_var_membrane__V;
        const double var_Ca_MK_act__Ca_MK_bound = 0.050000000000000003 * (1.0 - var_chaste_interface__Ca_MK_act__Ca_MK_trap) / (1.0 + 0.14999999999999999 / var_chaste_interface__Ca_r__Ca_r); // dimensionless
        const double var_Ca_MK_act__Ca_MK_act = var_Ca_MK_act__Ca_MK_bound + var_chaste_interface__Ca_MK_act__Ca_MK_trap; // dimensionless
        const double var_Ca_r__q_diff = 5.0 * var_chaste_interface__Ca_r__Ca_r - 5.0 * var_chaste_interface__Ca_i__Ca_i; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_MK_act__Ca_MK_trap = -0.00068000000000000005 * var_chaste_interface__Ca_MK_act__Ca_MK_trap + 0.050000000000000003 * (var_Ca_MK_act__Ca_MK_bound + var_chaste_interface__Ca_MK_act__Ca_MK_trap) * var_Ca_MK_act__Ca_MK_bound; // 1 / millisecond
        const double var_i_Ca_p__i_Ca_p = 0.057500000000000002 * var_chaste_interface__Ca_i__Ca_i / (0.00050000000000000001 + var_chaste_interface__Ca_i__Ca_i); // microA_per_microF
        const double d_dt_chaste_interface_var_i_to_2_a_gate__a = 1 / (1.0 + 0.1502 / var_chaste_interface__Ca_r__Ca_r) - var_chaste_interface__i_to_2_a_gate__a; // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ca_L_d_gate__d = (-var_chaste_interface__i_Ca_L_d_gate__d + _lt_0_row[13]) / (_lt_0_row[14]); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ca_L_f2_gate__f2 = (-var_chaste_interface__i_Ca_L_f2_gate__f2 + _lt_0_row[15]) / (38.0 + 24.217200000000005 * pow((-1 + 0.053763440860215048 * var_chaste_interface__membrane__V), 2)); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ca_L_f_gate__f = (-var_chaste_interface__i_Ca_L_f_gate__f + _lt_0_row[15]) / (4.0 + 0.03125 * pow((-1 + 0.40000000000000002 * var_chaste_interface__membrane__V), 2)); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ca_T_b_gate__b = (-var_chaste_interface__i_Ca_T_b_gate__b + _lt_0_row[16]) * (_lt_0_row[17]); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ca_T_g_gate__g = (-var_chaste_interface__i_Ca_T_g_gate__g + _lt_0_row[18]) * (_lt_0_row[19]); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Kr_xr_gate__xr = (-var_chaste_interface__i_Kr_xr_gate__xr + _lt_0_row[20]) / (_lt_0_row[21]); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ks_xs1_gate__xs1 = (-var_chaste_interface__i_Ks_xs1_gate__xs1 + _lt_0_row[22]) * _lt_0_row[23]; // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ks_xs2_gate__xs2 = (-var_chaste_interface__i_Ks_xs2_gate__xs2 + _lt_0_row[22]) * _lt_0_row[24]; // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Na_L_h_L_gate__h_L = (-var_chaste_interface__i_Na_L_h_L_gate__h_L + _lt_0_row[25]) / (_lt_0_row[26]); // 1 / millisecond
        const double var_i_Na_L_m_L_gate__alpha_m_L = _lt_0_row[27]; // per_millisecond
        const double var_i_Na_L_m_L_gate__beta_m_L = _lt_0_row[28]; // per_millisecond
        const double d_dt_chaste_interface_var_i_Na_L_m_L_gate__m_L = (-var_chaste_interface__i_Na_L_m_L_gate__m_L + var_i_Na_L_m_L_gate__alpha_m_L / (var_i_Na_L_m_L_gate__alpha_m_L + var_i_Na_L_m_L_gate__beta_m_L)) * (var_i_Na_L_m_L_gate__alpha_m_L + var_i_Na_L_m_L_gate__beta_m_L); // 1 / millisecond
        const double var_i_Na_h_gate__alpha_h = ((var_chaste_interface__membrane__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 10) - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0)); // per_millisecond
        const double var_i_Na_h_gate__beta_h = ((var_chaste_interface__membrane__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V - 0.34999999999999998 * NV_Ith_S(mParameters, 10)) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__V - 0.079000000000000001 * NV_Ith_S(mParameters, 10))) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 10) - 0.0900900900900901 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double d_dt_chaste_interface_var_i_Na_h_gate__h = (var_i_Na_h_gate__alpha_h + var_i_Na_h_gate__beta_h) * (-var_chaste_interface__i_Na_h_gate__h + 0.01 * NV_Ith_S(mParameters, 9) + (1.0 - 0.01 * NV_Ith_S(mParameters, 9)) * var_i_Na_h_gate__alpha_h / (var_i_Na_h_gate__alpha_h + var_i_Na_h_gate__beta_h)); // 1 / millisecond
        const double var_i_Na_j_gate__alpha_j = ((var_chaste_interface__membrane__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__membrane__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V - 0.24440000000000001 * NV_Ith_S(mParameters, 10)) - 3.4740000000000003e-5 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 10) - 0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V - 0.311 * NV_Ith_S(mParameters, 10)))) : (0)); // per_millisecond
        const double var_i_Na_j_gate__beta_j = ((var_chaste_interface__membrane__V < -40.0) ? (0.1212 * exp(0.01052 * NV_Ith_S(mParameters, 10) - 0.01052 * var_chaste_interface__membrane__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 10) - 0.13780000000000001 * var_chaste_interface__membrane__V))) : (0.29999999999999999 * exp(2.5349999999999999e-7 * NV_Ith_S(mParameters, 10) - 2.5349999999999999e-7 * var_chaste_interface__membrane__V) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 10) - 0.10000000000000001 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double d_dt_chaste_interface_var_i_Na_j_gate__j = (var_i_Na_j_gate__alpha_j + var_i_Na_j_gate__beta_j) * (-var_chaste_interface__i_Na_j_gate__j + 0.01 * NV_Ith_S(mParameters, 9) + (1.0 - 0.01 * NV_Ith_S(mParameters, 9)) * var_i_Na_j_gate__alpha_j / (var_i_Na_j_gate__alpha_j + var_i_Na_j_gate__beta_j)); // 1 / millisecond
        const double var_i_Na_m_gate__alpha_m = _lt_0_row[27]; // per_millisecond
        const double var_i_Na_m_gate__beta_m = _lt_0_row[28]; // per_millisecond
        const double d_dt_chaste_interface_var_i_Na_m_gate__m = (-var_chaste_interface__i_Na_m_gate__m + var_i_Na_m_gate__alpha_m / (var_i_Na_m_gate__alpha_m + var_i_Na_m_gate__beta_m)) * (var_i_Na_m_gate__alpha_m + var_i_Na_m_gate__beta_m); // 1 / millisecond
        const double var_i_to_1_a_gate__alpha_a = _lt_0_row[29]; // per_millisecond
        const double var_i_to_1_a_gate__beta_a = _lt_0_row[30]; // per_millisecond
        const double d_dt_chaste_interface_var_i_to_1_a_gate__a = (-var_chaste_interface__i_to_1_a_gate__a + var_i_to_1_a_gate__alpha_a / (var_i_to_1_a_gate__alpha_a + var_i_to_1_a_gate__beta_a)) * (var_i_to_1_a_gate__alpha_a + var_i_to_1_a_gate__beta_a); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_to_1_i2_gate__i2 = (-var_chaste_interface__i_to_1_i2_gate__i2 + _lt_0_row[31]) / (_lt_0_row[32]); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_to_1_i_gate__i = (-var_chaste_interface__i_to_1_i_gate__i + _lt_0_row[33]) / (_lt_0_row[34]); // 1 / millisecond
        const double var_i_to_2__i_to_2 = 20.0 * ((fabs(var_chaste_interface__membrane__V) < 2.6712338705498262e-6) ? (3.8593999999999993e-9 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__intracellular_ion_concentrations__Cl_i) / (1.0 - exp(9.9999999999999995e-8)) - 187179.41753901311 * (-2.6712338705498262e-6 + var_chaste_interface__membrane__V) * (-3.8593999999999993e-9 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__intracellular_ion_concentrations__Cl_i) / (1.0 - exp(9.9999999999999995e-8)) - 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__intracellular_ion_concentrations__Cl_i) / (1.0 - exp(-9.9999999999999995e-8)))) : (0.0014448004881001341 * (_lt_0_row[0] + var_chaste_interface__intracellular_ion_concentrations__Cl_i) * var_chaste_interface__membrane__V / (_lt_0_row[1]))) * var_chaste_interface__i_to_2_a_gate__a; // microA_per_microF
        const double var_background_currents__i_Ca_b = ((fabs(var_chaste_interface__membrane__V) < 1.3356169352749131e-6) ? (3.8499135947999997e-9 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_i__Ca_i * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 374358.83507802623 * (-1.3356169352749131e-6 + var_chaste_interface__membrane__V) * (-3.8499135947999997e-9 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_i__Ca_i * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 3.8499135947999997e-9 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_i__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.0028824983370007683 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_i__Ca_i * _lt_0_row[11]) * var_chaste_interface__membrane__V / (_lt_0_row[12]))); // microA_per_microF
        const double var_i_Ca_L__i_Ca_L_max = ((fabs(-15.0 + var_chaste_interface__membrane__V) < 1.3356169352718439e-6) ? (4.6891709968709491e-6 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_r__Ca_r * exp(9.9999999933270713e-8)) / (-1.0 + exp(9.9999999933270713e-8)) - 374358.83507888648 * (-15.000001335616934 + var_chaste_interface__membrane__V) * (-4.6891709968709491e-6 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_r__Ca_r * exp(9.9999999933270713e-8)) / (-1.0 + exp(9.9999999933270713e-8)) - 4.6891710031074985e-6 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_r__Ca_r * exp(-1.0000000006626968e-7)) / (-1.0 + exp(-1.0000000006626968e-7)))) : (3.510865186083326 * (-15.0 + var_chaste_interface__membrane__V) * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_r__Ca_r * _lt_0_row[9]) / (_lt_0_row[10]))); // microA_per_microF
        const double var_i_Ca_L__i_Ca_L = NV_Ith_S(mParameters, 7) * var_i_Ca_L__i_Ca_L_max * var_chaste_interface__i_Ca_L_d_gate__d * var_chaste_interface__i_Ca_L_f2_gate__f2 * var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 * var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca * var_chaste_interface__i_Ca_L_f_gate__f; // microA_per_microF
        const double d_dt_chaste_interface_var_i_Ca_L_f_Ca2_gate__f_Ca2 = (-var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 + 1 / (1.0 - 100.0 * var_i_Ca_L__i_Ca_L)) / (125.0 + 300.0 / (1.0 + exp(-4.375 - 25.0 * var_i_Ca_L__i_Ca_L))); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ca_L_f_Ca_gate__f_Ca = (0.14999999999999999 - var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca + 0.55000000000000004 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca_r__Ca_r) + 0.29999999999999999 / (1.0 - 20.0 * var_i_Ca_L__i_Ca_L)) / (0.5 + 1 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca_r__Ca_r) + 10.0 * var_Ca_MK_act__Ca_MK_act / (0.14999999999999999 + var_Ca_MK_act__Ca_MK_act)); // 1 / millisecond
        const double var_equilibrium_potentials__E_Cl = -26.712338705498265 * log(100.0 / var_chaste_interface__intracellular_ion_concentrations__Cl_i); // millivolt
        const double var_background_currents__i_Cl_b = 0.00022499999999999999 * var_chaste_interface__membrane__V - 0.00022499999999999999 * var_equilibrium_potentials__E_Cl; // microA_per_microF
        const double var_equilibrium_potentials__E_K = 26.712338705498265 * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__intracellular_ion_concentrations__K_i); // millivolt
        const double var_CT_K_Cl__CT_K_Cl = 7.0755999999999996e-6 * (-var_equilibrium_potentials__E_Cl + var_equilibrium_potentials__E_K) / (87.825100000000006 - var_equilibrium_potentials__E_Cl + var_equilibrium_potentials__E_K); // millimolar_per_millisecond
        const double var_background_currents__i_K_b = 0.0050000000000000001 * var_chaste_interface__membrane__V - 0.0050000000000000001 * var_equilibrium_potentials__E_K; // microA_per_microF
        const double var_equilibrium_potentials__E_Na = 26.712338705498265 * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__intracellular_ion_concentrations__Na_i); // millivolt
        const double var_CT_Na_Cl__CT_Na_Cl = 9.8442999999999999e-6 * pow((-var_equilibrium_potentials__E_Cl + var_equilibrium_potentials__E_Na), 4) / (59494197.640692554 + pow((-var_equilibrium_potentials__E_Cl + var_equilibrium_potentials__E_Na), 4)); // millimolar_per_millisecond
        const double var_background_currents__i_Na_b = 0.0025000000000000001 * var_chaste_interface__membrane__V - 0.0025000000000000001 * var_equilibrium_potentials__E_Na; // microA_per_microF
        const double var_i_K1__i_K1 = (0.0040000000000000001 + 0.4389381125701739 * sqrt(NV_Ith_S(mParameters, 5)) * NV_Ith_S(mParameters, 11) / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_equilibrium_potentials__E_K)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_equilibrium_potentials__E_K)) + (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 0.080320000000000003 * var_equilibrium_potentials__E_K) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 0.061749999999999999 * var_equilibrium_potentials__E_K)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_equilibrium_potentials__E_K - 0.51429999999999998 * var_chaste_interface__membrane__V))))) * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V); // microA_per_microF
        const double var_i_K_p__i_K_p = 0.0027599999999999999 * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) / (_lt_0_row[2]); // microA_per_microF
        const double var_i_Kr__i_Kr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 5)) * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 12) * var_chaste_interface__i_Kr_xr_gate__xr / (_lt_0_row[8]); // microA_per_microF
        const double var_i_Ks__i_Ks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca_i__Ca_i), 1.3999999999999999))) * (-26.712338705498265 * log((0.018329999999999999 * NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 5)) / (0.018329999999999999 * var_chaste_interface__intracellular_ion_concentrations__Na_i + var_chaste_interface__intracellular_ion_concentrations__K_i)) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 13) * var_chaste_interface__i_Ks_xs1_gate__xs1 * var_chaste_interface__i_Ks_xs2_gate__xs2; // microA_per_microF
        const double var_i_Na__i_Na = pow(var_chaste_interface__i_Na_m_gate__m, 3) * (-var_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) * (0.20000000000000001 * var_chaste_interface__i_Na_j_gate__j + 0.80000000000000004 * var_chaste_interface__i_Na_h_gate__h) * NV_Ith_S(mParameters, 8); // microA_per_microF
        const double var_i_NaCa__i_NaCa = (-1.5 * pow(NV_Ith_S(mParameters, 6), 3) * var_chaste_interface__Ca_i__Ca_i * _lt_0_row[3] + 0.40000000000000002 * pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * NV_Ith_S(mParameters, 14) * NV_Ith_S(mParameters, 4) * _lt_0_row[4]) / ((_lt_0_row[5]) * (1.0 + 6.9444444444444451e-9 / pow(var_chaste_interface__Ca_i__Ca_i, 2)) * (1004882.8125 * var_chaste_interface__Ca_i__Ca_i + 1.3 * pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) + pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * NV_Ith_S(mParameters, 4) + 1.5 * pow(NV_Ith_S(mParameters, 6), 3) * var_chaste_interface__Ca_i__Ca_i + 0.0035999999999999999 * pow(NV_Ith_S(mParameters, 6), 3) * (1.0 + 0.081300813008130079 * var_chaste_interface__intracellular_ion_concentrations__Na_i) + 1860.8670000000004 * (1.0 + 416.66666666666669 * var_chaste_interface__Ca_i__Ca_i) * NV_Ith_S(mParameters, 4))); // microA_per_microF
        const double var_i_NaK__i_NaK = 0.61875000000000002 * NV_Ith_S(mParameters, 5) / ((1.0 + 100.0 / pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 2)) * (1.5 + NV_Ith_S(mParameters, 5)) * (1.0 + _lt_0_row[7] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 6))) * _lt_0_row[6])); // microA_per_microF
        const double var_i_Na_L__i_Na_L = 0.037374999999999999 * pow(var_chaste_interface__i_Na_L_m_L_gate__m_L, 3) * (-var_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) * var_chaste_interface__i_Na_L_h_L_gate__h_L; // microA_per_microF
        const double var_i_to_1__i_to_1 = (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * (0.20000000000000001 * var_chaste_interface__i_to_1_i2_gate__i2 + 0.80000000000000004 * var_chaste_interface__i_to_1_i_gate__i) * NV_Ith_S(mParameters, 15) * var_chaste_interface__i_to_1_a_gate__a; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ion_concentrations__Cl_i = (-6.767281717060562e-9 * var_background_currents__i_Cl_b - 6.767281717060562e-9 * var_i_to_2__i_to_2 + var_CT_K_Cl__CT_K_Cl + var_CT_Na_Cl__CT_Na_Cl) * NV_Ith_S(mParameters, 3); // millimolar / millisecond
        const double d_dt_chaste_interface_var_intracellular_ion_concentrations__K_i = (1.3534563434121124e-8 * var_i_NaK__i_NaK - 6.767281717060562e-9 * var_background_currents__i_K_b - 6.767281717060562e-9 * var_i_K1__i_K1 - 6.767281717060562e-9 * var_i_K_p__i_K_p - 6.767281717060562e-9 * var_i_Kr__i_Kr - 6.767281717060562e-9 * var_i_Ks__i_Ks - 6.767281717060562e-9 * var_i_to_1__i_to_1 + var_CT_K_Cl__CT_K_Cl) * NV_Ith_S(mParameters, 3); // millimolar / millisecond
        const double d_dt_chaste_interface_var_intracellular_ion_concentrations__Na_i = (-2.0301845151181685e-8 * var_i_NaCa__i_NaCa - 2.0301845151181685e-8 * var_i_NaK__i_NaK - 6.767281717060562e-9 * var_background_currents__i_Na_b - 6.767281717060562e-9 * var_i_Na__i_Na - 6.767281717060562e-9 * var_i_Na_L__i_Na_L + var_CT_Na_Cl__CT_Na_Cl) * NV_Ith_S(mParameters, 3); // millimolar / millisecond
        const double var_q_leak__q_leak = 0.066666666666666666 * var_chaste_interface__Ca_NSR__Ca_NSR * NV_Ith_S(mParameters, 0); // millimolar_per_millisecond
        const double var_q_rel_ri_gate__Ca_fac = 1 / (1.0 + exp(3.3333333333333335 + 66.666666666666671 * var_i_Ca_L__i_Ca_L)); // millimolar
        const double d_dt_chaste_interface_var_q_rel_ri_gate__ri = (-var_chaste_interface__q_rel_ri_gate__ri + 1 / (1.0 + exp(-16.0 + 80.0 * var_q_rel_ri_gate__Ca_fac + 40000.0 * var_chaste_interface__Ca_r__Ca_r))) / (3.0 + (350.0 - 10.0 * var_Ca_MK_act__Ca_MK_act / (0.14999999999999999 + var_Ca_MK_act__Ca_MK_act)) / (1.0 + exp(-15.0 + 5000.0 * var_chaste_interface__Ca_r__Ca_r + 15.0 * var_q_rel_ri_gate__Ca_fac)) + 10.0 * var_Ca_MK_act__Ca_MK_act / (0.14999999999999999 + var_Ca_MK_act__Ca_MK_act)); // 1 / millisecond
        const double var_q_rel__q_rel = (-var_chaste_interface__Ca_r__Ca_r + var_chaste_interface__Ca_JSR__Ca_JSR) * NV_Ith_S(mParameters, 1) * var_chaste_interface__q_rel_ri_gate__ri * var_chaste_interface__q_rel_ro_gate__ro / (1.0 + exp(2.6000000000000001 + 0.20000000000000001 * NV_Ith_S(mParameters, 7) * var_i_Ca_L__i_Ca_L_max)); // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_r__Ca_r = (-var_Ca_r__q_diff + 0.23999999999999996 * var_q_rel__q_rel - 1.1504378919002956e-7 * var_i_Ca_L__i_Ca_L) / (1.0 + 2.2480000000000002 * var_chaste_interface__Ca_r__Ca_r / pow((0.0086999999999999994 + var_chaste_interface__Ca_r__Ca_r), 2) + 0.094 * var_chaste_interface__Ca_r__Ca_r / pow((0.00087000000000000001 + var_chaste_interface__Ca_r__Ca_r), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_q_rel_ro_gate__ro = -0.33333333333333331 * var_chaste_interface__q_rel_ro_gate__ro + 0.33333333333333331 * pow(var_chaste_interface__Ca_JSR__Ca_JSR, 1.8999999999999999) * pow(var_i_Ca_L__i_Ca_L, 2) / ((1.0 + pow(var_i_Ca_L__i_Ca_L, 2)) * (pow(var_chaste_interface__Ca_JSR__Ca_JSR, 1.8999999999999999) + 1644.6531773416521 * pow((var_chaste_interface__Ca_r__Ca_r / (0.0028 + var_chaste_interface__Ca_r__Ca_r)), 1.8999999999999999))); // 1 / millisecond
        const double var_q_tr__q_tr = 0.0083333333333333332 * var_chaste_interface__Ca_NSR__Ca_NSR - 0.0083333333333333332 * var_chaste_interface__Ca_JSR__Ca_JSR; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_JSR__Ca_JSR = (-var_q_rel__q_rel + var_q_tr__q_tr) / (1.0 + 8.0 / pow((0.80000000000000004 + var_chaste_interface__Ca_JSR__Ca_JSR), 2)); // millimolar / millisecond
        const double var_q_up__q_up = 0.5 * (1.0 + 0.75 * var_Ca_MK_act__Ca_MK_act / (0.14999999999999999 + var_Ca_MK_act__Ca_MK_act)) * var_chaste_interface__Ca_i__Ca_i * NV_Ith_S(mParameters, 2) / (0.00092000000000000003 - 0.00017000000000000001 * var_Ca_MK_act__Ca_MK_act / (0.14999999999999999 + var_Ca_MK_act__Ca_MK_act) + var_chaste_interface__Ca_i__Ca_i); // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_NSR__Ca_NSR = -var_q_leak__q_leak - 0.086956521739130432 * var_q_tr__q_tr + var_q_up__q_up; // millimolar / millisecond
        const double d_dt_chaste_interface_var_Ca_i__Ca_i = -(3.383640858530281e-9 * var_background_currents__i_Ca_b + 3.383640858530281e-9 * var_i_Ca_p__i_Ca_p + 0.081176470588235281 * var_q_up__q_up - 0.029411764705882353 * var_Ca_r__q_diff - 6.767281717060562e-9 * var_i_NaCa__i_NaCa - 0.081176470588235281 * var_q_leak__q_leak) / (1.0 + 0.14000000000000001 * var_chaste_interface__Ca_i__Ca_i / pow((0.00050000000000000001 + var_chaste_interface__Ca_i__Ca_i), 2) + 0.10000000000000001 * var_chaste_interface__Ca_i__Ca_i / pow((0.0023800000000000002 + var_chaste_interface__Ca_i__Ca_i), 2)); // millimolar / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_membrane__V = -var_background_currents__i_Ca_b - var_background_currents__i_Cl_b - var_background_currents__i_K_b - var_background_currents__i_Na_b - var_i_Ca_L__i_Ca_L - var_i_Ca_p__i_Ca_p - var_i_K1__i_K1 - var_i_K_p__i_K_p - var_i_Kr__i_Kr - var_i_Ks__i_Ks - var_i_Na__i_Na - var_i_NaCa__i_NaCa - var_i_NaK__i_NaK - var_i_Na_L__i_Na_L - var_i_to_1__i_to_1 - var_i_to_2__i_to_2 - GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance() - 0.13 * (-50.0 + var_chaste_interface__membrane__V) * var_chaste_interface__i_Ca_T_b_gate__b * var_chaste_interface__i_Ca_T_g_gate__g; // millivolt / millisecond
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_membrane__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_Ca_i__Ca_i;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_i_Na_m_gate__m;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_i_Na_h_gate__h;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_i_Na_j_gate__j;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_i_Na_L_m_L_gate__m_L;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_i_Na_L_h_L_gate__h_L;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_i_Ca_L_d_gate__d;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_i_Ca_L_f_gate__f;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_i_Ca_L_f2_gate__f2;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_i_Ca_L_f_Ca_gate__f_Ca;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_i_Ca_L_f_Ca2_gate__f_Ca2;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_i_Ca_T_b_gate__b;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_i_Ca_T_g_gate__g;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_i_to_1_a_gate__a;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_i_to_1_i_gate__i;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_i_to_1_i2_gate__i2;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_i_Kr_xr_gate__xr;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_i_Ks_xs1_gate__xs1;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_i_Ks_xs2_gate__xs2;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_i_to_2_a_gate__a;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_intracellular_ion_concentrations__Na_i;
        NV_Ith_S(rDY,22) = d_dt_chaste_interface_var_intracellular_ion_concentrations__Cl_i;
        NV_Ith_S(rDY,23) = d_dt_chaste_interface_var_intracellular_ion_concentrations__K_i;
        NV_Ith_S(rDY,24) = d_dt_chaste_interface_var_Ca_MK_act__Ca_MK_trap;
        NV_Ith_S(rDY,25) = d_dt_chaste_interface_var_Ca_NSR__Ca_NSR;
        NV_Ith_S(rDY,26) = d_dt_chaste_interface_var_Ca_JSR__Ca_JSR;
        NV_Ith_S(rDY,27) = d_dt_chaste_interface_var_Ca_r__Ca_r;
        NV_Ith_S(rDY,28) = d_dt_chaste_interface_var_q_rel_ri_gate__ri;
        NV_Ith_S(rDY,29) = d_dt_chaste_interface_var_q_rel_ro_gate__ro;
    }

    void Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -83.43812846286808
        double var_chaste_interface__Ca_i__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.00022355433459434943
        double var_chaste_interface__i_Na_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.9786390933308567
        double var_chaste_interface__i_Na_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.09866447258167589
        double var_chaste_interface__i_Na_L_m_L_gate__m_L = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_L_h_L_gate__h_L = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.8946968372659203
        double var_chaste_interface__i_Ca_L_d_gate__d = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 2.322223865147363e-06
        double var_chaste_interface__i_Ca_L_f_gate__f = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.9985607329462358
        double var_chaste_interface__i_Ca_L_f2_gate__f2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.8173435436674658
        double var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9610551285529658
        double var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.868690796671854
        double var_chaste_interface__i_Ca_T_b_gate__b = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.0002563937630984438
        double var_chaste_interface__i_Ca_T_g_gate__g = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.9720432601848331
        double var_chaste_interface__i_to_1_a_gate__a = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.0004238729429342389
        double var_chaste_interface__i_to_1_i_gate__i = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.9990935802459496
        double var_chaste_interface__i_to_1_i2_gate__i2 = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.9777368439681764
        double var_chaste_interface__i_Kr_xr_gate__xr = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.07084939408222911
        double var_chaste_interface__i_Ks_xs1_gate__xs1 = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.0011737654433043125
        double var_chaste_interface__i_Ks_xs2_gate__xs2 = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.001179442867470093
        double var_chaste_interface__i_to_2_a_gate__a = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.0014909437525000811
        double var_chaste_interface__intracellular_ion_concentrations__Na_i = NV_Ith_S(rY, 21);
        // Units: millimolar; Initial value: 9.927155552932733
        double var_chaste_interface__intracellular_ion_concentrations__Cl_i = NV_Ith_S(rY, 22);
        // Units: millimolar; Initial value: 18.904682470140408
        double var_chaste_interface__intracellular_ion_concentrations__K_i = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 141.9670801746057
        double var_chaste_interface__Ca_MK_act__Ca_MK_trap = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 8.789168284782809e-06
        double var_chaste_interface__Ca_NSR__Ca_NSR = NV_Ith_S(rY, 25);
        // Units: millimolar; Initial value: 1.2132524695849454
        double var_chaste_interface__Ca_JSR__Ca_JSR = NV_Ith_S(rY, 26);
        // Units: millimolar; Initial value: 1.1433050636518596
        double var_chaste_interface__Ca_r__Ca_r = NV_Ith_S(rY, 27);
        // Units: millimolar; Initial value: 0.00022418117117903934
        double var_chaste_interface__q_rel_ri_gate__ri = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.7802870066567904
        double var_chaste_interface__q_rel_ro_gate__ro = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 1.2785734760674763e-09
        
        // Lookup table indexing
        const bool _oob_0 = Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
const double var_x0 = exp(9.9999999999999995e-8);
        const double var_x1 = 1 / (1.0 - var_x0);
        const double var_x2 = -100.0 * var_x0 + var_chaste_interface__intracellular_ion_concentrations__Cl_i;
        const double var_x3 = exp(-9.9999999999999995e-8);
        const double var_x4 = 1 / (1.0 - var_x3);
        const double var_x5 = -100.0 * var_x3 + var_chaste_interface__intracellular_ion_concentrations__Cl_i;
        const double var_x6 = fabs(var_chaste_interface__membrane__V);
        const double var_x7 = var_x6 < 2.6712338705498262e-6;
        const double var_x8 = 0.037435883507802616 * var_chaste_interface__membrane__V;
        const double var_x9 = exp(var_x8);
        const double var_x10 = 1.0 - var_x9;
        const double var_x11 = 1 / var_x10;
        const double var_x12 = var_x11 * var_chaste_interface__i_to_2_a_gate__a;
        const double var_x13 = -100.0 * var_x9 + var_chaste_interface__intracellular_ion_concentrations__Cl_i;
        const double var_x14 = 0.028896009762002683 * var_x13;
        const double var_x15 = var_x12 * var_chaste_interface__membrane__V;
        const double var_x16 = ((var_x7) ? ((0.014448004881001342 * var_x1 * var_x2 + 0.014448004881001342 * var_x4 * var_x5) * var_chaste_interface__i_to_2_a_gate__a) : (var_x12 * var_x14 - 0.10817476552906598 * var_x15 * var_x9 + 0.0010817476552906597 * var_x13 * var_x9 * var_chaste_interface__i_to_2_a_gate__a * var_chaste_interface__membrane__V / pow(var_x10, 2)));
        const double var_x17 = 1 / (-1.0 + var_x0);
        const double var_x18 = -0.34100000000000003 * NV_Ith_S(mParameters, 4);
        const double var_x19 = var_chaste_interface__Ca_i__Ca_i;
        const double var_x20 = var_x17 * (var_x18 + var_x0 * var_x19);
        const double var_x21 = 1 / (-1.0 + var_x3);
        const double var_x22 = var_x21 * (var_x18 + var_x19 * var_x3);
        const double var_x23 = var_x6 < 1.3356169352749131e-6;
        const double var_x24 = 0.074871767015605231 * var_chaste_interface__membrane__V;
        const double var_x25 = exp(var_x24);
        const double var_x26 = var_x18 + var_x19 * var_x25;
        const double var_x27 = -1.0 + var_x25;
        const double var_x28 = 1 / var_x27;
        const double var_x29 = 0.0028824983370007683 * var_x28;
        const double var_x30 = var_x26 * var_x29;
        const double var_x31 = var_x25 * var_chaste_interface__membrane__V;
        const double var_x32 = 0.00021581774391079108 * var_x31;
        const double var_x33 = ((var_x23) ? (0.0014412491685003841 * var_x20 + 0.0014412491685003841 * var_x22) : (var_x30 + var_x28 * var_x32 * var_chaste_interface__Ca_i__Ca_i - var_x26 * var_x32 / pow(var_x27, 2)));
        const double var_x34 = exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__V);
        const double var_x35 = 1.0 + var_x34;
        const double var_x36 = 1 / var_x35;
        const double var_x37 = 1 / var_chaste_interface__intracellular_ion_concentrations__K_i;
        const double var_x38 = log(var_x37 * NV_Ith_S(mParameters, 5));
        const double var_x39 = 26.712338705498265 * var_x38;
        const double var_x40 = -var_x39 + var_chaste_interface__membrane__V;
        const double var_x41 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 6.3708927812613361 * var_x38);
        const double var_x42 = 1.0 + var_x41;
        const double var_x43 = var_x41 / pow(var_x42, 2);
        const double var_x44 = sqrt(NV_Ith_S(mParameters, 5));
        const double var_x45 = 1 / var_x42;
        const double var_x46 = exp(-2.4444678999999998 + 13.738155796237757 * var_x38 - 0.51429999999999998 * var_chaste_interface__membrane__V);
        const double var_x47 = 1.0 + var_x46;
        const double var_x48 = 1 / var_x47;
        const double var_x49 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 2.1455350448256207 * var_x38);
        const double var_x50 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 1.6494869150645177 * var_x38);
        const double var_x51 = var_x50 + 0.49124000000000001 * var_x49;
        const double var_x52 = var_x48 * var_x51;
        const double var_x53 = var_x44 * NV_Ith_S(mParameters, 11) / (var_x52 + 1.02 * var_x45);
        const double var_x54 = var_x43 * var_x53;
        const double var_x55 = var_x46 * var_x51 / pow(var_x47, 2);
        const double var_x56 = 0.24326999999999999 * var_x43 - 0.51429999999999998 * var_x55 - var_x48 * (0.061749999999999999 * var_x50 + 0.039456396800000001 * var_x49);
        const double var_x57 = var_x44 * var_x45 * NV_Ith_S(mParameters, 11) / pow((var_x45 + 0.98039215686274506 * var_x52), 2);
        const double var_x58 = 0.42189361069797565 * var_x57;
        const double var_x59 = pow(var_chaste_interface__i_Na_L_m_L_gate__m_L, 3);
        const double var_x60 = 0.037374999999999999 * var_x59;
        const double var_x61 = (-0.20000000000000001 * var_chaste_interface__i_to_1_i2_gate__i2 - 0.80000000000000004 * var_chaste_interface__i_to_1_i_gate__i) * NV_Ith_S(mParameters, 15);
        const double var_x62 = var_x61 * var_chaste_interface__i_to_1_a_gate__a;
        const double var_x63 = 0.20000000000000001 * var_chaste_interface__i_Na_j_gate__j + 0.80000000000000004 * var_chaste_interface__i_Na_h_gate__h;
        const double var_x64 = pow(var_chaste_interface__i_Na_m_gate__m, 3) * NV_Ith_S(mParameters, 8);
        const double var_x65 = var_x63 * var_x64;
        const double var_x66 = var_x34 * var_x40 / pow(var_x35, 2);
        const double var_x67 = 1 / var_chaste_interface__Ca_i__Ca_i;
        const double var_x68 = pow(var_x67, 1.3999999999999999);
        const double var_x69 = 1.0 + 6.4818210260626455e-7 * var_x68;
        const double var_x70 = 1 / var_x69;
        const double var_x71 = -1.0 - 0.59999999999999998 * var_x70;
        const double var_x72 = NV_Ith_S(mParameters, 13) * var_chaste_interface__i_Ks_xs2_gate__xs2;
        const double var_x73 = var_x71 * var_x72;
        const double var_x74 = var_x73 * var_chaste_interface__i_Ks_xs1_gate__xs1;
        const double var_x75 = _lt_0_row[3];
        const double var_x76 = pow(NV_Ith_S(mParameters, 6), 3);
        const double var_x77 = var_x76 * var_chaste_interface__Ca_i__Ca_i;
        const double var_x78 = pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3);
        const double var_x79 = var_x78 * NV_Ith_S(mParameters, 4);
        const double var_x80 = NV_Ith_S(mParameters, 14) * _lt_0_row[4];
        const double var_x81 = var_x79 * var_x80;
        const double var_x82 = 1.0 + 0.27000000000000002 * var_x75;
        const double var_x83 = 1 / var_x82;
        const double var_x84 = 1.0 + 6.9444444444444451e-9 / pow(var_chaste_interface__Ca_i__Ca_i, 2);
        const double var_x85 = 1 / var_x84;
        const double var_x86 = 1.5 * var_x76;
        const double var_x87 = var_x86 * var_chaste_interface__Ca_i__Ca_i;
        const double var_x88 = var_x76 * (1.0 + 0.081300813008130079 * var_chaste_interface__intracellular_ion_concentrations__Na_i);
        const double var_x89 = (1.0 + 416.66666666666669 * var_chaste_interface__Ca_i__Ca_i) * NV_Ith_S(mParameters, 4);
        const double var_x90 = 1 / (var_x79 + var_x87 + 1004882.8125 * var_chaste_interface__Ca_i__Ca_i + 0.0035999999999999999 * var_x88 + 1.3 * var_x78 + 1860.8670000000004 * var_x89);
        const double var_x91 = var_x85 * var_x90;
        const double var_x92 = var_x83 * var_x91;
        const double var_x93 = var_x92 * (0.0052410236910923665 * var_x81 + 0.036499986420107551 * var_x75 * var_x77);
        const double var_x94 = exp(-0.26470588235294124 + 0.049019607843137261 * var_chaste_interface__membrane__V);
        const double var_x95 = 1.0 + var_x94;
        const double var_x96 = var_x44 * NV_Ith_S(mParameters, 12) / var_x95;
        const double var_x97 = 0.43033148291193518 * var_x96;
        const double var_x98 = var_x45 * var_x53;
        const double var_x99 = -0.4389381125701739 * var_x98;
        const double var_x100 = pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 2);
        const double var_x101 = 1 / var_x100;
        const double var_x102 = exp(-0.003743588350780262 * var_chaste_interface__membrane__V);
        const double var_x103 = exp(0.01485884101040119 * NV_Ith_S(mParameters, 6));
        const double var_x104 = exp(-var_x8);
        const double var_x105 = 1.0 + 0.1245 * var_x102 + 0.036499999999999998 * var_x104 * (-0.14285714285714285 + 0.14285714285714285 * var_x103);
        const double var_x106 = NV_Ith_S(mParameters, 5) / (1.5 + NV_Ith_S(mParameters, 5));
        const double var_x107 = var_x106 * (0.00046607674967214262 * var_x102 + 0.037435883507802616 * var_x104 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x103)) / (pow(var_x105, 2) * (1.0 + 100.0 * var_x101));
        const double var_x108 = 0.40000000000000002 * var_x81 - var_x75 * var_x87;
        const double var_x109 = var_x108 * var_x75 * var_x91 / pow(var_x82, 2);
        const double var_x110 = var_x40 * var_x44 * var_x94 * NV_Ith_S(mParameters, 12) * var_chaste_interface__i_Kr_xr_gate__xr / pow(var_x95, 2);
        const double var_x111 = exp(-1.0000000006626968e-7);
        const double var_x112 = 1 / (-1.0 + var_x111);
        const double var_x113 = var_chaste_interface__Ca_r__Ca_r;
        const double var_x114 = var_x112 * (var_x18 + var_x111 * var_x113);
        const double var_x115 = exp(9.9999999933270713e-8);
        const double var_x116 = 1 / (-1.0 + var_x115);
        const double var_x117 = var_x116 * (var_x18 + var_x113 * var_x115);
        const double var_x118 = -15.0 + var_chaste_interface__membrane__V;
        const double var_x119 = fabs(var_x118) < 1.3356169352718439e-6;
        const double var_x120 = exp(-1.1230765052340785 + var_x24);
        const double var_x121 = var_x18 + var_x113 * var_x120;
        const double var_x122 = -1.0 + var_x120;
        const double var_x123 = 1 / var_x122;
        const double var_x124 = 3.510865186083326 * var_x123;
        const double var_x125 = var_x121 * var_x124;
        const double var_x126 = var_x118 * var_x120;
        const double var_x127 = 0.26286468023563031 * var_x126;
        const double var_x128 = pow(var_x122, (-2));
        const double var_x129 = var_x121 * var_x128;
        const double var_x130 = ((var_x119) ? (1.7554325942090168 * var_x114 + 1.7554325918743094 * var_x117) : (var_x125 - var_x127 * var_x129 + var_x123 * var_x127 * var_chaste_interface__Ca_r__Ca_r)) * NV_Ith_S(mParameters, 7);
        const double var_x131 = var_chaste_interface__i_Ca_L_d_gate__d * var_chaste_interface__i_Ca_L_f2_gate__f2 * var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca * var_chaste_interface__i_Ca_L_f_gate__f;
        const double var_x132 = var_x131 * var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2;
        const double var_x133 = var_x130 * var_x132;
        const double var_x134 = 3.8499135947999997e-9 * var_x0 * var_x17;
        const double var_x135 = ((var_x23) ? (var_x134 + (0.5 - 374358.83507802623 * var_chaste_interface__membrane__V) * (-var_x134 - 3.8499135947999997e-9 * var_x21 * var_x3)) : (var_x29 * var_x31));
        const double var_x136 = 0.00050000000000000001 + var_chaste_interface__Ca_i__Ca_i;
        const double var_x137 = 1 / var_x136;
        const double var_x138 = pow(var_x136, (-2));
        const double var_x139 = var_x138 * var_chaste_interface__Ca_i__Ca_i;
        const double var_x140 = var_x75 * var_x92;
        const double var_x141 = -1004882.8125 - var_x86 - 775361.25000000012 * NV_Ith_S(mParameters, 4);
        const double var_x142 = var_x108 * var_x83;
        const double var_x143 = var_x142 * var_x85 / pow((1.2936831875607387e-6 * var_x78 + 0.0018518248862973764 * var_x89 + 1.4927113702623908e-6 * var_x77 + 9.9514091350826051e-7 * var_x79 + 3.5825072886297377e-9 * var_x88 + var_chaste_interface__Ca_i__Ca_i), 2);
        const double var_x144 = 9.9030543773805519e-13 * var_x143;
        const double var_x145 = var_x142 * var_x90 / (pow(var_x84, 2) * pow(var_chaste_interface__Ca_i__Ca_i, 3));
        const double var_x146 = 1 / (0.018329999999999999 * var_chaste_interface__intracellular_ion_concentrations__Na_i + var_chaste_interface__intracellular_ion_concentrations__K_i);
        const double var_x147 = -26.712338705498265 * log(var_x146 * (0.018329999999999999 * NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 5))) + var_chaste_interface__membrane__V;
        const double var_x148 = var_x147 * var_chaste_interface__i_Ks_xs1_gate__xs1;
        const double var_x149 = var_x148 * var_x67 * var_x68 * var_x72 / pow(var_x69, 2);
        const double var_x150 = 1 / var_chaste_interface__intracellular_ion_concentrations__Na_i;
        const double var_x151 = log(var_x150 * NV_Ith_S(mParameters, 6));
        const double var_x152 = -26.712338705498265 * var_x151 + var_chaste_interface__membrane__V;
        const double var_x153 = var_x63 * pow(var_chaste_interface__i_Na_m_gate__m, 2) * NV_Ith_S(mParameters, 8);
        const double var_x154 = var_x152 * var_x64;
        const double var_x155 = var_x152 * pow(var_chaste_interface__i_Na_L_m_L_gate__m_L, 2) * var_chaste_interface__i_Na_L_h_L_gate__h_L;
        const double var_x156 = 4.6891709968709491e-6 * var_x117;
        const double var_x157 = (-15.000001335616934 + var_chaste_interface__membrane__V) * (-var_x156 - 4.6891710031074985e-6 * var_x114);
        const double var_x158 = ((var_x119) ? (var_x156 - 374358.83507888648 * var_x157) : (var_x118 * var_x125)) * NV_Ith_S(mParameters, 7);
        const double var_x159 = var_x158 * var_chaste_interface__i_Ca_L_f2_gate__f2 * var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 * var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca;
        const double var_x160 = var_x159 * var_chaste_interface__i_Ca_L_f_gate__f;
        const double var_x161 = var_x159 * var_chaste_interface__i_Ca_L_d_gate__d;
        const double var_x162 = var_x158 * var_chaste_interface__i_Ca_L_d_gate__d * var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 * var_chaste_interface__i_Ca_L_f_gate__f;
        const double var_x163 = var_x162 * var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca;
        const double var_x164 = var_x162 * var_chaste_interface__i_Ca_L_f2_gate__f2;
        const double var_x165 = var_x131 * var_x158;
        const double var_x166 = 6.5 - 0.13 * var_chaste_interface__membrane__V;
        const double var_x167 = NV_Ith_S(mParameters, 15) * var_chaste_interface__i_to_1_a_gate__a;
        const double var_x168 = var_x148 * NV_Ith_S(mParameters, 13);
        const double var_x169 = 7.7187999999999989e-8 * var_x1;
        const double var_x170 = 3.8593999999999993e-9 * var_x1;
        const double var_x171 = 3.8593999999999993e-9 * var_x4;
        const double var_x172 = ((var_x7) ? (var_x169 * var_x2 - 3743588.3507802621 * (-2.6712338705498262e-6 + var_chaste_interface__membrane__V) * (-var_x170 * var_x2 - var_x171 * var_x5)) : (var_x11 * var_x14 * var_chaste_interface__membrane__V));
        const double var_x173 = var_x59 * var_chaste_interface__i_Na_L_h_L_gate__h_L;
        const double var_x174 = var_x150 * var_x173;
        const double var_x175 = var_x150 * var_x65;
        const double var_x176 = var_x146 * var_x74;
        const double var_x177 = var_x100 * NV_Ith_S(mParameters, 4);
        const double var_x178 = -3 * var_x177 - 3.9000000000000004 * var_x100 - 0.00029268292682926828 * var_x76;
        const double var_x179 = var_x106 / (var_x105 * var_x78 * pow((0.01 + var_x101), 2));
        const double var_x180 = var_x177 * var_x80 * var_x92;
        const double var_x181 = ((var_x7) ? ((var_x169 + 20.0 * (0.5 - 187179.41753901311 * var_chaste_interface__membrane__V) * (-var_x170 - var_x171)) * var_chaste_interface__i_to_2_a_gate__a) : (0.028896009762002683 * var_x15));
        const double var_x182 = 1 / var_chaste_interface__intracellular_ion_concentrations__Cl_i;
        const double var_x183 = var_x37 * var_x43;
        const double var_x184 = 6.4983106368865622 * var_x183 - var_x48 * (1.053972635420138 * var_x37 * var_x49 + 1.6494869150645177 * var_x37 * var_x50) - 13.738155796237757 * var_x37 * var_x55;
        const double var_x185 = var_x183 * var_x53;
        const double var_x186 = 26.712338705498265 * var_x37;
        const double var_x187 = var_x36 * var_x37;
        const double var_x188 = var_x96 * var_chaste_interface__i_Kr_xr_gate__xr;
        const double var_x189 = var_x188 * var_x37;
        const double var_x190 = var_x115 * var_x116;
        const double var_x191 = 4.6891709968709491e-6 * var_x190;
        const double var_x192 = -var_x191 - 4.6891710031074985e-6 * var_x111 * var_x112;
        const double var_x193 = ((var_x119) ? (var_x191 + var_x192 * (5615383.0261832969 - 374358.83507888648 * var_chaste_interface__membrane__V)) : (var_x124 * var_x126)) * NV_Ith_S(mParameters, 7);
        const double var_x194 = var_x132 * var_x193;
        const double var_x195 = 0.14000000000000001 * var_x138;
        const double var_x196 = 0.0023800000000000002 + var_chaste_interface__Ca_i__Ca_i;
        const double var_x197 = 0.10000000000000001 / pow(var_x196, 2);
        const double var_x198 = 1.0 + var_x195 * var_chaste_interface__Ca_i__Ca_i + var_x197 * var_chaste_interface__Ca_i__Ca_i;
        const double var_x199 = 1 / var_x198;
        const double var_x200 = var_x199;
        const double var_x201 = 1.9455934936549115e-10 * var_x137;
        const double var_x202 = 1.0 - var_chaste_interface__Ca_MK_act__Ca_MK_trap;
        const double var_x203 = 1 / var_chaste_interface__Ca_r__Ca_r;
        const double var_x204 = 1.0 + 0.14999999999999999 * var_x203;
        const double var_x205 = 1 / var_x204;
        const double var_x206 = 0.050000000000000003 * var_x205;
        const double var_x207 = var_x202 * var_x206;
        const double var_x208 = 0.14999999999999999 + var_x207 + var_chaste_interface__Ca_MK_act__Ca_MK_trap;
        const double var_x209 = 1 / var_x208;
        const double var_x210 = var_x207 + var_chaste_interface__Ca_MK_act__Ca_MK_trap;
        const double var_x211 = var_x209 * var_x210;
        const double var_x212 = 0.00092000000000000003 - 0.00017000000000000001 * var_x211 + var_chaste_interface__Ca_i__Ca_i;
        const double var_x213 = 1 / var_x212;
        const double var_x214 = (1.0 + 0.75 * var_x211) * NV_Ith_S(mParameters, 2);
        const double var_x215 = var_x213 * var_x214;
        const double var_x216 = 0.04058823529411764 * var_x215;
        const double var_x217 = 0.04058823529411764 * var_chaste_interface__Ca_i__Ca_i;
        const double var_x218 = var_x214 / pow(var_x212, 2);
        const double var_x219 = var_x217 * var_x218;
        const double var_x220 = var_x140 * var_x76;
        const double var_x221 = 6.7016758831103969e-21 * var_x143;
        const double var_x222 = 3.8499135947999997e-9 * var_x20;
        const double var_x223 = 0.005411764705882352 * NV_Ith_S(mParameters, 0);
        const double var_x224 = 1 - var_x206;
        const double var_x225 = var_x209 * var_x224;
        const double var_x226 = var_x210 / pow(var_x208, 2);
        const double var_x227 = var_x226 * (-1.0 + var_x206);
        const double var_x228 = 0.75 * var_x225 + 0.75 * var_x227;
        const double var_x229 = var_x213 * NV_Ith_S(mParameters, 2);
        const double var_x230 = var_x217 * var_x229;
        const double var_x231 = 0.00017000000000000001 * var_x225 + 0.00017000000000000001 * var_x227;
        const double var_x232 = pow(var_chaste_interface__Ca_r__Ca_r, (-2));
        const double var_x233 = var_x202 * var_x232 / pow(var_x204, 2);
        const double var_x234 = var_x209 * var_x233;
        const double var_x235 = var_x226 * var_x233;
        const double var_x236 = 0.0056249999999999998 * var_x234 - 0.0056249999999999998 * var_x235;
        const double var_x237 = 1.2750000000000001e-6 * var_x234 - 1.2750000000000001e-6 * var_x235;
        const double var_x238 = exp(-0.090909090909090912 * var_chaste_interface__membrane__V);
        const double var_x239 = 0.080000000000000002 * var_x238;
        const double var_x240 = 1 / (1.0 - exp(1.0000000045806701e-7));
        const double var_x241 = 3.2000000146581445e-7 * var_x240;
        const double var_x242 = 1 / (1.0 - exp(-9.9999999747524276e-8));
        const double var_x243 = 47.130000000000003 + var_chaste_interface__membrane__V;
        const double var_x244 = fabs(var_x243) < 1.0000000010279564e-6;
        const double var_x245 = -0.10000000000000001 * var_chaste_interface__membrane__V;
        const double var_x246 = exp(-4.7130000000000001 + var_x245);
        const double var_x247 = 1.0 - var_x246;
        const double var_x248 = 0.32000000000000001 / var_x247;
        const double var_x249 = ((var_x244) ? (-var_x241 + 499999.99948602181 * (47.130001000000007 + var_chaste_interface__membrane__V) * (var_x241 + 3.1999999919207769e-7 * var_x242)) : (var_x243 * var_x248));
        const double var_x250 = var_x239 + var_x249;
        const double var_x251 = 1 / var_x250;
        const double var_x252 = var_x249 * var_x251;
        const double var_x253 = ((var_x244) ? (0.15999999943156581 * var_x242 + 0.16000000056843419 * var_x240) : (var_x248 - 0.032000000000000001 * var_x243 * var_x246 / pow(var_x247, 2)));
        const double var_x254 = 0.0072727272727272727 * var_x238;
        const double var_x255 = -var_x254 + var_x253;
        const double var_x256 = var_x249;
        const double var_x257 = (var_x239 + var_x256) * (var_x251 * var_x253 + var_x249 * (var_x254 - var_x253) / pow(var_x250, 2));
        const double var_x258 = -var_x239 - var_x256;
        const double var_x259 = exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 10) - 0.14705882352941177 * var_chaste_interface__membrane__V);
        const double var_x260 = var_chaste_interface__membrane__V < -40.0;
        const double var_x261 = ((var_x260) ? (0.13500000000000001 * var_x259) : (0));
        const double var_x262 = var_x261;
        const double var_x263 = exp(0.34999999999999998 * var_chaste_interface__membrane__V - 0.34999999999999998 * NV_Ith_S(mParameters, 10));
        const double var_x264 = exp(0.079000000000000001 * var_chaste_interface__membrane__V - 0.079000000000000001 * NV_Ith_S(mParameters, 10));
        const double var_x265 = exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 10) - 0.0900900900900901 * var_chaste_interface__membrane__V);
        const double var_x266 = 1.0 + var_x265;
        const double var_x267 = ((var_x260) ? (310000.0 * var_x263 + 3.5600000000000001 * var_x264) : (7.6923076923076916 / var_x266));
        const double var_x268 = var_x267;
        const double var_x269 = ((var_x260) ? (-0.019852941176470591 * var_x259) : (0));
        const double var_x270 = var_x261 + var_x267;
        const double var_x271 = 0.01 * NV_Ith_S(mParameters, 9);
        const double var_x272 = 1.0 - var_x271;
        const double var_x273 = var_x272 / var_x270;
        const double var_x274 = ((var_x260) ? (0.28123999999999999 * var_x264 + 108500.0 * var_x263) : (0.693000693000693 * var_x265 / pow(var_x266, 2)));
        const double var_x275 = exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 10) - 0.13780000000000001 * var_chaste_interface__membrane__V);
        const double var_x276 = 1.0 + var_x275;
        const double var_x277 = exp(0.01052 * NV_Ith_S(mParameters, 10) - 0.01052 * var_chaste_interface__membrane__V);
        const double var_x278 = var_x277 / var_x276;
        const double var_x279 = exp(-3.2000000000000002 + var_x245 + 0.10000000000000001 * NV_Ith_S(mParameters, 10));
        const double var_x280 = 1.0 + var_x279;
        const double var_x281 = exp(2.5349999999999999e-7 * NV_Ith_S(mParameters, 10) - 2.5349999999999999e-7 * var_chaste_interface__membrane__V);
        const double var_x282 = var_x281 / var_x280;
        const double var_x283 = ((var_x260) ? (0.1212 * var_x278) : (0.29999999999999999 * var_x282));
        const double var_x284 = var_x283;
        const double var_x285 = 37.780000000000001 + var_chaste_interface__membrane__V;
        const double var_x286 = exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V - 0.311 * NV_Ith_S(mParameters, 10));
        const double var_x287 = 1.0 + var_x286;
        const double var_x288 = 1 / var_x287;
        const double var_x289 = exp(0.24440000000000001 * var_chaste_interface__membrane__V - 0.24440000000000001 * NV_Ith_S(mParameters, 10));
        const double var_x290 = exp(0.043909999999999998 * NV_Ith_S(mParameters, 10) - 0.043909999999999998 * var_chaste_interface__membrane__V);
        const double var_x291 = -127140.0 * var_x289 - 3.4740000000000003e-5 * var_x290;
        const double var_x292 = var_x288 * var_x291;
        const double var_x293 = ((var_x260) ? (var_x285 * var_x292) : (0));
        const double var_x294 = var_x293;
        const double var_x295 = ((var_x260) ? (var_x292 + var_x285 * var_x288 * (1.5254334000000001e-6 * var_x290 - 31073.016 * var_x289) - 0.311 * var_x285 * var_x286 * var_x291 / pow(var_x287, 2)) : (0));
        const double var_x296 = var_x283 + var_x293;
        const double var_x297 = var_x272 / var_x296;
        const double var_x298 = ((var_x260) ? (-0.001275024 * var_x278 + 0.016701360000000002 * var_x275 * var_x277 / pow(var_x276, 2)) : (-7.6049999999999996e-8 * var_x282 + 0.029999999999999999 * var_x279 * var_x281 / pow(var_x280, 2)));
        const double var_x299 = 0.16393442622950821 * var_chaste_interface__membrane__V;
        const double var_x300 = exp(11.311475409836067 + var_x299);
        const double var_x301 = 1.0 + var_x300;
        const double var_x302 = exp(-4.166666666666667 - 0.16666666666666666 * var_chaste_interface__membrane__V);
        const double var_x303 = 1.0 + var_x302;
        const double var_x304 = 1 / var_x303;
        const double var_x305 = 1 / (175.0 + 125.0 * var_x304);
        const double var_x306 = exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__V);
        const double var_x307 = 1.0 + var_x306;
        const double var_x308 = exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__V);
        const double var_x309 = var_x308 / var_x307;
        const double var_x310 = exp(0.59347181008902072 - 0.14836795252225518 * var_chaste_interface__membrane__V);
        const double var_x311 = 1.0 + var_x310;
        const double var_x312 = 1 / (0.58999999999999997 + 0.80000000000000004 * var_x309);
        const double var_x313 = pow((-1 + 0.40000000000000002 * var_chaste_interface__membrane__V), 2);
        const double var_x314 = 0.10000000000000001 * var_chaste_interface__membrane__V;
        const double var_x315 = exp(1.8 + var_x314);
        const double var_x316 = 1.0 + var_x315;
        const double var_x317 = 1 / var_x316;
        const double var_x318 = 1 / (4.0 + 0.03125 * var_x313);
        const double var_x319 = 0.10000000000000001 * var_x315 / pow(var_x316, 2);
        const double var_x320 = pow((-1 + 0.053763440860215048 * var_chaste_interface__membrane__V), 2);
        const double var_x321 = 1 / (38.0 + 24.217200000000005 * var_x320);
        const double var_x322 = 1 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca_r__Ca_r);
        const double var_x323 = 10.0 * var_x211;
        const double var_x324 = 1 / (0.5 + var_x323 + var_x322);
        const double var_x325 = var_x160 * var_chaste_interface__i_Ca_L_d_gate__d;
        const double var_x326 = -var_x325;
        const double var_x327 = 0.014999999999999999 / pow((0.050000000000000003 + var_x326), 2);
        const double var_x328 = var_x324 * var_x327;
        const double var_x329 = -10.0 * var_x225 - 10.0 * var_x227;
        const double var_x330 = 0.01 * (0.14999999999999999 - var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca + 0.55000000000000004 * var_x322 + 0.29999999999999999 / (1.0 - 20.0 * var_x325)) / pow((0.050000000000000003 + var_x211 + 0.10000000000000001 * var_x322), 2);
        const double var_x331 = pow((0.0030000000000000001 + var_chaste_interface__Ca_r__Ca_r), (-2));
        const double var_x332 = 0.074999999999999997 * var_x235 - 0.074999999999999997 * var_x234;
        const double var_x333 = exp(-4.375 - 25.0 * var_x325);
        const double var_x334 = 1.0 + var_x333;
        const double var_x335 = 1 / var_x334;
        const double var_x336 = 1 / (125.0 + 300.0 * var_x335);
        const double var_x337 = 0.01 / pow((0.01 + var_x326), 2);
        const double var_x338 = var_x336 * var_x337;
        const double var_x339 = 0.083333333333333329 * var_x333 * (-var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 + 1 / (1.0 - 100.0 * var_x325)) / (pow(var_x334, 2) * pow((0.41666666666666669 + var_x335), 2));
        const double var_x340 = exp(-5.4098360655737707 - var_x299);
        const double var_x341 = 1.0 + var_x340;
        const double var_x342 = 0.033333333333333333 * var_chaste_interface__membrane__V;
        const double var_x343 = exp(0.54333333333333333 + var_x342);
        const double var_x344 = exp(-0.54333333333333333 - var_x342);
        const double var_x345 = 1.0680000000000001 * var_x343;
        const double var_x346 = 1.0680000000000001 * var_x344;
        const double var_x347 = exp(9.0909090909090917 + 0.15151515151515152 * var_chaste_interface__membrane__V);
        const double var_x348 = 1.0 + var_x347;
        const double var_x349 = exp(4.6558441558441563 + 0.064935064935064929 * var_chaste_interface__membrane__V);
        const double var_x350 = exp(-0.86074429771908767 - 0.012004801920768308 * var_chaste_interface__membrane__V);
        const double var_x351 = 0.014999999999999999 * var_x349;
        const double var_x352 = 0.014999999999999999 * var_x350;
        const double var_x353 = 0.050000000000000003 * var_chaste_interface__membrane__V;
        const double var_x354 = exp(-2.7000000000000002 - var_x353);
        const double var_x355 = 1.0 + var_x354;
        const double var_x356 = var_x354 / var_x355;
        const double var_x357 = 25.0 * var_x356;
        const double var_x358 = exp(-3.7999999999999998 + var_x353);
        const double var_x359 = 1.0 + var_x358;
        const double var_x360 = var_x358 / var_x359;
        const double var_x361 = 25.0 * var_x360;
        const double var_x362 = var_x357 + var_x361;
        const double var_x363 = 1 / var_x362;
        const double var_x364 = 1.25 * pow(var_x354, 2) / pow(var_x355, 2);
        const double var_x365 = 1.25 * var_x360;
        const double var_x366 = 1.25 * var_x356;
        const double var_x367 = 1.25 * pow(var_x358, 2) / pow(var_x359, 2);
        const double var_x368 = exp(-1.6499999999999999 + var_x314);
        const double var_x369 = 1.0 + var_x368;
        const double var_x370 = 1 / var_x369;
        const double var_x371 = 1 / (6.0 + 5.0 * var_x370);
        const double var_x372 = 0.066666666666666666 * var_chaste_interface__membrane__V;
        const double var_x373 = exp(1.6666666666666667 + var_x372);
        const double var_x374 = 1.0 + var_x373;
        const double var_x375 = 1 / var_x374;
        const double var_x376 = exp(-2.6666666666666665 + var_x372);
        const double var_x377 = 1.0 + var_x376;
        const double var_x378 = var_x376 / var_x377;
        const double var_x379 = 0.002 * var_x373 / pow(var_x374, 2);
        const double var_x380 = 0.029999999999999999 * var_x375;
        const double var_x381 = 1 / (var_x380 + 0.10000000000000001 * var_x378);
        const double var_x382 = exp(-2.5 + var_x314);
        const double var_x383 = 1.0 + var_x382;
        const double var_x384 = 1 / var_x383;
        const double var_x385 = 1 / (21.5 + 30.0 * var_x384);
        const double var_x386 = exp(1.7333333333333334 + var_x372);
        const double var_x387 = 1.0 + var_x386;
        const double var_x388 = 1 / var_x387;
        const double var_x389 = exp(-0.66666666666666663 + var_x372);
        const double var_x390 = 1.0 + var_x389;
        const double var_x391 = var_x389 / var_x390;
        const double var_x392 = 0.00029466666666666671 * var_x386 / pow(var_x387, 2);
        const double var_x393 = 0.0044200000000000003 * var_x388;
        const double var_x394 = 1 / (var_x393 + 0.050000000000000003 * var_x391);
        const double var_x395 = exp(-0.0069387755102040824 - 0.081632653061224483 * var_chaste_interface__membrane__V);
        const double var_x396 = 1.0 + var_x395;
        const double var_x397 = exp(0.20000000000000001 * var_chaste_interface__membrane__V);
        const double var_x398 = 1.0 + var_x397;
        const double var_x399 = 1 / var_x398;
        const double var_x400 = 1 / (100.0 + 900.0 * var_x399);
        const double var_x401 = exp(0.65693430656934315 - 0.072992700729927015 * var_chaste_interface__membrane__V);
        const double var_x402 = 1.0 + var_x401;
        const double var_x403 = 1 / var_x402;
        const double var_x404 = var_x403 - var_chaste_interface__i_Ks_xs1_gate__xs1;
        const double var_x405 = 1 / (-1.0 + exp(1.0000000000331966e-7));
        const double var_x406 = 1 / (-1.0 + exp(-1.0000000000331966e-7));
        const double var_x407 = exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__membrane__V);
        const double var_x408 = 1.0 - var_x407;
        const double var_x409 = 1 / var_x408;
        const double var_x410 = 7.6100000000000007e-5 * var_x409;
        const double var_x411 = 44.600000000000001 + var_chaste_interface__membrane__V;
        const double var_x412 = var_x407 * var_x411 / pow(var_x408, 2);
        const double var_x413 = var_x410 - 0.00075871700000000012 * var_x412;
        const double var_x414 = 2.8125000000933653e-10 * var_x405;
        const double var_x415 = var_x410 * var_x411;
        const double var_x416 = -var_x414;
        const double var_x417 = (-0.55000078125000007 + var_chaste_interface__membrane__V) * (var_x416 - 2.8125000000933653e-10 * var_x406);
        const double var_x418 = 639999.9999787542 * var_x417;
        const double var_x419 = 0.072992700729927015 * var_x401 / pow(var_x402, 2);
        const double var_x420 = -0.55000000000000004 + var_chaste_interface__membrane__V;
        const double var_x421 = fabs(var_x420) < 7.8125000002593481e-7;
        const double var_x422 = 1 / (1.0 - exp(-9.9999949512152856e-8));
        const double var_x423 = 1 / (1.0 - exp(1.0000002035326362e-7));
        const double var_x424 = exp(-0.070400000000000004 + 0.128 * var_chaste_interface__membrane__V);
        const double var_x425 = -1.0 + var_x424;
        const double var_x426 = 1 / var_x425;
        const double var_x427 = 0.00036000000000000002 * var_x426;
        const double var_x428 = var_x420 * var_x424 / pow(var_x425, 2);
        const double var_x429 = var_x427 - 4.6080000000000006e-5 * var_x428;
        const double var_x430 = 7.6329002496322579e-13 * var_x423;
        const double var_x431 = var_x420 * var_x427;
        const double var_x432 = (44.600000010030094 + var_chaste_interface__membrane__V) * (var_x430 + 7.6328948424020387e-13 * var_x422);
        const double var_x433 = 49850007.511046082 * var_x432;
        const double var_x434 = fabs(var_x411) < 1.0030088759549471e-8;
        const double var_x435 = -var_x415;
        const double var_x436 = -var_x431;
        const double var_x437 = var_x403 - var_chaste_interface__i_Ks_xs2_gate__xs2;
        const double var_x438 = 3.8050000000000003e-5 * var_x409;
        const double var_x439 = var_x438 - 0.00037935850000000006 * var_x412;
        const double var_x440 = 1.4062500000466826e-10 * var_x405;
        const double var_x441 = var_x411 * var_x438;
        const double var_x442 = 319999.9999893771 * var_x417;
        const double var_x443 = 0.00018000000000000001 * var_x426;
        const double var_x444 = var_x443 - 2.3040000000000003e-5 * var_x428;
        const double var_x445 = 3.8164501248161289e-13 * var_x423;
        const double var_x446 = var_x420 * var_x443;
        const double var_x447 = 24925003.755523041 * var_x432;
        const double var_x448 = -var_x441;
        const double var_x449 = -var_x446;
        const double var_x450 = 2.010502764933119e-20 * var_x143;
        const double var_x451 = var_x152 * NV_Ith_S(mParameters, 3);
        const double var_x452 = var_x154 * NV_Ith_S(mParameters, 3);
        const double var_x453 = log(100.0 * var_x182);
        const double var_x454 = var_x151 + var_x453;
        const double var_x455 = pow(var_x454, 4);
        const double var_x456 = 2.8839711417365218e-9 * pow(var_x454, 7) / pow((1 + 0.0085580149227345564 * var_x455), 2);
        const double var_x457 = 20.048989239399607 * pow(var_x454, 3) / (59494197.640692554 + 509152.231225166 * var_x455);
        const double var_x458 = var_x150 * var_x456 - var_x150 * var_x457;
        const double var_x459 = var_x182 * var_x456 - var_x182 * var_x457;
        const double var_x460 = var_x39 + 26.712338705498265 * var_x453;
        const double var_x461 = 0.00018900582374462349 / (87.825100000000006 + var_x460);
        const double var_x462 = 2.4504050574882179e-8 * var_x460 / pow((1 + 0.30415380916729118 * var_x38 + 0.30415380916729118 * var_x453), 2);
        const double var_x463 = var_x182 * var_x462 - var_x182 * var_x461;
        const double var_x464 = var_x37 * var_x462 - var_x37 * var_x461;
        const double var_x465 = 2.8550729182210769e-9 * var_x57;
        const double var_x466 = -1.3534563434121124e-9 * var_chaste_interface__i_to_1_i2_gate__i2 - 5.4138253736484496e-9 * var_chaste_interface__i_to_1_i_gate__i;
        const double var_x467 = var_x167 * var_x466;
        const double var_x468 = -6.767281717060562e-9 - 4.0603690302363372e-9 * var_x70;
        const double var_x469 = var_x468 * var_x72;
        const double var_x470 = var_x469 * var_chaste_interface__i_Ks_xs1_gate__xs1;
        const double var_x471 = -2.9704178641172085e-9 * var_x98;
        const double var_x472 = var_x40 * NV_Ith_S(mParameters, 3);
        const double var_x473 = var_x167 * NV_Ith_S(mParameters, 3);
        const double var_x474 = var_x146 * var_x470;
        const double var_x475 = 0.0025000000000000005 * var_x205;
        const double var_x476 = 0.5 * var_chaste_interface__Ca_i__Ca_i;
        const double var_x477 = var_x218 * var_x476;
        const double var_x478 = var_x229 * var_x476;
        const double var_x479 = 0.80000000000000004 + var_chaste_interface__Ca_JSR__Ca_JSR;
        const double var_x480 = pow(var_x479, (-2));
        const double var_x481 = 1 / (1.0 + 8.0 * var_x480);
        const double var_x482 = exp(2.6000000000000001 + 0.20000000000000001 * var_x158);
        const double var_x483 = 1.0 + var_x482;
        const double var_x484 = -var_chaste_interface__Ca_r__Ca_r + var_chaste_interface__Ca_JSR__Ca_JSR;
        const double var_x485 = var_x484 * NV_Ith_S(mParameters, 1) * var_chaste_interface__q_rel_ri_gate__ri;
        const double var_x486 = var_x482 * var_x485 * var_chaste_interface__q_rel_ro_gate__ro / pow(var_x483, 2);
        const double var_x487 = var_x130 * var_x486;
        const double var_x488 = 1 / var_x483;
        const double var_x489 = var_x488 * NV_Ith_S(mParameters, 1) * var_chaste_interface__q_rel_ro_gate__ro;
        const double var_x490 = var_x489 * var_chaste_interface__q_rel_ri_gate__ri;
        const double var_x491 = var_x490;
        const double var_x492 = var_x193 * var_x486;
        const double var_x493 = var_x484 * var_x489;
        const double var_x494 = var_x481;
        const double var_x495 = var_x485 * var_x488;
        const double var_x496 = 0.0086999999999999994 + var_chaste_interface__Ca_r__Ca_r;
        const double var_x497 = pow(var_x496, (-2));
        const double var_x498 = var_x497 * var_chaste_interface__Ca_r__Ca_r;
        const double var_x499 = 0.00087000000000000001 + var_chaste_interface__Ca_r__Ca_r;
        const double var_x500 = pow(var_x499, (-2));
        const double var_x501 = 0.094 * var_x500;
        const double var_x502 = 1 / (1.0 + 2.2480000000000002 * var_x498 + var_x501 * var_chaste_interface__Ca_r__Ca_r);
        const double var_x503 = var_x502;
        const double var_x504 = 1.1504378919002956e-7 * var_x502;
        const double var_x505 = 0.23999999999999996 * var_x490;
        const double var_x506 = 0.23999999999999996 * var_x502;
        const double var_x507 = exp(3.3333333333333335 + 66.666666666666671 * var_x325);
        const double var_x508 = 1.0 + var_x507;
        const double var_x509 = var_x507 / pow(var_x508, 2);
        const double var_x510 = 1 / var_x508;
        const double var_x511 = exp(-16.0 + 80.0 * var_x510 + 40000.0 * var_chaste_interface__Ca_r__Ca_r);
        const double var_x512 = 1.0 + var_x511;
        const double var_x513 = exp(-15.0 + 5000.0 * var_chaste_interface__Ca_r__Ca_r + 15.0 * var_x510);
        const double var_x514 = 1.0 + var_x513;
        const double var_x515 = 1 / var_x514;
        const double var_x516 = 350.0 - var_x323;
        const double var_x517 = var_x515 * var_x516;
        const double var_x518 = 1 / (3.0 + var_x323 + var_x517);
        const double var_x519 = var_x511 * var_x518 / pow(var_x512, 2);
        const double var_x520 = 5333.333333333333 * var_x519;
        const double var_x521 = var_x509 * var_x520;
        const double var_x522 = (-var_chaste_interface__q_rel_ri_gate__ri + 1 / var_x512) / pow((0.29999999999999999 + var_x211 + 0.10000000000000001 * var_x517), 2);
        const double var_x523 = var_x513 * var_x516 / pow(var_x514, 2);
        const double var_x524 = 10.0 * var_x522 * var_x523;
        const double var_x525 = var_x509 * var_x524;
        const double var_x526 = var_x160 * var_x509;
        const double var_x527 = 0.01 * var_x522;
        const double var_x528 = var_x194 * var_x509;
        const double var_x529 = -var_x157 + 1.2525872391612789e-11 * var_x117;
        const double var_x530 = 140144537401.62091 * var_x529;
        const double var_x531 = pow(var_x121, 2);
        const double var_x532 = var_x128 * var_x531;
        const double var_x533 = -1 + var_x372;
        const double var_x534 = pow(var_x533, 2);
        const double var_x535 = var_x120 * var_x534;
        const double var_x536 = 415.29710452059015 * var_x535;
        const double var_x537 = 0.33333333333333331 * ((var_x119) ? (var_x530 * (9.3783419937418982e-6 * var_x117 + 9.3783420062149971e-6 * var_x114)) : (var_x532 * (-369.78523064555725 + 24.652348709703816 * var_chaste_interface__membrane__V) + var_x129 * var_x536 * var_chaste_interface__Ca_r__Ca_r - var_x531 * var_x536 / pow(var_x122, 3)));
        const double var_x538 = pow(NV_Ith_S(mParameters, 7), 2);
        const double var_x539 = pow(var_chaste_interface__i_Ca_L_d_gate__d, 2);
        const double var_x540 = pow(var_chaste_interface__i_Ca_L_f2_gate__f2, 2);
        const double var_x541 = pow(var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2, 2);
        const double var_x542 = pow(var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca, 2);
        const double var_x543 = pow(var_chaste_interface__i_Ca_L_f_gate__f, 2);
        const double var_x544 = var_x538 * var_x539 * var_x540 * var_x541 * var_x542 * var_x543;
        const double var_x545 = ((var_x119) ? (140144537401.62091 * pow(var_x529, 2)) : (2773.3892298416795 * var_x532 * var_x534));
        const double var_x546 = var_x544 * var_x545;
        const double var_x547 = 1.0 + var_x546;
        const double var_x548 = 1 / var_x547;
        const double var_x549 = pow(var_chaste_interface__Ca_JSR__Ca_JSR, 1.8999999999999999);
        const double var_x550 = 0.0028 + var_chaste_interface__Ca_r__Ca_r;
        const double var_x551 = 1 / var_x550;
        const double var_x552 = pow((var_x551 * var_chaste_interface__Ca_r__Ca_r), 1.8999999999999999);
        const double var_x553 = 1 / (var_x549 + 1644.6531773416521 * var_x552);
        const double var_x554 = var_x549 * var_x553;
        const double var_x555 = var_x548 * var_x554;
        const double var_x556 = var_x544 * var_x555;
        const double var_x557 = pow(var_chaste_interface__i_Ca_L_d_gate__d, 4);
        const double var_x558 = pow(var_x547, (-2));
        const double var_x559 = pow(NV_Ith_S(mParameters, 7), 4);
        const double var_x560 = pow(var_chaste_interface__i_Ca_L_f2_gate__f2, 4);
        const double var_x561 = pow(var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2, 4);
        const double var_x562 = pow(var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca, 4);
        const double var_x563 = pow(var_chaste_interface__i_Ca_L_f_gate__f, 4);
        const double var_x564 = var_x554 * var_x558 * var_x559 * var_x560 * var_x561 * var_x562 * var_x563;
        const double var_x565 = var_x545 * var_x557 * var_x564;
        const double var_x566 = 0.66666666666666663 * var_x538 * var_x540 * var_x541 * var_x542 * var_x545 * var_x555;
        const double var_x567 = 0.66666666666666663 * ((var_x119) ? (1.9640491363514324e+22 * pow(var_x529, 4)) : (7691687.8202018235 * pow(var_x121, 4) * pow(var_x533, 4) / pow(var_x122, 4)));
        const double var_x568 = var_x554 * var_x557 * var_x558 * var_x559 * var_x561 * var_x562 * var_x567;
        const double var_x569 = 0.66666666666666663 * var_x538 * var_x539 * var_x541 * var_x543 * var_x545 * var_x555;
        const double var_x570 = var_x554 * var_x557 * var_x558 * var_x559 * var_x560 * var_x563 * var_x567;
        const double var_x571 = var_x546 * var_x548;
        const double var_x572 = var_x571 / pow((var_x552 + 0.00060803092942449902 * var_x549), 2);
        const double var_x573 = 0.33333333333333331 * ((var_x119) ? (var_x530 * (2.5051744783225578e-11 * var_x190 + 2 * var_x192 * (15.000001335616934 - var_chaste_interface__membrane__V))) : (5546.778459683359 * var_x129 * var_x535));
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (-0.011725000000000001 + var_x62 + var_x74 + var_x99 - var_x133 - var_x16 - var_x33 - var_x65 - var_x93 + 0.021094680534898786 * var_x110 - 0.61875000000000002 * var_x107 - 0.0027599999999999999 * var_x36 - 0.0065699975556193606 * var_x109 - 0.00046153846153846147 * var_x66 + var_x40 * (0.10468673984798647 * var_x54 - var_x56 * var_x58) - var_x60 * var_chaste_interface__i_Na_L_h_L_gate__h_L - var_x97 * var_chaste_interface__i_Kr_xr_gate__xr - 0.13 * var_chaste_interface__i_Ca_T_b_gate__b * var_chaste_interface__i_Ca_T_g_gate__g);
        IJth(rJacobian, 1, 0) = -var_x200 * (3.383640858530281e-9 * var_x33 - 6.767281717060562e-9 * var_x93 - 4.446102433927548e-11 * var_x109);
        IJth(rJacobian, 2, 0) = var_x257 + var_x255 * (var_x252 - var_chaste_interface__i_Na_m_gate__m);
        IJth(rJacobian, 3, 0) = (var_x262 + var_x268) * (var_x269 * var_x273 + var_x261 * var_x272 * (-var_x269 - var_x274) / pow(var_x270, 2)) + (var_x269 + var_x274) * (var_x271 - var_chaste_interface__i_Na_h_gate__h + var_x261 * var_x273);
        IJth(rJacobian, 4, 0) = (var_x284 + var_x294) * (var_x295 * var_x297 + var_x272 * var_x293 * (-var_x295 - var_x298) / pow(var_x296, 2)) + (var_x295 + var_x298) * (var_x271 - var_chaste_interface__i_Na_j_gate__j + var_x293 * var_x297);
        IJth(rJacobian, 5, 0) = var_x257 + var_x255 * (var_x252 - var_chaste_interface__i_Na_L_m_L_gate__m_L);
        IJth(rJacobian, 6, 0) = -0.16393442622950821 * var_x300 * var_x305 / pow(var_x301, 2) - 0.00068027210884353737 * var_x302 * (-var_chaste_interface__i_Na_L_h_L_gate__h_L + 1 / var_x301) / (pow(var_x303, 2) * pow((1 + 0.7142857142857143 * var_x304), 2));
        IJth(rJacobian, 7, 0) = 1.5624999999999998 * (-var_chaste_interface__i_Ca_L_d_gate__d + 1 / var_x311) * (-0.041599999999999998 * var_x309 + 0.10560000000000001 * var_x306 * var_x308 / pow(var_x307, 2)) / pow((0.73749999999999993 + var_x309), 2) + 0.14836795252225518 * var_x310 * var_x312 / pow(var_x311, 2);
        IJth(rJacobian, 8, 0) = -var_x318 * var_x319 + 0.0625 * (0.025000000000000001 - 0.01 * var_chaste_interface__membrane__V) * (var_x317 - var_chaste_interface__i_Ca_L_f_gate__f) / pow((1 + 0.0078125 * var_x313), 2);
        IJth(rJacobian, 9, 0) = -var_x319 * var_x321 + 0.0006925207756232687 * (2.6040000000000005 - 0.14000000000000001 * var_chaste_interface__membrane__V) * (var_x317 - var_chaste_interface__i_Ca_L_f2_gate__f2) / pow((1 + 0.63729473684210547 * var_x320), 2);
        IJth(rJacobian, 10, 0) = var_x133 * var_x328;
        IJth(rJacobian, 11, 0) = var_x133 * var_x338 - var_x133 * var_x339;
        IJth(rJacobian, 12, 0) = (-var_chaste_interface__i_Ca_T_b_gate__b + 1 / var_x341) * (0.0356 * var_x343 - 0.0356 * var_x344) + 0.16393442622950821 * var_x340 * (var_x345 + var_x346) / pow(var_x341, 2);
        IJth(rJacobian, 13, 0) = (-var_chaste_interface__i_Ca_T_g_gate__g + 1 / var_x348) * (0.00097402597402597392 * var_x349 - 0.0001800720288115246 * var_x350) - 0.15151515151515152 * var_x347 * (var_x351 + var_x352) / pow(var_x348, 2);
        IJth(rJacobian, 14, 0) = var_x362 * (var_x363 * var_x365 - var_x363 * var_x367 + 0.040000000000000001 * var_x360 * (var_x366 + var_x367 - var_x364 - var_x365) / pow((var_x356 + var_x360), 2)) + (-var_chaste_interface__i_to_1_a_gate__a + var_x361 * var_x363) * (var_x364 + var_x365 - var_x366 - var_x367);
        IJth(rJacobian, 15, 0) = var_x371 * (-var_x379 * var_x381 + 2.9999999999999996 * var_x375 * (var_x379 - 0.0066666666666666671 * var_x378 + 0.0066666666666666671 * pow(var_x376, 2) / pow(var_x377, 2)) / pow((var_x378 + 0.29999999999999999 * var_x375), 2)) + 0.013888888888888888 * var_x368 * (-var_chaste_interface__i_to_1_i_gate__i + var_x380 * var_x381) / (pow(var_x369, 2) * pow((1 + 0.83333333333333337 * var_x370), 2));
        IJth(rJacobian, 16, 0) = var_x385 * (-var_x392 * var_x394 + 1.768 * var_x388 * (var_x392 - 0.0033333333333333335 * var_x391 + 0.0033333333333333335 * pow(var_x389, 2) / pow(var_x390, 2)) / pow((var_x391 + 0.088400000000000006 * var_x388), 2)) + 0.0033333333333333335 * var_x382 * (-var_chaste_interface__i_to_1_i2_gate__i2 + var_x393 * var_x394) / (pow(var_x383, 2) * pow((0.71666666666666667 + var_x384), 2));
        IJth(rJacobian, 17, 0) = 0.081632653061224483 * var_x395 * var_x400 / pow(var_x396, 2) + 0.00022222222222222223 * var_x397 * (-var_chaste_interface__i_Kr_xr_gate__xr + 1 / var_x396) / (pow(var_x398, 2) * pow((0.1111111111111111 + var_x399), 2));
        IJth(rJacobian, 18, 0) = ((var_x421) ? (var_x404 * (var_x413 + 0.00018000000000000001 * var_x405 + 0.00018000000000000001 * var_x406) + var_x419 * (var_x414 + var_x415 - var_x418)) : ((var_x434) ? (var_x404 * (var_x429 + 3.8049986522476652e-5 * var_x422 + 3.8050013477523354e-5 * var_x423) + var_x419 * (var_x431 + var_x433 - var_x430)) : (var_x404 * (var_x413 + var_x429) + var_x419 * (var_x415 + var_x431))));
        IJth(rJacobian, 19, 0) = ((var_x421) ? (var_x419 * (var_x440 + var_x441 - var_x442) + var_x437 * (var_x439 + 9.0000000000000006e-5 * var_x405 + 9.0000000000000006e-5 * var_x406)) : ((var_x434) ? (var_x419 * (var_x446 + var_x447 - var_x445) + var_x437 * (var_x444 + 1.9024993261238326e-5 * var_x422 + 1.9025006738761677e-5 * var_x423)) : (var_x419 * (var_x441 + var_x446) + var_x437 * (var_x439 + var_x444))));
        IJth(rJacobian, 21, 0) = (-1.6918204292651404e-11 - 2.5292715417513851e-10 * var_x173 - 2.0301845151181685e-8 * var_x93 - 6.767281717060562e-9 * var_x65 - 1.3338307301782643e-10 * var_x109 - 1.2561766687293667e-8 * var_x107) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 22, 0) = (-1.5226383863386264e-12 - 6.767281717060562e-9 * var_x16) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 23, 0) = (-6.0905535453545056e-11 + var_x467 + var_x470 + var_x471 + 1.4275364591105386e-10 * var_x110 + 8.3745111248624455e-9 * var_x107 - 3.1233607924894898e-12 * var_x66 - 1.8677697539087149e-11 * var_x36 - 2.9121743765854985e-9 * var_x188 + var_x40 * (7.0844466059195419e-10 * var_x54 - var_x465 * var_x56)) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 26, 0) = 0.20000000000000001 * var_x481 * var_x487;
        IJth(rJacobian, 27, 0) = var_x503 * (-0.047999999999999994 * var_x487 - 1.1504378919002956e-7 * var_x133);
        IJth(rJacobian, 28, 0) = var_x133 * var_x521 - var_x133 * var_x525;
        IJth(rJacobian, 29, 0) = var_x537 * var_x556 - var_x537 * var_x565;
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x135 + 0.057500000000000002 * var_x139 - 0.057500000000000002 * var_x137 - 5.4447296618926212e-7 * var_x149 - 1.388888888888889e-8 * var_x145 + var_x140 * var_x86 - var_x141 * var_x144);
        IJth(rJacobian, 1, 1) = -var_x200 * (0.14705882352941174 + var_x201 + var_x216 - var_x219 + 1.0150922575590843e-8 * var_x220 + 3.383640858530281e-9 * var_x135 - 1.9455934936549115e-10 * var_x139 - 9.3990023848063356e-17 * var_x145 - var_x141 * var_x221) - (-var_x195 - var_x197 + 0.28000000000000003 * var_chaste_interface__Ca_i__Ca_i / pow(var_x136, 3) + 0.20000000000000001 * var_chaste_interface__Ca_i__Ca_i / pow(var_x196, 3)) * (3.383640858530281e-9 * ((var_x23) ? (var_x222 - 374358.83507802623 * (-1.3356169352749131e-6 + var_chaste_interface__membrane__V) * (-var_x222 - 3.8499135947999997e-9 * var_x22)) : (var_x30 * var_chaste_interface__membrane__V)) + 0.14705882352941174 * var_chaste_interface__Ca_i__Ca_i - 0.14705882352941174 * var_chaste_interface__Ca_r__Ca_r + var_x201 * var_chaste_interface__Ca_i__Ca_i + var_x216 * var_chaste_interface__Ca_i__Ca_i - var_x223 * var_chaste_interface__Ca_NSR__Ca_NSR - 6.767281717060562e-9 * var_x108 * var_x92) / pow(var_x198, 2);
        IJth(rJacobian, 21, 1) = (3.045276772677253e-8 * var_x220 - 2.8197007154419011e-16 * var_x145 - var_x141 * var_x450) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 23, 1) = -3.6846019495263273e-15 * var_x149 * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 25, 1) = -var_x477 + 0.5 * var_x215;
        IJth(rJacobian, 27, 1) = 5.0 * var_x502;
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x152 * var_x153);
        IJth(rJacobian, 2, 2) = var_x258;
        IJth(rJacobian, 21, 2) = -2.0301845151181685e-8 * var_x153 * var_x451;
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (-0.80000000000000004 * var_x154);
        IJth(rJacobian, 3, 3) = -var_x262 - var_x268;
        IJth(rJacobian, 21, 3) = -5.4138253736484496e-9 * var_x452;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (-0.20000000000000001 * var_x154);
        IJth(rJacobian, 4, 4) = -var_x284 - var_x294;
        IJth(rJacobian, 21, 4) = -1.3534563434121124e-9 * var_x452;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (-0.112125 * var_x155);
        IJth(rJacobian, 5, 5) = var_x258;
        IJth(rJacobian, 21, 5) = -7.5878146252541542e-10 * var_x155 * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x152 * var_x60);
        IJth(rJacobian, 6, 6) = -var_x305;
        IJth(rJacobian, 21, 6) = -2.5292715417513851e-10 * var_x451 * var_x59;
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x160);
        IJth(rJacobian, 7, 7) = -var_x312;
        IJth(rJacobian, 10, 7) = var_x160 * var_x328;
        IJth(rJacobian, 11, 7) = var_x160 * var_x338 - var_x160 * var_x339;
        IJth(rJacobian, 27, 7) = -var_x160 * var_x504;
        IJth(rJacobian, 28, 7) = var_x520 * var_x526 - var_x524 * var_x526;
        IJth(rJacobian, 29, 7) = var_x543 * var_x566 * var_chaste_interface__i_Ca_L_d_gate__d - var_x564 * var_x567 * pow(var_chaste_interface__i_Ca_L_d_gate__d, 3);
        IJth(rJacobian, 0, 8) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x161);
        IJth(rJacobian, 8, 8) = -var_x318;
        IJth(rJacobian, 10, 8) = var_x161 * var_x328;
        IJth(rJacobian, 11, 8) = var_x161 * var_x338 - var_x161 * var_x339;
        IJth(rJacobian, 27, 8) = -var_x161 * var_x504;
        IJth(rJacobian, 28, 8) = var_x161 * var_x521 - var_x161 * var_x525;
        IJth(rJacobian, 29, 8) = var_x539 * var_x566 * var_chaste_interface__i_Ca_L_f_gate__f - var_x560 * var_x568 * pow(var_chaste_interface__i_Ca_L_f_gate__f, 3);
        IJth(rJacobian, 0, 9) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x163);
        IJth(rJacobian, 9, 9) = -var_x321;
        IJth(rJacobian, 10, 9) = var_x163 * var_x328;
        IJth(rJacobian, 11, 9) = var_x163 * var_x338 - var_x163 * var_x339;
        IJth(rJacobian, 27, 9) = -var_x163 * var_x504;
        IJth(rJacobian, 28, 9) = var_x163 * var_x521 - var_x163 * var_x525;
        IJth(rJacobian, 29, 9) = var_x542 * var_x569 * var_chaste_interface__i_Ca_L_f2_gate__f2 - var_x563 * var_x568 * pow(var_chaste_interface__i_Ca_L_f2_gate__f2, 3);
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x164);
        IJth(rJacobian, 10, 10) = var_x324 * (-1 + var_x164 * var_x327);
        IJth(rJacobian, 11, 10) = var_x164 * var_x338 - var_x164 * var_x339;
        IJth(rJacobian, 27, 10) = -var_x164 * var_x504;
        IJth(rJacobian, 28, 10) = var_x164 * var_x521 - var_x164 * var_x525;
        IJth(rJacobian, 29, 10) = var_x540 * var_x569 * var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca - var_x561 * var_x570 * pow(var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca, 3);
        IJth(rJacobian, 0, 11) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x165);
        IJth(rJacobian, 10, 11) = var_x165 * var_x328;
        IJth(rJacobian, 11, 11) = var_x336 * (-1 + var_x165 * var_x337) - var_x165 * var_x339;
        IJth(rJacobian, 27, 11) = -var_x165 * var_x504;
        IJth(rJacobian, 28, 11) = var_x165 * var_x521 - var_x165 * var_x525;
        IJth(rJacobian, 29, 11) = -var_x562 * var_x570 * pow(var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2, 3) + 0.66666666666666663 * var_x538 * var_x539 * var_x540 * var_x542 * var_x543 * var_x545 * var_x555 * var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2;
        IJth(rJacobian, 0, 12) = mSetVoltageDerivativeToZero ? 0.0 : (var_x166 * var_chaste_interface__i_Ca_T_g_gate__g);
        IJth(rJacobian, 12, 12) = -var_x345 - var_x346;
        IJth(rJacobian, 0, 13) = mSetVoltageDerivativeToZero ? 0.0 : (var_x166 * var_chaste_interface__i_Ca_T_b_gate__b);
        IJth(rJacobian, 13, 13) = -var_x351 - var_x352;
        IJth(rJacobian, 0, 14) = mSetVoltageDerivativeToZero ? 0.0 : (var_x40 * var_x61);
        IJth(rJacobian, 14, 14) = -var_x357 - var_x361;
        IJth(rJacobian, 23, 14) = var_x466 * var_x472 * NV_Ith_S(mParameters, 15);
        IJth(rJacobian, 0, 15) = mSetVoltageDerivativeToZero ? 0.0 : (var_x167 * (21.369870964398611 * var_x38 - 0.80000000000000004 * var_chaste_interface__membrane__V));
        IJth(rJacobian, 15, 15) = -var_x371;
        IJth(rJacobian, 23, 15) = var_x473 * (1.4461593707331807e-7 * var_x38 - 5.4138253736484496e-9 * var_chaste_interface__membrane__V);
        IJth(rJacobian, 0, 16) = mSetVoltageDerivativeToZero ? 0.0 : (var_x167 * (5.3424677410996528 * var_x38 - 0.20000000000000001 * var_chaste_interface__membrane__V));
        IJth(rJacobian, 16, 16) = -var_x385;
        IJth(rJacobian, 23, 16) = var_x473 * (3.6153984268329518e-8 * var_x38 - 1.3534563434121124e-9 * var_chaste_interface__membrane__V);
        IJth(rJacobian, 0, 17) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x40 * var_x97);
        IJth(rJacobian, 17, 17) = -var_x400;
        IJth(rJacobian, 23, 17) = -2.9121743765854985e-9 * var_x472 * var_x96;
        IJth(rJacobian, 0, 18) = mSetVoltageDerivativeToZero ? 0.0 : (var_x147 * var_x73);
        IJth(rJacobian, 18, 18) = ((var_x421) ? (var_x416 + var_x418 + var_x435) : ((var_x434) ? (var_x430 + var_x436 - var_x433) : (var_x435 + var_x436)));
        IJth(rJacobian, 23, 18) = var_x147 * var_x469 * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 0, 19) = mSetVoltageDerivativeToZero ? 0.0 : (var_x168 * var_x71);
        IJth(rJacobian, 19, 19) = ((var_x421) ? (var_x442 + var_x448 - var_x440) : ((var_x434) ? (var_x445 + var_x449 - var_x447) : (var_x448 + var_x449)));
        IJth(rJacobian, 23, 19) = var_x168 * var_x468 * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 0, 20) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x172);
        IJth(rJacobian, 20, 20) = -1.0;
        IJth(rJacobian, 22, 20) = -6.767281717060562e-9 * var_x172 * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 0, 21) = mSetVoltageDerivativeToZero ? 0.0 : (0.48963716847178318 * var_x176 - 1.2000000000000002 * var_x180 - 0.066780846763745655 * var_x150 - 0.012375000000000001 * var_x179 - 26.712338705498265 * var_x175 - 0.99837365911799758 * var_x174 - var_x144 * var_x178);
        IJth(rJacobian, 1, 21) = -var_x200 * (-8.1207380604726744e-9 * var_x180 - var_x178 * var_x221);
        IJth(rJacobian, 21, 21) = (var_x458 - 2.4362214181418025e-8 * var_x180 - 4.5192480335411901e-10 * var_x150 - 6.7562758101440786e-9 * var_x174 - 2.5123533374587338e-10 * var_x179 - 1.8076992134164759e-7 * var_x175 - var_x178 * var_x450) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 22, 21) = var_x458 * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 23, 21) = (1.6749022249724892e-10 * var_x179 + 0.48963716847178318 * var_x474) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 0, 22) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x181 + 0.0060102762087371094 * var_x182);
        IJth(rJacobian, 21, 22) = var_x459 * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 22, 22) = (var_x459 + var_x463 + 4.0673232301870709e-11 * var_x182 - 6.767281717060562e-9 * var_x181) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 23, 22) = var_x463 * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 0, 23) = mSetVoltageDerivativeToZero ? 0.0 : (26.712338705498265 * var_x176 - 0.13356169352749131 * var_x37 - 11.495160327182951 * var_x189 - 0.073726054827175203 * var_x187 + var_x186 * var_x62 + var_x186 * (-0.0040000000000000001 + var_x99) + var_x40 * (2.7964276527937963 * var_x185 - var_x184 * var_x58));
        IJth(rJacobian, 22, 23) = var_x464 * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 23, 23) = (var_x464 + 26.712338705498265 * var_x474 - 9.0384960670823802e-10 * var_x37 - 4.9892498290294737e-10 * var_x187 - 7.7790988316825085e-8 * var_x189 + var_x186 * var_x467 + var_x186 * (-2.7069126868242249e-11 + var_x471) + var_x40 * (1.892421372783404e-8 * var_x185 - var_x184 * var_x465)) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 1, 24) = -var_x200 * (var_x219 * var_x231 + var_x228 * var_x230);
        IJth(rJacobian, 10, 24) = var_x329 * var_x330;
        IJth(rJacobian, 24, 24) = -0.00068000000000000005 - var_x210 * var_x475 + var_x202 * var_x224 * var_x475;
        IJth(rJacobian, 25, 24) = var_x228 * var_x478 + var_x231 * var_x477;
        IJth(rJacobian, 28, 24) = var_x527 * (var_x329 - var_x329 * var_x515);
        IJth(rJacobian, 1, 25) = var_x199 * var_x223;
        IJth(rJacobian, 25, 25) = -0.00072463768115942019 - 0.066666666666666666 * NV_Ith_S(mParameters, 0);
        IJth(rJacobian, 26, 25) = 0.0083333333333333332 * var_x481;
        IJth(rJacobian, 25, 26) = 0.00072463768115942019;
        IJth(rJacobian, 26, 26) = var_x481 * (-0.0083333333333333332 - var_x491) + 0.25 * (0.0083333333333333332 * var_chaste_interface__Ca_NSR__Ca_NSR - 0.0083333333333333332 * var_chaste_interface__Ca_JSR__Ca_JSR - var_x484 * var_x491) / (pow(var_x479, 3) * pow((0.125 + var_x480), 2));
        IJth(rJacobian, 27, 26) = var_x502 * var_x505;
        IJth(rJacobian, 29, 26) = -2.3414435371998602e-7 * var_x572 * pow(var_chaste_interface__Ca_JSR__Ca_JSR, 2.7999999999999998) + 0.6333333333333333 * var_x553 * var_x571 * pow(var_chaste_interface__Ca_JSR__Ca_JSR, 0.89999999999999991);
        IJth(rJacobian, 0, 27) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x194);
        IJth(rJacobian, 1, 27) = -var_x200 * (-0.14705882352941174 + var_x219 * var_x237 + var_x230 * var_x236);
        IJth(rJacobian, 10, 27) = var_x324 * (-0.0016500000000000002 * var_x331 + var_x194 * var_x327) + var_x330 * (var_x332 + 0.0030000000000000001 * var_x331);
        IJth(rJacobian, 11, 27) = var_x194 * var_x338 - var_x194 * var_x339;
        IJth(rJacobian, 20, 27) = 0.1502 * var_x232 / pow((1.0 + 0.1502 * var_x203), 2);
        IJth(rJacobian, 24, 27) = 0.00037500000000000001 * var_x210 * var_x233 + 1.8750000000000002e-5 * var_x232 * pow(var_x202, 2) / pow(var_x204, 3);
        IJth(rJacobian, 25, 27) = var_x236 * var_x478 + var_x237 * var_x477;
        IJth(rJacobian, 26, 27) = var_x481 * (var_x491 + 0.20000000000000001 * var_x492);
        IJth(rJacobian, 27, 27) = var_x503 * (-5.0 - var_x505 - 0.047999999999999994 * var_x492 - 1.1504378919002956e-7 * var_x194) + 0.19788249895518037 * (-var_x501 - 2.2480000000000002 * var_x497 + 4.4960000000000004 * var_chaste_interface__Ca_r__Ca_r / pow(var_x496, 3) + 0.188 * var_chaste_interface__Ca_r__Ca_r / pow(var_x499, 3)) * (5.0 * var_chaste_interface__Ca_i__Ca_i - 5.0 * var_chaste_interface__Ca_r__Ca_r - 1.1504378919002956e-7 * var_x325 + var_x484 * var_x505) / pow((0.44483985765124551 + var_x498 + 0.041814946619217079 * var_x500 * var_chaste_interface__Ca_r__Ca_r), 2);
        IJth(rJacobian, 28, 27) = var_x527 * (var_x332 + var_x523 * (5000.0 - 1000.0 * var_x528) - var_x332 * var_x515) - var_x519 * (40000.0 - 5333.333333333333 * var_x528);
        IJth(rJacobian, 29, 27) = var_x556 * var_x573 - var_x565 * var_x573 - 0.00020267697647483301 * var_x203 * var_x549 * var_x550 * var_x552 * var_x572 * (1.8999999999999999 * var_x551 - 1.8999999999999999 * var_chaste_interface__Ca_r__Ca_r / pow(var_x550, 2));
        IJth(rJacobian, 26, 28) = -var_x493 * var_x494;
        IJth(rJacobian, 27, 28) = var_x493 * var_x506;
        IJth(rJacobian, 28, 28) = -var_x518;
        IJth(rJacobian, 26, 29) = -var_x494 * var_x495;
        IJth(rJacobian, 27, 29) = var_x495 * var_x506;
        IJth(rJacobian, 29, 29) = -0.33333333333333331;
    }

    N_Vector Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -83.43812846286808
        double var_chaste_interface__Ca_i__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.00022355433459434943
        double var_chaste_interface__i_Na_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.9786390933308567
        double var_chaste_interface__i_Na_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.09866447258167589
        double var_chaste_interface__i_Ca_L_d_gate__d = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 2.322223865147363e-06
        double var_chaste_interface__i_Ca_L_f_gate__f = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.9985607329462358
        double var_chaste_interface__i_Ca_L_f2_gate__f2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.8173435436674658
        double var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9610551285529658
        double var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.868690796671854
        double var_chaste_interface__i_to_1_a_gate__a = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.0004238729429342389
        double var_chaste_interface__i_to_1_i_gate__i = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.9990935802459496
        double var_chaste_interface__i_to_1_i2_gate__i2 = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.9777368439681764
        double var_chaste_interface__i_Kr_xr_gate__xr = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.07084939408222911
        double var_chaste_interface__i_Ks_xs1_gate__xs1 = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.0011737654433043125
        double var_chaste_interface__i_Ks_xs2_gate__xs2 = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.001179442867470093
        double var_chaste_interface__intracellular_ion_concentrations__Na_i = NV_Ith_S(rY, 21);
        // Units: millimolar; Initial value: 9.927155552932733
        double var_chaste_interface__intracellular_ion_concentrations__K_i = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 141.9670801746057
        double var_chaste_interface__Ca_MK_act__Ca_MK_trap = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 8.789168284782809e-06
        double var_chaste_interface__Ca_JSR__Ca_JSR = NV_Ith_S(rY, 26);
        // Units: millimolar; Initial value: 1.1433050636518596
        double var_chaste_interface__Ca_r__Ca_r = NV_Ith_S(rY, 27);
        // Units: millimolar; Initial value: 0.00022418117117903934
        double var_chaste_interface__q_rel_ri_gate__ri = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.7802870066567904
        double var_chaste_interface__q_rel_ro_gate__ro = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 1.2785734760674763e-09
        
        // Lookup table indexing
        const bool _oob_0 = Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_Ca_MK_act__Ca_MK_0 = 0.050000000000000003; // dimensionless
        const double var_Ca_MK_act__km_Ca_MK = 0.14999999999999999; // millimolar
        const double var_Ca_MK_act__Ca_MK_bound = (1.0 - var_chaste_interface__Ca_MK_act__Ca_MK_trap) * var_Ca_MK_act__Ca_MK_0 / (1.0 + var_Ca_MK_act__km_Ca_MK / var_chaste_interface__Ca_r__Ca_r); // dimensionless
        const double var_Ca_MK_act__Ca_MK_act = var_Ca_MK_act__Ca_MK_bound + var_chaste_interface__Ca_MK_act__Ca_MK_trap; // dimensionless
        const double var_equilibrium_potentials__r_NaK = 0.018329999999999999; // dimensionless
        const double var_i_Ca_L_f_Ca_gate__tau_f_Ca = 0.5 + 1 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca_r__Ca_r) + 10.0 * var_Ca_MK_act__Ca_MK_act / (var_Ca_MK_act__Ca_MK_act + var_Ca_MK_act__km_Ca_MK); // millisecond
        const double var_i_Ks__g_Ks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca_i__Ca_i), 1.3999999999999999))) * NV_Ith_S(mParameters, 13); // milliS_per_microF
        const double var_i_NaCa__X_NaCa = 0.40000000000000002; // dimensionless
        const double var_i_NaCa__k_sat = 0.27000000000000002; // dimensionless
        const double var_i_NaCa__km_Ca_act = 0.000125; // millimolar
        const double var_i_NaCa__km_Ca_i = 0.0035999999999999999; // millimolar
        const double var_i_NaCa__km_Ca_o = 1.3; // millimolar
        const double var_i_NaCa__km_Na_i_1 = 12.300000000000001; // millimolar
        const double var_i_NaCa__km_Na_o = 87.5; // millimolar
        const double var_i_Ca_L_f2_gate__tau_f2 = 38.0 + 24.217200000000005 * pow((-1 + 0.053763440860215048 * var_chaste_interface__membrane__V), 2); // millisecond
        const double var_i_Ca_L_f_gate__tau_f = 4.0 + 0.03125 * pow((-1 + 0.40000000000000002 * var_chaste_interface__membrane__V), 2); // millisecond
        const double var_i_Kr__rr_infinity = 1 / (_lt_0_row[8]); // dimensionless
        const double var_i_Na_h_gate__alpha_h = ((var_chaste_interface__membrane__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 10) - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0)); // per_millisecond
        const double var_i_Na_h_gate__beta_h = ((var_chaste_interface__membrane__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V - 0.34999999999999998 * NV_Ith_S(mParameters, 10)) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__V - 0.079000000000000001 * NV_Ith_S(mParameters, 10))) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 10) - 0.0900900900900901 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_i_Na_h_gate__tau_h = 1 / (var_i_Na_h_gate__alpha_h + var_i_Na_h_gate__beta_h); // millisecond
        const double var_i_Na_j_gate__alpha_j = ((var_chaste_interface__membrane__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__membrane__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V - 0.24440000000000001 * NV_Ith_S(mParameters, 10)) - 3.4740000000000003e-5 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 10) - 0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V - 0.311 * NV_Ith_S(mParameters, 10)))) : (0)); // per_millisecond
        const double var_i_Na_j_gate__beta_j = ((var_chaste_interface__membrane__V < -40.0) ? (0.1212 * exp(0.01052 * NV_Ith_S(mParameters, 10) - 0.01052 * var_chaste_interface__membrane__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 10) - 0.13780000000000001 * var_chaste_interface__membrane__V))) : (0.29999999999999999 * exp(2.5349999999999999e-7 * NV_Ith_S(mParameters, 10) - 2.5349999999999999e-7 * var_chaste_interface__membrane__V) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 10) - 0.10000000000000001 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_i_Na_j_gate__tau_j = 1 / (var_i_Na_j_gate__alpha_j + var_i_Na_j_gate__beta_j); // millisecond
        const double var_membrane__i_stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_i_Ca_L__i_Ca_L_max = ((fabs(-15.0 + var_chaste_interface__membrane__V) < 1.3356169352718439e-6) ? (4.6891709968709491e-6 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_r__Ca_r * exp(9.9999999933270713e-8)) / (-1.0 + exp(9.9999999933270713e-8)) - 374358.83507888648 * (-15.000001335616934 + var_chaste_interface__membrane__V) * (-4.6891709968709491e-6 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_r__Ca_r * exp(9.9999999933270713e-8)) / (-1.0 + exp(9.9999999933270713e-8)) - 4.6891710031074985e-6 * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_r__Ca_r * exp(-1.0000000006626968e-7)) / (-1.0 + exp(-1.0000000006626968e-7)))) : (3.510865186083326 * (-15.0 + var_chaste_interface__membrane__V) * (-0.34100000000000003 * NV_Ith_S(mParameters, 4) + var_chaste_interface__Ca_r__Ca_r * _lt_0_row[9]) / (_lt_0_row[10]))); // microA_per_microF
        const double var_i_Ca_L__i_Ca_L = NV_Ith_S(mParameters, 7) * var_i_Ca_L__i_Ca_L_max * var_chaste_interface__i_Ca_L_d_gate__d * var_chaste_interface__i_Ca_L_f2_gate__f2 * var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 * var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca * var_chaste_interface__i_Ca_L_f_gate__f; // microA_per_microF
        const double var_i_Ca_L__i_Ca_L_converted = HeartConfig::Instance()->GetCapacitance() * var_i_Ca_L__i_Ca_L; // uA_per_cm2
        const double var_i_Ca_L_f_Ca2_gate__tau_f_Ca2 = 125.0 + 300.0 / (1.0 + exp(-4.375 - 25.0 * var_i_Ca_L__i_Ca_L)); // millisecond
        const double var_i_NaCa__dNaCa_1 = pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * var_i_NaCa__km_Ca_o + 1.5 * pow(var_i_NaCa__km_Na_o, 3) * var_chaste_interface__Ca_i__Ca_i + pow(var_i_NaCa__km_Na_i_1, 3) * (1.0 + 1.5 * var_chaste_interface__Ca_i__Ca_i / var_i_NaCa__km_Ca_i) * NV_Ith_S(mParameters, 4); // millimolar4
        const double var_model_parameters__F = 96485.0; // coulomb_per_mole
        const double var_i_K1__g_K1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 5)) * NV_Ith_S(mParameters, 11); // milliS_per_microF
        const double var_i_Kr__g_Kr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 5)) * NV_Ith_S(mParameters, 12); // milliS_per_microF
        const double var_i_NaCa__dNaCa_2 = pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * NV_Ith_S(mParameters, 4) + 1.5 * pow(NV_Ith_S(mParameters, 6), 3) * var_chaste_interface__Ca_i__Ca_i + pow(NV_Ith_S(mParameters, 6), 3) * (1.0 + var_chaste_interface__intracellular_ion_concentrations__Na_i / var_i_NaCa__km_Na_i_1) * var_i_NaCa__km_Ca_i; // millimolar4
        const double var_model_parameters__R = 8314.0; // joule_per_kilomole_kelvin
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_equilibrium_potentials__E_K = var_model_parameters__R * var_model_parameters__T * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__intracellular_ion_concentrations__K_i) / var_model_parameters__F; // millivolt
        const double var_equilibrium_potentials__E_Ks = var_model_parameters__R * var_model_parameters__T * log((var_equilibrium_potentials__r_NaK * NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 5)) / (var_equilibrium_potentials__r_NaK * var_chaste_interface__intracellular_ion_concentrations__Na_i + var_chaste_interface__intracellular_ion_concentrations__K_i)) / var_model_parameters__F; // millivolt
        const double var_equilibrium_potentials__E_Na = var_model_parameters__R * var_model_parameters__T * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__intracellular_ion_concentrations__Na_i) / var_model_parameters__F; // millivolt
        const double var_i_K1_xK1_gate__alpha_xK1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_equilibrium_potentials__E_K)); // dimensionless
        const double var_i_K1_xK1_gate__beta_xK1 = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 0.080320000000000003 * var_equilibrium_potentials__E_K) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 0.061749999999999999 * var_equilibrium_potentials__E_K)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_equilibrium_potentials__E_K - 0.51429999999999998 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_i_K1_xK1_gate__xK1 = var_i_K1_xK1_gate__alpha_xK1 / (var_i_K1_xK1_gate__alpha_xK1 + var_i_K1_xK1_gate__beta_xK1); // dimensionless
        const double var_i_K1__i_K1 = (0.0040000000000000001 + var_i_K1__g_K1 * var_i_K1_xK1_gate__xK1) * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V); // microA_per_microF
        const double var_i_K1__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_i_K1__i_K1; // uA_per_cm2
        const double var_i_Kr__i_Kr = (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * var_i_Kr__g_Kr * var_i_Kr__rr_infinity * var_chaste_interface__i_Kr_xr_gate__xr; // microA_per_microF
        const double var_i_Kr__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_i_Kr__i_Kr; // uA_per_cm2
        const double var_i_Ks__i_Ks = (-var_equilibrium_potentials__E_Ks + var_chaste_interface__membrane__V) * var_i_Ks__g_Ks * var_chaste_interface__i_Ks_xs1_gate__xs1 * var_chaste_interface__i_Ks_xs2_gate__xs2; // microA_per_microF
        const double var_i_Ks__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_i_Ks__i_Ks; // uA_per_cm2
        const double var_i_Na__i_Na = pow(var_chaste_interface__i_Na_m_gate__m, 3) * (-var_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) * (0.20000000000000001 * var_chaste_interface__i_Na_j_gate__j + 0.80000000000000004 * var_chaste_interface__i_Na_h_gate__h) * NV_Ith_S(mParameters, 8); // microA_per_microF
        const double var_i_Na__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_i_Na__i_Na; // uA_per_cm2
        const double var_i_NaCa__i_NaCa = (-1.5 * pow(NV_Ith_S(mParameters, 6), 3) * var_chaste_interface__Ca_i__Ca_i * exp(-0.65000000000000002 * var_chaste_interface__membrane__V * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) + pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * var_i_NaCa__X_NaCa * NV_Ith_S(mParameters, 14) * NV_Ith_S(mParameters, 4) * exp(0.34999999999999998 * var_chaste_interface__membrane__V * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) / ((1.0 + var_i_NaCa__k_sat * exp(-0.65000000000000002 * var_chaste_interface__membrane__V * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * (1.0 + 0.44444444444444442 * pow(var_i_NaCa__km_Ca_act, 2) / pow(var_chaste_interface__Ca_i__Ca_i, 2)) * (var_i_NaCa__dNaCa_1 + var_i_NaCa__dNaCa_2)); // microA_per_microF
        const double var_i_NaCa__i_NaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_i_NaCa__i_NaCa; // uA_per_cm2
        const double var_i_to_1__i_to_1 = (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * (0.20000000000000001 * var_chaste_interface__i_to_1_i2_gate__i2 + 0.80000000000000004 * var_chaste_interface__i_to_1_i_gate__i) * NV_Ith_S(mParameters, 15) * var_chaste_interface__i_to_1_a_gate__a; // microA_per_microF
        const double var_i_to_1__i_to_1_converted = HeartConfig::Instance()->GetCapacitance() * var_i_to_1__i_to_1; // uA_per_cm2
        const double var_q_rel__vg = 1 / (1.0 + exp(2.6000000000000001 + 0.20000000000000001 * NV_Ith_S(mParameters, 7) * var_i_Ca_L__i_Ca_L_max)); // dimensionless
        const double var_q_rel__g_rel = NV_Ith_S(mParameters, 1) * var_q_rel__vg; // per_millisecond
        const double var_q_rel__q_rel = (-var_chaste_interface__Ca_r__Ca_r + var_chaste_interface__Ca_JSR__Ca_JSR) * var_q_rel__g_rel * var_chaste_interface__q_rel_ri_gate__ri * var_chaste_interface__q_rel_ro_gate__ro; // millimolar_per_millisecond

        N_Vector dqs = N_VNew_Serial(16);
        NV_Ith_S(dqs, 0) = var_q_rel__q_rel;
        NV_Ith_S(dqs, 1) = var_i_Ca_L__i_Ca_L_converted;
        NV_Ith_S(dqs, 2) = var_i_Ca_L_f2_gate__tau_f2;
        NV_Ith_S(dqs, 3) = var_i_Ca_L_f_Ca2_gate__tau_f_Ca2;
        NV_Ith_S(dqs, 4) = var_i_Ca_L_f_Ca_gate__tau_f_Ca;
        NV_Ith_S(dqs, 5) = var_i_Ca_L_f_gate__tau_f;
        NV_Ith_S(dqs, 6) = var_i_Na__i_Na_converted;
        NV_Ith_S(dqs, 7) = var_i_Na_h_gate__tau_h;
        NV_Ith_S(dqs, 8) = var_i_Na_j_gate__tau_j;
        NV_Ith_S(dqs, 9) = var_i_K1__i_K1_converted;
        NV_Ith_S(dqs, 10) = var_i_Kr__i_Kr_converted;
        NV_Ith_S(dqs, 11) = var_i_Ks__i_Ks_converted;
        NV_Ith_S(dqs, 12) = var_i_NaCa__i_NaCa_converted;
        NV_Ith_S(dqs, 13) = var_membrane__i_stim_converted;
        NV_Ith_S(dqs, 14) = var_i_to_1__i_to_1_converted;
        NV_Ith_S(dqs, 15) = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt>::Initialise(void)
{
    this->mSystemName = "aslanidi_2009";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-83.43812846286808);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00022355433459434943);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.002003390432234504);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9786390933308567);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.09866447258167589);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("i_Na_L_m_L_gate__m_L");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.002003390432234504);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("i_Na_L_h_L_gate__h_L");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.8946968372659203);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.322223865147363e-06);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9985607329462358);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f2_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.8173435436674658);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9610551285529658);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_fCa2_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.868690796671854);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("i_Ca_T_b_gate__b");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0002563937630984438);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("i_Ca_T_g_gate__g");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9720432601848331);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("i_to_1_a_gate__a");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0004238729429342389);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("i_to_1_i_gate__i");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9990935802459496);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("i_to_1_i2_gate__i2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9777368439681764);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("i_Kr_xr_gate__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.07084939408222911);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("i_Ks_xs1_gate__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0011737654433043125);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("i_Ks_xs2_gate__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001179442867470093);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("i_to_2_a_gate__a");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0014909437525000811);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(9.927155552932733);

    // NV_Ith_S(rY, 22):
    this->mVariableNames.push_back("intracellular_ion_concentrations__Cl_i");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(18.904682470140408);

    // NV_Ith_S(rY, 23):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(141.9670801746057);

    // NV_Ith_S(rY, 24):
    this->mVariableNames.push_back("Ca_MK_act__Ca_MK_trap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.789168284782809e-06);

    // NV_Ith_S(rY, 25):
    this->mVariableNames.push_back("Ca_NSR__Ca_NSR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.2132524695849454);

    // NV_Ith_S(rY, 26):
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.1433050636518596);

    // NV_Ith_S(rY, 27):
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00022418117117903934);

    // NV_Ith_S(rY, 28):
    this->mVariableNames.push_back("q_rel_ri_gate__ri");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7802870066567904);

    // NV_Ith_S(rY, 29):
    this->mVariableNames.push_back("q_rel_ro_gate__ro");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.2785734760674763e-09);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("millimolar_per_millisecond");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("millimolar_per_millisecond");

    // mParameters[3]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("millivolt");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("microA_per_microF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f2_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_fCa2_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_fCa_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellaslanidi_Purkinje_model_2009FromCellMLCvodeOpt)

#endif // CHASTE_CVODE
