#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: luo_rudy_1994
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvodeOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "luo_rudy_1994.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<23; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables(const Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables&);
    Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables& operator= (const Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables&);
    Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 23;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][23];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(0.037573302761014088 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[0] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] >= 2){
                    EXCEPTION("Lookup table 0 at ["<<i<<"][0] has non-finite value: " << val);
                }
                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return -1.0 + exp(0.037573302761014088 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[1] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] >= 2){
                    EXCEPTION("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val);
                }
                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(0.075146605522028176 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[2] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[2] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[2] >= 2){
                    EXCEPTION("Lookup table 2 at ["<<i<<"][2] has non-finite value: " << val);
                }
                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return -1.0 + exp(0.075146605522028176 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[3] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[3] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[3] >= 2){
                    EXCEPTION("Lookup table 3 at ["<<i<<"][3] has non-finite value: " << val);
                }
                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(0.013150655966354929 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-0.024422646794659157 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + 0.10000000000000001 * exp(-0.024422646794659157 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-0.037573302761014088 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.1245 * exp(-0.0037573302761014088 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + exp(-1.7526479750778814 + 0.031152647975077882 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((fabs(10.0 + var_chaste_interface__membrane__V) < 6.2400000011564316e-7) ? (801282.05113355326 * (10.000000624 + var_chaste_interface__membrane__V) * (45787545.779060178 * (1.0 - exp(1.0000000001853256e-7)) / (1.0 + exp(1.0000000001853256e-7)) + 45787545.779060178 * (1.0 - exp(-1.0000000001853256e-7)) / (1.0 + exp(-1.0000000001853256e-7))) - 45787545.779060178 * (1.0 - exp(1.0000000001853256e-7)) / (1.0 + exp(1.0000000001853256e-7))) : (28.571428571428569 * (1.0 - exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__membrane__V)) / ((1.0 + exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__membrane__V)) * (10.0 + var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[12] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[12] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[12] >= 2){
                    EXCEPTION("Lookup table 12 at ["<<i<<"][12] has non-finite value: " << val);
                }
                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(4.0767441860465121 + 0.11627906976744186 * var_chaste_interface__membrane__V)) + 0.59999999999999998 / (1.0 + exp(2.5 - 0.050000000000000003 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (0.02 + 0.019699999999999999 * exp(-0.113569 * pow((1 + 0.10000000000000001 * var_chaste_interface__membrane__V), 2)));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((var_chaste_interface__membrane__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[15] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[15] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[15] >= 2){
                    EXCEPTION("Lookup table 15 at ["<<i<<"][15] has non-finite value: " << val);
                }
                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((var_chaste_interface__membrane__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[16] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[16] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[16] >= 2){
                    EXCEPTION("Lookup table 16 at ["<<i<<"][16] has non-finite value: " << val);
                }
                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((var_chaste_interface__membrane__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__membrane__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V) - 3.4740000000000003e-5 * exp(-0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V))) : (0));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[17] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[17] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[17] >= 2){
                    EXCEPTION("Lookup table 17 at ["<<i<<"][17] has non-finite value: " << val);
                }
                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((var_chaste_interface__membrane__V < -40.0) ? (0.1212 * exp(-0.01052 * var_chaste_interface__membrane__V) / (1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__membrane__V))) : (0.29999999999999999 * exp(-2.5349999999999999e-7 * var_chaste_interface__membrane__V) / (1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[18] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[18] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[18] >= 2){
                    EXCEPTION("Lookup table 18 at ["<<i<<"][18] has non-finite value: " << val);
                }
                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((fabs(47.130000000000003 + var_chaste_interface__membrane__V) < 1.0000000010279564e-6) ? (-3.2000000146581445e-7 / (1.0 - exp(1.0000000045806701e-7)) + 499999.99948602181 * (47.130001000000007 + var_chaste_interface__membrane__V) * (3.2000000146581445e-7 / (1.0 - exp(1.0000000045806701e-7)) + 3.1999999919207769e-7 / (1.0 - exp(-9.9999999747524276e-8)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[19] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[19] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[19] >= 2){
                    EXCEPTION("Lookup table 19 at ["<<i<<"][19] has non-finite value: " << val);
                }
                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-0.090909090909090912 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((fabs(30.0 + var_chaste_interface__membrane__V) < 6.7567567541004792e-7) ? (-4.8581081061982445e-11 / (1.0 - exp(9.9999999960687092e-8)) + 740000.00029091549 * (30.000000675675675 + var_chaste_interface__membrane__V) * (4.8581081061982445e-11 / (1.0 - exp(9.9999999960687092e-8)) + 4.8581081061982445e-11 / (1.0 - exp(-9.9999999960687092e-8)))) : (7.1899999999999999e-5 * (30.0 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[21] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[21] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[21] >= 2){
                    EXCEPTION("Lookup table 21 at ["<<i<<"][21] has non-finite value: " << val);
                }
                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((fabs(30.0 + var_chaste_interface__membrane__V) < 1.4556040746072085e-6) ? (1.9068413377354434e-10 / (-1.0 + exp(9.9999999925515227e-8)) - 343500.00025585521 * (29.999998544395925 + var_chaste_interface__membrane__V) * (-1.9068413377354434e-10 / (-1.0 + exp(9.9999999925515227e-8)) - 1.9068413377354434e-10 / (-1.0 + exp(-9.9999999925515227e-8)))) : (0.00013100000000000001 * (30.0 + var_chaste_interface__membrane__V) / (-1.0 + exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[22] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[22] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[22] >= 2){
                    EXCEPTION("Lookup table 22 at ["<<i<<"][22] has non-finite value: " << val);
                }
                _lookup_table_0[i][22] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[23];

    // Lookup tables
    double (*_lookup_table_0)[23];
    int _lookup_table_0_num_misshit_piecewise[23] = {0};

};

std::shared_ptr<Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables> Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables::mpInstance;


    boost::shared_ptr<RegularStimulus> Cellluo_rudy_1994FromCellMLCvodeOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stimCurrent_converted = 50.000000000000007; // uA_per_cm2
        const double var_chaste_interface__membrane__stimDuration = 0.5; // ms
        const double var_chaste_interface__membrane__stimPeriod = 1000.0; // ms
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stimCurrent_converted),
                var_chaste_interface__membrane__stimDuration,
                var_chaste_interface__membrane__stimPeriod,
                0.0
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellluo_rudy_1994FromCellMLCvodeOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellluo_rudy_1994FromCellMLCvodeOpt::Cellluo_rudy_1994FromCellMLCvodeOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                12,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellluo_rudy_1994FromCellMLCvodeOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 1.8; // (var_ionic_concentrations__Cao) [mM]
        NV_Ith_S(this->mParameters, 1) = 5.4000000000000004; // (var_ionic_concentrations__Ko) [mM]
        NV_Ith_S(this->mParameters, 2) = 140.0; // (var_ionic_concentrations__Nao) [mM]
        NV_Ith_S(this->mParameters, 3) = 0.01; // (var_membrane__Cm) [uF_per_mm2]
        NV_Ith_S(this->mParameters, 4) = 0.16; // (var_fast_sodium_current__g_Na) [mS_per_mm2]
        NV_Ith_S(this->mParameters, 5) = 0.0074999999999999997; // (var_time_independent_potassium_current__g_K1_max) [mS_per_mm2]
    }

    Cellluo_rudy_1994FromCellMLCvodeOpt::~Cellluo_rudy_1994FromCellMLCvodeOpt()
    {
    }

    AbstractLookupTableCollection* Cellluo_rudy_1994FromCellMLCvodeOpt::GetLookupTableCollection()
    {
        return Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables::Instance();
    }
    
    double Cellluo_rudy_1994FromCellMLCvodeOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -84.624
        double var_chaste_interface__ionic_concentrations__Cai = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 0.00012
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 8);
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 9);
        // Units: mM; Initial value: 145.0
        
        // Lookup table indexing
        const bool _oob_0 = Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        const double var_L_type_Ca_channel_f_Ca_gate__f_Ca = 1 / (1.0 + 2777777.7777777785 * pow(var_chaste_interface__ionic_concentrations__Cai, 2)); // dimensionless
        const double var_fast_sodium_current__E_Na = 26.614641953637257 * log(NV_Ith_S(mParameters, 2) / var_chaste_interface__ionic_concentrations__Nai); // mV
        const double var_L_type_Ca_channel__i_Ca_L = ((fabs(var_chaste_interface__membrane__V) < 2.6614641953637258e-6) ? (6.5370375000000006e-11 * (-0.75 * NV_Ith_S(mParameters, 2) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(1.0000000000000001e-7)) / (-1.0 + exp(1.0000000000000001e-7)) - 187866.5138050704 * (-2.6614641953637258e-6 + var_chaste_interface__membrane__V) * (-6.5370375000000006e-11 * (-0.75 * NV_Ith_S(mParameters, 2) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(1.0000000000000001e-7)) / (-1.0 + exp(1.0000000000000001e-7)) - 6.5370375000000006e-11 * (-0.75 * NV_Ith_S(mParameters, 2) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(-1.0000000000000001e-7)) / (-1.0 + exp(-1.0000000000000001e-7)))) : (2.4561808914760263e-5 * (-0.75 * NV_Ith_S(mParameters, 2) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[0]) * var_chaste_interface__membrane__V / (_lt_0_row[1]))) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f + ((fabs(var_chaste_interface__membrane__V) < 2.6614641953637258e-6) ? (1.8691085000000002e-11 * (-0.75 * NV_Ith_S(mParameters, 1) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(1.0000000000000001e-7)) / (-1.0 + exp(1.0000000000000001e-7)) - 187866.5138050704 * (-2.6614641953637258e-6 + var_chaste_interface__membrane__V) * (-1.8691085000000002e-11 * (-0.75 * NV_Ith_S(mParameters, 1) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(1.0000000000000001e-7)) / (-1.0 + exp(1.0000000000000001e-7)) - 1.8691085000000002e-11 * (-0.75 * NV_Ith_S(mParameters, 1) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(-1.0000000000000001e-7)) / (-1.0 + exp(-1.0000000000000001e-7)))) : (7.0228579563684903e-6 * (-0.75 * NV_Ith_S(mParameters, 1) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[0]) * var_chaste_interface__membrane__V / (_lt_0_row[1]))) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f + ((fabs(var_chaste_interface__membrane__V) < 1.3307320976818627e-6) ? (1.0459259999999999e-7 * (-0.34000000000000002 * NV_Ith_S(mParameters, 0) + var_chaste_interface__ionic_concentrations__Cai * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 375733.02761014085 * (-1.3307320976818627e-6 + var_chaste_interface__membrane__V) * (-1.0459259999999999e-7 * (-0.34000000000000002 * NV_Ith_S(mParameters, 0) + var_chaste_interface__ionic_concentrations__Cai * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 1.0459259999999999e-7 * (-0.34000000000000002 * NV_Ith_S(mParameters, 0) + var_chaste_interface__ionic_concentrations__Cai * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.078597788527232842 * (-0.34000000000000002 * NV_Ith_S(mParameters, 0) + var_chaste_interface__ionic_concentrations__Cai * _lt_0_row[2]) * var_chaste_interface__membrane__V / (_lt_0_row[3]))) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f; // uA_per_mm2
        const double var_Na_Ca_exchanger__i_NaCa = 20.0 * (pow(var_chaste_interface__ionic_concentrations__Nai, 3) * NV_Ith_S(mParameters, 0) * _lt_0_row[4] - pow(NV_Ith_S(mParameters, 2), 3) * var_chaste_interface__ionic_concentrations__Cai * _lt_0_row[5]) / ((_lt_0_row[6]) * (669921.875 + pow(NV_Ith_S(mParameters, 2), 3)) * (1.3799999999999999 + NV_Ith_S(mParameters, 0))); // uA_per_mm2
        const double var_calcium_background_current__i_Ca_b = 3.0159999999999999e-5 * var_chaste_interface__membrane__V - 0.00040134880066084979 * log(NV_Ith_S(mParameters, 0) / var_chaste_interface__ionic_concentrations__Cai); // uA_per_mm2
        const double var_fast_sodium_current__i_Na_converted = 100.00000000000001 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 4) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // uA_per_cm2
        const double var_non_specific_calcium_activated_current__Vns = -26.614641953637257 * log((NV_Ith_S(mParameters, 1) + NV_Ith_S(mParameters, 2)) / (var_chaste_interface__ionic_concentrations__Ki + var_chaste_interface__ionic_concentrations__Nai)) + var_chaste_interface__membrane__V; // mV
        const double var_non_specific_calcium_activated_current__i_ns_Ca = 6.3678763853082156e-6 * (-0.75 * NV_Ith_S(mParameters, 1) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(0.037573302761014088 * var_non_specific_calcium_activated_current__Vns)) * var_non_specific_calcium_activated_current__Vns / ((1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__ionic_concentrations__Cai, 3)) * (-1.0 + exp(0.037573302761014088 * var_non_specific_calcium_activated_current__Vns))) + 6.3678763853082156e-6 * (-0.75 * NV_Ith_S(mParameters, 2) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(0.037573302761014088 * var_non_specific_calcium_activated_current__Vns)) * var_non_specific_calcium_activated_current__Vns / ((1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__ionic_concentrations__Cai, 3)) * (-1.0 + exp(0.037573302761014088 * var_non_specific_calcium_activated_current__Vns))); // uA_per_mm2
        const double var_sarcolemmal_calcium_pump__i_p_Ca = 0.0115 * var_chaste_interface__ionic_concentrations__Cai / (0.00050000000000000001 + var_chaste_interface__ionic_concentrations__Cai); // uA_per_mm2
        const double var_sodium_background_current__i_Na_b = 1.4100000000000001e-5 * var_chaste_interface__membrane__V - 1.4100000000000001e-5 * var_fast_sodium_current__E_Na; // uA_per_mm2
        const double var_sodium_potassium_pump__i_NaK = 0.014999999999999999 * NV_Ith_S(mParameters, 1) / ((1.0 + 31.622776601683793 * pow((1 / var_chaste_interface__ionic_concentrations__Nai), 1.5)) * (1.5 + NV_Ith_S(mParameters, 1)) * (1.0 + _lt_0_row[8] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 2))) * _lt_0_row[7])); // uA_per_mm2
        const double var_time_dependent_potassium_current__i_K = 0.0012135347818116574 * sqrt(NV_Ith_S(mParameters, 1)) * pow(var_chaste_interface__time_dependent_potassium_current_X_gate__X, 2) * (-26.614641953637257 * log((0.018329999999999999 * NV_Ith_S(mParameters, 2) + NV_Ith_S(mParameters, 1)) / (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai + var_chaste_interface__ionic_concentrations__Ki)) + var_chaste_interface__membrane__V) / (_lt_0_row[9]); // uA_per_mm2
        const double var_time_independent_potassium_current__E_K1 = 26.614641953637257 * log(NV_Ith_S(mParameters, 1) / var_chaste_interface__ionic_concentrations__Ki); // mV
        const double var_plateau_potassium_current__i_Kp = 0.000183 * (-var_time_independent_potassium_current__E_K1 + var_chaste_interface__membrane__V) / (_lt_0_row[10]); // uA_per_mm2
        const double var_time_independent_potassium_current__i_K1_converted = 43.893811257017397 * sqrt(NV_Ith_S(mParameters, 1)) * (-var_time_independent_potassium_current__E_K1 + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 5) / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K1)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K1)) + (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 0.080320000000000003 * var_time_independent_potassium_current__E_K1) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 0.061749999999999999 * var_time_independent_potassium_current__E_K1)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_time_independent_potassium_current__E_K1 - 0.51429999999999998 * var_chaste_interface__membrane__V)))); // uA_per_cm2
        const double var_chaste_interface__i_ionic = -var_fast_sodium_current__i_Na_converted - var_time_independent_potassium_current__i_K1_converted - 100.00000000000001 * var_L_type_Ca_channel__i_Ca_L - 100.00000000000001 * var_Na_Ca_exchanger__i_NaCa - 100.00000000000001 * var_calcium_background_current__i_Ca_b - 100.00000000000001 * var_non_specific_calcium_activated_current__i_ns_Ca - 100.00000000000001 * var_plateau_potassium_current__i_Kp - 100.00000000000001 * var_sarcolemmal_calcium_pump__i_p_Ca - 100.00000000000001 * var_sodium_background_current__i_Na_b - 100.00000000000001 * var_sodium_potassium_pump__i_NaK - 100.00000000000001 * var_time_dependent_potassium_current__i_K; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellluo_rudy_1994FromCellMLCvodeOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -84.624
        double var_chaste_interface__ionic_concentrations__Cai = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 0.00012
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 8);
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 9);
        // Units: mM; Initial value: 145.0
        double var_chaste_interface__ionic_concentrations__Ca_JSR = NV_Ith_S(rY, 10);
        // Units: mM; Initial value: 1.8
        double var_chaste_interface__ionic_concentrations__Ca_NSR = NV_Ith_S(rY, 11);
        // Units: mM; Initial value: 1.8

        // Lookup table indexing
        const bool _oob_0 = Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        double d_dt_chaste_interface_var_membrane__V;
        const double var_calcium_fluxes_in_the_SR__delta_Ca_i2 = 0; // mM
        const double var_calcium_fluxes_in_the_SR__i_leak = 0.00033333333333333332 * var_chaste_interface__ionic_concentrations__Ca_NSR; // mM_per_ms
        const double var_calcium_fluxes_in_the_SR__i_tr = 0.0055555555555555558 * var_chaste_interface__ionic_concentrations__Ca_NSR - 0.0055555555555555558 * var_chaste_interface__ionic_concentrations__Ca_JSR; // mM_per_ms
        const double var_L_type_Ca_channel_f_Ca_gate__f_Ca = 1 / (1.0 + 2777777.7777777785 * pow(var_chaste_interface__ionic_concentrations__Cai, 2)); // dimensionless
        const double var_calcium_fluxes_in_the_SR__i_rel = (1.0 - exp(0)) * (-0.00018000000000000001 + var_calcium_fluxes_in_the_SR__delta_Ca_i2) * (-var_chaste_interface__ionic_concentrations__Cai + var_chaste_interface__ionic_concentrations__Ca_JSR) * ((var_calcium_fluxes_in_the_SR__delta_Ca_i2 < 0.00018000000000000001) ? (0) : (60.0)) * exp(0) / (0.00062 + var_calcium_fluxes_in_the_SR__delta_Ca_i2); // mM_per_ms
        const double var_calcium_fluxes_in_the_SR__i_up = 0.0050000000000000001 * var_chaste_interface__ionic_concentrations__Cai / (0.00092000000000000003 + var_chaste_interface__ionic_concentrations__Cai); // mM_per_ms
        const double d_dt_chaste_interface_var_ionic_concentrations__Ca_NSR = -var_calcium_fluxes_in_the_SR__i_leak - var_calcium_fluxes_in_the_SR__i_tr + var_calcium_fluxes_in_the_SR__i_up; // mM / ms
        const double d_dt_chaste_interface_var_ionic_concentrations__Ca_JSR = -var_calcium_fluxes_in_the_SR__i_rel + 11.5 * var_calcium_fluxes_in_the_SR__i_tr; // mM / ms
        const double var_fast_sodium_current__E_Na = 26.614641953637257 * log(NV_Ith_S(mParameters, 2) / var_chaste_interface__ionic_concentrations__Nai); // mV
        const double var_L_type_Ca_channel__i_CaCa = ((fabs(var_chaste_interface__membrane__V) < 1.3307320976818627e-6) ? (1.0459259999999999e-7 * (-0.34000000000000002 * NV_Ith_S(mParameters, 0) + var_chaste_interface__ionic_concentrations__Cai * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 375733.02761014085 * (-1.3307320976818627e-6 + var_chaste_interface__membrane__V) * (-1.0459259999999999e-7 * (-0.34000000000000002 * NV_Ith_S(mParameters, 0) + var_chaste_interface__ionic_concentrations__Cai * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 1.0459259999999999e-7 * (-0.34000000000000002 * NV_Ith_S(mParameters, 0) + var_chaste_interface__ionic_concentrations__Cai * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.078597788527232842 * (-0.34000000000000002 * NV_Ith_S(mParameters, 0) + var_chaste_interface__ionic_concentrations__Cai * _lt_0_row[2]) * var_chaste_interface__membrane__V / (_lt_0_row[3]))) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f; // uA_per_mm2
        const double var_L_type_Ca_channel__i_CaK = ((fabs(var_chaste_interface__membrane__V) < 2.6614641953637258e-6) ? (1.8691085000000002e-11 * (-0.75 * NV_Ith_S(mParameters, 1) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(1.0000000000000001e-7)) / (-1.0 + exp(1.0000000000000001e-7)) - 187866.5138050704 * (-2.6614641953637258e-6 + var_chaste_interface__membrane__V) * (-1.8691085000000002e-11 * (-0.75 * NV_Ith_S(mParameters, 1) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(1.0000000000000001e-7)) / (-1.0 + exp(1.0000000000000001e-7)) - 1.8691085000000002e-11 * (-0.75 * NV_Ith_S(mParameters, 1) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(-1.0000000000000001e-7)) / (-1.0 + exp(-1.0000000000000001e-7)))) : (7.0228579563684903e-6 * (-0.75 * NV_Ith_S(mParameters, 1) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[0]) * var_chaste_interface__membrane__V / (_lt_0_row[1]))) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f; // uA_per_mm2
        const double var_L_type_Ca_channel__i_CaNa = ((fabs(var_chaste_interface__membrane__V) < 2.6614641953637258e-6) ? (6.5370375000000006e-11 * (-0.75 * NV_Ith_S(mParameters, 2) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(1.0000000000000001e-7)) / (-1.0 + exp(1.0000000000000001e-7)) - 187866.5138050704 * (-2.6614641953637258e-6 + var_chaste_interface__membrane__V) * (-6.5370375000000006e-11 * (-0.75 * NV_Ith_S(mParameters, 2) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(1.0000000000000001e-7)) / (-1.0 + exp(1.0000000000000001e-7)) - 6.5370375000000006e-11 * (-0.75 * NV_Ith_S(mParameters, 2) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(-1.0000000000000001e-7)) / (-1.0 + exp(-1.0000000000000001e-7)))) : (2.4561808914760263e-5 * (-0.75 * NV_Ith_S(mParameters, 2) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[0]) * var_chaste_interface__membrane__V / (_lt_0_row[1]))) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f; // uA_per_mm2
        const double var_L_type_Ca_channel_d_gate__d_infinity = _lt_0_row[11]; // dimensionless
        const double var_L_type_Ca_channel_d_gate__tau_d = _lt_0_row[12]; // ms
        const double d_dt_chaste_interface_var_L_type_Ca_channel_d_gate__d = (1.0 - var_chaste_interface__L_type_Ca_channel_d_gate__d) * var_L_type_Ca_channel_d_gate__d_infinity / var_L_type_Ca_channel_d_gate__tau_d - (1.0 - var_L_type_Ca_channel_d_gate__d_infinity) * var_chaste_interface__L_type_Ca_channel_d_gate__d / var_L_type_Ca_channel_d_gate__tau_d; // 1 / ms
        const double var_L_type_Ca_channel_f_gate__f_infinity = _lt_0_row[13]; // dimensionless
        const double var_L_type_Ca_channel_f_gate__tau_f = _lt_0_row[14]; // ms
        const double d_dt_chaste_interface_var_L_type_Ca_channel_f_gate__f = (1.0 - var_chaste_interface__L_type_Ca_channel_f_gate__f) * var_L_type_Ca_channel_f_gate__f_infinity / var_L_type_Ca_channel_f_gate__tau_f - (1.0 - var_L_type_Ca_channel_f_gate__f_infinity) * var_chaste_interface__L_type_Ca_channel_f_gate__f / var_L_type_Ca_channel_f_gate__tau_f; // 1 / ms
        const double var_Na_Ca_exchanger__i_NaCa = 20.0 * (pow(var_chaste_interface__ionic_concentrations__Nai, 3) * NV_Ith_S(mParameters, 0) * _lt_0_row[4] - pow(NV_Ith_S(mParameters, 2), 3) * var_chaste_interface__ionic_concentrations__Cai * _lt_0_row[5]) / ((_lt_0_row[6]) * (669921.875 + pow(NV_Ith_S(mParameters, 2), 3)) * (1.3799999999999999 + NV_Ith_S(mParameters, 0))); // uA_per_mm2
        const double var_calcium_background_current__i_Ca_b = 3.0159999999999999e-5 * var_chaste_interface__membrane__V - 0.00040134880066084979 * log(NV_Ith_S(mParameters, 0) / var_chaste_interface__ionic_concentrations__Cai); // uA_per_mm2
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 4) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // uA_per_mm2
        const double d_dt_chaste_interface_var_fast_sodium_current_h_gate__h = (1.0 - var_chaste_interface__fast_sodium_current_h_gate__h) * _lt_0_row[15] - _lt_0_row[16] * var_chaste_interface__fast_sodium_current_h_gate__h; // 1 / ms
        const double d_dt_chaste_interface_var_fast_sodium_current_j_gate__j = (1.0 - var_chaste_interface__fast_sodium_current_j_gate__j) * _lt_0_row[17] - _lt_0_row[18] * var_chaste_interface__fast_sodium_current_j_gate__j; // 1 / ms
        const double d_dt_chaste_interface_var_fast_sodium_current_m_gate__m = (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m) * _lt_0_row[19] - 0.080000000000000002 * var_chaste_interface__fast_sodium_current_m_gate__m * _lt_0_row[20]; // 1 / ms
        const double var_non_specific_calcium_activated_current__Vns = -26.614641953637257 * log((NV_Ith_S(mParameters, 1) + NV_Ith_S(mParameters, 2)) / (var_chaste_interface__ionic_concentrations__Ki + var_chaste_interface__ionic_concentrations__Nai)) + var_chaste_interface__membrane__V; // mV
        const double var_non_specific_calcium_activated_current__i_ns_K = 6.3678763853082156e-6 * (-0.75 * NV_Ith_S(mParameters, 1) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(0.037573302761014088 * var_non_specific_calcium_activated_current__Vns)) * var_non_specific_calcium_activated_current__Vns / ((1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__ionic_concentrations__Cai, 3)) * (-1.0 + exp(0.037573302761014088 * var_non_specific_calcium_activated_current__Vns))); // uA_per_mm2
        const double var_non_specific_calcium_activated_current__i_ns_Na = 6.3678763853082156e-6 * (-0.75 * NV_Ith_S(mParameters, 2) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(0.037573302761014088 * var_non_specific_calcium_activated_current__Vns)) * var_non_specific_calcium_activated_current__Vns / ((1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__ionic_concentrations__Cai, 3)) * (-1.0 + exp(0.037573302761014088 * var_non_specific_calcium_activated_current__Vns))); // uA_per_mm2
        const double var_sarcolemmal_calcium_pump__i_p_Ca = 0.0115 * var_chaste_interface__ionic_concentrations__Cai / (0.00050000000000000001 + var_chaste_interface__ionic_concentrations__Cai); // uA_per_mm2
        const double d_dt_chaste_interface_var_ionic_concentrations__Cai = 0.081176470588235281 * var_calcium_fluxes_in_the_SR__i_leak + 0.0015184968096382029 * var_Na_Ca_exchanger__i_NaCa + 0.0070588235294117632 * var_calcium_fluxes_in_the_SR__i_rel - 0.081176470588235281 * var_calcium_fluxes_in_the_SR__i_up - 0.0015184968096382029 * var_L_type_Ca_channel__i_CaCa - 0.0015184968096382029 * var_calcium_background_current__i_Ca_b - 0.0015184968096382029 * var_sarcolemmal_calcium_pump__i_p_Ca; // mM / ms
        const double var_sodium_background_current__i_Na_b = 1.4100000000000001e-5 * var_chaste_interface__membrane__V - 1.4100000000000001e-5 * var_fast_sodium_current__E_Na; // uA_per_mm2
        const double var_sodium_potassium_pump__i_NaK = 0.014999999999999999 * NV_Ith_S(mParameters, 1) / ((1.0 + 31.622776601683793 * pow((1 / var_chaste_interface__ionic_concentrations__Nai), 1.5)) * (1.5 + NV_Ith_S(mParameters, 1)) * (1.0 + _lt_0_row[8] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 2))) * _lt_0_row[7])); // uA_per_mm2
        const double d_dt_chaste_interface_var_ionic_concentrations__Nai = -0.0091109808578292168 * var_Na_Ca_exchanger__i_NaCa - 0.0091109808578292168 * var_sodium_potassium_pump__i_NaK - 0.0030369936192764057 * var_L_type_Ca_channel__i_CaNa - 0.0030369936192764057 * var_fast_sodium_current__i_Na - 0.0030369936192764057 * var_non_specific_calcium_activated_current__i_ns_Na - 0.0030369936192764057 * var_sodium_background_current__i_Na_b; // mM / ms
        const double d_dt_chaste_interface_var_time_dependent_potassium_current_X_gate__X = (1.0 - var_chaste_interface__time_dependent_potassium_current_X_gate__X) * _lt_0_row[21] - _lt_0_row[22] * var_chaste_interface__time_dependent_potassium_current_X_gate__X; // 1 / ms
        const double var_time_dependent_potassium_current__i_K = 0.0012135347818116574 * sqrt(NV_Ith_S(mParameters, 1)) * pow(var_chaste_interface__time_dependent_potassium_current_X_gate__X, 2) * (-26.614641953637257 * log((0.018329999999999999 * NV_Ith_S(mParameters, 2) + NV_Ith_S(mParameters, 1)) / (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai + var_chaste_interface__ionic_concentrations__Ki)) + var_chaste_interface__membrane__V) / (_lt_0_row[9]); // uA_per_mm2
        const double var_time_independent_potassium_current__E_K1 = 26.614641953637257 * log(NV_Ith_S(mParameters, 1) / var_chaste_interface__ionic_concentrations__Ki); // mV
        const double var_plateau_potassium_current__i_Kp = 0.000183 * (-var_time_independent_potassium_current__E_K1 + var_chaste_interface__membrane__V) / (_lt_0_row[10]); // uA_per_mm2
        const double var_time_independent_potassium_current__i_K1 = 0.4389381125701739 * sqrt(NV_Ith_S(mParameters, 1)) * (-var_time_independent_potassium_current__E_K1 + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 5) / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K1)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K1)) + (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 0.080320000000000003 * var_time_independent_potassium_current__E_K1) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 0.061749999999999999 * var_time_independent_potassium_current__E_K1)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_time_independent_potassium_current__E_K1 - 0.51429999999999998 * var_chaste_interface__membrane__V)))); // uA_per_mm2
        const double d_dt_chaste_interface_var_ionic_concentrations__Ki = 0.0060739872385528115 * var_sodium_potassium_pump__i_NaK - 0.0030369936192764057 * var_L_type_Ca_channel__i_CaK - 0.0030369936192764057 * var_non_specific_calcium_activated_current__i_ns_K - 0.0030369936192764057 * var_plateau_potassium_current__i_Kp - 0.0030369936192764057 * var_time_dependent_potassium_current__i_K - 0.0030369936192764057 * var_time_independent_potassium_current__i_K1; // mM / ms

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_membrane__V = (-var_L_type_Ca_channel__i_CaCa - var_L_type_Ca_channel__i_CaK - var_L_type_Ca_channel__i_CaNa - var_Na_Ca_exchanger__i_NaCa - var_calcium_background_current__i_Ca_b - var_fast_sodium_current__i_Na - var_non_specific_calcium_activated_current__i_ns_K - var_non_specific_calcium_activated_current__i_ns_Na - var_plateau_potassium_current__i_Kp - var_sarcolemmal_calcium_pump__i_p_Ca - var_sodium_background_current__i_Na_b - var_sodium_potassium_pump__i_NaK - var_time_dependent_potassium_current__i_K - var_time_independent_potassium_current__i_K1 - 0.0099999999999999985 * GetIntracellularAreaStimulus(var_chaste_interface__environment__time)) / NV_Ith_S(mParameters, 3); // mV / ms
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_membrane__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_ionic_concentrations__Cai;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_fast_sodium_current_m_gate__m;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_fast_sodium_current_h_gate__h;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_fast_sodium_current_j_gate__j;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_L_type_Ca_channel_d_gate__d;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_L_type_Ca_channel_f_gate__f;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_time_dependent_potassium_current_X_gate__X;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_ionic_concentrations__Nai;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_ionic_concentrations__Ki;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_ionic_concentrations__Ca_JSR;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_ionic_concentrations__Ca_NSR;
    }

    void Cellluo_rudy_1994FromCellMLCvodeOpt::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -84.624
        double var_chaste_interface__ionic_concentrations__Cai = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 0.00012
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 8);
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 9);
        // Units: mM; Initial value: 145.0
        
        // Lookup table indexing
        const bool _oob_0 = Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellluo_rudy_1994FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
const double var_x0 = 1 / NV_Ith_S(mParameters, 3);
        const double var_x1 = exp(1.0000000000000001e-7);
        const double var_x2 = 1 / (-1.0 + var_x1);
        const double var_x3 = -0.75 * NV_Ith_S(mParameters, 1);
        const double var_x4 = 0.75 * var_chaste_interface__ionic_concentrations__Ki;
        const double var_x5 = var_x2 * (var_x3 + var_x1 * var_x4);
        const double var_x6 = exp(-1.0000000000000001e-7);
        const double var_x7 = 1 / (-1.0 + var_x6);
        const double var_x8 = var_x7 * (var_x3 + var_x4 * var_x6);
        const double var_x9 = pow(var_chaste_interface__ionic_concentrations__Cai, 2);
        const double var_x10 = 1 / (1.0 + 2777777.7777777785 * var_x9);
        const double var_x11 = var_x10;
        const double var_x12 = var_x11 * var_chaste_interface__L_type_Ca_channel_f_gate__f;
        const double var_x13 = var_x12 * var_chaste_interface__L_type_Ca_channel_d_gate__d;
        const double var_x14 = fabs(var_chaste_interface__membrane__V);
        const double var_x15 = var_x14 < 2.6614641953637258e-6;
        const double var_x16 = 0.037573302761014088 * var_chaste_interface__membrane__V;
        const double var_x17 = exp(var_x16);
        const double var_x18 = -1.0 + var_x17;
        const double var_x19 = 1 / var_x18;
        const double var_x20 = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__L_type_Ca_channel_f_gate__f;
        const double var_x21 = var_x10 * var_x20;
        const double var_x22 = var_x19 * var_x21;
        const double var_x23 = var_x3 + var_x17 * var_x4;
        const double var_x24 = 7.0228579563684903e-6 * var_x23;
        const double var_x25 = var_x17 * var_chaste_interface__membrane__V;
        const double var_x26 = var_x22 * var_x25;
        const double var_x27 = var_x21 * var_x25 / pow(var_x18, 2);
        const double var_x28 = ((var_x15) ? (var_x13 * (3.5114289781842452e-6 * var_x5 + 3.5114289781842452e-6 * var_x8)) : (var_x22 * var_x24 + 1.9790397618167244e-7 * var_x26 * var_chaste_interface__ionic_concentrations__Ki - 2.6387196824222991e-7 * var_x23 * var_x27));
        const double var_x29 = exp(9.9999999999999995e-8);
        const double var_x30 = 1 / (-1.0 + var_x29);
        const double var_x31 = -0.34000000000000002 * NV_Ith_S(mParameters, 0);
        const double var_x32 = var_chaste_interface__ionic_concentrations__Cai;
        const double var_x33 = var_x30 * (var_x31 + var_x29 * var_x32);
        const double var_x34 = exp(-9.9999999999999995e-8);
        const double var_x35 = 1 / (-1.0 + var_x34);
        const double var_x36 = var_x35 * (var_x31 + var_x32 * var_x34);
        const double var_x37 = var_x14 < 1.3307320976818627e-6;
        const double var_x38 = _lt_0_row[2];
        const double var_x39 = -1.0 + var_x38;
        const double var_x40 = 1 / var_x39;
        const double var_x41 = var_x21 * var_x40;
        const double var_x42 = var_x31 + var_x32 * var_x38;
        const double var_x43 = 0.078597788527232842 * var_x42;
        const double var_x44 = var_x38 * var_chaste_interface__membrane__V;
        const double var_x45 = var_x41 * var_x44;
        const double var_x46 = ((var_x37) ? (var_x13 * (0.039298894263616421 * var_x33 + 0.039298894263616421 * var_x36)) : (var_x41 * var_x43 + 0.0059063570093597579 * var_x45 * var_chaste_interface__ionic_concentrations__Cai - 0.0059063570093597579 * var_x21 * var_x42 * var_x44 / pow(var_x39, 2)));
        const double var_x47 = -0.75 * NV_Ith_S(mParameters, 2);
        const double var_x48 = 0.75 * var_chaste_interface__ionic_concentrations__Nai;
        const double var_x49 = var_x2 * (var_x47 + var_x1 * var_x48);
        const double var_x50 = var_x7 * (var_x47 + var_x48 * var_x6);
        const double var_x51 = var_x47 + var_x17 * var_x48;
        const double var_x52 = 2.4561808914760263e-5 * var_x51;
        const double var_x53 = ((var_x15) ? (var_x13 * (1.2280904457380131e-5 * var_x49 + 1.2280904457380131e-5 * var_x50)) : (var_x22 * var_x52 + 6.9215121203434662e-7 * var_x26 * var_chaste_interface__ionic_concentrations__Nai - 9.2286828271246209e-7 * var_x27 * var_x51));
        const double var_x54 = exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__V);
        const double var_x55 = 1.0 + var_x54;
        const double var_x56 = 1 / var_x55;
        const double var_x57 = 1 / (var_chaste_interface__ionic_concentrations__Ki + var_chaste_interface__ionic_concentrations__Nai);
        const double var_x58 = log(var_x57 * (NV_Ith_S(mParameters, 1) + NV_Ith_S(mParameters, 2)));
        const double var_x59 = exp(var_x16 - var_x58);
        const double var_x60 = 0.75 * var_x59;
        const double var_x61 = var_x60 * var_chaste_interface__ionic_concentrations__Ki;
        const double var_x62 = var_x3 + var_x61;
        const double var_x63 = 1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__ionic_concentrations__Cai, 3);
        const double var_x64 = 1 / var_x63;
        const double var_x65 = -1.0 + var_x59;
        const double var_x66 = 1 / var_x65;
        const double var_x67 = var_x64 * var_x66;
        const double var_x68 = 6.3678763853082156e-6 * var_x67;
        const double var_x69 = var_x60 * var_chaste_interface__ionic_concentrations__Nai;
        const double var_x70 = var_x47 + var_x69;
        const double var_x71 = 1 / var_chaste_interface__ionic_concentrations__Ki;
        const double var_x72 = log(var_x71 * NV_Ith_S(mParameters, 1));
        const double var_x73 = -26.614641953637257 * var_x72 + var_chaste_interface__membrane__V;
        const double var_x74 = var_x54 * var_x73 / pow(var_x55, 2);
        const double var_x75 = pow(var_chaste_interface__time_dependent_potassium_current_X_gate__X, 2);
        const double var_x76 = exp(-1.7526479750778814 + 0.031152647975077882 * var_chaste_interface__membrane__V);
        const double var_x77 = 1.0 + var_x76;
        const double var_x78 = sqrt(NV_Ith_S(mParameters, 1));
        const double var_x79 = var_x78 / var_x77;
        const double var_x80 = var_x75 * var_x79;
        const double var_x81 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3);
        const double var_x82 = var_x81 * NV_Ith_S(mParameters, 4) * var_chaste_interface__fast_sodium_current_j_gate__j;
        const double var_x83 = var_x82 * var_chaste_interface__fast_sodium_current_h_gate__h;
        const double var_x84 = _lt_0_row[5];
        const double var_x85 = pow(NV_Ith_S(mParameters, 2), 3);
        const double var_x86 = var_x84 * var_x85;
        const double var_x87 = var_x86 * var_chaste_interface__ionic_concentrations__Cai;
        const double var_x88 = NV_Ith_S(mParameters, 0) * _lt_0_row[4];
        const double var_x89 = var_x88 * pow(var_chaste_interface__ionic_concentrations__Nai, 3);
        const double var_x90 = 1.0 + 0.10000000000000001 * var_x84;
        const double var_x91 = 1 / ((669921.875 + var_x85) * (1.3799999999999999 + NV_Ith_S(mParameters, 0)));
        const double var_x92 = var_x91 / var_x90;
        const double var_x93 = var_x92 * (0.024422646794659157 * var_x87 + 0.013150655966354929 * var_x89);
        const double var_x94 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 6.3475921059424856 * var_x72);
        const double var_x95 = 1.0 + var_x94;
        const double var_x96 = 1 / var_x95;
        const double var_x97 = exp(-2.4444678999999998 + 13.687910356755641 * var_x72 - 0.51429999999999998 * var_chaste_interface__membrane__V);
        const double var_x98 = 1.0 + var_x97;
        const double var_x99 = 1 / var_x98;
        const double var_x100 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 2.1376880417161446 * var_x72);
        const double var_x101 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 1.6434541406371006 * var_x72);
        const double var_x102 = var_x101 + 0.49124000000000001 * var_x100;
        const double var_x103 = var_x102 * var_x99;
        const double var_x104 = var_x78 * NV_Ith_S(mParameters, 5) / (var_x103 + 1.02 * var_x96);
        const double var_x105 = var_x104 * var_x96;
        const double var_x106 = -26.614641953637257 * var_x58 + var_chaste_interface__membrane__V;
        const double var_x107 = var_x106 * var_x59;
        const double var_x108 = var_x107 * var_x64 / pow(var_x65, 2);
        const double var_x109 = 2.3926214736989759e-7 * var_x108;
        const double var_x110 = 1 / (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai + var_chaste_interface__ionic_concentrations__Ki);
        const double var_x111 = -26.614641953637257 * log(var_x110 * (0.018329999999999999 * NV_Ith_S(mParameters, 2) + NV_Ith_S(mParameters, 1))) + var_chaste_interface__membrane__V;
        const double var_x112 = var_x111 * var_x75 * var_x76 * var_x78 / pow(var_x77, 2);
        const double var_x113 = 1 / var_chaste_interface__ionic_concentrations__Nai;
        const double var_x114 = pow(var_x113, 1.5);
        const double var_x115 = exp(-0.0037573302761014088 * var_chaste_interface__membrane__V);
        const double var_x116 = exp(0.01485884101040119 * NV_Ith_S(mParameters, 2));
        const double var_x117 = exp(-var_x16);
        const double var_x118 = 1.0 + 0.1245 * var_x115 + 0.036499999999999998 * var_x117 * (-0.14285714285714285 + 0.14285714285714285 * var_x116);
        const double var_x119 = NV_Ith_S(mParameters, 1) / (1.5 + NV_Ith_S(mParameters, 1));
        const double var_x120 = var_x119 * (0.00046778761937462537 * var_x115 + 0.037573302761014088 * var_x117 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x116)) / (pow(var_x118, 2) * (1.0 + 31.622776601683793 * var_x114));
        const double var_x121 = var_x84 * var_x91 * (var_x89 - var_x87) / pow(var_x90, 2);
        const double var_x122 = var_x107 * var_x67;
        const double var_x123 = 1.7944661052742319e-7 * var_x122;
        const double var_x124 = var_x94 / pow(var_x95, 2);
        const double var_x125 = var_x104 * var_x73;
        const double var_x126 = var_x124 * var_x125;
        const double var_x127 = var_x102 * var_x97 / pow(var_x98, 2);
        const double var_x128 = 0.24326999999999999 * var_x124 - 0.51429999999999998 * var_x127 - var_x99 * (0.061749999999999999 * var_x101 + 0.039456396800000001 * var_x100);
        const double var_x129 = var_x73 * var_x78 * var_x96 * NV_Ith_S(mParameters, 5) / pow((var_x96 + 0.98039215686274506 * var_x103), 2);
        const double var_x130 = 0.42189361069797565 * var_x129;
        const double var_x131 = 6.5370375000000006e-11 * var_x49;
        const double var_x132 = -0.5 + 187866.5138050704 * var_chaste_interface__membrane__V;
        const double var_x133 = var_x131 - var_x132 * (-var_x131 - 6.5370375000000006e-11 * var_x50);
        const double var_x134 = var_x133 * var_chaste_interface__L_type_Ca_channel_f_gate__f;
        const double var_x135 = var_chaste_interface__ionic_concentrations__Cai / pow((3.5999999999999994e-7 + var_x9), 2);
        const double var_x136 = 7.1999999999999988e-7 * var_x135;
        const double var_x137 = var_x135 * var_x20 * var_chaste_interface__membrane__V;
        const double var_x138 = var_x137 * var_x19;
        const double var_x139 = ((var_x15) ? (-var_x134 * var_x136 * var_chaste_interface__L_type_Ca_channel_d_gate__d) : (-1.7684502418627385e-11 * var_x138 * var_x51));
        const double var_x140 = 1.8691085000000002e-11 * var_x5;
        const double var_x141 = var_x140 - var_x132 * (-var_x140 - 1.8691085000000002e-11 * var_x8);
        const double var_x142 = var_x136 * var_x20;
        const double var_x143 = ((var_x15) ? (-var_x141 * var_x142) : (-5.0564577285853121e-12 * var_x138 * var_x23));
        const double var_x144 = 1.0459259999999999e-7 * var_x29 * var_x30;
        const double var_x145 = 1.0459259999999999e-7 * var_x33;
        const double var_x146 = var_x145 - 375733.02761014085 * (-1.3307320976818627e-6 + var_chaste_interface__membrane__V) * (-var_x145 - 1.0459259999999999e-7 * var_x36);
        const double var_x147 = ((var_x37) ? (var_x13 * (var_x144 + (0.5 - 375733.02761014085 * var_chaste_interface__membrane__V) * (-var_x144 - 1.0459259999999999e-7 * var_x34 * var_x35)) - var_x142 * var_x146) : (0.078597788527232842 * var_x45 - 5.659040773960763e-8 * var_x137 * var_x40 * var_x42));
        const double var_x148 = 0.00050000000000000001 + var_chaste_interface__ionic_concentrations__Cai;
        const double var_x149 = 1 / var_x148;
        const double var_x150 = 1 / var_chaste_interface__ionic_concentrations__Cai;
        const double var_x151 = var_chaste_interface__ionic_concentrations__Cai / pow(var_x148, 2);
        const double var_x152 = var_x86 * var_x92;
        const double var_x153 = var_x106 * var_x66 / (pow(var_x63, 2) * pow(var_chaste_interface__ionic_concentrations__Cai, 4));
        const double var_x154 = 3.301107118143778e-14 * var_x153;
        const double var_x155 = -26.614641953637257 * log(var_x113 * NV_Ith_S(mParameters, 2)) + var_chaste_interface__membrane__V;
        const double var_x156 = var_x0 * var_x155;
        const double var_x157 = NV_Ith_S(mParameters, 4) * var_chaste_interface__fast_sodium_current_h_gate__h;
        const double var_x158 = var_x157 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2) * var_chaste_interface__fast_sodium_current_j_gate__j;
        const double var_x159 = var_x157 * var_x81;
        const double var_x160 = var_x10 * var_chaste_interface__membrane__V;
        const double var_x161 = var_x160 * var_chaste_interface__L_type_Ca_channel_f_gate__f;
        const double var_x162 = var_x161 * var_x19;
        const double var_x163 = ((var_x15) ? (var_x11 * var_x134) : (var_x162 * var_x52));
        const double var_x164 = ((var_x15) ? (var_x12 * var_x141) : (var_x162 * var_x24));
        const double var_x165 = var_x40 * var_x43;
        const double var_x166 = ((var_x37) ? (var_x12 * var_x146) : (var_x161 * var_x165));
        const double var_x167 = var_x11 * var_chaste_interface__L_type_Ca_channel_d_gate__d;
        const double var_x168 = var_x160 * var_chaste_interface__L_type_Ca_channel_d_gate__d;
        const double var_x169 = var_x168 * var_x19;
        const double var_x170 = ((var_x15) ? (var_x133 * var_x167) : (var_x169 * var_x52));
        const double var_x171 = ((var_x15) ? (var_x141 * var_x167) : (var_x169 * var_x24));
        const double var_x172 = ((var_x37) ? (var_x146 * var_x167) : (var_x165 * var_x168));
        const double var_x173 = var_x111 * var_x79 * var_chaste_interface__time_dependent_potassium_current_X_gate__X;
        const double var_x174 = 0.5 - 187866.5138050704 * var_chaste_interface__membrane__V;
        const double var_x175 = var_x1 * var_x2;
        const double var_x176 = 4.9027781250000008e-11 * var_x175;
        const double var_x177 = var_x6 * var_x7;
        const double var_x178 = ((var_x15) ? (var_x13 * (var_x176 + var_x174 * (-var_x176 - 4.9027781250000008e-11 * var_x177))) : (1.8421356686070195e-5 * var_x26));
        const double var_x179 = var_x60 + var_x57 * var_x69;
        const double var_x180 = var_x106 * var_x68;
        const double var_x181 = var_x110 * var_x80;
        const double var_x182 = var_x113 * var_x83;
        const double var_x183 = var_x88 * var_x92 * pow(var_chaste_interface__ionic_concentrations__Nai, 2);
        const double var_x184 = var_x57 * var_x67;
        const double var_x185 = var_x107 * var_x184;
        const double var_x186 = 4.7759072889811619e-6 * var_x185;
        const double var_x187 = var_x113 * var_x114 * var_x119 / (var_x118 * pow((0.031622776601683791 + var_x114), 2));
        const double var_x188 = 0.00016947874999999999 * var_x184;
        const double var_x189 = var_x108 * var_x57;
        const double var_x190 = 6.3678763853082156e-6 * var_x189;
        const double var_x191 = var_x190 * var_x62 + var_x190 * var_x70 - var_x188 * var_x62 - var_x188 * var_x70;
        const double var_x192 = 1.4018313750000003e-11 * var_x175;
        const double var_x193 = ((var_x15) ? (var_x13 * (var_x192 + var_x174 * (-var_x192 - 1.4018313750000003e-11 * var_x177))) : (5.2671434672763675e-6 * var_x26));
        const double var_x194 = var_x56 * var_x71;
        const double var_x195 = var_x60 + var_x57 * var_x61;
        const double var_x196 = var_x105 * var_x71;
        const double var_x197 = var_x124 * var_x71;
        const double var_x198 = 6.4745439480613349 * var_x197 - var_x99 * (1.0501178736126389 * var_x100 * var_x71 + 1.6434541406371006 * var_x101 * var_x71) - 13.687910356755641 * var_x127 * var_x71;
        const double var_x199 = var_x125 * var_x197;
        const double var_x200 = 0.00092000000000000003 + var_chaste_interface__ionic_concentrations__Cai;
        const double var_x201 = 1 / var_x200;
        const double var_x202 = var_chaste_interface__ionic_concentrations__Cai / pow(var_x200, 2);
        const double var_x203 = 1.0 - var_chaste_interface__fast_sodium_current_m_gate__m;
        const double var_x204 = 1 / (1.0 - exp(-9.9999999747524276e-8));
        const double var_x205 = 1 / (1.0 - exp(1.0000000045806701e-7));
        const double var_x206 = _lt_0_row[20];
        const double var_x207 = 0.0072727272727272727 * var_x206 * var_chaste_interface__fast_sodium_current_m_gate__m;
        const double var_x208 = 47.130000000000003 + var_chaste_interface__membrane__V;
        const double var_x209 = fabs(var_x208) < 1.0000000010279564e-6;
        const double var_x210 = -0.10000000000000001 * var_chaste_interface__membrane__V;
        const double var_x211 = exp(-4.7130000000000001 + var_x210);
        const double var_x212 = 1.0 - var_x211;
        const double var_x213 = 0.32000000000000001 / var_x212;
        const double var_x214 = 3.2000000146581445e-7 * var_x205;
        const double var_x215 = -0.080000000000000002 * var_x206;
        const double var_x216 = exp(0.079000000000000001 * var_chaste_interface__membrane__V);
        const double var_x217 = exp(0.34999999999999998 * var_chaste_interface__membrane__V);
        const double var_x218 = exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__membrane__V);
        const double var_x219 = var_chaste_interface__membrane__V < -40.0;
        const double var_x220 = exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__membrane__V);
        const double var_x221 = 1.0 + var_x220;
        const double var_x222 = 1.0 - var_chaste_interface__fast_sodium_current_j_gate__j;
        const double var_x223 = exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V);
        const double var_x224 = 1.0 + var_x223;
        const double var_x225 = 1 / var_x224;
        const double var_x226 = exp(0.24440000000000001 * var_chaste_interface__membrane__V);
        const double var_x227 = exp(-0.043909999999999998 * var_chaste_interface__membrane__V);
        const double var_x228 = -127140.0 * var_x226 - 3.4740000000000003e-5 * var_x227;
        const double var_x229 = var_x225 * var_x228;
        const double var_x230 = exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__membrane__V);
        const double var_x231 = 1.0 + var_x230;
        const double var_x232 = exp(-0.01052 * var_chaste_interface__membrane__V);
        const double var_x233 = var_x232 / var_x231;
        const double var_x234 = 37.780000000000001 + var_chaste_interface__membrane__V;
        const double var_x235 = var_x222 * var_x234;
        const double var_x236 = exp(-3.2000000000000002 + var_x210);
        const double var_x237 = 1.0 + var_x236;
        const double var_x238 = exp(-2.5349999999999999e-7 * var_chaste_interface__membrane__V);
        const double var_x239 = var_x238 / var_x237;
        const double var_x240 = exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__membrane__V);
        const double var_x241 = 1.0 + var_x240;
        const double var_x242 = 1 / var_x241;
        const double var_x243 = -1.0 + var_x242;
        const double var_x244 = exp(1.0000000001853256e-7);
        const double var_x245 = (1.0 - var_x244) / (1.0 + var_x244);
        const double var_x246 = 45787545.779060178 * var_x245;
        const double var_x247 = exp(-1.0000000001853256e-7);
        const double var_x248 = (1.0 - var_x247) / (1.0 + var_x247);
        const double var_x249 = (10.000000624 + var_chaste_interface__membrane__V) * (var_x246 + 45787545.779060178 * var_x248);
        const double var_x250 = 10.0 + var_chaste_interface__membrane__V;
        const double var_x251 = fabs(var_x250) < 6.2400000011564316e-7;
        const double var_x252 = 1.0 - var_x240;
        const double var_x253 = 1 / var_x252;
        const double var_x254 = 0.035000000000000003 * var_x241 * var_x253;
        const double var_x255 = 0.005608974358974359 * var_x240 * var_x250;
        const double var_x256 = ((var_x251) ? (4.7698560017679535e-16 * (-36688738598216.805 * var_x245 - 36688738598216.805 * var_x248) / pow((-var_x245 + 0.017500000000000002 * var_x249), 2)) : (var_x254 - var_x253 * var_x255 - var_x241 * var_x255 / pow(var_x252, 2)));
        const double var_x257 = 1.0 - var_chaste_interface__L_type_Ca_channel_d_gate__d;
        const double var_x258 = ((var_x251) ? (1 / (-var_x246 + 801282.05113355326 * var_x249)) : (var_x250 * var_x254));
        const double var_x259 = 0.16025641025641024 * var_x240 * var_x258 / pow(var_x241, 2);
        const double var_x260 = 1.0 - var_chaste_interface__L_type_Ca_channel_f_gate__f;
        const double var_x261 = 0.019699999999999999 * exp(-0.113569 * pow((1 + 0.10000000000000001 * var_chaste_interface__membrane__V), 2));
        const double var_x262 = exp(2.5 - 0.050000000000000003 * var_chaste_interface__membrane__V);
        const double var_x263 = 1.0 + var_x262;
        const double var_x264 = 0.029999999999999999 * var_x262 / pow(var_x263, 2);
        const double var_x265 = exp(4.0767441860465121 + 0.11627906976744186 * var_chaste_interface__membrane__V);
        const double var_x266 = 1.0 + var_x265;
        const double var_x267 = 0.11627906976744186 * var_x265 / pow(var_x266, 2);
        const double var_x268 = -0.02 - var_x261;
        const double var_x269 = 1 / var_x266;
        const double var_x270 = 0.59999999999999998 / var_x263;
        const double var_x271 = var_x269 + var_x270;
        const double var_x272 = var_x261 * (-0.022713800000000003 - 0.0022713799999999999 * var_chaste_interface__membrane__V);
        const double var_x273 = 1.0 - var_x269 - var_x270;
        const double var_x274 = 1.0 - var_chaste_interface__time_dependent_potassium_current_X_gate__X;
        const double var_x275 = 1 / (1.0 - exp(9.9999999960687092e-8));
        const double var_x276 = 1 / (1.0 - exp(-9.9999999960687092e-8));
        const double var_x277 = 1 / (-1.0 + exp(9.9999999925515227e-8));
        const double var_x278 = 1 / (-1.0 + exp(-9.9999999925515227e-8));
        const double var_x279 = (-6.5500000000000006e-5 * var_x277 - 6.5500000000000006e-5 * var_x278) * var_chaste_interface__time_dependent_potassium_current_X_gate__X;
        const double var_x280 = 30.0 + var_chaste_interface__membrane__V;
        const double var_x281 = fabs(var_x280);
        const double var_x282 = var_x281 < 6.7567567541004792e-7;
        const double var_x283 = exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__membrane__V);
        const double var_x284 = 1.0 - var_x283;
        const double var_x285 = 7.1899999999999999e-5 / var_x284;
        const double var_x286 = var_x274 * var_x285 - 1.0641199999999999e-5 * var_x274 * var_x280 * var_x283 / pow(var_x284, 2);
        const double var_x287 = var_x281 < 1.4556040746072085e-6;
        const double var_x288 = exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__membrane__V);
        const double var_x289 = -1.0 + var_x288;
        const double var_x290 = 0.00013100000000000001 / var_x289;
        const double var_x291 = 4.8581081061982445e-11 * var_x275;
        const double var_x292 = -1.9068413377354434e-10 * var_x277;
        const double var_x293 = var_x292 + 343500.00025585521 * (29.999998544395925 + var_chaste_interface__membrane__V) * (var_x292 - 1.9068413377354434e-10 * var_x278);
        const double var_x294 = -var_x280 * var_x285;
        const double var_x295 = 1.9339199950521953e-8 * var_x67;
        const double var_x296 = 7.2663761489674998e-10 * var_x108;
        const double var_x297 = 5.4497821117256254e-10 * var_x122;
        const double var_x298 = 1.0025441254350579e-16 * var_x153;
        const double var_x299 = 0.0030369936192764057 * var_x155;
        const double var_x300 = var_x106 * var_x295;
        const double var_x301 = 5.1470588235294113e-7 * var_x184;
        const double var_x302 = 1.9339199950521953e-8 * var_x189;
        const double var_x303 = var_x302 * var_x70 - var_x301 * var_x70;
        const double var_x304 = 1.4504399962891466e-8 * var_x185;
        const double var_x305 = 0.0012812882037032361 * var_x129;
        const double var_x306 = var_x302 * var_x62 - var_x301 * var_x62;
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (var_x0 * (-4.426e-5 - var_x28 - var_x46 - var_x53 - var_x83 + 0.10468673984798647 * var_x126 + 3.7804821863291499e-5 * var_x112 - 20.0 * var_x93 - 0.000183 * var_x56 - 0.014999999999999999 * var_x120 - 0.048845293589318314 * var_x121 - 3.0602006688963209e-5 * var_x74 - 0.0012135347818116574 * var_x80 - 0.4389381125701739 * var_x105 + var_x109 * var_x62 + var_x109 * var_x70 - var_x123 * var_chaste_interface__ionic_concentrations__Ki - var_x123 * var_chaste_interface__ionic_concentrations__Nai - var_x128 * var_x130 - var_x62 * var_x68 - var_x68 * var_x70));
        IJth(rJacobian, 1, 0) = -4.5797863778688198e-8 + 0.030369936192764058 * var_x93 + 7.4171422481221223e-5 * var_x121 - 0.0015184968096382029 * var_x46;
        IJth(rJacobian, 2, 0) = ((var_x209) ? (var_x207 + var_x203 * (0.15999999943156581 * var_x204 + 0.16000000056843419 * var_x205)) : (var_x207 + var_x203 * var_x213 - 0.032000000000000001 * var_x203 * var_x208 * var_x211 / pow(var_x212, 2)));
        IJth(rJacobian, 3, 0) = ((var_x219) ? ((-0.28123999999999999 * var_x216 - 108500.0 * var_x217) * var_chaste_interface__fast_sodium_current_h_gate__h - 0.14705882352941177 * var_x218 * (0.13500000000000001 - 0.13500000000000001 * var_chaste_interface__fast_sodium_current_h_gate__h)) : (-0.693000693000693 * var_x220 * var_chaste_interface__fast_sodium_current_h_gate__h / pow(var_x221, 2)));
        IJth(rJacobian, 4, 0) = ((var_x219) ? (var_x222 * var_x229 + 0.001275024 * var_x233 * var_chaste_interface__fast_sodium_current_j_gate__j + var_x225 * var_x235 * (1.5254334000000001e-6 * var_x227 - 31073.016 * var_x226) - 0.311 * var_x223 * var_x228 * var_x235 / pow(var_x224, 2) - 0.016701360000000002 * var_x230 * var_x232 * var_chaste_interface__fast_sodium_current_j_gate__j / pow(var_x231, 2)) : (7.6049999999999996e-8 * var_x239 * var_chaste_interface__fast_sodium_current_j_gate__j - 0.029999999999999999 * var_x236 * var_x238 * var_chaste_interface__fast_sodium_current_j_gate__j / pow(var_x237, 2)));
        IJth(rJacobian, 5, 0) = var_x257 * var_x259 + var_x259 * var_chaste_interface__L_type_Ca_channel_d_gate__d + var_x242 * var_x256 * var_x257 + var_x243 * var_x256 * var_chaste_interface__L_type_Ca_channel_d_gate__d;
        IJth(rJacobian, 6, 0) = var_x260 * var_x271 * var_x272 + var_x260 * (0.02 + var_x261) * (var_x264 - var_x267) + var_x268 * (var_x267 - var_x264) * var_chaste_interface__L_type_Ca_channel_f_gate__f - var_x272 * var_x273 * var_chaste_interface__L_type_Ca_channel_f_gate__f;
        IJth(rJacobian, 7, 0) = ((var_x282) ? (var_x279 + var_x274 * (3.595e-5 * var_x275 + 3.595e-5 * var_x276)) : ((var_x287) ? (var_x279 + var_x286) : (var_x286 - var_x290 * var_chaste_interface__time_dependent_potassium_current_X_gate__X + 8.9997000000000013e-6 * var_x280 * var_x288 * var_chaste_interface__time_dependent_potassium_current_X_gate__X / pow(var_x289, 2))));
        IJth(rJacobian, 8, 0) = -4.2821610031797325e-8 - 0.00013666471286743825 * var_x120 - 0.18221961715658433 * var_x93 - 0.0030369936192764057 * var_x53 - 0.0030369936192764057 * var_x83 - 0.00044502853488732734 * var_x121 + var_x296 * var_x70 - var_x295 * var_x70 - var_x297 * var_chaste_interface__ionic_concentrations__Nai;
        IJth(rJacobian, 9, 0) = 9.110980857829217e-5 * var_x120 + 1.1481300277669745e-7 * var_x112 + 0.00031793296094118393 * var_x126 - 5.5576983232758224e-7 * var_x56 - 9.2938099051435146e-8 * var_x74 - 0.0013330522471328469 * var_x105 - 3.6854973891319883e-6 * var_x80 - 0.0030369936192764057 * var_x28 + var_x296 * var_x62 - var_x128 * var_x305 - var_x295 * var_x62 - var_x297 * var_chaste_interface__ionic_concentrations__Ki;
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (var_x0 * (-var_x139 - var_x143 - var_x147 + 20.0 * var_x152 + 0.0115 * var_x151 - 0.0115 * var_x149 - 0.00040134880066084979 * var_x150 - var_x154 * var_x62 - var_x154 * var_x70));
        IJth(rJacobian, 1, 1) = 1.7462713310839333e-5 * var_x151 + 0.00040588235294117644 * var_x202 - 0.030369936192764058 * var_x152 - 6.0944687335561951e-7 * var_x150 - 1.7462713310839333e-5 * var_x149 - 0.0015184968096382029 * var_x147 - 0.00040588235294117644 * var_x201;
        IJth(rJacobian, 8, 1) = 0.18221961715658433 * var_x152 - 0.0030369936192764057 * var_x139 - var_x298 * var_x70;
        IJth(rJacobian, 9, 1) = -0.0030369936192764057 * var_x143 - var_x298 * var_x62;
        IJth(rJacobian, 11, 1) = 0.0050000000000000001 * var_x201 - 0.0050000000000000001 * var_x202;
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x156 * var_x158);
        IJth(rJacobian, 2, 2) = ((var_x209) ? (var_x214 + var_x215 - 499999.99948602181 * (47.130001000000007 + var_chaste_interface__membrane__V) * (var_x214 + 3.1999999919207769e-7 * var_x204)) : (var_x215 - var_x208 * var_x213));
        IJth(rJacobian, 8, 2) = -0.0091109808578292168 * var_x155 * var_x158;
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x156 * var_x82);
        IJth(rJacobian, 3, 3) = ((var_x219) ? (-310000.0 * var_x217 - 0.13500000000000001 * var_x218 - 3.5600000000000001 * var_x216) : (-7.6923076923076916 / var_x221));
        IJth(rJacobian, 8, 3) = -var_x299 * var_x82;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x156 * var_x159);
        IJth(rJacobian, 4, 4) = ((var_x219) ? (-0.1212 * var_x233 - var_x229 * var_x234) : (-0.29999999999999999 * var_x239));
        IJth(rJacobian, 8, 4) = -var_x159 * var_x299;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (var_x0 * (-var_x163 - var_x164 - var_x166));
        IJth(rJacobian, 1, 5) = -0.0015184968096382029 * var_x166;
        IJth(rJacobian, 5, 5) = var_x243 * var_x258 - var_x242 * var_x258;
        IJth(rJacobian, 8, 5) = -0.0030369936192764057 * var_x163;
        IJth(rJacobian, 9, 5) = -0.0030369936192764057 * var_x164;
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (var_x0 * (-var_x170 - var_x171 - var_x172));
        IJth(rJacobian, 1, 6) = -0.0015184968096382029 * var_x172;
        IJth(rJacobian, 6, 6) = var_x268 * var_x271 + var_x268 * var_x273;
        IJth(rJacobian, 8, 6) = -0.0030369936192764057 * var_x170;
        IJth(rJacobian, 9, 6) = -0.0030369936192764057 * var_x171;
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (-0.0024270695636233147 * var_x0 * var_x173);
        IJth(rJacobian, 7, 7) = ((var_x282) ? (var_x291 + var_x293 - 740000.00029091549 * (30.000000675675675 + var_chaste_interface__membrane__V) * (var_x291 + 4.8581081061982445e-11 * var_x276)) : ((var_x287) ? (var_x293 + var_x294) : (var_x294 - var_x280 * var_x290)));
        IJth(rJacobian, 9, 7) = -7.3709947782639767e-6 * var_x173;
        IJth(rJacobian, 0, 8) = mSetVoltageDerivativeToZero ? 0.0 : (var_x0 * (var_x191 - var_x178 - 60.0 * var_x183 - 0.000592018558817993 * var_x181 - 0.00071151247353788531 * var_x187 - 0.0003752664515462853 * var_x113 - 26.614641953637257 * var_x182 - var_x179 * var_x180 - var_x186 * var_chaste_interface__ionic_concentrations__Ki));
        IJth(rJacobian, 1, 8) = 0.091109808578292165 * var_x183;
        IJth(rJacobian, 8, 8) = var_x303 - 0.54665885146975302 * var_x183 - 1.139681818874567e-6 * var_x113 - 0.080828497792522477 * var_x182 - 0.0030369936192764057 * var_x178 - 6.4825765265103909e-6 * var_x187 - var_x179 * var_x300;
        IJth(rJacobian, 9, 8) = var_x306 + 4.3217176843402606e-6 * var_x187 - 1.7979565856234583e-6 * var_x181 - var_x304 * var_chaste_interface__ionic_concentrations__Ki;
        IJth(rJacobian, 0, 9) = mSetVoltageDerivativeToZero ? 0.0 : (var_x0 * (var_x191 - var_x193 + 2.78620009834773 * var_x199 - 11.682180705860503 * var_x196 - 0.032297793716202568 * var_x181 - 0.0048704794775156178 * var_x194 - var_x130 * var_x198 - var_x180 * var_x195 - var_x186 * var_chaste_interface__ionic_concentrations__Nai));
        IJth(rJacobian, 8, 9) = var_x303 - var_x304 * var_chaste_interface__ionic_concentrations__Nai;
        IJth(rJacobian, 9, 9) = var_x306 + 0.0084616719207093495 * var_x199 - 0.035478708262932285 * var_x196 - 0.0030369936192764057 * var_x193 - 9.808819343281279e-5 * var_x181 - 1.4791615096031613e-5 * var_x194 - var_x195 * var_x300 - var_x198 * var_x305;
        IJth(rJacobian, 10, 10) = -0.063888888888888898;
        IJth(rJacobian, 11, 10) = 0.0055555555555555558;
        IJth(rJacobian, 1, 11) = 2.7058823529411762e-5;
        IJth(rJacobian, 10, 11) = 0.063888888888888898;
        IJth(rJacobian, 11, 11) = -0.0058888888888888888;
    }

    N_Vector Cellluo_rudy_1994FromCellMLCvodeOpt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -84.624
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 8);
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 9);
        // Units: mM; Initial value: 145.0
        

        // Mathematics
        const double var_membrane__F = 96845.0; // faradays_constant_units
        const double var_membrane__I_st_converted = -GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_membrane__R = 8314.5; // gas_constant_units
        const double var_membrane__T = 310.0; // kelvin
        const double var_fast_sodium_current__E_Na = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 2) / var_chaste_interface__ionic_concentrations__Nai) / var_membrane__F; // mV
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 4) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // uA_per_mm2
        const double var_fast_sodium_current__i_Na_converted = 100.00000000000001 * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_time_independent_potassium_current__E_K1 = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 1) / var_chaste_interface__ionic_concentrations__Ki) / var_membrane__F; // mV
        const double var_time_independent_potassium_current__g_K1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 1)) * NV_Ith_S(mParameters, 5); // mS_per_mm2
        const double var_time_independent_potassium_current_K1_gate__alpha_K1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K1)); // per_ms
        const double var_time_independent_potassium_current_K1_gate__beta_K1 = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 0.080320000000000003 * var_time_independent_potassium_current__E_K1) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 0.061749999999999999 * var_time_independent_potassium_current__E_K1)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_time_independent_potassium_current__E_K1 - 0.51429999999999998 * var_chaste_interface__membrane__V)); // per_ms
        const double var_time_independent_potassium_current_K1_gate__K1_infinity = var_time_independent_potassium_current_K1_gate__alpha_K1 / (var_time_independent_potassium_current_K1_gate__alpha_K1 + var_time_independent_potassium_current_K1_gate__beta_K1); // dimensionless
        const double var_time_independent_potassium_current__i_K1 = (-var_time_independent_potassium_current__E_K1 + var_chaste_interface__membrane__V) * var_time_independent_potassium_current__g_K1 * var_time_independent_potassium_current_K1_gate__K1_infinity; // uA_per_mm2
        const double var_time_independent_potassium_current__i_K1_converted = 100.00000000000001 * var_time_independent_potassium_current__i_K1; // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(4);
        NV_Ith_S(dqs, 0) = var_fast_sodium_current__i_Na_converted;
        NV_Ith_S(dqs, 1) = var_time_independent_potassium_current__i_K1_converted;
        NV_Ith_S(dqs, 2) = var_membrane__I_st_converted;
        NV_Ith_S(dqs, 3) = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellluo_rudy_1994FromCellMLCvodeOpt>::Initialise(void)
{
    this->mSystemName = "luo_rudy_1994";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "ms";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-84.624);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00012);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("L_type_Ca_channel_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("L_type_Ca_channel_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("time_dependent_potassium_current_X_gate__X");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(10.0);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(145.0);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(1.8);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("NSR_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(1.8);

    // mParameters[0]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[1]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[2]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[3]:
    this->mParameterNames.push_back("membrane_capacitance");
    this->mParameterUnits.push_back("uF_per_mm2");

    // mParameters[4]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("mS_per_mm2");

    // mParameters[5]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_mm2");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("ms");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellluo_rudy_1994FromCellMLCvodeOpt)

#endif // CHASTE_CVODE
