#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: MahajanShiferaw2008_units
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvodeOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "mahajan_shiferaw_2008.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<23; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__cell__V)
    {
        const double _offset_0 = var_chaste_interface__cell__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__cell__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__cell__V>mTableMaxs[0] || var_chaste_interface__cell__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables(const Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables&);
    Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables& operator= (const Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables&);
    Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 23;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][23];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.5 / (1.0 + exp(3.3500000000000001 + 0.10000000000000001 * var_chaste_interface__cell__V));

                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(1.4732142857142858 + 0.044642857142857144 * var_chaste_interface__cell__V);

                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 - 1 / (1.0 + exp(-10.0 - 0.25 * var_chaste_interface__cell__V));

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-3.5335689045936394 - 0.088339222614840993 * var_chaste_interface__cell__V));

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.33333333333333331 - 0.33333333333333331 / (1.0 + exp(-13.333333333333334 - 0.33333333333333331 * var_chaste_interface__cell__V));

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-0.125 * var_chaste_interface__cell__V));

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 10.0 + 4954.0 * exp(0.064102564102564111 * var_chaste_interface__cell__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-6.666666666666667 - 0.13333333333333333 * var_chaste_interface__cell__V));

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(7.0 + var_chaste_interface__cell__V) < 8.1300813008222672e-7) ? (1.1219512195134727e-9 / (1.0 - exp(-1.0000000000011388e-7)) - 614999.99999929965 * (6.9999991869918698 + var_chaste_interface__cell__V) * (-1.1219512195134727e-9 / (1.0 - exp(1.0000000000011388e-7)) - 1.1219512195134727e-9 / (1.0 - exp(-1.0000000000011388e-7)))) : (0.0013799999999999999 * (7.0 + var_chaste_interface__cell__V) / (1.0 - exp(-0.86099999999999999 - 0.123 * var_chaste_interface__cell__V)))) + ((fabs(10.0 + var_chaste_interface__cell__V) < 6.8965517241448282e-7) ? (-4.2068965517283451e-10 / (-1.0 + exp(-1.000000000001e-7)) + 724999.99999927497 * (10.000000689655172 + var_chaste_interface__cell__V) * (4.2068965517283451e-10 / (-1.0 + exp(1.000000000001e-7)) + 4.2068965517283451e-10 / (-1.0 + exp(-1.000000000001e-7)))) : (0.00060999999999999997 * (10.0 + var_chaste_interface__cell__V) / (-1.0 + exp(1.45 + 0.14499999999999999 * var_chaste_interface__cell__V))));

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(30.0 + var_chaste_interface__cell__V) < 1.455604075689676e-6) ? (1 / (-1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) - 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8)) + 343500.00000040967 * (30.000001455604075 + var_chaste_interface__cell__V) * (1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) + 1.0465793304208771e-10 / (1.0 - exp(-2.1542940320207204e-7)) + 1.9068413391534758e-10 / (-1.0 + exp(9.9999999999880736e-8)) + 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8))))) : (1 / (0.00013100000000000001 * (30.0 + var_chaste_interface__cell__V) / (-1.0 + exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__cell__V)) + 7.1899999999999999e-5 * (30.0 + var_chaste_interface__cell__V) / (1.0 - exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__cell__V)))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[9] < 2){
                    double left = _lookup_table_0[i-1][9];
                    double right = _lookup_table_0[i+1][9];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 9 at ["<<i<<"][9] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[9] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[9] >= 2){
                    EXCEPTION("Lookup table 9 at ["<<i<<"][9] has non-finite value: " << val);
                }
                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(0.089820359281437126 - 0.059880239520958084 * var_chaste_interface__cell__V));

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[11] < 2){
                    double left = _lookup_table_0[i-1][11];
                    double right = _lookup_table_0[i+1][11];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 11 at ["<<i<<"][11] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[11] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[11] >= 2){
                    EXCEPTION("Lookup table 11 at ["<<i<<"][11] has non-finite value: " << val);
                }
                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[12] < 2){
                    double left = _lookup_table_0[i-1][12];
                    double right = _lookup_table_0[i+1][12];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 12 at ["<<i<<"][12] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[12] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[12] >= 2){
                    EXCEPTION("Lookup table 12 at ["<<i<<"][12] has non-finite value: " << val);
                }
                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[13] < 2){
                    double left = _lookup_table_0[i-1][13];
                    double right = _lookup_table_0[i+1][13];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 13 at ["<<i<<"][13] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[13] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[13] >= 2){
                    EXCEPTION("Lookup table 13 at ["<<i<<"][13] has non-finite value: " << val);
                }
                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(47.130000000000003 + var_chaste_interface__cell__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[14] < 2){
                    double left = _lookup_table_0[i-1][14];
                    double right = _lookup_table_0[i+1][14];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 14 at ["<<i<<"][14] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[14] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[14] >= 2){
                    EXCEPTION("Lookup table 14 at ["<<i<<"][14] has non-finite value: " << val);
                }
                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.090909090909090912 * var_chaste_interface__cell__V);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-1.5 - 0.050000000000000003 * var_chaste_interface__cell__V);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-1.5 - 0.050000000000000003 * var_chaste_interface__cell__V);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-10.728 - 0.35759999999999997 * var_chaste_interface__cell__V);

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-10.728 - 0.35759999999999997 * var_chaste_interface__cell__V);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.5 + 3.5 * exp(-0.0011111111111111111 * pow(var_chaste_interface__cell__V, 2));

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 30.0 + 3000.0 / (1.0 + exp(6.0 + 0.10000000000000001 * var_chaste_interface__cell__V));

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 20.0 + 20.0 / (1.0 + exp(3.3500000000000001 + 0.10000000000000001 * var_chaste_interface__cell__V));

                _lookup_table_0[i][22] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[23];

    // Lookup tables
    double (*_lookup_table_0)[23];
    int _lookup_table_0_num_misshit_piecewise[23] = {0};

};

std::shared_ptr<Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables> Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> Cellmahajan_shiferaw_2008FromCellMLCvodeOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -14.999999999999998 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 3.0; // ms
        const double var_chaste_interface__cell__stim_offset = 100.0; // ms
        const double var_chaste_interface__cell__stim_period = 400.0; // ms
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellmahajan_shiferaw_2008FromCellMLCvodeOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellmahajan_shiferaw_2008FromCellMLCvodeOpt::Cellmahajan_shiferaw_2008FromCellMLCvodeOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                26,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellmahajan_shiferaw_2008FromCellMLCvodeOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 2.069e-5; // (var_Ileak_Iup_Ixfer__gleak) [per_ms]
        NV_Ith_S(this->mParameters, 1) = 1.0; // (var_Irel__release_factor) [dimensionless]
        NV_Ith_S(this->mParameters, 2) = 0.40000000000000002; // (var_Ileak_Iup_Ixfer__vup) [uM_per_ms]
        NV_Ith_S(this->mParameters, 3) = 1.0; // (var_Na__conc_clamp) [dimensionless]
        NV_Ith_S(this->mParameters, 4) = 140.0; // (var_reversal_potentials__K_i) [mM]
        NV_Ith_S(this->mParameters, 5) = 1.8; // (var_Environment__Ca_o) [mM]
        NV_Ith_S(this->mParameters, 6) = 5.4000000000000004; // (var_Environment__K_o) [mM]
        NV_Ith_S(this->mParameters, 7) = 136.0; // (var_Environment__Na_o) [mM]
        NV_Ith_S(this->mParameters, 8) = 96.485341500000004; // (var_Environment__F) [coulomb_per_mmole]
        NV_Ith_S(this->mParameters, 9) = 8.3144720000000003; // (var_Environment__R) [J_per_moleK]
        NV_Ith_S(this->mParameters, 10) = 0.00054000000000000001; // (var_ICaL__pca) [cm_per_s]
        NV_Ith_S(this->mParameters, 11) = 12.0; // (var_INa__gna) [uS_per_nF]
        NV_Ith_S(this->mParameters, 12) = 0; // (var_INa__perc_reduced_inact_for_IpNa) [dimensionless]
        NV_Ith_S(this->mParameters, 13) = 0; // (var_INa__shift_h) [mV]
        NV_Ith_S(this->mParameters, 14) = 0.11; // (var_Ito__gtof) [uS_per_nF]
        NV_Ith_S(this->mParameters, 15) = 0.29999999999999999; // (var_IK1__gkix) [uS_per_nF]
        NV_Ith_S(this->mParameters, 16) = 0.012500000000000001; // (var_IKr__gkr) [uS_per_nF]
        NV_Ith_S(this->mParameters, 17) = 0.1386; // (var_IKs__gks) [uS_per_nF]
        NV_Ith_S(this->mParameters, 18) = 0.040000000000000001; // (var_Ito__gtos) [uS_per_nF]
        NV_Ith_S(this->mParameters, 19) = 0.83999999999999997; // (var_INaCa__gNaCa) [uM_per_ms]
        NV_Ith_S(this->mParameters, 20) = 308.0; // (var_Environment__T) [kelvin]
    }

    Cellmahajan_shiferaw_2008FromCellMLCvodeOpt::~Cellmahajan_shiferaw_2008FromCellMLCvodeOpt()
    {
    }

    AbstractLookupTableCollection* Cellmahajan_shiferaw_2008FromCellMLCvodeOpt::GetLookupTableCollection()
    {
        return Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables::Instance();
    }
    
    double Cellmahajan_shiferaw_2008FromCellMLCvodeOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -87.169816169406
        double var_chaste_interface__Ca__Ca_i_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000256752008084
        double var_chaste_interface__INa__xm = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__ICaL__c1 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 1.8211252e-05
        double var_chaste_interface__ICaL__c2 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.979322592773
        double var_chaste_interface__ICaL__xi1ca = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.001208153482
        double var_chaste_interface__ICaL__xi1ba = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.3616596e-05
        double var_chaste_interface__ICaL__xi2ca = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.004173008466
        double var_chaste_interface__ICaL__xi2ba = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.015242594688
        double var_chaste_interface__IKr__xr = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.993331326442
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 20);
        // Units: mM; Initial value: 11.441712311614
        double var_chaste_interface__Ca__Ca_submem = NV_Ith_S(rY, 22);
        // Units: uM; Initial value: 0.226941113355
        
        // Lookup table indexing
        const bool _oob_0 = Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        const double var_Ca__csm = 0.001 * var_chaste_interface__Ca__Ca_submem; // mM
        const double var_Environment__FonRT = NV_Ith_S(mParameters, 8) / (NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20)); // per_mV
        const double var_reversal_potentials__ek = log(NV_Ith_S(mParameters, 6) / NV_Ith_S(mParameters, 4)) / var_Environment__FonRT; // mV
        const double var_cell__Itotal = -2912.0 * (1.0 - var_chaste_interface__ICaL__c1 - var_chaste_interface__ICaL__c2 - var_chaste_interface__ICaL__xi1ba - var_chaste_interface__ICaL__xi1ca - var_chaste_interface__ICaL__xi2ba - var_chaste_interface__ICaL__xi2ca) * ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20) / NV_Ith_S(mParameters, 8))) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 10) / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20) / NV_Ith_S(mParameters, 8) + var_chaste_interface__cell__V) * (1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 10) / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 10) / (-1.0 + exp(-9.9999999999999995e-8))) * NV_Ith_S(mParameters, 8) / (NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20))) : (4.0 * pow(NV_Ith_S(mParameters, 8), 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(2.0 * NV_Ith_S(mParameters, 8) * var_chaste_interface__cell__V / (NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20)))) * NV_Ith_S(mParameters, 10) * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * NV_Ith_S(mParameters, 8) * var_chaste_interface__cell__V / (NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20)))) * NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20)))) - (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * (_lt_0_row[0] + var_chaste_interface__Ito__ytos) * NV_Ith_S(mParameters, 18) * var_chaste_interface__Ito__xtos - (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 14) * var_chaste_interface__Ito__xtof * var_chaste_interface__Ito__ytof - pow(var_chaste_interface__INa__xm, 3) * (-log(NV_Ith_S(mParameters, 7) / var_chaste_interface__Na__Na_i) / var_Environment__FonRT + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 11) * var_chaste_interface__INa__xh * var_chaste_interface__INa__xj - (1.0 + 0.80000000000000004 / (1.0 + 1.2500000000000001e-10 / pow(var_chaste_interface__Ca__Ca_i_converted, 3))) * (-log((0.018329999999999999 * NV_Ith_S(mParameters, 7) + NV_Ith_S(mParameters, 6)) / (0.018329999999999999 * var_chaste_interface__Na__Na_i + NV_Ith_S(mParameters, 4))) / var_Environment__FonRT + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 17) * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 - 8.0 * (pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 5) * exp(0.34999999999999998 * var_Environment__FonRT * var_chaste_interface__cell__V) - pow(NV_Ith_S(mParameters, 7), 3) * var_Ca__csm * exp(-0.65000000000000002 * var_Environment__FonRT * var_chaste_interface__cell__V)) * NV_Ith_S(mParameters, 19) / ((1.0 + 0.20000000000000001 * exp(-0.65000000000000002 * var_Environment__FonRT * var_chaste_interface__cell__V)) * (1.0 + 0.026999999999999996 / pow(var_chaste_interface__Ca__Ca_submem, 3)) * (669921.875 * var_Ca__csm + 1.3 * pow(var_chaste_interface__Na__Na_i, 3) + pow(NV_Ith_S(mParameters, 7), 3) * var_Ca__csm + pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 5) + 0.0035999999999999999 * pow(NV_Ith_S(mParameters, 7), 3) * (1.0 + 0.00053738391835633597 * pow(var_chaste_interface__Na__Na_i, 3)) + 1860.8670000000004 * (1.0 + 277.77777777777777 * var_Ca__csm) * NV_Ith_S(mParameters, 5))) - 1.5 * NV_Ith_S(mParameters, 6) * var_chaste_interface__Na__Na_i / ((1.5 + NV_Ith_S(mParameters, 6)) * (12.0 + var_chaste_interface__Na__Na_i) * (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 7))) * exp(-var_Environment__FonRT * var_chaste_interface__cell__V))) - 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 16) * var_chaste_interface__IKr__xr / (_lt_0_row[1]) - 0.4389381125701739 * sqrt(NV_Ith_S(mParameters, 6)) * (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 15) / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__ek)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__ek)) + (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__ek) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__ek)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__ek - 0.51429999999999998 * var_chaste_interface__cell__V)))); // nA_per_nF
        const double var_chaste_interface__i_ionic = -0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_cell__Itotal; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellmahajan_shiferaw_2008FromCellMLCvodeOpt::EvaluateYDerivatives(double var_chaste_interface__Environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -87.169816169406
        double var_chaste_interface__Ca__Ca_i_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000256752008084
        double var_chaste_interface__INa__xm = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__ICaL__c1 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 1.8211252e-05
        double var_chaste_interface__ICaL__c2 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.979322592773
        double var_chaste_interface__ICaL__xi1ca = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.001208153482
        double var_chaste_interface__ICaL__xi1ba = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.3616596e-05
        double var_chaste_interface__ICaL__xi2ca = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.004173008466
        double var_chaste_interface__ICaL__xi2ba = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.015242594688
        double var_chaste_interface__IKr__xr = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.993331326442
        double var_chaste_interface__Irel__Ca_JSR = NV_Ith_S(rY, 18);
        // Units: uM; Initial value: 97.505463697266
        double var_chaste_interface__Irel__xir = NV_Ith_S(rY, 19);
        // Units: uM_per_ms; Initial value: 0.006679257264
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 20);
        // Units: mM; Initial value: 11.441712311614
        double var_chaste_interface__Ca__Ca_dyad = NV_Ith_S(rY, 21);
        // Units: uM; Initial value: 1.716573130685
        double var_chaste_interface__Ca__Ca_submem = NV_Ith_S(rY, 22);
        // Units: uM; Initial value: 0.226941113355
        double var_chaste_interface__Ca__Ca_NSR = NV_Ith_S(rY, 23);
        // Units: uM; Initial value: 104.450004990523
        double var_chaste_interface__Ca__tropi = NV_Ith_S(rY, 24);
        // Units: uM; Initial value: 22.171689894953
        double var_chaste_interface__Ca__trops = NV_Ith_S(rY, 25);
        // Units: uM; Initial value: 19.864701949854

        // Lookup table indexing
        const bool _oob_0 = Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        double d_dt_chaste_interface_var_cell__V;
        const double var_Ca__Ca_i = 1000.0 * var_chaste_interface__Ca__Ca_i_converted; // uM
        const double var_Ca__csm = 0.001 * var_chaste_interface__Ca__Ca_submem; // mM
        const double var_Ca__jd = 0.25 * var_chaste_interface__Ca__Ca_submem - 0.25 * var_Ca__Ca_i; // uM_per_ms
        const double var_Ca__xbi = -0.019599999999999999 * var_chaste_interface__Ca__tropi + 0.0327 * (70.0 - var_chaste_interface__Ca__tropi) * var_Ca__Ca_i; // uM_per_ms
        const double var_Ca__xbs = -0.019599999999999999 * var_chaste_interface__Ca__trops + 0.0327 * (70.0 - var_chaste_interface__Ca__trops) * var_chaste_interface__Ca__Ca_submem; // uM_per_ms
        const double d_dt_chaste_interface_var_Ca__tropi = var_Ca__xbi; // uM / ms
        const double d_dt_chaste_interface_var_Ca__trops = var_Ca__xbs; // uM / ms
        const double var_Environment__FonRT = NV_Ith_S(mParameters, 8) / (NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20)); // per_mV
        const double var_ICaL__fca = 1 / (1.0 + 27.0 / pow(var_chaste_interface__Ca__Ca_dyad, 3)); // dimensionless
        const double var_ICaL__k1 = 0.024167999999999999 * var_ICaL__fca; // per_ms
        const double var_ICaL__s1 = 0.018268800000000002 * var_ICaL__fca; // per_ms
        const double var_ICaL__po = 1.0 - var_chaste_interface__ICaL__c1 - var_chaste_interface__ICaL__c2 - var_chaste_interface__ICaL__xi1ba - var_chaste_interface__ICaL__xi1ca - var_chaste_interface__ICaL__xi2ba - var_chaste_interface__ICaL__xi2ca; // dimensionless
        const double var_Ileak_Iup_Ixfer__jleak = pow(var_chaste_interface__Ca__Ca_NSR, 2) * (-var_Ca__Ca_i + 16.667000000000002 * var_chaste_interface__Ca__Ca_NSR) * NV_Ith_S(mParameters, 0) / (2500.0 + pow(var_chaste_interface__Ca__Ca_NSR, 2)); // uM_per_ms
        const double var_Ileak_Iup_Ixfer__jup = pow(var_Ca__Ca_i, 2) * NV_Ith_S(mParameters, 2) / (0.25 + pow(var_Ca__Ca_i, 2)); // uM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_i_converted = 0.001 * (-var_Ca__xbi - var_Ileak_Iup_Ixfer__jup + var_Ca__jd + var_Ileak_Iup_Ixfer__jleak) / (1.0 + 4.5 / pow((0.29999999999999999 + var_Ca__Ca_i), 2) + 3.2307692307692308 / pow((1 + 0.076923076923076927 * var_Ca__Ca_i), 2) + 28.199999999999999 / pow((0.59999999999999998 + var_Ca__Ca_i), 2) + 3.4285714285714284 / pow((1 + 0.14285714285714285 * var_Ca__Ca_i), 2)); // millimolar / ms
        const double var_Irel__Qr = 0.011111111111111112 * (((var_chaste_interface__Irel__Ca_JSR > 50.0) && (var_chaste_interface__Irel__Ca_JSR < 90.0)) ? (-50.0 + var_chaste_interface__Irel__Ca_JSR) : ((var_chaste_interface__Irel__Ca_JSR >= 90.0) ? (-977.00000000000011 + 11.300000000000001 * var_chaste_interface__Irel__Ca_JSR) : (0))) * var_chaste_interface__Ca__Ca_NSR; // uM_per_ms
        const double d_dt_chaste_interface_var_Irel__Ca_JSR = 0.01 * var_chaste_interface__Ca__Ca_NSR - 0.01 * var_chaste_interface__Irel__Ca_JSR; // uM / ms
        const double var_Ca__dCa_JSR = -var_Ileak_Iup_Ixfer__jleak - var_chaste_interface__Irel__xir + var_Ileak_Iup_Ixfer__jup; // uM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_NSR = var_Ca__dCa_JSR; // uM / ms
        const double var_ICaL__Pr = _lt_0_row[2]; // dimensionless
        const double var_ICaL__Ps = _lt_0_row[3]; // dimensionless
        const double var_ICaL__k3 = _lt_0_row[4]; // per_ms
        const double var_ICaL__k3t = var_ICaL__k3; // per_ms
        const double var_ICaL__poinf = _lt_0_row[5]; // dimensionless
        const double var_ICaL__alpha = var_ICaL__poinf; // per_ms
        const double var_ICaL__beta = 1.0 - var_ICaL__poinf; // per_ms
        const double d_dt_chaste_interface_var_ICaL__c1 = 3.0 * var_ICaL__po + 0.0022399999999999998 * var_chaste_interface__ICaL__xi1ba + 0.000103615 * var_chaste_interface__ICaL__xi1ca + var_ICaL__alpha * var_chaste_interface__ICaL__c2 - (0.30413000000000001 + var_ICaL__beta + var_ICaL__k1) * var_chaste_interface__ICaL__c1; // 1 / ms
        const double var_ICaL__recov = _lt_0_row[6]; // ms
        const double var_ICaL__rxa = ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20) / NV_Ith_S(mParameters, 8))) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 10) / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20) / NV_Ith_S(mParameters, 8) + var_chaste_interface__cell__V) * (1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 10) / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 10) / (-1.0 + exp(-9.9999999999999995e-8))) * NV_Ith_S(mParameters, 8) / (NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20))) : (4.0 * pow(NV_Ith_S(mParameters, 8), 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(2.0 * NV_Ith_S(mParameters, 8) * var_chaste_interface__cell__V / (NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20)))) * NV_Ith_S(mParameters, 10) * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * NV_Ith_S(mParameters, 8) * var_chaste_interface__cell__V / (NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20)))) * NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20)))); // mA_per_cm2
        const double var_ICaL__jca = 182.0 * var_ICaL__po * var_ICaL__rxa; // uM_per_ms
        const double var_ICaL__tauba = 450.0 + (-450.0 + var_ICaL__recov) * var_ICaL__Pr; // ms
        const double var_ICaL__k5t = (1.0 - var_ICaL__Ps) / var_ICaL__tauba; // per_ms
        const double var_ICaL__k6t = var_ICaL__Ps / var_ICaL__tauba; // per_ms
        const double var_ICaL__k4t = 1.8437500000000002 * var_ICaL__alpha * var_ICaL__k3t * var_ICaL__k5t / (var_ICaL__beta * var_ICaL__k6t); // per_ms
        const double d_dt_chaste_interface_var_ICaL__xi1ba = 0.00413 * var_chaste_interface__ICaL__c1 + 0.0019499999999999999 * var_ICaL__po + var_ICaL__k4t * var_chaste_interface__ICaL__xi2ba - (0.0023457627118644068 + var_ICaL__k3t) * var_chaste_interface__ICaL__xi1ba; // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__xi2ba = var_chaste_interface__ICaL__c2 * var_ICaL__k6t + var_ICaL__k3t * var_chaste_interface__ICaL__xi1ba - (var_ICaL__k4t + var_ICaL__k5t) * var_chaste_interface__ICaL__xi2ba; // 1 / ms
        const double var_ICaL__tauca = 0.10000000000000001 + 78.032899999999998 / (1.0 + 0.00072525373756441506 * pow(var_chaste_interface__Ca__Ca_dyad, 4)) + (-0.10000000000000001 - 78.032899999999998 / (1.0 + 0.00072525373756441506 * pow(var_chaste_interface__Ca__Ca_dyad, 4)) + var_ICaL__recov) * var_ICaL__Pr; // ms
        const double var_ICaL__k5 = (1.0 - var_ICaL__Ps) / var_ICaL__tauca; // per_ms
        const double var_ICaL__k6 = var_ICaL__Ps * var_ICaL__fca / var_ICaL__tauca; // per_ms
        const double d_dt_chaste_interface_var_ICaL__c2 = var_ICaL__beta * var_chaste_interface__ICaL__c1 + var_ICaL__k5 * var_chaste_interface__ICaL__xi2ca + var_ICaL__k5t * var_chaste_interface__ICaL__xi2ba - (var_ICaL__alpha + var_ICaL__k6 + var_ICaL__k6t) * var_chaste_interface__ICaL__c2; // 1 / ms
        const double var_ICaL__k4 = 9651.1122906915025 * var_ICaL__alpha * var_ICaL__k1 * var_ICaL__k3 * var_ICaL__k5 / (var_ICaL__beta * var_ICaL__k6); // per_ms
        const double d_dt_chaste_interface_var_ICaL__xi1ca = var_chaste_interface__ICaL__c1 * var_ICaL__k1 + var_ICaL__k4 * var_chaste_interface__ICaL__xi2ca + var_ICaL__po * var_ICaL__s1 - (0.000103615 + 1.0361500000000001e-5 * var_ICaL__s1 / var_ICaL__k1 + var_ICaL__k3) * var_chaste_interface__ICaL__xi1ca; // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__xi2ca = var_chaste_interface__ICaL__c2 * var_ICaL__k6 + var_ICaL__k3 * var_chaste_interface__ICaL__xi1ca - (var_ICaL__k4 + var_ICaL__k5) * var_chaste_interface__ICaL__xi2ca; // 1 / ms
        const double d_dt_chaste_interface_var_IKr__xr = (-var_chaste_interface__IKr__xr + _lt_0_row[7]) * (_lt_0_row[8]); // 1 / ms
        const double var_IKs__tauxs1 = _lt_0_row[9]; // ms
        const double var_IKs__xs1ss = _lt_0_row[10]; // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs1 = (-var_chaste_interface__IKs__xs1 + var_IKs__xs1ss) / var_IKs__tauxs1; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__xs2 = 0.25 * (-var_chaste_interface__IKs__xs2 + var_IKs__xs1ss) / var_IKs__tauxs1; // 1 / ms
        const double var_INa__ah = ((var_chaste_interface__cell__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 13) - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_ms
        const double var_INa__aj = ((var_chaste_interface__cell__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * NV_Ith_S(mParameters, 13)) - 3.4740000000000003e-5 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 13) - 0.043909999999999998 * var_chaste_interface__cell__V)) / (_lt_0_row[11])) : (0)); // per_ms
        const double var_INa__bh = ((var_chaste_interface__cell__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V - 0.34999999999999998 * NV_Ith_S(mParameters, 13)) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * NV_Ith_S(mParameters, 13))) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 13) - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INa__bj = ((var_chaste_interface__cell__V < -40.0) ? (0.1212 * exp(0.01052 * NV_Ith_S(mParameters, 13) - 0.01052 * var_chaste_interface__cell__V) / (_lt_0_row[12])) : (0.29999999999999999 * exp(2.5349999999999999e-7 * NV_Ith_S(mParameters, 13) - 2.5349999999999999e-7 * var_chaste_interface__cell__V) / (_lt_0_row[13]))); // per_ms
        const double d_dt_chaste_interface_var_INa__xm = (1.0 - var_chaste_interface__INa__xm) * _lt_0_row[14] - 0.080000000000000002 * var_chaste_interface__INa__xm * _lt_0_row[15]; // 1 / ms
        const double d_dt_chaste_interface_var_INa__xh = (var_INa__ah + var_INa__bh) * (-var_chaste_interface__INa__xh + 0.01 * NV_Ith_S(mParameters, 12) + (1.0 - 0.01 * NV_Ith_S(mParameters, 12)) * var_INa__ah / (var_INa__ah + var_INa__bh)); // 1 / ms
        const double d_dt_chaste_interface_var_INa__xj = (var_INa__aj + var_INa__bj) * (-var_chaste_interface__INa__xj + 0.01 * NV_Ith_S(mParameters, 12) + (1.0 - 0.01 * NV_Ith_S(mParameters, 12)) * var_INa__aj / (var_INa__aj + var_INa__bj)); // 1 / ms
        const double var_INaCa__jNaCa = (pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 5) * exp(0.34999999999999998 * var_Environment__FonRT * var_chaste_interface__cell__V) - pow(NV_Ith_S(mParameters, 7), 3) * var_Ca__csm * exp(-0.65000000000000002 * var_Environment__FonRT * var_chaste_interface__cell__V)) * NV_Ith_S(mParameters, 19) / ((1.0 + 0.20000000000000001 * exp(-0.65000000000000002 * var_Environment__FonRT * var_chaste_interface__cell__V)) * (1.0 + 0.026999999999999996 / pow(var_chaste_interface__Ca__Ca_submem, 3)) * (669921.875 * var_Ca__csm + 1.3 * pow(var_chaste_interface__Na__Na_i, 3) + pow(NV_Ith_S(mParameters, 7), 3) * var_Ca__csm + pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 5) + 0.0035999999999999999 * pow(NV_Ith_S(mParameters, 7), 3) * (1.0 + 0.00053738391835633597 * pow(var_chaste_interface__Na__Na_i, 3)) + 1860.8670000000004 * (1.0 + 277.77777777777777 * var_Ca__csm) * NV_Ith_S(mParameters, 5))); // uM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_submem = (-var_Ca__xbs + 50.0 * var_INaCa__jNaCa + 50.0 * var_chaste_interface__Irel__xir - 50.0 * var_Ca__jd - 50.0 * var_ICaL__jca) / (1.0 + 4.5 / pow((0.29999999999999999 + var_chaste_interface__Ca__Ca_submem), 2) + 3.2307692307692308 / pow((1 + 0.076923076923076927 * var_chaste_interface__Ca__Ca_submem), 2) + 28.199999999999999 / pow((0.59999999999999998 + var_chaste_interface__Ca__Ca_submem), 2) + 3.4285714285714284 / pow((1 + 0.14285714285714285 * var_chaste_interface__Ca__Ca_submem), 2)); // uM / ms
        const double var_INaK__xiNaK = 1.5 * NV_Ith_S(mParameters, 6) * var_chaste_interface__Na__Na_i / ((1.5 + NV_Ith_S(mParameters, 6)) * (12.0 + var_chaste_interface__Na__Na_i) * (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 7))) * exp(-var_Environment__FonRT * var_chaste_interface__cell__V))); // nA_per_nF
        const double d_dt_chaste_interface_var_Irel__xir = -0.033333333333333333 * (1.0 - 30.0 * var_Ca__dCa_JSR / var_chaste_interface__Ca__Ca_NSR) * var_chaste_interface__Irel__xir + 2.5807899999999999 * var_ICaL__po * var_Irel__Qr * fabs(var_ICaL__rxa) * _lt_0_row[17] / (_lt_0_row[16]); // uM_per_ms / ms
        const double d_dt_chaste_interface_var_Ca__Ca_dyad = 2.0 * var_chaste_interface__Ca__Ca_submem - 2.0 * var_chaste_interface__Ca__Ca_dyad + (9000.0 * var_ICaL__po * fabs(var_ICaL__rxa) + 26841.799999999999 * var_ICaL__po * var_Irel__Qr * fabs(var_ICaL__rxa) * _lt_0_row[19] / (_lt_0_row[18])) * NV_Ith_S(mParameters, 1); // uM / ms
        const double var_Ito__rt1 = -0.20000000000000001 - 0.066666666666666666 * var_chaste_interface__cell__V; // dimensionless
        const double var_Ito__rt2 = 3.3500000000000001 + 0.10000000000000001 * var_chaste_interface__cell__V; // dimensionless
        const double var_Ito__xtos_inf = 1 / (1.0 + exp(var_Ito__rt1)); // dimensionless
        const double d_dt_chaste_interface_var_Ito__xtos = (-var_chaste_interface__Ito__xtos + var_Ito__xtos_inf) / (0.5 + 9.0 / (1.0 + exp(-var_Ito__rt1))); // 1 / ms
        const double d_dt_chaste_interface_var_Ito__xtof = (-var_chaste_interface__Ito__xtof + var_Ito__xtos_inf) / (_lt_0_row[20]); // 1 / ms
        const double var_Ito__ytos_inf = 1 / (1.0 + exp(var_Ito__rt2)); // dimensionless
        const double d_dt_chaste_interface_var_Ito__ytos = (-var_chaste_interface__Ito__ytos + var_Ito__ytos_inf) / (_lt_0_row[21]); // 1 / ms
        const double d_dt_chaste_interface_var_Ito__ytof = (-var_chaste_interface__Ito__ytof + var_Ito__ytos_inf) / (_lt_0_row[22]); // 1 / ms
        const double var_INaCa__xiNaCa = 8.0 * var_INaCa__jNaCa; // nA_per_nF
        const double var_INa__xina = pow(var_chaste_interface__INa__xm, 3) * (-log(NV_Ith_S(mParameters, 7) / var_chaste_interface__Na__Na_i) / var_Environment__FonRT + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 11) * var_chaste_interface__INa__xh * var_chaste_interface__INa__xj; // nA_per_nF
        const double d_dt_chaste_interface_var_Na__Na_i = -0.000125 * (3.0 * var_INaCa__xiNaCa + 3.0 * var_INaK__xiNaK + var_INa__xina) * NV_Ith_S(mParameters, 3); // mM / ms

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_cell__V = 0.0;
        }
        else
        {
            const double var_reversal_potentials__ek = log(NV_Ith_S(mParameters, 6) / NV_Ith_S(mParameters, 4)) / var_Environment__FonRT; // mV
            d_dt_chaste_interface_var_cell__V = -var_INa__xina - var_INaCa__xiNaCa - var_INaK__xiNaK - 16.0 * var_ICaL__jca - 1.0000000000000002 * GetIntracellularAreaStimulus(var_chaste_interface__Environment__time) / HeartConfig::Instance()->GetCapacitance() - (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * (0.5 / (1.0 + exp(var_Ito__rt2)) + var_chaste_interface__Ito__ytos) * NV_Ith_S(mParameters, 18) * var_chaste_interface__Ito__xtos - (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 14) * var_chaste_interface__Ito__xtof * var_chaste_interface__Ito__ytof - (1.0 + 0.80000000000000004 / (1.0 + 0.125 / pow(var_Ca__Ca_i, 3))) * (-log((0.018329999999999999 * NV_Ith_S(mParameters, 7) + NV_Ith_S(mParameters, 6)) / (0.018329999999999999 * var_chaste_interface__Na__Na_i + NV_Ith_S(mParameters, 4))) / var_Environment__FonRT + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 17) * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 - 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 16) * var_chaste_interface__IKr__xr / (_lt_0_row[1]) - 0.4389381125701739 * sqrt(NV_Ith_S(mParameters, 6)) * (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 15) / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__ek)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__ek)) + (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__ek) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__ek)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__ek - 0.51429999999999998 * var_chaste_interface__cell__V)))); // mV / ms
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_cell__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_Ca__Ca_i_converted;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_INa__xm;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_INa__xh;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_INa__xj;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_ICaL__c1;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_ICaL__c2;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_ICaL__xi1ca;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_ICaL__xi1ba;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_ICaL__xi2ca;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_ICaL__xi2ba;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_IKr__xr;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_IKs__xs1;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_IKs__xs2;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_Ito__xtos;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_Ito__ytos;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_Ito__xtof;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_Ito__ytof;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_Irel__Ca_JSR;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_Irel__xir;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_Na__Na_i;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_Ca__Ca_dyad;
        NV_Ith_S(rDY,22) = d_dt_chaste_interface_var_Ca__Ca_submem;
        NV_Ith_S(rDY,23) = d_dt_chaste_interface_var_Ca__Ca_NSR;
        NV_Ith_S(rDY,24) = d_dt_chaste_interface_var_Ca__tropi;
        NV_Ith_S(rDY,25) = d_dt_chaste_interface_var_Ca__trops;
    }

    void Cellmahajan_shiferaw_2008FromCellMLCvodeOpt::EvaluateAnalyticJacobian(double var_chaste_interface__Environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -87.169816169406
        double var_chaste_interface__Ca__Ca_i_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000256752008084
        double var_chaste_interface__INa__xm = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__ICaL__c1 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 1.8211252e-05
        double var_chaste_interface__ICaL__c2 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.979322592773
        double var_chaste_interface__ICaL__xi1ca = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.001208153482
        double var_chaste_interface__ICaL__xi1ba = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.3616596e-05
        double var_chaste_interface__ICaL__xi2ca = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.004173008466
        double var_chaste_interface__ICaL__xi2ba = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.015242594688
        double var_chaste_interface__IKr__xr = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.993331326442
        double var_chaste_interface__Irel__Ca_JSR = NV_Ith_S(rY, 18);
        // Units: uM; Initial value: 97.505463697266
        double var_chaste_interface__Irel__xir = NV_Ith_S(rY, 19);
        // Units: uM_per_ms; Initial value: 0.006679257264
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 20);
        // Units: mM; Initial value: 11.441712311614
        double var_chaste_interface__Ca__Ca_dyad = NV_Ith_S(rY, 21);
        // Units: uM; Initial value: 1.716573130685
        double var_chaste_interface__Ca__Ca_submem = NV_Ith_S(rY, 22);
        // Units: uM; Initial value: 0.226941113355
        double var_chaste_interface__Ca__Ca_NSR = NV_Ith_S(rY, 23);
        // Units: uM; Initial value: 104.450004990523
        double var_chaste_interface__Ca__tropi = NV_Ith_S(rY, 24);
        // Units: uM; Initial value: 22.171689894953
        double var_chaste_interface__Ca__trops = NV_Ith_S(rY, 25);
        // Units: uM; Initial value: 19.864701949854
        
        // Lookup table indexing
        const bool _oob_0 = Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);
const double var_x0 = -2912.0 + 2912.0 * var_chaste_interface__ICaL__c1 + 2912.0 * var_chaste_interface__ICaL__c2 + 2912.0 * var_chaste_interface__ICaL__xi1ba + 2912.0 * var_chaste_interface__ICaL__xi1ca + 2912.0 * var_chaste_interface__ICaL__xi2ba + 2912.0 * var_chaste_interface__ICaL__xi2ca;
        const double var_x1 = exp(9.9999999999999995e-8);
        const double var_x2 = 1 / (-1.0 + var_x1);
        const double var_x3 = -0.34100000000000003 * NV_Ith_S(mParameters, 5);
        const double var_x4 = 0.001 * var_chaste_interface__Ca__Ca_submem;
        const double var_x5 = NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 10);
        const double var_x6 = 1.9999999999999999e-7 * var_x5;
        const double var_x7 = exp(-9.9999999999999995e-8);
        const double var_x8 = 1 / (-1.0 + var_x7);
        const double var_x9 = var_x6 * var_x8 * (var_x3 + var_x4 * var_x7);
        const double var_x10 = 1 / (NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20));
        const double var_x11 = var_x10 * NV_Ith_S(mParameters, 8);
        const double var_x12 = 10000000.0 * var_x11;
        const double var_x13 = var_x12 * (var_x9 + var_x2 * var_x6 * (var_x3 + var_x1 * var_x4));
        const double var_x14 = NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20) / NV_Ith_S(mParameters, 8);
        const double var_x15 = fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(var_x14);
        const double var_x16 = var_x11 * var_chaste_interface__cell__V;
        const double var_x17 = exp(2.0 * var_x16);
        const double var_x18 = var_x3 + var_x17 * var_x4;
        const double var_x19 = -1.0 + var_x17;
        const double var_x20 = NV_Ith_S(mParameters, 10) / var_x19;
        const double var_x21 = var_x10 * var_x20 * pow(NV_Ith_S(mParameters, 8), 2);
        const double var_x22 = 4.0 * var_x18 * var_x21;
        const double var_x23 = var_x17 * var_chaste_interface__cell__V;
        const double var_x24 = var_x23 * pow(NV_Ith_S(mParameters, 8), 3) / (pow(NV_Ith_S(mParameters, 9), 2) * pow(NV_Ith_S(mParameters, 20), 2));
        const double var_x25 = ((var_x15) ? (var_x13) : (var_x22 + 0.0080000000000000002 * var_x20 * var_x24 * var_chaste_interface__Ca__Ca_submem - 8.0 * var_x18 * var_x24 * NV_Ith_S(mParameters, 10) / pow(var_x19, 2)));
        const double var_x26 = -var_chaste_interface__Ito__ytos;
        const double var_x27 = 0.10000000000000001 * var_chaste_interface__cell__V;
        const double var_x28 = exp(3.3500000000000001 + var_x27);
        const double var_x29 = 1.0 + var_x28;
        const double var_x30 = 1 / var_x29;
        const double var_x31 = (var_x26 - 0.5 * var_x30) * NV_Ith_S(mParameters, 18);
        const double var_x32 = NV_Ith_S(mParameters, 14) * var_chaste_interface__Ito__ytof;
        const double var_x33 = pow(var_chaste_interface__Ca__Ca_i_converted, 3);
        const double var_x34 = 1.0 + 1.2500000000000001e-10 / var_x33;
        const double var_x35 = -1.0 - 0.80000000000000004 / var_x34;
        const double var_x36 = var_x35 * NV_Ith_S(mParameters, 17) * var_chaste_interface__IKs__xs2;
        const double var_x37 = var_x36 * var_chaste_interface__IKs__xs1;
        const double var_x38 = pow(var_chaste_interface__INa__xm, 3);
        const double var_x39 = var_x38 * NV_Ith_S(mParameters, 11) * var_chaste_interface__INa__xj;
        const double var_x40 = var_x39 * var_chaste_interface__INa__xh;
        const double var_x41 = sqrt(NV_Ith_S(mParameters, 6));
        const double var_x42 = var_x41 * NV_Ith_S(mParameters, 16) * var_chaste_interface__IKr__xr;
        const double var_x43 = exp(1.4732142857142858 + 0.044642857142857144 * var_chaste_interface__cell__V);
        const double var_x44 = 1.0 + var_x43;
        const double var_x45 = 0.43033148291193518 / var_x44;
        const double var_x46 = var_x14 * log(NV_Ith_S(mParameters, 6) / NV_Ith_S(mParameters, 4));
        const double var_x47 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_x46);
        const double var_x48 = 1.0 + var_x47;
        const double var_x49 = 1 / var_x48;
        const double var_x50 = exp(-2.4444678999999998 + 0.51429999999999998 * var_x46 - 0.51429999999999998 * var_chaste_interface__cell__V);
        const double var_x51 = 1.0 + var_x50;
        const double var_x52 = 1 / var_x51;
        const double var_x53 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_x46);
        const double var_x54 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_x46);
        const double var_x55 = var_x53 + 0.49124000000000001 * var_x54;
        const double var_x56 = var_x52 * var_x55;
        const double var_x57 = var_x41 * NV_Ith_S(mParameters, 15) / (var_x56 + 1.02 * var_x49);
        const double var_x58 = var_x46;
        const double var_x59 = -var_x58 + var_chaste_interface__cell__V;
        const double var_x60 = NV_Ith_S(mParameters, 18) * var_chaste_interface__Ito__xtos;
        const double var_x61 = var_x28 / pow(var_x29, 2);
        const double var_x62 = 0.34999999999999998 * var_chaste_interface__cell__V;
        const double var_x63 = exp(var_x11 * var_x62);
        const double var_x64 = pow(var_chaste_interface__Na__Na_i, 3);
        const double var_x65 = var_x64 * NV_Ith_S(mParameters, 5);
        const double var_x66 = var_x63 * var_x65;
        const double var_x67 = pow(NV_Ith_S(mParameters, 7), 3);
        const double var_x68 = var_x67 * var_chaste_interface__Ca__Ca_submem;
        const double var_x69 = exp(-0.65000000000000002 * var_x16);
        const double var_x70 = var_x11 * var_x69;
        const double var_x71 = var_x67 * (1.0 + 0.00053738391835633597 * var_x64);
        const double var_x72 = 0.001 * var_x67;
        const double var_x73 = var_x72 * var_chaste_interface__Ca__Ca_submem;
        const double var_x74 = (1.0 + 0.27777777777777779 * var_chaste_interface__Ca__Ca_submem) * NV_Ith_S(mParameters, 5);
        const double var_x75 = 1 / (var_x65 + var_x73 + 669.921875 * var_chaste_interface__Ca__Ca_submem + 0.0035999999999999999 * var_x71 + 1.3 * var_x64 + 1860.8670000000004 * var_x74);
        const double var_x76 = 1.0 + 0.20000000000000001 * var_x69;
        const double var_x77 = 1 / var_x76;
        const double var_x78 = 1.0 + 0.026999999999999996 / pow(var_chaste_interface__Ca__Ca_submem, 3);
        const double var_x79 = 1 / var_x78;
        const double var_x80 = var_x77 * var_x79 * NV_Ith_S(mParameters, 19);
        const double var_x81 = var_x75 * var_x80;
        const double var_x82 = var_x81 * (0.34999999999999998 * var_x11 * var_x66 + 0.00064999999999999997 * var_x68 * var_x70);
        const double var_x83 = var_x47 / pow(var_x48, 2);
        const double var_x84 = 1 / (1.5 + NV_Ith_S(mParameters, 6));
        const double var_x85 = 1 / (12.0 + var_chaste_interface__Na__Na_i);
        const double var_x86 = 0.10000000000000001 * var_chaste_interface__cell__V;
        const double var_x87 = exp(-var_x11 * var_x86);
        const double var_x88 = exp(0.01485884101040119 * NV_Ith_S(mParameters, 7));
        const double var_x89 = exp(-var_x16);
        const double var_x90 = 1.0 + 0.1245 * var_x87 + 0.036499999999999998 * var_x89 * (-0.14285714285714285 + 0.14285714285714285 * var_x88);
        const double var_x91 = var_x84 * var_x85 * (0.012450000000000001 * var_x11 * var_x87 + var_x11 * var_x89 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x88)) * NV_Ith_S(mParameters, 6) * var_chaste_interface__Na__Na_i / pow(var_x90, 2);
        const double var_x92 = var_x41 * var_x59;
        const double var_x93 = var_x66 - var_x69 * var_x73;
        const double var_x94 = var_x75 * var_x93 * NV_Ith_S(mParameters, 19);
        const double var_x95 = var_x70 * var_x79 * var_x94 / pow(var_x76, 2);
        const double var_x96 = 1 / (0.018329999999999999 * var_chaste_interface__Na__Na_i + NV_Ith_S(mParameters, 4));
        const double var_x97 = var_x14;
        const double var_x98 = -var_x97 * log(var_x96 * (0.018329999999999999 * NV_Ith_S(mParameters, 7) + NV_Ith_S(mParameters, 6))) + var_chaste_interface__cell__V;
        const double var_x99 = var_x98 * NV_Ith_S(mParameters, 17) * var_chaste_interface__IKs__xs1;
        const double var_x100 = 1 / var_chaste_interface__Na__Na_i;
        const double var_x101 = -var_x97 * log(var_x100 * NV_Ith_S(mParameters, 7)) + var_chaste_interface__cell__V;
        const double var_x102 = var_x101 * NV_Ith_S(mParameters, 11) * var_chaste_interface__INa__xh;
        const double var_x103 = var_x102 * pow(var_chaste_interface__INa__xm, 2) * var_chaste_interface__INa__xj;
        const double var_x104 = var_x101 * var_x39;
        const double var_x105 = var_x102 * var_x38;
        const double var_x106 = 4.9999999999999998e-8 * var_x14 + var_chaste_interface__cell__V;
        const double var_x107 = ((var_x15) ? (-var_x9 + var_x106 * var_x13) : (var_x22 * var_chaste_interface__cell__V));
        const double var_x108 = 2912.0 * var_x107;
        const double var_x109 = var_x58 - var_chaste_interface__cell__V;
        const double var_x110 = var_x84 * NV_Ith_S(mParameters, 6) / var_x90;
        const double var_x111 = var_x110 * var_x85;
        const double var_x112 = var_x110 * var_chaste_interface__Na__Na_i / pow((1 + 0.083333333333333329 * var_chaste_interface__Na__Na_i), 2);
        const double var_x113 = pow(var_chaste_interface__Na__Na_i, 2);
        const double var_x114 = var_x113 * NV_Ith_S(mParameters, 5);
        const double var_x115 = -3 * var_x114 - 3.9000000000000004 * var_x113 - 5.8037463182484285e-6 * var_x113 * var_x67;
        const double var_x116 = var_x80 * var_x93 / pow((var_x74 + 0.00053738391835633597 * var_x65 + 0.00069859909386323679 * var_x64 + 1.9345821060828095e-6 * var_x71 + 5.37383918356336e-7 * var_x68 + 0.36000524218012353 * var_chaste_interface__Ca__Ca_submem), 2);
        const double var_x117 = 2.3102518056640731e-6 * var_x116;
        const double var_x118 = var_x114 * var_x63 * var_x81;
        const double var_x119 = 1.9999999999999998e-10 * var_x5;
        const double var_x120 = var_x119 * var_x7 * var_x8;
        const double var_x121 = ((var_x15) ? (-var_x120 + var_x106 * var_x12 * (var_x120 + var_x1 * var_x119 * var_x2)) : (0.0040000000000000001 * var_x21 * var_x23));
        const double var_x122 = var_x67 * var_x69 * var_x81;
        const double var_x123 = var_x77 * var_x94 / (pow(var_x78, 2) * pow(var_chaste_interface__Ca__Ca_submem, 4));
        const double var_x124 = -669.921875 - var_x72 - 516.90750000000014 * NV_Ith_S(mParameters, 5);
        const double var_x125 = 32.699999999999996 * var_chaste_interface__Ca__tropi;
        const double var_x126 = pow(var_chaste_interface__Ca__Ca_i_converted, 2);
        const double var_x127 = 2.0 * var_x33 * NV_Ith_S(mParameters, 2) / pow((2.4999999999999999e-7 + var_x126), 2);
        const double var_x128 = 1000000.0 * var_x126;
        const double var_x129 = NV_Ith_S(mParameters, 2) / (0.25 + var_x128);
        const double var_x130 = 2000000.0 * var_x129 * var_chaste_interface__Ca__Ca_i_converted;
        const double var_x131 = pow(var_chaste_interface__Ca__Ca_NSR, 2);
        const double var_x132 = NV_Ith_S(mParameters, 0) / (2500.0 + var_x131);
        const double var_x133 = var_x131 * var_x132;
        const double var_x134 = 1000.0 * var_x133;
        const double var_x135 = 0.012999999999999999 + var_chaste_interface__Ca__Ca_i_converted;
        const double var_x136 = 0.00059999999999999995 + var_chaste_interface__Ca__Ca_i_converted;
        const double var_x137 = 0.00029999999999999997 + var_chaste_interface__Ca__Ca_i_converted;
        const double var_x138 = 0.0070000000000000001 + var_chaste_interface__Ca__Ca_i_converted;
        const double var_x139 = 1.0 + 0.00054600000000000004 / pow(var_x135, 2) + 2.8200000000000001e-5 / pow(var_x136, 2) + 4.5000000000000001e-6 / pow(var_x137, 2) + 0.00016800000000000002 / pow(var_x138, 2);
        const double var_x140 = 1 / var_x139;
        const double var_x141 = 0.001 * var_x140;
        const double var_x142 = 32.699999999999996 * var_chaste_interface__Ca__Ca_i_converted;
        const double var_x143 = var_x128 * var_x129;
        const double var_x144 = 16.667000000000002 * var_chaste_interface__Ca__Ca_NSR - 1000.0 * var_chaste_interface__Ca__Ca_i_converted;
        const double var_x145 = var_x133 * var_x144;
        const double var_x146 = 16.667000000000002 * var_x133;
        const double var_x147 = 2 * var_x132 * var_x144 * var_chaste_interface__Ca__Ca_NSR;
        const double var_x148 = 3.2000000000000001e-7 * var_x144 * pow(var_chaste_interface__Ca__Ca_NSR, 3) * NV_Ith_S(mParameters, 0) / pow((1 + 0.00040000000000000002 * var_x131), 2);
        const double var_x149 = 1.0 - var_chaste_interface__INa__xm;
        const double var_x150 = 1 / (1.0 - exp(1.0000000000287557e-7));
        const double var_x151 = 1 / (1.0 - exp(-1.0000000000287557e-7));
        const double var_x152 = _lt_0_row[15];
        const double var_x153 = 0.0072727272727272727 * var_x152 * var_chaste_interface__INa__xm;
        const double var_x154 = 47.130000000000003 + var_chaste_interface__cell__V;
        const double var_x155 = fabs(var_x154) < 1.0000000000287557e-6;
        const double var_x156 = -var_x86;
        const double var_x157 = exp(-4.7130000000000001 + var_x156);
        const double var_x158 = 1.0 - var_x157;
        const double var_x159 = 0.32000000000000001 / var_x158;
        const double var_x160 = -0.080000000000000002 * var_x152;
        const double var_x161 = -3.200000000092018e-7 * var_x151;
        const double var_x162 = exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 13) - 0.14705882352941177 * var_chaste_interface__cell__V);
        const double var_x163 = var_chaste_interface__cell__V < -40.0;
        const double var_x164 = ((var_x163) ? (0.13500000000000001 * var_x162) : (0));
        const double var_x165 = var_x164;
        const double var_x166 = exp(var_x62 - 0.34999999999999998 * NV_Ith_S(mParameters, 13));
        const double var_x167 = exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * NV_Ith_S(mParameters, 13));
        const double var_x168 = exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 13) - 0.0900900900900901 * var_chaste_interface__cell__V);
        const double var_x169 = 1.0 + var_x168;
        const double var_x170 = ((var_x163) ? (310000.0 * var_x166 + 3.5600000000000001 * var_x167) : (7.6923076923076916 / var_x169));
        const double var_x171 = var_x170;
        const double var_x172 = ((var_x163) ? (-0.019852941176470591 * var_x162) : (0));
        const double var_x173 = var_x164 + var_x170;
        const double var_x174 = 0.01 * NV_Ith_S(mParameters, 12);
        const double var_x175 = 1.0 - var_x174;
        const double var_x176 = var_x175 / var_x173;
        const double var_x177 = ((var_x163) ? (0.28123999999999999 * var_x167 + 108500.0 * var_x166) : (0.693000693000693 * var_x168 / pow(var_x169, 2)));
        const double var_x178 = exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V);
        const double var_x179 = 1.0 + var_x178;
        const double var_x180 = exp(0.01052 * NV_Ith_S(mParameters, 13) - 0.01052 * var_chaste_interface__cell__V);
        const double var_x181 = var_x180 / var_x179;
        const double var_x182 = exp(-3.2000000000000002 + var_x156);
        const double var_x183 = 1.0 + var_x182;
        const double var_x184 = exp(2.5349999999999999e-7 * NV_Ith_S(mParameters, 13) - 2.5349999999999999e-7 * var_chaste_interface__cell__V);
        const double var_x185 = var_x184 / var_x183;
        const double var_x186 = ((var_x163) ? (0.1212 * var_x181) : (0.29999999999999999 * var_x185));
        const double var_x187 = var_x186;
        const double var_x188 = 37.780000000000001 + var_chaste_interface__cell__V;
        const double var_x189 = exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * NV_Ith_S(mParameters, 13));
        const double var_x190 = exp(0.043909999999999998 * NV_Ith_S(mParameters, 13) - 0.043909999999999998 * var_chaste_interface__cell__V);
        const double var_x191 = -127140.0 * var_x189 - 3.4740000000000003e-5 * var_x190;
        const double var_x192 = exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V);
        const double var_x193 = 1.0 + var_x192;
        const double var_x194 = 1 / var_x193;
        const double var_x195 = var_x191 * var_x194;
        const double var_x196 = ((var_x163) ? (var_x188 * var_x195) : (0));
        const double var_x197 = var_x196;
        const double var_x198 = ((var_x163) ? (var_x195 + var_x188 * var_x194 * (1.5254334000000001e-6 * var_x190 - 31073.016 * var_x189) - 0.311 * var_x188 * var_x191 * var_x192 / pow(var_x193, 2)) : (0));
        const double var_x199 = var_x186 + var_x196;
        const double var_x200 = var_x175 / var_x199;
        const double var_x201 = ((var_x163) ? (-0.001275024 * var_x181 + 0.016701360000000002 * var_x178 * var_x180 / pow(var_x179, 2)) : (-7.6049999999999996e-8 * var_x185 + 0.029999999999999999 * var_x182 * var_x184 / pow(var_x183, 2)));
        const double var_x202 = exp(-0.125 * var_chaste_interface__cell__V);
        const double var_x203 = 1.0 + var_x202;
        const double var_x204 = var_x202 / pow(var_x203, 2);
        const double var_x205 = 0.125 * var_x204;
        const double var_x206 = var_x205 * var_chaste_interface__ICaL__c1;
        const double var_x207 = 1 / var_x203;
        const double var_x208 = var_x207;
        const double var_x209 = pow(var_chaste_interface__Ca__Ca_dyad, 3);
        const double var_x210 = 1 / var_x209;
        const double var_x211 = 1 / (1.0 + 27.0 * var_x210);
        const double var_x212 = pow(var_chaste_interface__Ca__Ca_dyad, 4);
        const double var_x213 = 1 / var_x212;
        const double var_x214 = var_x213 / pow((0.037037037037037035 + var_x210), 2);
        const double var_x215 = 0.002685333333333333 * var_x214 * var_chaste_interface__ICaL__c1;
        const double var_x216 = exp(-10.0 - 0.25 * var_chaste_interface__cell__V);
        const double var_x217 = 1.0 + var_x216;
        const double var_x218 = 1.0 - 1 / var_x217;
        const double var_x219 = exp(0.064102564102564111 * var_chaste_interface__cell__V);
        const double var_x220 = 4954.0 * var_x219;
        const double var_x221 = -440.0 + var_x220;
        const double var_x222 = var_x218 * var_x221;
        const double var_x223 = 1 / (450.0 + var_x222);
        const double var_x224 = exp(-3.5335689045936394 - 0.088339222614840993 * var_chaste_interface__cell__V);
        const double var_x225 = 1.0 + var_x224;
        const double var_x226 = 0.088339222614840993 * var_x224 / pow(var_x225, 2);
        const double var_x227 = var_x223 * var_x226;
        const double var_x228 = 1 / var_x225;
        const double var_x229 = -317.5641025641026 * var_x218 * var_x219;
        const double var_x230 = 0.25 * var_x216 / pow(var_x217, 2);
        const double var_x231 = 4.9382716049382717e-6 * (var_x229 + var_x221 * var_x230) / pow((1 + 0.0022222222222222222 * var_x222), 2);
        const double var_x232 = var_x228 * var_x231;
        const double var_x233 = 1.0 + 0.00072525373756441506 * var_x212;
        const double var_x234 = 1 / var_x233;
        const double var_x235 = 78.032899999999998 * var_x234;
        const double var_x236 = 9.9000000000000004 + var_x220 - var_x235;
        const double var_x237 = var_x218 * var_x236;
        const double var_x238 = 1 / (0.10000000000000001 + var_x235 + var_x237);
        const double var_x239 = var_x211 * var_x238;
        const double var_x240 = var_x226 * var_x239;
        const double var_x241 = 0.00016422697956757767 / pow((0.0012815107473898831 + var_x234 + 0.012815107473898831 * var_x237), 2);
        const double var_x242 = var_x241 * (var_x229 + var_x230 * var_x236);
        const double var_x243 = var_x211 * var_x228;
        const double var_x244 = var_x242 * var_x243;
        const double var_x245 = var_x228;
        const double var_x246 = 1.0 - var_x245;
        const double var_x247 = var_x231 * var_x246;
        const double var_x248 = var_x242 * var_x246;
        const double var_x249 = var_x226 * var_x238;
        const double var_x250 = -var_x208;
        const double var_x251 = 1.0 + var_x250;
        const double var_x252 = var_x223 * var_x245;
        const double var_x253 = var_x239 * var_x245;
        const double var_x254 = var_x238 * var_x246;
        const double var_x255 = var_x223 * var_x246;
        const double var_x256 = 0.22637460951196098 * var_x209 / pow(var_x233, 2);
        const double var_x257 = var_x241 * (var_x256 - var_x218 * var_x256);
        const double var_x258 = var_x243 * var_x257;
        const double var_x259 = 0.1111111111111111 * var_x214 * var_x228 * var_x238;
        const double var_x260 = var_x246 * var_chaste_interface__ICaL__xi2ca;
        const double var_x261 = var_x257 * var_x260;
        const double var_x262 = exp(-13.333333333333334 - 0.33333333333333331 * var_chaste_interface__cell__V);
        const double var_x263 = 1.0 + var_x262;
        const double var_x264 = var_x262 / pow(var_x263, 2);
        const double var_x265 = 0.1111111111111111 * var_x264;
        const double var_x266 = var_x265 * var_chaste_interface__ICaL__xi1ca;
        const double var_x267 = 0.33333333333333331 / var_x263;
        const double var_x268 = 0.33333333333333331 - var_x267;
        const double var_x269 = 1 / var_x251;
        const double var_x270 = var_x207 * var_x269;
        const double var_x271 = var_x224 * var_x268 * var_x270;
        const double var_x272 = 20.604954226274931 * var_x271;
        const double var_x273 = var_x228 * var_x272;
        const double var_x274 = var_x204 * var_x269;
        const double var_x275 = var_x225 * var_x268;
        const double var_x276 = 29.156010230179024 * var_x260 * var_x275;
        const double var_x277 = var_x202 / (pow(var_x203, 3) * pow(var_x251, 2));
        const double var_x278 = -0.018268800000000002 * var_x211;
        const double var_x279 = 41.377027474346242 + 1117.1797418073486 * var_x210;
        const double var_x280 = var_x246 * var_x275;
        const double var_x281 = var_x270 * var_x280;
        const double var_x282 = 233.2480818414322 * var_x281;
        const double var_x283 = 1.0 - var_chaste_interface__ICaL__c1 - var_chaste_interface__ICaL__c2 - var_chaste_interface__ICaL__xi1ba - var_chaste_interface__ICaL__xi1ca - var_chaste_interface__ICaL__xi2ba - var_chaste_interface__ICaL__xi2ca;
        const double var_x284 = var_x265 * var_chaste_interface__ICaL__xi1ba;
        const double var_x285 = 0.16287544169611309 * var_x271;
        const double var_x286 = var_x228 * var_x285;
        const double var_x287 = var_x246 * var_x285;
        const double var_x288 = 0.23046875000000003 * var_x280;
        const double var_x289 = var_x274 * var_x288;
        const double var_x290 = var_x277 * var_x288;
        const double var_x291 = var_x225 * var_x246 * var_x264 * var_x270;
        const double var_x292 = 0.20486111111111113 * var_x291;
        const double var_x293 = 1.8437500000000002 * var_x281;
        const double var_x294 = 29.156010230179024 * var_x280;
        const double var_x295 = exp(-6.666666666666667 - 0.13333333333333333 * var_chaste_interface__cell__V);
        const double var_x296 = 1.0 + var_x295;
        const double var_x297 = -var_chaste_interface__IKr__xr + 1 / var_x296;
        const double var_x298 = 1 / (1.0 - exp(1.0000000000011388e-7));
        const double var_x299 = 1 / (1.0 - exp(-1.0000000000011388e-7));
        const double var_x300 = exp(1.45 + 0.14499999999999999 * var_chaste_interface__cell__V);
        const double var_x301 = -1.0 + var_x300;
        const double var_x302 = 0.00060999999999999997 / var_x301;
        const double var_x303 = 10.0 + var_chaste_interface__cell__V;
        const double var_x304 = var_x302 - 8.8449999999999995e-5 * var_x300 * var_x303 / pow(var_x301, 2);
        const double var_x305 = 1.1219512195134727e-9 * var_x299;
        const double var_x306 = var_x302 * var_x303;
        const double var_x307 = -var_x305;
        const double var_x308 = 614999.99999929965 * (6.9999991869918698 + var_chaste_interface__cell__V) * (var_x307 - 1.1219512195134727e-9 * var_x298);
        const double var_x309 = 0.13333333333333333 * var_x295 / pow(var_x296, 2);
        const double var_x310 = 7.0 + var_chaste_interface__cell__V;
        const double var_x311 = fabs(var_x310) < 8.1300813008222672e-7;
        const double var_x312 = 1 / (-1.0 + exp(1.000000000001e-7));
        const double var_x313 = 1 / (-1.0 + exp(-1.000000000001e-7));
        const double var_x314 = exp(-0.86099999999999999 - 0.123 * var_chaste_interface__cell__V);
        const double var_x315 = 1.0 - var_x314;
        const double var_x316 = 0.0013799999999999999 / var_x315;
        const double var_x317 = var_x316 - 0.00016973999999999998 * var_x310 * var_x314 / pow(var_x315, 2);
        const double var_x318 = 4.2068965517283451e-10 * var_x313;
        const double var_x319 = var_x310 * var_x316;
        const double var_x320 = 724999.99999927497 * (10.000000689655172 + var_chaste_interface__cell__V) * (var_x318 + 4.2068965517283451e-10 * var_x312);
        const double var_x321 = fabs(var_x303) < 6.8965517241448282e-7;
        const double var_x322 = -var_x306;
        const double var_x323 = -var_x319;
        const double var_x324 = exp(0.089820359281437126 - 0.059880239520958084 * var_chaste_interface__cell__V);
        const double var_x325 = 1.0 + var_x324;
        const double var_x326 = 1 / var_x325;
        const double var_x327 = 1 / (-1.0 + exp(9.9999999999880736e-8));
        const double var_x328 = 1 / (-1.0 + exp(-9.9999999999880736e-8));
        const double var_x329 = 1 / (1.0 - exp(2.1542940320207204e-7));
        const double var_x330 = 1 / (1.0 - exp(-2.1542940320207204e-7));
        const double var_x331 = 30.0 + var_chaste_interface__cell__V;
        const double var_x332 = fabs(var_x331) < 1.455604075689676e-6;
        const double var_x333 = exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__cell__V);
        const double var_x334 = -1.0 + var_x333;
        const double var_x335 = 0.00013100000000000001 / var_x334;
        const double var_x336 = exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__cell__V);
        const double var_x337 = 1.0 - var_x336;
        const double var_x338 = 7.1899999999999999e-5 / var_x337;
        const double var_x339 = ((var_x332) ? (6.5500000000000006e-5 * var_x327 + 6.5500000000000006e-5 * var_x328 + 3.595e-5 * var_x329 + 3.595e-5 * var_x330) : (var_x335 + var_x338 - 8.9997000000000013e-6 * var_x331 * var_x333 / pow(var_x334, 2) - 1.0641199999999999e-5 * var_x331 * var_x336 / pow(var_x337, 2)));
        const double var_x340 = 1.0465793304208771e-10 * var_x329;
        const double var_x341 = 1.9068413391534758e-10 * var_x328;
        const double var_x342 = ((var_x332) ? (-var_x340 - var_x341 + 343500.00000040967 * (30.000001455604075 + var_chaste_interface__cell__V) * (var_x340 + var_x341 + 1.0465793304208771e-10 * var_x330 + 1.9068413391534758e-10 * var_x327)) : (var_x331 * var_x335 + var_x331 * var_x338));
        const double var_x343 = var_x324 * var_x342 / pow(var_x325, 2);
        const double var_x344 = 0.066666666666666666 * var_chaste_interface__cell__V;
        const double var_x345 = exp(0.20000000000000001 + var_x344);
        const double var_x346 = 1.0 + var_x345;
        const double var_x347 = 1 / var_x346;
        const double var_x348 = 1 / (0.5 + 9.0 * var_x347);
        const double var_x349 = exp(-0.20000000000000001 - var_x344);
        const double var_x350 = 1.0 + var_x349;
        const double var_x351 = 0.066666666666666666 * var_x349 / pow(var_x350, 2);
        const double var_x352 = 1 / var_x350;
        const double var_x353 = exp(6.0 + var_x27);
        const double var_x354 = 1.0 + var_x353;
        const double var_x355 = 1 / var_x354;
        const double var_x356 = 1 / (30.0 + 3000.0 * var_x355);
        const double var_x357 = 0.10000000000000001 * var_x61;
        const double var_x358 = var_x30;
        const double var_x359 = exp(-0.0011111111111111111 * pow(var_chaste_interface__cell__V, 2));
        const double var_x360 = 1 / (1.5 + 3.5 * var_x359);
        const double var_x361 = 1 / (20.0 + 20.0 * var_x30);
        const double var_x362 = _lt_0_row[17];
        const double var_x363 = 1.0 + var_x362;
        const double var_x364 = fabs(var_x107);
        const double var_x365 = 0.011111111111111112 * var_chaste_interface__Ca__Ca_NSR;
        const double var_x366 = (var_chaste_interface__Irel__Ca_JSR > 50.0) && (var_chaste_interface__Irel__Ca_JSR < 90.0);
        const double var_x367 = var_chaste_interface__Irel__Ca_JSR >= 90.0;
        const double var_x368 = ((var_x366) ? (var_x365 * (-50.0 + var_chaste_interface__Irel__Ca_JSR)) : ((var_x367) ? (var_x365 * (-977.00000000000011 + 11.300000000000001 * var_chaste_interface__Irel__Ca_JSR)) : (0)));
        const double var_x369 = var_x364 * var_x368;
        const double var_x370 = 0.1290395 * var_x283;
        const double var_x371 = 1 / var_x363;
        const double var_x372 = var_x362 * var_x369 * var_x371;
        const double var_x373 = 2.5807899999999999 * var_x362 * var_x371;
        const double var_x374 = Signum(var_x107);
        const double var_x375 = var_x283 * var_x368 * var_x374;
        const double var_x376 = var_x373 * var_x375;
        const double var_x377 = var_x130 + var_x134 - var_x127;
        const double var_x378 = 1 / var_chaste_interface__Ca__Ca_NSR;
        const double var_x379 = var_x378 * var_chaste_interface__Irel__xir;
        const double var_x380 = -2.5807899999999999 * var_x372;
        const double var_x381 = var_x283 * var_x364;
        const double var_x382 = var_x381 * ((var_x366) ? (var_x365) : ((var_x367) ? (0.12555555555555556 * var_chaste_interface__Ca__Ca_NSR) : (0)));
        const double var_x383 = var_x143 - var_x145 - var_chaste_interface__Irel__xir;
        const double var_x384 = var_x148 - var_x146 - var_x147;
        const double var_x385 = var_x381 * ((var_x366) ? (-0.55555555555555558 + 0.011111111111111112 * var_chaste_interface__Irel__Ca_JSR) : ((var_x367) ? (-10.855555555555556 + 0.12555555555555556 * var_chaste_interface__Irel__Ca_JSR) : (0)));
        const double var_x386 = 0.000125 * var_x40;
        const double var_x387 = 0.000125 * NV_Ith_S(mParameters, 3);
        const double var_x388 = 8.6634442712402744e-10 * var_x116;
        const double var_x389 = var_x374 * (9000.0 - 9000.0 * var_chaste_interface__ICaL__c1 - 9000.0 * var_chaste_interface__ICaL__c2 - 9000.0 * var_chaste_interface__ICaL__xi1ba - 9000.0 * var_chaste_interface__ICaL__xi1ca - 9000.0 * var_chaste_interface__ICaL__xi2ba - 9000.0 * var_chaste_interface__ICaL__xi2ca);
        const double var_x390 = _lt_0_row[19];
        const double var_x391 = 1.0 + var_x390;
        const double var_x392 = 9598.6276799999996 * var_x283;
        const double var_x393 = 1 / var_x391;
        const double var_x394 = var_x369 * var_x390 * var_x393;
        const double var_x395 = 26841.799999999999 * var_x390 * var_x393;
        const double var_x396 = var_x375 * var_x395;
        const double var_x397 = (-9000.0 * var_x364 - 26841.799999999999 * var_x394) * NV_Ith_S(mParameters, 1);
        const double var_x398 = var_x395 * NV_Ith_S(mParameters, 1);
        const double var_x399 = -9100.0 + 9100.0 * var_chaste_interface__ICaL__c1 + 9100.0 * var_chaste_interface__ICaL__c2 + 9100.0 * var_chaste_interface__ICaL__xi1ba + 9100.0 * var_chaste_interface__ICaL__xi1ca + 9100.0 * var_chaste_interface__ICaL__xi2ba + 9100.0 * var_chaste_interface__ICaL__xi2ca;
        const double var_x400 = 0.29999999999999999 + var_chaste_interface__Ca__Ca_submem;
        const double var_x401 = pow(var_x400, (-2));
        const double var_x402 = 1 + 0.076923076923076927 * var_chaste_interface__Ca__Ca_submem;
        const double var_x403 = pow(var_x402, (-2));
        const double var_x404 = 0.59999999999999998 + var_chaste_interface__Ca__Ca_submem;
        const double var_x405 = pow(var_x404, (-2));
        const double var_x406 = 1 + 0.14285714285714285 * var_chaste_interface__Ca__Ca_submem;
        const double var_x407 = pow(var_x406, (-2));
        const double var_x408 = 1 / (1.0 + 4.5 * var_x401 + 3.2307692307692308 * var_x403 + 28.199999999999999 * var_x405 + 3.4285714285714284 * var_x407);
        const double var_x409 = var_x408;
        const double var_x410 = 9100.0 * var_x107;
        const double var_x411 = var_x408 * var_x410;
        const double var_x412 = 1.4439073785400458e-5 * var_x116;
        const double var_x413 = 0.0327 * var_chaste_interface__Ca__trops;
        const double var_x414 = 0.0327 * var_chaste_interface__Ca__Ca_submem;
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (var_x37 - var_x40 - 8.0 * var_x82 - 1.5 * var_x91 - 1.04 * var_x95 + var_x0 * var_x25 + var_x31 * var_chaste_interface__Ito__xtos - var_x32 * var_chaste_interface__Ito__xtof - var_x42 * var_x45 - 0.4389381125701739 * var_x49 * var_x57 + 0.10468673984798647 * var_x57 * var_x59 * var_x83 + 0.050000000000000003 * var_x59 * var_x60 * var_x61 + 0.019211226915711394 * var_x42 * var_x43 * var_x59 / pow(var_x44, 2) - 0.42189361069797565 * var_x49 * var_x92 * (0.24326999999999999 * var_x83 - var_x52 * (0.061749999999999999 * var_x53 + 0.039456396800000001 * var_x54) - 0.51429999999999998 * var_x50 * var_x55 / pow(var_x51, 2)) * NV_Ith_S(mParameters, 15) / pow((var_x49 + 0.98039215686274506 * var_x56), 2));
        IJth(rJacobian, 2, 0) = ((var_x155) ? (var_x153 + var_x149 * (0.16 * var_x150 + 0.16 * var_x151)) : (var_x153 + var_x149 * var_x159 - 0.032000000000000001 * var_x149 * var_x154 * var_x157 / pow(var_x158, 2)));
        IJth(rJacobian, 3, 0) = (var_x165 + var_x171) * (var_x172 * var_x176 + var_x164 * var_x175 * (-var_x172 - var_x177) / pow(var_x173, 2)) + (var_x172 + var_x177) * (var_x174 - var_chaste_interface__INa__xh + var_x164 * var_x176);
        IJth(rJacobian, 4, 0) = (var_x187 + var_x197) * (var_x198 * var_x200 + var_x175 * var_x196 * (-var_x198 - var_x201) / pow(var_x199, 2)) + (var_x198 + var_x201) * (var_x174 - var_chaste_interface__INa__xj + var_x196 * var_x200);
        IJth(rJacobian, 5, 0) = var_x206 + var_x205 * var_chaste_interface__ICaL__c2;
        IJth(rJacobian, 6, 0) = -var_x206 + var_x247 * var_chaste_interface__ICaL__xi2ba + var_x248 * var_chaste_interface__ICaL__xi2ca + (-var_x205 - var_x227 - var_x232 - var_x240 - var_x244) * var_chaste_interface__ICaL__c2 - var_x227 * var_chaste_interface__ICaL__xi2ba - var_x249 * var_chaste_interface__ICaL__xi2ca;
        IJth(rJacobian, 7, 0) = var_x266 + var_x274 * var_x276 + var_x276 * var_x277 - var_x260 * var_x272 - var_x273 * var_chaste_interface__ICaL__xi2ca - 25.91645353793691 * var_x225 * var_x260 * var_x264 * var_x270;
        IJth(rJacobian, 8, 0) = var_x284 + var_x289 * var_chaste_interface__ICaL__xi2ba + var_x290 * var_chaste_interface__ICaL__xi2ba - var_x286 * var_chaste_interface__ICaL__xi2ba - var_x287 * var_chaste_interface__ICaL__xi2ba - var_x292 * var_chaste_interface__ICaL__xi2ba;
        IJth(rJacobian, 9, 0) = -var_x266 + var_x240 * var_chaste_interface__ICaL__c2 + var_x244 * var_chaste_interface__ICaL__c2 + (var_x249 + var_x273 - var_x248 + 25.91645353793691 * var_x291 + var_x246 * var_x272 - var_x274 * var_x294 - var_x277 * var_x294) * var_chaste_interface__ICaL__xi2ca;
        IJth(rJacobian, 10, 0) = -var_x284 + var_x227 * var_chaste_interface__ICaL__c2 + var_x232 * var_chaste_interface__ICaL__c2 + (var_x227 + var_x286 + var_x287 + var_x292 - var_x247 - var_x289 - var_x290) * var_chaste_interface__ICaL__xi2ba;
        IJth(rJacobian, 11, 0) = ((var_x311) ? (var_x297 * (var_x304 + 0.00068999999999999997 * var_x298 + 0.00068999999999999997 * var_x299) + var_x309 * (var_x305 + var_x306 - var_x308)) : ((var_x321) ? (var_x297 * (var_x317 + 0.00030499999999999999 * var_x312 + 0.00030499999999999999 * var_x313) + var_x309 * (var_x319 + var_x320 - var_x318)) : (var_x297 * (var_x304 + var_x317) + var_x309 * (var_x306 + var_x319))));
        IJth(rJacobian, 12, 0) = 0.059880239520958084 * var_x343 + var_x339 * (-var_chaste_interface__IKs__xs1 + var_x326);
        IJth(rJacobian, 13, 0) = 0.014970059880239521 * var_x343 + var_x339 * (0.25 * var_x326 - 0.25 * var_chaste_interface__IKs__xs2);
        IJth(rJacobian, 14, 0) = var_x348 * var_x351 + 0.0074074074074074077 * var_x345 * (var_x352 - var_chaste_interface__Ito__xtos) / (pow(var_x346, 2) * pow((0.055555555555555552 + var_x347), 2));
        IJth(rJacobian, 15, 0) = -var_x356 * var_x357 + 3.3333333333333335e-5 * var_x353 * (var_x26 + var_x358) / (pow(var_x354, 2) * pow((0.01 + var_x355), 2));
        IJth(rJacobian, 16, 0) = var_x351 * var_x360 + 0.00063492063492063492 * var_x359 * (var_x352 - var_chaste_interface__Ito__xtof) * var_chaste_interface__cell__V / pow((0.42857142857142855 + var_x359), 2);
        IJth(rJacobian, 17, 0) = -var_x357 * var_x361 + 0.0050000000000000001 * var_x61 * (var_x358 - var_chaste_interface__Ito__ytof) / pow((1 + var_x30), 2);
        IJth(rJacobian, 19, 0) = var_x25 * var_x376 - var_x370 * var_x372 + var_x369 * var_x370 * pow(var_x362, 2) / pow(var_x363, 2);
        IJth(rJacobian, 20, 0) = (-var_x386 - 0.00039000000000000005 * var_x95 - 0.00056249999999999996 * var_x91 - 0.0030000000000000001 * var_x82) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 21, 0) = (var_x25 * var_x389 + var_x25 * var_x396 - var_x392 * var_x394 + var_x369 * var_x392 * pow(var_x390, 2) / pow(var_x391, 2)) * NV_Ith_S(mParameters, 1);
        IJth(rJacobian, 22, 0) = var_x409 * (50.0 * var_x82 + 6.5000000000000009 * var_x95 + var_x25 * var_x399);
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (-3.0000000000000005e-10 * var_x99 * var_chaste_interface__IKs__xs2 / (pow(var_x34, 2) * pow(var_chaste_interface__Ca__Ca_i_converted, 4)));
        IJth(rJacobian, 1, 1) = var_x141 * (-2539.0 + var_x125 + var_x127 - var_x130 - var_x134) + 0.001 * (0.0010920000000000001 / pow(var_x135, 3) + 5.6400000000000002e-5 / pow(var_x136, 3) + 9.0000000000000002e-6 / pow(var_x137, 3) + 0.00033600000000000004 / pow(var_x138, 3)) * (var_x145 - var_x143 + 0.25 * var_chaste_interface__Ca__Ca_submem + 0.019599999999999999 * var_chaste_interface__Ca__tropi - 250.0 * var_chaste_interface__Ca__Ca_i_converted - var_x142 * (70.0 - var_chaste_interface__Ca__tropi)) / pow(var_x139, 2);
        IJth(rJacobian, 19, 1) = var_x377 * var_x379;
        IJth(rJacobian, 22, 1) = 12500.0 * var_x408;
        IJth(rJacobian, 23, 1) = var_x377;
        IJth(rJacobian, 24, 1) = 2289.0 - var_x125;
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x103);
        IJth(rJacobian, 2, 2) = ((var_x155) ? (var_x160 + var_x161 + 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (var_x161 - 3.200000000092018e-7 * var_x150)) : (var_x160 - var_x154 * var_x159));
        IJth(rJacobian, 20, 2) = -0.00037500000000000001 * var_x103 * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x104);
        IJth(rJacobian, 3, 3) = -var_x165 - var_x171;
        IJth(rJacobian, 20, 3) = -var_x104 * var_x387;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x105);
        IJth(rJacobian, 4, 4) = -var_x187 - var_x197;
        IJth(rJacobian, 20, 4) = -var_x105 * var_x387;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (var_x108);
        IJth(rJacobian, 5, 5) = -4.3041299999999998 + var_x208 - 0.024167999999999999 * var_x211;
        IJth(rJacobian, 6, 5) = var_x251;
        IJth(rJacobian, 7, 5) = 0.0058991999999999968 * var_x211;
        IJth(rJacobian, 8, 5) = 0.0021800000000000001;
        IJth(rJacobian, 19, 5) = var_x380;
        IJth(rJacobian, 21, 5) = var_x397;
        IJth(rJacobian, 22, 5) = var_x411;
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (var_x108);
        IJth(rJacobian, 5, 6) = -3.0 + var_x208;
        IJth(rJacobian, 6, 6) = var_x250 - var_x252 - var_x253;
        IJth(rJacobian, 7, 6) = var_x278;
        IJth(rJacobian, 8, 6) = -0.0019499999999999999;
        IJth(rJacobian, 9, 6) = var_x253;
        IJth(rJacobian, 10, 6) = var_x252;
        IJth(rJacobian, 19, 6) = var_x380;
        IJth(rJacobian, 21, 6) = var_x397;
        IJth(rJacobian, 22, 6) = var_x411;
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (var_x108);
        IJth(rJacobian, 5, 7) = -2.999896385;
        IJth(rJacobian, 7, 7) = -0.33343694833333332 + var_x267 + var_x278 - 1.8929217120000003e-7 * var_x211 * var_x279;
        IJth(rJacobian, 8, 7) = -0.0019499999999999999;
        IJth(rJacobian, 9, 7) = var_x268;
        IJth(rJacobian, 19, 7) = var_x380;
        IJth(rJacobian, 21, 7) = var_x397;
        IJth(rJacobian, 22, 7) = var_x411;
        IJth(rJacobian, 0, 8) = mSetVoltageDerivativeToZero ? 0.0 : (var_x108);
        IJth(rJacobian, 5, 8) = -2.99776;
        IJth(rJacobian, 7, 8) = var_x278;
        IJth(rJacobian, 8, 8) = -0.33762909604519775 + var_x267;
        IJth(rJacobian, 10, 8) = var_x268;
        IJth(rJacobian, 19, 8) = var_x380;
        IJth(rJacobian, 21, 8) = var_x397;
        IJth(rJacobian, 22, 8) = var_x411;
        IJth(rJacobian, 0, 9) = mSetVoltageDerivativeToZero ? 0.0 : (var_x108);
        IJth(rJacobian, 5, 9) = -3.0;
        IJth(rJacobian, 6, 9) = var_x254;
        IJth(rJacobian, 7, 9) = var_x278 + var_x282;
        IJth(rJacobian, 8, 9) = -0.0019499999999999999;
        IJth(rJacobian, 9, 9) = -var_x254 - var_x282;
        IJth(rJacobian, 19, 9) = var_x380;
        IJth(rJacobian, 21, 9) = var_x397;
        IJth(rJacobian, 22, 9) = var_x411;
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (var_x108);
        IJth(rJacobian, 5, 10) = -3.0;
        IJth(rJacobian, 6, 10) = var_x255;
        IJth(rJacobian, 7, 10) = var_x278;
        IJth(rJacobian, 8, 10) = -0.0019499999999999999 + var_x293;
        IJth(rJacobian, 10, 10) = -var_x255 - var_x293;
        IJth(rJacobian, 19, 10) = var_x380;
        IJth(rJacobian, 21, 10) = var_x397;
        IJth(rJacobian, 22, 10) = var_x411;
        IJth(rJacobian, 0, 11) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x45 * var_x92 * NV_Ith_S(mParameters, 16));
        IJth(rJacobian, 11, 11) = ((var_x311) ? (var_x307 + var_x308 + var_x322) : ((var_x321) ? (var_x318 + var_x323 - var_x320) : (var_x322 + var_x323)));
        IJth(rJacobian, 0, 12) = mSetVoltageDerivativeToZero ? 0.0 : (var_x36 * var_x98);
        IJth(rJacobian, 12, 12) = -var_x342;
        IJth(rJacobian, 0, 13) = mSetVoltageDerivativeToZero ? 0.0 : (var_x35 * var_x99);
        IJth(rJacobian, 13, 13) = -0.25 * var_x342;
        IJth(rJacobian, 0, 14) = mSetVoltageDerivativeToZero ? 0.0 : (var_x31 * var_x59);
        IJth(rJacobian, 14, 14) = -var_x348;
        IJth(rJacobian, 0, 15) = mSetVoltageDerivativeToZero ? 0.0 : (var_x109 * var_x60);
        IJth(rJacobian, 15, 15) = -var_x356;
        IJth(rJacobian, 0, 16) = mSetVoltageDerivativeToZero ? 0.0 : (var_x109 * var_x32);
        IJth(rJacobian, 16, 16) = -var_x360;
        IJth(rJacobian, 0, 17) = mSetVoltageDerivativeToZero ? 0.0 : (var_x109 * NV_Ith_S(mParameters, 14) * var_chaste_interface__Ito__xtof);
        IJth(rJacobian, 17, 17) = -var_x361;
        IJth(rJacobian, 18, 18) = -0.01;
        IJth(rJacobian, 19, 18) = var_x373 * var_x382;
        IJth(rJacobian, 21, 18) = var_x382 * var_x398;
        IJth(rJacobian, 19, 19) = -0.033333333333333333 - var_x379 + var_x378 * var_x383;
        IJth(rJacobian, 22, 19) = 50.0 * var_x408;
        IJth(rJacobian, 23, 19) = -1;
        IJth(rJacobian, 0, 20) = mSetVoltageDerivativeToZero ? 0.0 : (0.010416666666666666 * var_x112 - 1.5 * var_x111 - 24.0 * var_x118 - var_x115 * var_x117 - var_x100 * var_x40 * var_x97 + 0.018329999999999999 * var_x14 * var_x37 * var_x96);
        IJth(rJacobian, 20, 20) = (3.9062500000000001e-6 * var_x112 - 0.00056249999999999996 * var_x111 - 0.0089999999999999993 * var_x118 - var_x115 * var_x388 - var_x100 * var_x14 * var_x386) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 22, 20) = var_x409 * (150.0 * var_x118 + var_x115 * var_x412);
        IJth(rJacobian, 5, 21) = -var_x215;
        IJth(rJacobian, 6, 21) = var_x261 + (-var_x258 - var_x259) * var_chaste_interface__ICaL__c2;
        IJth(rJacobian, 7, 21) = var_x215 + (0.00063442013684210537 * var_x211 * var_x213 - 2.1032463466666669e-8 * var_x214 * var_x279) * var_chaste_interface__ICaL__xi1ca + 0.0020298666666666667 * var_x214 * var_x283;
        IJth(rJacobian, 9, 21) = -var_x261 + var_x258 * var_chaste_interface__ICaL__c2 + var_x259 * var_chaste_interface__ICaL__c2;
        IJth(rJacobian, 21, 21) = -2.0;
        IJth(rJacobian, 0, 22) = mSetVoltageDerivativeToZero ? 0.0 : (0.0080000000000000002 * var_x122 - 0.64799999999999991 * var_x123 + var_x0 * var_x121 - var_x117 * var_x124);
        IJth(rJacobian, 1, 22) = 0.00025000000000000001 * var_x140;
        IJth(rJacobian, 19, 22) = var_x121 * var_x376;
        IJth(rJacobian, 20, 22) = (3.0000000000000001e-6 * var_x122 - 0.00024299999999999997 * var_x123 - var_x124 * var_x388) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 21, 22) = 2.0 + (var_x121 * var_x389 + var_x121 * var_x396) * NV_Ith_S(mParameters, 1);
        IJth(rJacobian, 22, 22) = var_x409 * (-14.789 + var_x413 + 4.0499999999999998 * var_x123 - 0.050000000000000003 * var_x122 + var_x121 * var_x399 + var_x124 * var_x412) + 0.0012574820180071425 * (9.0 / pow(var_x400, 3) + 56.399999999999999 / pow(var_x404, 3) + 0.97959183673469385 / pow(var_x406, 3) + 0.49704142011834318 / pow(var_x402, 3)) * (50.0 * var_chaste_interface__Irel__xir + 0.019599999999999999 * var_chaste_interface__Ca__trops + 12500.0 * var_chaste_interface__Ca__Ca_i_converted - 12.5 * var_chaste_interface__Ca__Ca_submem - var_x283 * var_x410 - var_x414 * (70.0 - var_chaste_interface__Ca__trops) + 50.0 * var_x81 * var_x93) / pow((0.035460992907801421 + var_x405 + 0.15957446808510639 * var_x401 + 0.12158054711246201 * var_x407 + 0.11456628477905074 * var_x403), 2);
        IJth(rJacobian, 25, 22) = 2.2890000000000001 - var_x413;
        IJth(rJacobian, 1, 23) = var_x141 * (var_x146 + var_x147 - var_x148);
        IJth(rJacobian, 18, 23) = 0.01;
        IJth(rJacobian, 19, 23) = var_x373 * var_x385 + (var_x378 * var_x384 - var_x383 / var_x131) * var_chaste_interface__Irel__xir;
        IJth(rJacobian, 21, 23) = var_x385 * var_x398;
        IJth(rJacobian, 23, 23) = var_x384;
        IJth(rJacobian, 1, 24) = var_x141 * (0.019599999999999999 + var_x142);
        IJth(rJacobian, 24, 24) = -0.019599999999999999 - var_x142;
        IJth(rJacobian, 22, 25) = var_x409 * (0.019599999999999999 + var_x414);
        IJth(rJacobian, 25, 25) = -0.019599999999999999 - var_x414;
    }

    N_Vector Cellmahajan_shiferaw_2008FromCellMLCvodeOpt::ComputeDerivedQuantities(double var_chaste_interface__Environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -87.169816169406
        double var_chaste_interface__Ca__Ca_i_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000256752008084
        double var_chaste_interface__INa__xm = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__ICaL__c1 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 1.8211252e-05
        double var_chaste_interface__ICaL__c2 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.979322592773
        double var_chaste_interface__ICaL__xi1ca = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.001208153482
        double var_chaste_interface__ICaL__xi1ba = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.3616596e-05
        double var_chaste_interface__ICaL__xi2ca = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.004173008466
        double var_chaste_interface__ICaL__xi2ba = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.015242594688
        double var_chaste_interface__IKr__xr = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.993331326442
        double var_chaste_interface__Irel__Ca_JSR = NV_Ith_S(rY, 18);
        // Units: uM; Initial value: 97.505463697266
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 20);
        // Units: mM; Initial value: 11.441712311614
        double var_chaste_interface__Ca__Ca_submem = NV_Ith_S(rY, 22);
        // Units: uM; Initial value: 0.226941113355
        double var_chaste_interface__Ca__Ca_NSR = NV_Ith_S(rY, 23);
        // Units: uM; Initial value: 104.450004990523
        
        // Lookup table indexing
        const bool _oob_0 = Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellmahajan_shiferaw_2008FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_Ca__Ca_i = 1000.0 * var_chaste_interface__Ca__Ca_i_converted; // uM
        const double var_Ca__bcal = 24.0; // uM
        const double var_Ca__bmem = 15.0; // uM
        const double var_Ca__bsar = 42.0; // uM
        const double var_Ca__csm = 0.001 * var_chaste_interface__Ca__Ca_submem; // mM
        const double var_Ca__kmem = 0.29999999999999999; // uM
        const double var_Ca__ksar = 13.0; // uM
        const double var_Ca__mempxi = var_Ca__bmem * var_Ca__kmem / pow((var_Ca__Ca_i + var_Ca__kmem), 2); // dimensionless
        const double var_Ca__mempxs = var_Ca__bmem * var_Ca__kmem / pow((var_chaste_interface__Ca__Ca_submem + var_Ca__kmem), 2); // dimensionless
        const double var_Ca__sarpxi = var_Ca__bsar * var_Ca__ksar / pow((var_Ca__Ca_i + var_Ca__ksar), 2); // dimensionless
        const double var_Ca__sarpxs = var_Ca__bsar * var_Ca__ksar / pow((var_chaste_interface__Ca__Ca_submem + var_Ca__ksar), 2); // dimensionless
        const double var_Ca__srkd = 0.59999999999999998; // uM
        const double var_Ca__srmax = 47.0; // uM
        const double var_Ca__spxi = var_Ca__srkd * var_Ca__srmax / pow((var_Ca__Ca_i + var_Ca__srkd), 2); // dimensionless
        const double var_Ca__spxs = var_Ca__srkd * var_Ca__srmax / pow((var_chaste_interface__Ca__Ca_submem + var_Ca__srkd), 2); // dimensionless
        const double var_Ca__xkcal = 7.0; // uM
        const double var_Ca__bpxi = var_Ca__bcal * var_Ca__xkcal / pow((var_Ca__Ca_i + var_Ca__xkcal), 2); // dimensionless
        const double var_Ca__bpxs = var_Ca__bcal * var_Ca__xkcal / pow((var_chaste_interface__Ca__Ca_submem + var_Ca__xkcal), 2); // dimensionless
        const double var_Ca__dciib = 1 / (1.0 + var_Ca__bpxi + var_Ca__mempxi + var_Ca__sarpxi + var_Ca__spxi); // dimensionless
        const double var_Ca__dcsib = 1 / (1.0 + var_Ca__bpxs + var_Ca__mempxs + var_Ca__sarpxs + var_Ca__spxs); // dimensionless
        const double var_Environment__FonRT = NV_Ith_S(mParameters, 8) / (NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20)); // per_mV
        const double var_ICaL__gca = 182.0; // mmole_per_coulomb_cm
        const double var_ICaL__po = 1.0 - var_chaste_interface__ICaL__c1 - var_chaste_interface__ICaL__c2 - var_chaste_interface__ICaL__xi1ba - var_chaste_interface__ICaL__xi1ca - var_chaste_interface__ICaL__xi2ba - var_chaste_interface__ICaL__xi2ca; // dimensionless
        const double var_IK1__gkix_total = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * NV_Ith_S(mParameters, 15); // uS_per_nF
        const double var_IKr__gkr_total = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * NV_Ith_S(mParameters, 16); // uS_per_nF
        const double var_IKs__gksx = 1.0 + 0.80000000000000004 / (1.0 + 0.125 / pow(var_Ca__Ca_i, 3)); // dimensionless
        const double var_IKs__gks_total = NV_Ith_S(mParameters, 17) * var_IKs__gksx; // uS_per_nF
        const double var_INaCa__xkdna = 0.29999999999999999; // uM
        const double var_INaCa__aloss = 1 / (1.0 + pow(var_INaCa__xkdna, 3) / pow(var_chaste_interface__Ca__Ca_submem, 3)); // dimensionless
        const double var_INaCa__xmcai = 0.0035999999999999999; // mM
        const double var_INaCa__xmcao = 1.3; // mM
        const double var_INaCa__xmnai = 12.300000000000001; // mM
        const double var_INaCa__xmnao = 87.5; // mM
        const double var_INaCa__yz2 = pow(var_INaCa__xmnai, 3) * (1.0 + var_Ca__csm / var_INaCa__xmcai) * NV_Ith_S(mParameters, 5); // mM4
        const double var_Ileak_Iup_Ixfer__cup = 0.5; // uM
        const double var_Ileak_Iup_Ixfer__kj = 50.0; // uM
        const double var_Ileak_Iup_Ixfer__jleak = pow(var_chaste_interface__Ca__Ca_NSR, 2) * (-var_Ca__Ca_i + 16.667000000000002 * var_chaste_interface__Ca__Ca_NSR) * NV_Ith_S(mParameters, 0) / (pow(var_chaste_interface__Ca__Ca_NSR, 2) + pow(var_Ileak_Iup_Ixfer__kj, 2)); // uM_per_ms
        const double var_Ileak_Iup_Ixfer__jup = pow(var_Ca__Ca_i, 2) * NV_Ith_S(mParameters, 2) / (pow(var_Ca__Ca_i, 2) + pow(var_Ileak_Iup_Ixfer__cup, 2)); // uM_per_ms
        const double var_Irel__av = 11.300000000000001; // per_ms
        const double var_Irel__ax = 0.35759999999999997; // per_mV
        const double var_Irel__cstar = 90.0; // uM
        const double var_Irel__bv = -50.0 + (1.0 - var_Irel__av) * var_Irel__cstar; // uM_per_ms
        const double var_Irel__Qr0 = (((var_chaste_interface__Irel__Ca_JSR > 50.0) && (var_chaste_interface__Irel__Ca_JSR < var_Irel__cstar)) ? (-50.0 + var_chaste_interface__Irel__Ca_JSR) : ((var_chaste_interface__Irel__Ca_JSR >= var_Irel__cstar) ? (var_chaste_interface__Irel__Ca_JSR * var_Irel__av + var_Irel__bv) : (0))); // uM_per_ms
        const double var_Irel__Qr = var_chaste_interface__Ca__Ca_NSR * var_Irel__Qr0 / var_Irel__cstar; // uM_per_ms
        const double var_Irel__gbarsr = 26841.799999999999; // dimensionless
        const double var_Irel__gdyad = 9000.0; // mmole_per_coulomb_cm
        const double var_INaCa__yz1 = pow(var_INaCa__xmnao, 3) * var_Ca__csm + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__xmcao; // mM4
        const double var_INaCa__yz3 = pow(NV_Ith_S(mParameters, 7), 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__xmnai, 3)) * var_INaCa__xmcai; // mM4
        const double var_INaCa__yz4 = pow(NV_Ith_S(mParameters, 7), 3) * var_Ca__csm + pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 5); // mM4
        const double var_INaCa__zw8 = var_INaCa__yz1 + var_INaCa__yz2 + var_INaCa__yz3 + var_INaCa__yz4; // mM4
        const double var_ICaL__rxa = ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20) / NV_Ith_S(mParameters, 8))) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 10) / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20) / NV_Ith_S(mParameters, 8) + var_chaste_interface__cell__V) * (1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 10) / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 10) / (-1.0 + exp(-9.9999999999999995e-8))) * NV_Ith_S(mParameters, 8) / (NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20))) : (4.0 * pow(NV_Ith_S(mParameters, 8), 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(2.0 * NV_Ith_S(mParameters, 8) * var_chaste_interface__cell__V / (NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20)))) * NV_Ith_S(mParameters, 10) * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * NV_Ith_S(mParameters, 8) * var_chaste_interface__cell__V / (NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20)))) * NV_Ith_S(mParameters, 9) * NV_Ith_S(mParameters, 20)))); // mA_per_cm2
        const double var_ICaL__jca = var_ICaL__gca * var_ICaL__po * var_ICaL__rxa; // uM_per_ms
        const double var_IKr__rg = 1 / (_lt_0_row[1]); // dimensionless
        const double var_INa__ah = ((var_chaste_interface__cell__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 13) - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_ms
        const double var_INa__aj = ((var_chaste_interface__cell__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * NV_Ith_S(mParameters, 13)) - 3.4740000000000003e-5 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 13) - 0.043909999999999998 * var_chaste_interface__cell__V)) / (_lt_0_row[11])) : (0)); // per_ms
        const double var_INa__bh = ((var_chaste_interface__cell__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V - 0.34999999999999998 * NV_Ith_S(mParameters, 13)) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * NV_Ith_S(mParameters, 13))) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 13) - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INa__bj = ((var_chaste_interface__cell__V < -40.0) ? (0.1212 * exp(0.01052 * NV_Ith_S(mParameters, 13) - 0.01052 * var_chaste_interface__cell__V) / (_lt_0_row[12])) : (0.29999999999999999 * exp(2.5349999999999999e-7 * NV_Ith_S(mParameters, 13) - 2.5349999999999999e-7 * var_chaste_interface__cell__V) / (_lt_0_row[13]))); // per_ms
        const double var_INa__tau_h = 1 / (var_INa__ah + var_INa__bh); // ms
        const double var_INa__tau_j = 1 / (var_INa__aj + var_INa__bj); // ms
        const double var_INaCa__zw3 = pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 5) * exp(0.34999999999999998 * var_Environment__FonRT * var_chaste_interface__cell__V) - pow(NV_Ith_S(mParameters, 7), 3) * var_Ca__csm * exp(-0.65000000000000002 * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__zw4 = 1.0 + 0.20000000000000001 * exp(-0.65000000000000002 * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__jNaCa = var_INaCa__aloss * NV_Ith_S(mParameters, 19) * var_INaCa__zw3 / (var_INaCa__zw4 * var_INaCa__zw8); // uM_per_ms
        const double var_Irel__xicap = var_ICaL__po * var_Irel__gdyad * fabs(var_ICaL__rxa); // uM_per_ms
        const double var_Irel__xirp = var_ICaL__po * var_Irel__Qr * var_Irel__gbarsr * fabs(var_ICaL__rxa) * exp(-(30.0 + var_chaste_interface__cell__V) * var_Irel__ax) / (1.0 + exp(-(30.0 + var_chaste_interface__cell__V) * var_Irel__ax)); // uM_per_ms
        const double var_Irel__xiryr = (var_Irel__xicap + var_Irel__xirp) * NV_Ith_S(mParameters, 1); // uM_per_ms
        const double var_Ito__rt2 = 3.3500000000000001 + 0.10000000000000001 * var_chaste_interface__cell__V; // dimensionless
        const double var_Ito__rs_inf = 1 / (1.0 + exp(var_Ito__rt2)); // dimensionless
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_cell__wca = 8.0; // mV_per_uM
        const double var_ICaL__xica = 2.0 * var_ICaL__jca * var_cell__wca; // nA_per_nF
        const double var_ICaL__xica_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_ICaL__xica; // uA_per_cm2
        const double var_INaCa__xiNaCa = var_INaCa__jNaCa * var_cell__wca; // nA_per_nF
        const double var_INaCa__xiNaCa_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_INaCa__xiNaCa; // uA_per_cm2
        const double var_reversal_potentials__ek = log(NV_Ith_S(mParameters, 6) / NV_Ith_S(mParameters, 4)) / var_Environment__FonRT; // mV
        const double var_IK1__aki = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__ek)); // per_ms
        const double var_IK1__bki = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__ek) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__ek)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__ek - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__xkin = var_IK1__aki / (var_IK1__aki + var_IK1__bki); // dimensionless
        const double var_IK1__xik1 = (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * var_IK1__gkix_total * var_IK1__xkin; // nA_per_nF
        const double var_IK1__xik1_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_IK1__xik1; // uA_per_cm2
        const double var_IKr__xikr = (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * var_IKr__gkr_total * var_IKr__rg * var_chaste_interface__IKr__xr; // nA_per_nF
        const double var_IKr__xikr_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_IKr__xikr; // uA_per_cm2
        const double var_Ito__xitof = (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 14) * var_chaste_interface__Ito__xtof * var_chaste_interface__Ito__ytof; // nA_per_nF
        const double var_Ito__xitos = (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * (0.5 * var_Ito__rs_inf + var_chaste_interface__Ito__ytos) * NV_Ith_S(mParameters, 18) * var_chaste_interface__Ito__xtos; // nA_per_nF
        const double var_Ito__xito = var_Ito__xitof + var_Ito__xitos; // nA_per_nF
        const double var_Ito__xito_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_Ito__xito; // uA_per_cm2
        const double var_reversal_potentials__ena = log(NV_Ith_S(mParameters, 7) / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__xina = pow(var_chaste_interface__INa__xm, 3) * (-var_reversal_potentials__ena + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 11) * var_chaste_interface__INa__xh * var_chaste_interface__INa__xj; // nA_per_nF
        const double var_INa__xina_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_INa__xina; // uA_per_cm2
        const double var_reversal_potentials__prNaK = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__eks = log((NV_Ith_S(mParameters, 7) * var_reversal_potentials__prNaK + NV_Ith_S(mParameters, 6)) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prNaK + NV_Ith_S(mParameters, 4))) / var_Environment__FonRT; // mV
        const double var_IKs__xiks = (-var_reversal_potentials__eks + var_chaste_interface__cell__V) * var_IKs__gks_total * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // nA_per_nF
        const double var_IKs__xiks_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_IKs__xiks; // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(22);
        NV_Ith_S(dqs, 0) = var_Ileak_Iup_Ixfer__jleak;
        NV_Ith_S(dqs, 1) = var_Irel__xiryr;
        NV_Ith_S(dqs, 2) = var_Ileak_Iup_Ixfer__jup;
        NV_Ith_S(dqs, 3) = var_chaste_interface__Ca__Ca_i_converted;
        NV_Ith_S(dqs, 4) = var_Ca__dciib;
        NV_Ith_S(dqs, 5) = var_ICaL__xica_converted;
        NV_Ith_S(dqs, 6) = var_INa__xina_converted;
        NV_Ith_S(dqs, 7) = var_INa__tau_h;
        NV_Ith_S(dqs, 8) = var_INa__tau_j;
        NV_Ith_S(dqs, 9) = var_IK1__xik1_converted;
        NV_Ith_S(dqs, 10) = var_IK1__gkix_total;
        NV_Ith_S(dqs, 11) = var_IKr__xikr_converted;
        NV_Ith_S(dqs, 12) = var_IKr__gkr_total;
        NV_Ith_S(dqs, 13) = var_IKs__xiks_converted;
        NV_Ith_S(dqs, 14) = var_IKs__gks_total;
        NV_Ith_S(dqs, 15) = var_INaCa__xiNaCa_converted;
        NV_Ith_S(dqs, 16) = var_cell__i_Stim_converted;
        NV_Ith_S(dqs, 17) = var_Ito__xito_converted;
        NV_Ith_S(dqs, 18) = var_reversal_potentials__ek;
        NV_Ith_S(dqs, 19) = var_reversal_potentials__ena;
        NV_Ith_S(dqs, 20) = var_Ca__dcsib;
        NV_Ith_S(dqs, 21) = var_chaste_interface__Environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellmahajan_shiferaw_2008FromCellMLCvodeOpt>::Initialise(void)
{
    this->mSystemName = "MahajanShiferaw2008_units";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "ms";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-87.169816169406);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.000256752008084);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001075453357);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.990691306716);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993888937283);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("ICaL__c1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.8211252e-05);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("ICaL__c2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.979322592773);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("ICaL__xi1ca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001208153482);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("ICaL__xi1ba");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.3616596e-05);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("ICaL__xi2ca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.004173008466);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("ICaL__xi2ba");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.015242594688);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("IKr__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.007074239331);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.048267587131);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.105468807033);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("Ito__xtos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00364776906);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("Ito__ytos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.174403618112);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("Ito__xtof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.003643592594);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("Ito__ytof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993331326442);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(97.505463697266);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("Irel__xir");
    this->mVariableUnits.push_back("uM_per_ms");
    this->mInitialConditions.push_back(0.006679257264);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(11.441712311614);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(1.716573130685);

    // NV_Ith_S(rY, 22):
    this->mVariableNames.push_back("submembrane_space_calcium_concentration");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(0.226941113355);

    // NV_Ith_S(rY, 23):
    this->mVariableNames.push_back("NSR_calcium_concentration");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(104.450004990523);

    // NV_Ith_S(rY, 24):
    this->mVariableNames.push_back("Ca__tropi");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(22.171689894953);

    // NV_Ith_S(rY, 25):
    this->mVariableNames.push_back("Ca__trops");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(19.864701949854);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("per_ms");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("uM_per_ms");

    // mParameters[3]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[4]:
    this->mParameterNames.push_back("cytosolic_potassium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[7]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[8]:
    this->mParameterNames.push_back("faraday_constant");
    this->mParameterUnits.push_back("coulomb_per_mmole");

    // mParameters[9]:
    this->mParameterNames.push_back("gas_constant");
    this->mParameterUnits.push_back("J_per_moleK");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("cm_per_s");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("uS_per_nF");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("mV");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_fast_transient_outward_current_conductance");
    this->mParameterUnits.push_back("uS_per_nF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("uS_per_nF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("uS_per_nF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("uS_per_nF");

    // mParameters[18]:
    this->mParameterNames.push_back("membrane_slow_transient_outward_current_conductance");
    this->mParameterUnits.push_back("uS_per_nF");

    // mParameters[19]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("uM_per_ms");

    // mParameters[20]:
    this->mParameterNames.push_back("temperature");
    this->mParameterUnits.push_back("kelvin");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_leak_current");
    this->mDerivedQuantityUnits.push_back("uM_per_ms");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("uM_per_ms");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("SR_uptake_current");
    this->mDerivedQuantityUnits.push_back("uM_per_ms");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_concentration");
    this->mDerivedQuantityUnits.push_back("millimolar");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_flux_scaling_from_intrinsic_buffers");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("uS_per_nF");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("uS_per_nF");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("uS_per_nF");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [17]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [18]:
    this->mDerivedQuantityNames.push_back("potassium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("mV");

    // Derived Quantity index [19]:
    this->mDerivedQuantityNames.push_back("sodium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("mV");

    // Derived Quantity index [20]:
    this->mDerivedQuantityNames.push_back("submembrane_space_calcium_flux_scaling_from_intrinsic_buffers");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [21]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("ms");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellmahajan_shiferaw_2008FromCellMLCvodeOpt)

#endif // CHASTE_CVODE
