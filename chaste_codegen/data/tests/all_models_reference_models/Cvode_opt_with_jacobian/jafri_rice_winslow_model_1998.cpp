#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: jafri_rice_winslow_1998
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvodeOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "jafri_rice_winslow_model_1998.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<20; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables(const Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables&);
    Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables& operator= (const Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables&);
    Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 20;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][20];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.001 * exp(0.075146605522028176 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[0] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] >= 2){
                    EXCEPTION("Lookup table 0 at ["<<i<<"][0] has non-finite value: " << val);
                }
                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return -1.0 + exp(0.075146605522028176 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[1] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] >= 2){
                    EXCEPTION("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val);
                }
                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(0.037573302761014088 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[2] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[2] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[2] >= 2){
                    EXCEPTION("Lookup table 2 at ["<<i<<"][2] has non-finite value: " << val);
                }
                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return -1.0 + exp(0.037573302761014088 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[3] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[3] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[3] >= 2){
                    EXCEPTION("Lookup table 3 at ["<<i<<"][3] has non-finite value: " << val);
                }
                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(0.013150655966354929 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-0.024422646794659157 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + 0.10000000000000001 * exp(-0.024422646794659157 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-0.037573302761014088 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.1245 * exp(-0.0037573302761014088 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + exp(-1.7526479750778814 + 0.031152647975077882 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.40000000000000002 * exp(1.2 + 0.10000000000000001 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.050000000000000003 * exp(-0.92307692307692313 - 0.076923076923076927 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(7.333333333333333 + 0.13333333333333333 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.10000000000000001 / (1.0 + exp(3.5 - 0.16666666666666666 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 20.0 + 600.0 / (1.0 + exp(3.1578947368421053 + 0.10526315789473684 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((fabs(47.130000000000003 + var_chaste_interface__membrane__V) < 1.0000000010279564e-6) ? (-3.2000000146581445e-7 / (1.0 - exp(1.0000000045806701e-7)) + 499999.99948602181 * (47.130001000000007 + var_chaste_interface__membrane__V) * (3.2000000146581445e-7 / (1.0 - exp(1.0000000045806701e-7)) + 3.1999999919207769e-7 / (1.0 - exp(-9.9999999747524276e-8)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[16] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[16] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[16] >= 2){
                    EXCEPTION("Lookup table 16 at ["<<i<<"][16] has non-finite value: " << val);
                }
                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-0.090909090909090912 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((fabs(30.0 + var_chaste_interface__membrane__V) < 6.7567567541004792e-7) ? (-4.8581081061982445e-11 / (1.0 - exp(9.9999999960687092e-8)) + 740000.00029091549 * (30.000000675675675 + var_chaste_interface__membrane__V) * (4.8581081061982445e-11 / (1.0 - exp(9.9999999960687092e-8)) + 4.8581081061982445e-11 / (1.0 - exp(-9.9999999960687092e-8)))) : (7.1899999999999999e-5 * (30.0 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[18] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[18] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[18] >= 2){
                    EXCEPTION("Lookup table 18 at ["<<i<<"][18] has non-finite value: " << val);
                }
                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((fabs(30.0 + var_chaste_interface__membrane__V) < 1.4556040746072085e-6) ? (1.9068413377354434e-10 / (-1.0 + exp(9.9999999925515227e-8)) - 343500.00025585521 * (29.999998544395925 + var_chaste_interface__membrane__V) * (-1.9068413377354434e-10 / (-1.0 + exp(9.9999999925515227e-8)) - 1.9068413377354434e-10 / (-1.0 + exp(-9.9999999925515227e-8)))) : (0.00013100000000000001 * (30.0 + var_chaste_interface__membrane__V) / (-1.0 + exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[19] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[19] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[19] >= 2){
                    EXCEPTION("Lookup table 19 at ["<<i<<"][19] has non-finite value: " << val);
                }
                _lookup_table_0[i][19] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[20];

    // Lookup tables
    double (*_lookup_table_0)[20];
    int _lookup_table_0_num_misshit_piecewise[20] = {0};

};

std::shared_ptr<Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables> Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables::mpInstance;


    boost::shared_ptr<RegularStimulus> Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_amplitude_converted = 51.628900000000009; // uA_per_cm2
        const double var_chaste_interface__membrane__stim_duration = 1.0; // ms
        const double var_chaste_interface__membrane__stim_period = 500.0; // ms
        const double var_chaste_interface__membrane__stim_start = 100.0; // ms
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude_converted),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt::Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                31,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 5.8e-5; // (var_calcium_subsystem__v2) [per_ms]
        NV_Ith_S(this->mParameters, 1) = 1.8; // (var_calcium_subsystem__v1) [per_ms]
        NV_Ith_S(this->mParameters, 2) = 0.0018; // (var_calcium_subsystem__v3) [mM_per_ms]
        NV_Ith_S(this->mParameters, 3) = 1.0; // (var_ionic_concentrations__conc_clamp) [dimensionless]
        NV_Ith_S(this->mParameters, 4) = 1.8; // (var_ionic_concentrations__Cao) [mM]
        NV_Ith_S(this->mParameters, 5) = 140.0; // (var_ionic_concentrations__Nao) [mM]
        NV_Ith_S(this->mParameters, 6) = 3.375e-5; // (var_L_type_Ca_channel__P_Ca) [mm_per_ms]
        NV_Ith_S(this->mParameters, 7) = 0.01; // (var_membrane__Cm) [uF_per_mm2]
        NV_Ith_S(this->mParameters, 8) = 0.0011280000000000001; // (var_time_dependent_potassium_current__g_K_max) [mS_per_mm2]
        NV_Ith_S(this->mParameters, 9) = 0.128; // (var_fast_sodium_current__g_Na) [mS_per_mm2]
        NV_Ith_S(this->mParameters, 10) = 0; // (var_fast_sodium_current__perc_reduced_inact_for_IpNa) [dimensionless]
        NV_Ith_S(this->mParameters, 11) = 0; // (var_fast_sodium_current__shift_INa_inact) [mV]
        NV_Ith_S(this->mParameters, 12) = 50.0; // (var_Na_Ca_exchanger__k_NaCa) [uA_per_mm2]
    }

    Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt::~Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt()
    {
    }

    AbstractLookupTableCollection* Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt::GetLookupTableCollection()
    {
        return Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables::Instance();
    }
    
    double Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -84.1638
        double var_chaste_interface__calcium_subsystem__Cai = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 9.94893e-11
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.0328302
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.988354
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.99254
        double var_chaste_interface__L_type_Ca_channel__O = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 9.84546e-21
        double var_chaste_interface__L_type_Ca_channel__O_Ca = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__L_type_Ca_channel_y_gate__y = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.998983
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.000928836
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 28);
        // Units: mM; Initial value: 10.2042
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 29);
        // Units: mM; Initial value: 143.727
        double var_chaste_interface__ionic_concentrations__Ko = NV_Ith_S(rY, 30);
        // Units: mM; Initial value: 5.4
        
        // Lookup table indexing
        const bool _oob_0 = Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        const double var_fast_sodium_current__E_Na = 26.614641953637257 * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__ionic_concentrations__Nai); // mV
        const double var_L_type_Ca_channel__i_Ca_L_Ca_max = ((fabs(var_chaste_interface__membrane__V) < 1.3307320976818627e-6) ? (-375733.02761014085 * (-1.3307320976818627e-6 + var_chaste_interface__membrane__V) * (-0.019368999999999997 * (0.001 * exp(9.9999999999999995e-8) - 0.34100000000000003 * NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 6) / (-1.0 + exp(9.9999999999999995e-8)) - 0.019368999999999997 * (0.001 * exp(-9.9999999999999995e-8) - 0.34100000000000003 * NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 6) / (-1.0 + exp(-9.9999999999999995e-8))) + 0.019368999999999997 * (0.001 * exp(9.9999999999999995e-8) - 0.34100000000000003 * NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 6) / (-1.0 + exp(9.9999999999999995e-8))) : (14555.146023561636 * (_lt_0_row[0] - 0.34100000000000003 * NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 6) * var_chaste_interface__membrane__V / (_lt_0_row[1]))); // uA_per_mm2
        const double var_L_type_Ca_channel__i_Ca_L_Ca_converted = 100.00000000000001 * (var_chaste_interface__L_type_Ca_channel__O + var_chaste_interface__L_type_Ca_channel__O_Ca) * var_L_type_Ca_channel__i_Ca_L_Ca_max * var_chaste_interface__L_type_Ca_channel_y_gate__y; // uA_per_cm2
        const double var_L_type_Ca_channel__i_Ca_L_K = ((fabs(var_chaste_interface__membrane__V) < 2.6614641953637258e-6) ? (-187866.5138050704 * (-2.6614641953637258e-6 + var_chaste_interface__membrane__V) * (-9.6845000000000022e-12 * (-var_chaste_interface__ionic_concentrations__Ko + var_chaste_interface__ionic_concentrations__Ki * exp(1.0000000000000001e-7)) * (var_chaste_interface__L_type_Ca_channel__O + var_chaste_interface__L_type_Ca_channel__O_Ca) * var_chaste_interface__L_type_Ca_channel_y_gate__y / ((1.0 - 218.34061135371181 * var_L_type_Ca_channel__i_Ca_L_Ca_max) * (-1.0 + exp(1.0000000000000001e-7))) - 9.6845000000000022e-12 * (-var_chaste_interface__ionic_concentrations__Ko + var_chaste_interface__ionic_concentrations__Ki * exp(-1.0000000000000001e-7)) * (var_chaste_interface__L_type_Ca_channel__O + var_chaste_interface__L_type_Ca_channel__O_Ca) * var_chaste_interface__L_type_Ca_channel_y_gate__y / ((1.0 - 218.34061135371181 * var_L_type_Ca_channel__i_Ca_L_Ca_max) * (-1.0 + exp(-1.0000000000000001e-7)))) + 9.6845000000000022e-12 * (-var_chaste_interface__ionic_concentrations__Ko + var_chaste_interface__ionic_concentrations__Ki * exp(1.0000000000000001e-7)) * (var_chaste_interface__L_type_Ca_channel__O + var_chaste_interface__L_type_Ca_channel__O_Ca) * var_chaste_interface__L_type_Ca_channel_y_gate__y / ((1.0 - 218.34061135371181 * var_L_type_Ca_channel__i_Ca_L_Ca_max) * (-1.0 + exp(1.0000000000000001e-7)))) : (3.6387865058904094e-6 * (-var_chaste_interface__ionic_concentrations__Ko + var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[2]) * (var_chaste_interface__L_type_Ca_channel__O + var_chaste_interface__L_type_Ca_channel__O_Ca) * var_chaste_interface__L_type_Ca_channel_y_gate__y * var_chaste_interface__membrane__V / ((1.0 - 218.34061135371181 * var_L_type_Ca_channel__i_Ca_L_Ca_max) * (_lt_0_row[3])))); // uA_per_mm2
        const double var_Na_Ca_exchanger__i_NaCa_converted = 100.00000000000001 * (pow(var_chaste_interface__ionic_concentrations__Nai, 3) * NV_Ith_S(mParameters, 4) * _lt_0_row[4] - pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__calcium_subsystem__Cai * _lt_0_row[5]) * NV_Ith_S(mParameters, 12) / ((_lt_0_row[6]) * (669921.875 + pow(NV_Ith_S(mParameters, 5), 3)) * (1.3799999999999999 + NV_Ith_S(mParameters, 4))); // uA_per_cm2
        const double var_calcium_background_current__i_Ca_b = 6.0319999999999998e-5 * var_chaste_interface__membrane__V - 0.00080269760132169958 * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__calcium_subsystem__Cai); // uA_per_mm2
        const double var_fast_sodium_current__i_Na_converted = 100.00000000000001 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 9) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // uA_per_cm2
        const double var_non_specific_calcium_activated_current__VnsCa = -26.614641953637257 * log((var_chaste_interface__ionic_concentrations__Ko + NV_Ith_S(mParameters, 5)) / (var_chaste_interface__ionic_concentrations__Ki + var_chaste_interface__ionic_concentrations__Nai)) + var_chaste_interface__membrane__V; // mV
        const double var_non_specific_calcium_activated_current__i_ns_Ca = 6.3678763853082156e-6 * (-0.75 * var_chaste_interface__ionic_concentrations__Ko + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(0.037573302761014088 * var_non_specific_calcium_activated_current__VnsCa)) * var_non_specific_calcium_activated_current__VnsCa / ((1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__calcium_subsystem__Cai, 3)) * (-1.0 + exp(0.037573302761014088 * var_non_specific_calcium_activated_current__VnsCa))) + 6.3678763853082156e-6 * (-0.75 * NV_Ith_S(mParameters, 5) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(0.037573302761014088 * var_non_specific_calcium_activated_current__VnsCa)) * var_non_specific_calcium_activated_current__VnsCa / ((1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__calcium_subsystem__Cai, 3)) * (-1.0 + exp(0.037573302761014088 * var_non_specific_calcium_activated_current__VnsCa))); // uA_per_mm2
        const double var_sarcolemmal_calcium_pump__i_p_Ca = 0.0115 * var_chaste_interface__calcium_subsystem__Cai / (0.00050000000000000001 + var_chaste_interface__calcium_subsystem__Cai); // uA_per_mm2
        const double var_sodium_background_current__i_Na_b = 1.4100000000000001e-5 * var_chaste_interface__membrane__V - 1.4100000000000001e-5 * var_fast_sodium_current__E_Na; // uA_per_mm2
        const double var_sodium_potassium_pump__i_NaK = 0.012999999999999999 * var_chaste_interface__ionic_concentrations__Ko / ((1.0 + 31.622776601683793 * pow((1 / var_chaste_interface__ionic_concentrations__Nai), 1.5)) * (1.5 + var_chaste_interface__ionic_concentrations__Ko) * (1.0 + _lt_0_row[8] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 5))) * _lt_0_row[7])); // uA_per_mm2
        const double var_time_dependent_potassium_current__i_K_converted = 43.033148291193527 * sqrt(var_chaste_interface__ionic_concentrations__Ko) * pow(var_chaste_interface__time_dependent_potassium_current_X_gate__X, 2) * (-26.614641953637257 * log((0.018329999999999999 * NV_Ith_S(mParameters, 5) + var_chaste_interface__ionic_concentrations__Ko) / (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai + var_chaste_interface__ionic_concentrations__Ki)) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 8) / (_lt_0_row[9]); // uA_per_cm2
        const double var_time_independent_potassium_current__E_K1 = 26.614641953637257 * log(var_chaste_interface__ionic_concentrations__Ko / var_chaste_interface__ionic_concentrations__Ki); // mV
        const double var_plateau_potassium_current__i_Kp = 8.2799999999999993e-5 * (-var_time_independent_potassium_current__E_K1 + var_chaste_interface__membrane__V) / (_lt_0_row[10]); // uA_per_mm2
        const double var_time_independent_potassium_current__i_K1_converted = 0.32920358442763048 * sqrt(var_chaste_interface__ionic_concentrations__Ko) * (-var_time_independent_potassium_current__E_K1 + var_chaste_interface__membrane__V) / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K1)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K1)) + (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 0.061749999999999999 * var_time_independent_potassium_current__E_K1) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 0.080320000000000003 * var_time_independent_potassium_current__E_K1)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_time_independent_potassium_current__E_K1 - 0.51429999999999998 * var_chaste_interface__membrane__V)))); // uA_per_cm2
        const double var_chaste_interface__i_ionic = 100.00000000000001 * var_L_type_Ca_channel__i_Ca_L_K + 100.00000000000001 * var_calcium_background_current__i_Ca_b + 100.00000000000001 * var_non_specific_calcium_activated_current__i_ns_Ca + 100.00000000000001 * var_plateau_potassium_current__i_Kp + 100.00000000000001 * var_sarcolemmal_calcium_pump__i_p_Ca + 100.00000000000001 * var_sodium_background_current__i_Na_b + 100.00000000000001 * var_sodium_potassium_pump__i_NaK + var_L_type_Ca_channel__i_Ca_L_Ca_converted + var_Na_Ca_exchanger__i_NaCa_converted + var_fast_sodium_current__i_Na_converted + var_time_dependent_potassium_current__i_K_converted + var_time_independent_potassium_current__i_K1_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -84.1638
        double var_chaste_interface__calcium_subsystem__Cai = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 9.94893e-11
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.0328302
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.988354
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.99254
        double var_chaste_interface__L_type_Ca_channel__O = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 9.84546e-21
        double var_chaste_interface__L_type_Ca_channel__O_Ca = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__L_type_Ca_channel__C0 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.997208
        double var_chaste_interface__L_type_Ca_channel__C1 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 6.38897e-05
        double var_chaste_interface__L_type_Ca_channel__C2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 1.535e-09
        double var_chaste_interface__L_type_Ca_channel__C3 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 1.63909e-14
        double var_chaste_interface__L_type_Ca_channel__C4 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 6.56337e-20
        double var_chaste_interface__L_type_Ca_channel__C_Ca0 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.00272826
        double var_chaste_interface__L_type_Ca_channel__C_Ca1 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 6.99215e-07
        double var_chaste_interface__L_type_Ca_channel__C_Ca2 = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 6.71989e-11
        double var_chaste_interface__L_type_Ca_channel__C_Ca3 = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 2.87031e-15
        double var_chaste_interface__L_type_Ca_channel__C_Ca4 = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 4.59752e-20
        double var_chaste_interface__L_type_Ca_channel_y_gate__y = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.998983
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.000928836
        double var_chaste_interface__calcium_subsystem__Ca_SS = NV_Ith_S(rY, 19);
        // Units: mM; Initial value: 0.000136058
        double var_chaste_interface__calcium_subsystem__P_O1 = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.00119168
        double var_chaste_interface__calcium_subsystem__P_O2 = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 6.30613e-09
        double var_chaste_interface__calcium_subsystem__P_C1 = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.762527
        double var_chaste_interface__calcium_subsystem__P_C2 = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 0.236283
        double var_chaste_interface__calcium_subsystem__Ca_JSR = NV_Ith_S(rY, 24);
        // Units: mM; Initial value: 1.17504
        double var_chaste_interface__calcium_subsystem__Ca_NSR = NV_Ith_S(rY, 25);
        // Units: mM; Initial value: 1.243891
        double var_chaste_interface__calcium_subsystem__HTRPNCa = NV_Ith_S(rY, 26);
        // Units: mM; Initial value: 0.13598
        double var_chaste_interface__calcium_subsystem__LTRPNCa = NV_Ith_S(rY, 27);
        // Units: mM; Initial value: 0.00635
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 28);
        // Units: mM; Initial value: 10.2042
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 29);
        // Units: mM; Initial value: 143.727
        double var_chaste_interface__ionic_concentrations__Ko = NV_Ith_S(rY, 30);
        // Units: mM; Initial value: 5.4

        // Lookup table indexing
        const bool _oob_0 = Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        double d_dt_chaste_interface_var_membrane__V;
        const double var_L_type_Ca_channel__f_ = 0; // per_ms
        const double d_dt_chaste_interface_var_L_type_Ca_channel__O = 0.29999999999999999 * var_chaste_interface__L_type_Ca_channel__C4 - 2.0 * var_chaste_interface__L_type_Ca_channel__O; // 1 / ms
        const double var_L_type_Ca_channel__g_ = 0; // per_ms
        const double d_dt_chaste_interface_var_L_type_Ca_channel__O_Ca = var_chaste_interface__L_type_Ca_channel__C_Ca4 * var_L_type_Ca_channel__f_ - var_chaste_interface__L_type_Ca_channel__O_Ca * var_L_type_Ca_channel__g_; // 1 / ms
        const double var_L_type_Ca_channel__gamma = 0.1875 * var_chaste_interface__calcium_subsystem__Ca_SS; // per_ms
        const double d_dt_chaste_interface_var_calcium_subsystem__P_C2 = 0.017999999999999999 * var_chaste_interface__calcium_subsystem__P_O1 - 0.00080000000000000004 * var_chaste_interface__calcium_subsystem__P_C2; // 1 / ms
        const double var_calcium_subsystem__J_htrpn = -6.6000000000000005e-5 * var_chaste_interface__calcium_subsystem__HTRPNCa + 20.0 * (0.14000000000000001 - var_chaste_interface__calcium_subsystem__HTRPNCa) * var_chaste_interface__calcium_subsystem__Cai; // mM_per_ms
        const double d_dt_chaste_interface_var_calcium_subsystem__HTRPNCa = var_calcium_subsystem__J_htrpn; // mM / ms
        const double var_calcium_subsystem__J_ltrpn = -0.040000000000000001 * var_chaste_interface__calcium_subsystem__LTRPNCa + 40.0 * (0.070000000000000007 - var_chaste_interface__calcium_subsystem__LTRPNCa) * var_chaste_interface__calcium_subsystem__Cai; // mM_per_ms
        const double d_dt_chaste_interface_var_calcium_subsystem__LTRPNCa = var_calcium_subsystem__J_ltrpn; // mM / ms
        const double d_dt_chaste_interface_var_calcium_subsystem__P_O2 = -1.9299999999999999 * var_chaste_interface__calcium_subsystem__P_O2 + 40500000.0 * pow(var_chaste_interface__calcium_subsystem__Ca_SS, 3.0) * var_chaste_interface__calcium_subsystem__P_O1; // 1 / ms
        const double d_dt_chaste_interface_var_calcium_subsystem__P_C1 = 0.14249999999999999 * var_chaste_interface__calcium_subsystem__P_O1 - 12150000000.0 * pow(var_chaste_interface__calcium_subsystem__Ca_SS, 4.0) * var_chaste_interface__calcium_subsystem__P_C1; // 1 / ms
        const double d_dt_chaste_interface_var_calcium_subsystem__P_O1 = 0.00080000000000000004 * var_chaste_interface__calcium_subsystem__P_C2 + 1.9299999999999999 * var_chaste_interface__calcium_subsystem__P_O2 - 0.16049999999999998 * var_chaste_interface__calcium_subsystem__P_O1 + 12150000000.0 * pow(var_chaste_interface__calcium_subsystem__Ca_SS, 4.0) * var_chaste_interface__calcium_subsystem__P_C1 - 40500000.0 * pow(var_chaste_interface__calcium_subsystem__Ca_SS, 3.0) * var_chaste_interface__calcium_subsystem__P_O1; // 1 / ms
        const double var_calcium_subsystem__J_tr = 0.029002320185614851 * var_chaste_interface__calcium_subsystem__Ca_NSR - 0.029002320185614851 * var_chaste_interface__calcium_subsystem__Ca_JSR; // mM_per_ms
        const double var_calcium_subsystem__J_xfer = 0.32000000000000001 * var_chaste_interface__calcium_subsystem__Ca_SS - 0.32000000000000001 * var_chaste_interface__calcium_subsystem__Cai; // mM_per_ms
        const double var_calcium_subsystem__J_rel = (-var_chaste_interface__calcium_subsystem__Ca_SS + var_chaste_interface__calcium_subsystem__Ca_JSR) * (var_chaste_interface__calcium_subsystem__P_O1 + var_chaste_interface__calcium_subsystem__P_O2) * NV_Ith_S(mParameters, 1); // mM_per_ms
        const double d_dt_chaste_interface_var_calcium_subsystem__Ca_JSR = (-var_calcium_subsystem__J_rel + var_calcium_subsystem__J_tr) / (1.0 + 12.0 / pow((0.80000000000000004 + var_chaste_interface__calcium_subsystem__Ca_JSR), 2)); // mM / ms
        const double var_calcium_subsystem__J_leak = (-var_chaste_interface__calcium_subsystem__Cai + var_chaste_interface__calcium_subsystem__Ca_NSR) * NV_Ith_S(mParameters, 0); // mM_per_ms
        const double var_calcium_subsystem__J_up = pow(var_chaste_interface__calcium_subsystem__Cai, 2) * NV_Ith_S(mParameters, 2) / (2.4999999999999999e-7 + pow(var_chaste_interface__calcium_subsystem__Cai, 2)); // mM_per_ms
        const double d_dt_chaste_interface_var_calcium_subsystem__Ca_NSR = 12.345679012345679 * var_calcium_subsystem__J_up - 0.057283950617283946 * var_calcium_subsystem__J_tr - 12.345679012345679 * var_calcium_subsystem__J_leak; // mM / ms
        const double var_fast_sodium_current__E_Na = 26.614641953637257 * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__ionic_concentrations__Nai); // mV
        const double var_L_type_Ca_channel__alpha = _lt_0_row[11]; // per_ms
        const double var_L_type_Ca_channel__alpha_a = 2.0 * var_L_type_Ca_channel__alpha; // per_ms
        const double var_L_type_Ca_channel__beta = _lt_0_row[12]; // per_ms
        const double d_dt_chaste_interface_var_L_type_Ca_channel__C0 = 0.01 * var_chaste_interface__L_type_Ca_channel__C_Ca0 + var_chaste_interface__L_type_Ca_channel__C1 * var_L_type_Ca_channel__beta - (4.0 * var_L_type_Ca_channel__alpha + var_L_type_Ca_channel__gamma) * var_chaste_interface__L_type_Ca_channel__C0; // 1 / ms
        const double d_dt_chaste_interface_var_L_type_Ca_channel__C1 = 0.0050000000000000001 * var_chaste_interface__L_type_Ca_channel__C_Ca1 - (2.0 * var_L_type_Ca_channel__gamma + 3.0 * var_L_type_Ca_channel__alpha + var_L_type_Ca_channel__beta) * var_chaste_interface__L_type_Ca_channel__C1 + 2.0 * var_chaste_interface__L_type_Ca_channel__C2 * var_L_type_Ca_channel__beta + 4.0 * var_chaste_interface__L_type_Ca_channel__C0 * var_L_type_Ca_channel__alpha; // 1 / ms
        const double d_dt_chaste_interface_var_L_type_Ca_channel__C2 = 0.0025000000000000001 * var_chaste_interface__L_type_Ca_channel__C_Ca2 - (2.0 * var_L_type_Ca_channel__alpha + 2.0 * var_L_type_Ca_channel__beta + 4.0 * var_L_type_Ca_channel__gamma) * var_chaste_interface__L_type_Ca_channel__C2 + 3.0 * var_chaste_interface__L_type_Ca_channel__C1 * var_L_type_Ca_channel__alpha + 3.0 * var_chaste_interface__L_type_Ca_channel__C3 * var_L_type_Ca_channel__beta; // 1 / ms
        const double d_dt_chaste_interface_var_L_type_Ca_channel__C3 = 0.00125 * var_chaste_interface__L_type_Ca_channel__C_Ca3 - (8.0 * var_L_type_Ca_channel__gamma + 3.0 * var_L_type_Ca_channel__beta + var_L_type_Ca_channel__alpha) * var_chaste_interface__L_type_Ca_channel__C3 + 2.0 * var_chaste_interface__L_type_Ca_channel__C2 * var_L_type_Ca_channel__alpha + 4.0 * var_chaste_interface__L_type_Ca_channel__C4 * var_L_type_Ca_channel__beta; // 1 / ms
        const double d_dt_chaste_interface_var_L_type_Ca_channel__C4 = 2.0 * var_chaste_interface__L_type_Ca_channel__O + 0.00062500000000000001 * var_chaste_interface__L_type_Ca_channel__C_Ca4 + var_chaste_interface__L_type_Ca_channel__C3 * var_L_type_Ca_channel__alpha - (0.29999999999999999 + 4.0 * var_L_type_Ca_channel__beta + 16.0 * var_L_type_Ca_channel__gamma) * var_chaste_interface__L_type_Ca_channel__C4; // 1 / ms
        const double var_L_type_Ca_channel__beta_b = 0.5 * var_L_type_Ca_channel__beta; // per_ms
        const double d_dt_chaste_interface_var_L_type_Ca_channel__C_Ca0 = var_chaste_interface__L_type_Ca_channel__C_Ca0 * var_L_type_Ca_channel__gamma + var_chaste_interface__L_type_Ca_channel__C_Ca1 * var_L_type_Ca_channel__beta_b - (0.01 + 4.0 * var_L_type_Ca_channel__alpha_a) * var_chaste_interface__L_type_Ca_channel__C_Ca0; // 1 / ms
        const double d_dt_chaste_interface_var_L_type_Ca_channel__C_Ca1 = -(0.0050000000000000001 + 3.0 * var_L_type_Ca_channel__alpha_a + var_L_type_Ca_channel__beta_b) * var_chaste_interface__L_type_Ca_channel__C_Ca1 + 2.0 * var_chaste_interface__L_type_Ca_channel__C1 * var_L_type_Ca_channel__gamma + 2.0 * var_chaste_interface__L_type_Ca_channel__C_Ca2 * var_L_type_Ca_channel__beta_b + 4.0 * var_chaste_interface__L_type_Ca_channel__C_Ca0 * var_L_type_Ca_channel__alpha_a; // 1 / ms
        const double d_dt_chaste_interface_var_L_type_Ca_channel__C_Ca2 = -(0.0025000000000000001 + 2.0 * var_L_type_Ca_channel__alpha_a + 2.0 * var_L_type_Ca_channel__beta_b) * var_chaste_interface__L_type_Ca_channel__C_Ca2 + 4.0 * var_chaste_interface__L_type_Ca_channel__C2 * var_L_type_Ca_channel__gamma + 3.0 * var_chaste_interface__L_type_Ca_channel__C_Ca1 * var_L_type_Ca_channel__alpha_a + 3.0 * var_chaste_interface__L_type_Ca_channel__C_Ca3 * var_L_type_Ca_channel__beta_b; // 1 / ms
        const double d_dt_chaste_interface_var_L_type_Ca_channel__C_Ca3 = -(0.00125 + 3.0 * var_L_type_Ca_channel__beta_b + var_L_type_Ca_channel__alpha_a) * var_chaste_interface__L_type_Ca_channel__C_Ca3 + 2.0 * var_chaste_interface__L_type_Ca_channel__C_Ca2 * var_L_type_Ca_channel__alpha_a + 4.0 * var_chaste_interface__L_type_Ca_channel__C_Ca4 * var_L_type_Ca_channel__beta_b + 8.0 * var_chaste_interface__L_type_Ca_channel__C3 * var_L_type_Ca_channel__gamma; // 1 / ms
        const double d_dt_chaste_interface_var_L_type_Ca_channel__C_Ca4 = var_chaste_interface__L_type_Ca_channel__C_Ca3 * var_L_type_Ca_channel__alpha_a + var_chaste_interface__L_type_Ca_channel__O_Ca * var_L_type_Ca_channel__g_ - (0.00062500000000000001 + 4.0 * var_L_type_Ca_channel__beta_b + var_L_type_Ca_channel__f_) * var_chaste_interface__L_type_Ca_channel__C_Ca4 + 16.0 * var_chaste_interface__L_type_Ca_channel__C4 * var_L_type_Ca_channel__gamma; // 1 / ms
        const double var_L_type_Ca_channel__i_Ca_L_Ca_max = ((fabs(var_chaste_interface__membrane__V) < 1.3307320976818627e-6) ? (-375733.02761014085 * (-1.3307320976818627e-6 + var_chaste_interface__membrane__V) * (-0.019368999999999997 * (0.001 * exp(9.9999999999999995e-8) - 0.34100000000000003 * NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 6) / (-1.0 + exp(9.9999999999999995e-8)) - 0.019368999999999997 * (0.001 * exp(-9.9999999999999995e-8) - 0.34100000000000003 * NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 6) / (-1.0 + exp(-9.9999999999999995e-8))) + 0.019368999999999997 * (0.001 * exp(9.9999999999999995e-8) - 0.34100000000000003 * NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 6) / (-1.0 + exp(9.9999999999999995e-8))) : (14555.146023561636 * (_lt_0_row[0] - 0.34100000000000003 * NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 6) * var_chaste_interface__membrane__V / (_lt_0_row[1]))); // uA_per_mm2
        const double var_L_type_Ca_channel__i_Ca_L_Ca = (var_chaste_interface__L_type_Ca_channel__O + var_chaste_interface__L_type_Ca_channel__O_Ca) * var_L_type_Ca_channel__i_Ca_L_Ca_max * var_chaste_interface__L_type_Ca_channel_y_gate__y; // uA_per_mm2
        const double d_dt_chaste_interface_var_calcium_subsystem__Ca_SS = (79.615648592999321 * var_calcium_subsystem__J_rel - 17158.544955387784 * var_calcium_subsystem__J_xfer - 52.641294480315629 * var_L_type_Ca_channel__i_Ca_L_Ca) / (1.0 + 0.00011900000000000002 / pow((0.0023800000000000002 + var_chaste_interface__calcium_subsystem__Ca_SS), 2)); // mM / ms
        const double var_L_type_Ca_channel__i_Ca_L_K = ((fabs(var_chaste_interface__membrane__V) < 2.6614641953637258e-6) ? (-187866.5138050704 * (-2.6614641953637258e-6 + var_chaste_interface__membrane__V) * (-9.6845000000000022e-12 * (-var_chaste_interface__ionic_concentrations__Ko + var_chaste_interface__ionic_concentrations__Ki * exp(1.0000000000000001e-7)) * (var_chaste_interface__L_type_Ca_channel__O + var_chaste_interface__L_type_Ca_channel__O_Ca) * var_chaste_interface__L_type_Ca_channel_y_gate__y / ((1.0 - 218.34061135371181 * var_L_type_Ca_channel__i_Ca_L_Ca_max) * (-1.0 + exp(1.0000000000000001e-7))) - 9.6845000000000022e-12 * (-var_chaste_interface__ionic_concentrations__Ko + var_chaste_interface__ionic_concentrations__Ki * exp(-1.0000000000000001e-7)) * (var_chaste_interface__L_type_Ca_channel__O + var_chaste_interface__L_type_Ca_channel__O_Ca) * var_chaste_interface__L_type_Ca_channel_y_gate__y / ((1.0 - 218.34061135371181 * var_L_type_Ca_channel__i_Ca_L_Ca_max) * (-1.0 + exp(-1.0000000000000001e-7)))) + 9.6845000000000022e-12 * (-var_chaste_interface__ionic_concentrations__Ko + var_chaste_interface__ionic_concentrations__Ki * exp(1.0000000000000001e-7)) * (var_chaste_interface__L_type_Ca_channel__O + var_chaste_interface__L_type_Ca_channel__O_Ca) * var_chaste_interface__L_type_Ca_channel_y_gate__y / ((1.0 - 218.34061135371181 * var_L_type_Ca_channel__i_Ca_L_Ca_max) * (-1.0 + exp(1.0000000000000001e-7)))) : (3.6387865058904094e-6 * (-var_chaste_interface__ionic_concentrations__Ko + var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[2]) * (var_chaste_interface__L_type_Ca_channel__O + var_chaste_interface__L_type_Ca_channel__O_Ca) * var_chaste_interface__L_type_Ca_channel_y_gate__y * var_chaste_interface__membrane__V / ((1.0 - 218.34061135371181 * var_L_type_Ca_channel__i_Ca_L_Ca_max) * (_lt_0_row[3])))); // uA_per_mm2
        const double d_dt_chaste_interface_var_L_type_Ca_channel_y_gate__y = (-var_chaste_interface__L_type_Ca_channel_y_gate__y + _lt_0_row[13] + _lt_0_row[14]) / (_lt_0_row[15]); // 1 / ms
        const double var_Na_Ca_exchanger__i_NaCa = (pow(var_chaste_interface__ionic_concentrations__Nai, 3) * NV_Ith_S(mParameters, 4) * _lt_0_row[4] - pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__calcium_subsystem__Cai * _lt_0_row[5]) * NV_Ith_S(mParameters, 12) / ((_lt_0_row[6]) * (669921.875 + pow(NV_Ith_S(mParameters, 5), 3)) * (1.3799999999999999 + NV_Ith_S(mParameters, 4))); // uA_per_mm2
        const double var_calcium_background_current__i_Ca_b = 6.0319999999999998e-5 * var_chaste_interface__membrane__V - 0.00080269760132169958 * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__calcium_subsystem__Cai); // uA_per_mm2
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 9) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // uA_per_mm2
        const double var_fast_sodium_current_h_gate__alpha_h = ((var_chaste_interface__membrane__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 11) - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0)); // per_ms
        const double var_fast_sodium_current_h_gate__beta_h = ((var_chaste_interface__membrane__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V - 0.34999999999999998 * NV_Ith_S(mParameters, 11)) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__V - 0.079000000000000001 * NV_Ith_S(mParameters, 11))) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 11) - 0.0900900900900901 * var_chaste_interface__membrane__V)))); // per_ms
        const double d_dt_chaste_interface_var_fast_sodium_current_h_gate__h = (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h) * (-var_chaste_interface__fast_sodium_current_h_gate__h + 0.01 * NV_Ith_S(mParameters, 10) + (1.0 - 0.01 * NV_Ith_S(mParameters, 10)) * var_fast_sodium_current_h_gate__alpha_h / (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h)); // 1 / ms
        const double var_fast_sodium_current_j_gate__alpha_j = ((var_chaste_interface__membrane__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__membrane__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V - 0.24440000000000001 * NV_Ith_S(mParameters, 11)) - 3.4740000000000003e-5 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 11) - 0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V - 0.311 * NV_Ith_S(mParameters, 11)))) : (0)); // per_ms
        const double var_fast_sodium_current_j_gate__beta_j = ((var_chaste_interface__membrane__V < -40.0) ? (0.1212 * exp(0.01052 * NV_Ith_S(mParameters, 11) - 0.01052 * var_chaste_interface__membrane__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 11) - 0.13780000000000001 * var_chaste_interface__membrane__V))) : (0.29999999999999999 * exp(2.5349999999999999e-7 * NV_Ith_S(mParameters, 11) - 2.5349999999999999e-7 * var_chaste_interface__membrane__V) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 11) - 0.10000000000000001 * var_chaste_interface__membrane__V)))); // per_ms
        const double d_dt_chaste_interface_var_fast_sodium_current_j_gate__j = (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j) * (-var_chaste_interface__fast_sodium_current_j_gate__j + 0.01 * NV_Ith_S(mParameters, 10) + (1.0 - 0.01 * NV_Ith_S(mParameters, 10)) * var_fast_sodium_current_j_gate__alpha_j / (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j)); // 1 / ms
        const double d_dt_chaste_interface_var_fast_sodium_current_m_gate__m = (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m) * _lt_0_row[16] - 0.080000000000000002 * var_chaste_interface__fast_sodium_current_m_gate__m * _lt_0_row[17]; // 1 / ms
        const double var_non_specific_calcium_activated_current__VnsCa = -26.614641953637257 * log((var_chaste_interface__ionic_concentrations__Ko + NV_Ith_S(mParameters, 5)) / (var_chaste_interface__ionic_concentrations__Ki + var_chaste_interface__ionic_concentrations__Nai)) + var_chaste_interface__membrane__V; // mV
        const double var_non_specific_calcium_activated_current__i_ns_K = 6.3678763853082156e-6 * (-0.75 * var_chaste_interface__ionic_concentrations__Ko + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(0.037573302761014088 * var_non_specific_calcium_activated_current__VnsCa)) * var_non_specific_calcium_activated_current__VnsCa / ((1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__calcium_subsystem__Cai, 3)) * (-1.0 + exp(0.037573302761014088 * var_non_specific_calcium_activated_current__VnsCa))); // uA_per_mm2
        const double var_non_specific_calcium_activated_current__i_ns_Na = 6.3678763853082156e-6 * (-0.75 * NV_Ith_S(mParameters, 5) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(0.037573302761014088 * var_non_specific_calcium_activated_current__VnsCa)) * var_non_specific_calcium_activated_current__VnsCa / ((1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__calcium_subsystem__Cai, 3)) * (-1.0 + exp(0.037573302761014088 * var_non_specific_calcium_activated_current__VnsCa))); // uA_per_mm2
        const double var_sarcolemmal_calcium_pump__i_p_Ca = 0.0115 * var_chaste_interface__calcium_subsystem__Cai / (0.00050000000000000001 + var_chaste_interface__calcium_subsystem__Cai); // uA_per_mm2
        const double d_dt_chaste_interface_var_calcium_subsystem__Cai = (-var_calcium_subsystem__J_htrpn - var_calcium_subsystem__J_ltrpn - var_calcium_subsystem__J_up + 0.00613586928462559 * var_Na_Ca_exchanger__i_NaCa - 0.003067934642312795 * var_calcium_background_current__i_Ca_b - 0.003067934642312795 * var_sarcolemmal_calcium_pump__i_p_Ca + var_calcium_subsystem__J_leak + var_calcium_subsystem__J_xfer) / (1.0 + 0.00011900000000000002 / pow((0.0023800000000000002 + var_chaste_interface__calcium_subsystem__Cai), 2)); // mM / ms
        const double var_sodium_background_current__i_Na_b = 1.4100000000000001e-5 * var_chaste_interface__membrane__V - 1.4100000000000001e-5 * var_fast_sodium_current__E_Na; // uA_per_mm2
        const double var_sodium_potassium_pump__i_NaK = 0.012999999999999999 * var_chaste_interface__ionic_concentrations__Ko / ((1.0 + 31.622776601683793 * pow((1 / var_chaste_interface__ionic_concentrations__Nai), 1.5)) * (1.5 + var_chaste_interface__ionic_concentrations__Ko) * (1.0 + _lt_0_row[8] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 5))) * _lt_0_row[7])); // uA_per_mm2
        const double d_dt_chaste_interface_var_ionic_concentrations__Nai = -0.00613586928462559 * (3.0 * var_Na_Ca_exchanger__i_NaCa + 3.0 * var_sodium_potassium_pump__i_NaK + var_fast_sodium_current__i_Na + var_non_specific_calcium_activated_current__i_ns_Na + var_sodium_background_current__i_Na_b) * NV_Ith_S(mParameters, 3); // mM / ms
        const double d_dt_chaste_interface_var_time_dependent_potassium_current_X_gate__X = (1.0 - var_chaste_interface__time_dependent_potassium_current_X_gate__X) * _lt_0_row[18] - _lt_0_row[19] * var_chaste_interface__time_dependent_potassium_current_X_gate__X; // 1 / ms
        const double var_time_dependent_potassium_current__i_K = 0.43033148291193518 * sqrt(var_chaste_interface__ionic_concentrations__Ko) * pow(var_chaste_interface__time_dependent_potassium_current_X_gate__X, 2) * (-26.614641953637257 * log((0.018329999999999999 * NV_Ith_S(mParameters, 5) + var_chaste_interface__ionic_concentrations__Ko) / (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai + var_chaste_interface__ionic_concentrations__Ki)) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 8) / (_lt_0_row[9]); // uA_per_mm2
        const double var_time_independent_potassium_current__E_K1 = 26.614641953637257 * log(var_chaste_interface__ionic_concentrations__Ko / var_chaste_interface__ionic_concentrations__Ki); // mV
        const double var_plateau_potassium_current__i_Kp = 8.2799999999999993e-5 * (-var_time_independent_potassium_current__E_K1 + var_chaste_interface__membrane__V) / (_lt_0_row[10]); // uA_per_mm2
        const double var_time_independent_potassium_current__i_K1 = 0.0032920358442763043 * sqrt(var_chaste_interface__ionic_concentrations__Ko) * (-var_time_independent_potassium_current__E_K1 + var_chaste_interface__membrane__V) / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K1)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K1)) + (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 0.061749999999999999 * var_time_independent_potassium_current__E_K1) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 0.080320000000000003 * var_time_independent_potassium_current__E_K1)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_time_independent_potassium_current__E_K1 - 0.51429999999999998 * var_chaste_interface__membrane__V)))); // uA_per_mm2
        const double d_dt_chaste_interface_var_ionic_concentrations__Ki = -0.00613586928462559 * (-2.0 * var_sodium_potassium_pump__i_NaK + var_L_type_Ca_channel__i_Ca_L_K + var_non_specific_calcium_activated_current__i_ns_K + var_plateau_potassium_current__i_Kp + var_time_dependent_potassium_current__i_K + var_time_independent_potassium_current__i_K1) * NV_Ith_S(mParameters, 3); // mM / ms
        const double d_dt_chaste_interface_var_ionic_concentrations__Ko = 0.00613586928462559 * (-2.0 * var_sodium_potassium_pump__i_NaK + var_L_type_Ca_channel__i_Ca_L_K + var_non_specific_calcium_activated_current__i_ns_K + var_plateau_potassium_current__i_Kp + var_time_dependent_potassium_current__i_K + var_time_independent_potassium_current__i_K1) * NV_Ith_S(mParameters, 3); // mM / ms

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_membrane__V = (-var_L_type_Ca_channel__i_Ca_L_Ca - var_L_type_Ca_channel__i_Ca_L_K - var_Na_Ca_exchanger__i_NaCa - var_calcium_background_current__i_Ca_b - var_fast_sodium_current__i_Na - var_non_specific_calcium_activated_current__i_ns_K - var_non_specific_calcium_activated_current__i_ns_Na - var_plateau_potassium_current__i_Kp - var_sarcolemmal_calcium_pump__i_p_Ca - var_sodium_background_current__i_Na_b - var_sodium_potassium_pump__i_NaK - var_time_dependent_potassium_current__i_K - var_time_independent_potassium_current__i_K1 - 0.0099999999999999985 * GetIntracellularAreaStimulus(var_chaste_interface__environment__time)) / NV_Ith_S(mParameters, 7); // mV / ms
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_membrane__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_calcium_subsystem__Cai;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_fast_sodium_current_m_gate__m;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_fast_sodium_current_h_gate__h;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_fast_sodium_current_j_gate__j;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_L_type_Ca_channel__O;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_L_type_Ca_channel__O_Ca;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_L_type_Ca_channel__C0;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_L_type_Ca_channel__C1;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_L_type_Ca_channel__C2;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_L_type_Ca_channel__C3;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_L_type_Ca_channel__C4;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_L_type_Ca_channel__C_Ca0;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_L_type_Ca_channel__C_Ca1;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_L_type_Ca_channel__C_Ca2;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_L_type_Ca_channel__C_Ca3;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_L_type_Ca_channel__C_Ca4;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_L_type_Ca_channel_y_gate__y;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_time_dependent_potassium_current_X_gate__X;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_calcium_subsystem__Ca_SS;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_calcium_subsystem__P_O1;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_calcium_subsystem__P_O2;
        NV_Ith_S(rDY,22) = d_dt_chaste_interface_var_calcium_subsystem__P_C1;
        NV_Ith_S(rDY,23) = d_dt_chaste_interface_var_calcium_subsystem__P_C2;
        NV_Ith_S(rDY,24) = d_dt_chaste_interface_var_calcium_subsystem__Ca_JSR;
        NV_Ith_S(rDY,25) = d_dt_chaste_interface_var_calcium_subsystem__Ca_NSR;
        NV_Ith_S(rDY,26) = d_dt_chaste_interface_var_calcium_subsystem__HTRPNCa;
        NV_Ith_S(rDY,27) = d_dt_chaste_interface_var_calcium_subsystem__LTRPNCa;
        NV_Ith_S(rDY,28) = d_dt_chaste_interface_var_ionic_concentrations__Nai;
        NV_Ith_S(rDY,29) = d_dt_chaste_interface_var_ionic_concentrations__Ki;
        NV_Ith_S(rDY,30) = d_dt_chaste_interface_var_ionic_concentrations__Ko;
    }

    void Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -84.1638
        double var_chaste_interface__calcium_subsystem__Cai = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 9.94893e-11
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.0328302
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.988354
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.99254
        double var_chaste_interface__L_type_Ca_channel__O = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 9.84546e-21
        double var_chaste_interface__L_type_Ca_channel__O_Ca = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__L_type_Ca_channel__C0 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.997208
        double var_chaste_interface__L_type_Ca_channel__C1 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 6.38897e-05
        double var_chaste_interface__L_type_Ca_channel__C2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 1.535e-09
        double var_chaste_interface__L_type_Ca_channel__C3 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 1.63909e-14
        double var_chaste_interface__L_type_Ca_channel__C4 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 6.56337e-20
        double var_chaste_interface__L_type_Ca_channel__C_Ca0 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.00272826
        double var_chaste_interface__L_type_Ca_channel__C_Ca1 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 6.99215e-07
        double var_chaste_interface__L_type_Ca_channel__C_Ca2 = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 6.71989e-11
        double var_chaste_interface__L_type_Ca_channel__C_Ca3 = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 2.87031e-15
        double var_chaste_interface__L_type_Ca_channel__C_Ca4 = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 4.59752e-20
        double var_chaste_interface__L_type_Ca_channel_y_gate__y = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.998983
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.000928836
        double var_chaste_interface__calcium_subsystem__Ca_SS = NV_Ith_S(rY, 19);
        // Units: mM; Initial value: 0.000136058
        double var_chaste_interface__calcium_subsystem__P_O1 = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.00119168
        double var_chaste_interface__calcium_subsystem__P_O2 = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 6.30613e-09
        double var_chaste_interface__calcium_subsystem__P_C1 = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.762527
        double var_chaste_interface__calcium_subsystem__Ca_JSR = NV_Ith_S(rY, 24);
        // Units: mM; Initial value: 1.17504
        double var_chaste_interface__calcium_subsystem__Ca_NSR = NV_Ith_S(rY, 25);
        // Units: mM; Initial value: 1.243891
        double var_chaste_interface__calcium_subsystem__HTRPNCa = NV_Ith_S(rY, 26);
        // Units: mM; Initial value: 0.13598
        double var_chaste_interface__calcium_subsystem__LTRPNCa = NV_Ith_S(rY, 27);
        // Units: mM; Initial value: 0.00635
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 28);
        // Units: mM; Initial value: 10.2042
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 29);
        // Units: mM; Initial value: 143.727
        double var_chaste_interface__ionic_concentrations__Ko = NV_Ith_S(rY, 30);
        // Units: mM; Initial value: 5.4
        
        // Lookup table indexing
        const bool _oob_0 = Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
const double var_x0 = 1 / NV_Ith_S(mParameters, 7);
        const double var_x1 = 0.5 - 187866.5138050704 * var_chaste_interface__membrane__V;
        const double var_x2 = var_chaste_interface__L_type_Ca_channel__O + var_chaste_interface__L_type_Ca_channel__O_Ca;
        const double var_x3 = exp(1.0000000000000001e-7);
        const double var_x4 = 1 / (-1.0 + var_x3);
        const double var_x5 = -var_chaste_interface__ionic_concentrations__Ko;
        const double var_x6 = var_x4 * (var_x5 + var_x3 * var_chaste_interface__ionic_concentrations__Ki);
        const double var_x7 = var_x2 * var_x6;
        const double var_x8 = 0.019368999999999997 * NV_Ith_S(mParameters, 6);
        const double var_x9 = exp(9.9999999999999995e-8);
        const double var_x10 = -0.34100000000000003 * NV_Ith_S(mParameters, 4);
        const double var_x11 = (var_x10 + 0.001 * var_x9) / (-1.0 + var_x9);
        const double var_x12 = var_x11 * var_x8;
        const double var_x13 = exp(-9.9999999999999995e-8);
        const double var_x14 = (var_x10 + 0.001 * var_x13) / (-1.0 + var_x13);
        const double var_x15 = fabs(var_chaste_interface__membrane__V);
        const double var_x16 = var_x15 < 1.3307320976818627e-6;
        const double var_x17 = exp(0.075146605522028176 * var_chaste_interface__membrane__V);
        const double var_x18 = var_x10 + 0.001 * var_x17;
        const double var_x19 = -1.0 + var_x17;
        const double var_x20 = NV_Ith_S(mParameters, 6) / var_x19;
        const double var_x21 = 14555.146023561636 * var_x18 * var_x20;
        const double var_x22 = ((var_x16) ? (var_x12 - 375733.02761014085 * (-1.3307320976818627e-6 + var_chaste_interface__membrane__V) * (-var_x12 - var_x14 * var_x8)) : (var_x21 * var_chaste_interface__membrane__V));
        const double var_x23 = 7277.573011780818 * NV_Ith_S(mParameters, 6);
        const double var_x24 = var_x17 * var_chaste_interface__membrane__V;
        const double var_x25 = ((var_x16) ? (var_x11 * var_x23 + var_x14 * var_x23) : (var_x21 + 1.0937698165481033 * var_x20 * var_x24 - 1093.7698165481033 * var_x18 * var_x24 * NV_Ith_S(mParameters, 6) / pow(var_x19, 2))) * var_chaste_interface__L_type_Ca_channel_y_gate__y;
        const double var_x26 = var_x25 / pow((0.0045799999999999999 - var_x22), 2);
        const double var_x27 = 4.4355010000000008e-14 * var_x26;
        const double var_x28 = var_x27 * var_x7;
        const double var_x29 = exp(-1.0000000000000001e-7);
        const double var_x30 = 1 / (-1.0 + var_x29);
        const double var_x31 = var_x30 * (var_x5 + var_x29 * var_chaste_interface__ionic_concentrations__Ki);
        const double var_x32 = var_x2 * var_x31;
        const double var_x33 = 1 / (1.0 - 218.34061135371181 * var_x22);
        const double var_x34 = var_x33 * var_chaste_interface__L_type_Ca_channel_y_gate__y;
        const double var_x35 = 1.8193932529452047e-6 * var_x34;
        const double var_x36 = var_x15 < 2.6614641953637258e-6;
        const double var_x37 = 0.037573302761014088 * var_chaste_interface__membrane__V;
        const double var_x38 = exp(var_x37);
        const double var_x39 = -1.0 + var_x38;
        const double var_x40 = 1 / var_x39;
        const double var_x41 = var_x38 * var_chaste_interface__ionic_concentrations__Ki;
        const double var_x42 = var_x41 + var_x5;
        const double var_x43 = var_x2 * var_x40 * var_x42;
        const double var_x44 = 3.6387865058904094e-6 * var_x34;
        const double var_x45 = var_x43 * var_chaste_interface__membrane__V;
        const double var_x46 = var_x40 * var_chaste_interface__membrane__V;
        const double var_x47 = 1.3672122706851292e-7 * var_x2 * var_x34;
        const double var_x48 = ((var_x36) ? (var_x28 + var_x1 * (-var_x28 - var_x27 * var_x32) + var_x32 * var_x35 + var_x35 * var_x7) : (var_x43 * var_x44 + 1.6665642196978075e-8 * var_x26 * var_x45 + var_x41 * var_x46 * var_x47 - var_x38 * var_x42 * var_x47 * var_chaste_interface__membrane__V / pow(var_x39, 2)));
        const double var_x49 = exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__V);
        const double var_x50 = 1.0 + var_x49;
        const double var_x51 = 1 / var_x50;
        const double var_x52 = -var_chaste_interface__L_type_Ca_channel__O - var_chaste_interface__L_type_Ca_channel__O_Ca;
        const double var_x53 = 1 / (var_chaste_interface__ionic_concentrations__Ki + var_chaste_interface__ionic_concentrations__Nai);
        const double var_x54 = var_chaste_interface__ionic_concentrations__Ko + NV_Ith_S(mParameters, 5);
        const double var_x55 = log(var_x53 * var_x54);
        const double var_x56 = exp(var_x37 - var_x55);
        const double var_x57 = 0.75 * var_x56;
        const double var_x58 = var_x57 * var_chaste_interface__ionic_concentrations__Ki;
        const double var_x59 = var_x58 - 0.75 * var_chaste_interface__ionic_concentrations__Ko;
        const double var_x60 = pow(var_chaste_interface__calcium_subsystem__Cai, 3);
        const double var_x61 = 1.0 + 1.7279999999999996e-9 / var_x60;
        const double var_x62 = 1 / var_x61;
        const double var_x63 = -1.0 + var_x56;
        const double var_x64 = 1 / var_x63;
        const double var_x65 = var_x62 * var_x64;
        const double var_x66 = 6.3678763853082156e-6 * var_x65;
        const double var_x67 = var_x57 * var_chaste_interface__ionic_concentrations__Nai;
        const double var_x68 = var_x67 - 0.75 * NV_Ith_S(mParameters, 5);
        const double var_x69 = sqrt(var_chaste_interface__ionic_concentrations__Ko);
        const double var_x70 = 1 / var_chaste_interface__ionic_concentrations__Ki;
        const double var_x71 = log(var_x70 * var_chaste_interface__ionic_concentrations__Ko);
        const double var_x72 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 6.3475921059424856 * var_x71);
        const double var_x73 = 1.0 + var_x72;
        const double var_x74 = 1 / var_x73;
        const double var_x75 = exp(-2.4444678999999998 + 13.687910356755641 * var_x71 - 0.51429999999999998 * var_chaste_interface__membrane__V);
        const double var_x76 = 1.0 + var_x75;
        const double var_x77 = 1 / var_x76;
        const double var_x78 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 1.6434541406371006 * var_x71);
        const double var_x79 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 2.1376880417161446 * var_x71);
        const double var_x80 = var_x78 + 0.49124000000000001 * var_x79;
        const double var_x81 = var_x77 * var_x80;
        const double var_x82 = 1 / (var_x81 + 1.02 * var_x74);
        const double var_x83 = var_x74 * var_x82;
        const double var_x84 = var_x69 * var_x83;
        const double var_x85 = -26.614641953637257 * var_x71 + var_chaste_interface__membrane__V;
        const double var_x86 = var_x49 * var_x85 / pow(var_x50, 2);
        const double var_x87 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3);
        const double var_x88 = var_x87 * NV_Ith_S(mParameters, 9) * var_chaste_interface__fast_sodium_current_j_gate__j;
        const double var_x89 = var_x88 * var_chaste_interface__fast_sodium_current_h_gate__h;
        const double var_x90 = exp(-1.7526479750778814 + 0.031152647975077882 * var_chaste_interface__membrane__V);
        const double var_x91 = 1.0 + var_x90;
        const double var_x92 = 1 / var_x91;
        const double var_x93 = pow(var_chaste_interface__time_dependent_potassium_current_X_gate__X, 2);
        const double var_x94 = var_x92 * var_x93 * NV_Ith_S(mParameters, 8);
        const double var_x95 = var_x69 * var_x94;
        const double var_x96 = -26.614641953637257 * var_x55 + var_chaste_interface__membrane__V;
        const double var_x97 = var_x56 * var_x96;
        const double var_x98 = var_x62 * var_x97 / pow(var_x63, 2);
        const double var_x99 = 2.3926214736989759e-7 * var_x98;
        const double var_x100 = var_x69 * var_x85;
        const double var_x101 = var_x72 / pow(var_x73, 2);
        const double var_x102 = var_x101 * var_x82;
        const double var_x103 = var_x100 * var_x102;
        const double var_x104 = _lt_0_row[5];
        const double var_x105 = pow(NV_Ith_S(mParameters, 5), 3);
        const double var_x106 = var_x104 * var_x105;
        const double var_x107 = var_x106 * var_chaste_interface__calcium_subsystem__Cai;
        const double var_x108 = NV_Ith_S(mParameters, 4) * _lt_0_row[4];
        const double var_x109 = var_x108 * pow(var_chaste_interface__ionic_concentrations__Nai, 3);
        const double var_x110 = 1.0 + 0.10000000000000001 * var_x104;
        const double var_x111 = NV_Ith_S(mParameters, 12) / ((669921.875 + var_x105) * (1.3799999999999999 + NV_Ith_S(mParameters, 4)));
        const double var_x112 = var_x111 / var_x110;
        const double var_x113 = var_x112 * (0.024422646794659157 * var_x107 + 0.013150655966354929 * var_x109);
        const double var_x114 = 1 / var_chaste_interface__ionic_concentrations__Nai;
        const double var_x115 = pow(var_x114, 1.5);
        const double var_x116 = 1 / (1.0 + 31.622776601683793 * var_x115);
        const double var_x117 = exp(-0.0037573302761014088 * var_chaste_interface__membrane__V);
        const double var_x118 = exp(0.01485884101040119 * NV_Ith_S(mParameters, 5));
        const double var_x119 = exp(-var_x37);
        const double var_x120 = 1.0 + 0.1245 * var_x117 + 0.036499999999999998 * var_x119 * (-0.14285714285714285 + 0.14285714285714285 * var_x118);
        const double var_x121 = 1 / (1.5 + var_chaste_interface__ionic_concentrations__Ko);
        const double var_x122 = var_x121 * var_chaste_interface__ionic_concentrations__Ko;
        const double var_x123 = var_x116 * var_x122 * (0.00046778761937462537 * var_x117 + 0.037573302761014088 * var_x119 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x118)) / pow(var_x120, 2);
        const double var_x124 = var_x75 * var_x80 / pow(var_x76, 2);
        const double var_x125 = 0.24326999999999999 * var_x101 - 0.51429999999999998 * var_x124 - var_x77 * (0.061749999999999999 * var_x78 + 0.039456396800000001 * var_x79);
        const double var_x126 = var_x100 * var_x74 / pow((var_x74 + 0.98039215686274506 * var_x81), 2);
        const double var_x127 = 0.0031642020802348176 * var_x126;
        const double var_x128 = var_x65 * var_x97;
        const double var_x129 = 1.7944661052742319e-7 * var_x128;
        const double var_x130 = 1 / (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai + var_chaste_interface__ionic_concentrations__Ki);
        const double var_x131 = 0.018329999999999999 * NV_Ith_S(mParameters, 5) + var_chaste_interface__ionic_concentrations__Ko;
        const double var_x132 = -26.614641953637257 * log(var_x130 * var_x131) + var_chaste_interface__membrane__V;
        const double var_x133 = var_x132 * var_x69 * NV_Ith_S(mParameters, 8);
        const double var_x134 = var_x133 * var_x90 * var_x93 / pow(var_x91, 2);
        const double var_x135 = var_x109 - var_x107;
        const double var_x136 = var_x104 * var_x111 * var_x135 / pow(var_x110, 2);
        const double var_x137 = 0.00050000000000000001 + var_chaste_interface__calcium_subsystem__Cai;
        const double var_x138 = 1 / var_x137;
        const double var_x139 = 1 / var_chaste_interface__calcium_subsystem__Cai;
        const double var_x140 = var_chaste_interface__calcium_subsystem__Cai / pow(var_x137, 2);
        const double var_x141 = var_x64 * var_x96 / (pow(var_x61, 2) * pow(var_chaste_interface__calcium_subsystem__Cai, 4));
        const double var_x142 = 3.301107118143778e-14 * var_x141;
        const double var_x143 = var_x106 * var_x112;
        const double var_x144 = -26.614641953637257 * log(var_x114 * NV_Ith_S(mParameters, 5)) + var_chaste_interface__membrane__V;
        const double var_x145 = var_x0 * var_x144;
        const double var_x146 = NV_Ith_S(mParameters, 9) * var_chaste_interface__fast_sodium_current_h_gate__h;
        const double var_x147 = var_x146 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2) * var_chaste_interface__fast_sodium_current_j_gate__j;
        const double var_x148 = var_x146 * var_x87;
        const double var_x149 = 9.6845000000000022e-12 * var_x33;
        const double var_x150 = var_x149 * var_chaste_interface__L_type_Ca_channel_y_gate__y;
        const double var_x151 = var_x150 * var_x6;
        const double var_x152 = var_x44 * var_x46;
        const double var_x153 = ((var_x36) ? (var_x151 + var_x1 * (-var_x151 - var_x150 * var_x31)) : (var_x152 * var_x42));
        const double var_x154 = var_x22 * var_chaste_interface__L_type_Ca_channel_y_gate__y;
        const double var_x155 = var_x0 * (-var_x153 - var_x154);
        const double var_x156 = var_x149 * var_x2;
        const double var_x157 = var_x156 * var_x6;
        const double var_x158 = ((var_x36) ? (var_x157 + var_x1 * (-var_x157 - var_x156 * var_x31)) : (3.6387865058904094e-6 * var_x33 * var_x45));
        const double var_x159 = var_x133 * var_x92 * var_chaste_interface__time_dependent_potassium_current_X_gate__X;
        const double var_x160 = var_x57 + var_x53 * var_x67;
        const double var_x161 = var_x66 * var_x96;
        const double var_x162 = var_x130 * var_x95;
        const double var_x163 = var_x114 * var_x89;
        const double var_x164 = 4.7759072889811619e-6 * var_x128;
        const double var_x165 = var_x164 * var_x53;
        const double var_x166 = 1 / var_x120;
        const double var_x167 = var_x114 * var_x115 * var_x122 * var_x166 / pow((0.031622776601683791 + var_x115), 2);
        const double var_x168 = var_x108 * var_x112 * pow(var_chaste_interface__ionic_concentrations__Nai, 2);
        const double var_x169 = 0.00016947874999999999 * var_x65;
        const double var_x170 = var_x53 * var_x59;
        const double var_x171 = var_x169 * var_x68;
        const double var_x172 = 6.3678763853082156e-6 * var_x98;
        const double var_x173 = var_x53 * var_x68;
        const double var_x174 = var_x170 * var_x172 + var_x172 * var_x173 - var_x169 * var_x170 - var_x171 * var_x53;
        const double var_x175 = var_x150 * var_x2;
        const double var_x176 = var_x175 * var_x4;
        const double var_x177 = var_x176 * var_x3;
        const double var_x178 = var_x175 * var_x30;
        const double var_x179 = var_x152 * var_x2;
        const double var_x180 = ((var_x36) ? (var_x177 + var_x1 * (-var_x177 - var_x178 * var_x29)) : (var_x179 * var_x38));
        const double var_x181 = 0.0022036923537611646 * var_x51;
        const double var_x182 = var_x70 * var_x84;
        const double var_x183 = var_x57 + var_x53 * var_x58;
        const double var_x184 = 1.0501178736126389 * var_x79;
        const double var_x185 = 1.6434541406371006 * var_x78;
        const double var_x186 = 6.4745439480613349 * var_x101;
        const double var_x187 = 13.687910356755641 * var_x124;
        const double var_x188 = var_x186 * var_x70 - var_x187 * var_x70 - var_x77 * (var_x184 * var_x70 + var_x185 * var_x70);
        const double var_x189 = var_x103 * var_x70;
        const double var_x190 = ((var_x36) ? (-var_x176 + var_x1 * (var_x176 + var_x178)) : (-var_x179));
        const double var_x191 = 1 / var_chaste_interface__ionic_concentrations__Ko;
        const double var_x192 = 1 / var_x69;
        const double var_x193 = var_x192 * var_x83;
        const double var_x194 = var_x116 * var_x166;
        const double var_x195 = var_x121 * var_x194;
        const double var_x196 = var_x194 * var_chaste_interface__ionic_concentrations__Ko / pow((1 + 0.66666666666666663 * var_chaste_interface__ionic_concentrations__Ko), 2);
        const double var_x197 = 1 / var_x54;
        const double var_x198 = var_x197 * var_x59;
        const double var_x199 = -0.75 - var_x197 * var_x58;
        const double var_x200 = var_x193 * var_x85;
        const double var_x201 = var_x95 / var_x131;
        const double var_x202 = var_x132 * var_x192 * var_x94;
        const double var_x203 = var_x187 * var_x191 - var_x186 * var_x191 - var_x77 * (-var_x184 * var_x191 - var_x185 * var_x191);
        const double var_x204 = var_x102 * var_x192 * var_x85;
        const double var_x205 = var_x197 * var_chaste_interface__ionic_concentrations__Nai;
        const double var_x206 = var_x197 * var_x68;
        const double var_x207 = 0.0023800000000000002 + var_chaste_interface__calcium_subsystem__Cai;
        const double var_x208 = 1.0 + 0.00011900000000000002 / pow(var_x207, 2);
        const double var_x209 = 1 / var_x208;
        const double var_x210 = var_x209;
        const double var_x211 = 20.0 * var_chaste_interface__calcium_subsystem__HTRPNCa;
        const double var_x212 = 40.0 * var_chaste_interface__calcium_subsystem__LTRPNCa;
        const double var_x213 = 3.5281248386597142e-5 * var_x138;
        const double var_x214 = pow(var_chaste_interface__calcium_subsystem__Cai, 2);
        const double var_x215 = 2.4999999999999999e-7 + var_x214;
        const double var_x216 = NV_Ith_S(mParameters, 2) / var_x215;
        const double var_x217 = var_x216 * var_chaste_interface__calcium_subsystem__Cai;
        const double var_x218 = var_x60 * NV_Ith_S(mParameters, 2) / pow(var_x215, 2);
        const double var_x219 = 0.00613586928462559 * var_x112;
        const double var_x220 = 20.0 * var_chaste_interface__calcium_subsystem__Cai;
        const double var_x221 = 40.0 * var_chaste_interface__calcium_subsystem__Cai;
        const double var_x222 = 1.0 - var_chaste_interface__fast_sodium_current_m_gate__m;
        const double var_x223 = 1 / (1.0 - exp(-9.9999999747524276e-8));
        const double var_x224 = 1 / (1.0 - exp(1.0000000045806701e-7));
        const double var_x225 = _lt_0_row[17];
        const double var_x226 = 0.0072727272727272727 * var_x225 * var_chaste_interface__fast_sodium_current_m_gate__m;
        const double var_x227 = 47.130000000000003 + var_chaste_interface__membrane__V;
        const double var_x228 = fabs(var_x227) < 1.0000000010279564e-6;
        const double var_x229 = -0.10000000000000001 * var_chaste_interface__membrane__V;
        const double var_x230 = exp(-4.7130000000000001 + var_x229);
        const double var_x231 = 1.0 - var_x230;
        const double var_x232 = 0.32000000000000001 / var_x231;
        const double var_x233 = 3.2000000146581445e-7 * var_x224;
        const double var_x234 = -0.080000000000000002 * var_x225;
        const double var_x235 = exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 11) - 0.14705882352941177 * var_chaste_interface__membrane__V);
        const double var_x236 = var_chaste_interface__membrane__V < -40.0;
        const double var_x237 = ((var_x236) ? (0.13500000000000001 * var_x235) : (0));
        const double var_x238 = var_x237;
        const double var_x239 = exp(0.34999999999999998 * var_chaste_interface__membrane__V - 0.34999999999999998 * NV_Ith_S(mParameters, 11));
        const double var_x240 = exp(0.079000000000000001 * var_chaste_interface__membrane__V - 0.079000000000000001 * NV_Ith_S(mParameters, 11));
        const double var_x241 = exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 11) - 0.0900900900900901 * var_chaste_interface__membrane__V);
        const double var_x242 = 1.0 + var_x241;
        const double var_x243 = ((var_x236) ? (310000.0 * var_x239 + 3.5600000000000001 * var_x240) : (7.6923076923076916 / var_x242));
        const double var_x244 = var_x243;
        const double var_x245 = ((var_x236) ? (-0.019852941176470591 * var_x235) : (0));
        const double var_x246 = var_x237 + var_x243;
        const double var_x247 = 0.01 * NV_Ith_S(mParameters, 10);
        const double var_x248 = 1.0 - var_x247;
        const double var_x249 = var_x248 / var_x246;
        const double var_x250 = ((var_x236) ? (0.28123999999999999 * var_x240 + 108500.0 * var_x239) : (0.693000693000693 * var_x241 / pow(var_x242, 2)));
        const double var_x251 = exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 11) - 0.13780000000000001 * var_chaste_interface__membrane__V);
        const double var_x252 = 1.0 + var_x251;
        const double var_x253 = exp(0.01052 * NV_Ith_S(mParameters, 11) - 0.01052 * var_chaste_interface__membrane__V);
        const double var_x254 = var_x253 / var_x252;
        const double var_x255 = exp(-3.2000000000000002 + var_x229 + 0.10000000000000001 * NV_Ith_S(mParameters, 11));
        const double var_x256 = 1.0 + var_x255;
        const double var_x257 = exp(2.5349999999999999e-7 * NV_Ith_S(mParameters, 11) - 2.5349999999999999e-7 * var_chaste_interface__membrane__V);
        const double var_x258 = var_x257 / var_x256;
        const double var_x259 = ((var_x236) ? (0.1212 * var_x254) : (0.29999999999999999 * var_x258));
        const double var_x260 = var_x259;
        const double var_x261 = 37.780000000000001 + var_chaste_interface__membrane__V;
        const double var_x262 = exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V - 0.311 * NV_Ith_S(mParameters, 11));
        const double var_x263 = 1.0 + var_x262;
        const double var_x264 = 1 / var_x263;
        const double var_x265 = exp(0.24440000000000001 * var_chaste_interface__membrane__V - 0.24440000000000001 * NV_Ith_S(mParameters, 11));
        const double var_x266 = exp(0.043909999999999998 * NV_Ith_S(mParameters, 11) - 0.043909999999999998 * var_chaste_interface__membrane__V);
        const double var_x267 = -127140.0 * var_x265 - 3.4740000000000003e-5 * var_x266;
        const double var_x268 = var_x264 * var_x267;
        const double var_x269 = ((var_x236) ? (var_x261 * var_x268) : (0));
        const double var_x270 = var_x269;
        const double var_x271 = ((var_x236) ? (var_x268 + var_x261 * var_x264 * (1.5254334000000001e-6 * var_x266 - 31073.016 * var_x265) - 0.311 * var_x261 * var_x262 * var_x267 / pow(var_x263, 2)) : (0));
        const double var_x272 = var_x259 + var_x269;
        const double var_x273 = var_x248 / var_x272;
        const double var_x274 = ((var_x236) ? (-0.001275024 * var_x254 + 0.016701360000000002 * var_x251 * var_x253 / pow(var_x252, 2)) : (-7.6049999999999996e-8 * var_x258 + 0.029999999999999999 * var_x255 * var_x257 / pow(var_x256, 2)));
        const double var_x275 = exp(1.2 + 0.10000000000000001 * var_chaste_interface__membrane__V);
        const double var_x276 = 0.16 * var_x275;
        const double var_x277 = var_x276 * var_chaste_interface__L_type_Ca_channel__C0;
        const double var_x278 = exp(-0.92307692307692313 - 0.076923076923076927 * var_chaste_interface__membrane__V);
        const double var_x279 = 0.0038461538461538464 * var_x278;
        const double var_x280 = 0.1875 * var_chaste_interface__calcium_subsystem__Ca_SS;
        const double var_x281 = 1.6000000000000001 * var_x275;
        const double var_x282 = -var_x281;
        const double var_x283 = 0.050000000000000003 * var_x278;
        const double var_x284 = 0.12000000000000001 * var_x275;
        const double var_x285 = 0.0076923076923076927 * var_x278;
        const double var_x286 = 0.375 * var_chaste_interface__calcium_subsystem__Ca_SS;
        const double var_x287 = -var_x283;
        const double var_x288 = 1.2000000000000002 * var_x275;
        const double var_x289 = 0.10000000000000001 * var_x278;
        const double var_x290 = 0.375 * var_chaste_interface__L_type_Ca_channel__C1;
        const double var_x291 = 0.080000000000000002 * var_x275;
        const double var_x292 = -var_x291;
        const double var_x293 = 0.011538461538461539 * var_x278;
        const double var_x294 = 0.75 * var_chaste_interface__calcium_subsystem__Ca_SS;
        const double var_x295 = -var_x289;
        const double var_x296 = 0.80000000000000004 * var_x275;
        const double var_x297 = -var_x296;
        const double var_x298 = 0.15000000000000002 * var_x278;
        const double var_x299 = 0.75 * var_chaste_interface__L_type_Ca_channel__C2;
        const double var_x300 = 0.040000000000000001 * var_x275;
        const double var_x301 = 0.015384615384615385 * var_x278 * var_chaste_interface__L_type_Ca_channel__C4;
        const double var_x302 = 1.5 * var_chaste_interface__calcium_subsystem__Ca_SS;
        const double var_x303 = 0.40000000000000002 * var_x275;
        const double var_x304 = 0.20000000000000001 * var_x278;
        const double var_x305 = 1.5 * var_chaste_interface__L_type_Ca_channel__C3;
        const double var_x306 = 3.0 * var_chaste_interface__calcium_subsystem__Ca_SS;
        const double var_x307 = 3.0 * var_chaste_interface__L_type_Ca_channel__C4;
        const double var_x308 = 0.32000000000000001 * var_x275 * var_chaste_interface__L_type_Ca_channel__C_Ca0;
        const double var_x309 = 0.0019230769230769232 * var_x278;
        const double var_x310 = 3.2000000000000002 * var_x275;
        const double var_x311 = 0.025000000000000001 * var_x278;
        const double var_x312 = 0.24000000000000002 * var_x275;
        const double var_x313 = 2.4000000000000004 * var_x275;
        const double var_x314 = 0.0057692307692307696 * var_x278;
        const double var_x315 = 0.075000000000000011 * var_x278;
        const double var_x316 = var_x285 * var_chaste_interface__L_type_Ca_channel__C_Ca4;
        const double var_x317 = exp(3.1578947368421053 + 0.10526315789473684 * var_chaste_interface__membrane__V);
        const double var_x318 = 1.0 + var_x317;
        const double var_x319 = 1 / var_x318;
        const double var_x320 = 1 / (20.0 + 600.0 * var_x319);
        const double var_x321 = exp(3.5 - 0.16666666666666666 * var_chaste_interface__membrane__V);
        const double var_x322 = 1.0 + var_x321;
        const double var_x323 = exp(7.333333333333333 + 0.13333333333333333 * var_chaste_interface__membrane__V);
        const double var_x324 = 1.0 + var_x323;
        const double var_x325 = 1.0 - var_chaste_interface__time_dependent_potassium_current_X_gate__X;
        const double var_x326 = 1 / (1.0 - exp(9.9999999960687092e-8));
        const double var_x327 = 1 / (1.0 - exp(-9.9999999960687092e-8));
        const double var_x328 = 1 / (-1.0 + exp(9.9999999925515227e-8));
        const double var_x329 = 1 / (-1.0 + exp(-9.9999999925515227e-8));
        const double var_x330 = (-6.5500000000000006e-5 * var_x328 - 6.5500000000000006e-5 * var_x329) * var_chaste_interface__time_dependent_potassium_current_X_gate__X;
        const double var_x331 = 30.0 + var_chaste_interface__membrane__V;
        const double var_x332 = fabs(var_x331);
        const double var_x333 = var_x332 < 6.7567567541004792e-7;
        const double var_x334 = exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__membrane__V);
        const double var_x335 = 1.0 - var_x334;
        const double var_x336 = 7.1899999999999999e-5 / var_x335;
        const double var_x337 = var_x325 * var_x336 - 1.0641199999999999e-5 * var_x325 * var_x331 * var_x334 / pow(var_x335, 2);
        const double var_x338 = var_x332 < 1.4556040746072085e-6;
        const double var_x339 = exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__membrane__V);
        const double var_x340 = -1.0 + var_x339;
        const double var_x341 = 0.00013100000000000001 / var_x340;
        const double var_x342 = 4.8581081061982445e-11 * var_x326;
        const double var_x343 = -1.9068413377354434e-10 * var_x328;
        const double var_x344 = var_x343 + 343500.00025585521 * (29.999998544395925 + var_chaste_interface__membrane__V) * (var_x343 - 1.9068413377354434e-10 * var_x329);
        const double var_x345 = -var_x331 * var_x336;
        const double var_x346 = 0.0023800000000000002 + var_chaste_interface__calcium_subsystem__Ca_SS;
        const double var_x347 = 1.0 + 0.00011900000000000002 / pow(var_x346, 2);
        const double var_x348 = 1 / var_x347;
        const double var_x349 = var_x348;
        const double var_x350 = var_x349 * (-52.641294480315629 * var_chaste_interface__L_type_Ca_channel__O - 52.641294480315629 * var_chaste_interface__L_type_Ca_channel__O_Ca);
        const double var_x351 = 52.641294480315629 * var_x154;
        const double var_x352 = -var_x348 * var_x351;
        const double var_x353 = 79.615648592999321 * var_chaste_interface__calcium_subsystem__P_O1;
        const double var_x354 = 79.615648592999321 * var_chaste_interface__calcium_subsystem__P_O2;
        const double var_x355 = (var_chaste_interface__calcium_subsystem__P_O1 + var_chaste_interface__calcium_subsystem__P_O2) * NV_Ith_S(mParameters, 1);
        const double var_x356 = var_x355 * (-var_chaste_interface__calcium_subsystem__Ca_SS + var_chaste_interface__calcium_subsystem__Ca_JSR);
        const double var_x357 = var_x349 * NV_Ith_S(mParameters, 1);
        const double var_x358 = var_x357 * (79.615648592999321 * var_chaste_interface__calcium_subsystem__Ca_JSR - 79.615648592999321 * var_chaste_interface__calcium_subsystem__Ca_SS);
        const double var_x359 = pow(var_chaste_interface__calcium_subsystem__Ca_SS, 3.0);
        const double var_x360 = 48600000000.0 * var_x359 * var_chaste_interface__calcium_subsystem__P_C1;
        const double var_x361 = 121500000.0 * pow(var_chaste_interface__calcium_subsystem__Ca_SS, 2.0) * var_chaste_interface__calcium_subsystem__P_O1;
        const double var_x362 = 40500000.0 * var_x359;
        const double var_x363 = 12150000000.0 * pow(var_chaste_interface__calcium_subsystem__Ca_SS, 4.0);
        const double var_x364 = 0.80000000000000004 + var_chaste_interface__calcium_subsystem__Ca_JSR;
        const double var_x365 = pow(var_x364, (-2));
        const double var_x366 = 1 / (1.0 + 12.0 * var_x365);
        const double var_x367 = var_x366;
        const double var_x368 = var_x367 * (-var_chaste_interface__calcium_subsystem__Ca_JSR + var_chaste_interface__calcium_subsystem__Ca_SS) * NV_Ith_S(mParameters, 1);
        const double var_x369 = 12.345679012345679 * NV_Ith_S(mParameters, 0);
        const double var_x370 = 3.9072457120905308e-8 * var_x65;
        const double var_x371 = 1.4680812610205159e-9 * var_x98;
        const double var_x372 = 1.101060945765387e-9 * var_x128;
        const double var_x373 = 2.0255161771477306e-16 * var_x141;
        const double var_x374 = 0.00613586928462559 * NV_Ith_S(mParameters, 3);
        const double var_x375 = var_x144 * var_x374;
        const double var_x376 = var_x370 * var_x96;
        const double var_x377 = 1.0398994565217392e-6 * var_x65;
        const double var_x378 = 3.9072457120905308e-8 * var_x98;
        const double var_x379 = var_x173 * var_x378 - var_x173 * var_x377;
        const double var_x380 = 2.9304342840678981e-8 * var_x128;
        const double var_x381 = var_x380 * var_x53;
        const double var_x382 = 5.0804997676699878e-7 * var_x51;
        const double var_x383 = 0.00613586928462559 * var_x48;
        const double var_x384 = 2.0199501620781446e-5 * var_x84;
        const double var_x385 = 8.4958190094815849e-8 * var_x86;
        const double var_x386 = var_x370 * var_x59;
        const double var_x387 = 0.0026404577282067251 * var_x95;
        const double var_x388 = 0.00015953260140026533 * var_x123;
        const double var_x389 = var_x371 * var_x59;
        const double var_x390 = 4.8175811365563749e-6 * var_x103;
        const double var_x391 = var_x372 * var_chaste_interface__ionic_concentrations__Ki;
        const double var_x392 = 1.9415130354461213e-5 * var_x126;
        const double var_x393 = var_x125 * var_x392;
        const double var_x394 = 8.2257250099897967e-5 * var_x134;
        const double var_x395 = var_x373 * var_x59 * NV_Ith_S(mParameters, 3);
        const double var_x396 = var_x153 * var_x374;
        const double var_x397 = -var_x396;
        const double var_x398 = var_x158 * var_x374;
        const double var_x399 = 0.0052809154564134502 * var_x159 * NV_Ith_S(mParameters, 3);
        const double var_x400 = 0.0012881377627587346 * var_x162;
        const double var_x401 = 7.5672957221490862e-6 * var_x167;
        const double var_x402 = var_x381 * var_chaste_interface__ionic_concentrations__Ki;
        const double var_x403 = var_x170 * var_x377;
        const double var_x404 = var_x170 * var_x378;
        const double var_x405 = var_x404 - var_x403;
        const double var_x406 = 0.00613586928462559 * var_x180;
        const double var_x407 = 1.3521568226207399e-5 * var_x51;
        const double var_x408 = var_x407 * var_x70;
        const double var_x409 = 0.0005376025032790136 * var_x182;
        const double var_x410 = var_x183 * var_x376;
        const double var_x411 = var_x188 * var_x392;
        const double var_x412 = 0.070274837029936421 * var_x162;
        const double var_x413 = 0.00012821819703204474 * var_x189;
        const double var_x414 = 0.00613586928462559 * var_x190;
        const double var_x415 = var_x191 * var_x407;
        const double var_x416 = 0.0005376025032790136 * var_x193;
        const double var_x417 = 0.00015953260140026533 * var_x195;
        const double var_x418 = var_x198 * var_x377;
        const double var_x419 = 1.0099750810390723e-5 * var_x200;
        const double var_x420 = var_x199 * var_x376;
        const double var_x421 = 7.090337840011793e-5 * var_x196;
        const double var_x422 = 0.070274837029936421 * var_x201;
        const double var_x423 = 0.00012821819703204474 * var_x204;
        const double var_x424 = var_x203 * var_x392;
        const double var_x425 = 0.0013202288641033625 * var_x202;
        const double var_x426 = var_x198 * var_x378;
        const double var_x427 = var_x403 - var_x404;
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (var_x0 * (-7.4419999999999996e-5 - var_x48 - var_x89 + 0.00078515054885989848 * var_x103 + 0.01340596519974876 * var_x134 - var_x113 - 8.2799999999999993e-5 * var_x51 - 0.012999999999999999 * var_x123 - 0.43033148291193518 * var_x95 - 0.0024422646794659158 * var_x136 - 0.0032920358442763043 * var_x84 - 1.3846153846153843e-5 * var_x86 + var_x25 * var_x52 + var_x59 * var_x99 + var_x68 * var_x99 - var_x125 * var_x127 - var_x129 * var_chaste_interface__ionic_concentrations__Ki - var_x129 * var_chaste_interface__ionic_concentrations__Nai - var_x59 * var_x66 - var_x66 * var_x68));
        IJth(rJacobian, 1, 0) = var_x210 * (-1.8505781762430779e-7 + 0.00613586928462559 * var_x113 + 1.4985416831660874e-5 * var_x136);
        IJth(rJacobian, 2, 0) = ((var_x228) ? (var_x226 + var_x222 * (0.15999999943156581 * var_x223 + 0.16000000056843419 * var_x224)) : (var_x226 + var_x222 * var_x232 - 0.032000000000000001 * var_x222 * var_x227 * var_x230 / pow(var_x231, 2)));
        IJth(rJacobian, 3, 0) = (var_x238 + var_x244) * (var_x245 * var_x249 + var_x237 * var_x248 * (-var_x245 - var_x250) / pow(var_x246, 2)) + (var_x245 + var_x250) * (var_x247 - var_chaste_interface__fast_sodium_current_h_gate__h + var_x237 * var_x249);
        IJth(rJacobian, 4, 0) = (var_x260 + var_x270) * (var_x271 * var_x273 + var_x248 * var_x269 * (-var_x271 - var_x274) / pow(var_x272, 2)) + (var_x271 + var_x274) * (var_x247 - var_chaste_interface__fast_sodium_current_j_gate__j + var_x269 * var_x273);
        IJth(rJacobian, 7, 0) = -var_x277 - var_x279 * var_chaste_interface__L_type_Ca_channel__C1;
        IJth(rJacobian, 8, 0) = var_x277 + (var_x279 - var_x284) * var_chaste_interface__L_type_Ca_channel__C1 - var_x285 * var_chaste_interface__L_type_Ca_channel__C2;
        IJth(rJacobian, 9, 0) = var_x284 * var_chaste_interface__L_type_Ca_channel__C1 + (var_x285 + var_x292) * var_chaste_interface__L_type_Ca_channel__C2 - var_x293 * var_chaste_interface__L_type_Ca_channel__C3;
        IJth(rJacobian, 10, 0) = -var_x301 + var_x291 * var_chaste_interface__L_type_Ca_channel__C2 + (var_x293 - var_x300) * var_chaste_interface__L_type_Ca_channel__C3;
        IJth(rJacobian, 11, 0) = var_x301 + var_x300 * var_chaste_interface__L_type_Ca_channel__C3;
        IJth(rJacobian, 12, 0) = -var_x308 - var_x309 * var_chaste_interface__L_type_Ca_channel__C_Ca1;
        IJth(rJacobian, 13, 0) = var_x308 + (var_x309 - var_x312) * var_chaste_interface__L_type_Ca_channel__C_Ca1 - var_x279 * var_chaste_interface__L_type_Ca_channel__C_Ca2;
        IJth(rJacobian, 14, 0) = var_x312 * var_chaste_interface__L_type_Ca_channel__C_Ca1 + (var_x279 - var_x276) * var_chaste_interface__L_type_Ca_channel__C_Ca2 - var_x314 * var_chaste_interface__L_type_Ca_channel__C_Ca3;
        IJth(rJacobian, 15, 0) = -var_x316 + var_x276 * var_chaste_interface__L_type_Ca_channel__C_Ca2 + (var_x292 + var_x314) * var_chaste_interface__L_type_Ca_channel__C_Ca3;
        IJth(rJacobian, 16, 0) = var_x316 + var_x291 * var_chaste_interface__L_type_Ca_channel__C_Ca3;
        IJth(rJacobian, 17, 0) = var_x320 * (0.016666666666666666 * var_x321 / pow(var_x322, 2) - 0.13333333333333333 * var_x323 / pow(var_x324, 2)) + 0.00017543859649122806 * var_x317 * (-var_chaste_interface__L_type_Ca_channel_y_gate__y + 1 / var_x324 + 0.10000000000000001 / var_x322) / (pow(var_x318, 2) * pow((0.033333333333333333 + var_x319), 2));
        IJth(rJacobian, 18, 0) = ((var_x333) ? (var_x330 + var_x325 * (3.595e-5 * var_x326 + 3.595e-5 * var_x327)) : ((var_x338) ? (var_x330 + var_x337) : (var_x337 - var_x341 * var_chaste_interface__time_dependent_potassium_current_X_gate__X + 8.9997000000000013e-6 * var_x331 * var_x339 * var_chaste_interface__time_dependent_potassium_current_X_gate__X / pow(var_x340, 2))));
        IJth(rJacobian, 19, 0) = var_x25 * var_x350;
        IJth(rJacobian, 28, 0) = (-8.6515756913220823e-8 - 0.000239298902100398 * var_x123 - 0.018407607853876771 * var_x113 - 4.495625049498262e-5 * var_x136 - 0.00613586928462559 * var_x89 + var_x371 * var_x68 - var_x370 * var_x68 - var_x372 * var_chaste_interface__ionic_concentrations__Nai) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 29, 0) = (var_x388 + var_x389 + var_x390 + var_x394 - var_x382 - var_x383 - var_x384 - var_x385 - var_x386 - var_x387 - var_x391 - var_x393) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 30, 0) = (var_x382 + var_x383 + var_x384 + var_x385 + var_x386 + var_x387 + var_x391 + var_x393 - var_x388 - var_x389 - var_x390 - var_x394) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (var_x0 * (var_x143 + 0.0115 * var_x140 - 0.0115 * var_x138 - 0.00080269760132169958 * var_x139 - var_x142 * var_x59 - var_x142 * var_x68));
        IJth(rJacobian, 1, 1) = var_x210 * (-5.9200000000000008 + var_x211 + var_x212 - var_x213 - NV_Ith_S(mParameters, 0) - 2 * var_x217 + 2 * var_x218 + 3.5281248386597142e-5 * var_x140 - 2.4626237783962268e-6 * var_x139 - var_x106 * var_x219) + 0.00023800000000000004 * (6.6000000000000005e-5 * var_chaste_interface__calcium_subsystem__HTRPNCa + 0.040000000000000001 * var_chaste_interface__calcium_subsystem__LTRPNCa + 0.32000000000000001 * var_chaste_interface__calcium_subsystem__Ca_SS + 2.4626237783962268e-6 * log(var_x139 * NV_Ith_S(mParameters, 4)) - 0.32000000000000001 * var_chaste_interface__calcium_subsystem__Cai - 1.8505781762430779e-7 * var_chaste_interface__membrane__V + var_x135 * var_x219 + (-var_chaste_interface__calcium_subsystem__Cai + var_chaste_interface__calcium_subsystem__Ca_NSR) * NV_Ith_S(mParameters, 0) - var_x213 * var_chaste_interface__calcium_subsystem__Cai - var_x214 * var_x216 - var_x220 * (0.14000000000000001 - var_chaste_interface__calcium_subsystem__HTRPNCa) - var_x221 * (0.070000000000000007 - var_chaste_interface__calcium_subsystem__LTRPNCa)) / (pow(var_x207, 3) * pow(var_x208, 2));
        IJth(rJacobian, 19, 1) = 5490.7343857240912 * var_x348;
        IJth(rJacobian, 25, 1) = var_x369 + 24.691358024691358 * var_x217 - 24.691358024691358 * var_x218;
        IJth(rJacobian, 26, 1) = 2.8000000000000003 - var_x211;
        IJth(rJacobian, 27, 1) = 2.8000000000000003 - var_x212;
        IJth(rJacobian, 28, 1) = (0.018407607853876771 * var_x143 - var_x373 * var_x68) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 29, 1) = -var_x395;
        IJth(rJacobian, 30, 1) = var_x395;
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x145 * var_x147);
        IJth(rJacobian, 2, 2) = ((var_x228) ? (var_x233 + var_x234 - 499999.99948602181 * (47.130001000000007 + var_chaste_interface__membrane__V) * (var_x233 + 3.1999999919207769e-7 * var_x223)) : (var_x234 - var_x227 * var_x232));
        IJth(rJacobian, 28, 2) = -0.018407607853876771 * var_x144 * var_x147 * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x145 * var_x88);
        IJth(rJacobian, 3, 3) = -var_x238 - var_x244;
        IJth(rJacobian, 28, 3) = -var_x375 * var_x88;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x145 * var_x148);
        IJth(rJacobian, 4, 4) = -var_x260 - var_x270;
        IJth(rJacobian, 28, 4) = -var_x148 * var_x375;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (var_x155);
        IJth(rJacobian, 5, 5) = -2.0;
        IJth(rJacobian, 11, 5) = 2.0;
        IJth(rJacobian, 19, 5) = var_x352;
        IJth(rJacobian, 29, 5) = var_x397;
        IJth(rJacobian, 30, 5) = var_x396;
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (var_x155);
        IJth(rJacobian, 19, 6) = var_x352;
        IJth(rJacobian, 29, 6) = var_x397;
        IJth(rJacobian, 30, 6) = var_x396;
        IJth(rJacobian, 7, 7) = var_x282 - var_x280;
        IJth(rJacobian, 8, 7) = var_x281;
        IJth(rJacobian, 7, 8) = var_x283;
        IJth(rJacobian, 8, 8) = var_x287 - var_x286 - var_x288;
        IJth(rJacobian, 9, 8) = var_x288;
        IJth(rJacobian, 13, 8) = var_x286;
        IJth(rJacobian, 8, 9) = var_x289;
        IJth(rJacobian, 9, 9) = var_x295 + var_x297 - var_x294;
        IJth(rJacobian, 10, 9) = var_x296;
        IJth(rJacobian, 14, 9) = var_x294;
        IJth(rJacobian, 9, 10) = var_x298;
        IJth(rJacobian, 10, 10) = -var_x298 - var_x302 - var_x303;
        IJth(rJacobian, 11, 10) = var_x303;
        IJth(rJacobian, 15, 10) = var_x302;
        IJth(rJacobian, 5, 11) = 0.29999999999999999;
        IJth(rJacobian, 10, 11) = var_x304;
        IJth(rJacobian, 11, 11) = -0.29999999999999999 - var_x304 - var_x306;
        IJth(rJacobian, 16, 11) = var_x306;
        IJth(rJacobian, 7, 12) = 0.01;
        IJth(rJacobian, 12, 12) = -0.01 + var_x280 - var_x310;
        IJth(rJacobian, 13, 12) = var_x310;
        IJth(rJacobian, 8, 13) = 0.0050000000000000001;
        IJth(rJacobian, 12, 13) = var_x311;
        IJth(rJacobian, 13, 13) = -0.0050000000000000001 - var_x311 - var_x313;
        IJth(rJacobian, 14, 13) = var_x313;
        IJth(rJacobian, 9, 14) = 0.0025000000000000001;
        IJth(rJacobian, 13, 14) = var_x283;
        IJth(rJacobian, 14, 14) = -0.0025000000000000001 + var_x282 + var_x287;
        IJth(rJacobian, 15, 14) = var_x281;
        IJth(rJacobian, 10, 15) = 0.00125;
        IJth(rJacobian, 14, 15) = var_x315;
        IJth(rJacobian, 15, 15) = -0.00125 + var_x297 - var_x315;
        IJth(rJacobian, 16, 15) = var_x296;
        IJth(rJacobian, 11, 16) = 0.00062500000000000001;
        IJth(rJacobian, 15, 16) = var_x289;
        IJth(rJacobian, 16, 16) = -0.00062500000000000001 + var_x295;
        IJth(rJacobian, 0, 17) = mSetVoltageDerivativeToZero ? 0.0 : (var_x0 * (-var_x158 + var_x22 * var_x52));
        IJth(rJacobian, 17, 17) = -var_x320;
        IJth(rJacobian, 19, 17) = var_x22 * var_x350;
        IJth(rJacobian, 29, 17) = -var_x398;
        IJth(rJacobian, 30, 17) = var_x398;
        IJth(rJacobian, 0, 18) = mSetVoltageDerivativeToZero ? 0.0 : (-0.86066296582387036 * var_x0 * var_x159);
        IJth(rJacobian, 18, 18) = ((var_x333) ? (var_x342 + var_x344 - 740000.00029091549 * (30.000000675675675 + var_chaste_interface__membrane__V) * (var_x342 + 4.8581081061982445e-11 * var_x327)) : ((var_x338) ? (var_x344 + var_x345) : (var_x345 - var_x331 * var_x341)));
        IJth(rJacobian, 29, 18) = -var_x399;
        IJth(rJacobian, 30, 18) = var_x399;
        IJth(rJacobian, 1, 19) = 0.32000000000000001 * var_x209;
        IJth(rJacobian, 7, 19) = -0.1875 * var_chaste_interface__L_type_Ca_channel__C0;
        IJth(rJacobian, 8, 19) = -var_x290;
        IJth(rJacobian, 9, 19) = -var_x299;
        IJth(rJacobian, 10, 19) = -var_x305;
        IJth(rJacobian, 11, 19) = -var_x307;
        IJth(rJacobian, 12, 19) = 0.1875 * var_chaste_interface__L_type_Ca_channel__C_Ca0;
        IJth(rJacobian, 13, 19) = var_x290;
        IJth(rJacobian, 14, 19) = var_x299;
        IJth(rJacobian, 15, 19) = var_x305;
        IJth(rJacobian, 16, 19) = var_x307;
        IJth(rJacobian, 19, 19) = var_x349 * (-5490.7343857240912 + (-var_x353 - var_x354) * NV_Ith_S(mParameters, 1)) + 0.00023800000000000004 * (79.615648592999321 * var_x356 + 5490.7343857240912 * var_chaste_interface__calcium_subsystem__Cai - 5490.7343857240912 * var_chaste_interface__calcium_subsystem__Ca_SS - var_x2 * var_x351) / (pow(var_x346, 3) * pow(var_x347, 2));
        IJth(rJacobian, 20, 19) = var_x360 - var_x361;
        IJth(rJacobian, 21, 19) = var_x361;
        IJth(rJacobian, 22, 19) = -var_x360;
        IJth(rJacobian, 24, 19) = var_x355 * var_x367;
        IJth(rJacobian, 19, 20) = var_x358;
        IJth(rJacobian, 20, 20) = -0.16049999999999998 - var_x362;
        IJth(rJacobian, 21, 20) = var_x362;
        IJth(rJacobian, 22, 20) = 0.14249999999999999;
        IJth(rJacobian, 23, 20) = 0.017999999999999999;
        IJth(rJacobian, 24, 20) = var_x368;
        IJth(rJacobian, 19, 21) = var_x358;
        IJth(rJacobian, 20, 21) = 1.9299999999999999;
        IJth(rJacobian, 21, 21) = -1.9299999999999999;
        IJth(rJacobian, 24, 21) = var_x368;
        IJth(rJacobian, 20, 22) = var_x363;
        IJth(rJacobian, 22, 22) = -var_x363;
        IJth(rJacobian, 20, 23) = 0.00080000000000000004;
        IJth(rJacobian, 23, 23) = -0.00080000000000000004;
        IJth(rJacobian, 19, 24) = var_x357 * (var_x353 + var_x354);
        IJth(rJacobian, 24, 24) = var_x367 * (-0.029002320185614851 + (-var_chaste_interface__calcium_subsystem__P_O1 - var_chaste_interface__calcium_subsystem__P_O2) * NV_Ith_S(mParameters, 1)) + 0.16666666666666666 * (-var_x356 + 0.029002320185614851 * var_chaste_interface__calcium_subsystem__Ca_NSR - 0.029002320185614851 * var_chaste_interface__calcium_subsystem__Ca_JSR) / (pow(var_x364, 3) * pow((0.083333333333333329 + var_x365), 2));
        IJth(rJacobian, 25, 24) = 0.0016613674772994187;
        IJth(rJacobian, 1, 25) = var_x210 * NV_Ith_S(mParameters, 0);
        IJth(rJacobian, 24, 25) = 0.029002320185614851 * var_x366;
        IJth(rJacobian, 25, 25) = -0.0016613674772994187 - var_x369;
        IJth(rJacobian, 1, 26) = var_x210 * (6.6000000000000005e-5 + var_x220);
        IJth(rJacobian, 26, 26) = -6.6000000000000005e-5 - var_x220;
        IJth(rJacobian, 1, 27) = var_x210 * (0.040000000000000001 + var_x221);
        IJth(rJacobian, 27, 27) = -0.040000000000000001 - var_x221;
        IJth(rJacobian, 0, 28) = mSetVoltageDerivativeToZero ? 0.0 : (var_x0 * (var_x174 - 3.0 * var_x168 - 0.20993565915531667 * var_x162 - 0.00061664414373283397 * var_x167 - 0.0003752664515462853 * var_x114 - 26.614641953637257 * var_x163 - var_x160 * var_x161 - var_x165 * var_chaste_interface__ionic_concentrations__Ki));
        IJth(rJacobian, 1, 28) = 0.018407607853876771 * var_x168 * var_x209;
        IJth(rJacobian, 28, 28) = (var_x379 - 0.16330396408463044 * var_x163 - 2.3025858935932891e-6 * var_x114 - 1.1350943583223629e-5 * var_x167 - 0.055222823561630309 * var_x168 - var_x160 * var_x376) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 29, 28) = (var_x401 + var_x405 - var_x400 - var_x402) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 30, 28) = (var_x400 + var_x402 + var_x427 - var_x401) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 0, 29) = mSetVoltageDerivativeToZero ? 0.0 : (var_x0 * (var_x174 - var_x180 + 0.020896500737607973 * var_x189 - 0.087616355293953771 * var_x182 - 11.453118339078925 * var_x162 - var_x127 * var_x188 - var_x161 * var_x183 - var_x165 * var_chaste_interface__ionic_concentrations__Nai - var_x181 * var_x70));
        IJth(rJacobian, 28, 29) = (var_x379 - var_x381 * var_chaste_interface__ionic_concentrations__Nai) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 29, 29) = (var_x405 + var_x413 - var_x406 - var_x408 - var_x409 - var_x410 - var_x411 - var_x412) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 30, 29) = (var_x406 + var_x408 + var_x409 + var_x410 + var_x411 + var_x412 + var_x427 - var_x413) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 0, 30) = mSetVoltageDerivativeToZero ? 0.0 : (var_x0 * (-var_x190 + 0.0057777777777777775 * var_x196 + 0.087616355293953771 * var_x193 + 11.453118339078925 * var_x201 - 0.012999999999999999 * var_x195 - 0.21516574145596759 * var_x202 - 0.020896500737607973 * var_x204 - 0.0016460179221381521 * var_x200 + var_x164 * var_x205 + var_x169 * var_x198 + var_x171 * var_x197 + var_x181 * var_x191 - var_x127 * var_x203 - var_x161 * var_x199 - var_x172 * var_x198 - var_x172 * var_x206));
        IJth(rJacobian, 28, 30) = (0.00010635506760017689 * var_x196 - 0.000239298902100398 * var_x195 + var_x205 * var_x380 + var_x206 * var_x377 - var_x206 * var_x378) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 29, 30) = (var_x415 + var_x416 + var_x417 + var_x418 + var_x422 - var_x414 - var_x419 - var_x420 - var_x421 - var_x423 - var_x424 - var_x425 - var_x426) * NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 30, 30) = (var_x414 + var_x419 + var_x420 + var_x421 + var_x423 + var_x424 + var_x425 + var_x426 - var_x415 - var_x416 - var_x417 - var_x418 - var_x422) * NV_Ith_S(mParameters, 3);
    }

    N_Vector Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -84.1638
        double var_chaste_interface__calcium_subsystem__Cai = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 9.94893e-11
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.0328302
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.988354
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.99254
        double var_chaste_interface__L_type_Ca_channel__O = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 9.84546e-21
        double var_chaste_interface__L_type_Ca_channel__O_Ca = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__L_type_Ca_channel_y_gate__y = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.998983
        double var_chaste_interface__time_dependent_potassium_current_X_gate__X = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.000928836
        double var_chaste_interface__calcium_subsystem__Ca_SS = NV_Ith_S(rY, 19);
        // Units: mM; Initial value: 0.000136058
        double var_chaste_interface__calcium_subsystem__P_O1 = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.00119168
        double var_chaste_interface__calcium_subsystem__P_O2 = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 6.30613e-09
        double var_chaste_interface__calcium_subsystem__Ca_JSR = NV_Ith_S(rY, 24);
        // Units: mM; Initial value: 1.17504
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 28);
        // Units: mM; Initial value: 10.2042
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 29);
        // Units: mM; Initial value: 143.727
        double var_chaste_interface__ionic_concentrations__Ko = NV_Ith_S(rY, 30);
        // Units: mM; Initial value: 5.4
        
        // Lookup table indexing
        const bool _oob_0 = Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_Na_Ca_exchanger__K_mCa = 1.3799999999999999; // mM
        const double var_Na_Ca_exchanger__K_mNa = 87.5; // mM
        const double var_Na_Ca_exchanger__eta = 0.34999999999999998; // dimensionless
        const double var_Na_Ca_exchanger__k_sat = 0.10000000000000001; // dimensionless
        const double var_calcium_subsystem__RyR_open = var_chaste_interface__calcium_subsystem__P_O1 + var_chaste_interface__calcium_subsystem__P_O2; // dimensionless
        const double var_calcium_subsystem__J_rel = (-var_chaste_interface__calcium_subsystem__Ca_SS + var_chaste_interface__calcium_subsystem__Ca_JSR) * var_calcium_subsystem__RyR_open * NV_Ith_S(mParameters, 1); // mM_per_ms
        const double var_membrane__F = 96845.0; // faradays_constant_units
        const double var_membrane__I_stim_converted = -GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_membrane__R = 8314.5; // gas_constant_units
        const double var_membrane__T = 310.0; // kelvin
        const double var_fast_sodium_current__E_Na = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__ionic_concentrations__Nai) / var_membrane__F; // mV
        const double var_L_type_Ca_channel__i_Ca_L_Ca_max = ((fabs(var_chaste_interface__membrane__V) < 1.3307320976818627e-6) ? (-375733.02761014085 * (-1.3307320976818627e-6 + var_chaste_interface__membrane__V) * (-0.019368999999999997 * (0.001 * exp(9.9999999999999995e-8) - 0.34100000000000003 * NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 6) / (-1.0 + exp(9.9999999999999995e-8)) - 0.019368999999999997 * (0.001 * exp(-9.9999999999999995e-8) - 0.34100000000000003 * NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 6) / (-1.0 + exp(-9.9999999999999995e-8))) + 0.019368999999999997 * (0.001 * exp(9.9999999999999995e-8) - 0.34100000000000003 * NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 6) / (-1.0 + exp(9.9999999999999995e-8))) : (14555.146023561636 * (_lt_0_row[0] - 0.34100000000000003 * NV_Ith_S(mParameters, 4)) * NV_Ith_S(mParameters, 6) * var_chaste_interface__membrane__V / (_lt_0_row[1]))); // uA_per_mm2
        const double var_L_type_Ca_channel__i_Ca_L_Ca = (var_chaste_interface__L_type_Ca_channel__O + var_chaste_interface__L_type_Ca_channel__O_Ca) * var_L_type_Ca_channel__i_Ca_L_Ca_max * var_chaste_interface__L_type_Ca_channel_y_gate__y; // uA_per_mm2
        const double var_L_type_Ca_channel__i_Ca_L_Ca_converted = 100.00000000000001 * var_L_type_Ca_channel__i_Ca_L_Ca; // uA_per_cm2
        const double var_L_type_Ca_channel_y_gate__tau_y = _lt_0_row[15]; // ms
        const double var_Na_Ca_exchanger__i_NaCa = (pow(var_chaste_interface__ionic_concentrations__Nai, 3) * NV_Ith_S(mParameters, 4) * exp(var_Na_Ca_exchanger__eta * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T)) - pow(NV_Ith_S(mParameters, 5), 3) * var_chaste_interface__calcium_subsystem__Cai * exp((-1.0 + var_Na_Ca_exchanger__eta) * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * NV_Ith_S(mParameters, 12) / ((1.0 + var_Na_Ca_exchanger__k_sat * exp((-1.0 + var_Na_Ca_exchanger__eta) * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * (pow(var_Na_Ca_exchanger__K_mNa, 3) + pow(NV_Ith_S(mParameters, 5), 3)) * (var_Na_Ca_exchanger__K_mCa + NV_Ith_S(mParameters, 4))); // uA_per_mm2
        const double var_Na_Ca_exchanger__i_NaCa_converted = 100.00000000000001 * var_Na_Ca_exchanger__i_NaCa; // uA_per_cm2
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 9) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // uA_per_mm2
        const double var_fast_sodium_current__i_Na_converted = 100.00000000000001 * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_fast_sodium_current_h_gate__alpha_h = ((var_chaste_interface__membrane__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 11) - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0)); // per_ms
        const double var_fast_sodium_current_h_gate__beta_h = ((var_chaste_interface__membrane__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V - 0.34999999999999998 * NV_Ith_S(mParameters, 11)) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__V - 0.079000000000000001 * NV_Ith_S(mParameters, 11))) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 11) - 0.0900900900900901 * var_chaste_interface__membrane__V)))); // per_ms
        const double var_fast_sodium_current_h_gate__tau_h = 1 / (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h); // ms
        const double var_fast_sodium_current_j_gate__alpha_j = ((var_chaste_interface__membrane__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__membrane__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V - 0.24440000000000001 * NV_Ith_S(mParameters, 11)) - 3.4740000000000003e-5 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 11) - 0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V - 0.311 * NV_Ith_S(mParameters, 11)))) : (0)); // per_ms
        const double var_fast_sodium_current_j_gate__beta_j = ((var_chaste_interface__membrane__V < -40.0) ? (0.1212 * exp(0.01052 * NV_Ith_S(mParameters, 11) - 0.01052 * var_chaste_interface__membrane__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 11) - 0.13780000000000001 * var_chaste_interface__membrane__V))) : (0.29999999999999999 * exp(2.5349999999999999e-7 * NV_Ith_S(mParameters, 11) - 2.5349999999999999e-7 * var_chaste_interface__membrane__V) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 11) - 0.10000000000000001 * var_chaste_interface__membrane__V)))); // per_ms
        const double var_fast_sodium_current_j_gate__tau_j = 1 / (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j); // ms
        const double var_time_dependent_potassium_current__P_NaK = 0.018329999999999999; // dimensionless
        const double var_time_dependent_potassium_current__E_K = var_membrane__R * var_membrane__T * log((NV_Ith_S(mParameters, 5) * var_time_dependent_potassium_current__P_NaK + var_chaste_interface__ionic_concentrations__Ko) / (var_chaste_interface__ionic_concentrations__Nai * var_time_dependent_potassium_current__P_NaK + var_chaste_interface__ionic_concentrations__Ki)) / var_membrane__F; // mV
        const double var_time_dependent_potassium_current__g_K = 0.43033148291193518 * sqrt(var_chaste_interface__ionic_concentrations__Ko) * NV_Ith_S(mParameters, 8); // mS_per_mm2
        const double var_time_dependent_potassium_current_Xi_gate__Xi = 1 / (_lt_0_row[9]); // dimensionless
        const double var_time_dependent_potassium_current__i_K = pow(var_chaste_interface__time_dependent_potassium_current_X_gate__X, 2) * (-var_time_dependent_potassium_current__E_K + var_chaste_interface__membrane__V) * var_time_dependent_potassium_current__g_K * var_time_dependent_potassium_current_Xi_gate__Xi; // uA_per_mm2
        const double var_time_dependent_potassium_current__i_K_converted = 100.00000000000001 * var_time_dependent_potassium_current__i_K; // uA_per_cm2
        const double var_time_independent_potassium_current__E_K1 = var_membrane__R * var_membrane__T * log(var_chaste_interface__ionic_concentrations__Ko / var_chaste_interface__ionic_concentrations__Ki) / var_membrane__F; // mV
        const double var_time_independent_potassium_current__g_K1_max = 0.0074999999999999997; // mS_per_mm2
        const double var_time_independent_potassium_current__g_K1 = 0.43033148291193518 * sqrt(var_chaste_interface__ionic_concentrations__Ko) * var_time_independent_potassium_current__g_K1_max; // mS_per_mm2
        const double var_time_independent_potassium_current_K1_gate__alpha_K1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K1)); // per_ms
        const double var_time_independent_potassium_current_K1_gate__beta_K1 = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 0.061749999999999999 * var_time_independent_potassium_current__E_K1) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 0.080320000000000003 * var_time_independent_potassium_current__E_K1)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_time_independent_potassium_current__E_K1 - 0.51429999999999998 * var_chaste_interface__membrane__V)); // per_ms
        const double var_time_independent_potassium_current_K1_gate__K1_infinity = var_time_independent_potassium_current_K1_gate__alpha_K1 / (var_time_independent_potassium_current_K1_gate__alpha_K1 + var_time_independent_potassium_current_K1_gate__beta_K1); // dimensionless
        const double var_time_independent_potassium_current__i_K1 = (-var_time_independent_potassium_current__E_K1 + var_chaste_interface__membrane__V) * var_time_independent_potassium_current__g_K1 * var_time_independent_potassium_current_K1_gate__K1_infinity; // uA_per_mm2
        const double var_time_independent_potassium_current__i_K1_converted = 100.00000000000001 * var_time_independent_potassium_current__i_K1; // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(12);
        NV_Ith_S(dqs, 0) = var_calcium_subsystem__J_rel;
        NV_Ith_S(dqs, 1) = var_L_type_Ca_channel__i_Ca_L_Ca_converted;
        NV_Ith_S(dqs, 2) = var_L_type_Ca_channel_y_gate__tau_y;
        NV_Ith_S(dqs, 3) = var_time_dependent_potassium_current__i_K_converted;
        NV_Ith_S(dqs, 4) = var_fast_sodium_current__i_Na_converted;
        NV_Ith_S(dqs, 5) = var_fast_sodium_current_h_gate__tau_h;
        NV_Ith_S(dqs, 6) = var_fast_sodium_current_j_gate__tau_j;
        NV_Ith_S(dqs, 7) = var_time_independent_potassium_current__i_K1_converted;
        NV_Ith_S(dqs, 8) = var_time_independent_potassium_current__g_K1;
        NV_Ith_S(dqs, 9) = var_Na_Ca_exchanger__i_NaCa_converted;
        NV_Ith_S(dqs, 10) = var_membrane__I_stim_converted;
        NV_Ith_S(dqs, 11) = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt>::Initialise(void)
{
    this->mSystemName = "jafri_rice_winslow_1998";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "ms";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-84.1638);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(9.94893e-11);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0328302);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.988354);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99254);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(9.84546e-21);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d2_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("L_type_Ca_channel__C0");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.997208);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("L_type_Ca_channel__C1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(6.38897e-05);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("L_type_Ca_channel__C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.535e-09);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("L_type_Ca_channel__C3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.63909e-14);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("L_type_Ca_channel__C4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(6.56337e-20);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("L_type_Ca_channel__C_Ca0");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00272826);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("L_type_Ca_channel__C_Ca1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(6.99215e-07);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("L_type_Ca_channel__C_Ca2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(6.71989e-11);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("L_type_Ca_channel__C_Ca3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.87031e-15);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("L_type_Ca_channel__C_Ca4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(4.59752e-20);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.998983);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("time_dependent_potassium_current_X_gate__X");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000928836);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.000136058);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("calcium_subsystem__P_O1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00119168);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("calcium_subsystem__P_O2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(6.30613e-09);

    // NV_Ith_S(rY, 22):
    this->mVariableNames.push_back("calcium_subsystem__P_C1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.762527);

    // NV_Ith_S(rY, 23):
    this->mVariableNames.push_back("calcium_subsystem__P_C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.236283);

    // NV_Ith_S(rY, 24):
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(1.17504);

    // NV_Ith_S(rY, 25):
    this->mVariableNames.push_back("calcium_subsystem__Ca_NSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(1.243891);

    // NV_Ith_S(rY, 26):
    this->mVariableNames.push_back("calcium_subsystem__HTRPNCa");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.13598);

    // NV_Ith_S(rY, 27):
    this->mVariableNames.push_back("calcium_subsystem__LTRPNCa");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00635);

    // NV_Ith_S(rY, 28):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(10.2042);

    // NV_Ith_S(rY, 29):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(143.727);

    // NV_Ith_S(rY, 30):
    this->mVariableNames.push_back("extracellular_potassium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(5.4);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("per_ms");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_ms");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("mM_per_ms");

    // mParameters[3]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("mm_per_ms");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_capacitance");
    this->mParameterUnits.push_back("uF_per_mm2");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_mm2");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("mS_per_mm2");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("mV");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("uA_per_mm2");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("mM_per_ms");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f_gate_tau");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("mS_per_mm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("ms");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Celljafri_rice_winslow_model_1998FromCellMLCvodeOpt)

#endif // CHASTE_CVODE
