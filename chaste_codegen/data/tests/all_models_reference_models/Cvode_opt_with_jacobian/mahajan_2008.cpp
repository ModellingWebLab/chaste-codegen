#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: mahajan_shiferaw_model_2008
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvodeOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "mahajan_2008.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellmahajan_2008FromCellMLCvodeOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellmahajan_2008FromCellMLCvodeOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellmahajan_2008FromCellMLCvodeOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<31; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__cell__V)
    {
        const double _offset_0 = var_chaste_interface__cell__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellmahajan_2008FromCellMLCvodeOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__cell__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__cell__V>mTableMaxs[0] || var_chaste_interface__cell__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellmahajan_2008FromCellMLCvodeOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellmahajan_2008FromCellMLCvodeOpt_LookupTables(const Cellmahajan_2008FromCellMLCvodeOpt_LookupTables&);
    Cellmahajan_2008FromCellMLCvodeOpt_LookupTables& operator= (const Cellmahajan_2008FromCellMLCvodeOpt_LookupTables&);
    Cellmahajan_2008FromCellMLCvodeOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 31;
        mTableMins[0] = -250.0001;
        mTableMaxs[0] = 549.9999;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellmahajan_2008FromCellMLCvodeOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][31];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][0] = exp(0.075353936071760372 * var_chaste_interface__cell__V);
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][1] = 1 / (-1.0 + exp(0.075353936071760372 * var_chaste_interface__cell__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][2] = 1 / (1.0 + 0.1245 * exp(-0.0037676968035880187 * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(2.0208023774145616)) * exp(-0.037676968035880186 * var_chaste_interface__cell__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][3] = exp(0.013186938812558063 * var_chaste_interface__cell__V);
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][4] = exp(-0.024490029223322121 * var_chaste_interface__cell__V);
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][5] = 1 / (1.0 + 0.20000000000000001 * exp(-0.024490029223322121 * var_chaste_interface__cell__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][6] = 0.5 / (1.0 + exp(3.3500000000000001 + 0.10000000000000001 * var_chaste_interface__cell__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][7] = 1 / (1.0 + exp(1.4732142857142858 + 0.044642857142857144 * var_chaste_interface__cell__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][8] = -0.30599999999999999 * (86.398763985973389 + var_chaste_interface__cell__V) / ((1.0 + exp(6.4833277106546534 + 0.23849999999999999 * var_chaste_interface__cell__V)) * (1.02 / (1.0 + exp(6.4833277106546534 + 0.23849999999999999 * var_chaste_interface__cell__V)) + (exp(-31.363518823866141 + 0.061749999999999999 * var_chaste_interface__cell__V) + 0.49124000000000001 * exp(7.3793810433533835 + 0.080320000000000003 * var_chaste_interface__cell__V)) / (1.0 + exp(-46.879352217986117 - 0.51429999999999998 * var_chaste_interface__cell__V))));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][9] = 1.0 - 1 / (1.0 + exp(-10.0 - 0.25 * var_chaste_interface__cell__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][10] = 1 / (1.0 + exp(-3.5335689045936394 - 0.088339222614840993 * var_chaste_interface__cell__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][11] = 0.33333333333333331 - 0.33333333333333331 / (1.0 + exp(-13.333333333333334 - 0.33333333333333331 * var_chaste_interface__cell__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][12] = 1 / (1.0 + exp(-0.125 * var_chaste_interface__cell__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][13] = 10.0 + 4954.0 * exp(0.064102564102564111 * var_chaste_interface__cell__V);
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][14] = 1 / (1.0 + exp(-6.666666666666667 - 0.13333333333333333 * var_chaste_interface__cell__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][15] = ((fabs(10.0 + var_chaste_interface__cell__V) > 0.001) ? (0.00060999999999999997 * (10.0 + var_chaste_interface__cell__V) / (-1.0 + exp(1.45 + 0.14499999999999999 * var_chaste_interface__cell__V))) : (0.0042068965517241376)) + ((fabs(7.0 + var_chaste_interface__cell__V) > 0.001) ? (0.0013799999999999999 * (7.0 + var_chaste_interface__cell__V) / (1.0 - exp(-0.86099999999999999 - 0.123 * var_chaste_interface__cell__V))) : (0.011219512195121951));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][16] = ((fabs(30.0 + var_chaste_interface__cell__V) < 0.014556040756914121) ? (417.94625266107982) : (1 / (0.00013100000000000001 * (30.0 + var_chaste_interface__cell__V) / (-1.0 + exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__cell__V)) + 7.1899999999999999e-5 * (30.0 + var_chaste_interface__cell__V) / (1.0 - exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__cell__V)))));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][17] = 1 / (1.0 + exp(0.089820359281437126 - 0.059880239520958084 * var_chaste_interface__cell__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][18] = ((var_chaste_interface__cell__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][19] = ((var_chaste_interface__cell__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V)) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__cell__V))));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][20] = ((var_chaste_interface__cell__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V) - 3.4740000000000003e-5 * exp(-0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V))) : (0));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][21] = ((var_chaste_interface__cell__V < -40.0) ? (0.1212 * exp(-0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.29999999999999999 * exp(-2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__cell__V))));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][22] = ((fabs(47.130000000000003 + var_chaste_interface__cell__V) > 0.001) ? (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V))) : (3.2000000000000002));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][23] = exp(-0.090909090909090912 * var_chaste_interface__cell__V);
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][24] = 1 / (1.0 + exp(-1.5 - 0.050000000000000003 * var_chaste_interface__cell__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][25] = exp(-1.5 - 0.050000000000000003 * var_chaste_interface__cell__V);
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][26] = 1 / (1.0 + exp(-10.728 - 0.35759999999999997 * var_chaste_interface__cell__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][27] = exp(-10.728 - 0.35759999999999997 * var_chaste_interface__cell__V);
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][28] = 1 / (1.5 + 3.5 * exp(-0.0011111111111111111 * pow(var_chaste_interface__cell__V, 2)));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][29] = 1 / (30.0 + 3000.0 / (1.0 + exp(6.0 + 0.10000000000000001 * var_chaste_interface__cell__V)));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][30] = 1 / (20.0 + 20.0 / (1.0 + exp(3.3500000000000001 + 0.10000000000000001 * var_chaste_interface__cell__V)));
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellmahajan_2008FromCellMLCvodeOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[31];

    // Lookup tables
    double (*_lookup_table_0)[31];

};

std::shared_ptr<Cellmahajan_2008FromCellMLCvodeOpt_LookupTables> Cellmahajan_2008FromCellMLCvodeOpt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> Cellmahajan_2008FromCellMLCvodeOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -14.999999999999998 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 3.0; // ms
        const double var_chaste_interface__cell__stim_offset = 0; // ms
        const double var_chaste_interface__cell__stim_period = 400.0; // ms
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellmahajan_2008FromCellMLCvodeOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellmahajan_2008FromCellMLCvodeOpt::Cellmahajan_2008FromCellMLCvodeOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                26,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellmahajan_2008FromCellMLCvodeOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 1.0; // (var_IKr__ScaleFactorGkr) [dimensionless]
        NV_Ith_S(this->mParameters, 1) = 1.0; // (var_IKs__ScaleFactorGks) [dimensionless]
        NV_Ith_S(this->mParameters, 2) = 1.0; // (var_Ito__ScaleFactorIto) [dimensionless]
        NV_Ith_S(this->mParameters, 3) = 182.0; // (var_ICaL__gca) [mmole_per_coulomb_cm]
        NV_Ith_S(this->mParameters, 4) = 12.0; // (var_INa__gna) [uS_per_nF]
        NV_Ith_S(this->mParameters, 5) = 0.012500000000000001; // (var_IKr__gkr) [uS_per_nF]
    }

    Cellmahajan_2008FromCellMLCvodeOpt::~Cellmahajan_2008FromCellMLCvodeOpt()
    {
    }

    AbstractLookupTableCollection* Cellmahajan_2008FromCellMLCvodeOpt::GetLookupTableCollection()
    {
        return Cellmahajan_2008FromCellMLCvodeOpt_LookupTables::Instance();
    }
    
    double Cellmahajan_2008FromCellMLCvodeOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -87.169816169406
        double var_chaste_interface__Ca__Ca_i_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000256752008084
        double var_chaste_interface__INa__xm = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__ICaL__c1 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 1.8211252e-05
        double var_chaste_interface__ICaL__c2 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.979322592773
        double var_chaste_interface__ICaL__xi1ca = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.001208153482
        double var_chaste_interface__ICaL__xi1ba = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.3616596e-05
        double var_chaste_interface__ICaL__xi2ca = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.004173008466
        double var_chaste_interface__ICaL__xi2ba = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.015242594688
        double var_chaste_interface__IKr__xr = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.993331326442
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 20);
        // Units: mM; Initial value: 11.441712311614
        double var_chaste_interface__Ca__Ca_submem = NV_Ith_S(rY, 22);
        // Units: uM; Initial value: 0.226941113355
        
        // Lookup table indexing
        const bool _oob_0 = Cellmahajan_2008FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellmahajan_2008FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        const double var_Ca__csm = 0.001 * var_chaste_interface__Ca__Ca_submem; // mM
        const double var_cell__Itotal = -16.0 * (1.0 - var_chaste_interface__ICaL__c1 - var_chaste_interface__ICaL__c2 - var_chaste_interface__ICaL__xi1ba - var_chaste_interface__ICaL__xi1ca - var_chaste_interface__ICaL__xi2ba - var_chaste_interface__ICaL__xi2ca) * ((fabs(0.075353936071760372 * var_chaste_interface__cell__V) < 0.001) ? (-0.063960518821716009 + 0.10420416882000001 * var_Ca__csm * _lt_0_row[0]) : (0.0078521942756732046 * _lt_0_row[1] * (-0.61380000000000001 + var_Ca__csm * _lt_0_row[0]) * var_chaste_interface__cell__V)) * NV_Ith_S(mParameters, 3) - 0.040000000000000001 * (86.398763985973389 + var_chaste_interface__cell__V) * var_chaste_interface__Ito__xtof * var_chaste_interface__Ito__ytof - 1.173913043478261 * _lt_0_row[2] * var_chaste_interface__Na__Na_i / (12.0 + var_chaste_interface__Na__Na_i) + _lt_0_row[8] - 6.7199999999999998 * _lt_0_row[5] * (1.8 * pow(var_chaste_interface__Na__Na_i, 3) * _lt_0_row[3] - 2515456.0 * var_Ca__csm * _lt_0_row[4]) / ((1.0 + 0.026999999999999996 / pow(var_chaste_interface__Ca__Ca_submem, 3)) * (12405.2022 + 7.9663561662386391 * pow(var_chaste_interface__Na__Na_i, 3) + 4115811.375 * var_Ca__csm)) - 0.11 * (86.398763985973389 + var_chaste_interface__cell__V) * (_lt_0_row[6] + var_chaste_interface__Ito__ytos) * NV_Ith_S(mParameters, 2) * var_chaste_interface__Ito__xtos - pow(var_chaste_interface__INa__xm, 3) * (-26.541413816729872 * log(136.0 / var_chaste_interface__Na__Na_i) + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 4) * var_chaste_interface__INa__xh * var_chaste_interface__INa__xj - 0.1386 * (1.0 + 0.80000000000000004 / (1.0 + 1.2500000000000001e-10 / pow(var_chaste_interface__Ca__Ca_i_converted, 3))) * (-26.541413816729872 * log(7.8928799999999999 / (140.0 + 0.018329999999999999 * var_chaste_interface__Na__Na_i)) + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 1) * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 - 1.0 * _lt_0_row[7] * (86.398763985973389 + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 0) * NV_Ith_S(mParameters, 5) * var_chaste_interface__IKr__xr; // nA_per_nF
        const double var_chaste_interface__i_ionic = -0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_cell__Itotal; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellmahajan_2008FromCellMLCvodeOpt::EvaluateYDerivatives(double var_chaste_interface__Environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -87.169816169406
        double var_chaste_interface__Ca__Ca_i_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000256752008084
        double var_chaste_interface__INa__xm = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__ICaL__c1 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 1.8211252e-05
        double var_chaste_interface__ICaL__c2 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.979322592773
        double var_chaste_interface__ICaL__xi1ca = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.001208153482
        double var_chaste_interface__ICaL__xi1ba = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.3616596e-05
        double var_chaste_interface__ICaL__xi2ca = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.004173008466
        double var_chaste_interface__ICaL__xi2ba = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.015242594688
        double var_chaste_interface__IKr__xr = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.993331326442
        double var_chaste_interface__Irel__Ca_JSR = NV_Ith_S(rY, 18);
        // Units: uM; Initial value: 97.505463697266
        double var_chaste_interface__Irel__xir = NV_Ith_S(rY, 19);
        // Units: uM_per_ms; Initial value: 0.006679257264
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 20);
        // Units: mM; Initial value: 11.441712311614
        double var_chaste_interface__Ca__Ca_dyad = NV_Ith_S(rY, 21);
        // Units: uM; Initial value: 1.716573130685
        double var_chaste_interface__Ca__Ca_submem = NV_Ith_S(rY, 22);
        // Units: uM; Initial value: 0.226941113355
        double var_chaste_interface__Ca__Ca_NSR = NV_Ith_S(rY, 23);
        // Units: uM; Initial value: 104.450004990523
        double var_chaste_interface__Ca__tropi = NV_Ith_S(rY, 24);
        // Units: uM; Initial value: 22.171689894953
        double var_chaste_interface__Ca__trops = NV_Ith_S(rY, 25);
        // Units: uM; Initial value: 19.864701949854

        // Lookup table indexing
        const bool _oob_0 = Cellmahajan_2008FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellmahajan_2008FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        double d_dt_chaste_interface_var_cell__V;
        const double var_Ca__Ca_i = 1000.0 * var_chaste_interface__Ca__Ca_i_converted; // uM
        const double var_Ca__csm = 0.001 * var_chaste_interface__Ca__Ca_submem; // mM
        const double var_Ca__jd = 0.25 * var_chaste_interface__Ca__Ca_submem - 0.25 * var_Ca__Ca_i; // uM_per_ms
        const double var_Ca__xbi = -0.019599999999999999 * var_chaste_interface__Ca__tropi + 0.0327 * (70.0 - var_chaste_interface__Ca__tropi) * var_Ca__Ca_i; // uM_per_ms
        const double var_Ca__xbs = -0.019599999999999999 * var_chaste_interface__Ca__trops + 0.0327 * (70.0 - var_chaste_interface__Ca__trops) * var_chaste_interface__Ca__Ca_submem; // uM_per_ms
        const double d_dt_chaste_interface_var_Ca__tropi = var_Ca__xbi; // uM / ms
        const double d_dt_chaste_interface_var_Ca__trops = var_Ca__xbs; // uM / ms
        const double var_ICaL__fca = 1 / (1.0 + 27.0 / pow(var_chaste_interface__Ca__Ca_dyad, 3)); // dimensionless
        const double var_ICaL__k1 = 0.024167999999999999 * var_ICaL__fca; // per_ms
        const double var_ICaL__s1 = 0.018268800000000002 * var_ICaL__fca; // per_ms
        const double var_ICaL__po = 1.0 - var_chaste_interface__ICaL__c1 - var_chaste_interface__ICaL__c2 - var_chaste_interface__ICaL__xi1ba - var_chaste_interface__ICaL__xi1ca - var_chaste_interface__ICaL__xi2ba - var_chaste_interface__ICaL__xi2ca; // dimensionless
        const double var_Ileak_Iup_Ixfer__jleak = 2.069e-5 * pow(var_chaste_interface__Ca__Ca_NSR, 2) * (-var_Ca__Ca_i + 16.667000000000002 * var_chaste_interface__Ca__Ca_NSR) / (2500.0 + pow(var_chaste_interface__Ca__Ca_NSR, 2)); // uM_per_ms
        const double var_Ileak_Iup_Ixfer__jup = 0.40000000000000002 * pow(var_Ca__Ca_i, 2) / (0.25 + pow(var_Ca__Ca_i, 2)); // uM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_i_converted = 0.001 * (-var_Ca__xbi - var_Ileak_Iup_Ixfer__jup + var_Ca__jd + var_Ileak_Iup_Ixfer__jleak) / (1.0 + 4.5 / pow((0.29999999999999999 + var_Ca__Ca_i), 2) + 3.2307692307692308 / pow((1 + 0.076923076923076927 * var_Ca__Ca_i), 2) + 28.199999999999999 / pow((0.59999999999999998 + var_Ca__Ca_i), 2) + 3.4285714285714284 / pow((1 + 0.14285714285714285 * var_Ca__Ca_i), 2)); // millimolar / ms
        const double var_Irel__Qr = 0.011111111111111112 * (((var_chaste_interface__Irel__Ca_JSR > 50.0) && (var_chaste_interface__Irel__Ca_JSR < 90.0)) ? (-50.0 + var_chaste_interface__Irel__Ca_JSR) : ((var_chaste_interface__Irel__Ca_JSR >= 90.0) ? (-977.00000000000011 + 11.300000000000001 * var_chaste_interface__Irel__Ca_JSR) : (0))) * var_chaste_interface__Ca__Ca_NSR; // uM_per_ms
        const double d_dt_chaste_interface_var_Irel__Ca_JSR = 0.01 * var_chaste_interface__Ca__Ca_NSR - 0.01 * var_chaste_interface__Irel__Ca_JSR; // uM / ms
        const double var_Ca__dCa_JSR = -var_Ileak_Iup_Ixfer__jleak - var_chaste_interface__Irel__xir + var_Ileak_Iup_Ixfer__jup; // uM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_NSR = var_Ca__dCa_JSR; // uM / ms
        const double var_ICaL__Pr = _lt_0_row[9]; // dimensionless
        const double var_ICaL__Ps = _lt_0_row[10]; // dimensionless
        const double var_ICaL__k3 = _lt_0_row[11]; // per_ms
        const double var_ICaL__k3t = var_ICaL__k3; // per_ms
        const double var_ICaL__poinf = _lt_0_row[12]; // dimensionless
        const double var_ICaL__alpha = var_ICaL__poinf; // per_ms
        const double var_ICaL__beta = 1.0 - var_ICaL__poinf; // per_ms
        const double d_dt_chaste_interface_var_ICaL__c1 = 3.0 * var_ICaL__po + 0.0022399999999999998 * var_chaste_interface__ICaL__xi1ba + 0.000103615 * var_chaste_interface__ICaL__xi1ca + var_ICaL__alpha * var_chaste_interface__ICaL__c2 - (0.30413000000000001 + var_ICaL__beta + var_ICaL__k1) * var_chaste_interface__ICaL__c1; // 1 / ms
        const double var_ICaL__recov = _lt_0_row[13]; // ms
        const double var_ICaL__tauba = 450.0 + (-450.0 + var_ICaL__recov) * var_ICaL__Pr; // ms
        const double var_ICaL__k5t = (1.0 - var_ICaL__Ps) / var_ICaL__tauba; // per_ms
        const double var_ICaL__k6t = var_ICaL__Ps / var_ICaL__tauba; // per_ms
        const double var_ICaL__k4t = 1.8437500000000002 * var_ICaL__alpha * var_ICaL__k3t * var_ICaL__k5t / (var_ICaL__beta * var_ICaL__k6t); // per_ms
        const double d_dt_chaste_interface_var_ICaL__xi1ba = 0.00413 * var_chaste_interface__ICaL__c1 + 0.0019499999999999999 * var_ICaL__po + var_ICaL__k4t * var_chaste_interface__ICaL__xi2ba - (0.0023457627118644068 + var_ICaL__k3t) * var_chaste_interface__ICaL__xi1ba; // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__xi2ba = var_chaste_interface__ICaL__c2 * var_ICaL__k6t + var_ICaL__k3t * var_chaste_interface__ICaL__xi1ba - (var_ICaL__k4t + var_ICaL__k5t) * var_chaste_interface__ICaL__xi2ba; // 1 / ms
        const double var_ICaL__tauca = 0.10000000000000001 + 78.032899999999998 / (1.0 + 0.00072525373756441506 * pow(var_chaste_interface__Ca__Ca_dyad, 4)) + (-0.10000000000000001 - 78.032899999999998 / (1.0 + 0.00072525373756441506 * pow(var_chaste_interface__Ca__Ca_dyad, 4)) + var_ICaL__recov) * var_ICaL__Pr; // ms
        const double var_ICaL__k5 = (1.0 - var_ICaL__Ps) / var_ICaL__tauca; // per_ms
        const double var_ICaL__k6 = var_ICaL__Ps * var_ICaL__fca / var_ICaL__tauca; // per_ms
        const double d_dt_chaste_interface_var_ICaL__c2 = var_ICaL__beta * var_chaste_interface__ICaL__c1 + var_ICaL__k5 * var_chaste_interface__ICaL__xi2ca + var_ICaL__k5t * var_chaste_interface__ICaL__xi2ba - (var_ICaL__alpha + var_ICaL__k6 + var_ICaL__k6t) * var_chaste_interface__ICaL__c2; // 1 / ms
        const double var_ICaL__k4 = 9651.1122906915025 * var_ICaL__alpha * var_ICaL__k1 * var_ICaL__k3 * var_ICaL__k5 / (var_ICaL__beta * var_ICaL__k6); // per_ms
        const double d_dt_chaste_interface_var_ICaL__xi1ca = var_chaste_interface__ICaL__c1 * var_ICaL__k1 + var_ICaL__k4 * var_chaste_interface__ICaL__xi2ca + var_ICaL__po * var_ICaL__s1 - (0.000103615 + 1.0361500000000001e-5 * var_ICaL__s1 / var_ICaL__k1 + var_ICaL__k3) * var_chaste_interface__ICaL__xi1ca; // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__xi2ca = var_chaste_interface__ICaL__c2 * var_ICaL__k6 + var_ICaL__k3 * var_chaste_interface__ICaL__xi1ca - (var_ICaL__k4 + var_ICaL__k5) * var_chaste_interface__ICaL__xi2ca; // 1 / ms
        const double var_ICaL__rxa = ((fabs(0.075353936071760372 * var_chaste_interface__cell__V) < 0.001) ? (-0.063960518821716009 + 0.10420416882000001 * var_Ca__csm * _lt_0_row[0]) : (0.0078521942756732046 * _lt_0_row[1] * (-0.61380000000000001 + var_Ca__csm * _lt_0_row[0]) * var_chaste_interface__cell__V)); // mA_per_cm2
        const double var_ICaL__jca = NV_Ith_S(mParameters, 3) * var_ICaL__po * var_ICaL__rxa; // uM_per_ms
        const double d_dt_chaste_interface_var_IKr__xr = (-var_chaste_interface__IKr__xr + _lt_0_row[14]) * (_lt_0_row[15]); // 1 / ms
        const double var_IKs__tauxs1 = _lt_0_row[16]; // ms
        const double var_IKs__xs1ss = _lt_0_row[17]; // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs1 = (-var_chaste_interface__IKs__xs1 + var_IKs__xs1ss) / var_IKs__tauxs1; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__xs2 = 0.25 * (-var_chaste_interface__IKs__xs2 + var_IKs__xs1ss) / var_IKs__tauxs1; // 1 / ms
        const double d_dt_chaste_interface_var_INa__xh = (1.0 - var_chaste_interface__INa__xh) * _lt_0_row[18] - _lt_0_row[19] * var_chaste_interface__INa__xh; // 1 / ms
        const double d_dt_chaste_interface_var_INa__xj = (1.0 - var_chaste_interface__INa__xj) * _lt_0_row[20] - _lt_0_row[21] * var_chaste_interface__INa__xj; // 1 / ms
        const double d_dt_chaste_interface_var_INa__xm = (1.0 - var_chaste_interface__INa__xm) * _lt_0_row[22] - 0.080000000000000002 * var_chaste_interface__INa__xm * _lt_0_row[23]; // 1 / ms
        const double var_INaCa__jNaCa = 0.83999999999999997 * _lt_0_row[5] * (1.8 * pow(var_chaste_interface__Na__Na_i, 3) * _lt_0_row[3] - 2515456.0 * var_Ca__csm * _lt_0_row[4]) / ((1.0 + 0.026999999999999996 / pow(var_chaste_interface__Ca__Ca_submem, 3)) * (12405.2022 + 7.9663561662386391 * pow(var_chaste_interface__Na__Na_i, 3) + 4115811.375 * var_Ca__csm)); // uM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_submem = (-var_Ca__xbs + 50.0 * var_INaCa__jNaCa + 50.0 * var_chaste_interface__Irel__xir - 50.0 * var_Ca__jd - 50.0 * var_ICaL__jca) / (1.0 + 4.5 / pow((0.29999999999999999 + var_chaste_interface__Ca__Ca_submem), 2) + 3.2307692307692308 / pow((1 + 0.076923076923076927 * var_chaste_interface__Ca__Ca_submem), 2) + 28.199999999999999 / pow((0.59999999999999998 + var_chaste_interface__Ca__Ca_submem), 2) + 3.4285714285714284 / pow((1 + 0.14285714285714285 * var_chaste_interface__Ca__Ca_submem), 2)); // uM / ms
        const double var_INaK__xiNaK = 1.173913043478261 * _lt_0_row[2] * var_chaste_interface__Na__Na_i / (12.0 + var_chaste_interface__Na__Na_i); // nA_per_nF
        const double d_dt_chaste_interface_var_Irel__xir = -0.033333333333333333 * (1.0 - 30.0 * var_Ca__dCa_JSR / var_chaste_interface__Ca__Ca_NSR) * var_chaste_interface__Irel__xir + 2.5807899999999999 * _lt_0_row[24] * var_ICaL__po * var_Irel__Qr * fabs(var_ICaL__rxa) * _lt_0_row[25]; // uM_per_ms / ms
        const double d_dt_chaste_interface_var_Ca__Ca_dyad = 2.0 * var_chaste_interface__Ca__Ca_submem - 2.0 * var_chaste_interface__Ca__Ca_dyad + 9000.0 * var_ICaL__po * fabs(var_ICaL__rxa) + 26841.799999999999 * _lt_0_row[26] * var_ICaL__po * var_Irel__Qr * fabs(var_ICaL__rxa) * _lt_0_row[27]; // uM / ms
        const double var_Ito__rt1 = -0.20000000000000001 - 0.066666666666666666 * var_chaste_interface__cell__V; // dimensionless
        const double var_Ito__rt2 = 3.3500000000000001 + 0.10000000000000001 * var_chaste_interface__cell__V; // dimensionless
        const double var_Ito__xtos_inf = 1 / (1.0 + exp(var_Ito__rt1)); // dimensionless
        const double d_dt_chaste_interface_var_Ito__xtos = (-var_chaste_interface__Ito__xtos + var_Ito__xtos_inf) / (0.5 + 9.0 / (1.0 + exp(-var_Ito__rt1))); // 1 / ms
        const double d_dt_chaste_interface_var_Ito__xtof = _lt_0_row[28] * (-var_chaste_interface__Ito__xtof + var_Ito__xtos_inf); // 1 / ms
        const double var_Ito__ytos_inf = 1 / (1.0 + exp(var_Ito__rt2)); // dimensionless
        const double d_dt_chaste_interface_var_Ito__ytos = _lt_0_row[29] * (-var_chaste_interface__Ito__ytos + var_Ito__ytos_inf); // 1 / ms
        const double d_dt_chaste_interface_var_Ito__ytof = _lt_0_row[30] * (-var_chaste_interface__Ito__ytof + var_Ito__ytos_inf); // 1 / ms
        const double var_INaCa__xiNaCa = 8.0 * var_INaCa__jNaCa; // nA_per_nF
        const double var_INa__xina = pow(var_chaste_interface__INa__xm, 3) * (-26.541413816729872 * log(136.0 / var_chaste_interface__Na__Na_i) + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 4) * var_chaste_interface__INa__xh * var_chaste_interface__INa__xj; // nA_per_nF
        const double d_dt_chaste_interface_var_Na__Na_i = -0.000125 * var_INa__xina - 0.00037500000000000001 * var_INaCa__xiNaCa - 0.00037500000000000001 * var_INaK__xiNaK; // mM / ms

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_cell__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_cell__V = -var_INa__xina - var_INaCa__xiNaCa - var_INaK__xiNaK - 16.0 * var_ICaL__jca - 1.0000000000000002 * GetIntracellularAreaStimulus(var_chaste_interface__Environment__time) / HeartConfig::Instance()->GetCapacitance() - 0.040000000000000001 * (86.398763985973389 + var_chaste_interface__cell__V) * var_chaste_interface__Ito__xtof * var_chaste_interface__Ito__ytof + _lt_0_row[8] - 0.11 * (86.398763985973389 + var_chaste_interface__cell__V) * (0.5 / (1.0 + exp(var_Ito__rt2)) + var_chaste_interface__Ito__ytos) * NV_Ith_S(mParameters, 2) * var_chaste_interface__Ito__xtos - 0.1386 * (1.0 + 0.80000000000000004 / (1.0 + 0.125 / pow(var_Ca__Ca_i, 3))) * (-26.541413816729872 * log(7.8928799999999999 / (140.0 + 0.018329999999999999 * var_chaste_interface__Na__Na_i)) + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 1) * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 - 1.0 * _lt_0_row[7] * (86.398763985973389 + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 0) * NV_Ith_S(mParameters, 5) * var_chaste_interface__IKr__xr; // mV / ms
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_cell__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_Ca__Ca_i_converted;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_INa__xm;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_INa__xh;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_INa__xj;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_ICaL__c1;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_ICaL__c2;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_ICaL__xi1ca;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_ICaL__xi1ba;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_ICaL__xi2ca;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_ICaL__xi2ba;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_IKr__xr;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_IKs__xs1;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_IKs__xs2;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_Ito__xtos;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_Ito__ytos;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_Ito__xtof;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_Ito__ytof;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_Irel__Ca_JSR;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_Irel__xir;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_Na__Na_i;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_Ca__Ca_dyad;
        NV_Ith_S(rDY,22) = d_dt_chaste_interface_var_Ca__Ca_submem;
        NV_Ith_S(rDY,23) = d_dt_chaste_interface_var_Ca__Ca_NSR;
        NV_Ith_S(rDY,24) = d_dt_chaste_interface_var_Ca__tropi;
        NV_Ith_S(rDY,25) = d_dt_chaste_interface_var_Ca__trops;
    }

    void Cellmahajan_2008FromCellMLCvodeOpt::EvaluateAnalyticJacobian(double var_chaste_interface__Environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -87.169816169406
        double var_chaste_interface__Ca__Ca_i_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000256752008084
        double var_chaste_interface__INa__xm = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__ICaL__c1 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 1.8211252e-05
        double var_chaste_interface__ICaL__c2 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.979322592773
        double var_chaste_interface__ICaL__xi1ca = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.001208153482
        double var_chaste_interface__ICaL__xi1ba = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.3616596e-05
        double var_chaste_interface__ICaL__xi2ca = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.004173008466
        double var_chaste_interface__ICaL__xi2ba = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.015242594688
        double var_chaste_interface__IKr__xr = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.993331326442
        double var_chaste_interface__Irel__Ca_JSR = NV_Ith_S(rY, 18);
        // Units: uM; Initial value: 97.505463697266
        double var_chaste_interface__Irel__xir = NV_Ith_S(rY, 19);
        // Units: uM_per_ms; Initial value: 0.006679257264
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 20);
        // Units: mM; Initial value: 11.441712311614
        double var_chaste_interface__Ca__Ca_dyad = NV_Ith_S(rY, 21);
        // Units: uM; Initial value: 1.716573130685
        double var_chaste_interface__Ca__Ca_submem = NV_Ith_S(rY, 22);
        // Units: uM; Initial value: 0.226941113355
        double var_chaste_interface__Ca__Ca_NSR = NV_Ith_S(rY, 23);
        // Units: uM; Initial value: 104.450004990523
        double var_chaste_interface__Ca__tropi = NV_Ith_S(rY, 24);
        // Units: uM; Initial value: 22.171689894953
        double var_chaste_interface__Ca__trops = NV_Ith_S(rY, 25);
        // Units: uM; Initial value: 19.864701949854
        
        // Lookup table indexing
        const bool _oob_0 = Cellmahajan_2008FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellmahajan_2008FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);
const double var_x0 = exp(6.4833277106546534 + 0.23849999999999999 * var_chaste_interface__cell__V);
        const double var_x1 = 1.0 + var_x0;
        const double var_x2 = 1 / var_x1;
        const double var_x3 = exp(-46.879352217986117 - 0.51429999999999998 * var_chaste_interface__cell__V);
        const double var_x4 = 1.0 + var_x3;
        const double var_x5 = 1 / var_x4;
        const double var_x6 = exp(-31.363518823866141 + 0.061749999999999999 * var_chaste_interface__cell__V);
        const double var_x7 = exp(7.3793810433533835 + 0.080320000000000003 * var_chaste_interface__cell__V);
        const double var_x8 = var_x6 + 0.49124000000000001 * var_x7;
        const double var_x9 = var_x5 * var_x8;
        const double var_x10 = 1 / (var_x9 + 1.02 * var_x2);
        const double var_x11 = 0.10000000000000001 * var_chaste_interface__cell__V;
        const double var_x12 = exp(3.3500000000000001 + var_x11);
        const double var_x13 = 1.0 + var_x12;
        const double var_x14 = 1 / var_x13;
        const double var_x15 = NV_Ith_S(mParameters, 2) * var_chaste_interface__Ito__xtos;
        const double var_x16 = 0.075353936071760372 * var_chaste_interface__cell__V;
        const double var_x17 = exp(var_x16);
        const double var_x18 = var_x17 * var_chaste_interface__Ca__Ca_submem;
        const double var_x19 = fabs(var_x16) < 0.001;
        const double var_x20 = -1.0 + var_x17;
        const double var_x21 = 1 / var_x20;
        const double var_x22 = -0.61380000000000001 + 0.001 * var_x18;
        const double var_x23 = 0.0078521942756732046 * var_x21 * var_x22;
        const double var_x24 = var_x21 * var_chaste_interface__cell__V;
        const double var_x25 = ((var_x19) ? (7.8521942756732062e-6 * var_x18) : (var_x23 + 5.916937454721214e-7 * var_x18 * var_x24 - 0.00059169374547212144 * var_x17 * var_x22 * var_chaste_interface__cell__V / pow(var_x20, 2)));
        const double var_x26 = (-16.0 + 16.0 * var_chaste_interface__ICaL__c1 + 16.0 * var_chaste_interface__ICaL__c2 + 16.0 * var_chaste_interface__ICaL__xi1ba + 16.0 * var_chaste_interface__ICaL__xi1ca + 16.0 * var_chaste_interface__ICaL__xi2ba + 16.0 * var_chaste_interface__ICaL__xi2ca) * NV_Ith_S(mParameters, 3);
        const double var_x27 = pow(var_chaste_interface__Ca__Ca_i_converted, 3);
        const double var_x28 = 1.0 + 1.2500000000000001e-10 / var_x27;
        const double var_x29 = -0.1386 - 0.11088000000000001 / var_x28;
        const double var_x30 = var_x29 * NV_Ith_S(mParameters, 1) * var_chaste_interface__IKs__xs2;
        const double var_x31 = var_x30 * var_chaste_interface__IKs__xs1;
        const double var_x32 = pow(var_chaste_interface__INa__xm, 3);
        const double var_x33 = var_x32 * NV_Ith_S(mParameters, 4) * var_chaste_interface__INa__xj;
        const double var_x34 = var_x33 * var_chaste_interface__INa__xh;
        const double var_x35 = 86.398763985973389 + var_chaste_interface__cell__V;
        const double var_x36 = var_x0 / pow(var_x1, 2);
        const double var_x37 = pow(var_chaste_interface__Na__Na_i, 3);
        const double var_x38 = _lt_0_row[3];
        const double var_x39 = var_x37 * var_x38;
        const double var_x40 = _lt_0_row[4];
        const double var_x41 = var_x40 * var_chaste_interface__Ca__Ca_submem;
        const double var_x42 = 1 / (12405.2022 + 7.9663561662386391 * var_x37 + 4115.8113750000002 * var_chaste_interface__Ca__Ca_submem);
        const double var_x43 = 1.0 + 0.20000000000000001 * var_x40;
        const double var_x44 = 1 / var_x43;
        const double var_x45 = 1.0 + 0.026999999999999996 / pow(var_chaste_interface__Ca__Ca_submem, 3);
        const double var_x46 = 1 / var_x45;
        const double var_x47 = var_x44 * var_x46;
        const double var_x48 = var_x42 * var_x47;
        const double var_x49 = var_x48 * (0.023736489862604515 * var_x39 + 61.603590949980969 * var_x41);
        const double var_x50 = 1 / (12.0 + var_chaste_interface__Na__Na_i);
        const double var_x51 = exp(-0.0037676968035880187 * var_chaste_interface__cell__V);
        const double var_x52 = exp(2.0208023774145616);
        const double var_x53 = exp(-0.037676968035880186 * var_chaste_interface__cell__V);
        const double var_x54 = 1.0 + 0.1245 * var_x51 + 0.036499999999999998 * var_x53 * (-0.14285714285714285 + 0.14285714285714285 * var_x52);
        const double var_x55 = var_x50 * (0.00046907825204670832 * var_x51 + 0.037676968035880186 * var_x53 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x52)) * var_chaste_interface__Na__Na_i / pow(var_x54, 2);
        const double var_x56 = NV_Ith_S(mParameters, 0) * NV_Ith_S(mParameters, 5) * var_chaste_interface__IKr__xr;
        const double var_x57 = exp(1.4732142857142858 + 0.044642857142857144 * var_chaste_interface__cell__V);
        const double var_x58 = 1.0 + var_x57;
        const double var_x59 = 1.0 / var_x58;
        const double var_x60 = 1.8 * var_x39 - 2515.4560000000001 * var_x41;
        const double var_x61 = var_x42 * var_x60;
        const double var_x62 = var_x40 * var_x46 * var_x61 / pow(var_x43, 2);
        const double var_x63 = -9.5038640384570741 - 0.11 * var_chaste_interface__cell__V;
        const double var_x64 = var_x15 * var_x63;
        const double var_x65 = var_x12 / pow(var_x13, 2);
        const double var_x66 = -26.541413816729872 * log(7.8928799999999999 / (140.0 + 0.018329999999999999 * var_chaste_interface__Na__Na_i)) + var_chaste_interface__cell__V;
        const double var_x67 = var_x66 * NV_Ith_S(mParameters, 1) * var_chaste_interface__IKs__xs1;
        const double var_x68 = 1 / var_chaste_interface__Na__Na_i;
        const double var_x69 = -26.541413816729872 * log(136.0 * var_x68) + var_chaste_interface__cell__V;
        const double var_x70 = var_x69 * NV_Ith_S(mParameters, 4) * var_chaste_interface__INa__xh;
        const double var_x71 = var_x70 * pow(var_chaste_interface__INa__xm, 2) * var_chaste_interface__INa__xj;
        const double var_x72 = var_x33 * var_x69;
        const double var_x73 = var_x32 * var_x70;
        const double var_x74 = 0.00010420416882000001 * var_x17;
        const double var_x75 = ((var_x19) ? (-0.063960518821716009 + var_x74 * var_chaste_interface__Ca__Ca_submem) : (var_x23 * var_chaste_interface__cell__V));
        const double var_x76 = var_x75 * NV_Ith_S(mParameters, 3);
        const double var_x77 = 16.0 * var_x76;
        const double var_x78 = -3.4559505594389357 - 0.040000000000000001 * var_chaste_interface__cell__V;
        const double var_x79 = 1 / var_x54;
        const double var_x80 = var_x50 * var_x79;
        const double var_x81 = var_x79 * var_chaste_interface__Na__Na_i / pow((1 + 0.083333333333333329 * var_chaste_interface__Na__Na_i), 2);
        const double var_x82 = pow(var_chaste_interface__Na__Na_i, 2);
        const double var_x83 = var_x47 * var_x60 / pow((1 + 0.0006421786632577935 * var_x37 + 0.33178107931203249 * var_chaste_interface__Ca__Ca_submem), 2);
        const double var_x84 = var_x82 * var_x83;
        const double var_x85 = var_x34 * var_x68;
        const double var_x86 = var_x38 * var_x48 * var_x82;
        const double var_x87 = ((var_x19) ? (var_x74) : (7.8521942756732062e-6 * var_x17 * var_x24));
        const double var_x88 = var_x40 * var_x48;
        const double var_x89 = var_x44 * var_x61 / (pow(var_x45, 2) * pow(var_chaste_interface__Ca__Ca_submem, 4));
        const double var_x90 = 32.699999999999996 * var_chaste_interface__Ca__tropi;
        const double var_x91 = pow(var_chaste_interface__Ca__Ca_i_converted, 2);
        const double var_x92 = 0.80000000000000004 * var_x27 / pow((2.4999999999999999e-7 + var_x91), 2);
        const double var_x93 = pow(var_chaste_interface__Ca__Ca_NSR, 2);
        const double var_x94 = 1 / (2500.0 + var_x93);
        const double var_x95 = var_x93 * var_x94;
        const double var_x96 = 0.02069 * var_x95;
        const double var_x97 = 1 / (0.25 + 1000000.0 * var_x91);
        const double var_x98 = 800000.0 * var_x97 * var_chaste_interface__Ca__Ca_i_converted;
        const double var_x99 = 0.012999999999999999 + var_chaste_interface__Ca__Ca_i_converted;
        const double var_x100 = 0.00059999999999999995 + var_chaste_interface__Ca__Ca_i_converted;
        const double var_x101 = 0.00029999999999999997 + var_chaste_interface__Ca__Ca_i_converted;
        const double var_x102 = 0.0070000000000000001 + var_chaste_interface__Ca__Ca_i_converted;
        const double var_x103 = 1.0 + 0.00054600000000000004 / pow(var_x99, 2) + 2.8200000000000001e-5 / pow(var_x100, 2) + 4.5000000000000001e-6 / pow(var_x101, 2) + 0.00016800000000000002 / pow(var_x102, 2);
        const double var_x104 = 1 / var_x103;
        const double var_x105 = 0.001 * var_x104;
        const double var_x106 = 32.699999999999996 * var_chaste_interface__Ca__Ca_i_converted;
        const double var_x107 = 400000.0 * var_x91 * var_x97;
        const double var_x108 = 16.667000000000002 * var_chaste_interface__Ca__Ca_NSR - 1000.0 * var_chaste_interface__Ca__Ca_i_converted;
        const double var_x109 = 2.069e-5 * var_x108 * var_x95;
        const double var_x110 = 0.00034484023000000001 * var_x95;
        const double var_x111 = 4.138e-5 * var_x108 * var_x94 * var_chaste_interface__Ca__Ca_NSR;
        const double var_x112 = 6.6208000000000002e-12 * var_x108 * pow(var_chaste_interface__Ca__Ca_NSR, 3) / pow((1 + 0.00040000000000000002 * var_x93), 2);
        const double var_x113 = 1.0 - var_chaste_interface__INa__xm;
        const double var_x114 = -0.10000000000000001 * var_chaste_interface__cell__V;
        const double var_x115 = exp(-4.7130000000000001 + var_x114);
        const double var_x116 = 1.0 - var_x115;
        const double var_x117 = 0.32000000000000001 / var_x116;
        const double var_x118 = _lt_0_row[23];
        const double var_x119 = 0.0072727272727272727 * var_x118 * var_chaste_interface__INa__xm;
        const double var_x120 = 47.130000000000003 + var_chaste_interface__cell__V;
        const double var_x121 = fabs(var_x120) > 0.001;
        const double var_x122 = -0.080000000000000002 * var_x118;
        const double var_x123 = exp(0.079000000000000001 * var_chaste_interface__cell__V);
        const double var_x124 = exp(0.34999999999999998 * var_chaste_interface__cell__V);
        const double var_x125 = exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__cell__V);
        const double var_x126 = var_chaste_interface__cell__V < -40.0;
        const double var_x127 = exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__cell__V);
        const double var_x128 = 1.0 + var_x127;
        const double var_x129 = 1.0 - var_chaste_interface__INa__xj;
        const double var_x130 = exp(0.24440000000000001 * var_chaste_interface__cell__V);
        const double var_x131 = exp(-0.043909999999999998 * var_chaste_interface__cell__V);
        const double var_x132 = -127140.0 * var_x130 - 3.4740000000000003e-5 * var_x131;
        const double var_x133 = var_x129 * var_x132;
        const double var_x134 = exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V);
        const double var_x135 = 1.0 + var_x134;
        const double var_x136 = 1 / var_x135;
        const double var_x137 = exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V);
        const double var_x138 = 1.0 + var_x137;
        const double var_x139 = exp(-0.01052 * var_chaste_interface__cell__V);
        const double var_x140 = var_x139 / var_x138;
        const double var_x141 = 37.780000000000001 + var_chaste_interface__cell__V;
        const double var_x142 = var_x136 * var_x141;
        const double var_x143 = exp(-3.2000000000000002 + var_x114);
        const double var_x144 = 1.0 + var_x143;
        const double var_x145 = exp(-2.5349999999999999e-7 * var_chaste_interface__cell__V);
        const double var_x146 = var_x145 / var_x144;
        const double var_x147 = exp(-0.125 * var_chaste_interface__cell__V);
        const double var_x148 = 1.0 + var_x147;
        const double var_x149 = var_x147 / pow(var_x148, 2);
        const double var_x150 = 0.125 * var_x149;
        const double var_x151 = var_x150 * var_chaste_interface__ICaL__c1;
        const double var_x152 = 1 / var_x148;
        const double var_x153 = var_x152;
        const double var_x154 = pow(var_chaste_interface__Ca__Ca_dyad, 3);
        const double var_x155 = 1 / var_x154;
        const double var_x156 = 1 / (1.0 + 27.0 * var_x155);
        const double var_x157 = pow(var_chaste_interface__Ca__Ca_dyad, 4);
        const double var_x158 = 1 / var_x157;
        const double var_x159 = var_x158 / pow((0.037037037037037035 + var_x155), 2);
        const double var_x160 = 0.002685333333333333 * var_x159 * var_chaste_interface__ICaL__c1;
        const double var_x161 = exp(-10.0 - 0.25 * var_chaste_interface__cell__V);
        const double var_x162 = 1.0 + var_x161;
        const double var_x163 = 1.0 - 1 / var_x162;
        const double var_x164 = exp(0.064102564102564111 * var_chaste_interface__cell__V);
        const double var_x165 = 4954.0 * var_x164;
        const double var_x166 = -440.0 + var_x165;
        const double var_x167 = var_x163 * var_x166;
        const double var_x168 = 1 / (450.0 + var_x167);
        const double var_x169 = exp(-3.5335689045936394 - 0.088339222614840993 * var_chaste_interface__cell__V);
        const double var_x170 = 1.0 + var_x169;
        const double var_x171 = 0.088339222614840993 * var_x169 / pow(var_x170, 2);
        const double var_x172 = var_x168 * var_x171;
        const double var_x173 = 1 / var_x170;
        const double var_x174 = -317.5641025641026 * var_x163 * var_x164;
        const double var_x175 = 0.25 * var_x161 / pow(var_x162, 2);
        const double var_x176 = 4.9382716049382717e-6 * (var_x174 + var_x166 * var_x175) / pow((1 + 0.0022222222222222222 * var_x167), 2);
        const double var_x177 = var_x173 * var_x176;
        const double var_x178 = 1.0 + 0.00072525373756441506 * var_x157;
        const double var_x179 = 1 / var_x178;
        const double var_x180 = 78.032899999999998 * var_x179;
        const double var_x181 = 9.9000000000000004 + var_x165 - var_x180;
        const double var_x182 = var_x163 * var_x181;
        const double var_x183 = 1 / (0.10000000000000001 + var_x180 + var_x182);
        const double var_x184 = var_x156 * var_x183;
        const double var_x185 = var_x171 * var_x184;
        const double var_x186 = 0.00016422697956757767 / pow((0.0012815107473898831 + var_x179 + 0.012815107473898831 * var_x182), 2);
        const double var_x187 = var_x186 * (var_x174 + var_x175 * var_x181);
        const double var_x188 = var_x156 * var_x173;
        const double var_x189 = var_x187 * var_x188;
        const double var_x190 = var_x173;
        const double var_x191 = 1.0 - var_x190;
        const double var_x192 = var_x176 * var_x191;
        const double var_x193 = var_x187 * var_x191;
        const double var_x194 = var_x171 * var_x183;
        const double var_x195 = -var_x153;
        const double var_x196 = 1.0 + var_x195;
        const double var_x197 = var_x168 * var_x190;
        const double var_x198 = var_x184 * var_x190;
        const double var_x199 = var_x183 * var_x191;
        const double var_x200 = var_x168 * var_x191;
        const double var_x201 = 0.22637460951196098 * var_x154 / pow(var_x178, 2);
        const double var_x202 = var_x186 * (var_x201 - var_x163 * var_x201);
        const double var_x203 = var_x188 * var_x202;
        const double var_x204 = 0.1111111111111111 * var_x159 * var_x173 * var_x183;
        const double var_x205 = var_x191 * var_chaste_interface__ICaL__xi2ca;
        const double var_x206 = var_x202 * var_x205;
        const double var_x207 = exp(-13.333333333333334 - 0.33333333333333331 * var_chaste_interface__cell__V);
        const double var_x208 = 1.0 + var_x207;
        const double var_x209 = var_x207 / pow(var_x208, 2);
        const double var_x210 = 0.1111111111111111 * var_x209;
        const double var_x211 = var_x210 * var_chaste_interface__ICaL__xi1ca;
        const double var_x212 = 0.33333333333333331 / var_x208;
        const double var_x213 = 0.33333333333333331 - var_x212;
        const double var_x214 = 1 / var_x196;
        const double var_x215 = var_x152 * var_x214;
        const double var_x216 = var_x169 * var_x213 * var_x215;
        const double var_x217 = 20.604954226274931 * var_x216;
        const double var_x218 = var_x173 * var_x217;
        const double var_x219 = var_x149 * var_x214;
        const double var_x220 = var_x170 * var_x213;
        const double var_x221 = 29.156010230179024 * var_x205 * var_x220;
        const double var_x222 = var_x147 / (pow(var_x148, 3) * pow(var_x196, 2));
        const double var_x223 = -0.018268800000000002 * var_x156;
        const double var_x224 = 41.377027474346242 + 1117.1797418073486 * var_x155;
        const double var_x225 = var_x191 * var_x220;
        const double var_x226 = var_x215 * var_x225;
        const double var_x227 = 233.2480818414322 * var_x226;
        const double var_x228 = 1.0 - var_chaste_interface__ICaL__c1 - var_chaste_interface__ICaL__c2 - var_chaste_interface__ICaL__xi1ba - var_chaste_interface__ICaL__xi1ca - var_chaste_interface__ICaL__xi2ba - var_chaste_interface__ICaL__xi2ca;
        const double var_x229 = var_x210 * var_chaste_interface__ICaL__xi1ba;
        const double var_x230 = 0.16287544169611309 * var_x216;
        const double var_x231 = var_x173 * var_x230;
        const double var_x232 = var_x191 * var_x230;
        const double var_x233 = 0.23046875000000003 * var_x225;
        const double var_x234 = var_x219 * var_x233;
        const double var_x235 = var_x222 * var_x233;
        const double var_x236 = var_x170 * var_x191 * var_x209 * var_x215;
        const double var_x237 = 0.20486111111111113 * var_x236;
        const double var_x238 = 1.8437500000000002 * var_x226;
        const double var_x239 = 29.156010230179024 * var_x225;
        const double var_x240 = exp(-6.666666666666667 - 0.13333333333333333 * var_chaste_interface__cell__V);
        const double var_x241 = 1.0 + var_x240;
        const double var_x242 = -var_chaste_interface__IKr__xr + 1 / var_x241;
        const double var_x243 = exp(1.45 + 0.14499999999999999 * var_chaste_interface__cell__V);
        const double var_x244 = -1.0 + var_x243;
        const double var_x245 = 0.00060999999999999997 / var_x244;
        const double var_x246 = 10.0 + var_chaste_interface__cell__V;
        const double var_x247 = var_x245 - 8.8449999999999995e-5 * var_x243 * var_x246 / pow(var_x244, 2);
        const double var_x248 = exp(-0.86099999999999999 - 0.123 * var_chaste_interface__cell__V);
        const double var_x249 = 1.0 - var_x248;
        const double var_x250 = 0.0013799999999999999 / var_x249;
        const double var_x251 = 7.0 + var_chaste_interface__cell__V;
        const double var_x252 = var_x250 - 0.00016973999999999998 * var_x248 * var_x251 / pow(var_x249, 2);
        const double var_x253 = var_x245 * var_x246;
        const double var_x254 = var_x250 * var_x251;
        const double var_x255 = var_x240 / pow(var_x241, 2);
        const double var_x256 = 0.13333333333333333 * var_x255;
        const double var_x257 = fabs(var_x251) > 0.001;
        const double var_x258 = fabs(var_x246) > 0.001;
        const double var_x259 = (var_x257) && (var_x258);
        const double var_x260 = -var_x253;
        const double var_x261 = -var_x254;
        const double var_x262 = exp(0.089820359281437126 - 0.059880239520958084 * var_chaste_interface__cell__V);
        const double var_x263 = 1.0 + var_x262;
        const double var_x264 = 1 / var_x263;
        const double var_x265 = 30.0 + var_chaste_interface__cell__V;
        const double var_x266 = fabs(var_x265) < 0.014556040756914121;
        const double var_x267 = exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__cell__V);
        const double var_x268 = -1.0 + var_x267;
        const double var_x269 = 0.00013100000000000001 / var_x268;
        const double var_x270 = exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__cell__V);
        const double var_x271 = 1.0 - var_x270;
        const double var_x272 = 7.1899999999999999e-5 / var_x271;
        const double var_x273 = ((var_x266) ? (0) : (var_x269 + var_x272 - 8.9997000000000013e-6 * var_x265 * var_x267 / pow(var_x268, 2) - 1.0641199999999999e-5 * var_x265 * var_x270 / pow(var_x271, 2)));
        const double var_x274 = ((var_x266) ? (0.0023926521499665608) : (var_x265 * var_x269 + var_x265 * var_x272));
        const double var_x275 = var_x262 * var_x274 / pow(var_x263, 2);
        const double var_x276 = 0.066666666666666666 * var_chaste_interface__cell__V;
        const double var_x277 = exp(0.20000000000000001 + var_x276);
        const double var_x278 = 1.0 + var_x277;
        const double var_x279 = 1 / var_x278;
        const double var_x280 = 1 / (0.5 + 9.0 * var_x279);
        const double var_x281 = exp(-0.20000000000000001 - var_x276);
        const double var_x282 = 1.0 + var_x281;
        const double var_x283 = 0.066666666666666666 * var_x281 / pow(var_x282, 2);
        const double var_x284 = 1 / var_x282;
        const double var_x285 = exp(6.0 + var_x11);
        const double var_x286 = 1.0 + var_x285;
        const double var_x287 = 1 / var_x286;
        const double var_x288 = 1 / (30.0 + 3000.0 * var_x287);
        const double var_x289 = 0.10000000000000001 * var_x65;
        const double var_x290 = var_x14;
        const double var_x291 = exp(-0.0011111111111111111 * pow(var_chaste_interface__cell__V, 2));
        const double var_x292 = 1 / (1.5 + 3.5 * var_x291);
        const double var_x293 = 1 / (20.0 + 20.0 * var_x14);
        const double var_x294 = _lt_0_row[25];
        const double var_x295 = 1.0 + var_x294;
        const double var_x296 = fabs(var_x75);
        const double var_x297 = 0.011111111111111112 * var_chaste_interface__Ca__Ca_NSR;
        const double var_x298 = (var_chaste_interface__Irel__Ca_JSR > 50.0) && (var_chaste_interface__Irel__Ca_JSR < 90.0);
        const double var_x299 = var_chaste_interface__Irel__Ca_JSR >= 90.0;
        const double var_x300 = ((var_x298) ? (var_x297 * (-50.0 + var_chaste_interface__Irel__Ca_JSR)) : ((var_x299) ? (var_x297 * (-977.00000000000011 + 11.300000000000001 * var_chaste_interface__Irel__Ca_JSR)) : (0)));
        const double var_x301 = var_x296 * var_x300;
        const double var_x302 = 0.1290395 * var_x228;
        const double var_x303 = 1 / var_x295;
        const double var_x304 = var_x294 * var_x301 * var_x303;
        const double var_x305 = 2.5807899999999999 * var_x294 * var_x303;
        const double var_x306 = Signum(var_x75);
        const double var_x307 = var_x228 * var_x300 * var_x306;
        const double var_x308 = var_x305 * var_x307;
        const double var_x309 = var_x96 + var_x98 - var_x92;
        const double var_x310 = 1 / var_chaste_interface__Ca__Ca_NSR;
        const double var_x311 = var_x310 * var_chaste_interface__Irel__xir;
        const double var_x312 = -2.5807899999999999 * var_x304;
        const double var_x313 = var_x228 * var_x296;
        const double var_x314 = var_x313 * ((var_x298) ? (var_x297) : ((var_x299) ? (0.12555555555555556 * var_chaste_interface__Ca__Ca_NSR) : (0)));
        const double var_x315 = var_x107 - var_x109 - var_chaste_interface__Irel__xir;
        const double var_x316 = var_x112 - var_x110 - var_x111;
        const double var_x317 = var_x313 * ((var_x298) ? (-0.55555555555555558 + 0.011111111111111112 * var_chaste_interface__Irel__Ca_JSR) : ((var_x299) ? (-10.855555555555556 + 0.12555555555555556 * var_chaste_interface__Irel__Ca_JSR) : (0)));
        const double var_x318 = var_x306 * (9000.0 - 9000.0 * var_chaste_interface__ICaL__c1 - 9000.0 * var_chaste_interface__ICaL__c2 - 9000.0 * var_chaste_interface__ICaL__xi1ba - 9000.0 * var_chaste_interface__ICaL__xi1ca - 9000.0 * var_chaste_interface__ICaL__xi2ba - 9000.0 * var_chaste_interface__ICaL__xi2ca);
        const double var_x319 = _lt_0_row[27];
        const double var_x320 = 1.0 + var_x319;
        const double var_x321 = 9598.6276799999996 * var_x228;
        const double var_x322 = 1 / var_x320;
        const double var_x323 = var_x301 * var_x319 * var_x322;
        const double var_x324 = 26841.799999999999 * var_x319 * var_x322;
        const double var_x325 = var_x307 * var_x324;
        const double var_x326 = -9000.0 * var_x296 - 26841.799999999999 * var_x323;
        const double var_x327 = (-50.0 + 50.0 * var_chaste_interface__ICaL__c1 + 50.0 * var_chaste_interface__ICaL__c2 + 50.0 * var_chaste_interface__ICaL__xi1ba + 50.0 * var_chaste_interface__ICaL__xi1ca + 50.0 * var_chaste_interface__ICaL__xi2ba + 50.0 * var_chaste_interface__ICaL__xi2ca) * NV_Ith_S(mParameters, 3);
        const double var_x328 = 0.29999999999999999 + var_chaste_interface__Ca__Ca_submem;
        const double var_x329 = pow(var_x328, (-2));
        const double var_x330 = 1 + 0.076923076923076927 * var_chaste_interface__Ca__Ca_submem;
        const double var_x331 = pow(var_x330, (-2));
        const double var_x332 = 0.59999999999999998 + var_chaste_interface__Ca__Ca_submem;
        const double var_x333 = pow(var_x332, (-2));
        const double var_x334 = 1 + 0.14285714285714285 * var_chaste_interface__Ca__Ca_submem;
        const double var_x335 = pow(var_x334, (-2));
        const double var_x336 = 1 / (1.0 + 4.5 * var_x329 + 3.2307692307692308 * var_x331 + 28.199999999999999 * var_x333 + 3.4285714285714284 * var_x335);
        const double var_x337 = var_x336;
        const double var_x338 = 50.0 * var_x336;
        const double var_x339 = var_x338 * var_x76;
        const double var_x340 = 0.0327 * var_chaste_interface__Ca__trops;
        const double var_x341 = 0.0327 * var_chaste_interface__Ca__Ca_submem;
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (var_x31 - var_x34 - 6.7199999999999998 * var_x49 - 1.173913043478261 * var_x55 - 0.032914599276144929 * var_x62 + var_x15 * (-0.055 * var_x14 - 0.11 * var_chaste_interface__Ito__ytos) + var_x25 * var_x26 - var_x56 * var_x59 - 0.040000000000000001 * var_chaste_interface__Ito__xtof * var_chaste_interface__Ito__ytof - 0.30599999999999999 * var_x10 * var_x2 - 0.050000000000000003 * var_x64 * var_x65 + 0.07298099999999999 * var_x10 * var_x35 * var_x36 + 0.044642857142857144 * var_x35 * var_x56 * var_x57 / pow(var_x58, 2) - 0.29411764705882354 * var_x2 * var_x35 * (0.24326999999999999 * var_x36 - var_x5 * (0.061749999999999999 * var_x6 + 0.039456396800000001 * var_x7) - 0.51429999999999998 * var_x3 * var_x8 / pow(var_x4, 2)) / pow((var_x2 + 0.98039215686274506 * var_x9), 2));
        IJth(rJacobian, 2, 0) = ((var_x121) ? (var_x119 + var_x113 * var_x117 - 0.032000000000000001 * var_x113 * var_x115 * var_x120 / pow(var_x116, 2)) : (var_x119));
        IJth(rJacobian, 3, 0) = ((var_x126) ? ((-0.28123999999999999 * var_x123 - 108500.0 * var_x124) * var_chaste_interface__INa__xh - 0.14705882352941177 * var_x125 * (0.13500000000000001 - 0.13500000000000001 * var_chaste_interface__INa__xh)) : (-0.693000693000693 * var_x127 * var_chaste_interface__INa__xh / pow(var_x128, 2)));
        IJth(rJacobian, 4, 0) = ((var_x126) ? (var_x133 * var_x136 + 0.001275024 * var_x140 * var_chaste_interface__INa__xj + var_x129 * var_x142 * (1.5254334000000001e-6 * var_x131 - 31073.016 * var_x130) - 0.311 * var_x133 * var_x134 * var_x141 / pow(var_x135, 2) - 0.016701360000000002 * var_x137 * var_x139 * var_chaste_interface__INa__xj / pow(var_x138, 2)) : (7.6049999999999996e-8 * var_x146 * var_chaste_interface__INa__xj - 0.029999999999999999 * var_x143 * var_x145 * var_chaste_interface__INa__xj / pow(var_x144, 2)));
        IJth(rJacobian, 5, 0) = var_x151 + var_x150 * var_chaste_interface__ICaL__c2;
        IJth(rJacobian, 6, 0) = -var_x151 + var_x192 * var_chaste_interface__ICaL__xi2ba + var_x193 * var_chaste_interface__ICaL__xi2ca + (-var_x150 - var_x172 - var_x177 - var_x185 - var_x189) * var_chaste_interface__ICaL__c2 - var_x172 * var_chaste_interface__ICaL__xi2ba - var_x194 * var_chaste_interface__ICaL__xi2ca;
        IJth(rJacobian, 7, 0) = var_x211 + var_x219 * var_x221 + var_x221 * var_x222 - var_x205 * var_x217 - var_x218 * var_chaste_interface__ICaL__xi2ca - 25.91645353793691 * var_x170 * var_x205 * var_x209 * var_x215;
        IJth(rJacobian, 8, 0) = var_x229 + var_x234 * var_chaste_interface__ICaL__xi2ba + var_x235 * var_chaste_interface__ICaL__xi2ba - var_x231 * var_chaste_interface__ICaL__xi2ba - var_x232 * var_chaste_interface__ICaL__xi2ba - var_x237 * var_chaste_interface__ICaL__xi2ba;
        IJth(rJacobian, 9, 0) = -var_x211 + var_x185 * var_chaste_interface__ICaL__c2 + var_x189 * var_chaste_interface__ICaL__c2 + (var_x194 + var_x218 - var_x193 + 25.91645353793691 * var_x236 + var_x191 * var_x217 - var_x219 * var_x239 - var_x222 * var_x239) * var_chaste_interface__ICaL__xi2ca;
        IJth(rJacobian, 10, 0) = -var_x229 + var_x172 * var_chaste_interface__ICaL__c2 + var_x177 * var_chaste_interface__ICaL__c2 + (var_x172 + var_x231 + var_x232 + var_x237 - var_x192 - var_x234 - var_x235) * var_chaste_interface__ICaL__xi2ba;
        IJth(rJacobian, 11, 0) = ((var_x259) ? (var_x242 * (var_x247 + var_x252) + var_x256 * (var_x253 + var_x254)) : ((var_x258) ? (var_x242 * var_x247 + var_x256 * (0.011219512195121951 + var_x253)) : ((var_x257) ? (var_x242 * var_x252 + var_x256 * (0.0042068965517241376 + var_x254)) : (0.0020568544995794784 * var_x255))));
        IJth(rJacobian, 12, 0) = 0.059880239520958084 * var_x275 + var_x273 * (-var_chaste_interface__IKs__xs1 + var_x264);
        IJth(rJacobian, 13, 0) = 0.014970059880239521 * var_x275 + var_x273 * (0.25 * var_x264 - 0.25 * var_chaste_interface__IKs__xs2);
        IJth(rJacobian, 14, 0) = var_x280 * var_x283 + 0.0074074074074074077 * var_x277 * (var_x284 - var_chaste_interface__Ito__xtos) / (pow(var_x278, 2) * pow((0.055555555555555552 + var_x279), 2));
        IJth(rJacobian, 15, 0) = -var_x288 * var_x289 + 3.3333333333333335e-5 * var_x285 * (var_x290 - var_chaste_interface__Ito__ytos) / (pow(var_x286, 2) * pow((0.01 + var_x287), 2));
        IJth(rJacobian, 16, 0) = var_x283 * var_x292 + 0.00063492063492063492 * var_x291 * (var_x284 - var_chaste_interface__Ito__xtof) * var_chaste_interface__cell__V / pow((0.42857142857142855 + var_x291), 2);
        IJth(rJacobian, 17, 0) = -var_x289 * var_x293 + 0.0050000000000000001 * var_x65 * (var_x290 - var_chaste_interface__Ito__ytof) / pow((1 + var_x14), 2);
        IJth(rJacobian, 19, 0) = var_x25 * var_x308 - var_x302 * var_x304 + var_x301 * var_x302 * pow(var_x294, 2) / pow(var_x295, 2);
        IJth(rJacobian, 20, 0) = -0.000125 * var_x34 - 1.2342974728554348e-5 * var_x62 - 0.0025200000000000001 * var_x49 - 0.00044021739130434783 * var_x55;
        IJth(rJacobian, 21, 0) = var_x25 * var_x318 + var_x25 * var_x325 - var_x321 * var_x323 + var_x301 * var_x321 * pow(var_x319, 2) / pow(var_x320, 2);
        IJth(rJacobian, 22, 0) = var_x337 * (42.0 * var_x49 + 0.20571624547590581 * var_x62 + var_x25 * var_x327);
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (-4.1580000000000007e-11 * var_x67 * var_chaste_interface__IKs__xs2 / (pow(var_x28, 2) * pow(var_chaste_interface__Ca__Ca_i_converted, 4)));
        IJth(rJacobian, 1, 1) = var_x105 * (-2539.0 + var_x90 + var_x92 - var_x96 - var_x98) + 0.001 * (0.0010920000000000001 / pow(var_x99, 3) + 5.6400000000000002e-5 / pow(var_x100, 3) + 9.0000000000000002e-6 / pow(var_x101, 3) + 0.00033600000000000004 / pow(var_x102, 3)) * (var_x109 - var_x107 + 0.25 * var_chaste_interface__Ca__Ca_submem + 0.019599999999999999 * var_chaste_interface__Ca__tropi - 250.0 * var_chaste_interface__Ca__Ca_i_converted - var_x106 * (70.0 - var_chaste_interface__Ca__tropi)) / pow(var_x103, 2);
        IJth(rJacobian, 19, 1) = var_x309 * var_x311;
        IJth(rJacobian, 22, 1) = 12500.0 * var_x336;
        IJth(rJacobian, 23, 1) = var_x309;
        IJth(rJacobian, 24, 1) = 2289.0 - var_x90;
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x71);
        IJth(rJacobian, 2, 2) = ((var_x121) ? (var_x122 - var_x117 * var_x120) : (-3.2000000000000002 + var_x122));
        IJth(rJacobian, 20, 2) = -0.00037500000000000001 * var_x71;
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x72);
        IJth(rJacobian, 3, 3) = ((var_x126) ? (-310000.0 * var_x124 - 0.13500000000000001 * var_x125 - 3.5600000000000001 * var_x123) : (-7.6923076923076916 / var_x128));
        IJth(rJacobian, 20, 3) = -0.000125 * var_x72;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x73);
        IJth(rJacobian, 4, 4) = ((var_x126) ? (-0.1212 * var_x140 - var_x132 * var_x142) : (-0.29999999999999999 * var_x146));
        IJth(rJacobian, 20, 4) = -0.000125 * var_x73;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (var_x77);
        IJth(rJacobian, 5, 5) = -4.3041299999999998 + var_x153 - 0.024167999999999999 * var_x156;
        IJth(rJacobian, 6, 5) = var_x196;
        IJth(rJacobian, 7, 5) = 0.0058991999999999968 * var_x156;
        IJth(rJacobian, 8, 5) = 0.0021800000000000001;
        IJth(rJacobian, 19, 5) = var_x312;
        IJth(rJacobian, 21, 5) = var_x326;
        IJth(rJacobian, 22, 5) = var_x339;
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (var_x77);
        IJth(rJacobian, 5, 6) = -3.0 + var_x153;
        IJth(rJacobian, 6, 6) = var_x195 - var_x197 - var_x198;
        IJth(rJacobian, 7, 6) = var_x223;
        IJth(rJacobian, 8, 6) = -0.0019499999999999999;
        IJth(rJacobian, 9, 6) = var_x198;
        IJth(rJacobian, 10, 6) = var_x197;
        IJth(rJacobian, 19, 6) = var_x312;
        IJth(rJacobian, 21, 6) = var_x326;
        IJth(rJacobian, 22, 6) = var_x339;
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (var_x77);
        IJth(rJacobian, 5, 7) = -2.999896385;
        IJth(rJacobian, 7, 7) = -0.33343694833333332 + var_x212 + var_x223 - 1.8929217120000003e-7 * var_x156 * var_x224;
        IJth(rJacobian, 8, 7) = -0.0019499999999999999;
        IJth(rJacobian, 9, 7) = var_x213;
        IJth(rJacobian, 19, 7) = var_x312;
        IJth(rJacobian, 21, 7) = var_x326;
        IJth(rJacobian, 22, 7) = var_x339;
        IJth(rJacobian, 0, 8) = mSetVoltageDerivativeToZero ? 0.0 : (var_x77);
        IJth(rJacobian, 5, 8) = -2.99776;
        IJth(rJacobian, 7, 8) = var_x223;
        IJth(rJacobian, 8, 8) = -0.33762909604519775 + var_x212;
        IJth(rJacobian, 10, 8) = var_x213;
        IJth(rJacobian, 19, 8) = var_x312;
        IJth(rJacobian, 21, 8) = var_x326;
        IJth(rJacobian, 22, 8) = var_x339;
        IJth(rJacobian, 0, 9) = mSetVoltageDerivativeToZero ? 0.0 : (var_x77);
        IJth(rJacobian, 5, 9) = -3.0;
        IJth(rJacobian, 6, 9) = var_x199;
        IJth(rJacobian, 7, 9) = var_x223 + var_x227;
        IJth(rJacobian, 8, 9) = -0.0019499999999999999;
        IJth(rJacobian, 9, 9) = -var_x199 - var_x227;
        IJth(rJacobian, 19, 9) = var_x312;
        IJth(rJacobian, 21, 9) = var_x326;
        IJth(rJacobian, 22, 9) = var_x339;
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (var_x77);
        IJth(rJacobian, 5, 10) = -3.0;
        IJth(rJacobian, 6, 10) = var_x200;
        IJth(rJacobian, 7, 10) = var_x223;
        IJth(rJacobian, 8, 10) = -0.0019499999999999999 + var_x238;
        IJth(rJacobian, 10, 10) = -var_x200 - var_x238;
        IJth(rJacobian, 19, 10) = var_x312;
        IJth(rJacobian, 21, 10) = var_x326;
        IJth(rJacobian, 22, 10) = var_x339;
        IJth(rJacobian, 0, 11) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x35 * var_x59 * NV_Ith_S(mParameters, 0) * NV_Ith_S(mParameters, 5));
        IJth(rJacobian, 11, 11) = ((var_x259) ? (var_x260 + var_x261) : ((var_x258) ? (-0.011219512195121951 + var_x260) : ((var_x257) ? (-0.0042068965517241376 + var_x261) : (-0.015426408746846089))));
        IJth(rJacobian, 0, 12) = mSetVoltageDerivativeToZero ? 0.0 : (var_x30 * var_x66);
        IJth(rJacobian, 12, 12) = -var_x274;
        IJth(rJacobian, 0, 13) = mSetVoltageDerivativeToZero ? 0.0 : (var_x29 * var_x67);
        IJth(rJacobian, 13, 13) = -0.25 * var_x274;
        IJth(rJacobian, 0, 14) = mSetVoltageDerivativeToZero ? 0.0 : (var_x63 * (0.5 * var_x14 + var_chaste_interface__Ito__ytos) * NV_Ith_S(mParameters, 2));
        IJth(rJacobian, 14, 14) = -var_x280;
        IJth(rJacobian, 0, 15) = mSetVoltageDerivativeToZero ? 0.0 : (var_x64);
        IJth(rJacobian, 15, 15) = -var_x288;
        IJth(rJacobian, 0, 16) = mSetVoltageDerivativeToZero ? 0.0 : (var_x78 * var_chaste_interface__Ito__ytof);
        IJth(rJacobian, 16, 16) = -var_x292;
        IJth(rJacobian, 0, 17) = mSetVoltageDerivativeToZero ? 0.0 : (var_x78 * var_chaste_interface__Ito__xtof);
        IJth(rJacobian, 17, 17) = -var_x293;
        IJth(rJacobian, 18, 18) = -0.01;
        IJth(rJacobian, 19, 18) = var_x305 * var_x314;
        IJth(rJacobian, 21, 18) = var_x314 * var_x324;
        IJth(rJacobian, 19, 19) = -0.033333333333333333 - var_x311 + var_x310 * var_x315;
        IJth(rJacobian, 22, 19) = var_x338;
        IJth(rJacobian, 23, 19) = -1;
        IJth(rJacobian, 0, 20) = mSetVoltageDerivativeToZero ? 0.0 : (1.0436203813975009e-6 * var_x84 + 0.008152173913043478 * var_x81 - 1.173913043478261 * var_x80 - 26.541413816729872 * var_x85 - 36.287999999999997 * var_x86 + 0.00019591421434992582 * var_x31 * (17.737505194555091 + 0.0023223462158299631 * var_chaste_interface__Na__Na_i) / pow((1 + 0.00013092857142857142 * var_chaste_interface__Na__Na_i), 2));
        IJth(rJacobian, 20, 20) = 3.0570652173913045e-6 * var_x81 + 3.9135764302406278e-10 * var_x84 - 0.0033176767270912339 * var_x85 - 0.013608 * var_x86 - 0.00044021739130434783 * var_x80;
        IJth(rJacobian, 22, 20) = var_x337 * (226.80000000000001 * var_x86 - 6.52262738373438e-6 * var_x84);
        IJth(rJacobian, 5, 21) = -var_x160;
        IJth(rJacobian, 6, 21) = var_x206 + (-var_x203 - var_x204) * var_chaste_interface__ICaL__c2;
        IJth(rJacobian, 7, 21) = var_x160 + (0.00063442013684210537 * var_x156 * var_x158 - 2.1032463466666669e-8 * var_x159 * var_x224) * var_chaste_interface__ICaL__xi1ca + 0.0020298666666666667 * var_x159 * var_x228;
        IJth(rJacobian, 9, 21) = -var_x206 + var_x203 * var_chaste_interface__ICaL__c2 + var_x204 * var_chaste_interface__ICaL__c2;
        IJth(rJacobian, 21, 21) = -2.0;
        IJth(rJacobian, 0, 22) = mSetVoltageDerivativeToZero ? 0.0 : (16903.864320000001 * var_x88 + 0.00017972853783688092 * var_x83 - 0.54431999999999992 * var_x89 + var_x26 * var_x87);
        IJth(rJacobian, 1, 22) = 0.00025000000000000001 * var_x104;
        IJth(rJacobian, 19, 22) = var_x308 * var_x87;
        IJth(rJacobian, 20, 22) = 6.3389491199999997 * var_x88 + 6.7398201688830334e-8 * var_x83 - 0.00020411999999999996 * var_x89;
        IJth(rJacobian, 21, 22) = 2.0 + var_x318 * var_x87 + var_x325 * var_x87;
        IJth(rJacobian, 22, 22) = var_x337 * (-14.789 + var_x340 + 3.4019999999999997 * var_x89 - 0.0011233033614805057 * var_x83 - 105649.152 * var_x88 + var_x327 * var_x87) + 0.0012574820180071425 * (9.0 / pow(var_x328, 3) + 56.399999999999999 / pow(var_x332, 3) + 0.97959183673469385 / pow(var_x334, 3) + 0.49704142011834318 / pow(var_x330, 3)) * (50.0 * var_chaste_interface__Irel__xir + 0.019599999999999999 * var_chaste_interface__Ca__trops + 12500.0 * var_chaste_interface__Ca__Ca_i_converted - 12.5 * var_chaste_interface__Ca__Ca_submem - var_x341 * (70.0 - var_chaste_interface__Ca__trops) + 42.0 * var_x48 * var_x60 - 50.0 * var_x228 * var_x76) / pow((0.035460992907801421 + var_x333 + 0.15957446808510639 * var_x329 + 0.12158054711246201 * var_x335 + 0.11456628477905074 * var_x331), 2);
        IJth(rJacobian, 25, 22) = 2.2890000000000001 - var_x340;
        IJth(rJacobian, 1, 23) = var_x105 * (var_x110 + var_x111 - var_x112);
        IJth(rJacobian, 18, 23) = 0.01;
        IJth(rJacobian, 19, 23) = var_x305 * var_x317 + (var_x310 * var_x316 - var_x315 / var_x93) * var_chaste_interface__Irel__xir;
        IJth(rJacobian, 21, 23) = var_x317 * var_x324;
        IJth(rJacobian, 23, 23) = var_x316;
        IJth(rJacobian, 1, 24) = var_x105 * (0.019599999999999999 + var_x106);
        IJth(rJacobian, 24, 24) = -0.019599999999999999 - var_x106;
        IJth(rJacobian, 22, 25) = var_x337 * (0.019599999999999999 + var_x341);
        IJth(rJacobian, 25, 25) = -0.019599999999999999 - var_x341;
    }

    N_Vector Cellmahajan_2008FromCellMLCvodeOpt::ComputeDerivedQuantities(double var_chaste_interface__Environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__Ca__Ca_i_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000256752008084
        

        // Mathematics
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(3);
        NV_Ith_S(dqs, 0) = var_chaste_interface__Environment__time;
        NV_Ith_S(dqs, 1) = var_chaste_interface__Ca__Ca_i_converted;
        NV_Ith_S(dqs, 2) = var_cell__i_Stim_converted;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellmahajan_2008FromCellMLCvodeOpt>::Initialise(void)
{
    this->mSystemName = "mahajan_shiferaw_model_2008";
    this->mFreeVariableName = "Environment__time";
    this->mFreeVariableUnits = "ms";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-87.169816169406);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.000256752008084);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("INa__xm");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001075453357);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("INa__xh");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.990691306716);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("INa__xj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993888937283);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("ICaL__c1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.8211252e-05);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("ICaL__c2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.979322592773);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("ICaL__xi1ca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001208153482);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("ICaL__xi1ba");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.3616596e-05);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("ICaL__xi2ca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.004173008466);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("ICaL__xi2ba");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.015242594688);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("IKr__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.007074239331);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.048267587131);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.105468807033);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("Ito__xtos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00364776906);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("Ito__ytos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.174403618112);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("Ito__xtof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.003643592594);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("Ito__ytof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993331326442);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("Irel__Ca_JSR");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(97.505463697266);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("Irel__xir");
    this->mVariableUnits.push_back("uM_per_ms");
    this->mInitialConditions.push_back(0.006679257264);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("Na__Na_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(11.441712311614);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("Ca__Ca_dyad");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(1.716573130685);

    // NV_Ith_S(rY, 22):
    this->mVariableNames.push_back("Ca__Ca_submem");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(0.226941113355);

    // NV_Ith_S(rY, 23):
    this->mVariableNames.push_back("Ca__Ca_NSR");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(104.450004990523);

    // NV_Ith_S(rY, 24):
    this->mVariableNames.push_back("Ca__tropi");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(22.171689894953);

    // NV_Ith_S(rY, 25):
    this->mVariableNames.push_back("Ca__trops");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(19.864701949854);

    // mParameters[0]:
    this->mParameterNames.push_back("ScaleFactorGkr");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[1]:
    this->mParameterNames.push_back("ScaleFactorGks");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[2]:
    this->mParameterNames.push_back("ScaleFactorIto");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[3]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("mmole_per_coulomb_cm");

    // mParameters[4]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("uS_per_nF");

    // mParameters[5]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("uS_per_nF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("Environment__time");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_concentration");
    this->mDerivedQuantityUnits.push_back("millimolar");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellmahajan_2008FromCellMLCvodeOpt)

#endif // CHASTE_CVODE
