#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: ohara_rudy_cipa_v1_2017
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvodeOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "ohara_rudy_cipa_v1_2017.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<50; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane__v)
    {
        const double _offset_0 = var_chaste_interface__membrane__v - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__v)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__v>mTableMaxs[0] || var_chaste_interface__membrane__v<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables(const Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables&);
    Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables& operator= (const Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables&);
    Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 50;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][50];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.29999999999999999 + 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.037435883507802616 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] < 2){
                    double left = f(var_chaste_interface__membrane__v - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__v + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[1] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] >= 2){
                    EXCEPTION("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val);
                }
                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return -1.0 + exp(0.037435883507802616 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[2] < 2){
                    double left = f(var_chaste_interface__membrane__v - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__v + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[2] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[2] >= 2){
                    EXCEPTION("Lookup table 2 at ["<<i<<"][2] has non-finite value: " << val);
                }
                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.074871767015605231 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[3] < 2){
                    double left = f(var_chaste_interface__membrane__v - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__v + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[3] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[3] >= 2){
                    EXCEPTION("Lookup table 3 at ["<<i<<"][3] has non-finite value: " << val);
                }
                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return -1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[4] < 2){
                    double left = f(var_chaste_interface__membrane__v - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__v + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[4] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[4] >= 2){
                    EXCEPTION("Lookup table 4 at ["<<i<<"][4] has non-finite value: " << val);
                }
                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(-1.4126984126984128 + 0.0066137566137566143 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.0062517925458030373 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.019556505544476088 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 9.0730000000000004 * exp(-0.001934187314569802 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 27.780000000000001 * exp(0.014412815150504008 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1.0 + exp(0.78953107960741553 - 0.054525627044711013 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(-0.0042259999999999997 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.17249999999999999 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(4.6310000000000002e-5 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.0085950000000000002 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(-0.00065749999999999999 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(-0.02877 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(7.7710000000000006e-9 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(3.613e-8 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(-0.16880000000000001 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(1.5349999999999998e-8 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(-0.04641 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.0085159999999999993 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.0046680000000000003 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(-0.02215 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(5.2976190476190466 + 0.27056277056277056 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(-0.93144208037825049 - 0.23640661938534277 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][26] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.59999999999999998 + 1 / (exp(1.26 + 0.089999999999999997 * var_chaste_interface__membrane__v) + exp(-0.30000000000000004 - 0.050000000000000003 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][27] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 7.0 + 1 / (0.040000000000000001 * exp(0.5714285714285714 - 0.14285714285714285 * var_chaste_interface__membrane__v) + 0.040000000000000001 * exp(-0.5714285714285714 + 0.14285714285714285 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][28] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 100.0 + 1 / (0.00012 * exp(0.14285714285714285 * var_chaste_interface__membrane__v) + 0.00012 * exp(-0.33333333333333331 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][29] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 7.0 + 1 / (0.0044999999999999997 * exp(2.0 + 0.10000000000000001 * var_chaste_interface__membrane__v) + 0.0044999999999999997 * exp(-2.0 - 0.10000000000000001 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][30] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1000.0 + 1 / (3.4999999999999997e-5 * exp(0.83333333333333337 + 0.16666666666666666 * var_chaste_interface__membrane__v) + 3.4999999999999997e-5 * exp(-1.25 - 0.25 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][31] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.0081833060556464818 * exp(3.4155488244627148 + 0.014423770373575654 * var_chaste_interface__membrane__v) + 0.0081833060556464818 * exp(-6.2475442043222005 - 0.049115913555992145 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][32] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(-1.2987012987012987 - 0.11195700850873264 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][33] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 817.29999999999995 + 1 / (0.001292 * exp(-0.91304347826086951 - 0.0043478260869565218 * var_chaste_interface__membrane__v) + 0.00023259999999999999 * exp(2.7123595505617977 + 0.056179775280898875 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][34] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.019300000000000001 * exp(-2.1464516129032258 - 0.032258064516129031 * var_chaste_interface__membrane__v) + 0.01 * exp(-2.5 + 0.050000000000000003 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][35] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (8.5519999999999996 * exp(-13.000839630562552 - 0.16792611251049538 * var_chaste_interface__membrane__v) + 6.7649999999999997 * exp(0.33477135461604829 + 0.02876042565429968 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][36] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(-4.0087123898287915 - 0.10130685847431871 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][37] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.0050000000000000001 / (1.0 + exp(11.700053418803417 + 0.13354700854700854 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][38] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.0016666666666666668 / (1.0 + exp(12.528044871794872 + 0.13354700854700854 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][39] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(-8.1401975683890573 - 0.18996960486322187 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][40] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1.0 - 0.94999999999999996 / (1.0 + exp(14.0 + 0.20000000000000001 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[41] < 2){
                    double left = f(var_chaste_interface__membrane__v - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__v + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[41] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[41] >= 2){
                    EXCEPTION("Lookup table 41 at ["<<i<<"][41] has non-finite value: " << val);
                }
                _lookup_table_0[i][41] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1.3540000000000001 + 0.0001 / (exp(56.77808727948004 - 4.6425255338904359 * var_chaste_interface__membrane__v) + exp(-10.534927627438641 + 0.062932662051604776 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][42] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1.0 - 0.5 / (1.0 + exp(3.5 + 0.050000000000000003 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][43] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(7.6939240063036234 + 0.17510068289266328 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][44] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1.0515000000000001 / (3.5 / (1.0 + exp(3.403513787634354 + 0.034035137876343539 * var_chaste_interface__membrane__v)) + 0.82719827942757873 / (1.0 + exp(0.62658348478969694 - 0.034035137876343539 * var_chaste_interface__membrane__v)));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][45] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(0.96761133603238858 - 0.067476383265856948 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][46] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(1.6423751686909582 - 0.067476383265856948 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][47] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 4.5620000000000003 + 1 / (0.39329999999999998 * exp(-1.0 - 0.01 * var_chaste_interface__membrane__v) + 0.08004 * exp(3.0138637733574445 + 0.060277275467148887 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][48] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 23.620000000000001 + 1 / (1.7800000000000001e-8 * exp(14.123035029087756 + 0.12377769525931426 * var_chaste_interface__membrane__v) + 0.0014159999999999999 * exp(-1.6345469940728197 - 0.016934801016088061 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][49] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[50];

    // Lookup tables
    double (*_lookup_table_0)[50];
    int _lookup_table_0_num_misshit_piecewise[50] = {0};

};

std::shared_ptr<Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables> Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables::mpInstance;


    boost::shared_ptr<RegularStimulus> Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__i_Stim_Amplitude_converted = -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__i_Stim_Period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__i_Stim_PulseDuration = 0.5; // millisecond
        const double var_chaste_interface__membrane__i_Stim_Start = 10.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__i_Stim_Amplitude_converted),
                var_chaste_interface__membrane__i_Stim_PulseDuration,
                var_chaste_interface__membrane__i_Stim_Period,
                var_chaste_interface__membrane__i_Stim_Start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt::Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                48,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 0; // (var_IKr__D) [dimensionless]
        NV_Ith_S(this->mParameters, 1) = 0; // (var_IKr__Kmax) [dimensionless]
        NV_Ith_S(this->mParameters, 2) = 0; // (var_IKr__Kt) [per_millisecond]
        NV_Ith_S(this->mParameters, 3) = 0; // (var_IKr__Ku) [per_millisecond]
        NV_Ith_S(this->mParameters, 4) = 1.0; // (var_IKr__Vhalf) [millivolt]
        NV_Ith_S(this->mParameters, 5) = 1.0; // (var_IKr__halfmax) [dimensionless]
        NV_Ith_S(this->mParameters, 6) = 1.0; // (var_IKr__n) [dimensionless]
        NV_Ith_S(this->mParameters, 7) = 1.0; // (var_ryr__Jrel_scaling_factor) [dimensionless]
        NV_Ith_S(this->mParameters, 8) = 1.0; // (var_SERCA__Jup_b) [dimensionless]
        NV_Ith_S(this->mParameters, 9) = 1.8; // (var_extracellular__cao) [millimolar]
        NV_Ith_S(this->mParameters, 10) = 5.4000000000000004; // (var_extracellular__ko) [millimolar]
        NV_Ith_S(this->mParameters, 11) = 140.0; // (var_extracellular__nao) [millimolar]
        NV_Ith_S(this->mParameters, 12) = 0.00010069999999999999; // (var_ICaL__PCa_b) [dimensionless]
        NV_Ith_S(this->mParameters, 13) = 2.4999999999999999e-8; // (var_ICab__PCab) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 14) = 0.0030000000000000001; // (var_IKb__GKb_b) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 15) = 3.75e-10; // (var_INab__PNab) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 16) = 0.00050000000000000001; // (var_IpCa__GpCa) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 17) = 75.0; // (var_INa__GNa) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 18) = 0.32397839999999978; // (var_IK1__GK1_b) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 19) = 0.019957499999999975; // (var_INaL__GNaL_b) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 20) = 0.046585454545454562; // (var_IKr__GKr_b) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 21) = 0.0063580000000000008; // (var_IKs__GKs_b) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 22) = 0.00080000000000000004; // (var_INaCa_i__Gncx_b) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 23) = 30.0; // (var_INaK__Pnak_b) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 24) = 0.02; // (var_Ito__Gto_b) [milliS_per_microF]
    }

    Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt::~Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt()
    {
    }

    AbstractLookupTableCollection* Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt::GetLookupTableCollection()
    {
        return Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables::Instance();
    }
    
    double Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -88.00190465
        double var_chaste_interface__intracellular_ions__cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 8.6e-05
        double var_chaste_interface__CaMK__CaMKt = NV_Ith_S(rY, 2);
        // Units: millimolar; Initial value: 0.0125840447
        double var_chaste_interface__intracellular_ions__nai = NV_Ith_S(rY, 3);
        // Units: millimolar; Initial value: 7.268004498
        double var_chaste_interface__intracellular_ions__nass = NV_Ith_S(rY, 4);
        // Units: millimolar; Initial value: 7.268089977
        double var_chaste_interface__intracellular_ions__ki = NV_Ith_S(rY, 5);
        // Units: millimolar; Initial value: 144.6555918
        double var_chaste_interface__intracellular_ions__kss = NV_Ith_S(rY, 6);
        // Units: millimolar; Initial value: 144.6555651
        double var_chaste_interface__intracellular_ions__cass = NV_Ith_S(rY, 7);
        // Units: millimolar; Initial value: 8.49e-05
        double var_chaste_interface__INa__m = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.007344121102
        double var_chaste_interface__INa__hf = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.6981071913
        double var_chaste_interface__INa__hs = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.6980895801
        double var_chaste_interface__INa__j = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.6979908432
        double var_chaste_interface__INa__hsp = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.4549485525
        double var_chaste_interface__INa__jp = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.6979245865
        double var_chaste_interface__INaL__mL = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.0001882617273
        double var_chaste_interface__INaL__hL = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.5008548855
        double var_chaste_interface__INaL__hLp = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.2693065357
        double var_chaste_interface__Ito__a = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.001001097687
        double var_chaste_interface__Ito__iF = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.9995541745
        double var_chaste_interface__Ito__iS = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.5865061736
        double var_chaste_interface__Ito__ap = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.0005100862934
        double var_chaste_interface__Ito__iFp = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 0.9995541823
        double var_chaste_interface__Ito__iSp = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 0.6393399482
        double var_chaste_interface__ICaL__d = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 2.34e-09
        double var_chaste_interface__ICaL__ff = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fs = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.9102412777
        double var_chaste_interface__ICaL__fcaf = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcas = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 0.9998046777
        double var_chaste_interface__ICaL__jca = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 0.9999738312
        double var_chaste_interface__ICaL__ffp = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcafp = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__nca = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.002749414044
        double var_chaste_interface__IKr__O = NV_Ith_S(rY, 38);
        // Units: dimensionless; Initial value: 0.00015551
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 43);
        // Units: dimensionless; Initial value: 0.2707758025
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 44);
        // Units: dimensionless; Initial value: 0.0001928503426
        double var_chaste_interface__IK1__xk1 = NV_Ith_S(rY, 45);
        // Units: dimensionless; Initial value: 0.9967597594
        
        // Lookup table indexing
        const bool _oob_0 = Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        const double var_ICaL__f = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ff; // dimensionless
        const double var_ICaL__fp = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ffp; // dimensionless
        const double var_environment__celltype = 0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * NV_Ith_S(mParameters, 12)) : ((var_environment__celltype == 2.0) ? (2.5 * NV_Ith_S(mParameters, 12)) : (NV_Ith_S(mParameters, 12)))); // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * NV_Ith_S(mParameters, 22)) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * NV_Ith_S(mParameters, 22)) : (NV_Ith_S(mParameters, 22)))); // milliS_per_microF
        const double var_INaCa_i__h10_i = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * NV_Ith_S(mParameters, 11)) * NV_Ith_S(mParameters, 11); // dimensionless
        const double var_INaCa_i__h10_ss = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * NV_Ith_S(mParameters, 11)) * NV_Ith_S(mParameters, 11); // dimensionless
        const double var_INaCa_i__k1_i = 1500000.0 * NV_Ith_S(mParameters, 9) / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k1_ss = 1500000.0 * NV_Ith_S(mParameters, 9) / var_INaCa_i__h10_ss; // dimensionless
        const double var_IpCa__IpCa_converted = HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 16) * var_chaste_interface__intracellular_ions__cai / (0.00050000000000000001 + var_chaste_interface__intracellular_ions__cai); // uA_per_cm2
        const double var_CaMK__CaMKa = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass) + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__h4_i = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nai) * var_chaste_interface__intracellular_ions__nai; // dimensionless
        const double var_INaCa_i__k6_i = 1500000.0 * var_chaste_interface__intracellular_ions__cai / var_INaCa_i__h4_i; // dimensionless
        const double var_INaK__b3 = 5.7707741857267899e-10 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ki + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nai); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__k6_ss = 1500000.0 * var_chaste_interface__intracellular_ions__cass / var_INaCa_i__h4_ss; // dimensionless
        const double var_ICaL__Afcaf = _lt_0_row[0]; // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__ICaK_converted = (0.00035740000000000001 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCa * var_chaste_interface__ICaL__d + 0.00035740000000000001 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_ICaL__ICaL_converted = ((1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * _lt_0_row[3]) / (_lt_0_row[4]))) * var_ICaL__PCa * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * _lt_0_row[3]) / (_lt_0_row[4]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_ICaL__ICaNa_converted = (0.00125 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCa * var_chaste_interface__ICaL__d + 0.00125 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_ICab__ICab_converted = HeartConfig::Instance()->GetCapacitance() * ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cai * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 13) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 13) / (-1.0 + exp(-9.9999999999999995e-8))) + 2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 13) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cai * _lt_0_row[3]) * NV_Ith_S(mParameters, 13) / (_lt_0_row[4]))); // uA_per_cm2
        const double var_INab__INab_converted = HeartConfig::Instance()->GetCapacitance() * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-NV_Ith_S(mParameters, 11) + var_chaste_interface__intracellular_ions__nai * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 15) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-NV_Ith_S(mParameters, 11) + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 15) / (-1.0 + exp(-9.9999999999999995e-8))) + 2.671233870549826e-13 * (-NV_Ith_S(mParameters, 11) + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 15) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-NV_Ith_S(mParameters, 11) + var_chaste_interface__intracellular_ions__nai * _lt_0_row[1]) * NV_Ith_S(mParameters, 15) / (_lt_0_row[2]))); // uA_per_cm2
        const double var_Ito__AiF = _lt_0_row[5]; // dimensionless
        const double var_Ito__AiS = 1.0 - var_Ito__AiF; // dimensionless
        const double var_INaCa_i__hca = _lt_0_row[6]; // dimensionless
        const double var_INaCa_i__hna = _lt_0_row[7]; // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__h2_i = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h2_ss = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * NV_Ith_S(mParameters, 11); // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * NV_Ith_S(mParameters, 11); // dimensionless
        const double var_INaCa_i__h8_i = 0.011348161597821153 * NV_Ith_S(mParameters, 11) / (var_INaCa_i__h7_i * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__h8_ss = 0.011348161597821153 * NV_Ith_S(mParameters, 11) / (var_INaCa_i__h7_ss * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__k3pp_i = 5000.0 * var_INaCa_i__h8_i; // dimensionless
        const double var_INaCa_i__k3_i = 60000.0 / var_INaCa_i__h7_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = 5000.0 * var_INaCa_i__h8_ss; // dimensionless
        const double var_INaCa_i__k3_ss = 60000.0 / var_INaCa_i__h7_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4pp_i = 5000.0 * var_INaCa_i__h2_i; // dimensionless
        const double var_INaCa_i__k4_i = 60000.0 / (var_INaCa_i__h1_i * var_INaCa_i__hca) + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = 5000.0 * var_INaCa_i__h2_ss; // dimensionless
        const double var_INaCa_i__k4_ss = 60000.0 / (var_INaCa_i__h1_ss * var_INaCa_i__hca) + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = 800.0 * pow(var_chaste_interface__intracellular_ions__nai, 2) * var_INaCa_i__h2_i / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k7_ss = 800.0 * pow(var_chaste_interface__intracellular_ions__nass, 2) * var_INaCa_i__h2_ss / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k8_i = 800.0 * pow(NV_Ith_S(mParameters, 11), 2) * var_INaCa_i__h8_i / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k8_ss = 800.0 * pow(NV_Ith_S(mParameters, 11), 2) * var_INaCa_i__h8_ss / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__x1_i = 5000.0 * (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k7_i + 5000.0 * (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = 5000.0 * (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k7_ss + 5000.0 * (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i + (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i; // dimensionless
        const double var_INaCa_i__x2_ss = (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss; // dimensionless
        const double var_INaCa_i__x3_i = (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = 5000.0 * (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k8_i + 5000.0 * (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__x4_ss = 5000.0 * (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k8_ss + 5000.0 * (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaK__Knai = _lt_0_row[8]; // millimolar
        const double var_INaK__Knao = _lt_0_row[9]; // millimolar
        const double var_INaK__a1 = 949.5 * pow(var_chaste_interface__intracellular_ions__nai, 3) / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ki), 2)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = 14800.411886344058 * pow(NV_Ith_S(mParameters, 10), 2) / (-1.0 + pow((1.0 + NV_Ith_S(mParameters, 11) / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + NV_Ith_S(mParameters, 10)), 2)); // dimensionless
        const double var_INaK__b2 = 39.399999999999999 * pow(NV_Ith_S(mParameters, 11), 3) / ((-1.0 + pow((1.0 + NV_Ith_S(mParameters, 11) / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + NV_Ith_S(mParameters, 10)), 2)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = 160.0 * pow(var_chaste_interface__intracellular_ions__ki, 2) / (-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ki), 2)); // dimensionless
        const double var_INaK__x1 = 439120.79239156016 * var_INaK__a1 + 687.20000000000005 * var_INaK__a1 * var_INaK__b3 + 687.20000000000005 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = 687.20000000000005 * var_INaK__a1 * var_INaK__a3 + 696.32000000000005 * var_INaK__a3 * var_INaK__b4 + 9.120000000000001 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = 444948.47229058668 * var_INaK__a3 + 5827.6798990265261 * var_INaK__b2 + 9.120000000000001 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = 638.99998892834708 * var_INaK__a1 * var_INaK__a3 + 638.99998892834708 * var_INaK__a1 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaCa_i__INaCa_i_converted = 0.80000000000000004 * (10000.0 * var_INaCa_i__E2_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i - 2.0 * var_INaCa_i__E1_i * var_INaCa_i__k1_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i + var_INaCa_i__k4pp_i * var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i) + 3.0 * var_INaCa_i__k7_i * var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i)) * HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__Gncx / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cai, 2)); // uA_per_cm2
        const double var_INaCa_i__INaCa_ss_converted = 0.20000000000000001 * (10000.0 * var_INaCa_i__E2_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss - 2.0 * var_INaCa_i__E1_ss * var_INaCa_i__k1_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss + var_INaCa_i__k4pp_ss * var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss) + 3.0 * var_INaCa_i__k7_ss * var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss)) * HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__Gncx / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cass, 2)); // uA_per_cm2
        const double var_INaK__INaK_converted = (18.240000000000002 * var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) + 3.0 * var_INaK__a3 * var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 2.0 * var_INaK__a1 * var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 3.0 * var_INaK__b3 * var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4)) * HeartConfig::Instance()->GetCapacitance() * ((var_environment__celltype == 1.0) ? (0.90000000000000002 * NV_Ith_S(mParameters, 23)) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * NV_Ith_S(mParameters, 23)) : (NV_Ith_S(mParameters, 23)))); // uA_per_cm2
        const double var_reversal_potentials__EK = 26.712338705498265 * log(NV_Ith_S(mParameters, 10) / var_chaste_interface__intracellular_ions__ki); // millivolt
        const double var_IK1__IK1_converted = sqrt(NV_Ith_S(mParameters, 10)) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * HeartConfig::Instance()->GetCapacitance() * ((var_environment__celltype == 1.0) ? (1.2 * NV_Ith_S(mParameters, 18)) : ((var_environment__celltype == 2.0) ? (1.3 * NV_Ith_S(mParameters, 18)) : (NV_Ith_S(mParameters, 18)))) * var_chaste_interface__IK1__xk1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * NV_Ith_S(mParameters, 10))); // uA_per_cm2
        const double var_IKb__IKb_converted = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * HeartConfig::Instance()->GetCapacitance() * ((var_environment__celltype == 1.0) ? (0.59999999999999998 * NV_Ith_S(mParameters, 14)) : (NV_Ith_S(mParameters, 14))) / (_lt_0_row[10]); // uA_per_cm2
        const double var_IKr__IKr_converted = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 10)) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * HeartConfig::Instance()->GetCapacitance() * ((var_environment__celltype == 1.0) ? (1.3 * NV_Ith_S(mParameters, 20)) : ((var_environment__celltype == 2.0) ? (0.80000000000000004 * NV_Ith_S(mParameters, 20)) : (NV_Ith_S(mParameters, 20)))) * var_chaste_interface__IKr__O; // uA_per_cm2
        const double var_Ito__Ito_converted = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (var_Ito__AiF * var_chaste_interface__Ito__iF + var_Ito__AiS * var_chaste_interface__Ito__iS) * var_chaste_interface__Ito__a + (var_Ito__AiF * var_chaste_interface__Ito__iFp + var_Ito__AiS * var_chaste_interface__Ito__iSp) * var_chaste_interface__Ito__ap / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * HeartConfig::Instance()->GetCapacitance() * (((var_environment__celltype == 1.0) || (var_environment__celltype == 2.0)) ? (4.0 * NV_Ith_S(mParameters, 24)) : (NV_Ith_S(mParameters, 24))); // uA_per_cm2
        const double var_reversal_potentials__ENa = 26.712338705498265 * log(NV_Ith_S(mParameters, 11) / var_chaste_interface__intracellular_ions__nai); // millivolt
        const double var_INa__INa_converted = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (0.010000000000000009 * var_chaste_interface__INa__hs + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__j + (0.010000000000000009 * var_chaste_interface__INa__hsp + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__jp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 17); // uA_per_cm2
        const double var_INaL__INaL_converted = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * var_chaste_interface__INaL__hL + var_chaste_interface__INaL__hLp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * HeartConfig::Instance()->GetCapacitance() * ((var_environment__celltype == 1.0) ? (0.59999999999999998 * NV_Ith_S(mParameters, 19)) : (NV_Ith_S(mParameters, 19))) * var_chaste_interface__INaL__mL; // uA_per_cm2
        const double var_IKs__IKs_converted = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__cai), 1.3999999999999999))) * (-26.712338705498265 * log((0.018329999999999999 * NV_Ith_S(mParameters, 11) + NV_Ith_S(mParameters, 10)) / (0.018329999999999999 * var_chaste_interface__intracellular_ions__nai + var_chaste_interface__intracellular_ions__ki)) + var_chaste_interface__membrane__v) * HeartConfig::Instance()->GetCapacitance() * ((var_environment__celltype == 1.0) ? (1.3999999999999999 * NV_Ith_S(mParameters, 21)) : (NV_Ith_S(mParameters, 21))) * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_cm2
        const double var_chaste_interface__i_ionic = var_ICaL__ICaK_converted + var_ICaL__ICaL_converted + var_ICaL__ICaNa_converted + var_ICab__ICab_converted + var_IK1__IK1_converted + var_IKb__IKb_converted + var_IKr__IKr_converted + var_IKs__IKs_converted + var_INa__INa_converted + var_INaCa_i__INaCa_i_converted + var_INaCa_i__INaCa_ss_converted + var_INaK__INaK_converted + var_INaL__INaL_converted + var_INab__INab_converted + var_IpCa__IpCa_converted + var_Ito__Ito_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -88.00190465
        double var_chaste_interface__intracellular_ions__cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 8.6e-05
        double var_chaste_interface__CaMK__CaMKt = NV_Ith_S(rY, 2);
        // Units: millimolar; Initial value: 0.0125840447
        double var_chaste_interface__intracellular_ions__nai = NV_Ith_S(rY, 3);
        // Units: millimolar; Initial value: 7.268004498
        double var_chaste_interface__intracellular_ions__nass = NV_Ith_S(rY, 4);
        // Units: millimolar; Initial value: 7.268089977
        double var_chaste_interface__intracellular_ions__ki = NV_Ith_S(rY, 5);
        // Units: millimolar; Initial value: 144.6555918
        double var_chaste_interface__intracellular_ions__kss = NV_Ith_S(rY, 6);
        // Units: millimolar; Initial value: 144.6555651
        double var_chaste_interface__intracellular_ions__cass = NV_Ith_S(rY, 7);
        // Units: millimolar; Initial value: 8.49e-05
        double var_chaste_interface__intracellular_ions__cansr = NV_Ith_S(rY, 8);
        // Units: millimolar; Initial value: 1.619574538
        double var_chaste_interface__intracellular_ions__cajsr = NV_Ith_S(rY, 9);
        // Units: millimolar; Initial value: 1.571234014
        double var_chaste_interface__INa__m = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.007344121102
        double var_chaste_interface__INa__hf = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.6981071913
        double var_chaste_interface__INa__hs = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.6980895801
        double var_chaste_interface__INa__j = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.6979908432
        double var_chaste_interface__INa__hsp = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.4549485525
        double var_chaste_interface__INa__jp = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.6979245865
        double var_chaste_interface__INaL__mL = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.0001882617273
        double var_chaste_interface__INaL__hL = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.5008548855
        double var_chaste_interface__INaL__hLp = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.2693065357
        double var_chaste_interface__Ito__a = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.001001097687
        double var_chaste_interface__Ito__iF = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.9995541745
        double var_chaste_interface__Ito__iS = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.5865061736
        double var_chaste_interface__Ito__ap = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.0005100862934
        double var_chaste_interface__Ito__iFp = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 0.9995541823
        double var_chaste_interface__Ito__iSp = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 0.6393399482
        double var_chaste_interface__ICaL__d = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 2.34e-09
        double var_chaste_interface__ICaL__ff = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fs = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.9102412777
        double var_chaste_interface__ICaL__fcaf = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcas = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 0.9998046777
        double var_chaste_interface__ICaL__jca = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 0.9999738312
        double var_chaste_interface__ICaL__ffp = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcafp = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__nca = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.002749414044
        double var_chaste_interface__IKr__IC1 = NV_Ith_S(rY, 34);
        // Units: dimensionless; Initial value: 0.999637
        double var_chaste_interface__IKr__IC2 = NV_Ith_S(rY, 35);
        // Units: dimensionless; Initial value: 6.83208e-05
        double var_chaste_interface__IKr__C1 = NV_Ith_S(rY, 36);
        // Units: dimensionless; Initial value: 1.80145e-08
        double var_chaste_interface__IKr__C2 = NV_Ith_S(rY, 37);
        // Units: dimensionless; Initial value: 8.26619e-05
        double var_chaste_interface__IKr__O = NV_Ith_S(rY, 38);
        // Units: dimensionless; Initial value: 0.00015551
        double var_chaste_interface__IKr__IO = NV_Ith_S(rY, 39);
        // Units: dimensionless; Initial value: 5.67623e-05
        double var_chaste_interface__IKr__IObound = NV_Ith_S(rY, 40);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__Obound = NV_Ith_S(rY, 41);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__Cbound = NV_Ith_S(rY, 42);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 43);
        // Units: dimensionless; Initial value: 0.2707758025
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 44);
        // Units: dimensionless; Initial value: 0.0001928503426
        double var_chaste_interface__IK1__xk1 = NV_Ith_S(rY, 45);
        // Units: dimensionless; Initial value: 0.9967597594
        double var_chaste_interface__ryr__Jrelnp = NV_Ith_S(rY, 46);
        // Units: dimensionless; Initial value: 2.5e-07
        double var_chaste_interface__ryr__Jrelp = NV_Ith_S(rY, 47);
        // Units: dimensionless; Initial value: 3.12e-07

        // Lookup table indexing
        const bool _oob_0 = Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        double d_dt_chaste_interface_var_membrane__v;
        const double var_ICaL__f = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ff; // dimensionless
        const double var_ICaL__fp = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ffp; // dimensionless
        const double var_ICaL__km2n = var_chaste_interface__ICaL__jca; // per_millisecond
        const double var_INa__shift_INa_inact = 0; // millivolt
        const double var_environment__celltype = 0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * NV_Ith_S(mParameters, 12)) : ((var_environment__celltype == 2.0) ? (2.5 * NV_Ith_S(mParameters, 12)) : (NV_Ith_S(mParameters, 12)))); // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * NV_Ith_S(mParameters, 22)) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * NV_Ith_S(mParameters, 22)) : (NV_Ith_S(mParameters, 22)))); // milliS_per_microF
        const double var_SERCA__upScale = ((var_environment__celltype == 1.0) ? (1.3) : (1.0)); // dimensionless
        const double var_INaCa_i__h10_i = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * NV_Ith_S(mParameters, 11)) * NV_Ith_S(mParameters, 11); // dimensionless
        const double var_INaCa_i__h10_ss = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * NV_Ith_S(mParameters, 11)) * NV_Ith_S(mParameters, 11); // dimensionless
        const double var_INaCa_i__k1_i = 1500000.0 * NV_Ith_S(mParameters, 9) / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k1_ss = 1500000.0 * NV_Ith_S(mParameters, 9) / var_INaCa_i__h10_ss; // dimensionless
        const double var_IpCa__IpCa = NV_Ith_S(mParameters, 16) * var_chaste_interface__intracellular_ions__cai / (0.00050000000000000001 + var_chaste_interface__intracellular_ions__cai); // microA_per_microF
        const double var_CaMK__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double d_dt_chaste_interface_var_CaMK__CaMKt = -0.00068000000000000005 * var_chaste_interface__CaMK__CaMKt + 0.050000000000000003 * (var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKb; // millimolar / millisecond
        const double d_dt_chaste_interface_var_ICaL__nca = 1000.0 / (pow((1.0 + 0.002 / var_chaste_interface__intracellular_ions__cass), 4) + 1000.0 / var_ICaL__km2n) - var_ICaL__km2n * var_chaste_interface__ICaL__nca; // 1 / millisecond
        const double var_ICaL__fICaLp = 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__Jup = (-0.00026249999999999998 * var_chaste_interface__intracellular_ions__cansr + 0.0043750000000000004 * (1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * var_SERCA__upScale * var_chaste_interface__intracellular_ions__cai / (0.00092000000000000003 + var_chaste_interface__intracellular_ions__cai) + 0.01203125 * var_SERCA__upScale * var_chaste_interface__intracellular_ions__cai / ((1.0 + 0.14999999999999999 / var_CaMK__CaMKa) * (0.00075000000000000002 + var_chaste_interface__intracellular_ions__cai))) * NV_Ith_S(mParameters, 8); // millimolar_per_millisecond
        const double var_diff__Jdiff = 5.0 * var_chaste_interface__intracellular_ions__cass - 5.0 * var_chaste_interface__intracellular_ions__cai; // millimolar_per_millisecond
        const double var_diff__JdiffK = 0.5 * var_chaste_interface__intracellular_ions__kss - 0.5 * var_chaste_interface__intracellular_ions__ki; // millimolar_per_millisecond
        const double var_INaCa_i__h4_i = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nai) * var_chaste_interface__intracellular_ions__nai; // dimensionless
        const double var_INaCa_i__k6_i = 1500000.0 * var_chaste_interface__intracellular_ions__cai / var_INaCa_i__h4_i; // dimensionless
        const double var_INaK__b3 = 5.7707741857267899e-10 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ki + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nai); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__k6_ss = 1500000.0 * var_chaste_interface__intracellular_ions__cass / var_INaCa_i__h4_ss; // dimensionless
        const double var_diff__JdiffNa = 0.5 * var_chaste_interface__intracellular_ions__nass - 0.5 * var_chaste_interface__intracellular_ions__nai; // millimolar_per_millisecond
        const double var_membrane__Istim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double d_dt_chaste_interface_var_IKr__C1 = 4.9860000000000002e-6 * var_chaste_interface__IKr__C2 * exp(2.4517433881989175) * _lt_0_row[11] + 0.012409999999999999 * var_chaste_interface__IKr__IC1 * exp(2.9189610691546015) * _lt_0_row[12] - 0.0264 * var_chaste_interface__IKr__C1 * exp(2.6818084178158563) * _lt_0_row[13] - 0.44919999999999999 * var_chaste_interface__IKr__C1 * exp(2.7360444511379707) * _lt_0_row[14]; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__C2 = 0.3226 * var_chaste_interface__IKr__IC2 * exp(2.7360444511379707) * _lt_0_row[15] + 0.0264 * var_chaste_interface__IKr__C1 * exp(2.6818084178158563) * _lt_0_row[13] + 0.0014159999999999999 * var_chaste_interface__IKr__O * exp(0.64217715821910271) * _lt_0_row[16] - 0.005509 * var_chaste_interface__IKr__C2 * exp(2.4477197176814647) * _lt_0_row[17] - 0.31809999999999999 * var_chaste_interface__IKr__C2 * exp(2.6174203303045127) * _lt_0_row[18] - 4.9860000000000002e-6 * var_chaste_interface__IKr__C2 * exp(2.4517433881989175) * _lt_0_row[11]; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__Cbound = var_chaste_interface__IKr__IObound * NV_Ith_S(mParameters, 2) + NV_Ith_S(mParameters, 2) * var_chaste_interface__IKr__Obound - 2 * var_chaste_interface__IKr__Cbound * NV_Ith_S(mParameters, 2) / (1.0 + exp(0.14729709824716453 * NV_Ith_S(mParameters, 4) - 0.14729709824716453 * var_chaste_interface__membrane__v)); // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__IC1 = 5.4550000000000003e-6 * var_chaste_interface__IKr__IC2 * exp(2.4217402245028676) * _lt_0_row[19] + 0.44919999999999999 * var_chaste_interface__IKr__C1 * exp(2.7360444511379707) * _lt_0_row[14] - 0.00078680000000000004 * var_chaste_interface__IKr__IC1 * exp(2.7162091828629111) * _lt_0_row[20] - 0.012409999999999999 * var_chaste_interface__IKr__IC1 * exp(2.9189610691546015) * _lt_0_row[12]; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__IC2 = 0.00078680000000000004 * var_chaste_interface__IKr__IC1 * exp(2.7162091828629111) * _lt_0_row[20] + 1.8539999999999999e-5 * var_chaste_interface__IKr__IO * exp(2.2555765142844972) * _lt_0_row[21] + 0.31809999999999999 * var_chaste_interface__IKr__C2 * exp(2.6174203303045127) * _lt_0_row[18] - 0.3226 * var_chaste_interface__IKr__IC2 * exp(2.7360444511379707) * _lt_0_row[15] - 0.001214 * var_chaste_interface__IKr__IC2 * exp(2.7230751049583355) * _lt_0_row[22] - 5.4550000000000003e-6 * var_chaste_interface__IKr__IC2 * exp(2.4217402245028676) * _lt_0_row[19]; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__IO = 0.14899999999999999 * var_chaste_interface__IKr__O * exp(1.4967756740703964) * _lt_0_row[23] + 0.001214 * var_chaste_interface__IKr__IC2 * exp(2.7230751049583355) * _lt_0_row[22] - 0.0089779999999999999 * var_chaste_interface__IKr__IO * exp(2.9534155818343937) * _lt_0_row[24] - 1.8539999999999999e-5 * var_chaste_interface__IKr__IO * exp(2.2555765142844972) * _lt_0_row[21] - pow(NV_Ith_S(mParameters, 0), NV_Ith_S(mParameters, 6)) * var_chaste_interface__IKr__IO * NV_Ith_S(mParameters, 1) * NV_Ith_S(mParameters, 3) / (pow(NV_Ith_S(mParameters, 0), NV_Ith_S(mParameters, 6)) + NV_Ith_S(mParameters, 5)) + 16.59612385832034 * var_chaste_interface__IKr__IObound * NV_Ith_S(mParameters, 3) * exp(1.4967756740703964) * _lt_0_row[23] / (exp(2.9534155818343937) * _lt_0_row[24]); // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__IObound = -var_chaste_interface__IKr__IObound * NV_Ith_S(mParameters, 2) + var_chaste_interface__IKr__Cbound * NV_Ith_S(mParameters, 2) / (1.0 + exp(0.14729709824716453 * NV_Ith_S(mParameters, 4) - 0.14729709824716453 * var_chaste_interface__membrane__v)) + pow(NV_Ith_S(mParameters, 0), NV_Ith_S(mParameters, 6)) * var_chaste_interface__IKr__IO * NV_Ith_S(mParameters, 1) * NV_Ith_S(mParameters, 3) / (pow(NV_Ith_S(mParameters, 0), NV_Ith_S(mParameters, 6)) + NV_Ith_S(mParameters, 5)) - 16.59612385832034 * var_chaste_interface__IKr__IObound * NV_Ith_S(mParameters, 3) * exp(1.4967756740703964) * _lt_0_row[23] / (exp(2.9534155818343937) * _lt_0_row[24]); // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__O = NV_Ith_S(mParameters, 3) * var_chaste_interface__IKr__Obound + 0.005509 * var_chaste_interface__IKr__C2 * exp(2.4477197176814647) * _lt_0_row[17] + 0.0089779999999999999 * var_chaste_interface__IKr__IO * exp(2.9534155818343937) * _lt_0_row[24] - 0.14899999999999999 * var_chaste_interface__IKr__O * exp(1.4967756740703964) * _lt_0_row[23] - 0.0014159999999999999 * var_chaste_interface__IKr__O * exp(0.64217715821910271) * _lt_0_row[16] - pow(NV_Ith_S(mParameters, 0), NV_Ith_S(mParameters, 6)) * NV_Ith_S(mParameters, 1) * NV_Ith_S(mParameters, 3) * var_chaste_interface__IKr__O / (pow(NV_Ith_S(mParameters, 0), NV_Ith_S(mParameters, 6)) + NV_Ith_S(mParameters, 5)); // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__Obound = -NV_Ith_S(mParameters, 2) * var_chaste_interface__IKr__Obound - NV_Ith_S(mParameters, 3) * var_chaste_interface__IKr__Obound + var_chaste_interface__IKr__Cbound * NV_Ith_S(mParameters, 2) / (1.0 + exp(0.14729709824716453 * NV_Ith_S(mParameters, 4) - 0.14729709824716453 * var_chaste_interface__membrane__v)) + pow(NV_Ith_S(mParameters, 0), NV_Ith_S(mParameters, 6)) * NV_Ith_S(mParameters, 1) * NV_Ith_S(mParameters, 3) * var_chaste_interface__IKr__O / (pow(NV_Ith_S(mParameters, 0), NV_Ith_S(mParameters, 6)) + NV_Ith_S(mParameters, 5)); // 1 / millisecond
        const double var_ICaL__Afcaf = _lt_0_row[0]; // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__ICaK = 0.00035740000000000001 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCa * var_chaste_interface__ICaL__d + 0.00035740000000000001 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * _lt_0_row[3]) / (_lt_0_row[4]))) * var_ICaL__PCa * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * _lt_0_row[3]) / (_lt_0_row[4]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaNa = 0.00125 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCa * var_chaste_interface__ICaL__d + 0.00125 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__fss = _lt_0_row[25]; // dimensionless
        const double var_ICaL__fcass = var_ICaL__fss; // dimensionless
        const double d_dt_chaste_interface_var_ICaL__jca = 0.013333333333333334 * var_ICaL__fcass - 0.013333333333333334 * var_chaste_interface__ICaL__jca; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL__d = (-var_chaste_interface__ICaL__d + _lt_0_row[26]) / (_lt_0_row[27]); // 1 / millisecond
        const double var_ICaL__tfcaf = _lt_0_row[28]; // millisecond
        const double d_dt_chaste_interface_var_ICaL__fcaf = (-var_chaste_interface__ICaL__fcaf + var_ICaL__fcass) / var_ICaL__tfcaf; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL__fcafp = 0.40000000000000002 * (-var_chaste_interface__ICaL__fcafp + var_ICaL__fcass) / var_ICaL__tfcaf; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL__fcas = (-var_chaste_interface__ICaL__fcas + var_ICaL__fcass) / (_lt_0_row[29]); // 1 / millisecond
        const double var_ICaL__tff = _lt_0_row[30]; // millisecond
        const double d_dt_chaste_interface_var_ICaL__ff = (-var_chaste_interface__ICaL__ff + var_ICaL__fss) / var_ICaL__tff; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL__ffp = 0.40000000000000002 * (-var_chaste_interface__ICaL__ffp + var_ICaL__fss) / var_ICaL__tff; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL__fs = (-var_chaste_interface__ICaL__fs + var_ICaL__fss) / (_lt_0_row[31]); // 1 / millisecond
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cai * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 13) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 13) / (-1.0 + exp(-9.9999999999999995e-8))) + 2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 13) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cai * _lt_0_row[3]) * NV_Ith_S(mParameters, 13) / (_lt_0_row[4]))); // microA_per_microF
        const double d_dt_chaste_interface_var_IK1__xk1 = (-var_chaste_interface__IK1__xk1 + 1 / (1.0 + exp((-144.59 - var_chaste_interface__membrane__v - 2.5537999999999998 * NV_Ith_S(mParameters, 10)) / (3.8115000000000001 + 1.5691999999999999 * NV_Ith_S(mParameters, 10))))) * (_lt_0_row[32]); // 1 / millisecond
        const double var_IKs__xs1ss = _lt_0_row[33]; // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs1 = (-var_chaste_interface__IKs__xs1 + var_IKs__xs1ss) / (_lt_0_row[34]); // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs__xs2 = (-var_chaste_interface__IKs__xs2 + var_IKs__xs1ss) * (_lt_0_row[35]); // 1 / millisecond
        const double var_INa__hss = 1 / (1.0 + exp(13.621426224120933 + 0.16431153466973381 * var_chaste_interface__membrane__v - 0.16431153466973381 * var_INa__shift_INa_inact)); // dimensionless
        const double var_INa__jss = var_INa__hss; // dimensionless
        const double d_dt_chaste_interface_var_INa__hf = (-var_chaste_interface__INa__hf + var_INa__hss) * (6.149 * exp(0.025140601874691665 + 0.049333991119881598 * var_chaste_interface__membrane__v - 0.049333991119881598 * var_INa__shift_INa_inact) + 1.432e-5 * exp(-0.19029435163086714 + 0.15910898965791567 * var_INa__shift_INa_inact - 0.15910898965791567 * var_chaste_interface__membrane__v)); // 1 / millisecond
        const double var_INa__ths = 1 / (0.0097940000000000006 * exp(-0.63992869875222813 + 0.035650623885918005 * var_INa__shift_INa_inact - 0.035650623885918005 * var_chaste_interface__membrane__v) + 0.33429999999999999 * exp(0.10112954465231205 + 0.017649135192375574 * var_chaste_interface__membrane__v - 0.017649135192375574 * var_INa__shift_INa_inact)); // millisecond
        const double d_dt_chaste_interface_var_INa__hs = (-var_chaste_interface__INa__hs + var_INa__hss) / var_INa__ths; // 1 / millisecond
        const double d_dt_chaste_interface_var_INa__hsp = 0.33333333333333331 * (-var_chaste_interface__INa__hsp + 1 / (1.0 + exp(14.640157739073281 + 0.16431153466973381 * var_chaste_interface__membrane__v - 0.16431153466973381 * var_INa__shift_INa_inact))) / var_INa__ths; // 1 / millisecond
        const double var_INa__tj = 2.0379999999999998 + 1 / (0.30520000000000003 * exp(0.025854356306892066 + 0.02600780234070221 * var_chaste_interface__membrane__v - 0.02600780234070221 * var_INa__shift_INa_inact) + 0.021360000000000001 * exp(-12.148291269170388 + 0.12075836251660427 * var_INa__shift_INa_inact - 0.12075836251660427 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_INa__j = (-var_chaste_interface__INa__j + var_INa__jss) / var_INa__tj; // 1 / millisecond
        const double d_dt_chaste_interface_var_INa__jp = 0.68493150684931503 * (-var_chaste_interface__INa__jp + var_INa__jss) / var_INa__tj; // 1 / millisecond
        const double var_INa__tm = _lt_0_row[36]; // millisecond
        const double d_dt_chaste_interface_var_INa__m = (-var_chaste_interface__INa__m + _lt_0_row[37]) / var_INa__tm; // 1 / millisecond
        const double d_dt_chaste_interface_var_INaL__hL = _lt_0_row[38] - 0.0050000000000000001 * var_chaste_interface__INaL__hL; // 1 / millisecond
        const double d_dt_chaste_interface_var_INaL__hLp = _lt_0_row[39] - 0.0016666666666666668 * var_chaste_interface__INaL__hLp; // 1 / millisecond
        const double d_dt_chaste_interface_var_INaL__mL = (-var_chaste_interface__INaL__mL + _lt_0_row[40]) / var_INa__tm; // 1 / millisecond
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-NV_Ith_S(mParameters, 11) + var_chaste_interface__intracellular_ions__nai * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 15) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-NV_Ith_S(mParameters, 11) + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 15) / (-1.0 + exp(-9.9999999999999995e-8))) + 2.671233870549826e-13 * (-NV_Ith_S(mParameters, 11) + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 15) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-NV_Ith_S(mParameters, 11) + var_chaste_interface__intracellular_ions__nai * _lt_0_row[1]) * NV_Ith_S(mParameters, 15) / (_lt_0_row[2]))); // microA_per_microF
        const double var_Ito__AiF = _lt_0_row[5]; // dimensionless
        const double var_Ito__AiS = 1.0 - var_Ito__AiF; // dimensionless
        const double var_Ito__delta_epi = ((var_environment__celltype == 1.0) ? (_lt_0_row[41]) : (1.0)); // dimensionless
        const double var_Ito__dti_develop = _lt_0_row[42]; // dimensionless
        const double var_Ito__dti_recover = _lt_0_row[43]; // dimensionless
        const double var_Ito__iss = _lt_0_row[44]; // dimensionless
        const double var_Ito__ta = _lt_0_row[45]; // millisecond
        const double d_dt_chaste_interface_var_Ito__a = (-var_chaste_interface__Ito__a + _lt_0_row[46]) / var_Ito__ta; // 1 / millisecond
        const double d_dt_chaste_interface_var_Ito__ap = (-var_chaste_interface__Ito__ap + _lt_0_row[47]) / var_Ito__ta; // 1 / millisecond
        const double var_Ito__tiF = (_lt_0_row[48]) * var_Ito__delta_epi; // millisecond
        const double d_dt_chaste_interface_var_Ito__iF = (-var_chaste_interface__Ito__iF + var_Ito__iss) / var_Ito__tiF; // 1 / millisecond
        const double d_dt_chaste_interface_var_Ito__iFp = (-var_chaste_interface__Ito__iFp + var_Ito__iss) / (var_Ito__dti_develop * var_Ito__dti_recover * var_Ito__tiF); // 1 / millisecond
        const double var_Ito__tiS = (_lt_0_row[49]) * var_Ito__delta_epi; // millisecond
        const double d_dt_chaste_interface_var_Ito__iS = (-var_chaste_interface__Ito__iS + var_Ito__iss) / var_Ito__tiS; // 1 / millisecond
        const double d_dt_chaste_interface_var_Ito__iSp = (-var_chaste_interface__Ito__iSp + var_Ito__iss) / (var_Ito__dti_develop * var_Ito__dti_recover * var_Ito__tiS); // 1 / millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__kss = -var_diff__JdiffK - 0.0020917052580005369 * var_ICaL__ICaK; // millimolar / millisecond
        const double var_INaCa_i__hca = _lt_0_row[6]; // dimensionless
        const double var_INaCa_i__hna = _lt_0_row[7]; // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__h2_i = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h2_ss = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * NV_Ith_S(mParameters, 11); // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * NV_Ith_S(mParameters, 11); // dimensionless
        const double var_INaCa_i__h8_i = 0.011348161597821153 * NV_Ith_S(mParameters, 11) / (var_INaCa_i__h7_i * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__h8_ss = 0.011348161597821153 * NV_Ith_S(mParameters, 11) / (var_INaCa_i__h7_ss * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__k3pp_i = 5000.0 * var_INaCa_i__h8_i; // dimensionless
        const double var_INaCa_i__k3_i = 60000.0 / var_INaCa_i__h7_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = 5000.0 * var_INaCa_i__h8_ss; // dimensionless
        const double var_INaCa_i__k3_ss = 60000.0 / var_INaCa_i__h7_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4pp_i = 5000.0 * var_INaCa_i__h2_i; // dimensionless
        const double var_INaCa_i__k4_i = 60000.0 / (var_INaCa_i__h1_i * var_INaCa_i__hca) + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = 5000.0 * var_INaCa_i__h2_ss; // dimensionless
        const double var_INaCa_i__k4_ss = 60000.0 / (var_INaCa_i__h1_ss * var_INaCa_i__hca) + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = 800.0 * pow(var_chaste_interface__intracellular_ions__nai, 2) * var_INaCa_i__h2_i / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k7_ss = 800.0 * pow(var_chaste_interface__intracellular_ions__nass, 2) * var_INaCa_i__h2_ss / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k8_i = 800.0 * pow(NV_Ith_S(mParameters, 11), 2) * var_INaCa_i__h8_i / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k8_ss = 800.0 * pow(NV_Ith_S(mParameters, 11), 2) * var_INaCa_i__h8_ss / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__x1_i = 5000.0 * (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k7_i + 5000.0 * (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = 5000.0 * (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k7_ss + 5000.0 * (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i + (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i; // dimensionless
        const double var_INaCa_i__x2_ss = (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss; // dimensionless
        const double var_INaCa_i__x3_i = (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = 5000.0 * (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k8_i + 5000.0 * (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__x4_ss = 5000.0 * (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k8_ss + 5000.0 * (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaK__Knai = _lt_0_row[8]; // millimolar
        const double var_INaK__Knao = _lt_0_row[9]; // millimolar
        const double var_INaK__a1 = 949.5 * pow(var_chaste_interface__intracellular_ions__nai, 3) / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ki), 2)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = 14800.411886344058 * pow(NV_Ith_S(mParameters, 10), 2) / (-1.0 + pow((1.0 + NV_Ith_S(mParameters, 11) / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + NV_Ith_S(mParameters, 10)), 2)); // dimensionless
        const double var_INaK__b2 = 39.399999999999999 * pow(NV_Ith_S(mParameters, 11), 3) / ((-1.0 + pow((1.0 + NV_Ith_S(mParameters, 11) / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + NV_Ith_S(mParameters, 10)), 2)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = 160.0 * pow(var_chaste_interface__intracellular_ions__ki, 2) / (-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ki), 2)); // dimensionless
        const double var_INaK__x1 = 439120.79239156016 * var_INaK__a1 + 687.20000000000005 * var_INaK__a1 * var_INaK__b3 + 687.20000000000005 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = 687.20000000000005 * var_INaK__a1 * var_INaK__a3 + 696.32000000000005 * var_INaK__a3 * var_INaK__b4 + 9.120000000000001 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = 444948.47229058668 * var_INaK__a3 + 5827.6798990265261 * var_INaK__b2 + 9.120000000000001 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = 638.99998892834708 * var_INaK__a1 * var_INaK__a3 + 638.99998892834708 * var_INaK__a1 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaCa_i__INaCa_i = 0.80000000000000004 * (10000.0 * var_INaCa_i__E2_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i - 2.0 * var_INaCa_i__E1_i * var_INaCa_i__k1_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i + var_INaCa_i__k4pp_i * var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i) + 3.0 * var_INaCa_i__k7_i * var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i)) * var_INaCa_i__Gncx / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cai, 2)); // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__cai = (0.029411764705882353 * var_diff__Jdiff + 6.1520742882368733e-5 * var_INaCa_i__INaCa_i - 3.0760371441184366e-5 * var_ICab__ICab - 3.0760371441184366e-5 * var_IpCa__IpCa - 0.081176470588235281 * var_SERCA__Jup) / (1.0 + 3.5000000000000004e-5 / pow((0.00050000000000000001 + var_chaste_interface__intracellular_ions__cai), 2) + 0.0023800000000000002 * ((var_environment__celltype == 1.0) ? (0.065000000000000002) : (0.050000000000000003)) / pow((0.0023800000000000002 + var_chaste_interface__intracellular_ions__cai), 2)); // millimolar / millisecond
        const double var_INaCa_i__INaCa_ss = 0.20000000000000001 * (10000.0 * var_INaCa_i__E2_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss - 2.0 * var_INaCa_i__E1_ss * var_INaCa_i__k1_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss + var_INaCa_i__k4pp_ss * var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss) + 3.0 * var_INaCa_i__k7_ss * var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss)) * var_INaCa_i__Gncx / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cass, 2)); // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__nass = -var_diff__JdiffNa - 0.0020917052580005369 * var_ICaL__ICaNa - 0.0062751157740016106 * var_INaCa_i__INaCa_ss; // millimolar / millisecond
        const double var_INaK__INaK = (18.240000000000002 * var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) + 3.0 * var_INaK__a3 * var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 2.0 * var_INaK__a1 * var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 3.0 * var_INaK__b3 * var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4)) * ((var_environment__celltype == 1.0) ? (0.90000000000000002 * NV_Ith_S(mParameters, 23)) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * NV_Ith_S(mParameters, 23)) : (NV_Ith_S(mParameters, 23)))); // microA_per_microF
        const double var_reversal_potentials__EK = 26.712338705498265 * log(NV_Ith_S(mParameters, 10) / var_chaste_interface__intracellular_ions__ki); // millivolt
        const double var_IK1__IK1 = sqrt(NV_Ith_S(mParameters, 10)) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((var_environment__celltype == 1.0) ? (1.2 * NV_Ith_S(mParameters, 18)) : ((var_environment__celltype == 2.0) ? (1.3 * NV_Ith_S(mParameters, 18)) : (NV_Ith_S(mParameters, 18)))) * var_chaste_interface__IK1__xk1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * NV_Ith_S(mParameters, 10))); // microA_per_microF
        const double var_IKb__IKb = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((var_environment__celltype == 1.0) ? (0.59999999999999998 * NV_Ith_S(mParameters, 14)) : (NV_Ith_S(mParameters, 14))) / (_lt_0_row[10]); // microA_per_microF
        const double var_IKr__IKr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 10)) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((var_environment__celltype == 1.0) ? (1.3 * NV_Ith_S(mParameters, 20)) : ((var_environment__celltype == 2.0) ? (0.80000000000000004 * NV_Ith_S(mParameters, 20)) : (NV_Ith_S(mParameters, 20)))) * var_chaste_interface__IKr__O; // microA_per_microF
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (var_Ito__AiF * var_chaste_interface__Ito__iF + var_Ito__AiS * var_chaste_interface__Ito__iS) * var_chaste_interface__Ito__a + (var_Ito__AiF * var_chaste_interface__Ito__iFp + var_Ito__AiS * var_chaste_interface__Ito__iSp) * var_chaste_interface__Ito__ap / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (((var_environment__celltype == 1.0) || (var_environment__celltype == 2.0)) ? (4.0 * NV_Ith_S(mParameters, 24)) : (NV_Ith_S(mParameters, 24))); // microA_per_microF
        const double var_reversal_potentials__ENa = 26.712338705498265 * log(NV_Ith_S(mParameters, 11) / var_chaste_interface__intracellular_ions__nai); // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (0.010000000000000009 * var_chaste_interface__INa__hs + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__j + (0.010000000000000009 * var_chaste_interface__INa__hsp + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__jp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * NV_Ith_S(mParameters, 17); // microA_per_microF
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * var_chaste_interface__INaL__hL + var_chaste_interface__INaL__hLp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * ((var_environment__celltype == 1.0) ? (0.59999999999999998 * NV_Ith_S(mParameters, 19)) : (NV_Ith_S(mParameters, 19))) * var_chaste_interface__INaL__mL; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__nai = 0.029411764705882353 * var_diff__JdiffNa - 0.0001845622286471062 * var_INaCa_i__INaCa_i - 0.0001845622286471062 * var_INaK__INaK - 6.1520742882368733e-5 * var_INa__INa - 6.1520742882368733e-5 * var_INaL__INaL - 6.1520742882368733e-5 * var_INab__INab; // millimolar / millisecond
        const double var_IKs__IKs = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__cai), 1.3999999999999999))) * (-26.712338705498265 * log((0.018329999999999999 * NV_Ith_S(mParameters, 11) + NV_Ith_S(mParameters, 10)) / (0.018329999999999999 * var_chaste_interface__intracellular_ions__nai + var_chaste_interface__intracellular_ions__ki)) + var_chaste_interface__membrane__v) * ((var_environment__celltype == 1.0) ? (1.3999999999999999 * NV_Ith_S(mParameters, 21)) : (NV_Ith_S(mParameters, 21))) * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__ki = 0.029411764705882353 * var_diff__JdiffK + 0.00012304148576473747 * var_INaK__INaK - 6.1520742882368733e-5 * var_IK1__IK1 - 6.1520742882368733e-5 * var_IKb__IKb - 6.1520742882368733e-5 * var_IKr__IKr - 6.1520742882368733e-5 * var_IKs__IKs - 6.1520742882368733e-5 * var_Ito__Ito - 6.1520742882368733e-5 * var_membrane__Istim; // millimolar / millisecond
        const double var_ryr__Jrel = ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * var_chaste_interface__ryr__Jrelnp + var_chaste_interface__ryr__Jrelp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * NV_Ith_S(mParameters, 7); // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cass = (-var_diff__Jdiff + 0.0020917052580005369 * var_INaCa_i__INaCa_ss + 0.23999999999999996 * var_ryr__Jrel - 0.0010458526290002684 * var_ICaL__ICaL) / (1.0 + 0.0097788000000000007 / pow((0.0086999999999999994 + var_chaste_interface__intracellular_ions__cass), 2) + 4.0890000000000003e-5 / pow((0.00087000000000000001 + var_chaste_interface__intracellular_ions__cass), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_ryr__Jrelnp = (-var_chaste_interface__ryr__Jrelnp + ((var_environment__celltype == 2.0) ? (-4.0374999999999996 * var_ICaL__ICaL / (1.0 + 25.62890625 / pow(var_chaste_interface__intracellular_ions__cajsr, 8))) : (-2.375 * var_ICaL__ICaL / (1.0 + 25.62890625 / pow(var_chaste_interface__intracellular_ions__cajsr, 8))))) * ((4.75 / (1.0 + 0.0123 / var_chaste_interface__intracellular_ions__cajsr) < 0.001) ? (1000.0) : (0.21052631578947367 + 0.0025894736842105265 / var_chaste_interface__intracellular_ions__cajsr)); // 1 / millisecond
        const double d_dt_chaste_interface_var_ryr__Jrelp = (-var_chaste_interface__ryr__Jrelp + ((var_environment__celltype == 2.0) ? (-5.046875 * var_ICaL__ICaL / (1.0 + 25.62890625 / pow(var_chaste_interface__intracellular_ions__cajsr, 8))) : (-2.96875 * var_ICaL__ICaL / (1.0 + 25.62890625 / pow(var_chaste_interface__intracellular_ions__cajsr, 8))))) * ((5.9375 / (1.0 + 0.0123 / var_chaste_interface__intracellular_ions__cajsr) < 0.001) ? (1000.0) : (0.16842105263157894 + 0.0020715789473684213 / var_chaste_interface__intracellular_ions__cajsr)); // 1 / millisecond
        const double var_trans_flux__Jtr = 0.01 * var_chaste_interface__intracellular_ions__cansr - 0.01 * var_chaste_interface__intracellular_ions__cajsr; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cajsr = (-var_ryr__Jrel + var_trans_flux__Jtr) / (1.0 + 8.0 / pow((0.80000000000000004 + var_chaste_interface__intracellular_ions__cajsr), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cansr = -0.086956521739130432 * var_trans_flux__Jtr + var_SERCA__Jup; // millimolar / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__v = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_membrane__v = -var_ICaL__ICaK - var_ICaL__ICaL - var_ICaL__ICaNa - var_ICab__ICab - var_IK1__IK1 - var_IKb__IKb - var_IKr__IKr - var_IKs__IKs - var_INa__INa - var_INaCa_i__INaCa_i - var_INaCa_i__INaCa_ss - var_INaK__INaK - var_INaL__INaL - var_INab__INab - var_IpCa__IpCa - var_Ito__Ito - var_membrane__Istim; // millivolt / millisecond
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_membrane__v;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_intracellular_ions__cai;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_CaMK__CaMKt;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_intracellular_ions__nai;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_intracellular_ions__nass;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_intracellular_ions__ki;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_intracellular_ions__kss;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_intracellular_ions__cass;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_intracellular_ions__cansr;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_intracellular_ions__cajsr;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_INa__m;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_INa__hf;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_INa__hs;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_INa__j;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_INa__hsp;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_INa__jp;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_INaL__mL;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_INaL__hL;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_INaL__hLp;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_Ito__a;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_Ito__iF;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_Ito__iS;
        NV_Ith_S(rDY,22) = d_dt_chaste_interface_var_Ito__ap;
        NV_Ith_S(rDY,23) = d_dt_chaste_interface_var_Ito__iFp;
        NV_Ith_S(rDY,24) = d_dt_chaste_interface_var_Ito__iSp;
        NV_Ith_S(rDY,25) = d_dt_chaste_interface_var_ICaL__d;
        NV_Ith_S(rDY,26) = d_dt_chaste_interface_var_ICaL__ff;
        NV_Ith_S(rDY,27) = d_dt_chaste_interface_var_ICaL__fs;
        NV_Ith_S(rDY,28) = d_dt_chaste_interface_var_ICaL__fcaf;
        NV_Ith_S(rDY,29) = d_dt_chaste_interface_var_ICaL__fcas;
        NV_Ith_S(rDY,30) = d_dt_chaste_interface_var_ICaL__jca;
        NV_Ith_S(rDY,31) = d_dt_chaste_interface_var_ICaL__ffp;
        NV_Ith_S(rDY,32) = d_dt_chaste_interface_var_ICaL__fcafp;
        NV_Ith_S(rDY,33) = d_dt_chaste_interface_var_ICaL__nca;
        NV_Ith_S(rDY,34) = d_dt_chaste_interface_var_IKr__IC1;
        NV_Ith_S(rDY,35) = d_dt_chaste_interface_var_IKr__IC2;
        NV_Ith_S(rDY,36) = d_dt_chaste_interface_var_IKr__C1;
        NV_Ith_S(rDY,37) = d_dt_chaste_interface_var_IKr__C2;
        NV_Ith_S(rDY,38) = d_dt_chaste_interface_var_IKr__O;
        NV_Ith_S(rDY,39) = d_dt_chaste_interface_var_IKr__IO;
        NV_Ith_S(rDY,40) = d_dt_chaste_interface_var_IKr__IObound;
        NV_Ith_S(rDY,41) = d_dt_chaste_interface_var_IKr__Obound;
        NV_Ith_S(rDY,42) = d_dt_chaste_interface_var_IKr__Cbound;
        NV_Ith_S(rDY,43) = d_dt_chaste_interface_var_IKs__xs1;
        NV_Ith_S(rDY,44) = d_dt_chaste_interface_var_IKs__xs2;
        NV_Ith_S(rDY,45) = d_dt_chaste_interface_var_IK1__xk1;
        NV_Ith_S(rDY,46) = d_dt_chaste_interface_var_ryr__Jrelnp;
        NV_Ith_S(rDY,47) = d_dt_chaste_interface_var_ryr__Jrelp;
    }

    void Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -88.00190465
        double var_chaste_interface__intracellular_ions__cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 8.6e-05
        double var_chaste_interface__CaMK__CaMKt = NV_Ith_S(rY, 2);
        // Units: millimolar; Initial value: 0.0125840447
        double var_chaste_interface__intracellular_ions__nai = NV_Ith_S(rY, 3);
        // Units: millimolar; Initial value: 7.268004498
        double var_chaste_interface__intracellular_ions__nass = NV_Ith_S(rY, 4);
        // Units: millimolar; Initial value: 7.268089977
        double var_chaste_interface__intracellular_ions__ki = NV_Ith_S(rY, 5);
        // Units: millimolar; Initial value: 144.6555918
        double var_chaste_interface__intracellular_ions__kss = NV_Ith_S(rY, 6);
        // Units: millimolar; Initial value: 144.6555651
        double var_chaste_interface__intracellular_ions__cass = NV_Ith_S(rY, 7);
        // Units: millimolar; Initial value: 8.49e-05
        double var_chaste_interface__intracellular_ions__cansr = NV_Ith_S(rY, 8);
        // Units: millimolar; Initial value: 1.619574538
        double var_chaste_interface__intracellular_ions__cajsr = NV_Ith_S(rY, 9);
        // Units: millimolar; Initial value: 1.571234014
        double var_chaste_interface__INa__m = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.007344121102
        double var_chaste_interface__INa__hf = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.6981071913
        double var_chaste_interface__INa__hs = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.6980895801
        double var_chaste_interface__INa__j = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.6979908432
        double var_chaste_interface__INa__hsp = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.4549485525
        double var_chaste_interface__INa__jp = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.6979245865
        double var_chaste_interface__INaL__mL = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.0001882617273
        double var_chaste_interface__INaL__hL = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.5008548855
        double var_chaste_interface__INaL__hLp = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.2693065357
        double var_chaste_interface__Ito__a = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.001001097687
        double var_chaste_interface__Ito__iF = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.9995541745
        double var_chaste_interface__Ito__iS = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.5865061736
        double var_chaste_interface__Ito__ap = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.0005100862934
        double var_chaste_interface__Ito__iFp = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 0.9995541823
        double var_chaste_interface__Ito__iSp = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 0.6393399482
        double var_chaste_interface__ICaL__d = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 2.34e-09
        double var_chaste_interface__ICaL__ff = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fs = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.9102412777
        double var_chaste_interface__ICaL__fcaf = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcas = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 0.9998046777
        double var_chaste_interface__ICaL__jca = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 0.9999738312
        double var_chaste_interface__ICaL__ffp = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcafp = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__nca = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.002749414044
        double var_chaste_interface__IKr__IC1 = NV_Ith_S(rY, 34);
        // Units: dimensionless; Initial value: 0.999637
        double var_chaste_interface__IKr__IC2 = NV_Ith_S(rY, 35);
        // Units: dimensionless; Initial value: 6.83208e-05
        double var_chaste_interface__IKr__C1 = NV_Ith_S(rY, 36);
        // Units: dimensionless; Initial value: 1.80145e-08
        double var_chaste_interface__IKr__C2 = NV_Ith_S(rY, 37);
        // Units: dimensionless; Initial value: 8.26619e-05
        double var_chaste_interface__IKr__O = NV_Ith_S(rY, 38);
        // Units: dimensionless; Initial value: 0.00015551
        double var_chaste_interface__IKr__IO = NV_Ith_S(rY, 39);
        // Units: dimensionless; Initial value: 5.67623e-05
        double var_chaste_interface__IKr__IObound = NV_Ith_S(rY, 40);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__Cbound = NV_Ith_S(rY, 42);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 43);
        // Units: dimensionless; Initial value: 0.2707758025
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 44);
        // Units: dimensionless; Initial value: 0.0001928503426
        double var_chaste_interface__IK1__xk1 = NV_Ith_S(rY, 45);
        // Units: dimensionless; Initial value: 0.9967597594
        double var_chaste_interface__ryr__Jrelnp = NV_Ith_S(rY, 46);
        // Units: dimensionless; Initial value: 2.5e-07
        double var_chaste_interface__ryr__Jrelp = NV_Ith_S(rY, 47);
        // Units: dimensionless; Initial value: 3.12e-07
        
        // Lookup table indexing
        const bool _oob_0 = Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);
const double var_x0 = -NV_Ith_S(mParameters, 11);
        const double var_x1 = exp(9.9999999999999995e-8);
        const double var_x2 = 1 / (-1.0 + var_x1);
        const double var_x3 = 4.9999999999999998e-8 * var_x2;
        const double var_x4 = exp(-9.9999999999999995e-8);
        const double var_x5 = 1 / (-1.0 + var_x4);
        const double var_x6 = 4.9999999999999998e-8 * var_x5;
        const double var_x7 = fabs(var_chaste_interface__membrane__v);
        const double var_x8 = var_x7 < 2.6712338705498262e-6;
        const double var_x9 = _lt_0_row[1];
        const double var_x10 = -1.0 + var_x9;
        const double var_x11 = 1 / var_x10;
        const double var_x12 = 0.074871767015605231 * var_chaste_interface__membrane__v;
        const double var_x13 = var_x11 * var_x12;
        const double var_x14 = var_x9 * var_chaste_interface__intracellular_ions__nai;
        const double var_x15 = (var_x0 + var_x14) * NV_Ith_S(mParameters, 15);
        const double var_x16 = pow(var_chaste_interface__membrane__v, 2);
        const double var_x17 = var_x11 * var_x16;
        const double var_x18 = 0.0014014453740097681 * var_x16 * var_x9 / pow(var_x10, 2);
        const double var_x19 = ((var_x8) ? (var_x3 * (var_x0 + var_x1 * var_chaste_interface__intracellular_ions__nai) * NV_Ith_S(mParameters, 15) - var_x6 * (var_x0 + var_x4 * var_chaste_interface__intracellular_ions__nai) * NV_Ith_S(mParameters, 15)) : (var_x13 * var_x15 - var_x15 * var_x18 + 0.0014014453740097681 * var_x14 * var_x17 * NV_Ith_S(mParameters, 15)));
        const double var_x20 = 9.9999999999999995e-8 * NV_Ith_S(mParameters, 13);
        const double var_x21 = -0.34100000000000003 * NV_Ith_S(mParameters, 9);
        const double var_x22 = var_x21 + var_x1 * var_chaste_interface__intracellular_ions__cai;
        const double var_x23 = var_x2 * var_x22;
        const double var_x24 = var_x21 + var_x4 * var_chaste_interface__intracellular_ions__cai;
        const double var_x25 = var_x24 * var_x5;
        const double var_x26 = var_x7 < 1.3356169352749131e-6;
        const double var_x27 = 0.29948706806242092 * var_chaste_interface__membrane__v;
        const double var_x28 = exp(var_x12);
        const double var_x29 = var_x28 * var_chaste_interface__intracellular_ions__cai;
        const double var_x30 = var_x21 + var_x29;
        const double var_x31 = -1.0 + var_x28;
        const double var_x32 = 1 / var_x31;
        const double var_x33 = var_x32 * NV_Ith_S(mParameters, 13);
        const double var_x34 = var_x30 * var_x33;
        const double var_x35 = 0.011211562992078145 * var_x16;
        const double var_x36 = var_x29 * var_x33;
        const double var_x37 = var_x28 / pow(var_x31, 2);
        const double var_x38 = var_x35 * var_x37;
        const double var_x39 = var_x30 * NV_Ith_S(mParameters, 13);
        const double var_x40 = exp(-1.4126984126984128 + 0.0066137566137566143 * var_chaste_interface__membrane__v);
        const double var_x41 = 1.0 + var_x40;
        const double var_x42 = 1 / var_x41;
        const double var_x43 = var_x42;
        const double var_x44 = 1.0 - var_x43;
        const double var_x45 = var_x43 * var_chaste_interface__Ito__iF + var_x44 * var_chaste_interface__Ito__iS;
        const double var_x46 = 1.0 - var_chaste_interface__CaMK__CaMKt;
        const double var_x47 = 1 / var_chaste_interface__intracellular_ions__cass;
        const double var_x48 = 1.0 + 0.0015 * var_x47;
        const double var_x49 = 1 / var_x48;
        const double var_x50 = 0.050000000000000003 * var_x49;
        const double var_x51 = var_x46 * var_x50 + var_chaste_interface__CaMK__CaMKt;
        const double var_x52 = 1.0 + 0.14999999999999999 / var_x51;
        const double var_x53 = 1 / var_x52;
        const double var_x54 = var_x53;
        const double var_x55 = 1.0 - var_x54;
        const double var_x56 = var_x55 * var_chaste_interface__Ito__a;
        const double var_x57 = var_x45 * var_x56;
        const double var_x58 = var_x43 * var_chaste_interface__Ito__iFp + var_x44 * var_chaste_interface__Ito__iSp;
        const double var_x59 = var_x54 * var_chaste_interface__Ito__ap;
        const double var_x60 = var_x58 * var_x59;
        const double var_x61 = exp(0.014412815150504008 * var_chaste_interface__membrane__v);
        const double var_x62 = NV_Ith_S(mParameters, 11) / var_x61;
        const double var_x63 = 1.0 + 0.035997120230381568 * var_x62;
        const double var_x64 = pow(var_x63, 3);
        const double var_x65 = pow((0.35820000000000002 + NV_Ith_S(mParameters, 10)), 2);
        const double var_x66 = 1 / (-1.0 + var_x64 + 7.7937924625297832 * var_x65);
        const double var_x67 = pow(NV_Ith_S(mParameters, 10), 2);
        const double var_x68 = var_x66 * var_x67;
        const double var_x69 = pow(var_chaste_interface__intracellular_ions__nai, 3);
        const double var_x70 = exp(-0.001934187314569802 * var_chaste_interface__membrane__v);
        const double var_x71 = 1 / var_x70;
        const double var_x72 = var_x71 * var_chaste_interface__intracellular_ions__nai;
        const double var_x73 = 1.0 + 0.11021712774165104 * var_x72;
        const double var_x74 = pow(var_x73, 3);
        const double var_x75 = pow((0.5 + var_chaste_interface__intracellular_ions__ki), 2);
        const double var_x76 = 1 / (-1.0 + var_x74 + 4.0 * var_x75);
        const double var_x77 = pow(var_x70, (-3));
        const double var_x78 = var_x76 * var_x77;
        const double var_x79 = var_x69 * var_x78;
        const double var_x80 = var_x68 * var_x79;
        const double var_x81 = pow(NV_Ith_S(mParameters, 11), 3);
        const double var_x82 = var_x66 * var_x81 / pow(var_x61, 3);
        const double var_x83 = var_x79 * var_x82;
        const double var_x84 = 0.055889557593578436 * var_x83;
        const double var_x85 = pow(var_chaste_interface__intracellular_ions__nai, 4);
        const double var_x86 = pow((-0.25 + var_x75 + 0.25 * var_x74), (-2));
        const double var_x87 = var_x86 * pow(var_x73, 2);
        const double var_x88 = var_x87 / pow(var_x70, 4);
        const double var_x89 = var_x85 * var_x88;
        const double var_x90 = var_x68 * var_x89;
        const double var_x91 = pow(NV_Ith_S(mParameters, 11), 4);
        const double var_x92 = pow(var_x63, 2) / pow((-0.12830724000000002 + var_x65 + 0.12830724000000002 * var_x64), 2);
        const double var_x93 = var_x91 * var_x92 / pow(var_x61, 4);
        const double var_x94 = 3.8254518568091561e-5 * var_x79 * var_x93;
        const double var_x95 = 5.9674869303184292e-5 * var_x82 * var_x89;
        const double var_x96 = 1 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ki + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nai);
        const double var_x97 = var_x79 * var_x96;
        const double var_x98 = var_x82 * var_x97;
        const double var_x99 = 5.0473555837397499e-14 * var_x98;
        const double var_x100 = 3.4547447897515249e-17 * var_x93 * var_x97;
        const double var_x101 = var_x62 * var_x67 * var_x92;
        const double var_x102 = var_x101 * var_x79;
        const double var_x103 = var_x82 * var_x96;
        const double var_x104 = 5.3892050278274906e-17 * var_x103 * var_x89;
        const double var_x105 = pow(var_chaste_interface__intracellular_ions__ki, 2);
        const double var_x106 = var_x105 * var_x76;
        const double var_x107 = var_x106 * var_x96;
        const double var_x108 = var_x107 * var_x82;
        const double var_x109 = var_x107 * var_x93;
        const double var_x110 = var_x103 * var_x105;
        const double var_x111 = var_x110 * var_x87;
        const double var_x112 = var_x111 * var_x72;
        const double var_x113 = 4.3480418621224681e-15 * var_x109 - 6.7826975625137684e-15 * var_x112 - 7.3370863801098288e-12 * var_x108;
        const double var_x114 = var_x100 + var_x113 + var_x94 - var_x104 - var_x84 - var_x95 - var_x99 + 69764.851499334152 * var_x80 + 308.07541688865297 * var_x102 - 480.58009684871422 * var_x90;
        const double var_x115 = var_x106 * var_x68;
        const double var_x116 = var_x106 * var_x82;
        const double var_x117 = 2.6817254812739919 * var_x116 + 1648931648.7518551 * var_x115;
        const double var_x118 = 6585420658.1002293 * var_x68 + 9.6722701128385645e-12 * var_x103 + 10.71014095526842 * var_x82;
        const double var_x119 = 1.348266719199441e-12 * var_x98 + 1.4929407925401197 * var_x83;
        const double var_x120 = 6.3450816326903207e-5 * var_x107 + 5.041496472709802e-7 * var_x97 + 558246.7943749798 * var_x79;
        const double var_x121 = 1 / (var_x117 + var_x118 + var_x119 + var_x120 + 3.3937789869608994e-10 * var_x108 + 24953131.661984976 * var_x80);
        const double var_x122 = 18.240000000000002 * var_x121;
        const double var_x123 = 0.11595364093799532 * var_x116;
        const double var_x124 = 6.8715462616152846e-5 * var_x106 * var_x93;
        const double var_x125 = 42251.565962885674 * var_x101 * var_x106;
        const double var_x126 = var_x105 * var_x68;
        const double var_x127 = var_x126 * var_x87;
        const double var_x128 = 65910.035495601784 * var_x127 * var_x72;
        const double var_x129 = var_x105 * var_x82;
        const double var_x130 = var_x129 * var_x87;
        const double var_x131 = 0.00010719220641681538 * var_x130 * var_x72;
        const double var_x132 = var_x124 + var_x125 - var_x123 - var_x128 - var_x131 + 75027.240658870098 * var_x80 + 331.31366221294553 * var_x102 - 516.8304354876426 * var_x90;
        const double var_x133 = var_x121 * var_x96;
        const double var_x134 = 1.7312322557180369e-9 * var_x133;
        const double var_x135 = 0.46308984547237841 * var_x82;
        const double var_x136 = 3239.2616042380282 * var_x79;
        const double var_x137 = 4.1821392366626031e-13 * var_x103;
        const double var_x138 = 22.313881876433015 * var_x89;
        const double var_x139 = 0.00027443237406829952 * var_x93;
        const double var_x140 = 2.9253595571891104e-9 * var_x97;
        const double var_x141 = 2.0151545500310745e-11 * var_x89 * var_x96;
        const double var_x142 = 2.478383861409807e-16 * var_x93 * var_x96;
        const double var_x143 = 168742.18864055796 * var_x101;
        const double var_x144 = var_x105 * var_x96;
        const double var_x145 = var_x144 * var_x87;
        const double var_x146 = 2.5362152272937833e-9 * var_x145 * var_x72;
        const double var_x147 = var_x104 + var_x123 + var_x128 + var_x131 + var_x135 + var_x137 + var_x138 + var_x141 + var_x146 + var_x84 + var_x95 + var_x99 - var_x100 - var_x124 - var_x125 - var_x136 - var_x139 - var_x140 - var_x142 - var_x143 - var_x94 + 1.3565395125027537e-14 * var_x112 + 997.41053233635682 * var_x90 + 1.4674172760219658e-11 * var_x108 - 8.6960837242449363e-15 * var_x109 - 639.38907910159844 * var_x102 - 144792.09215820426 * var_x80;
        const double var_x148 = pow((var_x68 + 0.25039124064514068 * var_x115 + 7.6555420442407695e-17 * var_x97 + 8.4770104046173956e-5 * var_x79 + 2.0473509426327076e-22 * var_x98 + 0.0037891477184972245 * var_x80 + 9.6350437764149725e-15 * var_x107 + 4.0722159152815902e-10 * var_x116 + 1.4687399051632995e-21 * var_x103 + 1.6263412029867345e-9 * var_x82 + 5.1534733514501733e-20 * var_x108 + 2.2670393738686469e-10 * var_x83), (-2));
        const double var_x149 = 1.6968894934804497e-10 * var_x108;
        const double var_x150 = var_x148 * (var_x119 + var_x149 + 12023111.890251627 * var_x80);
        const double var_x151 = 4.2058888433195179e-19 * var_x150;
        const double var_x152 = var_x147 * var_x148;
        const double var_x153 = var_x117 + 12930019.771733347 * var_x80;
        const double var_x154 = var_x153 * var_x96;
        const double var_x155 = 3.9919794021487793e-29 * var_x154;
        const double var_x156 = var_x113 + var_x136 + var_x140 - var_x138 - var_x141 - var_x146;
        const double var_x157 = var_x121 * var_x68;
        const double var_x158 = 44401.235659032172 * var_x157;
        const double var_x159 = var_x121 * var_x79;
        const double var_x160 = var_x118 * var_x159;
        const double var_x161 = var_x159 * (var_x139 + var_x142 + var_x143 - var_x135 - var_x137);
        const double var_x162 = var_x120 + var_x149;
        const double var_x163 = var_x162 * var_x68;
        const double var_x164 = 1.0238303820609877e-15 * var_x163;
        const double var_x165 = var_x118 * var_x79;
        const double var_x166 = 5.8628014788099666e-20 * var_x165;
        const double var_x167 = var_x118 * var_x121;
        const double var_x168 = var_x167 * var_x89;
        const double var_x169 = var_x101 * var_x121 * var_x162;
        const double var_x170 = exp(0.78953107960741553 - 0.054525627044711013 * var_chaste_interface__membrane__v);
        const double var_x171 = 1.0 + var_x170;
        const double var_x172 = NV_Ith_S(mParameters, 14) / var_x171;
        const double var_x173 = 0.0066137566137566143 * var_x40 / pow(var_x41, 2);
        const double var_x174 = var_x56 * (var_x173 * var_chaste_interface__Ito__iS - var_x173 * var_chaste_interface__Ito__iF) + var_x59 * (var_x173 * var_chaste_interface__Ito__iSp - var_x173 * var_chaste_interface__Ito__iFp);
        const double var_x175 = -var_chaste_interface__membrane__v;
        const double var_x176 = 1 / var_chaste_interface__intracellular_ions__ki;
        const double var_x177 = log(var_x176 * NV_Ith_S(mParameters, 10));
        const double var_x178 = 26.712338705498265 * var_x177;
        const double var_x179 = (var_x175 + var_x178) * NV_Ith_S(mParameters, 24);
        const double var_x180 = var_x55 * var_chaste_interface__INaL__hL;
        const double var_x181 = var_x54 * var_chaste_interface__INaL__hLp;
        const double var_x182 = NV_Ith_S(mParameters, 19) * var_chaste_interface__INaL__mL;
        const double var_x183 = 0.98999999999999999 * var_chaste_interface__INa__hf;
        const double var_x184 = var_x183 + 0.010000000000000009 * var_chaste_interface__INa__hs;
        const double var_x185 = var_x184 * var_x55;
        const double var_x186 = var_x183 + 0.010000000000000009 * var_chaste_interface__INa__hsp;
        const double var_x187 = var_x186 * var_chaste_interface__INa__jp;
        const double var_x188 = var_x185 * var_chaste_interface__INa__j + var_x187 * var_x54;
        const double var_x189 = pow(var_chaste_interface__INa__m, 3) * NV_Ith_S(mParameters, 17);
        const double var_x190 = var_x188 * var_x189;
        const double var_x191 = 1 / (13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * NV_Ith_S(mParameters, 11)) * NV_Ith_S(mParameters, 11));
        const double var_x192 = _lt_0_row[7];
        const double var_x193 = 1 / var_x192;
        const double var_x194 = 1.0 + 0.011348161597821153 * (1.0 + var_x193) * NV_Ith_S(mParameters, 11);
        const double var_x195 = pow(var_x194, (-2));
        const double var_x196 = pow(var_x192, 2);
        const double var_x197 = var_x195 / var_x196;
        const double var_x198 = var_x191 * var_x197 * var_x91;
        const double var_x199 = 1 / var_x194;
        const double var_x200 = var_x191 * var_x199 * var_x81;
        const double var_x201 = var_x193 * var_x200;
        const double var_x202 = 0.0020148014998402175 * var_x198 - 0.17754430816591998 * var_x201;
        const double var_x203 = 0.011348161597821153 + 0.011348161597821153 * var_x192;
        const double var_x204 = 1.0 + var_x203 * var_chaste_interface__intracellular_ions__nass;
        const double var_x205 = 1 / var_x204;
        const double var_x206 = 1 / _lt_0_row[6];
        const double var_x207 = var_x205 * var_x206;
        const double var_x208 = var_x192 * var_x205;
        const double var_x209 = 56.740807989105761 * var_x208;
        const double var_x210 = var_x209 * var_chaste_interface__intracellular_ions__nass;
        const double var_x211 = var_x210 + 60000.0 * var_x207;
        const double var_x212 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass;
        const double var_x213 = 1 / var_x212;
        const double var_x214 = 1500000.0 * var_x213;
        const double var_x215 = var_x214 * var_chaste_interface__intracellular_ions__cass;
        const double var_x216 = var_x202 * var_x211 * var_x215;
        const double var_x217 = var_x208 * var_chaste_interface__intracellular_ions__nass;
        const double var_x218 = 1.1096519260369999 * var_x217;
        const double var_x219 = 0.012592509374001359 * var_x196;
        const double var_x220 = pow(var_x204, (-2));
        const double var_x221 = pow(var_chaste_interface__intracellular_ions__nass, 2);
        const double var_x222 = var_x220 * var_x221;
        const double var_x223 = var_x219 * var_x222;
        const double var_x224 = var_x192 * var_x206;
        const double var_x225 = 13.315823112443999 * var_x224;
        const double var_x226 = var_x220 * var_chaste_interface__intracellular_ions__nass;
        const double var_x227 = var_x218 - var_x223 - 375.10755274818223 * var_x207 - var_x225 * var_x226;
        const double var_x228 = var_x191 * NV_Ith_S(mParameters, 9);
        const double var_x229 = 1500000.0 * var_x228;
        const double var_x230 = var_x229 + 9.0785292782569211 * var_x201;
        const double var_x231 = var_x215 * var_x230;
        const double var_x232 = var_x227 * var_x231;
        const double var_x233 = 5000.0 + var_x211;
        const double var_x234 = pow(var_chaste_interface__intracellular_ions__nass, 3);
        const double var_x235 = var_x208 * var_x213;
        const double var_x236 = var_x234 * var_x235;
        const double var_x237 = var_x228 * var_x236;
        const double var_x238 = var_x233 * var_x237;
        const double var_x239 = 266316.46224887995 * var_x238;
        const double var_x240 = 13617793.917385383 * var_x237;
        const double var_x241 = var_x227 * var_x240;
        const double var_x242 = var_x213 * var_x220;
        const double var_x243 = var_x242 * pow(var_chaste_interface__intracellular_ions__nass, 4);
        const double var_x244 = var_x196 * var_x243;
        const double var_x245 = 3022.2022497603261 * var_x228;
        const double var_x246 = var_x233 * var_x244 * var_x245;
        const double var_x247 = var_x216 + var_x232 + var_x239 + var_x241 - var_x246;
        const double var_x248 = var_x211 * var_x230;
        const double var_x249 = 13617793.917385383 * var_x238 + var_x215 * var_x248;
        const double var_x250 = var_x215 + 9.0785292782569211 * var_x236;
        const double var_x251 = var_x193 * NV_Ith_S(mParameters, 11);
        const double var_x252 = var_x199 * var_x251;
        const double var_x253 = 56.740807989105761 * var_x252;
        const double var_x254 = var_x253 + 60000.0 * var_x199;
        const double var_x255 = var_x250 * var_x254;
        const double var_x256 = 5000.0 + var_x254;
        const double var_x257 = var_x201 * var_x256;
        const double var_x258 = var_x213 * var_x257;
        const double var_x259 = var_x258 * var_chaste_interface__intracellular_ions__cass;
        const double var_x260 = 13617793.917385383 * var_x259 + var_x229 * var_x255;
        const double var_x261 = var_x211 * var_x250;
        const double var_x262 = var_x236 * var_x256;
        const double var_x263 = 5000.0 * var_x261 + 45392.646391284608 * var_x262;
        const double var_x264 = var_x230 * var_x254;
        const double var_x265 = 5000.0 * var_x264;
        const double var_x266 = var_x201 * var_x233;
        const double var_x267 = var_x265 + 45392.646391284608 * var_x266;
        const double var_x268 = 1 / (var_x249 + var_x260 + var_x263 + var_x267);
        const double var_x269 = 10000.0 * var_x268;
        const double var_x270 = 0.00036716666666666668 * var_x264;
        const double var_x271 = var_x213 * var_x248;
        const double var_x272 = 0.11015000000000001 * var_x228;
        const double var_x273 = pow((var_x238 + var_x259 + var_x270 + 0.0033333333333333331 * var_x262 + 0.0033333333333333331 * var_x266 + 0.00036716666666666668 * var_x261 + var_x255 * var_x272 + 0.11015000000000001 * var_x271 * var_chaste_interface__intracellular_ions__cass), (-2));
        const double var_x274 = 62.962546870006797 * var_x196;
        const double var_x275 = 66579.115562219988 * var_x224;
        const double var_x276 = var_x250 * (5548.259630184999 * var_x217 - 1875537.7637409114 * var_x207 - var_x222 * var_x274 - var_x226 * var_x275);
        const double var_x277 = 283704.03994552878 * var_x208;
        const double var_x278 = 300000000.0 * var_x207 + var_x277 * var_chaste_interface__intracellular_ions__nass;
        const double var_x279 = 0.0020148014998402175 * var_x196;
        const double var_x280 = 0.17754430816591998 * var_x236 - var_x243 * var_x279;
        const double var_x281 = var_x278 * var_x280;
        const double var_x282 = var_x229 * var_x254;
        const double var_x283 = var_x280 * var_x282;
        const double var_x284 = var_x195 * var_x251;
        const double var_x285 = var_x197 * pow(NV_Ith_S(mParameters, 11), 2);
        const double var_x286 = 0.012592509374001359 * var_x285;
        const double var_x287 = 1.1096519260369999 * var_x252;
        const double var_x288 = var_x286 - var_x287 + 13.315823112443999 * var_x284;
        const double var_x289 = var_x229 * var_x288;
        const double var_x290 = var_x250 * var_x289;
        const double var_x291 = 10.074007499201088 * var_x256;
        const double var_x292 = var_x244 * var_x291;
        const double var_x293 = 887.72154082959992 * var_x266;
        const double var_x294 = 10.074007499201088 * var_x198;
        const double var_x295 = var_x233 * var_x294;
        const double var_x296 = 45392.646391284608 * var_x201;
        const double var_x297 = var_x227 * var_x296;
        const double var_x298 = 45392.646391284608 * var_x288;
        const double var_x299 = var_x236 * var_x298;
        const double var_x300 = 887.72154082959992 * var_x262;
        const double var_x301 = 266316.46224887995 * var_x259;
        const double var_x302 = var_x213 * var_chaste_interface__intracellular_ions__cass;
        const double var_x303 = 3022.2022497603261 * var_x198 * var_x256;
        const double var_x304 = var_x302 * var_x303;
        const double var_x305 = 13617793.917385383 * var_x201 * var_x288;
        const double var_x306 = var_x302 * var_x305;
        const double var_x307 = var_x202 * (300000000.0 * var_x199 + 283704.03994552878 * var_x252);
        const double var_x308 = var_x230 * (66579.115562219988 * var_x284 + 62.962546870006797 * var_x285 - 5548.259630184999 * var_x252);
        const double var_x309 = -var_x307 - var_x308;
        const double var_x310 = var_x273 * (var_x246 + var_x292 + var_x293 + var_x301 + var_x309 - var_x216 - var_x232 - var_x239 - var_x241 - var_x276 - var_x281 - var_x283 - var_x290 - var_x295 - var_x297 - var_x299 - var_x300 - var_x304 - var_x306);
        const double var_x311 = 5.3924544444444452e-11 * var_x249;
        const double var_x312 = 3000000.0 * var_x228;
        const double var_x313 = var_x268 * (var_x276 + var_x281 + var_x299 + var_x300 - var_x292);
        const double var_x314 = var_x210 * var_x268;
        const double var_x315 = var_x249 * var_x268;
        const double var_x316 = var_x260 * var_x268;
        const double var_x317 = var_x253 * var_x268;
        const double var_x318 = 1.6177363333333335e-8 * var_x228;
        const double var_x319 = var_x263 * var_x310;
        const double var_x320 = 0.5326329244977599 * var_x268;
        const double var_x321 = var_x201 * var_x263;
        const double var_x322 = var_x236 * var_x267;
        const double var_x323 = 3.0597222222222222e-13 * var_x310;
        const double var_x324 = var_x217 * var_x260;
        const double var_x325 = var_x307 + var_x308;
        const double var_x326 = 27.235587834770765 * var_x268;
        const double var_x327 = var_x249 * var_x252;
        const double var_x328 = 27.235587834770765 * var_x201;
        const double var_x329 = 0.0060444044995206529 * var_x268;
        const double var_x330 = 1.4686666666666667e-13 * var_x322;
        const double var_x331 = var_x218 * var_x316 + var_x247 * var_x269 + var_x287 * var_x315 + var_x310 * var_x311 + var_x310 * var_x330 + var_x314 * (var_x283 + var_x290 + var_x304 + var_x306 - var_x301) + var_x320 * var_x321 + var_x320 * var_x322 + var_x323 * var_x324 - var_x223 * var_x316 - var_x247 * var_x317 - var_x286 * var_x315 - var_x312 * var_x313 - var_x313 * var_x328 - var_x318 * var_x319 - var_x323 * var_x327 - 1.4686666666666667e-13 * var_x201 * var_x319 + var_x236 * var_x326 * (var_x295 + var_x297 + var_x325 - var_x293) - var_x198 * var_x263 * var_x329 - var_x244 * var_x267 * var_x329;
        const double var_x332 = pow(var_chaste_interface__intracellular_ions__cass, (-2));
        const double var_x333 = 1.0 + 2.2499999999999996e-8 * var_x332;
        const double var_x334 = NV_Ith_S(mParameters, 22) / var_x333;
        const double var_x335 = 0.20000000000000001 * var_x334;
        const double var_x336 = 1.0 + var_x203 * var_chaste_interface__intracellular_ions__nai;
        const double var_x337 = 1 / var_x336;
        const double var_x338 = var_x206 * var_x337;
        const double var_x339 = var_x192 * var_x337;
        const double var_x340 = 56.740807989105761 * var_x339;
        const double var_x341 = var_x340 * var_chaste_interface__intracellular_ions__nai;
        const double var_x342 = var_x341 + 60000.0 * var_x338;
        const double var_x343 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nai) * var_chaste_interface__intracellular_ions__nai;
        const double var_x344 = 1 / var_x343;
        const double var_x345 = 1500000.0 * var_x344;
        const double var_x346 = var_x345 * var_chaste_interface__intracellular_ions__cai;
        const double var_x347 = var_x202 * var_x342 * var_x346;
        const double var_x348 = var_x339 * var_chaste_interface__intracellular_ions__nai;
        const double var_x349 = 1.1096519260369999 * var_x348;
        const double var_x350 = pow(var_x336, (-2));
        const double var_x351 = pow(var_chaste_interface__intracellular_ions__nai, 2);
        const double var_x352 = var_x350 * var_x351;
        const double var_x353 = var_x219 * var_x352;
        const double var_x354 = var_x350 * var_chaste_interface__intracellular_ions__nai;
        const double var_x355 = var_x349 - var_x353 - 375.10755274818223 * var_x338 - var_x225 * var_x354;
        const double var_x356 = var_x230 * var_x346;
        const double var_x357 = var_x355 * var_x356;
        const double var_x358 = 5000.0 + var_x342;
        const double var_x359 = var_x339 * var_x344;
        const double var_x360 = var_x359 * var_x69;
        const double var_x361 = var_x228 * var_x360;
        const double var_x362 = var_x358 * var_x361;
        const double var_x363 = 266316.46224887995 * var_x362;
        const double var_x364 = 13617793.917385383 * var_x361;
        const double var_x365 = var_x355 * var_x364;
        const double var_x366 = var_x344 * var_x350;
        const double var_x367 = var_x366 * var_x85;
        const double var_x368 = var_x196 * var_x367;
        const double var_x369 = var_x245 * var_x358 * var_x368;
        const double var_x370 = var_x347 + var_x357 + var_x363 + var_x365 - var_x369;
        const double var_x371 = var_x230 * var_x342;
        const double var_x372 = 13617793.917385383 * var_x362 + var_x346 * var_x371;
        const double var_x373 = var_x346 + 9.0785292782569211 * var_x360;
        const double var_x374 = var_x257 * var_x344;
        const double var_x375 = var_x374 * var_chaste_interface__intracellular_ions__cai;
        const double var_x376 = 13617793.917385383 * var_x375 + var_x282 * var_x373;
        const double var_x377 = var_x342 * var_x373;
        const double var_x378 = var_x256 * var_x360;
        const double var_x379 = 5000.0 * var_x377 + 45392.646391284608 * var_x378;
        const double var_x380 = var_x265 + var_x296 * var_x358;
        const double var_x381 = 1 / (var_x372 + var_x376 + var_x379 + var_x380);
        const double var_x382 = 10000.0 * var_x381;
        const double var_x383 = var_x344 * var_x371;
        const double var_x384 = var_x201 * var_x358;
        const double var_x385 = pow((var_x270 + var_x362 + var_x375 + 0.0033333333333333331 * var_x378 + 0.0033333333333333331 * var_x384 + 0.00036716666666666668 * var_x377 + 0.11015000000000001 * var_x383 * var_chaste_interface__intracellular_ions__cai + var_x254 * var_x272 * var_x373), (-2));
        const double var_x386 = var_x373 * (5548.259630184999 * var_x348 - 1875537.7637409114 * var_x338 - var_x274 * var_x352 - var_x275 * var_x354);
        const double var_x387 = 283704.03994552878 * var_x339;
        const double var_x388 = 300000000.0 * var_x338 + var_x387 * var_chaste_interface__intracellular_ions__nai;
        const double var_x389 = 0.17754430816591998 * var_x360 - var_x279 * var_x367;
        const double var_x390 = var_x388 * var_x389;
        const double var_x391 = var_x282 * var_x389;
        const double var_x392 = var_x289 * var_x373;
        const double var_x393 = var_x291 * var_x368;
        const double var_x394 = 887.72154082959992 * var_x384;
        const double var_x395 = var_x294 * var_x358;
        const double var_x396 = var_x296 * var_x355;
        const double var_x397 = var_x298 * var_x360;
        const double var_x398 = 887.72154082959992 * var_x378;
        const double var_x399 = 266316.46224887995 * var_x375;
        const double var_x400 = var_x344 * var_chaste_interface__intracellular_ions__cai;
        const double var_x401 = var_x303 * var_x400;
        const double var_x402 = var_x305 * var_x400;
        const double var_x403 = var_x385 * (var_x309 + var_x369 + var_x393 + var_x394 + var_x399 - var_x347 - var_x357 - var_x363 - var_x365 - var_x386 - var_x390 - var_x391 - var_x392 - var_x395 - var_x396 - var_x397 - var_x398 - var_x401 - var_x402);
        const double var_x404 = 5.3924544444444452e-11 * var_x372;
        const double var_x405 = var_x386 + var_x390 + var_x397 + var_x398 - var_x393;
        const double var_x406 = var_x312 * var_x381;
        const double var_x407 = var_x341 * var_x381;
        const double var_x408 = var_x372 * var_x381;
        const double var_x409 = var_x376 * var_x381;
        const double var_x410 = var_x253 * var_x381;
        const double var_x411 = var_x318 * var_x379;
        const double var_x412 = 0.5326329244977599 * var_x381;
        const double var_x413 = var_x201 * var_x379;
        const double var_x414 = var_x360 * var_x380;
        const double var_x415 = 3.0597222222222222e-13 * var_x403;
        const double var_x416 = var_x348 * var_x376;
        const double var_x417 = 27.235587834770765 * var_x381;
        const double var_x418 = var_x252 * var_x372;
        const double var_x419 = var_x328 * var_x381;
        const double var_x420 = 0.0060444044995206529 * var_x381;
        const double var_x421 = 1.4686666666666667e-13 * var_x403;
        const double var_x422 = var_x287 * var_x408 + var_x349 * var_x409 + var_x370 * var_x382 + var_x403 * var_x404 + var_x407 * (var_x391 + var_x392 + var_x401 + var_x402 - var_x399) + var_x412 * var_x413 + var_x412 * var_x414 + var_x414 * var_x421 + var_x415 * var_x416 - var_x286 * var_x408 - var_x353 * var_x409 - var_x370 * var_x410 - var_x403 * var_x411 - var_x405 * var_x406 - var_x405 * var_x419 - var_x413 * var_x421 - var_x415 * var_x418 + var_x360 * var_x417 * (var_x325 + var_x395 + var_x396 - var_x394) - var_x198 * var_x379 * var_x420 - var_x368 * var_x380 * var_x420;
        const double var_x423 = 1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cai, 2);
        const double var_x424 = NV_Ith_S(mParameters, 22) / var_x423;
        const double var_x425 = 0.80000000000000004 * var_x424;
        const double var_x426 = sqrt(NV_Ith_S(mParameters, 10));
        const double var_x427 = var_x426 * NV_Ith_S(mParameters, 20);
        const double var_x428 = 0.43033148291193518 * var_x427;
        const double var_x429 = 1 / var_chaste_interface__intracellular_ions__cai;
        const double var_x430 = pow(var_x429, 1.3999999999999999);
        const double var_x431 = 1.0 + 6.4818210260626455e-7 * var_x430;
        const double var_x432 = 1 / var_x431;
        const double var_x433 = -1.0 - 0.59999999999999998 * var_x432;
        const double var_x434 = NV_Ith_S(mParameters, 21) * var_chaste_interface__IKs__xs2;
        const double var_x435 = var_x433 * var_x434;
        const double var_x436 = var_x435 * var_chaste_interface__IKs__xs1;
        const double var_x437 = exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * NV_Ith_S(mParameters, 10));
        const double var_x438 = 1.0 + var_x437;
        const double var_x439 = var_x426 * NV_Ith_S(mParameters, 18) / var_x438;
        const double var_x440 = var_x439;
        const double var_x441 = -var_x178 + var_chaste_interface__membrane__v;
        const double var_x442 = var_x170 * var_x441 * NV_Ith_S(mParameters, 14) / pow(var_x171, 2);
        const double var_x443 = var_x2 * (var_x21 + var_x1 * var_chaste_interface__intracellular_ions__cass);
        const double var_x444 = var_x5 * (var_x21 + var_x4 * var_chaste_interface__intracellular_ions__cass);
        const double var_x445 = var_x28 * var_chaste_interface__intracellular_ions__cass;
        const double var_x446 = var_x21 + var_x445;
        const double var_x447 = var_x32 * var_x446;
        const double var_x448 = ((var_x26) ? (9.9999999999999995e-8 * var_x443 - 9.9999999999999995e-8 * var_x444) : (var_x27 * var_x447 - var_x38 * var_x446 + var_x32 * var_x35 * var_x445));
        const double var_x449 = -1.0 + var_x54;
        const double var_x450 = 1.0 - var_chaste_interface__ICaL__nca;
        const double var_x451 = 0.40000000000000002 * var_chaste_interface__ICaL__fs;
        const double var_x452 = 0.59999999999999998 * var_chaste_interface__ICaL__ff;
        const double var_x453 = 0.10000000000000001 * var_chaste_interface__membrane__v;
        const double var_x454 = exp(-1.0 + var_x453);
        const double var_x455 = 1.0 + var_x454;
        const double var_x456 = 0.59999999999999998 / var_x455;
        const double var_x457 = 0.29999999999999999 + var_x456;
        const double var_x458 = 0.69999999999999996 - var_x456;
        const double var_x459 = var_x458 * var_chaste_interface__ICaL__fcas;
        const double var_x460 = var_x459 + var_x457 * var_chaste_interface__ICaL__fcaf;
        const double var_x461 = var_x460 * var_chaste_interface__ICaL__jca;
        const double var_x462 = (var_x450 * (var_x451 + var_x452) + var_x461 * var_chaste_interface__ICaL__nca) * NV_Ith_S(mParameters, 12);
        const double var_x463 = var_x462 * var_chaste_interface__ICaL__d;
        const double var_x464 = var_x449 * var_x463;
        const double var_x465 = -0.75 * NV_Ith_S(mParameters, 10);
        const double var_x466 = 0.75 * var_chaste_interface__intracellular_ions__kss;
        const double var_x467 = var_x465 + var_x1 * var_x466;
        const double var_x468 = var_x465 + var_x4 * var_x466;
        const double var_x469 = var_x465 + var_x466 * var_x9;
        const double var_x470 = var_x17 * var_x9;
        const double var_x471 = 0.0010510840305073261 * var_x470;
        const double var_x472 = ((var_x8) ? (var_x3 * var_x467 - var_x468 * var_x6) : (var_x13 * var_x469 + var_x471 * var_chaste_interface__intracellular_ions__kss - var_x18 * var_x469));
        const double var_x473 = -0.00035740000000000001 + 0.00035740000000000001 * var_x53;
        const double var_x474 = var_x463 * var_x473;
        const double var_x475 = -0.75 * NV_Ith_S(mParameters, 11);
        const double var_x476 = 0.75 * var_chaste_interface__intracellular_ions__nass;
        const double var_x477 = var_x475 + var_x1 * var_x476;
        const double var_x478 = var_x475 + var_x4 * var_x476;
        const double var_x479 = var_x475 + var_x476 * var_x9;
        const double var_x480 = ((var_x8) ? (var_x3 * var_x477 - var_x478 * var_x6) : (var_x13 * var_x479 + var_x471 * var_chaste_interface__intracellular_ions__nass - var_x18 * var_x479));
        const double var_x481 = -0.00125 + 0.00125 * var_x53;
        const double var_x482 = var_x463 * var_x481;
        const double var_x483 = 0.59999999999999998 * var_chaste_interface__ICaL__ffp;
        const double var_x484 = var_x459 + var_x457 * var_chaste_interface__ICaL__fcafp;
        const double var_x485 = var_x484 * var_chaste_interface__ICaL__jca;
        const double var_x486 = var_x450 * (var_x451 + var_x483) + var_x485 * var_chaste_interface__ICaL__nca;
        const double var_x487 = var_x486 * var_x53;
        const double var_x488 = var_x487 * NV_Ith_S(mParameters, 12);
        const double var_x489 = var_x488 * var_chaste_interface__ICaL__d;
        const double var_x490 = 1.1000000000000001 * var_x489;
        const double var_x491 = var_x448 * var_x490;
        const double var_x492 = 0.0013750000000000001 * var_x489;
        const double var_x493 = 0.00039314000000000005 * var_x489;
        const double var_x494 = var_x426 * var_x437 * var_x441 * NV_Ith_S(mParameters, 18) * var_chaste_interface__IK1__xk1 / pow(var_x438, 2);
        const double var_x495 = 2.671233870549826e-13 * var_x444;
        const double var_x496 = 1.3356169352749131e-6 + var_chaste_interface__membrane__v;
        const double var_x497 = 0.14974353403121046 * var_x16;
        const double var_x498 = ((var_x26) ? (var_x495 + 374358.83507802623 * var_x496 * (-var_x495 + 2.671233870549826e-13 * var_x443)) : (var_x447 * var_x497));
        const double var_x499 = var_x498 * NV_Ith_S(mParameters, 12);
        const double var_x500 = var_x449 * var_x499;
        const double var_x501 = 0.059999999999999998 * var_x454 / pow(var_x455, 2);
        const double var_x502 = var_x501 * var_chaste_interface__ICaL__fcas;
        const double var_x503 = var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__nca;
        const double var_x504 = var_x503 * var_chaste_interface__ICaL__jca;
        const double var_x505 = var_x504 * (var_x502 - var_x501 * var_chaste_interface__ICaL__fcaf);
        const double var_x506 = 2.671233870549826e-13 * var_x5;
        const double var_x507 = var_x468 * var_x506;
        const double var_x508 = 2.671233870549826e-13 * var_x2;
        const double var_x509 = 0.5 + 187179.41753901311 * var_chaste_interface__membrane__v;
        const double var_x510 = 0.037435883507802616 * var_x17;
        const double var_x511 = ((var_x8) ? (var_x507 + var_x509 * (-var_x507 + var_x467 * var_x508)) : (var_x469 * var_x510));
        const double var_x512 = var_x473 * var_x511;
        const double var_x513 = var_x505 * NV_Ith_S(mParameters, 12);
        const double var_x514 = var_x478 * var_x506;
        const double var_x515 = ((var_x8) ? (var_x514 + var_x509 * (-var_x514 + var_x477 * var_x508)) : (var_x479 * var_x510));
        const double var_x516 = var_x481 * var_x515;
        const double var_x517 = var_x499 * var_x53;
        const double var_x518 = 1.1000000000000001 * var_x517;
        const double var_x519 = var_x504 * (var_x502 - var_x501 * var_chaste_interface__ICaL__fcafp);
        const double var_x520 = var_x518 * var_x519;
        const double var_x521 = 0.0013750000000000001 * var_x515;
        const double var_x522 = var_x53 * NV_Ith_S(mParameters, 12);
        const double var_x523 = var_x519 * var_x522;
        const double var_x524 = 0.00039314000000000005 * var_x511;
        const double var_x525 = 0.5 + 374358.83507802623 * var_chaste_interface__membrane__v;
        const double var_x526 = var_x1 * var_x508;
        const double var_x527 = var_x4 * var_x506;
        const double var_x528 = var_x527 * NV_Ith_S(mParameters, 13);
        const double var_x529 = -var_x528 + var_x526 * NV_Ith_S(mParameters, 13);
        const double var_x530 = var_x28 * var_x32;
        const double var_x531 = var_x497 * var_x530;
        const double var_x532 = 0.00050000000000000001 + var_chaste_interface__intracellular_ions__cai;
        const double var_x533 = NV_Ith_S(mParameters, 16) / var_x532;
        const double var_x534 = pow(var_x532, (-2));
        const double var_x535 = var_x534 * NV_Ith_S(mParameters, 16) * var_chaste_interface__intracellular_ions__cai;
        const double var_x536 = var_x228 * var_x344;
        const double var_x537 = 2250000000000.0 * var_x254;
        const double var_x538 = var_x536 * var_x537;
        const double var_x539 = 13617793.917385383 * var_x374;
        const double var_x540 = -var_x538 - var_x539 - var_x345 * var_x371 - var_x345 * var_x388;
        const double var_x541 = var_x385 * var_x404;
        const double var_x542 = var_x381 * var_x383;
        const double var_x543 = var_x381 * var_x388;
        const double var_x544 = var_x385 * var_x411;
        const double var_x545 = 3.0597222222222222e-13 * var_x385;
        const double var_x546 = var_x540 * var_x545;
        const double var_x547 = 1.4686666666666667e-13 * var_x385;
        const double var_x548 = var_x540 * var_x547;
        const double var_x549 = 40853381.752156146 * var_x201;
        const double var_x550 = 85111211.983658642 * var_x252;
        const double var_x551 = 15000000000.0 * var_x542 + var_x407 * (var_x538 + var_x539) + var_x414 * var_x548 + var_x416 * var_x546 + var_x540 * var_x541 - var_x413 * var_x548 - var_x418 * var_x546 - var_x540 * var_x544 - var_x542 * var_x550 - 4500000000000.0 * var_x536 * var_x543 - var_x344 * var_x543 * var_x549;
        const double var_x552 = var_x341 * var_x409 + var_x372 * var_x382 + var_x414 * var_x417 - var_x253 * var_x408 - var_x379 * var_x406 - var_x379 * var_x419;
        const double var_x553 = var_x552 * NV_Ith_S(mParameters, 22) / (pow(var_x423, 2) * pow(var_chaste_interface__intracellular_ions__cai, 3));
        const double var_x554 = 1 / (0.018329999999999999 * var_chaste_interface__intracellular_ions__nai + var_chaste_interface__intracellular_ions__ki);
        const double var_x555 = -26.712338705498265 * log(var_x554 * (0.018329999999999999 * NV_Ith_S(mParameters, 11) + NV_Ith_S(mParameters, 10))) + var_chaste_interface__membrane__v;
        const double var_x556 = var_x555 * var_chaste_interface__IKs__xs1;
        const double var_x557 = var_x429 * var_x430 * var_x434 * var_x556 / pow(var_x431, 2);
        const double var_x558 = 1 / (pow(var_x51, 2) * pow(var_x52, 2));
        const double var_x559 = var_x558 * (-1 + var_x50);
        const double var_x560 = 0.14999999999999999 * var_x559;
        const double var_x561 = var_x45 * var_chaste_interface__Ito__a;
        const double var_x562 = var_x58 * var_chaste_interface__Ito__ap;
        const double var_x563 = var_x560 * var_x561 - var_x560 * var_x562;
        const double var_x564 = var_x560 * var_chaste_interface__INaL__hL - var_x560 * var_chaste_interface__INaL__hLp;
        const double var_x565 = 1 / var_chaste_interface__intracellular_ions__nai;
        const double var_x566 = log(var_x565 * NV_Ith_S(mParameters, 11));
        const double var_x567 = 26.712338705498265 * var_x566;
        const double var_x568 = var_x175 + var_x567;
        const double var_x569 = var_x182 * var_x568;
        const double var_x570 = var_x184 * var_chaste_interface__INa__j;
        const double var_x571 = -var_x567 + var_chaste_interface__membrane__v;
        const double var_x572 = var_x189 * var_x571;
        const double var_x573 = var_x572 * (var_x560 * var_x570 - var_x187 * var_x560);
        const double var_x574 = var_x559 * var_chaste_interface__ICaL__d;
        const double var_x575 = var_x486 * var_x574;
        const double var_x576 = var_x499 * var_x575;
        const double var_x577 = 0.16500000000000001 * var_x576;
        const double var_x578 = var_x575 * NV_Ith_S(mParameters, 12);
        const double var_x579 = var_x515 * var_x578;
        const double var_x580 = var_x511 * var_x578;
        const double var_x581 = var_x462 * var_x498;
        const double var_x582 = var_x581 * var_chaste_interface__ICaL__d;
        const double var_x583 = var_x560 * var_x582;
        const double var_x584 = var_x462 * var_x515;
        const double var_x585 = var_x574 * var_x584;
        const double var_x586 = var_x462 * var_x511;
        const double var_x587 = var_x574 * var_x586;
        const double var_x588 = 0.5 + 187179.41753901311 * var_chaste_interface__membrane__v;
        const double var_x589 = var_x527 * NV_Ith_S(mParameters, 15);
        const double var_x590 = ((var_x8) ? (var_x589 + var_x588 * (-var_x589 + var_x526 * NV_Ith_S(mParameters, 15))) : (var_x510 * var_x9 * NV_Ith_S(mParameters, 15)));
        const double var_x591 = var_x351 * var_x78;
        const double var_x592 = var_x591 * var_x68;
        const double var_x593 = 4.4788223776203591 * var_x591 * var_x82;
        const double var_x594 = var_x69 * var_x88;
        const double var_x595 = var_x594 * var_x68;
        const double var_x596 = 4.0448001575983228e-12 * var_x103 * var_x591;
        const double var_x597 = pow((1 + 0.0028096208831939005 * var_chaste_interface__intracellular_ions__nai + 0.0021553256090254577 * var_chaste_interface__intracellular_ions__ki), (-2));
        const double var_x598 = var_x597 * var_x79;
        const double var_x599 = var_x598 * var_x82;
        const double var_x600 = 2.3840715066649271e-15 * var_x599;
        const double var_x601 = 0.030852683632896775 * var_x594 * var_x82;
        const double var_x602 = 2.786289097871654e-14 * var_x103 * var_x594;
        const double var_x603 = var_x106 * var_x597;
        const double var_x604 = var_x603 * var_x82;
        const double var_x605 = var_x111 * var_x71;
        const double var_x606 = -3.0005234378016216e-13 * var_x604 - 3.5067428637450051e-12 * var_x605;
        const double var_x607 = var_x593 + var_x596 + var_x606 - var_x600 - var_x601 - var_x602 + 36069335.67075488 * var_x592 - 248466.16107375509 * var_x595;
        const double var_x608 = 34076345.656450219 * var_x127 * var_x71;
        const double var_x609 = 0.055419764988303033 * var_x130 * var_x71;
        const double var_x610 = -var_x608 - var_x609 + 38790059.315200046 * var_x592 - 267208.05766560155 * var_x595;
        const double var_x611 = var_x121 * var_x597;
        const double var_x612 = var_x153 * var_x611;
        const double var_x613 = 1.1219685328242758e-7 * var_x603;
        const double var_x614 = 1674740.3831249396 * var_x591;
        const double var_x615 = 8.9146219515644901e-10 * var_x598;
        const double var_x616 = var_x597 * var_x82;
        const double var_x617 = 11536.567171311443 * var_x594;
        const double var_x618 = 1.5124489418129408e-6 * var_x591 * var_x96;
        const double var_x619 = 1.3112562615776865e-6 * var_x145 * var_x71;
        const double var_x620 = 1.0418611138907615e-8 * var_x594 * var_x96;
        const double var_x621 = var_x600 + var_x601 + var_x602 + var_x608 + var_x609 + var_x613 + var_x615 + var_x617 + var_x619 + var_x620 - var_x593 - var_x596 - var_x614 - var_x618 + 6.0010468756032432e-13 * var_x604 + 7.0134857274900101e-12 * var_x605 + 1.7102983595469244e-14 * var_x616 + 515674.21873935661 * var_x595 - 74859394.985954925 * var_x592;
        const double var_x622 = var_x148 * var_x155;
        const double var_x623 = var_x606 + var_x614 + var_x618 - var_x613 - var_x615 - var_x617 - var_x619 - var_x620;
        const double var_x624 = var_x167 * var_x591;
        const double var_x625 = var_x148 * var_x164;
        const double var_x626 = var_x148 * var_x166;
        const double var_x627 = var_x167 * var_x594;
        const double var_x628 = var_x611 * var_x83;
        const double var_x629 = -0.011348161597821153 - 0.011348161597821153 * var_x192;
        const double var_x630 = var_x206 * var_x629;
        const double var_x631 = var_x350 * var_x630;
        const double var_x632 = var_x192 * var_x629;
        const double var_x633 = var_x354 * var_x632;
        const double var_x634 = 56.740807989105761 * var_x633;
        const double var_x635 = var_x340 + var_x634 + 60000.0 * var_x631;
        const double var_x636 = var_x356 * var_x635;
        const double var_x637 = (-0.066666666666666666 - 0.026666666666666668 * var_chaste_interface__intracellular_ions__nai) / pow(var_x343, 2);
        const double var_x638 = var_x637 * var_chaste_interface__intracellular_ions__cai;
        const double var_x639 = 1500000.0 * var_x638;
        const double var_x640 = var_x371 * var_x639;
        const double var_x641 = var_x351 * var_x359;
        const double var_x642 = 40853381.752156146 * var_x228;
        const double var_x643 = var_x358 * var_x641 * var_x642;
        const double var_x644 = var_x364 * var_x635;
        const double var_x645 = var_x339 * var_x637;
        const double var_x646 = var_x645 * var_x69;
        const double var_x647 = 13617793.917385383 * var_x228;
        const double var_x648 = var_x358 * var_x647;
        const double var_x649 = var_x646 * var_x648;
        const double var_x650 = var_x366 * var_x632;
        const double var_x651 = var_x650 * var_x69;
        const double var_x652 = var_x648 * var_x651;
        const double var_x653 = var_x636 + var_x640 + var_x643 + var_x644 + var_x649 + var_x652;
        const double var_x654 = var_x373 * (var_x387 + 300000000.0 * var_x631 + 283704.03994552878 * var_x633);
        const double var_x655 = 9.0785292782569211 * var_x69;
        const double var_x656 = var_x639 + 27.235587834770765 * var_x641 + var_x645 * var_x655 + var_x650 * var_x655;
        const double var_x657 = var_x388 * var_x656;
        const double var_x658 = var_x282 * var_x656;
        const double var_x659 = 136177.93917385384 * var_x256;
        const double var_x660 = var_x641 * var_x659;
        const double var_x661 = 45392.646391284608 * var_x256;
        const double var_x662 = var_x646 * var_x661;
        const double var_x663 = var_x651 * var_x661;
        const double var_x664 = 13617793.917385383 * var_x257;
        const double var_x665 = var_x638 * var_x664;
        const double var_x666 = -var_x636 - var_x640 - var_x643 - var_x644 - var_x649 - var_x652 - var_x654 - var_x657 - var_x658 - var_x660 - var_x662 - var_x663 - var_x665 - var_x296 * var_x635;
        const double var_x667 = var_x654 + var_x657 + var_x660 + var_x662 + var_x663;
        const double var_x668 = var_x545 * var_x666;
        const double var_x669 = var_x547 * var_x666;
        const double var_x670 = var_x380 * var_x417;
        const double var_x671 = 1236295.4078425223 * var_x200;
        const double var_x672 = var_x340 * var_x409 + var_x382 * var_x653 + var_x407 * (var_x658 + var_x665) + var_x409 * var_x634 + var_x414 * var_x669 + var_x416 * var_x668 + var_x541 * var_x666 + var_x646 * var_x670 + var_x651 * var_x670 - var_x406 * var_x667 - var_x410 * var_x653 - var_x413 * var_x669 - var_x418 * var_x668 - var_x419 * var_x667 - var_x544 * var_x666 + 81.706763504312292 * var_x380 * var_x381 * var_x641 + var_x337 * var_x344 * var_x381 * var_x635 * var_x671 * var_x69;
        const double var_x673 = 26.712338705498265 * var_x565;
        const double var_x674 = var_x180 + var_x181;
        const double var_x675 = var_x182 * var_x674;
        const double var_x676 = var_x436 * var_x554;
        const double var_x677 = var_x220 * var_x630;
        const double var_x678 = var_x226 * var_x632;
        const double var_x679 = 56.740807989105761 * var_x678;
        const double var_x680 = var_x209 + var_x679 + 60000.0 * var_x677;
        const double var_x681 = var_x231 * var_x680;
        const double var_x682 = (-0.066666666666666666 - 0.026666666666666668 * var_chaste_interface__intracellular_ions__nass) / pow(var_x212, 2);
        const double var_x683 = var_x682 * var_chaste_interface__intracellular_ions__cass;
        const double var_x684 = 1500000.0 * var_x683;
        const double var_x685 = var_x248 * var_x684;
        const double var_x686 = var_x221 * var_x235;
        const double var_x687 = var_x233 * var_x642 * var_x686;
        const double var_x688 = var_x240 * var_x680;
        const double var_x689 = var_x208 * var_x682;
        const double var_x690 = var_x234 * var_x689;
        const double var_x691 = var_x233 * var_x647;
        const double var_x692 = var_x690 * var_x691;
        const double var_x693 = var_x242 * var_x632;
        const double var_x694 = var_x234 * var_x693;
        const double var_x695 = var_x691 * var_x694;
        const double var_x696 = var_x681 + var_x685 + var_x687 + var_x688 + var_x692 + var_x695;
        const double var_x697 = var_x250 * (var_x277 + 300000000.0 * var_x677 + 283704.03994552878 * var_x678);
        const double var_x698 = 9.0785292782569211 * var_x234;
        const double var_x699 = var_x684 + 27.235587834770765 * var_x686 + var_x689 * var_x698 + var_x693 * var_x698;
        const double var_x700 = var_x278 * var_x699;
        const double var_x701 = var_x282 * var_x699;
        const double var_x702 = var_x659 * var_x686;
        const double var_x703 = var_x234 * var_x661;
        const double var_x704 = var_x689 * var_x703;
        const double var_x705 = var_x693 * var_x703;
        const double var_x706 = var_x664 * var_x683;
        const double var_x707 = -var_x681 - var_x685 - var_x687 - var_x688 - var_x692 - var_x695 - var_x697 - var_x700 - var_x701 - var_x702 - var_x704 - var_x705 - var_x706 - var_x296 * var_x680;
        const double var_x708 = var_x273 * var_x311;
        const double var_x709 = var_x697 + var_x700 + var_x702 + var_x704 + var_x705;
        const double var_x710 = var_x268 * var_x312;
        const double var_x711 = var_x273 * var_x707;
        const double var_x712 = var_x263 * var_x318;
        const double var_x713 = 3.0597222222222222e-13 * var_x711;
        const double var_x714 = var_x267 * var_x326;
        const double var_x715 = 1.4686666666666667e-13 * var_x321;
        const double var_x716 = var_x209 * var_x316 + var_x269 * var_x696 + var_x314 * (var_x701 + var_x706) + var_x316 * var_x679 + var_x324 * var_x713 + var_x330 * var_x711 + var_x690 * var_x714 + var_x694 * var_x714 + var_x707 * var_x708 - var_x317 * var_x696 - var_x327 * var_x713 - var_x709 * var_x710 - var_x711 * var_x712 - var_x711 * var_x715 - var_x201 * var_x326 * var_x709 + 81.706763504312292 * var_x267 * var_x268 * var_x686 + var_x205 * var_x213 * var_x234 * var_x268 * var_x671 * var_x680;
        const double var_x717 = var_x4 * var_x5;
        const double var_x718 = 2.0034254029123695e-13 * var_x717;
        const double var_x719 = ((var_x8) ? (var_x718 + var_x588 * (-var_x718 + 2.0034254029123695e-13 * var_x1 * var_x2)) : (0.028076912630851963 * var_x470));
        const double var_x720 = var_x86 * (-4.0 - 8.0 * var_chaste_interface__intracellular_ions__ki);
        const double var_x721 = var_x69 * var_x720 * var_x77;
        const double var_x722 = var_x68 * var_x721;
        const double var_x723 = 0.09330879953375748 * var_x721 * var_x82;
        const double var_x724 = 1.8288767722361083e-15 * var_x599;
        const double var_x725 = 8.4266669949965062e-14 * var_x103 * var_x721;
        const double var_x726 = var_x76 * var_chaste_interface__intracellular_ions__ki;
        const double var_x727 = var_x726 * var_x96;
        const double var_x728 = var_x727 * var_x82;
        const double var_x729 = var_x110 * var_x720;
        const double var_x730 = 1.0605559334252811e-11 * var_x729 + 3.3937789869608994e-10 * var_x728 - 2.3017714043409702e-13 * var_x604;
        const double var_x731 = var_x723 + var_x725 + var_x730 - var_x724 + 751444.4931407267 * var_x722;
        const double var_x732 = 3297863297.5037103 * var_x68 * var_x726;
        const double var_x733 = 5.3634509625479838 * var_x726 * var_x82;
        const double var_x734 = 103058228.04699095 * var_x126 * var_x720;
        const double var_x735 = 0.16760784257962449 * var_x129 * var_x720;
        const double var_x736 = var_x732 + var_x733 + var_x734 + var_x735 + 808126.23573333421 * var_x722;
        const double var_x737 = 8.6068818956382799e-8 * var_x603;
        const double var_x738 = 0.00012690163265380641 * var_x727;
        const double var_x739 = 6.8386140998302939e-10 * var_x598;
        const double var_x740 = 3.9656760204314505e-6 * var_x144 * var_x720;
        const double var_x741 = 34890.424648436237 * var_x721;
        const double var_x742 = 3.1509352954436263e-8 * var_x721 * var_x96;
        const double var_x743 = var_x724 + var_x737 + var_x739 - var_x723 - var_x725 - var_x732 - var_x733 - var_x734 - var_x735 - var_x738 - var_x740 - var_x741 - var_x742 + 4.6035428086819405e-13 * var_x604 + 1.3120097004743531e-14 * var_x616 - 2.1211118668505621e-11 * var_x729 - 6.7875579739217989e-10 * var_x728 - 1559570.728874061 * var_x722;
        const double var_x744 = var_x730 + var_x738 + var_x740 + var_x741 + var_x742 - var_x737 - var_x739;
        const double var_x745 = var_x167 * var_x721;
        const double var_x746 = 26.712338705498265 * var_x176;
        const double var_x747 = (var_x57 + var_x60) * NV_Ith_S(mParameters, 24);
        const double var_x748 = var_x176 * var_x427 * var_chaste_interface__IKr__O;
        const double var_x749 = var_x439 * var_chaste_interface__IK1__xk1;
        const double var_x750 = var_x332 * var_x46 / pow(var_x48, 2);
        const double var_x751 = var_x558 * var_x750;
        const double var_x752 = 1.1250000000000001e-5 * var_x751;
        const double var_x753 = var_x562 * var_x752 - var_x561 * var_x752;
        const double var_x754 = var_x213 * var_x228;
        const double var_x755 = var_x537 * var_x754;
        const double var_x756 = 13617793.917385383 * var_x258;
        const double var_x757 = -var_x755 - var_x756 - var_x214 * var_x248 - var_x214 * var_x278;
        const double var_x758 = var_x268 * var_x271;
        const double var_x759 = var_x268 * var_x278;
        const double var_x760 = var_x273 * var_x757;
        const double var_x761 = 3.0597222222222222e-13 * var_x760;
        const double var_x762 = 15000000000.0 * var_x758 + var_x314 * (var_x755 + var_x756) + var_x324 * var_x761 + var_x330 * var_x760 + var_x708 * var_x757 - var_x327 * var_x761 - var_x550 * var_x758 - var_x712 * var_x760 - var_x715 * var_x760 - 4500000000000.0 * var_x754 * var_x759 - var_x213 * var_x549 * var_x759;
        const double var_x763 = var_x752 * var_chaste_interface__INaL__hLp - var_x752 * var_chaste_interface__INaL__hL;
        const double var_x764 = var_x572 * (var_x187 * var_x752 - var_x570 * var_x752);
        const double var_x765 = var_x210 * var_x316 + var_x249 * var_x269 + var_x322 * var_x326 - var_x253 * var_x315 - var_x263 * var_x710 - var_x321 * var_x326;
        const double var_x766 = var_x765 * NV_Ith_S(mParameters, 22) / (pow(var_x333, 2) * pow(var_chaste_interface__intracellular_ions__cass, 3));
        const double var_x767 = ((var_x26) ? (var_x527 + var_x525 * (var_x526 - var_x527)) : (var_x531));
        const double var_x768 = var_x490 * var_x767;
        const double var_x769 = var_x582 * var_x752;
        const double var_x770 = var_x751 * var_chaste_interface__ICaL__d;
        const double var_x771 = var_x586 * var_x770;
        const double var_x772 = var_x584 * var_x770;
        const double var_x773 = var_x486 * var_x770;
        const double var_x774 = var_x773 * NV_Ith_S(mParameters, 12);
        const double var_x775 = var_x511 * var_x774;
        const double var_x776 = var_x515 * var_x774;
        const double var_x777 = var_x499 * var_x773;
        const double var_x778 = 1.2375000000000001e-5 * var_x777;
        const double var_x779 = var_x188 * var_x571 * pow(var_chaste_interface__INa__m, 2) * NV_Ith_S(mParameters, 17);
        const double var_x780 = 0.98999999999999999 * var_x53;
        const double var_x781 = var_x572 * (var_x780 * var_chaste_interface__INa__jp + (0.98999999999999999 - var_x780) * var_chaste_interface__INa__j);
        const double var_x782 = 0.010000000000000009 * var_x53;
        const double var_x783 = var_x572 * (0.010000000000000009 - var_x782) * var_chaste_interface__INa__j;
        const double var_x784 = var_x185 * var_x572;
        const double var_x785 = var_x572 * var_chaste_interface__INa__jp;
        const double var_x786 = var_x186 * var_x572;
        const double var_x787 = var_x674 * NV_Ith_S(mParameters, 19);
        const double var_x788 = var_x45 * var_x55;
        const double var_x789 = var_x43 * var_x56;
        const double var_x790 = var_x44 * var_x56;
        const double var_x791 = var_x54 * var_x58;
        const double var_x792 = var_x179 * var_x59;
        const double var_x793 = var_x487 * var_x499;
        const double var_x794 = 1.1000000000000001 * var_x793;
        const double var_x795 = var_x488 * var_x515;
        const double var_x796 = var_x488 * var_x511;
        const double var_x797 = (0.59999999999999998 - 0.59999999999999998 * var_chaste_interface__ICaL__nca) * var_chaste_interface__ICaL__d;
        const double var_x798 = var_x797 * NV_Ith_S(mParameters, 12);
        const double var_x799 = (0.40000000000000002 - 0.40000000000000002 * var_chaste_interface__ICaL__nca) * var_chaste_interface__ICaL__d;
        const double var_x800 = var_x799 * NV_Ith_S(mParameters, 12);
        const double var_x801 = var_x518 * var_x799;
        const double var_x802 = var_x53 * var_x800;
        const double var_x803 = var_x457 * var_x504;
        const double var_x804 = var_x803 * NV_Ith_S(mParameters, 12);
        const double var_x805 = var_x458 * var_x504;
        const double var_x806 = var_x805 * NV_Ith_S(mParameters, 12);
        const double var_x807 = var_x518 * var_x805;
        const double var_x808 = var_x522 * var_x805;
        const double var_x809 = var_x460 * var_x503;
        const double var_x810 = var_x809 * NV_Ith_S(mParameters, 12);
        const double var_x811 = var_x484 * var_x503;
        const double var_x812 = var_x518 * var_x811;
        const double var_x813 = var_x522 * var_x811;
        const double var_x814 = var_x53 * var_x798;
        const double var_x815 = var_x522 * var_x803;
        const double var_x816 = -var_x451;
        const double var_x817 = (var_x461 + var_x816 - var_x452) * var_chaste_interface__ICaL__d;
        const double var_x818 = var_x817 * NV_Ith_S(mParameters, 12);
        const double var_x819 = (var_x485 + var_x816 - var_x483) * var_chaste_interface__ICaL__d;
        const double var_x820 = var_x518 * var_x819;
        const double var_x821 = var_x522 * var_x819;
        const double var_x822 = var_x556 * NV_Ith_S(mParameters, 21);
        const double var_x823 = 3.0760371441184363e-12 * NV_Ith_S(mParameters, 13);
        const double var_x824 = 4.9216594305894988e-5 * var_x424;
        const double var_x825 = var_x422 * var_x824;
        const double var_x826 = 0.0023800000000000002 + var_chaste_interface__intracellular_ions__cai;
        const double var_x827 = 1.0 + 0.00011900000000000002 / pow(var_x826, 2) + 3.5000000000000004e-5 * var_x534;
        const double var_x828 = 1 / var_x827;
        const double var_x829 = var_x828;
        const double var_x830 = 3.4487184207256007e-7 * var_x16;
        const double var_x831 = 8.2168146064385251e-18 * NV_Ith_S(mParameters, 13);
        const double var_x832 = 0.00075000000000000002 + var_chaste_interface__intracellular_ions__cai;
        const double var_x833 = 1 / var_x832;
        const double var_x834 = var_x53 * var_x833;
        const double var_x835 = 0.00092000000000000003 + var_chaste_interface__intracellular_ions__cai;
        const double var_x836 = 1 / var_x835;
        const double var_x837 = var_x55 * var_x836;
        const double var_x838 = var_x53 * var_chaste_interface__intracellular_ions__cai / pow(var_x832, 2);
        const double var_x839 = var_x55 * var_chaste_interface__intracellular_ions__cai / pow(var_x835, 2);
        const double var_x840 = 3.0760371441184366e-5 * var_x533;
        const double var_x841 = -0.14705882352941174 - var_x840 + 2.2147467437652741e-12 * var_x553 + 3.0760371441184366e-5 * var_x535 + var_x551 * var_x824 + (0.00097665441176470586 * var_x838 + 0.00035514705882352943 * var_x839 - 0.00097665441176470586 * var_x834 - 0.00035514705882352943 * var_x837) * NV_Ith_S(mParameters, 8);
        const double var_x842 = 0.0043750000000000004 * var_x837;
        const double var_x843 = 0.01203125 * var_x834;
        const double var_x844 = 0.14705882352941174 * var_chaste_interface__intracellular_ions__cass - 0.14705882352941174 * var_chaste_interface__intracellular_ions__cai + var_x552 * var_x824 - var_x840 * var_chaste_interface__intracellular_ions__cai - 0.081176470588235281 * (-0.00026249999999999998 * var_chaste_interface__intracellular_ions__cansr + var_x842 * var_chaste_interface__intracellular_ions__cai + var_x843 * var_chaste_interface__intracellular_ions__cai) * NV_Ith_S(mParameters, 8);
        const double var_x845 = (0.00023800000000000004 / pow(var_x826, 3) + 7.0000000000000007e-5 / pow(var_x532, 3)) / pow(var_x827, 2);
        const double var_x846 = 4.6061667277156659e-6 * var_x16;
        const double var_x847 = var_x559 * var_chaste_interface__intracellular_ions__cai;
        const double var_x848 = var_x833 * var_x847;
        const double var_x849 = var_x836 * var_x847;
        const double var_x850 = var_x751 * var_chaste_interface__intracellular_ions__cai;
        const double var_x851 = var_x836 * var_x850;
        const double var_x852 = var_x833 * var_x850;
        const double var_x853 = 0.0025000000000000005 * var_x49;
        const double var_x854 = 0.0033664150505232173 * var_x121;
        const double var_x855 = 3.1952008342107772e-13 * var_x133;
        const double var_x856 = 7.762482183650498e-23 * var_x150;
        const double var_x857 = 7.3676861517392123e-33 * var_x154;
        const double var_x858 = 8.19479100791634 * var_x157;
        const double var_x859 = 1.8896041706979408e-19 * var_x163;
        const double var_x860 = 1.0820517070447174e-23 * var_x165;
        const double var_x861 = 6.1520742882368733e-5 * var_x53;
        const double var_x862 = 0.00014764978291768497 * var_x424;
        const double var_x863 = -6.1520742882368733e-5 * var_chaste_interface__membrane__v;
        const double var_x864 = var_x863 + 0.001643362921287705 * var_x566;
        const double var_x865 = var_x182 * var_x864;
        const double var_x866 = var_x148 * var_x857;
        const double var_x867 = var_x148 * var_x859;
        const double var_x868 = var_x148 * var_x860;
        const double var_x869 = 0.001643362921287705 * var_x565;
        const double var_x870 = 0.0012550231548003222 * var_x334;
        const double var_x871 = -2.6146315725006711e-6 + 2.6146315725006711e-6 * var_x53;
        const double var_x872 = var_x463 * var_x871;
        const double var_x873 = 2.8760947297507386e-6 * var_x489;
        const double var_x874 = var_x515 * var_x871;
        const double var_x875 = 2.8760947297507386e-6 * var_x515;
        const double var_x876 = 0.0022442767003488114 * var_x121;
        const double var_x877 = 5.1749881224336655e-23 * var_x150;
        const double var_x878 = 2.1301338894738516e-13 * var_x133;
        const double var_x879 = 5.4631940052775603 * var_x157;
        const double var_x880 = 4.9117907678261418e-33 * var_x154;
        const double var_x881 = 1.2597361137986274e-19 * var_x163;
        const double var_x882 = 7.2136780469647828e-24 * var_x165;
        const double var_x883 = (var_x863 + 0.001643362921287705 * var_x177) * NV_Ith_S(mParameters, 24);
        const double var_x884 = 2.6474312514413617e-5 * var_x427;
        const double var_x885 = -6.1520742882368733e-5 - 3.6912445729421236e-5 * var_x432;
        const double var_x886 = var_x434 * var_x885;
        const double var_x887 = var_x886 * var_chaste_interface__IKs__xs1;
        const double var_x888 = 6.1520742882368733e-5 * var_x439;
        const double var_x889 = var_x148 * var_x880;
        const double var_x890 = var_x148 * var_x881;
        const double var_x891 = var_x148 * var_x882;
        const double var_x892 = var_x554 * var_x887;
        const double var_x893 = 0.001643362921287705 * var_x176;
        const double var_x894 = var_x59 * var_x883;
        const double var_x895 = -7.4757545920939191e-7 + 7.4757545920939191e-7 * var_x53;
        const double var_x896 = var_x463 * var_x895;
        const double var_x897 = 8.2233300513033119e-7 * var_x489;
        const double var_x898 = var_x511 * var_x895;
        const double var_x899 = 8.2233300513033119e-7 * var_x511;
        const double var_x900 = 0.0004183410516001074 * var_x334;
        const double var_x901 = -0.0010458526290002684 + 0.0010458526290002684 * var_x53;
        const double var_x902 = var_x463 * var_x901;
        const double var_x903 = 0.0011504378919002954 * var_x489;
        const double var_x904 = var_x499 * var_x901;
        const double var_x905 = 0.0011504378919002954 * var_x517;
        const double var_x906 = 0.0086999999999999994 + var_chaste_interface__intracellular_ions__cass;
        const double var_x907 = 0.00087000000000000001 + var_chaste_interface__intracellular_ions__cass;
        const double var_x908 = 1.0 + 0.0097788000000000007 / pow(var_x906, 2) + 4.0890000000000003e-5 / pow(var_x907, 2);
        const double var_x909 = 1 / var_x908;
        const double var_x910 = var_x909;
        const double var_x911 = 0.035999999999999997 * var_x559;
        const double var_x912 = 2.7e-6 * var_x751;
        const double var_x913 = (var_x54 * var_chaste_interface__ryr__Jrelp + var_x55 * var_chaste_interface__ryr__Jrelnp) * NV_Ith_S(mParameters, 7);
        const double var_x914 = var_x55 * var_x581;
        const double var_x915 = var_x914 * var_chaste_interface__ICaL__d;
        const double var_x916 = 0.0011504378919002954 * var_x793;
        const double var_x917 = var_chaste_interface__ICaL__nca;
        const double var_x918 = var_x905 * var_x909;
        const double var_x919 = 0.23999999999999996 * var_x53;
        const double var_x920 = 0.80000000000000004 + var_chaste_interface__intracellular_ions__cajsr;
        const double var_x921 = pow(var_x920, (-2));
        const double var_x922 = 1 / (1.0 + 8.0 * var_x921);
        const double var_x923 = var_x922 * NV_Ith_S(mParameters, 7);
        const double var_x924 = var_x923;
        const double var_x925 = 0.01 * var_x922;
        const double var_x926 = exp(-4.0087123898287915 - 0.10130685847431871 * var_chaste_interface__membrane__v);
        const double var_x927 = 1.0 + var_x926;
        const double var_x928 = exp(0.33477135461604829 + 0.02876042565429968 * var_chaste_interface__membrane__v);
        const double var_x929 = exp(-13.000839630562552 - 0.16792611251049538 * var_chaste_interface__membrane__v);
        const double var_x930 = 0.19456427955133734 * var_x928 - 1.4361041141897564 * var_x929;
        const double var_x931 = 8.5519999999999996 * var_x929;
        const double var_x932 = 6.7649999999999997 * var_x928;
        const double var_x933 = var_x931 + var_x932;
        const double var_x934 = -var_x931 - var_x932;
        const double var_x935 = 0.16431153466973381 * var_chaste_interface__membrane__v;
        const double var_x936 = exp(13.621426224120933 + var_x935);
        const double var_x937 = 1.0 + var_x936;
        const double var_x938 = 1 / var_x937;
        const double var_x939 = exp(0.025140601874691665 + 0.049333991119881598 * var_chaste_interface__membrane__v);
        const double var_x940 = exp(-0.19029435163086714 - 0.15910898965791567 * var_chaste_interface__membrane__v);
        const double var_x941 = 6.149 * var_x939;
        const double var_x942 = 1.432e-5 * var_x940;
        const double var_x943 = var_x936 / pow(var_x937, 2);
        const double var_x944 = 0.16431153466973381 * var_x943;
        const double var_x945 = exp(0.10112954465231205 + 0.017649135192375574 * var_chaste_interface__membrane__v);
        const double var_x946 = exp(-0.63992869875222813 - 0.035650623885918005 * var_chaste_interface__membrane__v);
        const double var_x947 = 0.0059001058948111541 * var_x945 - 0.00034916221033868096 * var_x946;
        const double var_x948 = 0.0097940000000000006 * var_x946;
        const double var_x949 = 0.33429999999999999 * var_x945;
        const double var_x950 = var_x948 + var_x949;
        const double var_x951 = exp(0.025854356306892066 + 0.02600780234070221 * var_chaste_interface__membrane__v);
        const double var_x952 = exp(-12.148291269170388 - 0.12075836251660427 * var_chaste_interface__membrane__v);
        const double var_x953 = 1 / (0.30520000000000003 * var_x951 + 0.021360000000000001 * var_x952);
        const double var_x954 = 1 / (2.0379999999999998 + var_x953);
        const double var_x955 = (0.002579398623354667 * var_x952 - 0.0079375812743823146 * var_x951) / (pow((1 + 0.4906771344455349 * var_x953), 2) * pow((var_x951 + 0.069986893840104841 * var_x952), 2));
        const double var_x956 = exp(14.640157739073281 + var_x935);
        const double var_x957 = 1.0 + var_x956;
        const double var_x958 = exp(-8.1401975683890573 - 0.18996960486322187 * var_chaste_interface__membrane__v);
        const double var_x959 = 1.0 + var_x958;
        const double var_x960 = 0.13354700854700854 * var_chaste_interface__membrane__v;
        const double var_x961 = exp(11.700053418803417 + var_x960);
        const double var_x962 = exp(12.528044871794872 + var_x960);
        const double var_x963 = -0.067476383265856948 * var_chaste_interface__membrane__v;
        const double var_x964 = exp(0.96761133603238858 + var_x963);
        const double var_x965 = 1.0 + var_x964;
        const double var_x966 = 0.034035137876343539 * var_chaste_interface__membrane__v;
        const double var_x967 = exp(0.62658348478969694 - var_x966);
        const double var_x968 = 1.0 + var_x967;
        const double var_x969 = exp(3.403513787634354 + var_x966);
        const double var_x970 = 1.0 + var_x969;
        const double var_x971 = 0.026774900134466751 * var_x967 / pow(var_x968, 2) - 0.113288618703949 * var_x969 / pow(var_x970, 2);
        const double var_x972 = 3.3285782215882072 / var_x970;
        const double var_x973 = 0.78668405081082138 / var_x968;
        const double var_x974 = 0.067476383265856948 * var_x972 + 0.067476383265856948 * var_x973;
        const double var_x975 = -var_x972 - var_x973;
        const double var_x976 = exp(-1.0 - 0.01 * var_chaste_interface__membrane__v);
        const double var_x977 = exp(3.0138637733574445 + 0.060277275467148887 * var_chaste_interface__membrane__v);
        const double var_x978 = 1 / (0.39329999999999998 * var_x976 + 0.08004 * var_x977);
        const double var_x979 = 1 / (4.5620000000000003 + var_x978);
        const double var_x980 = exp(7.6939240063036234 + 0.17510068289266328 * var_chaste_interface__membrane__v);
        const double var_x981 = 1.0 + var_x980;
        const double var_x982 = 0.17510068289266328 * var_x980 / pow(var_x981, 2);
        const double var_x983 = 1 / var_x981;
        const double var_x984 = 0.31062867580131875 * (0.0039329999999999999 * var_x976 - 0.004824593128390597 * var_x977) / (pow((1 + 0.21920210434020165 * var_x978), 2) * pow((var_x976 + 0.20350877192982458 * var_x977), 2));
        const double var_x985 = exp(14.123035029087756 + 0.12377769525931426 * var_chaste_interface__membrane__v);
        const double var_x986 = exp(-1.6345469940728197 - 0.016934801016088061 * var_chaste_interface__membrane__v);
        const double var_x987 = 1 / (1.7800000000000001e-8 * var_x985 + 0.0014159999999999999 * var_x986);
        const double var_x988 = 1 / (23.620000000000001 + var_x987);
        const double var_x989 = 893.9509839578584 * (2.3979678238780695e-5 * var_x986 - 2.2032429756157938e-9 * var_x985) / (pow((1 + 0.042337002540220152 * var_x987), 2) * pow((var_x986 + 1.2570621468926554e-5 * var_x985), 2));
        const double var_x990 = exp(1.6423751686909582 + var_x963);
        const double var_x991 = 1.0 + var_x990;
        const double var_x992 = 0.050000000000000003 * var_chaste_interface__membrane__v;
        const double var_x993 = exp(3.5 + var_x992);
        const double var_x994 = 1.0 + var_x993;
        const double var_x995 = 1.0 - 0.5 / var_x994;
        const double var_x996 = 1 / var_x995;
        const double var_x997 = exp(56.77808727948004 - 4.6425255338904359 * var_chaste_interface__membrane__v);
        const double var_x998 = exp(-10.534927627438641 + 0.062932662051604776 * var_chaste_interface__membrane__v);
        const double var_x999 = var_x997 + var_x998;
        const double var_x1000 = 1 / var_x999;
        const double var_x1001 = 1 / (1.3540000000000001 + 0.0001 * var_x1000);
        const double var_x1002 = var_x1001 * var_x996;
        const double var_x1003 = var_x1002 * var_x979;
        const double var_x1004 = var_x983 - var_chaste_interface__Ito__iFp;
        const double var_x1005 = var_x1004 * var_x979;
        const double var_x1006 = 5.4545970252809655e-5 * var_x996 * (4.6425255338904359 * var_x997 - 0.062932662051604776 * var_x998) / (pow(var_x999, 2) * pow((1 + 7.3855243722304278e-5 * var_x1000), 2));
        const double var_x1007 = 0.025000000000000001 * var_x1001 * var_x993 / (pow(var_x994, 2) * pow(var_x995, 2));
        const double var_x1008 = var_x1002 * var_x988;
        const double var_x1009 = var_x983 - var_chaste_interface__Ito__iSp;
        const double var_x1010 = var_x1009 * var_x988;
        const double var_x1011 = exp(-0.93144208037825049 - 0.23640661938534277 * var_chaste_interface__membrane__v);
        const double var_x1012 = 1.0 + var_x1011;
        const double var_x1013 = exp(1.26 + 0.089999999999999997 * var_chaste_interface__membrane__v);
        const double var_x1014 = exp(-0.30000000000000004 - 0.050000000000000003 * var_chaste_interface__membrane__v);
        const double var_x1015 = var_x1013 + var_x1014;
        const double var_x1016 = 0.59999999999999998 + 1 / var_x1015;
        const double var_x1017 = 1 / var_x1016;
        const double var_x1018 = exp(2.0 + var_x453);
        const double var_x1019 = exp(-2.0 - var_x453);
        const double var_x1020 = 1 / (0.0044999999999999997 * var_x1018 + 0.0044999999999999997 * var_x1019);
        const double var_x1021 = 1 / (7.0 + var_x1020);
        const double var_x1022 = exp(5.2976190476190466 + 0.27056277056277056 * var_chaste_interface__membrane__v);
        const double var_x1023 = 1.0 + var_x1022;
        const double var_x1024 = var_x1022 / pow(var_x1023, 2);
        const double var_x1025 = 0.27056277056277056 * var_x1024;
        const double var_x1026 = 1 / var_x1023;
        const double var_x1027 = (0.00044999999999999999 * var_x1019 - 0.00044999999999999999 * var_x1018) / (pow((1 + 0.14285714285714285 * var_x1020), 2) * pow((var_x1018 + var_x1019), 2));
        const double var_x1028 = exp(0.83333333333333337 + 0.16666666666666666 * var_chaste_interface__membrane__v);
        const double var_x1029 = exp(-1.25 - 0.25 * var_chaste_interface__membrane__v);
        const double var_x1030 = 1 / (3.4999999999999997e-5 * var_x1028 + 3.4999999999999997e-5 * var_x1029);
        const double var_x1031 = 1 / (1000.0 + var_x1030);
        const double var_x1032 = 0.14285714285714285 * var_chaste_interface__membrane__v;
        const double var_x1033 = exp(0.5714285714285714 - var_x1032);
        const double var_x1034 = exp(-0.5714285714285714 + var_x1032);
        const double var_x1035 = 1 / (0.040000000000000001 * var_x1033 + 0.040000000000000001 * var_x1034);
        const double var_x1036 = 1 / (7.0 + var_x1035);
        const double var_x1037 = (0.0057142857142857143 * var_x1033 - 0.0057142857142857143 * var_x1034) / (pow((1 + 0.14285714285714285 * var_x1035), 2) * pow((var_x1033 + var_x1034), 2));
        const double var_x1038 = exp(var_x1032);
        const double var_x1039 = exp(-0.33333333333333331 * var_chaste_interface__membrane__v);
        const double var_x1040 = 1 / (0.00012 * var_x1038 + 0.00012 * var_x1039);
        const double var_x1041 = 1 / (100.0 + var_x1040);
        const double var_x1042 = 0.10822510822510822 * var_x1024;
        const double var_x1043 = 1.0 + 0.002 * var_x47;
        const double var_x1044 = pow((1 / var_chaste_interface__ICaL__jca + 0.001 * pow(var_x1043, 4)), (-2));
        const double var_x1045 = exp(2.7360444511379707);
        const double var_x1046 = var_x1045 * _lt_0_row[14];
        const double var_x1047 = 0.0038608739999999998 * var_x1046 * var_chaste_interface__IKr__C1;
        const double var_x1048 = exp(2.9189610691546015) * _lt_0_row[12];
        const double var_x1049 = 0.0021407249999999996 * var_x1048 * var_chaste_interface__IKr__IC1;
        const double var_x1050 = exp(2.4217402245028676) * _lt_0_row[19];
        const double var_x1051 = 9.2080400000000004e-7 * var_x1050 * var_chaste_interface__IKr__IC2;
        const double var_x1052 = exp(2.7162091828629111) * _lt_0_row[20];
        const double var_x1053 = 1.207738e-11 * var_x1052 * var_chaste_interface__IKr__IC1;
        const double var_x1054 = 0.00078680000000000004 * var_x1052;
        const double var_x1055 = 0.012409999999999999 * var_x1048;
        const double var_x1056 = 5.4550000000000003e-6 * var_x1050;
        const double var_x1057 = 0.44919999999999999 * var_x1046;
        const double var_x1058 = exp(2.6174203303045127) * _lt_0_row[18];
        const double var_x1059 = 1.1492952999999999e-8 * var_x1058 * var_chaste_interface__IKr__C2;
        const double var_x1060 = var_x1045 * _lt_0_row[15];
        const double var_x1061 = 0.00021210949999999999 * var_x1060 * var_chaste_interface__IKr__IC2;
        const double var_x1062 = exp(2.7230751049583355) * _lt_0_row[22];
        const double var_x1063 = 1.0338424e-5 * var_x1062 * var_chaste_interface__IKr__IC2;
        const double var_x1064 = exp(2.2555765142844972) * _lt_0_row[21];
        const double var_x1065 = 8.6044139999999988e-7 * var_x1064 * var_chaste_interface__IKr__IO;
        const double var_x1066 = 0.3226 * var_x1060;
        const double var_x1067 = 0.001214 * var_x1062;
        const double var_x1068 = 0.31809999999999999 * var_x1058;
        const double var_x1069 = 1.8539999999999999e-5 * var_x1064;
        const double var_x1070 = exp(2.6818084178158563) * _lt_0_row[13];
        const double var_x1071 = 1.2225840000000001e-6 * var_x1070 * var_chaste_interface__IKr__C1;
        const double var_x1072 = exp(2.4517433881989175) * _lt_0_row[11];
        const double var_x1073 = 2.1070835999999998e-8 * var_x1072 * var_chaste_interface__IKr__C2;
        const double var_x1074 = 0.0264 * var_x1070;
        const double var_x1075 = 4.9860000000000002e-6 * var_x1072;
        const double var_x1076 = exp(0.64217715821910271) * _lt_0_row[16];
        const double var_x1077 = 4.0738319999999997e-5 * var_x1076 * var_chaste_interface__IKr__O;
        const double var_x1078 = exp(2.4477197176814647) * _lt_0_row[17];
        const double var_x1079 = 4.2810439e-11 * var_x1078 * var_chaste_interface__IKr__C2;
        const double var_x1080 = 0.005509 * var_x1078;
        const double var_x1081 = 0.0014159999999999999 * var_x1076;
        const double var_x1082 = exp(1.4967756740703964) * _lt_0_row[23];
        const double var_x1083 = 0.00069553200000000001 * var_x1082 * var_chaste_interface__IKr__O;
        const double var_x1084 = exp(2.9534155818343937);
        const double var_x1085 = _lt_0_row[24];
        const double var_x1086 = var_x1084 * var_x1085;
        const double var_x1087 = 0.0001988627 * var_x1086 * var_chaste_interface__IKr__IO;
        const double var_x1088 = 0.14899999999999999 * var_x1082;
        const double var_x1089 = pow(NV_Ith_S(mParameters, 0), NV_Ith_S(mParameters, 6));
        const double var_x1090 = var_x1089 * NV_Ith_S(mParameters, 1) * NV_Ith_S(mParameters, 3) / (var_x1089 + NV_Ith_S(mParameters, 5));
        const double var_x1091 = -var_x1090;
        const double var_x1092 = 0.0089779999999999999 * var_x1086;
        const double var_x1093 = var_x1082 * NV_Ith_S(mParameters, 3) / (var_x1084 * var_x1085);
        const double var_x1094 = 0.44507484963243482 * var_x1093 * var_chaste_interface__IKr__IObound;
        const double var_x1095 = 16.59612385832034 * var_x1093;
        const double var_x1096 = exp(0.14729709824716453 * NV_Ith_S(mParameters, 4) - 0.14729709824716453 * var_chaste_interface__membrane__v);
        const double var_x1097 = 1.0 + var_x1096;
        const double var_x1098 = var_x1096 * var_chaste_interface__IKr__Cbound * NV_Ith_S(mParameters, 2) / pow(var_x1097, 2);
        const double var_x1099 = 0.14729709824716453 * var_x1098;
        const double var_x1100 = -NV_Ith_S(mParameters, 2);
        const double var_x1101 = NV_Ith_S(mParameters, 2) / var_x1097;
        const double var_x1102 = exp(-0.91304347826086951 - 0.0043478260869565218 * var_chaste_interface__membrane__v);
        const double var_x1103 = exp(2.7123595505617977 + 0.056179775280898875 * var_chaste_interface__membrane__v);
        const double var_x1104 = 1 / (0.001292 * var_x1102 + 0.00023259999999999999 * var_x1103);
        const double var_x1105 = 1 / (817.29999999999995 + var_x1104);
        const double var_x1106 = exp(-1.2987012987012987 - 0.11195700850873264 * var_chaste_interface__membrane__v);
        const double var_x1107 = 1.0 + var_x1106;
        const double var_x1108 = 0.11195700850873264 * var_x1106 / pow(var_x1107, 2);
        const double var_x1109 = 1 / var_x1107;
        const double var_x1110 = exp(-2.5 + var_x992);
        const double var_x1111 = exp(-2.1464516129032258 - 0.032258064516129031 * var_chaste_interface__membrane__v);
        const double var_x1112 = 0.019300000000000001 * var_x1111;
        const double var_x1113 = 0.01 * var_x1110;
        const double var_x1114 = 1 / (3.8115000000000001 + 1.5691999999999999 * NV_Ith_S(mParameters, 10));
        const double var_x1115 = exp(var_x1114 * (-144.59 + var_x175 - 2.5537999999999998 * NV_Ith_S(mParameters, 10)));
        const double var_x1116 = 1.0 + var_x1115;
        const double var_x1117 = exp(3.4155488244627148 + 0.014423770373575654 * var_chaste_interface__membrane__v);
        const double var_x1118 = exp(-6.2475442043222005 - 0.049115913555992145 * var_chaste_interface__membrane__v);
        const double var_x1119 = 0.0081833060556464818 * var_x1117;
        const double var_x1120 = 0.0081833060556464818 * var_x1118;
        const double var_x1121 = var_x463 * var_x55;
        const double var_x1122 = var_x499 * var_x55;
        const double var_x1123 = var_x491 + var_x520 + var_x1121 * var_x448 + var_x1122 * var_x505;
        const double var_x1124 = pow(var_chaste_interface__intracellular_ions__cajsr, (-8));
        const double var_x1125 = 1 / (1.0 + 25.62890625 * var_x1124);
        const double var_x1126 = 2375.0 * var_x1125;
        const double var_x1127 = 1 / var_chaste_interface__intracellular_ions__cajsr;
        const double var_x1128 = 1 / (1.0 + 0.0123 * var_x1127);
        const double var_x1129 = 4.75 * var_x1128 < 0.001;
        const double var_x1130 = var_x1123 * var_x1125;
        const double var_x1131 = 0.0025894736842105265 * var_x1127;
        const double var_x1132 = 0.21052631578947367 + var_x1131;
        const double var_x1133 = 2.375 * var_x1132;
        const double var_x1134 = var_x583 - var_x577;
        const double var_x1135 = var_x1125 * var_x1133;
        const double var_x1136 = var_x768 + var_x778 - var_x769 + var_x1121 * var_x767;
        const double var_x1137 = var_x915 + var_x794 * var_chaste_interface__ICaL__d;
        const double var_x1138 = var_x1137 / (pow((0.039018442310623382 + var_x1124), 2) * pow(var_chaste_interface__intracellular_ions__cajsr, 9));
        const double var_x1139 = pow(var_chaste_interface__intracellular_ions__cajsr, (-2));
        const double var_x1140 = var_x1125 * var_x1137;
        const double var_x1141 = var_x794 + var_x914;
        const double var_x1142 = var_x1122 * var_x797;
        const double var_x1143 = var_x801 + var_x1122 * var_x799;
        const double var_x1144 = var_x1122 * var_x803;
        const double var_x1145 = var_x807 + var_x1122 * var_x805;
        const double var_x1146 = var_x812 + var_x1122 * var_x809;
        const double var_x1147 = var_x1125 * var_x517;
        const double var_x1148 = var_x1147 * var_x797;
        const double var_x1149 = 2.6125000000000003 * var_x1132;
        const double var_x1150 = var_x1147 * var_x803;
        const double var_x1151 = var_x820 + var_x1122 * var_x817;
        const double var_x1152 = 2968.75 * var_x1125;
        const double var_x1153 = 5.9375 * var_x1128 < 0.001;
        const double var_x1154 = 0.0020715789473684213 * var_x1127;
        const double var_x1155 = 0.16842105263157894 + var_x1154;
        const double var_x1156 = 2.96875 * var_x1155;
        const double var_x1157 = var_x1125 * var_x1156;
        const double var_x1158 = 3.2656250000000004 * var_x1155;
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (var_x436 - var_x19 - var_x190 - var_x491 - var_x520 - ((var_x26) ? (var_x20 * var_x23 - var_x20 * var_x25) : (var_x27 * var_x34 + var_x35 * var_x36 - var_x38 * var_x39)) + 0.10534077741493732 * var_x494 - var_x172 - 0.054525627044711013 * var_x442 + var_x174 * var_x179 + var_x182 * (-var_x180 - var_x181) + var_x448 * var_x464 + var_x472 * var_x474 + var_x480 * var_x482 + var_x500 * var_x505 + var_x512 * var_x513 + var_x513 * var_x516 + (-var_x57 - var_x60) * NV_Ith_S(mParameters, 24) + (0.014753396606870788 * var_x160 + 2.5425659820598794 * var_x161 - 1.1377195280964303 * var_x169 - 0.00010162981240266993 * var_x168 + var_x132 * var_x134 + var_x152 * var_x155 + var_x152 * var_x166 - var_x114 * var_x122 - var_x147 * var_x151 - var_x152 * var_x164 - var_x156 * var_x158) * NV_Ith_S(mParameters, 23) - var_x331 * var_x335 - var_x422 * var_x425 - var_x428 * var_chaste_interface__IKr__O - var_x440 * var_chaste_interface__IK1__xk1 - var_x472 * var_x493 - var_x480 * var_x492 - var_x521 * var_x523 - var_x523 * var_x524);
        IJth(rJacobian, 1, 0) = ((var_x26) ? (var_x829 * (var_x825 + var_x25 * var_x823 - var_x23 * var_x823)) : (var_x829 * (var_x825 - var_x36 * var_x830 - 9.2123334554313318e-6 * var_x34 * var_chaste_interface__membrane__v + var_x37 * var_x39 * var_x830)));
        IJth(rJacobian, 3, 0) = -6.1520742882368733e-5 * var_x19 - 6.1520742882368733e-5 * var_x190 + var_x182 * (-6.1520742882368733e-5 * var_x180 - var_x861 * var_chaste_interface__INaL__hLp) + (2.722919757878727e-6 * var_x160 + 0.0004692616441312896 * var_x161 - 1.8757024674024077e-8 * var_x168 - 0.0002099800516808111 * var_x169 + var_x132 * var_x855 + var_x152 * var_x857 + var_x152 * var_x860 - var_x114 * var_x854 - var_x147 * var_x856 - var_x152 * var_x859 - var_x156 * var_x858) * NV_Ith_S(mParameters, 23) - var_x422 * var_x862;
        IJth(rJacobian, 4, 0) = var_x480 * var_x872 + var_x513 * var_x874 - var_x331 * var_x870 - var_x480 * var_x873 - var_x523 * var_x875;
        IJth(rJacobian, 5, 0) = var_x887 + 6.480642882373194e-6 * var_x494 - 3.354457081917597e-6 * var_x442 - 6.1520742882368733e-5 * var_x172 + var_x174 * var_x883 + (-6.1520742882368733e-5 * var_x57 - var_x562 * var_x861) * NV_Ith_S(mParameters, 24) + (0.00013998670112054073 * var_x169 + 1.250468311601605e-8 * var_x168 - 0.0003128410960875264 * var_x161 - 1.8152798385858181e-6 * var_x160 + var_x114 * var_x876 + var_x147 * var_x877 + var_x152 * var_x881 + var_x156 * var_x879 - var_x132 * var_x878 - var_x152 * var_x880 - var_x152 * var_x882) * NV_Ith_S(mParameters, 23) - var_x884 * var_chaste_interface__IKr__O - var_x888 * var_chaste_interface__IK1__xk1;
        IJth(rJacobian, 6, 0) = var_x472 * var_x896 + var_x513 * var_x898 - var_x472 * var_x897 - var_x523 * var_x899;
        IJth(rJacobian, 7, 0) = var_x910 * (var_x331 * var_x900 + var_x448 * var_x902 + var_x505 * var_x904 - var_x448 * var_x903 - var_x519 * var_x905);
        IJth(rJacobian, 10, 0) = var_x930 * (-var_chaste_interface__INa__m + 1 / var_x927) + 0.10130685847431871 * var_x926 * var_x933 / pow(var_x927, 2);
        IJth(rJacobian, 11, 0) = (var_x938 - var_chaste_interface__INa__hf) * (0.30335471139615194 * var_x939 - 2.2784407319013524e-6 * var_x940) - var_x944 * (var_x941 + var_x942);
        IJth(rJacobian, 12, 0) = var_x947 * (var_x938 - var_chaste_interface__INa__hs) - var_x944 * var_x950;
        IJth(rJacobian, 13, 0) = -var_x944 * var_x954 - 2.5847740332669882 * var_x955 * (var_x938 - var_chaste_interface__INa__j);
        IJth(rJacobian, 14, 0) = var_x947 * (0.33333333333333331 / var_x957 - 0.33333333333333331 * var_chaste_interface__INa__hsp) - 0.054770511556577937 * var_x950 * var_x956 / pow(var_x957, 2);
        IJth(rJacobian, 15, 0) = -1.7703931734705398 * var_x955 * (var_x938 - var_chaste_interface__INa__jp) - 0.11254214703406426 * var_x943 * var_x954;
        IJth(rJacobian, 16, 0) = var_x930 * (-var_chaste_interface__INaL__mL + 1 / var_x959) + 0.18996960486322187 * var_x933 * var_x958 / pow(var_x959, 2);
        IJth(rJacobian, 17, 0) = -0.00066773504273504275 * var_x961 / pow((1.0 + var_x961), 2);
        IJth(rJacobian, 18, 0) = -0.00022257834757834756 * var_x962 / pow((1.0 + var_x962), 2);
        IJth(rJacobian, 19, 0) = var_x971 * (-var_chaste_interface__Ito__a + 1 / var_x965) + var_x964 * var_x974 / pow(var_x965, 2);
        IJth(rJacobian, 20, 0) = -var_x979 * var_x982 - var_x984 * (var_x983 - var_chaste_interface__Ito__iF);
        IJth(rJacobian, 21, 0) = -var_x982 * var_x988 - var_x989 * (var_x983 - var_chaste_interface__Ito__iS);
        IJth(rJacobian, 22, 0) = var_x971 * (-var_chaste_interface__Ito__ap + 1 / var_x991) + var_x974 * var_x990 / pow(var_x991, 2);
        IJth(rJacobian, 23, 0) = -var_x1003 * var_x982 - var_x1005 * var_x1006 - var_x1005 * var_x1007 - var_x1002 * var_x1004 * var_x984;
        IJth(rJacobian, 24, 0) = -var_x1006 * var_x1010 - var_x1007 * var_x1010 - var_x1008 * var_x982 - var_x1002 * var_x1009 * var_x989;
        IJth(rJacobian, 25, 0) = 0.23640661938534277 * var_x1011 * var_x1017 / pow(var_x1012, 2) - (-var_chaste_interface__ICaL__d + 1 / var_x1012) * (0.050000000000000003 * var_x1014 - 0.089999999999999997 * var_x1013) / (pow(var_x1015, 2) * pow(var_x1016, 2));
        IJth(rJacobian, 26, 0) = -var_x1021 * var_x1025 - 1007.8105316200556 * var_x1027 * (var_x1026 - var_chaste_interface__ICaL__ff);
        IJth(rJacobian, 27, 0) = -var_x1025 * var_x1031 - 816.32653061224505 * (var_x1026 - var_chaste_interface__ICaL__fs) * (8.7499999999999992e-6 * var_x1029 - 5.8333333333333331e-6 * var_x1028) / (pow((1 + 0.001 * var_x1030), 2) * pow((var_x1028 + var_x1029), 2));
        IJth(rJacobian, 28, 0) = -var_x1025 * var_x1036 - 12.755102040816325 * var_x1037 * (var_x1026 - var_chaste_interface__ICaL__fcaf);
        IJth(rJacobian, 29, 0) = -var_x1025 * var_x1041 - 6944.4444444444443 * (var_x1026 - var_chaste_interface__ICaL__fcas) * (4.0000000000000003e-5 * var_x1039 - 1.7142857142857142e-5 * var_x1038) / (pow((1 + 0.01 * var_x1040), 2) * pow((var_x1038 + var_x1039), 2));
        IJth(rJacobian, 30, 0) = -0.0036075036075036075 * var_x1024;
        IJth(rJacobian, 31, 0) = -var_x1021 * var_x1042 - 403.12421264802225 * var_x1027 * (var_x1026 - var_chaste_interface__ICaL__ffp);
        IJth(rJacobian, 32, 0) = -var_x1036 * var_x1042 - 5.1020408163265305 * var_x1037 * (var_x1026 - var_chaste_interface__ICaL__fcafp);
        IJth(rJacobian, 34, 0) = var_x1047 - var_x1049 - var_x1051 - var_x1053;
        IJth(rJacobian, 35, 0) = var_x1051 + var_x1053 + var_x1059 + var_x1061 - var_x1063 - var_x1065;
        IJth(rJacobian, 36, 0) = var_x1049 - var_x1047 - var_x1071 - var_x1073;
        IJth(rJacobian, 37, 0) = var_x1071 + var_x1073 - var_x1059 - var_x1061 - var_x1077 - var_x1079;
        IJth(rJacobian, 38, 0) = var_x1077 + var_x1079 - var_x1083 - var_x1087;
        IJth(rJacobian, 39, 0) = var_x1063 + var_x1065 + var_x1083 + var_x1087 + var_x1094;
        IJth(rJacobian, 40, 0) = var_x1099 - var_x1094;
        IJth(rJacobian, 41, 0) = var_x1099;
        IJth(rJacobian, 42, 0) = -0.29459419649432905 * var_x1098;
        IJth(rJacobian, 43, 0) = var_x1105 * var_x1108 - 0.89683381486126834 * (var_x1109 - var_chaste_interface__IKs__xs1) * (5.617391304347826e-6 * var_x1102 - 1.3067415730337078e-5 * var_x1103) / (pow((1 + 0.001223540927444023 * var_x1104), 2) * pow((var_x1102 + 0.18003095975232197 * var_x1103), 2));
        IJth(rJacobian, 44, 0) = var_x1108 * (var_x1112 + var_x1113) + (var_x1109 - var_chaste_interface__IKs__xs2) * (0.00050000000000000001 * var_x1110 - 0.00062258064516129035 * var_x1111);
        IJth(rJacobian, 45, 0) = (-var_chaste_interface__IK1__xk1 + 1 / var_x1116) * (0.00011803412744333594 * var_x1117 - 0.00040193055283135957 * var_x1118) + var_x1114 * var_x1115 * (var_x1119 + var_x1120) / pow(var_x1116, 2);
        IJth(rJacobian, 46, 0) = ((var_x1129) ? (-var_x1123 * var_x1126) : (-var_x1130 * var_x1133));
        IJth(rJacobian, 47, 0) = ((var_x1153) ? (-var_x1123 * var_x1152) : (-var_x1130 * var_x1156));
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (var_x535 - var_x533 - ((var_x26) ? (var_x528 + var_x525 * var_x529) : (var_x531 * NV_Ith_S(mParameters, 13))) - 5.4447296618926212e-7 * var_x557 - 3.5999999999999998e-8 * var_x553 - var_x425 * var_x551);
        IJth(rJacobian, 1, 1) = ((var_x26) ? (var_x829 * (var_x841 + var_x529 * (-1.5380185720592183e-5 - 11.515416819289165 * var_chaste_interface__membrane__v) - var_x717 * var_x831) + var_x845 * (var_x844 - var_x25 * var_x831 - 11.515416819289165 * var_x496 * (var_x22 * var_x508 * NV_Ith_S(mParameters, 13) - var_x24 * var_x506 * NV_Ith_S(mParameters, 13)))) : (var_x829 * (var_x841 - var_x530 * var_x846 * NV_Ith_S(mParameters, 13)) + var_x845 * (var_x844 - var_x34 * var_x846)));
        IJth(rJacobian, 3, 1) = -6.644240231295822e-12 * var_x553 - var_x551 * var_x862;
        IJth(rJacobian, 5, 1) = -3.3496381359330236e-11 * var_x557;
        IJth(rJacobian, 7, 1) = 5.0 * var_x909;
        IJth(rJacobian, 8, 1) = (var_x842 + var_x843 - 0.0043750000000000004 * var_x839 - 0.01203125 * var_x838) * NV_Ith_S(mParameters, 8);
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (var_x577 - var_x573 - var_x583 + 0.00020625000000000003 * var_x579 + 5.8971000000000002e-5 * var_x580 - 0.0001875 * var_x585 - 5.3610000000000003e-5 * var_x587 + var_x179 * var_x563 + var_x564 * var_x569);
        IJth(rJacobian, 1, 2) = var_x829 * (0.00014649816176470588 * var_x848 - 5.3272058823529409e-5 * var_x849) * NV_Ith_S(mParameters, 8);
        IJth(rJacobian, 2, 2) = -0.00068000000000000005 - var_x51 * var_x853 + var_x46 * var_x853 * (1 - var_x50);
        IJth(rJacobian, 3, 2) = -6.1520742882368733e-5 * var_x573 + var_x564 * var_x865;
        IJth(rJacobian, 4, 2) = 4.3141420946261074e-7 * var_x579 - 3.9219473587510065e-7 * var_x585;
        IJth(rJacobian, 5, 2) = var_x563 * var_x883;
        IJth(rJacobian, 6, 2) = 1.2334995076954966e-7 * var_x580 - 1.1213631888140878e-7 * var_x587;
        IJth(rJacobian, 7, 2) = var_x910 * (0.00017256568378504431 * var_x576 + (var_x911 * var_chaste_interface__ryr__Jrelnp - var_x911 * var_chaste_interface__ryr__Jrelp) * NV_Ith_S(mParameters, 7) - 0.00015687789435004027 * var_x574 * var_x581);
        IJth(rJacobian, 8, 2) = (0.00065625000000000004 * var_x849 - 0.0018046875000000001 * var_x848) * NV_Ith_S(mParameters, 8);
        IJth(rJacobian, 9, 2) = var_x924 * (var_x560 * var_chaste_interface__ryr__Jrelp - var_x560 * var_chaste_interface__ryr__Jrelnp);
        IJth(rJacobian, 46, 2) = ((var_x1129) ? (-var_x1126 * var_x1134) : (-var_x1134 * var_x1135));
        IJth(rJacobian, 47, 2) = ((var_x1153) ? (-var_x1134 * var_x1152) : (-var_x1134 * var_x1157));
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x590 + 0.48963716847178318 * var_x676 + (7.627697946179639 * var_x624 - 4.348546428156827e-14 * var_x628 - 0.052543934931800658 * var_x627 - 3.0612499986110548e-12 * var_x612 + var_x134 * var_x610 + var_x621 * var_x622 + var_x621 * var_x626 - var_x122 * var_x607 - var_x151 * var_x621 - var_x158 * var_x623 - var_x621 * var_x625) * NV_Ith_S(mParameters, 23) - var_x190 * var_x673 - var_x425 * var_x672 - var_x673 * var_x675);
        IJth(rJacobian, 1, 3) = var_x672 * var_x824 * var_x828;
        IJth(rJacobian, 3, 3) = -0.014705882352941176 - 6.1520742882368733e-5 * var_x590 + (0.0014077849323938687 * var_x624 - 9.6976257329016631e-6 * var_x627 - 5.6499112218960703e-16 * var_x612 - 8.025774201560372e-18 * var_x628 + var_x610 * var_x855 + var_x621 * var_x866 + var_x621 * var_x868 - var_x607 * var_x854 - var_x621 * var_x856 - var_x621 * var_x867 - var_x623 * var_x858) * NV_Ith_S(mParameters, 23) - var_x190 * var_x869 - var_x672 * var_x862 - var_x675 * var_x869;
        IJth(rJacobian, 4, 3) = 0.5;
        IJth(rJacobian, 5, 3) = 0.48963716847178318 * var_x892 + (6.4650838219344423e-6 * var_x627 + 3.7666074812640467e-16 * var_x612 + 5.3505161343735813e-18 * var_x628 - 0.0009385232882625792 * var_x624 + var_x607 * var_x876 + var_x621 * var_x877 + var_x621 * var_x890 + var_x623 * var_x879 - var_x610 * var_x878 - var_x621 * var_x889 - var_x621 * var_x891) * NV_Ith_S(mParameters, 23);
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (var_x482 * var_x719 - var_x335 * var_x716 - var_x492 * var_x719);
        IJth(rJacobian, 3, 4) = 0.014705882352941176;
        IJth(rJacobian, 4, 4) = -0.5 + var_x719 * var_x872 - var_x716 * var_x870 - var_x719 * var_x873;
        IJth(rJacobian, 7, 4) = var_x716 * var_x900 * var_x909;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (26.712338705498265 * var_x676 - 11.495160327182951 * var_x748 + (0.15891037387874246 * var_x745 - 2.3483561633180696e-12 * var_x612 - 3.3358712325586619e-14 * var_x628 + var_x134 * var_x736 + var_x622 * var_x743 + var_x626 * var_x743 - var_x122 * var_x731 - var_x151 * var_x743 - var_x158 * var_x744 - var_x625 * var_x743) * NV_Ith_S(mParameters, 23) - var_x172 * var_x746 - var_x746 * var_x747 - var_x746 * var_x749);
        IJth(rJacobian, 3, 5) = (2.93288527582056e-5 * var_x745 - 4.3341784715915055e-16 * var_x612 - 6.1567582916079571e-18 * var_x628 + var_x736 * var_x855 + var_x743 * var_x866 + var_x743 * var_x868 - var_x731 * var_x854 - var_x743 * var_x856 - var_x743 * var_x867 - var_x744 * var_x858) * NV_Ith_S(mParameters, 23);
        IJth(rJacobian, 5, 5) = -0.014705882352941176 + 26.712338705498265 * var_x892 - 0.00070719080288022792 * var_x748 + (4.1045055277386378e-18 * var_x628 + 2.8894523143943372e-16 * var_x612 - 1.95525685054704e-5 * var_x745 + var_x731 * var_x876 + var_x743 * var_x877 + var_x743 * var_x890 + var_x744 * var_x879 - var_x736 * var_x878 - var_x743 * var_x889 - var_x743 * var_x891) * NV_Ith_S(mParameters, 23) - var_x172 * var_x893 - var_x747 * var_x893 - var_x749 * var_x893;
        IJth(rJacobian, 6, 5) = 0.5;
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (var_x474 * var_x719 - var_x493 * var_x719);
        IJth(rJacobian, 5, 6) = 0.014705882352941176;
        IJth(rJacobian, 6, 6) = -0.5 + var_x719 * var_x896 - var_x719 * var_x897;
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (var_x769 - var_x764 - var_x768 - var_x778 + 4.0207500000000006e-9 * var_x771 + 1.4062500000000001e-8 * var_x772 - 4.4228250000000006e-9 * var_x775 - 1.5468750000000001e-8 * var_x776 - 8.9999999999999995e-9 * var_x766 + var_x179 * var_x753 + var_x464 * var_x767 + var_x569 * var_x763 - var_x335 * var_x762);
        IJth(rJacobian, 1, 7) = var_x829 * (0.14705882352941174 + (3.9954044117647064e-9 * var_x851 - 1.0987362132352942e-8 * var_x852) * NV_Ith_S(mParameters, 8));
        IJth(rJacobian, 2, 7) = 3.7500000000000005e-6 * var_x51 * var_x750 + 1.8750000000000003e-7 * var_x332 * pow(var_x46, 2) / pow(var_x48, 3);
        IJth(rJacobian, 3, 7) = -6.1520742882368733e-5 * var_x764 + var_x763 * var_x865;
        IJth(rJacobian, 4, 7) = 2.9414605190632549e-11 * var_x772 - 5.6476041966014488e-11 * var_x766 - 3.2356065709695809e-11 * var_x776 - var_x762 * var_x870;
        IJth(rJacobian, 5, 7) = var_x753 * var_x883;
        IJth(rJacobian, 6, 7) = 8.4102239161056588e-12 * var_x771 - 9.251246307716226e-12 * var_x775;
        IJth(rJacobian, 7, 7) = var_x910 * (-5.0 + 1.882534732200483e-11 * var_x766 - 1.2942426283878324e-8 * var_x777 + var_x762 * var_x900 + var_x767 * var_x902 + (var_x912 * var_chaste_interface__ryr__Jrelp - var_x912 * var_chaste_interface__ryr__Jrelnp) * NV_Ith_S(mParameters, 7) - var_x767 * var_x903 + 1.1765842076253021e-8 * var_x582 * var_x751) + (0.019557600000000001 / pow(var_x906, 3) + 8.1780000000000006e-5 / pow(var_x907, 3)) * (5.0 * var_chaste_interface__intracellular_ions__cai + 0.23999999999999996 * var_x913 - 5.0 * var_chaste_interface__intracellular_ions__cass - 0.0010458526290002684 * var_x915 + var_x765 * var_x900 - var_x916 * var_chaste_interface__ICaL__d) / pow(var_x908, 2);
        IJth(rJacobian, 8, 7) = (1.3535156250000001e-7 * var_x852 - 4.9218750000000005e-8 * var_x851) * NV_Ith_S(mParameters, 8);
        IJth(rJacobian, 9, 7) = var_x924 * (var_x752 * var_chaste_interface__ryr__Jrelnp - var_x752 * var_chaste_interface__ryr__Jrelp);
        IJth(rJacobian, 33, 7) = 7.9999999999999996e-6 * var_x1044 * var_x332 * pow(var_x1043, 3);
        IJth(rJacobian, 46, 7) = ((var_x1129) ? (-var_x1126 * var_x1136) : (-var_x1135 * var_x1136));
        IJth(rJacobian, 47, 7) = ((var_x1153) ? (-var_x1136 * var_x1152) : (-var_x1136 * var_x1157));
        IJth(rJacobian, 1, 8) = 2.1308823529411761e-5 * var_x828 * NV_Ith_S(mParameters, 8);
        IJth(rJacobian, 8, 8) = -0.00086956521739130427 - 0.00026249999999999998 * NV_Ith_S(mParameters, 8);
        IJth(rJacobian, 9, 8) = var_x925;
        IJth(rJacobian, 8, 9) = 0.00086956521739130427;
        IJth(rJacobian, 9, 9) = -var_x925 + 0.25 * (-var_x913 + 0.01 * var_chaste_interface__intracellular_ions__cansr - 0.01 * var_chaste_interface__intracellular_ions__cajsr) / (pow(var_x920, 3) * pow((0.125 + var_x921), 2));
        IJth(rJacobian, 46, 9) = ((var_x1129) ? (-741.35040390184417 * var_x1138) : (-0.0025894736842105265 * var_x1139 * (-var_chaste_interface__ryr__Jrelnp - 2.375 * var_x1140) - 0.74135040390184426 * var_x1132 * var_x1138));
        IJth(rJacobian, 47, 9) = ((var_x1153) ? (-926.68800487730527 * var_x1138) : (-0.0020715789473684213 * var_x1139 * (-var_chaste_interface__ryr__Jrelp - 2.96875 * var_x1140) - 0.92668800487730529 * var_x1138 * var_x1155));
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x779);
        IJth(rJacobian, 3, 10) = -0.0001845622286471062 * var_x779;
        IJth(rJacobian, 10, 10) = var_x934;
        IJth(rJacobian, 0, 11) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x781);
        IJth(rJacobian, 3, 11) = -6.1520742882368733e-5 * var_x781;
        IJth(rJacobian, 11, 11) = -var_x941 - var_x942;
        IJth(rJacobian, 0, 12) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x783);
        IJth(rJacobian, 3, 12) = -6.1520742882368733e-5 * var_x783;
        IJth(rJacobian, 12, 12) = -var_x948 - var_x949;
        IJth(rJacobian, 0, 13) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x784);
        IJth(rJacobian, 3, 13) = -6.1520742882368733e-5 * var_x784;
        IJth(rJacobian, 13, 13) = -var_x954;
        IJth(rJacobian, 0, 14) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x782 * var_x785);
        IJth(rJacobian, 3, 14) = -6.1520742882368787e-7 * var_x53 * var_x785;
        IJth(rJacobian, 14, 14) = -0.11143333333333333 * var_x945 - 0.003264666666666667 * var_x946;
        IJth(rJacobian, 0, 15) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x54 * var_x786);
        IJth(rJacobian, 3, 15) = -var_x786 * var_x861;
        IJth(rJacobian, 15, 15) = -0.68493150684931503 * var_x954;
        IJth(rJacobian, 0, 16) = mSetVoltageDerivativeToZero ? 0.0 : (var_x568 * var_x787);
        IJth(rJacobian, 3, 16) = var_x787 * var_x864;
        IJth(rJacobian, 16, 16) = var_x934;
        IJth(rJacobian, 0, 17) = mSetVoltageDerivativeToZero ? 0.0 : (var_x55 * var_x569);
        IJth(rJacobian, 3, 17) = var_x55 * var_x865;
        IJth(rJacobian, 17, 17) = -0.0050000000000000001;
        IJth(rJacobian, 0, 18) = mSetVoltageDerivativeToZero ? 0.0 : (var_x54 * var_x569);
        IJth(rJacobian, 3, 18) = var_x54 * var_x865;
        IJth(rJacobian, 18, 18) = -0.0016666666666666668;
        IJth(rJacobian, 0, 19) = mSetVoltageDerivativeToZero ? 0.0 : (var_x179 * var_x788);
        IJth(rJacobian, 5, 19) = var_x788 * var_x883;
        IJth(rJacobian, 19, 19) = var_x975;
        IJth(rJacobian, 0, 20) = mSetVoltageDerivativeToZero ? 0.0 : (var_x179 * var_x789);
        IJth(rJacobian, 5, 20) = var_x789 * var_x883;
        IJth(rJacobian, 20, 20) = -var_x979;
        IJth(rJacobian, 0, 21) = mSetVoltageDerivativeToZero ? 0.0 : (var_x179 * var_x790);
        IJth(rJacobian, 5, 21) = var_x790 * var_x883;
        IJth(rJacobian, 21, 21) = -var_x988;
        IJth(rJacobian, 0, 22) = mSetVoltageDerivativeToZero ? 0.0 : (var_x179 * var_x791);
        IJth(rJacobian, 5, 22) = var_x791 * var_x883;
        IJth(rJacobian, 22, 22) = var_x975;
        IJth(rJacobian, 0, 23) = mSetVoltageDerivativeToZero ? 0.0 : (var_x42 * var_x792);
        IJth(rJacobian, 5, 23) = var_x42 * var_x894;
        IJth(rJacobian, 23, 23) = -var_x1003;
        IJth(rJacobian, 0, 24) = mSetVoltageDerivativeToZero ? 0.0 : (var_x44 * var_x792);
        IJth(rJacobian, 5, 24) = var_x44 * var_x894;
        IJth(rJacobian, 24, 24) = -var_x1008;
        IJth(rJacobian, 0, 25) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x794 - 0.0013750000000000001 * var_x795 - 0.00039314000000000005 * var_x796 + var_x449 * var_x581 + var_x473 * var_x586 + var_x481 * var_x584);
        IJth(rJacobian, 4, 25) = -2.8760947297507386e-6 * var_x795 + var_x584 * var_x871;
        IJth(rJacobian, 6, 25) = -8.2233300513033119e-7 * var_x796 + var_x586 * var_x895;
        IJth(rJacobian, 7, 25) = var_x910 * (-var_x916 + var_x581 * var_x901);
        IJth(rJacobian, 25, 25) = -var_x1017;
        IJth(rJacobian, 46, 25) = ((var_x1129) ? (-var_x1126 * var_x1141) : (-var_x1135 * var_x1141));
        IJth(rJacobian, 47, 25) = ((var_x1153) ? (-var_x1141 * var_x1152) : (-var_x1141 * var_x1157));
        IJth(rJacobian, 0, 26) = mSetVoltageDerivativeToZero ? 0.0 : (var_x500 * var_x797 + var_x512 * var_x798 + var_x516 * var_x798);
        IJth(rJacobian, 4, 26) = var_x798 * var_x874;
        IJth(rJacobian, 6, 26) = var_x798 * var_x898;
        IJth(rJacobian, 7, 26) = var_x797 * var_x904 * var_x910;
        IJth(rJacobian, 26, 26) = -var_x1021;
        IJth(rJacobian, 46, 26) = ((var_x1129) ? (-var_x1126 * var_x1142) : (-var_x1135 * var_x1142));
        IJth(rJacobian, 47, 26) = ((var_x1153) ? (-var_x1142 * var_x1152) : (-var_x1142 * var_x1157));
        IJth(rJacobian, 0, 27) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x801 + var_x500 * var_x799 + var_x512 * var_x800 + var_x516 * var_x800 - var_x521 * var_x802 - var_x524 * var_x802);
        IJth(rJacobian, 4, 27) = var_x800 * var_x874 - var_x802 * var_x875;
        IJth(rJacobian, 6, 27) = var_x800 * var_x898 - var_x802 * var_x899;
        IJth(rJacobian, 7, 27) = var_x910 * (var_x799 * var_x904 - var_x799 * var_x905);
        IJth(rJacobian, 27, 27) = -var_x1031;
        IJth(rJacobian, 46, 27) = ((var_x1129) ? (-var_x1126 * var_x1143) : (-var_x1135 * var_x1143));
        IJth(rJacobian, 47, 27) = ((var_x1153) ? (-var_x1143 * var_x1152) : (-var_x1143 * var_x1157));
        IJth(rJacobian, 0, 28) = mSetVoltageDerivativeToZero ? 0.0 : (var_x500 * var_x803 + var_x512 * var_x804 + var_x516 * var_x804);
        IJth(rJacobian, 4, 28) = var_x804 * var_x874;
        IJth(rJacobian, 6, 28) = var_x804 * var_x898;
        IJth(rJacobian, 7, 28) = var_x457 * var_x904 * var_x909 * var_x917 * var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__jca;
        IJth(rJacobian, 28, 28) = -var_x1036;
        IJth(rJacobian, 46, 28) = ((var_x1129) ? (-var_x1126 * var_x1144) : (-var_x1135 * var_x1144));
        IJth(rJacobian, 47, 28) = ((var_x1153) ? (-var_x1144 * var_x1152) : (-var_x1144 * var_x1157));
        IJth(rJacobian, 0, 29) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x807 + var_x500 * var_x805 + var_x512 * var_x806 + var_x516 * var_x806 - var_x521 * var_x808 - var_x524 * var_x808);
        IJth(rJacobian, 4, 29) = var_x806 * var_x874 - var_x808 * var_x875;
        IJth(rJacobian, 6, 29) = var_x806 * var_x898 - var_x808 * var_x899;
        IJth(rJacobian, 7, 29) = var_x910 * (var_x805 * var_x904 - var_x805 * var_x905);
        IJth(rJacobian, 29, 29) = -var_x1041;
        IJth(rJacobian, 46, 29) = ((var_x1129) ? (-var_x1126 * var_x1145) : (-var_x1135 * var_x1145));
        IJth(rJacobian, 47, 29) = ((var_x1153) ? (-var_x1145 * var_x1152) : (-var_x1145 * var_x1157));
        IJth(rJacobian, 0, 30) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x812 + var_x500 * var_x809 + var_x512 * var_x810 + var_x516 * var_x810 - var_x521 * var_x813 - var_x524 * var_x813);
        IJth(rJacobian, 4, 30) = var_x810 * var_x874 - var_x813 * var_x875;
        IJth(rJacobian, 6, 30) = var_x810 * var_x898 - var_x813 * var_x899;
        IJth(rJacobian, 7, 30) = var_x910 * (var_x809 * var_x904 - var_x811 * var_x905);
        IJth(rJacobian, 30, 30) = -0.013333333333333334;
        IJth(rJacobian, 33, 30) = -var_x917 + 1.0 * var_x1044 / pow(var_chaste_interface__ICaL__jca, 2);
        IJth(rJacobian, 46, 30) = ((var_x1129) ? (-var_x1126 * var_x1146) : (-var_x1135 * var_x1146));
        IJth(rJacobian, 47, 30) = ((var_x1153) ? (-var_x1146 * var_x1152) : (-var_x1146 * var_x1157));
        IJth(rJacobian, 0, 31) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x518 * var_x797 - var_x521 * var_x814 - var_x524 * var_x814);
        IJth(rJacobian, 4, 31) = -var_x814 * var_x875;
        IJth(rJacobian, 6, 31) = -var_x814 * var_x899;
        IJth(rJacobian, 7, 31) = -var_x797 * var_x918;
        IJth(rJacobian, 31, 31) = -0.40000000000000002 * var_x1021;
        IJth(rJacobian, 46, 31) = ((var_x1129) ? (-2612.5 * var_x1148) : (-var_x1148 * var_x1149));
        IJth(rJacobian, 47, 31) = ((var_x1153) ? (-3265.625 * var_x1148) : (-var_x1148 * var_x1158));
        IJth(rJacobian, 0, 32) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x518 * var_x803 - var_x521 * var_x815 - var_x524 * var_x815);
        IJth(rJacobian, 4, 32) = -var_x815 * var_x875;
        IJth(rJacobian, 6, 32) = -var_x815 * var_x899;
        IJth(rJacobian, 7, 32) = -var_x803 * var_x918;
        IJth(rJacobian, 32, 32) = -0.40000000000000002 * var_x1036;
        IJth(rJacobian, 46, 32) = ((var_x1129) ? (-2612.5 * var_x1150) : (-var_x1149 * var_x1150));
        IJth(rJacobian, 47, 32) = ((var_x1153) ? (-3265.625 * var_x1150) : (-var_x1150 * var_x1158));
        IJth(rJacobian, 0, 33) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x820 + var_x500 * var_x817 + var_x512 * var_x818 + var_x516 * var_x818 - var_x521 * var_x821 - var_x524 * var_x821);
        IJth(rJacobian, 4, 33) = var_x818 * var_x874 - var_x821 * var_x875;
        IJth(rJacobian, 6, 33) = var_x818 * var_x898 - var_x821 * var_x899;
        IJth(rJacobian, 7, 33) = var_x910 * (var_x817 * var_x904 - var_x819 * var_x905);
        IJth(rJacobian, 33, 33) = -var_chaste_interface__ICaL__jca;
        IJth(rJacobian, 46, 33) = ((var_x1129) ? (-var_x1126 * var_x1151) : (-var_x1135 * var_x1151));
        IJth(rJacobian, 47, 33) = ((var_x1153) ? (-var_x1151 * var_x1152) : (-var_x1151 * var_x1157));
        IJth(rJacobian, 34, 34) = -var_x1054 - var_x1055;
        IJth(rJacobian, 35, 34) = var_x1054;
        IJth(rJacobian, 36, 34) = var_x1055;
        IJth(rJacobian, 34, 35) = var_x1056;
        IJth(rJacobian, 35, 35) = -var_x1056 - var_x1066 - var_x1067;
        IJth(rJacobian, 37, 35) = var_x1066;
        IJth(rJacobian, 39, 35) = var_x1067;
        IJth(rJacobian, 34, 36) = var_x1057;
        IJth(rJacobian, 36, 36) = -var_x1057 - var_x1074;
        IJth(rJacobian, 37, 36) = var_x1074;
        IJth(rJacobian, 35, 37) = var_x1068;
        IJth(rJacobian, 36, 37) = var_x1075;
        IJth(rJacobian, 37, 37) = -var_x1068 - var_x1075 - var_x1080;
        IJth(rJacobian, 38, 37) = var_x1080;
        IJth(rJacobian, 0, 38) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x428 * var_x441);
        IJth(rJacobian, 5, 38) = -var_x441 * var_x884;
        IJth(rJacobian, 37, 38) = var_x1081;
        IJth(rJacobian, 38, 38) = var_x1091 - var_x1081 - var_x1088;
        IJth(rJacobian, 39, 38) = var_x1088;
        IJth(rJacobian, 41, 38) = var_x1090;
        IJth(rJacobian, 35, 39) = var_x1069;
        IJth(rJacobian, 38, 39) = var_x1092;
        IJth(rJacobian, 39, 39) = var_x1091 - var_x1069 - var_x1092;
        IJth(rJacobian, 40, 39) = var_x1090;
        IJth(rJacobian, 39, 40) = var_x1095;
        IJth(rJacobian, 40, 40) = var_x1100 - var_x1095;
        IJth(rJacobian, 42, 40) = NV_Ith_S(mParameters, 2);
        IJth(rJacobian, 38, 41) = NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 41, 41) = var_x1100 - NV_Ith_S(mParameters, 3);
        IJth(rJacobian, 42, 41) = NV_Ith_S(mParameters, 2);
        IJth(rJacobian, 40, 42) = var_x1101;
        IJth(rJacobian, 41, 42) = var_x1101;
        IJth(rJacobian, 42, 42) = -2 * var_x1101;
        IJth(rJacobian, 0, 43) = mSetVoltageDerivativeToZero ? 0.0 : (var_x435 * var_x555);
        IJth(rJacobian, 5, 43) = var_x555 * var_x886;
        IJth(rJacobian, 43, 43) = -var_x1105;
        IJth(rJacobian, 0, 44) = mSetVoltageDerivativeToZero ? 0.0 : (var_x433 * var_x822);
        IJth(rJacobian, 5, 44) = var_x822 * var_x885;
        IJth(rJacobian, 44, 44) = -var_x1112 - var_x1113;
        IJth(rJacobian, 0, 45) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x440 * var_x441);
        IJth(rJacobian, 5, 45) = -var_x441 * var_x888;
        IJth(rJacobian, 45, 45) = -var_x1119 - var_x1120;
        IJth(rJacobian, 7, 46) = var_x910 * (0.23999999999999996 - var_x919) * NV_Ith_S(mParameters, 7);
        IJth(rJacobian, 9, 46) = var_x449 * var_x924;
        IJth(rJacobian, 46, 46) = ((var_x1129) ? (-1000.0) : (-0.21052631578947367 - var_x1131));
        IJth(rJacobian, 7, 47) = var_x909 * var_x919 * NV_Ith_S(mParameters, 7);
        IJth(rJacobian, 9, 47) = -var_x54 * var_x923;
        IJth(rJacobian, 47, 47) = ((var_x1153) ? (-1000.0) : (-0.16842105263157894 - var_x1154));
    }

    N_Vector Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -88.00190465
        double var_chaste_interface__intracellular_ions__cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 8.6e-05
        double var_chaste_interface__CaMK__CaMKt = NV_Ith_S(rY, 2);
        // Units: millimolar; Initial value: 0.0125840447
        double var_chaste_interface__intracellular_ions__nai = NV_Ith_S(rY, 3);
        // Units: millimolar; Initial value: 7.268004498
        double var_chaste_interface__intracellular_ions__nass = NV_Ith_S(rY, 4);
        // Units: millimolar; Initial value: 7.268089977
        double var_chaste_interface__intracellular_ions__ki = NV_Ith_S(rY, 5);
        // Units: millimolar; Initial value: 144.6555918
        double var_chaste_interface__intracellular_ions__kss = NV_Ith_S(rY, 6);
        // Units: millimolar; Initial value: 144.6555651
        double var_chaste_interface__intracellular_ions__cass = NV_Ith_S(rY, 7);
        // Units: millimolar; Initial value: 8.49e-05
        double var_chaste_interface__INa__m = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.007344121102
        double var_chaste_interface__INa__hf = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.6981071913
        double var_chaste_interface__INa__hs = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.6980895801
        double var_chaste_interface__INa__j = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.6979908432
        double var_chaste_interface__INa__hsp = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.4549485525
        double var_chaste_interface__INa__jp = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.6979245865
        double var_chaste_interface__INaL__mL = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.0001882617273
        double var_chaste_interface__INaL__hL = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.5008548855
        double var_chaste_interface__INaL__hLp = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.2693065357
        double var_chaste_interface__Ito__a = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.001001097687
        double var_chaste_interface__Ito__iF = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.9995541745
        double var_chaste_interface__Ito__iS = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.5865061736
        double var_chaste_interface__Ito__ap = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.0005100862934
        double var_chaste_interface__Ito__iFp = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 0.9995541823
        double var_chaste_interface__Ito__iSp = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 0.6393399482
        double var_chaste_interface__ICaL__d = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 2.34e-09
        double var_chaste_interface__ICaL__ff = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fs = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.9102412777
        double var_chaste_interface__ICaL__fcaf = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcas = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 0.9998046777
        double var_chaste_interface__ICaL__jca = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 0.9999738312
        double var_chaste_interface__ICaL__ffp = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcafp = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__nca = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.002749414044
        double var_chaste_interface__IKr__O = NV_Ith_S(rY, 38);
        // Units: dimensionless; Initial value: 0.00015551
        double var_chaste_interface__IKs__xs1 = NV_Ith_S(rY, 43);
        // Units: dimensionless; Initial value: 0.2707758025
        double var_chaste_interface__IKs__xs2 = NV_Ith_S(rY, 44);
        // Units: dimensionless; Initial value: 0.0001928503426
        double var_chaste_interface__IK1__xk1 = NV_Ith_S(rY, 45);
        // Units: dimensionless; Initial value: 0.9967597594
        double var_chaste_interface__ryr__Jrelnp = NV_Ith_S(rY, 46);
        // Units: dimensionless; Initial value: 2.5e-07
        double var_chaste_interface__ryr__Jrelp = NV_Ith_S(rY, 47);
        // Units: dimensionless; Initial value: 3.12e-07
        
        // Lookup table indexing
        const bool _oob_0 = Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_ICaL__Aff = 0.59999999999999998; // dimensionless
        const double var_ICaL__Afs = 1.0 - var_ICaL__Aff; // dimensionless
        const double var_ICaL__f = var_ICaL__Aff * var_chaste_interface__ICaL__ff + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__fp = var_ICaL__Aff * var_chaste_interface__ICaL__ffp + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_INa__Ahf = 0.98999999999999999; // dimensionless
        const double var_INa__Ahs = 1.0 - var_INa__Ahf; // dimensionless
        const double var_INa__h = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hs; // dimensionless
        const double var_INa__hp = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hsp; // dimensionless
        const double var_INaCa_i__KmCaAct = 0.00014999999999999999; // millimolar
        const double var_INaCa_i__kasymm = 12.5; // dimensionless
        const double var_INaCa_i__kcaoff = 5000.0; // per_millisecond
        const double var_INaCa_i__k2_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k2_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__kcaon = 1500000.0; // per_millisecond
        const double var_INaCa_i__kna1 = 15.0; // per_millisecond
        const double var_INaCa_i__kna2 = 5.0; // per_millisecond
        const double var_INaCa_i__kna3 = 88.120000000000005; // per_millisecond
        const double var_INaCa_i__qca = 0.16700000000000001; // dimensionless
        const double var_INaCa_i__qna = 0.52239999999999998; // dimensionless
        const double var_INaCa_i__wca = 60000.0; // dimensionless
        const double var_INaCa_i__wna = 60000.0; // dimensionless
        const double var_INaCa_i__wnaca = 5000.0; // dimensionless
        const double var_INaK__H = 9.9999999999999995e-8; // millimolar
        const double var_INaK__Khp = 1.698e-7; // millimolar
        const double var_INaK__Kki = 0.5; // per_millisecond
        const double var_INaK__Kko = 0.35820000000000002; // per_millisecond
        const double var_INaK__Kmgatp = 1.698e-7; // millimolar
        const double var_INaK__Knai0 = 9.0730000000000004; // millimolar
        const double var_INaK__Knao0 = 27.780000000000001; // millimolar
        const double var_INaK__Knap = 224.0; // millimolar
        const double var_INaK__Kxkur = 292.0; // millimolar
        const double var_INaK__MgADP = 0.050000000000000003; // millimolar
        const double var_INaK__MgATP = 9.8000000000000007; // millimolar
        const double var_INaK__delta = -0.155; // millivolt
        const double var_INaK__eP = 4.2000000000000002; // dimensionless
        const double var_INaK__k1m = 182.40000000000001; // per_millisecond
        const double var_INaK__b1 = var_INaK__MgADP * var_INaK__k1m; // dimensionless
        const double var_INaK__k1p = 949.5; // per_millisecond
        const double var_INaK__k2m = 39.399999999999999; // per_millisecond
        const double var_INaK__k2p = 687.20000000000005; // per_millisecond
        const double var_INaK__a2 = var_INaK__k2p; // dimensionless
        const double var_INaK__k3m = 79300.0; // per_millisecond
        const double var_INaK__k3p = 1899.0; // per_millisecond
        const double var_INaK__k4m = 40.0; // per_millisecond
        const double var_INaK__k4p = 639.0; // per_millisecond
        const double var_INaK__a4 = var_INaK__MgATP * var_INaK__k4p / ((1.0 + var_INaK__MgATP / var_INaK__Kmgatp) * var_INaK__Kmgatp); // dimensionless
        const double var_IpCa__KmCap = 0.00050000000000000001; // millimolar
        const double var_environment__celltype = 0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * NV_Ith_S(mParameters, 12)) : ((var_environment__celltype == 2.0) ? (2.5 * NV_Ith_S(mParameters, 12)) : (NV_Ith_S(mParameters, 12)))); // dimensionless
        const double var_ICaL__PCaK = 0.00035740000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaNa = 0.00125 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaKp = 0.00035740000000000001 * var_ICaL__PCap; // dimensionless
        const double var_ICaL__PCaNap = 0.00125 * var_ICaL__PCap; // dimensionless
        const double var_IK1__GK1 = ((var_environment__celltype == 1.0) ? (1.2 * NV_Ith_S(mParameters, 18)) : ((var_environment__celltype == 2.0) ? (1.3 * NV_Ith_S(mParameters, 18)) : (NV_Ith_S(mParameters, 18)))); // milliS_per_microF
        const double var_IKb__GKb = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * NV_Ith_S(mParameters, 14)) : (NV_Ith_S(mParameters, 14))); // milliS_per_microF
        const double var_IKr__GKr = ((var_environment__celltype == 1.0) ? (1.3 * NV_Ith_S(mParameters, 20)) : ((var_environment__celltype == 2.0) ? (0.80000000000000004 * NV_Ith_S(mParameters, 20)) : (NV_Ith_S(mParameters, 20)))); // milliS_per_microF
        const double var_IKs__GKs = ((var_environment__celltype == 1.0) ? (1.3999999999999999 * NV_Ith_S(mParameters, 21)) : (NV_Ith_S(mParameters, 21))); // milliS_per_microF
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * NV_Ith_S(mParameters, 22)) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * NV_Ith_S(mParameters, 22)) : (NV_Ith_S(mParameters, 22)))); // milliS_per_microF
        const double var_INaK__Pnak = ((var_environment__celltype == 1.0) ? (0.90000000000000002 * NV_Ith_S(mParameters, 23)) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * NV_Ith_S(mParameters, 23)) : (NV_Ith_S(mParameters, 23)))); // milliS_per_microF
        const double var_INaL__GNaL = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * NV_Ith_S(mParameters, 19)) : (NV_Ith_S(mParameters, 19))); // milliS_per_microF
        const double var_Ito__Gto = (((var_environment__celltype == 1.0) || (var_environment__celltype == 2.0)) ? (4.0 * NV_Ith_S(mParameters, 24)) : (NV_Ith_S(mParameters, 24))); // milliS_per_microF
        const double var_IK1__GK1_calc = sqrt(NV_Ith_S(mParameters, 10)) * var_IK1__GK1; // milliS_per_microF
        const double var_IKr__GKr_calc = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 10)) * var_IKr__GKr; // milliS_per_microF
        const double var_INaCa_i__h10_i = 1.0 + (1.0 + NV_Ith_S(mParameters, 11) / var_INaCa_i__kna2) * NV_Ith_S(mParameters, 11) / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h10_ss = 1.0 + (1.0 + NV_Ith_S(mParameters, 11) / var_INaCa_i__kna2) * NV_Ith_S(mParameters, 11) / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h11_i = pow(NV_Ith_S(mParameters, 11), 2) / (var_INaCa_i__h10_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h11_ss = pow(NV_Ith_S(mParameters, 11), 2) / (var_INaCa_i__h10_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h12_i = 1 / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__h12_ss = 1 / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__k1_i = var_INaCa_i__h12_i * var_INaCa_i__kcaon * NV_Ith_S(mParameters, 9); // dimensionless
        const double var_INaCa_i__k1_ss = var_INaCa_i__h12_ss * var_INaCa_i__kcaon * NV_Ith_S(mParameters, 9); // dimensionless
        const double var_IKs__KsCa = 1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__cai), 1.3999999999999999)); // dimensionless
        const double var_IKs__GKs_calc = var_IKs__GKs * var_IKs__KsCa; // milliS_per_microF
        const double var_INaCa_i__allo_i = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cai, 2)); // dimensionless
        const double var_IpCa__IpCa = NV_Ith_S(mParameters, 16) * var_chaste_interface__intracellular_ions__cai / (var_IpCa__KmCap + var_chaste_interface__intracellular_ions__cai); // microA_per_microF
        const double var_IpCa__IpCa_converted = HeartConfig::Instance()->GetCapacitance() * var_IpCa__IpCa; // uA_per_cm2
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INa__fINap = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__allo_ss = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cass, 2)); // dimensionless
        const double var_INaL__fINaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_Ito__fItop = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__h4_i = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_i = pow(var_chaste_interface__intracellular_ions__nai, 2) / (var_INaCa_i__h4_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_i = 1 / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k6_i = var_INaCa_i__h6_i * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cai; // dimensionless
        const double var_INaK__P = var_INaK__eP / (1.0 + var_INaK__H / var_INaK__Khp + var_chaste_interface__intracellular_ions__nai / var_INaK__Knap + var_chaste_interface__intracellular_ions__ki / var_INaK__Kxkur); // dimensionless
        const double var_INaK__b3 = var_INaK__H * var_INaK__P * var_INaK__k3m / (1.0 + var_INaK__MgATP / var_INaK__Kmgatp); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_ss = pow(var_chaste_interface__intracellular_ions__nass, 2) / (var_INaCa_i__h4_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_ss = 1 / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k6_ss = var_INaCa_i__h6_ss * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cass; // dimensionless
        const double var_membrane__Istim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_ICaL__Afcaf = _lt_0_row[0]; // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__PhiCaK = ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * NV_Ith_S(mParameters, 10) + 0.75 * var_chaste_interface__intracellular_ions__kss * _lt_0_row[1]) / (_lt_0_row[2]))); // dimensionless
        const double var_ICaL__PhiCaL = ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cass * _lt_0_row[3]) / (_lt_0_row[4]))); // dimensionless
        const double var_ICaL__PhiCaNa = ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * NV_Ith_S(mParameters, 11) + 0.75 * var_chaste_interface__intracellular_ions__nass * _lt_0_row[1]) / (_lt_0_row[2]))); // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__ICaK = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaK * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaKp * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaK_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaK; // uA_per_cm2
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCa * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCap * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaL_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaL; // uA_per_cm2
        const double var_ICaL__ICaNa = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNa * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNap * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaNa_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaNa; // uA_per_cm2
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cai * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 13) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 13) / (-1.0 + exp(-9.9999999999999995e-8))) + 2.671233870549826e-13 * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 13) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * NV_Ith_S(mParameters, 9) + var_chaste_interface__intracellular_ions__cai * _lt_0_row[3]) * NV_Ith_S(mParameters, 13) / (_lt_0_row[4]))); // microA_per_microF
        const double var_ICab__ICab_converted = HeartConfig::Instance()->GetCapacitance() * var_ICab__ICab; // uA_per_cm2
        const double var_IK1__rk1 = 1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * NV_Ith_S(mParameters, 10))); // millisecond
        const double var_IKb__xkb = 1 / (_lt_0_row[10]); // dimensionless
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-NV_Ith_S(mParameters, 11) + var_chaste_interface__intracellular_ions__nai * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 15) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-NV_Ith_S(mParameters, 11) + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 15) / (-1.0 + exp(-9.9999999999999995e-8))) + 2.671233870549826e-13 * (-NV_Ith_S(mParameters, 11) + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 15) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-NV_Ith_S(mParameters, 11) + var_chaste_interface__intracellular_ions__nai * _lt_0_row[1]) * NV_Ith_S(mParameters, 15) / (_lt_0_row[2]))); // microA_per_microF
        const double var_INab__INab_converted = HeartConfig::Instance()->GetCapacitance() * var_INab__INab; // uA_per_cm2
        const double var_Ito__AiF = _lt_0_row[5]; // dimensionless
        const double var_Ito__AiS = 1.0 - var_Ito__AiF; // dimensionless
        const double var_Ito__i = var_Ito__AiF * var_chaste_interface__Ito__iF + var_Ito__AiS * var_chaste_interface__Ito__iS; // dimensionless
        const double var_Ito__ip = var_Ito__AiF * var_chaste_interface__Ito__iFp + var_Ito__AiS * var_chaste_interface__Ito__iSp; // dimensionless
        const double var_physical_constants__F = 96485.0; // coulomb_per_mole
        const double var_physical_constants__R = 8314.0; // joule_per_kilomole_kelvin
        const double var_physical_constants__T = 310.0; // kelvin
        const double var_INaCa_i__hca = exp(var_INaCa_i__qca * var_chaste_interface__membrane__v * var_physical_constants__F / (var_physical_constants__R * var_physical_constants__T)); // dimensionless
        const double var_INaCa_i__hna = exp(var_INaCa_i__qna * var_chaste_interface__membrane__v * var_physical_constants__F / (var_physical_constants__R * var_physical_constants__T)); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h2_i = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / (var_INaCa_i__h1_i * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h2_ss = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / (var_INaCa_i__h1_ss * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h3_i = 1 / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h3_ss = 1 / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * NV_Ith_S(mParameters, 11) / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * NV_Ith_S(mParameters, 11) / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h8_i = NV_Ith_S(mParameters, 11) / (var_INaCa_i__h7_i * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h8_ss = NV_Ith_S(mParameters, 11) / (var_INaCa_i__h7_ss * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h9_i = 1 / var_INaCa_i__h7_i; // dimensionless
        const double var_INaCa_i__h9_ss = 1 / var_INaCa_i__h7_ss; // dimensionless
        const double var_INaCa_i__k3p_i = var_INaCa_i__h9_i * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3p_ss = var_INaCa_i__h9_ss * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3pp_i = var_INaCa_i__h8_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_i = var_INaCa_i__k3p_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = var_INaCa_i__h8_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_ss = var_INaCa_i__k3p_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4p_i = var_INaCa_i__h3_i * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4p_ss = var_INaCa_i__h3_ss * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4pp_i = var_INaCa_i__h2_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_i = var_INaCa_i__k4p_i + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = var_INaCa_i__h2_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_ss = var_INaCa_i__k4p_ss + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = var_INaCa_i__h2_i * var_INaCa_i__h5_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k7_ss = var_INaCa_i__h2_ss * var_INaCa_i__h5_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_i = var_INaCa_i__h11_i * var_INaCa_i__h8_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_ss = var_INaCa_i__h11_ss * var_INaCa_i__h8_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__x1_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k5_i * var_INaCa_i__k7_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k2_i * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k5_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i; // dimensionless
        const double var_INaCa_i__x2_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss; // dimensionless
        const double var_INaCa_i__x3_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i * var_INaCa_i__k5_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k2_i * var_INaCa_i__k8_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E3_i = var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E4_i = var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__JncxCa_i = var_INaCa_i__E2_i * var_INaCa_i__k2_i - var_INaCa_i__E1_i * var_INaCa_i__k1_i; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_i = var_INaCa_i__E3_i * var_INaCa_i__k4pp_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i + 3.0 * var_INaCa_i__E4_i * var_INaCa_i__k7_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i; // millimolar_per_millisecond
        const double var_INaCa_i__x4_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss * var_INaCa_i__k5_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k8_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E3_ss = var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E4_ss = var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__JncxCa_ss = var_INaCa_i__E2_ss * var_INaCa_i__k2_ss - var_INaCa_i__E1_ss * var_INaCa_i__k1_ss; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_ss = var_INaCa_i__E3_ss * var_INaCa_i__k4pp_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss + 3.0 * var_INaCa_i__E4_ss * var_INaCa_i__k7_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss; // millimolar_per_millisecond
        const double var_INaK__Knai = var_INaK__Knai0 * exp(0.33333333333333331 * var_INaK__delta * var_chaste_interface__membrane__v * var_physical_constants__F / (var_physical_constants__R * var_physical_constants__T)); // millimolar
        const double var_INaK__Knao = var_INaK__Knao0 * exp(0.33333333333333331 * (1.0 - var_INaK__delta) * var_chaste_interface__membrane__v * var_physical_constants__F / (var_physical_constants__R * var_physical_constants__T)); // millimolar
        const double var_INaK__a1 = pow(var_chaste_interface__intracellular_ions__nai, 3) * var_INaK__k1p / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = pow(NV_Ith_S(mParameters, 10), 2) * var_INaK__k3p / ((-1.0 + pow((1.0 + NV_Ith_S(mParameters, 10) / var_INaK__Kko), 2) + pow((1.0 + NV_Ith_S(mParameters, 11) / var_INaK__Knao), 3)) * pow(var_INaK__Kko, 2)); // dimensionless
        const double var_INaK__b2 = pow(NV_Ith_S(mParameters, 11), 3) * var_INaK__k2m / ((-1.0 + pow((1.0 + NV_Ith_S(mParameters, 10) / var_INaK__Kko), 2) + pow((1.0 + NV_Ith_S(mParameters, 11) / var_INaK__Knao), 3)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = pow(var_chaste_interface__intracellular_ions__ki, 2) * var_INaK__k4m / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Kki, 2)); // dimensionless
        const double var_INaK__x1 = var_INaK__a1 * var_INaK__a2 * var_INaK__a4 + var_INaK__a1 * var_INaK__a2 * var_INaK__b3 + var_INaK__a2 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = var_INaK__a1 * var_INaK__a2 * var_INaK__a3 + var_INaK__a2 * var_INaK__a3 * var_INaK__b4 + var_INaK__a3 * var_INaK__b1 * var_INaK__b4 + var_INaK__b1 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = var_INaK__a2 * var_INaK__a3 * var_INaK__a4 + var_INaK__a3 * var_INaK__a4 * var_INaK__b1 + var_INaK__a4 * var_INaK__b1 * var_INaK__b2 + var_INaK__b1 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = var_INaK__a1 * var_INaK__a3 * var_INaK__a4 + var_INaK__a1 * var_INaK__a4 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__E1 = var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E2 = var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E3 = var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E4 = var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__JnakK = 2.0 * var_INaK__E4 * var_INaK__b1 - 2.0 * var_INaK__E3 * var_INaK__a1; // millimolar_per_millisecond
        const double var_INaK__JnakNa = 3.0 * var_INaK__E1 * var_INaK__a3 - 3.0 * var_INaK__E2 * var_INaK__b3; // millimolar_per_millisecond
        const double var_physical_constants__zca = 2.0; // dimensionless
        const double var_physical_constants__zk = 1.0; // dimensionless
        const double var_physical_constants__zna = 1.0; // dimensionless
        const double var_INaCa_i__INaCa_i = 0.80000000000000004 * (var_INaCa_i__JncxCa_i * var_physical_constants__zca + var_INaCa_i__JncxNa_i * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_i; // microA_per_microF
        const double var_INaCa_i__INaCa_i_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__INaCa_i; // uA_per_cm2
        const double var_INaCa_i__INaCa_ss = 0.20000000000000001 * (var_INaCa_i__JncxCa_ss * var_physical_constants__zca + var_INaCa_i__JncxNa_ss * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_ss; // microA_per_microF
        const double var_INaCa_i__INaCa_ss_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__INaCa_ss; // uA_per_cm2
        const double var_INaK__INaK = (var_INaK__JnakK * var_physical_constants__zk + var_INaK__JnakNa * var_physical_constants__zna) * var_INaK__Pnak; // microA_per_microF
        const double var_INaK__INaK_converted = HeartConfig::Instance()->GetCapacitance() * var_INaK__INaK; // uA_per_cm2
        const double var_reversal_potentials__EK = var_physical_constants__R * var_physical_constants__T * log(NV_Ith_S(mParameters, 10) / var_chaste_interface__intracellular_ions__ki) / var_physical_constants__F; // millivolt
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IK1__GK1_calc * var_IK1__rk1 * var_chaste_interface__IK1__xk1; // microA_per_microF
        const double var_IK1__IK1_converted = HeartConfig::Instance()->GetCapacitance() * var_IK1__IK1; // uA_per_cm2
        const double var_IKb__IKb = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKb__GKb * var_IKb__xkb; // microA_per_microF
        const double var_IKb__IKb_converted = HeartConfig::Instance()->GetCapacitance() * var_IKb__IKb; // uA_per_cm2
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKr__GKr_calc * var_chaste_interface__IKr__O; // microA_per_microF
        const double var_IKr__IKr_converted = HeartConfig::Instance()->GetCapacitance() * var_IKr__IKr; // uA_per_cm2
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - var_Ito__fItop) * var_chaste_interface__Ito__a * var_Ito__i + var_chaste_interface__Ito__ap * var_Ito__fItop * var_Ito__ip) * var_Ito__Gto; // microA_per_microF
        const double var_Ito__Ito_converted = HeartConfig::Instance()->GetCapacitance() * var_Ito__Ito; // uA_per_cm2
        const double var_reversal_potentials__ENa = var_physical_constants__R * var_physical_constants__T * log(NV_Ith_S(mParameters, 11) / var_chaste_interface__intracellular_ions__nai) / var_physical_constants__F; // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INa__fINap) * var_INa__h * var_chaste_interface__INa__j + var_INa__fINap * var_INa__hp * var_chaste_interface__INa__jp) * NV_Ith_S(mParameters, 17); // microA_per_microF
        const double var_INa__INa_converted = HeartConfig::Instance()->GetCapacitance() * var_INa__INa; // uA_per_cm2
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INaL__fINaLp) * var_chaste_interface__INaL__hL + var_INaL__fINaLp * var_chaste_interface__INaL__hLp) * var_INaL__GNaL * var_chaste_interface__INaL__mL; // microA_per_microF
        const double var_INaL__INaL_converted = HeartConfig::Instance()->GetCapacitance() * var_INaL__INaL; // uA_per_cm2
        const double var_reversal_potentials__PKNa = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = var_physical_constants__R * var_physical_constants__T * log((NV_Ith_S(mParameters, 11) * var_reversal_potentials__PKNa + NV_Ith_S(mParameters, 10)) / (var_chaste_interface__intracellular_ions__nai * var_reversal_potentials__PKNa + var_chaste_interface__intracellular_ions__ki)) / var_physical_constants__F; // millivolt
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__v) * var_IKs__GKs_calc * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        const double var_IKs__IKs_converted = HeartConfig::Instance()->GetCapacitance() * var_IKs__IKs; // uA_per_cm2
        const double var_ryr__fJrelp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_ryr__Jrel = ((1.0 - var_ryr__fJrelp) * var_chaste_interface__ryr__Jrelnp + var_chaste_interface__ryr__Jrelp * var_ryr__fJrelp) * NV_Ith_S(mParameters, 7); // millimolar_per_millisecond

        N_Vector dqs = N_VNew_Serial(25);
        NV_Ith_S(dqs, 0) = var_ryr__Jrel;
        NV_Ith_S(dqs, 1) = var_ICaL__ICaK_converted;
        NV_Ith_S(dqs, 2) = var_ICaL__ICaNa_converted;
        NV_Ith_S(dqs, 3) = var_ICaL__ICaL_converted;
        NV_Ith_S(dqs, 4) = var_ICab__ICab_converted;
        NV_Ith_S(dqs, 5) = var_IKb__IKb_converted;
        NV_Ith_S(dqs, 6) = var_INab__INab_converted;
        NV_Ith_S(dqs, 7) = var_IpCa__IpCa_converted;
        NV_Ith_S(dqs, 8) = var_INa__INa_converted;
        NV_Ith_S(dqs, 9) = var_INa__h;
        NV_Ith_S(dqs, 10) = var_IK1__IK1_converted;
        NV_Ith_S(dqs, 11) = var_IK1__GK1_calc;
        NV_Ith_S(dqs, 12) = var_INaL__INaL_converted;
        NV_Ith_S(dqs, 13) = var_INaL__GNaL;
        NV_Ith_S(dqs, 14) = var_IKr__IKr_converted;
        NV_Ith_S(dqs, 15) = var_IKr__GKr_calc;
        NV_Ith_S(dqs, 16) = var_IKs__IKs_converted;
        NV_Ith_S(dqs, 17) = var_IKs__GKs_calc;
        NV_Ith_S(dqs, 18) = var_INaCa_i__INaCa_i_converted;
        NV_Ith_S(dqs, 19) = var_INaCa_i__INaCa_ss_converted;
        NV_Ith_S(dqs, 20) = var_INaK__INaK_converted;
        NV_Ith_S(dqs, 21) = var_membrane__Istim_converted;
        NV_Ith_S(dqs, 22) = var_Ito__Ito_converted;
        NV_Ith_S(dqs, 23) = var_Ito__Gto;
        NV_Ith_S(dqs, 24) = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt>::Initialise(void)
{
    this->mSystemName = "ohara_rudy_cipa_v1_2017";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-88.00190465);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.6e-05);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("CaMK__CaMKt");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0125840447);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.268004498);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("intracellular_ions__nass");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.268089977);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(144.6555918);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("intracellular_ions__kss");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(144.6555651);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("intracellular_ions__cass");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.49e-05);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("intracellular_ions__cansr");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.619574538);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("intracellular_ions__cajsr");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.571234014);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("INa__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.007344121102);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("INa__hf");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.6981071913);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("INa__hs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.6980895801);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.6979908432);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("INa__hsp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.4549485525);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("INa__jp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.6979245865);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("INaL__mL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001882617273);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("INaL__hL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.5008548855);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("INaL__hLp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.2693065357);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("Ito__a");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001001097687);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("Ito__iF");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9995541745);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("Ito__iS");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.5865061736);

    // NV_Ith_S(rY, 22):
    this->mVariableNames.push_back("Ito__ap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0005100862934);

    // NV_Ith_S(rY, 23):
    this->mVariableNames.push_back("Ito__iFp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9995541823);

    // NV_Ith_S(rY, 24):
    this->mVariableNames.push_back("Ito__iSp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.6393399482);

    // NV_Ith_S(rY, 25):
    this->mVariableNames.push_back("ICaL__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.34e-09);

    // NV_Ith_S(rY, 26):
    this->mVariableNames.push_back("ICaL__ff");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999999909);

    // NV_Ith_S(rY, 27):
    this->mVariableNames.push_back("ICaL__fs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9102412777);

    // NV_Ith_S(rY, 28):
    this->mVariableNames.push_back("ICaL__fcaf");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999999909);

    // NV_Ith_S(rY, 29):
    this->mVariableNames.push_back("ICaL__fcas");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9998046777);

    // NV_Ith_S(rY, 30):
    this->mVariableNames.push_back("ICaL__jca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999738312);

    // NV_Ith_S(rY, 31):
    this->mVariableNames.push_back("ICaL__ffp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999999909);

    // NV_Ith_S(rY, 32):
    this->mVariableNames.push_back("ICaL__fcafp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999999909);

    // NV_Ith_S(rY, 33):
    this->mVariableNames.push_back("ICaL__nca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.002749414044);

    // NV_Ith_S(rY, 34):
    this->mVariableNames.push_back("IKr__IC1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999637);

    // NV_Ith_S(rY, 35):
    this->mVariableNames.push_back("IKr__IC2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(6.83208e-05);

    // NV_Ith_S(rY, 36):
    this->mVariableNames.push_back("IKr__C1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.80145e-08);

    // NV_Ith_S(rY, 37):
    this->mVariableNames.push_back("IKr__C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.26619e-05);

    // NV_Ith_S(rY, 38):
    this->mVariableNames.push_back("IKr__O");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00015551);

    // NV_Ith_S(rY, 39):
    this->mVariableNames.push_back("IKr__IO");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.67623e-05);

    // NV_Ith_S(rY, 40):
    this->mVariableNames.push_back("IKr__IObound");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 41):
    this->mVariableNames.push_back("IKr__Obound");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 42):
    this->mVariableNames.push_back("IKr__Cbound");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 43):
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.2707758025);

    // NV_Ith_S(rY, 44):
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001928503426);

    // NV_Ith_S(rY, 45):
    this->mVariableNames.push_back("IK1__xk1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9967597594);

    // NV_Ith_S(rY, 46):
    this->mVariableNames.push_back("ryr__Jrelnp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.5e-07);

    // NV_Ith_S(rY, 47):
    this->mVariableNames.push_back("ryr__Jrelp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.12e-07);

    // mParameters[0]:
    this->mParameterNames.push_back("Dynamic_hERG_D");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[1]:
    this->mParameterNames.push_back("Dynamic_hERG_Kmax");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[2]:
    this->mParameterNames.push_back("Dynamic_hERG_Kt");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[3]:
    this->mParameterNames.push_back("Dynamic_hERG_Ku");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[4]:
    this->mParameterNames.push_back("Dynamic_hERG_Vhalf");
    this->mParameterUnits.push_back("millivolt");

    // mParameters[5]:
    this->mParameterNames.push_back("Dynamic_hERG_halfmax");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[6]:
    this->mParameterNames.push_back("Dynamic_hERG_n");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[7]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[8]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[9]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[10]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[11]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_background_calcium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_background_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_background_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_calcium_pump_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[18]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[19]:
    this->mParameterNames.push_back("membrane_persistent_sodium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[20]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[21]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[22]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[23]:
    this->mParameterNames.push_back("membrane_sodium_potassium_pump_current_permeability");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[24]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_channel_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_channel_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_background_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_background_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_background_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_calcium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_persistent_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_persistent_sodium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [17]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [18]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [19]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_dyadic_space_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [20]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [21]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [22]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [23]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [24]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellohara_rudy_cipa_v1_2017FromCellMLCvodeOpt)

#endif // CHASTE_CVODE
