#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: faber_rudy_2000
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvodeOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "faber_rudy_2000.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<29; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__cell__V)
    {
        const double _offset_0 = var_chaste_interface__cell__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__cell__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__cell__V>mTableMaxs[0] || var_chaste_interface__cell__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables(const Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables&);
    Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables& operator= (const Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables&);
    Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 29;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][29];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(0.037435883507802616 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[0] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] >= 2){
                    EXCEPTION("Lookup table 0 at ["<<i<<"][0] has non-finite value: " << val);
                }
                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return -1.0 + exp(0.037435883507802616 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[1] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] >= 2){
                    EXCEPTION("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val);
                }
                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(0.074871767015605231 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[2] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[2] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[2] >= 2){
                    EXCEPTION("Lookup table 2 at ["<<i<<"][2] has non-finite value: " << val);
                }
                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return -1.0 + exp(0.074871767015605231 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[3] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[3] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[3] >= 2){
                    EXCEPTION("Lookup table 3 at ["<<i<<"][3] has non-finite value: " << val);
                }
                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(-0.031820500981632228 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(-0.037435883507802616 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 0.1245 * exp(-0.003743588350780262 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1.0 + exp(0.4017857142857143 + 0.044642857142857144 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 0.80000000000000004 - 0.65000000000000002 / (1.0 + exp(8.3333333333333339 + 0.066666666666666666 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(0.01 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1 / (1.0 + exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return ((fabs(10.0 + var_chaste_interface__cell__V) < 6.2399999999074307e-7) ? (45787545.788225032 * (1.0 - exp(-9.999999999851651e-8)) / (1.0 + exp(-9.999999999851651e-8)) - 801282.05129393819 * (9.9999993759999999 + var_chaste_interface__cell__V) * (-45787545.788225032 * (1.0 - exp(9.999999999851651e-8)) / (1.0 + exp(9.999999999851651e-8)) - 45787545.788225032 * (1.0 - exp(-9.999999999851651e-8)) / (1.0 + exp(-9.999999999851651e-8)))) : (28.571428571428569 * (1.0 - exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__cell__V)) / ((1.0 + exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__cell__V)) * (10.0 + var_chaste_interface__cell__V))));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[12] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[12] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[12] >= 2){
                    EXCEPTION("Lookup table 12 at ["<<i<<"][12] has non-finite value: " << val);
                }
                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1 / (1.0 + exp(4.0767441860465121 + 0.11627906976744186 * var_chaste_interface__cell__V)) + 0.59999999999999998 / (1.0 + exp(2.5 - 0.050000000000000003 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1 / (0.02 + 0.019699999999999999 * exp(-0.113569 * pow((1 + 0.10000000000000001 * var_chaste_interface__cell__V), 2)));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1 / (1.0 + exp(-1.2962962962962963 - 0.092592592592592587 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 3.7000000000000002 + 6.0999999999999996 / (1.0 + exp(5.5555555555555554 + 0.22222222222222221 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1 / (1.0 + exp(10.714285714285715 + 0.17857142857142858 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return ((fabs(47.130000000000003 + var_chaste_interface__cell__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V))));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[18] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[18] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[18] >= 2){
                    EXCEPTION("Lookup table 18 at ["<<i<<"][18] has non-finite value: " << val);
                }
                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(-0.090909090909090912 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1 / (1.0 + exp(-2.8666666666666667 - 0.13333333333333333 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return ((fabs(38.899999999999999 + var_chaste_interface__cell__V) < 6.896551724422384e-7) ? (-4.2068965517283451e-10 / (-1.0 + exp(-1.000000000001e-7)) + 0.0013799999999999999 * (14.199999999999999 + var_chaste_interface__cell__V) / (1.0 - exp(-1.7465999999999999 - 0.123 * var_chaste_interface__cell__V)) + 724999.99997009686 * (38.900000689655172 + var_chaste_interface__cell__V) * (4.2068965517283451e-10 / (-1.0 + exp(-1.000000000001e-7)) + 4.2068965520669629e-10 / (-1.0 + exp(1.0000000000814911e-7)))) : ((fabs(14.199999999999999 + var_chaste_interface__cell__V) < 8.1300813007528783e-7) ? (1.1219512195134727e-9 / (1.0 - exp(-1.0000000000011388e-7)) + 0.00060999999999999997 * (38.899999999999999 + var_chaste_interface__cell__V) / (-1.0 + exp(5.6404999999999994 + 0.14499999999999999 * var_chaste_interface__cell__V)) - 615000.00000454858 * (14.199999186991869 + var_chaste_interface__cell__V) * (-1.1219512194943214e-9 / (1.0 - exp(9.9999999998406912e-8)) - 1.1219512195134727e-9 / (1.0 - exp(-1.0000000000011388e-7)))) : (0.00060999999999999997 * (38.899999999999999 + var_chaste_interface__cell__V) / (-1.0 + exp(5.6404999999999994 + 0.14499999999999999 * var_chaste_interface__cell__V)) + 0.0013799999999999999 * (14.199999999999999 + var_chaste_interface__cell__V) / (1.0 - exp(-1.7465999999999999 - 0.123 * var_chaste_interface__cell__V)))));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[21] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[21] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[21] >= 2){
                    EXCEPTION("Lookup table 21 at ["<<i<<"][21] has non-finite value: " << val);
                }
                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1 / (1.0 + exp(0.089820359281437126 - 0.059880239520958084 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return ((fabs(30.0 + var_chaste_interface__cell__V) < 1.455604075689676e-6) ? (-1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) - 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8)) + 343500.00000040967 * (30.000001455604075 + var_chaste_interface__cell__V) * (1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) + 1.0465793304208771e-10 / (1.0 - exp(-2.1542940320207204e-7)) + 1.9068413391534758e-10 / (-1.0 + exp(9.9999999999880736e-8)) + 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8)))) : (0.00013100000000000001 * (30.0 + var_chaste_interface__cell__V) / (-1.0 + exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__cell__V)) + 7.1899999999999999e-5 * (30.0 + var_chaste_interface__cell__V) / (1.0 - exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__cell__V))));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[23] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[23] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[23] >= 2){
                    EXCEPTION("Lookup table 23 at ["<<i<<"][23] has non-finite value: " << val);
                }
                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return ((fabs(30.0 + var_chaste_interface__cell__V) < 1.455604075689676e-6) ? (-2.6164483260521926e-11 / (1.0 - exp(2.1542940320207204e-7)) - 4.7671033478836895e-11 / (-1.0 + exp(-9.9999999999880736e-8)) + 85875.000000102416 * (30.000001455604075 + var_chaste_interface__cell__V) * (1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) + 1.0465793304208771e-10 / (1.0 - exp(-2.1542940320207204e-7)) + 1.9068413391534758e-10 / (-1.0 + exp(9.9999999999880736e-8)) + 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8)))) : (3.2750000000000003e-5 * (30.0 + var_chaste_interface__cell__V) / (-1.0 + exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__cell__V)) + 1.7975e-5 * (30.0 + var_chaste_interface__cell__V) / (1.0 - exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__cell__V))));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[24] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[24] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[24] >= 2){
                    EXCEPTION("Lookup table 24 at ["<<i<<"][24] has non-finite value: " << val);
                }
                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 0.014999999999999999 / (1.0 + exp(12.0 + 0.20000000000000001 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 0.10000000000000001 * exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][26] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 10.0 * exp(-1.6000000000000001 + 0.040000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(-1.6000000000000001 + 0.040000000000000001 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][27] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 10.0 * exp(-3.6000000000000001 - 0.040000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(-3.6000000000000001 - 0.040000000000000001 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][28] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[29];

    // Lookup tables
    double (*_lookup_table_0)[29];
    int _lookup_table_0_num_misshit_piecewise[29] = {0};

};

std::shared_ptr<Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables> Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables::mpInstance;


    boost::shared_ptr<RegularStimulus> Cellfaber_rudy_2000FromCellMLCvodeOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -25.5 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 2.0; // ms
        const double var_chaste_interface__cell__stim_period = 1000.0; // ms
        const double var_chaste_interface__cell__stim_start = 100.0; // ms
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellfaber_rudy_2000FromCellMLCvodeOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellfaber_rudy_2000FromCellMLCvodeOpt::Cellfaber_rudy_2000FromCellMLCvodeOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                25,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellfaber_rudy_2000FromCellMLCvodeOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 1.0; // (var_calcium_dynamics__leak_factor) [dimensionless]
        NV_Ith_S(this->mParameters, 1) = 60.0; // (var_calcium_dynamics__G_rel_max) [per_ms]
        NV_Ith_S(this->mParameters, 2) = 0.00080000000000000004; // (var_calcium_dynamics__K_mrel) [millimolar]
        NV_Ith_S(this->mParameters, 3) = 0.0087500000000000008; // (var_calcium_dynamics__I_up) [millimolar_per_ms]
        NV_Ith_S(this->mParameters, 4) = 1.0; // (var_ionic_concentrations__conc_clamp) [dimensionless]
        NV_Ith_S(this->mParameters, 5) = 1.8; // (var_calcium_dynamics__Cao) [millimolar]
        NV_Ith_S(this->mParameters, 6) = 5.4000000000000004; // (var_ionic_concentrations__Ko) [millimolar]
        NV_Ith_S(this->mParameters, 7) = 140.0; // (var_ionic_concentrations__Nao) [millimolar]
        NV_Ith_S(this->mParameters, 8) = 0.00054000000000000001; // (var_L_type_Ca_channel__P_Ca) [litre_per_farad_ms]
        NV_Ith_S(this->mParameters, 9) = 16.0; // (var_fast_sodium_current__g_Na) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 10) = 0; // (var_fast_sodium_current__perc_reduced_inact_for_IpNa) [dimensionless]
        NV_Ith_S(this->mParameters, 11) = 0; // (var_fast_sodium_current__shift_INa_inact) [millivolt]
        NV_Ith_S(this->mParameters, 12) = 0.75; // (var_time_independent_potassium_current__G_K1) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 13) = 0.02614; // (var_rapid_delayed_rectifier_potassium_current__G_Kr) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 14) = 0.433; // (var_slow_delayed_rectifier_potassium_current__G_Ks) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 15) = 0.00025000000000000001; // (var_Na_Ca_exchanger__c1) [microA_per_microF]
        NV_Ith_S(this->mParameters, 16) = 0.5; // (var_transient_outward_current__g_to) [milliS_per_microF]
    }

    Cellfaber_rudy_2000FromCellMLCvodeOpt::~Cellfaber_rudy_2000FromCellMLCvodeOpt()
    {
    }

    AbstractLookupTableCollection* Cellfaber_rudy_2000FromCellMLCvodeOpt::GetLookupTableCollection()
    {
        return Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables::Instance();
    }
    
    double Cellfaber_rudy_2000FromCellMLCvodeOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.2119207874627
        double var_chaste_interface__calcium_dynamics__Cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000117482029668194
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.00149183115674257
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.985596581239651
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.990898461370389
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 5.82597094505446e-06
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.997765362821995
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.00136737866785149
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.98881442877378
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.000204700363126417
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.00660746743356887
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.0303768241233812
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.0144622472219576
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.999945568566232
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 13.3649235394859
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 24);
        // Units: millimolar; Initial value: 141.056872392446
        
        // Lookup table indexing
        const bool _oob_0 = Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        const double var_L_type_Ca_channel_f_Ca_gate__f_Ca = 1 / (1.0 + 1666.6666666666667 * var_chaste_interface__calcium_dynamics__Cai); // dimensionless
        const double var_calcium_background_current__E_Ca = 13.356169352749133 * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__calcium_dynamics__Cai); // millivolt
        const double var_T_type_Ca_channel__i_Ca_T = 0.050000000000000003 * pow(var_chaste_interface__T_type_Ca_channel_b_gate__b, 2) * (-var_calcium_background_current__E_Ca + var_chaste_interface__cell__V) * var_chaste_interface__T_type_Ca_channel_g_gate__g; // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.003016 * var_chaste_interface__cell__V - 0.003016 * var_calcium_background_current__E_Ca; // microA_per_microF
        const double var_L_type_Ca_channel__i_Ca_L_converted = (((fabs(var_chaste_interface__cell__V) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__cell__V) * (6.5127375e-9 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 6.5127375e-9 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 6.5127375e-9 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.0024381008236689767 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[0]) * var_chaste_interface__cell__V / (_lt_0_row[1]))) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f + ((fabs(var_chaste_interface__cell__V) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__cell__V) * (1.8621604999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 1.8621604999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 1.8621604999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.00069711623550831479 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[0]) * var_chaste_interface__cell__V / (_lt_0_row[1]))) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f + ((fabs(var_chaste_interface__cell__V) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__cell__V) * (0.019296999999999998 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + var_chaste_interface__calcium_dynamics__Cai * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(9.9999999999999995e-8)) + 0.019296999999999998 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + var_chaste_interface__calcium_dynamics__Cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(-9.9999999999999995e-8))) - 0.019296999999999998 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + var_chaste_interface__calcium_dynamics__Cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(-9.9999999999999995e-8))) : (14448.004881001343 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + var_chaste_interface__calcium_dynamics__Cai * _lt_0_row[2]) * NV_Ith_S(mParameters, 8) * var_chaste_interface__cell__V / (_lt_0_row[3]))) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_Na_Ca_exchanger__i_NaCa_converted = (-pow(NV_Ith_S(mParameters, 7), 3) * var_chaste_interface__calcium_dynamics__Cai + pow(var_chaste_interface__ionic_concentrations__Nai, 3) * NV_Ith_S(mParameters, 5) * _lt_0_row[0]) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 15) * _lt_0_row[4] / (1.0 + 0.0001 * (pow(NV_Ith_S(mParameters, 7), 3) * var_chaste_interface__calcium_dynamics__Cai + pow(var_chaste_interface__ionic_concentrations__Nai, 3) * NV_Ith_S(mParameters, 5) * _lt_0_row[0]) * _lt_0_row[4]); // uA_per_cm2
        const double var_fast_sodium_current__E_Na = 26.712338705498265 * log(NV_Ith_S(mParameters, 7) / var_chaste_interface__ionic_concentrations__Nai); // millivolt
        const double var_fast_sodium_current__i_Na_converted = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 9) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // uA_per_cm2
        const double var_non_specific_calcium_activated_current__i_ns_Ca = ((fabs(var_chaste_interface__cell__V) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__cell__V) * (1.6884874999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 1.6884874999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 1.6884874999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.00063210021354380874 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[0]) * var_chaste_interface__cell__V / (_lt_0_row[1]))) / (1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__calcium_dynamics__Cai, 3)) + ((fabs(var_chaste_interface__cell__V) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__cell__V) * (1.6884874999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 1.6884874999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 1.6884874999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.00063210021354380874 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[0]) * var_chaste_interface__cell__V / (_lt_0_row[1]))) / (1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__calcium_dynamics__Cai, 3)); // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = 1.1499999999999999 * var_chaste_interface__calcium_dynamics__Cai / (0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai); // microA_per_microF
        const double var_slow_delayed_rectifier_potassium_current__i_Ks_converted = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__calcium_dynamics__Cai), 1.3999999999999999))) * (-26.712338705498265 * log((0.018329999999999999 * NV_Ith_S(mParameters, 7) + NV_Ith_S(mParameters, 6)) / (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai + var_chaste_interface__ionic_concentrations__Ki)) + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 14) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2; // uA_per_cm2
        const double var_sodium_background_current__i_Na_b = 0.0040000000000000001 * var_chaste_interface__cell__V - 0.0040000000000000001 * var_fast_sodium_current__E_Na; // microA_per_microF
        const double var_sodium_potassium_pump__i_NaK = 2.25 * NV_Ith_S(mParameters, 6) / ((1.0 + 100.0 / pow(var_chaste_interface__ionic_concentrations__Nai, 2)) * (1.5 + NV_Ith_S(mParameters, 6)) * (1.0 + _lt_0_row[6] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 7))) * _lt_0_row[5])); // microA_per_microF
        const double var_time_independent_potassium_current__E_K = 26.712338705498265 * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__ionic_concentrations__Ki); // millivolt
        const double var_ATP_sensitive_potassium_current__i_K_ATP = 1.921898339896919e-8 * pow(NV_Ith_S(mParameters, 6), 0.23999999999999999) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__cell__V); // microA_per_microF
        const double var_plateau_potassium_current__i_Kp = 0.0055199999999999997 * (-var_time_independent_potassium_current__E_K + var_chaste_interface__cell__V) / (_lt_0_row[7]); // microA_per_microF
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr_converted = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 13) * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr / (_lt_0_row[8]); // uA_per_cm2
        const double var_sodium_activated_potassium_current__i_K_Na = 0.109208 * (_lt_0_row[9]) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__cell__V) / (1.0 + 124372.1149330912 * pow((1 / var_chaste_interface__ionic_concentrations__Nai), 2.7999999999999998)); // microA_per_microF
        const double var_time_independent_potassium_current__i_K1_converted = 0.4389381125701739 * sqrt(NV_Ith_S(mParameters, 6)) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 12) / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K)) + (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_time_independent_potassium_current__E_K) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_time_independent_potassium_current__E_K)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_time_independent_potassium_current__E_K - 0.51429999999999998 * var_chaste_interface__cell__V)))); // uA_per_cm2
        const double var_transient_outward_current__i_to_converted = pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 3) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 16) * var_chaste_interface__transient_outward_current_ydv_gate__ydv * _lt_0_row[10]; // uA_per_cm2
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_ATP_sensitive_potassium_current__i_K_ATP + HeartConfig::Instance()->GetCapacitance() * var_T_type_Ca_channel__i_Ca_T + HeartConfig::Instance()->GetCapacitance() * var_calcium_background_current__i_Ca_b + HeartConfig::Instance()->GetCapacitance() * var_non_specific_calcium_activated_current__i_ns_Ca + HeartConfig::Instance()->GetCapacitance() * var_plateau_potassium_current__i_Kp + HeartConfig::Instance()->GetCapacitance() * var_sarcolemmal_calcium_pump__i_p_Ca + HeartConfig::Instance()->GetCapacitance() * var_sodium_activated_potassium_current__i_K_Na + HeartConfig::Instance()->GetCapacitance() * var_sodium_background_current__i_Na_b + HeartConfig::Instance()->GetCapacitance() * var_sodium_potassium_pump__i_NaK + var_L_type_Ca_channel__i_Ca_L_converted + var_Na_Ca_exchanger__i_NaCa_converted + var_fast_sodium_current__i_Na_converted + var_rapid_delayed_rectifier_potassium_current__i_Kr_converted + var_slow_delayed_rectifier_potassium_current__i_Ks_converted + var_time_independent_potassium_current__i_K1_converted + var_transient_outward_current__i_to_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellfaber_rudy_2000FromCellMLCvodeOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.2119207874627
        double var_chaste_interface__calcium_dynamics__Cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000117482029668194
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.00149183115674257
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.985596581239651
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.990898461370389
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 5.82597094505446e-06
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.997765362821995
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.00136737866785149
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.98881442877378
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.000204700363126417
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.00660746743356887
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.0303768241233812
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.0144622472219576
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.999945568566232
        double var_chaste_interface__calcium_dynamics__Ca_JSR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 1.12791401197882
        double var_chaste_interface__calcium_dynamics__Ca_NSR = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 1.76731003671612
        double var_chaste_interface__calcium_dynamics__APtrack = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 9.65910542308504e-196
        double var_chaste_interface__calcium_dynamics__APtrack2 = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 5.33944967562997e-195
        double var_chaste_interface__calcium_dynamics__APtrack3 = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.000129515197402902
        double var_chaste_interface__calcium_dynamics__Cainfluxtrack = NV_Ith_S(rY, 19);
        // Units: millimolar; Initial value: 2.69380318286645e-196
        double var_chaste_interface__calcium_dynamics__OVRLDtrack = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack2 = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack3 = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 13.3649235394859
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 24);
        // Units: millimolar; Initial value: 141.056872392446

        // Lookup table indexing
        const bool _oob_0 = Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        double d_dt_chaste_interface_var_cell__V;
        const double d_dt_chaste_interface_var_calcium_dynamics__APtrack2 = (((var_chaste_interface__calcium_dynamics__APtrack > 0.17999999999999999) && (var_chaste_interface__calcium_dynamics__APtrack < 0.20000000000000001)) ? (100.0 - 100.5 * var_chaste_interface__calcium_dynamics__APtrack2) : (-0.5 * var_chaste_interface__calcium_dynamics__APtrack2)); // 1 / ms
        const double d_dt_chaste_interface_var_calcium_dynamics__APtrack3 = (((var_chaste_interface__calcium_dynamics__APtrack > 0.17999999999999999) && (var_chaste_interface__calcium_dynamics__APtrack < 0.20000000000000001)) ? (100.0 - 100.5 * var_chaste_interface__calcium_dynamics__APtrack3) : (-0.01 * var_chaste_interface__calcium_dynamics__APtrack3)); // 1 / ms
        const double var_L_type_Ca_channel_f_Ca_gate__f_Ca = 1 / (1.0 + 1666.6666666666667 * var_chaste_interface__calcium_dynamics__Cai); // dimensionless
        const double d_dt_chaste_interface_var_calcium_dynamics__OVRLDtrack2 = (((var_chaste_interface__calcium_dynamics__OVRLDtrack > 0.97999999999999998) && (var_chaste_interface__calcium_dynamics__OVRLDtrack2 < 0.97999999999999998)) ? (50.0 - 50.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack2) : (-0.5 * var_chaste_interface__calcium_dynamics__OVRLDtrack2)); // 1 / ms
        const double d_dt_chaste_interface_var_calcium_dynamics__OVRLDtrack = (((var_chaste_interface__calcium_dynamics__APtrack3 < 0.37) && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.37) && (1 / (1.0 + 0.80000000000000004 / var_chaste_interface__calcium_dynamics__Ca_JSR) > 0.69999999999999996)) ? (50.0 - 50.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack) : (-0.5 * var_chaste_interface__calcium_dynamics__OVRLDtrack)); // 1 / ms
        const double d_dt_chaste_interface_var_calcium_dynamics__OVRLDtrack3 = (((var_chaste_interface__calcium_dynamics__OVRLDtrack > 0.97999999999999998) && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.97999999999999998)) ? (50.0 - 50.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack3) : (-0.01 * var_chaste_interface__calcium_dynamics__OVRLDtrack3)); // 1 / ms
        const double var_calcium_dynamics__RyRopen = 1 / (1.0 + var_chaste_interface__calcium_dynamics__APtrack2 * exp(2.0)); // dimensionless
        const double var_calcium_dynamics__i_up = var_chaste_interface__calcium_dynamics__Cai * NV_Ith_S(mParameters, 3) / (0.00092000000000000003 + var_chaste_interface__calcium_dynamics__Cai); // millimolar_per_ms
        const double var_calcium_dynamics__i_leak = 0.066666666666666666 * var_chaste_interface__calcium_dynamics__Ca_NSR * NV_Ith_S(mParameters, 3) * NV_Ith_S(mParameters, 0); // millimolar_per_ms
        const double var_calcium_dynamics__i_tr = 0.0055555555555555558 * var_chaste_interface__calcium_dynamics__Ca_NSR - 0.0055555555555555558 * var_chaste_interface__calcium_dynamics__Ca_JSR; // millimolar_per_ms
        const double var_calcium_background_current__E_Ca = 13.356169352749133 * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__calcium_dynamics__Cai); // millivolt
        const double var_L_type_Ca_channel__i_CaCa = ((fabs(var_chaste_interface__cell__V) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__cell__V) * (0.019296999999999998 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + var_chaste_interface__calcium_dynamics__Cai * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(9.9999999999999995e-8)) + 0.019296999999999998 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + var_chaste_interface__calcium_dynamics__Cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(-9.9999999999999995e-8))) - 0.019296999999999998 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + var_chaste_interface__calcium_dynamics__Cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(-9.9999999999999995e-8))) : (14448.004881001343 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + var_chaste_interface__calcium_dynamics__Cai * _lt_0_row[2]) * NV_Ith_S(mParameters, 8) * var_chaste_interface__cell__V / (_lt_0_row[3]))) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f; // microA_per_microF
        const double var_L_type_Ca_channel_d_gate__d_infinity = _lt_0_row[11]; // dimensionless
        const double var_L_type_Ca_channel_d_gate__tau_d = _lt_0_row[12]; // ms
        const double d_dt_chaste_interface_var_L_type_Ca_channel_d_gate__d = (1.0 - var_chaste_interface__L_type_Ca_channel_d_gate__d) * var_L_type_Ca_channel_d_gate__d_infinity / var_L_type_Ca_channel_d_gate__tau_d - (1.0 - var_L_type_Ca_channel_d_gate__d_infinity) * var_chaste_interface__L_type_Ca_channel_d_gate__d / var_L_type_Ca_channel_d_gate__tau_d; // 1 / ms
        const double var_L_type_Ca_channel_f_gate__f_infinity = _lt_0_row[13]; // dimensionless
        const double var_L_type_Ca_channel_f_gate__tau_f = _lt_0_row[14]; // ms
        const double d_dt_chaste_interface_var_L_type_Ca_channel_f_gate__f = (1.0 - var_chaste_interface__L_type_Ca_channel_f_gate__f) * var_L_type_Ca_channel_f_gate__f_infinity / var_L_type_Ca_channel_f_gate__tau_f - (1.0 - var_L_type_Ca_channel_f_gate__f_infinity) * var_chaste_interface__L_type_Ca_channel_f_gate__f / var_L_type_Ca_channel_f_gate__tau_f; // 1 / ms
        const double var_T_type_Ca_channel__i_Ca_T = 0.050000000000000003 * pow(var_chaste_interface__T_type_Ca_channel_b_gate__b, 2) * (-var_calcium_background_current__E_Ca + var_chaste_interface__cell__V) * var_chaste_interface__T_type_Ca_channel_g_gate__g; // microA_per_microF
        const double d_dt_chaste_interface_var_T_type_Ca_channel_b_gate__b = (-var_chaste_interface__T_type_Ca_channel_b_gate__b + _lt_0_row[15]) / (_lt_0_row[16]); // 1 / ms
        const double d_dt_chaste_interface_var_T_type_Ca_channel_g_gate__g = (-var_chaste_interface__T_type_Ca_channel_g_gate__g + _lt_0_row[17]) * ((var_chaste_interface__cell__V <= 0) ? (1 / (12.0 - 0.875 * var_chaste_interface__cell__V)) : (0.083333333333333329)); // 1 / ms
        const double var_calcium_background_current__i_Ca_b = 0.003016 * var_chaste_interface__cell__V - 0.003016 * var_calcium_background_current__E_Ca; // microA_per_microF
        const double var_cell__I_st = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double var_fast_sodium_current_h_gate__alpha_h = ((var_chaste_interface__cell__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 11) - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_ms
        const double var_fast_sodium_current_h_gate__beta_h = ((var_chaste_interface__cell__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V - 0.34999999999999998 * NV_Ith_S(mParameters, 11)) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * NV_Ith_S(mParameters, 11))) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 11) - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_ms
        const double d_dt_chaste_interface_var_fast_sodium_current_h_gate__h = (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h) * (-var_chaste_interface__fast_sodium_current_h_gate__h + 0.01 * NV_Ith_S(mParameters, 10) + (1.0 - 0.01 * NV_Ith_S(mParameters, 10)) * var_fast_sodium_current_h_gate__alpha_h / (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h)); // 1 / ms
        const double var_fast_sodium_current_j_gate__alpha_j = ((var_chaste_interface__cell__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * NV_Ith_S(mParameters, 11)) - 3.4740000000000003e-5 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 11) - 0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * NV_Ith_S(mParameters, 11)))) : (0)); // per_ms
        const double var_fast_sodium_current_j_gate__beta_j = ((var_chaste_interface__cell__V < -40.0) ? (0.1212 * exp(0.01052 * NV_Ith_S(mParameters, 11) - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 11) - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.29999999999999999 * exp(2.5349999999999999e-7 * NV_Ith_S(mParameters, 11) - 2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 11) - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double d_dt_chaste_interface_var_fast_sodium_current_j_gate__j = (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j) * (-var_chaste_interface__fast_sodium_current_j_gate__j + 0.01 * NV_Ith_S(mParameters, 10) + (1.0 - 0.01 * NV_Ith_S(mParameters, 10)) * var_fast_sodium_current_j_gate__alpha_j / (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j)); // 1 / ms
        const double d_dt_chaste_interface_var_fast_sodium_current_m_gate__m = (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m) * _lt_0_row[18] - 0.080000000000000002 * var_chaste_interface__fast_sodium_current_m_gate__m * _lt_0_row[19]; // 1 / ms
        const double var_geometry__volume = 1.2099999999999999e-5 * M_PI; // micro_litre
        const double var_geometry__V_JSR = 0.0047999999999999996 * var_geometry__volume; // micro_litre
        const double var_geometry__V_NSR = 0.055199999999999999 * var_geometry__volume; // micro_litre
        const double d_dt_chaste_interface_var_calcium_dynamics__Ca_NSR = -var_calcium_dynamics__i_leak - var_calcium_dynamics__i_tr * var_geometry__V_JSR / var_geometry__V_NSR + var_calcium_dynamics__i_up; // millimolar / ms
        const double var_geometry__V_myo = 0.68000000000000005 * var_geometry__volume; // micro_litre
        const double var_L_type_Ca_channel__i_CaK = ((fabs(var_chaste_interface__cell__V) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__cell__V) * (1.8621604999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 1.8621604999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 1.8621604999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.00069711623550831479 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[0]) * var_chaste_interface__cell__V / (_lt_0_row[1]))) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f; // microA_per_microF
        const double var_L_type_Ca_channel__i_CaNa = ((fabs(var_chaste_interface__cell__V) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__cell__V) * (6.5127375e-9 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 6.5127375e-9 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 6.5127375e-9 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.0024381008236689767 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[0]) * var_chaste_interface__cell__V / (_lt_0_row[1]))) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f; // microA_per_microF
        const double var_L_type_Ca_channel__i_Ca_L = var_L_type_Ca_channel__i_CaCa + var_L_type_Ca_channel__i_CaK + var_L_type_Ca_channel__i_CaNa; // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = (-pow(NV_Ith_S(mParameters, 7), 3) * var_chaste_interface__calcium_dynamics__Cai + pow(var_chaste_interface__ionic_concentrations__Nai, 3) * NV_Ith_S(mParameters, 5) * _lt_0_row[0]) * NV_Ith_S(mParameters, 15) * _lt_0_row[4] / (1.0 + 0.0001 * (pow(NV_Ith_S(mParameters, 7), 3) * var_chaste_interface__calcium_dynamics__Cai + pow(var_chaste_interface__ionic_concentrations__Nai, 3) * NV_Ith_S(mParameters, 5) * _lt_0_row[0]) * _lt_0_row[4]); // microA_per_microF
        const double var_fast_sodium_current__E_Na = 26.712338705498265 * log(NV_Ith_S(mParameters, 7) / var_chaste_interface__ionic_concentrations__Nai); // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 9) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_K = ((fabs(var_chaste_interface__cell__V) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__cell__V) * (1.6884874999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 1.6884874999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 1.6884874999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.00063210021354380874 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[0]) * var_chaste_interface__cell__V / (_lt_0_row[1]))) / (1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__calcium_dynamics__Cai, 3)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Na = ((fabs(var_chaste_interface__cell__V) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__cell__V) * (1.6884874999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 1.6884874999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 1.6884874999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.00063210021354380874 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[0]) * var_chaste_interface__cell__V / (_lt_0_row[1]))) / (1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__calcium_dynamics__Cai, 3)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Ca = var_non_specific_calcium_activated_current__i_ns_K + var_non_specific_calcium_activated_current__i_ns_Na; // microA_per_microF
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current_xr_gate__xr = (-var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr + _lt_0_row[20]) * _lt_0_row[21]; // 1 / ms
        const double var_sarcolemmal_calcium_pump__i_p_Ca = 1.1499999999999999 * var_chaste_interface__calcium_dynamics__Cai / (0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai); // microA_per_microF
        const double d_dt_chaste_interface_var_calcium_dynamics__Cainfluxtrack = ((var_chaste_interface__calcium_dynamics__APtrack > 0.20000000000000001) ? (-7.9494221899777164e-10 * (-2.0 * var_Na_Ca_exchanger__i_NaCa + var_L_type_Ca_channel__i_CaCa + var_T_type_Ca_channel__i_Ca_T + var_calcium_background_current__i_Ca_b + var_sarcolemmal_calcium_pump__i_p_Ca) / var_geometry__V_myo) : ((var_chaste_interface__calcium_dynamics__APtrack2 > 0.01) ? (0) : (-0.5 * var_chaste_interface__calcium_dynamics__Cainfluxtrack))); // millimolar / ms
        const double var_calcium_dynamics__i_rel = 150.0 * (1.0 - var_calcium_dynamics__RyRopen) * (-var_chaste_interface__calcium_dynamics__Cai + var_chaste_interface__calcium_dynamics__Ca_JSR) * var_calcium_dynamics__RyRopen / (1.0 + exp(5.5555555555555554 + 1.1111111111111112 * var_L_type_Ca_channel__i_CaCa + 1.1111111111111112 * var_T_type_Ca_channel__i_Ca_T + 1.1111111111111112 * var_calcium_background_current__i_Ca_b + 1.1111111111111112 * var_sarcolemmal_calcium_pump__i_p_Ca - 2.2222222222222223 * var_Na_Ca_exchanger__i_NaCa)); // millimolar_per_ms
        const double d_dt_chaste_interface_var_calcium_dynamics__Ca_JSR = (-var_calcium_dynamics__i_rel + var_calcium_dynamics__i_tr) / (1.0 + 8.0 / pow((0.80000000000000004 + var_chaste_interface__calcium_dynamics__Ca_JSR), 2)); // millimolar / ms
        const double d_dt_chaste_interface_var_calcium_dynamics__Cai = (-7.9494221899777164e-10 * (-2.0 * var_Na_Ca_exchanger__i_NaCa + var_L_type_Ca_channel__i_CaCa + var_T_type_Ca_channel__i_Ca_T + var_calcium_background_current__i_Ca_b + var_sarcolemmal_calcium_pump__i_p_Ca) / var_geometry__V_myo + (-var_calcium_dynamics__i_up + var_calcium_dynamics__i_leak) * var_geometry__V_NSR / var_geometry__V_myo + var_calcium_dynamics__i_rel * var_geometry__V_JSR / var_geometry__V_myo) / (1.0 + 0.00011900000000000002 / pow((0.0023800000000000002 + var_chaste_interface__calcium_dynamics__Cai), 2) + 3.5000000000000004e-5 / pow((0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai), 2)); // millimolar / ms
        const double d_dt_chaste_interface_var_slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = (-var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 + _lt_0_row[22]) * _lt_0_row[23]; // 1 / ms
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__calcium_dynamics__Cai), 1.3999999999999999))) * (-26.712338705498265 * log((0.018329999999999999 * NV_Ith_S(mParameters, 7) + NV_Ith_S(mParameters, 6)) / (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai + var_chaste_interface__ionic_concentrations__Ki)) + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 14) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2; // microA_per_microF
        const double d_dt_chaste_interface_var_slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = (-var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 + _lt_0_row[22]) * _lt_0_row[24]; // 1 / ms
        const double var_sodium_background_current__i_Na_b = 0.0040000000000000001 * var_chaste_interface__cell__V - 0.0040000000000000001 * var_fast_sodium_current__E_Na; // microA_per_microF
        const double var_sodium_potassium_pump__i_NaK = 2.25 * NV_Ith_S(mParameters, 6) / ((1.0 + 100.0 / pow(var_chaste_interface__ionic_concentrations__Nai, 2)) * (1.5 + NV_Ith_S(mParameters, 6)) * (1.0 + _lt_0_row[6] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 7))) * _lt_0_row[5])); // microA_per_microF
        const double d_dt_chaste_interface_var_ionic_concentrations__Nai = -1.5898844379955433e-9 * (3.0 * var_Na_Ca_exchanger__i_NaCa + 3.0 * var_sodium_potassium_pump__i_NaK + var_L_type_Ca_channel__i_CaNa + var_fast_sodium_current__i_Na + var_non_specific_calcium_activated_current__i_ns_Na + var_sodium_background_current__i_Na_b) * NV_Ith_S(mParameters, 4) / var_geometry__V_myo; // millimolar / ms
        const double var_time_independent_potassium_current__E_K = 26.712338705498265 * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__ionic_concentrations__Ki); // millivolt
        const double var_ATP_sensitive_potassium_current__i_K_ATP = 1.921898339896919e-8 * pow(NV_Ith_S(mParameters, 6), 0.23999999999999999) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__cell__V); // microA_per_microF
        const double var_plateau_potassium_current__i_Kp = 0.0055199999999999997 * (-var_time_independent_potassium_current__E_K + var_chaste_interface__cell__V) / (_lt_0_row[7]); // microA_per_microF
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 13) * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr / (_lt_0_row[8]); // microA_per_microF
        const double var_sodium_activated_potassium_current__i_K_Na = 0.109208 * (_lt_0_row[9]) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__cell__V) / (1.0 + 124372.1149330912 * pow((1 / var_chaste_interface__ionic_concentrations__Nai), 2.7999999999999998)); // microA_per_microF
        const double var_time_independent_potassium_current__i_K1 = 0.4389381125701739 * sqrt(NV_Ith_S(mParameters, 6)) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 12) / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K)) + (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_time_independent_potassium_current__E_K) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_time_independent_potassium_current__E_K)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_time_independent_potassium_current__E_K - 0.51429999999999998 * var_chaste_interface__cell__V)))); // microA_per_microF
        const double var_transient_outward_current_ydv_gate__alpha_ydv = _lt_0_row[25]; // per_ms
        const double var_transient_outward_current_ydv_gate__beta_ydv = _lt_0_row[26]; // per_ms
        const double d_dt_chaste_interface_var_transient_outward_current_ydv_gate__ydv = (-var_chaste_interface__transient_outward_current_ydv_gate__ydv + var_transient_outward_current_ydv_gate__alpha_ydv / (var_transient_outward_current_ydv_gate__alpha_ydv + var_transient_outward_current_ydv_gate__beta_ydv)) * (var_transient_outward_current_ydv_gate__alpha_ydv + var_transient_outward_current_ydv_gate__beta_ydv); // 1 / ms
        const double var_transient_outward_current_zdv_gate__alpha_zdv = _lt_0_row[27]; // per_ms
        const double var_transient_outward_current_zdv_gate__beta_zdv = _lt_0_row[28]; // per_ms
        const double var_transient_outward_current__i_to = pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 3) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 16) * var_chaste_interface__transient_outward_current_ydv_gate__ydv * _lt_0_row[10]; // microA_per_microF
        const double d_dt_chaste_interface_var_ionic_concentrations__Ki = -1.5898844379955433e-9 * (-2.0 * var_sodium_potassium_pump__i_NaK + var_ATP_sensitive_potassium_current__i_K_ATP + var_L_type_Ca_channel__i_CaK + var_cell__I_st + var_non_specific_calcium_activated_current__i_ns_K + var_plateau_potassium_current__i_Kp + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_slow_delayed_rectifier_potassium_current__i_Ks + var_sodium_activated_potassium_current__i_K_Na + var_time_independent_potassium_current__i_K1 + var_transient_outward_current__i_to) * NV_Ith_S(mParameters, 4) / var_geometry__V_myo; // millimolar / ms
        const double d_dt_chaste_interface_var_calcium_dynamics__APtrack = ((var_ATP_sensitive_potassium_current__i_K_ATP + var_L_type_Ca_channel__i_Ca_L + var_Na_Ca_exchanger__i_NaCa + var_T_type_Ca_channel__i_Ca_T + var_calcium_background_current__i_Ca_b + var_cell__I_st + var_fast_sodium_current__i_Na + var_non_specific_calcium_activated_current__i_ns_Ca + var_plateau_potassium_current__i_Kp + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_sarcolemmal_calcium_pump__i_p_Ca + var_slow_delayed_rectifier_potassium_current__i_Ks + var_sodium_activated_potassium_current__i_K_Na + var_sodium_background_current__i_Na_b + var_sodium_potassium_pump__i_NaK + var_time_independent_potassium_current__i_K1 + var_transient_outward_current__i_to < -150.0) ? (100.0 - 100.5 * var_chaste_interface__calcium_dynamics__APtrack) : (-0.5 * var_chaste_interface__calcium_dynamics__APtrack)); // 1 / ms
        const double d_dt_chaste_interface_var_transient_outward_current_zdv_gate__zdv = (-var_chaste_interface__transient_outward_current_zdv_gate__zdv + var_transient_outward_current_zdv_gate__alpha_zdv / (var_transient_outward_current_zdv_gate__alpha_zdv + var_transient_outward_current_zdv_gate__beta_zdv)) * (var_transient_outward_current_zdv_gate__alpha_zdv + var_transient_outward_current_zdv_gate__beta_zdv); // 1 / ms

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_cell__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_cell__V = -var_ATP_sensitive_potassium_current__i_K_ATP - var_L_type_Ca_channel__i_Ca_L - var_Na_Ca_exchanger__i_NaCa - var_T_type_Ca_channel__i_Ca_T - var_calcium_background_current__i_Ca_b - var_cell__I_st - var_fast_sodium_current__i_Na - var_non_specific_calcium_activated_current__i_ns_Ca - var_plateau_potassium_current__i_Kp - var_rapid_delayed_rectifier_potassium_current__i_Kr - var_sarcolemmal_calcium_pump__i_p_Ca - var_slow_delayed_rectifier_potassium_current__i_Ks - var_sodium_activated_potassium_current__i_K_Na - var_sodium_background_current__i_Na_b - var_sodium_potassium_pump__i_NaK - var_time_independent_potassium_current__i_K1 - var_transient_outward_current__i_to; // millivolt / ms
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_cell__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_calcium_dynamics__Cai;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_fast_sodium_current_m_gate__m;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_fast_sodium_current_h_gate__h;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_fast_sodium_current_j_gate__j;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_L_type_Ca_channel_d_gate__d;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_L_type_Ca_channel_f_gate__f;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_T_type_Ca_channel_b_gate__b;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_T_type_Ca_channel_g_gate__g;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current_xr_gate__xr;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_slow_delayed_rectifier_potassium_current_xs1_gate__xs1;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_slow_delayed_rectifier_potassium_current_xs2_gate__xs2;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_transient_outward_current_zdv_gate__zdv;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_transient_outward_current_ydv_gate__ydv;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_calcium_dynamics__Ca_JSR;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_calcium_dynamics__Ca_NSR;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_calcium_dynamics__APtrack;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_calcium_dynamics__APtrack2;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_calcium_dynamics__APtrack3;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_calcium_dynamics__Cainfluxtrack;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_calcium_dynamics__OVRLDtrack;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_calcium_dynamics__OVRLDtrack2;
        NV_Ith_S(rDY,22) = d_dt_chaste_interface_var_calcium_dynamics__OVRLDtrack3;
        NV_Ith_S(rDY,23) = d_dt_chaste_interface_var_ionic_concentrations__Nai;
        NV_Ith_S(rDY,24) = d_dt_chaste_interface_var_ionic_concentrations__Ki;
    }

    void Cellfaber_rudy_2000FromCellMLCvodeOpt::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.2119207874627
        double var_chaste_interface__calcium_dynamics__Cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000117482029668194
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.00149183115674257
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.985596581239651
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.990898461370389
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 5.82597094505446e-06
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.997765362821995
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.00136737866785149
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.98881442877378
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.000204700363126417
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.00660746743356887
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.0303768241233812
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.0144622472219576
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.999945568566232
        double var_chaste_interface__calcium_dynamics__Ca_JSR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 1.12791401197882
        double var_chaste_interface__calcium_dynamics__Ca_NSR = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 1.76731003671612
        double var_chaste_interface__calcium_dynamics__APtrack = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 9.65910542308504e-196
        double var_chaste_interface__calcium_dynamics__APtrack2 = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 5.33944967562997e-195
        double var_chaste_interface__calcium_dynamics__APtrack3 = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.000129515197402902
        double var_chaste_interface__calcium_dynamics__OVRLDtrack = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack2 = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack3 = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 13.3649235394859
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 24);
        // Units: millimolar; Initial value: 141.056872392446
        
        // Lookup table indexing
        const bool _oob_0 = Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);
const double var_x0 = -0.75 * NV_Ith_S(mParameters, 6);
        const double var_x1 = exp(9.9999999999999995e-8);
        const double var_x2 = 0.75 * var_chaste_interface__ionic_concentrations__Ki;
        const double var_x3 = var_x0 + var_x1 * var_x2;
        const double var_x4 = 1 / (-1.0 + var_x1);
        const double var_x5 = 0.00031605010677190437 * var_x4;
        const double var_x6 = exp(-9.9999999999999995e-8);
        const double var_x7 = var_x0 + var_x2 * var_x6;
        const double var_x8 = 1 / (-1.0 + var_x6);
        const double var_x9 = 0.00031605010677190437 * var_x8;
        const double var_x10 = 1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__calcium_dynamics__Cai, 3);
        const double var_x11 = 1 / var_x10;
        const double var_x12 = var_x11;
        const double var_x13 = fabs(var_chaste_interface__cell__V);
        const double var_x14 = var_x13 < 2.6712338705498262e-6;
        const double var_x15 = 0.037435883507802616 * var_chaste_interface__cell__V;
        const double var_x16 = exp(var_x15);
        const double var_x17 = var_x0 + var_x16 * var_x2;
        const double var_x18 = -1.0 + var_x16;
        const double var_x19 = 1 / var_x18;
        const double var_x20 = var_x11 * var_x19;
        const double var_x21 = 0.00063210021354380874 * var_x20;
        const double var_x22 = var_x17 * var_x21;
        const double var_x23 = var_x16 * var_chaste_interface__cell__V;
        const double var_x24 = var_x20 * var_x23;
        const double var_x25 = 1.7747422469612385e-5 * var_x24;
        const double var_x26 = var_x23 / pow(var_x18, 2);
        const double var_x27 = var_x17 * var_x26;
        const double var_x28 = 2.3663229959483181e-5 * var_x11;
        const double var_x29 = ((var_x14) ? (var_x12 * (var_x3 * var_x5 + var_x7 * var_x9)) : (var_x22 + var_x25 * var_chaste_interface__ionic_concentrations__Ki - var_x27 * var_x28));
        const double var_x30 = -0.75 * NV_Ith_S(mParameters, 7);
        const double var_x31 = 0.75 * var_chaste_interface__ionic_concentrations__Nai;
        const double var_x32 = var_x30 + var_x1 * var_x31;
        const double var_x33 = var_x30 + var_x31 * var_x6;
        const double var_x34 = var_x30 + var_x16 * var_x31;
        const double var_x35 = var_x21 * var_x34;
        const double var_x36 = var_x26 * var_x34;
        const double var_x37 = ((var_x14) ? (var_x12 * (var_x32 * var_x5 + var_x33 * var_x9)) : (var_x35 + var_x25 * var_chaste_interface__ionic_concentrations__Nai - var_x28 * var_x36));
        const double var_x38 = var_x3 * var_x4;
        const double var_x39 = var_x7 * var_x8;
        const double var_x40 = 1 / (1.0 + 1666.6666666666667 * var_chaste_interface__calcium_dynamics__Cai);
        const double var_x41 = var_x40;
        const double var_x42 = var_x41 * var_chaste_interface__L_type_Ca_channel_f_gate__f;
        const double var_x43 = var_x42 * var_chaste_interface__L_type_Ca_channel_d_gate__d;
        const double var_x44 = var_x40 * var_chaste_interface__L_type_Ca_channel_f_gate__f;
        const double var_x45 = var_x44 * var_chaste_interface__L_type_Ca_channel_d_gate__d;
        const double var_x46 = var_x17 * var_x19;
        const double var_x47 = 0.00069711623550831479 * var_x46;
        const double var_x48 = var_x45 * var_x47;
        const double var_x49 = var_x19 * var_x23 * var_x45;
        const double var_x50 = ((var_x14) ? (var_x43 * (0.0003485581177541574 * var_x38 + 0.0003485581177541574 * var_x39)) : (var_x48 + 1.9572871637915374e-5 * var_x49 * var_chaste_interface__ionic_concentrations__Ki - 2.6097162183887167e-5 * var_x27 * var_x45));
        const double var_x51 = var_x32 * var_x4;
        const double var_x52 = var_x33 * var_x8;
        const double var_x53 = var_x19 * var_x34;
        const double var_x54 = 0.0024381008236689767 * var_x53;
        const double var_x55 = var_x45 * var_x54;
        const double var_x56 = ((var_x14) ? (var_x43 * (0.0012190504118344883 * var_x51 + 0.0012190504118344883 * var_x52)) : (var_x55 + 6.8454343811362063e-5 * var_x49 * var_chaste_interface__ionic_concentrations__Nai - 9.1272458415149417e-5 * var_x36 * var_x45));
        const double var_x57 = 7224.0024405006716 * NV_Ith_S(mParameters, 8);
        const double var_x58 = -0.34100000000000003 * NV_Ith_S(mParameters, 5);
        const double var_x59 = var_chaste_interface__calcium_dynamics__Cai;
        const double var_x60 = var_x4 * (var_x58 + var_x1 * var_x59);
        const double var_x61 = var_x8 * (var_x58 + var_x59 * var_x6);
        const double var_x62 = var_x43 * (var_x57 * var_x60 + var_x57 * var_x61);
        const double var_x63 = var_x13 < 1.3356169352749131e-6;
        const double var_x64 = _lt_0_row[2];
        const double var_x65 = -1.0 + var_x64;
        const double var_x66 = 1 / var_x65;
        const double var_x67 = var_x58 + var_x59 * var_x64;
        const double var_x68 = var_x66 * var_x67 * NV_Ith_S(mParameters, 8);
        const double var_x69 = 14448.004881001343 * var_x68;
        const double var_x70 = var_x45 * var_x69;
        const double var_x71 = var_x45 * var_x64 * NV_Ith_S(mParameters, 8) * var_chaste_interface__cell__V;
        const double var_x72 = var_x66 * var_x71;
        const double var_x73 = var_x70 + 1081.7476552906598 * var_x72 * var_chaste_interface__calcium_dynamics__Cai - 1081.7476552906598 * var_x67 * var_x71 / pow(var_x65, 2);
        const double var_x74 = ((var_x63) ? (var_x62) : (var_x73));
        const double var_x75 = exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V);
        const double var_x76 = 1.0 + var_x75;
        const double var_x77 = 1 / var_x76;
        const double var_x78 = 0.0055199999999999997 * var_x77;
        const double var_x79 = pow(NV_Ith_S(mParameters, 6), 0.23999999999999999);
        const double var_x80 = 1.921898339896919e-8 * var_x79;
        const double var_x81 = pow(var_chaste_interface__T_type_Ca_channel_b_gate__b, 2);
        const double var_x82 = 0.050000000000000003 * var_x81;
        const double var_x83 = var_x82 * var_chaste_interface__T_type_Ca_channel_g_gate__g;
        const double var_x84 = 1 / var_chaste_interface__ionic_concentrations__Nai;
        const double var_x85 = pow(var_x84, 2.7999999999999998);
        const double var_x86 = 1 / (1.0 + 124372.1149330912 * var_x85);
        const double var_x87 = exp(8.3333333333333339 + 0.066666666666666666 * var_chaste_interface__cell__V);
        const double var_x88 = 1.0 + var_x87;
        const double var_x89 = 0.80000000000000004 - 0.65000000000000002 / var_x88;
        const double var_x90 = var_x86 * var_x89;
        const double var_x91 = 0.109208 * var_x90;
        const double var_x92 = 1 / var_chaste_interface__ionic_concentrations__Ki;
        const double var_x93 = log(var_x92 * NV_Ith_S(mParameters, 6));
        const double var_x94 = -26.712338705498265 * var_x93 + var_chaste_interface__cell__V;
        const double var_x95 = 0.00092307692307692295 * var_x75 * var_x94 / pow(var_x76, 2);
        const double var_x96 = 1 / var_chaste_interface__calcium_dynamics__Cai;
        const double var_x97 = pow(var_x96, 1.3999999999999999);
        const double var_x98 = 1.0 + 6.4818210260626455e-7 * var_x97;
        const double var_x99 = 0.59999999999999998 / var_x98;
        const double var_x100 = -1.0 - var_x99;
        const double var_x101 = NV_Ith_S(mParameters, 14) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2;
        const double var_x102 = var_x100 * var_x101;
        const double var_x103 = var_x102 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1;
        const double var_x104 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3);
        const double var_x105 = var_x104 * NV_Ith_S(mParameters, 9) * var_chaste_interface__fast_sodium_current_j_gate__j;
        const double var_x106 = var_x105 * var_chaste_interface__fast_sodium_current_h_gate__h;
        const double var_x107 = _lt_0_row[10];
        const double var_x108 = var_x107 * pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 3) * NV_Ith_S(mParameters, 16);
        const double var_x109 = var_x108 * var_chaste_interface__transient_outward_current_ydv_gate__ydv;
        const double var_x110 = pow(NV_Ith_S(mParameters, 7), 3);
        const double var_x111 = var_x110 * var_chaste_interface__calcium_dynamics__Cai;
        const double var_x112 = pow(var_chaste_interface__ionic_concentrations__Nai, 3);
        const double var_x113 = var_x16 * NV_Ith_S(mParameters, 5);
        const double var_x114 = var_x112 * var_x113;
        const double var_x115 = var_x114 - var_x111;
        const double var_x116 = _lt_0_row[4];
        const double var_x117 = 0.031820500981632228 * var_x116;
        const double var_x118 = 1.0 + 0.0001 * var_x116 * (var_x111 + var_x114);
        const double var_x119 = NV_Ith_S(mParameters, 15) / var_x118;
        const double var_x120 = sqrt(NV_Ith_S(mParameters, 6));
        const double var_x121 = var_x120 * NV_Ith_S(mParameters, 13) * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr;
        const double var_x122 = exp(0.4017857142857143 + 0.044642857142857144 * var_chaste_interface__cell__V);
        const double var_x123 = 1.0 + var_x122;
        const double var_x124 = 1 / var_x123;
        const double var_x125 = 0.43033148291193518 * var_x124;
        const double var_x126 = var_x121 * var_x125;
        const double var_x127 = 0.0047323466666666673 * var_x86 * var_x87 * var_x94 / pow(var_x88, 2);
        const double var_x128 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 6.3708927812613361 * var_x93);
        const double var_x129 = 1.0 + var_x128;
        const double var_x130 = 1 / var_x129;
        const double var_x131 = exp(-2.4444678999999998 + 13.738155796237757 * var_x93 - 0.51429999999999998 * var_chaste_interface__cell__V);
        const double var_x132 = 1.0 + var_x131;
        const double var_x133 = 1 / var_x132;
        const double var_x134 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 2.1455350448256207 * var_x93);
        const double var_x135 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 1.6494869150645177 * var_x93);
        const double var_x136 = var_x135 + 0.49124000000000001 * var_x134;
        const double var_x137 = var_x133 * var_x136;
        const double var_x138 = var_x120 * NV_Ith_S(mParameters, 12) / (var_x137 + 1.02 * var_x130);
        const double var_x139 = var_x130 * var_x138;
        const double var_x140 = 0.4389381125701739 * var_x139;
        const double var_x141 = var_x115 * NV_Ith_S(mParameters, 15) / pow(var_x118, 2);
        const double var_x142 = var_x116 * var_x141 * (var_x117 * (0.0001 * var_x111 + 0.0001 * var_x114) - 3.7435883507802621e-6 * var_x114 * var_x116);
        const double var_x143 = pow(var_chaste_interface__ionic_concentrations__Nai, 2);
        const double var_x144 = 1 / var_x143;
        const double var_x145 = 1 / (1.0 + 100.0 * var_x144);
        const double var_x146 = 2.25 * var_x145;
        const double var_x147 = 1 / (1.5 + NV_Ith_S(mParameters, 6));
        const double var_x148 = exp(-0.003743588350780262 * var_chaste_interface__cell__V);
        const double var_x149 = exp(0.01485884101040119 * NV_Ith_S(mParameters, 7));
        const double var_x150 = exp(-var_x15);
        const double var_x151 = 1.0 + 0.1245 * var_x148 + 0.036499999999999998 * var_x150 * (-0.14285714285714285 + 0.14285714285714285 * var_x149);
        const double var_x152 = var_x147 * (0.00046607674967214262 * var_x148 + 0.037435883507802616 * var_x150 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x149)) * NV_Ith_S(mParameters, 6) / pow(var_x151, 2);
        const double var_x153 = var_x109 * var_x94;
        const double var_x154 = 0.01 * var_x153;
        const double var_x155 = var_x128 / pow(var_x129, 2);
        const double var_x156 = var_x138 * var_x94;
        const double var_x157 = 0.10468673984798647 * var_x155 * var_x156;
        const double var_x158 = 0.019211226915711394 * var_x121 * var_x122 * var_x94 / pow(var_x123, 2);
        const double var_x159 = var_x116 * var_x119;
        const double var_x160 = var_x114 * var_x159;
        const double var_x161 = var_x133;
        const double var_x162 = var_x131 * var_x136 / pow(var_x132, 2);
        const double var_x163 = var_x120 * var_x94;
        const double var_x164 = 0.42189361069797565 * var_x130 * var_x163 * NV_Ith_S(mParameters, 12) / pow((var_x130 + 0.98039215686274506 * var_x137), 2);
        const double var_x165 = var_x164 * (0.24326999999999999 * var_x155 - 0.51429999999999998 * var_x162 - var_x161 * (0.061749999999999999 * var_x135 + 0.039456396800000001 * var_x134));
        const double var_x166 = 1.6884874999999999e-9 * var_x39;
        const double var_x167 = var_x166 + 1.6884874999999999e-9 * var_x38;
        const double var_x168 = 0.5 + 187179.41753901311 * var_chaste_interface__cell__V;
        const double var_x169 = -var_x166;
        const double var_x170 = 1 / (pow(var_x10, 2) * pow(var_chaste_interface__calcium_dynamics__Cai, 4));
        const double var_x171 = 5.1839999999999986e-9 * var_x170;
        const double var_x172 = var_x46 * var_chaste_interface__cell__V;
        const double var_x173 = 3.2768075070111035e-12 * var_x170;
        const double var_x174 = ((var_x14) ? (var_x171 * (var_x169 + var_x167 * var_x168)) : (var_x172 * var_x173));
        const double var_x175 = 1.6884874999999999e-9 * var_x52;
        const double var_x176 = var_x175 + 1.6884874999999999e-9 * var_x51;
        const double var_x177 = -var_x175;
        const double var_x178 = var_x53 * var_chaste_interface__cell__V;
        const double var_x179 = ((var_x14) ? (var_x171 * (var_x177 + var_x168 * var_x176)) : (var_x173 * var_x178));
        const double var_x180 = 6.5127375e-9 * var_x52;
        const double var_x181 = var_x180 + 6.5127375e-9 * var_x51;
        const double var_x182 = -var_x180;
        const double var_x183 = var_x182 + var_x168 * var_x181;
        const double var_x184 = var_x183 * var_chaste_interface__L_type_Ca_channel_f_gate__f;
        const double var_x185 = var_chaste_interface__L_type_Ca_channel_d_gate__d / pow((0.00059999999999999995 + var_chaste_interface__calcium_dynamics__Cai), 2);
        const double var_x186 = 0.00059999999999999995 * var_x185;
        const double var_x187 = var_x185 * var_chaste_interface__L_type_Ca_channel_f_gate__f;
        const double var_x188 = ((var_x14) ? (-var_x184 * var_x186) : (-1.4628604942013857e-6 * var_x178 * var_x187));
        const double var_x189 = 1.8621604999999999e-9 * var_x39;
        const double var_x190 = var_x189 + 1.8621604999999999e-9 * var_x38;
        const double var_x191 = -var_x189;
        const double var_x192 = var_x191 + var_x168 * var_x190;
        const double var_x193 = var_x186 * var_chaste_interface__L_type_Ca_channel_f_gate__f;
        const double var_x194 = ((var_x14) ? (-var_x192 * var_x193) : (-4.1826974130498884e-7 * var_x172 * var_x187));
        const double var_x195 = var_x1 * var_x4;
        const double var_x196 = 0.019296999999999998 * NV_Ith_S(mParameters, 8);
        const double var_x197 = var_x6 * var_x8;
        const double var_x198 = var_x196 * var_x197;
        const double var_x199 = var_x196 * var_x61;
        const double var_x200 = 374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__cell__V) * (var_x199 + var_x196 * var_x60);
        const double var_x201 = var_x200 - var_x199;
        const double var_x202 = var_x43 * (-var_x198 + (0.5 + 374358.83507802623 * var_chaste_interface__cell__V) * (var_x198 + var_x195 * var_x196)) - var_x193 * var_x201;
        const double var_x203 = 14448.004881001343 * var_x72 - 8.6688029286008046 * var_x187 * var_x68 * var_chaste_interface__cell__V;
        const double var_x204 = ((var_x63) ? (var_x202) : (var_x203));
        const double var_x205 = 0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai;
        const double var_x206 = 1 / var_x205;
        const double var_x207 = 1.1499999999999999 * var_x206;
        const double var_x208 = 0.040282206767891383 * var_x96;
        const double var_x209 = pow(var_x205, (-2));
        const double var_x210 = var_x209 * var_chaste_interface__calcium_dynamics__Cai;
        const double var_x211 = 1.1499999999999999 * var_x210;
        const double var_x212 = var_x81 * var_chaste_interface__T_type_Ca_channel_g_gate__g;
        const double var_x213 = var_x212 * var_x96;
        const double var_x214 = 0.6678084676374566 * var_x213;
        const double var_x215 = var_x110 * var_x159;
        const double var_x216 = var_x141 * pow(var_x116, 2);
        const double var_x217 = var_x110 * var_x216;
        const double var_x218 = 1 / (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai + var_chaste_interface__ionic_concentrations__Ki);
        const double var_x219 = -26.712338705498265 * log(var_x218 * (0.018329999999999999 * NV_Ith_S(mParameters, 7) + NV_Ith_S(mParameters, 6))) + var_chaste_interface__cell__V;
        const double var_x220 = var_x219 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1;
        const double var_x221 = 5.4447296618926212e-7 * var_x101 * var_x220 * var_x96 * var_x97 / pow(var_x98, 2);
        const double var_x222 = log(var_x84 * NV_Ith_S(mParameters, 7));
        const double var_x223 = -26.712338705498265 * var_x222 + var_chaste_interface__cell__V;
        const double var_x224 = var_x223 * NV_Ith_S(mParameters, 9) * var_chaste_interface__fast_sodium_current_h_gate__h;
        const double var_x225 = var_x224 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2) * var_chaste_interface__fast_sodium_current_j_gate__j;
        const double var_x226 = var_x105 * var_x223;
        const double var_x227 = var_x104 * var_x224;
        const double var_x228 = var_x44 * var_chaste_interface__cell__V;
        const double var_x229 = ((var_x14) ? (var_x184 * var_x41) : (var_x228 * var_x54));
        const double var_x230 = ((var_x14) ? (var_x192 * var_x42) : (var_x228 * var_x47));
        const double var_x231 = var_x201 * var_x42;
        const double var_x232 = ((var_x63) ? (var_x231) : (var_x228 * var_x69));
        const double var_x233 = var_x41 * var_chaste_interface__L_type_Ca_channel_d_gate__d;
        const double var_x234 = var_x40 * var_chaste_interface__L_type_Ca_channel_d_gate__d;
        const double var_x235 = var_x234 * var_chaste_interface__cell__V;
        const double var_x236 = ((var_x14) ? (var_x183 * var_x233) : (var_x235 * var_x54));
        const double var_x237 = ((var_x14) ? (var_x192 * var_x233) : (var_x235 * var_x47));
        const double var_x238 = ((var_x63) ? (var_x201 * var_x233) : (var_x235 * var_x69));
        const double var_x239 = log(var_x96 * NV_Ith_S(mParameters, 5));
        const double var_x240 = -13.356169352749133 * var_x239 + var_chaste_interface__cell__V;
        const double var_x241 = var_x240 * var_chaste_interface__T_type_Ca_channel_b_gate__b * var_chaste_interface__T_type_Ca_channel_g_gate__g;
        const double var_x242 = var_x163 * NV_Ith_S(mParameters, 13);
        const double var_x243 = var_x220 * NV_Ith_S(mParameters, 14);
        const double var_x244 = var_x107 * var_x94 * pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 2) * NV_Ith_S(mParameters, 16) * var_chaste_interface__transient_outward_current_ydv_gate__ydv;
        const double var_x245 = var_x108 * var_x94;
        const double var_x246 = 0.5 + 187179.41753901311 * var_chaste_interface__cell__V;
        const double var_x247 = 1.2663656249999999e-9 * var_x197;
        const double var_x248 = ((var_x14) ? (var_x12 * (-var_x247 + var_x246 * (var_x247 + 1.2663656249999999e-9 * var_x195))) : (0.0004740751601578565 * var_x24));
        const double var_x249 = -var_x248;
        const double var_x250 = 4.8845531249999998e-9 * var_x197;
        const double var_x251 = ((var_x14) ? (var_x43 * (-var_x250 + var_x246 * (var_x250 + 4.8845531249999998e-9 * var_x195))) : (0.0018285756177517324 * var_x49));
        const double var_x252 = 0.10684935482199306 * var_x84;
        const double var_x253 = var_x103 * var_x218;
        const double var_x254 = 2.4586089909663641e-6 * var_x84 * var_x85 * var_x89 * var_x94 / pow((8.0403875140176932e-6 + var_x85), 2);
        const double var_x255 = var_x147 * NV_Ith_S(mParameters, 6) / var_x151;
        const double var_x256 = var_x255 / (var_x112 * pow((0.01 + var_x144), 2));
        const double var_x257 = 26.712338705498265 * var_x106 * var_x84;
        const double var_x258 = var_x113 * var_x143;
        const double var_x259 = var_x159 * var_x258;
        const double var_x260 = var_x216 * var_x258;
        const double var_x261 = 1.396620375e-9 * var_x197;
        const double var_x262 = ((var_x14) ? (var_x43 * (-var_x261 + var_x246 * (var_x261 + 1.396620375e-9 * var_x195))) : (0.00052283717663123607 * var_x49));
        const double var_x263 = 5.1338399412861326e-7 * var_x79 * var_x92;
        const double var_x264 = 0.14745210965435041 * var_x77 * var_x92;
        const double var_x265 = 2.9172010853500545 * var_x90 * var_x92;
        const double var_x266 = 11.72506353372661 * var_x139 * var_x92;
        const double var_x267 = 11.495160327182951 * var_x121 * var_x124 * var_x92;
        const double var_x268 = 26.712338705498265 * var_x109 * var_x92;
        const double var_x269 = var_x155 * var_x92;
        const double var_x270 = var_x164 * (6.4983106368865622 * var_x269 - var_x161 * (1.053972635420138 * var_x134 * var_x92 + 1.6494869150645177 * var_x135 * var_x92) - 13.738155796237757 * var_x162 * var_x92);
        const double var_x271 = 2.7964276527937963 * var_x156 * var_x269;
        const double var_x272 = var_x115 * var_x159;
        const double var_x273 = 0.003016 + var_x83 + 0.063641001963264457 * var_x272 - 2.0 * var_x142 - 0.074871767015605231 * var_x160;
        const double var_x274 = 1 / M_PI;
        const double var_x275 = 9.6614270660886194e-5 * var_x274;
        const double var_x276 = 0.055555555555555559 * var_x212;
        const double var_x277 = 0.0033511111111111111 + var_x276 + 1.1111111111111112 * var_x74 + 0.070712224403627164 * var_x272 - 2.2222222222222223 * var_x142 - 0.083190852239561366 * var_x160;
        const double var_x278 = -var_chaste_interface__calcium_dynamics__Cai + var_chaste_interface__calcium_dynamics__Ca_JSR;
        const double var_x279 = var_x70 * var_chaste_interface__cell__V;
        const double var_x280 = ((var_x63) ? (var_x231 * var_chaste_interface__L_type_Ca_channel_d_gate__d) : (var_x279));
        const double var_x281 = 1.2777777777777777 * var_x206;
        const double var_x282 = exp(5.5555555555555554 + 0.0033511111111111111 * var_chaste_interface__cell__V + 1.1111111111111112 * var_x280 - 0.044758007519879316 * var_x239 - 2.2222222222222223 * var_x272 + var_x240 * var_x276 + var_x281 * var_chaste_interface__calcium_dynamics__Cai);
        const double var_x283 = 1.0 + var_x282;
        const double var_x284 = exp(2.0);
        const double var_x285 = 1.0 + var_x284 * var_chaste_interface__calcium_dynamics__APtrack2;
        const double var_x286 = 1 / var_x285;
        const double var_x287 = 1.0 - var_x286;
        const double var_x288 = var_x286 * var_x287;
        const double var_x289 = var_x278 * var_x282 * var_x288 / pow(var_x283, 2);
        const double var_x290 = 1.0588235294117645 * var_x289;
        const double var_x291 = 0.0023800000000000002 + var_chaste_interface__calcium_dynamics__Cai;
        const double var_x292 = 1.0 + 0.00011900000000000002 / pow(var_x291, 2) + 3.5000000000000004e-5 * var_x209;
        const double var_x293 = 1 / var_x292;
        const double var_x294 = var_x293;
        const double var_x295 = 0.00092000000000000003 + var_chaste_interface__calcium_dynamics__Cai;
        const double var_x296 = NV_Ith_S(mParameters, 3) / var_x295;
        const double var_x297 = 0.081176470588235281 * var_x296;
        const double var_x298 = var_x207 + var_x208 + var_x214 - var_x211 + 2.0 * var_x215 + 0.00020000000000000001 * var_x217;
        const double var_x299 = var_chaste_interface__calcium_dynamics__Cai * NV_Ith_S(mParameters, 3) / pow(var_x295, 2);
        const double var_x300 = 1 / var_x283;
        const double var_x301 = 1.0588235294117645 * var_x300;
        const double var_x302 = var_x288 * var_x301;
        const double var_x303 = var_x281 + 0.044758007519879316 * var_x96 + 1.1111111111111112 * var_x204 + 2.2222222222222223 * var_x215 + 0.74200940848606289 * var_x213 + 0.00022222222222222223 * var_x217 - 1.2777777777777777 * var_x210;
        const double var_x304 = -0.040282206767891383 * var_x239 + var_x207 * var_chaste_interface__calcium_dynamics__Cai + var_x240 * var_x83;
        const double var_x305 = NV_Ith_S(mParameters, 3) * NV_Ith_S(mParameters, 0);
        const double var_x306 = 0.0054117647058823529 * var_x305;
        const double var_x307 = 1.1764705882352939 * var_x289;
        const double var_x308 = -9.6614270660886201e-6 * var_x241 * var_x274;
        const double var_x309 = var_x240 * var_x81;
        const double var_x310 = -4.83071353304431e-6 * var_x274 * var_x309;
        const double var_x311 = var_x289 * var_x309;
        const double var_x312 = var_x278 * var_x284;
        const double var_x313 = var_x312 / pow(var_x285, 3);
        const double var_x314 = var_x287 * var_x312 / pow(var_x285, 2);
        const double var_x315 = -var_x275 * (0.00060000000000000006 * var_x260 - 6.0 * var_x259);
        const double var_x316 = 0.00066666666666666664 * var_x260 - 6.6666666666666661 * var_x259;
        const double var_x317 = 1.0 - var_chaste_interface__fast_sodium_current_m_gate__m;
        const double var_x318 = 1 / (1.0 - exp(1.0000000000287557e-7));
        const double var_x319 = 1 / (1.0 - exp(-1.0000000000287557e-7));
        const double var_x320 = _lt_0_row[19];
        const double var_x321 = 0.0072727272727272727 * var_x320 * var_chaste_interface__fast_sodium_current_m_gate__m;
        const double var_x322 = 47.130000000000003 + var_chaste_interface__cell__V;
        const double var_x323 = fabs(var_x322) < 1.0000000000287557e-6;
        const double var_x324 = -0.10000000000000001 * var_chaste_interface__cell__V;
        const double var_x325 = exp(-4.7130000000000001 + var_x324);
        const double var_x326 = 1.0 - var_x325;
        const double var_x327 = 0.32000000000000001 / var_x326;
        const double var_x328 = -0.080000000000000002 * var_x320;
        const double var_x329 = -3.200000000092018e-7 * var_x319;
        const double var_x330 = exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 11) - 0.14705882352941177 * var_chaste_interface__cell__V);
        const double var_x331 = var_chaste_interface__cell__V < -40.0;
        const double var_x332 = ((var_x331) ? (0.13500000000000001 * var_x330) : (0));
        const double var_x333 = var_x332;
        const double var_x334 = exp(0.34999999999999998 * var_chaste_interface__cell__V - 0.34999999999999998 * NV_Ith_S(mParameters, 11));
        const double var_x335 = exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * NV_Ith_S(mParameters, 11));
        const double var_x336 = exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 11) - 0.0900900900900901 * var_chaste_interface__cell__V);
        const double var_x337 = 1.0 + var_x336;
        const double var_x338 = ((var_x331) ? (310000.0 * var_x334 + 3.5600000000000001 * var_x335) : (7.6923076923076916 / var_x337));
        const double var_x339 = var_x338;
        const double var_x340 = ((var_x331) ? (-0.019852941176470591 * var_x330) : (0));
        const double var_x341 = var_x332 + var_x338;
        const double var_x342 = 0.01 * NV_Ith_S(mParameters, 10);
        const double var_x343 = 1.0 - var_x342;
        const double var_x344 = var_x343 / var_x341;
        const double var_x345 = ((var_x331) ? (0.28123999999999999 * var_x335 + 108500.0 * var_x334) : (0.693000693000693 * var_x336 / pow(var_x337, 2)));
        const double var_x346 = exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 11) - 0.13780000000000001 * var_chaste_interface__cell__V);
        const double var_x347 = 1.0 + var_x346;
        const double var_x348 = exp(0.01052 * NV_Ith_S(mParameters, 11) - 0.01052 * var_chaste_interface__cell__V);
        const double var_x349 = var_x348 / var_x347;
        const double var_x350 = exp(-3.2000000000000002 + var_x324 + 0.10000000000000001 * NV_Ith_S(mParameters, 11));
        const double var_x351 = 1.0 + var_x350;
        const double var_x352 = exp(2.5349999999999999e-7 * NV_Ith_S(mParameters, 11) - 2.5349999999999999e-7 * var_chaste_interface__cell__V);
        const double var_x353 = var_x352 / var_x351;
        const double var_x354 = ((var_x331) ? (0.1212 * var_x349) : (0.29999999999999999 * var_x353));
        const double var_x355 = var_x354;
        const double var_x356 = 37.780000000000001 + var_chaste_interface__cell__V;
        const double var_x357 = exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * NV_Ith_S(mParameters, 11));
        const double var_x358 = 1.0 + var_x357;
        const double var_x359 = 1 / var_x358;
        const double var_x360 = exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * NV_Ith_S(mParameters, 11));
        const double var_x361 = exp(0.043909999999999998 * NV_Ith_S(mParameters, 11) - 0.043909999999999998 * var_chaste_interface__cell__V);
        const double var_x362 = -127140.0 * var_x360 - 3.4740000000000003e-5 * var_x361;
        const double var_x363 = var_x359 * var_x362;
        const double var_x364 = ((var_x331) ? (var_x356 * var_x363) : (0));
        const double var_x365 = var_x364;
        const double var_x366 = ((var_x331) ? (var_x363 + var_x356 * var_x359 * (1.5254334000000001e-6 * var_x361 - 31073.016 * var_x360) - 0.311 * var_x356 * var_x357 * var_x362 / pow(var_x358, 2)) : (0));
        const double var_x367 = var_x354 + var_x364;
        const double var_x368 = var_x343 / var_x367;
        const double var_x369 = ((var_x331) ? (-0.001275024 * var_x349 + 0.016701360000000002 * var_x346 * var_x348 / pow(var_x347, 2)) : (-7.6049999999999996e-8 * var_x353 + 0.029999999999999999 * var_x350 * var_x352 / pow(var_x351, 2)));
        const double var_x370 = exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__cell__V);
        const double var_x371 = 1.0 + var_x370;
        const double var_x372 = 1 / var_x371;
        const double var_x373 = -1.0 + var_x372;
        const double var_x374 = exp(-9.999999999851651e-8);
        const double var_x375 = (1.0 - var_x374) / (1.0 + var_x374);
        const double var_x376 = exp(9.999999999851651e-8);
        const double var_x377 = (1.0 - var_x376) / (1.0 + var_x376);
        const double var_x378 = 45787545.788225032 * var_x375;
        const double var_x379 = (9.9999993759999999 + var_chaste_interface__cell__V) * (-var_x378 - 45787545.788225032 * var_x377);
        const double var_x380 = 10.0 + var_chaste_interface__cell__V;
        const double var_x381 = fabs(var_x380) < 6.2399999999074307e-7;
        const double var_x382 = 1.0 - var_x370;
        const double var_x383 = 1 / var_x382;
        const double var_x384 = 0.035000000000000003 * var_x371 * var_x383;
        const double var_x385 = 0.005608974358974359 * var_x370 * var_x380;
        const double var_x386 = ((var_x381) ? (4.7698559998584812e-16 * (-36688738612904.07 * var_x375 - 36688738612904.07 * var_x377) / pow((var_x375 - 0.017500000000000002 * var_x379), 2)) : (var_x384 - var_x383 * var_x385 - var_x371 * var_x385 / pow(var_x382, 2)));
        const double var_x387 = 1.0 - var_chaste_interface__L_type_Ca_channel_d_gate__d;
        const double var_x388 = ((var_x381) ? (1 / (var_x378 - 801282.05129393819 * var_x379)) : (var_x380 * var_x384));
        const double var_x389 = 0.16025641025641024 * var_x370 * var_x388 / pow(var_x371, 2);
        const double var_x390 = 1.0 - var_chaste_interface__L_type_Ca_channel_f_gate__f;
        const double var_x391 = 0.019699999999999999 * exp(-0.113569 * pow((1 + 0.10000000000000001 * var_chaste_interface__cell__V), 2));
        const double var_x392 = exp(2.5 - 0.050000000000000003 * var_chaste_interface__cell__V);
        const double var_x393 = 1.0 + var_x392;
        const double var_x394 = 0.029999999999999999 * var_x392 / pow(var_x393, 2);
        const double var_x395 = exp(4.0767441860465121 + 0.11627906976744186 * var_chaste_interface__cell__V);
        const double var_x396 = 1.0 + var_x395;
        const double var_x397 = 0.11627906976744186 * var_x395 / pow(var_x396, 2);
        const double var_x398 = -0.02 - var_x391;
        const double var_x399 = 1 / var_x396;
        const double var_x400 = 0.59999999999999998 / var_x393;
        const double var_x401 = var_x399 + var_x400;
        const double var_x402 = var_x391 * (-0.022713800000000003 - 0.0022713799999999999 * var_chaste_interface__cell__V);
        const double var_x403 = 1.0 - var_x399 - var_x400;
        const double var_x404 = exp(-1.2962962962962963 - 0.092592592592592587 * var_chaste_interface__cell__V);
        const double var_x405 = 1.0 + var_x404;
        const double var_x406 = exp(5.5555555555555554 + 0.22222222222222221 * var_chaste_interface__cell__V);
        const double var_x407 = 1.0 + var_x406;
        const double var_x408 = 1 / var_x407;
        const double var_x409 = 1 / (3.7000000000000002 + 6.0999999999999996 * var_x408);
        const double var_x410 = exp(10.714285714285715 + 0.17857142857142858 * var_chaste_interface__cell__V);
        const double var_x411 = 1.0 + var_x410;
        const double var_x412 = 1 / (12.0 - 0.875 * var_chaste_interface__cell__V);
        const double var_x413 = var_x410 / pow(var_x411, 2);
        const double var_x414 = var_chaste_interface__cell__V <= 0;
        const double var_x415 = exp(-2.8666666666666667 - 0.13333333333333333 * var_chaste_interface__cell__V);
        const double var_x416 = 1.0 + var_x415;
        const double var_x417 = -var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr + 1 / var_x416;
        const double var_x418 = 1 / (-1.0 + exp(-1.000000000001e-7));
        const double var_x419 = 1 / (-1.0 + exp(1.0000000000814911e-7));
        const double var_x420 = exp(-1.7465999999999999 - 0.123 * var_chaste_interface__cell__V);
        const double var_x421 = 1.0 - var_x420;
        const double var_x422 = 0.0013799999999999999 / var_x421;
        const double var_x423 = 14.199999999999999 + var_chaste_interface__cell__V;
        const double var_x424 = var_x422 - 0.00016973999999999998 * var_x420 * var_x423 / pow(var_x421, 2);
        const double var_x425 = 4.2068965517283451e-10 * var_x418;
        const double var_x426 = var_x422 * var_x423;
        const double var_x427 = 724999.99997009686 * (38.900000689655172 + var_chaste_interface__cell__V) * (var_x425 + 4.2068965520669629e-10 * var_x419);
        const double var_x428 = 0.13333333333333333 * var_x415 / pow(var_x416, 2);
        const double var_x429 = 38.899999999999999 + var_chaste_interface__cell__V;
        const double var_x430 = fabs(var_x429) < 6.896551724422384e-7;
        const double var_x431 = 1 / (1.0 - exp(-1.0000000000011388e-7));
        const double var_x432 = 1 / (1.0 - exp(9.9999999998406912e-8));
        const double var_x433 = exp(5.6404999999999994 + 0.14499999999999999 * var_chaste_interface__cell__V);
        const double var_x434 = -1.0 + var_x433;
        const double var_x435 = 0.00060999999999999997 / var_x434;
        const double var_x436 = var_x435 - 8.8449999999999995e-5 * var_x429 * var_x433 / pow(var_x434, 2);
        const double var_x437 = 1.1219512195134727e-9 * var_x431;
        const double var_x438 = var_x429 * var_x435;
        const double var_x439 = -var_x437;
        const double var_x440 = 615000.00000454858 * (14.199999186991869 + var_chaste_interface__cell__V) * (var_x439 - 1.1219512194943214e-9 * var_x432);
        const double var_x441 = fabs(var_x423) < 8.1300813007528783e-7;
        const double var_x442 = -var_x426;
        const double var_x443 = -var_x438;
        const double var_x444 = exp(0.089820359281437126 - 0.059880239520958084 * var_chaste_interface__cell__V);
        const double var_x445 = 1.0 + var_x444;
        const double var_x446 = 1 / var_x445;
        const double var_x447 = var_x446 - var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1;
        const double var_x448 = 1 / (-1.0 + exp(9.9999999999880736e-8));
        const double var_x449 = 1 / (-1.0 + exp(-9.9999999999880736e-8));
        const double var_x450 = 1 / (1.0 - exp(2.1542940320207204e-7));
        const double var_x451 = 1 / (1.0 - exp(-2.1542940320207204e-7));
        const double var_x452 = 1.0465793304208771e-10 * var_x450;
        const double var_x453 = 1.9068413391534758e-10 * var_x449;
        const double var_x454 = var_x452 + var_x453;
        const double var_x455 = (30.000001455604075 + var_chaste_interface__cell__V) * (var_x454 + 1.0465793304208771e-10 * var_x451 + 1.9068413391534758e-10 * var_x448);
        const double var_x456 = 343500.00000040967 * var_x455;
        const double var_x457 = 0.059880239520958084 * var_x444 / pow(var_x445, 2);
        const double var_x458 = 30.0 + var_chaste_interface__cell__V;
        const double var_x459 = fabs(var_x458) < 1.455604075689676e-6;
        const double var_x460 = exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__cell__V);
        const double var_x461 = -1.0 + var_x460;
        const double var_x462 = 1 / var_x461;
        const double var_x463 = 0.00013100000000000001 * var_x462;
        const double var_x464 = exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__cell__V);
        const double var_x465 = 1.0 - var_x464;
        const double var_x466 = 1 / var_x465;
        const double var_x467 = 7.1899999999999999e-5 * var_x466;
        const double var_x468 = var_x458 * var_x460 / pow(var_x461, 2);
        const double var_x469 = var_x458 * var_x464 / pow(var_x465, 2);
        const double var_x470 = var_x458 * var_x463;
        const double var_x471 = var_x458 * var_x467;
        const double var_x472 = var_x446 - var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2;
        const double var_x473 = 2.6164483260521926e-11 * var_x450;
        const double var_x474 = 4.7671033478836895e-11 * var_x449;
        const double var_x475 = 85875.000000102416 * var_x455;
        const double var_x476 = 3.2750000000000003e-5 * var_x462;
        const double var_x477 = 1.7975e-5 * var_x466;
        const double var_x478 = var_x458 * var_x476;
        const double var_x479 = var_x458 * var_x477;
        const double var_x480 = 0.040000000000000001 * var_chaste_interface__cell__V;
        const double var_x481 = exp(-1.6000000000000001 + var_x480);
        const double var_x482 = 1.0 + var_x481;
        const double var_x483 = var_x481 / var_x482;
        const double var_x484 = 10.0 * var_x483;
        const double var_x485 = exp(-3.6000000000000001 - var_x480);
        const double var_x486 = 1.0 + var_x485;
        const double var_x487 = var_x485 / var_x486;
        const double var_x488 = 10.0 * var_x487;
        const double var_x489 = var_x484 + var_x488;
        const double var_x490 = 1 / var_x489;
        const double var_x491 = 0.40000000000000002 * var_x483;
        const double var_x492 = 0.40000000000000002 * pow(var_x485, 2) / pow(var_x486, 2);
        const double var_x493 = 0.40000000000000002 * pow(var_x481, 2) / pow(var_x482, 2);
        const double var_x494 = 0.40000000000000002 * var_x487;
        const double var_x495 = 0.20000000000000001 * var_chaste_interface__cell__V;
        const double var_x496 = exp(12.0 + var_x495);
        const double var_x497 = 1.0 + var_x496;
        const double var_x498 = 1 / var_x497;
        const double var_x499 = 0.014999999999999999 * var_x498;
        const double var_x500 = exp(5.0 + var_x495);
        const double var_x501 = 1.0 + var_x500;
        const double var_x502 = var_x500 / var_x501;
        const double var_x503 = 0.10000000000000001 * var_x502;
        const double var_x504 = var_x499 + var_x503;
        const double var_x505 = 1 / var_x504;
        const double var_x506 = 0.02 * var_x502;
        const double var_x507 = 0.02 * pow(var_x500, 2) / pow(var_x501, 2);
        const double var_x508 = 0.0030000000000000001 * var_x496 / pow(var_x497, 2);
        const double var_x509 = 0.80000000000000004 + var_chaste_interface__calcium_dynamics__Ca_JSR;
        const double var_x510 = pow(var_x509, (-2));
        const double var_x511 = 1 / (1.0 + 8.0 * var_x510);
        const double var_x512 = 150.0 * var_x289;
        const double var_x513 = var_x511 * var_x512;
        const double var_x514 = 150.0 * var_x300;
        const double var_x515 = var_x288 * var_x514;
        const double var_x516 = var_x511;
        const double var_x517 = var_x289 * var_x511;
        const double var_x518 = 166.66666666666666 * var_x517;
        const double var_x519 = 1.0 + var_x99;
        const double var_x520 = var_x101 * var_x519;
        const double var_x521 = var_x153 + var_x272 + var_x304 + 0.0070159999999999997 * var_chaste_interface__cell__V - 0.10684935482199306 * var_x222 + var_x106 * var_x223 + var_x126 * var_x94 + var_x140 * var_x94 + var_x146 * var_x255 + var_x220 * var_x520 + var_x78 * var_x94 + var_x80 * var_x94 + var_x91 * var_x94 + GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance();
        const double var_x522 = var_x279 + var_x521;
        const double var_x523 = var_x12 * (var_x169 + var_x167 * var_x246) + var_x12 * (var_x177 + var_x176 * var_x246) + var_x43 * (var_x182 + var_x181 * var_x246) + var_x43 * (var_x191 + var_x190 * var_x246);
        const double var_x524 = (var_chaste_interface__calcium_dynamics__APtrack > 0.17999999999999999) && (var_chaste_interface__calcium_dynamics__APtrack < 0.20000000000000001);
        const double var_x525 = var_chaste_interface__calcium_dynamics__APtrack > 0.20000000000000001;
        const double var_x526 = (var_x525) && (var_x63);
        const double var_x527 = var_x201 * var_x275;
        const double var_x528 = 1.3958834540828686 * var_x274 * var_x68;
        const double var_x529 = (var_x525) && (((var_x525) || (var_x63)));
        const double var_x530 = var_chaste_interface__calcium_dynamics__APtrack2 > 0.01;
        const double var_x531 = var_chaste_interface__calcium_dynamics__OVRLDtrack > 0.97999999999999998;
        const double var_x532 = var_x145 * var_x152;
        const double var_x533 = var_x274 * NV_Ith_S(mParameters, 4);
        const double var_x534 = 0.00019322854132177239 * var_x533;
        const double var_x535 = 0.00057968562396531716 * var_x533;
        const double var_x536 = var_x520 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1;
        const double var_x537 = var_x218 * var_x536;
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (-0.0070159999999999997 + var_x103 + var_x157 + var_x158 - var_x106 - var_x109 - var_x126 - var_x127 - var_x140 - var_x142 - var_x154 - var_x165 - var_x29 - var_x37 - var_x50 - var_x56 - var_x74 - var_x78 - var_x80 - var_x83 - var_x91 - var_x95 - 0.037435883507802616 * var_x160 - var_x146 * var_x152 + var_x115 * var_x117 * var_x119);
        IJth(rJacobian, 1, 0) = var_x294 * (-var_x275 * (var_x273 + var_x74) - var_x277 * var_x290);
        IJth(rJacobian, 2, 0) = ((var_x323) ? (var_x321 + var_x317 * (0.16 * var_x318 + 0.16 * var_x319)) : (var_x321 + var_x317 * var_x327 - 0.032000000000000001 * var_x317 * var_x322 * var_x325 / pow(var_x326, 2)));
        IJth(rJacobian, 3, 0) = (var_x333 + var_x339) * (var_x340 * var_x344 + var_x332 * var_x343 * (-var_x340 - var_x345) / pow(var_x341, 2)) + (var_x340 + var_x345) * (var_x342 - var_chaste_interface__fast_sodium_current_h_gate__h + var_x332 * var_x344);
        IJth(rJacobian, 4, 0) = (var_x355 + var_x365) * (var_x366 * var_x368 + var_x343 * var_x364 * (-var_x366 - var_x369) / pow(var_x367, 2)) + (var_x366 + var_x369) * (var_x342 - var_chaste_interface__fast_sodium_current_j_gate__j + var_x364 * var_x368);
        IJth(rJacobian, 5, 0) = var_x387 * var_x389 + var_x389 * var_chaste_interface__L_type_Ca_channel_d_gate__d + var_x372 * var_x386 * var_x387 + var_x373 * var_x386 * var_chaste_interface__L_type_Ca_channel_d_gate__d;
        IJth(rJacobian, 6, 0) = var_x390 * var_x401 * var_x402 + var_x390 * (0.02 + var_x391) * (var_x394 - var_x397) + var_x398 * (var_x397 - var_x394) * var_chaste_interface__L_type_Ca_channel_f_gate__f - var_x402 * var_x403 * var_chaste_interface__L_type_Ca_channel_f_gate__f;
        IJth(rJacobian, 7, 0) = 0.092592592592592587 * var_x404 * var_x409 / pow(var_x405, 2) + 0.036429872495446269 * var_x406 * (-var_chaste_interface__T_type_Ca_channel_b_gate__b + 1 / var_x405) / (pow(var_x407, 2) * pow((0.60655737704918045 + var_x408), 2));
        IJth(rJacobian, 8, 0) = ((var_x414) ? (0.006076388888888889 * (-var_chaste_interface__T_type_Ca_channel_g_gate__g + 1 / var_x411) / pow((1 - 0.072916666666666671 * var_chaste_interface__cell__V), 2) - 0.17857142857142858 * var_x412 * var_x413) : (-0.014880952380952382 * var_x413));
        IJth(rJacobian, 9, 0) = ((var_x430) ? (var_x417 * (var_x424 + 0.00030499999998772508 * var_x418 + 0.00030500000001227489 * var_x419) + var_x428 * (var_x426 + var_x427 - var_x425)) : ((var_x441) ? (var_x417 * (var_x436 + 0.00069000000000588903 * var_x431 + 0.00068999999999411091 * var_x432) + var_x428 * (var_x437 + var_x438 - var_x440)) : (var_x417 * (var_x424 + var_x436) + var_x428 * (var_x426 + var_x438))));
        IJth(rJacobian, 10, 0) = ((var_x459) ? (var_x447 * (6.5500000000000006e-5 * var_x448 + 6.5500000000000006e-5 * var_x449 + 3.595e-5 * var_x450 + 3.595e-5 * var_x451) + var_x457 * (var_x456 - var_x452 - var_x453)) : (var_x447 * (var_x463 + var_x467 - 8.9997000000000013e-6 * var_x468 - 1.0641199999999999e-5 * var_x469) + var_x457 * (var_x470 + var_x471)));
        IJth(rJacobian, 11, 0) = ((var_x459) ? (var_x457 * (var_x475 - var_x473 - var_x474) + var_x472 * (1.6375000000000002e-5 * var_x448 + 1.6375000000000002e-5 * var_x449 + 8.9874999999999999e-6 * var_x450 + 8.9874999999999999e-6 * var_x451)) : (var_x457 * (var_x478 + var_x479) + var_x472 * (var_x476 + var_x477 - 2.2499250000000003e-6 * var_x468 - 2.6602999999999998e-6 * var_x469)));
        IJth(rJacobian, 12, 0) = var_x489 * (var_x490 * var_x491 - var_x490 * var_x493 + 0.10000000000000001 * var_x483 * (var_x493 + var_x494 - var_x491 - var_x492) / pow((var_x483 + var_x487), 2)) + (-var_chaste_interface__transient_outward_current_zdv_gate__zdv + var_x484 * var_x490) * (var_x491 + var_x492 - var_x493 - var_x494);
        IJth(rJacobian, 13, 0) = var_x504 * (-var_x505 * var_x508 + 1.4999999999999998 * var_x498 * (var_x507 + var_x508 - var_x506) / pow((var_x502 + 0.14999999999999999 * var_x498), 2)) + (-var_chaste_interface__transient_outward_current_ydv_gate__ydv + var_x499 * var_x505) * (var_x506 - var_x507 - var_x508);
        IJth(rJacobian, 14, 0) = var_x277 * var_x513;
        IJth(rJacobian, 19, 0) = ((var_x526) ? (-var_x275 * (var_x273 + var_x62)) : ((var_x525) ? (-var_x275 * (var_x273 + var_x73)) : (0)));
        IJth(rJacobian, 23, 0) = -var_x534 * (0.0040000000000000001 + var_x106 + var_x37 + var_x56 + 3.0 * var_x142 + 6.75 * var_x532 + 0.11230765052340785 * var_x160 - 0.095461502944896678 * var_x272);
        IJth(rJacobian, 24, 0) = -var_x534 * (var_x109 + var_x126 + var_x127 + var_x140 + var_x154 + var_x165 + var_x29 + var_x50 + var_x536 + var_x78 + var_x80 + var_x91 + var_x95 - var_x157 - var_x158 - 4.5 * var_x532);
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (var_x211 + var_x215 - var_x174 - var_x179 - var_x188 - var_x194 - var_x204 - var_x207 - var_x208 - var_x214 - var_x221 + 0.0001 * var_x217);
        IJth(rJacobian, 1, 1) = var_x294 * (-var_x297 - var_x302 + 0.081176470588235281 * var_x299 - var_x275 * (var_x204 + var_x298) - var_x290 * var_x303) + (0.00023800000000000004 / pow(var_x291, 3) + 7.0000000000000007e-5 / pow(var_x205, 3)) * (var_x278 * var_x302 + var_x306 * var_chaste_interface__calcium_dynamics__Ca_NSR - var_x275 * (var_x280 + var_x304 + 0.003016 * var_chaste_interface__cell__V - 2.0 * var_x272) - var_x297 * var_chaste_interface__calcium_dynamics__Cai) / pow(var_x292, 2);
        IJth(rJacobian, 14, 1) = var_x516 * (var_x515 + var_x303 * var_x512);
        IJth(rJacobian, 15, 1) = var_x296 - var_x299;
        IJth(rJacobian, 19, 1) = ((var_x526) ? (-var_x275 * (var_x202 + var_x298)) : ((var_x525) ? (-var_x275 * (var_x203 + var_x298)) : (0)));
        IJth(rJacobian, 23, 1) = -var_x534 * (var_x179 + var_x188 - 3.0 * var_x215 - 0.00030000000000000003 * var_x217);
        IJth(rJacobian, 24, 1) = -var_x534 * (var_x174 + var_x194 + var_x221);
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x225);
        IJth(rJacobian, 2, 2) = ((var_x323) ? (var_x328 + var_x329 + 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (var_x329 - 3.200000000092018e-7 * var_x318)) : (var_x328 - var_x322 * var_x327));
        IJth(rJacobian, 23, 2) = -var_x225 * var_x535;
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x226);
        IJth(rJacobian, 3, 3) = -var_x333 - var_x339;
        IJth(rJacobian, 23, 3) = -var_x226 * var_x534;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x227);
        IJth(rJacobian, 4, 4) = -var_x355 - var_x365;
        IJth(rJacobian, 23, 4) = -var_x227 * var_x534;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x229 - var_x230 - var_x232);
        IJth(rJacobian, 1, 5) = var_x294 * (-var_x232 * var_x275 - var_x232 * var_x307);
        IJth(rJacobian, 5, 5) = var_x373 * var_x388 - var_x372 * var_x388;
        IJth(rJacobian, 14, 5) = var_x232 * var_x518;
        IJth(rJacobian, 19, 5) = ((var_x526) ? (-var_x44 * var_x527) : ((var_x525) ? (-var_x228 * var_x528) : (0)));
        IJth(rJacobian, 23, 5) = -var_x229 * var_x534;
        IJth(rJacobian, 24, 5) = -var_x230 * var_x534;
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x236 - var_x237 - var_x238);
        IJth(rJacobian, 1, 6) = var_x294 * (-var_x238 * var_x275 - var_x238 * var_x307);
        IJth(rJacobian, 6, 6) = var_x398 * var_x401 + var_x398 * var_x403;
        IJth(rJacobian, 14, 6) = var_x238 * var_x518;
        IJth(rJacobian, 19, 6) = ((var_x526) ? (-var_x234 * var_x527) : ((var_x525) ? (-var_x235 * var_x528) : (0)));
        IJth(rJacobian, 23, 6) = -var_x236 * var_x534;
        IJth(rJacobian, 24, 6) = -var_x237 * var_x534;
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (-0.10000000000000001 * var_x241);
        IJth(rJacobian, 1, 7) = var_x294 * (var_x308 - 0.1176470588235294 * var_x241 * var_x289);
        IJth(rJacobian, 7, 7) = -var_x409;
        IJth(rJacobian, 14, 7) = 16.666666666666668 * var_x241 * var_x517;
        IJth(rJacobian, 19, 7) = ((var_x529) ? (var_x308) : (0));
        IJth(rJacobian, 0, 8) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x240 * var_x82);
        IJth(rJacobian, 1, 8) = var_x294 * (var_x310 - 0.058823529411764698 * var_x311);
        IJth(rJacobian, 8, 8) = ((var_x414) ? (-var_x412) : (-0.083333333333333329));
        IJth(rJacobian, 14, 8) = 8.3333333333333339 * var_x311 * var_x511;
        IJth(rJacobian, 19, 8) = ((var_x529) ? (var_x310) : (0));
        IJth(rJacobian, 0, 9) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x125 * var_x242);
        IJth(rJacobian, 9, 9) = ((var_x430) ? (var_x425 + var_x442 - var_x427) : ((var_x441) ? (var_x439 + var_x440 + var_x443) : (var_x442 + var_x443)));
        IJth(rJacobian, 24, 9) = -8.3152324727908455e-5 * var_x124 * var_x242 * var_x533;
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (var_x102 * var_x219);
        IJth(rJacobian, 10, 10) = ((var_x459) ? (var_x454 - var_x456) : (-var_x470 - var_x471));
        IJth(rJacobian, 24, 10) = -var_x219 * var_x520 * var_x534;
        IJth(rJacobian, 0, 11) = mSetVoltageDerivativeToZero ? 0.0 : (var_x100 * var_x243);
        IJth(rJacobian, 11, 11) = ((var_x459) ? (var_x473 + var_x474 - var_x475) : (-var_x478 - var_x479));
        IJth(rJacobian, 24, 11) = -var_x243 * var_x519 * var_x534;
        IJth(rJacobian, 0, 12) = mSetVoltageDerivativeToZero ? 0.0 : (-3 * var_x244);
        IJth(rJacobian, 12, 12) = -var_x484 - var_x488;
        IJth(rJacobian, 24, 12) = -var_x244 * var_x535;
        IJth(rJacobian, 0, 13) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x245);
        IJth(rJacobian, 13, 13) = -var_x499 - var_x503;
        IJth(rJacobian, 24, 13) = -var_x245 * var_x534;
        IJth(rJacobian, 1, 14) = var_x293 * var_x302;
        IJth(rJacobian, 14, 14) = var_x516 * (-0.0055555555555555558 - var_x515) + 0.25 * (0.0055555555555555558 * var_chaste_interface__calcium_dynamics__Ca_NSR - 0.0055555555555555558 * var_chaste_interface__calcium_dynamics__Ca_JSR - var_x278 * var_x515) / (pow(var_x509, 3) * pow((0.125 + var_x510), 2));
        IJth(rJacobian, 15, 14) = 0.00048309178743961351;
        IJth(rJacobian, 1, 15) = var_x293 * var_x306;
        IJth(rJacobian, 14, 15) = 0.0055555555555555558 * var_x511;
        IJth(rJacobian, 15, 15) = -0.00048309178743961351 - 0.066666666666666666 * var_x305;
        IJth(rJacobian, 16, 16) = (((((var_x63) || (var_x13 >= 2.6712338705498262e-6) || (var_x522 + var_x523 < -150.0))) && (((var_x13 >= 1.3356169352749131e-6) || (var_x521 + var_x523 - var_x43 * (var_x199 - var_x200) < -150.0))) && (((var_x14) || (var_x63) || (var_x522 + var_x22 * var_chaste_interface__cell__V + var_x35 * var_chaste_interface__cell__V + var_x48 * var_chaste_interface__cell__V + var_x55 * var_chaste_interface__cell__V < -150.0)))) ? (-100.5) : (-0.5));
        IJth(rJacobian, 1, 17) = var_x294 * (var_x301 * var_x313 - var_x301 * var_x314);
        IJth(rJacobian, 14, 17) = var_x516 * (var_x314 * var_x514 - var_x313 * var_x514);
        IJth(rJacobian, 17, 17) = ((var_x524) ? (-100.5) : (-0.5));
        IJth(rJacobian, 18, 18) = ((var_x524) ? (-100.5) : (-0.01));
        IJth(rJacobian, 19, 19) = (((((var_x525) || (var_x530))) && (((var_x525) || (var_x530) || (var_x63)))) ? (0) : (-0.5));
        IJth(rJacobian, 20, 20) = (((var_chaste_interface__calcium_dynamics__APtrack3 < 0.37) && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.37) && (1 / (1.0 + 0.80000000000000004 / var_chaste_interface__calcium_dynamics__Ca_JSR) > 0.69999999999999996)) ? (-50.0) : (-0.5));
        IJth(rJacobian, 21, 21) = (((var_x531) && (var_chaste_interface__calcium_dynamics__OVRLDtrack2 < 0.97999999999999998)) ? (-50.0) : (-0.5));
        IJth(rJacobian, 22, 22) = (((var_x531) && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.97999999999999998)) ? (-50.0) : (-0.01));
        IJth(rJacobian, 0, 23) = mSetVoltageDerivativeToZero ? 0.0 : (var_x249 - var_x251 - var_x252 - var_x254 - var_x257 - 3 * var_x259 + 0.00030000000000000003 * var_x260 + 0.48963716847178318 * var_x253 - 0.044999999999999998 * var_x256);
        IJth(rJacobian, 1, 23) = var_x294 * (var_x315 - var_x290 * var_x316);
        IJth(rJacobian, 14, 23) = var_x316 * var_x513;
        IJth(rJacobian, 19, 23) = ((var_x529) ? (var_x315) : (0));
        IJth(rJacobian, 23, 23) = -var_x534 * (var_x248 + var_x251 + var_x252 + var_x257 + 9.0 * var_x259 + 0.13500000000000001 * var_x256 - 0.00090000000000000008 * var_x260);
        IJth(rJacobian, 24, 23) = -var_x534 * (var_x254 + 0.48963716847178318 * var_x537 - 0.089999999999999997 * var_x256);
        IJth(rJacobian, 0, 24) = mSetVoltageDerivativeToZero ? 0.0 : (var_x249 + var_x271 - var_x262 - var_x263 - var_x264 - var_x265 - var_x266 - var_x267 - var_x268 - var_x270 + 26.712338705498265 * var_x253);
        IJth(rJacobian, 24, 24) = -var_x534 * (var_x248 + var_x262 + var_x263 + var_x264 + var_x265 + var_x266 + var_x267 + var_x268 + var_x270 - var_x271 + 26.712338705498265 * var_x537);
    }

    N_Vector Cellfaber_rudy_2000FromCellMLCvodeOpt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.2119207874627
        double var_chaste_interface__calcium_dynamics__Cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000117482029668194
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.00149183115674257
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.985596581239651
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.990898461370389
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 5.82597094505446e-06
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.997765362821995
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.00136737866785149
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.98881442877378
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.000204700363126417
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.00660746743356887
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.0303768241233812
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.0144622472219576
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.999945568566232
        double var_chaste_interface__calcium_dynamics__Ca_JSR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 1.12791401197882
        double var_chaste_interface__calcium_dynamics__APtrack2 = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 5.33944967562997e-195
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 13.3649235394859
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 24);
        // Units: millimolar; Initial value: 141.056872392446
        
        // Lookup table indexing
        const bool _oob_0 = Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfaber_rudy_2000FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_L_type_Ca_channel_f_Ca_gate__Km_Ca = 0.00059999999999999995; // millimolar
        const double var_Na_Ca_exchanger__c2 = 0.0001; // dimensionless
        const double var_Na_Ca_exchanger__gamma = 0.14999999999999999; // dimensionless
        const double var_T_type_Ca_channel__g_CaT = 0.050000000000000003; // milliS_per_microF
        const double var_calcium_background_current__g_Cab = 0.003016; // milliS_per_microF
        const double var_L_type_Ca_channel_f_Ca_gate__f_Ca = 1 / (1.0 + var_chaste_interface__calcium_dynamics__Cai / var_L_type_Ca_channel_f_Ca_gate__Km_Ca); // dimensionless
        const double var_calcium_dynamics__RyRopen = 1 / (1.0 + var_chaste_interface__calcium_dynamics__APtrack2 * exp(2.0)); // dimensionless
        const double var_calcium_dynamics__RyRclose = 1.0 - var_calcium_dynamics__RyRopen; // dimensionless
        const double var_cell__F = 96485.0; // coulomb_per_mole
        const double var_cell__R = 8314.0; // joule_per_kilomole_kelvin
        const double var_cell__T = 310.0; // kelvin
        const double var_calcium_background_current__E_Ca = 0.5 * var_cell__R * var_cell__T * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__calcium_dynamics__Cai) / var_cell__F; // millivolt
        const double var_L_type_Ca_channel__I_CaCa = ((fabs(var_chaste_interface__cell__V) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__cell__V) * (0.019296999999999998 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + var_chaste_interface__calcium_dynamics__Cai * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(9.9999999999999995e-8)) + 0.019296999999999998 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + var_chaste_interface__calcium_dynamics__Cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(-9.9999999999999995e-8))) - 0.019296999999999998 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + var_chaste_interface__calcium_dynamics__Cai * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) / (-1.0 + exp(-9.9999999999999995e-8))) : (14448.004881001343 * (-0.34100000000000003 * NV_Ith_S(mParameters, 5) + var_chaste_interface__calcium_dynamics__Cai * _lt_0_row[2]) * NV_Ith_S(mParameters, 8) * var_chaste_interface__cell__V / (_lt_0_row[3]))); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaCa = var_L_type_Ca_channel__I_CaCa * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f; // microA_per_microF
        const double var_L_type_Ca_channel_f_gate__tau_f = _lt_0_row[14]; // ms
        const double var_T_type_Ca_channel__i_Ca_T = pow(var_chaste_interface__T_type_Ca_channel_b_gate__b, 2) * (-var_calcium_background_current__E_Ca + var_chaste_interface__cell__V) * var_T_type_Ca_channel__g_CaT * var_chaste_interface__T_type_Ca_channel_g_gate__g; // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = (-var_calcium_background_current__E_Ca + var_chaste_interface__cell__V) * var_calcium_background_current__g_Cab; // microA_per_microF
        const double var_cell__I_st_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_fast_sodium_current_h_gate__alpha_h = ((var_chaste_interface__cell__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 11) - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_ms
        const double var_fast_sodium_current_h_gate__beta_h = ((var_chaste_interface__cell__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V - 0.34999999999999998 * NV_Ith_S(mParameters, 11)) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * NV_Ith_S(mParameters, 11))) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 11) - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_ms
        const double var_fast_sodium_current_h_gate__tau_h = 1 / (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h); // ms
        const double var_fast_sodium_current_j_gate__alpha_j = ((var_chaste_interface__cell__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * NV_Ith_S(mParameters, 11)) - 3.4740000000000003e-5 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 11) - 0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * NV_Ith_S(mParameters, 11)))) : (0)); // per_ms
        const double var_fast_sodium_current_j_gate__beta_j = ((var_chaste_interface__cell__V < -40.0) ? (0.1212 * exp(0.01052 * NV_Ith_S(mParameters, 11) - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 11) - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.29999999999999999 * exp(2.5349999999999999e-7 * NV_Ith_S(mParameters, 11) - 2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 11) - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double var_fast_sodium_current_j_gate__tau_j = 1 / (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j); // ms
        const double var_L_type_Ca_channel__I_CaK = ((fabs(var_chaste_interface__cell__V) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__cell__V) * (1.8621604999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 1.8621604999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 1.8621604999999999e-9 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.00069711623550831479 * (-0.75 * NV_Ith_S(mParameters, 6) + 0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[0]) * var_chaste_interface__cell__V / (_lt_0_row[1]))); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaK = var_L_type_Ca_channel__I_CaK * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f; // microA_per_microF
        const double var_L_type_Ca_channel__I_CaNa = ((fabs(var_chaste_interface__cell__V) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__cell__V) * (6.5127375e-9 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 6.5127375e-9 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 6.5127375e-9 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.0024381008236689767 * (-0.75 * NV_Ith_S(mParameters, 7) + 0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[0]) * var_chaste_interface__cell__V / (_lt_0_row[1]))); // microA_per_microF
        const double var_L_type_Ca_channel__i_CaNa = var_L_type_Ca_channel__I_CaNa * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f; // microA_per_microF
        const double var_L_type_Ca_channel__i_Ca_L = var_L_type_Ca_channel__i_CaCa + var_L_type_Ca_channel__i_CaK + var_L_type_Ca_channel__i_CaNa; // microA_per_microF
        const double var_L_type_Ca_channel__i_Ca_L_converted = HeartConfig::Instance()->GetCapacitance() * var_L_type_Ca_channel__i_Ca_L; // uA_per_cm2
        const double var_Na_Ca_exchanger__i_NaCa = (-pow(NV_Ith_S(mParameters, 7), 3) * var_chaste_interface__calcium_dynamics__Cai + pow(var_chaste_interface__ionic_concentrations__Nai, 3) * NV_Ith_S(mParameters, 5) * exp(var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))) * NV_Ith_S(mParameters, 15) * exp((-1.0 + var_Na_Ca_exchanger__gamma) * var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T)) / (1.0 + (pow(NV_Ith_S(mParameters, 7), 3) * var_chaste_interface__calcium_dynamics__Cai + pow(var_chaste_interface__ionic_concentrations__Nai, 3) * NV_Ith_S(mParameters, 5) * exp(var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))) * var_Na_Ca_exchanger__c2 * exp((-1.0 + var_Na_Ca_exchanger__gamma) * var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))); // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_Na_Ca_exchanger__i_NaCa; // uA_per_cm2
        const double var_fast_sodium_current__E_Na = var_cell__R * var_cell__T * log(NV_Ith_S(mParameters, 7) / var_chaste_interface__ionic_concentrations__Nai) / var_cell__F; // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 9) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // microA_per_microF
        const double var_fast_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_rapid_delayed_rectifier_potassium_current__Rect = 1 / (_lt_0_row[8]); // dimensionless
        const double var_rapid_delayed_rectifier_potassium_current__g_Kr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * NV_Ith_S(mParameters, 13); // milliS_per_microF
        const double var_sarcolemmal_calcium_pump__I_pCa = 1.1499999999999999; // microA_per_microF
        const double var_sarcolemmal_calcium_pump__K_mpCa = 0.00050000000000000001; // millimolar
        const double var_sarcolemmal_calcium_pump__i_p_Ca = var_chaste_interface__calcium_dynamics__Cai * var_sarcolemmal_calcium_pump__I_pCa / (var_chaste_interface__calcium_dynamics__Cai + var_sarcolemmal_calcium_pump__K_mpCa); // microA_per_microF
        const double var_calcium_dynamics__G_rel = 150.0 * var_calcium_dynamics__RyRclose * var_calcium_dynamics__RyRopen / (1.0 + exp(5.5555555555555554 + 1.1111111111111112 * var_L_type_Ca_channel__i_CaCa + 1.1111111111111112 * var_T_type_Ca_channel__i_Ca_T + 1.1111111111111112 * var_calcium_background_current__i_Ca_b + 1.1111111111111112 * var_sarcolemmal_calcium_pump__i_p_Ca - 2.2222222222222223 * var_Na_Ca_exchanger__i_NaCa)); // per_ms
        const double var_calcium_dynamics__i_rel = (-var_chaste_interface__calcium_dynamics__Cai + var_chaste_interface__calcium_dynamics__Ca_JSR) * var_calcium_dynamics__G_rel; // millimolar_per_ms
        const double var_slow_delayed_rectifier_potassium_current__PNaK = 0.018329999999999999; // dimensionless
        const double var_slow_delayed_rectifier_potassium_current__E_Ks = var_cell__R * var_cell__T * log((NV_Ith_S(mParameters, 7) * var_slow_delayed_rectifier_potassium_current__PNaK + NV_Ith_S(mParameters, 6)) / (var_chaste_interface__ionic_concentrations__Nai * var_slow_delayed_rectifier_potassium_current__PNaK + var_chaste_interface__ionic_concentrations__Ki)) / var_cell__F; // millivolt
        const double var_slow_delayed_rectifier_potassium_current__g_Ks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__calcium_dynamics__Cai), 1.3999999999999999))) * NV_Ith_S(mParameters, 14); // milliS_per_microF
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = (-var_slow_delayed_rectifier_potassium_current__E_Ks + var_chaste_interface__cell__V) * var_slow_delayed_rectifier_potassium_current__g_Ks * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2; // microA_per_microF
        const double var_slow_delayed_rectifier_potassium_current__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_slow_delayed_rectifier_potassium_current__i_Ks; // uA_per_cm2
        const double var_time_independent_potassium_current__E_K = var_cell__R * var_cell__T * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__ionic_concentrations__Ki) / var_cell__F; // millivolt
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = (-var_time_independent_potassium_current__E_K + var_chaste_interface__cell__V) * var_rapid_delayed_rectifier_potassium_current__Rect * var_rapid_delayed_rectifier_potassium_current__g_Kr * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr; // microA_per_microF
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_rapid_delayed_rectifier_potassium_current__i_Kr; // uA_per_cm2
        const double var_time_independent_potassium_current__g_K1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * NV_Ith_S(mParameters, 12); // milliS_per_microF
        const double var_time_independent_potassium_current_K1_gate__alpha_K1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K)); // per_ms
        const double var_time_independent_potassium_current_K1_gate__beta_K1 = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_time_independent_potassium_current__E_K) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_time_independent_potassium_current__E_K)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_time_independent_potassium_current__E_K - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_time_independent_potassium_current_K1_gate__K1_infinity = var_time_independent_potassium_current_K1_gate__alpha_K1 / (var_time_independent_potassium_current_K1_gate__alpha_K1 + var_time_independent_potassium_current_K1_gate__beta_K1); // dimensionless
        const double var_time_independent_potassium_current__i_K1 = (-var_time_independent_potassium_current__E_K + var_chaste_interface__cell__V) * var_time_independent_potassium_current__g_K1 * var_time_independent_potassium_current_K1_gate__K1_infinity; // microA_per_microF
        const double var_time_independent_potassium_current__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_time_independent_potassium_current__i_K1; // uA_per_cm2
        const double var_transient_outward_current__rvdv = _lt_0_row[10]; // dimensionless
        const double var_transient_outward_current__i_to = pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 3) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 16) * var_transient_outward_current__rvdv * var_chaste_interface__transient_outward_current_ydv_gate__ydv; // microA_per_microF
        const double var_transient_outward_current__i_to_converted = HeartConfig::Instance()->GetCapacitance() * var_transient_outward_current__i_to; // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(17);
        NV_Ith_S(dqs, 0) = var_calcium_dynamics__i_rel;
        NV_Ith_S(dqs, 1) = var_L_type_Ca_channel__i_Ca_L_converted;
        NV_Ith_S(dqs, 2) = var_L_type_Ca_channel_f_Ca_gate__f_Ca;
        NV_Ith_S(dqs, 3) = var_L_type_Ca_channel_f_gate__tau_f;
        NV_Ith_S(dqs, 4) = var_fast_sodium_current__i_Na_converted;
        NV_Ith_S(dqs, 5) = var_fast_sodium_current_h_gate__tau_h;
        NV_Ith_S(dqs, 6) = var_fast_sodium_current_j_gate__tau_j;
        NV_Ith_S(dqs, 7) = var_time_independent_potassium_current__i_K1_converted;
        NV_Ith_S(dqs, 8) = var_time_independent_potassium_current__g_K1;
        NV_Ith_S(dqs, 9) = var_rapid_delayed_rectifier_potassium_current__i_Kr_converted;
        NV_Ith_S(dqs, 10) = var_rapid_delayed_rectifier_potassium_current__g_Kr;
        NV_Ith_S(dqs, 11) = var_slow_delayed_rectifier_potassium_current__i_Ks_converted;
        NV_Ith_S(dqs, 12) = var_slow_delayed_rectifier_potassium_current__g_Ks;
        NV_Ith_S(dqs, 13) = var_Na_Ca_exchanger__i_NaCa_converted;
        NV_Ith_S(dqs, 14) = var_cell__I_st_converted;
        NV_Ith_S(dqs, 15) = var_transient_outward_current__i_to_converted;
        NV_Ith_S(dqs, 16) = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellfaber_rudy_2000FromCellMLCvodeOpt>::Initialise(void)
{
    this->mSystemName = "faber_rudy_2000";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "ms";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-85.2119207874627);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.000117482029668194);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00149183115674257);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.985596581239651);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.990898461370389);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.82597094505446e-06);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.997765362821995);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("T_type_Ca_channel_b_gate__b");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00136737866785149);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("T_type_Ca_channel_g_gate__g");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.98881442877378);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("rapid_delayed_rectifier_potassium_current_xr_gate__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000204700363126417);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("slow_delayed_rectifier_potassium_current_xs1_gate__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00660746743356887);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("slow_delayed_rectifier_potassium_current_xs2_gate__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0303768241233812);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("transient_outward_current_zdv_gate__zdv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0144622472219576);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("transient_outward_current_ydv_gate__ydv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999945568566232);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.12791401197882);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("calcium_dynamics__Ca_NSR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.76731003671612);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("calcium_dynamics__APtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(9.65910542308504e-196);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("calcium_dynamics__APtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.33944967562997e-195);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("calcium_dynamics__APtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000129515197402902);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("calcium_dynamics__Cainfluxtrack");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(2.69380318286645e-196);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("calcium_dynamics__OVRLDtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("calcium_dynamics__OVRLDtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 22):
    this->mVariableNames.push_back("calcium_dynamics__OVRLDtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 23):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(13.3649235394859);

    // NV_Ith_S(rY, 24):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(141.056872392446);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_ms");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_release_kmcacyt");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[3]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("millimolar_per_ms");

    // mParameters[4]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[7]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("litre_per_farad_ms");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("millivolt");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("microA_per_microF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_ms");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f_gate_tau");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("ms");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellfaber_rudy_2000FromCellMLCvodeOpt)

#endif // CHASTE_CVODE
