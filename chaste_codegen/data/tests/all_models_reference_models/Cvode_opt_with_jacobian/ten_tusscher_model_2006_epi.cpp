#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: tentusscher_model_2006_epi
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvodeOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "ten_tusscher_model_2006_epi.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<22; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables(const Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables&);
    Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables& operator= (const Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables&);
    Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 22;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][22];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + exp(4.1806020066889626 - 0.16722408026755853 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(-1.0666666666666667 - 0.13333333333333333 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(2.5 - 0.050000000000000003 * var_chaste_interface__membrane__V)) + 1.3999999999999999 * (0.25 + 1.3999999999999999 / (1.0 + exp(-2.6923076923076925 - 0.076923076923076927 * var_chaste_interface__membrane__V))) / (1.0 + exp(1.0 + 0.20000000000000001 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.67000000000000004 / (1.0 + exp(5.0 + 0.14285714285714285 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 80.0 / (1.0 + exp(3.0 + 0.10000000000000001 * var_chaste_interface__membrane__V)) + 31.0 / (1.0 + exp(2.5 - 0.10000000000000001 * var_chaste_interface__membrane__V)) + 562.0 * exp(-3.0375000000000001 * pow((1 + 0.037037037037037035 * var_chaste_interface__membrane__V), 2));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(2.8571428571428572 + 0.14285714285714285 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 20.0 + 200.0 / (1.0 + exp(1.3 - 0.10000000000000001 * var_chaste_interface__membrane__V)) + 180.0 / (1.0 + exp(3.0 + 0.10000000000000001 * var_chaste_interface__membrane__V)) + 1102.5 * exp(-3.2400000000000002 * pow((1 + 0.037037037037037035 * var_chaste_interface__membrane__V), 2));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / pow((1.0 + exp(-6.2967884828349945 - 0.11074197120708749 * var_chaste_interface__membrane__V)), 2);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.10000000000000001 / (1.0 + exp(7.0 + 0.20000000000000001 * var_chaste_interface__membrane__V)) + 0.10000000000000001 / (1.0 + exp(-0.25 + 0.0050000000000000001 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + exp(-12.0 - 0.20000000000000001 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(-3.7142857142857144 - 0.14285714285714285 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + exp(2.6086956521739131 + 0.086956521739130432 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + exp(-4.5 - 0.10000000000000001 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(3.6666666666666665 + 0.041666666666666664 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + exp(-3.0 + 0.050000000000000003 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + exp(-3.0 - 0.050000000000000003 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(-0.35714285714285715 - 0.071428571428571425 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 80.0 + 1400.0 / (sqrt(1.0 + exp(0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__membrane__V)) * (1.0 + exp(-2.3333333333333335 + 0.066666666666666666 * var_chaste_interface__membrane__V)));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(3.3333333333333335 - 0.16666666666666666 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.80000000000000004 + 9.5 * exp(-0.88888888888888884 * pow((1 + 0.025000000000000001 * var_chaste_interface__membrane__V), 2));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(4.0 + 0.20000000000000001 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 3.0 + 5.0 / (1.0 + exp(-4.0 + 0.20000000000000001 * var_chaste_interface__membrane__V)) + 85.0 * exp(-6.328125 * pow((1 + 0.022222222222222223 * var_chaste_interface__membrane__V), 2));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][21] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[22];

    // Lookup tables
    double (*_lookup_table_0)[22];
    int _lookup_table_0_num_misshit_piecewise[22] = {0};

};

std::shared_ptr<Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables> Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables::mpInstance;


    boost::shared_ptr<RegularStimulus> Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_amplitude_converted = -52.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__stim_duration = 1.0; // millisecond
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_start = 100.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude_converted),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt::Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                19,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 0.00036000000000000002; // (var_calcium_dynamics__V_leak) [per_millisecond]
        NV_Ith_S(this->mParameters, 1) = 0.10199999999999999; // (var_calcium_dynamics__V_rel) [per_millisecond]
        NV_Ith_S(this->mParameters, 2) = 0.0063749999999999996; // (var_calcium_dynamics__Vmax_up) [millimolar_per_millisecond]
        NV_Ith_S(this->mParameters, 3) = 1.0; // (var_sodium_dynamics__conc_clamp) [dimensionless]
        NV_Ith_S(this->mParameters, 4) = 2.0; // (var_calcium_dynamics__Ca_o) [millimolar]
        NV_Ith_S(this->mParameters, 5) = 5.4000000000000004; // (var_potassium_dynamics__K_o) [millimolar]
        NV_Ith_S(this->mParameters, 6) = 140.0; // (var_sodium_dynamics__Na_o) [millimolar]
        NV_Ith_S(this->mParameters, 7) = 96485.341499999995; // (var_membrane__F) [coulomb_per_millimole]
        NV_Ith_S(this->mParameters, 8) = 8314.4719999999998; // (var_membrane__R) [joule_per_mole_kelvin]
        NV_Ith_S(this->mParameters, 9) = 3.9799999999999998e-5; // (var_L_type_Ca_current__g_CaL) [litre_per_farad_second]
        NV_Ith_S(this->mParameters, 10) = 0.00059199999999999997; // (var_calcium_background_current__g_bca) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 11) = 0.00029; // (var_sodium_background_current__g_bna) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 12) = 0.185; // (var_membrane__Cm) [microF]
        NV_Ith_S(this->mParameters, 13) = 14.837999999999999; // (var_fast_sodium_current__g_Na) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 14) = 0; // (var_fast_sodium_current__perc_reduced_inact_for_IpNa) [dimensionless]
        NV_Ith_S(this->mParameters, 15) = 0; // (var_fast_sodium_current__shift_INa_inact) [millivolt]
        NV_Ith_S(this->mParameters, 16) = 5.4050000000000002; // (var_inward_rectifier_potassium_current__g_K1) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 17) = 0.0146; // (var_potassium_pump_current__g_pK) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 18) = 0.153; // (var_rapid_time_dependent_potassium_current__g_Kr) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 19) = 0.39200000000000002; // (var_slow_time_dependent_potassium_current__g_Ks) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 20) = 1000.0; // (var_sodium_calcium_exchanger_current__K_NaCa) [picoA_per_picoF]
        NV_Ith_S(this->mParameters, 21) = 0.29399999999999998; // (var_transient_outward_current__g_to) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 22) = 310.0; // (var_membrane__T) [kelvin]
    }

    Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt::~Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt()
    {
    }

    AbstractLookupTableCollection* Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt::GetLookupTableCollection()
    {
        return Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables::Instance();
    }
    

    void Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt::VerifyStateVariables()
    {
        /* We only expect CVODE to keep state variables to within its tolerances,
         * not exactly the bounds prescribed to each variable that are checked here.
         *
         * For 99.99% of paces this->mAbsTol works,
         * For 99.999% of paces 10*this->mAbsTol is fine,
         * but unfortunately 100x seems to be required on rare occasions for upstrokes.
         * This sounds bad, but is probably typically only 1e-5 or 1e-6.
         */
        const double tol = 100*this->mAbsTol;
        N_Vector rY = rGetStateVariables();
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.373e-05
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.9953
        
        if (var_chaste_interface__fast_sodium_current_m_gate__m < 0.0 - tol || var_chaste_interface__fast_sodium_current_m_gate__m > 1.0 + tol)
        {
            EXCEPTION(DumpState("State variable membrane_fast_sodium_current_m_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__fast_sodium_current_h_gate__h < 0.0 - tol || var_chaste_interface__fast_sodium_current_h_gate__h > 1.0 + tol)
        {
            EXCEPTION(DumpState("State variable membrane_fast_sodium_current_h_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__fast_sodium_current_j_gate__j < 0.0 - tol || var_chaste_interface__fast_sodium_current_j_gate__j > 1.0 + tol)
        {
            EXCEPTION(DumpState("State variable membrane_fast_sodium_current_j_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__L_type_Ca_current_d_gate__d < 0.0 - tol || var_chaste_interface__L_type_Ca_current_d_gate__d > 1.0 + tol)
        {
            EXCEPTION(DumpState("State variable membrane_L_type_calcium_current_d_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__L_type_Ca_current_f_gate__f < 0.0 - tol || var_chaste_interface__L_type_Ca_current_f_gate__f > 1.0 + tol)
        {
            EXCEPTION(DumpState("State variable membrane_L_type_calcium_current_f_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__L_type_Ca_current_f2_gate__f2 < 0.0 - tol || var_chaste_interface__L_type_Ca_current_f2_gate__f2 > 1.0 + tol)
        {
            EXCEPTION(DumpState("State variable membrane_L_type_calcium_current_f2_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        if (var_chaste_interface__L_type_Ca_current_fCass_gate__fCass < 0.0 - tol || var_chaste_interface__L_type_Ca_current_fCass_gate__fCass > 1.0 + tol)
        {
            EXCEPTION(DumpState("State variable membrane_L_type_calcium_current_fCa_gate has gone out of range. Check numerical parameters, for example time and space stepsizes, and/or solver tolerances"));
        }
        
    }

    
    double Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000126
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.373e-05
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 2.42e-08
        double var_chaste_interface__calcium_dynamics__Ca_ss = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__sodium_dynamics__Na_i = NV_Ith_S(rY, 17);
        // Units: millimolar; Initial value: 8.604
        double var_chaste_interface__potassium_dynamics__K_i = NV_Ith_S(rY, 18);
        // Units: millimolar; Initial value: 136.89
        
        // Lookup table indexing
        const bool _oob_0 = Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        const double var_calcium_pump_current__i_p_Ca_converted = 0.12379999999999999 * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__calcium_dynamics__Ca_i / (0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Ca_i); // uA_per_cm2
        const double var_L_type_Ca_current__i_CaL_converted = 4.0 * pow(NV_Ith_S(mParameters, 7), 2) * HeartConfig::Instance()->GetCapacitance() * ((fabs(-15.0 + var_chaste_interface__membrane__V) < 4.9999999999999998e-8 * fabs(NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) / NV_Ith_S(mParameters, 7))) ? (10000000.0 * (4.9999999999999998e-8 * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) / ((-1.0 + exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 7)) + 4.9999999999999998e-8 * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) / ((-1.0 + exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 7))) * (-15.0 + 4.9999999999999998e-8 * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) / NV_Ith_S(mParameters, 7) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 7) / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)) - 4.9999999999999998e-8 * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) / ((-1.0 + exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 7))) : ((-15.0 + var_chaste_interface__membrane__V) * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(2.0 * (-15.0 + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 7) / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)))) / (-1.0 + exp(2.0 * (-15.0 + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 7) / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)))))) * NV_Ith_S(mParameters, 9) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * var_chaste_interface__L_type_Ca_current_f_gate__f / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)); // uA_per_cm2
        const double var_calcium_background_current__i_b_Ca_converted = (-0.5 * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__calcium_dynamics__Ca_i) / NV_Ith_S(mParameters, 7) + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 10); // uA_per_cm2
        const double var_reversal_potentials__E_K = NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__potassium_dynamics__K_i) / NV_Ith_S(mParameters, 7); // millivolt
        const double var_inward_rectifier_potassium_current__i_K1_converted = 0.043033148291193521 * sqrt(NV_Ith_S(mParameters, 5)) * (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 16) / ((1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_reversal_potentials__E_K)) * (0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_reversal_potentials__E_K)) + (3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__membrane__V - 0.00020000000000000001 * var_reversal_potentials__E_K) + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__V - 0.10000000000000001 * var_reversal_potentials__E_K)) / (1.0 + exp(0.5 * var_reversal_potentials__E_K - 0.5 * var_chaste_interface__membrane__V)))); // uA_per_cm2
        const double var_potassium_pump_current__i_p_K_converted = (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 17) / (_lt_0_row[0]); // uA_per_cm2
        const double var_rapid_time_dependent_potassium_current__i_Kr_converted = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 5)) * (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 18) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2; // uA_per_cm2
        const double var_reversal_potentials__E_Na = NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__sodium_dynamics__Na_i) / NV_Ith_S(mParameters, 7); // millivolt
        const double var_fast_sodium_current__i_Na_converted = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_reversal_potentials__E_Na + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 13) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // uA_per_cm2
        const double var_slow_time_dependent_potassium_current__i_Ks_converted = pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2) * (-NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) * log((0.029999999999999999 * NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 5)) / (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i + var_chaste_interface__potassium_dynamics__K_i)) / NV_Ith_S(mParameters, 7) + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 19); // uA_per_cm2
        const double var_sodium_background_current__i_b_Na_converted = (-var_reversal_potentials__E_Na + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 11); // uA_per_cm2
        const double var_sodium_calcium_exchanger_current__i_NaCa_converted = (pow(var_chaste_interface__sodium_dynamics__Na_i, 3) * NV_Ith_S(mParameters, 4) * exp(0.34999999999999998 * NV_Ith_S(mParameters, 7) * var_chaste_interface__membrane__V / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22))) - 2.5 * pow(NV_Ith_S(mParameters, 6), 3) * var_chaste_interface__calcium_dynamics__Ca_i * exp(-0.65000000000000002 * NV_Ith_S(mParameters, 7) * var_chaste_interface__membrane__V / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)))) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 20) / ((1.0 + 0.10000000000000001 * exp(-0.65000000000000002 * NV_Ith_S(mParameters, 7) * var_chaste_interface__membrane__V / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)))) * (669921.875 + pow(NV_Ith_S(mParameters, 6), 3)) * (1.3799999999999999 + NV_Ith_S(mParameters, 4))); // uA_per_cm2
        const double var_sodium_potassium_pump_current__i_NaK = 2.7240000000000002 * NV_Ith_S(mParameters, 5) * var_chaste_interface__sodium_dynamics__Na_i / ((1.0 + NV_Ith_S(mParameters, 5)) * (40.0 + var_chaste_interface__sodium_dynamics__Na_i) * (1.0 + 0.035299999999999998 * exp(-NV_Ith_S(mParameters, 7) * var_chaste_interface__membrane__V / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22))) + 0.1245 * exp(-0.10000000000000001 * NV_Ith_S(mParameters, 7) * var_chaste_interface__membrane__V / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22))))); // picoA_per_picoF
        const double var_transient_outward_current__i_to_converted = (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 21) * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s; // uA_per_cm2
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_sodium_potassium_pump_current__i_NaK + var_L_type_Ca_current__i_CaL_converted + var_calcium_background_current__i_b_Ca_converted + var_calcium_pump_current__i_p_Ca_converted + var_fast_sodium_current__i_Na_converted + var_inward_rectifier_potassium_current__i_K1_converted + var_potassium_pump_current__i_p_K_converted + var_rapid_time_dependent_potassium_current__i_Kr_converted + var_slow_time_dependent_potassium_current__i_Ks_converted + var_sodium_background_current__i_b_Na_converted + var_sodium_calcium_exchanger_current__i_NaCa_converted + var_transient_outward_current__i_to_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000126
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.373e-05
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 2.42e-08
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 3.64
        double var_chaste_interface__calcium_dynamics__Ca_ss = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__calcium_dynamics__R_prime = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.9073
        double var_chaste_interface__sodium_dynamics__Na_i = NV_Ith_S(rY, 17);
        // Units: millimolar; Initial value: 8.604
        double var_chaste_interface__potassium_dynamics__K_i = NV_Ith_S(rY, 18);
        // Units: millimolar; Initial value: 136.89

        // Lookup table indexing
        const bool _oob_0 = Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        double d_dt_chaste_interface_var_membrane__V;
        const double d_dt_chaste_interface_var_L_type_Ca_current_fCass_gate__fCass = (0.40000000000000002 - var_chaste_interface__L_type_Ca_current_fCass_gate__fCass + 0.59999999999999998 / (1.0 + 399.99999999999994 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2))) / (2.0 + 80.0 / (1.0 + 399.99999999999994 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2))); // 1 / millisecond
        const double var_calcium_dynamics__i_leak = (-var_chaste_interface__calcium_dynamics__Ca_i + var_chaste_interface__calcium_dynamics__Ca_SR) * NV_Ith_S(mParameters, 0); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_up = NV_Ith_S(mParameters, 2) / (1.0 + 6.2499999999999997e-8 / pow(var_chaste_interface__calcium_dynamics__Ca_i, 2)); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_xfer = 0.0038 * var_chaste_interface__calcium_dynamics__Ca_ss - 0.0038 * var_chaste_interface__calcium_dynamics__Ca_i; // millimolar_per_millisecond
        const double var_calcium_dynamics__kcasr = 2.5 - 1.5 / (1.0 + 2.25 / pow(var_chaste_interface__calcium_dynamics__Ca_SR, 2)); // dimensionless
        const double var_calcium_dynamics__i_rel = 0.14999999999999999 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2) * (-var_chaste_interface__calcium_dynamics__Ca_ss + var_chaste_interface__calcium_dynamics__Ca_SR) * var_chaste_interface__calcium_dynamics__R_prime * NV_Ith_S(mParameters, 1) / ((0.059999999999999998 + 0.14999999999999999 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2) / var_calcium_dynamics__kcasr) * var_calcium_dynamics__kcasr); // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_dynamics__Ca_SR = (-var_calcium_dynamics__i_leak - var_calcium_dynamics__i_rel + var_calcium_dynamics__i_up) / (1.0 + 3.0 / pow((0.29999999999999999 + var_chaste_interface__calcium_dynamics__Ca_SR), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_calcium_dynamics__R_prime = 0.0050000000000000001 - 0.0050000000000000001 * var_chaste_interface__calcium_dynamics__R_prime - 0.044999999999999998 * var_chaste_interface__calcium_dynamics__Ca_ss * var_chaste_interface__calcium_dynamics__R_prime * var_calcium_dynamics__kcasr; // 1 / millisecond
        const double var_calcium_pump_current__i_p_Ca = 0.12379999999999999 * var_chaste_interface__calcium_dynamics__Ca_i / (0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Ca_i); // picoA_per_picoF
        const double var_L_type_Ca_current__i_CaL = 4.0 * pow(NV_Ith_S(mParameters, 7), 2) * ((fabs(-15.0 + var_chaste_interface__membrane__V) < 4.9999999999999998e-8 * fabs(NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) / NV_Ith_S(mParameters, 7))) ? (10000000.0 * (4.9999999999999998e-8 * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) / ((-1.0 + exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 7)) + 4.9999999999999998e-8 * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) / ((-1.0 + exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 7))) * (-15.0 + 4.9999999999999998e-8 * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) / NV_Ith_S(mParameters, 7) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 7) / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)) - 4.9999999999999998e-8 * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) / ((-1.0 + exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 7))) : ((-15.0 + var_chaste_interface__membrane__V) * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(2.0 * (-15.0 + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 7) / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)))) / (-1.0 + exp(2.0 * (-15.0 + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 7) / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)))))) * NV_Ith_S(mParameters, 9) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * var_chaste_interface__L_type_Ca_current_f_gate__f / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)); // picoA_per_picoF
        const double d_dt_chaste_interface_var_L_type_Ca_current_d_gate__d = (-var_chaste_interface__L_type_Ca_current_d_gate__d + _lt_0_row[1]) / (_lt_0_row[2]); // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_Ca_current_f2_gate__f2 = (0.33000000000000002 - var_chaste_interface__L_type_Ca_current_f2_gate__f2 + _lt_0_row[3]) / (_lt_0_row[4]); // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_Ca_current_f_gate__f = (-var_chaste_interface__L_type_Ca_current_f_gate__f + _lt_0_row[5]) / (_lt_0_row[6]); // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_h_gate__h = (((var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 15)) ? (0.057000000000000002 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 15) - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0)) + ((var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 15)) ? (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane__V - 0.34849999999999998 * NV_Ith_S(mParameters, 15)) + 2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane__V - 0.079000000000000001 * NV_Ith_S(mParameters, 15))) : (5.9230769230769234 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 15) - 0.0900900900900901 * var_chaste_interface__membrane__V))))) * (-var_chaste_interface__fast_sodium_current_h_gate__h + 0.01 * NV_Ith_S(mParameters, 14) + (1.0 - 0.01 * NV_Ith_S(mParameters, 14)) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__membrane__V - 0.13458950201884254 * NV_Ith_S(mParameters, 15))), 2)); // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_j_gate__j = (((var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 15)) ? (0.024240000000000001 * exp(0.01052 * NV_Ith_S(mParameters, 15) - 0.01052 * var_chaste_interface__membrane__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 15) - 0.13780000000000001 * var_chaste_interface__membrane__V))) : (0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane__V - 0.057000000000000002 * NV_Ith_S(mParameters, 15)) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 15) - 0.10000000000000001 * var_chaste_interface__membrane__V)))) + ((var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 15)) ? ((37.780000000000001 + var_chaste_interface__membrane__V) * (-25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V - 0.24440000000000001 * NV_Ith_S(mParameters, 15)) - 6.9480000000000002e-6 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 15) - 0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V - 0.311 * NV_Ith_S(mParameters, 15)))) : (0))) * (-var_chaste_interface__fast_sodium_current_j_gate__j + 0.01 * NV_Ith_S(mParameters, 14) + (1.0 - 0.01 * NV_Ith_S(mParameters, 14)) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__membrane__V - 0.13458950201884254 * NV_Ith_S(mParameters, 15))), 2)); // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_m_gate__m = (_lt_0_row[9]) * (-var_chaste_interface__fast_sodium_current_m_gate__m + _lt_0_row[7]) / (_lt_0_row[8]); // 1 / millisecond
        const double d_dt_chaste_interface_var_calcium_dynamics__Ca_ss = (20.007315288953912 * var_calcium_dynamics__i_rel - 300.0 * var_calcium_dynamics__i_xfer - 9144.1111923920998 * var_L_type_Ca_current__i_CaL * NV_Ith_S(mParameters, 12) / NV_Ith_S(mParameters, 7)) / (1.0 + 0.0001 / pow((0.00025000000000000001 + var_chaste_interface__calcium_dynamics__Ca_ss), 2)); // millimolar / millisecond
        const double var_membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // picoA_per_picoF
        const double d_dt_chaste_interface_var_rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = 0.00037037037037037035 * (_lt_0_row[11]) * (_lt_0_row[12]) * (-var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 + _lt_0_row[10]); // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = 0.29761904761904762 * (_lt_0_row[14]) * (_lt_0_row[15]) * (-var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 + _lt_0_row[13]); // 1 / millisecond
        const double var_calcium_background_current__i_b_Ca = (-0.5 * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__calcium_dynamics__Ca_i) / NV_Ith_S(mParameters, 7) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 10); // picoA_per_picoF
        const double var_reversal_potentials__E_K = NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__potassium_dynamics__K_i) / NV_Ith_S(mParameters, 7); // millivolt
        const double var_inward_rectifier_potassium_current__i_K1 = 0.043033148291193521 * sqrt(NV_Ith_S(mParameters, 5)) * (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 16) / ((1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_reversal_potentials__E_K)) * (0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_reversal_potentials__E_K)) + (3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__membrane__V - 0.00020000000000000001 * var_reversal_potentials__E_K) + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__V - 0.10000000000000001 * var_reversal_potentials__E_K)) / (1.0 + exp(0.5 * var_reversal_potentials__E_K - 0.5 * var_chaste_interface__membrane__V)))); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K = (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 17) / (_lt_0_row[0]); // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 5)) * (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 18) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2; // picoA_per_picoF
        const double d_dt_chaste_interface_var_slow_time_dependent_potassium_current_Xs_gate__Xs = (-var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs + _lt_0_row[16]) / (_lt_0_row[17]); // 1 / millisecond
        const double var_reversal_potentials__E_Na = NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__sodium_dynamics__Na_i) / NV_Ith_S(mParameters, 7); // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_reversal_potentials__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 13) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks = pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2) * (-NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) * log((0.029999999999999999 * NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 5)) / (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i + var_chaste_interface__potassium_dynamics__K_i)) / NV_Ith_S(mParameters, 7) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 19); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na = (-var_reversal_potentials__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 11); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa = (pow(var_chaste_interface__sodium_dynamics__Na_i, 3) * NV_Ith_S(mParameters, 4) * exp(0.34999999999999998 * NV_Ith_S(mParameters, 7) * var_chaste_interface__membrane__V / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22))) - 2.5 * pow(NV_Ith_S(mParameters, 6), 3) * var_chaste_interface__calcium_dynamics__Ca_i * exp(-0.65000000000000002 * NV_Ith_S(mParameters, 7) * var_chaste_interface__membrane__V / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)))) * NV_Ith_S(mParameters, 20) / ((1.0 + 0.10000000000000001 * exp(-0.65000000000000002 * NV_Ith_S(mParameters, 7) * var_chaste_interface__membrane__V / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)))) * (669921.875 + pow(NV_Ith_S(mParameters, 6), 3)) * (1.3799999999999999 + NV_Ith_S(mParameters, 4))); // picoA_per_picoF
        const double d_dt_chaste_interface_var_calcium_dynamics__Ca_i = (0.066691050963179718 * var_calcium_dynamics__i_leak - 0.066691050963179718 * var_calcium_dynamics__i_up - 30.480370641307001 * (-2.0 * var_sodium_calcium_exchanger_current__i_NaCa + var_calcium_background_current__i_b_Ca + var_calcium_pump_current__i_p_Ca) * NV_Ith_S(mParameters, 12) / NV_Ith_S(mParameters, 7) + var_calcium_dynamics__i_xfer) / (1.0 + 0.00020000000000000001 / pow((0.001 + var_chaste_interface__calcium_dynamics__Ca_i), 2)); // millimolar / millisecond
        const double var_sodium_potassium_pump_current__i_NaK = 2.7240000000000002 * NV_Ith_S(mParameters, 5) * var_chaste_interface__sodium_dynamics__Na_i / ((1.0 + NV_Ith_S(mParameters, 5)) * (40.0 + var_chaste_interface__sodium_dynamics__Na_i) * (1.0 + 0.035299999999999998 * exp(-NV_Ith_S(mParameters, 7) * var_chaste_interface__membrane__V / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22))) + 0.1245 * exp(-0.10000000000000001 * NV_Ith_S(mParameters, 7) * var_chaste_interface__membrane__V / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22))))); // picoA_per_picoF
        const double d_dt_chaste_interface_var_sodium_dynamics__Na_i = -60.960741282614002 * (3.0 * var_sodium_calcium_exchanger_current__i_NaCa + 3.0 * var_sodium_potassium_pump_current__i_NaK + var_fast_sodium_current__i_Na + var_sodium_background_current__i_b_Na) * NV_Ith_S(mParameters, 12) * NV_Ith_S(mParameters, 3) / NV_Ith_S(mParameters, 7); // millimolar / millisecond
        const double d_dt_chaste_interface_var_transient_outward_current_r_gate__r = (-var_chaste_interface__transient_outward_current_r_gate__r + _lt_0_row[18]) / (_lt_0_row[19]); // 1 / millisecond
        const double var_transient_outward_current__i_to = (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 21) * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s; // picoA_per_picoF
        const double d_dt_chaste_interface_var_potassium_dynamics__K_i = -60.960741282614002 * (-2.0 * var_sodium_potassium_pump_current__i_NaK + var_inward_rectifier_potassium_current__i_K1 + var_membrane__i_Stim + var_potassium_pump_current__i_p_K + var_rapid_time_dependent_potassium_current__i_Kr + var_slow_time_dependent_potassium_current__i_Ks + var_transient_outward_current__i_to) * NV_Ith_S(mParameters, 12) * NV_Ith_S(mParameters, 3) / NV_Ith_S(mParameters, 7); // millimolar / millisecond
        const double d_dt_chaste_interface_var_transient_outward_current_s_gate__s = (-var_chaste_interface__transient_outward_current_s_gate__s + _lt_0_row[20]) / (_lt_0_row[21]); // 1 / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_membrane__V = -var_L_type_Ca_current__i_CaL - var_calcium_background_current__i_b_Ca - var_calcium_pump_current__i_p_Ca - var_fast_sodium_current__i_Na - var_inward_rectifier_potassium_current__i_K1 - var_membrane__i_Stim - var_potassium_pump_current__i_p_K - var_rapid_time_dependent_potassium_current__i_Kr - var_slow_time_dependent_potassium_current__i_Ks - var_sodium_background_current__i_b_Na - var_sodium_calcium_exchanger_current__i_NaCa - var_sodium_potassium_pump_current__i_NaK - var_transient_outward_current__i_to; // millivolt / millisecond
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_membrane__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_calcium_dynamics__Ca_i;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_rapid_time_dependent_potassium_current_Xr1_gate__Xr1;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_rapid_time_dependent_potassium_current_Xr2_gate__Xr2;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_slow_time_dependent_potassium_current_Xs_gate__Xs;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_fast_sodium_current_m_gate__m;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_fast_sodium_current_h_gate__h;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_fast_sodium_current_j_gate__j;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_L_type_Ca_current_d_gate__d;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_L_type_Ca_current_f_gate__f;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_L_type_Ca_current_f2_gate__f2;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_L_type_Ca_current_fCass_gate__fCass;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_transient_outward_current_s_gate__s;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_transient_outward_current_r_gate__r;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_calcium_dynamics__Ca_SR;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_calcium_dynamics__Ca_ss;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_calcium_dynamics__R_prime;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_sodium_dynamics__Na_i;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_potassium_dynamics__K_i;
    }

    void Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000126
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.373e-05
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 2.42e-08
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 3.64
        double var_chaste_interface__calcium_dynamics__Ca_ss = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__calcium_dynamics__R_prime = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.9073
        double var_chaste_interface__sodium_dynamics__Na_i = NV_Ith_S(rY, 17);
        // Units: millimolar; Initial value: 8.604
        double var_chaste_interface__potassium_dynamics__K_i = NV_Ith_S(rY, 18);
        // Units: millimolar; Initial value: 136.89
        
const double var_x0 = exp(9.9999999999999995e-8);
        const double var_x1 = 1 / (-1.0 + var_x0);
        const double var_x2 = -NV_Ith_S(mParameters, 4);
        const double var_x3 = 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss;
        const double var_x4 = 1 / NV_Ith_S(mParameters, 7);
        const double var_x5 = var_x4 * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22);
        const double var_x6 = 4.9999999999999998e-8 * var_x5;
        const double var_x7 = exp(-9.9999999999999995e-8);
        const double var_x8 = 1 / (-1.0 + var_x7);
        const double var_x9 = var_x6 * var_x8 * (var_x2 + var_x3 * var_x7);
        const double var_x10 = var_x9 + var_x1 * var_x6 * (var_x2 + var_x0 * var_x3);
        const double var_x11 = NV_Ith_S(mParameters, 9) * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * var_chaste_interface__L_type_Ca_current_f_gate__f;
        const double var_x12 = var_x11 * var_chaste_interface__L_type_Ca_current_d_gate__d;
        const double var_x13 = var_x12 * pow(NV_Ith_S(mParameters, 7), 3) / (pow(NV_Ith_S(mParameters, 8), 2) * pow(NV_Ith_S(mParameters, 22), 2));
        const double var_x14 = -15.0 + var_chaste_interface__membrane__V;
        const double var_x15 = fabs(var_x14) < 4.9999999999999998e-8 * fabs(var_x5);
        const double var_x16 = pow(NV_Ith_S(mParameters, 7), 2);
        const double var_x17 = 1 / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22));
        const double var_x18 = 4.0 * var_x16 * var_x17;
        const double var_x19 = var_x12 * var_x18;
        const double var_x20 = var_x17 * NV_Ith_S(mParameters, 7);
        const double var_x21 = 2.0 * var_x14;
        const double var_x22 = exp(var_x20 * var_x21);
        const double var_x23 = -1.0 + var_x22;
        const double var_x24 = 1 / var_x23;
        const double var_x25 = var_x2 + var_x22 * var_x3;
        const double var_x26 = var_x24 * var_x25;
        const double var_x27 = var_x19 * var_x26;
        const double var_x28 = var_x22 * var_x24;
        const double var_x29 = ((var_x15) ? (40000000.0 * var_x10 * var_x13) : (var_x27 + var_x13 * var_x21 * var_x28 * var_chaste_interface__calcium_dynamics__Ca_ss - 8.0 * var_x13 * var_x14 * var_x22 * var_x25 / pow(var_x23, 2)));
        const double var_x30 = NV_Ith_S(mParameters, 11);
        const double var_x31 = exp(4.1806020066889626 - 0.16722408026755853 * var_chaste_interface__membrane__V);
        const double var_x32 = 1.0 + var_x31;
        const double var_x33 = NV_Ith_S(mParameters, 17) / var_x32;
        const double var_x34 = var_x33;
        const double var_x35 = pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2) * NV_Ith_S(mParameters, 19);
        const double var_x36 = var_x35;
        const double var_x37 = NV_Ith_S(mParameters, 21) * var_chaste_interface__transient_outward_current_r_gate__r;
        const double var_x38 = var_x37 * var_chaste_interface__transient_outward_current_s_gate__s;
        const double var_x39 = var_x38;
        const double var_x40 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3);
        const double var_x41 = var_x40 * NV_Ith_S(mParameters, 13) * var_chaste_interface__fast_sodium_current_j_gate__j;
        const double var_x42 = var_x41 * var_chaste_interface__fast_sodium_current_h_gate__h;
        const double var_x43 = var_x42;
        const double var_x44 = sqrt(NV_Ith_S(mParameters, 5));
        const double var_x45 = var_x44 * NV_Ith_S(mParameters, 18) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2;
        const double var_x46 = 0.43033148291193518 * var_x45;
        const double var_x47 = var_x46 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1;
        const double var_x48 = 1 / var_chaste_interface__potassium_dynamics__K_i;
        const double var_x49 = var_x5 * log(var_x48 * NV_Ith_S(mParameters, 5));
        const double var_x50 = exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_x49);
        const double var_x51 = 1.0 + var_x50;
        const double var_x52 = 1 / var_x51;
        const double var_x53 = exp(0.5 * var_x49 - 0.5 * var_chaste_interface__membrane__V);
        const double var_x54 = 1.0 + var_x53;
        const double var_x55 = 1 / var_x54;
        const double var_x56 = exp(0.02 + 0.00020000000000000001 * var_chaste_interface__membrane__V - 0.00020000000000000001 * var_x49);
        const double var_x57 = 0.10000000000000001 * var_chaste_interface__membrane__V;
        const double var_x58 = exp(-1.0 + var_x57 - 0.10000000000000001 * var_x49);
        const double var_x59 = var_x58 + 3.0 * var_x56;
        const double var_x60 = 0.10000000000000001 * var_x52 + var_x55 * var_x59;
        const double var_x61 = var_x44 * NV_Ith_S(mParameters, 16) / var_x60;
        const double var_x62 = 0.043033148291193521 * var_x52;
        const double var_x63 = var_x61 * var_x62;
        const double var_x64 = -var_x49 + var_chaste_interface__membrane__V;
        const double var_x65 = 0.16722408026755853 * var_x31 * var_x64 * NV_Ith_S(mParameters, 17) / pow(var_x32, 2);
        const double var_x66 = var_x20 * var_chaste_interface__membrane__V;
        const double var_x67 = NV_Ith_S(mParameters, 4) * exp(0.34999999999999998 * var_x66);
        const double var_x68 = var_x67 * pow(var_chaste_interface__sodium_dynamics__Na_i, 3);
        const double var_x69 = exp(-0.65000000000000002 * var_x66);
        const double var_x70 = pow(NV_Ith_S(mParameters, 6), 3);
        const double var_x71 = var_x69 * var_x70;
        const double var_x72 = var_x71 * var_chaste_interface__calcium_dynamics__Ca_i;
        const double var_x73 = 1.0 + 0.10000000000000001 * var_x69;
        const double var_x74 = NV_Ith_S(mParameters, 20) / ((669921.875 + var_x70) * (1.3799999999999999 + NV_Ith_S(mParameters, 4)));
        const double var_x75 = var_x74 / var_x73;
        const double var_x76 = var_x75 * (0.34999999999999998 * var_x20 * var_x68 + 1.625 * var_x20 * var_x72);
        const double var_x77 = var_x50 / pow(var_x51, 2);
        const double var_x78 = 0.0025819888974716113 * var_x61 * var_x64 * var_x77;
        const double var_x79 = 1 / (1.0 + NV_Ith_S(mParameters, 5));
        const double var_x80 = 1 / (40.0 + var_chaste_interface__sodium_dynamics__Na_i);
        const double var_x81 = 0.035299999999999998 * exp(-var_x66);
        const double var_x82 = exp(-var_x20 * var_x57);
        const double var_x83 = 1.0 + var_x81 + 0.1245 * var_x82;
        const double var_x84 = var_x79 * var_x80 * (var_x20 * var_x81 + 0.012450000000000001 * var_x20 * var_x82) * NV_Ith_S(mParameters, 5) * var_chaste_interface__sodium_dynamics__Na_i / pow(var_x83, 2);
        const double var_x85 = 0.10000000000000001 * var_x58;
        const double var_x86 = 0.00060000000000000006 * var_x56;
        const double var_x87 = 0.0060000000000000001 * var_x77;
        const double var_x88 = 0.5 * var_x53 * var_x59 / pow(var_x54, 2);
        const double var_x89 = var_x44 * var_x64;
        const double var_x90 = var_x62 * var_x89 * NV_Ith_S(mParameters, 16) / pow(var_x60, 2);
        const double var_x91 = var_x90 * (var_x87 - var_x88 - var_x55 * (var_x85 + var_x86));
        const double var_x92 = var_x68 - 2.5 * var_x72;
        const double var_x93 = var_x20 * var_x69 * var_x74 * var_x92 / pow(var_x73, 2);
        const double var_x94 = 0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Ca_i;
        const double var_x95 = 0.12379999999999999 / var_x94;
        const double var_x96 = 0.12379999999999999 * var_chaste_interface__calcium_dynamics__Ca_i / pow(var_x94, 2);
        const double var_x97 = 1 / var_chaste_interface__calcium_dynamics__Ca_i;
        const double var_x98 = 0.5 * var_x5;
        const double var_x99 = var_x97 * var_x98 * NV_Ith_S(mParameters, 10);
        const double var_x100 = var_x71 * var_x75;
        const double var_x101 = var_x89 * NV_Ith_S(mParameters, 18) * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1;
        const double var_x102 = 1 / (0.029999999999999999 * var_chaste_interface__sodium_dynamics__Na_i + var_chaste_interface__potassium_dynamics__K_i);
        const double var_x103 = (-var_x5 * log(var_x102 * (0.029999999999999999 * NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 5))) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 19) * var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs;
        const double var_x104 = 1 / var_chaste_interface__sodium_dynamics__Na_i;
        const double var_x105 = -var_x5 * log(var_x104 * NV_Ith_S(mParameters, 6)) + var_chaste_interface__membrane__V;
        const double var_x106 = NV_Ith_S(mParameters, 13) * var_chaste_interface__fast_sodium_current_h_gate__h;
        const double var_x107 = var_x105 * var_x106 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2) * var_chaste_interface__fast_sodium_current_j_gate__j;
        const double var_x108 = var_x105;
        const double var_x109 = var_x106 * var_x40;
        const double var_x110 = 10000000.0 * var_x20 * (var_x14 + var_x6);
        const double var_x111 = var_x18 * (-var_x9 + var_x10 * var_x110);
        const double var_x112 = var_x11 * var_x111;
        const double var_x113 = var_x14 * var_x18 * var_x26;
        const double var_x114 = ((var_x15) ? (var_x112) : (var_x11 * var_x113));
        const double var_x115 = NV_Ith_S(mParameters, 9) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass;
        const double var_x116 = var_x111 * var_x115;
        const double var_x117 = var_x113 * var_x115;
        const double var_x118 = ((var_x15) ? (var_x116 * var_chaste_interface__L_type_Ca_current_f2_gate__f2) : (var_x117 * var_chaste_interface__L_type_Ca_current_f2_gate__f2));
        const double var_x119 = ((var_x15) ? (var_x116 * var_chaste_interface__L_type_Ca_current_f_gate__f) : (var_x117 * var_chaste_interface__L_type_Ca_current_f_gate__f));
        const double var_x120 = NV_Ith_S(mParameters, 9) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_f_gate__f;
        const double var_x121 = ((var_x15) ? (var_x111 * var_x120) : (var_x113 * var_x120));
        const double var_x122 = (var_x49 - var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 21);
        const double var_x123 = 1.2499999999999999e-8 * var_x5;
        const double var_x124 = var_x123 * var_x7 * var_x8;
        const double var_x125 = ((var_x15) ? (var_x19 * (-var_x124 + var_x110 * (var_x124 + var_x0 * var_x1 * var_x123))) : (var_x12 * var_x14 * var_x16 * var_x17 * var_x28));
        const double var_x126 = var_x79 * NV_Ith_S(mParameters, 5) / var_x83;
        const double var_x127 = var_x126 * var_x80;
        const double var_x128 = var_x126 * var_chaste_interface__sodium_dynamics__Na_i / pow((1 + 0.025000000000000001 * var_chaste_interface__sodium_dynamics__Na_i), 2);
        const double var_x129 = var_x104 * var_x5;
        const double var_x130 = var_x102 * var_x5;
        const double var_x131 = var_x130 * var_x35;
        const double var_x132 = 0.029999999999999999 * var_x131;
        const double var_x133 = var_x67 * var_x75 * pow(var_chaste_interface__sodium_dynamics__Na_i, 2);
        const double var_x134 = var_x48 * var_x5;
        const double var_x135 = var_x90 * (var_x134 * var_x87 - var_x134 * var_x88 - var_x55 * (var_x134 * var_x85 + var_x134 * var_x86));
        const double var_x136 = var_x134 * var_x47;
        const double var_x137 = var_x134 * var_x63;
        const double var_x138 = var_x134 * var_x78;
        const double var_x139 = 0.001 + var_chaste_interface__calcium_dynamics__Ca_i;
        const double var_x140 = 1.0 + 0.00020000000000000001 / pow(var_x139, 2);
        const double var_x141 = 1 / var_x140;
        const double var_x142 = var_x4 * NV_Ith_S(mParameters, 12);
        const double var_x143 = 30.480370641307001 * var_x142;
        const double var_x144 = 0.066691050963179718 * NV_Ith_S(mParameters, 0);
        const double var_x145 = 1.0 + 6.2499999999999997e-8 / pow(var_chaste_interface__calcium_dynamics__Ca_i, 2);
        const double var_x146 = NV_Ith_S(mParameters, 2) / (pow(var_x145, 2) * pow(var_chaste_interface__calcium_dynamics__Ca_i, 3));
        const double var_x147 = -var_chaste_interface__calcium_dynamics__Ca_i + var_chaste_interface__calcium_dynamics__Ca_SR;
        const double var_x148 = NV_Ith_S(mParameters, 2) / var_x145;
        const double var_x149 = 0.10000000000000001 * var_chaste_interface__membrane__V;
        const double var_x150 = -var_x149;
        const double var_x151 = exp(-4.5 + var_x150);
        const double var_x152 = 1.0 + var_x151;
        const double var_x153 = 0.14285714285714285 * var_chaste_interface__membrane__V;
        const double var_x154 = exp(-3.7142857142857144 - var_x153);
        const double var_x155 = 1.0 + var_x154;
        const double var_x156 = -var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 + 1 / var_x155;
        const double var_x157 = exp(2.6086956521739131 + 0.086956521739130432 * var_chaste_interface__membrane__V);
        const double var_x158 = 0.00037037037037037035 + 0.00037037037037037035 * var_x157;
        const double var_x159 = var_x152 * var_x158;
        const double var_x160 = 0.050000000000000003 * var_chaste_interface__membrane__V;
        const double var_x161 = -var_x160;
        const double var_x162 = exp(-3.0 + var_x161);
        const double var_x163 = 1.0 + var_x162;
        const double var_x164 = exp(3.6666666666666665 + 0.041666666666666664 * var_chaste_interface__membrane__V);
        const double var_x165 = 1.0 + var_x164;
        const double var_x166 = -var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 + 1 / var_x165;
        const double var_x167 = exp(-3.0 + var_x160);
        const double var_x168 = 0.29761904761904762 + 0.29761904761904762 * var_x167;
        const double var_x169 = var_x163 * var_x168;
        const double var_x170 = -0.16666666666666666 * var_chaste_interface__membrane__V;
        const double var_x171 = exp(0.83333333333333337 + var_x170);
        const double var_x172 = 1.0 + var_x171;
        const double var_x173 = 1 / sqrt(var_x172);
        const double var_x174 = exp(-2.3333333333333335 + 0.066666666666666666 * var_chaste_interface__membrane__V);
        const double var_x175 = 1.0 + var_x174;
        const double var_x176 = 1 / var_x175;
        const double var_x177 = var_x173 * var_x176;
        const double var_x178 = exp(-0.35714285714285715 - 0.071428571428571425 * var_chaste_interface__membrane__V);
        const double var_x179 = 1.0 + var_x178;
        const double var_x180 = 1 / (80.0 + 1400.0 * var_x177);
        const double var_x181 = 0.20000000000000001 * var_chaste_interface__membrane__V;
        const double var_x182 = exp(7.0 + var_x181);
        const double var_x183 = 1.0 + var_x182;
        const double var_x184 = 1 / var_x183;
        const double var_x185 = exp(-0.25 + 0.0050000000000000001 * var_chaste_interface__membrane__V);
        const double var_x186 = 1.0 + var_x185;
        const double var_x187 = 1 / var_x186;
        const double var_x188 = 1 / (0.10000000000000001 * var_x184 + 0.10000000000000001 * var_x187);
        const double var_x189 = exp(-6.2967884828349945 - 0.11074197120708749 * var_chaste_interface__membrane__V);
        const double var_x190 = 1.0 + var_x189;
        const double var_x191 = -var_chaste_interface__fast_sodium_current_m_gate__m + 1 / pow(var_x190, 2);
        const double var_x192 = exp(-12.0 - var_x181);
        const double var_x193 = 1.0 + var_x192;
        const double var_x194 = var_x188 * var_x193;
        const double var_x195 = 0.01 * NV_Ith_S(mParameters, 14);
        const double var_x196 = exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__membrane__V - 0.13458950201884254 * NV_Ith_S(mParameters, 15));
        const double var_x197 = 1.0 + var_x196;
        const double var_x198 = 1.0 - var_x195;
        const double var_x199 = var_x195 + var_x198 / pow(var_x197, 2);
        const double var_x200 = var_x199 - var_chaste_interface__fast_sodium_current_h_gate__h;
        const double var_x201 = exp(0.34849999999999998 * var_chaste_interface__membrane__V - 0.34849999999999998 * NV_Ith_S(mParameters, 15));
        const double var_x202 = exp(0.079000000000000001 * var_chaste_interface__membrane__V - 0.079000000000000001 * NV_Ith_S(mParameters, 15));
        const double var_x203 = exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 15) - 0.14705882352941177 * var_chaste_interface__membrane__V);
        const double var_x204 = 310000.0 * var_x201;
        const double var_x205 = 2.7000000000000002 * var_x202;
        const double var_x206 = 0.057000000000000002 * var_x203;
        const double var_x207 = var_x196 * var_x198 / pow(var_x197, 3);
        const double var_x208 = 0.26917900403768508 * var_x207;
        const double var_x209 = var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 15);
        const double var_x210 = exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 15) - 0.0900900900900901 * var_chaste_interface__membrane__V);
        const double var_x211 = 1.0 + var_x210;
        const double var_x212 = 1 / var_x211;
        const double var_x213 = var_x199 - var_chaste_interface__fast_sodium_current_j_gate__j;
        const double var_x214 = exp(0.24440000000000001 * var_chaste_interface__membrane__V - 0.24440000000000001 * NV_Ith_S(mParameters, 15));
        const double var_x215 = exp(0.043909999999999998 * NV_Ith_S(mParameters, 15) - 0.043909999999999998 * var_chaste_interface__membrane__V);
        const double var_x216 = -25428.0 * var_x214 - 6.9480000000000002e-6 * var_x215;
        const double var_x217 = exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V - 0.311 * NV_Ith_S(mParameters, 15));
        const double var_x218 = 1.0 + var_x217;
        const double var_x219 = 1 / var_x218;
        const double var_x220 = var_x216 * var_x219;
        const double var_x221 = exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 15) - 0.13780000000000001 * var_chaste_interface__membrane__V);
        const double var_x222 = 1.0 + var_x221;
        const double var_x223 = exp(0.01052 * NV_Ith_S(mParameters, 15) - 0.01052 * var_chaste_interface__membrane__V);
        const double var_x224 = var_x223 / var_x222;
        const double var_x225 = 37.780000000000001 + var_chaste_interface__membrane__V;
        const double var_x226 = 0.024240000000000001 * var_x224;
        const double var_x227 = var_x220 * var_x225;
        const double var_x228 = exp(-3.2000000000000002 - var_x57 + 0.10000000000000001 * NV_Ith_S(mParameters, 15));
        const double var_x229 = 1.0 + var_x228;
        const double var_x230 = exp(0.057000000000000002 * var_chaste_interface__membrane__V - 0.057000000000000002 * NV_Ith_S(mParameters, 15));
        const double var_x231 = var_x230 / var_x229;
        const double var_x232 = exp(2.5 + var_x161);
        const double var_x233 = 1.0 + var_x232;
        const double var_x234 = 1 / var_x233;
        const double var_x235 = exp(1.0 + var_x181);
        const double var_x236 = 1.0 + var_x235;
        const double var_x237 = 1 / var_x236;
        const double var_x238 = exp(-2.6923076923076925 - 0.076923076923076927 * var_chaste_interface__membrane__V);
        const double var_x239 = 1.0 + var_x238;
        const double var_x240 = 0.25 + 1.3999999999999999 / var_x239;
        const double var_x241 = var_x237 * var_x240;
        const double var_x242 = exp(-1.0666666666666667 - 0.13333333333333333 * var_chaste_interface__membrane__V);
        const double var_x243 = 1.0 + var_x242;
        const double var_x244 = 1 / (var_x234 + 1.3999999999999999 * var_x241);
        const double var_x245 = exp(3.0 + var_x149);
        const double var_x246 = 1.0 + var_x245;
        const double var_x247 = 1 / var_x246;
        const double var_x248 = exp(1.3 + var_x150);
        const double var_x249 = 1.0 + var_x248;
        const double var_x250 = 1 / var_x249;
        const double var_x251 = pow((1 + 0.037037037037037035 * var_chaste_interface__membrane__V), 2);
        const double var_x252 = exp(-3.2400000000000002 * var_x251);
        const double var_x253 = exp(2.8571428571428572 + var_x153);
        const double var_x254 = 1.0 + var_x253;
        const double var_x255 = var_x245 / pow(var_x246, 2);
        const double var_x256 = 1102.5 * var_x252;
        const double var_x257 = 1 / (20.0 + var_x256 + 200.0 * var_x250 + 180.0 * var_x247);
        const double var_x258 = exp(2.5 + var_x150);
        const double var_x259 = 1.0 + var_x258;
        const double var_x260 = 1 / var_x259;
        const double var_x261 = exp(-3.0375000000000001 * var_x251);
        const double var_x262 = exp(5.0 + var_x153);
        const double var_x263 = 1.0 + var_x262;
        const double var_x264 = 562.0 * var_x261;
        const double var_x265 = 1 / (var_x264 + 80.0 * var_x247 + 31.0 * var_x260);
        const double var_x266 = pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2);
        const double var_x267 = 1 / (1.0 + 399.99999999999994 * var_x266);
        const double var_x268 = 1 / (2.0 + 80.0 * var_x267);
        const double var_x269 = var_chaste_interface__calcium_dynamics__Ca_ss / pow((0.0025000000000000005 + var_x266), 2);
        const double var_x270 = exp(-4.0 + var_x181);
        const double var_x271 = 1.0 + var_x270;
        const double var_x272 = 1 / var_x271;
        const double var_x273 = exp(-6.328125 * pow((1 + 0.022222222222222223 * var_chaste_interface__membrane__V), 2));
        const double var_x274 = exp(4.0 + var_x181);
        const double var_x275 = 1.0 + var_x274;
        const double var_x276 = 85.0 * var_x273;
        const double var_x277 = 1 / (3.0 + var_x276 + 5.0 * var_x272);
        const double var_x278 = exp(3.3333333333333335 + var_x170);
        const double var_x279 = 1.0 + var_x278;
        const double var_x280 = exp(-0.88888888888888884 * pow((1 + 0.025000000000000001 * var_chaste_interface__membrane__V), 2));
        const double var_x281 = 1 / (0.80000000000000004 + 9.5 * var_x280);
        const double var_x282 = 0.29999999999999999 + var_chaste_interface__calcium_dynamics__Ca_SR;
        const double var_x283 = pow(var_x282, (-2));
        const double var_x284 = 1 / (1.0 + 3.0 * var_x283);
        const double var_x285 = var_x284;
        const double var_x286 = pow(var_chaste_interface__calcium_dynamics__Ca_SR, (-2));
        const double var_x287 = 1 / (1.0 + 2.25 * var_x286);
        const double var_x288 = 1 / (2.5 - 1.5 * var_x287);
        const double var_x289 = var_x266 * var_x288;
        const double var_x290 = 0.14999999999999999 * var_x289;
        const double var_x291 = 1 / (0.059999999999999998 + var_x290);
        const double var_x292 = var_chaste_interface__calcium_dynamics__R_prime * NV_Ith_S(mParameters, 1);
        const double var_x293 = var_x291 * var_x292;
        const double var_x294 = var_x290 * var_x293;
        const double var_x295 = 1 / (pow((0.44444444444444442 + var_x286), 2) * pow(var_chaste_interface__calcium_dynamics__Ca_SR, 3));
        const double var_x296 = -var_chaste_interface__calcium_dynamics__Ca_ss + var_chaste_interface__calcium_dynamics__Ca_SR;
        const double var_x297 = var_x296 / pow((1 - 0.59999999999999998 * var_x287), 2);
        const double var_x298 = var_x266 * var_x293 * var_x295 * var_x297;
        const double var_x299 = var_x292 * var_x297 / pow((0.40000000000000002 + var_x289), 2);
        const double var_x300 = var_x288 * var_x295 * var_x299 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 4);
        const double var_x301 = var_x299 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 3);
        const double var_x302 = var_chaste_interface__calcium_dynamics__Ca_ss * var_chaste_interface__calcium_dynamics__R_prime;
        const double var_x303 = var_x291 * var_x296 * NV_Ith_S(mParameters, 1);
        const double var_x304 = var_x288 * var_x302 * var_x303;
        const double var_x305 = 0.00025000000000000001 + var_chaste_interface__calcium_dynamics__Ca_ss;
        const double var_x306 = 1.0 + 0.0001 / pow(var_x305, 2);
        const double var_x307 = 1 / var_x306;
        const double var_x308 = 9144.1111923920998 * var_x142;
        const double var_x309 = var_x307 * var_x308;
        const double var_x310 = 3.0010972933430868 * var_x289;
        const double var_x311 = var_x293 * var_x310;
        const double var_x312 = var_x307;
        const double var_x313 = -0.11249999999999999 + 0.067500000000000004 * var_x287;
        const double var_x314 = var_x142 * NV_Ith_S(mParameters, 3);
        const double var_x315 = 60.960741282614002 * var_x314;
        const double var_x316 = var_x105 * var_x315;
        const double var_x317 = 26.23332619555811 * var_x314;
        const double var_x318 = var_x315 * var_x64;
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (var_x78 - var_x30 - var_x34 - var_x36 - var_x39 - var_x43 - var_x47 - var_x63 - var_x65 - var_x91 - var_x29 - var_x76 - NV_Ith_S(mParameters, 10) - 2.7240000000000002 * var_x84 - 0.065000000000000002 * var_x93);
        IJth(rJacobian, 1, 0) = -var_x141 * var_x143 * (-2.0 * var_x76 - 0.13 * var_x93 + NV_Ith_S(mParameters, 10));
        IJth(rJacobian, 2, 0) = 3.2206119162640899e-5 * var_x152 * var_x156 * var_x157 + 0.14285714285714285 * var_x154 * var_x159 / pow(var_x155, 2) - 0.10000000000000001 * var_x151 * var_x156 * var_x158;
        IJth(rJacobian, 3, 0) = 0.01488095238095238 * var_x163 * var_x166 * var_x167 - 0.041666666666666664 * var_x164 * var_x169 / pow(var_x165, 2) - 0.050000000000000003 * var_x162 * var_x166 * var_x168;
        IJth(rJacobian, 4, 0) = 5.1020408163265302e-7 * (-var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs + 1 / var_x179) * (93.333333333333329 * var_x173 * var_x174 / pow(var_x175, 2) - 116.66666666666667 * var_x171 * var_x176 / pow(var_x172, (3 / 2))) / pow((0.057142857142857141 + var_x177), 2) + 0.071428571428571425 * var_x178 * var_x180 / pow(var_x179, 2);
        IJth(rJacobian, 5, 0) = 0.22148394241417499 * var_x189 * var_x194 / pow(var_x190, 3) - 0.20000000000000001 * var_x188 * var_x191 * var_x192 + 99.999999999999986 * var_x191 * var_x193 * (0.02 * var_x182 / pow(var_x183, 2) + 0.00050000000000000001 * var_x185 / pow(var_x186, 2)) / pow((var_x184 + var_x187), 2);
        IJth(rJacobian, 6, 0) = ((var_x209) ? (var_x200 * (108035.0 * var_x201 + 0.21330000000000002 * var_x202 - 0.008382352941176471 * var_x203) - var_x208 * (var_x204 + var_x205 + var_x206)) : (-1.5943679469924423 * var_x207 * var_x212 + 0.53361053361053368 * var_x200 * var_x210 / pow(var_x211, 2)));
        IJth(rJacobian, 7, 0) = ((var_x209) ? (var_x213 * (var_x220 - 0.00025500480000000003 * var_x224 + var_x219 * var_x225 * (3.0508668000000001e-7 * var_x215 - 6214.6032000000005 * var_x214) + 0.0033402720000000005 * var_x221 * var_x223 / pow(var_x222, 2) - 0.311 * var_x216 * var_x217 * var_x225 / pow(var_x218, 2)) - var_x208 * (var_x226 + var_x227)) : (0.034200000000000001 * var_x213 * var_x231 - 0.16150740242261102 * var_x207 * var_x231 + 0.059999999999999998 * var_x213 * var_x228 * var_x230 / pow(var_x229, 2)));
        IJth(rJacobian, 8, 0) = 0.51020408163265307 * (-var_chaste_interface__L_type_Ca_current_d_gate__d + 1 / var_x243) * (-0.050000000000000003 * var_x232 / pow(var_x233, 2) + 0.27999999999999997 * var_x235 * var_x240 / pow(var_x236, 2) - 0.15076923076923074 * var_x237 * var_x238 / pow(var_x239, 2)) / pow((var_x241 + 0.7142857142857143 * var_x234), 2) + 0.13333333333333333 * var_x242 * var_x244 / pow(var_x243, 2);
        IJth(rJacobian, 9, 0) = 8.2270247479188195e-7 * (-var_chaste_interface__L_type_Ca_current_f_gate__f + 1 / var_x254) * (18.0 * var_x255 - var_x256 * (-0.23999999999999999 - 0.0088888888888888889 * var_chaste_interface__membrane__V) - 20.0 * var_x248 / pow(var_x249, 2)) / pow((0.018140589569160998 + var_x252 + 0.16326530612244897 * var_x247 + 0.18140589569160998 * var_x250), 2) - 0.14285714285714285 * var_x253 * var_x257 / pow(var_x254, 2);
        IJth(rJacobian, 10, 0) = 3.1661199832828864e-6 * (0.33000000000000002 - var_chaste_interface__L_type_Ca_current_f2_gate__f2 + 0.67000000000000004 / var_x263) * (8.0 * var_x255 - var_x264 * (-0.22500000000000001 - 0.0083333333333333332 * var_chaste_interface__membrane__V) - 3.1000000000000001 * var_x258 / pow(var_x259, 2)) / pow((var_x261 + 0.055160142348754451 * var_x260 + 0.14234875444839859 * var_x247), 2) - 0.095714285714285724 * var_x262 * var_x265 / pow(var_x263, 2);
        IJth(rJacobian, 12, 0) = 0.00013840830449826991 * (-var_chaste_interface__transient_outward_current_s_gate__s + 1 / var_x275) * (-var_x276 * (-0.28125 - 0.0062500000000000003 * var_chaste_interface__membrane__V) + var_x270 / pow(var_x271, 2)) / pow((0.035294117647058823 + var_x273 + 0.058823529411764705 * var_x272), 2) - 0.20000000000000001 * var_x274 * var_x277 / pow(var_x275, 2);
        IJth(rJacobian, 13, 0) = 0.16666666666666666 * var_x278 * var_x281 / pow(var_x279, 2) - 0.10526315789473684 * var_x280 * (-0.044444444444444446 - 0.0011111111111111111 * var_chaste_interface__membrane__V) * (-var_chaste_interface__transient_outward_current_r_gate__r + 1 / var_x279) / pow((0.084210526315789472 + var_x280), 2);
        IJth(rJacobian, 15, 0) = -var_x29 * var_x309;
        IJth(rJacobian, 17, 0) = -var_x315 * (var_x42 + 3.0 * var_x76 + 8.1720000000000006 * var_x84 + 0.19500000000000001 * var_x93 + NV_Ith_S(mParameters, 11));
        IJth(rJacobian, 18, 0) = -var_x315 * (var_x33 + var_x35 + var_x38 + var_x47 + var_x63 + var_x65 + var_x91 - var_x78 - 5.4480000000000004 * var_x84);
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (var_x96 - var_x95 - var_x99 + 2.5 * var_x100);
        IJth(rJacobian, 1, 1) = var_x141 * (-0.0038 - var_x144 - 8.3363813703974642e-9 * var_x146 - var_x143 * (var_x95 + var_x99 - var_x96 + 5.0 * var_x100)) + 0.00040000000000000002 * (0.0038 * var_chaste_interface__calcium_dynamics__Ca_ss - 0.0038 * var_chaste_interface__calcium_dynamics__Ca_i - 0.066691050963179718 * var_x148 + var_x144 * var_x147 - var_x143 * (var_x95 * var_chaste_interface__calcium_dynamics__Ca_i + (-var_x98 * log(var_x97 * NV_Ith_S(mParameters, 4)) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 10) - 2.0 * var_x75 * var_x92)) / (pow(var_x139, 3) * pow(var_x140, 2));
        IJth(rJacobian, 14, 1) = var_x285 * (1.2499999999999999e-7 * var_x146 + NV_Ith_S(mParameters, 0));
        IJth(rJacobian, 15, 1) = 1.1399999999999999 * var_x307;
        IJth(rJacobian, 17, 1) = 457.20555961960503 * var_x100 * var_x314;
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x46 * var_x64);
        IJth(rJacobian, 2, 2) = -var_x159;
        IJth(rJacobian, 18, 2) = -var_x317 * var_x45 * var_x64;
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (-0.43033148291193518 * var_x101);
        IJth(rJacobian, 3, 3) = -var_x169;
        IJth(rJacobian, 18, 3) = -var_x101 * var_x317;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (-2.0 * var_x103);
        IJth(rJacobian, 4, 4) = -var_x180;
        IJth(rJacobian, 18, 4) = -121.921482565228 * var_x103 * var_x314;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (-3.0 * var_x107);
        IJth(rJacobian, 5, 5) = -var_x194;
        IJth(rJacobian, 17, 5) = -182.882223847842 * var_x107 * var_x314;
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x108 * var_x41);
        IJth(rJacobian, 6, 6) = ((var_x209) ? (-var_x204 - var_x205 - var_x206) : (-5.9230769230769234 * var_x212));
        IJth(rJacobian, 17, 6) = -var_x316 * var_x41;
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x108 * var_x109);
        IJth(rJacobian, 7, 7) = ((var_x209) ? (-var_x226 - var_x227) : (-0.59999999999999998 * var_x231));
        IJth(rJacobian, 17, 7) = -var_x109 * var_x316;
        IJth(rJacobian, 0, 8) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x114);
        IJth(rJacobian, 8, 8) = -var_x244;
        IJth(rJacobian, 15, 8) = -var_x114 * var_x309;
        IJth(rJacobian, 0, 9) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x118);
        IJth(rJacobian, 9, 9) = -var_x257;
        IJth(rJacobian, 15, 9) = -var_x118 * var_x309;
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x119);
        IJth(rJacobian, 10, 10) = -var_x265;
        IJth(rJacobian, 15, 10) = -var_x119 * var_x309;
        IJth(rJacobian, 0, 11) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x121);
        IJth(rJacobian, 11, 11) = -var_x268;
        IJth(rJacobian, 15, 11) = -var_x121 * var_x309;
        IJth(rJacobian, 0, 12) = mSetVoltageDerivativeToZero ? 0.0 : (var_x122 * var_chaste_interface__transient_outward_current_r_gate__r);
        IJth(rJacobian, 12, 12) = -var_x277;
        IJth(rJacobian, 18, 12) = -var_x318 * var_x37;
        IJth(rJacobian, 0, 13) = mSetVoltageDerivativeToZero ? 0.0 : (var_x122 * var_chaste_interface__transient_outward_current_s_gate__s);
        IJth(rJacobian, 13, 13) = -var_x281;
        IJth(rJacobian, 18, 13) = -var_x318 * NV_Ith_S(mParameters, 21) * var_chaste_interface__transient_outward_current_s_gate__s;
        IJth(rJacobian, 1, 14) = var_x141 * var_x144;
        IJth(rJacobian, 14, 14) = var_x285 * (-var_x294 - NV_Ith_S(mParameters, 0) + 0.21333333333333335 * var_x300 - 0.032000000000000001 * var_x298) + 0.66666666666666674 * (var_x148 - var_x147 * NV_Ith_S(mParameters, 0) - var_x294 * var_x296) / (pow(var_x282, 3) * pow((0.33333333333333337 + var_x283), 2));
        IJth(rJacobian, 15, 14) = var_x312 * (var_x311 + 0.64023408924652514 * var_x298 - 4.2682272616435011 * var_x300);
        IJth(rJacobian, 16, 14) = 0.059999999999999998 * var_x295 * var_x302;
        IJth(rJacobian, 0, 15) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x125);
        IJth(rJacobian, 1, 15) = 0.0038 * var_x141;
        IJth(rJacobian, 11, 15) = -0.0030000000000000001 * var_x268 * var_x269 + 6.2500000000000001e-5 * var_x269 * (0.40000000000000002 - var_chaste_interface__L_type_Ca_current_fCass_gate__fCass + 0.59999999999999998 * var_x267) / pow((0.025000000000000001 + var_x267), 2);
        IJth(rJacobian, 14, 15) = var_x285 * (var_x294 + 0.32000000000000001 * var_x301 - 0.29999999999999999 * var_x304);
        IJth(rJacobian, 15, 15) = var_x312 * (-1.1399999999999999 - var_x311 + 6.0021945866861737 * var_x304 - 6.4023408924652525 * var_x301 - var_x125 * var_x308) + 0.00020000000000000001 * (1.1399999999999999 * var_chaste_interface__calcium_dynamics__Ca_i - 1.1399999999999999 * var_chaste_interface__calcium_dynamics__Ca_ss + var_x296 * var_x311 - var_x308 * ((var_x15) ? (var_x112 * var_chaste_interface__L_type_Ca_current_d_gate__d) : (var_x14 * var_x27))) / (pow(var_x305, 3) * pow(var_x306, 2));
        IJth(rJacobian, 16, 15) = var_x313 * var_chaste_interface__calcium_dynamics__R_prime;
        IJth(rJacobian, 14, 16) = -var_x284 * var_x290 * var_x303;
        IJth(rJacobian, 15, 16) = var_x303 * var_x307 * var_x310;
        IJth(rJacobian, 16, 16) = -0.0050000000000000001 + var_x313 * var_chaste_interface__calcium_dynamics__Ca_ss;
        IJth(rJacobian, 0, 17) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x132 + 0.0017025 * var_x128 - 3.0 * var_x133 - 2.7240000000000002 * var_x127 - var_x129 * var_x30 - var_x129 * var_x43);
        IJth(rJacobian, 1, 17) = 182.882223847842 * var_x133 * var_x141 * var_x142;
        IJth(rJacobian, 17, 17) = -var_x315 * (9.0 * var_x133 + 8.1720000000000006 * var_x127 - 0.0051075000000000001 * var_x128 + var_x129 * var_x42 + var_x129 * NV_Ith_S(mParameters, 11));
        IJth(rJacobian, 18, 17) = -var_x315 * (var_x132 + 0.003405 * var_x128 - 5.4480000000000004 * var_x127);
        IJth(rJacobian, 0, 18) = mSetVoltageDerivativeToZero ? 0.0 : (var_x138 - var_x135 - var_x136 - var_x137 - var_x130 * var_x36 - var_x134 * var_x34 - var_x134 * var_x39);
        IJth(rJacobian, 18, 18) = -var_x315 * (var_x131 + var_x135 + var_x136 + var_x137 - var_x138 + var_x134 * var_x33 + var_x134 * var_x38);
    }

    N_Vector Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -85.23
        double var_chaste_interface__calcium_dynamics__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.000126
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.00621
        double var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.4712
        double var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0095
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.00172
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.7444
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.7045
        double var_chaste_interface__L_type_Ca_current_d_gate__d = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 3.373e-05
        double var_chaste_interface__L_type_Ca_current_f_gate__f = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.7888
        double var_chaste_interface__L_type_Ca_current_f2_gate__f2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.9755
        double var_chaste_interface__L_type_Ca_current_fCass_gate__fCass = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.9953
        double var_chaste_interface__transient_outward_current_s_gate__s = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.999998
        double var_chaste_interface__transient_outward_current_r_gate__r = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 2.42e-08
        double var_chaste_interface__calcium_dynamics__Ca_SR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 3.64
        double var_chaste_interface__calcium_dynamics__Ca_ss = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 0.00036
        double var_chaste_interface__calcium_dynamics__R_prime = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.9073
        double var_chaste_interface__sodium_dynamics__Na_i = NV_Ith_S(rY, 17);
        // Units: millimolar; Initial value: 8.604
        double var_chaste_interface__potassium_dynamics__K_i = NV_Ith_S(rY, 18);
        // Units: millimolar; Initial value: 136.89
        
        // Lookup table indexing
        const bool _oob_0 = Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_calcium_dynamics__Buf_c = 0.20000000000000001; // millimolar
        const double var_calcium_dynamics__Buf_ss = 0.40000000000000002; // millimolar
        const double var_L_type_Ca_current_fCass_gate__tau_fCass = 2.0 + 80.0 / (1.0 + 399.99999999999994 * pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2)); // millisecond
        const double var_calcium_dynamics__EC = 1.5; // millimolar
        const double var_calcium_dynamics__K_buf_c = 0.001; // millimolar
        const double var_calcium_dynamics__Ca_i_bufc = 1 / (1.0 + var_calcium_dynamics__Buf_c * var_calcium_dynamics__K_buf_c / pow((var_chaste_interface__calcium_dynamics__Ca_i + var_calcium_dynamics__K_buf_c), 2)); // dimensionless
        const double var_calcium_dynamics__K_buf_ss = 0.00025000000000000001; // millimolar
        const double var_calcium_dynamics__Ca_ss_bufss = 1 / (1.0 + var_calcium_dynamics__Buf_ss * var_calcium_dynamics__K_buf_ss / pow((var_chaste_interface__calcium_dynamics__Ca_ss + var_calcium_dynamics__K_buf_ss), 2)); // dimensionless
        const double var_calcium_dynamics__K_up = 0.00025000000000000001; // millimolar
        const double var_calcium_dynamics__i_leak = (-var_chaste_interface__calcium_dynamics__Ca_i + var_chaste_interface__calcium_dynamics__Ca_SR) * NV_Ith_S(mParameters, 0); // millimolar_per_millisecond
        const double var_calcium_dynamics__i_up = NV_Ith_S(mParameters, 2) / (1.0 + pow(var_calcium_dynamics__K_up, 2) / pow(var_chaste_interface__calcium_dynamics__Ca_i, 2)); // millimolar_per_millisecond
        const double var_calcium_dynamics__k1_prime = 0.14999999999999999; // per_millimolar2_per_millisecond
        const double var_calcium_dynamics__k3 = 0.059999999999999998; // per_millisecond
        const double var_calcium_dynamics__max_sr = 2.5; // dimensionless
        const double var_calcium_dynamics__min_sr = 1.0; // dimensionless
        const double var_calcium_dynamics__kcasr = -(-var_calcium_dynamics__min_sr + var_calcium_dynamics__max_sr) / (1.0 + pow(var_calcium_dynamics__EC, 2) / pow(var_chaste_interface__calcium_dynamics__Ca_SR, 2)) + var_calcium_dynamics__max_sr; // dimensionless
        const double var_calcium_dynamics__k1 = var_calcium_dynamics__k1_prime / var_calcium_dynamics__kcasr; // per_millimolar2_per_millisecond
        const double var_calcium_dynamics__O = pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2) * var_chaste_interface__calcium_dynamics__R_prime * var_calcium_dynamics__k1 / (pow(var_chaste_interface__calcium_dynamics__Ca_ss, 2) * var_calcium_dynamics__k1 + var_calcium_dynamics__k3); // dimensionless
        const double var_calcium_dynamics__i_rel = (-var_chaste_interface__calcium_dynamics__Ca_ss + var_chaste_interface__calcium_dynamics__Ca_SR) * var_calcium_dynamics__O * NV_Ith_S(mParameters, 1); // millimolar_per_millisecond
        const double var_calcium_pump_current__K_pCa = 0.00050000000000000001; // millimolar
        const double var_calcium_pump_current__g_pCa = 0.12379999999999999; // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca = var_chaste_interface__calcium_dynamics__Ca_i * var_calcium_pump_current__g_pCa / (var_chaste_interface__calcium_dynamics__Ca_i + var_calcium_pump_current__K_pCa); // picoA_per_picoF
        const double var_calcium_pump_current__i_p_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_calcium_pump_current__i_p_Ca; // uA_per_cm2
        const double var_L_type_Ca_current__temp = ((fabs(-15.0 + var_chaste_interface__membrane__V) < 4.9999999999999998e-8 * fabs(NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) / NV_Ith_S(mParameters, 7))) ? (10000000.0 * (4.9999999999999998e-8 * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) / ((-1.0 + exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 7)) + 4.9999999999999998e-8 * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) / ((-1.0 + exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 7))) * (-15.0 + 4.9999999999999998e-8 * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) / NV_Ith_S(mParameters, 7) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 7) / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)) - 4.9999999999999998e-8 * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) / ((-1.0 + exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 7))) : ((-15.0 + var_chaste_interface__membrane__V) * (-NV_Ith_S(mParameters, 4) + 0.25 * var_chaste_interface__calcium_dynamics__Ca_ss * exp(2.0 * (-15.0 + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 7) / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)))) / (-1.0 + exp(2.0 * (-15.0 + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 7) / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)))))); // millivolt_millimoles
        const double var_L_type_Ca_current__i_CaL = 4.0 * pow(NV_Ith_S(mParameters, 7), 2) * NV_Ith_S(mParameters, 9) * var_L_type_Ca_current__temp * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f2_gate__f2 * var_chaste_interface__L_type_Ca_current_fCass_gate__fCass * var_chaste_interface__L_type_Ca_current_f_gate__f / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)); // picoA_per_picoF
        const double var_L_type_Ca_current__i_CaL_converted = HeartConfig::Instance()->GetCapacitance() * var_L_type_Ca_current__i_CaL; // uA_per_cm2
        const double var_L_type_Ca_current_f2_gate__tau_f2 = _lt_0_row[4]; // millisecond
        const double var_L_type_Ca_current_f_gate__tau_f = _lt_0_row[6]; // millisecond
        const double var_fast_sodium_current_h_gate__alpha_h = ((var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 15)) ? (0.057000000000000002 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 15) - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0)); // per_millisecond
        const double var_fast_sodium_current_h_gate__beta_h = ((var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 15)) ? (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane__V - 0.34849999999999998 * NV_Ith_S(mParameters, 15)) + 2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane__V - 0.079000000000000001 * NV_Ith_S(mParameters, 15))) : (5.9230769230769234 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 15) - 0.0900900900900901 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_fast_sodium_current_h_gate__tau_h = 1 / (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h); // millisecond
        const double var_fast_sodium_current_j_gate__alpha_j = ((var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 15)) ? ((37.780000000000001 + var_chaste_interface__membrane__V) * (-25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V - 0.24440000000000001 * NV_Ith_S(mParameters, 15)) - 6.9480000000000002e-6 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 15) - 0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V - 0.311 * NV_Ith_S(mParameters, 15)))) : (0)); // per_millisecond
        const double var_fast_sodium_current_j_gate__beta_j = ((var_chaste_interface__membrane__V < -40.0 + NV_Ith_S(mParameters, 15)) ? (0.024240000000000001 * exp(0.01052 * NV_Ith_S(mParameters, 15) - 0.01052 * var_chaste_interface__membrane__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 15) - 0.13780000000000001 * var_chaste_interface__membrane__V))) : (0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane__V - 0.057000000000000002 * NV_Ith_S(mParameters, 15)) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 15) - 0.10000000000000001 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_fast_sodium_current_j_gate__tau_j = 1 / (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j); // millisecond
        const double var_membrane__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_inward_rectifier_potassium_current__g_K1_total = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 5)) * NV_Ith_S(mParameters, 16); // nanoS_per_picoF
        const double var_rapid_time_dependent_potassium_current__g_Kr_total = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 5)) * NV_Ith_S(mParameters, 18); // nanoS_per_picoF
        const double var_reversal_potentials__E_Ca = 0.5 * NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__calcium_dynamics__Ca_i) / NV_Ith_S(mParameters, 7); // millivolt
        const double var_calcium_background_current__i_b_Ca = (-var_reversal_potentials__E_Ca + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 10); // picoA_per_picoF
        const double var_calcium_background_current__i_b_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_calcium_background_current__i_b_Ca; // uA_per_cm2
        const double var_reversal_potentials__E_K = NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__potassium_dynamics__K_i) / NV_Ith_S(mParameters, 7); // millivolt
        const double var_inward_rectifier_potassium_current__alpha_K1 = 0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_reversal_potentials__E_K)); // dimensionless
        const double var_inward_rectifier_potassium_current__beta_K1 = (3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__membrane__V - 0.00020000000000000001 * var_reversal_potentials__E_K) + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__V - 0.10000000000000001 * var_reversal_potentials__E_K)) / (1.0 + exp(0.5 * var_reversal_potentials__E_K - 0.5 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_inward_rectifier_potassium_current__xK1_inf = var_inward_rectifier_potassium_current__alpha_K1 / (var_inward_rectifier_potassium_current__alpha_K1 + var_inward_rectifier_potassium_current__beta_K1); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * var_inward_rectifier_potassium_current__g_K1_total * var_inward_rectifier_potassium_current__xK1_inf; // picoA_per_picoF
        const double var_inward_rectifier_potassium_current__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_inward_rectifier_potassium_current__i_K1; // uA_per_cm2
        const double var_potassium_pump_current__i_p_K = (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 17) / (_lt_0_row[0]); // picoA_per_picoF
        const double var_potassium_pump_current__i_p_K_converted = HeartConfig::Instance()->GetCapacitance() * var_potassium_pump_current__i_p_K; // uA_per_cm2
        const double var_rapid_time_dependent_potassium_current__i_Kr = (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * var_rapid_time_dependent_potassium_current__g_Kr_total * var_chaste_interface__rapid_time_dependent_potassium_current_Xr1_gate__Xr1 * var_chaste_interface__rapid_time_dependent_potassium_current_Xr2_gate__Xr2; // picoA_per_picoF
        const double var_rapid_time_dependent_potassium_current__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_rapid_time_dependent_potassium_current__i_Kr; // uA_per_cm2
        const double var_reversal_potentials__P_kna = 0.029999999999999999; // dimensionless
        const double var_sodium_calcium_exchanger_current__K_sat = 0.10000000000000001; // dimensionless
        const double var_sodium_calcium_exchanger_current__Km_Ca = 1.3799999999999999; // millimolar
        const double var_sodium_calcium_exchanger_current__Km_Nai = 87.5; // millimolar
        const double var_sodium_calcium_exchanger_current__alpha = 2.5; // dimensionless
        const double var_sodium_calcium_exchanger_current__gamma = 0.34999999999999998; // dimensionless
        const double var_reversal_potentials__E_Ks = NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) * log((var_reversal_potentials__P_kna * NV_Ith_S(mParameters, 6) + NV_Ith_S(mParameters, 5)) / (var_reversal_potentials__P_kna * var_chaste_interface__sodium_dynamics__Na_i + var_chaste_interface__potassium_dynamics__K_i)) / NV_Ith_S(mParameters, 7); // millivolt
        const double var_reversal_potentials__E_Na = NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22) * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__sodium_dynamics__Na_i) / NV_Ith_S(mParameters, 7); // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_reversal_potentials__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 13) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // picoA_per_picoF
        const double var_fast_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_slow_time_dependent_potassium_current__i_Ks = pow(var_chaste_interface__slow_time_dependent_potassium_current_Xs_gate__Xs, 2) * (-var_reversal_potentials__E_Ks + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 19); // picoA_per_picoF
        const double var_slow_time_dependent_potassium_current__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_slow_time_dependent_potassium_current__i_Ks; // uA_per_cm2
        const double var_sodium_background_current__i_b_Na = (-var_reversal_potentials__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 11); // picoA_per_picoF
        const double var_sodium_background_current__i_b_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_sodium_background_current__i_b_Na; // uA_per_cm2
        const double var_sodium_calcium_exchanger_current__i_NaCa = (pow(var_chaste_interface__sodium_dynamics__Na_i, 3) * NV_Ith_S(mParameters, 4) * exp(NV_Ith_S(mParameters, 7) * var_chaste_interface__membrane__V * var_sodium_calcium_exchanger_current__gamma / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22))) - pow(NV_Ith_S(mParameters, 6), 3) * var_chaste_interface__calcium_dynamics__Ca_i * var_sodium_calcium_exchanger_current__alpha * exp((-1.0 + var_sodium_calcium_exchanger_current__gamma) * NV_Ith_S(mParameters, 7) * var_chaste_interface__membrane__V / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)))) * NV_Ith_S(mParameters, 20) / ((1.0 + var_sodium_calcium_exchanger_current__K_sat * exp((-1.0 + var_sodium_calcium_exchanger_current__gamma) * NV_Ith_S(mParameters, 7) * var_chaste_interface__membrane__V / (NV_Ith_S(mParameters, 8) * NV_Ith_S(mParameters, 22)))) * (pow(var_sodium_calcium_exchanger_current__Km_Nai, 3) + pow(NV_Ith_S(mParameters, 6), 3)) * (NV_Ith_S(mParameters, 4) + var_sodium_calcium_exchanger_current__Km_Ca)); // picoA_per_picoF
        const double var_sodium_calcium_exchanger_current__i_NaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_sodium_calcium_exchanger_current__i_NaCa; // uA_per_cm2
        const double var_transient_outward_current__i_to = (-var_reversal_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 21) * var_chaste_interface__transient_outward_current_r_gate__r * var_chaste_interface__transient_outward_current_s_gate__s; // picoA_per_picoF
        const double var_transient_outward_current__i_to_converted = HeartConfig::Instance()->GetCapacitance() * var_transient_outward_current__i_to; // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(28);
        NV_Ith_S(dqs, 0) = var_calcium_dynamics__i_leak;
        NV_Ith_S(dqs, 1) = var_calcium_dynamics__i_rel;
        NV_Ith_S(dqs, 2) = var_calcium_dynamics__i_up;
        NV_Ith_S(dqs, 3) = var_reversal_potentials__E_Ca;
        NV_Ith_S(dqs, 4) = var_calcium_dynamics__Ca_i_bufc;
        NV_Ith_S(dqs, 5) = var_calcium_dynamics__Ca_ss_bufss;
        NV_Ith_S(dqs, 6) = var_L_type_Ca_current__i_CaL_converted;
        NV_Ith_S(dqs, 7) = var_L_type_Ca_current_f2_gate__tau_f2;
        NV_Ith_S(dqs, 8) = var_L_type_Ca_current_fCass_gate__tau_fCass;
        NV_Ith_S(dqs, 9) = var_L_type_Ca_current_f_gate__tau_f;
        NV_Ith_S(dqs, 10) = var_calcium_background_current__i_b_Ca_converted;
        NV_Ith_S(dqs, 11) = var_sodium_background_current__i_b_Na_converted;
        NV_Ith_S(dqs, 12) = var_calcium_pump_current__i_p_Ca_converted;
        NV_Ith_S(dqs, 13) = var_fast_sodium_current__i_Na_converted;
        NV_Ith_S(dqs, 14) = var_fast_sodium_current_h_gate__tau_h;
        NV_Ith_S(dqs, 15) = var_fast_sodium_current_j_gate__tau_j;
        NV_Ith_S(dqs, 16) = var_inward_rectifier_potassium_current__i_K1_converted;
        NV_Ith_S(dqs, 17) = var_inward_rectifier_potassium_current__g_K1_total;
        NV_Ith_S(dqs, 18) = var_potassium_pump_current__i_p_K_converted;
        NV_Ith_S(dqs, 19) = var_rapid_time_dependent_potassium_current__i_Kr_converted;
        NV_Ith_S(dqs, 20) = var_rapid_time_dependent_potassium_current__g_Kr_total;
        NV_Ith_S(dqs, 21) = var_slow_time_dependent_potassium_current__i_Ks_converted;
        NV_Ith_S(dqs, 22) = var_sodium_calcium_exchanger_current__i_NaCa_converted;
        NV_Ith_S(dqs, 23) = var_membrane__i_Stim_converted;
        NV_Ith_S(dqs, 24) = var_transient_outward_current__i_to_converted;
        NV_Ith_S(dqs, 25) = var_reversal_potentials__E_K;
        NV_Ith_S(dqs, 26) = var_reversal_potentials__E_Na;
        NV_Ith_S(dqs, 27) = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt>::Initialise(void)
{
    this->mSystemName = "tentusscher_model_2006_epi";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-85.23);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.000126);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("rapid_time_dependent_potassium_current_Xr1_gate__Xr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00621);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("rapid_time_dependent_potassium_current_Xr2_gate__Xr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.4712);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("slow_time_dependent_potassium_current_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0095);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00172);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7444);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7045);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.373e-05);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7888);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f2_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9755);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9953);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("transient_outward_current_s_gate__s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999998);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("transient_outward_current_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.42e-08);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(3.64);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00036);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("calcium_dynamics__R_prime");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9073);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.604);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(136.89);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("millimolar_per_millisecond");

    // mParameters[3]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[7]:
    this->mParameterNames.push_back("faraday_constant");
    this->mParameterUnits.push_back("coulomb_per_millimole");

    // mParameters[8]:
    this->mParameterNames.push_back("gas_constant");
    this->mParameterUnits.push_back("joule_per_mole_kelvin");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("litre_per_farad_second");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_background_calcium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_background_sodium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_capacitance");
    this->mParameterUnits.push_back("microF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("millivolt");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_potassium_pump_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[18]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[19]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[20]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("picoA_per_picoF");

    // mParameters[21]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[22]:
    this->mParameterNames.push_back("temperature");
    this->mParameterUnits.push_back("kelvin");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_leak_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("SR_uptake_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("calcium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("millivolt");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_flux_scaling_from_intrinsic_buffers");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("dyadic_space_calcium_flux_scaling_from_intrinsic_buffers");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f2_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_fCa_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_background_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_background_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_calcium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [17]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("nanoS_per_picoF");

    // Derived Quantity index [18]:
    this->mDerivedQuantityNames.push_back("membrane_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [19]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [20]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("nanoS_per_picoF");

    // Derived Quantity index [21]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [22]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [23]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [24]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [25]:
    this->mDerivedQuantityNames.push_back("potassium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("millivolt");

    // Derived Quantity index [26]:
    this->mDerivedQuantityNames.push_back("sodium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("millivolt");

    // Derived Quantity index [27]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellten_tusscher_model_2006_epiFromCellMLCvodeOpt)

#endif // CHASTE_CVODE
