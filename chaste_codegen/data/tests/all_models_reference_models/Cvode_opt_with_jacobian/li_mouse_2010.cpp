#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: Li_Mouse_2010
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvodeOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "li_mouse_2010.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<39; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__cell__V)
    {
        const double _offset_0 = var_chaste_interface__cell__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__cell__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__cell__V>mTableMaxs[0] || var_chaste_interface__cell__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables(const Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables&);
    Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables& operator= (const Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables&);
    Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 39;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][39];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.075369662812530269 * var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[0] < 2){
                    double left = _lookup_table_0[i-1][0];
                    double right = _lookup_table_0[i+1][0];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 0 at ["<<i<<"][0] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[0] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] >= 2){
                    EXCEPTION("Lookup table 0 at ["<<i<<"][0] has non-finite value: " << val);
                }
                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 - exp(-0.075369662812530269 * var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[1] < 2){
                    double left = _lookup_table_0[i-1][1];
                    double right = _lookup_table_0[i+1][1];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[1] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] >= 2){
                    EXCEPTION("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val);
                }
                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(5.9871794871794881 - 0.12820512820512822 * var_chaste_interface__cell__V);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.013189690992192795 * var_chaste_interface__cell__V);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.024495140414072337 * var_chaste_interface__cell__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + 0.27000000000000002 * exp(-0.024495140414072337 * var_chaste_interface__cell__V);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.037684831406265135 * var_chaste_interface__cell__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.1245 * exp(-0.0037684831406265135 * var_chaste_interface__cell__V);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.15506520491866829 * var_chaste_interface__cell__V);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.038580246913580245 * pow((-1 + 0.20000000000000001 * var_chaste_interface__cell__V), 2));

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(4.024390243902439 + 0.12195121951219513 * var_chaste_interface__cell__V));

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.10000000000000001 / (1.0 + exp(6.666666666666667 - 0.16666666666666666 * var_chaste_interface__cell__V));

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 8.0 + 315.0 / (1.0 + exp(7.5 + 0.25 * var_chaste_interface__cell__V));

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 3.802 / (0.20000000000000001 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V) + 0.1027 * exp(-0.14705882352941177 - 0.058823529411764705 * var_chaste_interface__cell__V));

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 3.802 / (0.1027 * exp(-0.16666666666666666 - 0.066666666666666666 * var_chaste_interface__cell__V) + 0.23000000000000001 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V));

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 3.802 / (0.25 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V) + 0.1027 * exp(-0.20833333333333334 - 0.083333333333333329 * var_chaste_interface__cell__V));

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (0.39395599999999997 + 0.188495 * exp(-0.42168674698795178 - 0.060240963855421679 * var_chaste_interface__cell__V));

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 6.9999999999999997e-7 * exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.19170000000000001 * exp(-0.12315270935960591 - 0.04926108374384236 * var_chaste_interface__cell__V);

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.20000000000000001 * exp(0.12315270935960591 - 0.04926108374384236 * var_chaste_interface__cell__V);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.22 * exp(0.36945812807881773 - 0.04926108374384236 * var_chaste_interface__cell__V);

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(1.6096500000000002 + 0.035770000000000003 * var_chaste_interface__cell__V);

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-2.8066499999999999 - 0.062370000000000002 * var_chaste_interface__cell__V);

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(10.279999999999999 + 0.20000000000000001 * var_chaste_interface__cell__V));

                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 9.6645000000000003 + 10.936199999999999 / (1.0 + exp(10.279999999999999 + 0.20000000000000001 * var_chaste_interface__cell__V));

                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.033500000000000002 * exp(0.0109 * var_chaste_interface__cell__V);

                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.070300000000000001 * exp(0.14349999999999999 + 0.0287 * var_chaste_interface__cell__V);

                _lookup_table_0[i][26] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 6.8899999999999994e-5 * exp(-0.041779999999999998 * var_chaste_interface__cell__V);

                _lookup_table_0[i][27] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.0064970000000000002 * exp(-0.16339999999999999 - 0.032680000000000001 * var_chaste_interface__cell__V);

                _lookup_table_0[i][28] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.01176 * var_chaste_interface__cell__V);

                _lookup_table_0[i][29] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.063100000000000003 * var_chaste_interface__cell__V);

                _lookup_table_0[i][30] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(26.5 + var_chaste_interface__cell__V) < 7.8124999999817923e-7) ? (3.7604140624912359e-12 / (1.0 - exp(-9.9999999999766942e-8)) - 640000.00000149151 * (26.499999218749998 + var_chaste_interface__cell__V) * (-3.7604140624912359e-12 / (1.0 - exp(9.9999999999766942e-8)) - 3.7604140624912359e-12 / (1.0 - exp(-9.9999999999766942e-8)))) : (4.8133299999999997e-6 * (26.5 + var_chaste_interface__cell__V) / (1.0 - exp(-3.3919999999999999 - 0.128 * var_chaste_interface__cell__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[31] < 2){
                    double left = _lookup_table_0[i-1][31];
                    double right = _lookup_table_0[i+1][31];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 31 at ["<<i<<"][31] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[31] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[31] >= 2){
                    EXCEPTION("Lookup table 31 at ["<<i<<"][31] has non-finite value: " << val);
                }
                _lookup_table_0[i][31] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-1.0069999999999999 - 0.037999999999999999 * var_chaste_interface__cell__V);

                _lookup_table_0[i][32] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-0.64479166666666676 - 0.10416666666666667 * var_chaste_interface__cell__V));

                _lookup_table_0[i][33] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 13.17 + 39.299999999999997 * exp(-0.050000000000000003 * var_chaste_interface__cell__V);

                _lookup_table_0[i][34] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 2.0579999999999998 + 0.49299999999999999 * exp(-0.062899999999999998 * var_chaste_interface__cell__V);

                _lookup_table_0[i][35] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(7.7962962962962958 + 0.18518518518518517 * var_chaste_interface__cell__V));

                _lookup_table_0[i][36] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 270.0 + 1050.0 / (1.0 + exp(7.9298245614035094 + 0.17543859649122806 * var_chaste_interface__cell__V));

                _lookup_table_0[i][37] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 643.0 + 1000.0 / (1.0 + exp(7.7962962962962958 + 0.18518518518518517 * var_chaste_interface__cell__V));

                _lookup_table_0[i][38] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[39];

    // Lookup tables
    double (*_lookup_table_0)[39];
    int _lookup_table_0_num_misshit_piecewise[39] = {0};

};

std::shared_ptr<Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables> Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> Cellli_mouse_2010FromCellMLCvodeOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -15.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_chaste_interface__cell__stim_offset = 0; // millisecond
        const double var_chaste_interface__cell__stim_period = 333.33300000000003; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellli_mouse_2010FromCellMLCvodeOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellli_mouse_2010FromCellMLCvodeOpt::Cellli_mouse_2010FromCellMLCvodeOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                36,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellli_mouse_2010FromCellMLCvodeOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 4.5; // (var_calcium_fluxes__v1) [per_millisecond]
        NV_Ith_S(this->mParameters, 1) = 1400.0; // (var_cell__Cao) [micromolar]
        NV_Ith_S(this->mParameters, 2) = 5400.0; // (var_cell__Ko) [micromolar]
        NV_Ith_S(this->mParameters, 3) = 134000.0; // (var_cell__Nao) [micromolar]
        NV_Ith_S(this->mParameters, 4) = 2.5; // (var_L_type_calcium_current__P_CaL) [per_millisecond]
        NV_Ith_S(this->mParameters, 5) = 1.0; // (var_cell__Cm) [microF_per_cm2]
        NV_Ith_S(this->mParameters, 6) = 16.0; // (var_fast_sodium_current__g_Na) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 7) = 0.34999999999999998; // (var_time_independent_K_I__g_K1) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 8) = 0.059499999999999997; // (var_non_inactivating_steady_state_K_I__g_Kss) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 9) = 0.016500000000000001; // (var_rapid_delayed_rectifier_K_I__g_Kr) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 10) = 0.0057499999999999999; // (var_slow_delayed_rectifier_K_I__g_Ks) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 11) = 3.9390000000000001; // (var_sodium_calcium_exchange_current__V_max_NCX) [picoA_per_picoF]
    }

    Cellli_mouse_2010FromCellMLCvodeOpt::~Cellli_mouse_2010FromCellMLCvodeOpt()
    {
    }

    AbstractLookupTableCollection* Cellli_mouse_2010FromCellMLCvodeOpt::GetLookupTableCollection()
    {
        return Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables::Instance();
    }
    
    double Cellli_mouse_2010FromCellMLCvodeOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = NV_Ith_S(rY, 2);
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__L_type_calcium_current__O = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__y_gate = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = NV_Ith_S(rY, 13);
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__potassium_concentration__Ki = NV_Ith_S(rY, 22);
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 0.00346258606821817
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 0.955684946168062
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 0.00336735013094628
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 0.0142335908879204
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.996989882138174
        
        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_pump_current__i_pCa = 0.095500000000000002 * pow(var_calcium_concentration__Cai, 2) / (0.083232249999999994 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL_converted = HeartConfig::Instance()->GetCapacitance() * ((fabs(var_chaste_interface__cell__V) < 1.3267937823834197e-6) ? (-376848.31406265136 * (-1.3267937823834197e-6 + var_chaste_interface__cell__V) * (3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5)) + 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5))) - 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5))) : (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * _lt_0_row[0]) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((_lt_0_row[1]) * NV_Ith_S(mParameters, 5)))); // uA_per_cm2
        const double var_calcium_activated_chloride_current__i_ClCa = 2.0 * (40.0 + var_chaste_interface__cell__V) * var_calcium_concentration__Cai / ((_lt_0_row[2]) * (10.0 + var_calcium_concentration__Cai)); // picoA_per_picoF
        const double var_calcium_background_current__i_Cab = 0.00069999999999999999 * var_chaste_interface__cell__V - 0.0092875564766839377 * log(NV_Ith_S(mParameters, 1) / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_fast_transient_outward_K_I__E_K = 26.535875647668394 * log(NV_Ith_S(mParameters, 2) / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_K_I__i_Kto_f = 0.53469999999999995 * pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__fast_transient_outward_K_I__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss_converted = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * NV_Ith_S(mParameters, 8) * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // uA_per_cm2
        const double var_slow_delayed_rectifier_K_I__i_Ks_converted = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 10); // uA_per_cm2
        const double var_slow_transient_outward_K_I__i_Kto_s = 0; // picoA_per_picoF
        const double var_fast_sodium_current__E_Na = 26.535875647668394 * log((NV_Ith_S(mParameters, 3) + 0.1111111111111111 * NV_Ith_S(mParameters, 2)) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)); // millivolt
        const double var_fast_sodium_current__i_Na_converted = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__fast_sodium_current__O_Na * NV_Ith_S(mParameters, 6); // uA_per_cm2
        const double var_rapid_delayed_rectifier_K_I__i_Kr_converted = (-26.535875647668394 * log((NV_Ith_S(mParameters, 2) + 0.020408163265306124 * NV_Ith_S(mParameters, 3)) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * NV_Ith_S(mParameters, 9); // uA_per_cm2
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__cell__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX_converted = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * NV_Ith_S(mParameters, 1) * _lt_0_row[3] - pow(NV_Ith_S(mParameters, 3), 3) * var_calcium_concentration__Cai * _lt_0_row[4]) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 11) / ((_lt_0_row[5]) * (1400.0 * pow(var_chaste_interface__sodium_concentration__Nai, 3) + 681472000000000.0 * var_calcium_concentration__Cai + pow(NV_Ith_S(mParameters, 3), 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * NV_Ith_S(mParameters, 1) + 1728000000000.0 * (1.0 + 0.27777777777777779 * var_calcium_concentration__Cai) * NV_Ith_S(mParameters, 1) + 3.6000000000000001 * pow(NV_Ith_S(mParameters, 3), 3) * (1.0 + 5.7870370370370368e-13 * pow(var_chaste_interface__sodium_concentration__Nai, 3)))); // uA_per_cm2
        const double var_sodium_potassium_pump_current__i_NaK = 2.4860000000000002 * NV_Ith_S(mParameters, 2) / ((1.0 + 13435672565.051065 * pow((1 / var_chaste_interface__sodium_concentration__Nai), 2.3999999999999999)) * (1500.0 + NV_Ith_S(mParameters, 2)) * (1.0 + _lt_0_row[7] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * NV_Ith_S(mParameters, 3))) * _lt_0_row[6])); // picoA_per_picoF
        const double var_time_independent_K_I__i_K1_converted = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 2) * NV_Ith_S(mParameters, 7) / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + NV_Ith_S(mParameters, 2))); // uA_per_cm2
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur = 0.25 * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur; // picoA_per_picoF
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_calcium_activated_chloride_current__i_ClCa + HeartConfig::Instance()->GetCapacitance() * var_calcium_background_current__i_Cab + HeartConfig::Instance()->GetCapacitance() * var_calcium_pump_current__i_pCa + HeartConfig::Instance()->GetCapacitance() * var_fast_transient_outward_K_I__i_Kto_f + HeartConfig::Instance()->GetCapacitance() * var_slow_transient_outward_K_I__i_Kto_s + HeartConfig::Instance()->GetCapacitance() * var_sodium_background_current__i_Nab + HeartConfig::Instance()->GetCapacitance() * var_sodium_potassium_pump_current__i_NaK + HeartConfig::Instance()->GetCapacitance() * var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur + var_L_type_calcium_current__i_CaL_converted + var_fast_sodium_current__i_Na_converted + var_non_inactivating_steady_state_K_I__i_Kss_converted + var_rapid_delayed_rectifier_K_I__i_Kr_converted + var_slow_delayed_rectifier_K_I__i_Ks_converted + var_sodium_calcium_exchange_current__i_NCX_converted + var_time_independent_K_I__i_K1_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellli_mouse_2010FromCellMLCvodeOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = NV_Ith_S(rY, 2);
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaJSR = NV_Ith_S(rY, 3);
        // Units: micromolar; Initial value: 171.167969039613
        double var_chaste_interface__calcium_concentration__CaNSR = NV_Ith_S(rY, 4);
        // Units: micromolar; Initial value: 404.825013216286
        double var_chaste_interface__calcium_fluxes__P_RyR = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.000280539508743811
        double var_chaste_interface__calcium_fluxes__CaMKt = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.729027738385079
        double var_chaste_interface__ryanodine_receptors__P_O1 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        double var_chaste_interface__ryanodine_receptors__P_C2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.565182571165673
        double var_chaste_interface__L_type_calcium_current__O = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__I = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.427651445872853
        double var_chaste_interface__L_type_calcium_current__y_gate = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = NV_Ith_S(rY, 13);
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__fast_sodium_current__C_Na1 = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.000420472760277688
        double var_chaste_interface__fast_sodium_current__C_Na2 = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.0240114508843199
        double var_chaste_interface__fast_sodium_current__I1_Na = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.000517471697712382
        double var_chaste_interface__fast_sodium_current__I2_Na = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 2.45406116958509e-05
        double var_chaste_interface__fast_sodium_current__IF_Na = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.000306123648969581
        double var_chaste_interface__fast_sodium_current__IC_Na2 = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.0174528857380179
        double var_chaste_interface__fast_sodium_current__IC_Na3 = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.402980726914811
        double var_chaste_interface__potassium_concentration__Ki = NV_Ith_S(rY, 22);
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 0.00346258606821817
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 0.955684946168062
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.0011733433957123
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 0.00105586824723736
        double var_chaste_interface__rapid_delayed_rectifier_K_I__I_K = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 0.00140618453684944
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 0.00336735013094628
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 0.0142335908879204
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.996989882138174
        double var_chaste_interface__slow_transient_outward_K_I__ato_s = NV_Ith_S(rY, 34);
        // Units: dimensionless; Initial value: 0.0443263407760382
        double var_chaste_interface__slow_transient_outward_K_I__ito_s = NV_Ith_S(rY, 35);
        // Units: dimensionless; Initial value: 0.887568880831388

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        double d_dt_chaste_interface_var_cell__V;
        const double d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__iKss = 0; // 1 / millisecond
        const double var_L_type_calcium_current__C = 1.0 - var_chaste_interface__L_type_calcium_current__I - var_chaste_interface__L_type_calcium_current__O; // dimensionless
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__calcium_fluxes__CaMKt) / (1.0 + 0.69999999999999996 / var_chaste_interface__calcium_concentration__Cass); // dimensionless
        const double d_dt_chaste_interface_var_calcium_fluxes__CaMKt = -0.00020000000000000001 * var_chaste_interface__calcium_fluxes__CaMKt + 0.050000000000000003 * (var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt) * var_calcium_fluxes__CaMKb; // 1 / millisecond
        const double var_calcium_fluxes__J_tr = 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaNSR - 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaJSR; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_xfer = 0.125 * var_chaste_interface__calcium_concentration__Cass - 0.125 * var_calcium_concentration__Cai; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_serca = pow(var_calcium_concentration__Cai, 2) * (0.50590000000000002 + 1.5167893800000001 * pow((var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt), 2.5830000000000002) / (1.7590641847756086 + pow((var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt), 2.5830000000000002))) / (0.16974399999999998 + pow(var_calcium_concentration__Cai, 2)); // micromolar_per_millisecond
        const double var_calcium_pump_current__i_pCa = 0.095500000000000002 * pow(var_calcium_concentration__Cai, 2) / (0.083232249999999994 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_L_type_calcium_current__expVL = _lt_0_row[8]; // dimensionless
        const double d_dt_chaste_interface_var_L_type_calcium_current__O = -1.1986666666666668 * var_chaste_interface__L_type_calcium_current__O + 0.66666666666666663 * var_L_type_calcium_current__C * var_L_type_calcium_current__expVL / (1.0 + var_L_type_calcium_current__expVL); // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__I = -0.00034782608695652176 * (0.0625 + var_L_type_calcium_current__expVL) * var_chaste_interface__L_type_calcium_current__I / (0.0625 + 0.40000000000000002 * var_L_type_calcium_current__expVL) + 0.0028985507246376812 * (0.0625 + var_L_type_calcium_current__expVL) * var_L_type_calcium_current__C * var_chaste_interface__calcium_concentration__Cass / (1.0 + var_L_type_calcium_current__expVL); // 1 / millisecond
        const double var_L_type_calcium_current__i_CaL = ((fabs(var_chaste_interface__cell__V) < 1.3267937823834197e-6) ? (-376848.31406265136 * (-1.3267937823834197e-6 + var_chaste_interface__cell__V) * (3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5)) + 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5))) - 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5))) : (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * _lt_0_row[0]) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((_lt_0_row[1]) * NV_Ith_S(mParameters, 5)))); // picoA_per_picoF
        const double d_dt_chaste_interface_var_calcium_fluxes__P_RyR = -0.01 * var_chaste_interface__calcium_fluxes__P_RyR - 0.2857142857142857 * var_L_type_calcium_current__i_CaL * _lt_0_row[9]; // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__y_gate = (-var_chaste_interface__L_type_calcium_current__y_gate + _lt_0_row[10] + _lt_0_row[11]) / (_lt_0_row[12]); // 1 / millisecond
        const double var_calcium_background_current__i_Cab = 0.00069999999999999999 * var_chaste_interface__cell__V - 0.0092875564766839377 * log(NV_Ith_S(mParameters, 1) / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_calcium_fluxes__J_leak = ((var_chaste_interface__environment__time < 3333330000000.0005) ? (3.0000000000000001e-5 * var_chaste_interface__calcium_concentration__CaNSR - 3.0000000000000001e-5 * var_calcium_concentration__Cai) : (0.10000000000000001 * var_chaste_interface__calcium_concentration__CaNSR - 0.10000000000000001 * var_calcium_concentration__Cai)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaNSR = 95.238095238095241 * var_calcium_fluxes__J_serca - 95.238095238095241 * var_calcium_fluxes__J_leak - 0.33333333333333337 * var_calcium_fluxes__J_tr; // micromolar / millisecond
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // picoA_per_picoF
        const double var_fast_sodium_current__C_Na3 = 1.0 - var_chaste_interface__fast_sodium_current__C_Na1 - var_chaste_interface__fast_sodium_current__C_Na2 - var_chaste_interface__fast_sodium_current__I1_Na - var_chaste_interface__fast_sodium_current__I2_Na - var_chaste_interface__fast_sodium_current__IC_Na2 - var_chaste_interface__fast_sodium_current__IC_Na3 - var_chaste_interface__fast_sodium_current__IF_Na - var_chaste_interface__fast_sodium_current__O_Na; // dimensionless
        const double var_fast_sodium_current__alpha_Na11 = _lt_0_row[13]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na12 = _lt_0_row[14]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na13 = _lt_0_row[15]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na2 = _lt_0_row[16]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = _lt_0_row[17]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na4 = 0.001 * var_fast_sodium_current__alpha_Na2; // per_millisecond
        const double var_fast_sodium_current__alpha_Na5 = 1.0526315789473684e-5 * var_fast_sodium_current__alpha_Na2; // per_millisecond
        const double var_fast_sodium_current__beta_Na11 = _lt_0_row[18]; // per_millisecond
        const double var_fast_sodium_current__beta_Na12 = _lt_0_row[19]; // per_millisecond
        const double var_fast_sodium_current__beta_Na13 = _lt_0_row[20]; // per_millisecond
        const double var_fast_sodium_current__beta_Na3 = 0.008539999999999999 + 2.0000000000000002e-5 * var_chaste_interface__cell__V; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__C_Na1 = var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__alpha_Na12 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na3 + var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__beta_Na13 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__alpha_Na13 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na3; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__C_Na2 = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na12 + var_fast_sodium_current__C_Na3 * var_fast_sodium_current__alpha_Na11 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__alpha_Na12 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na11 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na3; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IC_Na2 = var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na11 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na12 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__beta_Na11; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IC_Na3 = var_fast_sodium_current__C_Na3 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__beta_Na11 - var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na11 - var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na3; // 1 / millisecond
        const double var_fast_sodium_current__beta_Na2 = var_fast_sodium_current__alpha_Na13 * var_fast_sodium_current__alpha_Na2 * var_fast_sodium_current__alpha_Na3 / (var_fast_sodium_current__beta_Na13 * var_fast_sodium_current__beta_Na3); // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__O_Na = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__alpha_Na13 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na2 - var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__alpha_Na2 - var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__beta_Na13; // 1 / millisecond
        const double var_fast_sodium_current__beta_Na4 = var_fast_sodium_current__alpha_Na3; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IF_Na = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__beta_Na4 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na12 + var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__alpha_Na2 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na4 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na2; // 1 / millisecond
        const double var_fast_sodium_current__beta_Na5 = 0.02 * var_fast_sodium_current__alpha_Na3; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__I1_Na = var_chaste_interface__fast_sodium_current__I2_Na * var_fast_sodium_current__beta_Na5 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na4 - var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__alpha_Na5 - var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__beta_Na4; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__I2_Na = var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__alpha_Na5 - var_chaste_interface__fast_sodium_current__I2_Na * var_fast_sodium_current__beta_Na5; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_transient_outward_K_I__ato_f = 0.18064 * (1.0 - var_chaste_interface__fast_transient_outward_K_I__ato_f) * _lt_0_row[21] - 0.39560000000000001 * var_chaste_interface__fast_transient_outward_K_I__ato_f * _lt_0_row[22]; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_transient_outward_K_I__ito_f = (-var_chaste_interface__fast_transient_outward_K_I__ito_f + _lt_0_row[23]) / (_lt_0_row[24]); // 1 / millisecond
        const double var_fast_transient_outward_K_I__E_K = 26.535875647668394 * log(NV_Ith_S(mParameters, 2) / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_K_I__i_Kto_f = 0.53469999999999995 * pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__fast_transient_outward_K_I__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * NV_Ith_S(mParameters, 8) * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__alpha_a1 = _lt_0_row[25]; // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__alpha_i = _lt_0_row[26]; // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_a1 = _lt_0_row[27]; // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_i = _lt_0_row[28]; // per_millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__I_K = var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__alpha_i - var_chaste_interface__rapid_delayed_rectifier_K_I__I_K * var_rapid_delayed_rectifier_K_I__beta_i; // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__O_K = var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 * var_rapid_delayed_rectifier_K_I__alpha_a1 + var_chaste_interface__rapid_delayed_rectifier_K_I__I_K * var_rapid_delayed_rectifier_K_I__beta_i - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__alpha_i - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__beta_a1; // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K1 = 0.036777999999999998 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 - 0.023761000000000001 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 + 0.022348 * (1.0 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 - var_chaste_interface__rapid_delayed_rectifier_K_I__I_K - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K) * _lt_0_row[29] - 0.047002000000000002 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 * _lt_0_row[30]; // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K2 = 0.023761000000000001 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 - 0.036777999999999998 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 + var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__beta_a1 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 * var_rapid_delayed_rectifier_K_I__alpha_a1; // 1 / millisecond
        const double var_calcium_fluxes__J_rel = ((var_chaste_interface__environment__time < 3333330000000.0005) ? ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * (var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2) * var_chaste_interface__calcium_fluxes__P_RyR * NV_Ith_S(mParameters, 0)) : (10.0 * var_chaste_interface__calcium_concentration__CaJSR - 10.0 * var_chaste_interface__calcium_concentration__Cass)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaJSR = (-var_calcium_fluxes__J_rel + var_calcium_fluxes__J_tr) / (1.0 + 79.365079365079367 / pow((1 + 0.0015873015873015873 * var_chaste_interface__calcium_concentration__CaJSR), 2)); // micromolar / millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__Cass = (3.5000000000000004 * var_calcium_fluxes__J_rel - 1000.0 * var_calcium_fluxes__J_xfer - 32.656617993405561 * var_L_type_calcium_current__i_CaL * NV_Ith_S(mParameters, 5)) / (1.0 + 65.399999999999991 / pow((0.59999999999999998 + var_chaste_interface__calcium_concentration__Cass), 2)); // micromolar / millisecond
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_C2 = 0.0089999999999999993 * var_chaste_interface__ryanodine_receptors__P_O1 - 0.00080000000000000004 * var_chaste_interface__ryanodine_receptors__P_C2; // 1 / millisecond
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O2 = -0.96499999999999997 * var_chaste_interface__ryanodine_receptors__P_O2 + 0.0040499999999999998 * pow(var_chaste_interface__calcium_concentration__Cass, 3.0) * var_chaste_interface__ryanodine_receptors__P_O1; // 1 / millisecond
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O1 = 0.00080000000000000004 * var_chaste_interface__ryanodine_receptors__P_C2 + 0.96499999999999997 * var_chaste_interface__ryanodine_receptors__P_O2 - 0.080249999999999988 * var_chaste_interface__ryanodine_receptors__P_O1 + 0.0060749999999999997 * pow(var_chaste_interface__calcium_concentration__Cass, 4.0) * (1.0 - var_chaste_interface__ryanodine_receptors__P_C2 - var_chaste_interface__ryanodine_receptors__P_O1 - var_chaste_interface__ryanodine_receptors__P_O2) - 0.0040499999999999998 * pow(var_chaste_interface__calcium_concentration__Cass, 3.0) * var_chaste_interface__ryanodine_receptors__P_O1; // 1 / millisecond
        const double d_dt_chaste_interface_var_slow_delayed_rectifier_K_I__nKs = (1.0 - var_chaste_interface__slow_delayed_rectifier_K_I__nKs) * _lt_0_row[31] - 9.5333299999999997e-5 * var_chaste_interface__slow_delayed_rectifier_K_I__nKs * _lt_0_row[32]; // 1 / millisecond
        const double var_slow_delayed_rectifier_K_I__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 10); // picoA_per_picoF
        const double var_slow_transient_outward_K_I__i_Kto_s = 0; // picoA_per_picoF
        const double var_fast_sodium_current__E_Na = 26.535875647668394 * log((NV_Ith_S(mParameters, 3) + 0.1111111111111111 * NV_Ith_S(mParameters, 2)) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)); // millivolt
        const double var_fast_sodium_current__i_Na = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_chaste_interface__fast_sodium_current__O_Na * NV_Ith_S(mParameters, 6); // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__i_Kr = (-26.535875647668394 * log((NV_Ith_S(mParameters, 2) + 0.020408163265306124 * NV_Ith_S(mParameters, 3)) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) + var_chaste_interface__cell__V) * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * NV_Ith_S(mParameters, 9); // picoA_per_picoF
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__cell__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * NV_Ith_S(mParameters, 1) * _lt_0_row[3] - pow(NV_Ith_S(mParameters, 3), 3) * var_calcium_concentration__Cai * _lt_0_row[4]) * NV_Ith_S(mParameters, 11) / ((_lt_0_row[5]) * (1400.0 * pow(var_chaste_interface__sodium_concentration__Nai, 3) + 681472000000000.0 * var_calcium_concentration__Cai + pow(NV_Ith_S(mParameters, 3), 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * NV_Ith_S(mParameters, 1) + 1728000000000.0 * (1.0 + 0.27777777777777779 * var_calcium_concentration__Cai) * NV_Ith_S(mParameters, 1) + 3.6000000000000001 * pow(NV_Ith_S(mParameters, 3), 3) * (1.0 + 5.7870370370370368e-13 * pow(var_chaste_interface__sodium_concentration__Nai, 3)))); // picoA_per_picoF
        const double d_dt_chaste_interface_var_calcium_concentration__Cai_converted = 0.001 * (-var_calcium_fluxes__J_serca - 0.032656617993405558 * (-2.0 * var_sodium_calcium_exchange_current__i_NCX + var_calcium_background_current__i_Cab + var_calcium_pump_current__i_pCa) * NV_Ith_S(mParameters, 5) + var_calcium_fluxes__J_leak + var_calcium_fluxes__J_xfer) / (1.0 + 65.399999999999991 / pow((0.59999999999999998 + var_calcium_concentration__Cai), 2)); // millimolar / millisecond
        const double var_sodium_potassium_pump_current__i_NaK = 2.4860000000000002 * NV_Ith_S(mParameters, 2) / ((1.0 + 13435672565.051065 * pow((1 / var_chaste_interface__sodium_concentration__Nai), 2.3999999999999999)) * (1500.0 + NV_Ith_S(mParameters, 2)) * (1.0 + _lt_0_row[7] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * NV_Ith_S(mParameters, 3))) * _lt_0_row[6])); // picoA_per_picoF
        const double d_dt_chaste_interface_var_sodium_concentration__Nai = 0.065313235986811116 * (-var_fast_sodium_current__i_Na - var_sodium_background_current__i_Nab - 3.0 * var_sodium_calcium_exchange_current__i_NCX - 3.0 * var_sodium_potassium_pump_current__i_NaK) * NV_Ith_S(mParameters, 5); // micromolar / millisecond
        const double var_time_independent_K_I__i_K1 = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 2) * NV_Ith_S(mParameters, 7) / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + NV_Ith_S(mParameters, 2))); // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__ass = _lt_0_row[33]; // dimensionless
        const double d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__aKss = (-var_chaste_interface__non_inactivating_steady_state_K_I__aKss + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / (_lt_0_row[34]); // 1 / millisecond
        const double d_dt_chaste_interface_var_slow_transient_outward_K_I__ato_s = (-var_chaste_interface__slow_transient_outward_K_I__ato_s + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / (_lt_0_row[35]); // 1 / millisecond
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__iss = _lt_0_row[36]; // dimensionless
        const double d_dt_chaste_interface_var_slow_transient_outward_K_I__ito_s = (-var_chaste_interface__slow_transient_outward_K_I__ito_s + var_ultra_rapidly_activating_delayed_rectifier_K_I__iss) / (_lt_0_row[37]); // 1 / millisecond
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur = 0.25 * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur; // picoA_per_picoF
        const double d_dt_chaste_interface_var_potassium_concentration__Ki = 0.065313235986811116 * (-var_cell__i_Stim - var_fast_transient_outward_K_I__i_Kto_f - var_non_inactivating_steady_state_K_I__i_Kss - var_rapid_delayed_rectifier_K_I__i_Kr - var_slow_delayed_rectifier_K_I__i_Ks - var_slow_transient_outward_K_I__i_Kto_s - var_time_independent_K_I__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur + 2.0 * var_sodium_potassium_pump_current__i_NaK) * NV_Ith_S(mParameters, 5); // micromolar / millisecond
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__aur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / (_lt_0_row[35]); // 1 / millisecond
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__iur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur + var_ultra_rapidly_activating_delayed_rectifier_K_I__iss) / (_lt_0_row[38]); // 1 / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_cell__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_cell__V = -var_L_type_calcium_current__i_CaL - var_calcium_background_current__i_Cab - var_calcium_pump_current__i_pCa - var_cell__i_Stim - var_fast_sodium_current__i_Na - var_fast_transient_outward_K_I__i_Kto_f - var_non_inactivating_steady_state_K_I__i_Kss - var_rapid_delayed_rectifier_K_I__i_Kr - var_slow_delayed_rectifier_K_I__i_Ks - var_slow_transient_outward_K_I__i_Kto_s - var_sodium_background_current__i_Nab - var_sodium_calcium_exchange_current__i_NCX - var_sodium_potassium_pump_current__i_NaK - var_time_independent_K_I__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur - 2.0 * (40.0 + var_chaste_interface__cell__V) * var_calcium_concentration__Cai / ((_lt_0_row[2]) * (10.0 + var_calcium_concentration__Cai)); // millivolt / millisecond
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_cell__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_calcium_concentration__Cai_converted;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_calcium_concentration__Cass;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_calcium_concentration__CaJSR;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_calcium_concentration__CaNSR;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_calcium_fluxes__P_RyR;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_calcium_fluxes__CaMKt;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_ryanodine_receptors__P_O1;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_ryanodine_receptors__P_O2;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_ryanodine_receptors__P_C2;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_L_type_calcium_current__O;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_L_type_calcium_current__I;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_L_type_calcium_current__y_gate;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_sodium_concentration__Nai;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_fast_sodium_current__O_Na;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_fast_sodium_current__C_Na1;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_fast_sodium_current__C_Na2;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_fast_sodium_current__I1_Na;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_fast_sodium_current__I2_Na;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_fast_sodium_current__IF_Na;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_fast_sodium_current__IC_Na2;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_fast_sodium_current__IC_Na3;
        NV_Ith_S(rDY,22) = d_dt_chaste_interface_var_potassium_concentration__Ki;
        NV_Ith_S(rDY,23) = d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__aur;
        NV_Ith_S(rDY,24) = d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__iur;
        NV_Ith_S(rDY,25) = d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__aKss;
        NV_Ith_S(rDY,26) = d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__iKss;
        NV_Ith_S(rDY,27) = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__O_K;
        NV_Ith_S(rDY,28) = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K1;
        NV_Ith_S(rDY,29) = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K2;
        NV_Ith_S(rDY,30) = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__I_K;
        NV_Ith_S(rDY,31) = d_dt_chaste_interface_var_slow_delayed_rectifier_K_I__nKs;
        NV_Ith_S(rDY,32) = d_dt_chaste_interface_var_fast_transient_outward_K_I__ato_f;
        NV_Ith_S(rDY,33) = d_dt_chaste_interface_var_fast_transient_outward_K_I__ito_f;
        NV_Ith_S(rDY,34) = d_dt_chaste_interface_var_slow_transient_outward_K_I__ato_s;
        NV_Ith_S(rDY,35) = d_dt_chaste_interface_var_slow_transient_outward_K_I__ito_s;
    }

    void Cellli_mouse_2010FromCellMLCvodeOpt::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = NV_Ith_S(rY, 2);
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaJSR = NV_Ith_S(rY, 3);
        // Units: micromolar; Initial value: 171.167969039613
        double var_chaste_interface__calcium_concentration__CaNSR = NV_Ith_S(rY, 4);
        // Units: micromolar; Initial value: 404.825013216286
        double var_chaste_interface__calcium_fluxes__P_RyR = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.000280539508743811
        double var_chaste_interface__calcium_fluxes__CaMKt = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.729027738385079
        double var_chaste_interface__ryanodine_receptors__P_O1 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        double var_chaste_interface__ryanodine_receptors__P_C2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.565182571165673
        double var_chaste_interface__L_type_calcium_current__O = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__I = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.427651445872853
        double var_chaste_interface__L_type_calcium_current__y_gate = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = NV_Ith_S(rY, 13);
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__fast_sodium_current__C_Na1 = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.000420472760277688
        double var_chaste_interface__fast_sodium_current__C_Na2 = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.0240114508843199
        double var_chaste_interface__fast_sodium_current__I1_Na = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.000517471697712382
        double var_chaste_interface__fast_sodium_current__I2_Na = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 2.45406116958509e-05
        double var_chaste_interface__fast_sodium_current__IF_Na = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.000306123648969581
        double var_chaste_interface__fast_sodium_current__IC_Na2 = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.0174528857380179
        double var_chaste_interface__fast_sodium_current__IC_Na3 = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.402980726914811
        double var_chaste_interface__potassium_concentration__Ki = NV_Ith_S(rY, 22);
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 0.00346258606821817
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 0.955684946168062
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.0011733433957123
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 0.00105586824723736
        double var_chaste_interface__rapid_delayed_rectifier_K_I__I_K = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 0.00140618453684944
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 0.00336735013094628
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 0.0142335908879204
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.996989882138174
        double var_chaste_interface__slow_transient_outward_K_I__ato_s = NV_Ith_S(rY, 34);
        // Units: dimensionless; Initial value: 0.0443263407760382
        double var_chaste_interface__slow_transient_outward_K_I__ito_s = NV_Ith_S(rY, 35);
        // Units: dimensionless; Initial value: 0.887568880831388
        
        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);
const double var_x0 = exp(9.9999999999999995e-8);
        const double var_x1 = 1 / (1.0 - var_x0);
        const double var_x2 = -var_chaste_interface__calcium_concentration__Cass;
        const double var_x3 = var_x2 + var_x0 * NV_Ith_S(mParameters, 1);
        const double var_x4 = var_x1 * var_x3;
        const double var_x5 = var_x4 * var_chaste_interface__L_type_calcium_current__O;
        const double var_x6 = 1 / NV_Ith_S(mParameters, 5);
        const double var_x7 = var_x6 * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate;
        const double var_x8 = 0.0011539722641785788 * var_x7;
        const double var_x9 = exp(-9.9999999999999995e-8);
        const double var_x10 = 1 / (1.0 - var_x9);
        const double var_x11 = var_x2 + var_x9 * NV_Ith_S(mParameters, 1);
        const double var_x12 = var_x10 * var_x11;
        const double var_x13 = var_x12 * var_chaste_interface__L_type_calcium_current__O;
        const double var_x14 = fabs(var_chaste_interface__cell__V) < 1.3267937823834197e-6;
        const double var_x15 = _lt_0_row[0];
        const double var_x16 = var_x15 * NV_Ith_S(mParameters, 1);
        const double var_x17 = var_x16 + var_x2;
        const double var_x18 = 1.0 - var_x15;
        const double var_x19 = 1 / var_x18;
        const double var_x20 = var_x19 * var_x7 * var_chaste_interface__L_type_calcium_current__O;
        const double var_x21 = 0.0023079445283571576 * var_x20;
        const double var_x22 = var_x17 * var_x21;
        const double var_x23 = var_x17 * var_x7 * var_chaste_interface__cell__V;
        const double var_x24 = ((var_x14) ? (-var_x13 * var_x8 - var_x5 * var_x8) : (-var_x22 + 0.00017394900089230317 * var_x16 * var_x20 * var_chaste_interface__cell__V + 0.00017394900089230317 * var_x15 * var_x23 * var_chaste_interface__L_type_calcium_current__O / pow(var_x18, 2)));
        const double var_x25 = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * NV_Ith_S(mParameters, 10);
        const double var_x26 = var_chaste_interface__fast_sodium_current__O_Na * NV_Ith_S(mParameters, 6);
        const double var_x27 = var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * NV_Ith_S(mParameters, 9);
        const double var_x28 = var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur;
        const double var_x29 = pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3);
        const double var_x30 = 0.53469999999999995 * var_x29;
        const double var_x31 = NV_Ith_S(mParameters, 8) * var_chaste_interface__non_inactivating_steady_state_K_I__iKss;
        const double var_x32 = var_x31 * var_chaste_interface__non_inactivating_steady_state_K_I__aKss;
        const double var_x33 = exp(5.9871794871794881 - 0.12820512820512822 * var_chaste_interface__cell__V);
        const double var_x34 = 1.0 + var_x33;
        const double var_x35 = 1 / var_x34;
        const double var_x36 = var_x35 * var_chaste_interface__calcium_concentration__Cai_converted;
        const double var_x37 = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted;
        const double var_x38 = 1 / (10.0 + var_x37);
        const double var_x39 = 2000.0 * var_x38;
        const double var_x40 = 1 / var_chaste_interface__potassium_concentration__Ki;
        const double var_x41 = var_x40 * NV_Ith_S(mParameters, 2);
        const double var_x42 = log(var_x41);
        const double var_x43 = exp(0.089599999999999999 * var_chaste_interface__cell__V - 2.3776144580310881 * var_x42);
        const double var_x44 = 1.0 + var_x43;
        const double var_x45 = NV_Ith_S(mParameters, 7) / (210.0 + NV_Ith_S(mParameters, 2));
        const double var_x46 = var_x45 / var_x44;
        const double var_x47 = var_x46 * NV_Ith_S(mParameters, 2);
        const double var_x48 = _lt_0_row[3];
        const double var_x49 = pow(var_chaste_interface__sodium_concentration__Nai, 3);
        const double var_x50 = var_x49 * NV_Ith_S(mParameters, 1);
        const double var_x51 = var_x48 * var_x50;
        const double var_x52 = _lt_0_row[4];
        const double var_x53 = pow(NV_Ith_S(mParameters, 3), 3);
        const double var_x54 = var_x53 * var_chaste_interface__calcium_concentration__Cai_converted;
        const double var_x55 = 1.0 + 0.27000000000000002 * var_x52;
        const double var_x56 = 1 / var_x55;
        const double var_x57 = (1.0 + 277.77777777777777 * var_chaste_interface__calcium_concentration__Cai_converted) * NV_Ith_S(mParameters, 1);
        const double var_x58 = var_x53 * (1.0 + 5.7870370370370368e-13 * var_x49);
        const double var_x59 = var_x37 * var_x53;
        const double var_x60 = NV_Ith_S(mParameters, 11) / (var_x50 + var_x59 + 1400.0 * var_x49 + 1728000000000.0 * var_x57 + 3.6000000000000001 * var_x58 + 6.81472e+17 * var_chaste_interface__calcium_concentration__Cai_converted);
        const double var_x61 = var_x56 * var_x60;
        const double var_x62 = var_x61 * (0.013189690992192795 * var_x51 + 24.495140414072335 * var_x52 * var_x54);
        const double var_x63 = 1 / var_chaste_interface__sodium_concentration__Nai;
        const double var_x64 = pow(var_x63, 2.3999999999999999);
        const double var_x65 = exp(-0.0037684831406265135 * var_chaste_interface__cell__V);
        const double var_x66 = exp(1.4858841010401188e-5 * NV_Ith_S(mParameters, 3));
        const double var_x67 = _lt_0_row[6];
        const double var_x68 = 1.0 + 0.1245 * var_x65 + 0.036499999999999998 * var_x67 * (-0.14285714285714285 + 0.14285714285714285 * var_x66);
        const double var_x69 = NV_Ith_S(mParameters, 2) / (1500.0 + NV_Ith_S(mParameters, 2));
        const double var_x70 = var_x69 * (0.00046917615100800094 * var_x65 + 0.037684831406265135 * var_x67 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x66)) / (pow(var_x68, 2) * (1.0 + 13435672565.051065 * var_x64));
        const double var_x71 = var_x51 - var_x52 * var_x59;
        const double var_x72 = var_x52 * var_x60 * var_x71 / pow(var_x55, 2);
        const double var_x73 = 40.0 + var_chaste_interface__cell__V;
        const double var_x74 = 26.535875647668394 * var_x42;
        const double var_x75 = -var_x74 + var_chaste_interface__cell__V;
        const double var_x76 = var_x43 * var_x45 * var_x75 / pow(var_x44, 2);
        const double var_x77 = var_x76 * NV_Ith_S(mParameters, 2);
        const double var_x78 = 1 / var_chaste_interface__calcium_concentration__Cai_converted;
        const double var_x79 = pow(var_chaste_interface__calcium_concentration__Cai_converted, 2);
        const double var_x80 = pow(var_chaste_interface__calcium_concentration__Cai_converted, 3);
        const double var_x81 = var_x80 / pow((8.3232249999999994e-8 + var_x79), 2);
        const double var_x82 = 1000000.0 * var_x79;
        const double var_x83 = 1 / (0.083232249999999994 + var_x82);
        const double var_x84 = var_x83 * var_chaste_interface__calcium_concentration__Cai_converted;
        const double var_x85 = 1000.0 * var_x53;
        const double var_x86 = var_x52 * var_x61;
        const double var_x87 = -6.81472e+17 - var_x85 - 480000000000000.0 * NV_Ith_S(mParameters, 1);
        const double var_x88 = var_x56 * var_x71 * NV_Ith_S(mParameters, 11) / pow((2.0543764087152516e-15 * var_x49 + 5.282682193839219e-18 * var_x58 + 2.535687453042825e-6 * var_x57 + 1.4674117205108941e-18 * var_x50 + 1.4674117205108941e-15 * var_x54 + var_chaste_interface__calcium_concentration__Cai_converted), 2);
        const double var_x89 = 2.1532971574927423e-36 * var_x88;
        const double var_x90 = 0.5 - 376848.31406265136 * var_chaste_interface__cell__V;
        const double var_x91 = 3.0621664503101105e-9 * var_x7;
        const double var_x92 = var_x91 * var_chaste_interface__L_type_calcium_current__O;
        const double var_x93 = var_x1 * var_x92;
        const double var_x94 = var_x10 * var_x92;
        const double var_x95 = ((var_x14) ? (var_x94 + var_x90 * (-var_x93 - var_x94)) : (var_x21 * var_chaste_interface__cell__V));
        const double var_x96 = var_x12 * var_x91;
        const double var_x97 = 0.0023079445283571576 * var_x19;
        const double var_x98 = ((var_x14) ? (-var_x96 + var_x90 * (var_x96 + var_x4 * var_x91)) : (-var_x23 * var_x97));
        const double var_x99 = var_x6 * NV_Ith_S(mParameters, 4);
        const double var_x100 = 3.0621664503101105e-9 * var_x99;
        const double var_x101 = var_x100 * var_x13;
        const double var_x102 = ((var_x14) ? (-var_x101 + var_x90 * (var_x101 + var_x100 * var_x5)) : (-var_x17 * var_x97 * var_x99 * var_chaste_interface__L_type_calcium_current__O * var_chaste_interface__cell__V));
        const double var_x103 = 1 / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki);
        const double var_x104 = 1 / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai);
        const double var_x105 = var_x104 * var_x27;
        const double var_x106 = var_x103 * var_x26;
        const double var_x107 = pow(var_chaste_interface__sodium_concentration__Nai, 2);
        const double var_x108 = var_x107 * NV_Ith_S(mParameters, 1);
        const double var_x109 = -3 * var_x108 - 4200.0 * var_x107 - 6.2500000000000002e-12 * var_x107 * var_x53;
        const double var_x110 = var_x108 * var_x48 * var_x61;
        const double var_x111 = var_x63 * var_x64 * var_x69 / (var_x68 * pow((7.44287265976699e-11 + var_x64), 2));
        const double var_x112 = -var_chaste_interface__cell__V;
        const double var_x113 = (var_x112 + 26.535875647668394 * log(var_x103 * (NV_Ith_S(mParameters, 3) + 0.1111111111111111 * NV_Ith_S(mParameters, 2)))) * NV_Ith_S(mParameters, 6);
        const double var_x114 = var_x29 * var_chaste_interface__fast_transient_outward_K_I__ito_f;
        const double var_x115 = var_x114 * var_x40;
        const double var_x116 = var_x28 * var_x40;
        const double var_x117 = var_x25 * var_x40;
        const double var_x118 = var_x32 * var_x40;
        const double var_x119 = var_x41 * var_x46;
        const double var_x120 = var_x41 * var_x76;
        const double var_x121 = 0.25 * var_chaste_interface__cell__V;
        const double var_x122 = -var_x121 + 6.6339689119170986 * var_x42;
        const double var_x123 = var_x122 * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur;
        const double var_x124 = var_x122 * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur;
        const double var_x125 = var_x112 + var_x74;
        const double var_x126 = var_x125 * var_x31;
        const double var_x127 = var_x125 * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * NV_Ith_S(mParameters, 8);
        const double var_x128 = (var_x112 + 26.535875647668394 * log(var_x104 * (NV_Ith_S(mParameters, 2) + 0.020408163265306124 * NV_Ith_S(mParameters, 3)))) * NV_Ith_S(mParameters, 9);
        const double var_x129 = var_x75 * NV_Ith_S(mParameters, 10) * var_chaste_interface__slow_delayed_rectifier_K_I__nKs;
        const double var_x130 = var_x75 * pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 2) * var_chaste_interface__fast_transient_outward_K_I__ito_f;
        const double var_x131 = 0.00059999999999999995 + var_chaste_interface__calcium_concentration__Cai_converted;
        const double var_x132 = 1.0 + 6.5400000000000004e-5 / pow(var_x131, 2);
        const double var_x133 = 1 / var_x132;
        const double var_x134 = 0.001 * var_x133;
        const double var_x135 = var_x134 * NV_Ith_S(mParameters, 5);
        const double var_x136 = 1.4063880539705308e-37 * var_x88;
        const double var_x137 = var_x53 * var_x86;
        const double var_x138 = 1.0 - var_chaste_interface__calcium_fluxes__CaMKt;
        const double var_x139 = 1.0 + 0.69999999999999996 / var_chaste_interface__calcium_concentration__Cass;
        const double var_x140 = 1 / var_x139;
        const double var_x141 = 0.050000000000000003 * var_x140;
        const double var_x142 = var_x138 * var_x141 + var_chaste_interface__calcium_fluxes__CaMKt;
        const double var_x143 = pow(var_x142, 2.5830000000000002);
        const double var_x144 = 1 / (1.7590641847756086 + var_x143);
        const double var_x145 = 1.5167893800000001 * var_x144;
        const double var_x146 = 0.50590000000000002 + var_x143 * var_x145;
        const double var_x147 = var_x146 * var_x80 / pow((1.6974399999999999e-7 + var_x79), 2);
        const double var_x148 = 1 / (0.16974399999999998 + var_x82);
        const double var_x149 = var_x146 * var_x148;
        const double var_x150 = var_x149 * var_chaste_interface__calcium_concentration__Cai_converted;
        const double var_x151 = var_chaste_interface__environment__time < 3333330000000.0005;
        const double var_x152 = ((var_x151) ? (-0.029999999999999999) : (-100.0));
        const double var_x153 = pow(var_x142, 1.5830000000000002);
        const double var_x154 = pow(var_chaste_interface__calcium_concentration__Cass, (-2));
        const double var_x155 = var_x138 * var_x154 / pow(var_x139, 2);
        const double var_x156 = pow(var_x142, 4.1660000000000004) / pow((1 + 0.56848408867329814 * var_x143), 2);
        const double var_x157 = var_x148 * (-0.044315367702357472 * var_x155 * var_x156 + 0.13712534389890002 * var_x144 * var_x153 * var_x155);
        const double var_x158 = ((var_x151) ? (3.0000000000000001e-5) : (0.10000000000000001));
        const double var_x159 = 2.5830000000000002 - 0.12915000000000001 * var_x140;
        const double var_x160 = var_x148 * (-0.49018713237495126 * var_x156 * var_x159 + var_x145 * var_x153 * var_x159);
        const double var_x161 = 0.59999999999999998 + var_chaste_interface__calcium_concentration__Cass;
        const double var_x162 = pow(var_x161, (-2));
        const double var_x163 = 1 / (1.0 + 65.399999999999991 * var_x162);
        const double var_x164 = 32.656617993405561 * NV_Ith_S(mParameters, 5);
        const double var_x165 = var_x163 * var_x164;
        const double var_x166 = -var_chaste_interface__ryanodine_receptors__P_O1 - var_chaste_interface__ryanodine_receptors__P_O2;
        const double var_x167 = var_chaste_interface__calcium_fluxes__P_RyR * NV_Ith_S(mParameters, 0);
        const double var_x168 = ((var_x151) ? (var_x166 * var_x167) : (-10.0));
        const double var_x169 = var_x2 + var_chaste_interface__calcium_concentration__CaJSR;
        const double var_x170 = var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2;
        const double var_x171 = var_x167 * var_x170;
        const double var_x172 = ((var_x151) ? (var_x169 * var_x171) : (10.0 * var_chaste_interface__calcium_concentration__CaJSR - 10.0 * var_chaste_interface__calcium_concentration__Cass));
        const double var_x173 = var_x11 * var_x94;
        const double var_x174 = ((var_x14) ? (-var_x173 - 376848.31406265136 * (-1.3267937823834197e-6 + var_chaste_interface__cell__V) * (var_x173 + var_x3 * var_x93)) : (-var_x22 * var_chaste_interface__cell__V));
        const double var_x175 = ((var_x151) ? (var_x171) : (10.0));
        const double var_x176 = 3.5000000000000004 * var_x163;
        const double var_x177 = ((var_x151) ? (var_x169 * var_x170 * NV_Ith_S(mParameters, 0)) : (0));
        const double var_x178 = ((var_x151) ? (var_x167 * var_x169) : (0));
        const double var_x179 = var_x176 * var_x178;
        const double var_x180 = 1 + 0.0015873015873015873 * var_chaste_interface__calcium_concentration__CaJSR;
        const double var_x181 = pow(var_x180, (-2));
        const double var_x182 = 1 / (1.0 + 79.365079365079367 * var_x181);
        const double var_x183 = -var_x178 * var_x182;
        const double var_x184 = 95238095.238095239 * var_x79;
        const double var_x185 = 0.20000000000000001 * var_chaste_interface__cell__V;
        const double var_x186 = 0.2857142857142857 * exp(-0.038580246913580245 * pow((-1 + var_x185), 2));
        const double var_x187 = 0.0025000000000000005 * var_x140;
        const double var_x188 = pow(var_chaste_interface__calcium_concentration__Cass, 3.0);
        const double var_x189 = 0.012149999999999999 * pow(var_chaste_interface__calcium_concentration__Cass, 2.0) * var_chaste_interface__ryanodine_receptors__P_O1;
        const double var_x190 = 0.0040499999999999998 * var_x188;
        const double var_x191 = -0.0060749999999999997 * pow(var_chaste_interface__calcium_concentration__Cass, 4.0);
        const double var_x192 = _lt_0_row[8];
        const double var_x193 = 1.0 + var_x192;
        const double var_x194 = 1 / var_x193;
        const double var_x195 = var_x192 * var_x194;
        const double var_x196 = 1.0 - var_chaste_interface__L_type_calcium_current__I - var_chaste_interface__L_type_calcium_current__O;
        const double var_x197 = 0.10337680327911219 * var_x196;
        const double var_x198 = pow(var_x193, (-2));
        const double var_x199 = -0.66666666666666663 * var_x195;
        const double var_x200 = 1 / (0.0625 + 0.40000000000000002 * var_x192);
        const double var_x201 = var_x192 * var_chaste_interface__L_type_calcium_current__I;
        const double var_x202 = 0.0625 + var_x192;
        const double var_x203 = 0.00044946436208309653 * var_chaste_interface__calcium_concentration__Cass;
        const double var_x204 = var_x196 * var_x202;
        const double var_x205 = 0.0028985507246376812 * var_x194;
        const double var_x206 = -var_x202 * var_x205 * var_chaste_interface__calcium_concentration__Cass;
        const double var_x207 = exp(7.5 + var_x121);
        const double var_x208 = 1.0 + var_x207;
        const double var_x209 = 1 / var_x208;
        const double var_x210 = 1 / (8.0 + 315.0 * var_x209);
        const double var_x211 = exp(6.666666666666667 - 0.16666666666666666 * var_chaste_interface__cell__V);
        const double var_x212 = 1.0 + var_x211;
        const double var_x213 = exp(4.024390243902439 + 0.12195121951219513 * var_chaste_interface__cell__V);
        const double var_x214 = 1.0 + var_x213;
        const double var_x215 = 4.2191641619115923e-37 * var_x88;
        const double var_x216 = 0.065313235986811116 * NV_Ith_S(mParameters, 5);
        const double var_x217 = -0.04926108374384236 * var_chaste_interface__cell__V;
        const double var_x218 = exp(0.36945812807881773 + var_x217);
        const double var_x219 = 0.01083743842364532 * var_x218 * var_chaste_interface__fast_sodium_current__O_Na;
        const double var_x220 = exp(-0.20833333333333334 - 0.083333333333333329 * var_chaste_interface__cell__V);
        const double var_x221 = exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V);
        const double var_x222 = (0.0085583333333333327 * var_x220 + 0.0016666666666666668 * var_x221) / pow((var_x221 + 0.4108 * var_x220), 2);
        const double var_x223 = 60.832000000000001 * var_x222 * var_chaste_interface__fast_sodium_current__C_Na1;
        const double var_x224 = exp(-0.42168674698795178 - 0.060240963855421679 * var_chaste_interface__cell__V);
        const double var_x225 = var_x224 / pow((1 + 0.47846713846216332 * var_x224), 2);
        const double var_x226 = 0.073163809141391992 * var_x225 * var_chaste_interface__fast_sodium_current__O_Na;
        const double var_x227 = 2.0000000000000002e-5 * var_chaste_interface__cell__V;
        const double var_x228 = 0.008539999999999999 + var_x227;
        const double var_x229 = 1 / var_x228;
        const double var_x230 = 1 / (0.39395599999999997 + 0.188495 * var_x224);
        const double var_x231 = 1 / (0.25 * var_x221 + 0.1027 * var_x220);
        const double var_x232 = exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V);
        const double var_x233 = 1 / var_x218;
        const double var_x234 = var_x230 * var_x231 * var_x232 * var_x233;
        const double var_x235 = var_x229 * var_x234;
        const double var_x236 = 9.7514961527500711e-7 * var_x235 * var_chaste_interface__fast_sodium_current__IF_Na;
        const double var_x237 = 3.317429681310359e-6 * var_x234 * var_chaste_interface__fast_sodium_current__IF_Na / pow((1 + 0.0023419203747072604 * var_chaste_interface__cell__V), 2);
        const double var_x238 = var_x225 * var_chaste_interface__fast_sodium_current__IF_Na;
        const double var_x239 = var_x229 * var_x232 * var_x233;
        const double var_x240 = 8.8508255294954831e-7 * var_x231 * var_x238 * var_x239;
        const double var_x241 = 0.00019355636363636362 * var_x222 * var_x230 * var_x239 * var_chaste_interface__fast_sodium_current__IF_Na;
        const double var_x242 = var_x230;
        const double var_x243 = 0.22 * var_x218;
        const double var_x244 = 3.802 * var_x231;
        const double var_x245 = 1.2097272727272726e-5 * var_x235;
        const double var_x246 = 2.0000000000000002e-5 * var_chaste_interface__fast_sodium_current__C_Na1;
        const double var_x247 = -var_x246;
        const double var_x248 = exp(0.12315270935960591 + var_x217);
        const double var_x249 = 0.009852216748768473 * var_x248;
        const double var_x250 = var_x249 * var_chaste_interface__fast_sodium_current__C_Na1;
        const double var_x251 = 9.0909090909090901e-8 * var_x232;
        const double var_x252 = var_x251 * var_chaste_interface__fast_sodium_current__IF_Na;
        const double var_x253 = exp(-0.16666666666666666 - 0.066666666666666666 * var_chaste_interface__cell__V);
        const double var_x254 = 71.871455576559541 * (0.0068466666666666667 * var_x253 + 0.0015333333333333334 * var_x221) / pow((var_x221 + 0.44652173913043475 * var_x253), 2);
        const double var_x255 = var_x254 * var_chaste_interface__fast_sodium_current__C_Na2;
        const double var_x256 = 0.20000000000000001 * var_x248;
        const double var_x257 = -var_x256;
        const double var_x258 = -0.008539999999999999 - var_x227;
        const double var_x259 = 3.802 / (0.1027 * var_x253 + 0.23000000000000001 * var_x221);
        const double var_x260 = 6.9999999999999997e-7 * var_x232;
        const double var_x261 = 2.0000000000000002e-5 * var_chaste_interface__fast_sodium_current__C_Na2;
        const double var_x262 = -var_x261;
        const double var_x263 = exp(-0.12315270935960591 + var_x217);
        const double var_x264 = 0.0094433497536945809 * var_x263;
        const double var_x265 = var_x251 * var_chaste_interface__fast_sodium_current__IC_Na2;
        const double var_x266 = exp(-0.14705882352941177 - 0.058823529411764705 * var_chaste_interface__cell__V);
        const double var_x267 = 95.049999999999997 * (0.0013333333333333335 * var_x221 + 0.0060411764705882356 * var_x266) / pow((var_x221 + 0.51349999999999996 * var_x266), 2);
        const double var_x268 = 3.802 / (0.20000000000000001 * var_x221 + 0.1027 * var_x266);
        const double var_x269 = -var_x268;
        const double var_x270 = 0.19170000000000001 * var_x263;
        const double var_x271 = -var_x259 - var_x270;
        const double var_x272 = var_x258 + var_x269;
        const double var_x273 = var_x251 * var_chaste_interface__fast_sodium_current__I1_Na;
        const double var_x274 = 1.818181818181818e-9 * var_x232 * var_chaste_interface__fast_sodium_current__I2_Na;
        const double var_x275 = 7.3163809141391995e-5 * var_x238;
        const double var_x276 = 7.7014535938307356e-7 * var_x225 * var_chaste_interface__fast_sodium_current__I1_Na;
        const double var_x277 = -var_x260;
        const double var_x278 = 1.0526315789473684e-5 * var_x230;
        const double var_x279 = 1.4e-8 * var_x232;
        const double var_x280 = 0.001 * var_x230;
        const double var_x281 = var_x249 * var_chaste_interface__fast_sodium_current__IF_Na;
        const double var_x282 = var_x254 * var_chaste_interface__fast_sodium_current__IC_Na2;
        const double var_x283 = var_x264 * var_chaste_interface__fast_sodium_current__IC_Na2;
        const double var_x284 = var_x267 * var_chaste_interface__fast_sodium_current__IC_Na3;
        const double var_x285 = exp(-0.64479166666666676 - 0.10416666666666667 * var_chaste_interface__cell__V);
        const double var_x286 = 1.0 + var_x285;
        const double var_x287 = 1 / var_x286;
        const double var_x288 = exp(-0.062899999999999998 * var_chaste_interface__cell__V);
        const double var_x289 = 0.0073216139155926159 * var_x288 / pow((1 + 0.23955296404275997 * var_x288), 2);
        const double var_x290 = 1 / (2.0579999999999998 + 0.49299999999999999 * var_x288);
        const double var_x291 = 0.10416666666666667 * var_x285 / pow(var_x286, 2);
        const double var_x292 = var_x290 * var_x291;
        const double var_x293 = -var_x290;
        const double var_x294 = exp(7.7962962962962958 + 0.18518518518518517 * var_chaste_interface__cell__V);
        const double var_x295 = 1.0 + var_x294;
        const double var_x296 = 1 / var_x295;
        const double var_x297 = 1 / (643.0 + 1000.0 * var_x296);
        const double var_x298 = var_x294 / pow(var_x295, 2);
        const double var_x299 = 0.18518518518518517 * var_x298;
        const double var_x300 = var_x296;
        const double var_x301 = exp(-0.050000000000000003 * var_chaste_interface__cell__V);
        const double var_x302 = 1 / (13.17 + 39.299999999999997 * var_x301);
        const double var_x303 = exp(0.0109 * var_chaste_interface__cell__V);
        const double var_x304 = 0.00036515000000000001 * var_x303 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2;
        const double var_x305 = exp(-0.041779999999999998 * var_chaste_interface__cell__V);
        const double var_x306 = 2.8786419999999997e-6 * var_x305 * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K;
        const double var_x307 = exp(0.14349999999999999 + 0.0287 * var_chaste_interface__cell__V);
        const double var_x308 = 0.00201761 * var_x307 * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K;
        const double var_x309 = exp(-0.16339999999999999 - 0.032680000000000001 * var_chaste_interface__cell__V);
        const double var_x310 = 0.00021232196 * var_x309 * var_chaste_interface__rapid_delayed_rectifier_K_I__I_K;
        const double var_x311 = 6.8899999999999994e-5 * var_x305;
        const double var_x312 = 0.070300000000000001 * var_x307;
        const double var_x313 = 0.033500000000000002 * var_x303;
        const double var_x314 = 0.0064970000000000002 * var_x309;
        const double var_x315 = _lt_0_row[29];
        const double var_x316 = _lt_0_row[30];
        const double var_x317 = -0.022348 * var_x315;
        const double var_x318 = 1.0 - var_chaste_interface__slow_delayed_rectifier_K_I__nKs;
        const double var_x319 = 1 / (1.0 - exp(9.9999999999766942e-8));
        const double var_x320 = 1 / (1.0 - exp(-9.9999999999766942e-8));
        const double var_x321 = _lt_0_row[32];
        const double var_x322 = 3.6226653999999999e-6 * var_x321 * var_chaste_interface__slow_delayed_rectifier_K_I__nKs;
        const double var_x323 = 26.5 + var_chaste_interface__cell__V;
        const double var_x324 = fabs(var_x323) < 7.8124999999817923e-7;
        const double var_x325 = exp(-3.3919999999999999 - 0.128 * var_chaste_interface__cell__V);
        const double var_x326 = 1.0 - var_x325;
        const double var_x327 = 4.8133299999999997e-6 / var_x326;
        const double var_x328 = -9.5333299999999997e-5 * var_x321;
        const double var_x329 = -3.7604140624912359e-12 * var_x320;
        const double var_x330 = _lt_0_row[21];
        const double var_x331 = _lt_0_row[22];
        const double var_x332 = exp(10.279999999999999 + var_x185);
        const double var_x333 = 1.0 + var_x332;
        const double var_x334 = 1 / var_x333;
        const double var_x335 = 1 / (9.6645000000000003 + 10.936199999999999 * var_x334);
        const double var_x336 = var_x332 / pow(var_x333, 2);
        const double var_x337 = exp(7.9298245614035094 + 0.17543859649122806 * var_chaste_interface__cell__V);
        const double var_x338 = 1.0 + var_x337;
        const double var_x339 = 1 / var_x338;
        const double var_x340 = 1 / (270.0 + 1050.0 * var_x339);
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (-0.0033 - var_x24 - var_x25 - var_x26 - var_x27 - var_x32 - var_x47 + 0.089599999999999999 * var_x77 - 0.25 * var_x28 - var_x62 - 2.4860000000000002 * var_x70 - 0.0066136879117995317 * var_x72 - var_x30 * var_chaste_interface__fast_transient_outward_K_I__ito_f - var_x36 * var_x39 - 256.41025641025641 * var_x33 * var_x38 * var_x73 * var_chaste_interface__calcium_concentration__Cai_converted / pow(var_x34, 2));
        IJth(rJacobian, 1, 0) = var_x135 * (-2.2859632595383892e-5 + 0.065313235986811116 * var_x62 + 0.00043196135932648281 * var_x72);
        IJth(rJacobian, 2, 0) = -var_x165 * var_x24;
        IJth(rJacobian, 5, 0) = -var_x186 * var_x24 - var_x174 * var_x186 * (0.015432098765432098 - 0.0030864197530864196 * var_chaste_interface__cell__V);
        IJth(rJacobian, 10, 0) = var_x195 * var_x197 - var_x197 * var_x198 * pow(var_x192, 2);
        IJth(rJacobian, 11, 0) = -5.3935723449971585e-5 * var_x200 * var_x201 + var_x195 * var_x196 * var_x203 + 0.00013483930862492896 * var_x201 * var_x202 / pow((0.15625 + var_x192), 2) - var_x192 * var_x198 * var_x203 * var_x204;
        IJth(rJacobian, 12, 0) = var_x210 * (0.016666666666666666 * var_x211 / pow(var_x212, 2) - 0.12195121951219513 * var_x213 / pow(var_x214, 2)) + 0.00079365079365079365 * var_x207 * (-var_chaste_interface__L_type_calcium_current__y_gate + 1 / var_x214 + 0.10000000000000001 / var_x212) / (pow(var_x208, 2) * pow((0.025396825396825397 + var_x209), 2));
        IJth(rJacobian, 13, 0) = (-0.0001698144135657089 - 0.065313235986811116 * var_x26 - 0.0012958840779794486 * var_x72 - 0.48710611398963738 * var_x70 - 0.19593970796043336 * var_x62) * NV_Ith_S(mParameters, 5);
        IJth(rJacobian, 14, 0) = var_x219 + var_x223 + var_x240 + var_x241 - var_x226 - var_x236 - var_x237;
        IJth(rJacobian, 15, 0) = var_x247 + var_x250 + var_x255 - var_x219 - var_x223 - var_x252;
        IJth(rJacobian, 16, 0) = var_x262 - var_x250 - var_x255 - var_x265 + var_x264 * var_chaste_interface__fast_sodium_current__C_Na2 + var_x267 * (1.0 - var_chaste_interface__fast_sodium_current__C_Na1 - var_chaste_interface__fast_sodium_current__C_Na2 - var_chaste_interface__fast_sodium_current__I1_Na - var_chaste_interface__fast_sodium_current__I2_Na - var_chaste_interface__fast_sodium_current__IC_Na2 - var_chaste_interface__fast_sodium_current__IC_Na3 - var_chaste_interface__fast_sodium_current__IF_Na - var_chaste_interface__fast_sodium_current__O_Na);
        IJth(rJacobian, 17, 0) = var_x273 + var_x275 - var_x274 - var_x276;
        IJth(rJacobian, 18, 0) = var_x274 + var_x276;
        IJth(rJacobian, 19, 0) = var_x226 + var_x236 + var_x237 + var_x246 + var_x252 + var_x281 + var_x282 - var_x240 - var_x241 - var_x273 - var_x275;
        IJth(rJacobian, 20, 0) = var_x261 + var_x265 + var_x283 + var_x284 - var_x281 - var_x282;
        IJth(rJacobian, 21, 0) = 2.0000000000000002e-5 + var_x247 + var_x262 - var_x283 - var_x284 - 2.0000000000000002e-5 * var_chaste_interface__fast_sodium_current__I1_Na - 2.0000000000000002e-5 * var_chaste_interface__fast_sodium_current__I2_Na - 2.0000000000000002e-5 * var_chaste_interface__fast_sodium_current__IC_Na2 - 2.0000000000000002e-5 * var_chaste_interface__fast_sodium_current__IC_Na3 - 2.0000000000000002e-5 * var_chaste_interface__fast_sodium_current__IF_Na - 2.0000000000000002e-5 * var_chaste_interface__fast_sodium_current__O_Na + var_x251 * var_chaste_interface__fast_sodium_current__IC_Na3;
        IJth(rJacobian, 22, 0) = (0.0058520659444182763 * var_x77 + 0.32473740932642492 * var_x70 - 0.016328308996702779 * var_x28 - 0.065313235986811116 * var_x25 - 0.065313235986811116 * var_x27 - 0.065313235986811116 * var_x32 - 0.065313235986811116 * var_x47 - 0.034922987282147905 * var_x114) * NV_Ith_S(mParameters, 5);
        IJth(rJacobian, 23, 0) = var_x292 + var_x289 * (var_x287 - var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur);
        IJth(rJacobian, 24, 0) = -var_x297 * var_x299 + 0.00018518518518518518 * var_x298 * (var_x300 - var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur) / pow((0.64300000000000002 + var_x296), 2);
        IJth(rJacobian, 25, 0) = var_x291 * var_x302 + 0.0012722646310432571 * var_x301 * (var_x287 - var_chaste_interface__non_inactivating_steady_state_K_I__aKss) / pow((0.33511450381679392 + var_x301), 2);
        IJth(rJacobian, 27, 0) = var_x304 + var_x306 - var_x308 - var_x310;
        IJth(rJacobian, 28, 0) = 0.01176 * var_x315 * (0.022348 - 0.022348 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 - 0.022348 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 - 0.022348 * var_chaste_interface__rapid_delayed_rectifier_K_I__I_K - 0.022348 * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K) + 0.0029658262000000005 * var_x316 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1;
        IJth(rJacobian, 29, 0) = -var_x304 - var_x306;
        IJth(rJacobian, 30, 0) = var_x308 + var_x310;
        IJth(rJacobian, 31, 0) = ((var_x324) ? (var_x322 + var_x318 * (2.4066649999999999e-6 * var_x319 + 2.4066649999999999e-6 * var_x320)) : (var_x322 + var_x318 * var_x327 - 6.1610624e-7 * var_x318 * var_x323 * var_x325 / pow(var_x326, 2)));
        IJth(rJacobian, 32, 0) = 0.035770000000000003 * var_x330 * (0.18064 - 0.18064 * var_chaste_interface__fast_transient_outward_K_I__ato_f) + 0.024673572000000001 * var_x331 * var_chaste_interface__fast_transient_outward_K_I__ato_f;
        IJth(rJacobian, 33, 0) = -0.20000000000000001 * var_x335 * var_x336 + 0.018287887931822754 * var_x336 * (-var_chaste_interface__fast_transient_outward_K_I__ito_f + var_x334) / pow((0.88371646458550512 + var_x334), 2);
        IJth(rJacobian, 34, 0) = var_x292 + var_x289 * (var_x287 - var_chaste_interface__slow_transient_outward_K_I__ato_s);
        IJth(rJacobian, 35, 0) = -var_x299 * var_x340 + 0.00016708437761069341 * var_x337 * (var_x300 - var_chaste_interface__slow_transient_outward_K_I__ito_s) / (pow(var_x338, 2) * pow((0.25714285714285712 + var_x339), 2));
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (0.191 * var_x81 - 0.0092875564766839377 * var_x78 - 191000.0 * var_x84 + var_x85 * var_x86 - var_x87 * var_x89 - var_x35 * var_x39 * var_x73 + 2.0 * var_x36 * var_x73 / pow((0.01 + var_chaste_interface__calcium_concentration__Cai_converted), 2));
        IJth(rJacobian, 1, 1) = var_x134 * (-125.0 + var_x152 + 2.0 * var_x147 - 2000000.0 * var_x150 + (0.0062374140367404624 * var_x81 - 6237.4140367404616 * var_x84 - 65.313235986811122 * var_x137 - 0.00030330018395124703 * var_x78 + var_x136 * var_x87) * NV_Ith_S(mParameters, 5)) + 1.3080000000000001e-7 * (0.125 * var_chaste_interface__calcium_concentration__Cass - 125.0 * var_chaste_interface__calcium_concentration__Cai_converted - var_x149 * var_x82 - 0.032656617993405558 * (0.00069999999999999999 * var_chaste_interface__cell__V - 0.0092875564766839377 * log(0.001 * var_x78 * NV_Ith_S(mParameters, 1)) + 95500.0 * var_x79 * var_x83 - 2.0 * var_x61 * var_x71) * NV_Ith_S(mParameters, 5) + ((var_x151) ? (3.0000000000000001e-5 * var_chaste_interface__calcium_concentration__CaNSR - 0.029999999999999999 * var_chaste_interface__calcium_concentration__Cai_converted) : (0.10000000000000001 * var_chaste_interface__calcium_concentration__CaNSR - 100.0 * var_chaste_interface__calcium_concentration__Cai_converted))) / (pow(var_x131, 3) * pow(var_x132, 2));
        IJth(rJacobian, 2, 1) = 125000.0 * var_x163;
        IJth(rJacobian, 4, 1) = 190476190.47619048 * var_x150 - 95.238095238095241 * var_x152 - 190.47619047619048 * var_x147;
        IJth(rJacobian, 13, 1) = (195.93970796043337 * var_x137 - var_x215 * var_x87) * NV_Ith_S(mParameters, 5);
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x95);
        IJth(rJacobian, 1, 2) = var_x134 * (0.125 - var_x157 * var_x82);
        IJth(rJacobian, 2, 2) = var_x163 * (-125.0 + 3.5000000000000004 * var_x168 - var_x164 * var_x95) + 0.030581039755351685 * (125000.0 * var_chaste_interface__calcium_concentration__Cai_converted + 3.5000000000000004 * var_x172 - 125.0 * var_chaste_interface__calcium_concentration__Cass - var_x164 * var_x174) / (pow(var_x161, 3) * pow((0.015290519877675841 + var_x162), 2));
        IJth(rJacobian, 3, 2) = -var_x168 * var_x182;
        IJth(rJacobian, 4, 2) = var_x157 * var_x184;
        IJth(rJacobian, 5, 2) = -var_x186 * var_x95;
        IJth(rJacobian, 6, 2) = 0.00175 * var_x142 * var_x155 + 8.7500000000000013e-5 * var_x154 * pow(var_x138, 2) / pow(var_x139, 3);
        IJth(rJacobian, 7, 2) = -var_x189 + 0.024299999999999999 * var_x188 * (1.0 + var_x166 - var_chaste_interface__ryanodine_receptors__P_C2);
        IJth(rJacobian, 8, 2) = var_x189;
        IJth(rJacobian, 11, 2) = var_x204 * var_x205;
        IJth(rJacobian, 2, 3) = var_x175 * var_x176;
        IJth(rJacobian, 3, 3) = var_x182 * (-0.050000000000000003 - var_x175) + 4.0000000000000003e-5 * (-var_x172 + 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaNSR - 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaJSR) / (pow(var_x180, 3) * pow((0.0126 + var_x181), 2));
        IJth(rJacobian, 4, 3) = 0.016666666666666666;
        IJth(rJacobian, 1, 4) = var_x134 * var_x158;
        IJth(rJacobian, 3, 4) = 0.050000000000000003 * var_x182;
        IJth(rJacobian, 4, 4) = -0.016666666666666666 - 95.238095238095241 * var_x158;
        IJth(rJacobian, 2, 5) = var_x176 * var_x177;
        IJth(rJacobian, 3, 5) = -var_x177 * var_x182;
        IJth(rJacobian, 5, 5) = -0.01;
        IJth(rJacobian, 1, 6) = -1000.0 * var_x133 * var_x160 * var_x79;
        IJth(rJacobian, 4, 6) = var_x160 * var_x184;
        IJth(rJacobian, 6, 6) = -0.00020000000000000001 - var_x142 * var_x187 + var_x138 * var_x187 * (1 - var_x141);
        IJth(rJacobian, 2, 7) = var_x179;
        IJth(rJacobian, 3, 7) = var_x183;
        IJth(rJacobian, 7, 7) = -0.080249999999999988 + var_x191 - var_x190;
        IJth(rJacobian, 8, 7) = var_x190;
        IJth(rJacobian, 9, 7) = 0.0089999999999999993;
        IJth(rJacobian, 2, 8) = var_x179;
        IJth(rJacobian, 3, 8) = var_x183;
        IJth(rJacobian, 7, 8) = 0.96499999999999997 + var_x191;
        IJth(rJacobian, 8, 8) = -0.96499999999999997;
        IJth(rJacobian, 7, 9) = 0.00080000000000000004 + var_x191;
        IJth(rJacobian, 9, 9) = -0.00080000000000000004;
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x98);
        IJth(rJacobian, 2, 10) = -var_x165 * var_x98;
        IJth(rJacobian, 5, 10) = -var_x186 * var_x98;
        IJth(rJacobian, 10, 10) = -1.1986666666666668 + var_x199;
        IJth(rJacobian, 11, 10) = var_x206;
        IJth(rJacobian, 10, 11) = var_x199;
        IJth(rJacobian, 11, 11) = var_x206 - 0.00034782608695652176 * var_x200 * var_x202;
        IJth(rJacobian, 0, 12) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x102);
        IJth(rJacobian, 2, 12) = -var_x102 * var_x165;
        IJth(rJacobian, 5, 12) = -var_x102 * var_x186;
        IJth(rJacobian, 12, 12) = -var_x210;
        IJth(rJacobian, 0, 13) = mSetVoltageDerivativeToZero ? 0.0 : (-3.0 * var_x110 - 4.4407155437233767e-10 * var_x111 - 0.54154848260547739 * var_x105 - 0.068993276683937815 * var_x103 - 26.535875647668394 * var_x106 - var_x109 * var_x89);
        IJth(rJacobian, 1, 13) = var_x135 * (0.19593970796043336 * var_x110 + var_x109 * var_x136);
        IJth(rJacobian, 13, 13) = (-1.7331439082928402 * var_x106 - 0.004506174161561384 * var_x103 - 0.58781912388130009 * var_x110 - 8.7011250677251544e-11 * var_x111 - var_x109 * var_x215) * NV_Ith_S(mParameters, 5);
        IJth(rJacobian, 22, 13) = (5.8007500451501034e-11 * var_x111 - 0.035370283842711021 * var_x105) * NV_Ith_S(mParameters, 5);
        IJth(rJacobian, 0, 14) = mSetVoltageDerivativeToZero ? 0.0 : (var_x113);
        IJth(rJacobian, 13, 14) = var_x113 * var_x216;
        IJth(rJacobian, 14, 14) = -var_x242 - var_x243;
        IJth(rJacobian, 15, 14) = var_x243;
        IJth(rJacobian, 16, 14) = var_x269;
        IJth(rJacobian, 19, 14) = var_x242;
        IJth(rJacobian, 21, 14) = var_x258;
        IJth(rJacobian, 14, 15) = var_x244;
        IJth(rJacobian, 15, 15) = var_x257 + var_x258 - var_x244;
        IJth(rJacobian, 16, 15) = var_x256 + var_x269;
        IJth(rJacobian, 19, 15) = var_x228;
        IJth(rJacobian, 21, 15) = var_x258;
        IJth(rJacobian, 15, 16) = var_x259;
        IJth(rJacobian, 16, 16) = var_x271 + var_x272;
        IJth(rJacobian, 20, 16) = var_x228;
        IJth(rJacobian, 21, 16) = var_x258;
        IJth(rJacobian, 16, 17) = var_x269;
        IJth(rJacobian, 17, 17) = var_x277 - var_x278;
        IJth(rJacobian, 18, 17) = var_x278;
        IJth(rJacobian, 19, 17) = var_x260;
        IJth(rJacobian, 21, 17) = var_x258;
        IJth(rJacobian, 16, 18) = var_x269;
        IJth(rJacobian, 17, 18) = var_x279;
        IJth(rJacobian, 18, 18) = -var_x279;
        IJth(rJacobian, 21, 18) = var_x258;
        IJth(rJacobian, 14, 19) = var_x245;
        IJth(rJacobian, 15, 19) = var_x260;
        IJth(rJacobian, 16, 19) = var_x269;
        IJth(rJacobian, 17, 19) = var_x280;
        IJth(rJacobian, 19, 19) = var_x257 + var_x277 - var_x245 - var_x280;
        IJth(rJacobian, 20, 19) = var_x256;
        IJth(rJacobian, 21, 19) = var_x258;
        IJth(rJacobian, 16, 20) = var_x260 + var_x269;
        IJth(rJacobian, 19, 20) = var_x259;
        IJth(rJacobian, 20, 20) = var_x271 + var_x277;
        IJth(rJacobian, 21, 20) = var_x258 + var_x270;
        IJth(rJacobian, 16, 21) = var_x269;
        IJth(rJacobian, 20, 21) = var_x268;
        IJth(rJacobian, 21, 21) = var_x272 + var_x277;
        IJth(rJacobian, 0, 22) = mSetVoltageDerivativeToZero ? 0.0 : (2.3776144580310881 * var_x120 - 2.9484306275187104 * var_x106 - 14.188732708808288 * var_x115 - 6.6339689119170986 * var_x116 - 26.535875647668394 * var_x105 - 26.535875647668394 * var_x117 - 26.535875647668394 * var_x118 - 26.535875647668394 * var_x119 - 0.0076659196315486469 * var_x103);
        IJth(rJacobian, 13, 22) = (-0.0005006860179512649 * var_x103 - 0.19257154536587112 * var_x106) * NV_Ith_S(mParameters, 5);
        IJth(rJacobian, 22, 22) = (0.15528969418303848 * var_x120 - 0.43328597707321004 * var_x116 - 1.7331439082928402 * var_x105 - 1.7331439082928402 * var_x117 - 1.7331439082928402 * var_x118 - 1.7331439082928402 * var_x119 - 0.92671204776418159 * var_x115) * NV_Ith_S(mParameters, 5);
        IJth(rJacobian, 0, 23) = mSetVoltageDerivativeToZero ? 0.0 : (var_x123);
        IJth(rJacobian, 22, 23) = var_x123 * var_x216;
        IJth(rJacobian, 23, 23) = var_x293;
        IJth(rJacobian, 0, 24) = mSetVoltageDerivativeToZero ? 0.0 : (var_x124);
        IJth(rJacobian, 22, 24) = var_x124 * var_x216;
        IJth(rJacobian, 24, 24) = -var_x297;
        IJth(rJacobian, 0, 25) = mSetVoltageDerivativeToZero ? 0.0 : (var_x126);
        IJth(rJacobian, 22, 25) = var_x126 * var_x216;
        IJth(rJacobian, 25, 25) = -var_x302;
        IJth(rJacobian, 0, 26) = mSetVoltageDerivativeToZero ? 0.0 : (var_x127);
        IJth(rJacobian, 22, 26) = var_x127 * var_x216;
        IJth(rJacobian, 0, 27) = mSetVoltageDerivativeToZero ? 0.0 : (var_x128);
        IJth(rJacobian, 22, 27) = var_x128 * var_x216;
        IJth(rJacobian, 27, 27) = -var_x311 - var_x312;
        IJth(rJacobian, 28, 27) = var_x317;
        IJth(rJacobian, 29, 27) = var_x311;
        IJth(rJacobian, 30, 27) = var_x312;
        IJth(rJacobian, 28, 28) = -0.023761000000000001 + var_x317 - 0.047002000000000002 * var_x316;
        IJth(rJacobian, 29, 28) = 0.023761000000000001;
        IJth(rJacobian, 27, 29) = var_x313;
        IJth(rJacobian, 28, 29) = 0.036777999999999998 + var_x317;
        IJth(rJacobian, 29, 29) = -0.036777999999999998 - var_x313;
        IJth(rJacobian, 27, 30) = var_x314;
        IJth(rJacobian, 28, 30) = var_x317;
        IJth(rJacobian, 30, 30) = -var_x314;
        IJth(rJacobian, 0, 31) = mSetVoltageDerivativeToZero ? 0.0 : (-2 * var_x129);
        IJth(rJacobian, 22, 31) = -0.13062647197362223 * var_x129 * NV_Ith_S(mParameters, 5);
        IJth(rJacobian, 31, 31) = ((var_x324) ? (var_x328 + var_x329 + 640000.00000149151 * (26.499999218749998 + var_chaste_interface__cell__V) * (var_x329 - 3.7604140624912359e-12 * var_x319)) : (var_x328 - var_x323 * var_x327));
        IJth(rJacobian, 0, 32) = mSetVoltageDerivativeToZero ? 0.0 : (-1.6040999999999999 * var_x130);
        IJth(rJacobian, 22, 32) = -0.10476896184644371 * var_x130 * NV_Ith_S(mParameters, 5);
        IJth(rJacobian, 32, 32) = -0.18064 * var_x330 - 0.39560000000000001 * var_x331;
        IJth(rJacobian, 0, 33) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x30 * var_x75);
        IJth(rJacobian, 22, 33) = -0.034922987282147905 * var_x29 * var_x75 * NV_Ith_S(mParameters, 5);
        IJth(rJacobian, 33, 33) = -var_x335;
        IJth(rJacobian, 34, 34) = var_x293;
        IJth(rJacobian, 35, 35) = -var_x340;
    }

    N_Vector Cellli_mouse_2010FromCellMLCvodeOpt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = NV_Ith_S(rY, 2);
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaJSR = NV_Ith_S(rY, 3);
        // Units: micromolar; Initial value: 171.167969039613
        double var_chaste_interface__calcium_fluxes__P_RyR = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.000280539508743811
        double var_chaste_interface__ryanodine_receptors__P_O1 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        double var_chaste_interface__L_type_calcium_current__O = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__y_gate = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = NV_Ith_S(rY, 13);
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__potassium_concentration__Ki = NV_Ith_S(rY, 22);
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 0.00336735013094628
        
        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__v1_caff = 10.0; // per_millisecond
        const double var_cell__F = 96.5; // coulomb_per_millimole
        const double var_cell__R = 8.3140000000000001; // joule_per_mole_kelvin
        const double var_cell__T = 308.0; // kelvin
        const double var_L_type_calcium_current__i_CaL = ((fabs(var_chaste_interface__cell__V) < 1.3267937823834197e-6) ? (-376848.31406265136 * (-1.3267937823834197e-6 + var_chaste_interface__cell__V) * (3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5)) + 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5))) - 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5))) : (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * _lt_0_row[0]) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((_lt_0_row[1]) * NV_Ith_S(mParameters, 5)))); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL_converted = HeartConfig::Instance()->GetCapacitance() * var_L_type_calcium_current__i_CaL; // uA_per_cm2
        const double var_cell__prepulses_number = 10000000000.0; // dimensionless
        const double var_chaste_interface__cell__stim_period = 333.33300000000003; // millisecond
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_fast_transient_outward_K_I__E_K = var_cell__R * var_cell__T * log(NV_Ith_S(mParameters, 2) / var_chaste_interface__potassium_concentration__Ki) / var_cell__F; // millivolt
        const double var_non_inactivating_steady_state_K_I__i_Kss = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * NV_Ith_S(mParameters, 8) * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss_converted = HeartConfig::Instance()->GetCapacitance() * var_non_inactivating_steady_state_K_I__i_Kss; // uA_per_cm2
        const double var_calcium_fluxes__J_rel = ((var_chaste_interface__environment__time < var_cell__prepulses_number * var_chaste_interface__cell__stim_period) ? ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * (var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2) * var_chaste_interface__calcium_fluxes__P_RyR * NV_Ith_S(mParameters, 0)) : ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * var_calcium_fluxes__v1_caff)); // micromolar_per_millisecond
        const double var_slow_delayed_rectifier_K_I__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 10); // picoA_per_picoF
        const double var_slow_delayed_rectifier_K_I__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_slow_delayed_rectifier_K_I__i_Ks; // uA_per_cm2
        const double var_sodium_calcium_exchange_current__K_mAllo = 0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mCai = 3.6000000000000001; // micromolar
        const double var_sodium_calcium_exchange_current__K_mCao = 1400.0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mNai = 12000.0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mNao = 88000.0; // micromolar
        const double var_sodium_calcium_exchange_current__eta = 0.34999999999999998; // dimensionless
        const double var_sodium_calcium_exchange_current__k_sat = 0.27000000000000002; // dimensionless
        const double var_fast_sodium_current__E_Na = var_cell__R * var_cell__T * log((NV_Ith_S(mParameters, 3) + 0.1111111111111111 * NV_Ith_S(mParameters, 2)) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)) / var_cell__F; // millivolt
        const double var_fast_sodium_current__i_Na = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_chaste_interface__fast_sodium_current__O_Na * NV_Ith_S(mParameters, 6); // picoA_per_picoF
        const double var_fast_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_rapid_delayed_rectifier_K_I__i_Kr = (-var_cell__R * var_cell__T * log((NV_Ith_S(mParameters, 2) + 0.020408163265306124 * NV_Ith_S(mParameters, 3)) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) / var_cell__F + var_chaste_interface__cell__V) * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * NV_Ith_S(mParameters, 9); // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_rapid_delayed_rectifier_K_I__i_Kr; // uA_per_cm2
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * NV_Ith_S(mParameters, 1) * exp(var_cell__F * var_chaste_interface__cell__V * var_sodium_calcium_exchange_current__eta / (var_cell__R * var_cell__T)) - pow(NV_Ith_S(mParameters, 3), 3) * var_calcium_concentration__Cai * exp((-1.0 + var_sodium_calcium_exchange_current__eta) * var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))) * NV_Ith_S(mParameters, 11) / ((1.0 + pow(var_sodium_calcium_exchange_current__K_mAllo, 2) / pow(var_calcium_concentration__Cai, 2)) * (1.0 + var_sodium_calcium_exchange_current__k_sat * exp((-1.0 + var_sodium_calcium_exchange_current__eta) * var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))) * (pow(NV_Ith_S(mParameters, 3), 3) * var_calcium_concentration__Cai + pow(var_sodium_calcium_exchange_current__K_mNao, 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * NV_Ith_S(mParameters, 1) + pow(var_chaste_interface__sodium_concentration__Nai, 3) * var_sodium_calcium_exchange_current__K_mCao + pow(NV_Ith_S(mParameters, 3), 3) * (1.0 + pow(var_chaste_interface__sodium_concentration__Nai, 3) / pow(var_sodium_calcium_exchange_current__K_mNai, 3)) * var_sodium_calcium_exchange_current__K_mCai + pow(var_sodium_calcium_exchange_current__K_mNai, 3) * (1.0 + var_calcium_concentration__Cai / var_sodium_calcium_exchange_current__K_mCai) * NV_Ith_S(mParameters, 1))); // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX_converted = HeartConfig::Instance()->GetCapacitance() * var_sodium_calcium_exchange_current__i_NCX; // uA_per_cm2
        const double var_time_independent_K_I__i_K1 = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 2) * NV_Ith_S(mParameters, 7) / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + NV_Ith_S(mParameters, 2))); // picoA_per_picoF
        const double var_time_independent_K_I__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_time_independent_K_I__i_K1; // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(11);
        NV_Ith_S(dqs, 0) = var_calcium_fluxes__J_rel;
        NV_Ith_S(dqs, 1) = var_chaste_interface__calcium_concentration__Cai_converted;
        NV_Ith_S(dqs, 2) = var_L_type_calcium_current__i_CaL_converted;
        NV_Ith_S(dqs, 3) = var_fast_sodium_current__i_Na_converted;
        NV_Ith_S(dqs, 4) = var_time_independent_K_I__i_K1_converted;
        NV_Ith_S(dqs, 5) = var_non_inactivating_steady_state_K_I__i_Kss_converted;
        NV_Ith_S(dqs, 6) = var_rapid_delayed_rectifier_K_I__i_Kr_converted;
        NV_Ith_S(dqs, 7) = var_slow_delayed_rectifier_K_I__i_Ks_converted;
        NV_Ith_S(dqs, 8) = var_sodium_calcium_exchange_current__i_NCX_converted;
        NV_Ith_S(dqs, 9) = var_cell__i_Stim_converted;
        NV_Ith_S(dqs, 10) = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellli_mouse_2010FromCellMLCvodeOpt>::Initialise(void)
{
    this->mSystemName = "Li_Mouse_2010";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-78.9452115785979);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(9.499150681398009e-05);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(0.0954184301907784);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(171.167969039613);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("calcium_concentration__CaNSR");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(404.825013216286);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("calcium_fluxes__P_RyR");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000280539508743811);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("calcium_fluxes__CaMKt");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.729027738385079);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("ryanodine_receptors__P_O1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00571393383393735);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("ryanodine_receptors__P_O2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.09864618235341e-08);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("ryanodine_receptors__P_C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.565182571165673);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("L_type_calcium_current__O");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.23713515513533e-06);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("L_type_calcium_current__I");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.427651445872853);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("L_type_calcium_current__y_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.845044436980163);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(12364.7482121793);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("fast_sodium_current__O_Na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.46826771436314e-06);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("fast_sodium_current__C_Na1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000420472760277688);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("fast_sodium_current__C_Na2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0240114508843199);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("fast_sodium_current__I1_Na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000517471697712382);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("fast_sodium_current__I2_Na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.45406116958509e-05);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("fast_sodium_current__IF_Na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000306123648969581);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("fast_sodium_current__IC_Na2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0174528857380179);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("fast_sodium_current__IC_Na3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.402980726914811);

    // NV_Ith_S(rY, 22):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(115599.50642567);

    // NV_Ith_S(rY, 23):
    this->mVariableNames.push_back("ultra_rapidly_activating_delayed_rectifier_K_I__aur");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00346258606821817);

    // NV_Ith_S(rY, 24):
    this->mVariableNames.push_back("ultra_rapidly_activating_delayed_rectifier_K_I__iur");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.955684946168062);

    // NV_Ith_S(rY, 25):
    this->mVariableNames.push_back("non_inactivating_steady_state_K_I__aKss");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.287585636847048);

    // NV_Ith_S(rY, 26):
    this->mVariableNames.push_back("non_inactivating_steady_state_K_I__iKss");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 27):
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_I__O_K");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0131742086125972);

    // NV_Ith_S(rY, 28):
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_I__C_K1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0011733433957123);

    // NV_Ith_S(rY, 29):
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_I__C_K2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00105586824723736);

    // NV_Ith_S(rY, 30):
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_I__I_K");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00140618453684944);

    // NV_Ith_S(rY, 31):
    this->mVariableNames.push_back("slow_delayed_rectifier_K_I__nKs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00336735013094628);

    // NV_Ith_S(rY, 32):
    this->mVariableNames.push_back("fast_transient_outward_K_I__ato_f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0142335908879204);

    // NV_Ith_S(rY, 33):
    this->mVariableNames.push_back("fast_transient_outward_K_I__ito_f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.996989882138174);

    // NV_Ith_S(rY, 34):
    this->mVariableNames.push_back("slow_transient_outward_K_I__ato_s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0443263407760382);

    // NV_Ith_S(rY, 35):
    this->mVariableNames.push_back("slow_transient_outward_K_I__ito_s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.887568880831388);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[1]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[2]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[4]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[5]:
    this->mParameterNames.push_back("membrane_capacitance");
    this->mParameterUnits.push_back("microF_per_cm2");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_non_inactivating_steady_state_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("picoA_per_picoF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("micromolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_concentration");
    this->mDerivedQuantityUnits.push_back("millimolar");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_non_inactivating_steady_state_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellli_mouse_2010FromCellMLCvodeOpt)

#endif // CHASTE_CVODE
