#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: zhang_SAN_model_2000_0D_capable
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvodeOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "zhang_SAN_model_2000_0D_capable.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<30; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables(const Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables&);
    Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables& operator= (const Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables&);
    Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 30;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][30];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.0060000000000000001 / (1.0 + exp(-2.3500000000000001 - 0.16666666666666666 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(0.018714999999999999 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-0.018714999999999999 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.086929999999999993 + 0.095180000000000001 * exp(-2.1692640000000001 - 0.063060000000000005 * var_chaste_interface__membrane__V) / (1.0 + 1.6619999999999999 * exp(-14.33887 - 0.22509999999999999 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.91307000000000005 - 0.095180000000000001 * exp(-2.1692640000000001 - 0.063060000000000005 * var_chaste_interface__membrane__V) / (1.0 + 1.6619999999999999 * exp(-14.33887 - 0.22509999999999999 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return -1.0 + exp(0.037575562401545783 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.5 + exp(-1.5 - 0.025000000000000001 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(-5.4411764705882355 - 0.14705882352941177 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1068.0 * exp(0.87666666666666671 + 0.033333333333333333 * var_chaste_interface__membrane__V) + 1068.0 * exp(-0.87666666666666671 - 0.033333333333333333 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(0.5548223350253807 - 0.050761421319796954 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.0029775000000000001 + 0.019595000000000001 / (1.0369999999999999 * exp(2.7585732000000003 + 0.090120000000000006 * var_chaste_interface__membrane__V) + 0.36899999999999999 * exp(-2.8369599999999999 - 0.11899999999999999 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-2.9631993991738641 - 0.037551633496057078 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(3.5355294117647058 + 0.047058823529411764 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.5 * ((fabs(-5.0 + var_chaste_interface__membrane__V) < 2.5000000000025002e-7) ? (-2.8575000000028576e-6 / (-1.0 + exp(-1.0000000000010001e-7)) + 1999999.9999979998 * (-4.9999997499999997 + var_chaste_interface__membrane__V) * (2.8575000000028576e-6 / (-1.0 + exp(1.0000000000010001e-7)) + 2.8575000000028576e-6 / (-1.0 + exp(-1.0000000000010001e-7)))) : (11.43 * (-5.0 + var_chaste_interface__membrane__V) / (-1.0 + exp(-2.0 + 0.40000000000000002 * var_chaste_interface__membrane__V)))) + 0.5 * ((fabs(35.0 + var_chaste_interface__membrane__V) < 2.5000000000718892e-7) ? (-7.097500000992074e-6 / (-1.0 + exp(-1.000000000139778e-7)) - 84.900000000000006 * var_chaste_interface__membrane__V / (-1.0 + exp(-0.20799999999999999 * var_chaste_interface__membrane__V)) - 1999999.9999424887 * (34.999999750000001 + var_chaste_interface__membrane__V) * (7.0974999994161125e-6 / (-1.0 + exp(9.9999999991773334e-8)) + 7.097500000992074e-6 / (-1.0 + exp(-1.000000000139778e-7)))) : ((fabs(var_chaste_interface__membrane__V) < 4.8076923076923074e-7) ? (-4.0817307692307694e-5 / (-1.0 + exp(-9.9999999999999995e-8)) - 28.390000000000001 * (35.0 + var_chaste_interface__membrane__V) / (-1.0 + exp(-14.0 - 0.40000000000000002 * var_chaste_interface__membrane__V)) - 1040000.0 * (-4.8076923076923074e-7 + var_chaste_interface__membrane__V) * (4.0817307692307694e-5 / (-1.0 + exp(9.9999999999999995e-8)) + 4.0817307692307694e-5 / (-1.0 + exp(-9.9999999999999995e-8)))) : (-28.390000000000001 * (35.0 + var_chaste_interface__membrane__V) / (-1.0 + exp(-14.0 - 0.40000000000000002 * var_chaste_interface__membrane__V)) - 84.900000000000006 * var_chaste_interface__membrane__V / (-1.0 + exp(-0.20799999999999999 * var_chaste_interface__membrane__V)))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(9.0 + 0.20000000000000001 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 30.0 / (1.0 + exp(-7.0 - 0.25 * var_chaste_interface__membrane__V)) + ((fabs(28.0 + var_chaste_interface__membrane__V) < 4.0000000001150227e-7) ? (-1.5000000000431335e-6 / (-1.0 + exp(-1.0000000000287557e-7)) + 1249999.9999640554 * (28.000000400000001 + var_chaste_interface__membrane__V) * (1.5000000000431335e-6 / (-1.0 + exp(1.0000000000287557e-7)) + 1.5000000000431335e-6 / (-1.0 + exp(-1.0000000000287557e-7)))) : (3.75 * (28.0 + var_chaste_interface__membrane__V) / (-1.0 + exp(7.0 + 0.25 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(7.8888888888888893 + 0.1111111111111111 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 15.0 * exp(4.6163849154746419 + 0.065019505851755519 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(4.5320610687022898 + 0.076335877862595422 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(-1.3396226415094339 - 0.094339622641509441 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.95999999999999996 * exp(0.40000000000000002 - 0.044444444444444446 * var_chaste_interface__membrane__V) + 37.200000000000003 * exp(-0.56603773584905659 + 0.062893081761006289 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 4.2000000000000002 * exp(-0.52941176470588236 + 0.058823529411764705 * var_chaste_interface__membrane__V) + 0.14999999999999999 * exp(0.41666666666666663 - 0.046296296296296294 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.5 / (1.0 + exp(1.8415841584158419 + 0.099009900990099015 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + exp(4.4444444444444446 - 0.1111111111111111 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-0.022222222222222223 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(10.328124999999998 + 0.15625 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.00059770000000000005 + 3.7170000000000002e-6 * exp(-4.8164649999999991 - 0.28149999999999997 * var_chaste_interface__membrane__V) / (1.0 + 0.0037320000000000001 * exp(-12.936576000000001 - 0.34260000000000002 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][26] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.0035560000000000001 + 3.1860000000000002e-8 * exp(-11.69172 - 0.62190000000000001 * var_chaste_interface__membrane__V) / (1.0 + 7.1890000000000005e-5 * exp(-22.768981 - 0.66830000000000001 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][27] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return pow((1 / (1.0 + exp(-5.5531135531135529 - 0.18315018315018314 * var_chaste_interface__membrane__V))), 0.33333333333333331);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][28] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 4.5689999999999998e-5 + 0.00062469999999999995 / (0.62739999999999996 * exp(5.3505781299999997 + 0.082299999999999998 * var_chaste_interface__membrane__V) + 0.83221659999999997 * exp(-19.034003092000003 - 0.33566000000000001 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][29] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[30];

    // Lookup tables
    double (*_lookup_table_0)[30];
    int _lookup_table_0_num_misshit_piecewise[30] = {0};

};

std::shared_ptr<Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables> Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables::mpInstance;



    Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt::Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                15,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt>::Instance();
        Init();
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 0.0001; // (var_ionic_concentrations__Ca_i) [millimolar]
        NV_Ith_S(this->mParameters, 1) = 140.0; // (var_ionic_concentrations__K_i) [millimolar]
        NV_Ith_S(this->mParameters, 2) = 8.0; // (var_ionic_concentrations__Na_i) [millimolar]
        NV_Ith_S(this->mParameters, 3) = 2.0; // (var_ionic_concentrations__Ca_o) [millimolar]
        NV_Ith_S(this->mParameters, 4) = 5.4000000000000004; // (var_ionic_concentrations__K_o) [millimolar]
        NV_Ith_S(this->mParameters, 5) = 140.0; // (var_ionic_concentrations__Na_o) [millimolar]
        NV_Ith_S(this->mParameters, 6) = 1.0; // (var_L_type_Ca_channel__g_Ca_L_scaling) [dimensionless]
        NV_Ith_S(this->mParameters, 7) = 1.0; // (var_hyperpolarisation_activated_current__g_f_K_factor) [dimensionless]
        NV_Ith_S(this->mParameters, 8) = 1.0; // (var_hyperpolarisation_activated_current__g_f_Na_factor) [dimensionless]
        NV_Ith_S(this->mParameters, 9) = 1.0; // (var_rapid_delayed_rectifying_potassium_current__g_K_r_Scaling) [dimensionless]
    }

    Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt::~Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt()
    {
    }

    AbstractLookupTableCollection* Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt::GetLookupTableCollection()
    {
        return Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables::Instance();
    }
    
    double Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -39.013558536
        double var_chaste_interface__sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.092361701692
        double var_chaste_interface__sodium_current_h_gate__h1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.015905380261
        double var_chaste_interface__sodium_current_h_gate__h2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.01445216109
        double var_chaste_interface__L_type_Ca_channel_d_gate__d_L = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.04804900895
        double var_chaste_interface__L_type_Ca_channel_f_gate__f_L = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.48779845203
        double var_chaste_interface__T_type_Ca_channel_d_gate__d_T = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.42074047435
        double var_chaste_interface__T_type_Ca_channel_f_gate__f_T = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.038968420558
        double var_chaste_interface__four_AP_sensitive_currents_q_gate__q = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.29760539675
        double var_chaste_interface__four_AP_sensitive_currents_r_gate__r = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.064402950262
        double var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_af_gate__P_af = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.13034201158
        double var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_as_gate__P_as = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.46960956028
        double var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_i_gate__P_i = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.87993375273
        double var_chaste_interface__slow_delayed_rectifying_potassium_current_xs_gate__xs = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.082293827208
        double var_chaste_interface__hyperpolarisation_activated_current_y_gate__y = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.03889291759
        
        // Lookup table indexing
        const bool _oob_0 = Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        const double var_membrane__FCell = 0; // dimensionless
        const double var_T_type_Ca_channel__i_Ca_T = (0.0042780600000000002 + 0.00960424 * var_membrane__FCell) * (-45.0 + var_chaste_interface__membrane__V) * var_chaste_interface__T_type_Ca_channel_d_gate__d_T * var_chaste_interface__T_type_Ca_channel_f_gate__f_T; // nanoA
        const double var_membrane__Cm = 2.0000000000000002e-5 + 4.4999999999999996e-5 * var_membrane__FCell; // microF
        const double var_L_type_Ca_channel__i_Ca_L_converted = 0.001 * (0.0057938 + 0.060092679999999996 * var_membrane__FCell) * (-46.399999999999999 + var_chaste_interface__membrane__V) * (_lt_0_row[0] + var_chaste_interface__L_type_Ca_channel_d_gate__d_L * var_chaste_interface__L_type_Ca_channel_f_gate__f_L) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 6) / var_membrane__Cm; // uA_per_cm2
        const double var_persistent_calcium_current__i_Ca_p = 0; // nanoA
        const double var_calcium_background_current__i_b_Ca = (1.3236e-5 + 2.9715999999999998e-5 * var_membrane__FCell) * (-13.306520728999949 * log(NV_Ith_S(mParameters, 3) / NV_Ith_S(mParameters, 0)) + var_chaste_interface__membrane__V); // nanoA
        const double var_reversal_and_equilibrium_potentials__E_K = 26.613041457999898 * log(NV_Ith_S(mParameters, 4) / NV_Ith_S(mParameters, 1)); // millivolt
        const double var_four_AP_sensitive_currents__i_sus = (6.6455040000000003e-5 + 0.01131730496 * var_membrane__FCell) * (-var_reversal_and_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__four_AP_sensitive_currents_r_gate__r; // nanoA
        const double var_four_AP_sensitive_currents__i_to = (0.0049049999999999996 + 0.03159 * var_membrane__FCell) * (-var_reversal_and_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__four_AP_sensitive_currents_q_gate__q * var_chaste_interface__four_AP_sensitive_currents_r_gate__r; // nanoA
        const double var_hyperpolarisation_activated_current__i_f_K = (0.0005465 + 0.0063284999999999999 * var_membrane__FCell) * (-var_reversal_and_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 7) * var_chaste_interface__hyperpolarisation_activated_current_y_gate__y; // nanoA
        const double var_potassium_background_current__i_b_K = (2.5236359999999998e-5 + 5.6655639999999996e-5 * var_membrane__FCell) * (-var_reversal_and_equilibrium_potentials__E_K + var_chaste_interface__membrane__V); // nanoA
        const double var_rapid_delayed_rectifying_potassium_current__i_K_r_converted = 0.001 * (0.00079704000000000005 + 0.01520296 * var_membrane__FCell) * (-var_reversal_and_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * (0.40000000000000002 * var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_as_gate__P_as + 0.59999999999999998 * var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_af_gate__P_af) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 9) * var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_i_gate__P_i / var_membrane__Cm; // uA_per_cm2
        const double var_reversal_and_equilibrium_potentials__E_Na = 26.613041457999898 * log(NV_Ith_S(mParameters, 5) / NV_Ith_S(mParameters, 2)); // millivolt
        const double var_hyperpolarisation_activated_current__i_f_Na = (0.0005465 + 0.0063284999999999999 * var_membrane__FCell) * (-var_reversal_and_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 8) * var_chaste_interface__hyperpolarisation_activated_current_y_gate__y; // nanoA
        const double var_slow_delayed_rectifying_potassium_current__i_K_s = pow(var_chaste_interface__slow_delayed_rectifying_potassium_current_xs_gate__xs, 2) * (0.00034450000000000003 + 0.0100555 * var_membrane__FCell) * (-26.613041457999898 * log((NV_Ith_S(mParameters, 4) + 0.029999999999999999 * NV_Ith_S(mParameters, 5)) / (NV_Ith_S(mParameters, 1) + 0.029999999999999999 * NV_Ith_S(mParameters, 2))) + var_chaste_interface__membrane__V); // nanoA
        const double var_sodium_background_current__i_b_Na = (5.8181799999999999e-5 + 0.0001306182 * var_membrane__FCell) * (-var_reversal_and_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V); // nanoA
        const double var_sodium_calcium_exchanger__i_NaCa = (2.7228999999999998e-6 + 6.1129400000000006e-6 * var_membrane__FCell) * (pow(NV_Ith_S(mParameters, 2), 3) * NV_Ith_S(mParameters, 3) * _lt_0_row[1] - pow(NV_Ith_S(mParameters, 5), 3) * NV_Ith_S(mParameters, 0) * _lt_0_row[2]) / (1.0 + 0.0001 * pow(NV_Ith_S(mParameters, 2), 3) * NV_Ith_S(mParameters, 3) + 0.0001 * pow(NV_Ith_S(mParameters, 5), 3) * NV_Ith_S(mParameters, 0)); // nanoA
        const double var_sodium_current__i_Na_converted = 4.3813624302963527e-6 * pow(var_chaste_interface__sodium_current_m_gate__m, 3) * (-1.0 + exp(0.037575562401545783 * var_chaste_interface__membrane__V - 0.037575562401545783 * var_reversal_and_equilibrium_potentials__E_Na)) * ((_lt_0_row[3]) * var_chaste_interface__sodium_current_h_gate__h2 + (_lt_0_row[4]) * var_chaste_interface__sodium_current_h_gate__h1) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 5) * var_membrane__FCell * var_chaste_interface__membrane__V / ((_lt_0_row[5]) * var_membrane__Cm); // uA_per_cm2
        const double var_sodium_potassium_pump__i_p = 0.008918312184447821 * pow(NV_Ith_S(mParameters, 4), 2) * pow(NV_Ith_S(mParameters, 2), 3) * (0.047825449999999999 + 0.10736815 * var_membrane__FCell) / (pow((1 + 0.1773049645390071 * NV_Ith_S(mParameters, 2)), 3) * (_lt_0_row[6]) * pow((0.621 + NV_Ith_S(mParameters, 4)), 2)); // nanoA
        const double var_chaste_interface__i_ionic = ((var_L_type_Ca_channel__i_Ca_L_converted + var_rapid_delayed_rectifying_potassium_current__i_K_r_converted + var_sodium_current__i_Na_converted) * var_membrane__Cm + 0.001 * HeartConfig::Instance()->GetCapacitance() * var_T_type_Ca_channel__i_Ca_T + 0.001 * HeartConfig::Instance()->GetCapacitance() * var_calcium_background_current__i_b_Ca + 0.001 * HeartConfig::Instance()->GetCapacitance() * var_four_AP_sensitive_currents__i_sus + 0.001 * HeartConfig::Instance()->GetCapacitance() * var_four_AP_sensitive_currents__i_to + 0.001 * HeartConfig::Instance()->GetCapacitance() * var_hyperpolarisation_activated_current__i_f_K + 0.001 * HeartConfig::Instance()->GetCapacitance() * var_hyperpolarisation_activated_current__i_f_Na + 0.001 * HeartConfig::Instance()->GetCapacitance() * var_persistent_calcium_current__i_Ca_p + 0.001 * HeartConfig::Instance()->GetCapacitance() * var_potassium_background_current__i_b_K + 0.001 * HeartConfig::Instance()->GetCapacitance() * var_slow_delayed_rectifying_potassium_current__i_K_s + 0.001 * HeartConfig::Instance()->GetCapacitance() * var_sodium_background_current__i_b_Na + 0.001 * HeartConfig::Instance()->GetCapacitance() * var_sodium_calcium_exchanger__i_NaCa + 0.001 * HeartConfig::Instance()->GetCapacitance() * var_sodium_potassium_pump__i_p) / var_membrane__Cm; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time_converted, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -39.013558536
        double var_chaste_interface__sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.092361701692
        double var_chaste_interface__sodium_current_h_gate__h1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.015905380261
        double var_chaste_interface__sodium_current_h_gate__h2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.01445216109
        double var_chaste_interface__L_type_Ca_channel_d_gate__d_L = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.04804900895
        double var_chaste_interface__L_type_Ca_channel_f_gate__f_L = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.48779845203
        double var_chaste_interface__T_type_Ca_channel_d_gate__d_T = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.42074047435
        double var_chaste_interface__T_type_Ca_channel_f_gate__f_T = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.038968420558
        double var_chaste_interface__four_AP_sensitive_currents_q_gate__q = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.29760539675
        double var_chaste_interface__four_AP_sensitive_currents_r_gate__r = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.064402950262
        double var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_af_gate__P_af = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.13034201158
        double var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_as_gate__P_as = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.46960956028
        double var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_i_gate__P_i = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.87993375273
        double var_chaste_interface__slow_delayed_rectifying_potassium_current_xs_gate__xs = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.082293827208
        double var_chaste_interface__hyperpolarisation_activated_current_y_gate__y = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.03889291759

        // Lookup table indexing
        const bool _oob_0 = Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time_converted));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        double d_dt_chaste_interface_var_membrane__V;
        const double d_dt_chaste_interface_var_T_type_Ca_channel_d_gate__d_T = 0.001 * (-var_chaste_interface__T_type_Ca_channel_d_gate__d_T + _lt_0_row[7]) * (_lt_0_row[8]); // 1 / millisecond
        const double d_dt_chaste_interface_var_four_AP_sensitive_currents_r_gate__r = 0.001 * (-var_chaste_interface__four_AP_sensitive_currents_r_gate__r + _lt_0_row[9]) / (_lt_0_row[10]); // 1 / millisecond
        const double d_dt_chaste_interface_var_hyperpolarisation_activated_current_y_gate__y = 0.001 * (1.0 - var_chaste_interface__hyperpolarisation_activated_current_y_gate__y) * _lt_0_row[11] - 0.001 * var_chaste_interface__hyperpolarisation_activated_current_y_gate__y * _lt_0_row[12]; // 1 / millisecond
        const double var_membrane__FCell = 0; // dimensionless
        const double d_dt_chaste_interface_var_L_type_Ca_channel_d_gate__d_L = 0.001 * (-var_chaste_interface__L_type_Ca_channel_d_gate__d_L + 1 / (1.0 + exp(-3.7166666666666668 - 0.13333333333333333 * var_membrane__FCell - 0.16666666666666666 * var_chaste_interface__membrane__V))) * (_lt_0_row[13]); // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_Ca_channel_f_gate__f_L = 0.001 * (-var_chaste_interface__L_type_Ca_channel_f_gate__f_L + _lt_0_row[14]) * (_lt_0_row[15]) / (1.2 - 0.20000000000000001 * var_membrane__FCell); // 1 / millisecond
        const double d_dt_chaste_interface_var_T_type_Ca_channel_f_gate__f_T = 0.001 * (-var_chaste_interface__T_type_Ca_channel_f_gate__f_T + _lt_0_row[16]) * (_lt_0_row[17] + 15.300000000000001 * exp(-0.85234093637454988 - 0.0084033613445378148 * var_membrane__FCell - 0.012004801920768308 * var_chaste_interface__membrane__V)); // 1 / millisecond
        const double d_dt_chaste_interface_var_four_AP_sensitive_currents_q_gate__q = 0.001 * (-var_chaste_interface__four_AP_sensitive_currents_q_gate__q + _lt_0_row[18]) / (0.010103333333333334 + 0.065166666666666664 / (0.56859999999999999 * exp(-3.1827900000000002 - 0.081610000000000002 * var_chaste_interface__membrane__V - 0.81610000000000005 * var_membrane__FCell) + 0.71740000000000004 * exp((0.27189999999999998 - 0.1719 * var_membrane__FCell) * (40.93 + 10.0 * var_membrane__FCell + var_chaste_interface__membrane__V)))); // 1 / millisecond
        const double var_rapid_delayed_rectifying_potassium_current_P_af_gate__P_af_infinity = _lt_0_row[19]; // dimensionless
        const double d_dt_chaste_interface_var_rapid_delayed_rectifying_potassium_current_P_af_gate__P_af = 0.001 * (-var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_af_gate__P_af + var_rapid_delayed_rectifying_potassium_current_P_af_gate__P_af_infinity) * (_lt_0_row[20]); // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifying_potassium_current_P_as_gate__P_as = 0.001 * (-var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_as_gate__P_as + var_rapid_delayed_rectifying_potassium_current_P_af_gate__P_af_infinity) * (_lt_0_row[21]); // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifying_potassium_current_P_i_gate__P_i = _lt_0_row[22] - 0.5 * var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_i_gate__P_i; // 1 / millisecond
        const double d_dt_chaste_interface_var_slow_delayed_rectifying_potassium_current_xs_gate__xs = 0.014 * (1.0 - var_chaste_interface__slow_delayed_rectifying_potassium_current_xs_gate__xs) / (_lt_0_row[23]) - 0.001 * var_chaste_interface__slow_delayed_rectifying_potassium_current_xs_gate__xs * _lt_0_row[24]; // 1 / millisecond
        const double var_sodium_current_h_gate__h1_infinity = _lt_0_row[25]; // dimensionless
        const double d_dt_chaste_interface_var_sodium_current_h_gate__h1 = 0.001 * (-var_chaste_interface__sodium_current_h_gate__h1 + var_sodium_current_h_gate__h1_infinity) / (_lt_0_row[26]); // 1 / millisecond
        const double d_dt_chaste_interface_var_sodium_current_h_gate__h2 = 0.001 * (-var_chaste_interface__sodium_current_h_gate__h2 + var_sodium_current_h_gate__h1_infinity) / (_lt_0_row[27]); // 1 / millisecond
        const double d_dt_chaste_interface_var_sodium_current_m_gate__m = 0.001 * (-var_chaste_interface__sodium_current_m_gate__m + _lt_0_row[28]) / (_lt_0_row[29]); // 1 / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__V = 0.0;
        }
        else
        {
            const double var_reversal_and_equilibrium_potentials__E_K = 26.613041457999898 * log(NV_Ith_S(mParameters, 4) / NV_Ith_S(mParameters, 1)); // millivolt
            const double var_reversal_and_equilibrium_potentials__E_Na = 26.613041457999898 * log(NV_Ith_S(mParameters, 5) / NV_Ith_S(mParameters, 2)); // millivolt
            d_dt_chaste_interface_var_membrane__V = -0.001 * ((2.5236359999999998e-5 + 5.6655639999999996e-5 * var_membrane__FCell) * (-var_reversal_and_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) + (1.3236e-5 + 2.9715999999999998e-5 * var_membrane__FCell) * (-13.306520728999949 * log(NV_Ith_S(mParameters, 3) / NV_Ith_S(mParameters, 0)) + var_chaste_interface__membrane__V) + (5.8181799999999999e-5 + 0.0001306182 * var_membrane__FCell) * (-var_reversal_and_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) + (2.7228999999999998e-6 + 6.1129400000000006e-6 * var_membrane__FCell) * (pow(NV_Ith_S(mParameters, 2), 3) * NV_Ith_S(mParameters, 3) * _lt_0_row[1] - pow(NV_Ith_S(mParameters, 5), 3) * NV_Ith_S(mParameters, 0) * _lt_0_row[2]) / (1.0 + 0.0001 * pow(NV_Ith_S(mParameters, 2), 3) * NV_Ith_S(mParameters, 3) + 0.0001 * pow(NV_Ith_S(mParameters, 5), 3) * NV_Ith_S(mParameters, 0)) + pow(var_chaste_interface__slow_delayed_rectifying_potassium_current_xs_gate__xs, 2) * (0.00034450000000000003 + 0.0100555 * var_membrane__FCell) * (-26.613041457999898 * log((NV_Ith_S(mParameters, 4) + 0.029999999999999999 * NV_Ith_S(mParameters, 5)) / (NV_Ith_S(mParameters, 1) + 0.029999999999999999 * NV_Ith_S(mParameters, 2))) + var_chaste_interface__membrane__V) + (6.6455040000000003e-5 + 0.01131730496 * var_membrane__FCell) * (-var_reversal_and_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__four_AP_sensitive_currents_r_gate__r + (0.0042780600000000002 + 0.00960424 * var_membrane__FCell) * (-45.0 + var_chaste_interface__membrane__V) * var_chaste_interface__T_type_Ca_channel_d_gate__d_T * var_chaste_interface__T_type_Ca_channel_f_gate__f_T + (0.0049049999999999996 + 0.03159 * var_membrane__FCell) * (-var_reversal_and_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__four_AP_sensitive_currents_q_gate__q * var_chaste_interface__four_AP_sensitive_currents_r_gate__r + (0.0057938 + 0.060092679999999996 * var_membrane__FCell) * (-46.399999999999999 + var_chaste_interface__membrane__V) * (_lt_0_row[0] + var_chaste_interface__L_type_Ca_channel_d_gate__d_L * var_chaste_interface__L_type_Ca_channel_f_gate__f_L) * NV_Ith_S(mParameters, 6) + (0.0005465 + 0.0063284999999999999 * var_membrane__FCell) * (-var_reversal_and_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 7) * var_chaste_interface__hyperpolarisation_activated_current_y_gate__y + (0.0005465 + 0.0063284999999999999 * var_membrane__FCell) * (-var_reversal_and_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 8) * var_chaste_interface__hyperpolarisation_activated_current_y_gate__y + (0.00079704000000000005 + 0.01520296 * var_membrane__FCell) * (-var_reversal_and_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * (0.40000000000000002 * var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_as_gate__P_as + 0.59999999999999998 * var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_af_gate__P_af) * NV_Ith_S(mParameters, 9) * var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_i_gate__P_i + 0.008918312184447821 * pow(NV_Ith_S(mParameters, 4), 2) * pow(NV_Ith_S(mParameters, 2), 3) * (0.047825449999999999 + 0.10736815 * var_membrane__FCell) / (pow((1 + 0.1773049645390071 * NV_Ith_S(mParameters, 2)), 3) * (_lt_0_row[6]) * pow((0.621 + NV_Ith_S(mParameters, 4)), 2)) + 0.0043813624302963521 * pow(var_chaste_interface__sodium_current_m_gate__m, 3) * (-1.0 + exp(0.037575562401545783 * var_chaste_interface__membrane__V - 0.037575562401545783 * var_reversal_and_equilibrium_potentials__E_Na)) * ((_lt_0_row[3]) * var_chaste_interface__sodium_current_h_gate__h2 + (_lt_0_row[4]) * var_chaste_interface__sodium_current_h_gate__h1) * NV_Ith_S(mParameters, 5) * var_membrane__FCell * var_chaste_interface__membrane__V / (_lt_0_row[5])) / (2.0000000000000002e-5 + 4.4999999999999996e-5 * var_membrane__FCell); // millivolt / millisecond
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_membrane__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_sodium_current_m_gate__m;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_sodium_current_h_gate__h1;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_sodium_current_h_gate__h2;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_L_type_Ca_channel_d_gate__d_L;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_L_type_Ca_channel_f_gate__f_L;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_T_type_Ca_channel_d_gate__d_T;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_T_type_Ca_channel_f_gate__f_T;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_four_AP_sensitive_currents_q_gate__q;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_four_AP_sensitive_currents_r_gate__r;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_rapid_delayed_rectifying_potassium_current_P_af_gate__P_af;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_rapid_delayed_rectifying_potassium_current_P_as_gate__P_as;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_rapid_delayed_rectifying_potassium_current_P_i_gate__P_i;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_slow_delayed_rectifying_potassium_current_xs_gate__xs;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_hyperpolarisation_activated_current_y_gate__y;
    }

    void Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time_converted, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -39.013558536
        double var_chaste_interface__sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.092361701692
        double var_chaste_interface__sodium_current_h_gate__h1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.015905380261
        double var_chaste_interface__sodium_current_h_gate__h2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.01445216109
        double var_chaste_interface__L_type_Ca_channel_d_gate__d_L = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.04804900895
        double var_chaste_interface__L_type_Ca_channel_f_gate__f_L = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.48779845203
        double var_chaste_interface__T_type_Ca_channel_d_gate__d_T = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.42074047435
        double var_chaste_interface__T_type_Ca_channel_f_gate__f_T = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.038968420558
        double var_chaste_interface__four_AP_sensitive_currents_q_gate__q = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.29760539675
        double var_chaste_interface__four_AP_sensitive_currents_r_gate__r = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.064402950262
        double var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_af_gate__P_af = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.13034201158
        double var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_as_gate__P_as = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.46960956028
        double var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_i_gate__P_i = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.87993375273
        double var_chaste_interface__slow_delayed_rectifying_potassium_current_xs_gate__xs = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.082293827208
        double var_chaste_interface__hyperpolarisation_activated_current_y_gate__y = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.03889291759
        
        // Lookup table indexing
        const bool _oob_0 = Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time_converted));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
const double var_x0 = -0.16666666666666666 * var_chaste_interface__membrane__V;
        const double var_x1 = exp(-2.3500000000000001 + var_x0);
        const double var_x2 = 1.0 + var_x1;
        const double var_x3 = pow(NV_Ith_S(mParameters, 2), 3);
        const double var_x4 = var_x3 * NV_Ith_S(mParameters, 3);
        const double var_x5 = pow(NV_Ith_S(mParameters, 5), 3) * NV_Ith_S(mParameters, 0);
        const double var_x6 = 0.018714999999999999 * var_chaste_interface__membrane__V;
        const double var_x7 = 0.027324999999999999 * var_chaste_interface__hyperpolarisation_activated_current_y_gate__y;
        const double var_x8 = -0.015940800000000001 * var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_as_gate__P_as - 0.023911199999999997 * var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_af_gate__P_af;
        const double var_x9 = NV_Ith_S(mParameters, 9) * var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_i_gate__P_i;
        const double var_x10 = (13.441615999999998 - 0.28969 * var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 6);
        const double var_x11 = exp(-1.5 - 0.025000000000000001 * var_chaste_interface__membrane__V);
        const double var_x12 = 9.6256349999999991 - 0.21390299999999998 * var_chaste_interface__membrane__V;
        const double var_x13 = log(NV_Ith_S(mParameters, 4) / NV_Ith_S(mParameters, 1));
        const double var_x14 = 6.5268484175744739 * var_x13 - 0.24524999999999997 * var_chaste_interface__membrane__V;
        const double var_x15 = -0.027324999999999999 * var_chaste_interface__membrane__V;
        const double var_x16 = exp(-5.5531135531135529 - 0.18315018315018314 * var_chaste_interface__membrane__V);
        const double var_x17 = 1 / (1.0 + var_x16);
        const double var_x18 = pow(var_x17, 0.33333333333333331);
        const double var_x19 = exp(5.3505781299999997 + 0.082299999999999998 * var_chaste_interface__membrane__V);
        const double var_x20 = exp(-19.034003092000003 - 0.33566000000000001 * var_chaste_interface__membrane__V);
        const double var_x21 = 1 / (0.62739999999999996 * var_x19 + 0.83221659999999997 * var_x20);
        const double var_x22 = 1 / (4.5689999999999998e-5 + 0.00062469999999999995 * var_x21);
        const double var_x23 = exp(-12.936576000000001 - 0.34260000000000002 * var_chaste_interface__membrane__V);
        const double var_x24 = 1.0 + 0.0037320000000000001 * var_x23;
        const double var_x25 = exp(-4.8164649999999991 - 0.28149999999999997 * var_chaste_interface__membrane__V);
        const double var_x26 = var_x25 / var_x24;
        const double var_x27 = exp(10.328124999999998 + 0.15625 * var_chaste_interface__membrane__V);
        const double var_x28 = 1.0 + var_x27;
        const double var_x29 = 1 / var_x28;
        const double var_x30 = 1 / (0.00059770000000000005 + 3.7170000000000002e-6 * var_x26);
        const double var_x31 = 0.00015625 * var_x27 / pow(var_x28, 2);
        const double var_x32 = exp(-22.768981 - 0.66830000000000001 * var_chaste_interface__membrane__V);
        const double var_x33 = 1.0 + 7.1890000000000005e-5 * var_x32;
        const double var_x34 = exp(-11.69172 - 0.62190000000000001 * var_chaste_interface__membrane__V);
        const double var_x35 = var_x34 / var_x33;
        const double var_x36 = 1 / (0.0035560000000000001 + 3.1860000000000002e-8 * var_x35);
        const double var_x37 = exp(-3.7166666666666668 + var_x0);
        const double var_x38 = 1.0 + var_x37;
        const double var_x39 = 0.001 / var_x38 - 0.001 * var_chaste_interface__L_type_Ca_channel_d_gate__d_L;
        const double var_x40 = 1 / (-1.0 + exp(1.0000000000010001e-7));
        const double var_x41 = 1 / (-1.0 + exp(-1.0000000000010001e-7));
        const double var_x42 = exp(-0.20799999999999999 * var_chaste_interface__membrane__V);
        const double var_x43 = -1.0 + var_x42;
        const double var_x44 = 1 / var_x43;
        const double var_x45 = 42.450000000000003 * var_x44;
        const double var_x46 = -var_x45 - 8.829600000000001 * var_x42 * var_chaste_interface__membrane__V / pow(var_x43, 2);
        const double var_x47 = exp(-14.0 - 0.40000000000000002 * var_chaste_interface__membrane__V);
        const double var_x48 = -1.0 + var_x47;
        const double var_x49 = 1 / var_x48;
        const double var_x50 = 14.195 * var_x49;
        const double var_x51 = 35.0 + var_chaste_interface__membrane__V;
        const double var_x52 = -var_x50 - 5.6779999999999999 * var_x47 * var_x51 / pow(var_x48, 2);
        const double var_x53 = var_x46 + var_x52;
        const double var_x54 = (-4.9999997499999997 + var_chaste_interface__membrane__V) * (2.8575000000028576e-6 * var_x40 + 2.8575000000028576e-6 * var_x41);
        const double var_x55 = -var_x50 * var_x51;
        const double var_x56 = -var_x45 * var_chaste_interface__membrane__V;
        const double var_x57 = var_x55 + var_x56;
        const double var_x58 = 0.00016666666666666666 * var_x37 / pow(var_x38, 2);
        const double var_x59 = -5.0 + var_chaste_interface__membrane__V;
        const double var_x60 = fabs(var_x59) < 2.5000000000025002e-7;
        const double var_x61 = 1 / (-1.0 + exp(9.9999999991773334e-8));
        const double var_x62 = 1 / (-1.0 + exp(-1.000000000139778e-7));
        const double var_x63 = exp(-2.0 + 0.40000000000000002 * var_chaste_interface__membrane__V);
        const double var_x64 = -1.0 + var_x63;
        const double var_x65 = 1 / var_x64;
        const double var_x66 = 5.7149999999999999 * var_x65;
        const double var_x67 = var_x66 - 2.286 * var_x59 * var_x63 / pow(var_x64, 2);
        const double var_x68 = var_x59 * var_x66;
        const double var_x69 = (34.999999750000001 + var_chaste_interface__membrane__V) * (7.0974999994161125e-6 * var_x61 + 7.097500000992074e-6 * var_x62);
        const double var_x70 = fabs(var_x51) < 2.5000000000718892e-7;
        const double var_x71 = 1 / (-1.0 + exp(9.9999999999999995e-8));
        const double var_x72 = 1 / (-1.0 + exp(-9.9999999999999995e-8));
        const double var_x73 = (-4.8076923076923074e-7 + var_chaste_interface__membrane__V) * (4.0817307692307694e-5 * var_x71 + 4.0817307692307694e-5 * var_x72);
        const double var_x74 = fabs(var_chaste_interface__membrane__V) < 4.8076923076923074e-7;
        const double var_x75 = 0.014195000000000001 * var_x49 * var_x51;
        const double var_x76 = 0.042450000000000002 * var_x44 * var_chaste_interface__membrane__V;
        const double var_x77 = var_x75 + var_x76;
        const double var_x78 = -0.0057149999999999996 * var_x59 * var_x65;
        const double var_x79 = exp(9.0 + 0.20000000000000001 * var_chaste_interface__membrane__V);
        const double var_x80 = 1.0 + var_x79;
        const double var_x81 = 0.00083333333333333339 / var_x80 - 0.00083333333333333339 * var_chaste_interface__L_type_Ca_channel_f_gate__f_L;
        const double var_x82 = 1 / (-1.0 + exp(1.0000000000287557e-7));
        const double var_x83 = 1 / (-1.0 + exp(-1.0000000000287557e-7));
        const double var_x84 = 0.25 * var_chaste_interface__membrane__V;
        const double var_x85 = exp(-7.0 - var_x84);
        const double var_x86 = 1.0 + var_x85;
        const double var_x87 = 7.5 * var_x85 / pow(var_x86, 2);
        const double var_x88 = 1 / var_x86;
        const double var_x89 = 30.0 * var_x88;
        const double var_x90 = 1.5000000000431335e-6 * var_x83;
        const double var_x91 = (28.000000400000001 + var_chaste_interface__membrane__V) * (var_x90 + 1.5000000000431335e-6 * var_x82);
        const double var_x92 = 0.00016666666666666666 * var_x79 / pow(var_x80, 2);
        const double var_x93 = 28.0 + var_chaste_interface__membrane__V;
        const double var_x94 = fabs(var_x93) < 4.0000000001150227e-7;
        const double var_x95 = exp(7.0 + var_x84);
        const double var_x96 = -1.0 + var_x95;
        const double var_x97 = 1 / var_x96;
        const double var_x98 = 3.75 * var_x97;
        const double var_x99 = -0.025000000000000001 * var_x88;
        const double var_x100 = exp(-5.4411764705882355 - 0.14705882352941177 * var_chaste_interface__membrane__V);
        const double var_x101 = 1.0 + var_x100;
        const double var_x102 = 0.033333333333333333 * var_chaste_interface__membrane__V;
        const double var_x103 = exp(0.87666666666666671 + var_x102);
        const double var_x104 = exp(-0.87666666666666671 - var_x102);
        const double var_x105 = 0.1111111111111111 * var_chaste_interface__membrane__V;
        const double var_x106 = exp(7.8888888888888893 + var_x105);
        const double var_x107 = 1.0 + var_x106;
        const double var_x108 = exp(4.6163849154746419 + 0.065019505851755519 * var_chaste_interface__membrane__V);
        const double var_x109 = exp(-0.85234093637454988 - 0.012004801920768308 * var_chaste_interface__membrane__V);
        const double var_x110 = exp(4.5320610687022898 + 0.076335877862595422 * var_chaste_interface__membrane__V);
        const double var_x111 = 1.0 + var_x110;
        const double var_x112 = exp(-3.1827900000000002 - 0.081610000000000002 * var_chaste_interface__membrane__V);
        const double var_x113 = exp(11.128867 + 0.27189999999999998 * var_chaste_interface__membrane__V);
        const double var_x114 = 1 / (0.56859999999999999 * var_x112 + 0.71740000000000004 * var_x113);
        const double var_x115 = 1 / (0.010103333333333334 + 0.065166666666666664 * var_x114);
        const double var_x116 = exp(0.5548223350253807 - 0.050761421319796954 * var_chaste_interface__membrane__V);
        const double var_x117 = 1.0 + var_x116;
        const double var_x118 = exp(2.7585732000000003 + 0.090120000000000006 * var_chaste_interface__membrane__V);
        const double var_x119 = exp(-2.8369599999999999 - 0.11899999999999999 * var_chaste_interface__membrane__V);
        const double var_x120 = 1 / (1.0369999999999999 * var_x118 + 0.36899999999999999 * var_x119);
        const double var_x121 = 1 / (0.0029775000000000001 + 0.019595000000000001 * var_x120);
        const double var_x122 = exp(-1.3396226415094339 - 0.094339622641509441 * var_chaste_interface__membrane__V);
        const double var_x123 = 1.0 + var_x122;
        const double var_x124 = 0.001 / var_x123;
        const double var_x125 = exp(-0.56603773584905659 + 0.062893081761006289 * var_chaste_interface__membrane__V);
        const double var_x126 = exp(0.40000000000000002 - 0.044444444444444446 * var_chaste_interface__membrane__V);
        const double var_x127 = 9.4339622641509443e-5 * var_x122 / pow(var_x123, 2);
        const double var_x128 = exp(-0.52941176470588236 + 0.058823529411764705 * var_chaste_interface__membrane__V);
        const double var_x129 = exp(0.41666666666666663 - 0.046296296296296294 * var_chaste_interface__membrane__V);
        const double var_x130 = exp(1.8415841584158419 + 0.099009900990099015 * var_chaste_interface__membrane__V);
        const double var_x131 = _lt_0_row[24];
        const double var_x132 = exp(4.4444444444444446 - var_x105);
        const double var_x133 = 1.0 + var_x132;
        const double var_x134 = _lt_0_row[12];
        const double var_x135 = _lt_0_row[11];
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (-0.0048327079999999998 - 0.017225000000000001 * pow(var_chaste_interface__slow_delayed_rectifying_potassium_current_xs_gate__xs, 2) - 0.003322752 * var_chaste_interface__four_AP_sensitive_currents_r_gate__r + var_x8 * var_x9 + (-0.00173814 / var_x2 - 0.28969 * var_chaste_interface__L_type_Ca_channel_d_gate__d_L * var_chaste_interface__L_type_Ca_channel_f_gate__f_L) * NV_Ith_S(mParameters, 6) - var_x7 * NV_Ith_S(mParameters, 7) - var_x7 * NV_Ith_S(mParameters, 8) - 0.21390299999999998 * var_chaste_interface__T_type_Ca_channel_d_gate__d_T * var_chaste_interface__T_type_Ca_channel_f_gate__f_T - 0.00013614499999999998 * (0.018714999999999999 * var_x4 * exp(var_x6) + 0.018714999999999999 * var_x5 * exp(-var_x6)) / (1.0 + 0.0001 * var_x4 + 0.0001 * var_x5) - 0.24524999999999997 * var_chaste_interface__four_AP_sensitive_currents_q_gate__q * var_chaste_interface__four_AP_sensitive_currents_r_gate__r + 0.001 * var_x1 * var_x10 / pow(var_x2, 2) - 0.00023695682970094445 * var_x11 * var_x3 * pow(NV_Ith_S(mParameters, 4), 2) / (pow((1 + 0.1773049645390071 * NV_Ith_S(mParameters, 2)), 3) * pow((1 + 0.66666666666666663 * var_x11), 2) * pow((0.621 + NV_Ith_S(mParameters, 4)), 2)));
        IJth(rJacobian, 1, 0) = 6.105006105006105e-5 * var_x16 * var_x17 * var_x18 * var_x22 - 2.3112969460591231 * (-var_chaste_interface__sodium_current_m_gate__m + var_x18) * (0.27934182395599999 * var_x20 - 0.051635019999999997 * var_x19) / (pow((0.073139106771250198 + var_x21), 2) * pow((var_x20 + 0.75389027327741354 * var_x19), 2));
        IJth(rJacobian, 2, 0) = -var_x30 * var_x31 + 2799.1971566651023 * (var_x29 - var_chaste_interface__sodium_current_h_gate__h1) * (1.0463354999999999e-6 * var_x26 - 4.7524937544000007e-9 * var_x23 * var_x25 / pow(var_x24, 2)) / pow((1 + 0.0062188388823824657 * var_x26), 2);
        IJth(rJacobian, 3, 0) = -var_x31 * var_x36 + 79.081790816642851 * (var_x29 - var_chaste_interface__sodium_current_h_gate__h2) * (1.9813734000000003e-8 * var_x35 - 1.5306846118200001e-12 * var_x32 * var_x34 / pow(var_x33, 2)) / pow((1 + 8.959505061867266e-6 * var_x35), 2);
        IJth(rJacobian, 4, 0) = ((var_x60) ? (var_x39 * (var_x53 + 2.8574999999999999 * var_x40 + 2.8574999999999999 * var_x41) + var_x58 * (var_x57 + 999999.99999899988 * var_x54 - 1.4287500000014288e-6 * var_x41)) : ((var_x70) ? (var_x39 * (var_x46 + var_x67 - 7.0974999992120198 * var_x61 - 7.0975000007879814 * var_x62) + var_x58 * (var_x56 + var_x68 - 3.548750000496037e-6 * var_x62 - 999999.99997124437 * var_x69)) : ((var_x74) ? (var_x39 * (var_x52 + var_x67 - 21.225000000000001 * var_x71 - 21.225000000000001 * var_x72) + var_x58 * (var_x55 + var_x68 - 520000.0 * var_x73 - 2.0408653846153847e-5 * var_x72)) : (var_x39 * (var_x53 + var_x67) + var_x58 * (var_x57 + var_x68)))));
        IJth(rJacobian, 5, 0) = ((var_x94) ? (var_x81 * (var_x87 + 1.875 * var_x82 + 1.875 * var_x83) - var_x92 * (var_x89 - var_x90 + 1249999.9999640554 * var_x91)) : (var_x81 * (var_x87 + var_x98 - 0.9375 * var_x93 * var_x95 / pow(var_x96, 2)) - var_x92 * (var_x89 + var_x93 * var_x98)));
        IJth(rJacobian, 6, 0) = (0.001 / var_x101 - 0.001 * var_chaste_interface__T_type_Ca_channel_d_gate__d_T) * (35.600000000000001 * var_x103 - 35.600000000000001 * var_x104) + 0.00014705882352941178 * var_x100 * (1068.0 * var_x103 + 1068.0 * var_x104) / pow(var_x101, 2);
        IJth(rJacobian, 7, 0) = (0.001 / var_x107 - 0.001 * var_chaste_interface__T_type_Ca_channel_f_gate__f_T) * (0.97529258777633288 * var_x108 - 0.18367346938775511 * var_x109) - 0.00011111111111111112 * var_x106 * (15.0 * var_x108 + 15.300000000000001 * var_x109) / pow(var_x107, 2);
        IJth(rJacobian, 8, 0) = -7.6335877862595422e-5 * var_x110 * var_x115 / pow(var_x111, 2) - 0.02981616261141468 * (-var_chaste_interface__four_AP_sensitive_currents_q_gate__q + 1 / var_x111) * (0.046403446000000001 * var_x112 - 0.19506105999999998 * var_x113) / (pow((0.1550383631713555 + var_x114), 2) * pow((var_x113 + 0.79258433231112346 * var_x112), 2));
        IJth(rJacobian, 9, 0) = 5.076142131979696e-5 * var_x116 * var_x121 / pow(var_x117, 2) - 0.047456665474470604 * (-var_chaste_interface__four_AP_sensitive_currents_r_gate__r + 1 / var_x117) * (0.043910999999999999 * var_x119 - 0.09345444 * var_x118) / (pow((0.15195202857871906 + var_x120), 2) * pow((var_x118 + 0.35583413693346194 * var_x119), 2));
        IJth(rJacobian, 10, 0) = var_x127 * (0.95999999999999996 * var_x126 + 37.200000000000003 * var_x125) + (var_x124 - 0.001 * var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_af_gate__P_af) * (2.3396226415094339 * var_x125 - 0.042666666666666665 * var_x126);
        IJth(rJacobian, 11, 0) = var_x127 * (4.2000000000000002 * var_x128 + 0.14999999999999999 * var_x129) + (var_x124 - 0.001 * var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_as_gate__P_as) * (0.24705882352941178 * var_x128 - 0.0069444444444444441 * var_x129);
        IJth(rJacobian, 12, 0) = -0.049504950495049507 * var_x130 / pow((1.0 + var_x130), 2);
        IJth(rJacobian, 13, 0) = 2.2222222222222223e-5 * var_x131 * var_chaste_interface__slow_delayed_rectifying_potassium_current_xs_gate__xs + 0.0015555555555555555 * var_x132 * (1.0 - var_chaste_interface__slow_delayed_rectifying_potassium_current_xs_gate__xs) / pow(var_x133, 2);
        IJth(rJacobian, 14, 0) = -4.7058823529411767e-5 * var_x134 * var_chaste_interface__hyperpolarisation_activated_current_y_gate__y - 0.037551633496057078 * var_x135 * (0.001 - 0.001 * var_chaste_interface__hyperpolarisation_activated_current_y_gate__y);
        IJth(rJacobian, 1, 1) = -0.001 * var_x22;
        IJth(rJacobian, 2, 2) = -0.001 * var_x30;
        IJth(rJacobian, 3, 3) = -0.001 * var_x36;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (var_x10 * var_chaste_interface__L_type_Ca_channel_f_gate__f_L);
        IJth(rJacobian, 4, 4) = ((var_x60) ? (var_x77 + 1.4287500000014288e-9 * var_x41 - 999.9999999989999 * var_x54) : ((var_x70) ? (var_x76 + var_x78 + 3.5487500004960372e-9 * var_x62 + 999.99999997124439 * var_x69) : ((var_x74) ? (var_x75 + var_x78 + 520.0 * var_x73 + 2.0408653846153849e-8 * var_x72) : (var_x77 + var_x78))));
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (var_x10 * var_chaste_interface__L_type_Ca_channel_d_gate__d_L);
        IJth(rJacobian, 5, 5) = ((var_x94) ? (var_x99 + 1.2500000000359445e-9 * var_x83 - 1041.666666636713 * var_x91) : (var_x99 - 0.0031250000000000002 * var_x93 * var_x97));
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (var_x12 * var_chaste_interface__T_type_Ca_channel_f_gate__f_T);
        IJth(rJacobian, 6, 6) = -1.0680000000000001 * var_x103 - 1.0680000000000001 * var_x104;
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (var_x12 * var_chaste_interface__T_type_Ca_channel_d_gate__d_T);
        IJth(rJacobian, 7, 7) = -0.015300000000000001 * var_x109 - 0.014999999999999999 * var_x108;
        IJth(rJacobian, 0, 8) = mSetVoltageDerivativeToZero ? 0.0 : (var_x14 * var_chaste_interface__four_AP_sensitive_currents_r_gate__r);
        IJth(rJacobian, 8, 8) = -0.001 * var_x115;
        IJth(rJacobian, 0, 9) = mSetVoltageDerivativeToZero ? 0.0 : (0.088428536730652069 * var_x13 - 0.003322752 * var_chaste_interface__membrane__V + var_x14 * var_chaste_interface__four_AP_sensitive_currents_q_gate__q);
        IJth(rJacobian, 9, 9) = -0.001 * var_x121;
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (var_x9 * (0.63634975691052709 * var_x13 - 0.023911199999999997 * var_chaste_interface__membrane__V));
        IJth(rJacobian, 10, 10) = -0.00095999999999999992 * var_x126 - 0.037200000000000004 * var_x125;
        IJth(rJacobian, 0, 11) = mSetVoltageDerivativeToZero ? 0.0 : (var_x9 * (0.42423317127368476 * var_x13 - 0.015940800000000001 * var_chaste_interface__membrane__V));
        IJth(rJacobian, 11, 11) = -0.00014999999999999999 * var_x129 - 0.0042000000000000006 * var_x128;
        IJth(rJacobian, 0, 12) = mSetVoltageDerivativeToZero ? 0.0 : (var_x8 * (-26.613041457999898 * var_x13 + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 9));
        IJth(rJacobian, 12, 12) = -0.5;
        IJth(rJacobian, 0, 13) = mSetVoltageDerivativeToZero ? 0.0 : (-0.034450000000000001 * (-26.613041457999898 * log((NV_Ith_S(mParameters, 4) + 0.029999999999999999 * NV_Ith_S(mParameters, 5)) / (NV_Ith_S(mParameters, 1) + 0.029999999999999999 * NV_Ith_S(mParameters, 2))) + var_chaste_interface__membrane__V) * var_chaste_interface__slow_delayed_rectifying_potassium_current_xs_gate__xs);
        IJth(rJacobian, 13, 13) = -0.001 * var_x131 - 0.014 / var_x133;
        IJth(rJacobian, 0, 14) = mSetVoltageDerivativeToZero ? 0.0 : ((var_x15 + 0.72720135783984707 * var_x13) * NV_Ith_S(mParameters, 7) + (var_x15 + 0.72720135783984707 * log(NV_Ith_S(mParameters, 5) / NV_Ith_S(mParameters, 2))) * NV_Ith_S(mParameters, 8));
        IJth(rJacobian, 14, 14) = -0.001 * var_x134 - 0.001 * var_x135;
    }

    N_Vector Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt::ComputeDerivedQuantities(double var_chaste_interface__environment__time_converted, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -39.013558536
        double var_chaste_interface__sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.092361701692
        double var_chaste_interface__sodium_current_h_gate__h1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.015905380261
        double var_chaste_interface__sodium_current_h_gate__h2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.01445216109
        double var_chaste_interface__L_type_Ca_channel_d_gate__d_L = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.04804900895
        double var_chaste_interface__L_type_Ca_channel_f_gate__f_L = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.48779845203
        double var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_af_gate__P_af = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.13034201158
        double var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_as_gate__P_as = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.46960956028
        double var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_i_gate__P_i = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.87993375273
        double var_chaste_interface__hyperpolarisation_activated_current_y_gate__y = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.03889291759
        
        // Lookup table indexing
        const bool _oob_0 = Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time_converted));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_L_type_Ca_channel__E_Ca_L = 46.399999999999999; // millivolt
        const double var_L_type_Ca_channel__g_Ca_L_Centre = 0.0057938; // microS
        const double var_L_type_Ca_channel__g_Ca_L_Periphery = 0.065886479999999997; // microS
        const double var_hyperpolarisation_activated_current__g_f_K_Centre = 0.0005465; // microS
        const double var_hyperpolarisation_activated_current__g_f_K_Periphery = 0.006875; // microS
        const double var_hyperpolarisation_activated_current__g_f_Na_Centre = 0.0005465; // microS
        const double var_hyperpolarisation_activated_current__g_f_Na_Periphery = 0.006875; // microS
        const double var_membrane__CmCentre = 2.0000000000000002e-5; // microF
        const double var_membrane__CmPeriphery = 6.4999999999999994e-5; // microF
        const double var_membrane__F = 96845.0; // coulomb_per_mole
        const double var_membrane__FCellConstant = 1.0309347; // dimensionless
        const double var_membrane__R = 8314.0; // millijoule_per_mole_kelvin
        const double var_membrane__T = 310.0; // kelvin
        const double var_membrane__dCell = 0; // dimensionless
        const double var_membrane__FCell = var_membrane__FCellConstant * var_membrane__dCell / (1.0 + 0.77449999999999997 * exp(6.9491525423728815 - 10.16949152542373 * var_membrane__dCell)); // dimensionless
        const double var_L_type_Ca_channel__g_Ca_L = (-var_L_type_Ca_channel__g_Ca_L_Centre + var_L_type_Ca_channel__g_Ca_L_Periphery) * var_membrane__FCell + var_L_type_Ca_channel__g_Ca_L_Centre; // microS
        const double var_L_type_Ca_channel__i_Ca_L = (-var_L_type_Ca_channel__E_Ca_L + var_chaste_interface__membrane__V) * (_lt_0_row[0] + var_chaste_interface__L_type_Ca_channel_d_gate__d_L * var_chaste_interface__L_type_Ca_channel_f_gate__f_L) * var_L_type_Ca_channel__g_Ca_L * NV_Ith_S(mParameters, 6); // nanoA
        const double var_hyperpolarisation_activated_current__g_f_K = (-var_hyperpolarisation_activated_current__g_f_K_Centre + var_hyperpolarisation_activated_current__g_f_K_Periphery) * var_membrane__FCell + var_hyperpolarisation_activated_current__g_f_K_Centre; // microS
        const double var_hyperpolarisation_activated_current__g_f_Na = (-var_hyperpolarisation_activated_current__g_f_Na_Centre + var_hyperpolarisation_activated_current__g_f_Na_Periphery) * var_membrane__FCell + var_hyperpolarisation_activated_current__g_f_Na_Centre; // microS
        const double var_membrane__Cm = (-var_membrane__CmCentre + var_membrane__CmPeriphery) * var_membrane__FCell + var_membrane__CmCentre; // microF
        const double var_L_type_Ca_channel__i_Ca_L_converted = 0.001 * HeartConfig::Instance()->GetCapacitance() * var_L_type_Ca_channel__i_Ca_L / var_membrane__Cm; // uA_per_cm2
        const double var_rapid_delayed_rectifying_potassium_current__g_K_r_Centre = 0.00079704000000000005; // microS
        const double var_rapid_delayed_rectifying_potassium_current__g_K_r_Periphery = 0.016; // microS
        const double var_rapid_delayed_rectifying_potassium_current__g_K_r = (-var_rapid_delayed_rectifying_potassium_current__g_K_r_Centre + var_rapid_delayed_rectifying_potassium_current__g_K_r_Periphery) * var_membrane__FCell + var_rapid_delayed_rectifying_potassium_current__g_K_r_Centre; // microS
        const double var_rapid_delayed_rectifying_potassium_current__P_a = 0.40000000000000002 * var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_as_gate__P_as + 0.59999999999999998 * var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_af_gate__P_af; // dimensionless
        const double var_reversal_and_equilibrium_potentials__E_K = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 4) / NV_Ith_S(mParameters, 1)) / var_membrane__F; // millivolt
        const double var_hyperpolarisation_activated_current__i_f_K = (-var_reversal_and_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * var_hyperpolarisation_activated_current__g_f_K * NV_Ith_S(mParameters, 7) * var_chaste_interface__hyperpolarisation_activated_current_y_gate__y; // nanoA
        const double var_rapid_delayed_rectifying_potassium_current__i_K_r = (-var_reversal_and_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * var_rapid_delayed_rectifying_potassium_current__P_a * var_rapid_delayed_rectifying_potassium_current__g_K_r * NV_Ith_S(mParameters, 9) * var_chaste_interface__rapid_delayed_rectifying_potassium_current_P_i_gate__P_i; // nanoA
        const double var_rapid_delayed_rectifying_potassium_current__i_K_r_converted = 0.001 * HeartConfig::Instance()->GetCapacitance() * var_rapid_delayed_rectifying_potassium_current__i_K_r / var_membrane__Cm; // uA_per_cm2
        const double var_reversal_and_equilibrium_potentials__E_Na = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 5) / NV_Ith_S(mParameters, 2)) / var_membrane__F; // millivolt
        const double var_hyperpolarisation_activated_current__i_f_Na = (-var_reversal_and_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) * var_hyperpolarisation_activated_current__g_f_Na * NV_Ith_S(mParameters, 8) * var_chaste_interface__hyperpolarisation_activated_current_y_gate__y; // nanoA
        const double var_sodium_current__g_Na_Centre = 0; // microlitre_per_second
        const double var_sodium_current__g_Na_Periphery = 1.204e-6; // microlitre_per_second
        const double var_sodium_current__g_Na = (-var_sodium_current__g_Na_Centre + var_sodium_current__g_Na_Periphery) * var_membrane__FCell + var_sodium_current__g_Na_Centre; // microlitre_per_second
        const double var_sodium_current_h_gate__F_Na = _lt_0_row[3]; // dimensionless
        const double var_sodium_current_h_gate__h = (1.0 - var_sodium_current_h_gate__F_Na) * var_chaste_interface__sodium_current_h_gate__h1 + var_sodium_current_h_gate__F_Na * var_chaste_interface__sodium_current_h_gate__h2; // dimensionless
        const double var_sodium_current__i_Na = pow(var_membrane__F, 2) * pow(var_chaste_interface__sodium_current_m_gate__m, 3) * (-1.0 + exp((-var_reversal_and_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) * var_membrane__F / (var_membrane__R * var_membrane__T))) * NV_Ith_S(mParameters, 5) * var_chaste_interface__membrane__V * var_sodium_current__g_Na * var_sodium_current_h_gate__h / ((-1.0 + exp(var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * var_membrane__R * var_membrane__T); // nanoA
        const double var_sodium_current__i_Na_converted = 0.001 * HeartConfig::Instance()->GetCapacitance() * var_sodium_current__i_Na / var_membrane__Cm; // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(7);
        NV_Ith_S(dqs, 0) = var_L_type_Ca_channel__i_Ca_L_converted;
        NV_Ith_S(dqs, 1) = var_membrane__Cm;
        NV_Ith_S(dqs, 2) = var_sodium_current__i_Na_converted;
        NV_Ith_S(dqs, 3) = var_hyperpolarisation_activated_current__i_f_K;
        NV_Ith_S(dqs, 4) = var_hyperpolarisation_activated_current__i_f_Na;
        NV_Ith_S(dqs, 5) = var_rapid_delayed_rectifying_potassium_current__i_K_r_converted;
        NV_Ith_S(dqs, 6) = var_chaste_interface__environment__time_converted;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt>::Initialise(void)
{
    this->mSystemName = "zhang_SAN_model_2000_0D_capable";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-39.013558536);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.092361701692);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("sodium_current_h_gate__h1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.015905380261);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("sodium_current_h_gate__h2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.01445216109);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("L_type_Ca_channel_d_gate__d_L");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.04804900895);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("L_type_Ca_channel_f_gate__f_L");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.48779845203);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("T_type_Ca_channel_d_gate__d_T");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.42074047435);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("T_type_Ca_channel_f_gate__f_T");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.038968420558);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("four_AP_sensitive_currents_q_gate__q");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.29760539675);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("four_AP_sensitive_currents_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.064402950262);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("rapid_delayed_rectifying_potassium_current_P_af_gate__P_af");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.13034201158);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("rapid_delayed_rectifying_potassium_current_P_as_gate__P_as");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.46960956028);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("rapid_delayed_rectifying_potassium_current_P_i_gate__P_i");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.87993375273);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("slow_delayed_rectifying_potassium_current_xs_gate__xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.082293827208);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("hyperpolarisation_activated_current_y_gate__y");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.03889291759);

    // mParameters[0]:
    this->mParameterNames.push_back("cytosolic_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[1]:
    this->mParameterNames.push_back("cytosolic_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[2]:
    this->mParameterNames.push_back("cytosolic_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_hyperpolarisation_activated_funny_current_potassium_component_conductance");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_hyperpolarisation_activated_funny_current_sodium_component_conductance");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("dimensionless");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_capacitance");
    this->mDerivedQuantityUnits.push_back("microF");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_hyperpolarisation_activated_funny_current_potassium_component");
    this->mDerivedQuantityUnits.push_back("nanoA");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_hyperpolarisation_activated_funny_current_sodium_component");
    this->mDerivedQuantityUnits.push_back("nanoA");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellzhang_SAN_model_2000_0D_capableFromCellMLCvodeOpt)

#endif // CHASTE_CVODE
