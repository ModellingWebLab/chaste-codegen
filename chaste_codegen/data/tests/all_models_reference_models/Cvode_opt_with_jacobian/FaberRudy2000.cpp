#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: LR_Dynamic_model_2000
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: AnalyticCvodeOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "FaberRudy2000.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class CellFaberRudy2000FromCellMLCvodeOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static CellFaberRudy2000FromCellMLCvodeOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new CellFaberRudy2000FromCellMLCvodeOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<29; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~CellFaberRudy2000FromCellMLCvodeOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    CellFaberRudy2000FromCellMLCvodeOpt_LookupTables(const CellFaberRudy2000FromCellMLCvodeOpt_LookupTables&);
    CellFaberRudy2000FromCellMLCvodeOpt_LookupTables& operator= (const CellFaberRudy2000FromCellMLCvodeOpt_LookupTables&);
    CellFaberRudy2000FromCellMLCvodeOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 29;
        mTableMins[0] = -250.0001;
        mTableMaxs[0] = 549.9999;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][29];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][0] = exp(0.074871767015605231 * var_chaste_interface__membrane__V);
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][1] = 1 / (-1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][2] = exp(0.037435883507802616 * var_chaste_interface__membrane__V);
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][3] = 1 / (-1.0 + exp(0.037435883507802616 * var_chaste_interface__membrane__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][4] = exp(-0.031820500981632228 * var_chaste_interface__membrane__V);
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][5] = 1 / (1.0 + 0.1245 * exp(-0.003743588350780262 * var_chaste_interface__membrane__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.961367013372957)) * exp(-0.037435883507802616 * var_chaste_interface__membrane__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][6] = 1 / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][7] = 1 / (1.0 + exp(0.4017857142857143 + 0.044642857142857144 * var_chaste_interface__membrane__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][8] = exp(0.01 * var_chaste_interface__membrane__V);
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][9] = 1 / (1.0 + exp(4.0 + 0.125 * var_chaste_interface__membrane__V)) + 0.59999999999999998 / (1.0 + exp(2.5 - 0.050000000000000003 * var_chaste_interface__membrane__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][10] = 0.001 / (0.02 + 0.019699999999999999 * exp(-0.113569 * pow((1 + 0.10000000000000001 * var_chaste_interface__membrane__V), 2)));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][11] = 1 / (1.0 + exp(-1.2962962962962963 - 0.092592592592592587 * var_chaste_interface__membrane__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][12] = 1 / (0.0037000000000000002 + 0.0061000000000000004 / (1.0 + exp(5.5555555555555554 + 0.22222222222222221 * var_chaste_interface__membrane__V)));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][13] = 1 / (1.0 + exp(10.714285714285715 + 0.17857142857142858 * var_chaste_interface__membrane__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][14] = ((var_chaste_interface__membrane__V < -40.0) ? (135.0 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][15] = ((var_chaste_interface__membrane__V < -40.0) ? (3560.0 * exp(0.079000000000000001 * var_chaste_interface__membrane__V) + 310000000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V)) : (7692.3076923076924 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__membrane__V))));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][16] = ((var_chaste_interface__membrane__V < -40.0) ? (1000.0 * (37.780000000000001 + var_chaste_interface__membrane__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V) - 3.4740000000000003e-5 * exp(-0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V))) : (0));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][17] = ((var_chaste_interface__membrane__V < -40.0) ? (121.2 * exp(-0.01052 * var_chaste_interface__membrane__V) / (1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__membrane__V))) : (300.0 * exp(-2.5349999999999999e-7 * var_chaste_interface__membrane__V) / (1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__membrane__V))));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][18] = ((fabs(47.130000000000003 + var_chaste_interface__membrane__V) >= 1.0000000000000001e-5) ? (320.0 * (47.130000000000003 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__V))) : (3200.0));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][19] = exp(-0.090909090909090912 * var_chaste_interface__membrane__V);
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][20] = 1 / (1.0 + exp(-2.8666666666666667 - 0.13333333333333333 * var_chaste_interface__membrane__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][21] = 0.60999999999999999 * (38.899999999999999 + var_chaste_interface__membrane__V) / (-1.0 + exp(5.6404999999999994 + 0.14499999999999999 * var_chaste_interface__membrane__V)) + 1.3799999999999999 * (14.199999999999999 + var_chaste_interface__membrane__V) / (1.0 - exp(-1.7465999999999999 - 0.123 * var_chaste_interface__membrane__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][22] = 1 / (1.0 + exp(0.089820359281437126 - 0.059880239520958084 * var_chaste_interface__membrane__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][23] = 0.13100000000000001 * (30.0 + var_chaste_interface__membrane__V) / (-1.0 + exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__membrane__V)) + 0.071899999999999992 * (30.0 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__membrane__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][24] = 0.032750000000000001 * (30.0 + var_chaste_interface__membrane__V) / (-1.0 + exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__membrane__V)) + 0.017974999999999998 * (30.0 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__membrane__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][25] = 15.0 / (1.0 + exp(12.0 + 0.20000000000000001 * var_chaste_interface__membrane__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][26] = 100.0 * exp(5.0 + 0.20000000000000001 * var_chaste_interface__membrane__V) / (1.0 + exp(5.0 + 0.20000000000000001 * var_chaste_interface__membrane__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][27] = 10000.0 * exp(-1.6000000000000001 + 0.040000000000000001 * var_chaste_interface__membrane__V) / (1.0 + exp(-1.6000000000000001 + 0.040000000000000001 * var_chaste_interface__membrane__V));
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                _lookup_table_0[i][28] = 10000.0 * exp(-3.6000000000000001 - 0.040000000000000001 * var_chaste_interface__membrane__V) / (1.0 + exp(-3.6000000000000001 - 0.040000000000000001 * var_chaste_interface__membrane__V));
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<CellFaberRudy2000FromCellMLCvodeOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[29];

    // Lookup tables
    double (*_lookup_table_0)[29];

};

std::shared_ptr<CellFaberRudy2000FromCellMLCvodeOpt_LookupTables> CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> CellFaberRudy2000FromCellMLCvodeOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_amplitude_converted = -25.5 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__stim_duration_converted = 2.0; // millisecond
        const double var_chaste_interface__membrane__stim_period_converted = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_start_converted = 100.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude_converted),
                var_chaste_interface__membrane__stim_duration_converted,
                var_chaste_interface__membrane__stim_period_converted,
                var_chaste_interface__membrane__stim_start_converted
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double CellFaberRudy2000FromCellMLCvodeOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    CellFaberRudy2000FromCellMLCvodeOpt::CellFaberRudy2000FromCellMLCvodeOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                25,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<CellFaberRudy2000FromCellMLCvodeOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
        NV_Ith_S(this->mParameters, 0) = 1.0; // (var_rapid_delayed_rectifier_potassium_current__ScaleFactorGkr) [dimensionless]
        NV_Ith_S(this->mParameters, 1) = 1.0; // (var_slow_delayed_rectifier_potassium_current__ScaleFactorGks) [dimensionless]
        NV_Ith_S(this->mParameters, 2) = 0; // (var_transient_outward_current__ScaleFactorIto) [dimensionless]
        NV_Ith_S(this->mParameters, 3) = 0.001; // (var_membrane__Cm) [microF]
    }

    CellFaberRudy2000FromCellMLCvodeOpt::~CellFaberRudy2000FromCellMLCvodeOpt()
    {
    }

    AbstractLookupTableCollection* CellFaberRudy2000FromCellMLCvodeOpt::GetLookupTableCollection()
    {
        return CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::Instance();
    }
    
    double CellFaberRudy2000FromCellMLCvodeOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -90.0
        double var_chaste_interface__calcium_dynamics__Cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 6e-05
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.0008
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.993771
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.995727
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 3.210618e-06
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.999837
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.000970231
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.994305
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.000124042
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 9.0
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 24);
        // Units: millimolar; Initial value: 141.2
        
        // Lookup table indexing
        const bool _oob_0 = CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        const double var_L_type_Ca_channel_f_Ca_gate__f_Ca = 1 / (1.0 + 1666.6666666666667 * var_chaste_interface__calcium_dynamics__Cai); // dimensionless
        const double var_calcium_background_current__E_Ca = 13.356169352749133 * log(1.8 / var_chaste_interface__calcium_dynamics__Cai); // millivolt
        const double var_fast_sodium_current__E_Na = 26.712338705498265 * log(132.0 / var_chaste_interface__ionic_concentrations__Nai); // millivolt
        const double var_L_type_Ca_channel__i_Ca_L = 7.8019226357407252 * _lt_0_row[1] * (-0.61380000000000001 + var_chaste_interface__calcium_dynamics__Cai * _lt_0_row[0]) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_chaste_interface__membrane__V + 0.0024381008236689767 * _lt_0_row[3] * (-99.0 + 0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[2]) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_chaste_interface__membrane__V + 0.00069711623550831479 * _lt_0_row[3] * (-3.375 + 0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[2]) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_chaste_interface__membrane__V; // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = 0.00025000000000000001 * (-2299968.0 * var_chaste_interface__calcium_dynamics__Cai + 1.8 * pow(var_chaste_interface__ionic_concentrations__Nai, 3) * _lt_0_row[2]) * _lt_0_row[4] / (1.0 + 0.0001 * (2299968.0 * var_chaste_interface__calcium_dynamics__Cai + 1.8 * pow(var_chaste_interface__ionic_concentrations__Nai, 3) * _lt_0_row[2]) * _lt_0_row[4]); // microA_per_microF
        const double var_T_type_Ca_channel__i_Ca_T = 0.050000000000000003 * pow(var_chaste_interface__T_type_Ca_channel_b_gate__b, 2) * (-var_calcium_background_current__E_Ca + var_chaste_interface__membrane__V) * var_chaste_interface__T_type_Ca_channel_g_gate__g; // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.003016 * var_chaste_interface__membrane__V - 0.003016 * var_calcium_background_current__E_Ca; // microA_per_microF
        const double var_fast_sodium_current__i_Na = 16.0 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // microA_per_microF
        const double var_non_specific_calcium_activated_current__P_ns_Ca = 0; // cm_per_second
        const double var_non_specific_calcium_activated_current__i_ns_Ca = 3612.0012202503358 * _lt_0_row[3] * (-3.375 + 0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[2]) * var_chaste_interface__membrane__V * var_non_specific_calcium_activated_current__P_ns_Ca / (1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__calcium_dynamics__Cai, 3)) + 3612.0012202503358 * _lt_0_row[3] * (-99.0 + 0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[2]) * var_chaste_interface__membrane__V * var_non_specific_calcium_activated_current__P_ns_Ca / (1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__calcium_dynamics__Cai, 3)); // microA_per_microF
        const double var_sarcolemmal_calcium_pump__i_p_Ca = 1.1499999999999999 * var_chaste_interface__calcium_dynamics__Cai / (0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai); // microA_per_microF
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = 0.433 * (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow(1 / var_chaste_interface__calcium_dynamics__Cai, 1.3999999999999999))) * (-26.712338705498265 * log(6.9195599999999997 / (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai + var_chaste_interface__ionic_concentrations__Ki)) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 1) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2; // microA_per_microF
        const double var_sodium_background_current__i_Na_b = 0.0040000000000000001 * var_chaste_interface__membrane__V - 0.0040000000000000001 * var_fast_sodium_current__E_Na; // microA_per_microF
        const double var_sodium_potassium_pump__i_NaK = 1.6875 * _lt_0_row[5] / (1.0 + 100.0 / pow(var_chaste_interface__ionic_concentrations__Nai, 2)); // microA_per_microF
        const double var_time_independent_potassium_current__E_K = 26.712338705498265 * log(4.5 / var_chaste_interface__ionic_concentrations__Ki); // millivolt
        const double var_ATP_sensitive_potassium_current__i_K_ATP = 2.7574104360798206e-8 * var_chaste_interface__membrane__V - 2.7574104360798206e-8 * var_time_independent_potassium_current__E_K; // microA_per_microF
        const double var_plateau_potassium_current__i_Kp = 0.0055199999999999997 * _lt_0_row[6] * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V); // microA_per_microF
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = 0.023862446088641735 * _lt_0_row[7] * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 0) * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr; // microA_per_microF
        const double var_sodium_activated_potassium_current__i_K_Na = 0; // microA_per_microF
        const double var_time_independent_potassium_current__i_K1 = 698.34626081908675 * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V) / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K)) * (1020.0 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K)) + 1000.0 * (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 0.080320000000000003 * var_time_independent_potassium_current__E_K) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 0.061749999999999999 * var_time_independent_potassium_current__E_K)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_time_independent_potassium_current__E_K - 0.51429999999999998 * var_chaste_interface__membrane__V)))); // microA_per_microF
        const double var_transient_outward_current__i_to = 0.5 * pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 3) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 2) * var_chaste_interface__transient_outward_current_ydv_gate__ydv * _lt_0_row[8]; // microA_per_microF
        const double var_chaste_interface__i_ionic = (var_ATP_sensitive_potassium_current__i_K_ATP + var_L_type_Ca_channel__i_Ca_L + var_Na_Ca_exchanger__i_NaCa + var_T_type_Ca_channel__i_Ca_T + var_calcium_background_current__i_Ca_b + var_fast_sodium_current__i_Na + var_non_specific_calcium_activated_current__i_ns_Ca + var_plateau_potassium_current__i_Kp + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_sarcolemmal_calcium_pump__i_p_Ca + var_slow_delayed_rectifier_potassium_current__i_Ks + var_sodium_activated_potassium_current__i_K_Na + var_sodium_background_current__i_Na_b + var_sodium_potassium_pump__i_NaK + var_time_independent_potassium_current__i_K1 + var_transient_outward_current__i_to) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void CellFaberRudy2000FromCellMLCvodeOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time_converted, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -90.0
        double var_chaste_interface__calcium_dynamics__Cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 6e-05
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.0008
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.993771
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.995727
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 3.210618e-06
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.999837
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.000970231
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.994305
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.000124042
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__calcium_dynamics__Ca_JSR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 1.8
        double var_chaste_interface__calcium_dynamics__Ca_NSR = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 1.8
        double var_chaste_interface__calcium_dynamics__APtrack = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__calcium_dynamics__APtrack2 = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__calcium_dynamics__APtrack3 = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__calcium_dynamics__Cainfluxtrack = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack2 = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack3 = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 9.0
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 24);
        // Units: millimolar; Initial value: 141.2

        // Lookup table indexing
        const bool _oob_0 = CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time_converted));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        double d_dt_chaste_interface_var_membrane__V;
        const double d_dt_chaste_interface_var_calcium_dynamics__APtrack2 = 0.001 * (((var_chaste_interface__calcium_dynamics__APtrack > 0.17999999999999999) && (var_chaste_interface__calcium_dynamics__APtrack < 0.20000000000000001)) ? (100000.0 - 100500.0 * var_chaste_interface__calcium_dynamics__APtrack2) : (-500.0 * var_chaste_interface__calcium_dynamics__APtrack2)); // 1 / millisecond
        const double d_dt_chaste_interface_var_calcium_dynamics__APtrack3 = 0.001 * (((var_chaste_interface__calcium_dynamics__APtrack > 0.17999999999999999) && (var_chaste_interface__calcium_dynamics__APtrack < 0.20000000000000001)) ? (100000.0 - 100500.0 * var_chaste_interface__calcium_dynamics__APtrack3) : (-10.0 * var_chaste_interface__calcium_dynamics__APtrack3)); // 1 / millisecond
        const double var_L_type_Ca_channel_f_Ca_gate__f_Ca = 1 / (1.0 + 1666.6666666666667 * var_chaste_interface__calcium_dynamics__Cai); // dimensionless
        const double d_dt_chaste_interface_var_calcium_dynamics__OVRLDtrack2 = 0.001 * (((var_chaste_interface__calcium_dynamics__OVRLDtrack > 0.97999999999999998) && (var_chaste_interface__calcium_dynamics__OVRLDtrack2 < 0.97999999999999998)) ? (50000.0 - 50000.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack2) : (-500.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack2)); // 1 / millisecond
        const double d_dt_chaste_interface_var_calcium_dynamics__OVRLDtrack3 = 0.001 * (((var_chaste_interface__calcium_dynamics__OVRLDtrack > 0.97999999999999998) && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.97999999999999998)) ? (50000.0 - 50000.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack3) : (-10.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack3)); // 1 / millisecond
        const double d_dt_chaste_interface_var_calcium_dynamics__OVRLDtrack = 0.001 * (((var_chaste_interface__calcium_dynamics__APtrack3 < 0.37) && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.37) && (1 / (1.0 + 0.80000000000000004 / var_chaste_interface__calcium_dynamics__Ca_JSR) > 0.69999999999999996)) ? (50000.0 - 50000.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack) : (-500.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack)); // 1 / millisecond
        const double var_calcium_dynamics__i_leak = 0.58333333333333337 * var_chaste_interface__calcium_dynamics__Ca_NSR; // millimolar_per_second
        const double var_calcium_dynamics__i_rel = (-var_chaste_interface__calcium_dynamics__Cai + var_chaste_interface__calcium_dynamics__Ca_JSR) * ((var_chaste_interface__calcium_dynamics__Cainfluxtrack > 0.00018000000000000001) ? (60000.0 * (1.0 - var_chaste_interface__calcium_dynamics__APtrack2) * (-0.00018000000000000001 + var_chaste_interface__calcium_dynamics__Cainfluxtrack) * var_chaste_interface__calcium_dynamics__APtrack2 / (0.00062 + var_chaste_interface__calcium_dynamics__Cainfluxtrack)) : ((var_chaste_interface__calcium_dynamics__OVRLDtrack2 > 0) ? (4000.0 * (1.0 - var_chaste_interface__calcium_dynamics__OVRLDtrack2) * var_chaste_interface__calcium_dynamics__OVRLDtrack2) : (0))); // millimolar_per_second
        const double var_calcium_dynamics__i_up = 8.75 * var_chaste_interface__calcium_dynamics__Cai / (0.00092000000000000003 + var_chaste_interface__calcium_dynamics__Cai); // millimolar_per_second
        const double var_calcium_dynamics__i_tr = 5.5555555555555554 * var_chaste_interface__calcium_dynamics__Ca_NSR - 5.5555555555555554 * var_chaste_interface__calcium_dynamics__Ca_JSR; // millimolar_per_second
        const double d_dt_chaste_interface_var_calcium_dynamics__Ca_JSR = 0.001 * (-var_calcium_dynamics__i_rel + var_calcium_dynamics__i_tr) / (1.0 + 8.0 / pow((0.80000000000000004 + var_chaste_interface__calcium_dynamics__Ca_JSR), 2)); // millimolar / millisecond
        const double var_ionic_concentrations__V_myo = 8.2280000000000009e-12 * M_PI; // micro_litre
        const double var_calcium_dynamics__V_JSR = 0.0070588235294117632 * var_ionic_concentrations__V_myo; // micro_litre
        const double var_calcium_dynamics__V_NSR = 0.081176470588235281 * var_ionic_concentrations__V_myo; // micro_litre
        const double d_dt_chaste_interface_var_calcium_dynamics__Ca_NSR = 0.001 * var_calcium_dynamics__i_up - 0.001 * var_calcium_dynamics__i_leak - 0.001 * var_calcium_dynamics__V_JSR * var_calcium_dynamics__i_tr / var_calcium_dynamics__V_NSR; // millimolar / millisecond
        const double var_membrane__I_st = GetIntracellularAreaStimulus(var_chaste_interface__environment__time_converted) / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double var_calcium_background_current__E_Ca = 13.356169352749133 * log(1.8 / var_chaste_interface__calcium_dynamics__Cai); // millivolt
        const double var_fast_sodium_current__E_Na = 26.712338705498265 * log(132.0 / var_chaste_interface__ionic_concentrations__Nai); // millivolt
        const double var_L_type_Ca_channel__i_CaCa = 7.8019226357407252 * _lt_0_row[1] * (-0.61380000000000001 + var_chaste_interface__calcium_dynamics__Cai * _lt_0_row[0]) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_chaste_interface__membrane__V; // microA_per_microF
        const double var_L_type_Ca_channel__i_CaK = 0.00069711623550831479 * _lt_0_row[3] * (-3.375 + 0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[2]) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_chaste_interface__membrane__V; // microA_per_microF
        const double var_L_type_Ca_channel__i_CaNa = 0.0024381008236689767 * _lt_0_row[3] * (-99.0 + 0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[2]) * var_chaste_interface__L_type_Ca_channel_d_gate__d * var_L_type_Ca_channel_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_channel_f_gate__f * var_chaste_interface__membrane__V; // microA_per_microF
        const double var_L_type_Ca_channel__i_Ca_L = var_L_type_Ca_channel__i_CaCa + var_L_type_Ca_channel__i_CaK + var_L_type_Ca_channel__i_CaNa; // microA_per_microF
        const double var_L_type_Ca_channel_d_gate__E0_d = 10.0 + var_chaste_interface__membrane__V; // millivolt
        const double var_L_type_Ca_channel_d_gate__d_infinity = 1 / (1.0 + exp(-0.16025641025641024 * var_L_type_Ca_channel_d_gate__E0_d)); // dimensionless
        const double var_L_type_Ca_channel_d_gate__tau_d = ((fabs(var_L_type_Ca_channel_d_gate__E0_d) < 1.0000000000000001e-5) ? (0.0045787545787545781) : (0.028571428571428571 * (1.0 - exp(-0.16025641025641024 * var_L_type_Ca_channel_d_gate__E0_d)) * var_L_type_Ca_channel_d_gate__d_infinity / var_L_type_Ca_channel_d_gate__E0_d)); // second
        const double d_dt_chaste_interface_var_L_type_Ca_channel_d_gate__d = 0.001 * (1.0 - var_chaste_interface__L_type_Ca_channel_d_gate__d) * var_L_type_Ca_channel_d_gate__d_infinity / var_L_type_Ca_channel_d_gate__tau_d - 0.001 * (1.0 - var_L_type_Ca_channel_d_gate__d_infinity) * var_chaste_interface__L_type_Ca_channel_d_gate__d / var_L_type_Ca_channel_d_gate__tau_d; // 1 / millisecond
        const double var_L_type_Ca_channel_f_gate__f_infinity = _lt_0_row[9]; // dimensionless
        const double var_L_type_Ca_channel_f_gate__tau_f = _lt_0_row[10]; // second
        const double d_dt_chaste_interface_var_L_type_Ca_channel_f_gate__f = 0.001 * (1.0 - var_chaste_interface__L_type_Ca_channel_f_gate__f) * var_L_type_Ca_channel_f_gate__f_infinity / var_L_type_Ca_channel_f_gate__tau_f - 0.001 * (1.0 - var_L_type_Ca_channel_f_gate__f_infinity) * var_chaste_interface__L_type_Ca_channel_f_gate__f / var_L_type_Ca_channel_f_gate__tau_f; // 1 / millisecond
        const double var_Na_Ca_exchanger__i_NaCa = 0.00025000000000000001 * (-2299968.0 * var_chaste_interface__calcium_dynamics__Cai + 1.8 * pow(var_chaste_interface__ionic_concentrations__Nai, 3) * _lt_0_row[2]) * _lt_0_row[4] / (1.0 + 0.0001 * (2299968.0 * var_chaste_interface__calcium_dynamics__Cai + 1.8 * pow(var_chaste_interface__ionic_concentrations__Nai, 3) * _lt_0_row[2]) * _lt_0_row[4]); // microA_per_microF
        const double var_T_type_Ca_channel__i_Ca_T = 0.050000000000000003 * pow(var_chaste_interface__T_type_Ca_channel_b_gate__b, 2) * (-var_calcium_background_current__E_Ca + var_chaste_interface__membrane__V) * var_chaste_interface__T_type_Ca_channel_g_gate__g; // microA_per_microF
        const double d_dt_chaste_interface_var_T_type_Ca_channel_b_gate__b = 0.001 * _lt_0_row[12] * (-var_chaste_interface__T_type_Ca_channel_b_gate__b + _lt_0_row[11]); // 1 / millisecond
        const double d_dt_chaste_interface_var_T_type_Ca_channel_g_gate__g = 0.001 * (-var_chaste_interface__T_type_Ca_channel_g_gate__g + _lt_0_row[13]) * ((var_chaste_interface__membrane__V <= 0) ? (1 / (0.012 - 0.00087500000000000002 * var_chaste_interface__membrane__V)) : (83.333333333333329)); // 1 / millisecond
        const double var_calcium_background_current__i_Ca_b = 0.003016 * var_chaste_interface__membrane__V - 0.003016 * var_calcium_background_current__E_Ca; // microA_per_microF
        const double var_fast_sodium_current__i_Na = 16.0 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // microA_per_microF
        const double d_dt_chaste_interface_var_fast_sodium_current_h_gate__h = 0.001 * (1.0 - var_chaste_interface__fast_sodium_current_h_gate__h) * _lt_0_row[14] - 0.001 * _lt_0_row[15] * var_chaste_interface__fast_sodium_current_h_gate__h; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_j_gate__j = 0.001 * (1.0 - var_chaste_interface__fast_sodium_current_j_gate__j) * _lt_0_row[16] - 0.001 * _lt_0_row[17] * var_chaste_interface__fast_sodium_current_j_gate__j; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_m_gate__m = 0.001 * (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m) * _lt_0_row[18] - 0.080000000000000002 * var_chaste_interface__fast_sodium_current_m_gate__m * _lt_0_row[19]; // 1 / millisecond
        const double var_non_specific_calcium_activated_current__P_ns_Ca = 0; // cm_per_second
        const double var_non_specific_calcium_activated_current__i_ns_K = 3612.0012202503358 * _lt_0_row[3] * (-3.375 + 0.75 * var_chaste_interface__ionic_concentrations__Ki * _lt_0_row[2]) * var_chaste_interface__membrane__V * var_non_specific_calcium_activated_current__P_ns_Ca / (1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__calcium_dynamics__Cai, 3)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Na = 3612.0012202503358 * _lt_0_row[3] * (-99.0 + 0.75 * var_chaste_interface__ionic_concentrations__Nai * _lt_0_row[2]) * var_chaste_interface__membrane__V * var_non_specific_calcium_activated_current__P_ns_Ca / (1.0 + 1.7279999999999996e-9 / pow(var_chaste_interface__calcium_dynamics__Cai, 3)); // microA_per_microF
        const double var_non_specific_calcium_activated_current__i_ns_Ca = var_non_specific_calcium_activated_current__i_ns_K + var_non_specific_calcium_activated_current__i_ns_Na; // microA_per_microF
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current_xr_gate__xr = 0.001 * (-var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr + _lt_0_row[20]) * (_lt_0_row[21]); // 1 / millisecond
        const double var_sarcolemmal_calcium_pump__i_p_Ca = 1.1499999999999999 * var_chaste_interface__calcium_dynamics__Cai / (0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai); // microA_per_microF
        const double d_dt_chaste_interface_var_calcium_dynamics__Cai = 0.001 * (-7.4312069233559624e-13 * (-2.0 * var_Na_Ca_exchanger__i_NaCa + var_L_type_Ca_channel__i_CaCa + var_T_type_Ca_channel__i_Ca_T + var_calcium_background_current__i_Ca_b + var_sarcolemmal_calcium_pump__i_p_Ca) / var_ionic_concentrations__V_myo + (-var_calcium_dynamics__i_up + var_calcium_dynamics__i_leak) * var_calcium_dynamics__V_NSR / var_ionic_concentrations__V_myo + var_calcium_dynamics__V_JSR * var_calcium_dynamics__i_rel / var_ionic_concentrations__V_myo) / (1.0 + 0.00011900000000000002 / pow((0.0023800000000000002 + var_chaste_interface__calcium_dynamics__Cai), 2) + 3.5000000000000004e-5 / pow((0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_calcium_dynamics__Cainfluxtrack = 0.001 * ((var_chaste_interface__calcium_dynamics__APtrack > 0.20000000000000001) ? (-7.4312069233559624e-13 * (-var_Na_Ca_exchanger__i_NaCa + var_L_type_Ca_channel__i_CaCa + var_T_type_Ca_channel__i_Ca_T + var_calcium_background_current__i_Ca_b + var_sarcolemmal_calcium_pump__i_p_Ca) / var_ionic_concentrations__V_myo) : ((var_chaste_interface__calcium_dynamics__APtrack2 > 0.01) ? (0) : (-500.0 * var_chaste_interface__calcium_dynamics__Cainfluxtrack))); // 1 / millisecond
        const double d_dt_chaste_interface_var_slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = 0.001 * (-var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 + _lt_0_row[22]) * (_lt_0_row[23]); // 1 / millisecond
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = 0.433 * (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow(1 / var_chaste_interface__calcium_dynamics__Cai, 1.3999999999999999))) * (-26.712338705498265 * log(6.9195599999999997 / (0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai + var_chaste_interface__ionic_concentrations__Ki)) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 1) * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2; // microA_per_microF
        const double d_dt_chaste_interface_var_slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = 0.001 * (-var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 + _lt_0_row[22]) * (_lt_0_row[24]); // 1 / millisecond
        const double var_sodium_background_current__i_Na_b = 0.0040000000000000001 * var_chaste_interface__membrane__V - 0.0040000000000000001 * var_fast_sodium_current__E_Na; // microA_per_microF
        const double var_sodium_potassium_pump__i_NaK = 1.6875 * _lt_0_row[5] / (1.0 + 100.0 / pow(var_chaste_interface__ionic_concentrations__Nai, 2)); // microA_per_microF
        const double d_dt_chaste_interface_var_ionic_concentrations__Nai = 1.4862413846711923e-15 * (-var_L_type_Ca_channel__i_CaNa - var_fast_sodium_current__i_Na - var_non_specific_calcium_activated_current__i_ns_Na - var_sodium_background_current__i_Na_b - 3.0 * var_Na_Ca_exchanger__i_NaCa - 3.0 * var_sodium_potassium_pump__i_NaK) / var_ionic_concentrations__V_myo; // millimolar / millisecond
        const double var_time_independent_potassium_current__E_K = 26.712338705498265 * log(4.5 / var_chaste_interface__ionic_concentrations__Ki); // millivolt
        const double var_ATP_sensitive_potassium_current__i_K_ATP = 2.7574104360798206e-8 * var_chaste_interface__membrane__V - 2.7574104360798206e-8 * var_time_independent_potassium_current__E_K; // microA_per_microF
        const double var_plateau_potassium_current__i_Kp = 0.0055199999999999997 * _lt_0_row[6] * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V); // microA_per_microF
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = 0.023862446088641735 * _lt_0_row[7] * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 0) * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr; // microA_per_microF
        const double var_sodium_activated_potassium_current__i_K_Na = 0; // microA_per_microF
        const double var_time_independent_potassium_current__i_K1 = 698.34626081908675 * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V) / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K)) * (1020.0 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_time_independent_potassium_current__E_K)) + 1000.0 * (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 0.080320000000000003 * var_time_independent_potassium_current__E_K) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 0.061749999999999999 * var_time_independent_potassium_current__E_K)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_time_independent_potassium_current__E_K - 0.51429999999999998 * var_chaste_interface__membrane__V)))); // microA_per_microF
        const double var_transient_outward_current_ydv_gate__alpha_ydv = _lt_0_row[25]; // per_second
        const double var_transient_outward_current_ydv_gate__beta_ydv = _lt_0_row[26]; // per_second
        const double d_dt_chaste_interface_var_transient_outward_current_ydv_gate__ydv = 0.001 * (-var_chaste_interface__transient_outward_current_ydv_gate__ydv + var_transient_outward_current_ydv_gate__alpha_ydv / (var_transient_outward_current_ydv_gate__alpha_ydv + var_transient_outward_current_ydv_gate__beta_ydv)) * (var_transient_outward_current_ydv_gate__alpha_ydv + var_transient_outward_current_ydv_gate__beta_ydv); // 1 / millisecond
        const double var_transient_outward_current_zdv_gate__alpha_zdv = _lt_0_row[27]; // per_second
        const double var_transient_outward_current_zdv_gate__beta_zdv = _lt_0_row[28]; // per_second
        const double var_transient_outward_current__i_to = 0.5 * pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 3) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 2) * var_chaste_interface__transient_outward_current_ydv_gate__ydv * _lt_0_row[8]; // microA_per_microF
        const double d_dt_chaste_interface_var_ionic_concentrations__Ki = 1.4862413846711923e-15 * (-var_ATP_sensitive_potassium_current__i_K_ATP - var_L_type_Ca_channel__i_CaK - var_non_specific_calcium_activated_current__i_ns_K - var_plateau_potassium_current__i_Kp - var_rapid_delayed_rectifier_potassium_current__i_Kr - var_slow_delayed_rectifier_potassium_current__i_Ks - var_sodium_activated_potassium_current__i_K_Na - var_time_independent_potassium_current__i_K1 - var_transient_outward_current__i_to + 2.0 * var_sodium_potassium_pump__i_NaK) / var_ionic_concentrations__V_myo; // millimolar / millisecond
        const double d_dt_chaste_interface_var_calcium_dynamics__APtrack = 0.001 * (((var_ATP_sensitive_potassium_current__i_K_ATP + var_L_type_Ca_channel__i_Ca_L + var_Na_Ca_exchanger__i_NaCa + var_T_type_Ca_channel__i_Ca_T + var_calcium_background_current__i_Ca_b + var_fast_sodium_current__i_Na + var_membrane__I_st + var_non_specific_calcium_activated_current__i_ns_Ca + var_plateau_potassium_current__i_Kp + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_sarcolemmal_calcium_pump__i_p_Ca + var_slow_delayed_rectifier_potassium_current__i_Ks + var_sodium_activated_potassium_current__i_K_Na + var_sodium_background_current__i_Na_b + var_sodium_potassium_pump__i_NaK + var_time_independent_potassium_current__i_K1 + var_transient_outward_current__i_to) / NV_Ith_S(mParameters, 3) < -150000.0) ? (100000.0 - 100500.0 * var_chaste_interface__calcium_dynamics__APtrack) : (-500.0 * var_chaste_interface__calcium_dynamics__APtrack)); // 1 / millisecond
        const double d_dt_chaste_interface_var_transient_outward_current_zdv_gate__zdv = 0.001 * (-var_chaste_interface__transient_outward_current_zdv_gate__zdv + var_transient_outward_current_zdv_gate__alpha_zdv / (var_transient_outward_current_zdv_gate__alpha_zdv + var_transient_outward_current_zdv_gate__beta_zdv)) * (var_transient_outward_current_zdv_gate__alpha_zdv + var_transient_outward_current_zdv_gate__beta_zdv); // 1 / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_membrane__V = -0.001 * (var_ATP_sensitive_potassium_current__i_K_ATP + var_L_type_Ca_channel__i_Ca_L + var_Na_Ca_exchanger__i_NaCa + var_T_type_Ca_channel__i_Ca_T + var_calcium_background_current__i_Ca_b + var_fast_sodium_current__i_Na + var_membrane__I_st + var_non_specific_calcium_activated_current__i_ns_Ca + var_plateau_potassium_current__i_Kp + var_rapid_delayed_rectifier_potassium_current__i_Kr + var_sarcolemmal_calcium_pump__i_p_Ca + var_slow_delayed_rectifier_potassium_current__i_Ks + var_sodium_activated_potassium_current__i_K_Na + var_sodium_background_current__i_Na_b + var_sodium_potassium_pump__i_NaK + var_time_independent_potassium_current__i_K1 + var_transient_outward_current__i_to) / NV_Ith_S(mParameters, 3); // millivolt / millisecond
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_membrane__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_calcium_dynamics__Cai;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_fast_sodium_current_m_gate__m;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_fast_sodium_current_h_gate__h;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_fast_sodium_current_j_gate__j;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_L_type_Ca_channel_d_gate__d;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_L_type_Ca_channel_f_gate__f;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_T_type_Ca_channel_b_gate__b;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_T_type_Ca_channel_g_gate__g;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current_xr_gate__xr;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_slow_delayed_rectifier_potassium_current_xs1_gate__xs1;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_slow_delayed_rectifier_potassium_current_xs2_gate__xs2;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_transient_outward_current_zdv_gate__zdv;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_transient_outward_current_ydv_gate__ydv;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_calcium_dynamics__Ca_JSR;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_calcium_dynamics__Ca_NSR;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_calcium_dynamics__APtrack;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_calcium_dynamics__APtrack2;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_calcium_dynamics__APtrack3;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_calcium_dynamics__Cainfluxtrack;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_calcium_dynamics__OVRLDtrack;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_calcium_dynamics__OVRLDtrack2;
        NV_Ith_S(rDY,22) = d_dt_chaste_interface_var_calcium_dynamics__OVRLDtrack3;
        NV_Ith_S(rDY,23) = d_dt_chaste_interface_var_ionic_concentrations__Nai;
        NV_Ith_S(rDY,24) = d_dt_chaste_interface_var_ionic_concentrations__Ki;
    }

    void CellFaberRudy2000FromCellMLCvodeOpt::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time_converted, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -90.0
        double var_chaste_interface__calcium_dynamics__Cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 6e-05
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.0008
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.993771
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.995727
        double var_chaste_interface__L_type_Ca_channel_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 3.210618e-06
        double var_chaste_interface__L_type_Ca_channel_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.999837
        double var_chaste_interface__T_type_Ca_channel_b_gate__b = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.000970231
        double var_chaste_interface__T_type_Ca_channel_g_gate__g = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.994305
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.000124042
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.00445683
        double var_chaste_interface__transient_outward_current_zdv_gate__zdv = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__transient_outward_current_ydv_gate__ydv = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.5
        double var_chaste_interface__calcium_dynamics__Ca_JSR = NV_Ith_S(rY, 14);
        // Units: millimolar; Initial value: 1.8
        double var_chaste_interface__calcium_dynamics__Ca_NSR = NV_Ith_S(rY, 15);
        // Units: millimolar; Initial value: 1.8
        double var_chaste_interface__calcium_dynamics__APtrack = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__calcium_dynamics__APtrack2 = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__calcium_dynamics__APtrack3 = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__calcium_dynamics__Cainfluxtrack = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack2 = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__calcium_dynamics__OVRLDtrack3 = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ionic_concentrations__Nai = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 9.0
        double var_chaste_interface__ionic_concentrations__Ki = NV_Ith_S(rY, 24);
        // Units: millimolar; Initial value: 141.2
        
        // Lookup table indexing
        const bool _oob_0 = CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time_converted));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellFaberRudy2000FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);
const double var_x0 = exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__V);
        const double var_x1 = 1.0 + var_x0;
        const double var_x2 = 1 / var_x1;
        const double var_x3 = 0.0055199999999999997 * var_x2;
        const double var_x4 = 1 / var_chaste_interface__ionic_concentrations__Ki;
        const double var_x5 = log(4.5 * var_x4);
        const double var_x6 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 6.3708927812613361 * var_x5);
        const double var_x7 = 1.0 + var_x6;
        const double var_x8 = 1 / var_x7;
        const double var_x9 = exp(-2.4444678999999998 + 13.738155796237757 * var_x5 - 0.51429999999999998 * var_chaste_interface__membrane__V);
        const double var_x10 = 1.0 + var_x9;
        const double var_x11 = 1 / var_x10;
        const double var_x12 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 2.1455350448256207 * var_x5);
        const double var_x13 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 1.6494869150645177 * var_x5);
        const double var_x14 = var_x13 + 0.49124000000000001 * var_x12;
        const double var_x15 = var_x11 * var_x14;
        const double var_x16 = 1 / (1000.0 * var_x15 + 1020.0 * var_x8);
        const double var_x17 = var_x16 * var_x8;
        const double var_x18 = 698.34626081908675 * var_x17;
        const double var_x19 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3);
        const double var_x20 = var_x19 * var_chaste_interface__fast_sodium_current_j_gate__j;
        const double var_x21 = var_x20 * var_chaste_interface__fast_sodium_current_h_gate__h;
        const double var_x22 = 16.0 * var_x21;
        const double var_x23 = pow(var_chaste_interface__ionic_concentrations__Nai, 2);
        const double var_x24 = 1 / var_x23;
        const double var_x25 = 1 / (1.0 + 100.0 * var_x24);
        const double var_x26 = 1.6875 * var_x25;
        const double var_x27 = exp(-0.003743588350780262 * var_chaste_interface__membrane__V);
        const double var_x28 = exp(1.961367013372957);
        const double var_x29 = 0.037435883507802616 * var_chaste_interface__membrane__V;
        const double var_x30 = exp(-var_x29);
        const double var_x31 = 1.0 + 0.1245 * var_x27 + 0.036499999999999998 * var_x30 * (-0.14285714285714285 + 0.14285714285714285 * var_x28);
        const double var_x32 = (0.00046607674967214262 * var_x27 + 0.037435883507802616 * var_x30 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x28)) / pow(var_x31, 2);
        const double var_x33 = exp(0.4017857142857143 + 0.044642857142857144 * var_chaste_interface__membrane__V);
        const double var_x34 = 1.0 + var_x33;
        const double var_x35 = NV_Ith_S(mParameters, 0) / var_x34;
        const double var_x36 = var_x35 * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr;
        const double var_x37 = 0.023862446088641735 * var_x36;
        const double var_x38 = -26.712338705498265 * var_x5 + var_chaste_interface__membrane__V;
        const double var_x39 = 0.00092307692307692295 * var_x0 * var_x38 / pow(var_x1, 2);
        const double var_x40 = 2299968.0 * var_chaste_interface__calcium_dynamics__Cai;
        const double var_x41 = pow(var_chaste_interface__ionic_concentrations__Nai, 3);
        const double var_x42 = exp(var_x29);
        const double var_x43 = var_x41 * var_x42;
        const double var_x44 = 1.8 * var_x43;
        const double var_x45 = var_x44 - var_x40;
        const double var_x46 = _lt_0_row[4];
        const double var_x47 = 1.0 + 0.0001 * var_x46 * (var_x40 + var_x44);
        const double var_x48 = var_x46 / var_x47;
        const double var_x49 = var_x45 * var_x48;
        const double var_x50 = 7.9551252454080567e-6 * var_x49;
        const double var_x51 = 1 / var_chaste_interface__calcium_dynamics__Cai;
        const double var_x52 = pow(var_x51, 1.3999999999999999);
        const double var_x53 = 1.0 + 6.4818210260626455e-7 * var_x52;
        const double var_x54 = 1 / var_x53;
        const double var_x55 = 0.25979999999999998 * var_x54;
        const double var_x56 = (0.433 + var_x55) * NV_Ith_S(mParameters, 1);
        const double var_x57 = var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2;
        const double var_x58 = var_x56 * var_x57;
        const double var_x59 = _lt_0_row[8];
        const double var_x60 = var_x59 * pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 3) * NV_Ith_S(mParameters, 2);
        const double var_x61 = var_x60 * var_chaste_interface__transient_outward_current_ydv_gate__ydv;
        const double var_x62 = 0.5 * var_x61;
        const double var_x63 = var_x45 / pow(var_x47, 2);
        const double var_x64 = var_x46 * var_x63 * (0.031820500981632228 * var_x46 * (229.99680000000001 * var_chaste_interface__calcium_dynamics__Cai + 0.00018000000000000001 * var_x43) - 6.7384590314044719e-6 * var_x43 * var_x46);
        const double var_x65 = 0.00025000000000000001 * var_x64;
        const double var_x66 = var_x43 * var_x48;
        const double var_x67 = 1.684614757851118e-5 * var_x66;
        const double var_x68 = var_x6 / pow(var_x7, 2);
        const double var_x69 = 1000.0 * var_x11;
        const double var_x70 = var_x14 * var_x9 / pow(var_x10, 2);
        const double var_x71 = 0.00067122862439358594 * var_x38 * var_x8 / pow((var_x8 + 0.98039215686274506 * var_x15), 2);
        const double var_x72 = var_x71 * (243.26999999999998 * var_x68 - 514.29999999999995 * var_x70 - var_x69 * (0.061749999999999999 * var_x13 + 0.039456396800000001 * var_x12));
        const double var_x73 = var_x16 * var_x38;
        const double var_x74 = 166.55558320535218 * var_x68 * var_x73;
        const double var_x75 = -1.0 + var_x42;
        const double var_x76 = 1 / var_x75;
        const double var_x77 = 1 / (1.0 + 1666.6666666666667 * var_chaste_interface__calcium_dynamics__Cai);
        const double var_x78 = var_x77 * var_chaste_interface__L_type_Ca_channel_f_gate__f;
        const double var_x79 = var_x78 * var_chaste_interface__L_type_Ca_channel_d_gate__d;
        const double var_x80 = var_x76 * var_x79;
        const double var_x81 = 0.75 * var_x42;
        const double var_x82 = -99.0 + var_x81 * var_chaste_interface__ionic_concentrations__Nai;
        const double var_x83 = 0.0024381008236689767 * var_x82;
        const double var_x84 = var_x80 * var_x83;
        const double var_x85 = -3.375 + var_x81 * var_chaste_interface__ionic_concentrations__Ki;
        const double var_x86 = 0.00069711623550831479 * var_x85;
        const double var_x87 = var_x80 * var_x86;
        const double var_x88 = 0.0050000000000000001 * var_x38 * var_x61;
        const double var_x89 = 0.0010652877718143633 * var_x33 * var_x38 * NV_Ith_S(mParameters, 0) * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr / pow(var_x34, 2);
        const double var_x90 = var_x42 * var_x80 * var_chaste_interface__membrane__V;
        const double var_x91 = 6.8454343811362063e-5 * var_x90 * var_chaste_interface__ionic_concentrations__Nai;
        const double var_x92 = 1.9572871637915374e-5 * var_x90 * var_chaste_interface__ionic_concentrations__Ki;
        const double var_x93 = var_x79 * var_chaste_interface__membrane__V;
        const double var_x94 = var_x42 * var_x93 / pow(var_x75, 2);
        const double var_x95 = 2.6097162183887167e-5 * var_x85 * var_x94;
        const double var_x96 = 9.1272458415149417e-5 * var_x82 * var_x94;
        const double var_x97 = pow(var_chaste_interface__T_type_Ca_channel_b_gate__b, 2);
        const double var_x98 = var_x97 * var_chaste_interface__T_type_Ca_channel_g_gate__g;
        const double var_x99 = 0.050000000000000003 * var_x98;
        const double var_x100 = _lt_0_row[0];
        const double var_x101 = -1.0 + var_x100;
        const double var_x102 = 1 / var_x101;
        const double var_x103 = var_x100 * var_chaste_interface__calcium_dynamics__Cai;
        const double var_x104 = -0.61380000000000001 + var_x103;
        const double var_x105 = var_x102 * var_x104;
        const double var_x106 = 7.8019226357407252 * var_x105;
        const double var_x107 = var_x106 * var_x79;
        const double var_x108 = var_x102 * var_x93;
        const double var_x109 = var_x107 + var_x99 + 0.58414373385695628 * var_x103 * var_x108 - 0.58414373385695628 * var_x100 * var_x104 * var_x93 / pow(var_x101, 2);
        const double var_x110 = 1 / NV_Ith_S(mParameters, 3);
        const double var_x111 = 0.001 * var_x110;
        const double var_x112 = 574.99199999999996 * var_x48;
        const double var_x113 = var_x63 * pow(var_x46, 2);
        const double var_x114 = 0.057499200000000007 * var_x113;
        const double var_x115 = var_chaste_interface__L_type_Ca_channel_d_gate__d * var_chaste_interface__membrane__V;
        const double var_x116 = var_x115 * var_chaste_interface__L_type_Ca_channel_f_gate__f / pow((0.00059999999999999995 + var_chaste_interface__calcium_dynamics__Cai), 2);
        const double var_x117 = var_x116 * var_x76;
        const double var_x118 = 1.4628604942013857e-6 * var_x117 * var_x82;
        const double var_x119 = 4.1826974130498884e-7 * var_x117 * var_x85;
        const double var_x120 = 0.018329999999999999 * var_chaste_interface__ionic_concentrations__Nai + var_chaste_interface__ionic_concentrations__Ki;
        const double var_x121 = -26.712338705498265 * log(6.9195599999999997 / var_x120) + var_chaste_interface__membrane__V;
        const double var_x122 = var_x57 * NV_Ith_S(mParameters, 1);
        const double var_x123 = var_x121 * var_x122;
        const double var_x124 = 2.3575679435995052e-7 * var_x123 * var_x51 * var_x52 / pow(var_x53, 2);
        const double var_x125 = 0.00050000000000000001 + var_chaste_interface__calcium_dynamics__Cai;
        const double var_x126 = 1.1499999999999999 / var_x125;
        const double var_x127 = pow(var_x125, (-2));
        const double var_x128 = var_x126 + 0.040282206767891383 * var_x51 + 7.8019226357407252 * var_x100 * var_x108 + 0.6678084676374566 * var_x51 * var_x98 - 1.1499999999999999 * var_x127 * var_chaste_interface__calcium_dynamics__Cai - 0.0046811535814444347 * var_x105 * var_x116;
        const double var_x129 = 1 / var_chaste_interface__ionic_concentrations__Nai;
        const double var_x130 = log(132.0 * var_x129);
        const double var_x131 = -26.712338705498265 * var_x130 + var_chaste_interface__membrane__V;
        const double var_x132 = var_x131 * var_chaste_interface__fast_sodium_current_h_gate__h;
        const double var_x133 = var_x132 * pow(var_chaste_interface__fast_sodium_current_m_gate__m, 2) * var_chaste_interface__fast_sodium_current_j_gate__j;
        const double var_x134 = var_x131 * var_x20;
        const double var_x135 = 0.016 * var_x110;
        const double var_x136 = var_x132 * var_x19;
        const double var_x137 = var_x78 * var_chaste_interface__membrane__V;
        const double var_x138 = var_x137 * var_x76;
        const double var_x139 = var_x115 * var_x77;
        const double var_x140 = var_x139 * var_x76;
        const double var_x141 = log(1.8 * var_x51);
        const double var_x142 = -13.356169352749133 * var_x141 + var_chaste_interface__membrane__V;
        const double var_x143 = var_x142 * var_chaste_interface__T_type_Ca_channel_b_gate__b * var_chaste_interface__T_type_Ca_channel_g_gate__g;
        const double var_x144 = var_x142 * var_x97;
        const double var_x145 = var_x35 * var_x38;
        const double var_x146 = 0.001 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2;
        const double var_x147 = var_x110 * var_x121 * var_x56;
        const double var_x148 = 0.001 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1;
        const double var_x149 = var_x38 * var_x59 * pow(var_chaste_interface__transient_outward_current_zdv_gate__zdv, 2) * NV_Ith_S(mParameters, 2) * var_chaste_interface__transient_outward_current_ydv_gate__ydv;
        const double var_x150 = var_x38 * var_x60;
        const double var_x151 = 0.10684935482199306 * var_x129;
        const double var_x152 = 1 / var_x31;
        const double var_x153 = var_x152 / (var_x41 * pow((0.01 + var_x24), 2));
        const double var_x154 = var_x23 * var_x42;
        const double var_x155 = var_x154 * var_x48;
        const double var_x156 = 0.0013500000000000001 * var_x155;
        const double var_x157 = 427.39741928797224 * var_x129 * var_x21;
        const double var_x158 = var_x113 * var_x154;
        const double var_x159 = 1.35e-7 * var_x158;
        const double var_x160 = (0.14451785951707913 * var_chaste_interface__ionic_concentrations__Ki + 0.0026490123649480601 * var_chaste_interface__ionic_concentrations__Nai) / pow(var_x120, 2);
        const double var_x161 = var_x160 * var_x58;
        const double var_x162 = 0.0018285756177517324 * var_x90;
        const double var_x163 = 7.3656881518639831e-7 * var_x4;
        const double var_x164 = 0.14745210965435041 * var_x2 * var_x4;
        const double var_x165 = 18654.461852717679 * var_x17 * var_x4;
        const double var_x166 = 0.63742174226149029 * var_x36 * var_x4;
        const double var_x167 = var_x4 * var_x68;
        const double var_x168 = var_x71 * (6498.310636886562 * var_x167 - var_x69 * (1.053972635420138 * var_x12 * var_x4 + 1.6494869150645177 * var_x13 * var_x4) - 13738.155796237757 * var_x4 * var_x70);
        const double var_x169 = 13.356169352749133 * var_x4 * var_x61;
        const double var_x170 = 4449.089151873166 * var_x167 * var_x73;
        const double var_x171 = 0.00052283717663123607 * var_x90;
        const double var_x172 = 0.003016 + var_x109;
        const double var_x173 = 0.0023800000000000002 + var_chaste_interface__calcium_dynamics__Cai;
        const double var_x174 = 1.0 + 0.00011900000000000002 / pow(var_x173, 2) + 3.5000000000000004e-5 * var_x127;
        const double var_x175 = 1 / var_x174;
        const double var_x176 = 1 / M_PI;
        const double var_x177 = 9.0316078310111333e-5 * var_x176;
        const double var_x178 = var_x175 * var_x177;
        const double var_x179 = 0.00062 + var_chaste_interface__calcium_dynamics__Cainfluxtrack;
        const double var_x180 = 1 / var_x179;
        const double var_x181 = 1.0 - var_chaste_interface__calcium_dynamics__APtrack2;
        const double var_x182 = -0.00018000000000000001 + var_chaste_interface__calcium_dynamics__Cainfluxtrack;
        const double var_x183 = 60000.0 * var_x180 * var_x181 * var_x182;
        const double var_x184 = var_x183 * var_chaste_interface__calcium_dynamics__APtrack2;
        const double var_x185 = var_chaste_interface__calcium_dynamics__Cainfluxtrack > 0.00018000000000000001;
        const double var_x186 = 4000.0 * var_chaste_interface__calcium_dynamics__OVRLDtrack2;
        const double var_x187 = var_chaste_interface__calcium_dynamics__OVRLDtrack2 > 0;
        const double var_x188 = ((var_x185) ? (-var_x184) : ((var_x187) ? ((-4000.0 + var_x186) * var_chaste_interface__calcium_dynamics__OVRLDtrack2) : (0)));
        const double var_x189 = 0.00092000000000000003 + var_chaste_interface__calcium_dynamics__Cai;
        const double var_x190 = 1 / var_x189;
        const double var_x191 = 0.71029411764705874 * var_x190;
        const double var_x192 = var_chaste_interface__calcium_dynamics__Cai / pow(var_x189, 2);
        const double var_x193 = 0.090316078310111333 * var_x176;
        const double var_x194 = -var_chaste_interface__calcium_dynamics__Cai + var_chaste_interface__calcium_dynamics__Ca_JSR;
        const double var_x195 = ((var_x185) ? (var_x184 * var_x194) : ((var_x187) ? (var_x186 * var_x194 * (1.0 - var_chaste_interface__calcium_dynamics__OVRLDtrack2)) : (0)));
        const double var_x196 = -0.040282206767891383 * var_x141 + var_x107 * var_chaste_interface__membrane__V + var_x126 * var_chaste_interface__calcium_dynamics__Cai + var_x142 * var_x99;
        const double var_x197 = 0.00070463905573898956 * var_x105 * var_x176;
        const double var_x198 = var_x137 * var_x197;
        const double var_x199 = var_x139 * var_x197;
        const double var_x200 = 9.0316078310111336e-6 * var_x143 * var_x176;
        const double var_x201 = 4.5158039155055668e-6 * var_x144 * var_x176;
        const double var_x202 = 4000.0 - var_x186;
        const double var_x203 = ((var_x185) ? (var_x184) : ((var_x187) ? (var_x202 * var_chaste_interface__calcium_dynamics__OVRLDtrack2) : (0)));
        const double var_x204 = 7.0588235294117632e-6 * var_x175;
        const double var_x205 = 60000.0 * var_x180 * var_x194 * var_chaste_interface__calcium_dynamics__APtrack2;
        const double var_x206 = ((var_x185) ? (var_x183 * var_x194 - var_x182 * var_x205) : (0));
        const double var_x207 = ((var_x185) ? (var_x181 * var_x205 - 60000.0 * var_x181 * var_x182 * var_x194 * var_chaste_interface__calcium_dynamics__APtrack2 / pow(var_x179, 2)) : (0));
        const double var_x208 = ((var_x185) ? (0) : ((var_x187) ? (var_x194 * var_x202 + (4000.0 * var_chaste_interface__calcium_dynamics__Cai - 4000.0 * var_chaste_interface__calcium_dynamics__Ca_JSR) * var_chaste_interface__calcium_dynamics__OVRLDtrack2) : (0)));
        const double var_x209 = _lt_0_row[19];
        const double var_x210 = 0.0072727272727272727 * var_x209 * var_chaste_interface__fast_sodium_current_m_gate__m;
        const double var_x211 = 1.0 - var_chaste_interface__fast_sodium_current_m_gate__m;
        const double var_x212 = -0.10000000000000001 * var_chaste_interface__membrane__V;
        const double var_x213 = exp(-4.7130000000000001 + var_x212);
        const double var_x214 = 1.0 - var_x213;
        const double var_x215 = 0.32000000000000001 / var_x214;
        const double var_x216 = 47.130000000000003 + var_chaste_interface__membrane__V;
        const double var_x217 = fabs(var_x216) >= 1.0000000000000001e-5;
        const double var_x218 = -0.080000000000000002 * var_x209;
        const double var_x219 = exp(0.34999999999999998 * var_chaste_interface__membrane__V);
        const double var_x220 = exp(0.079000000000000001 * var_chaste_interface__membrane__V);
        const double var_x221 = exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__membrane__V);
        const double var_x222 = var_chaste_interface__membrane__V < -40.0;
        const double var_x223 = exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__membrane__V);
        const double var_x224 = 1.0 + var_x223;
        const double var_x225 = 1.0 - var_chaste_interface__fast_sodium_current_j_gate__j;
        const double var_x226 = exp(0.24440000000000001 * var_chaste_interface__membrane__V);
        const double var_x227 = exp(-0.043909999999999998 * var_chaste_interface__membrane__V);
        const double var_x228 = -127140.0 * var_x226 - 3.4740000000000003e-5 * var_x227;
        const double var_x229 = var_x225 * var_x228;
        const double var_x230 = exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V);
        const double var_x231 = 1.0 + var_x230;
        const double var_x232 = 1 / var_x231;
        const double var_x233 = exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__membrane__V);
        const double var_x234 = 1.0 + var_x233;
        const double var_x235 = exp(-0.01052 * var_chaste_interface__membrane__V);
        const double var_x236 = var_x235 / var_x234;
        const double var_x237 = 37.780000000000001 + var_chaste_interface__membrane__V;
        const double var_x238 = var_x232 * var_x237;
        const double var_x239 = exp(-3.2000000000000002 + var_x212);
        const double var_x240 = 1.0 + var_x239;
        const double var_x241 = exp(-2.5349999999999999e-7 * var_chaste_interface__membrane__V);
        const double var_x242 = var_x241 / var_x240;
        const double var_x243 = exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__membrane__V);
        const double var_x244 = 1.0 + var_x243;
        const double var_x245 = 0.001 / var_x244;
        const double var_x246 = -0.001 + var_x245;
        const double var_x247 = 10.0 + var_chaste_interface__membrane__V;
        const double var_x248 = fabs(var_x247) < 1.0000000000000001e-5;
        const double var_x249 = 1.0 - var_x243;
        const double var_x250 = 1 / var_x249;
        const double var_x251 = 35.0 * var_x244 * var_x250;
        const double var_x252 = 5.6089743589743595 * var_x243 * var_x247;
        const double var_x253 = ((var_x248) ? (0) : (var_x251 - var_x250 * var_x252 - var_x244 * var_x252 / pow(var_x249, 2)));
        const double var_x254 = 1.0 - var_chaste_interface__L_type_Ca_channel_d_gate__d;
        const double var_x255 = ((var_x248) ? (218.40000000000003) : (var_x247 * var_x251));
        const double var_x256 = 0.00016025641025641026 * var_x243 * var_x255 / pow(var_x244, 2);
        const double var_x257 = exp(-0.113569 * pow((1 + 0.10000000000000001 * var_chaste_interface__membrane__V), 2));
        const double var_x258 = 19.699999999999999 * var_x257;
        const double var_x259 = 0.001 - 0.001 * var_chaste_interface__L_type_Ca_channel_f_gate__f;
        const double var_x260 = exp(2.5 - 0.050000000000000003 * var_chaste_interface__membrane__V);
        const double var_x261 = 1.0 + var_x260;
        const double var_x262 = 0.029999999999999999 * var_x260 / pow(var_x261, 2);
        const double var_x263 = exp(4.0 + 0.125 * var_chaste_interface__membrane__V);
        const double var_x264 = 1.0 + var_x263;
        const double var_x265 = 0.125 * var_x263 / pow(var_x264, 2);
        const double var_x266 = 0.019699999999999999 * var_x257;
        const double var_x267 = -0.02 - var_x266;
        const double var_x268 = 1 / var_x264;
        const double var_x269 = 0.59999999999999998 / var_x261;
        const double var_x270 = var_x268 + var_x269;
        const double var_x271 = -0.022713800000000003 - 0.0022713799999999999 * var_chaste_interface__membrane__V;
        const double var_x272 = 1.0 - var_x268 - var_x269;
        const double var_x273 = exp(-1.2962962962962963 - 0.092592592592592587 * var_chaste_interface__membrane__V);
        const double var_x274 = 1.0 + var_x273;
        const double var_x275 = exp(5.5555555555555554 + 0.22222222222222221 * var_chaste_interface__membrane__V);
        const double var_x276 = 1.0 + var_x275;
        const double var_x277 = 1 / var_x276;
        const double var_x278 = 1 / (0.0037000000000000002 + 0.0061000000000000004 * var_x277);
        const double var_x279 = exp(10.714285714285715 + 0.17857142857142858 * var_chaste_interface__membrane__V);
        const double var_x280 = 1.0 + var_x279;
        const double var_x281 = 1 / (0.012 - 0.00087500000000000002 * var_chaste_interface__membrane__V);
        const double var_x282 = var_x279 / pow(var_x280, 2);
        const double var_x283 = var_chaste_interface__membrane__V <= 0;
        const double var_x284 = exp(-2.8666666666666667 - 0.13333333333333333 * var_chaste_interface__membrane__V);
        const double var_x285 = 1.0 + var_x284;
        const double var_x286 = exp(5.6404999999999994 + 0.14499999999999999 * var_chaste_interface__membrane__V);
        const double var_x287 = -1.0 + var_x286;
        const double var_x288 = 1 / var_x287;
        const double var_x289 = 0.60999999999999999 * var_x288;
        const double var_x290 = exp(-1.7465999999999999 - 0.123 * var_chaste_interface__membrane__V);
        const double var_x291 = 1.0 - var_x290;
        const double var_x292 = 1 / var_x291;
        const double var_x293 = 1.3799999999999999 * var_x292;
        const double var_x294 = 14.199999999999999 + var_chaste_interface__membrane__V;
        const double var_x295 = 38.899999999999999 + var_chaste_interface__membrane__V;
        const double var_x296 = exp(0.089820359281437126 - 0.059880239520958084 * var_chaste_interface__membrane__V);
        const double var_x297 = 1.0 + var_x296;
        const double var_x298 = 0.001 / var_x297;
        const double var_x299 = exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__membrane__V);
        const double var_x300 = -1.0 + var_x299;
        const double var_x301 = 1 / var_x300;
        const double var_x302 = 0.13100000000000001 * var_x301;
        const double var_x303 = exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__membrane__V);
        const double var_x304 = 1.0 - var_x303;
        const double var_x305 = 1 / var_x304;
        const double var_x306 = 0.071899999999999992 * var_x305;
        const double var_x307 = 30.0 + var_chaste_interface__membrane__V;
        const double var_x308 = var_x299 * var_x307 / pow(var_x300, 2);
        const double var_x309 = var_x303 * var_x307 / pow(var_x304, 2);
        const double var_x310 = 5.9880239520958083e-5 * var_x296 / pow(var_x297, 2);
        const double var_x311 = var_x301 * var_x307;
        const double var_x312 = var_x305 * var_x307;
        const double var_x313 = 0.032750000000000001 * var_x301;
        const double var_x314 = 0.017974999999999998 * var_x305;
        const double var_x315 = 0.040000000000000001 * var_chaste_interface__membrane__V;
        const double var_x316 = exp(-1.6000000000000001 + var_x315);
        const double var_x317 = 1.0 + var_x316;
        const double var_x318 = var_x316 / var_x317;
        const double var_x319 = exp(-3.6000000000000001 - var_x315);
        const double var_x320 = 1.0 + var_x319;
        const double var_x321 = var_x319 / var_x320;
        const double var_x322 = 10000.0 * var_x318 + 10000.0 * var_x321;
        const double var_x323 = 1 / var_x322;
        const double var_x324 = 10.0 * var_x318;
        const double var_x325 = 400.0 * var_x318;
        const double var_x326 = 400.0 * pow(var_x319, 2) / pow(var_x320, 2);
        const double var_x327 = pow(var_x316, 2) / pow(var_x317, 2);
        const double var_x328 = 400.0 * var_x327;
        const double var_x329 = 400.0 * var_x321;
        const double var_x330 = 0.40000000000000002 * var_x323;
        const double var_x331 = 0.20000000000000001 * var_chaste_interface__membrane__V;
        const double var_x332 = exp(12.0 + var_x331);
        const double var_x333 = 1.0 + var_x332;
        const double var_x334 = 1 / var_x333;
        const double var_x335 = exp(5.0 + var_x331);
        const double var_x336 = 1.0 + var_x335;
        const double var_x337 = var_x335 / var_x336;
        const double var_x338 = 15.0 * var_x334 + 100.0 * var_x337;
        const double var_x339 = var_x332 / pow(var_x333, 2);
        const double var_x340 = 3.0 * var_x339;
        const double var_x341 = 20.0 * pow(var_x335, 2) / pow(var_x336, 2);
        const double var_x342 = 20.0 * var_x337;
        const double var_x343 = 1 / var_x338;
        const double var_x344 = 0.014999999999999999 * var_x334;
        const double var_x345 = 0.80000000000000004 + var_chaste_interface__calcium_dynamics__Ca_JSR;
        const double var_x346 = pow(var_x345, (-2));
        const double var_x347 = 1 / (1.0 + 8.0 * var_x346);
        const double var_x348 = 0.001 * var_x347;
        const double var_x349 = (var_chaste_interface__calcium_dynamics__APtrack > 0.17999999999999999) && (var_chaste_interface__calcium_dynamics__APtrack < 0.20000000000000001);
        const double var_x350 = var_chaste_interface__calcium_dynamics__APtrack > 0.20000000000000001;
        const double var_x351 = var_chaste_interface__calcium_dynamics__OVRLDtrack > 0.97999999999999998;
        const double var_x352 = var_x25 * var_x32;
        const double var_x353 = 0.00018063215662022267 * var_x176;
        const double var_x354 = 0.0028901145059235626 * var_x176;
        const double var_x355 = var_x138 * var_x176;
        const double var_x356 = 4.4039940983686847e-7 * var_x82;
        const double var_x357 = var_x140 * var_x176;
        const double var_x358 = -0.433 - var_x55;
        const double var_x359 = var_x122 * var_x358;
        const double var_x360 = 1.2592160903483795e-7 * var_x85;
        const double var_x361 = var_x121 * var_x353 * var_x358 * NV_Ith_S(mParameters, 1);
        const double var_x362 = var_x160 * var_x359;
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x111 * (0.0070160275741043606 + var_x109 + var_x18 + var_x22 + var_x3 + var_x37 + var_x39 + var_x58 + var_x62 + var_x65 + var_x67 + var_x72 + var_x84 + var_x87 + var_x88 + var_x91 + var_x92 - var_x50 - var_x74 - var_x89 - var_x95 - var_x96 + var_x26 * var_x32));
        IJth(rJacobian, 1, 0) = -var_x178 * (var_x172 + 1.5910250490816113e-5 * var_x49 - 0.00050000000000000001 * var_x64 - 3.369229515702236e-5 * var_x66);
        IJth(rJacobian, 2, 0) = ((var_x217) ? (var_x210 + var_x211 * var_x215 - 0.032000000000000001 * var_x211 * var_x213 * var_x216 / pow(var_x214, 2)) : (var_x210));
        IJth(rJacobian, 3, 0) = ((var_x222) ? ((-108500.0 * var_x219 - 0.28123999999999999 * var_x220) * var_chaste_interface__fast_sodium_current_h_gate__h - 0.14705882352941177 * var_x221 * (0.13500000000000001 - 0.13500000000000001 * var_chaste_interface__fast_sodium_current_h_gate__h)) : (-0.693000693000693 * var_x223 * var_chaste_interface__fast_sodium_current_h_gate__h / pow(var_x224, 2)));
        IJth(rJacobian, 4, 0) = ((var_x222) ? (var_x229 * var_x232 + 0.001275024 * var_x236 * var_chaste_interface__fast_sodium_current_j_gate__j + var_x225 * var_x238 * (1.5254334000000001e-6 * var_x227 - 31073.016 * var_x226) - 0.311 * var_x229 * var_x230 * var_x237 / pow(var_x231, 2) - 0.016701360000000002 * var_x233 * var_x235 * var_chaste_interface__fast_sodium_current_j_gate__j / pow(var_x234, 2)) : (7.6049999999999996e-8 * var_x242 * var_chaste_interface__fast_sodium_current_j_gate__j - 0.030000000000000002 * var_x239 * var_x241 * var_chaste_interface__fast_sodium_current_j_gate__j / pow(var_x240, 2)));
        IJth(rJacobian, 5, 0) = var_x254 * var_x256 + var_x256 * var_chaste_interface__L_type_Ca_channel_d_gate__d + var_x245 * var_x253 * var_x254 + var_x246 * var_x253 * var_chaste_interface__L_type_Ca_channel_d_gate__d;
        IJth(rJacobian, 6, 0) = var_x259 * (20.0 + var_x258) * (var_x262 - var_x265) + var_x267 * (var_x265 - var_x262) * var_chaste_interface__L_type_Ca_channel_f_gate__f + var_x258 * var_x259 * var_x270 * var_x271 - var_x266 * var_x271 * var_x272 * var_chaste_interface__L_type_Ca_channel_f_gate__f;
        IJth(rJacobian, 7, 0) = 9.2592592592592588e-5 * var_x273 * var_x278 / pow(var_x274, 2) + 0.036429872495446262 * var_x275 * (-var_chaste_interface__T_type_Ca_channel_b_gate__b + 1 / var_x274) / (pow(var_x276, 2) * pow((0.60655737704918034 + var_x277), 2));
        IJth(rJacobian, 8, 0) = ((var_x283) ? (0.006076388888888889 * (-var_chaste_interface__T_type_Ca_channel_g_gate__g + 1 / var_x280) / pow((1 - 0.072916666666666671 * var_chaste_interface__membrane__V), 2) - 0.00017857142857142857 * var_x281 * var_x282) : (-0.014880952380952382 * var_x282));
        IJth(rJacobian, 9, 0) = (0.001 / var_x285 - 0.001 * var_chaste_interface__rapid_delayed_rectifier_potassium_current_xr_gate__xr) * (var_x289 + var_x293 - 0.16973999999999997 * var_x290 * var_x294 / pow(var_x291, 2) - 0.088449999999999987 * var_x286 * var_x295 / pow(var_x287, 2)) + 0.00013333333333333334 * var_x284 * (var_x289 * var_x295 + var_x293 * var_x294) / pow(var_x285, 2);
        IJth(rJacobian, 10, 0) = var_x310 * (var_x302 * var_x307 + var_x306 * var_x307) + (var_x298 - var_x148) * (var_x302 + var_x306 - 0.0089997000000000011 * var_x308 - 0.0106412 * var_x309);
        IJth(rJacobian, 11, 0) = var_x310 * (var_x307 * var_x313 + var_x307 * var_x314) + (var_x298 - var_x146) * (var_x313 + var_x314 - 0.0022499250000000003 * var_x308 - 0.0026603 * var_x309);
        IJth(rJacobian, 12, 0) = var_x322 * (var_x318 * var_x330 - var_x327 * var_x330 + 9.9999999999999995e-8 * var_x318 * (var_x328 + var_x329 - var_x325 - var_x326) / pow((var_x318 + var_x321), 2)) + (-0.001 * var_chaste_interface__transient_outward_current_zdv_gate__zdv + var_x323 * var_x324) * (var_x325 + var_x326 - var_x328 - var_x329);
        IJth(rJacobian, 13, 0) = var_x338 * (-0.0030000000000000001 * var_x339 * var_x343 + 1.5e-6 * var_x334 * (var_x340 + var_x341 - var_x342) / pow((var_x337 + 0.14999999999999999 * var_x334), 2)) + (-0.001 * var_chaste_interface__transient_outward_current_ydv_gate__ydv + var_x343 * var_x344) * (var_x342 - var_x340 - var_x341);
        IJth(rJacobian, 19, 0) = ((var_x350) ? (-var_x177 * (var_x172 + var_x50 - var_x65 - var_x67)) : (0));
        IJth(rJacobian, 23, 0) = var_x353 * (-0.0040000000000000001 + var_x96 - var_x22 - var_x84 - var_x91 + 2.386537573622417e-5 * var_x49 - 5.0625 * var_x352 - 0.00075000000000000002 * var_x64 - 5.0538442735533534e-5 * var_x66);
        IJth(rJacobian, 24, 0) = var_x353 * (-2.7574104360798206e-8 + var_x359 + var_x74 + var_x89 + var_x95 - var_x18 - var_x3 - var_x37 - var_x39 - var_x62 - var_x72 - var_x87 - var_x88 - var_x92 + 3.375 * var_x352);
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x111 * (var_x124 + var_x128 - var_x112 - var_x114 - var_x118 - var_x119));
        IJth(rJacobian, 1, 1) = 0.001 * var_x175 * (-var_x191 + 0.71029411764705874 * var_x192 + 0.0070588235294117632 * var_x188 - var_x193 * (var_x128 + 1149.9839999999999 * var_x48 + 0.11499840000000001 * var_x113)) + 0.001 * (0.00023800000000000004 / pow(var_x173, 3) + 7.0000000000000007e-5 / pow(var_x125, 3)) * (0.047352941176470584 * var_chaste_interface__calcium_dynamics__Ca_NSR + 0.0070588235294117632 * var_x195 - var_x191 * var_chaste_interface__calcium_dynamics__Cai - var_x193 * (var_x196 + 0.003016 * var_chaste_interface__membrane__V - 0.00050000000000000001 * var_x49)) / pow(var_x174, 2);
        IJth(rJacobian, 14, 1) = -var_x188 * var_x348;
        IJth(rJacobian, 15, 1) = 0.0087500000000000008 * var_x190 - 0.0087500000000000008 * var_x192;
        IJth(rJacobian, 19, 1) = ((var_x350) ? (-var_x177 * (var_x112 + var_x114 + var_x128)) : (0));
        IJth(rJacobian, 23, 1) = var_x353 * (var_x118 + 0.1724976 * var_x113 + 1724.9760000000001 * var_x48);
        IJth(rJacobian, 24, 1) = var_x353 * (var_x119 - var_x124);
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (-0.048000000000000001 * var_x110 * var_x133);
        IJth(rJacobian, 2, 2) = ((var_x217) ? (var_x218 - var_x215 * var_x216) : (-3.2000000000000002 + var_x218));
        IJth(rJacobian, 23, 2) = -0.0086703435177706879 * var_x133 * var_x176;
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x134 * var_x135);
        IJth(rJacobian, 3, 3) = ((var_x222) ? (-310000.0 * var_x219 - 0.13500000000000001 * var_x221 - 3.5600000000000001 * var_x220) : (-7.6923076923076916 / var_x224));
        IJth(rJacobian, 23, 3) = -var_x134 * var_x354;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x135 * var_x136);
        IJth(rJacobian, 4, 4) = ((var_x222) ? (-0.1212 * var_x236 - var_x228 * var_x238) : (-0.29999999999999999 * var_x242));
        IJth(rJacobian, 23, 4) = -var_x136 * var_x354;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x111 * (var_x106 * var_x137 + var_x138 * var_x83 + var_x138 * var_x86));
        IJth(rJacobian, 1, 5) = -var_x175 * var_x198;
        IJth(rJacobian, 5, 5) = var_x246 * var_x255 - var_x245 * var_x255;
        IJth(rJacobian, 19, 5) = ((var_x350) ? (-var_x198) : (0));
        IJth(rJacobian, 23, 5) = -var_x355 * var_x356;
        IJth(rJacobian, 24, 5) = -var_x355 * var_x360;
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x111 * (var_x106 * var_x139 + var_x140 * var_x83 + var_x140 * var_x86));
        IJth(rJacobian, 1, 6) = -var_x175 * var_x199;
        IJth(rJacobian, 6, 6) = var_x267 * var_x270 + var_x267 * var_x272;
        IJth(rJacobian, 19, 6) = ((var_x350) ? (-var_x199) : (0));
        IJth(rJacobian, 23, 6) = -var_x356 * var_x357;
        IJth(rJacobian, 24, 6) = -var_x357 * var_x360;
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (-0.0001 * var_x110 * var_x143);
        IJth(rJacobian, 1, 7) = -var_x175 * var_x200;
        IJth(rJacobian, 7, 7) = -0.001 * var_x278;
        IJth(rJacobian, 19, 7) = ((var_x350) ? (-var_x200) : (0));
        IJth(rJacobian, 0, 8) = mSetVoltageDerivativeToZero ? 0.0 : (-5.0000000000000002e-5 * var_x110 * var_x144);
        IJth(rJacobian, 1, 8) = -var_x175 * var_x201;
        IJth(rJacobian, 8, 8) = ((var_x283) ? (-0.001 * var_x281) : (-0.083333333333333329));
        IJth(rJacobian, 19, 8) = ((var_x350) ? (-var_x201) : (0));
        IJth(rJacobian, 0, 9) = mSetVoltageDerivativeToZero ? 0.0 : (-2.3862446088641737e-5 * var_x110 * var_x145);
        IJth(rJacobian, 9, 9) = -0.0013799999999999999 * var_x292 * var_x294 - 0.00060999999999999997 * var_x288 * var_x295;
        IJth(rJacobian, 24, 9) = -4.3103250992251538e-6 * var_x145 * var_x176;
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x146 * var_x147);
        IJth(rJacobian, 10, 10) = -0.00013100000000000001 * var_x311 - 7.1899999999999999e-5 * var_x312;
        IJth(rJacobian, 24, 10) = var_x361 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs2_gate__xs2;
        IJth(rJacobian, 0, 11) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x147 * var_x148);
        IJth(rJacobian, 11, 11) = -3.2750000000000003e-5 * var_x311 - 1.7975e-5 * var_x312;
        IJth(rJacobian, 24, 11) = var_x361 * var_chaste_interface__slow_delayed_rectifier_potassium_current_xs1_gate__xs1;
        IJth(rJacobian, 0, 12) = mSetVoltageDerivativeToZero ? 0.0 : (-0.0015 * var_x110 * var_x149);
        IJth(rJacobian, 12, 12) = -var_x324 - 10.0 * var_x321;
        IJth(rJacobian, 24, 12) = -0.000270948234930334 * var_x149 * var_x176;
        IJth(rJacobian, 0, 13) = mSetVoltageDerivativeToZero ? 0.0 : (-0.00050000000000000001 * var_x110 * var_x150);
        IJth(rJacobian, 13, 13) = -var_x344 - 0.10000000000000001 * var_x337;
        IJth(rJacobian, 24, 13) = -9.0316078310111333e-5 * var_x150 * var_x176;
        IJth(rJacobian, 1, 14) = var_x203 * var_x204;
        IJth(rJacobian, 14, 14) = var_x348 * (-5.5555555555555554 - var_x203) + 0.00025000000000000001 * (-var_x195 + 5.5555555555555554 * var_chaste_interface__calcium_dynamics__Ca_NSR - 5.5555555555555554 * var_chaste_interface__calcium_dynamics__Ca_JSR) / (pow(var_x345, 3) * pow((0.125 + var_x346), 2));
        IJth(rJacobian, 15, 14) = 0.00048309178743961351;
        IJth(rJacobian, 1, 15) = 4.7352941176470584e-5 * var_x175;
        IJth(rJacobian, 14, 15) = 0.0055555555555555558 * var_x347;
        IJth(rJacobian, 15, 15) = -0.001066425120772947;
        IJth(rJacobian, 16, 16) = ((var_x110 * (var_x196 + 0.00025000000000000001 * var_x49 + 0.0070160275741043606 * var_chaste_interface__membrane__V - 0.10684935482199306 * var_x130 - 7.3656881518639831e-7 * var_x5 + var_x131 * var_x22 + var_x152 * var_x26 + var_x18 * var_x38 + var_x3 * var_x38 + var_x37 * var_x38 + var_x38 * var_x62 + var_x84 * var_chaste_interface__membrane__V + var_x87 * var_chaste_interface__membrane__V + GetIntracellularAreaStimulus(var_chaste_interface__environment__time_converted) / HeartConfig::Instance()->GetCapacitance() + 0.433 * var_x123 * (1.0 + 0.59999999999999998 * var_x54)) < -150000.0) ? (-100.5) : (-0.5));
        IJth(rJacobian, 1, 17) = var_x204 * var_x206;
        IJth(rJacobian, 14, 17) = -var_x206 * var_x348;
        IJth(rJacobian, 17, 17) = ((var_x349) ? (-100.5) : (-0.5));
        IJth(rJacobian, 18, 18) = ((var_x349) ? (-100.5) : (-0.01));
        IJth(rJacobian, 1, 19) = var_x204 * var_x207;
        IJth(rJacobian, 14, 19) = -var_x207 * var_x348;
        IJth(rJacobian, 19, 19) = (((var_x350) || (var_chaste_interface__calcium_dynamics__APtrack2 > 0.01)) ? (0) : (-0.5));
        IJth(rJacobian, 20, 20) = (((var_chaste_interface__calcium_dynamics__APtrack3 < 0.37) && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.37) && (1 / (1.0 + 0.80000000000000004 / var_chaste_interface__calcium_dynamics__Ca_JSR) > 0.69999999999999996)) ? (-50.0) : (-0.5));
        IJth(rJacobian, 1, 21) = var_x204 * var_x208;
        IJth(rJacobian, 14, 21) = -var_x208 * var_x348;
        IJth(rJacobian, 21, 21) = (((var_x351) && (var_chaste_interface__calcium_dynamics__OVRLDtrack2 < 0.97999999999999998)) ? (-50.0) : (-0.5));
        IJth(rJacobian, 22, 22) = (((var_x351) && (var_chaste_interface__calcium_dynamics__OVRLDtrack3 < 0.97999999999999998)) ? (-50.0) : (-0.01));
        IJth(rJacobian, 0, 23) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x111 * (var_x151 + var_x156 + var_x157 + var_x162 - var_x159 + 3.3880737654706117 * var_x161 + 0.033750000000000002 * var_x153));
        IJth(rJacobian, 1, 23) = -var_x178 * (2.7000000000000001e-7 * var_x158 - 0.0027000000000000001 * var_x155);
        IJth(rJacobian, 19, 23) = ((var_x350) ? (-var_x177 * (var_x159 - var_x156)) : (0));
        IJth(rJacobian, 23, 23) = var_x353 * (-var_x151 - var_x157 - var_x162 + 4.0500000000000004e-7 * var_x158 - 0.0040499999999999998 * var_x155 - 0.10125000000000001 * var_x153);
        IJth(rJacobian, 24, 23) = var_x353 * (3.3880737654706117 * var_x362 + 0.067500000000000004 * var_x153);
        IJth(rJacobian, 0, 24) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x111 * (var_x163 + var_x164 + var_x165 + var_x166 + var_x168 + var_x169 + var_x171 - var_x170 + 184.83763041301756 * var_x161));
        IJth(rJacobian, 24, 24) = var_x353 * (var_x170 - var_x163 - var_x164 - var_x165 - var_x166 - var_x168 - var_x169 - var_x171 + 184.83763041301756 * var_x362);
    }

    N_Vector CellFaberRudy2000FromCellMLCvodeOpt::ComputeDerivedQuantities(double var_chaste_interface__environment__time_converted, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        

        // Mathematics
        const double var_membrane__I_st_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time_converted); // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(2);
        NV_Ith_S(dqs, 0) = var_chaste_interface__environment__time_converted;
        NV_Ith_S(dqs, 1) = var_membrane__I_st_converted;
        return dqs;
    }

template<>
void OdeSystemInformation<CellFaberRudy2000FromCellMLCvodeOpt>::Initialise(void)
{
    this->mSystemName = "LR_Dynamic_model_2000";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-90.0);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(6e-05);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0008);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993771);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("fast_sodium_current_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.995727);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("L_type_Ca_channel_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.210618e-06);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("L_type_Ca_channel_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999837);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("T_type_Ca_channel_b_gate__b");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000970231);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("T_type_Ca_channel_g_gate__g");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.994305);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("rapid_delayed_rectifier_potassium_current_xr_gate__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000124042);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("slow_delayed_rectifier_potassium_current_xs1_gate__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00445683);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("slow_delayed_rectifier_potassium_current_xs2_gate__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00445683);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("transient_outward_current_zdv_gate__zdv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.5);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("transient_outward_current_ydv_gate__ydv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.5);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("calcium_dynamics__Ca_JSR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.8);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("calcium_dynamics__Ca_NSR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.8);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("calcium_dynamics__APtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("calcium_dynamics__APtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("calcium_dynamics__APtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("calcium_dynamics__Cainfluxtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("calcium_dynamics__OVRLDtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("calcium_dynamics__OVRLDtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 22):
    this->mVariableNames.push_back("calcium_dynamics__OVRLDtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 23):
    this->mVariableNames.push_back("ionic_concentrations__Nai");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(9.0);

    // NV_Ith_S(rY, 24):
    this->mVariableNames.push_back("ionic_concentrations__Ki");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(141.2);

    // mParameters[0]:
    this->mParameterNames.push_back("ScaleFactorGkr");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[1]:
    this->mParameterNames.push_back("ScaleFactorGks");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[2]:
    this->mParameterNames.push_back("ScaleFactorIto");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[3]:
    this->mParameterNames.push_back("membrane_capacitance");
    this->mParameterUnits.push_back("microF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("environment__time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellFaberRudy2000FromCellMLCvodeOpt)

#endif // CHASTE_CVODE
