#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: bernus_wilders_zemlin_verschelde_panfilov_2002_version01
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: NumericCvodeOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "bernus_wilders_zemlin_verschelde_panfilov_2002.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<22; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables(const Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables&);
    Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables& operator= (const Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables&);
    Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 22;
        mTableMins[0] = -250.0001;
        mTableMaxs[0] = 549.9999;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][22];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.14710000000000001 + 0.63503954329583223 * exp(-0.89850709360569092 * pow((-1 + 0.044722719141323794 * var_chaste_interface__membrane__V), 2)) / sqrt(M_PI) - 0.25101580310038191 * exp(-0.088183122039937209 * pow((-1 + 0.15948963317384371 * var_chaste_interface__membrane__V), 2)) / sqrt(M_PI);

                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.89850709360569092 * pow((-1 + 0.044722719141323794 * var_chaste_interface__membrane__V), 2));

                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.012999999999999999 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.024 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + 0.10000000000000001 * exp(-0.024 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.036999999999999998 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.1245 * exp(-0.0037000000000000002 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(3.9880601600000003 - 0.094299999999999995 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = (0.51490000000000002 * exp(0.67236288 - 0.13439999999999999 * var_chaste_interface__membrane__V) + 5.1860000000000002e-5 * var_chaste_interface__membrane__V) / (1.0 + exp(6.9907280000000006e-6 - 0.1348 * var_chaste_interface__membrane__V)) + 0.52659999999999996 * exp(0.70203392000000009 - 0.0166 * var_chaste_interface__membrane__V) / (1.0 + exp(3.9880601600000003 - 0.094299999999999995 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.70203392000000009 - 0.0166 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.00057499999999999999 + (0.010999999999999999 + 0.069000000000000006 * exp(-108.07499999999999 - 11.0 * var_chaste_interface__membrane__V)) / (1.0 + exp(-2.7313499999999999 - 0.27800000000000002 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-1.0056535947712419 + 0.16339869281045752 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.98799999999999999 / (1.0 + exp(-0.86099999999999999 - 0.062 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 222.0 + 240.0 * exp(-4.1682692307692308 * pow((1 + 0.039215686274509803 * var_chaste_interface__membrane__V), 2)) + 182.0 * tanh(0.154 + 0.011599999999999999 * var_chaste_interface__membrane__V) - 40.0 * tanh(160.0 + 2.0 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.090909090909090912 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = -0.5 * tanh(7.7400000000000002 + 0.12 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.25 + 2.2400000000000002 * (1.0 - tanh(7.7400000000000002 + 0.12 * var_chaste_interface__membrane__V)) / (1.0 - tanh(6.4680000000000009 + 0.070000000000000007 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-5.9326369200000002 - 0.17319999999999999 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 5.6119999999999998e-5 * var_chaste_interface__membrane__V + 0.072099999999999997 * exp(-5.9257863000000004 - 0.17299999999999999 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-5.4573693999999993 - 0.16039999999999999 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.0001215 * var_chaste_interface__membrane__V + 0.076700000000000004 * exp(-5.6479010000000002e-8 - 1.6600000000000001e-9 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][21] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[22];

    // Lookup tables
    double (*_lookup_table_0)[22];
    int _lookup_table_0_num_misshit_piecewise[22] = {0};

};

std::shared_ptr<Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables> Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__stimulus_protocol__IstimAmplitude_converted = 0.5 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__stimulus_protocol__IstimPeriod = 1000.0; // millisecond
        const double var_chaste_interface__stimulus_protocol__IstimPulseDuration = 1.0; // millisecond
        const double var_chaste_interface__stimulus_protocol__IstimStart = 10.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__stimulus_protocol__IstimAmplitude_converted),
                var_chaste_interface__stimulus_protocol__IstimPulseDuration,
                var_chaste_interface__stimulus_protocol__IstimPeriod,
                var_chaste_interface__stimulus_protocol__IstimStart
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt::Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                6,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        NV_Ith_S(this->mParameters, 0) = 0.00040000000000000002; // (var_ionic_concentrations__Ca_i) [millimolar]
        NV_Ith_S(this->mParameters, 1) = 140.0; // (var_ionic_concentrations__K_i) [millimolar]
        NV_Ith_S(this->mParameters, 2) = 10.0; // (var_ionic_concentrations__Na_i) [millimolar]
        NV_Ith_S(this->mParameters, 3) = 2.0; // (var_ionic_concentrations__Ca_e) [millimolar]
        NV_Ith_S(this->mParameters, 4) = 4.0; // (var_ionic_concentrations__K_e) [millimolar]
        NV_Ith_S(this->mParameters, 5) = 138.0; // (var_ionic_concentrations__Na_e) [millimolar]
        NV_Ith_S(this->mParameters, 6) = 0.064000000000000001; // (var_calcium_current__g_Ca) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 7) = 153.40000000000001; // (var_membrane__Cm) [picoF]
        NV_Ith_S(this->mParameters, 8) = 16.0; // (var_sodium_current__g_Na) [nanoS_per_picoF]
        NV_Ith_S(this->mParameters, 9) = 3.8999999999999999; // (var_inward_rectifier_potassium_current__g_K1) [nanoS_per_picoF]
    }

    Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt::~Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt()
    {
    }

    AbstractLookupTableCollection* Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt::GetLookupTableCollection()
    {
        return Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables::Instance();
    }
    
    double Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -90.2
        double var_chaste_interface__sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.0016203
        double var_chaste_interface__sodium_current_v_gate__v = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.9944036
        double var_chaste_interface__calcium_current_f_gate__f = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__transient_outward_current_to_gate__to = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.000928836
        
        // Lookup table indexing
        const bool _oob_0 = Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        const double var_calcium_current__E_Ca = 13.306520728999949 * log(NV_Ith_S(mParameters, 3) / NV_Ith_S(mParameters, 0)); // millivolt
        const double var_delayed_rectifier_potassium_current__E_K = 26.613041457999898 * log(NV_Ith_S(mParameters, 4) / NV_Ith_S(mParameters, 1)); // millivolt
        const double var_calcium_background_current__i_b_Ca = 0.00084999999999999995 * var_chaste_interface__membrane__V - 0.00084999999999999995 * var_calcium_current__E_Ca; // picoA_per_picoF
        const double var_calcium_current__i_Ca_converted = 0.63503954329583223 * (-var_calcium_current__E_Ca + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 6) * var_chaste_interface__calcium_current_f_gate__f * _lt_0_row[1] / (sqrt(M_PI) * (1.0 + 1666.6666666666667 * NV_Ith_S(mParameters, 0)) * (_lt_0_row[0])); // uA_per_cm2
        const double var_delayed_rectifier_potassium_current__i_K = 0.019 * pow(var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X, 2) * (-var_delayed_rectifier_potassium_current__E_K + var_chaste_interface__membrane__V); // picoA_per_picoF
        const double var_inward_rectifier_potassium_current__i_K1_converted = 0.10000000000000001 * (-var_delayed_rectifier_potassium_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 9) / ((1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_delayed_rectifier_potassium_current__E_K)) * (0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_delayed_rectifier_potassium_current__E_K)) + (3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__membrane__V - 0.00020000000000000001 * var_delayed_rectifier_potassium_current__E_K) + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__V - 0.10000000000000001 * var_delayed_rectifier_potassium_current__E_K)) / (1.0 + exp(0.5 * var_delayed_rectifier_potassium_current__E_K - 0.5 * var_chaste_interface__membrane__V)))); // uA_per_cm2
        const double var_sodium_calcium_pump__i_NaCa = 1000.0 * (pow(NV_Ith_S(mParameters, 2), 3) * NV_Ith_S(mParameters, 3) * _lt_0_row[2] - pow(NV_Ith_S(mParameters, 5), 3) * NV_Ith_S(mParameters, 0) * _lt_0_row[3]) / ((_lt_0_row[4]) * (669921.875 + pow(NV_Ith_S(mParameters, 5), 3)) * (1.3799999999999999 + NV_Ith_S(mParameters, 3))); // picoA_per_picoF
        const double var_sodium_current__E_Na = 26.613041457999898 * log(NV_Ith_S(mParameters, 5) / NV_Ith_S(mParameters, 2)); // millivolt
        const double var_sodium_background_current__i_b_Na = 0.001 * var_chaste_interface__membrane__V - 0.001 * var_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_current__i_Na_converted = pow(var_chaste_interface__sodium_current_m_gate__m, 3) * pow(var_chaste_interface__sodium_current_v_gate__v, 2) * (-var_sodium_current__E_Na + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 8); // uA_per_cm2
        const double var_sodium_potassium_pump__i_NaK = 1.3 * NV_Ith_S(mParameters, 4) / ((1.0 + 31.622776601683793 * pow((1 / NV_Ith_S(mParameters, 2)), 1.5)) * (1.5 + NV_Ith_S(mParameters, 4)) * (1.0 + _lt_0_row[6] + 0.036499999999999998 * (-0.14280000000000001 + 0.14280000000000001 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 5))) * _lt_0_row[5])); // picoA_per_picoF
        const double var_transient_outward_current__i_to = 0.21063999999999999 * (-26.613041457999898 * log((NV_Ith_S(mParameters, 4) + 0.042999999999999997 * NV_Ith_S(mParameters, 5)) / (NV_Ith_S(mParameters, 1) + 0.042999999999999997 * NV_Ith_S(mParameters, 2))) + var_chaste_interface__membrane__V) * var_chaste_interface__transient_outward_current_to_gate__to * _lt_0_row[9] / ((_lt_0_row[7]) * (_lt_0_row[8])); // picoA_per_picoF
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_calcium_background_current__i_b_Ca + HeartConfig::Instance()->GetCapacitance() * var_delayed_rectifier_potassium_current__i_K + HeartConfig::Instance()->GetCapacitance() * var_sodium_background_current__i_b_Na + HeartConfig::Instance()->GetCapacitance() * var_sodium_calcium_pump__i_NaCa + HeartConfig::Instance()->GetCapacitance() * var_sodium_potassium_pump__i_NaK + HeartConfig::Instance()->GetCapacitance() * var_transient_outward_current__i_to + var_calcium_current__i_Ca_converted + var_inward_rectifier_potassium_current__i_K1_converted + var_sodium_current__i_Na_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -90.2
        double var_chaste_interface__sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.0016203
        double var_chaste_interface__sodium_current_v_gate__v = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.9944036
        double var_chaste_interface__calcium_current_f_gate__f = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__transient_outward_current_to_gate__to = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.000928836

        // Lookup table indexing
        const bool _oob_0 = Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        double d_dt_chaste_interface_var_membrane__V;
        const double d_dt_chaste_interface_var_calcium_current_f_gate__f = -(_lt_0_row[10]) * var_chaste_interface__calcium_current_f_gate__f + 0.0068700000000000002 * (1.0 - var_chaste_interface__calcium_current_f_gate__f) / (_lt_0_row[11]); // 1 / millisecond
        const double d_dt_chaste_interface_var_delayed_rectifier_potassium_current_X_gate__X = (-var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X + _lt_0_row[12]) / (_lt_0_row[13]); // 1 / millisecond
        const double d_dt_chaste_interface_var_sodium_current_m_gate__m = -0.080000000000000002 * var_chaste_interface__sodium_current_m_gate__m * _lt_0_row[14] + 0.32000000000000001 * (1.0 - var_chaste_interface__sodium_current_m_gate__m) * (47.130000000000003 + var_chaste_interface__membrane__V) / (_lt_0_row[15]); // 1 / millisecond
        const double d_dt_chaste_interface_var_sodium_current_v_gate__v = (0.5 - var_chaste_interface__sodium_current_v_gate__v + _lt_0_row[16]) / (_lt_0_row[17]); // 1 / millisecond
        const double d_dt_chaste_interface_var_transient_outward_current_to_gate__to = (1.0 - var_chaste_interface__transient_outward_current_to_gate__to) * (_lt_0_row[19]) / (_lt_0_row[18]) - (_lt_0_row[21]) * var_chaste_interface__transient_outward_current_to_gate__to / (_lt_0_row[20]); // 1 / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__V = 0.0;
        }
        else
        {
            const double var_calcium_current__E_Ca = 13.306520728999949 * log(NV_Ith_S(mParameters, 3) / NV_Ith_S(mParameters, 0)); // millivolt
            const double var_delayed_rectifier_potassium_current__E_K = 26.613041457999898 * log(NV_Ith_S(mParameters, 4) / NV_Ith_S(mParameters, 1)); // millivolt
            const double var_sodium_current__E_Na = 26.613041457999898 * log(NV_Ith_S(mParameters, 5) / NV_Ith_S(mParameters, 2)); // millivolt
            d_dt_chaste_interface_var_membrane__V = (0.001 * var_sodium_current__E_Na + 0.00084999999999999995 * var_calcium_current__E_Ca - 0.0018500000000000001 * var_chaste_interface__membrane__V - GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance() - 0.019 * pow(var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X, 2) * (-var_delayed_rectifier_potassium_current__E_K + var_chaste_interface__membrane__V) - pow(var_chaste_interface__sodium_current_m_gate__m, 3) * pow(var_chaste_interface__sodium_current_v_gate__v, 2) * (-var_sodium_current__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 8) - 1000.0 * (pow(NV_Ith_S(mParameters, 2), 3) * NV_Ith_S(mParameters, 3) * _lt_0_row[2] - pow(NV_Ith_S(mParameters, 5), 3) * NV_Ith_S(mParameters, 0) * _lt_0_row[3]) / ((_lt_0_row[4]) * (669921.875 + pow(NV_Ith_S(mParameters, 5), 3)) * (1.3799999999999999 + NV_Ith_S(mParameters, 3))) - 0.10000000000000001 * (-var_delayed_rectifier_potassium_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 9) / ((1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_delayed_rectifier_potassium_current__E_K)) * (0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_delayed_rectifier_potassium_current__E_K)) + (3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__membrane__V - 0.00020000000000000001 * var_delayed_rectifier_potassium_current__E_K) + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__V - 0.10000000000000001 * var_delayed_rectifier_potassium_current__E_K)) / (1.0 + exp(0.5 * var_delayed_rectifier_potassium_current__E_K - 0.5 * var_chaste_interface__membrane__V)))) - 1.3 * NV_Ith_S(mParameters, 4) / ((1.0 + 31.622776601683793 * pow((1 / NV_Ith_S(mParameters, 2)), 1.5)) * (1.5 + NV_Ith_S(mParameters, 4)) * (1.0 + _lt_0_row[6] + 0.036499999999999998 * (-0.14280000000000001 + 0.14280000000000001 * exp(0.01485884101040119 * NV_Ith_S(mParameters, 5))) * _lt_0_row[5])) - 0.21063999999999999 * (-26.613041457999898 * log((NV_Ith_S(mParameters, 4) + 0.042999999999999997 * NV_Ith_S(mParameters, 5)) / (NV_Ith_S(mParameters, 1) + 0.042999999999999997 * NV_Ith_S(mParameters, 2))) + var_chaste_interface__membrane__V) * var_chaste_interface__transient_outward_current_to_gate__to * _lt_0_row[9] / ((_lt_0_row[7]) * (_lt_0_row[8])) - 0.63503954329583223 * (-var_calcium_current__E_Ca + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 6) * var_chaste_interface__calcium_current_f_gate__f * _lt_0_row[1] / (sqrt(M_PI) * (1.0 + 1666.6666666666667 * NV_Ith_S(mParameters, 0)) * (_lt_0_row[0]))) / NV_Ith_S(mParameters, 7); // millivolt / millisecond
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_membrane__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_sodium_current_m_gate__m;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_sodium_current_v_gate__v;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_calcium_current_f_gate__f;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_transient_outward_current_to_gate__to;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_delayed_rectifier_potassium_current_X_gate__X;
    }

    N_Vector Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -90.2
        double var_chaste_interface__sodium_current_m_gate__m = NV_Ith_S(rY, 1);
        // Units: dimensionless; Initial value: 0.0016203
        double var_chaste_interface__sodium_current_v_gate__v = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.9944036
        double var_chaste_interface__calcium_current_f_gate__f = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 1.0
        
        // Lookup table indexing
        const bool _oob_0 = Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_calcium_current_f_Ca_gate__f_Ca = 1 / (1.0 + 1666.6666666666667 * NV_Ith_S(mParameters, 0)); // dimensionless
        const double var_membrane__Cm_converted = 9.9999999999999995e-7 * NV_Ith_S(mParameters, 7); // uF
        const double var_membrane__F = 96845.0; // coulomb_per_mole
        const double var_membrane__R = 8314.0; // millijoule_per_mole_kelvin
        const double var_membrane__T = 310.0; // kelvin
        const double var_calcium_current__E_Ca = 0.5 * var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 3) / NV_Ith_S(mParameters, 0)) / var_membrane__F; // millivolt
        const double var_delayed_rectifier_potassium_current__E_K = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 4) / NV_Ith_S(mParameters, 1)) / var_membrane__F; // millivolt
        const double var_calcium_current_d_gate__alpha_d = 0.63503954329583223 * _lt_0_row[1] / sqrt(M_PI); // per_millisecond
        const double var_calcium_current_d_gate__beta_d = 0.14710000000000001 - 0.25101580310038191 * exp(-0.088183122039937209 * pow((-1 + 0.15948963317384371 * var_chaste_interface__membrane__V), 2)) / sqrt(M_PI); // per_millisecond
        const double var_calcium_current_d_gate__d_infinity = var_calcium_current_d_gate__alpha_d / (var_calcium_current_d_gate__alpha_d + var_calcium_current_d_gate__beta_d); // dimensionless
        const double var_calcium_current__i_Ca = (-var_calcium_current__E_Ca + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 6) * var_calcium_current_d_gate__d_infinity * var_calcium_current_f_Ca_gate__f_Ca * var_chaste_interface__calcium_current_f_gate__f; // picoA_per_picoF
        const double var_calcium_current__i_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_calcium_current__i_Ca; // uA_per_cm2
        const double var_inward_rectifier_potassium_current_K1_gate__alpha_K1 = 0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_delayed_rectifier_potassium_current__E_K)); // per_millisecond
        const double var_inward_rectifier_potassium_current_K1_gate__beta_K1 = (3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__membrane__V - 0.00020000000000000001 * var_delayed_rectifier_potassium_current__E_K) + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__V - 0.10000000000000001 * var_delayed_rectifier_potassium_current__E_K)) / (1.0 + exp(0.5 * var_delayed_rectifier_potassium_current__E_K - 0.5 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_inward_rectifier_potassium_current_K1_gate__K1_infinity = var_inward_rectifier_potassium_current_K1_gate__alpha_K1 / (var_inward_rectifier_potassium_current_K1_gate__alpha_K1 + var_inward_rectifier_potassium_current_K1_gate__beta_K1); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = (-var_delayed_rectifier_potassium_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 9) * var_inward_rectifier_potassium_current_K1_gate__K1_infinity; // picoA_per_picoF
        const double var_inward_rectifier_potassium_current__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_inward_rectifier_potassium_current__i_K1; // uA_per_cm2
        const double var_sodium_current__E_Na = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 5) / NV_Ith_S(mParameters, 2)) / var_membrane__F; // millivolt
        const double var_sodium_current__i_Na = pow(var_chaste_interface__sodium_current_m_gate__m, 3) * pow(var_chaste_interface__sodium_current_v_gate__v, 2) * (-var_sodium_current__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 8); // picoA_per_picoF
        const double var_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_sodium_current__i_Na; // uA_per_cm2
        const double var_stimulus_protocol__i_stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(6);
        NV_Ith_S(dqs, 0) = var_calcium_current__i_Ca_converted;
        NV_Ith_S(dqs, 1) = var_membrane__Cm_converted;
        NV_Ith_S(dqs, 2) = var_sodium_current__i_Na_converted;
        NV_Ith_S(dqs, 3) = var_inward_rectifier_potassium_current__i_K1_converted;
        NV_Ith_S(dqs, 4) = var_stimulus_protocol__i_stim_converted;
        NV_Ith_S(dqs, 5) = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt>::Initialise(void)
{
    this->mSystemName = "bernus_wilders_zemlin_verschelde_panfilov_2002_version01";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-90.2);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0016203);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("sodium_current_v_gate__v");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9944036);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("transient_outward_current_to_gate__to");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("delayed_rectifier_potassium_current_X_gate__X");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000928836);

    // mParameters[0]:
    this->mParameterNames.push_back("cytosolic_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[1]:
    this->mParameterNames.push_back("cytosolic_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[2]:
    this->mParameterNames.push_back("cytosolic_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane__Cm");
    this->mParameterUnits.push_back("picoF");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_capacitance");
    this->mDerivedQuantityUnits.push_back("uF");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLCvodeOpt)

#endif // CHASTE_CVODE
