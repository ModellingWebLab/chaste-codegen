//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: wang_model_2008
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: GeneralizedRushLarsenFirstOrderOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "wang_sobie_2008.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<38; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables(const Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables&);
    Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables& operator= (const Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables&);
    Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 38;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][38];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(0.038949423064193495 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[0] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] >= 2){
                    EXCEPTION("Lookup table 0 at ["<<i<<"][0] has non-finite value: " << val);
                }
                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return -1.0 + exp(0.038949423064193495 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[1] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] >= 2){
                    EXCEPTION("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val);
                }
                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(0.013632298072467722 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-0.025317124991725771 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1.0 + 0.10000000000000001 * exp(-0.025317124991725771 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-0.038949423064193495 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.1245 * exp(-0.0038949423064193493 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 13.0 - 13.0 * exp(-2.1025 * pow((1 + 0.068965517241379309 * var_chaste_interface__membrane__V), 2));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.40000000000000002 * (1.0 + 0.69999999999999996 * exp(-160.0 * pow((1 + 0.025000000000000001 * var_chaste_interface__membrane__V), 2)) - 0.75 * exp(-pow((1 + 0.050000000000000003 * var_chaste_interface__membrane__V), 2))) * exp(1.2 + 0.10000000000000001 * var_chaste_interface__membrane__V) / (1.0 + 0.12 * exp(1.2 + 0.10000000000000001 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.050000000000000003 * exp(-0.92307692307692313 - 0.076923076923076927 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-0.038580246913580245 * pow((-1 + 0.20000000000000001 * var_chaste_interface__membrane__V), 2));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(-7.8688524590163942 - 0.16393442622950821 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.10000000000000001 + 5.4000000000000004 / (1.0 + exp(15.151515151515152 + 0.15151515151515152 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(10.0 + 0.15151515151515152 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 8.0 + 32.0 / (1.0 + exp(13.0 + 0.20000000000000001 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((var_chaste_interface__membrane__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0)) + ((var_chaste_interface__membrane__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((var_chaste_interface__membrane__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[16] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[16] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[16] >= 2){
                    EXCEPTION("Lookup table 16 at ["<<i<<"][16] has non-finite value: " << val);
                }
                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((var_chaste_interface__membrane__V < -40.0) ? (0.1212 * exp(-0.01052 * var_chaste_interface__membrane__V) / (1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__membrane__V))) : (0.29999999999999999 * exp(-2.5349999999999999e-7 * var_chaste_interface__membrane__V) / (1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__membrane__V)))) + ((var_chaste_interface__membrane__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__membrane__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V) - 3.4740000000000003e-5 * exp(-0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V))) : (0));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((var_chaste_interface__membrane__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__membrane__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V) - 3.4740000000000003e-5 * exp(-0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V))) : (0));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[18] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[18] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[18] >= 2){
                    EXCEPTION("Lookup table 18 at ["<<i<<"][18] has non-finite value: " << val);
                }
                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__membrane__V) + ((fabs(47.130000000000003 + var_chaste_interface__membrane__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((fabs(47.130000000000003 + var_chaste_interface__membrane__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[20] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[20] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[20] >= 2){
                    EXCEPTION("Lookup table 20 at ["<<i<<"][20] has non-finite value: " << val);
                }
                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(1.0731000000000002 + 0.035770000000000003 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-1.8711 - 0.062370000000000002 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.00015200000000000001 * exp(0.2419047619047619 - 0.063492063492063489 * var_chaste_interface__membrane__V) / ((1.0 + 0.0067083000000000004 * exp(-8.3841269841269845 - 0.063492063492063489 * var_chaste_interface__membrane__V)) * (0.00015200000000000001 * exp(0.2419047619047619 - 0.063492063492063489 * var_chaste_interface__membrane__V) / (1.0 + 0.0067083000000000004 * exp(-8.3841269841269845 - 0.063492063492063489 * var_chaste_interface__membrane__V)) + 0.00095 * exp(8.3841269841269845 + 0.063492063492063489 * var_chaste_interface__membrane__V) / (1.0 + 0.051334999999999999 * exp(8.3841269841269845 + 0.063492063492063489 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.00015200000000000001 * exp(-1.9285714285714286 - 0.14285714285714285 * var_chaste_interface__membrane__V) / (1.0 + 0.067083000000000004 * exp(-4.7857142857142856 - 0.14285714285714285 * var_chaste_interface__membrane__V)) + 0.00095 * exp(4.7857142857142856 + 0.14285714285714285 * var_chaste_interface__membrane__V) / (1.0 + 0.051334999999999999 * exp(4.7857142857142856 + 0.14285714285714285 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.013733 * exp(0.038198000000000003 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.090820999999999999 * exp(0.11695499999999999 + 0.023390999999999999 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][26] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 6.8899999999999994e-5 * exp(-0.041779999999999998 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][27] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 0.0064970000000000002 * exp(-0.16339999999999999 - 0.032680000000000001 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][28] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(0.01176 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][29] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-0.063100000000000003 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][30] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return ((fabs(26.5 + var_chaste_interface__membrane__V) < 7.8124999999817923e-7) ? (3.7604140624912359e-12 / (1.0 - exp(-9.9999999999766942e-8)) - 640000.00000149151 * (26.499999218749998 + var_chaste_interface__membrane__V) * (-3.7604140624912359e-12 / (1.0 - exp(9.9999999999766942e-8)) - 3.7604140624912359e-12 / (1.0 - exp(-9.9999999999766942e-8)))) : (4.8133299999999997e-6 * (26.5 + var_chaste_interface__membrane__V) / (1.0 - exp(-3.3919999999999999 - 0.128 * var_chaste_interface__membrane__V))));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[31] < 2){
                    double left = f(var_chaste_interface__membrane__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[31] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[31] >= 2){
                    EXCEPTION("Lookup table 31 at ["<<i<<"][31] has non-finite value: " << val);
                }
                _lookup_table_0[i][31] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return exp(-1.0069999999999999 - 0.037999999999999999 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][32] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(-2.9220779220779218 - 0.12987012987012986 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][33] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 13.17 + 39.299999999999997 * exp(-0.086199999999999999 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][34] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 2.0579999999999998 + 0.49299999999999999 * exp(-0.062899999999999998 * var_chaste_interface__membrane__V);
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][35] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1 / (1.0 + exp(7.9298245614035094 + 0.17543859649122806 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][36] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__V) {
                    return 1200.0 - 170.0 / (1.0 + exp(7.9298245614035094 + 0.17543859649122806 * var_chaste_interface__membrane__V));
                };
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__V);

                _lookup_table_0[i][37] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[38];

    // Lookup tables
    double (*_lookup_table_0)[38];
    int _lookup_table_0_num_misshit_piecewise[38] = {0};

};

std::shared_ptr<Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables> Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::mpInstance;


    boost::shared_ptr<RegularStimulus> Cellwang_sobie_2008FromCellMLGRL1Opt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_amplitude_converted = -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__stim_duration = 0.5; // millisecond
        const double var_chaste_interface__membrane__stim_period = 2000.0; // millisecond
        const double var_chaste_interface__membrane__stim_start = 20.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude_converted),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Cellwang_sobie_2008FromCellMLGRL1Opt::Cellwang_sobie_2008FromCellMLGRL1Opt(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractGeneralizedRushLarsenCardiacCell(
                35,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellwang_sobie_2008FromCellMLGRL1Opt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 30000.0; // (var_membrane__Cli) [micromolar]
        this->mParameters[1] = 1000.0; // (var_membrane__Cao) [micromolar]
        this->mParameters[2] = 132000.0; // (var_membrane__Clo) [micromolar]
        this->mParameters[3] = 5400.0; // (var_membrane__Ko) [micromolar]
        this->mParameters[4] = 140000.0; // (var_membrane__Nao) [micromolar]
        this->mParameters[5] = 7.0; // (var_L_type_calcium_current__i_CaL_max) [picoA_per_picoF]
        this->mParameters[6] = 1.0; // (var_membrane__Cm) [microF_per_cm2]
        this->mParameters[7] = 10.0; // (var_fast_sodium_current__g_Na) [milliS_per_microF]
        this->mParameters[8] = 0.1017; // (var_fast_transient_outward_potassium_current__g_Kto_f) [milliS_per_microF]
        this->mParameters[9] = 0.23499999999999999; // (var_time_independent_potassium_current__g_K1) [milliS_per_microF]
        this->mParameters[10] = 0.014999999999999999; // (var_non_inactivating_steady_state_potassium_current__g_Kss) [milliS_per_microF]
        this->mParameters[11] = 1.1699999999999999; // (var_rapid_delayed_rectifier_potassium_current__g_Kr) [milliS_per_microF]
        this->mParameters[12] = 0.045999999999999999; // (var_slow_delayed_rectifier_potassium_current__g_Ks) [milliS_per_microF]
        this->mParameters[13] = 0.0047999999999999996; // (var_ultra_rapidly_activating_delayed_rectifier_potassium_current__g_Kur) [milliS_per_microF]
    }

    Cellwang_sobie_2008FromCellMLGRL1Opt::~Cellwang_sobie_2008FromCellMLGRL1Opt()
    {
    }

    AbstractLookupTableCollection* Cellwang_sobie_2008FromCellMLGRL1Opt::GetLookupTableCollection()
    {
        return Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance();
    }
    
    double Cellwang_sobie_2008FromCellMLGRL1Opt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 0.0002049
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.1867
        double var_chaste_interface__L_type_calcium_current__O = rY[11];
        // Units: dimensionless; Initial value: 4.4776e-12
        double var_chaste_interface__T_type_calcium_current_b_gate__b = rY[18];
        // Units: dimensionless; Initial value: 0.0047
        double var_chaste_interface__T_type_calcium_current_g_gate__g = rY[19];
        // Units: dimensionless; Initial value: 0.902
        double var_chaste_interface__sodium_concentration__Nai = rY[20];
        // Units: micromolar; Initial value: 21747.0
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[21];
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[22];
        // Units: dimensionless; Initial value: 0.9606
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[23];
        // Units: dimensionless; Initial value: 0.9744
        double var_chaste_interface__potassium_concentration__Ki = rY[24];
        // Units: micromolar; Initial value: 136450.0
        double var_chaste_interface__fast_transient_outward_potassium_current__ato_f = rY[25];
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_transient_outward_potassium_current__ito_f = rY[26];
        // Units: dimensionless; Initial value: 0.753
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur = rY[27];
        // Units: dimensionless; Initial value: 0.00052471
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur = rY[28];
        // Units: dimensionless; Initial value: 0.9866
        double var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss = rY[29];
        // Units: dimensionless; Initial value: 0.85
        double var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs = rY[30];
        // Units: dimensionless; Initial value: 0.0026
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K = rY[31];
        // Units: dimensionless; Initial value: 0.0021
        
        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_pump_current__i_pCa = 0.20000000000000001 * pow(var_calcium_concentration__Cai, 2) / (0.25 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL_converted = 0.19019 * (-63.0 + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__L_type_calcium_current__O; // uA_per_cm2
        const double var_T_type_calcium_current__i_CaT = 0.055 * (-50.0 + var_chaste_interface__membrane__V) * var_chaste_interface__T_type_calcium_current_b_gate__b * var_chaste_interface__T_type_calcium_current_g_gate__g; // picoA_per_picoF
        const double var_calcium_activated_chloride_current__i_ClCa = ((fabs(var_chaste_interface__membrane__V) < 2.5674321243523316e-6) ? (194747.11532096748 * (2.5674321243523316e-6 + var_chaste_interface__membrane__V) * (4.1314062499999994e-14 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-mParameters[0] + mParameters[2] * exp(9.9999999999999995e-8)) / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (-1.0 + exp(9.9999999999999995e-8))) + 4.1314062499999994e-14 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-mParameters[0] + mParameters[2] * exp(-9.9999999999999995e-8)) / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (-1.0 + exp(-9.9999999999999995e-8)))) - 4.1314062499999994e-14 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-mParameters[0] + mParameters[2] * exp(-9.9999999999999995e-8)) / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (-1.0 + exp(-9.9999999999999995e-8)))) : (1.6091588988130313e-8 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-mParameters[0] + mParameters[2] * _lt_0_row[0]) * var_chaste_interface__membrane__V / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (_lt_0_row[1])))); // picoA_per_picoF
        const double var_calcium_background_current__i_Cab = 0.00025000000000000001 * var_chaste_interface__membrane__V - 0.0032092901554404145 * log(mParameters[1] / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_fast_transient_outward_potassium_current__E_K = 25.674321243523316 * log(mParameters[3] / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_potassium_current__i_Kto_f_converted = pow(var_chaste_interface__fast_transient_outward_potassium_current__ato_f, 6.5) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[8] * var_chaste_interface__fast_transient_outward_potassium_current__ito_f; // uA_per_cm2
        const double var_non_inactivating_steady_state_potassium_current__i_Kss_converted = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss * mParameters[10]; // uA_per_cm2
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr_converted = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * mParameters[11]; // uA_per_cm2
        const double var_slow_delayed_rectifier_potassium_current__i_Ks_converted = pow(var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs, 2) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[12]; // uA_per_cm2
        const double var_fast_sodium_current__E_Na = 25.674321243523316 * log(mParameters[4] / var_chaste_interface__sodium_concentration__Nai); // millivolt
        const double var_fast_sodium_current__i_Na_converted = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[7] * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // uA_per_cm2
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__membrane__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NaCa = 907.67999999999995 * (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * _lt_0_row[2] - pow(mParameters[4], 3) * var_calcium_concentration__Cai * _lt_0_row[3]) / ((_lt_0_row[4]) * (1380.0 + mParameters[1]) * (669921875000000.0 + pow(mParameters[4], 3))); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = 0.88 * mParameters[3] / ((1.0 + 3043189.1166997822 * pow((1 / var_chaste_interface__sodium_concentration__Nai), 1.5)) * (1500.0 + mParameters[3]) * (1.0 + _lt_0_row[6] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[4])) * _lt_0_row[5])); // picoA_per_picoF
        const double var_time_independent_potassium_current__i_K1_converted = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[3] * mParameters[9] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__membrane__V - 0.089599999999999999 * var_fast_transient_outward_potassium_current__E_K)) * (210.0 + mParameters[3])); // uA_per_cm2
        const double var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur_converted = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur * mParameters[13] * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur; // uA_per_cm2
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_T_type_calcium_current__i_CaT + HeartConfig::Instance()->GetCapacitance() * var_calcium_activated_chloride_current__i_ClCa + HeartConfig::Instance()->GetCapacitance() * var_calcium_background_current__i_Cab + HeartConfig::Instance()->GetCapacitance() * var_calcium_pump_current__i_pCa + HeartConfig::Instance()->GetCapacitance() * var_sodium_background_current__i_Nab + HeartConfig::Instance()->GetCapacitance() * var_sodium_calcium_exchange_current__i_NaCa + HeartConfig::Instance()->GetCapacitance() * var_sodium_potassium_pump_current__i_NaK + var_L_type_calcium_current__i_CaL_converted + var_fast_sodium_current__i_Na_converted + var_fast_transient_outward_potassium_current__i_Kto_f_converted + var_non_inactivating_steady_state_potassium_current__i_Kss_converted + var_rapid_delayed_rectifier_potassium_current__i_Kr_converted + var_slow_delayed_rectifier_potassium_current__i_Ks_converted + var_time_independent_potassium_current__i_K1_converted + var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellwang_sobie_2008FromCellMLGRL1Opt::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        unsigned v_index = GetVoltageIndex();
        const double delta = 1e-8;

        double d_dt_chaste_interface_var_membrane__V;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 0.0002049
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.1867
        double var_chaste_interface__L_type_calcium_current__O = rY[11];
        // Units: dimensionless; Initial value: 4.4776e-12
        double var_chaste_interface__T_type_calcium_current_b_gate__b = rY[18];
        // Units: dimensionless; Initial value: 0.0047
        double var_chaste_interface__T_type_calcium_current_g_gate__g = rY[19];
        // Units: dimensionless; Initial value: 0.902
        double var_chaste_interface__sodium_concentration__Nai = rY[20];
        // Units: micromolar; Initial value: 21747.0
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[21];
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[22];
        // Units: dimensionless; Initial value: 0.9606
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[23];
        // Units: dimensionless; Initial value: 0.9744
        double var_chaste_interface__potassium_concentration__Ki = rY[24];
        // Units: micromolar; Initial value: 136450.0
        double var_chaste_interface__fast_transient_outward_potassium_current__ato_f = rY[25];
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_transient_outward_potassium_current__ito_f = rY[26];
        // Units: dimensionless; Initial value: 0.753
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur = rY[27];
        // Units: dimensionless; Initial value: 0.00052471
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur = rY[28];
        // Units: dimensionless; Initial value: 0.9866
        double var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss = rY[29];
        // Units: dimensionless; Initial value: 0.85
        double var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs = rY[30];
        // Units: dimensionless; Initial value: 0.0026
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K = rY[31];
        // Units: dimensionless; Initial value: 0.0021
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_pump_current__i_pCa = 0.20000000000000001 * pow(var_calcium_concentration__Cai, 2) / (0.25 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL = 0.19019 * (-63.0 + var_chaste_interface__membrane__V) * var_chaste_interface__L_type_calcium_current__O; // picoA_per_picoF
        const double var_T_type_calcium_current__i_CaT = 0.055 * (-50.0 + var_chaste_interface__membrane__V) * var_chaste_interface__T_type_calcium_current_b_gate__b * var_chaste_interface__T_type_calcium_current_g_gate__g; // picoA_per_picoF
        const double var_calcium_background_current__i_Cab = 0.00025000000000000001 * var_chaste_interface__membrane__V - 0.0032092901554404145 * log(mParameters[1] / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_fast_transient_outward_potassium_current__E_K = 25.674321243523316 * log(mParameters[3] / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_potassium_current__i_Kto_f = pow(var_chaste_interface__fast_transient_outward_potassium_current__ato_f, 6.5) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[8] * var_chaste_interface__fast_transient_outward_potassium_current__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_potassium_current__i_Kss = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss * mParameters[10]; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * mParameters[11]; // picoA_per_picoF
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs, 2) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[12]; // picoA_per_picoF
        const double var_fast_sodium_current__E_Na = 25.674321243523316 * log(mParameters[4] / var_chaste_interface__sodium_concentration__Nai); // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * mParameters[7] * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // picoA_per_picoF
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__membrane__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NaCa = 907.67999999999995 * (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * _lt_0_row[2] - pow(mParameters[4], 3) * var_calcium_concentration__Cai * _lt_0_row[3]) / ((_lt_0_row[4]) * (1380.0 + mParameters[1]) * (669921875000000.0 + pow(mParameters[4], 3))); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = 0.88 * mParameters[3] / ((1.0 + 3043189.1166997822 * pow((1 / var_chaste_interface__sodium_concentration__Nai), 1.5)) * (1500.0 + mParameters[3]) * (1.0 + _lt_0_row[6] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[4])) * _lt_0_row[5])); // picoA_per_picoF
        const double var_time_independent_potassium_current__i_K1 = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[3] * mParameters[9] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__membrane__V - 0.089599999999999999 * var_fast_transient_outward_potassium_current__E_K)) * (210.0 + mParameters[3])); // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur * mParameters[13] * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur; // picoA_per_picoF
        d_dt_chaste_interface_var_membrane__V = -((fabs(var_chaste_interface__membrane__V) < 2.5674321243523316e-6) ? (194747.11532096748 * (2.5674321243523316e-6 + var_chaste_interface__membrane__V) * (4.1314062499999994e-14 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-mParameters[0] + mParameters[2] * exp(9.9999999999999995e-8)) / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (-1.0 + exp(9.9999999999999995e-8))) + 4.1314062499999994e-14 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-mParameters[0] + mParameters[2] * exp(-9.9999999999999995e-8)) / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (-1.0 + exp(-9.9999999999999995e-8)))) - 4.1314062499999994e-14 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-mParameters[0] + mParameters[2] * exp(-9.9999999999999995e-8)) / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (-1.0 + exp(-9.9999999999999995e-8)))) : (1.6091588988130313e-8 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-mParameters[0] + mParameters[2] * _lt_0_row[0]) * var_chaste_interface__membrane__V / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (_lt_0_row[1])))) - var_L_type_calcium_current__i_CaL - var_T_type_calcium_current__i_CaT - var_calcium_background_current__i_Cab - var_calcium_pump_current__i_pCa - var_fast_sodium_current__i_Na - var_fast_transient_outward_potassium_current__i_Kto_f - var_non_inactivating_steady_state_potassium_current__i_Kss - var_rapid_delayed_rectifier_potassium_current__i_Kr - var_slow_delayed_rectifier_potassium_current__i_Ks - var_sodium_background_current__i_Nab - var_sodium_calcium_exchange_current__i_NaCa - var_sodium_potassium_pump_current__i_NaK - var_time_independent_potassium_current__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur - GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // millivolt / millisecond

        double evalF = d_dt_chaste_interface_var_membrane__V;
        mEvalF[0] = d_dt_chaste_interface_var_membrane__V;
        double partialF = EvaluatePartialDerivative0(var_chaste_interface__environment__time, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] += evalF*mDt;
        }
        else
        {
            rY[v_index] += (evalF/partialF)*(exp(partialF*mDt)-1.0);
        }
    }

    void Cellwang_sobie_2008FromCellMLGRL1Opt::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        const double delta = 1e-8;

        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 0.0002049
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.1867
        double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
        // Units: micromolar; Initial value: 705.5417
        double var_chaste_interface__calcium_concentration__CaNSR = rY[4];
        // Units: micromolar; Initial value: 703.3063
        double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
        // Units: dimensionless; Initial value: 2.8603e-14
        double var_chaste_interface__calcium_buffering__LTRPN_Ca = rY[6];
        // Units: micromolar; Initial value: 8.922
        double var_chaste_interface__calcium_buffering__HTRPN_Ca = rY[7];
        // Units: micromolar; Initial value: 66.0407
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[8];
        // Units: dimensionless; Initial value: 0.0011
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[9];
        // Units: dimensionless; Initial value: 2.9799e-08
        double var_chaste_interface__ryanodine_receptors__P_C2 = rY[10];
        // Units: dimensionless; Initial value: 0.1003
        double var_chaste_interface__L_type_calcium_current__O = rY[11];
        // Units: dimensionless; Initial value: 4.4776e-12
        double var_chaste_interface__L_type_calcium_current__C2 = rY[12];
        // Units: dimensionless; Initial value: 0.00016996
        double var_chaste_interface__L_type_calcium_current__C3 = rY[13];
        // Units: dimensionless; Initial value: 1.1754e-08
        double var_chaste_interface__L_type_calcium_current__C4 = rY[14];
        // Units: dimensionless; Initial value: 6.1239e-10
        double var_chaste_interface__L_type_calcium_current__I1 = rY[15];
        // Units: dimensionless; Initial value: 1.545e-09
        double var_chaste_interface__L_type_calcium_current__I2 = rY[16];
        // Units: dimensionless; Initial value: 6.4226e-08
        double var_chaste_interface__L_type_calcium_current__I3 = rY[17];
        // Units: dimensionless; Initial value: 6.5201e-07
        double var_chaste_interface__T_type_calcium_current_b_gate__b = rY[18];
        // Units: dimensionless; Initial value: 0.0047
        double var_chaste_interface__T_type_calcium_current_g_gate__g = rY[19];
        // Units: dimensionless; Initial value: 0.902
        double var_chaste_interface__sodium_concentration__Nai = rY[20];
        // Units: micromolar; Initial value: 21747.0
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[21];
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[22];
        // Units: dimensionless; Initial value: 0.9606
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[23];
        // Units: dimensionless; Initial value: 0.9744
        double var_chaste_interface__potassium_concentration__Ki = rY[24];
        // Units: micromolar; Initial value: 136450.0
        double var_chaste_interface__fast_transient_outward_potassium_current__ato_f = rY[25];
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_transient_outward_potassium_current__ito_f = rY[26];
        // Units: dimensionless; Initial value: 0.753
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur = rY[27];
        // Units: dimensionless; Initial value: 0.00052471
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur = rY[28];
        // Units: dimensionless; Initial value: 0.9866
        double var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss = rY[29];
        // Units: dimensionless; Initial value: 0.85
        double var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs = rY[30];
        // Units: dimensionless; Initial value: 0.0026
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K = rY[31];
        // Units: dimensionless; Initial value: 0.0021
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K1 = rY[32];
        // Units: dimensionless; Initial value: 0.0011
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 = rY[33];
        // Units: dimensionless; Initial value: 0.00083641
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__I_K = rY[34];
        // Units: dimensionless; Initial value: 0.00043522
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_L_type_calcium_current__gamma = 0.23324 * var_chaste_interface__calcium_concentration__Cass / (20.0 + var_chaste_interface__calcium_concentration__Cass); // per_millisecond
        const double d_dt_chaste_interface_var_calcium_buffering__HTRPN_Ca = -3.1999999999999999e-5 * var_chaste_interface__calcium_buffering__HTRPN_Ca + 0.0023700000000000001 * (70.0 - var_chaste_interface__calcium_buffering__HTRPN_Ca) * var_calcium_concentration__Cai; // micromolar / millisecond
        const double d_dt_chaste_interface_var_calcium_buffering__LTRPN_Ca = -0.019599999999999999 * var_chaste_interface__calcium_buffering__LTRPN_Ca + 0.0327 * (35.0 - var_chaste_interface__calcium_buffering__LTRPN_Ca) * var_calcium_concentration__Cai; // micromolar / millisecond
        const double var_calcium_fluxes__J_xfer = 0.125 * var_chaste_interface__calcium_concentration__Cass - 0.125 * var_calcium_concentration__Cai; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_leak = 2.088e-5 * var_chaste_interface__calcium_concentration__CaNSR - 2.088e-5 * var_calcium_concentration__Cai; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_up = 0.089999999999999997 * pow(var_calcium_concentration__Cai, 2) / (0.25 + pow(var_calcium_concentration__Cai, 2)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__Cai_converted = 0.001 * (-var_calcium_fluxes__J_up + 0.019599999999999999 * var_chaste_interface__calcium_buffering__LTRPN_Ca + 3.1999999999999999e-5 * var_chaste_interface__calcium_buffering__HTRPN_Ca - 0.0327 * (35.0 - var_chaste_interface__calcium_buffering__LTRPN_Ca) * var_calcium_concentration__Cai - 0.0023700000000000001 * (70.0 - var_chaste_interface__calcium_buffering__HTRPN_Ca) * var_calcium_concentration__Cai + var_calcium_fluxes__J_leak + var_calcium_fluxes__J_xfer) / (1.0 + 5.9499999999999993 / pow((0.23799999999999999 + var_calcium_concentration__Cai), 2)); // millimolar / millisecond
        const double var_calcium_pump_current__i_pCa = 0.20000000000000001 * pow(var_calcium_concentration__Cai, 2) / (0.25 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_L_type_calcium_current__Kpcf = _lt_0_row[7]; // per_millisecond
        const double var_L_type_calcium_current__alpha = _lt_0_row[8]; // per_millisecond
        const double var_L_type_calcium_current__beta = _lt_0_row[9]; // per_millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__C2 = -var_chaste_interface__L_type_calcium_current__C2 * var_L_type_calcium_current__beta + 2.0 * var_chaste_interface__L_type_calcium_current__C3 * var_L_type_calcium_current__beta + 4.0 * (1.0 - var_chaste_interface__L_type_calcium_current__C3 - var_chaste_interface__L_type_calcium_current__C4 - var_chaste_interface__L_type_calcium_current__I1 - var_chaste_interface__L_type_calcium_current__I2 - var_chaste_interface__L_type_calcium_current__I3 - var_chaste_interface__L_type_calcium_current__O - 2 * var_chaste_interface__L_type_calcium_current__C2) * var_L_type_calcium_current__alpha - 3.0 * var_chaste_interface__L_type_calcium_current__C2 * var_L_type_calcium_current__alpha; // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__C3 = 3.0 * var_chaste_interface__L_type_calcium_current__C2 * var_L_type_calcium_current__alpha + 3.0 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__beta - 2.0 * var_chaste_interface__L_type_calcium_current__C3 * var_L_type_calcium_current__alpha - 2.0 * var_chaste_interface__L_type_calcium_current__C3 * var_L_type_calcium_current__beta; // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__C4 = -var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__alpha + 2.0 * var_chaste_interface__L_type_calcium_current__C3 * var_L_type_calcium_current__alpha + 4.0 * var_chaste_interface__L_type_calcium_current__O * var_L_type_calcium_current__beta + 0.002 * var_chaste_interface__L_type_calcium_current__I3 * var_L_type_calcium_current__beta + 0.0080000000000000002 * var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__beta + 2.0000000000000002e-5 * var_chaste_interface__L_type_calcium_current__I1 * var_L_type_calcium_current__beta - 3.0 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__beta - 0.002 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__Kpcf - var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__Kpcf * var_L_type_calcium_current__gamma - 0.01 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__alpha * var_L_type_calcium_current__gamma; // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__I1 = -0.00050000000000000001 * var_chaste_interface__L_type_calcium_current__I1 + var_chaste_interface__L_type_calcium_current__O * var_L_type_calcium_current__gamma + 0.001 * var_chaste_interface__L_type_calcium_current__I3 * var_L_type_calcium_current__alpha - 0.001 * var_chaste_interface__L_type_calcium_current__I1 * var_L_type_calcium_current__Kpcf + 0.01 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__alpha * var_L_type_calcium_current__gamma - 0.040000000000000001 * var_chaste_interface__L_type_calcium_current__I1 * var_L_type_calcium_current__Kpcf * var_L_type_calcium_current__beta; // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__I2 = 0.00050000000000000001 * var_chaste_interface__L_type_calcium_current__I3 - var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__gamma + 0.001 * var_L_type_calcium_current__Kpcf * var_chaste_interface__L_type_calcium_current__O + 0.002 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__Kpcf - 0.001 * var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__alpha - 0.0080000000000000002 * var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__beta; // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__I3 = -0.00050000000000000001 * var_chaste_interface__L_type_calcium_current__I3 + var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__gamma + 0.001 * var_chaste_interface__L_type_calcium_current__I1 * var_L_type_calcium_current__Kpcf - 0.001 * var_chaste_interface__L_type_calcium_current__I3 * var_L_type_calcium_current__alpha - 0.002 * var_chaste_interface__L_type_calcium_current__I3 * var_L_type_calcium_current__beta + var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__Kpcf * var_L_type_calcium_current__gamma; // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__O = 0.00050000000000000001 * var_chaste_interface__L_type_calcium_current__I1 + var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__alpha - var_chaste_interface__L_type_calcium_current__O * var_L_type_calcium_current__gamma + 0.001 * var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__alpha - 4.0 * var_chaste_interface__L_type_calcium_current__O * var_L_type_calcium_current__beta - 0.001 * var_L_type_calcium_current__Kpcf * var_chaste_interface__L_type_calcium_current__O; // 1 / millisecond
        const double var_L_type_calcium_current__i_CaL = 0.19019 * (-63.0 + var_chaste_interface__membrane__V) * var_chaste_interface__L_type_calcium_current__O; // picoA_per_picoF
        const double d_dt_chaste_interface_var_calcium_fluxes__P_RyR = -0.040000000000000001 * var_chaste_interface__calcium_fluxes__P_RyR - 0.10000000000000001 * var_L_type_calcium_current__i_CaL * _lt_0_row[10] / mParameters[5]; // 1 / millisecond
        const double var_T_type_calcium_current__i_CaT = 0.055 * (-50.0 + var_chaste_interface__membrane__V) * var_chaste_interface__T_type_calcium_current_b_gate__b * var_chaste_interface__T_type_calcium_current_g_gate__g; // picoA_per_picoF
        const double d_dt_chaste_interface_var_T_type_calcium_current_b_gate__b = (-var_chaste_interface__T_type_calcium_current_b_gate__b + _lt_0_row[11]) / (_lt_0_row[12]); // 1 / millisecond
        const double d_dt_chaste_interface_var_T_type_calcium_current_g_gate__g = (-var_chaste_interface__T_type_calcium_current_g_gate__g + _lt_0_row[13]) / (_lt_0_row[14]); // 1 / millisecond
        const double var_calcium_background_current__i_Cab = 0.00025000000000000001 * var_chaste_interface__membrane__V - 0.0032092901554404145 * log(mParameters[1] / var_calcium_concentration__Cai); // picoA_per_picoF
        const double d_dt_chaste_interface_var_fast_sodium_current_h_gate__h = -(_lt_0_row[15]) * var_chaste_interface__fast_sodium_current_h_gate__h + _lt_0_row[16]; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_j_gate__j = -(_lt_0_row[17]) * var_chaste_interface__fast_sodium_current_j_gate__j + _lt_0_row[18]; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_m_gate__m = -(_lt_0_row[19]) * var_chaste_interface__fast_sodium_current_m_gate__m + _lt_0_row[20]; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_transient_outward_potassium_current__ato_f = 0.18064 * (1.0 - var_chaste_interface__fast_transient_outward_potassium_current__ato_f) * _lt_0_row[21] - 0.39560000000000001 * var_chaste_interface__fast_transient_outward_potassium_current__ato_f * _lt_0_row[22]; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_transient_outward_potassium_current__ito_f = (-var_chaste_interface__fast_transient_outward_potassium_current__ito_f + _lt_0_row[23]) * (_lt_0_row[24]); // 1 / millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaNSR = 0.00028598665395614868 * var_chaste_interface__calcium_concentration__CaJSR + 10.879885605338417 * var_calcium_fluxes__J_up - 0.00028598665395614868 * var_chaste_interface__calcium_concentration__CaNSR - 10.879885605338417 * var_calcium_fluxes__J_leak; // micromolar / millisecond
        const double var_fast_transient_outward_potassium_current__E_K = 25.674321243523316 * log(mParameters[3] / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_potassium_current__i_Kto_f = pow(var_chaste_interface__fast_transient_outward_potassium_current__ato_f, 6.5) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[8] * var_chaste_interface__fast_transient_outward_potassium_current__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_potassium_current__i_Kss = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss * mParameters[10]; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_potassium_current__alpha_a1 = _lt_0_row[25]; // per_millisecond
        const double var_rapid_delayed_rectifier_potassium_current__alpha_i = _lt_0_row[26]; // per_millisecond
        const double var_rapid_delayed_rectifier_potassium_current__beta_a1 = _lt_0_row[27]; // per_millisecond
        const double var_rapid_delayed_rectifier_potassium_current__beta_i = _lt_0_row[28]; // per_millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__I_K = var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * var_rapid_delayed_rectifier_potassium_current__alpha_i - var_chaste_interface__rapid_delayed_rectifier_potassium_current__I_K * var_rapid_delayed_rectifier_potassium_current__beta_i; // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__O_K = var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 * var_rapid_delayed_rectifier_potassium_current__alpha_a1 + var_chaste_interface__rapid_delayed_rectifier_potassium_current__I_K * var_rapid_delayed_rectifier_potassium_current__beta_i - var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * var_rapid_delayed_rectifier_potassium_current__alpha_i - var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * var_rapid_delayed_rectifier_potassium_current__beta_a1; // 1 / millisecond
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * mParameters[11]; // picoA_per_picoF
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__C_K1 = 0.036777999999999998 * var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 - 0.023761000000000001 * var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K1 + 0.022348 * (1.0 - var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K1 - var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 - var_chaste_interface__rapid_delayed_rectifier_potassium_current__I_K - var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K) * _lt_0_row[29] - 0.047002000000000002 * var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K1 * _lt_0_row[30]; // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__C_K2 = 0.023761000000000001 * var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K1 - 0.036777999999999998 * var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 + var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * var_rapid_delayed_rectifier_potassium_current__beta_a1 - var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 * var_rapid_delayed_rectifier_potassium_current__alpha_a1; // 1 / millisecond
        const double var_calcium_fluxes__J_rel = 0.45000000000000001 * (-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * (var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2) * var_chaste_interface__calcium_fluxes__P_RyR; // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaJSR = (-var_calcium_fluxes__J_rel + var_calcium_fluxes__J_xfer) / (1.0 + 18.75 / pow((1 + 0.00125 * var_chaste_interface__calcium_concentration__CaJSR), 2)); // micromolar / millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__Cass = (0.03904470618858593 * var_calcium_fluxes__J_rel - 74.269538621721864 * var_calcium_fluxes__J_xfer - 2.5979228081438217 * (-var_T_type_calcium_current__i_CaT + var_L_type_calcium_current__i_CaL + var_calcium_background_current__i_Cab + var_calcium_pump_current__i_pCa) * mParameters[6]) / (1.0 + 5.9499999999999993 / pow((0.23799999999999999 + var_chaste_interface__calcium_concentration__Cass), 2)); // micromolar / millisecond
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_C2 = 0.0089999999999999993 * var_chaste_interface__ryanodine_receptors__P_O1 - 0.00080000000000000004 * var_chaste_interface__ryanodine_receptors__P_C2; // 1 / millisecond
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O2 = -0.96499999999999997 * var_chaste_interface__ryanodine_receptors__P_O2 + 0.0040499999999999998 * pow(var_chaste_interface__calcium_concentration__Cass, 3.0) * var_chaste_interface__ryanodine_receptors__P_O1; // 1 / millisecond
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O1 = 0.00080000000000000004 * var_chaste_interface__ryanodine_receptors__P_C2 + 0.96499999999999997 * var_chaste_interface__ryanodine_receptors__P_O2 - 0.080249999999999988 * var_chaste_interface__ryanodine_receptors__P_O1 + 0.0060800000000000003 * pow(var_chaste_interface__calcium_concentration__Cass, 4.0) * (1.0 - var_chaste_interface__ryanodine_receptors__P_C2 - var_chaste_interface__ryanodine_receptors__P_O1 - var_chaste_interface__ryanodine_receptors__P_O2) - 0.0040499999999999998 * pow(var_chaste_interface__calcium_concentration__Cass, 3.0) * var_chaste_interface__ryanodine_receptors__P_O1; // 1 / millisecond
        const double d_dt_chaste_interface_var_slow_delayed_rectifier_potassium_current__nKs = (1.0 - var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs) * _lt_0_row[31] - 9.5333299999999997e-5 * var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs * _lt_0_row[32]; // 1 / millisecond
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs, 2) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[12]; // picoA_per_picoF
        const double var_fast_sodium_current__E_Na = 25.674321243523316 * log(mParameters[4] / var_chaste_interface__sodium_concentration__Nai); // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * mParameters[7] * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // picoA_per_picoF
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__membrane__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NaCa = 907.67999999999995 * (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * _lt_0_row[2] - pow(mParameters[4], 3) * var_calcium_concentration__Cai * _lt_0_row[3]) / ((_lt_0_row[4]) * (1380.0 + mParameters[1]) * (669921875000000.0 + pow(mParameters[4], 3))); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = 0.88 * mParameters[3] / ((1.0 + 3043189.1166997822 * pow((1 / var_chaste_interface__sodium_concentration__Nai), 1.5)) * (1500.0 + mParameters[3]) * (1.0 + _lt_0_row[6] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[4])) * _lt_0_row[5])); // picoA_per_picoF
        const double d_dt_chaste_interface_var_sodium_concentration__Nai = 0.069959309196085367 * (-var_fast_sodium_current__i_Na - var_sodium_background_current__i_Nab - 3.0 * var_sodium_calcium_exchange_current__i_NaCa - 3.0 * var_sodium_potassium_pump_current__i_NaK) * mParameters[6]; // micromolar / millisecond
        const double var_time_independent_potassium_current__i_K1 = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[3] * mParameters[9] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__membrane__V - 0.089599999999999999 * var_fast_transient_outward_potassium_current__E_K)) * (210.0 + mParameters[3])); // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_potassium_current__ass = _lt_0_row[33]; // dimensionless
        const double d_dt_chaste_interface_var_non_inactivating_steady_state_potassium_current__aKss = (-var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss + var_ultra_rapidly_activating_delayed_rectifier_potassium_current__ass) / (_lt_0_row[34]); // 1 / millisecond
        const double var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur * mParameters[13] * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur; // picoA_per_picoF
        const double d_dt_chaste_interface_var_potassium_concentration__Ki = 0.069959309196085367 * (-var_fast_transient_outward_potassium_current__i_Kto_f - var_non_inactivating_steady_state_potassium_current__i_Kss - var_rapid_delayed_rectifier_potassium_current__i_Kr - var_slow_delayed_rectifier_potassium_current__i_Ks - var_time_independent_potassium_current__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur + 2.0 * var_sodium_potassium_pump_current__i_NaK) * mParameters[6]; // micromolar / millisecond
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_potassium_current__aur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur + var_ultra_rapidly_activating_delayed_rectifier_potassium_current__ass) / (_lt_0_row[35]); // 1 / millisecond
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_potassium_current__iur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur + _lt_0_row[36]) / (_lt_0_row[37]); // 1 / millisecond
        
        mEvalF[1] = d_dt_chaste_interface_var_calcium_concentration__Cai_converted;
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__environment__time, rY, delta);
        mEvalF[2] = d_dt_chaste_interface_var_calcium_concentration__Cass;
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__environment__time, rY, delta);
        mEvalF[3] = d_dt_chaste_interface_var_calcium_concentration__CaJSR;
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__environment__time, rY, delta);
        mEvalF[4] = d_dt_chaste_interface_var_calcium_concentration__CaNSR;
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__environment__time, rY, delta);
        mEvalF[5] = d_dt_chaste_interface_var_calcium_fluxes__P_RyR;
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__environment__time, rY, delta);
        mEvalF[6] = d_dt_chaste_interface_var_calcium_buffering__LTRPN_Ca;
        mPartialF[6] = EvaluatePartialDerivative6(var_chaste_interface__environment__time, rY, delta);
        mEvalF[7] = d_dt_chaste_interface_var_calcium_buffering__HTRPN_Ca;
        mPartialF[7] = EvaluatePartialDerivative7(var_chaste_interface__environment__time, rY, delta);
        mEvalF[8] = d_dt_chaste_interface_var_ryanodine_receptors__P_O1;
        mPartialF[8] = EvaluatePartialDerivative8(var_chaste_interface__environment__time, rY, delta);
        mEvalF[9] = d_dt_chaste_interface_var_ryanodine_receptors__P_O2;
        mPartialF[9] = EvaluatePartialDerivative9(var_chaste_interface__environment__time, rY, delta);
        mEvalF[10] = d_dt_chaste_interface_var_ryanodine_receptors__P_C2;
        mPartialF[10] = EvaluatePartialDerivative10(var_chaste_interface__environment__time, rY, delta);
        mEvalF[11] = d_dt_chaste_interface_var_L_type_calcium_current__O;
        mPartialF[11] = EvaluatePartialDerivative11(var_chaste_interface__environment__time, rY, delta);
        mEvalF[12] = d_dt_chaste_interface_var_L_type_calcium_current__C2;
        mPartialF[12] = EvaluatePartialDerivative12(var_chaste_interface__environment__time, rY, delta);
        mEvalF[13] = d_dt_chaste_interface_var_L_type_calcium_current__C3;
        mPartialF[13] = EvaluatePartialDerivative13(var_chaste_interface__environment__time, rY, delta);
        mEvalF[14] = d_dt_chaste_interface_var_L_type_calcium_current__C4;
        mPartialF[14] = EvaluatePartialDerivative14(var_chaste_interface__environment__time, rY, delta);
        mEvalF[15] = d_dt_chaste_interface_var_L_type_calcium_current__I1;
        mPartialF[15] = EvaluatePartialDerivative15(var_chaste_interface__environment__time, rY, delta);
        mEvalF[16] = d_dt_chaste_interface_var_L_type_calcium_current__I2;
        mPartialF[16] = EvaluatePartialDerivative16(var_chaste_interface__environment__time, rY, delta);
        mEvalF[17] = d_dt_chaste_interface_var_L_type_calcium_current__I3;
        mPartialF[17] = EvaluatePartialDerivative17(var_chaste_interface__environment__time, rY, delta);
        mEvalF[18] = d_dt_chaste_interface_var_T_type_calcium_current_b_gate__b;
        mPartialF[18] = EvaluatePartialDerivative18(var_chaste_interface__environment__time, rY, delta);
        mEvalF[19] = d_dt_chaste_interface_var_T_type_calcium_current_g_gate__g;
        mPartialF[19] = EvaluatePartialDerivative19(var_chaste_interface__environment__time, rY, delta);
        mEvalF[20] = d_dt_chaste_interface_var_sodium_concentration__Nai;
        mPartialF[20] = EvaluatePartialDerivative20(var_chaste_interface__environment__time, rY, delta);
        mEvalF[21] = d_dt_chaste_interface_var_fast_sodium_current_m_gate__m;
        mPartialF[21] = EvaluatePartialDerivative21(var_chaste_interface__environment__time, rY, delta);
        mEvalF[22] = d_dt_chaste_interface_var_fast_sodium_current_h_gate__h;
        mPartialF[22] = EvaluatePartialDerivative22(var_chaste_interface__environment__time, rY, delta);
        mEvalF[23] = d_dt_chaste_interface_var_fast_sodium_current_j_gate__j;
        mPartialF[23] = EvaluatePartialDerivative23(var_chaste_interface__environment__time, rY, delta);
        mEvalF[24] = d_dt_chaste_interface_var_potassium_concentration__Ki;
        mPartialF[24] = EvaluatePartialDerivative24(var_chaste_interface__environment__time, rY, delta);
        mEvalF[25] = d_dt_chaste_interface_var_fast_transient_outward_potassium_current__ato_f;
        mPartialF[25] = EvaluatePartialDerivative25(var_chaste_interface__environment__time, rY, delta);
        mEvalF[26] = d_dt_chaste_interface_var_fast_transient_outward_potassium_current__ito_f;
        mPartialF[26] = EvaluatePartialDerivative26(var_chaste_interface__environment__time, rY, delta);
        mEvalF[27] = d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_potassium_current__aur;
        mPartialF[27] = EvaluatePartialDerivative27(var_chaste_interface__environment__time, rY, delta);
        mEvalF[28] = d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_potassium_current__iur;
        mPartialF[28] = EvaluatePartialDerivative28(var_chaste_interface__environment__time, rY, delta);
        mEvalF[29] = d_dt_chaste_interface_var_non_inactivating_steady_state_potassium_current__aKss;
        mPartialF[29] = EvaluatePartialDerivative29(var_chaste_interface__environment__time, rY, delta);
        mEvalF[30] = d_dt_chaste_interface_var_slow_delayed_rectifier_potassium_current__nKs;
        mPartialF[30] = EvaluatePartialDerivative30(var_chaste_interface__environment__time, rY, delta);
        mEvalF[31] = d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__O_K;
        mPartialF[31] = EvaluatePartialDerivative31(var_chaste_interface__environment__time, rY, delta);
        mEvalF[32] = d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__C_K1;
        mPartialF[32] = EvaluatePartialDerivative32(var_chaste_interface__environment__time, rY, delta);
        mEvalF[33] = d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__C_K2;
        mPartialF[33] = EvaluatePartialDerivative33(var_chaste_interface__environment__time, rY, delta);
        mEvalF[34] = d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__I_K;
        mPartialF[34] = EvaluatePartialDerivative34(var_chaste_interface__environment__time, rY, delta);
        
        {
            if (fabs(mPartialF[1]) < delta){
                rY[1] += mDt*d_dt_chaste_interface_var_calcium_concentration__Cai_converted;
            }
            else
            {
                rY[1] += (d_dt_chaste_interface_var_calcium_concentration__Cai_converted/mPartialF[1])*(exp(mPartialF[1]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[2]) < delta){
                rY[2] += mDt*d_dt_chaste_interface_var_calcium_concentration__Cass;
            }
            else
            {
                rY[2] += (d_dt_chaste_interface_var_calcium_concentration__Cass/mPartialF[2])*(exp(mPartialF[2]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[3]) < delta){
                rY[3] += mDt*d_dt_chaste_interface_var_calcium_concentration__CaJSR;
            }
            else
            {
                rY[3] += (d_dt_chaste_interface_var_calcium_concentration__CaJSR/mPartialF[3])*(exp(mPartialF[3]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[4]) < delta){
                rY[4] += mDt*d_dt_chaste_interface_var_calcium_concentration__CaNSR;
            }
            else
            {
                rY[4] += (d_dt_chaste_interface_var_calcium_concentration__CaNSR/mPartialF[4])*(exp(mPartialF[4]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[5]) < delta){
                rY[5] += mDt*d_dt_chaste_interface_var_calcium_fluxes__P_RyR;
            }
            else
            {
                rY[5] += (d_dt_chaste_interface_var_calcium_fluxes__P_RyR/mPartialF[5])*(exp(mPartialF[5]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[6]) < delta){
                rY[6] += mDt*d_dt_chaste_interface_var_calcium_buffering__LTRPN_Ca;
            }
            else
            {
                rY[6] += (d_dt_chaste_interface_var_calcium_buffering__LTRPN_Ca/mPartialF[6])*(exp(mPartialF[6]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[7]) < delta){
                rY[7] += mDt*d_dt_chaste_interface_var_calcium_buffering__HTRPN_Ca;
            }
            else
            {
                rY[7] += (d_dt_chaste_interface_var_calcium_buffering__HTRPN_Ca/mPartialF[7])*(exp(mPartialF[7]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[8]) < delta){
                rY[8] += mDt*d_dt_chaste_interface_var_ryanodine_receptors__P_O1;
            }
            else
            {
                rY[8] += (d_dt_chaste_interface_var_ryanodine_receptors__P_O1/mPartialF[8])*(exp(mPartialF[8]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[9]) < delta){
                rY[9] += mDt*d_dt_chaste_interface_var_ryanodine_receptors__P_O2;
            }
            else
            {
                rY[9] += (d_dt_chaste_interface_var_ryanodine_receptors__P_O2/mPartialF[9])*(exp(mPartialF[9]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[10]) < delta){
                rY[10] += mDt*d_dt_chaste_interface_var_ryanodine_receptors__P_C2;
            }
            else
            {
                rY[10] += (d_dt_chaste_interface_var_ryanodine_receptors__P_C2/mPartialF[10])*(exp(mPartialF[10]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[11]) < delta){
                rY[11] += mDt*d_dt_chaste_interface_var_L_type_calcium_current__O;
            }
            else
            {
                rY[11] += (d_dt_chaste_interface_var_L_type_calcium_current__O/mPartialF[11])*(exp(mPartialF[11]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[12]) < delta){
                rY[12] += mDt*d_dt_chaste_interface_var_L_type_calcium_current__C2;
            }
            else
            {
                rY[12] += (d_dt_chaste_interface_var_L_type_calcium_current__C2/mPartialF[12])*(exp(mPartialF[12]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[13]) < delta){
                rY[13] += mDt*d_dt_chaste_interface_var_L_type_calcium_current__C3;
            }
            else
            {
                rY[13] += (d_dt_chaste_interface_var_L_type_calcium_current__C3/mPartialF[13])*(exp(mPartialF[13]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[14]) < delta){
                rY[14] += mDt*d_dt_chaste_interface_var_L_type_calcium_current__C4;
            }
            else
            {
                rY[14] += (d_dt_chaste_interface_var_L_type_calcium_current__C4/mPartialF[14])*(exp(mPartialF[14]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[15]) < delta){
                rY[15] += mDt*d_dt_chaste_interface_var_L_type_calcium_current__I1;
            }
            else
            {
                rY[15] += (d_dt_chaste_interface_var_L_type_calcium_current__I1/mPartialF[15])*(exp(mPartialF[15]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[16]) < delta){
                rY[16] += mDt*d_dt_chaste_interface_var_L_type_calcium_current__I2;
            }
            else
            {
                rY[16] += (d_dt_chaste_interface_var_L_type_calcium_current__I2/mPartialF[16])*(exp(mPartialF[16]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[17]) < delta){
                rY[17] += mDt*d_dt_chaste_interface_var_L_type_calcium_current__I3;
            }
            else
            {
                rY[17] += (d_dt_chaste_interface_var_L_type_calcium_current__I3/mPartialF[17])*(exp(mPartialF[17]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[18]) < delta){
                rY[18] += mDt*d_dt_chaste_interface_var_T_type_calcium_current_b_gate__b;
            }
            else
            {
                rY[18] += (d_dt_chaste_interface_var_T_type_calcium_current_b_gate__b/mPartialF[18])*(exp(mPartialF[18]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[19]) < delta){
                rY[19] += mDt*d_dt_chaste_interface_var_T_type_calcium_current_g_gate__g;
            }
            else
            {
                rY[19] += (d_dt_chaste_interface_var_T_type_calcium_current_g_gate__g/mPartialF[19])*(exp(mPartialF[19]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[20]) < delta){
                rY[20] += mDt*d_dt_chaste_interface_var_sodium_concentration__Nai;
            }
            else
            {
                rY[20] += (d_dt_chaste_interface_var_sodium_concentration__Nai/mPartialF[20])*(exp(mPartialF[20]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[21]) < delta){
                rY[21] += mDt*d_dt_chaste_interface_var_fast_sodium_current_m_gate__m;
            }
            else
            {
                rY[21] += (d_dt_chaste_interface_var_fast_sodium_current_m_gate__m/mPartialF[21])*(exp(mPartialF[21]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[22]) < delta){
                rY[22] += mDt*d_dt_chaste_interface_var_fast_sodium_current_h_gate__h;
            }
            else
            {
                rY[22] += (d_dt_chaste_interface_var_fast_sodium_current_h_gate__h/mPartialF[22])*(exp(mPartialF[22]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[23]) < delta){
                rY[23] += mDt*d_dt_chaste_interface_var_fast_sodium_current_j_gate__j;
            }
            else
            {
                rY[23] += (d_dt_chaste_interface_var_fast_sodium_current_j_gate__j/mPartialF[23])*(exp(mPartialF[23]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[24]) < delta){
                rY[24] += mDt*d_dt_chaste_interface_var_potassium_concentration__Ki;
            }
            else
            {
                rY[24] += (d_dt_chaste_interface_var_potassium_concentration__Ki/mPartialF[24])*(exp(mPartialF[24]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[25]) < delta){
                rY[25] += mDt*d_dt_chaste_interface_var_fast_transient_outward_potassium_current__ato_f;
            }
            else
            {
                rY[25] += (d_dt_chaste_interface_var_fast_transient_outward_potassium_current__ato_f/mPartialF[25])*(exp(mPartialF[25]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[26]) < delta){
                rY[26] += mDt*d_dt_chaste_interface_var_fast_transient_outward_potassium_current__ito_f;
            }
            else
            {
                rY[26] += (d_dt_chaste_interface_var_fast_transient_outward_potassium_current__ito_f/mPartialF[26])*(exp(mPartialF[26]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[27]) < delta){
                rY[27] += mDt*d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_potassium_current__aur;
            }
            else
            {
                rY[27] += (d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_potassium_current__aur/mPartialF[27])*(exp(mPartialF[27]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[28]) < delta){
                rY[28] += mDt*d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_potassium_current__iur;
            }
            else
            {
                rY[28] += (d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_potassium_current__iur/mPartialF[28])*(exp(mPartialF[28]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[29]) < delta){
                rY[29] += mDt*d_dt_chaste_interface_var_non_inactivating_steady_state_potassium_current__aKss;
            }
            else
            {
                rY[29] += (d_dt_chaste_interface_var_non_inactivating_steady_state_potassium_current__aKss/mPartialF[29])*(exp(mPartialF[29]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[30]) < delta){
                rY[30] += mDt*d_dt_chaste_interface_var_slow_delayed_rectifier_potassium_current__nKs;
            }
            else
            {
                rY[30] += (d_dt_chaste_interface_var_slow_delayed_rectifier_potassium_current__nKs/mPartialF[30])*(exp(mPartialF[30]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[31]) < delta){
                rY[31] += mDt*d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__O_K;
            }
            else
            {
                rY[31] += (d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__O_K/mPartialF[31])*(exp(mPartialF[31]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[32]) < delta){
                rY[32] += mDt*d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__C_K1;
            }
            else
            {
                rY[32] += (d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__C_K1/mPartialF[32])*(exp(mPartialF[32]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[33]) < delta){
                rY[33] += mDt*d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__C_K2;
            }
            else
            {
                rY[33] += (d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__C_K2/mPartialF[33])*(exp(mPartialF[33]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[34]) < delta){
                rY[34] += mDt*d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__I_K;
            }
            else
            {
                rY[34] += (d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__I_K/mPartialF[34])*(exp(mPartialF[34]*mDt)-1.0);
            }
            
        }        
        
    }
   
    
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        double d_dt_chaste_interface_var_membrane__V;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 0.0002049
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.1867
        double var_chaste_interface__L_type_calcium_current__O = rY[11];
        // Units: dimensionless; Initial value: 4.4776e-12
        double var_chaste_interface__T_type_calcium_current_b_gate__b = rY[18];
        // Units: dimensionless; Initial value: 0.0047
        double var_chaste_interface__T_type_calcium_current_g_gate__g = rY[19];
        // Units: dimensionless; Initial value: 0.902
        double var_chaste_interface__sodium_concentration__Nai = rY[20];
        // Units: micromolar; Initial value: 21747.0
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[21];
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[22];
        // Units: dimensionless; Initial value: 0.9606
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[23];
        // Units: dimensionless; Initial value: 0.9744
        double var_chaste_interface__potassium_concentration__Ki = rY[24];
        // Units: micromolar; Initial value: 136450.0
        double var_chaste_interface__fast_transient_outward_potassium_current__ato_f = rY[25];
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_transient_outward_potassium_current__ito_f = rY[26];
        // Units: dimensionless; Initial value: 0.753
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur = rY[27];
        // Units: dimensionless; Initial value: 0.00052471
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur = rY[28];
        // Units: dimensionless; Initial value: 0.9866
        double var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss = rY[29];
        // Units: dimensionless; Initial value: 0.85
        double var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs = rY[30];
        // Units: dimensionless; Initial value: 0.0026
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K = rY[31];
        // Units: dimensionless; Initial value: 0.0021
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_pump_current__i_pCa = 0.20000000000000001 * pow(var_calcium_concentration__Cai, 2) / (0.25 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL = 0.19019 * (-63.0 + var_chaste_interface__membrane__V) * var_chaste_interface__L_type_calcium_current__O; // picoA_per_picoF
        const double var_T_type_calcium_current__i_CaT = 0.055 * (-50.0 + var_chaste_interface__membrane__V) * var_chaste_interface__T_type_calcium_current_b_gate__b * var_chaste_interface__T_type_calcium_current_g_gate__g; // picoA_per_picoF
        const double var_calcium_background_current__i_Cab = 0.00025000000000000001 * var_chaste_interface__membrane__V - 0.0032092901554404145 * log(mParameters[1] / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_fast_transient_outward_potassium_current__E_K = 25.674321243523316 * log(mParameters[3] / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_potassium_current__i_Kto_f = pow(var_chaste_interface__fast_transient_outward_potassium_current__ato_f, 6.5) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[8] * var_chaste_interface__fast_transient_outward_potassium_current__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_potassium_current__i_Kss = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss * mParameters[10]; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * mParameters[11]; // picoA_per_picoF
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs, 2) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[12]; // picoA_per_picoF
        const double var_fast_sodium_current__E_Na = 25.674321243523316 * log(mParameters[4] / var_chaste_interface__sodium_concentration__Nai); // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * mParameters[7] * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // picoA_per_picoF
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__membrane__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NaCa = 907.67999999999995 * (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * _lt_0_row[2] - pow(mParameters[4], 3) * var_calcium_concentration__Cai * _lt_0_row[3]) / ((_lt_0_row[4]) * (1380.0 + mParameters[1]) * (669921875000000.0 + pow(mParameters[4], 3))); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = 0.88 * mParameters[3] / ((1.0 + 3043189.1166997822 * pow((1 / var_chaste_interface__sodium_concentration__Nai), 1.5)) * (1500.0 + mParameters[3]) * (1.0 + _lt_0_row[6] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[4])) * _lt_0_row[5])); // picoA_per_picoF
        const double var_time_independent_potassium_current__i_K1 = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[3] * mParameters[9] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__membrane__V - 0.089599999999999999 * var_fast_transient_outward_potassium_current__E_K)) * (210.0 + mParameters[3])); // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur * mParameters[13] * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur; // picoA_per_picoF
        d_dt_chaste_interface_var_membrane__V = -((fabs(var_chaste_interface__membrane__V) < 2.5674321243523316e-6) ? (194747.11532096748 * (2.5674321243523316e-6 + var_chaste_interface__membrane__V) * (4.1314062499999994e-14 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-mParameters[0] + mParameters[2] * exp(9.9999999999999995e-8)) / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (-1.0 + exp(9.9999999999999995e-8))) + 4.1314062499999994e-14 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-mParameters[0] + mParameters[2] * exp(-9.9999999999999995e-8)) / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (-1.0 + exp(-9.9999999999999995e-8)))) - 4.1314062499999994e-14 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-mParameters[0] + mParameters[2] * exp(-9.9999999999999995e-8)) / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (-1.0 + exp(-9.9999999999999995e-8)))) : (1.6091588988130313e-8 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-mParameters[0] + mParameters[2] * _lt_0_row[0]) * var_chaste_interface__membrane__V / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (_lt_0_row[1])))) - var_L_type_calcium_current__i_CaL - var_T_type_calcium_current__i_CaT - var_calcium_background_current__i_Cab - var_calcium_pump_current__i_pCa - var_fast_sodium_current__i_Na - var_fast_transient_outward_potassium_current__i_Kto_f - var_non_inactivating_steady_state_potassium_current__i_Kss - var_rapid_delayed_rectifier_potassium_current__i_Kr - var_slow_delayed_rectifier_potassium_current__i_Ks - var_sodium_background_current__i_Nab - var_sodium_calcium_exchange_current__i_NaCa - var_sodium_potassium_pump_current__i_NaK - var_time_independent_potassium_current__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur - GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // millivolt / millisecond

        return d_dt_chaste_interface_var_membrane__V;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
            // Units: millimolar; Initial value: 0.0002049
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.1867
            double var_chaste_interface__L_type_calcium_current__O = rY[11];
            // Units: dimensionless; Initial value: 4.4776e-12
            double var_chaste_interface__T_type_calcium_current_b_gate__b = rY[18];
            // Units: dimensionless; Initial value: 0.0047
            double var_chaste_interface__T_type_calcium_current_g_gate__g = rY[19];
            // Units: dimensionless; Initial value: 0.902
            double var_chaste_interface__sodium_concentration__Nai = rY[20];
            // Units: micromolar; Initial value: 21747.0
            double var_chaste_interface__fast_sodium_current_m_gate__m = rY[21];
            // Units: dimensionless; Initial value: 0.0032
            double var_chaste_interface__fast_sodium_current_h_gate__h = rY[22];
            // Units: dimensionless; Initial value: 0.9606
            double var_chaste_interface__fast_sodium_current_j_gate__j = rY[23];
            // Units: dimensionless; Initial value: 0.9744
            double var_chaste_interface__potassium_concentration__Ki = rY[24];
            // Units: micromolar; Initial value: 136450.0
            double var_chaste_interface__fast_transient_outward_potassium_current__ato_f = rY[25];
            // Units: dimensionless; Initial value: 0.0032
            double var_chaste_interface__fast_transient_outward_potassium_current__ito_f = rY[26];
            // Units: dimensionless; Initial value: 0.753
            double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur = rY[27];
            // Units: dimensionless; Initial value: 0.00052471
            double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur = rY[28];
            // Units: dimensionless; Initial value: 0.9866
            double var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss = rY[29];
            // Units: dimensionless; Initial value: 0.85
            double var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs = rY[30];
            // Units: dimensionless; Initial value: 0.0026
            double var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K = rY[31];
            // Units: dimensionless; Initial value: 0.0021
            

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

            const double var_x0 = 1 + 0.25 * var_chaste_interface__calcium_concentration__Cass;
            const double var_x1 = pow(var_x0, (-3));
            const double var_x2 = pow(var_chaste_interface__calcium_concentration__Cass, 3);
            const double var_x3 = var_x1 * var_x2;
            const double var_x4 = 8.0457944940651565e-9 * var_x3;
            const double var_x5 = exp(9.9999999999999995e-8);
            const double var_x6 = -mParameters[0];
            const double var_x7 = (var_x6 + var_x5 * mParameters[2]) / (-1.0 + var_x5);
            const double var_x8 = exp(-9.9999999999999995e-8);
            const double var_x9 = (var_x6 + var_x8 * mParameters[2]) / (-1.0 + var_x8);
            const double var_x10 = 0.19019 * var_chaste_interface__L_type_calcium_current__O;
            const double var_x11 = pow(var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs, 2) * mParameters[12];
            const double var_x12 = var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss * mParameters[10];
            const double var_x13 = var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * mParameters[11];
            const double var_x14 = var_chaste_interface__T_type_calcium_current_b_gate__b * var_chaste_interface__T_type_calcium_current_g_gate__g;
            const double var_x15 = 0.055 * var_x14;
            const double var_x16 = pow(var_chaste_interface__fast_transient_outward_potassium_current__ato_f, 6.5) * mParameters[8];
            const double var_x17 = var_x16 * var_chaste_interface__fast_transient_outward_potassium_current__ito_f;
            const double var_x18 = mParameters[13] * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur;
            const double var_x19 = var_x18 * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur;
            const double var_x20 = 1 / var_chaste_interface__potassium_concentration__Ki;
            const double var_x21 = var_x20 * mParameters[3];
            const double var_x22 = log(var_x21);
            const double var_x23 = exp(0.089599999999999999 * var_chaste_interface__membrane__V - 2.300419183419689 * var_x22);
            const double var_x24 = 1.0 + var_x23;
            const double var_x25 = mParameters[9] / (210.0 + mParameters[3]);
            const double var_x26 = var_x25 / var_x24;
            const double var_x27 = var_x26 * mParameters[3];
            const double var_x28 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3);
            const double var_x29 = var_x28 * mParameters[7] * var_chaste_interface__fast_sodium_current_j_gate__j;
            const double var_x30 = var_x29 * var_chaste_interface__fast_sodium_current_h_gate__h;
            const double var_x31 = _lt_0_row[3];
            const double var_x32 = pow(mParameters[4], 3);
            const double var_x33 = var_x31 * var_x32;
            const double var_x34 = var_x33 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x35 = mParameters[1] * _lt_0_row[2];
            const double var_x36 = var_x35 * pow(var_chaste_interface__sodium_concentration__Nai, 3);
            const double var_x37 = 1.0 + 0.10000000000000001 * var_x31;
            const double var_x38 = 1 / ((1380.0 + mParameters[1]) * (669921875000000.0 + var_x32));
            const double var_x39 = var_x38 / var_x37;
            const double var_x40 = var_x39 * (25.31712499172577 * var_x34 + 0.013632298072467722 * var_x36);
            const double var_x41 = 1 / var_chaste_interface__sodium_concentration__Nai;
            const double var_x42 = pow(var_x41, 1.5);
            const double var_x43 = exp(-0.0038949423064193493 * var_chaste_interface__membrane__V);
            const double var_x44 = exp(1.4858841010401188e-5 * mParameters[4]);
            const double var_x45 = 0.038949423064193495 * var_chaste_interface__membrane__V;
            const double var_x46 = exp(-var_x45);
            const double var_x47 = 1.0 + 0.1245 * var_x43 + 0.036499999999999998 * var_x46 * (-0.14285714285714285 + 0.14285714285714285 * var_x44);
            const double var_x48 = mParameters[3] / (1500.0 + mParameters[3]);
            const double var_x49 = var_x48 * (0.00048492031714920898 * var_x43 + 0.038949423064193495 * var_x46 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x44)) / (pow(var_x47, 2) * (1.0 + 3043189.1166997822 * var_x42));
            const double var_x50 = var_x31 * var_x38 * (var_x36 - 1000.0 * var_x34) / pow(var_x37, 2);
            const double var_x51 = 25.674321243523316 * var_x22;
            const double var_x52 = -var_x51 + var_chaste_interface__membrane__V;
            const double var_x53 = var_x23 * var_x25 * var_x52 / pow(var_x24, 2);
            const double var_x54 = var_x53 * mParameters[3];
            const double var_x55 = -0.0028500000000000001 - var_x10 - var_x11 - var_x12 - var_x13 - var_x15 - var_x17 - var_x19 - var_x27 - var_x30 + 0.089599999999999999 * var_x54 - 0.88 * var_x49 - 907.67999999999995 * var_x40 - 2.297984801248965 * var_x50;
            const double var_x56 = fabs(var_chaste_interface__membrane__V) < 2.5674321243523316e-6;
            const double var_x57 = exp(var_x45);
            const double var_x58 = -1.0 + var_x57;
            const double var_x59 = 1 / var_x58;
            const double var_x60 = var_x57 * mParameters[2];
            const double var_x61 = var_x6 + var_x60;
            const double var_x62 = var_x59 * var_x61;
            const double var_x63 = 6.2675810727380489e-10 * var_x3 * var_chaste_interface__membrane__V;
            
            partialF = ((var_x56) ? (var_x55 - var_x4 * var_x7 - var_x4 * var_x9) : (var_x55 - 1.6091588988130313e-8 * var_x3 * var_x62 - var_x59 * var_x60 * var_x63 + var_x57 * var_x61 * var_x63 / pow(var_x58, 2)));
        }
        else
        {
            const double y_save = rY[0];
            rY[0] += delta;
            const double temp = EvaluateYDerivative0(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[0])/delta;
            rY[0] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 0.0002049
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.1867
        double var_chaste_interface__calcium_concentration__CaNSR = rY[4];
        // Units: micromolar; Initial value: 703.3063
        double var_chaste_interface__calcium_buffering__LTRPN_Ca = rY[6];
        // Units: micromolar; Initial value: 8.922
        double var_chaste_interface__calcium_buffering__HTRPN_Ca = rY[7];
        // Units: micromolar; Initial value: 66.0407
        


        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__J_xfer = 0.125 * var_chaste_interface__calcium_concentration__Cass - 0.125 * var_calcium_concentration__Cai; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_leak = 2.088e-5 * var_chaste_interface__calcium_concentration__CaNSR - 2.088e-5 * var_calcium_concentration__Cai; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_up = 0.089999999999999997 * pow(var_calcium_concentration__Cai, 2) / (0.25 + pow(var_calcium_concentration__Cai, 2)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__Cai_converted = 0.001 * (-var_calcium_fluxes__J_up + 0.019599999999999999 * var_chaste_interface__calcium_buffering__LTRPN_Ca + 3.1999999999999999e-5 * var_chaste_interface__calcium_buffering__HTRPN_Ca - 0.0327 * (35.0 - var_chaste_interface__calcium_buffering__LTRPN_Ca) * var_calcium_concentration__Cai - 0.0023700000000000001 * (70.0 - var_chaste_interface__calcium_buffering__HTRPN_Ca) * var_calcium_concentration__Cai + var_calcium_fluxes__J_leak + var_calcium_fluxes__J_xfer) / (1.0 + 5.9499999999999993 / pow((0.23799999999999999 + var_calcium_concentration__Cai), 2)); // millimolar / millisecond

        return d_dt_chaste_interface_var_calcium_concentration__Cai_converted;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
            // Units: millimolar; Initial value: 0.0002049
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.1867
            double var_chaste_interface__calcium_concentration__CaNSR = rY[4];
            // Units: micromolar; Initial value: 703.3063
            double var_chaste_interface__calcium_buffering__LTRPN_Ca = rY[6];
            // Units: micromolar; Initial value: 8.922
            double var_chaste_interface__calcium_buffering__HTRPN_Ca = rY[7];
            // Units: micromolar; Initial value: 66.0407
            


            const double var_x65 = pow(var_chaste_interface__calcium_concentration__Cai_converted, 2);
            const double var_x66 = pow(var_chaste_interface__calcium_concentration__Cai_converted, 3) / pow((2.4999999999999999e-7 + var_x65), 2);
            const double var_x67 = 1 / (0.25 + 1000000.0 * var_x65);
            const double var_x68 = var_x67 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x98 = 32.699999999999996 * var_chaste_interface__calcium_buffering__LTRPN_Ca;
            const double var_x99 = 2.3700000000000001 * var_chaste_interface__calcium_buffering__HTRPN_Ca;
            const double var_x100 = 0.00023799999999999998 + var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x101 = 1.0 + 5.9499999999999998e-6 / pow(var_x100, 2);
            const double var_x102 = 1 / var_x101;
            const double var_x103 = 0.001 * var_x102;
            const double var_x104 = 0.125 * var_chaste_interface__calcium_concentration__Cass;
            const double var_x105 = var_x65 * var_x67;
            const double var_x106 = 32.699999999999996 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x107 = 2.3700000000000001 * var_chaste_interface__calcium_concentration__Cai_converted;
            
            partialF = var_x103 * (-1435.4208799999999 + var_x98 + var_x99 + 0.17999999999999999 * var_x66 - 180000.0 * var_x68) + 1.1900000000000001e-8 * (var_x104 + 0.019599999999999999 * var_chaste_interface__calcium_buffering__LTRPN_Ca + 3.1999999999999999e-5 * var_chaste_interface__calcium_buffering__HTRPN_Ca + 2.088e-5 * var_chaste_interface__calcium_concentration__CaNSR - 90000.0 * var_x105 - 125.02087999999999 * var_chaste_interface__calcium_concentration__Cai_converted - var_x106 * (35.0 - var_chaste_interface__calcium_buffering__LTRPN_Ca) - var_x107 * (70.0 - var_chaste_interface__calcium_buffering__HTRPN_Ca)) / (pow(var_x100, 3) * pow(var_x101, 2));
        }
        else
        {
            const double y_save = rY[1];
            rY[1] += delta;
            const double temp = EvaluateYDerivative1(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[1])/delta;
            rY[1] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 0.0002049
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.1867
        double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
        // Units: micromolar; Initial value: 705.5417
        double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
        // Units: dimensionless; Initial value: 2.8603e-14
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[8];
        // Units: dimensionless; Initial value: 0.0011
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[9];
        // Units: dimensionless; Initial value: 2.9799e-08
        double var_chaste_interface__L_type_calcium_current__O = rY[11];
        // Units: dimensionless; Initial value: 4.4776e-12
        double var_chaste_interface__T_type_calcium_current_b_gate__b = rY[18];
        // Units: dimensionless; Initial value: 0.0047
        double var_chaste_interface__T_type_calcium_current_g_gate__g = rY[19];
        // Units: dimensionless; Initial value: 0.902
        


        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__J_xfer = 0.125 * var_chaste_interface__calcium_concentration__Cass - 0.125 * var_calcium_concentration__Cai; // micromolar_per_millisecond
        const double var_calcium_pump_current__i_pCa = 0.20000000000000001 * pow(var_calcium_concentration__Cai, 2) / (0.25 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL = 0.19019 * (-63.0 + var_chaste_interface__membrane__V) * var_chaste_interface__L_type_calcium_current__O; // picoA_per_picoF
        const double var_T_type_calcium_current__i_CaT = 0.055 * (-50.0 + var_chaste_interface__membrane__V) * var_chaste_interface__T_type_calcium_current_b_gate__b * var_chaste_interface__T_type_calcium_current_g_gate__g; // picoA_per_picoF
        const double var_calcium_background_current__i_Cab = 0.00025000000000000001 * var_chaste_interface__membrane__V - 0.0032092901554404145 * log(mParameters[1] / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_calcium_fluxes__J_rel = 0.45000000000000001 * (-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * (var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2) * var_chaste_interface__calcium_fluxes__P_RyR; // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__Cass = (0.03904470618858593 * var_calcium_fluxes__J_rel - 74.269538621721864 * var_calcium_fluxes__J_xfer - 2.5979228081438217 * (-var_T_type_calcium_current__i_CaT + var_L_type_calcium_current__i_CaL + var_calcium_background_current__i_Cab + var_calcium_pump_current__i_pCa) * mParameters[6]) / (1.0 + 5.9499999999999993 / pow((0.23799999999999999 + var_chaste_interface__calcium_concentration__Cass), 2)); // micromolar / millisecond

        return d_dt_chaste_interface_var_calcium_concentration__Cass;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
            // Units: millimolar; Initial value: 0.0002049
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.1867
            double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
            // Units: micromolar; Initial value: 705.5417
            double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
            // Units: dimensionless; Initial value: 2.8603e-14
            double var_chaste_interface__ryanodine_receptors__P_O1 = rY[8];
            // Units: dimensionless; Initial value: 0.0011
            double var_chaste_interface__ryanodine_receptors__P_O2 = rY[9];
            // Units: dimensionless; Initial value: 2.9799e-08
            double var_chaste_interface__L_type_calcium_current__O = rY[11];
            // Units: dimensionless; Initial value: 4.4776e-12
            double var_chaste_interface__T_type_calcium_current_b_gate__b = rY[18];
            // Units: dimensionless; Initial value: 0.0047
            double var_chaste_interface__T_type_calcium_current_g_gate__g = rY[19];
            // Units: dimensionless; Initial value: 0.902
            


            const double var_x10 = 0.19019 * var_chaste_interface__L_type_calcium_current__O;
            const double var_x14 = var_chaste_interface__T_type_calcium_current_b_gate__b * var_chaste_interface__T_type_calcium_current_g_gate__g;
            const double var_x15 = 0.055 * var_x14;
            const double var_x64 = 1 / var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x65 = pow(var_chaste_interface__calcium_concentration__Cai_converted, 2);
            const double var_x67 = 1 / (0.25 + 1000000.0 * var_x65);
            const double var_x105 = var_x65 * var_x67;
            const double var_x108 = 0.23799999999999999 + var_chaste_interface__calcium_concentration__Cass;
            const double var_x109 = pow(var_x108, (-2));
            const double var_x110 = 1 / (1.0 + 5.9499999999999993 * var_x109);
            const double var_x112 = 0.017570117784863667 * var_chaste_interface__ryanodine_receptors__P_O1;
            const double var_x113 = 0.017570117784863667 * var_chaste_interface__ryanodine_receptors__P_O2;
            const double var_x114 = -63.0 + var_chaste_interface__membrane__V;
            const double var_x115 = var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2;
            const double var_x116 = var_x115 * (-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * var_chaste_interface__calcium_fluxes__P_RyR;
            
            partialF = var_x110 * (-9.283692327715233 + (-var_x112 - var_x113) * var_chaste_interface__calcium_fluxes__P_RyR) + 0.33613445378151263 * (0.017570117784863667 * var_x116 + 9283.6923277152328 * var_chaste_interface__calcium_concentration__Cai_converted - 9.283692327715233 * var_chaste_interface__calcium_concentration__Cass - 2.5979228081438217 * (0.00025000000000000001 * var_chaste_interface__membrane__V + 200000.0 * var_x105 - 0.0032092901554404145 * log(0.001 * var_x64 * mParameters[1]) + var_x10 * var_x114 - var_x15 * (-50.0 + var_chaste_interface__membrane__V)) * mParameters[6]) / (pow(var_x108, 3) * pow((0.16806722689075632 + var_x109), 2));
        }
        else
        {
            const double y_save = rY[2];
            rY[2] += delta;
            const double temp = EvaluateYDerivative2(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[2])/delta;
            rY[2] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 0.0002049
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.1867
        double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
        // Units: micromolar; Initial value: 705.5417
        double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
        // Units: dimensionless; Initial value: 2.8603e-14
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[8];
        // Units: dimensionless; Initial value: 0.0011
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[9];
        // Units: dimensionless; Initial value: 2.9799e-08
        


        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__J_xfer = 0.125 * var_chaste_interface__calcium_concentration__Cass - 0.125 * var_calcium_concentration__Cai; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_rel = 0.45000000000000001 * (-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * (var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2) * var_chaste_interface__calcium_fluxes__P_RyR; // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaJSR = (-var_calcium_fluxes__J_rel + var_calcium_fluxes__J_xfer) / (1.0 + 18.75 / pow((1 + 0.00125 * var_chaste_interface__calcium_concentration__CaJSR), 2)); // micromolar / millisecond

        return d_dt_chaste_interface_var_calcium_concentration__CaJSR;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
            // Units: millimolar; Initial value: 0.0002049
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.1867
            double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
            // Units: micromolar; Initial value: 705.5417
            double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
            // Units: dimensionless; Initial value: 2.8603e-14
            double var_chaste_interface__ryanodine_receptors__P_O1 = rY[8];
            // Units: dimensionless; Initial value: 0.0011
            double var_chaste_interface__ryanodine_receptors__P_O2 = rY[9];
            // Units: dimensionless; Initial value: 2.9799e-08
            


            const double var_x104 = 0.125 * var_chaste_interface__calcium_concentration__Cass;
            const double var_x115 = var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2;
            const double var_x116 = var_x115 * (-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * var_chaste_interface__calcium_fluxes__P_RyR;
            const double var_x121 = 1 + 0.00125 * var_chaste_interface__calcium_concentration__CaJSR;
            const double var_x122 = pow(var_x121, (-2));
            const double var_x123 = 1 / (1.0 + 18.75 * var_x122);
            const double var_x124 = 0.45000000000000001 * var_chaste_interface__ryanodine_receptors__P_O1;
            const double var_x125 = 0.45000000000000001 * var_chaste_interface__ryanodine_receptors__P_O2;
            const double var_x126 = var_x123 * var_chaste_interface__calcium_fluxes__P_RyR;
            
            partialF = var_x126 * (-var_x124 - var_x125) + 0.00013333333333333334 * (var_x104 - 0.45000000000000001 * var_x116 - 125.0 * var_chaste_interface__calcium_concentration__Cai_converted) / (pow(var_x121, 3) * pow((0.053333333333333337 + var_x122), 2));
        }
        else
        {
            const double y_save = rY[3];
            rY[3] += delta;
            const double temp = EvaluateYDerivative3(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[3])/delta;
            rY[3] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 0.0002049
        double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
        // Units: micromolar; Initial value: 705.5417
        double var_chaste_interface__calcium_concentration__CaNSR = rY[4];
        // Units: micromolar; Initial value: 703.3063
        


        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__J_leak = 2.088e-5 * var_chaste_interface__calcium_concentration__CaNSR - 2.088e-5 * var_calcium_concentration__Cai; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_up = 0.089999999999999997 * pow(var_calcium_concentration__Cai, 2) / (0.25 + pow(var_calcium_concentration__Cai, 2)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaNSR = 0.00028598665395614868 * var_chaste_interface__calcium_concentration__CaJSR + 10.879885605338417 * var_calcium_fluxes__J_up - 0.00028598665395614868 * var_chaste_interface__calcium_concentration__CaNSR - 10.879885605338417 * var_calcium_fluxes__J_leak; // micromolar / millisecond

        return d_dt_chaste_interface_var_calcium_concentration__CaNSR;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.0005131586653956148;
        }
        else
        {
            const double y_save = rY[4];
            rY[4] += delta;
            const double temp = EvaluateYDerivative4(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[4])/delta;
            rY[4] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
        // Units: dimensionless; Initial value: 2.8603e-14
        double var_chaste_interface__L_type_calcium_current__O = rY[11];
        // Units: dimensionless; Initial value: 4.4776e-12
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_L_type_calcium_current__i_CaL = 0.19019 * (-63.0 + var_chaste_interface__membrane__V) * var_chaste_interface__L_type_calcium_current__O; // picoA_per_picoF
        const double d_dt_chaste_interface_var_calcium_fluxes__P_RyR = -0.040000000000000001 * var_chaste_interface__calcium_fluxes__P_RyR - 0.10000000000000001 * var_L_type_calcium_current__i_CaL * _lt_0_row[10] / mParameters[5]; // 1 / millisecond

        return d_dt_chaste_interface_var_calcium_fluxes__P_RyR;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.040000000000000001;
        }
        else
        {
            const double y_save = rY[5];
            rY[5] += delta;
            const double temp = EvaluateYDerivative5(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[5])/delta;
            rY[5] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 0.0002049
        double var_chaste_interface__calcium_buffering__LTRPN_Ca = rY[6];
        // Units: micromolar; Initial value: 8.922
        


        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double d_dt_chaste_interface_var_calcium_buffering__LTRPN_Ca = -0.019599999999999999 * var_chaste_interface__calcium_buffering__LTRPN_Ca + 0.0327 * (35.0 - var_chaste_interface__calcium_buffering__LTRPN_Ca) * var_calcium_concentration__Cai; // micromolar / millisecond

        return d_dt_chaste_interface_var_calcium_buffering__LTRPN_Ca;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
            // Units: millimolar; Initial value: 0.0002049
            


            const double var_x106 = 32.699999999999996 * var_chaste_interface__calcium_concentration__Cai_converted;
            
            partialF = -0.019599999999999999 - var_x106;
        }
        else
        {
            const double y_save = rY[6];
            rY[6] += delta;
            const double temp = EvaluateYDerivative6(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[6])/delta;
            rY[6] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 0.0002049
        double var_chaste_interface__calcium_buffering__HTRPN_Ca = rY[7];
        // Units: micromolar; Initial value: 66.0407
        


        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double d_dt_chaste_interface_var_calcium_buffering__HTRPN_Ca = -3.1999999999999999e-5 * var_chaste_interface__calcium_buffering__HTRPN_Ca + 0.0023700000000000001 * (70.0 - var_chaste_interface__calcium_buffering__HTRPN_Ca) * var_calcium_concentration__Cai; // micromolar / millisecond

        return d_dt_chaste_interface_var_calcium_buffering__HTRPN_Ca;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
            // Units: millimolar; Initial value: 0.0002049
            


            const double var_x107 = 2.3700000000000001 * var_chaste_interface__calcium_concentration__Cai_converted;
            
            partialF = -3.1999999999999999e-5 - var_x107;
        }
        else
        {
            const double y_save = rY[7];
            rY[7] += delta;
            const double temp = EvaluateYDerivative7(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[7])/delta;
            rY[7] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.1867
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[8];
        // Units: dimensionless; Initial value: 0.0011
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[9];
        // Units: dimensionless; Initial value: 2.9799e-08
        double var_chaste_interface__ryanodine_receptors__P_C2 = rY[10];
        // Units: dimensionless; Initial value: 0.1003
        


        // Mathematics
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O1 = 0.00080000000000000004 * var_chaste_interface__ryanodine_receptors__P_C2 + 0.96499999999999997 * var_chaste_interface__ryanodine_receptors__P_O2 - 0.080249999999999988 * var_chaste_interface__ryanodine_receptors__P_O1 + 0.0060800000000000003 * pow(var_chaste_interface__calcium_concentration__Cass, 4.0) * (1.0 - var_chaste_interface__ryanodine_receptors__P_C2 - var_chaste_interface__ryanodine_receptors__P_O1 - var_chaste_interface__ryanodine_receptors__P_O2) - 0.0040499999999999998 * pow(var_chaste_interface__calcium_concentration__Cass, 3.0) * var_chaste_interface__ryanodine_receptors__P_O1; // 1 / millisecond

        return d_dt_chaste_interface_var_ryanodine_receptors__P_O1;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.1867
            


            const double var_x132 = pow(var_chaste_interface__calcium_concentration__Cass, 3.0);
            const double var_x134 = 0.0040499999999999998 * var_x132;
            const double var_x135 = -0.0060800000000000003 * pow(var_chaste_interface__calcium_concentration__Cass, 4.0);
            
            partialF = -0.080249999999999988 + var_x135 - var_x134;
        }
        else
        {
            const double y_save = rY[8];
            rY[8] += delta;
            const double temp = EvaluateYDerivative8(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[8])/delta;
            rY[8] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.1867
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[8];
        // Units: dimensionless; Initial value: 0.0011
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[9];
        // Units: dimensionless; Initial value: 2.9799e-08
        


        // Mathematics
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O2 = -0.96499999999999997 * var_chaste_interface__ryanodine_receptors__P_O2 + 0.0040499999999999998 * pow(var_chaste_interface__calcium_concentration__Cass, 3.0) * var_chaste_interface__ryanodine_receptors__P_O1; // 1 / millisecond

        return d_dt_chaste_interface_var_ryanodine_receptors__P_O2;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.96499999999999997;
        }
        else
        {
            const double y_save = rY[9];
            rY[9] += delta;
            const double temp = EvaluateYDerivative9(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[9])/delta;
            rY[9] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[8];
        // Units: dimensionless; Initial value: 0.0011
        double var_chaste_interface__ryanodine_receptors__P_C2 = rY[10];
        // Units: dimensionless; Initial value: 0.1003
        


        // Mathematics
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_C2 = 0.0089999999999999993 * var_chaste_interface__ryanodine_receptors__P_O1 - 0.00080000000000000004 * var_chaste_interface__ryanodine_receptors__P_C2; // 1 / millisecond

        return d_dt_chaste_interface_var_ryanodine_receptors__P_C2;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.00080000000000000004;
        }
        else
        {
            const double y_save = rY[10];
            rY[10] += delta;
            const double temp = EvaluateYDerivative10(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[10])/delta;
            rY[10] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.1867
        double var_chaste_interface__L_type_calcium_current__O = rY[11];
        // Units: dimensionless; Initial value: 4.4776e-12
        double var_chaste_interface__L_type_calcium_current__C4 = rY[14];
        // Units: dimensionless; Initial value: 6.1239e-10
        double var_chaste_interface__L_type_calcium_current__I1 = rY[15];
        // Units: dimensionless; Initial value: 1.545e-09
        double var_chaste_interface__L_type_calcium_current__I2 = rY[16];
        // Units: dimensionless; Initial value: 6.4226e-08
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_L_type_calcium_current__gamma = 0.23324 * var_chaste_interface__calcium_concentration__Cass / (20.0 + var_chaste_interface__calcium_concentration__Cass); // per_millisecond
        const double var_L_type_calcium_current__Kpcf = _lt_0_row[7]; // per_millisecond
        const double var_L_type_calcium_current__alpha = _lt_0_row[8]; // per_millisecond
        const double var_L_type_calcium_current__beta = _lt_0_row[9]; // per_millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__O = 0.00050000000000000001 * var_chaste_interface__L_type_calcium_current__I1 + var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__alpha - var_chaste_interface__L_type_calcium_current__O * var_L_type_calcium_current__gamma + 0.001 * var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__alpha - 4.0 * var_chaste_interface__L_type_calcium_current__O * var_L_type_calcium_current__beta - 0.001 * var_L_type_calcium_current__Kpcf * var_chaste_interface__L_type_calcium_current__O; // 1 / millisecond

        return d_dt_chaste_interface_var_L_type_calcium_current__O;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.1867
            


            const double var_x136 = exp(-0.92307692307692313 - 0.076923076923076927 * var_chaste_interface__membrane__V);
            const double var_x139 = exp(-2.1025 * pow((1 + 0.068965517241379309 * var_chaste_interface__membrane__V), 2));
            const double var_x140 = 0.013000000000000001 * var_x139;
            const double var_x164 = 1 / (20.0 + var_chaste_interface__calcium_concentration__Cass);
            const double var_x165 = 0.23324 * var_x164;
            const double var_x170 = 0.20000000000000001 * var_x136;
            const double var_x171 = var_x165 * var_chaste_interface__calcium_concentration__Cass;
            const double var_x172 = -var_x171;
            
            partialF = -0.013000000000000001 + var_x140 + var_x172 - var_x170;
        }
        else
        {
            const double y_save = rY[11];
            rY[11] += delta;
            const double temp = EvaluateYDerivative11(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[11])/delta;
            rY[11] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__L_type_calcium_current__O = rY[11];
        // Units: dimensionless; Initial value: 4.4776e-12
        double var_chaste_interface__L_type_calcium_current__C2 = rY[12];
        // Units: dimensionless; Initial value: 0.00016996
        double var_chaste_interface__L_type_calcium_current__C3 = rY[13];
        // Units: dimensionless; Initial value: 1.1754e-08
        double var_chaste_interface__L_type_calcium_current__C4 = rY[14];
        // Units: dimensionless; Initial value: 6.1239e-10
        double var_chaste_interface__L_type_calcium_current__I1 = rY[15];
        // Units: dimensionless; Initial value: 1.545e-09
        double var_chaste_interface__L_type_calcium_current__I2 = rY[16];
        // Units: dimensionless; Initial value: 6.4226e-08
        double var_chaste_interface__L_type_calcium_current__I3 = rY[17];
        // Units: dimensionless; Initial value: 6.5201e-07
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_L_type_calcium_current__alpha = _lt_0_row[8]; // per_millisecond
        const double var_L_type_calcium_current__beta = _lt_0_row[9]; // per_millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__C2 = -var_chaste_interface__L_type_calcium_current__C2 * var_L_type_calcium_current__beta + 2.0 * var_chaste_interface__L_type_calcium_current__C3 * var_L_type_calcium_current__beta + 4.0 * (1.0 - var_chaste_interface__L_type_calcium_current__C3 - var_chaste_interface__L_type_calcium_current__C4 - var_chaste_interface__L_type_calcium_current__I1 - var_chaste_interface__L_type_calcium_current__I2 - var_chaste_interface__L_type_calcium_current__I3 - var_chaste_interface__L_type_calcium_current__O - 2 * var_chaste_interface__L_type_calcium_current__C2) * var_L_type_calcium_current__alpha - 3.0 * var_chaste_interface__L_type_calcium_current__C2 * var_L_type_calcium_current__alpha; // 1 / millisecond

        return d_dt_chaste_interface_var_L_type_calcium_current__C2;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            


            const double var_x136 = exp(-0.92307692307692313 - 0.076923076923076927 * var_chaste_interface__membrane__V);
            const double var_x143 = 0.69999999999999996 * exp(-160.0 * pow((1 + 0.025000000000000001 * var_chaste_interface__membrane__V), 2));
            const double var_x144 = 0.75 * exp(-pow((1 + 0.050000000000000003 * var_chaste_interface__membrane__V), 2));
            const double var_x145 = exp(1.2 + 0.10000000000000001 * var_chaste_interface__membrane__V);
            const double var_x146 = 1.0 + 0.12 * var_x145;
            const double var_x147 = var_x145 / var_x146;
            const double var_x151 = 1.0 + var_x143 - var_x144;
            const double var_x152 = var_x147 * var_x151;
            
            partialF = -0.050000000000000003 * var_x136 - 4.4000000000000004 * var_x152;
        }
        else
        {
            const double y_save = rY[12];
            rY[12] += delta;
            const double temp = EvaluateYDerivative12(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[12])/delta;
            rY[12] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__L_type_calcium_current__C2 = rY[12];
        // Units: dimensionless; Initial value: 0.00016996
        double var_chaste_interface__L_type_calcium_current__C3 = rY[13];
        // Units: dimensionless; Initial value: 1.1754e-08
        double var_chaste_interface__L_type_calcium_current__C4 = rY[14];
        // Units: dimensionless; Initial value: 6.1239e-10
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_L_type_calcium_current__alpha = _lt_0_row[8]; // per_millisecond
        const double var_L_type_calcium_current__beta = _lt_0_row[9]; // per_millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__C3 = 3.0 * var_chaste_interface__L_type_calcium_current__C2 * var_L_type_calcium_current__alpha + 3.0 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__beta - 2.0 * var_chaste_interface__L_type_calcium_current__C3 * var_L_type_calcium_current__alpha - 2.0 * var_chaste_interface__L_type_calcium_current__C3 * var_L_type_calcium_current__beta; // 1 / millisecond

        return d_dt_chaste_interface_var_L_type_calcium_current__C3;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            


            const double var_x136 = exp(-0.92307692307692313 - 0.076923076923076927 * var_chaste_interface__membrane__V);
            const double var_x143 = 0.69999999999999996 * exp(-160.0 * pow((1 + 0.025000000000000001 * var_chaste_interface__membrane__V), 2));
            const double var_x144 = 0.75 * exp(-pow((1 + 0.050000000000000003 * var_chaste_interface__membrane__V), 2));
            const double var_x145 = exp(1.2 + 0.10000000000000001 * var_chaste_interface__membrane__V);
            const double var_x146 = 1.0 + 0.12 * var_x145;
            const double var_x147 = var_x145 / var_x146;
            const double var_x151 = 1.0 + var_x143 - var_x144;
            const double var_x152 = var_x147 * var_x151;
            const double var_x181 = 0.10000000000000001 * var_x136;
            const double var_x186 = 0.80000000000000004 * var_x152;
            
            partialF = -var_x181 - var_x186;
        }
        else
        {
            const double y_save = rY[13];
            rY[13] += delta;
            const double temp = EvaluateYDerivative13(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[13])/delta;
            rY[13] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.1867
        double var_chaste_interface__L_type_calcium_current__O = rY[11];
        // Units: dimensionless; Initial value: 4.4776e-12
        double var_chaste_interface__L_type_calcium_current__C3 = rY[13];
        // Units: dimensionless; Initial value: 1.1754e-08
        double var_chaste_interface__L_type_calcium_current__C4 = rY[14];
        // Units: dimensionless; Initial value: 6.1239e-10
        double var_chaste_interface__L_type_calcium_current__I1 = rY[15];
        // Units: dimensionless; Initial value: 1.545e-09
        double var_chaste_interface__L_type_calcium_current__I2 = rY[16];
        // Units: dimensionless; Initial value: 6.4226e-08
        double var_chaste_interface__L_type_calcium_current__I3 = rY[17];
        // Units: dimensionless; Initial value: 6.5201e-07
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_L_type_calcium_current__gamma = 0.23324 * var_chaste_interface__calcium_concentration__Cass / (20.0 + var_chaste_interface__calcium_concentration__Cass); // per_millisecond
        const double var_L_type_calcium_current__Kpcf = _lt_0_row[7]; // per_millisecond
        const double var_L_type_calcium_current__alpha = _lt_0_row[8]; // per_millisecond
        const double var_L_type_calcium_current__beta = _lt_0_row[9]; // per_millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__C4 = -var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__alpha + 2.0 * var_chaste_interface__L_type_calcium_current__C3 * var_L_type_calcium_current__alpha + 4.0 * var_chaste_interface__L_type_calcium_current__O * var_L_type_calcium_current__beta + 0.002 * var_chaste_interface__L_type_calcium_current__I3 * var_L_type_calcium_current__beta + 0.0080000000000000002 * var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__beta + 2.0000000000000002e-5 * var_chaste_interface__L_type_calcium_current__I1 * var_L_type_calcium_current__beta - 3.0 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__beta - 0.002 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__Kpcf - var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__Kpcf * var_L_type_calcium_current__gamma - 0.01 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__alpha * var_L_type_calcium_current__gamma; // 1 / millisecond

        return d_dt_chaste_interface_var_L_type_calcium_current__C4;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.1867
            


            const double var_x136 = exp(-0.92307692307692313 - 0.076923076923076927 * var_chaste_interface__membrane__V);
            const double var_x139 = exp(-2.1025 * pow((1 + 0.068965517241379309 * var_chaste_interface__membrane__V), 2));
            const double var_x143 = 0.69999999999999996 * exp(-160.0 * pow((1 + 0.025000000000000001 * var_chaste_interface__membrane__V), 2));
            const double var_x144 = 0.75 * exp(-pow((1 + 0.050000000000000003 * var_chaste_interface__membrane__V), 2));
            const double var_x145 = exp(1.2 + 0.10000000000000001 * var_chaste_interface__membrane__V);
            const double var_x146 = 1.0 + 0.12 * var_x145;
            const double var_x147 = var_x145 / var_x146;
            const double var_x151 = 1.0 + var_x143 - var_x144;
            const double var_x152 = var_x147 * var_x151;
            const double var_x164 = 1 / (20.0 + var_chaste_interface__calcium_concentration__Cass);
            const double var_x165 = 0.23324 * var_x164;
            const double var_x171 = var_x165 * var_chaste_interface__calcium_concentration__Cass;
            const double var_x173 = 0.40000000000000002 * var_x152;
            const double var_x187 = 0.15000000000000002 * var_x136;
            const double var_x191 = 0.026000000000000002 * var_x139;
            const double var_x194 = var_x164 * var_chaste_interface__calcium_concentration__Cass;
            const double var_x197 = 0.00093296000000000004 * var_x194;
            const double var_x200 = 13.0 - 13.0 * var_x139;
            const double var_x206 = var_x171 * var_x200;
            const double var_x207 = var_x152 * var_x197;
            
            partialF = -0.026000000000000002 + var_x191 - var_x173 - var_x187 - var_x206 - var_x207;
        }
        else
        {
            const double y_save = rY[14];
            rY[14] += delta;
            const double temp = EvaluateYDerivative14(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[14])/delta;
            rY[14] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.1867
        double var_chaste_interface__L_type_calcium_current__O = rY[11];
        // Units: dimensionless; Initial value: 4.4776e-12
        double var_chaste_interface__L_type_calcium_current__C4 = rY[14];
        // Units: dimensionless; Initial value: 6.1239e-10
        double var_chaste_interface__L_type_calcium_current__I1 = rY[15];
        // Units: dimensionless; Initial value: 1.545e-09
        double var_chaste_interface__L_type_calcium_current__I3 = rY[17];
        // Units: dimensionless; Initial value: 6.5201e-07
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_L_type_calcium_current__gamma = 0.23324 * var_chaste_interface__calcium_concentration__Cass / (20.0 + var_chaste_interface__calcium_concentration__Cass); // per_millisecond
        const double var_L_type_calcium_current__Kpcf = _lt_0_row[7]; // per_millisecond
        const double var_L_type_calcium_current__alpha = _lt_0_row[8]; // per_millisecond
        const double var_L_type_calcium_current__beta = _lt_0_row[9]; // per_millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__I1 = -0.00050000000000000001 * var_chaste_interface__L_type_calcium_current__I1 + var_chaste_interface__L_type_calcium_current__O * var_L_type_calcium_current__gamma + 0.001 * var_chaste_interface__L_type_calcium_current__I3 * var_L_type_calcium_current__alpha - 0.001 * var_chaste_interface__L_type_calcium_current__I1 * var_L_type_calcium_current__Kpcf + 0.01 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__alpha * var_L_type_calcium_current__gamma - 0.040000000000000001 * var_chaste_interface__L_type_calcium_current__I1 * var_L_type_calcium_current__Kpcf * var_L_type_calcium_current__beta; // 1 / millisecond

        return d_dt_chaste_interface_var_L_type_calcium_current__I1;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            


            const double var_x136 = exp(-0.92307692307692313 - 0.076923076923076927 * var_chaste_interface__membrane__V);
            const double var_x139 = exp(-2.1025 * pow((1 + 0.068965517241379309 * var_chaste_interface__membrane__V), 2));
            const double var_x140 = 0.013000000000000001 * var_x139;
            const double var_x211 = 0.026000000000000002 * var_x139;
            const double var_x212 = var_x136 * (-0.026000000000000002 + var_x211);
            
            partialF = -0.0135 + var_x140 + var_x212;
        }
        else
        {
            const double y_save = rY[15];
            rY[15] += delta;
            const double temp = EvaluateYDerivative15(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[15])/delta;
            rY[15] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.1867
        double var_chaste_interface__L_type_calcium_current__O = rY[11];
        // Units: dimensionless; Initial value: 4.4776e-12
        double var_chaste_interface__L_type_calcium_current__C4 = rY[14];
        // Units: dimensionless; Initial value: 6.1239e-10
        double var_chaste_interface__L_type_calcium_current__I2 = rY[16];
        // Units: dimensionless; Initial value: 6.4226e-08
        double var_chaste_interface__L_type_calcium_current__I3 = rY[17];
        // Units: dimensionless; Initial value: 6.5201e-07
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_L_type_calcium_current__gamma = 0.23324 * var_chaste_interface__calcium_concentration__Cass / (20.0 + var_chaste_interface__calcium_concentration__Cass); // per_millisecond
        const double var_L_type_calcium_current__Kpcf = _lt_0_row[7]; // per_millisecond
        const double var_L_type_calcium_current__alpha = _lt_0_row[8]; // per_millisecond
        const double var_L_type_calcium_current__beta = _lt_0_row[9]; // per_millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__I2 = 0.00050000000000000001 * var_chaste_interface__L_type_calcium_current__I3 - var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__gamma + 0.001 * var_L_type_calcium_current__Kpcf * var_chaste_interface__L_type_calcium_current__O + 0.002 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__Kpcf - 0.001 * var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__alpha - 0.0080000000000000002 * var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__beta; // 1 / millisecond

        return d_dt_chaste_interface_var_L_type_calcium_current__I2;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.1867
            


            const double var_x136 = exp(-0.92307692307692313 - 0.076923076923076927 * var_chaste_interface__membrane__V);
            const double var_x143 = 0.69999999999999996 * exp(-160.0 * pow((1 + 0.025000000000000001 * var_chaste_interface__membrane__V), 2));
            const double var_x144 = 0.75 * exp(-pow((1 + 0.050000000000000003 * var_chaste_interface__membrane__V), 2));
            const double var_x145 = exp(1.2 + 0.10000000000000001 * var_chaste_interface__membrane__V);
            const double var_x146 = 1.0 + 0.12 * var_x145;
            const double var_x147 = var_x145 / var_x146;
            const double var_x151 = 1.0 + var_x143 - var_x144;
            const double var_x152 = var_x147 * var_x151;
            const double var_x164 = 1 / (20.0 + var_chaste_interface__calcium_concentration__Cass);
            const double var_x165 = 0.23324 * var_x164;
            const double var_x171 = var_x165 * var_chaste_interface__calcium_concentration__Cass;
            const double var_x172 = -var_x171;
            const double var_x174 = 0.00040000000000000002 * var_x152;
            const double var_x208 = 0.00040000000000000002 * var_x136;
            const double var_x219 = -var_x174;
            
            partialF = var_x172 + var_x219 - var_x208;
        }
        else
        {
            const double y_save = rY[16];
            rY[16] += delta;
            const double temp = EvaluateYDerivative16(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[16])/delta;
            rY[16] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.1867
        double var_chaste_interface__L_type_calcium_current__C4 = rY[14];
        // Units: dimensionless; Initial value: 6.1239e-10
        double var_chaste_interface__L_type_calcium_current__I1 = rY[15];
        // Units: dimensionless; Initial value: 1.545e-09
        double var_chaste_interface__L_type_calcium_current__I2 = rY[16];
        // Units: dimensionless; Initial value: 6.4226e-08
        double var_chaste_interface__L_type_calcium_current__I3 = rY[17];
        // Units: dimensionless; Initial value: 6.5201e-07
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_L_type_calcium_current__gamma = 0.23324 * var_chaste_interface__calcium_concentration__Cass / (20.0 + var_chaste_interface__calcium_concentration__Cass); // per_millisecond
        const double var_L_type_calcium_current__Kpcf = _lt_0_row[7]; // per_millisecond
        const double var_L_type_calcium_current__alpha = _lt_0_row[8]; // per_millisecond
        const double var_L_type_calcium_current__beta = _lt_0_row[9]; // per_millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__I3 = -0.00050000000000000001 * var_chaste_interface__L_type_calcium_current__I3 + var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__gamma + 0.001 * var_chaste_interface__L_type_calcium_current__I1 * var_L_type_calcium_current__Kpcf - 0.001 * var_chaste_interface__L_type_calcium_current__I3 * var_L_type_calcium_current__alpha - 0.002 * var_chaste_interface__L_type_calcium_current__I3 * var_L_type_calcium_current__beta + var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__Kpcf * var_L_type_calcium_current__gamma; // 1 / millisecond

        return d_dt_chaste_interface_var_L_type_calcium_current__I3;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            


            const double var_x136 = exp(-0.92307692307692313 - 0.076923076923076927 * var_chaste_interface__membrane__V);
            const double var_x143 = 0.69999999999999996 * exp(-160.0 * pow((1 + 0.025000000000000001 * var_chaste_interface__membrane__V), 2));
            const double var_x144 = 0.75 * exp(-pow((1 + 0.050000000000000003 * var_chaste_interface__membrane__V), 2));
            const double var_x145 = exp(1.2 + 0.10000000000000001 * var_chaste_interface__membrane__V);
            const double var_x146 = 1.0 + 0.12 * var_x145;
            const double var_x147 = var_x145 / var_x146;
            const double var_x151 = 1.0 + var_x143 - var_x144;
            const double var_x152 = var_x147 * var_x151;
            const double var_x174 = 0.00040000000000000002 * var_x152;
            const double var_x209 = 0.0001 * var_x136;
            const double var_x219 = -var_x174;
            
            partialF = -0.00050000000000000001 + var_x219 - var_x209;
        }
        else
        {
            const double y_save = rY[17];
            rY[17] += delta;
            const double temp = EvaluateYDerivative17(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[17])/delta;
            rY[17] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__T_type_calcium_current_b_gate__b = rY[18];
        // Units: dimensionless; Initial value: 0.0047
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_T_type_calcium_current_b_gate__b = (-var_chaste_interface__T_type_calcium_current_b_gate__b + _lt_0_row[11]) / (_lt_0_row[12]); // 1 / millisecond

        return d_dt_chaste_interface_var_T_type_calcium_current_b_gate__b;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            


            const double var_x222 = 0.15151515151515152 * var_chaste_interface__membrane__V;
            const double var_x223 = exp(15.151515151515152 + var_x222);
            const double var_x224 = 1.0 + var_x223;
            const double var_x225 = 1 / var_x224;
            const double var_x226 = 1 / (0.10000000000000001 + 5.4000000000000004 * var_x225);
            
            partialF = -var_x226;
        }
        else
        {
            const double y_save = rY[18];
            rY[18] += delta;
            const double temp = EvaluateYDerivative18(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[18])/delta;
            rY[18] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__T_type_calcium_current_g_gate__g = rY[19];
        // Units: dimensionless; Initial value: 0.902
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_T_type_calcium_current_g_gate__g = (-var_chaste_interface__T_type_calcium_current_g_gate__g + _lt_0_row[13]) / (_lt_0_row[14]); // 1 / millisecond

        return d_dt_chaste_interface_var_T_type_calcium_current_g_gate__g;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            


            const double var_x129 = 0.20000000000000001 * var_chaste_interface__membrane__V;
            const double var_x229 = exp(13.0 + var_x129);
            const double var_x230 = 1.0 + var_x229;
            const double var_x231 = 1 / var_x230;
            const double var_x232 = 1 / (8.0 + 32.0 * var_x231);
            
            partialF = -var_x232;
        }
        else
        {
            const double y_save = rY[19];
            rY[19] += delta;
            const double temp = EvaluateYDerivative19(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[19])/delta;
            rY[19] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 0.0002049
        double var_chaste_interface__sodium_concentration__Nai = rY[20];
        // Units: micromolar; Initial value: 21747.0
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[21];
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[22];
        // Units: dimensionless; Initial value: 0.9606
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[23];
        // Units: dimensionless; Initial value: 0.9744
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_fast_sodium_current__E_Na = 25.674321243523316 * log(mParameters[4] / var_chaste_interface__sodium_concentration__Nai); // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * mParameters[7] * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // picoA_per_picoF
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__membrane__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NaCa = 907.67999999999995 * (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * _lt_0_row[2] - pow(mParameters[4], 3) * var_calcium_concentration__Cai * _lt_0_row[3]) / ((_lt_0_row[4]) * (1380.0 + mParameters[1]) * (669921875000000.0 + pow(mParameters[4], 3))); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = 0.88 * mParameters[3] / ((1.0 + 3043189.1166997822 * pow((1 / var_chaste_interface__sodium_concentration__Nai), 1.5)) * (1500.0 + mParameters[3]) * (1.0 + _lt_0_row[6] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[4])) * _lt_0_row[5])); // picoA_per_picoF
        const double d_dt_chaste_interface_var_sodium_concentration__Nai = 0.069959309196085367 * (-var_fast_sodium_current__i_Na - var_sodium_background_current__i_Nab - 3.0 * var_sodium_calcium_exchange_current__i_NaCa - 3.0 * var_sodium_potassium_pump_current__i_NaK) * mParameters[6]; // micromolar / millisecond

        return d_dt_chaste_interface_var_sodium_concentration__Nai;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            double var_chaste_interface__sodium_concentration__Nai = rY[20];
            // Units: micromolar; Initial value: 21747.0
            double var_chaste_interface__fast_sodium_current_m_gate__m = rY[21];
            // Units: dimensionless; Initial value: 0.0032
            double var_chaste_interface__fast_sodium_current_h_gate__h = rY[22];
            // Units: dimensionless; Initial value: 0.9606
            double var_chaste_interface__fast_sodium_current_j_gate__j = rY[23];
            // Units: dimensionless; Initial value: 0.9744
            

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

            const double var_x28 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3);
            const double var_x29 = var_x28 * mParameters[7] * var_chaste_interface__fast_sodium_current_j_gate__j;
            const double var_x30 = var_x29 * var_chaste_interface__fast_sodium_current_h_gate__h;
            const double var_x31 = _lt_0_row[3];
            const double var_x32 = pow(mParameters[4], 3);
            const double var_x35 = mParameters[1] * _lt_0_row[2];
            const double var_x37 = 1.0 + 0.10000000000000001 * var_x31;
            const double var_x38 = 1 / ((1380.0 + mParameters[1]) * (669921875000000.0 + var_x32));
            const double var_x39 = var_x38 / var_x37;
            const double var_x41 = 1 / var_chaste_interface__sodium_concentration__Nai;
            const double var_x42 = pow(var_x41, 1.5);
            const double var_x43 = exp(-0.0038949423064193493 * var_chaste_interface__membrane__V);
            const double var_x44 = exp(1.4858841010401188e-5 * mParameters[4]);
            const double var_x45 = 0.038949423064193495 * var_chaste_interface__membrane__V;
            const double var_x46 = exp(-var_x45);
            const double var_x47 = 1.0 + 0.1245 * var_x43 + 0.036499999999999998 * var_x46 * (-0.14285714285714285 + 0.14285714285714285 * var_x44);
            const double var_x48 = mParameters[3] / (1500.0 + mParameters[3]);
            const double var_x79 = var_x30 * var_x41;
            const double var_x80 = var_x35 * var_x39 * pow(var_chaste_interface__sodium_concentration__Nai, 2);
            const double var_x81 = var_x41 * var_x42 * var_x48 / (var_x47 * pow((3.2860264730588296e-7 + var_x42), 2));
            
            partialF = (-571.5059919399248 * var_x80 - 9.1035704253876838e-8 * var_x81 - 0.004670010223515703 * var_x41 - 1.7961577782752707 * var_x79) * mParameters[6];
        }
        else
        {
            const double y_save = rY[20];
            rY[20] += delta;
            const double temp = EvaluateYDerivative20(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[20])/delta;
            rY[20] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[21];
        // Units: dimensionless; Initial value: 0.0032
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_fast_sodium_current_m_gate__m = -(_lt_0_row[19]) * var_chaste_interface__fast_sodium_current_m_gate__m + _lt_0_row[20]; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current_m_gate__m;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            


            const double var_x234 = 1 / (1.0 - exp(1.0000000000287557e-7));
            const double var_x235 = 1 / (1.0 - exp(-1.0000000000287557e-7));
            const double var_x236 = 47.130000000000003 + var_chaste_interface__membrane__V;
            const double var_x237 = fabs(var_x236) < 1.0000000000287557e-6;
            const double var_x238 = -0.10000000000000001 * var_chaste_interface__membrane__V;
            const double var_x239 = exp(-4.7130000000000001 + var_x238);
            const double var_x240 = 1.0 - var_x239;
            const double var_x241 = 0.32000000000000001 / var_x240;
            const double var_x243 = exp(-0.090909090909090912 * var_chaste_interface__membrane__V);
            const double var_x244 = 3.200000000092018e-7 * var_x235;
            
            partialF = -((var_x237) ? (var_x244 - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__V) * (-var_x244 - 3.200000000092018e-7 * var_x234)) : (var_x236 * var_x241)) - 0.080000000000000002 * var_x243;
        }
        else
        {
            const double y_save = rY[21];
            rY[21] += delta;
            const double temp = EvaluateYDerivative21(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[21])/delta;
            rY[21] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[22];
        // Units: dimensionless; Initial value: 0.9606
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_fast_sodium_current_h_gate__h = -(_lt_0_row[15]) * var_chaste_interface__fast_sodium_current_h_gate__h + _lt_0_row[16]; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current_h_gate__h;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            


            const double var_x245 = exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__membrane__V);
            const double var_x246 = var_chaste_interface__membrane__V < -40.0;
            const double var_x249 = exp(0.079000000000000001 * var_chaste_interface__membrane__V);
            const double var_x250 = exp(0.34999999999999998 * var_chaste_interface__membrane__V);
            const double var_x251 = exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__membrane__V);
            const double var_x252 = 1.0 + var_x251;
            const double var_x253 = -((var_x246) ? (0.13500000000000001 * var_x245) : (0));
            
            partialF = ((var_x246) ? (var_x253 - 310000.0 * var_x250 - 3.5600000000000001 * var_x249) : (var_x253 - 7.6923076923076916 / var_x252));
        }
        else
        {
            const double y_save = rY[22];
            rY[22] += delta;
            const double temp = EvaluateYDerivative22(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[22])/delta;
            rY[22] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[23];
        // Units: dimensionless; Initial value: 0.9744
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_fast_sodium_current_j_gate__j = -(_lt_0_row[17]) * var_chaste_interface__fast_sodium_current_j_gate__j + _lt_0_row[18]; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current_j_gate__j;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            


            const double var_x238 = -0.10000000000000001 * var_chaste_interface__membrane__V;
            const double var_x246 = var_chaste_interface__membrane__V < -40.0;
            const double var_x254 = exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V);
            const double var_x255 = 1.0 + var_x254;
            const double var_x256 = 1 / var_x255;
            const double var_x257 = exp(0.24440000000000001 * var_chaste_interface__membrane__V);
            const double var_x258 = exp(-0.043909999999999998 * var_chaste_interface__membrane__V);
            const double var_x259 = -127140.0 * var_x257 - 3.4740000000000003e-5 * var_x258;
            const double var_x260 = var_x256 * var_x259;
            const double var_x261 = 37.780000000000001 + var_chaste_interface__membrane__V;
            const double var_x264 = exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__membrane__V);
            const double var_x265 = 1.0 + var_x264;
            const double var_x266 = exp(-0.01052 * var_chaste_interface__membrane__V);
            const double var_x267 = var_x266 / var_x265;
            const double var_x268 = exp(-3.2000000000000002 + var_x238);
            const double var_x269 = 1.0 + var_x268;
            const double var_x270 = exp(-2.5349999999999999e-7 * var_chaste_interface__membrane__V);
            const double var_x271 = var_x270 / var_x269;
            const double var_x272 = -((var_x246) ? (var_x260 * var_x261) : (0));
            
            partialF = ((var_x246) ? (var_x272 - 0.1212 * var_x267) : (var_x272 - 0.29999999999999999 * var_x271));
        }
        else
        {
            const double y_save = rY[23];
            rY[23] += delta;
            const double temp = EvaluateYDerivative23(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[23])/delta;
            rY[23] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__sodium_concentration__Nai = rY[20];
        // Units: micromolar; Initial value: 21747.0
        double var_chaste_interface__potassium_concentration__Ki = rY[24];
        // Units: micromolar; Initial value: 136450.0
        double var_chaste_interface__fast_transient_outward_potassium_current__ato_f = rY[25];
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_transient_outward_potassium_current__ito_f = rY[26];
        // Units: dimensionless; Initial value: 0.753
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur = rY[27];
        // Units: dimensionless; Initial value: 0.00052471
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur = rY[28];
        // Units: dimensionless; Initial value: 0.9866
        double var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss = rY[29];
        // Units: dimensionless; Initial value: 0.85
        double var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs = rY[30];
        // Units: dimensionless; Initial value: 0.0026
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K = rY[31];
        // Units: dimensionless; Initial value: 0.0021
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_fast_transient_outward_potassium_current__E_K = 25.674321243523316 * log(mParameters[3] / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_potassium_current__i_Kto_f = pow(var_chaste_interface__fast_transient_outward_potassium_current__ato_f, 6.5) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[8] * var_chaste_interface__fast_transient_outward_potassium_current__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_potassium_current__i_Kss = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss * mParameters[10]; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * mParameters[11]; // picoA_per_picoF
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs, 2) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[12]; // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = 0.88 * mParameters[3] / ((1.0 + 3043189.1166997822 * pow((1 / var_chaste_interface__sodium_concentration__Nai), 1.5)) * (1500.0 + mParameters[3]) * (1.0 + _lt_0_row[6] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[4])) * _lt_0_row[5])); // picoA_per_picoF
        const double var_time_independent_potassium_current__i_K1 = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[3] * mParameters[9] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__membrane__V - 0.089599999999999999 * var_fast_transient_outward_potassium_current__E_K)) * (210.0 + mParameters[3])); // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur * mParameters[13] * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur; // picoA_per_picoF
        const double d_dt_chaste_interface_var_potassium_concentration__Ki = 0.069959309196085367 * (-var_fast_transient_outward_potassium_current__i_Kto_f - var_non_inactivating_steady_state_potassium_current__i_Kss - var_rapid_delayed_rectifier_potassium_current__i_Kr - var_slow_delayed_rectifier_potassium_current__i_Ks - var_time_independent_potassium_current__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur + 2.0 * var_sodium_potassium_pump_current__i_NaK) * mParameters[6]; // micromolar / millisecond

        return d_dt_chaste_interface_var_potassium_concentration__Ki;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            double var_chaste_interface__potassium_concentration__Ki = rY[24];
            // Units: micromolar; Initial value: 136450.0
            double var_chaste_interface__fast_transient_outward_potassium_current__ato_f = rY[25];
            // Units: dimensionless; Initial value: 0.0032
            double var_chaste_interface__fast_transient_outward_potassium_current__ito_f = rY[26];
            // Units: dimensionless; Initial value: 0.753
            double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur = rY[27];
            // Units: dimensionless; Initial value: 0.00052471
            double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur = rY[28];
            // Units: dimensionless; Initial value: 0.9866
            double var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss = rY[29];
            // Units: dimensionless; Initial value: 0.85
            double var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs = rY[30];
            // Units: dimensionless; Initial value: 0.0026
            double var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K = rY[31];
            // Units: dimensionless; Initial value: 0.0021
            


            const double var_x11 = pow(var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs, 2) * mParameters[12];
            const double var_x12 = var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss * mParameters[10];
            const double var_x13 = var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * mParameters[11];
            const double var_x16 = pow(var_chaste_interface__fast_transient_outward_potassium_current__ato_f, 6.5) * mParameters[8];
            const double var_x17 = var_x16 * var_chaste_interface__fast_transient_outward_potassium_current__ito_f;
            const double var_x18 = mParameters[13] * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur;
            const double var_x19 = var_x18 * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur;
            const double var_x20 = 1 / var_chaste_interface__potassium_concentration__Ki;
            const double var_x21 = var_x20 * mParameters[3];
            const double var_x22 = log(var_x21);
            const double var_x23 = exp(0.089599999999999999 * var_chaste_interface__membrane__V - 2.300419183419689 * var_x22);
            const double var_x24 = 1.0 + var_x23;
            const double var_x25 = mParameters[9] / (210.0 + mParameters[3]);
            const double var_x26 = var_x25 / var_x24;
            const double var_x51 = 25.674321243523316 * var_x22;
            const double var_x52 = -var_x51 + var_chaste_interface__membrane__V;
            const double var_x53 = var_x23 * var_x25 * var_x52 / pow(var_x24, 2);
            const double var_x88 = var_x21 * var_x26;
            const double var_x89 = var_x21 * var_x53;
            const double var_x273 = 1.7961577782752707 * var_x20;
            
            partialF = (0.16093573693346425 * var_x89 - 1.7961577782752707 * var_x88 - var_x11 * var_x273 - var_x12 * var_x273 - var_x13 * var_x273 - var_x17 * var_x273 - var_x19 * var_x273) * mParameters[6];
        }
        else
        {
            const double y_save = rY[24];
            rY[24] += delta;
            const double temp = EvaluateYDerivative24(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[24])/delta;
            rY[24] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__fast_transient_outward_potassium_current__ato_f = rY[25];
        // Units: dimensionless; Initial value: 0.0032
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_fast_transient_outward_potassium_current__ato_f = 0.18064 * (1.0 - var_chaste_interface__fast_transient_outward_potassium_current__ato_f) * _lt_0_row[21] - 0.39560000000000001 * var_chaste_interface__fast_transient_outward_potassium_current__ato_f * _lt_0_row[22]; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_transient_outward_potassium_current__ato_f;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

            const double var_x274 = _lt_0_row[21];
            const double var_x275 = _lt_0_row[22];
            
            partialF = -0.18064 * var_x274 - 0.39560000000000001 * var_x275;
        }
        else
        {
            const double y_save = rY[25];
            rY[25] += delta;
            const double temp = EvaluateYDerivative25(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[25])/delta;
            rY[25] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__fast_transient_outward_potassium_current__ito_f = rY[26];
        // Units: dimensionless; Initial value: 0.753
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_fast_transient_outward_potassium_current__ito_f = (-var_chaste_interface__fast_transient_outward_potassium_current__ito_f + _lt_0_row[23]) * (_lt_0_row[24]); // 1 / millisecond

        return d_dt_chaste_interface_var_fast_transient_outward_potassium_current__ito_f;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            


            const double var_x287 = 0.14285714285714285 * var_chaste_interface__membrane__V;
            const double var_x288 = exp(4.7857142857142856 + var_x287);
            const double var_x289 = 1.0 + 0.051334999999999999 * var_x288;
            const double var_x290 = var_x288 / var_x289;
            const double var_x291 = -var_x287;
            const double var_x292 = exp(-4.7857142857142856 + var_x291);
            const double var_x293 = 1.0 + 0.067083000000000004 * var_x292;
            const double var_x294 = exp(-1.9285714285714286 + var_x291);
            const double var_x295 = var_x294 / var_x293;
            const double var_x296 = 0.00015200000000000001 * var_x295;
            const double var_x297 = 0.00095 * var_x290;
            
            partialF = -var_x296 - var_x297;
        }
        else
        {
            const double y_save = rY[26];
            rY[26] += delta;
            const double temp = EvaluateYDerivative26(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[26])/delta;
            rY[26] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur = rY[27];
        // Units: dimensionless; Initial value: 0.00052471
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_ultra_rapidly_activating_delayed_rectifier_potassium_current__ass = _lt_0_row[33]; // dimensionless
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_potassium_current__aur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur + var_ultra_rapidly_activating_delayed_rectifier_potassium_current__ass) / (_lt_0_row[35]); // 1 / millisecond

        return d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_potassium_current__aur;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            


            const double var_x300 = exp(-0.062899999999999998 * var_chaste_interface__membrane__V);
            const double var_x304 = 1 / (2.0579999999999998 + 0.49299999999999999 * var_x300);
            
            partialF = -var_x304;
        }
        else
        {
            const double y_save = rY[27];
            rY[27] += delta;
            const double temp = EvaluateYDerivative27(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[27])/delta;
            rY[27] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur = rY[28];
        // Units: dimensionless; Initial value: 0.9866
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_potassium_current__iur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur + _lt_0_row[36]) / (_lt_0_row[37]); // 1 / millisecond

        return d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_potassium_current__iur;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            


            const double var_x306 = exp(7.9298245614035094 + 0.17543859649122806 * var_chaste_interface__membrane__V);
            const double var_x307 = 1.0 + var_x306;
            const double var_x308 = 1 / var_x307;
            const double var_x309 = 1 / (1200.0 - 170.0 * var_x308);
            
            partialF = -var_x309;
        }
        else
        {
            const double y_save = rY[28];
            rY[28] += delta;
            const double temp = EvaluateYDerivative28(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[28])/delta;
            rY[28] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss = rY[29];
        // Units: dimensionless; Initial value: 0.85
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_ultra_rapidly_activating_delayed_rectifier_potassium_current__ass = _lt_0_row[33]; // dimensionless
        const double d_dt_chaste_interface_var_non_inactivating_steady_state_potassium_current__aKss = (-var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss + var_ultra_rapidly_activating_delayed_rectifier_potassium_current__ass) / (_lt_0_row[34]); // 1 / millisecond

        return d_dt_chaste_interface_var_non_inactivating_steady_state_potassium_current__aKss;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            


            const double var_x311 = exp(-0.086199999999999999 * var_chaste_interface__membrane__V);
            const double var_x312 = 1 / (13.17 + 39.299999999999997 * var_x311);
            
            partialF = -var_x312;
        }
        else
        {
            const double y_save = rY[29];
            rY[29] += delta;
            const double temp = EvaluateYDerivative29(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[29])/delta;
            rY[29] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs = rY[30];
        // Units: dimensionless; Initial value: 0.0026
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_slow_delayed_rectifier_potassium_current__nKs = (1.0 - var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs) * _lt_0_row[31] - 9.5333299999999997e-5 * var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs * _lt_0_row[32]; // 1 / millisecond

        return d_dt_chaste_interface_var_slow_delayed_rectifier_potassium_current__nKs;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

            const double var_x314 = 1 / (1.0 - exp(9.9999999999766942e-8));
            const double var_x315 = 1 / (1.0 - exp(-9.9999999999766942e-8));
            const double var_x316 = _lt_0_row[32];
            const double var_x318 = 26.5 + var_chaste_interface__membrane__V;
            const double var_x319 = fabs(var_x318) < 7.8124999999817923e-7;
            const double var_x320 = exp(-3.3919999999999999 - 0.128 * var_chaste_interface__membrane__V);
            const double var_x321 = 1.0 - var_x320;
            const double var_x322 = 4.8133299999999997e-6 / var_x321;
            const double var_x323 = -9.5333299999999997e-5 * var_x316;
            const double var_x324 = -3.7604140624912359e-12 * var_x315;
            
            partialF = ((var_x319) ? (var_x323 + var_x324 + 640000.00000149151 * (26.499999218749998 + var_chaste_interface__membrane__V) * (var_x324 - 3.7604140624912359e-12 * var_x314)) : (var_x323 - var_x318 * var_x322));
        }
        else
        {
            const double y_save = rY[30];
            rY[30] += delta;
            const double temp = EvaluateYDerivative30(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[30])/delta;
            rY[30] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K = rY[31];
        // Units: dimensionless; Initial value: 0.0021
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 = rY[33];
        // Units: dimensionless; Initial value: 0.00083641
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__I_K = rY[34];
        // Units: dimensionless; Initial value: 0.00043522
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_rapid_delayed_rectifier_potassium_current__alpha_a1 = _lt_0_row[25]; // per_millisecond
        const double var_rapid_delayed_rectifier_potassium_current__alpha_i = _lt_0_row[26]; // per_millisecond
        const double var_rapid_delayed_rectifier_potassium_current__beta_a1 = _lt_0_row[27]; // per_millisecond
        const double var_rapid_delayed_rectifier_potassium_current__beta_i = _lt_0_row[28]; // per_millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__O_K = var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 * var_rapid_delayed_rectifier_potassium_current__alpha_a1 + var_chaste_interface__rapid_delayed_rectifier_potassium_current__I_K * var_rapid_delayed_rectifier_potassium_current__beta_i - var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * var_rapid_delayed_rectifier_potassium_current__alpha_i - var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * var_rapid_delayed_rectifier_potassium_current__beta_a1; // 1 / millisecond

        return d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__O_K;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            


            const double var_x327 = exp(-0.041779999999999998 * var_chaste_interface__membrane__V);
            const double var_x329 = exp(0.11695499999999999 + 0.023390999999999999 * var_chaste_interface__membrane__V);
            const double var_x333 = 6.8899999999999994e-5 * var_x327;
            const double var_x334 = 0.090820999999999999 * var_x329;
            
            partialF = -var_x333 - var_x334;
        }
        else
        {
            const double y_save = rY[31];
            rY[31] += delta;
            const double temp = EvaluateYDerivative31(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[31])/delta;
            rY[31] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K = rY[31];
        // Units: dimensionless; Initial value: 0.0021
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K1 = rY[32];
        // Units: dimensionless; Initial value: 0.0011
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 = rY[33];
        // Units: dimensionless; Initial value: 0.00083641
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__I_K = rY[34];
        // Units: dimensionless; Initial value: 0.00043522
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__C_K1 = 0.036777999999999998 * var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 - 0.023761000000000001 * var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K1 + 0.022348 * (1.0 - var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K1 - var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 - var_chaste_interface__rapid_delayed_rectifier_potassium_current__I_K - var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K) * _lt_0_row[29] - 0.047002000000000002 * var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K1 * _lt_0_row[30]; // 1 / millisecond

        return d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__C_K1;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

            const double var_x337 = _lt_0_row[29];
            const double var_x338 = _lt_0_row[30];
            const double var_x339 = -0.022348 * var_x337;
            
            partialF = -0.023761000000000001 + var_x339 - 0.047002000000000002 * var_x338;
        }
        else
        {
            const double y_save = rY[32];
            rY[32] += delta;
            const double temp = EvaluateYDerivative32(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[32])/delta;
            rY[32] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K = rY[31];
        // Units: dimensionless; Initial value: 0.0021
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K1 = rY[32];
        // Units: dimensionless; Initial value: 0.0011
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 = rY[33];
        // Units: dimensionless; Initial value: 0.00083641
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_rapid_delayed_rectifier_potassium_current__alpha_a1 = _lt_0_row[25]; // per_millisecond
        const double var_rapid_delayed_rectifier_potassium_current__beta_a1 = _lt_0_row[27]; // per_millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__C_K2 = 0.023761000000000001 * var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K1 - 0.036777999999999998 * var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 + var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * var_rapid_delayed_rectifier_potassium_current__beta_a1 - var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 * var_rapid_delayed_rectifier_potassium_current__alpha_a1; // 1 / millisecond

        return d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__C_K2;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            


            const double var_x325 = exp(0.038198000000000003 * var_chaste_interface__membrane__V);
            const double var_x335 = 0.013733 * var_x325;
            
            partialF = -0.036777999999999998 - var_x335;
        }
        else
        {
            const double y_save = rY[33];
            rY[33] += delta;
            const double temp = EvaluateYDerivative33(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[33])/delta;
            rY[33] = y_save;
        }
        return partialF;
    }
    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluateYDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K = rY[31];
        // Units: dimensionless; Initial value: 0.0021
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__I_K = rY[34];
        // Units: dimensionless; Initial value: 0.00043522
        

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_rapid_delayed_rectifier_potassium_current__alpha_i = _lt_0_row[26]; // per_millisecond
        const double var_rapid_delayed_rectifier_potassium_current__beta_i = _lt_0_row[28]; // per_millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__I_K = var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * var_rapid_delayed_rectifier_potassium_current__alpha_i - var_chaste_interface__rapid_delayed_rectifier_potassium_current__I_K * var_rapid_delayed_rectifier_potassium_current__beta_i; // 1 / millisecond

        return d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__I_K;
    }

    double Cellwang_sobie_2008FromCellMLGRL1Opt::EvaluatePartialDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -80.6475
            


            const double var_x331 = exp(-0.16339999999999999 - 0.032680000000000001 * var_chaste_interface__membrane__V);
            const double var_x336 = 0.0064970000000000002 * var_x331;
            
            partialF = -var_x336;
        }
        else
        {
            const double y_save = rY[34];
            rY[34] += delta;
            const double temp = EvaluateYDerivative34(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[34])/delta;
            rY[34] = y_save;
        }
        return partialF;
    }

    std::vector<double> Cellwang_sobie_2008FromCellMLGRL1Opt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 0.0002049
        double var_chaste_interface__L_type_calcium_current__O = rY[11];
        // Units: dimensionless; Initial value: 4.4776e-12
        double var_chaste_interface__sodium_concentration__Nai = rY[20];
        // Units: micromolar; Initial value: 21747.0
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[21];
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[22];
        // Units: dimensionless; Initial value: 0.9606
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[23];
        // Units: dimensionless; Initial value: 0.9744
        double var_chaste_interface__potassium_concentration__Ki = rY[24];
        // Units: micromolar; Initial value: 136450.0
        double var_chaste_interface__fast_transient_outward_potassium_current__ato_f = rY[25];
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_transient_outward_potassium_current__ito_f = rY[26];
        // Units: dimensionless; Initial value: 0.753
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur = rY[27];
        // Units: dimensionless; Initial value: 0.00052471
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur = rY[28];
        // Units: dimensionless; Initial value: 0.9866
        double var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss = rY[29];
        // Units: dimensionless; Initial value: 0.85
        double var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs = rY[30];
        // Units: dimensionless; Initial value: 0.0026
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K = rY[31];
        // Units: dimensionless; Initial value: 0.0021
        

        // Mathematics
        const double var_L_type_calcium_current__E_CaL = 63.0; // millivolt
        const double var_L_type_calcium_current__g_CaL = 0.19019; // milliS_per_microF
        const double var_membrane__F = 96.5; // coulomb_per_millimole
        const double var_membrane__R = 8.3140000000000001; // joule_per_mole_kelvin
        const double var_membrane__T = 298.0; // kelvin
        const double var_L_type_calcium_current__i_CaL = (-var_L_type_calcium_current__E_CaL + var_chaste_interface__membrane__V) * var_chaste_interface__L_type_calcium_current__O * var_L_type_calcium_current__g_CaL; // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL_converted = HeartConfig::Instance()->GetCapacitance() * var_L_type_calcium_current__i_CaL; // uA_per_cm2
        const double var_membrane__i_stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_fast_transient_outward_potassium_current__E_K = var_membrane__R * var_membrane__T * log(mParameters[3] / var_chaste_interface__potassium_concentration__Ki) / var_membrane__F; // millivolt
        const double var_fast_transient_outward_potassium_current__i_Kto_f = pow(var_chaste_interface__fast_transient_outward_potassium_current__ato_f, 6.5) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[8] * var_chaste_interface__fast_transient_outward_potassium_current__ito_f; // picoA_per_picoF
        const double var_fast_transient_outward_potassium_current__i_Kto_f_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_transient_outward_potassium_current__i_Kto_f; // uA_per_cm2
        const double var_non_inactivating_steady_state_potassium_current__i_Kss = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss * mParameters[10]; // picoA_per_picoF
        const double var_non_inactivating_steady_state_potassium_current__i_Kss_converted = HeartConfig::Instance()->GetCapacitance() * var_non_inactivating_steady_state_potassium_current__i_Kss; // uA_per_cm2
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * mParameters[11]; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_rapid_delayed_rectifier_potassium_current__i_Kr; // uA_per_cm2
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs, 2) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[12]; // picoA_per_picoF
        const double var_slow_delayed_rectifier_potassium_current__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_slow_delayed_rectifier_potassium_current__i_Ks; // uA_per_cm2
        const double var_fast_sodium_current__E_Na = var_membrane__R * var_membrane__T * log(mParameters[4] / var_chaste_interface__sodium_concentration__Nai) / var_membrane__F; // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * mParameters[7] * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // picoA_per_picoF
        const double var_fast_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_time_independent_potassium_current__i_K1 = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[3] * mParameters[9] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__membrane__V - 0.089599999999999999 * var_fast_transient_outward_potassium_current__E_K)) * (210.0 + mParameters[3])); // picoA_per_picoF
        const double var_time_independent_potassium_current__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_time_independent_potassium_current__i_K1; // uA_per_cm2
        const double var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur * mParameters[13] * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur; // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur_converted = HeartConfig::Instance()->GetCapacitance() * var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur; // uA_per_cm2

        std::vector<double> dqs(11);
        dqs[0] = var_chaste_interface__calcium_concentration__Cai_converted;
        dqs[1] = var_L_type_calcium_current__i_CaL_converted;
        dqs[2] = var_fast_sodium_current__i_Na_converted;
        dqs[3] = var_fast_transient_outward_potassium_current__i_Kto_f_converted;
        dqs[4] = var_time_independent_potassium_current__i_K1_converted;
        dqs[5] = var_non_inactivating_steady_state_potassium_current__i_Kss_converted;
        dqs[6] = var_rapid_delayed_rectifier_potassium_current__i_Kr_converted;
        dqs[7] = var_slow_delayed_rectifier_potassium_current__i_Ks_converted;
        dqs[8] = var_membrane__i_stim_converted;
        dqs[9] = var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur_converted;
        dqs[10] = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellwang_sobie_2008FromCellMLGRL1Opt>::Initialise(void)
{
    this->mSystemName = "wang_model_2008";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-80.6475);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0002049);

    // rY[2]:
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(0.1867);

    // rY[3]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(705.5417);

    // rY[4]:
    this->mVariableNames.push_back("NSR_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(703.3063);

    // rY[5]:
    this->mVariableNames.push_back("calcium_fluxes__P_RyR");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.8603e-14);

    // rY[6]:
    this->mVariableNames.push_back("calcium_buffering__LTRPN_Ca");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(8.922);

    // rY[7]:
    this->mVariableNames.push_back("calcium_buffering__HTRPN_Ca");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(66.0407);

    // rY[8]:
    this->mVariableNames.push_back("ryanodine_receptors__P_O1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0011);

    // rY[9]:
    this->mVariableNames.push_back("ryanodine_receptors__P_O2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.9799e-08);

    // rY[10]:
    this->mVariableNames.push_back("ryanodine_receptors__P_C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.1003);

    // rY[11]:
    this->mVariableNames.push_back("L_type_calcium_current__O");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(4.4776e-12);

    // rY[12]:
    this->mVariableNames.push_back("L_type_calcium_current__C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00016996);

    // rY[13]:
    this->mVariableNames.push_back("L_type_calcium_current__C3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.1754e-08);

    // rY[14]:
    this->mVariableNames.push_back("L_type_calcium_current__C4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(6.1239e-10);

    // rY[15]:
    this->mVariableNames.push_back("L_type_calcium_current__I1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.545e-09);

    // rY[16]:
    this->mVariableNames.push_back("L_type_calcium_current__I2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(6.4226e-08);

    // rY[17]:
    this->mVariableNames.push_back("L_type_calcium_current__I3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(6.5201e-07);

    // rY[18]:
    this->mVariableNames.push_back("T_type_calcium_current_b_gate__b");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0047);

    // rY[19]:
    this->mVariableNames.push_back("T_type_calcium_current_g_gate__g");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.902);

    // rY[20]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(21747.0);

    // rY[21]:
    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0032);

    // rY[22]:
    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9606);

    // rY[23]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9744);

    // rY[24]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(136450.0);

    // rY[25]:
    this->mVariableNames.push_back("fast_transient_outward_potassium_current__ato_f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0032);

    // rY[26]:
    this->mVariableNames.push_back("fast_transient_outward_potassium_current__ito_f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.753);

    // rY[27]:
    this->mVariableNames.push_back("ultra_rapidly_activating_delayed_rectifier_potassium_current__aur");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00052471);

    // rY[28]:
    this->mVariableNames.push_back("ultra_rapidly_activating_delayed_rectifier_potassium_current__iur");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9866);

    // rY[29]:
    this->mVariableNames.push_back("non_inactivating_steady_state_potassium_current__aKss");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.85);

    // rY[30]:
    this->mVariableNames.push_back("slow_delayed_rectifier_potassium_current__nKs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0026);

    // rY[31]:
    this->mVariableNames.push_back("rapid_delayed_rectifier_potassium_current__O_K");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0021);

    // rY[32]:
    this->mVariableNames.push_back("rapid_delayed_rectifier_potassium_current__C_K1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0011);

    // rY[33]:
    this->mVariableNames.push_back("rapid_delayed_rectifier_potassium_current__C_K2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00083641);

    // rY[34]:
    this->mVariableNames.push_back("rapid_delayed_rectifier_potassium_current__I_K");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00043522);

    // mParameters[0]:
    this->mParameterNames.push_back("cytosolic_chloride_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[1]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[2]:
    this->mParameterNames.push_back("extracellular_chloride_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[5]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("picoA_per_picoF");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_capacitance");
    this->mParameterUnits.push_back("microF_per_cm2");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_fast_transient_outward_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_non_inactivating_steady_state_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_ultrarapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_concentration");
    this->mDerivedQuantityUnits.push_back("millimolar");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_fast_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_non_inactivating_steady_state_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_ultrarapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellwang_sobie_2008FromCellMLGRL1Opt)

