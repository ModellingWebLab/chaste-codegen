//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: sachse_model_2007
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: GeneralizedRushLarsenFirstOrderOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "sachse_moreno_abildskov_2008_b.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation



    ~Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt_LookupTables()
    {

    }

protected:
    Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt_LookupTables(const Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt_LookupTables&);
    Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt_LookupTables& operator= (const Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt_LookupTables&);
    Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(0);
        mNumberOfTables.resize(0);
        mTableMins.resize(0);
        mTableSteps.resize(0);
        mTableStepInverses.resize(0);
        mTableMaxs.resize(0);
        mNeedsRegeneration.resize(0);

        Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt_LookupTables> mpInstance;

};

std::shared_ptr<Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt_LookupTables> Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__I_stim__stim_duration_converted = 1.0; // millisecond
        const double var_chaste_interface__I_stim__stim_period_converted = 1000.0; // millisecond
        const double var_chaste_interface__I_stim__stim_start_converted = 100.0; // millisecond
        const double var_chaste_interface__I_stim__stim_amplitude_converted = 0.0001 * HeartConfig::Instance()->GetCapacitance() / mParameters[2]; // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__I_stim__stim_amplitude_converted),
                var_chaste_interface__I_stim__stim_duration_converted,
                var_chaste_interface__I_stim__stim_period_converted,
                var_chaste_interface__I_stim__stim_start_converted
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractGeneralizedRushLarsenCardiacCell(
                7,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 140.0; // (var_model_parameters__Ki) [millimolar]
        this->mParameters[1] = 5.0; // (var_model_parameters__Ko) [millimolar]
        this->mParameters[2] = 4.5000000000000001e-6; // (var_membrane__Cm) [microfarad]
        this->mParameters[3] = 5.4000000000000004e-9; // (var_I_Shkr__PShkr) [microlitre_per_second]
        this->mParameters[4] = 0.001; // (var_I_Kir__GKir) [microsiemens]
        this->mParameters[5] = 6.9e-6; // (var_I_b__Gb) [microsiemens]
        this->mParameters[6] = 295.0; // (var_model_parameters__T) [kelvin]
    }

    Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::~Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt()
    {
    }

    AbstractLookupTableCollection* Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::GetLookupTableCollection()
    {
        return Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt_LookupTables::Instance();
    }
    
    double Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -58.0
        double var_chaste_interface__I_Shkr__OShkr = rY[6];
        // Units: dimensionless; Initial value: 0.0
        
        const double var_I_b__I_b_converted = 0.001 * HeartConfig::Instance()->GetCapacitance() * mParameters[5] * var_chaste_interface__membrane__Vm / mParameters[2]; // uA_per_cm2
        const double var_I_Kir__EK = 0.086113989637305696 * mParameters[6] * log(mParameters[1] / mParameters[0]); // millivolt
        const double var_I_Kir__I_Kir_converted = 3.1622776601683795e-5 * sqrt(mParameters[1]) * (-var_I_Kir__EK + var_chaste_interface__membrane__Vm) * HeartConfig::Instance()->GetCapacitance() * mParameters[4] / ((0.93999999999999995 + exp(14.631768953068592 * (-var_I_Kir__EK + var_chaste_interface__membrane__Vm) / mParameters[6])) * mParameters[2]); // uA_per_cm2
        const double var_I_Shkr__I_Shkr_converted = 0.001 * HeartConfig::Instance()->GetCapacitance() * ((fabs(var_chaste_interface__membrane__Vm) < 8.6113989637305703e-9 * fabs(mParameters[6])) ? (-58062575.210589655 * (-8.6113989637305703e-9 * mParameters[6] + var_chaste_interface__membrane__Vm) * (-0.0096499999999999989 * (-mParameters[1] * exp(9.9999999999999995e-8) + mParameters[0]) * var_chaste_interface__I_Shkr__OShkr * mParameters[3] / (1.0 - exp(9.9999999999999995e-8)) - 0.0096499999999999989 * (-mParameters[1] * exp(-9.9999999999999995e-8) + mParameters[0]) * var_chaste_interface__I_Shkr__OShkr * mParameters[3] / (1.0 - exp(-9.9999999999999995e-8))) / mParameters[6] + 0.0096499999999999989 * (-mParameters[1] * exp(-9.9999999999999995e-8) + mParameters[0]) * var_chaste_interface__I_Shkr__OShkr * mParameters[3] / (1.0 - exp(-9.9999999999999995e-8))) : (1120607.7015643802 * (-mParameters[1] * exp(-11.612515042117931 * var_chaste_interface__membrane__Vm / mParameters[6]) + mParameters[0]) * var_chaste_interface__I_Shkr__OShkr * mParameters[3] * var_chaste_interface__membrane__Vm / ((1.0 - exp(-11.612515042117931 * var_chaste_interface__membrane__Vm / mParameters[6])) * mParameters[6]))) / mParameters[2]; // uA_per_cm2
        const double var_chaste_interface__i_ionic = var_I_Kir__I_Kir_converted + var_I_Shkr__I_Shkr_converted + var_I_b__I_b_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::UpdateTransmembranePotential(double var_chaste_interface__environment__time_converted)
    {
        std::vector<double>& rY = rGetStateVariables();
        unsigned v_index = GetVoltageIndex();
        const double delta = 1e-8;

        double d_dt_chaste_interface_var_membrane__Vm;
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -58.0
        double var_chaste_interface__I_Shkr__OShkr = rY[6];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_I_Kir__EK = 0.086113989637305696 * mParameters[6] * log(mParameters[1] / mParameters[0]); // millivolt
        d_dt_chaste_interface_var_membrane__Vm = 0.001 * (-((fabs(var_chaste_interface__membrane__Vm) < 8.6113989637305703e-9 * fabs(mParameters[6])) ? (-58062575.210589655 * (-8.6113989637305703e-9 * mParameters[6] + var_chaste_interface__membrane__Vm) * (-0.0096499999999999989 * (-mParameters[1] * exp(9.9999999999999995e-8) + mParameters[0]) * var_chaste_interface__I_Shkr__OShkr * mParameters[3] / (1.0 - exp(9.9999999999999995e-8)) - 0.0096499999999999989 * (-mParameters[1] * exp(-9.9999999999999995e-8) + mParameters[0]) * var_chaste_interface__I_Shkr__OShkr * mParameters[3] / (1.0 - exp(-9.9999999999999995e-8))) / mParameters[6] + 0.0096499999999999989 * (-mParameters[1] * exp(-9.9999999999999995e-8) + mParameters[0]) * var_chaste_interface__I_Shkr__OShkr * mParameters[3] / (1.0 - exp(-9.9999999999999995e-8))) : (1120607.7015643802 * (-mParameters[1] * exp(-11.612515042117931 * var_chaste_interface__membrane__Vm / mParameters[6]) + mParameters[0]) * var_chaste_interface__I_Shkr__OShkr * mParameters[3] * var_chaste_interface__membrane__Vm / ((1.0 - exp(-11.612515042117931 * var_chaste_interface__membrane__Vm / mParameters[6])) * mParameters[6]))) - mParameters[5] * var_chaste_interface__membrane__Vm - 1000.0 * GetIntracellularAreaStimulus(var_chaste_interface__environment__time_converted) * mParameters[2] / HeartConfig::Instance()->GetCapacitance() - 0.031622776601683791 * sqrt(mParameters[1]) * (-var_I_Kir__EK + var_chaste_interface__membrane__Vm) * mParameters[4] / (0.93999999999999995 + exp(14.631768953068592 * (-var_I_Kir__EK + var_chaste_interface__membrane__Vm) / mParameters[6]))) / mParameters[2]; // millivolt / millisecond

        double evalF = d_dt_chaste_interface_var_membrane__Vm;
        mEvalF[0] = d_dt_chaste_interface_var_membrane__Vm;
        double partialF = EvaluatePartialDerivative0(var_chaste_interface__environment__time_converted, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] += evalF*mDt;
        }
        else
        {
            rY[v_index] += (evalF/partialF)*(exp(partialF*mDt)-1.0);
        }
    }

    void Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time_converted)
    {
        std::vector<double>& rY = rGetStateVariables();
        const double delta = 1e-8;

        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -58.0
        double var_chaste_interface__I_Shkr__C0Shkr = rY[1];
        // Units: dimensionless; Initial value: 0.911
        double var_chaste_interface__I_Shkr__C1Shkr = rY[2];
        // Units: dimensionless; Initial value: 0.0857
        double var_chaste_interface__I_Shkr__C2Shkr = rY[3];
        // Units: dimensionless; Initial value: 0.00302
        double var_chaste_interface__I_Shkr__C3Shkr = rY[4];
        // Units: dimensionless; Initial value: 4.74e-05
        double var_chaste_interface__I_Shkr__C4Shkr = rY[5];
        // Units: dimensionless; Initial value: 2.79e-07
        double var_chaste_interface__I_Shkr__OShkr = rY[6];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double d_dt_chaste_interface_var_I_Shkr__OShkr = 0.076999999999999999 * var_chaste_interface__I_Shkr__C4Shkr - 0.017999999999999999 * var_chaste_interface__I_Shkr__OShkr; // 1 / millisecond
        const double var_I_Shkr__k_v = 2.0 * exp(-17.767148014440433 * var_chaste_interface__membrane__Vm / mParameters[6]); // first_order_rate_constant
        const double var_I_Shkr__kv = 30.0 * exp(14.864019253910952 * var_chaste_interface__membrane__Vm / mParameters[6]); // first_order_rate_constant
        const double d_dt_chaste_interface_var_I_Shkr__C0Shkr = 0.001 * var_chaste_interface__I_Shkr__C1Shkr * var_I_Shkr__k_v - 0.0040000000000000001 * var_chaste_interface__I_Shkr__C0Shkr * var_I_Shkr__kv; // 1 / millisecond
        const double d_dt_chaste_interface_var_I_Shkr__C1Shkr = 0.002 * var_chaste_interface__I_Shkr__C2Shkr * var_I_Shkr__k_v + 0.0040000000000000001 * var_chaste_interface__I_Shkr__C0Shkr * var_I_Shkr__kv - 0.001 * (3.0 * var_I_Shkr__kv + var_I_Shkr__k_v) * var_chaste_interface__I_Shkr__C1Shkr; // 1 / millisecond
        const double d_dt_chaste_interface_var_I_Shkr__C2Shkr = 0.0030000000000000001 * var_chaste_interface__I_Shkr__C1Shkr * var_I_Shkr__kv + 0.0030000000000000001 * var_chaste_interface__I_Shkr__C3Shkr * var_I_Shkr__k_v - 0.001 * (2.0 * var_I_Shkr__k_v + 2.0 * var_I_Shkr__kv) * var_chaste_interface__I_Shkr__C2Shkr; // 1 / millisecond
        const double d_dt_chaste_interface_var_I_Shkr__C3Shkr = 0.002 * var_chaste_interface__I_Shkr__C2Shkr * var_I_Shkr__kv + 0.0040000000000000001 * var_chaste_interface__I_Shkr__C4Shkr * var_I_Shkr__k_v - 0.001 * (3.0 * var_I_Shkr__k_v + var_I_Shkr__kv) * var_chaste_interface__I_Shkr__C3Shkr; // 1 / millisecond
        const double d_dt_chaste_interface_var_I_Shkr__C4Shkr = 0.017999999999999999 * var_chaste_interface__I_Shkr__OShkr + 0.001 * var_chaste_interface__I_Shkr__C3Shkr * var_I_Shkr__kv - 0.001 * (77.0 + 4.0 * var_I_Shkr__k_v) * var_chaste_interface__I_Shkr__C4Shkr; // 1 / millisecond
        
        mEvalF[1] = d_dt_chaste_interface_var_I_Shkr__C0Shkr;
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__environment__time_converted, rY, delta);
        mEvalF[2] = d_dt_chaste_interface_var_I_Shkr__C1Shkr;
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__environment__time_converted, rY, delta);
        mEvalF[3] = d_dt_chaste_interface_var_I_Shkr__C2Shkr;
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__environment__time_converted, rY, delta);
        mEvalF[4] = d_dt_chaste_interface_var_I_Shkr__C3Shkr;
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__environment__time_converted, rY, delta);
        mEvalF[5] = d_dt_chaste_interface_var_I_Shkr__C4Shkr;
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__environment__time_converted, rY, delta);
        mEvalF[6] = d_dt_chaste_interface_var_I_Shkr__OShkr;
        mPartialF[6] = EvaluatePartialDerivative6(var_chaste_interface__environment__time_converted, rY, delta);
        
        {
            if (fabs(mPartialF[1]) < delta){
                rY[1] += mDt*d_dt_chaste_interface_var_I_Shkr__C0Shkr;
            }
            else
            {
                rY[1] += (d_dt_chaste_interface_var_I_Shkr__C0Shkr/mPartialF[1])*(exp(mPartialF[1]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[2]) < delta){
                rY[2] += mDt*d_dt_chaste_interface_var_I_Shkr__C1Shkr;
            }
            else
            {
                rY[2] += (d_dt_chaste_interface_var_I_Shkr__C1Shkr/mPartialF[2])*(exp(mPartialF[2]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[3]) < delta){
                rY[3] += mDt*d_dt_chaste_interface_var_I_Shkr__C2Shkr;
            }
            else
            {
                rY[3] += (d_dt_chaste_interface_var_I_Shkr__C2Shkr/mPartialF[3])*(exp(mPartialF[3]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[4]) < delta){
                rY[4] += mDt*d_dt_chaste_interface_var_I_Shkr__C3Shkr;
            }
            else
            {
                rY[4] += (d_dt_chaste_interface_var_I_Shkr__C3Shkr/mPartialF[4])*(exp(mPartialF[4]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[5]) < delta){
                rY[5] += mDt*d_dt_chaste_interface_var_I_Shkr__C4Shkr;
            }
            else
            {
                rY[5] += (d_dt_chaste_interface_var_I_Shkr__C4Shkr/mPartialF[5])*(exp(mPartialF[5]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[6]) < delta){
                rY[6] += mDt*d_dt_chaste_interface_var_I_Shkr__OShkr;
            }
            else
            {
                rY[6] += (d_dt_chaste_interface_var_I_Shkr__OShkr/mPartialF[6])*(exp(mPartialF[6]*mDt)-1.0);
            }
            
        }        
        
    }
   
    
    double Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::EvaluateYDerivative0(double var_chaste_interface__environment__time_converted, std::vector<double>& rY)
    {
        double d_dt_chaste_interface_var_membrane__Vm;
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -58.0
        double var_chaste_interface__I_Shkr__OShkr = rY[6];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_I_Kir__EK = 0.086113989637305696 * mParameters[6] * log(mParameters[1] / mParameters[0]); // millivolt
        d_dt_chaste_interface_var_membrane__Vm = 0.001 * (-((fabs(var_chaste_interface__membrane__Vm) < 8.6113989637305703e-9 * fabs(mParameters[6])) ? (-58062575.210589655 * (-8.6113989637305703e-9 * mParameters[6] + var_chaste_interface__membrane__Vm) * (-0.0096499999999999989 * (-mParameters[1] * exp(9.9999999999999995e-8) + mParameters[0]) * var_chaste_interface__I_Shkr__OShkr * mParameters[3] / (1.0 - exp(9.9999999999999995e-8)) - 0.0096499999999999989 * (-mParameters[1] * exp(-9.9999999999999995e-8) + mParameters[0]) * var_chaste_interface__I_Shkr__OShkr * mParameters[3] / (1.0 - exp(-9.9999999999999995e-8))) / mParameters[6] + 0.0096499999999999989 * (-mParameters[1] * exp(-9.9999999999999995e-8) + mParameters[0]) * var_chaste_interface__I_Shkr__OShkr * mParameters[3] / (1.0 - exp(-9.9999999999999995e-8))) : (1120607.7015643802 * (-mParameters[1] * exp(-11.612515042117931 * var_chaste_interface__membrane__Vm / mParameters[6]) + mParameters[0]) * var_chaste_interface__I_Shkr__OShkr * mParameters[3] * var_chaste_interface__membrane__Vm / ((1.0 - exp(-11.612515042117931 * var_chaste_interface__membrane__Vm / mParameters[6])) * mParameters[6]))) - mParameters[5] * var_chaste_interface__membrane__Vm - 1000.0 * GetIntracellularAreaStimulus(var_chaste_interface__environment__time_converted) * mParameters[2] / HeartConfig::Instance()->GetCapacitance() - 0.031622776601683791 * sqrt(mParameters[1]) * (-var_I_Kir__EK + var_chaste_interface__membrane__Vm) * mParameters[4] / (0.93999999999999995 + exp(14.631768953068592 * (-var_I_Kir__EK + var_chaste_interface__membrane__Vm) / mParameters[6]))) / mParameters[2]; // millivolt / millisecond

        return d_dt_chaste_interface_var_membrane__Vm;
    }

    double Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::EvaluatePartialDerivative0(double var_chaste_interface__environment__time_converted, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -58.0
            double var_chaste_interface__I_Shkr__OShkr = rY[6];
            // Units: dimensionless; Initial value: 0.0
            

            const double var_x0 = exp(9.9999999999999995e-8);
            const double var_x1 = 0.0096499999999999989 * mParameters[3];
            const double var_x2 = var_x1 * (-var_x0 * mParameters[1] + mParameters[0]) / (1.0 - var_x0);
            const double var_x3 = exp(-9.9999999999999995e-8);
            const double var_x4 = var_x1 * (-var_x3 * mParameters[1] + mParameters[0]) / (1.0 - var_x3);
            const double var_x5 = 1 / mParameters[6];
            const double var_x6 = 58062575.210589655 * var_x5;
            const double var_x7 = var_x5 * (-0.086113989637305696 * mParameters[6] * log(mParameters[1] / mParameters[0]) + var_chaste_interface__membrane__Vm);
            const double var_x8 = exp(14.631768953068592 * var_x7);
            const double var_x9 = 0.93999999999999995 + var_x8;
            const double var_x10 = sqrt(mParameters[1]) * mParameters[4];
            const double var_x11 = -mParameters[5] - 0.031622776601683791 * var_x10 / var_x9 + 0.46269716089034085 * var_x10 * var_x7 * var_x8 / pow(var_x9, 2);
            const double var_x12 = 1 / mParameters[2];
            const double var_x13 = 0.001 * var_x12;
            const double var_x14 = fabs(var_chaste_interface__membrane__Vm) < 8.6113989637305703e-9 * fabs(mParameters[6]);
            const double var_x15 = var_x5 * var_chaste_interface__membrane__Vm;
            const double var_x16 = exp(-11.612515042117931 * var_x15);
            const double var_x17 = 1.0 - var_x16;
            const double var_x18 = 1 / var_x17;
            const double var_x19 = var_x16 * mParameters[1];
            const double var_x20 = -var_x19 + mParameters[0];
            const double var_x21 = var_x18 * var_x20 * mParameters[3];
            const double var_x22 = 13013073.790729566 * var_chaste_interface__I_Shkr__OShkr * mParameters[3] * var_chaste_interface__membrane__Vm / pow(mParameters[6], 2);
            
            partialF = ((var_x14) ? (var_x13 * (var_x11 + var_x6 * (-var_x2 * var_chaste_interface__I_Shkr__OShkr - var_x4 * var_chaste_interface__I_Shkr__OShkr))) : (var_x13 * (var_x11 - var_x18 * var_x19 * var_x22 - 1120607.7015643802 * var_x21 * var_x5 * var_chaste_interface__I_Shkr__OShkr + var_x16 * var_x20 * var_x22 / pow(var_x17, 2))));
        }
        else
        {
            const double y_save = rY[0];
            rY[0] += delta;
            const double temp = EvaluateYDerivative0(var_chaste_interface__environment__time_converted, rY);
            partialF = (temp-mEvalF[0])/delta;
            rY[0] = y_save;
        }
        return partialF;
    }
    double Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::EvaluateYDerivative1(double var_chaste_interface__environment__time_converted, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -58.0
        double var_chaste_interface__I_Shkr__C0Shkr = rY[1];
        // Units: dimensionless; Initial value: 0.911
        double var_chaste_interface__I_Shkr__C1Shkr = rY[2];
        // Units: dimensionless; Initial value: 0.0857
        

        // Mathematics
        const double var_I_Shkr__k_v = 2.0 * exp(-17.767148014440433 * var_chaste_interface__membrane__Vm / mParameters[6]); // first_order_rate_constant
        const double var_I_Shkr__kv = 30.0 * exp(14.864019253910952 * var_chaste_interface__membrane__Vm / mParameters[6]); // first_order_rate_constant
        const double d_dt_chaste_interface_var_I_Shkr__C0Shkr = 0.001 * var_chaste_interface__I_Shkr__C1Shkr * var_I_Shkr__k_v - 0.0040000000000000001 * var_chaste_interface__I_Shkr__C0Shkr * var_I_Shkr__kv; // 1 / millisecond

        return d_dt_chaste_interface_var_I_Shkr__C0Shkr;
    }

    double Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::EvaluatePartialDerivative1(double var_chaste_interface__environment__time_converted, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -58.0
            

            const double var_x5 = 1 / mParameters[6];
            const double var_x15 = var_x5 * var_chaste_interface__membrane__Vm;
            const double var_x27 = exp(14.864019253910952 * var_x15);
            const double var_x30 = 0.12 * var_x27;
            
            partialF = -var_x30;
        }
        else
        {
            const double y_save = rY[1];
            rY[1] += delta;
            const double temp = EvaluateYDerivative1(var_chaste_interface__environment__time_converted, rY);
            partialF = (temp-mEvalF[1])/delta;
            rY[1] = y_save;
        }
        return partialF;
    }
    double Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::EvaluateYDerivative2(double var_chaste_interface__environment__time_converted, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -58.0
        double var_chaste_interface__I_Shkr__C0Shkr = rY[1];
        // Units: dimensionless; Initial value: 0.911
        double var_chaste_interface__I_Shkr__C1Shkr = rY[2];
        // Units: dimensionless; Initial value: 0.0857
        double var_chaste_interface__I_Shkr__C2Shkr = rY[3];
        // Units: dimensionless; Initial value: 0.00302
        

        // Mathematics
        const double var_I_Shkr__k_v = 2.0 * exp(-17.767148014440433 * var_chaste_interface__membrane__Vm / mParameters[6]); // first_order_rate_constant
        const double var_I_Shkr__kv = 30.0 * exp(14.864019253910952 * var_chaste_interface__membrane__Vm / mParameters[6]); // first_order_rate_constant
        const double d_dt_chaste_interface_var_I_Shkr__C1Shkr = 0.002 * var_chaste_interface__I_Shkr__C2Shkr * var_I_Shkr__k_v + 0.0040000000000000001 * var_chaste_interface__I_Shkr__C0Shkr * var_I_Shkr__kv - 0.001 * (3.0 * var_I_Shkr__kv + var_I_Shkr__k_v) * var_chaste_interface__I_Shkr__C1Shkr; // 1 / millisecond

        return d_dt_chaste_interface_var_I_Shkr__C1Shkr;
    }

    double Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::EvaluatePartialDerivative2(double var_chaste_interface__environment__time_converted, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -58.0
            

            const double var_x5 = 1 / mParameters[6];
            const double var_x15 = var_x5 * var_chaste_interface__membrane__Vm;
            const double var_x24 = exp(-17.767148014440433 * var_x15);
            const double var_x27 = exp(14.864019253910952 * var_x15);
            const double var_x31 = 0.002 * var_x24;
            const double var_x33 = 0.089999999999999997 * var_x27;
            
            partialF = -var_x31 - var_x33;
        }
        else
        {
            const double y_save = rY[2];
            rY[2] += delta;
            const double temp = EvaluateYDerivative2(var_chaste_interface__environment__time_converted, rY);
            partialF = (temp-mEvalF[2])/delta;
            rY[2] = y_save;
        }
        return partialF;
    }
    double Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::EvaluateYDerivative3(double var_chaste_interface__environment__time_converted, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -58.0
        double var_chaste_interface__I_Shkr__C1Shkr = rY[2];
        // Units: dimensionless; Initial value: 0.0857
        double var_chaste_interface__I_Shkr__C2Shkr = rY[3];
        // Units: dimensionless; Initial value: 0.00302
        double var_chaste_interface__I_Shkr__C3Shkr = rY[4];
        // Units: dimensionless; Initial value: 4.74e-05
        

        // Mathematics
        const double var_I_Shkr__k_v = 2.0 * exp(-17.767148014440433 * var_chaste_interface__membrane__Vm / mParameters[6]); // first_order_rate_constant
        const double var_I_Shkr__kv = 30.0 * exp(14.864019253910952 * var_chaste_interface__membrane__Vm / mParameters[6]); // first_order_rate_constant
        const double d_dt_chaste_interface_var_I_Shkr__C2Shkr = 0.0030000000000000001 * var_chaste_interface__I_Shkr__C1Shkr * var_I_Shkr__kv + 0.0030000000000000001 * var_chaste_interface__I_Shkr__C3Shkr * var_I_Shkr__k_v - 0.001 * (2.0 * var_I_Shkr__k_v + 2.0 * var_I_Shkr__kv) * var_chaste_interface__I_Shkr__C2Shkr; // 1 / millisecond

        return d_dt_chaste_interface_var_I_Shkr__C2Shkr;
    }

    double Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::EvaluatePartialDerivative3(double var_chaste_interface__environment__time_converted, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -58.0
            

            const double var_x5 = 1 / mParameters[6];
            const double var_x15 = var_x5 * var_chaste_interface__membrane__Vm;
            const double var_x24 = exp(-17.767148014440433 * var_x15);
            const double var_x27 = exp(14.864019253910952 * var_x15);
            const double var_x34 = 0.0040000000000000001 * var_x24;
            const double var_x36 = 0.059999999999999998 * var_x27;
            
            partialF = -var_x34 - var_x36;
        }
        else
        {
            const double y_save = rY[3];
            rY[3] += delta;
            const double temp = EvaluateYDerivative3(var_chaste_interface__environment__time_converted, rY);
            partialF = (temp-mEvalF[3])/delta;
            rY[3] = y_save;
        }
        return partialF;
    }
    double Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::EvaluateYDerivative4(double var_chaste_interface__environment__time_converted, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -58.0
        double var_chaste_interface__I_Shkr__C2Shkr = rY[3];
        // Units: dimensionless; Initial value: 0.00302
        double var_chaste_interface__I_Shkr__C3Shkr = rY[4];
        // Units: dimensionless; Initial value: 4.74e-05
        double var_chaste_interface__I_Shkr__C4Shkr = rY[5];
        // Units: dimensionless; Initial value: 2.79e-07
        

        // Mathematics
        const double var_I_Shkr__k_v = 2.0 * exp(-17.767148014440433 * var_chaste_interface__membrane__Vm / mParameters[6]); // first_order_rate_constant
        const double var_I_Shkr__kv = 30.0 * exp(14.864019253910952 * var_chaste_interface__membrane__Vm / mParameters[6]); // first_order_rate_constant
        const double d_dt_chaste_interface_var_I_Shkr__C3Shkr = 0.002 * var_chaste_interface__I_Shkr__C2Shkr * var_I_Shkr__kv + 0.0040000000000000001 * var_chaste_interface__I_Shkr__C4Shkr * var_I_Shkr__k_v - 0.001 * (3.0 * var_I_Shkr__k_v + var_I_Shkr__kv) * var_chaste_interface__I_Shkr__C3Shkr; // 1 / millisecond

        return d_dt_chaste_interface_var_I_Shkr__C3Shkr;
    }

    double Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::EvaluatePartialDerivative4(double var_chaste_interface__environment__time_converted, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -58.0
            

            const double var_x5 = 1 / mParameters[6];
            const double var_x15 = var_x5 * var_chaste_interface__membrane__Vm;
            const double var_x24 = exp(-17.767148014440433 * var_x15);
            const double var_x27 = exp(14.864019253910952 * var_x15);
            const double var_x37 = 0.0060000000000000001 * var_x24;
            const double var_x40 = 0.029999999999999999 * var_x27;
            
            partialF = -var_x37 - var_x40;
        }
        else
        {
            const double y_save = rY[4];
            rY[4] += delta;
            const double temp = EvaluateYDerivative4(var_chaste_interface__environment__time_converted, rY);
            partialF = (temp-mEvalF[4])/delta;
            rY[4] = y_save;
        }
        return partialF;
    }
    double Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::EvaluateYDerivative5(double var_chaste_interface__environment__time_converted, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -58.0
        double var_chaste_interface__I_Shkr__C3Shkr = rY[4];
        // Units: dimensionless; Initial value: 4.74e-05
        double var_chaste_interface__I_Shkr__C4Shkr = rY[5];
        // Units: dimensionless; Initial value: 2.79e-07
        double var_chaste_interface__I_Shkr__OShkr = rY[6];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_I_Shkr__k_v = 2.0 * exp(-17.767148014440433 * var_chaste_interface__membrane__Vm / mParameters[6]); // first_order_rate_constant
        const double var_I_Shkr__kv = 30.0 * exp(14.864019253910952 * var_chaste_interface__membrane__Vm / mParameters[6]); // first_order_rate_constant
        const double d_dt_chaste_interface_var_I_Shkr__C4Shkr = 0.017999999999999999 * var_chaste_interface__I_Shkr__OShkr + 0.001 * var_chaste_interface__I_Shkr__C3Shkr * var_I_Shkr__kv - 0.001 * (77.0 + 4.0 * var_I_Shkr__k_v) * var_chaste_interface__I_Shkr__C4Shkr; // 1 / millisecond

        return d_dt_chaste_interface_var_I_Shkr__C4Shkr;
    }

    double Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::EvaluatePartialDerivative5(double var_chaste_interface__environment__time_converted, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -58.0
            

            const double var_x5 = 1 / mParameters[6];
            const double var_x15 = var_x5 * var_chaste_interface__membrane__Vm;
            const double var_x24 = exp(-17.767148014440433 * var_x15);
            const double var_x41 = 0.0080000000000000002 * var_x24;
            
            partialF = -0.076999999999999999 - var_x41;
        }
        else
        {
            const double y_save = rY[5];
            rY[5] += delta;
            const double temp = EvaluateYDerivative5(var_chaste_interface__environment__time_converted, rY);
            partialF = (temp-mEvalF[5])/delta;
            rY[5] = y_save;
        }
        return partialF;
    }
    double Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::EvaluateYDerivative6(double var_chaste_interface__environment__time_converted, std::vector<double>& rY)
    {
        
        double var_chaste_interface__I_Shkr__C4Shkr = rY[5];
        // Units: dimensionless; Initial value: 2.79e-07
        double var_chaste_interface__I_Shkr__OShkr = rY[6];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double d_dt_chaste_interface_var_I_Shkr__OShkr = 0.076999999999999999 * var_chaste_interface__I_Shkr__C4Shkr - 0.017999999999999999 * var_chaste_interface__I_Shkr__OShkr; // 1 / millisecond

        return d_dt_chaste_interface_var_I_Shkr__OShkr;
    }

    double Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::EvaluatePartialDerivative6(double var_chaste_interface__environment__time_converted, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            
            partialF = -0.017999999999999999;
        }
        else
        {
            const double y_save = rY[6];
            rY[6] += delta;
            const double temp = EvaluateYDerivative6(var_chaste_interface__environment__time_converted, rY);
            partialF = (temp-mEvalF[6])/delta;
            rY[6] = y_save;
        }
        return partialF;
    }

    std::vector<double> Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt::ComputeDerivedQuantities(double var_chaste_interface__environment__time_converted, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -58.0
        double var_chaste_interface__I_Shkr__OShkr = rY[6];
        // Units: dimensionless; Initial value: 0.0
        
        // Mathematics
        const double var_I_Kir__aKir = 0.93999999999999995; // dimensionless
        const double var_I_Kir__bKir = 1.26; // dimensionless
        const double var_I_b__Eb = 0; // millivolt
        const double var_I_stim__I_stim_converted = -GetIntracellularAreaStimulus(var_chaste_interface__environment__time_converted); // uA_per_cm2
        const double var_I_b__I_b = (-var_I_b__Eb + var_chaste_interface__membrane__Vm) * mParameters[5]; // nanoampere
        const double var_I_b__I_b_converted = 0.001 * HeartConfig::Instance()->GetCapacitance() * var_I_b__I_b / mParameters[2]; // uA_per_cm2
        const double var_model_parameters__F = 96500.0; // coulomb_per_mole
        const double var_model_parameters__R = 8310.0; // millijoule_per_kelvin_mole
        const double var_I_Kir__EK = var_model_parameters__R * mParameters[6] * log(mParameters[1] / mParameters[0]) / var_model_parameters__F; // millivolt
        const double var_I_Kir__OKir = 1 / (var_I_Kir__aKir + exp((-var_I_Kir__EK + var_chaste_interface__membrane__Vm) * var_I_Kir__bKir * var_model_parameters__F / (var_model_parameters__R * mParameters[6]))); // dimensionless
        const double var_I_Kir__I_Kir = 0.031622776601683791 * sqrt(mParameters[1]) * (-var_I_Kir__EK + var_chaste_interface__membrane__Vm) * mParameters[4] * var_I_Kir__OKir; // nanoampere
        const double var_I_Kir__I_Kir_converted = 0.001 * HeartConfig::Instance()->GetCapacitance() * var_I_Kir__I_Kir / mParameters[2]; // uA_per_cm2
        const double var_I_Shkr__I_Shkr = ((fabs(var_chaste_interface__membrane__Vm) < 8.6113989637305703e-9 * fabs(mParameters[6])) ? (-58062575.210589655 * (-8.6113989637305703e-9 * mParameters[6] + var_chaste_interface__membrane__Vm) * (-0.0096499999999999989 * (-mParameters[1] * exp(9.9999999999999995e-8) + mParameters[0]) * var_chaste_interface__I_Shkr__OShkr * mParameters[3] / (1.0 - exp(9.9999999999999995e-8)) - 0.0096499999999999989 * (-mParameters[1] * exp(-9.9999999999999995e-8) + mParameters[0]) * var_chaste_interface__I_Shkr__OShkr * mParameters[3] / (1.0 - exp(-9.9999999999999995e-8))) / mParameters[6] + 0.0096499999999999989 * (-mParameters[1] * exp(-9.9999999999999995e-8) + mParameters[0]) * var_chaste_interface__I_Shkr__OShkr * mParameters[3] / (1.0 - exp(-9.9999999999999995e-8))) : (1120607.7015643802 * (-mParameters[1] * exp(-11.612515042117931 * var_chaste_interface__membrane__Vm / mParameters[6]) + mParameters[0]) * var_chaste_interface__I_Shkr__OShkr * mParameters[3] * var_chaste_interface__membrane__Vm / ((1.0 - exp(-11.612515042117931 * var_chaste_interface__membrane__Vm / mParameters[6])) * mParameters[6]))); // nanoampere
        const double var_I_Shkr__I_Shkr_converted = 0.001 * HeartConfig::Instance()->GetCapacitance() * var_I_Shkr__I_Shkr / mParameters[2]; // uA_per_cm2

        std::vector<double> dqs(5);
        dqs[0] = var_I_Shkr__I_Shkr_converted;
        dqs[1] = var_I_Kir__I_Kir_converted;
        dqs[2] = var_I_b__I_b_converted;
        dqs[3] = var_I_stim__I_stim_converted;
        dqs[4] = var_chaste_interface__environment__time_converted;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt>::Initialise(void)
{
    this->mSystemName = "sachse_model_2007";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-58.0);

    // rY[1]:
    this->mVariableNames.push_back("I_Shkr__C0Shkr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.911);

    // rY[2]:
    this->mVariableNames.push_back("I_Shkr__C1Shkr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0857);

    // rY[3]:
    this->mVariableNames.push_back("I_Shkr__C2Shkr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00302);

    // rY[4]:
    this->mVariableNames.push_back("I_Shkr__C3Shkr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(4.74e-05);

    // rY[5]:
    this->mVariableNames.push_back("I_Shkr__C4Shkr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.79e-07);

    // rY[6]:
    this->mVariableNames.push_back("I_Shkr__OShkr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // mParameters[0]:
    this->mParameterNames.push_back("cytosolic_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[1]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[2]:
    this->mParameterNames.push_back("membrane_capacitance");
    this->mParameterUnits.push_back("microfarad");

    // mParameters[3]:
    this->mParameterNames.push_back("membrane_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("microlitre_per_second");

    // mParameters[4]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("microsiemens");

    // mParameters[5]:
    this->mParameterNames.push_back("membrane_leakage_current_conductance");
    this->mParameterUnits.push_back("microsiemens");

    // mParameters[6]:
    this->mParameterNames.push_back("temperature");
    this->mParameterUnits.push_back("kelvin");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("membrane_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_leakage_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellsachse_moreno_abildskov_2008_bFromCellMLGRL1Opt)

