//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: shannon_wang_puglisi_weber_bers_2004_model_updated
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: GeneralizedRushLarsenFirstOrderOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "shannon_wang_puglisi_weber_bers_2004.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<19; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__cell__V)
    {
        const double _offset_0 = var_chaste_interface__cell__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__cell__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__cell__V>mTableMaxs[0] || var_chaste_interface__cell__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables(const Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables&);
    Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables& operator= (const Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables&);
    Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 19;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][19];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(1.4732142857142858 + 0.044642857142857144 * var_chaste_interface__cell__V);

                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-2.4166666666666665 - 0.16666666666666666 * var_chaste_interface__cell__V));

                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(14.5 + var_chaste_interface__cell__V) < 5.9999999999643672e-7) ? (1 / (47619047.619881123 * (1.0 - exp(-9.9999999998249642e-8)) / (1.0 + exp(-9.9999999998249642e-8)) - 833333.3333382823 * (14.4999994 + var_chaste_interface__cell__V) * (-47619047.619881123 * (1.0 - exp(-9.9999999998249642e-8)) / (1.0 + exp(-9.9999999998249642e-8)) - 47619047.618779711 * (1.0 - exp(1.000000000005626e-7)) / (1.0 + exp(1.000000000005626e-7))))) : (0.035000000000000003 * (1.0 + exp(-2.4166666666666665 - 0.16666666666666666 * var_chaste_interface__cell__V)) * (14.5 + var_chaste_interface__cell__V) / (1.0 - exp(-2.4166666666666665 - 0.16666666666666666 * var_chaste_interface__cell__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[2] < 2){
                    double left = _lookup_table_0[i-1][2];
                    double right = _lookup_table_0[i+1][2];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 2 at ["<<i<<"][2] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[2] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[2] >= 2){
                    EXCEPTION("Lookup table 2 at ["<<i<<"][2] has non-finite value: " << val);
                }
                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(9.7388888888888889 + 0.27777777777777779 * var_chaste_interface__cell__V));

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.59999999999999998 / (1.0 + exp(2.5 - 0.050000000000000003 * var_chaste_interface__cell__V));

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.02 + 0.019699999999999999 * exp(-0.23877882250000002 * pow((1 + 0.068965517241379309 * var_chaste_interface__cell__V), 2));

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-6.666666666666667 - 0.13333333333333333 * var_chaste_interface__cell__V));

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(10.0 + var_chaste_interface__cell__V) < 6.8965517241448282e-7) ? (-4.2068965517283451e-10 / (-1.0 + exp(-1.000000000001e-7)) + 0.0013799999999999999 * (7.0 + var_chaste_interface__cell__V) / (1.0 - exp(-0.86099999999999999 - 0.123 * var_chaste_interface__cell__V)) + 724999.99999927497 * (10.000000689655172 + var_chaste_interface__cell__V) * (4.2068965517283451e-10 / (-1.0 + exp(1.000000000001e-7)) + 4.2068965517283451e-10 / (-1.0 + exp(-1.000000000001e-7)))) : ((fabs(7.0 + var_chaste_interface__cell__V) < 8.1300813008222672e-7) ? (1.1219512195134727e-9 / (1.0 - exp(-1.0000000000011388e-7)) + 0.00060999999999999997 * (10.0 + var_chaste_interface__cell__V) / (-1.0 + exp(1.45 + 0.14499999999999999 * var_chaste_interface__cell__V)) - 614999.99999929965 * (6.9999991869918698 + var_chaste_interface__cell__V) * (-1.1219512195134727e-9 / (1.0 - exp(1.0000000000011388e-7)) - 1.1219512195134727e-9 / (1.0 - exp(-1.0000000000011388e-7)))) : (0.00060999999999999997 * (10.0 + var_chaste_interface__cell__V) / (-1.0 + exp(1.45 + 0.14499999999999999 * var_chaste_interface__cell__V)) + 0.0013799999999999999 * (7.0 + var_chaste_interface__cell__V) / (1.0 - exp(-0.86099999999999999 - 0.123 * var_chaste_interface__cell__V)))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[7] < 2){
                    double left = _lookup_table_0[i-1][7];
                    double right = _lookup_table_0[i+1][7];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 7 at ["<<i<<"][7] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[7] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[7] >= 2){
                    EXCEPTION("Lookup table 7 at ["<<i<<"][7] has non-finite value: " << val);
                }
                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(0.089820359281437126 - 0.059880239520958084 * var_chaste_interface__cell__V));

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(30.0 + var_chaste_interface__cell__V) < 1.455604075689676e-6) ? (-1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) - 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8)) + 343500.00000040967 * (30.000001455604075 + var_chaste_interface__cell__V) * (1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) + 1.0465793304208771e-10 / (1.0 - exp(-2.1542940320207204e-7)) + 1.9068413391534758e-10 / (-1.0 + exp(9.9999999999880736e-8)) + 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8)))) : (0.00013100000000000001 * (30.0 + var_chaste_interface__cell__V) / (-1.0 + exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__cell__V)) + 7.1899999999999999e-5 * (30.0 + var_chaste_interface__cell__V) / (1.0 - exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__cell__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[9] < 2){
                    double left = _lookup_table_0[i-1][9];
                    double right = _lookup_table_0[i+1][9];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 9 at ["<<i<<"][9] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[9] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[9] >= 2){
                    EXCEPTION("Lookup table 9 at ["<<i<<"][9] has non-finite value: " << val);
                }
                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(47.130000000000003 + var_chaste_interface__cell__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[10] < 2){
                    double left = _lookup_table_0[i-1][10];
                    double right = _lookup_table_0[i+1][10];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 10 at ["<<i<<"][10] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[10] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[10] >= 2){
                    EXCEPTION("Lookup table 10 at ["<<i<<"][10] has non-finite value: " << val);
                }
                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__cell__V);

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-0.20000000000000001 - 0.066666666666666666 * var_chaste_interface__cell__V));

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.5 + 3.5 * exp(-0.0011111111111111111 * pow(var_chaste_interface__cell__V, 2));

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(3.3500000000000001 + 0.10000000000000001 * var_chaste_interface__cell__V));

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 20.0 + 20.0 / (1.0 + exp(3.3500000000000001 + 0.10000000000000001 * var_chaste_interface__cell__V));

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 220.0 + 2800.0 / (1.0 + exp(6.0 + 0.10000000000000001 * var_chaste_interface__cell__V));

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.5 + 9.0 / (1.0 + exp(0.20000000000000001 + 0.066666666666666666 * var_chaste_interface__cell__V));

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 30.0 + 3000.0 / (1.0 + exp(6.0 + 0.10000000000000001 * var_chaste_interface__cell__V));

                _lookup_table_0[i][18] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[19];

    // Lookup tables
    double (*_lookup_table_0)[19];
    int _lookup_table_0_num_misshit_piecewise[19] = {0};

};

std::shared_ptr<Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables> Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -9.5 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 5.0; // millisecond
        const double var_chaste_interface__cell__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__cell__stim_start = 100.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractGeneralizedRushLarsenCardiacCell(
                45,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 5.3480000000000003e-6; // (var_Jleak_SR__KSRleak) [per_millisecond]
        this->mParameters[1] = 25.0; // (var_Jrel_SR__ks) [per_millisecond]
        this->mParameters[2] = 0.00028600000000000001; // (var_Jpump_SR__V_max) [millimolar_per_millisecond]
        this->mParameters[3] = 1.0; // (var_Na_buffer__conc_clamp) [dimensionless]
        this->mParameters[4] = 15.0; // (var_model_parameters__Cli) [millimolar]
        this->mParameters[5] = 135.0; // (var_model_parameters__Ki) [millimolar]
        this->mParameters[6] = 1.8; // (var_model_parameters__Cao) [millimolar]
        this->mParameters[7] = 150.0; // (var_model_parameters__Clo) [millimolar]
        this->mParameters[8] = 5.4000000000000004; // (var_model_parameters__Ko) [millimolar]
        this->mParameters[9] = 140.0; // (var_model_parameters__Nao) [millimolar]
        this->mParameters[10] = 96486.699999999997; // (var_model_parameters__F) [coulomb_per_mole]
        this->mParameters[11] = 8314.2999999999993; // (var_model_parameters__R) [joule_per_kilomole_kelvin]
        this->mParameters[12] = 0.00054000000000000001; // (var_ICaL__PCa) [litre_per_farad_millisecond]
        this->mParameters[13] = 0.0089999999999999993; // (var_IClb__G_ClBk) [milliS_per_microF]
        this->mParameters[14] = 16.0; // (var_INa__G_INa) [milliS_per_microF]
        this->mParameters[15] = 0; // (var_INa__perc_reduced_inact_for_IpNa) [dimensionless]
        this->mParameters[16] = 0; // (var_INa__shift_INa_inact) [millivolt]
        this->mParameters[17] = 0.02; // (var_Itof__G_tof) [milliS_per_microF]
        this->mParameters[18] = 0.90000000000000002; // (var_IK1__G_K1_max) [milliS_per_microF]
        this->mParameters[19] = 0.029999999999999999; // (var_IKr__G_IKr_const) [milliS_per_microF]
        this->mParameters[20] = 0.070000000000000007; // (var_IKs__G_Ks_max) [milliS_per_microF]
        this->mParameters[21] = 0.059999999999999998; // (var_Itos__G_tos) [milliS_per_microF]
        this->mParameters[22] = 9.0; // (var_INaCa__V_max) [microA_per_microF]
        this->mParameters[23] = 310.0; // (var_model_parameters__T) [kelvin]
    }

    Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::~Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt()
    {
    }

    AbstractLookupTableCollection* Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::GetLookupTableCollection()
    {
        return Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance();
    }
    
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__INa_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.98714602875678
        double var_chaste_interface__INa_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.991826348770428
        double var_chaste_interface__INa_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.0013702407736465
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[5];
        // Units: dimensionless; Initial value: 0.00846906175020028
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[6];
        // Units: dimensionless; Initial value: 0.00613557812033723
        double var_chaste_interface__Itos_X_gate__X_tos = rY[7];
        // Units: dimensionless; Initial value: 0.00401072468238921
        double var_chaste_interface__Itos_Y_gate__Y_tos = rY[8];
        // Units: dimensionless; Initial value: 0.31555225368514
        double var_chaste_interface__Itos_R_gate__R_tos = rY[9];
        // Units: dimensionless; Initial value: 0.402577243036347
        double var_chaste_interface__Itof_X_gate__X_tof = rY[10];
        // Units: dimensionless; Initial value: 0.00401068798369438
        double var_chaste_interface__Itof_Y_gate__Y_tof = rY[11];
        // Units: dimensionless; Initial value: 0.994632857675454
        double var_chaste_interface__ICaL_d_gate__d = rY[12];
        // Units: dimensionless; Initial value: 6.99526086177479e-06
        double var_chaste_interface__ICaL_f_gate__f = rY[13];
        // Units: dimensionless; Initial value: 1.00067601563206
        double var_chaste_interface__ICaL_fCa_gate__fCaB_SL = rY[14];
        // Units: dimensionless; Initial value: 0.0150193299768419
        double var_chaste_interface__ICaL_fCa_gate__fCaB_jct = rY[15];
        // Units: dimensionless; Initial value: 0.0244048782575591
        double var_chaste_interface__Na_buffer__Na_SL = rY[19];
        // Units: millimolar; Initial value: 8.87161932058707
        double var_chaste_interface__Na_buffer__Na_jct = rY[20];
        // Units: millimolar; Initial value: 8.87031835089116
        double var_chaste_interface__Na_buffer__Nai = rY[23];
        // Units: millimolar; Initial value: 8.87200572571131
        double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
        // Units: millimolar; Initial value: 0.000104971310105451
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        
        // Lookup table indexing
        const bool _oob_0 = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        const double var_INa__openProb = pow(var_chaste_interface__INa_m_gate__m, 3) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // dimensionless
        const double var_ICaL__i_CaL_converted = (((fabs(var_chaste_interface__cell__V) < 9.9999999999999995e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (5000000.0 * (9.9999999999999995e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (6.7499999999999994e-10 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))) + ((fabs(var_chaste_interface__cell__V) < 9.9999999999999995e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (5000000.0 * (9.9999999999999995e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (6.0749999999999998e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))) + ((fabs(var_chaste_interface__cell__V) < 9.9999999999999995e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (5000000.0 * (9.9999999999999995e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (1.2150000000000001e-14 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (-0.75 * mParameters[8] + 0.75 * mParameters[5] * exp(9.9999999999999995e-8)) * (1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 1.2150000000000001e-14 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (-0.75 * mParameters[8] + 0.75 * mParameters[5] * exp(-9.9999999999999995e-8)) * (1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 1.2150000000000001e-14 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (-0.75 * mParameters[8] + 0.75 * mParameters[5] * exp(-9.9999999999999995e-8)) * (1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (1.215e-7 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (-0.75 * mParameters[8] + 0.75 * mParameters[5] * exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * (1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))) + ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (10000000.0 * (4.9999999999999998e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (0.18000000000000002 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))) + ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (10000000.0 * (4.9999999999999998e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (1.6200000000000001 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23])))) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_ICap__Q_SLCaP = pow(2.3500000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_ICap__i_Cap_converted = (0.0074029999999999999 * var_ICap__Q_SLCaP / (1.0 + 5.2281977629563632e-6 * pow((1 / var_chaste_interface__Ca_buffer__Ca_jct), 1.6000000000000001)) + 0.059896999999999999 * var_ICap__Q_SLCaP / (1.0 + 5.2281977629563632e-6 * pow((1 / var_chaste_interface__Ca_buffer__Ca_SL), 1.6000000000000001))) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_IKs__E_Ks = mParameters[11] * mParameters[23] * log((0.018329999999999999 * mParameters[9] + mParameters[8]) / (0.018329999999999999 * var_chaste_interface__Na_buffer__Nai + mParameters[5])) / mParameters[10]; // millivolt
        const double var_IKs__i_Ks_converted = (0.11 * pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (0.057000000000000002 + 0.19 / (1.0 + exp(-7.0000000000000009 - 1.6666666666666667 * log10(var_chaste_interface__Ca_buffer__Ca_jct)))) * (-var_IKs__E_Ks + var_chaste_interface__cell__V) * mParameters[20] + 0.89000000000000001 * pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (0.057000000000000002 + 0.19 / (1.0 + exp(-7.0000000000000009 - 1.6666666666666667 * log10(var_chaste_interface__Ca_buffer__Ca_SL)))) * (-var_IKs__E_Ks + var_chaste_interface__cell__V) * mParameters[20]) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_INaCa__Q_NCX = pow(1.5700000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaCa__i_NaCa_converted = (0.11 * (pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) * mParameters[6] * exp(0.34999999999999998 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) - pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_jct * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_INaCa__Q_NCX * mParameters[22] / ((1.0 + 0.27000000000000002 * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * (1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_jct, 3)) * (1.3 * pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) + pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) * mParameters[6] + pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_jct + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_jct) * var_chaste_interface__Ca_buffer__Ca_jct + 0.0035899999999999999 * pow(mParameters[9], 3.0) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_buffer__Na_jct, 3.0)))) + 0.89000000000000001 * (pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) * mParameters[6] * exp(0.34999999999999998 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) - pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_SL * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_INaCa__Q_NCX * mParameters[22] / ((1.0 + 0.27000000000000002 * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * (1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_SL, 3)) * (1.3 * pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) + pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) * mParameters[6] + pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_SL + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_SL) * var_chaste_interface__Ca_buffer__Ca_SL + 0.0035899999999999999 * pow(mParameters[9], 3.0) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_buffer__Na_SL, 3.0))))) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_INaK__Q_Km_Nai = pow(1.49, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaK__Q_NaK = pow(1.6299999999999999, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaK__f_NaK = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[9])) * exp(-var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))); // dimensionless
        const double var_INaK__i_NaK = 0.21009999999999998 * var_INaK__Q_NaK * var_INaK__f_NaK * mParameters[8] / ((1.0 + 14641.0 * pow((var_INaK__Q_Km_Nai / var_chaste_interface__Na_buffer__Na_jct), 4.0)) * (1.5 + mParameters[8])) + 1.6999 * var_INaK__Q_NaK * var_INaK__f_NaK * mParameters[8] / ((1.0 + 14641.0 * pow((var_INaK__Q_Km_Nai / var_chaste_interface__Na_buffer__Na_SL), 4.0)) * (1.5 + mParameters[8])); // microA_per_microF
        const double var_ICab__i_Cab_converted = (0.00025129999999999998 * var_chaste_interface__cell__V - 1.38215e-5 * mParameters[11] * mParameters[23] * log(mParameters[6] / var_chaste_interface__Ca_buffer__Ca_jct) / mParameters[10] - 0.00011182849999999999 * mParameters[11] * mParameters[23] * log(mParameters[6] / var_chaste_interface__Ca_buffer__Ca_SL) / mParameters[10]) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_reversal_potentials__E_Cl = -mParameters[11] * mParameters[23] * log(mParameters[7] / mParameters[4]) / mParameters[10]; // millivolt
        const double var_ICl_Ca__i_Cl_Ca = 0.109625 * (-var_reversal_potentials__E_Cl + var_chaste_interface__cell__V) * (0.11 / (1.0 + 0.10000000000000001 / var_chaste_interface__Ca_buffer__Ca_jct) + 0.89000000000000001 / (1.0 + 0.10000000000000001 / var_chaste_interface__Ca_buffer__Ca_SL)); // microA_per_microF
        const double var_IClb__i_Clb_converted = (-var_reversal_potentials__E_Cl + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[13]; // uA_per_cm2
        const double var_reversal_potentials__E_K = mParameters[11] * mParameters[23] * log(mParameters[8] / mParameters[5]) / mParameters[10]; // millivolt
        const double var_IK1__i_K1_converted = 0.4389381125701739 * sqrt(mParameters[8]) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[18] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__E_K)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__E_K)) + (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__E_K) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__E_K)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__E_K - 0.51429999999999998 * var_chaste_interface__cell__V)))); // uA_per_cm2
        const double var_IKr__i_Kr_converted = 0.43033148291193518 * sqrt(mParameters[8]) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[19] * var_chaste_interface__IKr_Xr_gate__Xr / (_lt_0_row[0]); // uA_per_cm2
        const double var_Itof__i_tof_converted = (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[17] * var_chaste_interface__Itof_X_gate__X_tof * var_chaste_interface__Itof_Y_gate__Y_tof; // uA_per_cm2
        const double var_Itos__i_tos_converted = (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * (0.5 * var_chaste_interface__Itos_R_gate__R_tos + var_chaste_interface__Itos_Y_gate__Y_tos) * HeartConfig::Instance()->GetCapacitance() * mParameters[21] * var_chaste_interface__Itos_X_gate__X_tos; // uA_per_cm2
        const double var_reversal_potentials__E_Na_SL = mParameters[11] * mParameters[23] * log(mParameters[9] / var_chaste_interface__Na_buffer__Na_SL) / mParameters[10]; // millivolt
        const double var_reversal_potentials__E_Na_jct = mParameters[11] * mParameters[23] * log(mParameters[9] / var_chaste_interface__Na_buffer__Na_jct) / mParameters[10]; // millivolt
        const double var_INa__i_Na_converted = (0.11 * (-var_reversal_potentials__E_Na_jct + var_chaste_interface__cell__V) * mParameters[14] * var_INa__openProb + 0.89000000000000001 * (-var_reversal_potentials__E_Na_SL + var_chaste_interface__cell__V) * mParameters[14] * var_INa__openProb) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_INab__i_Nab_converted = (0.00029700000000000001 * var_chaste_interface__cell__V - 0.00026433000000000001 * var_reversal_potentials__E_Na_SL - 3.2670000000000004e-5 * var_reversal_potentials__E_Na_jct) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_ICl_Ca__i_Cl_Ca + HeartConfig::Instance()->GetCapacitance() * var_INaK__i_NaK + var_ICaL__i_CaL_converted + var_ICab__i_Cab_converted + var_ICap__i_Cap_converted + var_IClb__i_Clb_converted + var_IK1__i_K1_converted + var_IKr__i_Kr_converted + var_IKs__i_Ks_converted + var_INa__i_Na_converted + var_INaCa__i_NaCa_converted + var_INab__i_Nab_converted + var_Itof__i_tof_converted + var_Itos__i_tos_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        unsigned v_index = GetVoltageIndex();
        const double delta = 1e-8;

        double d_dt_chaste_interface_var_cell__V;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__INa_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.98714602875678
        double var_chaste_interface__INa_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.991826348770428
        double var_chaste_interface__INa_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.0013702407736465
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[5];
        // Units: dimensionless; Initial value: 0.00846906175020028
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[6];
        // Units: dimensionless; Initial value: 0.00613557812033723
        double var_chaste_interface__Itos_X_gate__X_tos = rY[7];
        // Units: dimensionless; Initial value: 0.00401072468238921
        double var_chaste_interface__Itos_Y_gate__Y_tos = rY[8];
        // Units: dimensionless; Initial value: 0.31555225368514
        double var_chaste_interface__Itos_R_gate__R_tos = rY[9];
        // Units: dimensionless; Initial value: 0.402577243036347
        double var_chaste_interface__Itof_X_gate__X_tof = rY[10];
        // Units: dimensionless; Initial value: 0.00401068798369438
        double var_chaste_interface__Itof_Y_gate__Y_tof = rY[11];
        // Units: dimensionless; Initial value: 0.994632857675454
        double var_chaste_interface__ICaL_d_gate__d = rY[12];
        // Units: dimensionless; Initial value: 6.99526086177479e-06
        double var_chaste_interface__ICaL_f_gate__f = rY[13];
        // Units: dimensionless; Initial value: 1.00067601563206
        double var_chaste_interface__ICaL_fCa_gate__fCaB_SL = rY[14];
        // Units: dimensionless; Initial value: 0.0150193299768419
        double var_chaste_interface__ICaL_fCa_gate__fCaB_jct = rY[15];
        // Units: dimensionless; Initial value: 0.0244048782575591
        double var_chaste_interface__Na_buffer__Na_SL = rY[19];
        // Units: millimolar; Initial value: 8.87161932058707
        double var_chaste_interface__Na_buffer__Na_jct = rY[20];
        // Units: millimolar; Initial value: 8.87031835089116
        double var_chaste_interface__Na_buffer__Nai = rY[23];
        // Units: millimolar; Initial value: 8.87200572571131
        double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
        // Units: millimolar; Initial value: 0.000104971310105451
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        

        // Lookup table indexing
        const bool _oob_0 = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_INa__openProb = pow(var_chaste_interface__INa_m_gate__m, 3) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // dimensionless
        const double var_ICaL__i_CaL_Ca_SL = ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (10000000.0 * (4.9999999999999998e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (0.18000000000000002 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICaL__i_CaL_Ca_jct = ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (10000000.0 * (4.9999999999999998e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (1.6200000000000001 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICaL__i_CaL_Na_SL = ((fabs(var_chaste_interface__cell__V) < 9.9999999999999995e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (5000000.0 * (9.9999999999999995e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (6.7499999999999994e-10 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICaL__i_CaL_Na_jct = ((fabs(var_chaste_interface__cell__V) < 9.9999999999999995e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (5000000.0 * (9.9999999999999995e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (6.0749999999999998e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICap__Q_SLCaP = pow(2.3500000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_ICap__i_Cap_SL = 0.059896999999999999 * var_ICap__Q_SLCaP / (1.0 + 5.2281977629563632e-6 * pow((1 / var_chaste_interface__Ca_buffer__Ca_SL), 1.6000000000000001)); // microA_per_microF
        const double var_ICap__i_Cap_jct = 0.0074029999999999999 * var_ICap__Q_SLCaP / (1.0 + 5.2281977629563632e-6 * pow((1 / var_chaste_interface__Ca_buffer__Ca_jct), 1.6000000000000001)); // microA_per_microF
        const double var_IKs__E_Ks = mParameters[11] * mParameters[23] * log((0.018329999999999999 * mParameters[9] + mParameters[8]) / (0.018329999999999999 * var_chaste_interface__Na_buffer__Nai + mParameters[5])) / mParameters[10]; // millivolt
        const double var_INaCa__Q_NCX = pow(1.5700000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaCa__i_NaCa_SL = 0.89000000000000001 * (pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) * mParameters[6] * exp(0.34999999999999998 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) - pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_SL * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_INaCa__Q_NCX * mParameters[22] / ((1.0 + 0.27000000000000002 * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * (1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_SL, 3)) * (1.3 * pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) + pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) * mParameters[6] + pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_SL + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_SL) * var_chaste_interface__Ca_buffer__Ca_SL + 0.0035899999999999999 * pow(mParameters[9], 3.0) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_buffer__Na_SL, 3.0)))); // microA_per_microF
        const double var_INaCa__i_NaCa_jct = 0.11 * (pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) * mParameters[6] * exp(0.34999999999999998 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) - pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_jct * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_INaCa__Q_NCX * mParameters[22] / ((1.0 + 0.27000000000000002 * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * (1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_jct, 3)) * (1.3 * pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) + pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) * mParameters[6] + pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_jct + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_jct) * var_chaste_interface__Ca_buffer__Ca_jct + 0.0035899999999999999 * pow(mParameters[9], 3.0) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_buffer__Na_jct, 3.0)))); // microA_per_microF
        const double var_INaK__Q_Km_Nai = pow(1.49, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaK__Q_NaK = pow(1.6299999999999999, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaK__f_NaK = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[9])) * exp(-var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))); // dimensionless
        const double var_INaK__i_NaK_SL = 1.6999 * var_INaK__Q_NaK * var_INaK__f_NaK * mParameters[8] / ((1.0 + 14641.0 * pow((var_INaK__Q_Km_Nai / var_chaste_interface__Na_buffer__Na_SL), 4.0)) * (1.5 + mParameters[8])); // microA_per_microF
        const double var_INaK__i_NaK_jct = 0.21009999999999998 * var_INaK__Q_NaK * var_INaK__f_NaK * mParameters[8] / ((1.0 + 14641.0 * pow((var_INaK__Q_Km_Nai / var_chaste_interface__Na_buffer__Na_jct), 4.0)) * (1.5 + mParameters[8])); // microA_per_microF
        const double var_ICab__i_Cab_SL = 0.00022365699999999999 * var_chaste_interface__cell__V - 0.00011182849999999999 * mParameters[11] * mParameters[23] * log(mParameters[6] / var_chaste_interface__Ca_buffer__Ca_SL) / mParameters[10]; // microA_per_microF
        const double var_ICab__i_Cab_jct = 2.7642999999999999e-5 * var_chaste_interface__cell__V - 1.38215e-5 * mParameters[11] * mParameters[23] * log(mParameters[6] / var_chaste_interface__Ca_buffer__Ca_jct) / mParameters[10]; // microA_per_microF
        const double var_reversal_potentials__E_Cl = -mParameters[11] * mParameters[23] * log(mParameters[7] / mParameters[4]) / mParameters[10]; // millivolt
        const double var_reversal_potentials__E_K = mParameters[11] * mParameters[23] * log(mParameters[8] / mParameters[5]) / mParameters[10]; // millivolt
        const double var_reversal_potentials__E_Na_SL = mParameters[11] * mParameters[23] * log(mParameters[9] / var_chaste_interface__Na_buffer__Na_SL) / mParameters[10]; // millivolt
        const double var_INa__i_Na_SL = 0.89000000000000001 * (-var_reversal_potentials__E_Na_SL + var_chaste_interface__cell__V) * mParameters[14] * var_INa__openProb; // microA_per_microF
        const double var_INab__i_Nab_SL = 0.00026433000000000001 * var_chaste_interface__cell__V - 0.00026433000000000001 * var_reversal_potentials__E_Na_SL; // microA_per_microF
        const double var_reversal_potentials__E_Na_jct = mParameters[11] * mParameters[23] * log(mParameters[9] / var_chaste_interface__Na_buffer__Na_jct) / mParameters[10]; // millivolt
        const double var_INa__i_Na_jct = 0.11 * (-var_reversal_potentials__E_Na_jct + var_chaste_interface__cell__V) * mParameters[14] * var_INa__openProb; // microA_per_microF
        const double var_INab__i_Nab_jct = 3.2670000000000004e-5 * var_chaste_interface__cell__V - 3.2670000000000004e-5 * var_reversal_potentials__E_Na_jct; // microA_per_microF
        d_dt_chaste_interface_var_cell__V = -((fabs(var_chaste_interface__cell__V) < 9.9999999999999995e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (5000000.0 * (9.9999999999999995e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (1.2150000000000001e-14 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (-0.75 * mParameters[8] + 0.75 * mParameters[5] * exp(9.9999999999999995e-8)) * (1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 1.2150000000000001e-14 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (-0.75 * mParameters[8] + 0.75 * mParameters[5] * exp(-9.9999999999999995e-8)) * (1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 1.2150000000000001e-14 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (-0.75 * mParameters[8] + 0.75 * mParameters[5] * exp(-9.9999999999999995e-8)) * (1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (1.215e-7 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (-0.75 * mParameters[8] + 0.75 * mParameters[5] * exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * (1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))) - var_ICaL__i_CaL_Ca_SL - var_ICaL__i_CaL_Ca_jct - var_ICaL__i_CaL_Na_SL - var_ICaL__i_CaL_Na_jct - var_ICab__i_Cab_SL - var_ICab__i_Cab_jct - var_ICap__i_Cap_SL - var_ICap__i_Cap_jct - var_INa__i_Na_SL - var_INa__i_Na_jct - var_INaCa__i_NaCa_SL - var_INaCa__i_NaCa_jct - var_INaK__i_NaK_SL - var_INaK__i_NaK_jct - var_INab__i_Nab_SL - var_INab__i_Nab_jct - GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance() - (-var_reversal_potentials__E_Cl + var_chaste_interface__cell__V) * mParameters[13] - 0.109625 * (-var_reversal_potentials__E_Cl + var_chaste_interface__cell__V) * (0.11 / (1.0 + 0.10000000000000001 / var_chaste_interface__Ca_buffer__Ca_jct) + 0.89000000000000001 / (1.0 + 0.10000000000000001 / var_chaste_interface__Ca_buffer__Ca_SL)) - (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * (0.5 * var_chaste_interface__Itos_R_gate__R_tos + var_chaste_interface__Itos_Y_gate__Y_tos) * mParameters[21] * var_chaste_interface__Itos_X_gate__X_tos - (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * mParameters[17] * var_chaste_interface__Itof_X_gate__X_tof * var_chaste_interface__Itof_Y_gate__Y_tof - 0.11 * pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (0.057000000000000002 + 0.19 / (1.0 + exp(-7.0000000000000009 - 1.6666666666666667 * log10(var_chaste_interface__Ca_buffer__Ca_jct)))) * (-var_IKs__E_Ks + var_chaste_interface__cell__V) * mParameters[20] - 0.89000000000000001 * pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (0.057000000000000002 + 0.19 / (1.0 + exp(-7.0000000000000009 - 1.6666666666666667 * log10(var_chaste_interface__Ca_buffer__Ca_SL)))) * (-var_IKs__E_Ks + var_chaste_interface__cell__V) * mParameters[20] - 0.43033148291193518 * sqrt(mParameters[8]) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * mParameters[19] * var_chaste_interface__IKr_Xr_gate__Xr / (_lt_0_row[0]) - 0.4389381125701739 * sqrt(mParameters[8]) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * mParameters[18] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__E_K)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__E_K)) + (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__E_K) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__E_K)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__E_K - 0.51429999999999998 * var_chaste_interface__cell__V)))); // millivolt / millisecond

        double evalF = d_dt_chaste_interface_var_cell__V;
        mEvalF[0] = d_dt_chaste_interface_var_cell__V;
        double partialF = EvaluatePartialDerivative0(var_chaste_interface__environment__time, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] += evalF*mDt;
        }
        else
        {
            rY[v_index] += (evalF/partialF)*(exp(partialF*mDt)-1.0);
        }
    }

    void Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        const double delta = 1e-8;

        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__Ca_buffer__Cai = rY[1];
        // Units: millimolar; Initial value: 8.6504944644883e-05
        double var_chaste_interface__INa_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.98714602875678
        double var_chaste_interface__INa_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.991826348770428
        double var_chaste_interface__INa_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.0013702407736465
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[5];
        // Units: dimensionless; Initial value: 0.00846906175020028
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[6];
        // Units: dimensionless; Initial value: 0.00613557812033723
        double var_chaste_interface__Itos_X_gate__X_tos = rY[7];
        // Units: dimensionless; Initial value: 0.00401072468238921
        double var_chaste_interface__Itos_Y_gate__Y_tos = rY[8];
        // Units: dimensionless; Initial value: 0.31555225368514
        double var_chaste_interface__Itos_R_gate__R_tos = rY[9];
        // Units: dimensionless; Initial value: 0.402577243036347
        double var_chaste_interface__Itof_X_gate__X_tof = rY[10];
        // Units: dimensionless; Initial value: 0.00401068798369438
        double var_chaste_interface__Itof_Y_gate__Y_tof = rY[11];
        // Units: dimensionless; Initial value: 0.994632857675454
        double var_chaste_interface__ICaL_d_gate__d = rY[12];
        // Units: dimensionless; Initial value: 6.99526086177479e-06
        double var_chaste_interface__ICaL_f_gate__f = rY[13];
        // Units: dimensionless; Initial value: 1.00067601563206
        double var_chaste_interface__ICaL_fCa_gate__fCaB_SL = rY[14];
        // Units: dimensionless; Initial value: 0.0150193299768419
        double var_chaste_interface__ICaL_fCa_gate__fCaB_jct = rY[15];
        // Units: dimensionless; Initial value: 0.0244048782575591
        double var_chaste_interface__Jrel_SR__R = rY[16];
        // Units: dimensionless; Initial value: 0.890917121306535
        double var_chaste_interface__Jrel_SR__I = rY[17];
        // Units: dimensionless; Initial value: 8.71752603681652e-08
        double var_chaste_interface__Jrel_SR__O = rY[18];
        // Units: dimensionless; Initial value: 7.1199533741995e-07
        double var_chaste_interface__Na_buffer__Na_SL = rY[19];
        // Units: millimolar; Initial value: 8.87161932058707
        double var_chaste_interface__Na_buffer__Na_jct = rY[20];
        // Units: millimolar; Initial value: 8.87031835089116
        double var_chaste_interface__Na_buffer__Na_SL_buf = rY[21];
        // Units: millimolar; Initial value: 0.77606800956492
        double var_chaste_interface__Na_buffer__Na_jct_buf = rY[22];
        // Units: millimolar; Initial value: 3.55668431730337
        double var_chaste_interface__Na_buffer__Nai = rY[23];
        // Units: millimolar; Initial value: 8.87200572571131
        double var_chaste_interface__Ca_buffer__Ca_SR = rY[24];
        // Units: millimolar; Initial value: 0.547125831028543
        double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
        // Units: millimolar; Initial value: 0.000104971310105451
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        double var_chaste_interface__Ca_buffer__Ca_SLB_SL = rY[27];
        // Units: millimolar; Initial value: 0.00973710481246467
        double var_chaste_interface__Ca_buffer__Ca_SLB_jct = rY[28];
        // Units: millimolar; Initial value: 0.00774564218017916
        double var_chaste_interface__Ca_buffer__Ca_SLHigh_SL = rY[29];
        // Units: millimolar; Initial value: 0.113168405274355
        double var_chaste_interface__Ca_buffer__Ca_SLHigh_jct = rY[30];
        // Units: millimolar; Initial value: 0.0772568134367606
        double var_chaste_interface__Ca_buffer__Ca_Calsequestrin = rY[31];
        // Units: millimolar; Initial value: 1.18828527890062
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC = rY[32];
        // Units: millimolar; Initial value: 0.00886665040283094
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg = rY[33];
        // Units: millimolar; Initial value: 0.117873278193472
        double var_chaste_interface__cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg = rY[34];
        // Units: millimolar; Initial value: 0.0103906683506505
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_Calmodulin = rY[35];
        // Units: millimolar; Initial value: 0.000293073957804278
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_Myosin = rY[36];
        // Units: millimolar; Initial value: 0.00195899238146509
        double var_chaste_interface__cytosolic_Ca_buffer__Mg_Myosin = rY[37];
        // Units: millimolar; Initial value: 0.137523520981802
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_SRB = rY[38];
        // Units: millimolar; Initial value: 0.00215728901718264
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol = rY[39];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL = rY[40];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct = rY[41];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol = rY[42];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL = rY[43];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct = rY[44];
        // Units: millimolar; Initial value: 0.0
        

        // Lookup table indexing
        const bool _oob_0 = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_ICaL_fCa_gate__fCaB_SL = -0.011900000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL + 1.7 * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * var_chaste_interface__Ca_buffer__Ca_SL; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL_fCa_gate__fCaB_jct = -0.011900000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct + 1.7 * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__Ca_buffer__Ca_jct; // 1 / millisecond
        const double var_INa__openProb = pow(var_chaste_interface__INa_m_gate__m, 3) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // dimensionless
        const double var_Jleak_SR__j_leak_SR = (-var_chaste_interface__Ca_buffer__Ca_jct + var_chaste_interface__Ca_buffer__Ca_SR) * mParameters[0]; // millimolar_per_millisecond
        const double var_Jrel_SR__RI = 1.0 - var_chaste_interface__Jrel_SR__I - var_chaste_interface__Jrel_SR__O - var_chaste_interface__Jrel_SR__R; // dimensionless
        const double var_Jrel_SR__kCaSR = 15.0 - 14.0 / (1.0 + 0.13584112963311223 * pow((1 / var_chaste_interface__Ca_buffer__Ca_SR), 2.5)); // dimensionless
        const double var_Jrel_SR__kiSRCa = 0.5 * var_Jrel_SR__kCaSR; // per_millimolar_per_millisecond
        const double var_Jrel_SR__koSRCa = 10.0 / var_Jrel_SR__kCaSR; // per_millimolar2_per_millisecond
        const double d_dt_chaste_interface_var_Jrel_SR__I = -0.065000000000000002 * var_chaste_interface__Jrel_SR__I + pow(var_chaste_interface__Ca_buffer__Ca_jct, 2) * var_Jrel_SR__RI * var_Jrel_SR__koSRCa + var_chaste_interface__Ca_buffer__Ca_jct * var_chaste_interface__Jrel_SR__O * var_Jrel_SR__kiSRCa; // 1 / millisecond
        const double d_dt_chaste_interface_var_Jrel_SR__O = 0.0050000000000000001 * var_chaste_interface__Jrel_SR__I - 0.059999999999999998 * var_chaste_interface__Jrel_SR__O + pow(var_chaste_interface__Ca_buffer__Ca_jct, 2) * var_chaste_interface__Jrel_SR__R * var_Jrel_SR__koSRCa - var_chaste_interface__Ca_buffer__Ca_jct * var_chaste_interface__Jrel_SR__O * var_Jrel_SR__kiSRCa; // 1 / millisecond
        const double d_dt_chaste_interface_var_Jrel_SR__R = 0.059999999999999998 * var_chaste_interface__Jrel_SR__O + 0.0050000000000000001 * var_Jrel_SR__RI - pow(var_chaste_interface__Ca_buffer__Ca_jct, 2) * var_chaste_interface__Jrel_SR__R * var_Jrel_SR__koSRCa - var_chaste_interface__Ca_buffer__Ca_jct * var_chaste_interface__Jrel_SR__R * var_Jrel_SR__kiSRCa; // 1 / millisecond
        const double var_Jrel_SR__j_rel_SR = (-var_chaste_interface__Ca_buffer__Ca_jct + var_chaste_interface__Ca_buffer__Ca_SR) * var_chaste_interface__Jrel_SR__O * mParameters[1]; // millimolar_per_millisecond
        const double var_Na_buffer__dNa_SL_buf = -0.001 * var_chaste_interface__Na_buffer__Na_SL_buf + 0.0001 * (1.6499999999999999 - var_chaste_interface__Na_buffer__Na_SL_buf) * var_chaste_interface__Na_buffer__Na_SL; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Na_buffer__Na_SL_buf = var_Na_buffer__dNa_SL_buf; // millimolar / millisecond
        const double var_Na_buffer__dNa_jct_buf = -0.001 * var_chaste_interface__Na_buffer__Na_jct_buf + 0.0001 * (7.5609999999999999 - var_chaste_interface__Na_buffer__Na_jct_buf) * var_chaste_interface__Na_buffer__Na_jct; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Na_buffer__Na_jct_buf = var_Na_buffer__dNa_jct_buf; // millimolar / millisecond
        const double d_dt_chaste_interface_var_ICaL_d_gate__d = (-var_chaste_interface__ICaL_d_gate__d + _lt_0_row[1]) * _lt_0_row[2]; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL_f_gate__f = (_lt_0_row[5]) * (-var_chaste_interface__ICaL_f_gate__f + _lt_0_row[3] + _lt_0_row[4]); // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr_Xr_gate__Xr = (-var_chaste_interface__IKr_Xr_gate__Xr + _lt_0_row[6]) * _lt_0_row[7]; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs_Xs_gate__Xs = (-var_chaste_interface__IKs_Xs_gate__Xs + _lt_0_row[8]) * _lt_0_row[9]; // 1 / millisecond
        const double var_INa_h_gate__alpha_h = ((var_chaste_interface__cell__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[16] - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_millisecond
        const double var_INa_h_gate__beta_h = ((var_chaste_interface__cell__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V - 0.34999999999999998 * mParameters[16]) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * mParameters[16])) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[16] - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_millisecond
        const double d_dt_chaste_interface_var_INa_h_gate__h = (var_INa_h_gate__alpha_h + var_INa_h_gate__beta_h) * (-var_chaste_interface__INa_h_gate__h + 0.01 * mParameters[15] + (1.0 - 0.01 * mParameters[15]) * var_INa_h_gate__alpha_h / (var_INa_h_gate__alpha_h + var_INa_h_gate__beta_h)); // 1 / millisecond
        const double var_INa_j_gate__alpha_j = ((var_chaste_interface__cell__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * mParameters[16]) - 3.4740000000000003e-5 * exp(0.043909999999999998 * mParameters[16] - 0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * mParameters[16]))) : (0)); // per_millisecond
        const double var_INa_j_gate__beta_j = ((var_chaste_interface__cell__V < -40.0) ? (0.1212 * exp(0.01052 * mParameters[16] - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[16] - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.29999999999999999 * exp(2.5349999999999999e-7 * mParameters[16] - 2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[16] - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_millisecond
        const double d_dt_chaste_interface_var_INa_j_gate__j = (var_INa_j_gate__alpha_j + var_INa_j_gate__beta_j) * (-var_chaste_interface__INa_j_gate__j + 0.01 * mParameters[15] + (1.0 - 0.01 * mParameters[15]) * var_INa_j_gate__alpha_j / (var_INa_j_gate__alpha_j + var_INa_j_gate__beta_j)); // 1 / millisecond
        const double var_INa_m_gate__alpha_m = _lt_0_row[10]; // per_millisecond
        const double var_INa_m_gate__beta_m = _lt_0_row[11]; // per_millisecond
        const double d_dt_chaste_interface_var_INa_m_gate__m = (-var_chaste_interface__INa_m_gate__m + var_INa_m_gate__alpha_m / (var_INa_m_gate__alpha_m + var_INa_m_gate__beta_m)) * (var_INa_m_gate__alpha_m + var_INa_m_gate__beta_m); // 1 / millisecond
        const double d_dt_chaste_interface_var_Itof_X_gate__X_tof = (-var_chaste_interface__Itof_X_gate__X_tof + _lt_0_row[12]) / (_lt_0_row[13]); // 1 / millisecond
        const double d_dt_chaste_interface_var_Itof_Y_gate__Y_tof = (-var_chaste_interface__Itof_Y_gate__Y_tof + _lt_0_row[14]) / (_lt_0_row[15]); // 1 / millisecond
        const double d_dt_chaste_interface_var_Itos_R_gate__R_tos = (-var_chaste_interface__Itos_R_gate__R_tos + _lt_0_row[14]) / (_lt_0_row[16]); // 1 / millisecond
        const double d_dt_chaste_interface_var_Itos_X_gate__X_tos = (-var_chaste_interface__Itos_X_gate__X_tos + _lt_0_row[12]) / (_lt_0_row[17]); // 1 / millisecond
        const double d_dt_chaste_interface_var_Itos_Y_gate__Y_tos = (-var_chaste_interface__Itos_Y_gate__Y_tos + _lt_0_row[14]) / (_lt_0_row[18]); // 1 / millisecond
        const double var_cytosolic_Ca_buffer__dCa_Calmodulin = -0.23799999999999999 * var_chaste_interface__cytosolic_Ca_buffer__Ca_Calmodulin + 34.0 * (0.024 - var_chaste_interface__cytosolic_Ca_buffer__Ca_Calmodulin) * var_chaste_interface__Ca_buffer__Cai; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_Calmodulin = var_cytosolic_Ca_buffer__dCa_Calmodulin; // millimolar / millisecond
        const double var_cytosolic_Ca_buffer__dCa_Myosin = -0.00046000000000000001 * var_chaste_interface__cytosolic_Ca_buffer__Ca_Myosin + 13.800000000000001 * (0.14000000000000001 - var_chaste_interface__cytosolic_Ca_buffer__Ca_Myosin - var_chaste_interface__cytosolic_Ca_buffer__Mg_Myosin) * var_chaste_interface__Ca_buffer__Cai; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_Myosin = var_cytosolic_Ca_buffer__dCa_Myosin; // millimolar / millisecond
        const double var_cytosolic_Ca_buffer__dCa_SRB = -0.059999999999999998 * var_chaste_interface__cytosolic_Ca_buffer__Ca_SRB + 100.0 * (0.017100000000000001 - var_chaste_interface__cytosolic_Ca_buffer__Ca_SRB) * var_chaste_interface__Ca_buffer__Cai; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_SRB = var_cytosolic_Ca_buffer__dCa_SRB; // millimolar / millisecond
        const double var_cytosolic_Ca_buffer__dCa_TroponinC = -0.019599999999999999 * var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC + 32.700000000000003 * (0.070000000000000007 - var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC) * var_chaste_interface__Ca_buffer__Cai; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_TroponinC = var_cytosolic_Ca_buffer__dCa_TroponinC; // millimolar / millisecond
        const double var_cytosolic_Ca_buffer__dCa_TroponinC_Ca_Mg = -3.1999999999999999e-5 * var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg + 2.3700000000000001 * (0.14000000000000001 - var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg - var_chaste_interface__cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg) * var_chaste_interface__Ca_buffer__Cai; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg = var_cytosolic_Ca_buffer__dCa_TroponinC_Ca_Mg; // millimolar / millisecond
        const double var_indo_fluo_Ca_buffer_not_connected__Fluo3 = 0; // millimolar
        const double var_indo_fluo_Ca_buffer_not_connected__Indo1 = 0; // millimolar
        const double var_ion_diffusion__J_Ca_SL_cytosol = 3.7243000000000002e-12 * var_chaste_interface__Ca_buffer__Ca_SL - 3.7243000000000002e-12 * var_chaste_interface__Ca_buffer__Cai; // millimole_per_millisecond
        const double var_ion_diffusion__J_Ca_jct_SL = 8.2413000000000004e-13 * var_chaste_interface__Ca_buffer__Ca_jct - 8.2413000000000004e-13 * var_chaste_interface__Ca_buffer__Ca_SL; // millimole_per_millisecond
        const double var_ion_diffusion__J_Na_SL_cytosol = 1.6385999999999999e-12 * var_chaste_interface__Na_buffer__Na_SL - 1.6385999999999999e-12 * var_chaste_interface__Na_buffer__Nai; // millimole_per_millisecond
        const double var_ion_diffusion__J_Na_jct_SL = 1.8312999999999999e-14 * var_chaste_interface__Na_buffer__Na_jct - 1.8312999999999999e-14 * var_chaste_interface__Na_buffer__Na_SL; // millimole_per_millisecond
        const double var_cytosolic_Ca_buffer__dMg_Myosin = 0.0021979999999999999 - 0.015699999999999999 * var_chaste_interface__cytosolic_Ca_buffer__Ca_Myosin - 0.015757 * var_chaste_interface__cytosolic_Ca_buffer__Mg_Myosin; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_cytosolic_Ca_buffer__Mg_Myosin = var_cytosolic_Ca_buffer__dMg_Myosin; // millimolar / millisecond
        const double var_cytosolic_Ca_buffer__dMg_TroponinC_Ca_Mg = 0.00042000000000000007 - 0.0030000000000000001 * var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg - 0.0063300000000000006 * var_chaste_interface__cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg = var_cytosolic_Ca_buffer__dMg_TroponinC_Ca_Mg; // millimolar / millisecond
        const double var_ICaL__i_CaL_Ca_SL = ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (10000000.0 * (4.9999999999999998e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (0.18000000000000002 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICaL__i_CaL_Ca_jct = ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (10000000.0 * (4.9999999999999998e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (1.6200000000000001 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICaL__i_CaL_Na_SL = ((fabs(var_chaste_interface__cell__V) < 9.9999999999999995e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (5000000.0 * (9.9999999999999995e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (6.7499999999999994e-10 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICaL__i_CaL_Na_jct = ((fabs(var_chaste_interface__cell__V) < 9.9999999999999995e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (5000000.0 * (9.9999999999999995e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (6.0749999999999998e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICap__Q_SLCaP = pow(2.3500000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_ICap__i_Cap_SL = 0.059896999999999999 * var_ICap__Q_SLCaP / (1.0 + 5.2281977629563632e-6 * pow((1 / var_chaste_interface__Ca_buffer__Ca_SL), 1.6000000000000001)); // microA_per_microF
        const double var_ICap__i_Cap_jct = 0.0074029999999999999 * var_ICap__Q_SLCaP / (1.0 + 5.2281977629563632e-6 * pow((1 / var_chaste_interface__Ca_buffer__Ca_jct), 1.6000000000000001)); // microA_per_microF
        const double var_INaCa__Q_NCX = pow(1.5700000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaCa__i_NaCa_SL = 0.89000000000000001 * (pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) * mParameters[6] * exp(0.34999999999999998 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) - pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_SL * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_INaCa__Q_NCX * mParameters[22] / ((1.0 + 0.27000000000000002 * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * (1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_SL, 3)) * (1.3 * pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) + pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) * mParameters[6] + pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_SL + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_SL) * var_chaste_interface__Ca_buffer__Ca_SL + 0.0035899999999999999 * pow(mParameters[9], 3.0) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_buffer__Na_SL, 3.0)))); // microA_per_microF
        const double var_INaCa__i_NaCa_jct = 0.11 * (pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) * mParameters[6] * exp(0.34999999999999998 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) - pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_jct * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_INaCa__Q_NCX * mParameters[22] / ((1.0 + 0.27000000000000002 * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * (1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_jct, 3)) * (1.3 * pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) + pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) * mParameters[6] + pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_jct + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_jct) * var_chaste_interface__Ca_buffer__Ca_jct + 0.0035899999999999999 * pow(mParameters[9], 3.0) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_buffer__Na_jct, 3.0)))); // microA_per_microF
        const double var_INaK__Q_Km_Nai = pow(1.49, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaK__Q_NaK = pow(1.6299999999999999, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaK__f_NaK = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[9])) * exp(-var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))); // dimensionless
        const double var_INaK__i_NaK_SL = 1.6999 * var_INaK__Q_NaK * var_INaK__f_NaK * mParameters[8] / ((1.0 + 14641.0 * pow((var_INaK__Q_Km_Nai / var_chaste_interface__Na_buffer__Na_SL), 4.0)) * (1.5 + mParameters[8])); // microA_per_microF
        const double var_INaK__i_NaK_jct = 0.21009999999999998 * var_INaK__Q_NaK * var_INaK__f_NaK * mParameters[8] / ((1.0 + 14641.0 * pow((var_INaK__Q_Km_Nai / var_chaste_interface__Na_buffer__Na_jct), 4.0)) * (1.5 + mParameters[8])); // microA_per_microF
        const double var_model_parameters__Cm = 4.1000000000000001e-11 * M_PI; // farad
        const double var_Ca_buffer__dCa_SLB_SL = -1.3 * var_chaste_interface__Ca_buffer__Ca_SLB_SL + 100.0 * (1.2155 - var_chaste_interface__Ca_buffer__Ca_SLB_SL) * var_chaste_interface__Ca_buffer__Ca_SL; // millimolar_per_millisecond
        const double var_Ca_buffer__dCa_SLHigh_SL = -0.029999999999999999 * var_chaste_interface__Ca_buffer__Ca_SLHigh_SL + 100.0 * (0.4355 - var_chaste_interface__Ca_buffer__Ca_SLHigh_SL) * var_chaste_interface__Ca_buffer__Ca_SL; // millimolar_per_millisecond
        const double var_Ca_buffer__dCalsequestrin = -65.0 * var_chaste_interface__Ca_buffer__Ca_Calsequestrin + 100.0 * (2.6000000000000001 - var_chaste_interface__Ca_buffer__Ca_Calsequestrin) * var_chaste_interface__Ca_buffer__Ca_SR; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_buffer__Ca_Calsequestrin = var_Ca_buffer__dCalsequestrin; // millimolar / millisecond
        const double d_dt_chaste_interface_var_Ca_buffer__Ca_SLB_SL = var_Ca_buffer__dCa_SLB_SL; // millimolar / millisecond
        const double d_dt_chaste_interface_var_Ca_buffer__Ca_SLHigh_SL = var_Ca_buffer__dCa_SLHigh_SL; // millimolar / millisecond
        const double d_dt_chaste_interface_var_Na_buffer__Nai = 46611066473.945435 * mParameters[3] * var_ion_diffusion__J_Na_SL_cytosol; // millimolar / millisecond
        const double var_Jpump_SR__j_pump_SR = 18.571428571428569 * pow(2.6000000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])) * (2814485.1633595936 * pow(var_chaste_interface__Ca_buffer__Cai, 1.7869999999999999) - 0.38742512113256738 * pow(var_chaste_interface__Ca_buffer__Ca_SR, 1.7869999999999999)) * mParameters[2] / (1.0 + 0.38742512113256738 * pow(var_chaste_interface__Ca_buffer__Ca_SR, 1.7869999999999999) + 2814485.1633595936 * pow(var_chaste_interface__Ca_buffer__Cai, 1.7869999999999999)); // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_buffer__Ca_SR = -var_Ca_buffer__dCalsequestrin - var_Jrel_SR__j_rel_SR - 18.571428571428569 * var_Jleak_SR__j_leak_SR + var_Jpump_SR__j_pump_SR; // millimolar / millisecond
        const double d_dt_chaste_interface_var_Ca_buffer__Cai = 46611066473.945435 * var_ion_diffusion__J_Ca_SL_cytosol - var_cytosolic_Ca_buffer__dCa_Calmodulin - var_cytosolic_Ca_buffer__dCa_Myosin - var_cytosolic_Ca_buffer__dCa_SRB - var_cytosolic_Ca_buffer__dCa_TroponinC - var_cytosolic_Ca_buffer__dCa_TroponinC_Ca_Mg - var_cytosolic_Ca_buffer__dMg_Myosin - var_cytosolic_Ca_buffer__dMg_TroponinC_Ca_Mg - 0.053846153846153849 * var_Jpump_SR__j_pump_SR; // millimolar / millisecond
        const double var_Ca_buffer__dCa_SLB_jct = -1.3 * var_chaste_interface__Ca_buffer__Ca_SLB_jct + 100.0 * (0.5862745098039216 - var_chaste_interface__Ca_buffer__Ca_SLB_jct) * var_chaste_interface__Ca_buffer__Ca_jct; // millimolar_per_millisecond
        const double var_Ca_buffer__dCa_SLHigh_jct = -0.029999999999999999 * var_chaste_interface__Ca_buffer__Ca_SLHigh_jct + 100.0 * (0.21029411764705883 - var_chaste_interface__Ca_buffer__Ca_SLHigh_jct) * var_chaste_interface__Ca_buffer__Ca_jct; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_buffer__Ca_SLB_jct = var_Ca_buffer__dCa_SLB_jct; // millimolar / millisecond
        const double d_dt_chaste_interface_var_Ca_buffer__Ca_SLHigh_jct = var_Ca_buffer__dCa_SLHigh_jct; // millimolar / millisecond
        const double var_indo_fluo_Ca_buffer_not_connected__Fluo3Bound = 0.030769230769230767 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL + 0.00078461538461538469 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct + var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol; // millimolar
        const double var_indo_fluo_Ca_buffer_not_connected__Indo1Bound = 0.030769230769230767 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL + 0.00078461538461538469 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct + var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol; // millimolar
        const double d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol = -0.11 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol + 100.0 * (0.025000000000000001 - var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol) * (-var_indo_fluo_Ca_buffer_not_connected__Fluo3Bound + var_indo_fluo_Ca_buffer_not_connected__Fluo3) * var_chaste_interface__Ca_buffer__Cai; // millimolar / millisecond
        const double d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL = -0.11 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL + 100.0 * (0.025024999999999999 - var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL) * (-var_indo_fluo_Ca_buffer_not_connected__Fluo3Bound + var_indo_fluo_Ca_buffer_not_connected__Fluo3) * var_chaste_interface__Ca_buffer__Ca_SL; // millimolar / millisecond
        const double d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct = -0.11 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct + 100.0 * (0.025490196078431372 - var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct) * (-var_indo_fluo_Ca_buffer_not_connected__Fluo3Bound + var_indo_fluo_Ca_buffer_not_connected__Fluo3) * var_chaste_interface__Ca_buffer__Ca_jct; // millimolar / millisecond
        const double d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol = -0.059999999999999998 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol + 100.0 * (0.025000000000000001 - var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol) * (-var_indo_fluo_Ca_buffer_not_connected__Indo1Bound + var_indo_fluo_Ca_buffer_not_connected__Indo1) * var_chaste_interface__Ca_buffer__Cai; // millimolar / millisecond
        const double d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL = -0.059999999999999998 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL + 100.0 * (0.025024999999999999 - var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL) * (-var_indo_fluo_Ca_buffer_not_connected__Indo1Bound + var_indo_fluo_Ca_buffer_not_connected__Indo1) * var_chaste_interface__Ca_buffer__Ca_SL; // millimolar / millisecond
        const double d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct = -0.059999999999999998 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct + 100.0 * (0.025490196078431372 - var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct) * (-var_indo_fluo_Ca_buffer_not_connected__Indo1Bound + var_indo_fluo_Ca_buffer_not_connected__Indo1) * var_chaste_interface__Ca_buffer__Ca_jct; // millimolar / millisecond
        const double var_ICab__i_Cab_SL = 0.00022365699999999999 * var_chaste_interface__cell__V - 0.00011182849999999999 * mParameters[11] * mParameters[23] * log(mParameters[6] / var_chaste_interface__Ca_buffer__Ca_SL) / mParameters[10]; // microA_per_microF
        const double d_dt_chaste_interface_var_Ca_buffer__Ca_SL = 1514859660403.2268 * var_ion_diffusion__J_Ca_jct_SL - var_Ca_buffer__dCa_SLB_SL - var_Ca_buffer__dCa_SLHigh_SL - 1514859660403.2268 * var_ion_diffusion__J_Ca_SL_cytosol - 757429830201.6134 * (-2.0 * var_INaCa__i_NaCa_SL + var_ICaL__i_CaL_Ca_SL + var_ICab__i_Cab_SL + var_ICap__i_Cap_SL) * var_model_parameters__Cm / mParameters[10]; // millimolar / millisecond
        const double var_ICab__i_Cab_jct = 2.7642999999999999e-5 * var_chaste_interface__cell__V - 1.38215e-5 * mParameters[11] * mParameters[23] * log(mParameters[6] / var_chaste_interface__Ca_buffer__Ca_jct) / mParameters[10]; // microA_per_microF
        const double d_dt_chaste_interface_var_Ca_buffer__Ca_jct = 68.627450980392155 * var_Jrel_SR__j_rel_SR + 1274.5098039215686 * var_Jleak_SR__j_leak_SR - var_Ca_buffer__dCa_SLB_jct - var_Ca_buffer__dCa_SLHigh_jct - 59406261192283.398 * var_ion_diffusion__J_Ca_jct_SL - 29703130596141.699 * (-2.0 * var_INaCa__i_NaCa_jct + var_ICaL__i_CaL_Ca_jct + var_ICab__i_Cab_jct + var_ICap__i_Cap_jct) * var_model_parameters__Cm / mParameters[10]; // millimolar / millisecond
        const double var_reversal_potentials__E_Na_SL = mParameters[11] * mParameters[23] * log(mParameters[9] / var_chaste_interface__Na_buffer__Na_SL) / mParameters[10]; // millivolt
        const double var_INa__i_Na_SL = 0.89000000000000001 * (-var_reversal_potentials__E_Na_SL + var_chaste_interface__cell__V) * mParameters[14] * var_INa__openProb; // microA_per_microF
        const double var_INab__i_Nab_SL = 0.00026433000000000001 * var_chaste_interface__cell__V - 0.00026433000000000001 * var_reversal_potentials__E_Na_SL; // microA_per_microF
        const double d_dt_chaste_interface_var_Na_buffer__Na_SL = (-var_Na_buffer__dNa_SL_buf + 1514859660403.2268 * var_ion_diffusion__J_Na_jct_SL - 1514859660403.2268 * var_ion_diffusion__J_Na_SL_cytosol - 1514859660403.2268 * (3.0 * var_INaCa__i_NaCa_SL + 3.0 * var_INaK__i_NaK_SL + var_ICaL__i_CaL_Na_SL + var_INa__i_Na_SL + var_INab__i_Nab_SL) * var_model_parameters__Cm / mParameters[10]) * mParameters[3]; // millimolar / millisecond
        const double var_reversal_potentials__E_Na_jct = mParameters[11] * mParameters[23] * log(mParameters[9] / var_chaste_interface__Na_buffer__Na_jct) / mParameters[10]; // millivolt
        const double var_INa__i_Na_jct = 0.11 * (-var_reversal_potentials__E_Na_jct + var_chaste_interface__cell__V) * mParameters[14] * var_INa__openProb; // microA_per_microF
        const double var_INab__i_Nab_jct = 3.2670000000000004e-5 * var_chaste_interface__cell__V - 3.2670000000000004e-5 * var_reversal_potentials__E_Na_jct; // microA_per_microF
        const double d_dt_chaste_interface_var_Na_buffer__Na_jct = (-var_Na_buffer__dNa_jct_buf - 59406261192283.398 * var_ion_diffusion__J_Na_jct_SL - 59406261192283.398 * (3.0 * var_INaCa__i_NaCa_jct + 3.0 * var_INaK__i_NaK_jct + var_ICaL__i_CaL_Na_jct + var_INa__i_Na_jct + var_INab__i_Nab_jct) * var_model_parameters__Cm / mParameters[10]) * mParameters[3]; // millimolar / millisecond
        
        mEvalF[1] = d_dt_chaste_interface_var_Ca_buffer__Cai;
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__environment__time, rY, delta);
        mEvalF[2] = d_dt_chaste_interface_var_INa_h_gate__h;
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__environment__time, rY, delta);
        mEvalF[3] = d_dt_chaste_interface_var_INa_j_gate__j;
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__environment__time, rY, delta);
        mEvalF[4] = d_dt_chaste_interface_var_INa_m_gate__m;
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__environment__time, rY, delta);
        mEvalF[5] = d_dt_chaste_interface_var_IKr_Xr_gate__Xr;
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__environment__time, rY, delta);
        mEvalF[6] = d_dt_chaste_interface_var_IKs_Xs_gate__Xs;
        mPartialF[6] = EvaluatePartialDerivative6(var_chaste_interface__environment__time, rY, delta);
        mEvalF[7] = d_dt_chaste_interface_var_Itos_X_gate__X_tos;
        mPartialF[7] = EvaluatePartialDerivative7(var_chaste_interface__environment__time, rY, delta);
        mEvalF[8] = d_dt_chaste_interface_var_Itos_Y_gate__Y_tos;
        mPartialF[8] = EvaluatePartialDerivative8(var_chaste_interface__environment__time, rY, delta);
        mEvalF[9] = d_dt_chaste_interface_var_Itos_R_gate__R_tos;
        mPartialF[9] = EvaluatePartialDerivative9(var_chaste_interface__environment__time, rY, delta);
        mEvalF[10] = d_dt_chaste_interface_var_Itof_X_gate__X_tof;
        mPartialF[10] = EvaluatePartialDerivative10(var_chaste_interface__environment__time, rY, delta);
        mEvalF[11] = d_dt_chaste_interface_var_Itof_Y_gate__Y_tof;
        mPartialF[11] = EvaluatePartialDerivative11(var_chaste_interface__environment__time, rY, delta);
        mEvalF[12] = d_dt_chaste_interface_var_ICaL_d_gate__d;
        mPartialF[12] = EvaluatePartialDerivative12(var_chaste_interface__environment__time, rY, delta);
        mEvalF[13] = d_dt_chaste_interface_var_ICaL_f_gate__f;
        mPartialF[13] = EvaluatePartialDerivative13(var_chaste_interface__environment__time, rY, delta);
        mEvalF[14] = d_dt_chaste_interface_var_ICaL_fCa_gate__fCaB_SL;
        mPartialF[14] = EvaluatePartialDerivative14(var_chaste_interface__environment__time, rY, delta);
        mEvalF[15] = d_dt_chaste_interface_var_ICaL_fCa_gate__fCaB_jct;
        mPartialF[15] = EvaluatePartialDerivative15(var_chaste_interface__environment__time, rY, delta);
        mEvalF[16] = d_dt_chaste_interface_var_Jrel_SR__R;
        mPartialF[16] = EvaluatePartialDerivative16(var_chaste_interface__environment__time, rY, delta);
        mEvalF[17] = d_dt_chaste_interface_var_Jrel_SR__I;
        mPartialF[17] = EvaluatePartialDerivative17(var_chaste_interface__environment__time, rY, delta);
        mEvalF[18] = d_dt_chaste_interface_var_Jrel_SR__O;
        mPartialF[18] = EvaluatePartialDerivative18(var_chaste_interface__environment__time, rY, delta);
        mEvalF[19] = d_dt_chaste_interface_var_Na_buffer__Na_SL;
        mPartialF[19] = EvaluatePartialDerivative19(var_chaste_interface__environment__time, rY, delta);
        mEvalF[20] = d_dt_chaste_interface_var_Na_buffer__Na_jct;
        mPartialF[20] = EvaluatePartialDerivative20(var_chaste_interface__environment__time, rY, delta);
        mEvalF[21] = d_dt_chaste_interface_var_Na_buffer__Na_SL_buf;
        mPartialF[21] = EvaluatePartialDerivative21(var_chaste_interface__environment__time, rY, delta);
        mEvalF[22] = d_dt_chaste_interface_var_Na_buffer__Na_jct_buf;
        mPartialF[22] = EvaluatePartialDerivative22(var_chaste_interface__environment__time, rY, delta);
        mEvalF[23] = d_dt_chaste_interface_var_Na_buffer__Nai;
        mPartialF[23] = EvaluatePartialDerivative23(var_chaste_interface__environment__time, rY, delta);
        mEvalF[24] = d_dt_chaste_interface_var_Ca_buffer__Ca_SR;
        mPartialF[24] = EvaluatePartialDerivative24(var_chaste_interface__environment__time, rY, delta);
        mEvalF[25] = d_dt_chaste_interface_var_Ca_buffer__Ca_SL;
        mPartialF[25] = EvaluatePartialDerivative25(var_chaste_interface__environment__time, rY, delta);
        mEvalF[26] = d_dt_chaste_interface_var_Ca_buffer__Ca_jct;
        mPartialF[26] = EvaluatePartialDerivative26(var_chaste_interface__environment__time, rY, delta);
        mEvalF[27] = d_dt_chaste_interface_var_Ca_buffer__Ca_SLB_SL;
        mPartialF[27] = EvaluatePartialDerivative27(var_chaste_interface__environment__time, rY, delta);
        mEvalF[28] = d_dt_chaste_interface_var_Ca_buffer__Ca_SLB_jct;
        mPartialF[28] = EvaluatePartialDerivative28(var_chaste_interface__environment__time, rY, delta);
        mEvalF[29] = d_dt_chaste_interface_var_Ca_buffer__Ca_SLHigh_SL;
        mPartialF[29] = EvaluatePartialDerivative29(var_chaste_interface__environment__time, rY, delta);
        mEvalF[30] = d_dt_chaste_interface_var_Ca_buffer__Ca_SLHigh_jct;
        mPartialF[30] = EvaluatePartialDerivative30(var_chaste_interface__environment__time, rY, delta);
        mEvalF[31] = d_dt_chaste_interface_var_Ca_buffer__Ca_Calsequestrin;
        mPartialF[31] = EvaluatePartialDerivative31(var_chaste_interface__environment__time, rY, delta);
        mEvalF[32] = d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_TroponinC;
        mPartialF[32] = EvaluatePartialDerivative32(var_chaste_interface__environment__time, rY, delta);
        mEvalF[33] = d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg;
        mPartialF[33] = EvaluatePartialDerivative33(var_chaste_interface__environment__time, rY, delta);
        mEvalF[34] = d_dt_chaste_interface_var_cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg;
        mPartialF[34] = EvaluatePartialDerivative34(var_chaste_interface__environment__time, rY, delta);
        mEvalF[35] = d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_Calmodulin;
        mPartialF[35] = EvaluatePartialDerivative35(var_chaste_interface__environment__time, rY, delta);
        mEvalF[36] = d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_Myosin;
        mPartialF[36] = EvaluatePartialDerivative36(var_chaste_interface__environment__time, rY, delta);
        mEvalF[37] = d_dt_chaste_interface_var_cytosolic_Ca_buffer__Mg_Myosin;
        mPartialF[37] = EvaluatePartialDerivative37(var_chaste_interface__environment__time, rY, delta);
        mEvalF[38] = d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_SRB;
        mPartialF[38] = EvaluatePartialDerivative38(var_chaste_interface__environment__time, rY, delta);
        mEvalF[39] = d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol;
        mPartialF[39] = EvaluatePartialDerivative39(var_chaste_interface__environment__time, rY, delta);
        mEvalF[40] = d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL;
        mPartialF[40] = EvaluatePartialDerivative40(var_chaste_interface__environment__time, rY, delta);
        mEvalF[41] = d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct;
        mPartialF[41] = EvaluatePartialDerivative41(var_chaste_interface__environment__time, rY, delta);
        mEvalF[42] = d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol;
        mPartialF[42] = EvaluatePartialDerivative42(var_chaste_interface__environment__time, rY, delta);
        mEvalF[43] = d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL;
        mPartialF[43] = EvaluatePartialDerivative43(var_chaste_interface__environment__time, rY, delta);
        mEvalF[44] = d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct;
        mPartialF[44] = EvaluatePartialDerivative44(var_chaste_interface__environment__time, rY, delta);
        
        {
            if (fabs(mPartialF[1]) < delta){
                rY[1] += mDt*d_dt_chaste_interface_var_Ca_buffer__Cai;
            }
            else
            {
                rY[1] += (d_dt_chaste_interface_var_Ca_buffer__Cai/mPartialF[1])*(exp(mPartialF[1]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[2]) < delta){
                rY[2] += mDt*d_dt_chaste_interface_var_INa_h_gate__h;
            }
            else
            {
                rY[2] += (d_dt_chaste_interface_var_INa_h_gate__h/mPartialF[2])*(exp(mPartialF[2]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[3]) < delta){
                rY[3] += mDt*d_dt_chaste_interface_var_INa_j_gate__j;
            }
            else
            {
                rY[3] += (d_dt_chaste_interface_var_INa_j_gate__j/mPartialF[3])*(exp(mPartialF[3]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[4]) < delta){
                rY[4] += mDt*d_dt_chaste_interface_var_INa_m_gate__m;
            }
            else
            {
                rY[4] += (d_dt_chaste_interface_var_INa_m_gate__m/mPartialF[4])*(exp(mPartialF[4]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[5]) < delta){
                rY[5] += mDt*d_dt_chaste_interface_var_IKr_Xr_gate__Xr;
            }
            else
            {
                rY[5] += (d_dt_chaste_interface_var_IKr_Xr_gate__Xr/mPartialF[5])*(exp(mPartialF[5]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[6]) < delta){
                rY[6] += mDt*d_dt_chaste_interface_var_IKs_Xs_gate__Xs;
            }
            else
            {
                rY[6] += (d_dt_chaste_interface_var_IKs_Xs_gate__Xs/mPartialF[6])*(exp(mPartialF[6]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[7]) < delta){
                rY[7] += mDt*d_dt_chaste_interface_var_Itos_X_gate__X_tos;
            }
            else
            {
                rY[7] += (d_dt_chaste_interface_var_Itos_X_gate__X_tos/mPartialF[7])*(exp(mPartialF[7]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[8]) < delta){
                rY[8] += mDt*d_dt_chaste_interface_var_Itos_Y_gate__Y_tos;
            }
            else
            {
                rY[8] += (d_dt_chaste_interface_var_Itos_Y_gate__Y_tos/mPartialF[8])*(exp(mPartialF[8]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[9]) < delta){
                rY[9] += mDt*d_dt_chaste_interface_var_Itos_R_gate__R_tos;
            }
            else
            {
                rY[9] += (d_dt_chaste_interface_var_Itos_R_gate__R_tos/mPartialF[9])*(exp(mPartialF[9]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[10]) < delta){
                rY[10] += mDt*d_dt_chaste_interface_var_Itof_X_gate__X_tof;
            }
            else
            {
                rY[10] += (d_dt_chaste_interface_var_Itof_X_gate__X_tof/mPartialF[10])*(exp(mPartialF[10]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[11]) < delta){
                rY[11] += mDt*d_dt_chaste_interface_var_Itof_Y_gate__Y_tof;
            }
            else
            {
                rY[11] += (d_dt_chaste_interface_var_Itof_Y_gate__Y_tof/mPartialF[11])*(exp(mPartialF[11]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[12]) < delta){
                rY[12] += mDt*d_dt_chaste_interface_var_ICaL_d_gate__d;
            }
            else
            {
                rY[12] += (d_dt_chaste_interface_var_ICaL_d_gate__d/mPartialF[12])*(exp(mPartialF[12]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[13]) < delta){
                rY[13] += mDt*d_dt_chaste_interface_var_ICaL_f_gate__f;
            }
            else
            {
                rY[13] += (d_dt_chaste_interface_var_ICaL_f_gate__f/mPartialF[13])*(exp(mPartialF[13]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[14]) < delta){
                rY[14] += mDt*d_dt_chaste_interface_var_ICaL_fCa_gate__fCaB_SL;
            }
            else
            {
                rY[14] += (d_dt_chaste_interface_var_ICaL_fCa_gate__fCaB_SL/mPartialF[14])*(exp(mPartialF[14]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[15]) < delta){
                rY[15] += mDt*d_dt_chaste_interface_var_ICaL_fCa_gate__fCaB_jct;
            }
            else
            {
                rY[15] += (d_dt_chaste_interface_var_ICaL_fCa_gate__fCaB_jct/mPartialF[15])*(exp(mPartialF[15]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[16]) < delta){
                rY[16] += mDt*d_dt_chaste_interface_var_Jrel_SR__R;
            }
            else
            {
                rY[16] += (d_dt_chaste_interface_var_Jrel_SR__R/mPartialF[16])*(exp(mPartialF[16]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[17]) < delta){
                rY[17] += mDt*d_dt_chaste_interface_var_Jrel_SR__I;
            }
            else
            {
                rY[17] += (d_dt_chaste_interface_var_Jrel_SR__I/mPartialF[17])*(exp(mPartialF[17]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[18]) < delta){
                rY[18] += mDt*d_dt_chaste_interface_var_Jrel_SR__O;
            }
            else
            {
                rY[18] += (d_dt_chaste_interface_var_Jrel_SR__O/mPartialF[18])*(exp(mPartialF[18]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[19]) < delta){
                rY[19] += mDt*d_dt_chaste_interface_var_Na_buffer__Na_SL;
            }
            else
            {
                rY[19] += (d_dt_chaste_interface_var_Na_buffer__Na_SL/mPartialF[19])*(exp(mPartialF[19]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[20]) < delta){
                rY[20] += mDt*d_dt_chaste_interface_var_Na_buffer__Na_jct;
            }
            else
            {
                rY[20] += (d_dt_chaste_interface_var_Na_buffer__Na_jct/mPartialF[20])*(exp(mPartialF[20]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[21]) < delta){
                rY[21] += mDt*d_dt_chaste_interface_var_Na_buffer__Na_SL_buf;
            }
            else
            {
                rY[21] += (d_dt_chaste_interface_var_Na_buffer__Na_SL_buf/mPartialF[21])*(exp(mPartialF[21]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[22]) < delta){
                rY[22] += mDt*d_dt_chaste_interface_var_Na_buffer__Na_jct_buf;
            }
            else
            {
                rY[22] += (d_dt_chaste_interface_var_Na_buffer__Na_jct_buf/mPartialF[22])*(exp(mPartialF[22]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[23]) < delta){
                rY[23] += mDt*d_dt_chaste_interface_var_Na_buffer__Nai;
            }
            else
            {
                rY[23] += (d_dt_chaste_interface_var_Na_buffer__Nai/mPartialF[23])*(exp(mPartialF[23]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[24]) < delta){
                rY[24] += mDt*d_dt_chaste_interface_var_Ca_buffer__Ca_SR;
            }
            else
            {
                rY[24] += (d_dt_chaste_interface_var_Ca_buffer__Ca_SR/mPartialF[24])*(exp(mPartialF[24]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[25]) < delta){
                rY[25] += mDt*d_dt_chaste_interface_var_Ca_buffer__Ca_SL;
            }
            else
            {
                rY[25] += (d_dt_chaste_interface_var_Ca_buffer__Ca_SL/mPartialF[25])*(exp(mPartialF[25]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[26]) < delta){
                rY[26] += mDt*d_dt_chaste_interface_var_Ca_buffer__Ca_jct;
            }
            else
            {
                rY[26] += (d_dt_chaste_interface_var_Ca_buffer__Ca_jct/mPartialF[26])*(exp(mPartialF[26]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[27]) < delta){
                rY[27] += mDt*d_dt_chaste_interface_var_Ca_buffer__Ca_SLB_SL;
            }
            else
            {
                rY[27] += (d_dt_chaste_interface_var_Ca_buffer__Ca_SLB_SL/mPartialF[27])*(exp(mPartialF[27]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[28]) < delta){
                rY[28] += mDt*d_dt_chaste_interface_var_Ca_buffer__Ca_SLB_jct;
            }
            else
            {
                rY[28] += (d_dt_chaste_interface_var_Ca_buffer__Ca_SLB_jct/mPartialF[28])*(exp(mPartialF[28]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[29]) < delta){
                rY[29] += mDt*d_dt_chaste_interface_var_Ca_buffer__Ca_SLHigh_SL;
            }
            else
            {
                rY[29] += (d_dt_chaste_interface_var_Ca_buffer__Ca_SLHigh_SL/mPartialF[29])*(exp(mPartialF[29]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[30]) < delta){
                rY[30] += mDt*d_dt_chaste_interface_var_Ca_buffer__Ca_SLHigh_jct;
            }
            else
            {
                rY[30] += (d_dt_chaste_interface_var_Ca_buffer__Ca_SLHigh_jct/mPartialF[30])*(exp(mPartialF[30]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[31]) < delta){
                rY[31] += mDt*d_dt_chaste_interface_var_Ca_buffer__Ca_Calsequestrin;
            }
            else
            {
                rY[31] += (d_dt_chaste_interface_var_Ca_buffer__Ca_Calsequestrin/mPartialF[31])*(exp(mPartialF[31]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[32]) < delta){
                rY[32] += mDt*d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_TroponinC;
            }
            else
            {
                rY[32] += (d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_TroponinC/mPartialF[32])*(exp(mPartialF[32]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[33]) < delta){
                rY[33] += mDt*d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg;
            }
            else
            {
                rY[33] += (d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg/mPartialF[33])*(exp(mPartialF[33]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[34]) < delta){
                rY[34] += mDt*d_dt_chaste_interface_var_cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg;
            }
            else
            {
                rY[34] += (d_dt_chaste_interface_var_cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg/mPartialF[34])*(exp(mPartialF[34]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[35]) < delta){
                rY[35] += mDt*d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_Calmodulin;
            }
            else
            {
                rY[35] += (d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_Calmodulin/mPartialF[35])*(exp(mPartialF[35]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[36]) < delta){
                rY[36] += mDt*d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_Myosin;
            }
            else
            {
                rY[36] += (d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_Myosin/mPartialF[36])*(exp(mPartialF[36]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[37]) < delta){
                rY[37] += mDt*d_dt_chaste_interface_var_cytosolic_Ca_buffer__Mg_Myosin;
            }
            else
            {
                rY[37] += (d_dt_chaste_interface_var_cytosolic_Ca_buffer__Mg_Myosin/mPartialF[37])*(exp(mPartialF[37]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[38]) < delta){
                rY[38] += mDt*d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_SRB;
            }
            else
            {
                rY[38] += (d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_SRB/mPartialF[38])*(exp(mPartialF[38]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[39]) < delta){
                rY[39] += mDt*d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol;
            }
            else
            {
                rY[39] += (d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol/mPartialF[39])*(exp(mPartialF[39]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[40]) < delta){
                rY[40] += mDt*d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL;
            }
            else
            {
                rY[40] += (d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL/mPartialF[40])*(exp(mPartialF[40]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[41]) < delta){
                rY[41] += mDt*d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct;
            }
            else
            {
                rY[41] += (d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct/mPartialF[41])*(exp(mPartialF[41]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[42]) < delta){
                rY[42] += mDt*d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol;
            }
            else
            {
                rY[42] += (d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol/mPartialF[42])*(exp(mPartialF[42]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[43]) < delta){
                rY[43] += mDt*d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL;
            }
            else
            {
                rY[43] += (d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL/mPartialF[43])*(exp(mPartialF[43]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[44]) < delta){
                rY[44] += mDt*d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct;
            }
            else
            {
                rY[44] += (d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct/mPartialF[44])*(exp(mPartialF[44]*mDt)-1.0);
            }
            
        }        
        
    }
   
    
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        double d_dt_chaste_interface_var_cell__V;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__INa_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.98714602875678
        double var_chaste_interface__INa_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.991826348770428
        double var_chaste_interface__INa_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.0013702407736465
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[5];
        // Units: dimensionless; Initial value: 0.00846906175020028
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[6];
        // Units: dimensionless; Initial value: 0.00613557812033723
        double var_chaste_interface__Itos_X_gate__X_tos = rY[7];
        // Units: dimensionless; Initial value: 0.00401072468238921
        double var_chaste_interface__Itos_Y_gate__Y_tos = rY[8];
        // Units: dimensionless; Initial value: 0.31555225368514
        double var_chaste_interface__Itos_R_gate__R_tos = rY[9];
        // Units: dimensionless; Initial value: 0.402577243036347
        double var_chaste_interface__Itof_X_gate__X_tof = rY[10];
        // Units: dimensionless; Initial value: 0.00401068798369438
        double var_chaste_interface__Itof_Y_gate__Y_tof = rY[11];
        // Units: dimensionless; Initial value: 0.994632857675454
        double var_chaste_interface__ICaL_d_gate__d = rY[12];
        // Units: dimensionless; Initial value: 6.99526086177479e-06
        double var_chaste_interface__ICaL_f_gate__f = rY[13];
        // Units: dimensionless; Initial value: 1.00067601563206
        double var_chaste_interface__ICaL_fCa_gate__fCaB_SL = rY[14];
        // Units: dimensionless; Initial value: 0.0150193299768419
        double var_chaste_interface__ICaL_fCa_gate__fCaB_jct = rY[15];
        // Units: dimensionless; Initial value: 0.0244048782575591
        double var_chaste_interface__Na_buffer__Na_SL = rY[19];
        // Units: millimolar; Initial value: 8.87161932058707
        double var_chaste_interface__Na_buffer__Na_jct = rY[20];
        // Units: millimolar; Initial value: 8.87031835089116
        double var_chaste_interface__Na_buffer__Nai = rY[23];
        // Units: millimolar; Initial value: 8.87200572571131
        double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
        // Units: millimolar; Initial value: 0.000104971310105451
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        

        // Lookup table indexing
        const bool _oob_0 = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_INa__openProb = pow(var_chaste_interface__INa_m_gate__m, 3) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // dimensionless
        const double var_ICaL__i_CaL_Ca_SL = ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (10000000.0 * (4.9999999999999998e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (0.18000000000000002 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICaL__i_CaL_Ca_jct = ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (10000000.0 * (4.9999999999999998e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (1.6200000000000001 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICaL__i_CaL_Na_SL = ((fabs(var_chaste_interface__cell__V) < 9.9999999999999995e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (5000000.0 * (9.9999999999999995e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (6.7499999999999994e-10 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICaL__i_CaL_Na_jct = ((fabs(var_chaste_interface__cell__V) < 9.9999999999999995e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (5000000.0 * (9.9999999999999995e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (6.0749999999999998e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICap__Q_SLCaP = pow(2.3500000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_ICap__i_Cap_SL = 0.059896999999999999 * var_ICap__Q_SLCaP / (1.0 + 5.2281977629563632e-6 * pow((1 / var_chaste_interface__Ca_buffer__Ca_SL), 1.6000000000000001)); // microA_per_microF
        const double var_ICap__i_Cap_jct = 0.0074029999999999999 * var_ICap__Q_SLCaP / (1.0 + 5.2281977629563632e-6 * pow((1 / var_chaste_interface__Ca_buffer__Ca_jct), 1.6000000000000001)); // microA_per_microF
        const double var_IKs__E_Ks = mParameters[11] * mParameters[23] * log((0.018329999999999999 * mParameters[9] + mParameters[8]) / (0.018329999999999999 * var_chaste_interface__Na_buffer__Nai + mParameters[5])) / mParameters[10]; // millivolt
        const double var_INaCa__Q_NCX = pow(1.5700000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaCa__i_NaCa_SL = 0.89000000000000001 * (pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) * mParameters[6] * exp(0.34999999999999998 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) - pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_SL * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_INaCa__Q_NCX * mParameters[22] / ((1.0 + 0.27000000000000002 * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * (1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_SL, 3)) * (1.3 * pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) + pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) * mParameters[6] + pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_SL + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_SL) * var_chaste_interface__Ca_buffer__Ca_SL + 0.0035899999999999999 * pow(mParameters[9], 3.0) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_buffer__Na_SL, 3.0)))); // microA_per_microF
        const double var_INaCa__i_NaCa_jct = 0.11 * (pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) * mParameters[6] * exp(0.34999999999999998 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) - pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_jct * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_INaCa__Q_NCX * mParameters[22] / ((1.0 + 0.27000000000000002 * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * (1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_jct, 3)) * (1.3 * pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) + pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) * mParameters[6] + pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_jct + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_jct) * var_chaste_interface__Ca_buffer__Ca_jct + 0.0035899999999999999 * pow(mParameters[9], 3.0) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_buffer__Na_jct, 3.0)))); // microA_per_microF
        const double var_INaK__Q_Km_Nai = pow(1.49, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaK__Q_NaK = pow(1.6299999999999999, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaK__f_NaK = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[9])) * exp(-var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))); // dimensionless
        const double var_INaK__i_NaK_SL = 1.6999 * var_INaK__Q_NaK * var_INaK__f_NaK * mParameters[8] / ((1.0 + 14641.0 * pow((var_INaK__Q_Km_Nai / var_chaste_interface__Na_buffer__Na_SL), 4.0)) * (1.5 + mParameters[8])); // microA_per_microF
        const double var_INaK__i_NaK_jct = 0.21009999999999998 * var_INaK__Q_NaK * var_INaK__f_NaK * mParameters[8] / ((1.0 + 14641.0 * pow((var_INaK__Q_Km_Nai / var_chaste_interface__Na_buffer__Na_jct), 4.0)) * (1.5 + mParameters[8])); // microA_per_microF
        const double var_ICab__i_Cab_SL = 0.00022365699999999999 * var_chaste_interface__cell__V - 0.00011182849999999999 * mParameters[11] * mParameters[23] * log(mParameters[6] / var_chaste_interface__Ca_buffer__Ca_SL) / mParameters[10]; // microA_per_microF
        const double var_ICab__i_Cab_jct = 2.7642999999999999e-5 * var_chaste_interface__cell__V - 1.38215e-5 * mParameters[11] * mParameters[23] * log(mParameters[6] / var_chaste_interface__Ca_buffer__Ca_jct) / mParameters[10]; // microA_per_microF
        const double var_reversal_potentials__E_Cl = -mParameters[11] * mParameters[23] * log(mParameters[7] / mParameters[4]) / mParameters[10]; // millivolt
        const double var_reversal_potentials__E_K = mParameters[11] * mParameters[23] * log(mParameters[8] / mParameters[5]) / mParameters[10]; // millivolt
        const double var_reversal_potentials__E_Na_SL = mParameters[11] * mParameters[23] * log(mParameters[9] / var_chaste_interface__Na_buffer__Na_SL) / mParameters[10]; // millivolt
        const double var_INa__i_Na_SL = 0.89000000000000001 * (-var_reversal_potentials__E_Na_SL + var_chaste_interface__cell__V) * mParameters[14] * var_INa__openProb; // microA_per_microF
        const double var_INab__i_Nab_SL = 0.00026433000000000001 * var_chaste_interface__cell__V - 0.00026433000000000001 * var_reversal_potentials__E_Na_SL; // microA_per_microF
        const double var_reversal_potentials__E_Na_jct = mParameters[11] * mParameters[23] * log(mParameters[9] / var_chaste_interface__Na_buffer__Na_jct) / mParameters[10]; // millivolt
        const double var_INa__i_Na_jct = 0.11 * (-var_reversal_potentials__E_Na_jct + var_chaste_interface__cell__V) * mParameters[14] * var_INa__openProb; // microA_per_microF
        const double var_INab__i_Nab_jct = 3.2670000000000004e-5 * var_chaste_interface__cell__V - 3.2670000000000004e-5 * var_reversal_potentials__E_Na_jct; // microA_per_microF
        d_dt_chaste_interface_var_cell__V = -((fabs(var_chaste_interface__cell__V) < 9.9999999999999995e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (5000000.0 * (9.9999999999999995e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (1.2150000000000001e-14 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (-0.75 * mParameters[8] + 0.75 * mParameters[5] * exp(9.9999999999999995e-8)) * (1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 1.2150000000000001e-14 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (-0.75 * mParameters[8] + 0.75 * mParameters[5] * exp(-9.9999999999999995e-8)) * (1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 1.2150000000000001e-14 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (-0.75 * mParameters[8] + 0.75 * mParameters[5] * exp(-9.9999999999999995e-8)) * (1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (1.215e-7 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (-0.75 * mParameters[8] + 0.75 * mParameters[5] * exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * (1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))) - var_ICaL__i_CaL_Ca_SL - var_ICaL__i_CaL_Ca_jct - var_ICaL__i_CaL_Na_SL - var_ICaL__i_CaL_Na_jct - var_ICab__i_Cab_SL - var_ICab__i_Cab_jct - var_ICap__i_Cap_SL - var_ICap__i_Cap_jct - var_INa__i_Na_SL - var_INa__i_Na_jct - var_INaCa__i_NaCa_SL - var_INaCa__i_NaCa_jct - var_INaK__i_NaK_SL - var_INaK__i_NaK_jct - var_INab__i_Nab_SL - var_INab__i_Nab_jct - GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance() - (-var_reversal_potentials__E_Cl + var_chaste_interface__cell__V) * mParameters[13] - 0.109625 * (-var_reversal_potentials__E_Cl + var_chaste_interface__cell__V) * (0.11 / (1.0 + 0.10000000000000001 / var_chaste_interface__Ca_buffer__Ca_jct) + 0.89000000000000001 / (1.0 + 0.10000000000000001 / var_chaste_interface__Ca_buffer__Ca_SL)) - (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * (0.5 * var_chaste_interface__Itos_R_gate__R_tos + var_chaste_interface__Itos_Y_gate__Y_tos) * mParameters[21] * var_chaste_interface__Itos_X_gate__X_tos - (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * mParameters[17] * var_chaste_interface__Itof_X_gate__X_tof * var_chaste_interface__Itof_Y_gate__Y_tof - 0.11 * pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (0.057000000000000002 + 0.19 / (1.0 + exp(-7.0000000000000009 - 1.6666666666666667 * log10(var_chaste_interface__Ca_buffer__Ca_jct)))) * (-var_IKs__E_Ks + var_chaste_interface__cell__V) * mParameters[20] - 0.89000000000000001 * pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (0.057000000000000002 + 0.19 / (1.0 + exp(-7.0000000000000009 - 1.6666666666666667 * log10(var_chaste_interface__Ca_buffer__Ca_SL)))) * (-var_IKs__E_Ks + var_chaste_interface__cell__V) * mParameters[20] - 0.43033148291193518 * sqrt(mParameters[8]) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * mParameters[19] * var_chaste_interface__IKr_Xr_gate__Xr / (_lt_0_row[0]) - 0.4389381125701739 * sqrt(mParameters[8]) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * mParameters[18] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__E_K)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__E_K)) + (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__E_K) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__E_K)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__E_K - 0.51429999999999998 * var_chaste_interface__cell__V)))); // millivolt / millisecond

        return d_dt_chaste_interface_var_cell__V;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            double var_chaste_interface__INa_h_gate__h = rY[2];
            // Units: dimensionless; Initial value: 0.98714602875678
            double var_chaste_interface__INa_j_gate__j = rY[3];
            // Units: dimensionless; Initial value: 0.991826348770428
            double var_chaste_interface__INa_m_gate__m = rY[4];
            // Units: dimensionless; Initial value: 0.0013702407736465
            double var_chaste_interface__IKr_Xr_gate__Xr = rY[5];
            // Units: dimensionless; Initial value: 0.00846906175020028
            double var_chaste_interface__IKs_Xs_gate__Xs = rY[6];
            // Units: dimensionless; Initial value: 0.00613557812033723
            double var_chaste_interface__Itos_X_gate__X_tos = rY[7];
            // Units: dimensionless; Initial value: 0.00401072468238921
            double var_chaste_interface__Itos_Y_gate__Y_tos = rY[8];
            // Units: dimensionless; Initial value: 0.31555225368514
            double var_chaste_interface__Itos_R_gate__R_tos = rY[9];
            // Units: dimensionless; Initial value: 0.402577243036347
            double var_chaste_interface__Itof_X_gate__X_tof = rY[10];
            // Units: dimensionless; Initial value: 0.00401068798369438
            double var_chaste_interface__Itof_Y_gate__Y_tof = rY[11];
            // Units: dimensionless; Initial value: 0.994632857675454
            double var_chaste_interface__ICaL_d_gate__d = rY[12];
            // Units: dimensionless; Initial value: 6.99526086177479e-06
            double var_chaste_interface__ICaL_f_gate__f = rY[13];
            // Units: dimensionless; Initial value: 1.00067601563206
            double var_chaste_interface__ICaL_fCa_gate__fCaB_SL = rY[14];
            // Units: dimensionless; Initial value: 0.0150193299768419
            double var_chaste_interface__ICaL_fCa_gate__fCaB_jct = rY[15];
            // Units: dimensionless; Initial value: 0.0244048782575591
            double var_chaste_interface__Na_buffer__Na_SL = rY[19];
            // Units: millimolar; Initial value: 8.87161932058707
            double var_chaste_interface__Na_buffer__Na_jct = rY[20];
            // Units: millimolar; Initial value: 8.87031835089116
            double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
            // Units: millimolar; Initial value: 0.000104971310105451
            double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
            // Units: millimolar; Initial value: 0.000174045152623969
            


            const double var_x0 = exp(9.9999999999999995e-8);
            const double var_x1 = 1 / (-1.0 + var_x0);
            const double var_x2 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x3 = pow(1.8, var_x2);
            const double var_x4 = var_x3 * mParameters[10];
            const double var_x5 = var_x4 * var_chaste_interface__ICaL_f_gate__f;
            const double var_x6 = var_x1 * var_x5;
            const double var_x7 = var_x6 * mParameters[12];
            const double var_x8 = -0.34100000000000003 * mParameters[6];
            const double var_x9 = 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL;
            const double var_x10 = var_x8 + var_x0 * var_x9;
            const double var_x11 = 1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL;
            const double var_x12 = 8.9999999999999995e-9 * var_x11;
            const double var_x13 = var_x10 * var_x12;
            const double var_x14 = var_x13 * var_x7;
            const double var_x15 = exp(-9.9999999999999995e-8);
            const double var_x16 = 1 / (-1.0 + var_x15);
            const double var_x17 = var_x16 * var_x5;
            const double var_x18 = var_x17 * mParameters[12];
            const double var_x19 = var_x8 + var_x15 * var_x9;
            const double var_x20 = var_x12 * var_x19;
            const double var_x21 = var_x18 * var_x20;
            const double var_x22 = 1 / (mParameters[11] * mParameters[23]);
            const double var_x23 = var_x22 * mParameters[10];
            const double var_x24 = 10000000.0 * var_x23;
            const double var_x25 = var_x24 * (var_x14 * var_chaste_interface__ICaL_d_gate__d + var_x21 * var_chaste_interface__ICaL_d_gate__d);
            const double var_x26 = 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct;
            const double var_x27 = var_x8 + var_x0 * var_x26;
            const double var_x28 = 1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct;
            const double var_x29 = 8.0999999999999997e-8 * var_x28;
            const double var_x30 = var_x27 * var_x29;
            const double var_x31 = var_x30 * var_x7;
            const double var_x32 = var_x8 + var_x15 * var_x26;
            const double var_x33 = var_x29 * var_x32;
            const double var_x34 = var_x18 * var_x33;
            const double var_x35 = var_x24 * (var_x31 * var_chaste_interface__ICaL_d_gate__d + var_x34 * var_chaste_interface__ICaL_d_gate__d);
            const double var_x36 = 1 / var_chaste_interface__Ca_buffer__Ca_jct;
            const double var_x37 = 1.0 + 0.10000000000000001 * var_x36;
            const double var_x38 = 1 / var_chaste_interface__Ca_buffer__Ca_SL;
            const double var_x39 = 1.0 + 0.10000000000000001 * var_x38;
            const double var_x40 = -var_chaste_interface__Itos_Y_gate__Y_tos;
            const double var_x41 = (var_x40 - 0.5 * var_chaste_interface__Itos_R_gate__R_tos) * mParameters[21];
            const double var_x42 = mParameters[17] * var_chaste_interface__Itof_Y_gate__Y_tof;
            const double var_x43 = exp(-7.0000000000000009 - 1.6666666666666667 * log10(var_chaste_interface__Ca_buffer__Ca_jct));
            const double var_x44 = 1.0 + var_x43;
            const double var_x45 = 0.057000000000000002 + 0.19 / var_x44;
            const double var_x46 = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * mParameters[20];
            const double var_x47 = var_x45 * var_x46;
            const double var_x48 = exp(-7.0000000000000009 - 1.6666666666666667 * log10(var_chaste_interface__Ca_buffer__Ca_SL));
            const double var_x49 = 1.0 + var_x48;
            const double var_x50 = 0.057000000000000002 + 0.19 / var_x49;
            const double var_x51 = var_x46 * var_x50;
            const double var_x52 = sqrt(mParameters[8]);
            const double var_x53 = var_x52 * mParameters[19] * var_chaste_interface__IKr_Xr_gate__Xr;
            const double var_x54 = exp(1.4732142857142858 + 0.044642857142857144 * var_chaste_interface__cell__V);
            const double var_x55 = 1.0 + var_x54;
            const double var_x56 = 0.43033148291193518 / var_x55;
            const double var_x57 = pow(var_chaste_interface__INa_m_gate__m, 3);
            const double var_x58 = var_x57 * mParameters[14] * var_chaste_interface__INa_j_gate__j;
            const double var_x59 = var_x58 * var_chaste_interface__INa_h_gate__h;
            const double var_x60 = 1 / mParameters[10];
            const double var_x61 = var_x60 * mParameters[11] * mParameters[23];
            const double var_x62 = var_x61 * log(mParameters[8] / mParameters[5]);
            const double var_x63 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_x62);
            const double var_x64 = 1.0 + var_x63;
            const double var_x65 = 1 / var_x64;
            const double var_x66 = exp(-2.4444678999999998 + 0.51429999999999998 * var_x62 - 0.51429999999999998 * var_chaste_interface__cell__V);
            const double var_x67 = 1.0 + var_x66;
            const double var_x68 = 1 / var_x67;
            const double var_x69 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_x62);
            const double var_x70 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_x62);
            const double var_x71 = var_x69 + 0.49124000000000001 * var_x70;
            const double var_x72 = var_x68 * var_x71;
            const double var_x73 = var_x52 * mParameters[18] / (var_x72 + 1.02 * var_x65);
            const double var_x74 = -var_x62 + var_chaste_interface__cell__V;
            const double var_x75 = var_x63 / pow(var_x64, 2);
            const double var_x76 = 0.34999999999999998 * var_chaste_interface__cell__V;
            const double var_x77 = exp(var_x23 * var_x76);
            const double var_x78 = pow(var_chaste_interface__Na_buffer__Na_jct, 3.0);
            const double var_x79 = var_x78 * mParameters[6];
            const double var_x80 = var_x77 * var_x79;
            const double var_x81 = 0.34999999999999998 * var_x23;
            const double var_x82 = var_x23 * var_chaste_interface__cell__V;
            const double var_x83 = exp(-0.65000000000000002 * var_x82);
            const double var_x84 = pow(mParameters[9], 3.0);
            const double var_x85 = var_x84 * var_chaste_interface__Ca_buffer__Ca_jct;
            const double var_x86 = var_x83 * var_x85;
            const double var_x87 = 0.65000000000000002 * var_x23;
            const double var_x88 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_jct) * var_chaste_interface__Ca_buffer__Ca_jct;
            const double var_x89 = 1.0 + 0.00053869674493876331 * var_x78;
            const double var_x90 = 0.0035899999999999999 * var_x84;
            const double var_x91 = 1 / (var_x79 + var_x85 + 669921.875 * var_x88 + 1.3 * var_x78 + var_x89 * var_x90);
            const double var_x92 = 1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_jct, 3);
            const double var_x93 = 1 / var_x92;
            const double var_x94 = 1.0 + 0.27000000000000002 * var_x83;
            const double var_x95 = pow(1.5700000000000001, var_x2) * mParameters[22];
            const double var_x96 = var_x95 / var_x94;
            const double var_x97 = var_x93 * var_x96;
            const double var_x98 = var_x91 * var_x97;
            const double var_x99 = var_x98 * (var_x80 * var_x81 + var_x86 * var_x87);
            const double var_x100 = pow(var_chaste_interface__Na_buffer__Na_SL, 3.0);
            const double var_x101 = var_x100 * mParameters[6];
            const double var_x102 = var_x101 * var_x77;
            const double var_x103 = var_x84 * var_chaste_interface__Ca_buffer__Ca_SL;
            const double var_x104 = var_x103 * var_x83;
            const double var_x105 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_SL) * var_chaste_interface__Ca_buffer__Ca_SL;
            const double var_x106 = 1.0 + 0.00053869674493876331 * var_x100;
            const double var_x107 = 1 / (var_x101 + var_x103 + 669921.875 * var_x105 + 1.3 * var_x100 + var_x106 * var_x90);
            const double var_x108 = 1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_SL, 3);
            const double var_x109 = 1 / var_x108;
            const double var_x110 = var_x109 * var_x96;
            const double var_x111 = var_x107 * var_x110;
            const double var_x112 = var_x111 * (var_x102 * var_x81 + var_x104 * var_x87);
            const double var_x113 = var_x52 * var_x74;
            const double var_x114 = pow(1.49, (-124.0 + 0.40000000000000002 * mParameters[23]));
            const double var_x115 = 1 / var_chaste_interface__Na_buffer__Na_jct;
            const double var_x116 = var_x114 * pow(var_x115, 4.0);
            const double var_x117 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x118 = exp(-var_x117 * var_x23);
            const double var_x119 = exp(0.01485884101040119 * mParameters[9]);
            const double var_x120 = exp(-var_x82);
            const double var_x121 = 1.0 + 0.1245 * var_x118 + 0.036499999999999998 * var_x120 * (-0.14285714285714285 + 0.14285714285714285 * var_x119);
            const double var_x122 = pow(1.6299999999999999, var_x2) * mParameters[8] / (1.5 + mParameters[8]);
            const double var_x123 = var_x122 * (0.012450000000000001 * var_x118 * var_x23 + var_x120 * var_x23 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x119)) / pow(var_x121, 2);
            const double var_x124 = var_x123 / (1.0 + 14641.0 * var_x116);
            const double var_x125 = 1 / var_chaste_interface__Na_buffer__Na_SL;
            const double var_x126 = var_x114 * pow(var_x125, 4.0);
            const double var_x127 = var_x123 / (1.0 + 14641.0 * var_x126);
            const double var_x128 = var_x102 - var_x104;
            const double var_x129 = var_x107 * var_x128;
            const double var_x130 = var_x23 * var_x83 * var_x95 / pow(var_x94, 2);
            const double var_x131 = var_x109 * var_x129 * var_x130;
            const double var_x132 = var_x80 - var_x86;
            const double var_x133 = var_x132 * var_x91;
            const double var_x134 = var_x130 * var_x133 * var_x93;
            const double var_x135 = -0.00054830000000000005 - mParameters[13] - 0.11 * var_x47 - 0.11 * var_x99 - 0.89000000000000001 * var_x112 - 0.89000000000000001 * var_x51 - 0.15619500000000003 * var_x131 - 1.0 * var_x59 - 0.01205875 / var_x37 - 0.019305000000000003 * var_x134 - 0.097566250000000007 / var_x39 - 0.21009999999999998 * var_x124 - 1.6999 * var_x127 + var_x41 * var_chaste_interface__Itos_X_gate__X_tos - var_x42 * var_chaste_interface__Itof_X_gate__X_tof - var_x53 * var_x56 - 0.4389381125701739 * var_x65 * var_x73 + 0.10468673984798647 * var_x73 * var_x74 * var_x75 + 0.019211226915711394 * var_x53 * var_x54 * var_x74 / pow(var_x55, 2) - 0.42189361069797565 * var_x113 * var_x65 * (0.24326999999999999 * var_x75 - var_x68 * (0.061749999999999999 * var_x69 + 0.039456396800000001 * var_x70) - 0.51429999999999998 * var_x66 * var_x71 / pow(var_x67, 2)) * mParameters[18] / pow((var_x65 + 0.98039215686274506 * var_x72), 2);
            const double var_x136 = var_x135 - var_x25 - var_x35;
            const double var_x137 = -0.75 * mParameters[9];
            const double var_x138 = 0.75 * var_chaste_interface__Na_buffer__Na_SL;
            const double var_x139 = var_x137 + var_x0 * var_x138;
            const double var_x140 = 6.75e-17 * var_x11;
            const double var_x141 = var_x139 * var_x140;
            const double var_x142 = var_x141 * var_x6;
            const double var_x143 = var_x137 + var_x138 * var_x15;
            const double var_x144 = var_x140 * var_x143;
            const double var_x145 = var_x144 * var_x17;
            const double var_x146 = 5000000.0 * var_x23;
            const double var_x147 = var_x146 * (var_x142 * var_chaste_interface__ICaL_d_gate__d + var_x145 * var_chaste_interface__ICaL_d_gate__d);
            const double var_x148 = 0.75 * var_chaste_interface__Na_buffer__Na_jct;
            const double var_x149 = var_x137 + var_x0 * var_x148;
            const double var_x150 = 6.0749999999999991e-16 * var_x28;
            const double var_x151 = var_x149 * var_x150;
            const double var_x152 = var_x151 * var_x6;
            const double var_x153 = var_x137 + var_x148 * var_x15;
            const double var_x154 = var_x150 * var_x153;
            const double var_x155 = var_x154 * var_x17;
            const double var_x156 = var_x146 * (var_x152 * var_chaste_interface__ICaL_d_gate__d + var_x155 * var_chaste_interface__ICaL_d_gate__d);
            const double var_x157 = 1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct;
            const double var_x158 = 1.2150000000000001e-14 * var_x157;
            const double var_x159 = -0.75 * mParameters[8];
            const double var_x160 = 0.75 * mParameters[5];
            const double var_x161 = var_x159 + var_x0 * var_x160;
            const double var_x162 = var_x161 * var_x6;
            const double var_x163 = var_x158 * var_x162;
            const double var_x164 = var_x159 + var_x15 * var_x160;
            const double var_x165 = var_x158 * var_x164;
            const double var_x166 = var_x165 * var_x17;
            const double var_x167 = -var_x147 - var_x156 - var_x146 * (var_x163 * var_chaste_interface__ICaL_d_gate__d + var_x166 * var_chaste_interface__ICaL_d_gate__d);
            const double var_x168 = fabs(var_chaste_interface__cell__V);
            const double var_x169 = fabs(var_x61);
            const double var_x170 = var_x168 < 4.9999999999999998e-8 * var_x169;
            const double var_x171 = var_x168 < 9.9999999999999995e-8 * var_x169;
            const double var_x172 = (var_x170) && (var_x171);
            const double var_x173 = var_x11 * var_chaste_interface__ICaL_d_gate__d;
            const double var_x174 = var_x22 * pow(mParameters[10], 2);
            const double var_x175 = var_x173 * var_x174;
            const double var_x176 = var_x3 * var_chaste_interface__ICaL_f_gate__f;
            const double var_x177 = exp(2.0 * var_x82);
            const double var_x178 = -1.0 + var_x177;
            const double var_x179 = mParameters[12] / var_x178;
            const double var_x180 = var_x176 * var_x179;
            const double var_x181 = var_x175 * var_x180;
            const double var_x182 = var_x8 + var_x177 * var_x9;
            const double var_x183 = 0.18000000000000002 * var_x182;
            const double var_x184 = var_x181 * var_x183;
            const double var_x185 = var_x28 * var_chaste_interface__ICaL_d_gate__d;
            const double var_x186 = var_x180 * var_x185;
            const double var_x187 = var_x8 + var_x177 * var_x26;
            const double var_x188 = 1.6200000000000001 * var_x187;
            const double var_x189 = var_x174 * var_x186 * var_x188;
            const double var_x190 = pow(mParameters[10], 3) / (pow(mParameters[11], 2) * pow(mParameters[23], 2));
            const double var_x191 = var_x173 * var_x190;
            const double var_x192 = var_x177 * var_chaste_interface__cell__V;
            const double var_x193 = var_x191 * var_x192;
            const double var_x194 = var_x176 * mParameters[12] / pow(var_x178, 2);
            const double var_x195 = 0.36000000000000004 * var_x182 * var_x193 * var_x194;
            const double var_x196 = var_x185 * var_x190;
            const double var_x197 = 3.2400000000000002 * var_x187 * var_x192 * var_x194 * var_x196;
            const double var_x198 = 1.10484 * var_x186 * var_x190 * var_x192 * var_chaste_interface__Ca_buffer__Ca_jct;
            const double var_x199 = 0.12276000000000002 * var_x180 * var_x193 * var_chaste_interface__Ca_buffer__Ca_SL;
            const double var_x200 = var_x135 + var_x195 + var_x197 - var_x184 - var_x189 - var_x198 - var_x199;
            const double var_x201 = exp(var_x82);
            const double var_x202 = 6.7499999999999994e-10 * var_x137 + 6.7499999999999994e-10 * var_x138 * var_x201;
            const double var_x203 = -1.0 + var_x201;
            const double var_x204 = 1 / var_x203;
            const double var_x205 = var_x176 * var_x204;
            const double var_x206 = var_x175 * var_x205;
            const double var_x207 = var_x202 * var_x206;
            const double var_x208 = var_x159 + var_x160 * var_x201;
            const double var_x209 = var_x174 * var_x205;
            const double var_x210 = var_x209 * var_chaste_interface__ICaL_d_gate__d;
            const double var_x211 = var_x208 * var_x210;
            const double var_x212 = 1.215e-7 * var_x157;
            const double var_x213 = 6.0749999999999998e-9 * var_x137 + 6.0749999999999998e-9 * var_x148 * var_x201;
            const double var_x214 = var_x185 * var_x209;
            const double var_x215 = var_x213 * var_x214;
            const double var_x216 = var_x202 * var_chaste_interface__cell__V;
            const double var_x217 = var_x176 / pow(var_x203, 2);
            const double var_x218 = var_x191 * var_x201 * var_x216 * var_x217;
            const double var_x219 = var_x208 * var_x212;
            const double var_x220 = var_x219 * var_chaste_interface__ICaL_d_gate__d;
            const double var_x221 = var_x201 * var_chaste_interface__cell__V;
            const double var_x222 = var_x190 * var_x221;
            const double var_x223 = var_x217 * var_x222;
            const double var_x224 = var_x185 * var_x213;
            const double var_x225 = var_x223 * var_x224;
            const double var_x226 = 5.0624999999999998e-10 * var_x221;
            const double var_x227 = var_x191 * var_x205 * var_x226 * var_chaste_interface__Na_buffer__Na_SL;
            const double var_x228 = 4.5562499999999999e-9 * var_x221;
            const double var_x229 = var_x196 * var_x205 * var_x228 * var_chaste_interface__Na_buffer__Na_jct;
            const double var_x230 = var_x218 + var_x225 - var_x207 - var_x215 - var_x227 - var_x229 + var_x220 * var_x223 - var_x211 * var_x212 - 9.1125000000000004e-8 * var_x157 * var_x205 * var_x222 * var_chaste_interface__ICaL_d_gate__d * mParameters[5];
            
            partialF = ((var_x172) ? (var_x136 + var_x167) : ((var_x171) ? (var_x167 + var_x200) : ((var_x170) ? (var_x136 + var_x230) : (var_x200 + var_x230))));
        }
        else
        {
            const double y_save = rY[0];
            rY[0] += delta;
            const double temp = EvaluateYDerivative0(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[0])/delta;
            rY[0] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Cai = rY[1];
        // Units: millimolar; Initial value: 8.6504944644883e-05
        double var_chaste_interface__Ca_buffer__Ca_SR = rY[24];
        // Units: millimolar; Initial value: 0.547125831028543
        double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
        // Units: millimolar; Initial value: 0.000104971310105451
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC = rY[32];
        // Units: millimolar; Initial value: 0.00886665040283094
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg = rY[33];
        // Units: millimolar; Initial value: 0.117873278193472
        double var_chaste_interface__cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg = rY[34];
        // Units: millimolar; Initial value: 0.0103906683506505
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_Calmodulin = rY[35];
        // Units: millimolar; Initial value: 0.000293073957804278
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_Myosin = rY[36];
        // Units: millimolar; Initial value: 0.00195899238146509
        double var_chaste_interface__cytosolic_Ca_buffer__Mg_Myosin = rY[37];
        // Units: millimolar; Initial value: 0.137523520981802
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_SRB = rY[38];
        // Units: millimolar; Initial value: 0.00215728901718264
        


        // Mathematics
        const double var_cytosolic_Ca_buffer__dCa_Calmodulin = -0.23799999999999999 * var_chaste_interface__cytosolic_Ca_buffer__Ca_Calmodulin + 34.0 * (0.024 - var_chaste_interface__cytosolic_Ca_buffer__Ca_Calmodulin) * var_chaste_interface__Ca_buffer__Cai; // millimolar_per_millisecond
        const double var_cytosolic_Ca_buffer__dCa_Myosin = -0.00046000000000000001 * var_chaste_interface__cytosolic_Ca_buffer__Ca_Myosin + 13.800000000000001 * (0.14000000000000001 - var_chaste_interface__cytosolic_Ca_buffer__Ca_Myosin - var_chaste_interface__cytosolic_Ca_buffer__Mg_Myosin) * var_chaste_interface__Ca_buffer__Cai; // millimolar_per_millisecond
        const double var_cytosolic_Ca_buffer__dCa_SRB = -0.059999999999999998 * var_chaste_interface__cytosolic_Ca_buffer__Ca_SRB + 100.0 * (0.017100000000000001 - var_chaste_interface__cytosolic_Ca_buffer__Ca_SRB) * var_chaste_interface__Ca_buffer__Cai; // millimolar_per_millisecond
        const double var_cytosolic_Ca_buffer__dCa_TroponinC = -0.019599999999999999 * var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC + 32.700000000000003 * (0.070000000000000007 - var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC) * var_chaste_interface__Ca_buffer__Cai; // millimolar_per_millisecond
        const double var_cytosolic_Ca_buffer__dCa_TroponinC_Ca_Mg = -3.1999999999999999e-5 * var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg + 2.3700000000000001 * (0.14000000000000001 - var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg - var_chaste_interface__cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg) * var_chaste_interface__Ca_buffer__Cai; // millimolar_per_millisecond
        const double var_ion_diffusion__J_Ca_SL_cytosol = 3.7243000000000002e-12 * var_chaste_interface__Ca_buffer__Ca_SL - 3.7243000000000002e-12 * var_chaste_interface__Ca_buffer__Cai; // millimole_per_millisecond
        const double var_cytosolic_Ca_buffer__dMg_Myosin = 0.0021979999999999999 - 0.015699999999999999 * var_chaste_interface__cytosolic_Ca_buffer__Ca_Myosin - 0.015757 * var_chaste_interface__cytosolic_Ca_buffer__Mg_Myosin; // millimolar_per_millisecond
        const double var_cytosolic_Ca_buffer__dMg_TroponinC_Ca_Mg = 0.00042000000000000007 - 0.0030000000000000001 * var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg - 0.0063300000000000006 * var_chaste_interface__cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg; // millimolar_per_millisecond
        const double var_Jpump_SR__j_pump_SR = 18.571428571428569 * pow(2.6000000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])) * (2814485.1633595936 * pow(var_chaste_interface__Ca_buffer__Cai, 1.7869999999999999) - 0.38742512113256738 * pow(var_chaste_interface__Ca_buffer__Ca_SR, 1.7869999999999999)) * mParameters[2] / (1.0 + 0.38742512113256738 * pow(var_chaste_interface__Ca_buffer__Ca_SR, 1.7869999999999999) + 2814485.1633595936 * pow(var_chaste_interface__Ca_buffer__Cai, 1.7869999999999999)); // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_buffer__Cai = 46611066473.945435 * var_ion_diffusion__J_Ca_SL_cytosol - var_cytosolic_Ca_buffer__dCa_Calmodulin - var_cytosolic_Ca_buffer__dCa_Myosin - var_cytosolic_Ca_buffer__dCa_SRB - var_cytosolic_Ca_buffer__dCa_TroponinC - var_cytosolic_Ca_buffer__dCa_TroponinC_Ca_Mg - var_cytosolic_Ca_buffer__dMg_Myosin - var_cytosolic_Ca_buffer__dMg_TroponinC_Ca_Mg - 0.053846153846153849 * var_Jpump_SR__j_pump_SR; // millimolar / millisecond

        return d_dt_chaste_interface_var_Ca_buffer__Cai;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Cai = rY[1];
            // Units: millimolar; Initial value: 8.6504944644883e-05
            double var_chaste_interface__Ca_buffer__Ca_SR = rY[24];
            // Units: millimolar; Initial value: 0.547125831028543
            double var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC = rY[32];
            // Units: millimolar; Initial value: 0.00886665040283094
            double var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg = rY[33];
            // Units: millimolar; Initial value: 0.117873278193472
            double var_chaste_interface__cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg = rY[34];
            // Units: millimolar; Initial value: 0.0103906683506505
            double var_chaste_interface__cytosolic_Ca_buffer__Ca_Calmodulin = rY[35];
            // Units: millimolar; Initial value: 0.000293073957804278
            double var_chaste_interface__cytosolic_Ca_buffer__Ca_Myosin = rY[36];
            // Units: millimolar; Initial value: 0.00195899238146509
            double var_chaste_interface__cytosolic_Ca_buffer__Mg_Myosin = rY[37];
            // Units: millimolar; Initial value: 0.137523520981802
            double var_chaste_interface__cytosolic_Ca_buffer__Ca_SRB = rY[38];
            // Units: millimolar; Initial value: 0.00215728901718264
            


            const double var_x2 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x394 = 34.0 * var_chaste_interface__cytosolic_Ca_buffer__Ca_Calmodulin;
            const double var_x395 = 100.0 * var_chaste_interface__cytosolic_Ca_buffer__Ca_SRB;
            const double var_x396 = 32.700000000000003 * var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC;
            const double var_x397 = 2.3700000000000001 * var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg;
            const double var_x398 = 2.3700000000000001 * var_chaste_interface__cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg;
            const double var_x399 = 13.800000000000001 * var_chaste_interface__cytosolic_Ca_buffer__Ca_Myosin;
            const double var_x400 = 13.800000000000001 * var_chaste_interface__cytosolic_Ca_buffer__Mg_Myosin;
            const double var_x401 = pow(var_chaste_interface__Ca_buffer__Cai, 0.78699999999999992);
            const double var_x402 = pow(var_chaste_interface__Ca_buffer__Ca_SR, 1.7869999999999999);
            const double var_x403 = 0.38742512113256738 * var_x402;
            const double var_x404 = pow(var_chaste_interface__Ca_buffer__Cai, 1.7869999999999999);
            const double var_x405 = 2814485.1633595936 * var_x404;
            const double var_x406 = pow(2.6000000000000001, var_x2) * mParameters[2];
            const double var_x407 = var_x406 / (1.0 + var_x403 + var_x405);
            const double var_x408 = var_x401 * var_x407;
            const double var_x409 = var_x406 * (var_x405 - var_x403) / pow((3.5530476870814998e-7 + var_x404 + 1.3765399305573384e-7 * var_x402), 2);
            const double var_x410 = var_x401 * var_x409;
            
            partialF = -7.2523935948689155 + var_x394 + var_x395 + var_x396 + var_x397 + var_x398 + var_x399 + var_x400 + 6.3492962168146398e-7 * var_x410 - 5029484.9869235931 * var_x408;
        }
        else
        {
            const double y_save = rY[1];
            rY[1] += delta;
            const double temp = EvaluateYDerivative1(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[1])/delta;
            rY[1] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__INa_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.98714602875678
        


        // Mathematics
        const double var_INa_h_gate__alpha_h = ((var_chaste_interface__cell__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[16] - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_millisecond
        const double var_INa_h_gate__beta_h = ((var_chaste_interface__cell__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V - 0.34999999999999998 * mParameters[16]) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * mParameters[16])) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[16] - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_millisecond
        const double d_dt_chaste_interface_var_INa_h_gate__h = (var_INa_h_gate__alpha_h + var_INa_h_gate__beta_h) * (-var_chaste_interface__INa_h_gate__h + 0.01 * mParameters[15] + (1.0 - 0.01 * mParameters[15]) * var_INa_h_gate__alpha_h / (var_INa_h_gate__alpha_h + var_INa_h_gate__beta_h)); // 1 / millisecond

        return d_dt_chaste_interface_var_INa_h_gate__h;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            


            const double var_x76 = 0.34999999999999998 * var_chaste_interface__cell__V;
            const double var_x419 = exp(-11.764705882352942 + 0.14705882352941177 * mParameters[16] - 0.14705882352941177 * var_chaste_interface__cell__V);
            const double var_x420 = var_chaste_interface__cell__V < -40.0;
            const double var_x421 = ((var_x420) ? (0.13500000000000001 * var_x419) : (0));
            const double var_x422 = var_x421;
            const double var_x423 = exp(var_x76 - 0.34999999999999998 * mParameters[16]);
            const double var_x424 = exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * mParameters[16]);
            const double var_x425 = exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[16] - 0.0900900900900901 * var_chaste_interface__cell__V);
            const double var_x426 = 1.0 + var_x425;
            const double var_x427 = ((var_x420) ? (310000.0 * var_x423 + 3.5600000000000001 * var_x424) : (7.6923076923076916 / var_x426));
            const double var_x428 = var_x427;
            
            partialF = -var_x422 - var_x428;
        }
        else
        {
            const double y_save = rY[2];
            rY[2] += delta;
            const double temp = EvaluateYDerivative2(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[2])/delta;
            rY[2] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__INa_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.991826348770428
        


        // Mathematics
        const double var_INa_j_gate__alpha_j = ((var_chaste_interface__cell__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * mParameters[16]) - 3.4740000000000003e-5 * exp(0.043909999999999998 * mParameters[16] - 0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * mParameters[16]))) : (0)); // per_millisecond
        const double var_INa_j_gate__beta_j = ((var_chaste_interface__cell__V < -40.0) ? (0.1212 * exp(0.01052 * mParameters[16] - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[16] - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.29999999999999999 * exp(2.5349999999999999e-7 * mParameters[16] - 2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[16] - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_millisecond
        const double d_dt_chaste_interface_var_INa_j_gate__j = (var_INa_j_gate__alpha_j + var_INa_j_gate__beta_j) * (-var_chaste_interface__INa_j_gate__j + 0.01 * mParameters[15] + (1.0 - 0.01 * mParameters[15]) * var_INa_j_gate__alpha_j / (var_INa_j_gate__alpha_j + var_INa_j_gate__beta_j)); // 1 / millisecond

        return d_dt_chaste_interface_var_INa_j_gate__j;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            


            const double var_x117 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x420 = var_chaste_interface__cell__V < -40.0;
            const double var_x435 = exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[16] - 0.13780000000000001 * var_chaste_interface__cell__V);
            const double var_x436 = 1.0 + var_x435;
            const double var_x437 = exp(0.01052 * mParameters[16] - 0.01052 * var_chaste_interface__cell__V);
            const double var_x438 = var_x437 / var_x436;
            const double var_x439 = -var_x117;
            const double var_x440 = exp(-3.2000000000000002 + var_x439 + 0.10000000000000001 * mParameters[16]);
            const double var_x441 = 1.0 + var_x440;
            const double var_x442 = exp(2.5349999999999999e-7 * mParameters[16] - 2.5349999999999999e-7 * var_chaste_interface__cell__V);
            const double var_x443 = var_x442 / var_x441;
            const double var_x444 = ((var_x420) ? (0.1212 * var_x438) : (0.29999999999999999 * var_x443));
            const double var_x445 = var_x444;
            const double var_x446 = 37.780000000000001 + var_chaste_interface__cell__V;
            const double var_x447 = exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * mParameters[16]);
            const double var_x448 = exp(0.043909999999999998 * mParameters[16] - 0.043909999999999998 * var_chaste_interface__cell__V);
            const double var_x449 = -127140.0 * var_x447 - 3.4740000000000003e-5 * var_x448;
            const double var_x450 = exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * mParameters[16]);
            const double var_x451 = 1.0 + var_x450;
            const double var_x452 = 1 / var_x451;
            const double var_x453 = var_x449 * var_x452;
            const double var_x454 = ((var_x420) ? (var_x446 * var_x453) : (0));
            const double var_x455 = var_x454;
            
            partialF = -var_x445 - var_x455;
        }
        else
        {
            const double y_save = rY[3];
            rY[3] += delta;
            const double temp = EvaluateYDerivative3(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[3])/delta;
            rY[3] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__INa_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.0013702407736465
        

        // Lookup table indexing
        const bool _oob_0 = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_INa_m_gate__alpha_m = _lt_0_row[10]; // per_millisecond
        const double var_INa_m_gate__beta_m = _lt_0_row[11]; // per_millisecond
        const double d_dt_chaste_interface_var_INa_m_gate__m = (-var_chaste_interface__INa_m_gate__m + var_INa_m_gate__alpha_m / (var_INa_m_gate__alpha_m + var_INa_m_gate__beta_m)) * (var_INa_m_gate__alpha_m + var_INa_m_gate__beta_m); // 1 / millisecond

        return d_dt_chaste_interface_var_INa_m_gate__m;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            


            const double var_x117 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x439 = -var_x117;
            const double var_x460 = exp(-0.090909090909090912 * var_chaste_interface__cell__V);
            const double var_x461 = 0.080000000000000002 * var_x460;
            const double var_x462 = 1 / (1.0 - exp(-1.0000000000287557e-7));
            const double var_x463 = 3.200000000092018e-7 * var_x462;
            const double var_x464 = 1 / (1.0 - exp(1.0000000000287557e-7));
            const double var_x465 = 47.130000000000003 + var_chaste_interface__cell__V;
            const double var_x466 = fabs(var_x465) < 1.0000000000287557e-6;
            const double var_x467 = exp(-4.7130000000000001 + var_x439);
            const double var_x468 = 1.0 - var_x467;
            const double var_x469 = 0.32000000000000001 / var_x468;
            const double var_x470 = ((var_x466) ? (var_x463 - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-var_x463 - 3.200000000092018e-7 * var_x464)) : (var_x465 * var_x469));
            const double var_x475 = var_x470;
            
            partialF = -var_x461 - var_x475;
        }
        else
        {
            const double y_save = rY[4];
            rY[4] += delta;
            const double temp = EvaluateYDerivative4(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[4])/delta;
            rY[4] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[5];
        // Units: dimensionless; Initial value: 0.00846906175020028
        

        // Lookup table indexing
        const bool _oob_0 = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_IKr_Xr_gate__Xr = (-var_chaste_interface__IKr_Xr_gate__Xr + _lt_0_row[6]) * _lt_0_row[7]; // 1 / millisecond

        return d_dt_chaste_interface_var_IKr_Xr_gate__Xr;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            


            const double var_x479 = 1 / (-1.0 + exp(1.000000000001e-7));
            const double var_x480 = 1 / (-1.0 + exp(-1.000000000001e-7));
            const double var_x481 = exp(-0.86099999999999999 - 0.123 * var_chaste_interface__cell__V);
            const double var_x482 = 1.0 - var_x481;
            const double var_x483 = 0.0013799999999999999 / var_x482;
            const double var_x484 = 7.0 + var_chaste_interface__cell__V;
            const double var_x486 = 4.2068965517283451e-10 * var_x480;
            const double var_x487 = var_x483 * var_x484;
            const double var_x488 = 724999.99999927497 * (10.000000689655172 + var_chaste_interface__cell__V) * (var_x486 + 4.2068965517283451e-10 * var_x479);
            const double var_x490 = 10.0 + var_chaste_interface__cell__V;
            const double var_x491 = fabs(var_x490) < 6.8965517241448282e-7;
            const double var_x492 = 1 / (1.0 - exp(1.0000000000011388e-7));
            const double var_x493 = 1 / (1.0 - exp(-1.0000000000011388e-7));
            const double var_x494 = exp(1.45 + 0.14499999999999999 * var_chaste_interface__cell__V);
            const double var_x495 = -1.0 + var_x494;
            const double var_x496 = 0.00060999999999999997 / var_x495;
            const double var_x498 = 1.1219512195134727e-9 * var_x493;
            const double var_x499 = var_x490 * var_x496;
            const double var_x500 = -var_x498;
            const double var_x501 = 614999.99999929965 * (6.9999991869918698 + var_chaste_interface__cell__V) * (var_x500 - 1.1219512195134727e-9 * var_x492);
            const double var_x502 = fabs(var_x484) < 8.1300813008222672e-7;
            const double var_x503 = -var_x487;
            const double var_x504 = -var_x499;
            
            partialF = ((var_x491) ? (var_x486 + var_x503 - var_x488) : ((var_x502) ? (var_x500 + var_x501 + var_x504) : (var_x503 + var_x504)));
        }
        else
        {
            const double y_save = rY[5];
            rY[5] += delta;
            const double temp = EvaluateYDerivative5(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[5])/delta;
            rY[5] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[6];
        // Units: dimensionless; Initial value: 0.00613557812033723
        

        // Lookup table indexing
        const bool _oob_0 = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_IKs_Xs_gate__Xs = (-var_chaste_interface__IKs_Xs_gate__Xs + _lt_0_row[8]) * _lt_0_row[9]; // 1 / millisecond

        return d_dt_chaste_interface_var_IKs_Xs_gate__Xs;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            


            const double var_x508 = 1 / (-1.0 + exp(9.9999999999880736e-8));
            const double var_x509 = 1 / (-1.0 + exp(-9.9999999999880736e-8));
            const double var_x510 = 1 / (1.0 - exp(2.1542940320207204e-7));
            const double var_x511 = 1 / (1.0 - exp(-2.1542940320207204e-7));
            const double var_x512 = 1.0465793304208771e-10 * var_x510;
            const double var_x513 = 1.9068413391534758e-10 * var_x509;
            const double var_x514 = var_x512 + var_x513;
            const double var_x515 = 343500.00000040967 * (30.000001455604075 + var_chaste_interface__cell__V) * (var_x514 + 1.0465793304208771e-10 * var_x511 + 1.9068413391534758e-10 * var_x508);
            const double var_x517 = 30.0 + var_chaste_interface__cell__V;
            const double var_x518 = fabs(var_x517) < 1.455604075689676e-6;
            const double var_x519 = exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__cell__V);
            const double var_x520 = -1.0 + var_x519;
            const double var_x521 = 0.00013100000000000001 / var_x520;
            const double var_x522 = exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__cell__V);
            const double var_x523 = 1.0 - var_x522;
            const double var_x524 = 7.1899999999999999e-5 / var_x523;
            const double var_x525 = var_x517 * var_x521;
            const double var_x526 = var_x517 * var_x524;
            
            partialF = ((var_x518) ? (var_x514 - var_x515) : (-var_x525 - var_x526));
        }
        else
        {
            const double y_save = rY[6];
            rY[6] += delta;
            const double temp = EvaluateYDerivative6(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[6])/delta;
            rY[6] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__Itos_X_gate__X_tos = rY[7];
        // Units: dimensionless; Initial value: 0.00401072468238921
        

        // Lookup table indexing
        const bool _oob_0 = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_Itos_X_gate__X_tos = (-var_chaste_interface__Itos_X_gate__X_tos + _lt_0_row[12]) / (_lt_0_row[17]); // 1 / millisecond

        return d_dt_chaste_interface_var_Itos_X_gate__X_tos;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            


            const double var_x527 = 0.066666666666666666 * var_chaste_interface__cell__V;
            const double var_x528 = exp(0.20000000000000001 + var_x527);
            const double var_x529 = 1.0 + var_x528;
            const double var_x530 = 1 / var_x529;
            const double var_x531 = 1 / (0.5 + 9.0 * var_x530);
            
            partialF = -var_x531;
        }
        else
        {
            const double y_save = rY[7];
            rY[7] += delta;
            const double temp = EvaluateYDerivative7(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[7])/delta;
            rY[7] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__Itos_Y_gate__Y_tos = rY[8];
        // Units: dimensionless; Initial value: 0.31555225368514
        

        // Lookup table indexing
        const bool _oob_0 = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_Itos_Y_gate__Y_tos = (-var_chaste_interface__Itos_Y_gate__Y_tos + _lt_0_row[14]) / (_lt_0_row[18]); // 1 / millisecond

        return d_dt_chaste_interface_var_Itos_Y_gate__Y_tos;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            


            const double var_x536 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x537 = exp(6.0 + var_x536);
            const double var_x538 = 1.0 + var_x537;
            const double var_x539 = 1 / var_x538;
            const double var_x540 = 1 / (30.0 + 3000.0 * var_x539);
            
            partialF = -var_x540;
        }
        else
        {
            const double y_save = rY[8];
            rY[8] += delta;
            const double temp = EvaluateYDerivative8(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[8])/delta;
            rY[8] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__Itos_R_gate__R_tos = rY[9];
        // Units: dimensionless; Initial value: 0.402577243036347
        

        // Lookup table indexing
        const bool _oob_0 = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_Itos_R_gate__R_tos = (-var_chaste_interface__Itos_R_gate__R_tos + _lt_0_row[14]) / (_lt_0_row[16]); // 1 / millisecond

        return d_dt_chaste_interface_var_Itos_R_gate__R_tos;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            


            const double var_x536 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x537 = exp(6.0 + var_x536);
            const double var_x538 = 1.0 + var_x537;
            const double var_x539 = 1 / var_x538;
            const double var_x548 = 1 / (220.0 + 2800.0 * var_x539);
            
            partialF = -var_x548;
        }
        else
        {
            const double y_save = rY[9];
            rY[9] += delta;
            const double temp = EvaluateYDerivative9(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[9])/delta;
            rY[9] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__Itof_X_gate__X_tof = rY[10];
        // Units: dimensionless; Initial value: 0.00401068798369438
        

        // Lookup table indexing
        const bool _oob_0 = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_Itof_X_gate__X_tof = (-var_chaste_interface__Itof_X_gate__X_tof + _lt_0_row[12]) / (_lt_0_row[13]); // 1 / millisecond

        return d_dt_chaste_interface_var_Itof_X_gate__X_tof;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            


            const double var_x549 = exp(-0.0011111111111111111 * pow(var_chaste_interface__cell__V, 2));
            const double var_x550 = 1 / (1.5 + 3.5 * var_x549);
            
            partialF = -var_x550;
        }
        else
        {
            const double y_save = rY[10];
            rY[10] += delta;
            const double temp = EvaluateYDerivative10(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[10])/delta;
            rY[10] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__Itof_Y_gate__Y_tof = rY[11];
        // Units: dimensionless; Initial value: 0.994632857675454
        

        // Lookup table indexing
        const bool _oob_0 = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_Itof_Y_gate__Y_tof = (-var_chaste_interface__Itof_Y_gate__Y_tof + _lt_0_row[14]) / (_lt_0_row[15]); // 1 / millisecond

        return d_dt_chaste_interface_var_Itof_Y_gate__Y_tof;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            


            const double var_x536 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x541 = exp(3.3500000000000001 + var_x536);
            const double var_x542 = 1.0 + var_x541;
            const double var_x545 = 1 / var_x542;
            const double var_x551 = 1 / (20.0 + 20.0 * var_x545);
            
            partialF = -var_x551;
        }
        else
        {
            const double y_save = rY[11];
            rY[11] += delta;
            const double temp = EvaluateYDerivative11(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[11])/delta;
            rY[11] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__ICaL_d_gate__d = rY[12];
        // Units: dimensionless; Initial value: 6.99526086177479e-06
        

        // Lookup table indexing
        const bool _oob_0 = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_ICaL_d_gate__d = (-var_chaste_interface__ICaL_d_gate__d + _lt_0_row[1]) * _lt_0_row[2]; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL_d_gate__d;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            


            const double var_x552 = exp(-2.4166666666666665 - 0.16666666666666666 * var_chaste_interface__cell__V);
            const double var_x553 = 1.0 + var_x552;
            const double var_x554 = exp(-9.9999999998249642e-8);
            const double var_x555 = (1.0 - var_x554) / (1.0 + var_x554);
            const double var_x556 = 47619047.619881123 * var_x555;
            const double var_x557 = exp(1.000000000005626e-7);
            const double var_x558 = (1.0 - var_x557) / (1.0 + var_x557);
            const double var_x559 = (14.4999994 + var_chaste_interface__cell__V) * (-var_x556 - 47619047.618779711 * var_x558);
            const double var_x560 = 1 / (var_x556 - 833333.3333382823 * var_x559);
            const double var_x563 = 14.5 + var_chaste_interface__cell__V;
            const double var_x564 = fabs(var_x563) < 5.9999999999643672e-7;
            const double var_x565 = 1.0 - var_x552;
            const double var_x566 = 1 / var_x565;
            const double var_x568 = 0.035000000000000003 * var_x553;
            const double var_x569 = var_x563 * var_x566;
            
            partialF = ((var_x564) ? (-var_x560) : (-var_x568 * var_x569));
        }
        else
        {
            const double y_save = rY[12];
            rY[12] += delta;
            const double temp = EvaluateYDerivative12(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[12])/delta;
            rY[12] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__ICaL_f_gate__f = rY[13];
        // Units: dimensionless; Initial value: 1.00067601563206
        

        // Lookup table indexing
        const bool _oob_0 = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_ICaL_f_gate__f = (_lt_0_row[5]) * (-var_chaste_interface__ICaL_f_gate__f + _lt_0_row[3] + _lt_0_row[4]); // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL_f_gate__f;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            


            const double var_x572 = 0.019699999999999999 * exp(-0.23877882250000002 * pow((1 + 0.068965517241379309 * var_chaste_interface__cell__V), 2));
            
            partialF = -0.02 - var_x572;
        }
        else
        {
            const double y_save = rY[13];
            rY[13] += delta;
            const double temp = EvaluateYDerivative13(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[13])/delta;
            rY[13] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__ICaL_fCa_gate__fCaB_SL = rY[14];
        // Units: dimensionless; Initial value: 0.0150193299768419
        double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
        // Units: millimolar; Initial value: 0.000104971310105451
        


        // Mathematics
        const double d_dt_chaste_interface_var_ICaL_fCa_gate__fCaB_SL = -0.011900000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL + 1.7 * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * var_chaste_interface__Ca_buffer__Ca_SL; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL_fCa_gate__fCaB_SL;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
            // Units: millimolar; Initial value: 0.000104971310105451
            


            
            partialF = -0.011900000000000001 - 1.7 * var_chaste_interface__Ca_buffer__Ca_SL;
        }
        else
        {
            const double y_save = rY[14];
            rY[14] += delta;
            const double temp = EvaluateYDerivative14(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[14])/delta;
            rY[14] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__ICaL_fCa_gate__fCaB_jct = rY[15];
        // Units: dimensionless; Initial value: 0.0244048782575591
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        


        // Mathematics
        const double d_dt_chaste_interface_var_ICaL_fCa_gate__fCaB_jct = -0.011900000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct + 1.7 * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__Ca_buffer__Ca_jct; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL_fCa_gate__fCaB_jct;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
            // Units: millimolar; Initial value: 0.000174045152623969
            


            
            partialF = -0.011900000000000001 - 1.7 * var_chaste_interface__Ca_buffer__Ca_jct;
        }
        else
        {
            const double y_save = rY[15];
            rY[15] += delta;
            const double temp = EvaluateYDerivative15(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[15])/delta;
            rY[15] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Jrel_SR__R = rY[16];
        // Units: dimensionless; Initial value: 0.890917121306535
        double var_chaste_interface__Jrel_SR__I = rY[17];
        // Units: dimensionless; Initial value: 8.71752603681652e-08
        double var_chaste_interface__Jrel_SR__O = rY[18];
        // Units: dimensionless; Initial value: 7.1199533741995e-07
        double var_chaste_interface__Ca_buffer__Ca_SR = rY[24];
        // Units: millimolar; Initial value: 0.547125831028543
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        


        // Mathematics
        const double var_Jrel_SR__RI = 1.0 - var_chaste_interface__Jrel_SR__I - var_chaste_interface__Jrel_SR__O - var_chaste_interface__Jrel_SR__R; // dimensionless
        const double var_Jrel_SR__kCaSR = 15.0 - 14.0 / (1.0 + 0.13584112963311223 * pow((1 / var_chaste_interface__Ca_buffer__Ca_SR), 2.5)); // dimensionless
        const double var_Jrel_SR__kiSRCa = 0.5 * var_Jrel_SR__kCaSR; // per_millimolar_per_millisecond
        const double var_Jrel_SR__koSRCa = 10.0 / var_Jrel_SR__kCaSR; // per_millimolar2_per_millisecond
        const double d_dt_chaste_interface_var_Jrel_SR__R = 0.059999999999999998 * var_chaste_interface__Jrel_SR__O + 0.0050000000000000001 * var_Jrel_SR__RI - pow(var_chaste_interface__Ca_buffer__Ca_jct, 2) * var_chaste_interface__Jrel_SR__R * var_Jrel_SR__koSRCa - var_chaste_interface__Ca_buffer__Ca_jct * var_chaste_interface__Jrel_SR__R * var_Jrel_SR__kiSRCa; // 1 / millisecond

        return d_dt_chaste_interface_var_Jrel_SR__R;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Ca_SR = rY[24];
            // Units: millimolar; Initial value: 0.547125831028543
            double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
            // Units: millimolar; Initial value: 0.000174045152623969
            


            const double var_x383 = pow(var_chaste_interface__Ca_buffer__Ca_jct, 2);
            const double var_x577 = 1 / var_chaste_interface__Ca_buffer__Ca_SR;
            const double var_x578 = pow(var_x577, 2.5);
            const double var_x579 = 1.0 + 0.13584112963311223 * var_x578;
            const double var_x580 = 1 / var_x579;
            const double var_x581 = 7.0 * var_x580;
            const double var_x582 = -7.5 + var_x581;
            const double var_x583 = var_x582 * var_chaste_interface__Ca_buffer__Ca_jct;
            const double var_x584 = 1 / (15.0 - 14.0 * var_x580);
            const double var_x585 = 10.0 * var_x383 * var_x584;
            const double var_x586 = -var_x585;
            
            partialF = -0.0050000000000000001 + var_x583 + var_x586;
        }
        else
        {
            const double y_save = rY[16];
            rY[16] += delta;
            const double temp = EvaluateYDerivative16(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[16])/delta;
            rY[16] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Jrel_SR__R = rY[16];
        // Units: dimensionless; Initial value: 0.890917121306535
        double var_chaste_interface__Jrel_SR__I = rY[17];
        // Units: dimensionless; Initial value: 8.71752603681652e-08
        double var_chaste_interface__Jrel_SR__O = rY[18];
        // Units: dimensionless; Initial value: 7.1199533741995e-07
        double var_chaste_interface__Ca_buffer__Ca_SR = rY[24];
        // Units: millimolar; Initial value: 0.547125831028543
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        


        // Mathematics
        const double var_Jrel_SR__RI = 1.0 - var_chaste_interface__Jrel_SR__I - var_chaste_interface__Jrel_SR__O - var_chaste_interface__Jrel_SR__R; // dimensionless
        const double var_Jrel_SR__kCaSR = 15.0 - 14.0 / (1.0 + 0.13584112963311223 * pow((1 / var_chaste_interface__Ca_buffer__Ca_SR), 2.5)); // dimensionless
        const double var_Jrel_SR__kiSRCa = 0.5 * var_Jrel_SR__kCaSR; // per_millimolar_per_millisecond
        const double var_Jrel_SR__koSRCa = 10.0 / var_Jrel_SR__kCaSR; // per_millimolar2_per_millisecond
        const double d_dt_chaste_interface_var_Jrel_SR__I = -0.065000000000000002 * var_chaste_interface__Jrel_SR__I + pow(var_chaste_interface__Ca_buffer__Ca_jct, 2) * var_Jrel_SR__RI * var_Jrel_SR__koSRCa + var_chaste_interface__Ca_buffer__Ca_jct * var_chaste_interface__Jrel_SR__O * var_Jrel_SR__kiSRCa; // 1 / millisecond

        return d_dt_chaste_interface_var_Jrel_SR__I;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Ca_SR = rY[24];
            // Units: millimolar; Initial value: 0.547125831028543
            double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
            // Units: millimolar; Initial value: 0.000174045152623969
            


            const double var_x383 = pow(var_chaste_interface__Ca_buffer__Ca_jct, 2);
            const double var_x577 = 1 / var_chaste_interface__Ca_buffer__Ca_SR;
            const double var_x578 = pow(var_x577, 2.5);
            const double var_x579 = 1.0 + 0.13584112963311223 * var_x578;
            const double var_x580 = 1 / var_x579;
            const double var_x584 = 1 / (15.0 - 14.0 * var_x580);
            const double var_x585 = 10.0 * var_x383 * var_x584;
            const double var_x586 = -var_x585;
            
            partialF = -0.065000000000000002 + var_x586;
        }
        else
        {
            const double y_save = rY[17];
            rY[17] += delta;
            const double temp = EvaluateYDerivative17(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[17])/delta;
            rY[17] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Jrel_SR__R = rY[16];
        // Units: dimensionless; Initial value: 0.890917121306535
        double var_chaste_interface__Jrel_SR__I = rY[17];
        // Units: dimensionless; Initial value: 8.71752603681652e-08
        double var_chaste_interface__Jrel_SR__O = rY[18];
        // Units: dimensionless; Initial value: 7.1199533741995e-07
        double var_chaste_interface__Ca_buffer__Ca_SR = rY[24];
        // Units: millimolar; Initial value: 0.547125831028543
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        


        // Mathematics
        const double var_Jrel_SR__kCaSR = 15.0 - 14.0 / (1.0 + 0.13584112963311223 * pow((1 / var_chaste_interface__Ca_buffer__Ca_SR), 2.5)); // dimensionless
        const double var_Jrel_SR__kiSRCa = 0.5 * var_Jrel_SR__kCaSR; // per_millimolar_per_millisecond
        const double var_Jrel_SR__koSRCa = 10.0 / var_Jrel_SR__kCaSR; // per_millimolar2_per_millisecond
        const double d_dt_chaste_interface_var_Jrel_SR__O = 0.0050000000000000001 * var_chaste_interface__Jrel_SR__I - 0.059999999999999998 * var_chaste_interface__Jrel_SR__O + pow(var_chaste_interface__Ca_buffer__Ca_jct, 2) * var_chaste_interface__Jrel_SR__R * var_Jrel_SR__koSRCa - var_chaste_interface__Ca_buffer__Ca_jct * var_chaste_interface__Jrel_SR__O * var_Jrel_SR__kiSRCa; // 1 / millisecond

        return d_dt_chaste_interface_var_Jrel_SR__O;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Ca_SR = rY[24];
            // Units: millimolar; Initial value: 0.547125831028543
            double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
            // Units: millimolar; Initial value: 0.000174045152623969
            


            const double var_x577 = 1 / var_chaste_interface__Ca_buffer__Ca_SR;
            const double var_x578 = pow(var_x577, 2.5);
            const double var_x579 = 1.0 + 0.13584112963311223 * var_x578;
            const double var_x580 = 1 / var_x579;
            const double var_x581 = 7.0 * var_x580;
            const double var_x582 = -7.5 + var_x581;
            const double var_x583 = var_x582 * var_chaste_interface__Ca_buffer__Ca_jct;
            
            partialF = -0.059999999999999998 + var_x583;
        }
        else
        {
            const double y_save = rY[18];
            rY[18] += delta;
            const double temp = EvaluateYDerivative18(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[18])/delta;
            rY[18] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__INa_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.98714602875678
        double var_chaste_interface__INa_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.991826348770428
        double var_chaste_interface__INa_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.0013702407736465
        double var_chaste_interface__ICaL_d_gate__d = rY[12];
        // Units: dimensionless; Initial value: 6.99526086177479e-06
        double var_chaste_interface__ICaL_f_gate__f = rY[13];
        // Units: dimensionless; Initial value: 1.00067601563206
        double var_chaste_interface__ICaL_fCa_gate__fCaB_SL = rY[14];
        // Units: dimensionless; Initial value: 0.0150193299768419
        double var_chaste_interface__Na_buffer__Na_SL = rY[19];
        // Units: millimolar; Initial value: 8.87161932058707
        double var_chaste_interface__Na_buffer__Na_jct = rY[20];
        // Units: millimolar; Initial value: 8.87031835089116
        double var_chaste_interface__Na_buffer__Na_SL_buf = rY[21];
        // Units: millimolar; Initial value: 0.77606800956492
        double var_chaste_interface__Na_buffer__Nai = rY[23];
        // Units: millimolar; Initial value: 8.87200572571131
        double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
        // Units: millimolar; Initial value: 0.000104971310105451
        


        // Mathematics
        const double var_INa__openProb = pow(var_chaste_interface__INa_m_gate__m, 3) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // dimensionless
        const double var_Na_buffer__dNa_SL_buf = -0.001 * var_chaste_interface__Na_buffer__Na_SL_buf + 0.0001 * (1.6499999999999999 - var_chaste_interface__Na_buffer__Na_SL_buf) * var_chaste_interface__Na_buffer__Na_SL; // millimolar_per_millisecond
        const double var_ion_diffusion__J_Na_SL_cytosol = 1.6385999999999999e-12 * var_chaste_interface__Na_buffer__Na_SL - 1.6385999999999999e-12 * var_chaste_interface__Na_buffer__Nai; // millimole_per_millisecond
        const double var_ion_diffusion__J_Na_jct_SL = 1.8312999999999999e-14 * var_chaste_interface__Na_buffer__Na_jct - 1.8312999999999999e-14 * var_chaste_interface__Na_buffer__Na_SL; // millimole_per_millisecond
        const double var_ICaL__i_CaL_Na_SL = ((fabs(var_chaste_interface__cell__V) < 9.9999999999999995e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (5000000.0 * (9.9999999999999995e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (6.7499999999999994e-10 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_INaCa__Q_NCX = pow(1.5700000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaCa__i_NaCa_SL = 0.89000000000000001 * (pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) * mParameters[6] * exp(0.34999999999999998 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) - pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_SL * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_INaCa__Q_NCX * mParameters[22] / ((1.0 + 0.27000000000000002 * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * (1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_SL, 3)) * (1.3 * pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) + pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) * mParameters[6] + pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_SL + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_SL) * var_chaste_interface__Ca_buffer__Ca_SL + 0.0035899999999999999 * pow(mParameters[9], 3.0) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_buffer__Na_SL, 3.0)))); // microA_per_microF
        const double var_INaK__Q_Km_Nai = pow(1.49, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaK__Q_NaK = pow(1.6299999999999999, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaK__f_NaK = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[9])) * exp(-var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))); // dimensionless
        const double var_INaK__i_NaK_SL = 1.6999 * var_INaK__Q_NaK * var_INaK__f_NaK * mParameters[8] / ((1.0 + 14641.0 * pow((var_INaK__Q_Km_Nai / var_chaste_interface__Na_buffer__Na_SL), 4.0)) * (1.5 + mParameters[8])); // microA_per_microF
        const double var_model_parameters__Cm = 4.1000000000000001e-11 * M_PI; // farad
        const double var_reversal_potentials__E_Na_SL = mParameters[11] * mParameters[23] * log(mParameters[9] / var_chaste_interface__Na_buffer__Na_SL) / mParameters[10]; // millivolt
        const double var_INa__i_Na_SL = 0.89000000000000001 * (-var_reversal_potentials__E_Na_SL + var_chaste_interface__cell__V) * mParameters[14] * var_INa__openProb; // microA_per_microF
        const double var_INab__i_Nab_SL = 0.00026433000000000001 * var_chaste_interface__cell__V - 0.00026433000000000001 * var_reversal_potentials__E_Na_SL; // microA_per_microF
        const double d_dt_chaste_interface_var_Na_buffer__Na_SL = (-var_Na_buffer__dNa_SL_buf + 1514859660403.2268 * var_ion_diffusion__J_Na_jct_SL - 1514859660403.2268 * var_ion_diffusion__J_Na_SL_cytosol - 1514859660403.2268 * (3.0 * var_INaCa__i_NaCa_SL + 3.0 * var_INaK__i_NaK_SL + var_ICaL__i_CaL_Na_SL + var_INa__i_Na_SL + var_INab__i_Nab_SL) * var_model_parameters__Cm / mParameters[10]) * mParameters[3]; // millimolar / millisecond

        return d_dt_chaste_interface_var_Na_buffer__Na_SL;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            double var_chaste_interface__INa_h_gate__h = rY[2];
            // Units: dimensionless; Initial value: 0.98714602875678
            double var_chaste_interface__INa_j_gate__j = rY[3];
            // Units: dimensionless; Initial value: 0.991826348770428
            double var_chaste_interface__INa_m_gate__m = rY[4];
            // Units: dimensionless; Initial value: 0.0013702407736465
            double var_chaste_interface__ICaL_d_gate__d = rY[12];
            // Units: dimensionless; Initial value: 6.99526086177479e-06
            double var_chaste_interface__ICaL_f_gate__f = rY[13];
            // Units: dimensionless; Initial value: 1.00067601563206
            double var_chaste_interface__ICaL_fCa_gate__fCaB_SL = rY[14];
            // Units: dimensionless; Initial value: 0.0150193299768419
            double var_chaste_interface__Na_buffer__Na_SL = rY[19];
            // Units: millimolar; Initial value: 8.87161932058707
            double var_chaste_interface__Na_buffer__Na_SL_buf = rY[21];
            // Units: millimolar; Initial value: 0.77606800956492
            double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
            // Units: millimolar; Initial value: 0.000104971310105451
            


            const double var_x0 = exp(9.9999999999999995e-8);
            const double var_x1 = 1 / (-1.0 + var_x0);
            const double var_x2 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x3 = pow(1.8, var_x2);
            const double var_x4 = var_x3 * mParameters[10];
            const double var_x5 = var_x4 * var_chaste_interface__ICaL_f_gate__f;
            const double var_x6 = var_x1 * var_x5;
            const double var_x11 = 1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL;
            const double var_x15 = exp(-9.9999999999999995e-8);
            const double var_x16 = 1 / (-1.0 + var_x15);
            const double var_x17 = var_x16 * var_x5;
            const double var_x22 = 1 / (mParameters[11] * mParameters[23]);
            const double var_x23 = var_x22 * mParameters[10];
            const double var_x57 = pow(var_chaste_interface__INa_m_gate__m, 3);
            const double var_x58 = var_x57 * mParameters[14] * var_chaste_interface__INa_j_gate__j;
            const double var_x59 = var_x58 * var_chaste_interface__INa_h_gate__h;
            const double var_x60 = 1 / mParameters[10];
            const double var_x61 = var_x60 * mParameters[11] * mParameters[23];
            const double var_x76 = 0.34999999999999998 * var_chaste_interface__cell__V;
            const double var_x77 = exp(var_x23 * var_x76);
            const double var_x82 = var_x23 * var_chaste_interface__cell__V;
            const double var_x83 = exp(-0.65000000000000002 * var_x82);
            const double var_x84 = pow(mParameters[9], 3.0);
            const double var_x90 = 0.0035899999999999999 * var_x84;
            const double var_x94 = 1.0 + 0.27000000000000002 * var_x83;
            const double var_x95 = pow(1.5700000000000001, var_x2) * mParameters[22];
            const double var_x96 = var_x95 / var_x94;
            const double var_x100 = pow(var_chaste_interface__Na_buffer__Na_SL, 3.0);
            const double var_x101 = var_x100 * mParameters[6];
            const double var_x102 = var_x101 * var_x77;
            const double var_x103 = var_x84 * var_chaste_interface__Ca_buffer__Ca_SL;
            const double var_x104 = var_x103 * var_x83;
            const double var_x105 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_SL) * var_chaste_interface__Ca_buffer__Ca_SL;
            const double var_x106 = 1.0 + 0.00053869674493876331 * var_x100;
            const double var_x107 = 1 / (var_x101 + var_x103 + 669921.875 * var_x105 + 1.3 * var_x100 + var_x106 * var_x90);
            const double var_x108 = 1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_SL, 3);
            const double var_x109 = 1 / var_x108;
            const double var_x110 = var_x109 * var_x96;
            const double var_x111 = var_x107 * var_x110;
            const double var_x114 = pow(1.49, (-124.0 + 0.40000000000000002 * mParameters[23]));
            const double var_x117 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x118 = exp(-var_x117 * var_x23);
            const double var_x119 = exp(0.01485884101040119 * mParameters[9]);
            const double var_x120 = exp(-var_x82);
            const double var_x121 = 1.0 + 0.1245 * var_x118 + 0.036499999999999998 * var_x120 * (-0.14285714285714285 + 0.14285714285714285 * var_x119);
            const double var_x122 = pow(1.6299999999999999, var_x2) * mParameters[8] / (1.5 + mParameters[8]);
            const double var_x125 = 1 / var_chaste_interface__Na_buffer__Na_SL;
            const double var_x126 = var_x114 * pow(var_x125, 4.0);
            const double var_x128 = var_x102 - var_x104;
            const double var_x146 = 5000000.0 * var_x23;
            const double var_x168 = fabs(var_chaste_interface__cell__V);
            const double var_x169 = fabs(var_x61);
            const double var_x171 = var_x168 < 9.9999999999999995e-8 * var_x169;
            const double var_x173 = var_x11 * var_chaste_interface__ICaL_d_gate__d;
            const double var_x174 = var_x22 * pow(mParameters[10], 2);
            const double var_x175 = var_x173 * var_x174;
            const double var_x176 = var_x3 * var_chaste_interface__ICaL_f_gate__f;
            const double var_x201 = exp(var_x82);
            const double var_x203 = -1.0 + var_x201;
            const double var_x204 = 1 / var_x203;
            const double var_x205 = var_x176 * var_x204;
            const double var_x206 = var_x175 * var_x205;
            const double var_x221 = var_x201 * var_chaste_interface__cell__V;
            const double var_x226 = 5.0624999999999998e-10 * var_x221;
            const double var_x249 = var_x146 * (9.9999999999999995e-8 * var_x61 + var_chaste_interface__cell__V);
            const double var_x321 = 5.0624999999999997e-17 * var_x173;
            const double var_x322 = var_x15 * var_x17;
            const double var_x323 = var_x321 * var_x322;
            const double var_x324 = var_x0 * var_x6;
            const double var_x325 = var_x249 * (var_x323 + var_x321 * var_x324);
            const double var_x326 = var_x125 * var_x61;
            const double var_x327 = 0.00026433000000000001 * var_x326;
            const double var_x328 = pow(var_chaste_interface__Na_buffer__Na_SL, 2.0);
            const double var_x329 = 3.0 * mParameters[6];
            const double var_x330 = 5.8017639429904805e-6 * var_x84;
            const double var_x331 = -3.9000000000000004 * var_x328 - var_x328 * var_x329 - var_x328 * var_x330;
            const double var_x332 = 5.3588338192419823e-9 * var_x84;
            const double var_x333 = var_x110 * var_x128 / pow((var_x105 + 1.9405247813411081e-6 * var_x100 + 1.4927113702623908e-6 * var_x101 + 1.4927113702623908e-6 * var_x103 + var_x106 * var_x332), 2);
            const double var_x335 = 0.89000000000000001 * var_x59;
            const double var_x336 = var_x326 * var_x335;
            const double var_x337 = var_x77 * mParameters[6];
            const double var_x338 = var_x111 * var_x328 * var_x337;
            const double var_x339 = var_x122 / var_x121;
            const double var_x340 = var_x125 * var_x126 * var_x339 / pow((6.8301345536507063e-5 + var_x126), 2);
            const double var_x343 = var_x206 * var_x226;
            const double var_x597 = M_PI * var_x60;
            const double var_x598 = 62.109246076532294 * var_x597;
            const double var_x604 = 0.0001 * var_chaste_interface__Na_buffer__Na_SL_buf;
            const double var_x605 = 5.9492599172113663e-12 * var_x333;
            
            partialF = (-2.5101556644976917 + var_x604 - var_x598 * (var_x327 + var_x336 + 8.0099999999999998 * var_x338 + 0.0013932654873301004 * var_x340 + var_x331 * var_x605 + ((var_x171) ? (var_x325 - var_x323) : (var_x343)))) * mParameters[3];
        }
        else
        {
            const double y_save = rY[19];
            rY[19] += delta;
            const double temp = EvaluateYDerivative19(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[19])/delta;
            rY[19] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__INa_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.98714602875678
        double var_chaste_interface__INa_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.991826348770428
        double var_chaste_interface__INa_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.0013702407736465
        double var_chaste_interface__ICaL_d_gate__d = rY[12];
        // Units: dimensionless; Initial value: 6.99526086177479e-06
        double var_chaste_interface__ICaL_f_gate__f = rY[13];
        // Units: dimensionless; Initial value: 1.00067601563206
        double var_chaste_interface__ICaL_fCa_gate__fCaB_jct = rY[15];
        // Units: dimensionless; Initial value: 0.0244048782575591
        double var_chaste_interface__Na_buffer__Na_SL = rY[19];
        // Units: millimolar; Initial value: 8.87161932058707
        double var_chaste_interface__Na_buffer__Na_jct = rY[20];
        // Units: millimolar; Initial value: 8.87031835089116
        double var_chaste_interface__Na_buffer__Na_jct_buf = rY[22];
        // Units: millimolar; Initial value: 3.55668431730337
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        


        // Mathematics
        const double var_INa__openProb = pow(var_chaste_interface__INa_m_gate__m, 3) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // dimensionless
        const double var_Na_buffer__dNa_jct_buf = -0.001 * var_chaste_interface__Na_buffer__Na_jct_buf + 0.0001 * (7.5609999999999999 - var_chaste_interface__Na_buffer__Na_jct_buf) * var_chaste_interface__Na_buffer__Na_jct; // millimolar_per_millisecond
        const double var_ion_diffusion__J_Na_jct_SL = 1.8312999999999999e-14 * var_chaste_interface__Na_buffer__Na_jct - 1.8312999999999999e-14 * var_chaste_interface__Na_buffer__Na_SL; // millimole_per_millisecond
        const double var_ICaL__i_CaL_Na_jct = ((fabs(var_chaste_interface__cell__V) < 9.9999999999999995e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (5000000.0 * (9.9999999999999995e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (6.0749999999999998e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_INaCa__Q_NCX = pow(1.5700000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaCa__i_NaCa_jct = 0.11 * (pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) * mParameters[6] * exp(0.34999999999999998 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) - pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_jct * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_INaCa__Q_NCX * mParameters[22] / ((1.0 + 0.27000000000000002 * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * (1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_jct, 3)) * (1.3 * pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) + pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) * mParameters[6] + pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_jct + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_jct) * var_chaste_interface__Ca_buffer__Ca_jct + 0.0035899999999999999 * pow(mParameters[9], 3.0) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_buffer__Na_jct, 3.0)))); // microA_per_microF
        const double var_INaK__Q_Km_Nai = pow(1.49, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaK__Q_NaK = pow(1.6299999999999999, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaK__f_NaK = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[9])) * exp(-var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))); // dimensionless
        const double var_INaK__i_NaK_jct = 0.21009999999999998 * var_INaK__Q_NaK * var_INaK__f_NaK * mParameters[8] / ((1.0 + 14641.0 * pow((var_INaK__Q_Km_Nai / var_chaste_interface__Na_buffer__Na_jct), 4.0)) * (1.5 + mParameters[8])); // microA_per_microF
        const double var_model_parameters__Cm = 4.1000000000000001e-11 * M_PI; // farad
        const double var_reversal_potentials__E_Na_jct = mParameters[11] * mParameters[23] * log(mParameters[9] / var_chaste_interface__Na_buffer__Na_jct) / mParameters[10]; // millivolt
        const double var_INa__i_Na_jct = 0.11 * (-var_reversal_potentials__E_Na_jct + var_chaste_interface__cell__V) * mParameters[14] * var_INa__openProb; // microA_per_microF
        const double var_INab__i_Nab_jct = 3.2670000000000004e-5 * var_chaste_interface__cell__V - 3.2670000000000004e-5 * var_reversal_potentials__E_Na_jct; // microA_per_microF
        const double d_dt_chaste_interface_var_Na_buffer__Na_jct = (-var_Na_buffer__dNa_jct_buf - 59406261192283.398 * var_ion_diffusion__J_Na_jct_SL - 59406261192283.398 * (3.0 * var_INaCa__i_NaCa_jct + 3.0 * var_INaK__i_NaK_jct + var_ICaL__i_CaL_Na_jct + var_INa__i_Na_jct + var_INab__i_Nab_jct) * var_model_parameters__Cm / mParameters[10]) * mParameters[3]; // millimolar / millisecond

        return d_dt_chaste_interface_var_Na_buffer__Na_jct;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            double var_chaste_interface__INa_h_gate__h = rY[2];
            // Units: dimensionless; Initial value: 0.98714602875678
            double var_chaste_interface__INa_j_gate__j = rY[3];
            // Units: dimensionless; Initial value: 0.991826348770428
            double var_chaste_interface__INa_m_gate__m = rY[4];
            // Units: dimensionless; Initial value: 0.0013702407736465
            double var_chaste_interface__ICaL_d_gate__d = rY[12];
            // Units: dimensionless; Initial value: 6.99526086177479e-06
            double var_chaste_interface__ICaL_f_gate__f = rY[13];
            // Units: dimensionless; Initial value: 1.00067601563206
            double var_chaste_interface__ICaL_fCa_gate__fCaB_jct = rY[15];
            // Units: dimensionless; Initial value: 0.0244048782575591
            double var_chaste_interface__Na_buffer__Na_jct = rY[20];
            // Units: millimolar; Initial value: 8.87031835089116
            double var_chaste_interface__Na_buffer__Na_jct_buf = rY[22];
            // Units: millimolar; Initial value: 3.55668431730337
            double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
            // Units: millimolar; Initial value: 0.000174045152623969
            


            const double var_x0 = exp(9.9999999999999995e-8);
            const double var_x1 = 1 / (-1.0 + var_x0);
            const double var_x2 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x3 = pow(1.8, var_x2);
            const double var_x4 = var_x3 * mParameters[10];
            const double var_x5 = var_x4 * var_chaste_interface__ICaL_f_gate__f;
            const double var_x6 = var_x1 * var_x5;
            const double var_x15 = exp(-9.9999999999999995e-8);
            const double var_x16 = 1 / (-1.0 + var_x15);
            const double var_x17 = var_x16 * var_x5;
            const double var_x22 = 1 / (mParameters[11] * mParameters[23]);
            const double var_x23 = var_x22 * mParameters[10];
            const double var_x28 = 1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct;
            const double var_x57 = pow(var_chaste_interface__INa_m_gate__m, 3);
            const double var_x58 = var_x57 * mParameters[14] * var_chaste_interface__INa_j_gate__j;
            const double var_x59 = var_x58 * var_chaste_interface__INa_h_gate__h;
            const double var_x60 = 1 / mParameters[10];
            const double var_x61 = var_x60 * mParameters[11] * mParameters[23];
            const double var_x76 = 0.34999999999999998 * var_chaste_interface__cell__V;
            const double var_x77 = exp(var_x23 * var_x76);
            const double var_x78 = pow(var_chaste_interface__Na_buffer__Na_jct, 3.0);
            const double var_x79 = var_x78 * mParameters[6];
            const double var_x80 = var_x77 * var_x79;
            const double var_x82 = var_x23 * var_chaste_interface__cell__V;
            const double var_x83 = exp(-0.65000000000000002 * var_x82);
            const double var_x84 = pow(mParameters[9], 3.0);
            const double var_x85 = var_x84 * var_chaste_interface__Ca_buffer__Ca_jct;
            const double var_x86 = var_x83 * var_x85;
            const double var_x88 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_jct) * var_chaste_interface__Ca_buffer__Ca_jct;
            const double var_x89 = 1.0 + 0.00053869674493876331 * var_x78;
            const double var_x90 = 0.0035899999999999999 * var_x84;
            const double var_x91 = 1 / (var_x79 + var_x85 + 669921.875 * var_x88 + 1.3 * var_x78 + var_x89 * var_x90);
            const double var_x92 = 1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_jct, 3);
            const double var_x93 = 1 / var_x92;
            const double var_x94 = 1.0 + 0.27000000000000002 * var_x83;
            const double var_x95 = pow(1.5700000000000001, var_x2) * mParameters[22];
            const double var_x96 = var_x95 / var_x94;
            const double var_x97 = var_x93 * var_x96;
            const double var_x98 = var_x91 * var_x97;
            const double var_x114 = pow(1.49, (-124.0 + 0.40000000000000002 * mParameters[23]));
            const double var_x115 = 1 / var_chaste_interface__Na_buffer__Na_jct;
            const double var_x116 = var_x114 * pow(var_x115, 4.0);
            const double var_x117 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x118 = exp(-var_x117 * var_x23);
            const double var_x119 = exp(0.01485884101040119 * mParameters[9]);
            const double var_x120 = exp(-var_x82);
            const double var_x121 = 1.0 + 0.1245 * var_x118 + 0.036499999999999998 * var_x120 * (-0.14285714285714285 + 0.14285714285714285 * var_x119);
            const double var_x122 = pow(1.6299999999999999, var_x2) * mParameters[8] / (1.5 + mParameters[8]);
            const double var_x132 = var_x80 - var_x86;
            const double var_x146 = 5000000.0 * var_x23;
            const double var_x168 = fabs(var_chaste_interface__cell__V);
            const double var_x169 = fabs(var_x61);
            const double var_x171 = var_x168 < 9.9999999999999995e-8 * var_x169;
            const double var_x174 = var_x22 * pow(mParameters[10], 2);
            const double var_x176 = var_x3 * var_chaste_interface__ICaL_f_gate__f;
            const double var_x185 = var_x28 * var_chaste_interface__ICaL_d_gate__d;
            const double var_x201 = exp(var_x82);
            const double var_x203 = -1.0 + var_x201;
            const double var_x204 = 1 / var_x203;
            const double var_x205 = var_x176 * var_x204;
            const double var_x209 = var_x174 * var_x205;
            const double var_x214 = var_x185 * var_x209;
            const double var_x221 = var_x201 * var_chaste_interface__cell__V;
            const double var_x228 = 4.5562499999999999e-9 * var_x221;
            const double var_x249 = var_x146 * (9.9999999999999995e-8 * var_x61 + var_chaste_interface__cell__V);
            const double var_x322 = var_x15 * var_x17;
            const double var_x324 = var_x0 * var_x6;
            const double var_x329 = 3.0 * mParameters[6];
            const double var_x330 = 5.8017639429904805e-6 * var_x84;
            const double var_x332 = 5.3588338192419823e-9 * var_x84;
            const double var_x337 = var_x77 * mParameters[6];
            const double var_x339 = var_x122 / var_x121;
            const double var_x344 = 4.5562499999999998e-16 * var_x185;
            const double var_x345 = var_x322 * var_x344;
            const double var_x346 = var_x249 * (var_x345 + var_x324 * var_x344);
            const double var_x347 = var_x115 * var_x61;
            const double var_x348 = 3.2670000000000004e-5 * var_x347;
            const double var_x349 = pow(var_chaste_interface__Na_buffer__Na_jct, 2.0);
            const double var_x350 = -3.9000000000000004 * var_x349 - var_x329 * var_x349 - var_x330 * var_x349;
            const double var_x351 = var_x132 * var_x97 / pow((var_x88 + 1.9405247813411081e-6 * var_x78 + 1.4927113702623908e-6 * var_x79 + 1.4927113702623908e-6 * var_x85 + var_x332 * var_x89), 2);
            const double var_x353 = 0.11 * var_x59;
            const double var_x354 = var_x347 * var_x353;
            const double var_x355 = var_x337 * var_x349 * var_x98;
            const double var_x356 = var_x115 * var_x116 * var_x339 / pow((6.8301345536507063e-5 + var_x116), 2);
            const double var_x358 = var_x214 * var_x228;
            const double var_x597 = M_PI * var_x60;
            const double var_x607 = 2435.6567088836191 * var_x597;
            const double var_x610 = 0.0001 * var_chaste_interface__Na_buffer__Na_jct_buf;
            const double var_x611 = 7.3530178752050587e-13 * var_x351;
            
            partialF = (-1.0886629612142857 + var_x610 - var_x607 * (var_x348 + var_x354 + 0.98999999999999999 * var_x355 + 0.00017220135236664162 * var_x356 + var_x350 * var_x611 + ((var_x171) ? (var_x346 - var_x345) : (var_x358)))) * mParameters[3];
        }
        else
        {
            const double y_save = rY[20];
            rY[20] += delta;
            const double temp = EvaluateYDerivative20(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[20])/delta;
            rY[20] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Na_buffer__Na_SL = rY[19];
        // Units: millimolar; Initial value: 8.87161932058707
        double var_chaste_interface__Na_buffer__Na_SL_buf = rY[21];
        // Units: millimolar; Initial value: 0.77606800956492
        


        // Mathematics
        const double var_Na_buffer__dNa_SL_buf = -0.001 * var_chaste_interface__Na_buffer__Na_SL_buf + 0.0001 * (1.6499999999999999 - var_chaste_interface__Na_buffer__Na_SL_buf) * var_chaste_interface__Na_buffer__Na_SL; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Na_buffer__Na_SL_buf = var_Na_buffer__dNa_SL_buf; // millimolar / millisecond

        return d_dt_chaste_interface_var_Na_buffer__Na_SL_buf;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Na_buffer__Na_SL = rY[19];
            // Units: millimolar; Initial value: 8.87161932058707
            


            const double var_x606 = 0.0001 * var_chaste_interface__Na_buffer__Na_SL;
            
            partialF = -0.001 - var_x606;
        }
        else
        {
            const double y_save = rY[21];
            rY[21] += delta;
            const double temp = EvaluateYDerivative21(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[21])/delta;
            rY[21] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Na_buffer__Na_jct = rY[20];
        // Units: millimolar; Initial value: 8.87031835089116
        double var_chaste_interface__Na_buffer__Na_jct_buf = rY[22];
        // Units: millimolar; Initial value: 3.55668431730337
        


        // Mathematics
        const double var_Na_buffer__dNa_jct_buf = -0.001 * var_chaste_interface__Na_buffer__Na_jct_buf + 0.0001 * (7.5609999999999999 - var_chaste_interface__Na_buffer__Na_jct_buf) * var_chaste_interface__Na_buffer__Na_jct; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Na_buffer__Na_jct_buf = var_Na_buffer__dNa_jct_buf; // millimolar / millisecond

        return d_dt_chaste_interface_var_Na_buffer__Na_jct_buf;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Na_buffer__Na_jct = rY[20];
            // Units: millimolar; Initial value: 8.87031835089116
            


            const double var_x612 = 0.0001 * var_chaste_interface__Na_buffer__Na_jct;
            
            partialF = -0.001 - var_x612;
        }
        else
        {
            const double y_save = rY[22];
            rY[22] += delta;
            const double temp = EvaluateYDerivative22(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[22])/delta;
            rY[22] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Na_buffer__Na_SL = rY[19];
        // Units: millimolar; Initial value: 8.87161932058707
        double var_chaste_interface__Na_buffer__Nai = rY[23];
        // Units: millimolar; Initial value: 8.87200572571131
        


        // Mathematics
        const double var_ion_diffusion__J_Na_SL_cytosol = 1.6385999999999999e-12 * var_chaste_interface__Na_buffer__Na_SL - 1.6385999999999999e-12 * var_chaste_interface__Na_buffer__Nai; // millimole_per_millisecond
        const double d_dt_chaste_interface_var_Na_buffer__Nai = 46611066473.945435 * mParameters[3] * var_ion_diffusion__J_Na_SL_cytosol; // millimolar / millisecond

        return d_dt_chaste_interface_var_Na_buffer__Nai;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            const double var_x613 = 0.076376893524206985 * mParameters[3];
            
            partialF = -var_x613;
        }
        else
        {
            const double y_save = rY[23];
            rY[23] += delta;
            const double temp = EvaluateYDerivative23(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[23])/delta;
            rY[23] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Cai = rY[1];
        // Units: millimolar; Initial value: 8.6504944644883e-05
        double var_chaste_interface__Jrel_SR__O = rY[18];
        // Units: dimensionless; Initial value: 7.1199533741995e-07
        double var_chaste_interface__Ca_buffer__Ca_SR = rY[24];
        // Units: millimolar; Initial value: 0.547125831028543
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        double var_chaste_interface__Ca_buffer__Ca_Calsequestrin = rY[31];
        // Units: millimolar; Initial value: 1.18828527890062
        


        // Mathematics
        const double var_Jleak_SR__j_leak_SR = (-var_chaste_interface__Ca_buffer__Ca_jct + var_chaste_interface__Ca_buffer__Ca_SR) * mParameters[0]; // millimolar_per_millisecond
        const double var_Jrel_SR__j_rel_SR = (-var_chaste_interface__Ca_buffer__Ca_jct + var_chaste_interface__Ca_buffer__Ca_SR) * var_chaste_interface__Jrel_SR__O * mParameters[1]; // millimolar_per_millisecond
        const double var_Ca_buffer__dCalsequestrin = -65.0 * var_chaste_interface__Ca_buffer__Ca_Calsequestrin + 100.0 * (2.6000000000000001 - var_chaste_interface__Ca_buffer__Ca_Calsequestrin) * var_chaste_interface__Ca_buffer__Ca_SR; // millimolar_per_millisecond
        const double var_Jpump_SR__j_pump_SR = 18.571428571428569 * pow(2.6000000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])) * (2814485.1633595936 * pow(var_chaste_interface__Ca_buffer__Cai, 1.7869999999999999) - 0.38742512113256738 * pow(var_chaste_interface__Ca_buffer__Ca_SR, 1.7869999999999999)) * mParameters[2] / (1.0 + 0.38742512113256738 * pow(var_chaste_interface__Ca_buffer__Ca_SR, 1.7869999999999999) + 2814485.1633595936 * pow(var_chaste_interface__Ca_buffer__Cai, 1.7869999999999999)); // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_buffer__Ca_SR = -var_Ca_buffer__dCalsequestrin - var_Jrel_SR__j_rel_SR - 18.571428571428569 * var_Jleak_SR__j_leak_SR + var_Jpump_SR__j_pump_SR; // millimolar / millisecond

        return d_dt_chaste_interface_var_Ca_buffer__Ca_SR;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Cai = rY[1];
            // Units: millimolar; Initial value: 8.6504944644883e-05
            double var_chaste_interface__Jrel_SR__O = rY[18];
            // Units: dimensionless; Initial value: 7.1199533741995e-07
            double var_chaste_interface__Ca_buffer__Ca_SR = rY[24];
            // Units: millimolar; Initial value: 0.547125831028543
            double var_chaste_interface__Ca_buffer__Ca_Calsequestrin = rY[31];
            // Units: millimolar; Initial value: 1.18828527890062
            


            const double var_x2 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x402 = pow(var_chaste_interface__Ca_buffer__Ca_SR, 1.7869999999999999);
            const double var_x403 = 0.38742512113256738 * var_x402;
            const double var_x404 = pow(var_chaste_interface__Ca_buffer__Cai, 1.7869999999999999);
            const double var_x405 = 2814485.1633595936 * var_x404;
            const double var_x406 = pow(2.6000000000000001, var_x2) * mParameters[2];
            const double var_x407 = var_x406 / (1.0 + var_x403 + var_x405);
            const double var_x409 = var_x406 * (var_x405 - var_x403) / pow((3.5530476870814998e-7 + var_x404 + 1.3765399305573384e-7 * var_x402), 2);
            const double var_x411 = pow(var_chaste_interface__Ca_buffer__Ca_SR, 0.78699999999999992);
            const double var_x412 = var_x407 * var_x411;
            const double var_x413 = var_x409 * var_x411;
            const double var_x614 = 100.0 * var_chaste_interface__Ca_buffer__Ca_Calsequestrin;
            const double var_x615 = 18.571428571428569 * mParameters[0];
            const double var_x616 = var_chaste_interface__Jrel_SR__O * mParameters[1];
            
            partialF = -260.0 + var_x614 - var_x615 - var_x616 - 1.6231539579137989e-12 * var_x413 - 12.857532841472388 * var_x412;
        }
        else
        {
            const double y_save = rY[24];
            rY[24] += delta;
            const double temp = EvaluateYDerivative24(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[24])/delta;
            rY[24] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__Ca_buffer__Cai = rY[1];
        // Units: millimolar; Initial value: 8.6504944644883e-05
        double var_chaste_interface__ICaL_d_gate__d = rY[12];
        // Units: dimensionless; Initial value: 6.99526086177479e-06
        double var_chaste_interface__ICaL_f_gate__f = rY[13];
        // Units: dimensionless; Initial value: 1.00067601563206
        double var_chaste_interface__ICaL_fCa_gate__fCaB_SL = rY[14];
        // Units: dimensionless; Initial value: 0.0150193299768419
        double var_chaste_interface__Na_buffer__Na_SL = rY[19];
        // Units: millimolar; Initial value: 8.87161932058707
        double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
        // Units: millimolar; Initial value: 0.000104971310105451
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        double var_chaste_interface__Ca_buffer__Ca_SLB_SL = rY[27];
        // Units: millimolar; Initial value: 0.00973710481246467
        double var_chaste_interface__Ca_buffer__Ca_SLHigh_SL = rY[29];
        // Units: millimolar; Initial value: 0.113168405274355
        


        // Mathematics
        const double var_ion_diffusion__J_Ca_SL_cytosol = 3.7243000000000002e-12 * var_chaste_interface__Ca_buffer__Ca_SL - 3.7243000000000002e-12 * var_chaste_interface__Ca_buffer__Cai; // millimole_per_millisecond
        const double var_ion_diffusion__J_Ca_jct_SL = 8.2413000000000004e-13 * var_chaste_interface__Ca_buffer__Ca_jct - 8.2413000000000004e-13 * var_chaste_interface__Ca_buffer__Ca_SL; // millimole_per_millisecond
        const double var_ICaL__i_CaL_Ca_SL = ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (10000000.0 * (4.9999999999999998e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (0.18000000000000002 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICap__Q_SLCaP = pow(2.3500000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_ICap__i_Cap_SL = 0.059896999999999999 * var_ICap__Q_SLCaP / (1.0 + 5.2281977629563632e-6 * pow((1 / var_chaste_interface__Ca_buffer__Ca_SL), 1.6000000000000001)); // microA_per_microF
        const double var_INaCa__Q_NCX = pow(1.5700000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaCa__i_NaCa_SL = 0.89000000000000001 * (pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) * mParameters[6] * exp(0.34999999999999998 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) - pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_SL * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_INaCa__Q_NCX * mParameters[22] / ((1.0 + 0.27000000000000002 * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * (1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_SL, 3)) * (1.3 * pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) + pow(var_chaste_interface__Na_buffer__Na_SL, 3.0) * mParameters[6] + pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_SL + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_SL) * var_chaste_interface__Ca_buffer__Ca_SL + 0.0035899999999999999 * pow(mParameters[9], 3.0) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_buffer__Na_SL, 3.0)))); // microA_per_microF
        const double var_model_parameters__Cm = 4.1000000000000001e-11 * M_PI; // farad
        const double var_Ca_buffer__dCa_SLB_SL = -1.3 * var_chaste_interface__Ca_buffer__Ca_SLB_SL + 100.0 * (1.2155 - var_chaste_interface__Ca_buffer__Ca_SLB_SL) * var_chaste_interface__Ca_buffer__Ca_SL; // millimolar_per_millisecond
        const double var_Ca_buffer__dCa_SLHigh_SL = -0.029999999999999999 * var_chaste_interface__Ca_buffer__Ca_SLHigh_SL + 100.0 * (0.4355 - var_chaste_interface__Ca_buffer__Ca_SLHigh_SL) * var_chaste_interface__Ca_buffer__Ca_SL; // millimolar_per_millisecond
        const double var_ICab__i_Cab_SL = 0.00022365699999999999 * var_chaste_interface__cell__V - 0.00011182849999999999 * mParameters[11] * mParameters[23] * log(mParameters[6] / var_chaste_interface__Ca_buffer__Ca_SL) / mParameters[10]; // microA_per_microF
        const double d_dt_chaste_interface_var_Ca_buffer__Ca_SL = 1514859660403.2268 * var_ion_diffusion__J_Ca_jct_SL - var_Ca_buffer__dCa_SLB_SL - var_Ca_buffer__dCa_SLHigh_SL - 1514859660403.2268 * var_ion_diffusion__J_Ca_SL_cytosol - 757429830201.6134 * (-2.0 * var_INaCa__i_NaCa_SL + var_ICaL__i_CaL_Ca_SL + var_ICab__i_Cab_SL + var_ICap__i_Cap_SL) * var_model_parameters__Cm / mParameters[10]; // millimolar / millisecond

        return d_dt_chaste_interface_var_Ca_buffer__Ca_SL;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            double var_chaste_interface__ICaL_d_gate__d = rY[12];
            // Units: dimensionless; Initial value: 6.99526086177479e-06
            double var_chaste_interface__ICaL_f_gate__f = rY[13];
            // Units: dimensionless; Initial value: 1.00067601563206
            double var_chaste_interface__ICaL_fCa_gate__fCaB_SL = rY[14];
            // Units: dimensionless; Initial value: 0.0150193299768419
            double var_chaste_interface__Na_buffer__Na_SL = rY[19];
            // Units: millimolar; Initial value: 8.87161932058707
            double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
            // Units: millimolar; Initial value: 0.000104971310105451
            double var_chaste_interface__Ca_buffer__Ca_SLB_SL = rY[27];
            // Units: millimolar; Initial value: 0.00973710481246467
            double var_chaste_interface__Ca_buffer__Ca_SLHigh_SL = rY[29];
            // Units: millimolar; Initial value: 0.113168405274355
            


            const double var_x0 = exp(9.9999999999999995e-8);
            const double var_x1 = 1 / (-1.0 + var_x0);
            const double var_x2 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x3 = pow(1.8, var_x2);
            const double var_x4 = var_x3 * mParameters[10];
            const double var_x5 = var_x4 * var_chaste_interface__ICaL_f_gate__f;
            const double var_x6 = var_x1 * var_x5;
            const double var_x7 = var_x6 * mParameters[12];
            const double var_x11 = 1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL;
            const double var_x15 = exp(-9.9999999999999995e-8);
            const double var_x16 = 1 / (-1.0 + var_x15);
            const double var_x17 = var_x16 * var_x5;
            const double var_x18 = var_x17 * mParameters[12];
            const double var_x22 = 1 / (mParameters[11] * mParameters[23]);
            const double var_x23 = var_x22 * mParameters[10];
            const double var_x24 = 10000000.0 * var_x23;
            const double var_x38 = 1 / var_chaste_interface__Ca_buffer__Ca_SL;
            const double var_x60 = 1 / mParameters[10];
            const double var_x61 = var_x60 * mParameters[11] * mParameters[23];
            const double var_x76 = 0.34999999999999998 * var_chaste_interface__cell__V;
            const double var_x77 = exp(var_x23 * var_x76);
            const double var_x82 = var_x23 * var_chaste_interface__cell__V;
            const double var_x83 = exp(-0.65000000000000002 * var_x82);
            const double var_x84 = pow(mParameters[9], 3.0);
            const double var_x90 = 0.0035899999999999999 * var_x84;
            const double var_x94 = 1.0 + 0.27000000000000002 * var_x83;
            const double var_x95 = pow(1.5700000000000001, var_x2) * mParameters[22];
            const double var_x96 = var_x95 / var_x94;
            const double var_x100 = pow(var_chaste_interface__Na_buffer__Na_SL, 3.0);
            const double var_x101 = var_x100 * mParameters[6];
            const double var_x102 = var_x101 * var_x77;
            const double var_x103 = var_x84 * var_chaste_interface__Ca_buffer__Ca_SL;
            const double var_x104 = var_x103 * var_x83;
            const double var_x105 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_SL) * var_chaste_interface__Ca_buffer__Ca_SL;
            const double var_x106 = 1.0 + 0.00053869674493876331 * var_x100;
            const double var_x107 = 1 / (var_x101 + var_x103 + 669921.875 * var_x105 + 1.3 * var_x100 + var_x106 * var_x90);
            const double var_x108 = 1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_SL, 3);
            const double var_x109 = 1 / var_x108;
            const double var_x110 = var_x109 * var_x96;
            const double var_x111 = var_x107 * var_x110;
            const double var_x128 = var_x102 - var_x104;
            const double var_x129 = var_x107 * var_x128;
            const double var_x168 = fabs(var_chaste_interface__cell__V);
            const double var_x169 = fabs(var_x61);
            const double var_x170 = var_x168 < 4.9999999999999998e-8 * var_x169;
            const double var_x173 = var_x11 * var_chaste_interface__ICaL_d_gate__d;
            const double var_x174 = var_x22 * pow(mParameters[10], 2);
            const double var_x175 = var_x173 * var_x174;
            const double var_x176 = var_x3 * var_chaste_interface__ICaL_f_gate__f;
            const double var_x177 = exp(2.0 * var_x82);
            const double var_x178 = -1.0 + var_x177;
            const double var_x179 = mParameters[12] / var_x178;
            const double var_x180 = var_x176 * var_x179;
            const double var_x181 = var_x175 * var_x180;
            const double var_x192 = var_x177 * var_chaste_interface__cell__V;
            const double var_x245 = var_x24 * (4.9999999999999998e-8 * var_x61 + var_chaste_interface__cell__V);
            const double var_x332 = 5.3588338192419823e-9 * var_x84;
            const double var_x333 = var_x110 * var_x128 / pow((var_x105 + 1.9405247813411081e-6 * var_x100 + 1.4927113702623908e-6 * var_x101 + 1.4927113702623908e-6 * var_x103 + var_x106 * var_x332), 2);
            const double var_x360 = 3.0690000000000005e-9 * var_x173;
            const double var_x361 = var_x15 * var_x18;
            const double var_x362 = var_x360 * var_x361;
            const double var_x363 = var_x0 * var_x7;
            const double var_x364 = var_x245 * (var_x362 + var_x360 * var_x363);
            const double var_x366 = pow(2.3500000000000001, var_x2);
            const double var_x367 = pow(var_x38, 1.6000000000000001);
            const double var_x368 = 5.0104537825247566e-7 * var_x366 * var_x367 * var_x38 / pow((1.0 + 5.2281977629563632e-6 * var_x367), 2);
            const double var_x369 = 0.00011182849999999999 * var_x38 * var_x61;
            const double var_x370 = var_x83 * var_x84;
            const double var_x371 = var_x111 * var_x370;
            const double var_x373 = var_x129 * var_x96 / (pow(var_x108, 2) * pow(var_chaste_interface__Ca_buffer__Ca_SL, 4));
            const double var_x374 = -669921.875 - var_x84;
            const double var_x375 = var_x374 - 373215529.24791086 * var_chaste_interface__Ca_buffer__Ca_SL;
            const double var_x378 = 0.061380000000000011 * var_x181 * var_x192;
            const double var_x597 = M_PI * var_x60;
            const double var_x618 = 31.054623038266147 * var_x597;
            const double var_x619 = 3.9661732781409111e-12 * var_x333;
            const double var_x620 = 100.0 * var_chaste_interface__Ca_buffer__Ca_SLB_SL;
            const double var_x621 = 100.0 * var_chaste_interface__Ca_buffer__Ca_SLHigh_SL;
            
            partialF = -171.99023312516786 + var_x620 + var_x621 - var_x618 * (var_x368 + var_x369 + 1.78 * var_x371 - 8.9590333439999989e-11 * var_x373 - var_x375 * var_x619 + ((var_x170) ? (var_x364 - var_x362) : (var_x378)));
        }
        else
        {
            const double y_save = rY[25];
            rY[25] += delta;
            const double temp = EvaluateYDerivative25(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[25])/delta;
            rY[25] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__ICaL_d_gate__d = rY[12];
        // Units: dimensionless; Initial value: 6.99526086177479e-06
        double var_chaste_interface__ICaL_f_gate__f = rY[13];
        // Units: dimensionless; Initial value: 1.00067601563206
        double var_chaste_interface__ICaL_fCa_gate__fCaB_jct = rY[15];
        // Units: dimensionless; Initial value: 0.0244048782575591
        double var_chaste_interface__Jrel_SR__O = rY[18];
        // Units: dimensionless; Initial value: 7.1199533741995e-07
        double var_chaste_interface__Na_buffer__Na_jct = rY[20];
        // Units: millimolar; Initial value: 8.87031835089116
        double var_chaste_interface__Ca_buffer__Ca_SR = rY[24];
        // Units: millimolar; Initial value: 0.547125831028543
        double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
        // Units: millimolar; Initial value: 0.000104971310105451
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        double var_chaste_interface__Ca_buffer__Ca_SLB_jct = rY[28];
        // Units: millimolar; Initial value: 0.00774564218017916
        double var_chaste_interface__Ca_buffer__Ca_SLHigh_jct = rY[30];
        // Units: millimolar; Initial value: 0.0772568134367606
        


        // Mathematics
        const double var_Jleak_SR__j_leak_SR = (-var_chaste_interface__Ca_buffer__Ca_jct + var_chaste_interface__Ca_buffer__Ca_SR) * mParameters[0]; // millimolar_per_millisecond
        const double var_Jrel_SR__j_rel_SR = (-var_chaste_interface__Ca_buffer__Ca_jct + var_chaste_interface__Ca_buffer__Ca_SR) * var_chaste_interface__Jrel_SR__O * mParameters[1]; // millimolar_per_millisecond
        const double var_ion_diffusion__J_Ca_jct_SL = 8.2413000000000004e-13 * var_chaste_interface__Ca_buffer__Ca_jct - 8.2413000000000004e-13 * var_chaste_interface__Ca_buffer__Ca_SL; // millimole_per_millisecond
        const double var_ICaL__i_CaL_Ca_jct = ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (10000000.0 * (4.9999999999999998e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (1.6200000000000001 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICap__Q_SLCaP = pow(2.3500000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_ICap__i_Cap_jct = 0.0074029999999999999 * var_ICap__Q_SLCaP / (1.0 + 5.2281977629563632e-6 * pow((1 / var_chaste_interface__Ca_buffer__Ca_jct), 1.6000000000000001)); // microA_per_microF
        const double var_INaCa__Q_NCX = pow(1.5700000000000001, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaCa__i_NaCa_jct = 0.11 * (pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) * mParameters[6] * exp(0.34999999999999998 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) - pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_jct * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_INaCa__Q_NCX * mParameters[22] / ((1.0 + 0.27000000000000002 * exp(-0.65000000000000002 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * (1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_jct, 3)) * (1.3 * pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) + pow(var_chaste_interface__Na_buffer__Na_jct, 3.0) * mParameters[6] + pow(mParameters[9], 3.0) * var_chaste_interface__Ca_buffer__Ca_jct + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_jct) * var_chaste_interface__Ca_buffer__Ca_jct + 0.0035899999999999999 * pow(mParameters[9], 3.0) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_buffer__Na_jct, 3.0)))); // microA_per_microF
        const double var_model_parameters__Cm = 4.1000000000000001e-11 * M_PI; // farad
        const double var_Ca_buffer__dCa_SLB_jct = -1.3 * var_chaste_interface__Ca_buffer__Ca_SLB_jct + 100.0 * (0.5862745098039216 - var_chaste_interface__Ca_buffer__Ca_SLB_jct) * var_chaste_interface__Ca_buffer__Ca_jct; // millimolar_per_millisecond
        const double var_Ca_buffer__dCa_SLHigh_jct = -0.029999999999999999 * var_chaste_interface__Ca_buffer__Ca_SLHigh_jct + 100.0 * (0.21029411764705883 - var_chaste_interface__Ca_buffer__Ca_SLHigh_jct) * var_chaste_interface__Ca_buffer__Ca_jct; // millimolar_per_millisecond
        const double var_ICab__i_Cab_jct = 2.7642999999999999e-5 * var_chaste_interface__cell__V - 1.38215e-5 * mParameters[11] * mParameters[23] * log(mParameters[6] / var_chaste_interface__Ca_buffer__Ca_jct) / mParameters[10]; // microA_per_microF
        const double d_dt_chaste_interface_var_Ca_buffer__Ca_jct = 68.627450980392155 * var_Jrel_SR__j_rel_SR + 1274.5098039215686 * var_Jleak_SR__j_leak_SR - var_Ca_buffer__dCa_SLB_jct - var_Ca_buffer__dCa_SLHigh_jct - 59406261192283.398 * var_ion_diffusion__J_Ca_jct_SL - 29703130596141.699 * (-2.0 * var_INaCa__i_NaCa_jct + var_ICaL__i_CaL_Ca_jct + var_ICab__i_Cab_jct + var_ICap__i_Cap_jct) * var_model_parameters__Cm / mParameters[10]; // millimolar / millisecond

        return d_dt_chaste_interface_var_Ca_buffer__Ca_jct;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -85.721630473733
            double var_chaste_interface__ICaL_d_gate__d = rY[12];
            // Units: dimensionless; Initial value: 6.99526086177479e-06
            double var_chaste_interface__ICaL_f_gate__f = rY[13];
            // Units: dimensionless; Initial value: 1.00067601563206
            double var_chaste_interface__ICaL_fCa_gate__fCaB_jct = rY[15];
            // Units: dimensionless; Initial value: 0.0244048782575591
            double var_chaste_interface__Jrel_SR__O = rY[18];
            // Units: dimensionless; Initial value: 7.1199533741995e-07
            double var_chaste_interface__Na_buffer__Na_jct = rY[20];
            // Units: millimolar; Initial value: 8.87031835089116
            double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
            // Units: millimolar; Initial value: 0.000174045152623969
            double var_chaste_interface__Ca_buffer__Ca_SLB_jct = rY[28];
            // Units: millimolar; Initial value: 0.00774564218017916
            double var_chaste_interface__Ca_buffer__Ca_SLHigh_jct = rY[30];
            // Units: millimolar; Initial value: 0.0772568134367606
            


            const double var_x0 = exp(9.9999999999999995e-8);
            const double var_x1 = 1 / (-1.0 + var_x0);
            const double var_x2 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x3 = pow(1.8, var_x2);
            const double var_x4 = var_x3 * mParameters[10];
            const double var_x5 = var_x4 * var_chaste_interface__ICaL_f_gate__f;
            const double var_x6 = var_x1 * var_x5;
            const double var_x7 = var_x6 * mParameters[12];
            const double var_x15 = exp(-9.9999999999999995e-8);
            const double var_x16 = 1 / (-1.0 + var_x15);
            const double var_x17 = var_x16 * var_x5;
            const double var_x18 = var_x17 * mParameters[12];
            const double var_x22 = 1 / (mParameters[11] * mParameters[23]);
            const double var_x23 = var_x22 * mParameters[10];
            const double var_x24 = 10000000.0 * var_x23;
            const double var_x28 = 1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct;
            const double var_x36 = 1 / var_chaste_interface__Ca_buffer__Ca_jct;
            const double var_x60 = 1 / mParameters[10];
            const double var_x61 = var_x60 * mParameters[11] * mParameters[23];
            const double var_x76 = 0.34999999999999998 * var_chaste_interface__cell__V;
            const double var_x77 = exp(var_x23 * var_x76);
            const double var_x78 = pow(var_chaste_interface__Na_buffer__Na_jct, 3.0);
            const double var_x79 = var_x78 * mParameters[6];
            const double var_x80 = var_x77 * var_x79;
            const double var_x82 = var_x23 * var_chaste_interface__cell__V;
            const double var_x83 = exp(-0.65000000000000002 * var_x82);
            const double var_x84 = pow(mParameters[9], 3.0);
            const double var_x85 = var_x84 * var_chaste_interface__Ca_buffer__Ca_jct;
            const double var_x86 = var_x83 * var_x85;
            const double var_x88 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_buffer__Ca_jct) * var_chaste_interface__Ca_buffer__Ca_jct;
            const double var_x89 = 1.0 + 0.00053869674493876331 * var_x78;
            const double var_x90 = 0.0035899999999999999 * var_x84;
            const double var_x91 = 1 / (var_x79 + var_x85 + 669921.875 * var_x88 + 1.3 * var_x78 + var_x89 * var_x90);
            const double var_x92 = 1.0 + 1.6777215999999998e-11 / pow(var_chaste_interface__Ca_buffer__Ca_jct, 3);
            const double var_x93 = 1 / var_x92;
            const double var_x94 = 1.0 + 0.27000000000000002 * var_x83;
            const double var_x95 = pow(1.5700000000000001, var_x2) * mParameters[22];
            const double var_x96 = var_x95 / var_x94;
            const double var_x97 = var_x93 * var_x96;
            const double var_x98 = var_x91 * var_x97;
            const double var_x132 = var_x80 - var_x86;
            const double var_x133 = var_x132 * var_x91;
            const double var_x168 = fabs(var_chaste_interface__cell__V);
            const double var_x169 = fabs(var_x61);
            const double var_x170 = var_x168 < 4.9999999999999998e-8 * var_x169;
            const double var_x174 = var_x22 * pow(mParameters[10], 2);
            const double var_x176 = var_x3 * var_chaste_interface__ICaL_f_gate__f;
            const double var_x177 = exp(2.0 * var_x82);
            const double var_x178 = -1.0 + var_x177;
            const double var_x179 = mParameters[12] / var_x178;
            const double var_x180 = var_x176 * var_x179;
            const double var_x185 = var_x28 * var_chaste_interface__ICaL_d_gate__d;
            const double var_x186 = var_x180 * var_x185;
            const double var_x245 = var_x24 * (4.9999999999999998e-8 * var_x61 + var_chaste_interface__cell__V);
            const double var_x253 = var_x174 * var_chaste_interface__cell__V;
            const double var_x332 = 5.3588338192419823e-9 * var_x84;
            const double var_x351 = var_x132 * var_x97 / pow((var_x88 + 1.9405247813411081e-6 * var_x78 + 1.4927113702623908e-6 * var_x79 + 1.4927113702623908e-6 * var_x85 + var_x332 * var_x89), 2);
            const double var_x361 = var_x15 * var_x18;
            const double var_x363 = var_x0 * var_x7;
            const double var_x366 = pow(2.3500000000000001, var_x2);
            const double var_x370 = var_x83 * var_x84;
            const double var_x374 = -669921.875 - var_x84;
            const double var_x380 = 2.7621000000000003e-8 * var_x185;
            const double var_x381 = var_x361 * var_x380;
            const double var_x382 = var_x245 * (var_x381 + var_x363 * var_x380);
            const double var_x384 = 1.38215e-5 * var_x36 * var_x61;
            const double var_x385 = pow(var_x36, 1.6000000000000001);
            const double var_x386 = 6.1926956862665531e-8 * var_x36 * var_x366 * var_x385 / pow((1.0 + 5.2281977629563632e-6 * var_x385), 2);
            const double var_x387 = var_x370 * var_x98;
            const double var_x388 = var_x374 - 373215529.24791086 * var_chaste_interface__Ca_buffer__Ca_jct;
            const double var_x389 = var_x133 * var_x96 / (pow(var_x92, 2) * pow(var_chaste_interface__Ca_buffer__Ca_jct, 4));
            const double var_x392 = 0.55242000000000002 * var_x177 * var_x186 * var_x253;
            const double var_x597 = M_PI * var_x60;
            const double var_x616 = var_chaste_interface__Jrel_SR__O * mParameters[1];
            const double var_x623 = 1217.8283544418096 * var_x597;
            const double var_x624 = 4.9020119168033731e-13 * var_x351;
            const double var_x625 = 1274.5098039215686 * mParameters[0];
            const double var_x626 = 68.627450980392155 * var_x616;
            const double var_x627 = 100.0 * var_chaste_interface__Ca_buffer__Ca_SLB_jct;
            const double var_x628 = 100.0 * var_chaste_interface__Ca_buffer__Ca_SLHigh_jct;
            
            partialF = -128.61534478149457 + var_x627 + var_x628 - var_x625 - var_x626 - var_x623 * (var_x384 + var_x386 + 0.22 * var_x387 - 1.1072962559999999e-11 * var_x389 - var_x388 * var_x624 + ((var_x170) ? (var_x382 - var_x381) : (var_x392)));
        }
        else
        {
            const double y_save = rY[26];
            rY[26] += delta;
            const double temp = EvaluateYDerivative26(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[26])/delta;
            rY[26] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
        // Units: millimolar; Initial value: 0.000104971310105451
        double var_chaste_interface__Ca_buffer__Ca_SLB_SL = rY[27];
        // Units: millimolar; Initial value: 0.00973710481246467
        


        // Mathematics
        const double var_Ca_buffer__dCa_SLB_SL = -1.3 * var_chaste_interface__Ca_buffer__Ca_SLB_SL + 100.0 * (1.2155 - var_chaste_interface__Ca_buffer__Ca_SLB_SL) * var_chaste_interface__Ca_buffer__Ca_SL; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_buffer__Ca_SLB_SL = var_Ca_buffer__dCa_SLB_SL; // millimolar / millisecond

        return d_dt_chaste_interface_var_Ca_buffer__Ca_SLB_SL;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
            // Units: millimolar; Initial value: 0.000104971310105451
            


            const double var_x622 = 100.0 * var_chaste_interface__Ca_buffer__Ca_SL;
            const double var_x630 = -var_x622;
            
            partialF = -1.3 + var_x630;
        }
        else
        {
            const double y_save = rY[27];
            rY[27] += delta;
            const double temp = EvaluateYDerivative27(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[27])/delta;
            rY[27] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        double var_chaste_interface__Ca_buffer__Ca_SLB_jct = rY[28];
        // Units: millimolar; Initial value: 0.00774564218017916
        


        // Mathematics
        const double var_Ca_buffer__dCa_SLB_jct = -1.3 * var_chaste_interface__Ca_buffer__Ca_SLB_jct + 100.0 * (0.5862745098039216 - var_chaste_interface__Ca_buffer__Ca_SLB_jct) * var_chaste_interface__Ca_buffer__Ca_jct; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_buffer__Ca_SLB_jct = var_Ca_buffer__dCa_SLB_jct; // millimolar / millisecond

        return d_dt_chaste_interface_var_Ca_buffer__Ca_SLB_jct;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
            // Units: millimolar; Initial value: 0.000174045152623969
            


            const double var_x629 = 100.0 * var_chaste_interface__Ca_buffer__Ca_jct;
            const double var_x631 = -var_x629;
            
            partialF = -1.3 + var_x631;
        }
        else
        {
            const double y_save = rY[28];
            rY[28] += delta;
            const double temp = EvaluateYDerivative28(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[28])/delta;
            rY[28] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
        // Units: millimolar; Initial value: 0.000104971310105451
        double var_chaste_interface__Ca_buffer__Ca_SLHigh_SL = rY[29];
        // Units: millimolar; Initial value: 0.113168405274355
        


        // Mathematics
        const double var_Ca_buffer__dCa_SLHigh_SL = -0.029999999999999999 * var_chaste_interface__Ca_buffer__Ca_SLHigh_SL + 100.0 * (0.4355 - var_chaste_interface__Ca_buffer__Ca_SLHigh_SL) * var_chaste_interface__Ca_buffer__Ca_SL; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_buffer__Ca_SLHigh_SL = var_Ca_buffer__dCa_SLHigh_SL; // millimolar / millisecond

        return d_dt_chaste_interface_var_Ca_buffer__Ca_SLHigh_SL;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
            // Units: millimolar; Initial value: 0.000104971310105451
            


            const double var_x622 = 100.0 * var_chaste_interface__Ca_buffer__Ca_SL;
            const double var_x630 = -var_x622;
            
            partialF = -0.029999999999999999 + var_x630;
        }
        else
        {
            const double y_save = rY[29];
            rY[29] += delta;
            const double temp = EvaluateYDerivative29(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[29])/delta;
            rY[29] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        double var_chaste_interface__Ca_buffer__Ca_SLHigh_jct = rY[30];
        // Units: millimolar; Initial value: 0.0772568134367606
        


        // Mathematics
        const double var_Ca_buffer__dCa_SLHigh_jct = -0.029999999999999999 * var_chaste_interface__Ca_buffer__Ca_SLHigh_jct + 100.0 * (0.21029411764705883 - var_chaste_interface__Ca_buffer__Ca_SLHigh_jct) * var_chaste_interface__Ca_buffer__Ca_jct; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_buffer__Ca_SLHigh_jct = var_Ca_buffer__dCa_SLHigh_jct; // millimolar / millisecond

        return d_dt_chaste_interface_var_Ca_buffer__Ca_SLHigh_jct;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
            // Units: millimolar; Initial value: 0.000174045152623969
            


            const double var_x629 = 100.0 * var_chaste_interface__Ca_buffer__Ca_jct;
            const double var_x631 = -var_x629;
            
            partialF = -0.029999999999999999 + var_x631;
        }
        else
        {
            const double y_save = rY[30];
            rY[30] += delta;
            const double temp = EvaluateYDerivative30(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[30])/delta;
            rY[30] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Ca_SR = rY[24];
        // Units: millimolar; Initial value: 0.547125831028543
        double var_chaste_interface__Ca_buffer__Ca_Calsequestrin = rY[31];
        // Units: millimolar; Initial value: 1.18828527890062
        


        // Mathematics
        const double var_Ca_buffer__dCalsequestrin = -65.0 * var_chaste_interface__Ca_buffer__Ca_Calsequestrin + 100.0 * (2.6000000000000001 - var_chaste_interface__Ca_buffer__Ca_Calsequestrin) * var_chaste_interface__Ca_buffer__Ca_SR; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_buffer__Ca_Calsequestrin = var_Ca_buffer__dCalsequestrin; // millimolar / millisecond

        return d_dt_chaste_interface_var_Ca_buffer__Ca_Calsequestrin;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Ca_SR = rY[24];
            // Units: millimolar; Initial value: 0.547125831028543
            


            const double var_x617 = 100.0 * var_chaste_interface__Ca_buffer__Ca_SR;
            
            partialF = -65.0 - var_x617;
        }
        else
        {
            const double y_save = rY[31];
            rY[31] += delta;
            const double temp = EvaluateYDerivative31(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[31])/delta;
            rY[31] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Cai = rY[1];
        // Units: millimolar; Initial value: 8.6504944644883e-05
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC = rY[32];
        // Units: millimolar; Initial value: 0.00886665040283094
        


        // Mathematics
        const double var_cytosolic_Ca_buffer__dCa_TroponinC = -0.019599999999999999 * var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC + 32.700000000000003 * (0.070000000000000007 - var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC) * var_chaste_interface__Ca_buffer__Cai; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_TroponinC = var_cytosolic_Ca_buffer__dCa_TroponinC; // millimolar / millisecond

        return d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_TroponinC;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Cai = rY[1];
            // Units: millimolar; Initial value: 8.6504944644883e-05
            


            const double var_x414 = 32.700000000000003 * var_chaste_interface__Ca_buffer__Cai;
            
            partialF = -0.019599999999999999 - var_x414;
        }
        else
        {
            const double y_save = rY[32];
            rY[32] += delta;
            const double temp = EvaluateYDerivative32(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[32])/delta;
            rY[32] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Cai = rY[1];
        // Units: millimolar; Initial value: 8.6504944644883e-05
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg = rY[33];
        // Units: millimolar; Initial value: 0.117873278193472
        double var_chaste_interface__cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg = rY[34];
        // Units: millimolar; Initial value: 0.0103906683506505
        


        // Mathematics
        const double var_cytosolic_Ca_buffer__dCa_TroponinC_Ca_Mg = -3.1999999999999999e-5 * var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg + 2.3700000000000001 * (0.14000000000000001 - var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg - var_chaste_interface__cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg) * var_chaste_interface__Ca_buffer__Cai; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg = var_cytosolic_Ca_buffer__dCa_TroponinC_Ca_Mg; // millimolar / millisecond

        return d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Cai = rY[1];
            // Units: millimolar; Initial value: 8.6504944644883e-05
            


            const double var_x415 = 2.3700000000000001 * var_chaste_interface__Ca_buffer__Cai;
            const double var_x632 = -var_x415;
            
            partialF = -3.1999999999999999e-5 + var_x632;
        }
        else
        {
            const double y_save = rY[33];
            rY[33] += delta;
            const double temp = EvaluateYDerivative33(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[33])/delta;
            rY[33] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg = rY[33];
        // Units: millimolar; Initial value: 0.117873278193472
        double var_chaste_interface__cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg = rY[34];
        // Units: millimolar; Initial value: 0.0103906683506505
        


        // Mathematics
        const double var_cytosolic_Ca_buffer__dMg_TroponinC_Ca_Mg = 0.00042000000000000007 - 0.0030000000000000001 * var_chaste_interface__cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg - 0.0063300000000000006 * var_chaste_interface__cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg = var_cytosolic_Ca_buffer__dMg_TroponinC_Ca_Mg; // millimolar / millisecond

        return d_dt_chaste_interface_var_cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.0063300000000000006;
        }
        else
        {
            const double y_save = rY[34];
            rY[34] += delta;
            const double temp = EvaluateYDerivative34(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[34])/delta;
            rY[34] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative35(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Cai = rY[1];
        // Units: millimolar; Initial value: 8.6504944644883e-05
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_Calmodulin = rY[35];
        // Units: millimolar; Initial value: 0.000293073957804278
        


        // Mathematics
        const double var_cytosolic_Ca_buffer__dCa_Calmodulin = -0.23799999999999999 * var_chaste_interface__cytosolic_Ca_buffer__Ca_Calmodulin + 34.0 * (0.024 - var_chaste_interface__cytosolic_Ca_buffer__Ca_Calmodulin) * var_chaste_interface__Ca_buffer__Cai; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_Calmodulin = var_cytosolic_Ca_buffer__dCa_Calmodulin; // millimolar / millisecond

        return d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_Calmodulin;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative35(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Cai = rY[1];
            // Units: millimolar; Initial value: 8.6504944644883e-05
            


            const double var_x416 = 34.0 * var_chaste_interface__Ca_buffer__Cai;
            
            partialF = -0.23799999999999999 - var_x416;
        }
        else
        {
            const double y_save = rY[35];
            rY[35] += delta;
            const double temp = EvaluateYDerivative35(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[35])/delta;
            rY[35] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative36(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Cai = rY[1];
        // Units: millimolar; Initial value: 8.6504944644883e-05
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_Myosin = rY[36];
        // Units: millimolar; Initial value: 0.00195899238146509
        double var_chaste_interface__cytosolic_Ca_buffer__Mg_Myosin = rY[37];
        // Units: millimolar; Initial value: 0.137523520981802
        


        // Mathematics
        const double var_cytosolic_Ca_buffer__dCa_Myosin = -0.00046000000000000001 * var_chaste_interface__cytosolic_Ca_buffer__Ca_Myosin + 13.800000000000001 * (0.14000000000000001 - var_chaste_interface__cytosolic_Ca_buffer__Ca_Myosin - var_chaste_interface__cytosolic_Ca_buffer__Mg_Myosin) * var_chaste_interface__Ca_buffer__Cai; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_Myosin = var_cytosolic_Ca_buffer__dCa_Myosin; // millimolar / millisecond

        return d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_Myosin;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative36(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Cai = rY[1];
            // Units: millimolar; Initial value: 8.6504944644883e-05
            


            const double var_x417 = 13.800000000000001 * var_chaste_interface__Ca_buffer__Cai;
            const double var_x633 = -var_x417;
            
            partialF = -0.00046000000000000001 + var_x633;
        }
        else
        {
            const double y_save = rY[36];
            rY[36] += delta;
            const double temp = EvaluateYDerivative36(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[36])/delta;
            rY[36] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative37(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_Myosin = rY[36];
        // Units: millimolar; Initial value: 0.00195899238146509
        double var_chaste_interface__cytosolic_Ca_buffer__Mg_Myosin = rY[37];
        // Units: millimolar; Initial value: 0.137523520981802
        


        // Mathematics
        const double var_cytosolic_Ca_buffer__dMg_Myosin = 0.0021979999999999999 - 0.015699999999999999 * var_chaste_interface__cytosolic_Ca_buffer__Ca_Myosin - 0.015757 * var_chaste_interface__cytosolic_Ca_buffer__Mg_Myosin; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_cytosolic_Ca_buffer__Mg_Myosin = var_cytosolic_Ca_buffer__dMg_Myosin; // millimolar / millisecond

        return d_dt_chaste_interface_var_cytosolic_Ca_buffer__Mg_Myosin;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative37(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.015757;
        }
        else
        {
            const double y_save = rY[37];
            rY[37] += delta;
            const double temp = EvaluateYDerivative37(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[37])/delta;
            rY[37] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative38(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Cai = rY[1];
        // Units: millimolar; Initial value: 8.6504944644883e-05
        double var_chaste_interface__cytosolic_Ca_buffer__Ca_SRB = rY[38];
        // Units: millimolar; Initial value: 0.00215728901718264
        


        // Mathematics
        const double var_cytosolic_Ca_buffer__dCa_SRB = -0.059999999999999998 * var_chaste_interface__cytosolic_Ca_buffer__Ca_SRB + 100.0 * (0.017100000000000001 - var_chaste_interface__cytosolic_Ca_buffer__Ca_SRB) * var_chaste_interface__Ca_buffer__Cai; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_SRB = var_cytosolic_Ca_buffer__dCa_SRB; // millimolar / millisecond

        return d_dt_chaste_interface_var_cytosolic_Ca_buffer__Ca_SRB;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative38(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Cai = rY[1];
            // Units: millimolar; Initial value: 8.6504944644883e-05
            


            const double var_x418 = 100.0 * var_chaste_interface__Ca_buffer__Cai;
            
            partialF = -0.059999999999999998 - var_x418;
        }
        else
        {
            const double y_save = rY[38];
            rY[38] += delta;
            const double temp = EvaluateYDerivative38(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[38])/delta;
            rY[38] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative39(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Cai = rY[1];
        // Units: millimolar; Initial value: 8.6504944644883e-05
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol = rY[39];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL = rY[40];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct = rY[41];
        // Units: millimolar; Initial value: 0.0
        


        // Mathematics
        const double var_indo_fluo_Ca_buffer_not_connected__Indo1 = 0; // millimolar
        const double var_indo_fluo_Ca_buffer_not_connected__Indo1Bound = 0.030769230769230767 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL + 0.00078461538461538469 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct + var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol; // millimolar
        const double d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol = -0.059999999999999998 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol + 100.0 * (0.025000000000000001 - var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol) * (-var_indo_fluo_Ca_buffer_not_connected__Indo1Bound + var_indo_fluo_Ca_buffer_not_connected__Indo1) * var_chaste_interface__Ca_buffer__Cai; // millimolar / millisecond

        return d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative39(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Cai = rY[1];
            // Units: millimolar; Initial value: 8.6504944644883e-05
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol = rY[39];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL = rY[40];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct = rY[41];
            // Units: millimolar; Initial value: 0.0
            


            const double var_x634 = 100.0 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol;
            const double var_x636 = 0.078461538461538471 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct;
            const double var_x637 = 3.0769230769230771 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL;
            const double var_x638 = var_x634 + var_x636 + var_x637;
            
            partialF = -0.059999999999999998 + var_x638 * var_chaste_interface__Ca_buffer__Cai + (-2.5 + var_x634) * var_chaste_interface__Ca_buffer__Cai;
        }
        else
        {
            const double y_save = rY[39];
            rY[39] += delta;
            const double temp = EvaluateYDerivative39(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[39])/delta;
            rY[39] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative40(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
        // Units: millimolar; Initial value: 0.000104971310105451
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol = rY[39];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL = rY[40];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct = rY[41];
        // Units: millimolar; Initial value: 0.0
        


        // Mathematics
        const double var_indo_fluo_Ca_buffer_not_connected__Indo1 = 0; // millimolar
        const double var_indo_fluo_Ca_buffer_not_connected__Indo1Bound = 0.030769230769230767 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL + 0.00078461538461538469 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct + var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol; // millimolar
        const double d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL = -0.059999999999999998 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL + 100.0 * (0.025024999999999999 - var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL) * (-var_indo_fluo_Ca_buffer_not_connected__Indo1Bound + var_indo_fluo_Ca_buffer_not_connected__Indo1) * var_chaste_interface__Ca_buffer__Ca_SL; // millimolar / millisecond

        return d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative40(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
            // Units: millimolar; Initial value: 0.000104971310105451
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol = rY[39];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL = rY[40];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct = rY[41];
            // Units: millimolar; Initial value: 0.0
            


            const double var_x634 = 100.0 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol;
            const double var_x636 = 0.078461538461538471 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct;
            const double var_x637 = 3.0769230769230771 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL;
            const double var_x638 = var_x634 + var_x636 + var_x637;
            
            partialF = -0.059999999999999998 + var_x638 * var_chaste_interface__Ca_buffer__Ca_SL + (-0.076999999999999999 + var_x637) * var_chaste_interface__Ca_buffer__Ca_SL;
        }
        else
        {
            const double y_save = rY[40];
            rY[40] += delta;
            const double temp = EvaluateYDerivative40(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[40])/delta;
            rY[40] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative41(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol = rY[39];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL = rY[40];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct = rY[41];
        // Units: millimolar; Initial value: 0.0
        


        // Mathematics
        const double var_indo_fluo_Ca_buffer_not_connected__Indo1 = 0; // millimolar
        const double var_indo_fluo_Ca_buffer_not_connected__Indo1Bound = 0.030769230769230767 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL + 0.00078461538461538469 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct + var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol; // millimolar
        const double d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct = -0.059999999999999998 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct + 100.0 * (0.025490196078431372 - var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct) * (-var_indo_fluo_Ca_buffer_not_connected__Indo1Bound + var_indo_fluo_Ca_buffer_not_connected__Indo1) * var_chaste_interface__Ca_buffer__Ca_jct; // millimolar / millisecond

        return d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative41(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
            // Units: millimolar; Initial value: 0.000174045152623969
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol = rY[39];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL = rY[40];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct = rY[41];
            // Units: millimolar; Initial value: 0.0
            


            const double var_x634 = 100.0 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol;
            const double var_x636 = 0.078461538461538471 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct;
            const double var_x637 = 3.0769230769230771 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL;
            const double var_x638 = var_x634 + var_x636 + var_x637;
            
            partialF = -0.059999999999999998 + var_x638 * var_chaste_interface__Ca_buffer__Ca_jct + (-0.002 + var_x636) * var_chaste_interface__Ca_buffer__Ca_jct;
        }
        else
        {
            const double y_save = rY[41];
            rY[41] += delta;
            const double temp = EvaluateYDerivative41(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[41])/delta;
            rY[41] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative42(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Cai = rY[1];
        // Units: millimolar; Initial value: 8.6504944644883e-05
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol = rY[42];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL = rY[43];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct = rY[44];
        // Units: millimolar; Initial value: 0.0
        


        // Mathematics
        const double var_indo_fluo_Ca_buffer_not_connected__Fluo3 = 0; // millimolar
        const double var_indo_fluo_Ca_buffer_not_connected__Fluo3Bound = 0.030769230769230767 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL + 0.00078461538461538469 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct + var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol; // millimolar
        const double d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol = -0.11 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol + 100.0 * (0.025000000000000001 - var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol) * (-var_indo_fluo_Ca_buffer_not_connected__Fluo3Bound + var_indo_fluo_Ca_buffer_not_connected__Fluo3) * var_chaste_interface__Ca_buffer__Cai; // millimolar / millisecond

        return d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative42(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Cai = rY[1];
            // Units: millimolar; Initial value: 8.6504944644883e-05
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol = rY[42];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL = rY[43];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct = rY[44];
            // Units: millimolar; Initial value: 0.0
            


            const double var_x641 = 100.0 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol;
            const double var_x643 = 0.078461538461538471 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct;
            const double var_x644 = 3.0769230769230771 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL;
            const double var_x645 = var_x641 + var_x643 + var_x644;
            
            partialF = -0.11 + var_x645 * var_chaste_interface__Ca_buffer__Cai + (-2.5 + var_x641) * var_chaste_interface__Ca_buffer__Cai;
        }
        else
        {
            const double y_save = rY[42];
            rY[42] += delta;
            const double temp = EvaluateYDerivative42(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[42])/delta;
            rY[42] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative43(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
        // Units: millimolar; Initial value: 0.000104971310105451
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol = rY[42];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL = rY[43];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct = rY[44];
        // Units: millimolar; Initial value: 0.0
        


        // Mathematics
        const double var_indo_fluo_Ca_buffer_not_connected__Fluo3 = 0; // millimolar
        const double var_indo_fluo_Ca_buffer_not_connected__Fluo3Bound = 0.030769230769230767 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL + 0.00078461538461538469 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct + var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol; // millimolar
        const double d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL = -0.11 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL + 100.0 * (0.025024999999999999 - var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL) * (-var_indo_fluo_Ca_buffer_not_connected__Fluo3Bound + var_indo_fluo_Ca_buffer_not_connected__Fluo3) * var_chaste_interface__Ca_buffer__Ca_SL; // millimolar / millisecond

        return d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative43(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
            // Units: millimolar; Initial value: 0.000104971310105451
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol = rY[42];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL = rY[43];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct = rY[44];
            // Units: millimolar; Initial value: 0.0
            


            const double var_x641 = 100.0 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol;
            const double var_x643 = 0.078461538461538471 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct;
            const double var_x644 = 3.0769230769230771 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL;
            const double var_x645 = var_x641 + var_x643 + var_x644;
            
            partialF = -0.11 + var_x645 * var_chaste_interface__Ca_buffer__Ca_SL + (-0.076999999999999999 + var_x644) * var_chaste_interface__Ca_buffer__Ca_SL;
        }
        else
        {
            const double y_save = rY[43];
            rY[43] += delta;
            const double temp = EvaluateYDerivative43(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[43])/delta;
            rY[43] = y_save;
        }
        return partialF;
    }
    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluateYDerivative44(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol = rY[42];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL = rY[43];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct = rY[44];
        // Units: millimolar; Initial value: 0.0
        


        // Mathematics
        const double var_indo_fluo_Ca_buffer_not_connected__Fluo3 = 0; // millimolar
        const double var_indo_fluo_Ca_buffer_not_connected__Fluo3Bound = 0.030769230769230767 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL + 0.00078461538461538469 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct + var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol; // millimolar
        const double d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct = -0.11 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct + 100.0 * (0.025490196078431372 - var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct) * (-var_indo_fluo_Ca_buffer_not_connected__Fluo3Bound + var_indo_fluo_Ca_buffer_not_connected__Fluo3) * var_chaste_interface__Ca_buffer__Ca_jct; // millimolar / millisecond

        return d_dt_chaste_interface_var_indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct;
    }

    double Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::EvaluatePartialDerivative44(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
            // Units: millimolar; Initial value: 0.000174045152623969
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol = rY[42];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL = rY[43];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct = rY[44];
            // Units: millimolar; Initial value: 0.0
            


            const double var_x641 = 100.0 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol;
            const double var_x643 = 0.078461538461538471 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct;
            const double var_x644 = 3.0769230769230771 * var_chaste_interface__indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL;
            const double var_x645 = var_x641 + var_x643 + var_x644;
            
            partialF = -0.11 + var_x645 * var_chaste_interface__Ca_buffer__Ca_jct + (-0.002 + var_x643) * var_chaste_interface__Ca_buffer__Ca_jct;
        }
        else
        {
            const double y_save = rY[44];
            rY[44] += delta;
            const double temp = EvaluateYDerivative44(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[44])/delta;
            rY[44] = y_save;
        }
        return partialF;
    }

    std::vector<double> Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -85.721630473733
        double var_chaste_interface__INa_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.98714602875678
        double var_chaste_interface__INa_j_gate__j = rY[3];
        // Units: dimensionless; Initial value: 0.991826348770428
        double var_chaste_interface__INa_m_gate__m = rY[4];
        // Units: dimensionless; Initial value: 0.0013702407736465
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[5];
        // Units: dimensionless; Initial value: 0.00846906175020028
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[6];
        // Units: dimensionless; Initial value: 0.00613557812033723
        double var_chaste_interface__Itos_X_gate__X_tos = rY[7];
        // Units: dimensionless; Initial value: 0.00401072468238921
        double var_chaste_interface__Itos_Y_gate__Y_tos = rY[8];
        // Units: dimensionless; Initial value: 0.31555225368514
        double var_chaste_interface__Itos_R_gate__R_tos = rY[9];
        // Units: dimensionless; Initial value: 0.402577243036347
        double var_chaste_interface__Itof_X_gate__X_tof = rY[10];
        // Units: dimensionless; Initial value: 0.00401068798369438
        double var_chaste_interface__Itof_Y_gate__Y_tof = rY[11];
        // Units: dimensionless; Initial value: 0.994632857675454
        double var_chaste_interface__ICaL_d_gate__d = rY[12];
        // Units: dimensionless; Initial value: 6.99526086177479e-06
        double var_chaste_interface__ICaL_f_gate__f = rY[13];
        // Units: dimensionless; Initial value: 1.00067601563206
        double var_chaste_interface__ICaL_fCa_gate__fCaB_SL = rY[14];
        // Units: dimensionless; Initial value: 0.0150193299768419
        double var_chaste_interface__ICaL_fCa_gate__fCaB_jct = rY[15];
        // Units: dimensionless; Initial value: 0.0244048782575591
        double var_chaste_interface__Jrel_SR__O = rY[18];
        // Units: dimensionless; Initial value: 7.1199533741995e-07
        double var_chaste_interface__Na_buffer__Na_SL = rY[19];
        // Units: millimolar; Initial value: 8.87161932058707
        double var_chaste_interface__Na_buffer__Na_jct = rY[20];
        // Units: millimolar; Initial value: 8.87031835089116
        double var_chaste_interface__Na_buffer__Nai = rY[23];
        // Units: millimolar; Initial value: 8.87200572571131
        double var_chaste_interface__Ca_buffer__Ca_SR = rY[24];
        // Units: millimolar; Initial value: 0.547125831028543
        double var_chaste_interface__Ca_buffer__Ca_SL = rY[25];
        // Units: millimolar; Initial value: 0.000104971310105451
        double var_chaste_interface__Ca_buffer__Ca_jct = rY[26];
        // Units: millimolar; Initial value: 0.000174045152623969
        
        // Lookup table indexing
        const bool _oob_0 = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_ICaL_fCa_gate__fCa_SL = 1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL; // dimensionless
        const double var_ICab__Fx_CaBk_SL = 0.89000000000000001; // dimensionless
        const double var_ICab__Fx_CaBk_jct = 0.11; // dimensionless
        const double var_ICab__G_CaBk = 0.00025129999999999998; // milliS_per_microF
        const double var_ICap__Fx_SLCaP_SL = 0.89000000000000001; // dimensionless
        const double var_ICap__Fx_SLCaP_jct = 0.11; // dimensionless
        const double var_ICap__H = 1.6000000000000001; // dimensionless
        const double var_ICap__Km = 0.00050000000000000001; // millimolar
        const double var_ICap__Q10_SLCaP = 2.3500000000000001; // dimensionless
        const double var_ICap__V_maxAF = 0.067299999999999999; // microA_per_microF
        const double var_IKs__Fx_Ks_SL = 0.89000000000000001; // dimensionless
        const double var_IKs__Fx_Ks_jct = 0.11; // dimensionless
        const double var_IKs__pCa_SL = 3.0 - log10(var_chaste_interface__Ca_buffer__Ca_SL); // dimensionless
        const double var_IKs__G_Ks_SL = (0.057000000000000002 + 0.19 / (1.0 + exp(-12.0 + 1.6666666666666667 * var_IKs__pCa_SL))) * mParameters[20]; // milliS_per_microF
        const double var_IKs__pCa_jct = 3.0 - log10(var_chaste_interface__Ca_buffer__Ca_jct); // dimensionless
        const double var_IKs__G_Ks_jct = (0.057000000000000002 + 0.19 / (1.0 + exp(-12.0 + 1.6666666666666667 * var_IKs__pCa_jct))) * mParameters[20]; // milliS_per_microF
        const double var_IKs__pKNa = 0.018329999999999999; // dimensionless
        const double var_INa__Fx_Na_SL = 0.89000000000000001; // dimensionless
        const double var_INa__Fx_Na_jct = 0.11; // dimensionless
        const double var_INaCa__Fx_NCX_SL = 0.89000000000000001; // dimensionless
        const double var_INaCa__Fx_NCX_jct = 0.11; // dimensionless
        const double var_INaCa__HNa = 3.0; // dimensionless
        const double var_INaCa__K_mCai = 0.0035899999999999999; // millimolar
        const double var_INaCa__K_mCao = 1.3; // millimolar
        const double var_INaCa__K_mNai = 12.289999999999999; // millimolar
        const double var_INaCa__K_mNao = 87.5; // millimolar
        const double var_INaCa__Kd_act = 0.00025599999999999999; // millimolar
        const double var_INaCa__Ka_SL = 1 / (1.0 + pow(var_INaCa__Kd_act, 3) / pow(var_chaste_interface__Ca_buffer__Ca_SL, 3)); // dimensionless
        const double var_INaCa__Ka_jct = 1 / (1.0 + pow(var_INaCa__Kd_act, 3) / pow(var_chaste_interface__Ca_buffer__Ca_jct, 3)); // dimensionless
        const double var_INaCa__Q10_NCX = 1.5700000000000001; // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INa__openProb = pow(var_chaste_interface__INa_m_gate__m, 3) * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // dimensionless
        const double var_INab__Fx_NaBk_SL = 0.89000000000000001; // dimensionless
        const double var_INab__Fx_NaBk_jct = 0.11; // dimensionless
        const double var_INab__G_NaBk = 0.00029700000000000001; // milliS_per_microF
        const double var_Jrel_SR__j_rel_SR = (-var_chaste_interface__Ca_buffer__Ca_jct + var_chaste_interface__Ca_buffer__Ca_SR) * var_chaste_interface__Jrel_SR__O * mParameters[1]; // millimolar_per_millisecond
        const double var_ICaL_f_gate__tau_f = 1 / (_lt_0_row[5]); // millisecond
        const double var_IKr_Rr_gate__Rr = 1 / (_lt_0_row[0]); // dimensionless
        const double var_INa_h_gate__alpha_h = ((var_chaste_interface__cell__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[16] - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_millisecond
        const double var_INa_h_gate__beta_h = ((var_chaste_interface__cell__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V - 0.34999999999999998 * mParameters[16]) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * mParameters[16])) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[16] - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_millisecond
        const double var_INa_h_gate__tau_h = 1 / (var_INa_h_gate__alpha_h + var_INa_h_gate__beta_h); // millisecond
        const double var_INa_j_gate__alpha_j = ((var_chaste_interface__cell__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * mParameters[16]) - 3.4740000000000003e-5 * exp(0.043909999999999998 * mParameters[16] - 0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * mParameters[16]))) : (0)); // per_millisecond
        const double var_INa_j_gate__beta_j = ((var_chaste_interface__cell__V < -40.0) ? (0.1212 * exp(0.01052 * mParameters[16] - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[16] - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.29999999999999999 * exp(2.5349999999999999e-7 * mParameters[16] - 2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[16] - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_millisecond
        const double var_INa_j_gate__tau_j = 1 / (var_INa_j_gate__alpha_j + var_INa_j_gate__beta_j); // millisecond
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_model_parameters__Cm_per_area = 1.9999999999999999e-6; // farad_per_cm2
        const double var_IK1__G_K1 = 0.43033148291193518 * sqrt(mParameters[8]) * mParameters[18]; // milliS_per_microF
        const double var_IKr__G_IKr = 0.43033148291193518 * sqrt(mParameters[8]) * mParameters[19]; // milliS_per_microF
        const double var_ICaL__i_CaL_Ca_SL = ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (10000000.0 * (4.9999999999999998e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 8.9999999999999995e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (0.18000000000000002 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_SL * exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICaL__i_CaL_Ca_jct = ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (10000000.0 * (4.9999999999999998e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 8.0999999999999997e-8 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(-9.9999999999999995e-8)) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (1.6200000000000001 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.34100000000000003 * mParameters[6] + 0.34100000000000003 * var_chaste_interface__Ca_buffer__Ca_jct * exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[12] * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICaL__i_CaL_K = ((fabs(var_chaste_interface__cell__V) < 9.9999999999999995e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (5000000.0 * (9.9999999999999995e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (1.2150000000000001e-14 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (-0.75 * mParameters[8] + 0.75 * mParameters[5] * exp(9.9999999999999995e-8)) * (1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 1.2150000000000001e-14 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (-0.75 * mParameters[8] + 0.75 * mParameters[5] * exp(-9.9999999999999995e-8)) * (1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 1.2150000000000001e-14 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (-0.75 * mParameters[8] + 0.75 * mParameters[5] * exp(-9.9999999999999995e-8)) * (1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (1.215e-7 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (-0.75 * mParameters[8] + 0.75 * mParameters[5] * exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * (1.0 - 0.10000000000000001 * var_chaste_interface__ICaL_fCa_gate__fCaB_SL - 0.90000000000000002 * var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICaL__i_CaL_Na_SL = ((fabs(var_chaste_interface__cell__V) < 9.9999999999999995e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (5000000.0 * (9.9999999999999995e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 6.75e-17 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (6.7499999999999994e-10 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_SL) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_SL * exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICaL__i_CaL_Na_jct = ((fabs(var_chaste_interface__cell__V) < 9.9999999999999995e-8 * fabs(mParameters[11] * mParameters[23] / mParameters[10])) ? (5000000.0 * (9.9999999999999995e-8 * mParameters[11] * mParameters[23] / mParameters[10] + var_chaste_interface__cell__V) * (6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[10] / (mParameters[11] * mParameters[23]) - 6.0749999999999991e-16 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(-9.9999999999999995e-8)) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) : (6.0749999999999998e-9 * pow(1.8, (-31.0 + 0.10000000000000001 * mParameters[23])) * pow(mParameters[10], 2) * (1.0 - var_chaste_interface__ICaL_fCa_gate__fCaB_jct) * (-0.75 * mParameters[9] + 0.75 * var_chaste_interface__Na_buffer__Na_jct * exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * var_chaste_interface__ICaL_d_gate__d * var_chaste_interface__ICaL_f_gate__f * var_chaste_interface__cell__V / ((-1.0 + exp(var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) * mParameters[11] * mParameters[23]))); // microA_per_microF
        const double var_ICaL__i_CaL = var_ICaL__i_CaL_Ca_SL + var_ICaL__i_CaL_Ca_jct + var_ICaL__i_CaL_K + var_ICaL__i_CaL_Na_SL + var_ICaL__i_CaL_Na_jct; // microA_per_microF
        const double var_ICaL__i_CaL_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__i_CaL; // uA_per_cm2
        const double var_ICap__Q_SLCaP = pow(var_ICap__Q10_SLCaP, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_ICap__i_Cap_SL = var_ICap__Fx_SLCaP_SL * var_ICap__Q_SLCaP * var_ICap__V_maxAF / (1.0 + pow((var_ICap__Km / var_chaste_interface__Ca_buffer__Ca_SL), var_ICap__H)); // microA_per_microF
        const double var_ICap__i_Cap_jct = var_ICap__Fx_SLCaP_jct * var_ICap__Q_SLCaP * var_ICap__V_maxAF / (1.0 + pow((var_ICap__Km / var_chaste_interface__Ca_buffer__Ca_jct), var_ICap__H)); // microA_per_microF
        const double var_ICap__i_Cap = var_ICap__i_Cap_SL + var_ICap__i_Cap_jct; // microA_per_microF
        const double var_ICap__i_Cap_converted = HeartConfig::Instance()->GetCapacitance() * var_ICap__i_Cap; // uA_per_cm2
        const double var_IKs__E_Ks = mParameters[11] * mParameters[23] * log((var_IKs__pKNa * mParameters[9] + mParameters[8]) / (var_IKs__pKNa * var_chaste_interface__Na_buffer__Nai + mParameters[5])) / mParameters[10]; // millivolt
        const double var_IKs__i_Ks_SL = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (-var_IKs__E_Ks + var_chaste_interface__cell__V) * var_IKs__Fx_Ks_SL * var_IKs__G_Ks_SL; // microA_per_microF
        const double var_IKs__i_Ks_jct = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (-var_IKs__E_Ks + var_chaste_interface__cell__V) * var_IKs__Fx_Ks_jct * var_IKs__G_Ks_jct; // microA_per_microF
        const double var_IKs__i_Ks = var_IKs__i_Ks_SL + var_IKs__i_Ks_jct; // microA_per_microF
        const double var_IKs__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_IKs__i_Ks; // uA_per_cm2
        const double var_INaCa__Q_NCX = pow(var_INaCa__Q10_NCX, (-31.0 + 0.10000000000000001 * mParameters[23])); // dimensionless
        const double var_INaCa__temp_SL = (pow(var_chaste_interface__Na_buffer__Na_SL, var_INaCa__HNa) * mParameters[6] * exp(var_INaCa__eta * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) - pow(mParameters[9], var_INaCa__HNa) * var_chaste_interface__Ca_buffer__Ca_SL * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) / (1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))); // millimolar4
        const double var_INaCa__i_NaCa_SL = var_INaCa__Fx_NCX_SL * var_INaCa__Ka_SL * var_INaCa__Q_NCX * mParameters[22] * var_INaCa__temp_SL / (pow(var_chaste_interface__Na_buffer__Na_SL, var_INaCa__HNa) * var_INaCa__K_mCao + pow(var_chaste_interface__Na_buffer__Na_SL, var_INaCa__HNa) * mParameters[6] + pow(mParameters[9], var_INaCa__HNa) * var_chaste_interface__Ca_buffer__Ca_SL + pow(var_INaCa__K_mNao, var_INaCa__HNa) * (1.0 + var_chaste_interface__Ca_buffer__Ca_SL / var_INaCa__K_mCai) * var_chaste_interface__Ca_buffer__Ca_SL + pow(mParameters[9], var_INaCa__HNa) * (1.0 + pow((var_chaste_interface__Na_buffer__Na_SL / var_INaCa__K_mNai), var_INaCa__HNa)) * var_INaCa__K_mCai); // microA_per_microF
        const double var_INaCa__temp_jct = (pow(var_chaste_interface__Na_buffer__Na_jct, var_INaCa__HNa) * mParameters[6] * exp(var_INaCa__eta * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23])) - pow(mParameters[9], var_INaCa__HNa) * var_chaste_interface__Ca_buffer__Ca_jct * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))) / (1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__cell__V * mParameters[10] / (mParameters[11] * mParameters[23]))); // millimolar4
        const double var_INaCa__i_NaCa_jct = var_INaCa__Fx_NCX_jct * var_INaCa__Ka_jct * var_INaCa__Q_NCX * mParameters[22] * var_INaCa__temp_jct / (pow(var_chaste_interface__Na_buffer__Na_jct, var_INaCa__HNa) * var_INaCa__K_mCao + pow(var_chaste_interface__Na_buffer__Na_jct, var_INaCa__HNa) * mParameters[6] + pow(mParameters[9], var_INaCa__HNa) * var_chaste_interface__Ca_buffer__Ca_jct + pow(var_INaCa__K_mNao, var_INaCa__HNa) * (1.0 + var_chaste_interface__Ca_buffer__Ca_jct / var_INaCa__K_mCai) * var_chaste_interface__Ca_buffer__Ca_jct + pow(mParameters[9], var_INaCa__HNa) * (1.0 + pow((var_chaste_interface__Na_buffer__Na_jct / var_INaCa__K_mNai), var_INaCa__HNa)) * var_INaCa__K_mCai); // microA_per_microF
        const double var_INaCa__i_NaCa = var_INaCa__i_NaCa_SL + var_INaCa__i_NaCa_jct; // microA_per_microF
        const double var_INaCa__i_NaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa__i_NaCa; // uA_per_cm2
        const double var_model_parameters__cell_length = 100.0; // micrometre
        const double var_model_parameters__cell_radius = 10.25; // micrometre
        const double var_model_parameters__Cm = 2.0e-8 * M_PI * var_model_parameters__Cm_per_area * var_model_parameters__cell_length * var_model_parameters__cell_radius; // farad
        const double var_model_parameters__Cm_converted = 1000000.0 * var_model_parameters__Cm; // uF
        const double var_reversal_potentials__E_Ca_SL = 0.5 * mParameters[11] * mParameters[23] * log(mParameters[6] / var_chaste_interface__Ca_buffer__Ca_SL) / mParameters[10]; // millivolt
        const double var_ICab__i_Cab_SL = (-var_reversal_potentials__E_Ca_SL + var_chaste_interface__cell__V) * var_ICab__Fx_CaBk_SL * var_ICab__G_CaBk; // microA_per_microF
        const double var_reversal_potentials__E_Ca_jct = 0.5 * mParameters[11] * mParameters[23] * log(mParameters[6] / var_chaste_interface__Ca_buffer__Ca_jct) / mParameters[10]; // millivolt
        const double var_ICab__i_Cab_jct = (-var_reversal_potentials__E_Ca_jct + var_chaste_interface__cell__V) * var_ICab__Fx_CaBk_jct * var_ICab__G_CaBk; // microA_per_microF
        const double var_ICab__i_Cab = var_ICab__i_Cab_SL + var_ICab__i_Cab_jct; // microA_per_microF
        const double var_ICab__i_Cab_converted = HeartConfig::Instance()->GetCapacitance() * var_ICab__i_Cab; // uA_per_cm2
        const double var_reversal_potentials__E_Cl = -mParameters[11] * mParameters[23] * log(mParameters[7] / mParameters[4]) / mParameters[10]; // millivolt
        const double var_IClb__i_Clb = (-var_reversal_potentials__E_Cl + var_chaste_interface__cell__V) * mParameters[13]; // microA_per_microF
        const double var_IClb__i_Clb_converted = HeartConfig::Instance()->GetCapacitance() * var_IClb__i_Clb; // uA_per_cm2
        const double var_reversal_potentials__E_K = mParameters[11] * mParameters[23] * log(mParameters[8] / mParameters[5]) / mParameters[10]; // millivolt
        const double var_IK1_K1_gate__alpha_K1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__E_K)); // per_millisecond
        const double var_IK1_K1_gate__beta_K1 = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__E_K) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__E_K)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__E_K - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_IK1_K1_gate__K1_infinity = var_IK1_K1_gate__alpha_K1 / (var_IK1_K1_gate__alpha_K1 + var_IK1_K1_gate__beta_K1); // dimensionless
        const double var_IK1__i_K1 = (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * var_IK1__G_K1 * var_IK1_K1_gate__K1_infinity; // microA_per_microF
        const double var_IK1__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_IK1__i_K1; // uA_per_cm2
        const double var_IKr__i_Kr = (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * var_IKr__G_IKr * var_IKr_Rr_gate__Rr * var_chaste_interface__IKr_Xr_gate__Xr; // microA_per_microF
        const double var_IKr__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_IKr__i_Kr; // uA_per_cm2
        const double var_Itof__i_tof = (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * mParameters[17] * var_chaste_interface__Itof_X_gate__X_tof * var_chaste_interface__Itof_Y_gate__Y_tof; // microA_per_microF
        const double var_Itof__i_tof_converted = HeartConfig::Instance()->GetCapacitance() * var_Itof__i_tof; // uA_per_cm2
        const double var_Itos__i_tos = (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * (0.5 * var_chaste_interface__Itos_R_gate__R_tos + var_chaste_interface__Itos_Y_gate__Y_tos) * mParameters[21] * var_chaste_interface__Itos_X_gate__X_tos; // microA_per_microF
        const double var_Itos__i_tos_converted = HeartConfig::Instance()->GetCapacitance() * var_Itos__i_tos; // uA_per_cm2
        const double var_reversal_potentials__E_Na_SL = mParameters[11] * mParameters[23] * log(mParameters[9] / var_chaste_interface__Na_buffer__Na_SL) / mParameters[10]; // millivolt
        const double var_INa__i_Na_SL = (-var_reversal_potentials__E_Na_SL + var_chaste_interface__cell__V) * var_INa__Fx_Na_SL * mParameters[14] * var_INa__openProb; // microA_per_microF
        const double var_INab__i_Nab_SL = (-var_reversal_potentials__E_Na_SL + var_chaste_interface__cell__V) * var_INab__Fx_NaBk_SL * var_INab__G_NaBk; // microA_per_microF
        const double var_reversal_potentials__E_Na_jct = mParameters[11] * mParameters[23] * log(mParameters[9] / var_chaste_interface__Na_buffer__Na_jct) / mParameters[10]; // millivolt
        const double var_INa__i_Na_jct = (-var_reversal_potentials__E_Na_jct + var_chaste_interface__cell__V) * var_INa__Fx_Na_jct * mParameters[14] * var_INa__openProb; // microA_per_microF
        const double var_INa__i_Na = var_INa__i_Na_SL + var_INa__i_Na_jct; // microA_per_microF
        const double var_INa__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_INa__i_Na; // uA_per_cm2
        const double var_INab__i_Nab_jct = (-var_reversal_potentials__E_Na_jct + var_chaste_interface__cell__V) * var_INab__Fx_NaBk_jct * var_INab__G_NaBk; // microA_per_microF
        const double var_INab__i_Nab = var_INab__i_Nab_SL + var_INab__i_Nab_jct; // microA_per_microF
        const double var_INab__i_Nab_converted = HeartConfig::Instance()->GetCapacitance() * var_INab__i_Nab; // uA_per_cm2

        std::vector<double> dqs(23);
        dqs[0] = var_Jrel_SR__j_rel_SR;
        dqs[1] = var_reversal_potentials__E_Cl;
        dqs[2] = var_ICaL__i_CaL_converted;
        dqs[3] = var_ICaL_fCa_gate__fCa_SL;
        dqs[4] = var_ICaL_f_gate__tau_f;
        dqs[5] = var_ICab__i_Cab_converted;
        dqs[6] = var_IClb__i_Clb_converted;
        dqs[7] = var_INab__i_Nab_converted;
        dqs[8] = var_ICap__i_Cap_converted;
        dqs[9] = var_model_parameters__Cm_converted;
        dqs[10] = var_INa__i_Na_converted;
        dqs[11] = var_INa_h_gate__tau_h;
        dqs[12] = var_INa_j_gate__tau_j;
        dqs[13] = var_Itof__i_tof_converted;
        dqs[14] = var_IK1__i_K1_converted;
        dqs[15] = var_IK1__G_K1;
        dqs[16] = var_IKr__i_Kr_converted;
        dqs[17] = var_IKs__i_Ks_converted;
        dqs[18] = var_Itos__i_tos_converted;
        dqs[19] = var_INaCa__i_NaCa_converted;
        dqs[20] = var_cell__i_Stim_converted;
        dqs[21] = var_reversal_potentials__E_K;
        dqs[22] = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt>::Initialise(void)
{
    this->mSystemName = "shannon_wang_puglisi_weber_bers_2004_model_updated";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-85.721630473733);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.6504944644883e-05);

    // rY[2]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.98714602875678);

    // rY[3]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.991826348770428);

    // rY[4]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0013702407736465);

    // rY[5]:
    this->mVariableNames.push_back("IKr_Xr_gate__Xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00846906175020028);

    // rY[6]:
    this->mVariableNames.push_back("IKs_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00613557812033723);

    // rY[7]:
    this->mVariableNames.push_back("Itos_X_gate__X_tos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00401072468238921);

    // rY[8]:
    this->mVariableNames.push_back("Itos_Y_gate__Y_tos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.31555225368514);

    // rY[9]:
    this->mVariableNames.push_back("Itos_R_gate__R_tos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.402577243036347);

    // rY[10]:
    this->mVariableNames.push_back("Itof_X_gate__X_tof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00401068798369438);

    // rY[11]:
    this->mVariableNames.push_back("Itof_Y_gate__Y_tof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.994632857675454);

    // rY[12]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(6.99526086177479e-06);

    // rY[13]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.00067601563206);

    // rY[14]:
    this->mVariableNames.push_back("ICaL_fCa_gate__fCaB_SL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0150193299768419);

    // rY[15]:
    this->mVariableNames.push_back("ICaL_fCa_gate__fCaB_jct");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0244048782575591);

    // rY[16]:
    this->mVariableNames.push_back("Jrel_SR__R");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.890917121306535);

    // rY[17]:
    this->mVariableNames.push_back("Jrel_SR__I");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.71752603681652e-08);

    // rY[18]:
    this->mVariableNames.push_back("Jrel_SR__O");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(7.1199533741995e-07);

    // rY[19]:
    this->mVariableNames.push_back("submembrane_space_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.87161932058707);

    // rY[20]:
    this->mVariableNames.push_back("dyadic_space_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.87031835089116);

    // rY[21]:
    this->mVariableNames.push_back("Na_buffer__Na_SL_buf");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.77606800956492);

    // rY[22]:
    this->mVariableNames.push_back("Na_buffer__Na_jct_buf");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(3.55668431730337);

    // rY[23]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.87200572571131);

    // rY[24]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.547125831028543);

    // rY[25]:
    this->mVariableNames.push_back("submembrane_space_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.000104971310105451);

    // rY[26]:
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.000174045152623969);

    // rY[27]:
    this->mVariableNames.push_back("Ca_buffer__Ca_SLB_SL");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00973710481246467);

    // rY[28]:
    this->mVariableNames.push_back("Ca_buffer__Ca_SLB_jct");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00774564218017916);

    // rY[29]:
    this->mVariableNames.push_back("Ca_buffer__Ca_SLHigh_SL");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.113168405274355);

    // rY[30]:
    this->mVariableNames.push_back("Ca_buffer__Ca_SLHigh_jct");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0772568134367606);

    // rY[31]:
    this->mVariableNames.push_back("Ca_buffer__Ca_Calsequestrin");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.18828527890062);

    // rY[32]:
    this->mVariableNames.push_back("cytosolic_Ca_buffer__Ca_TroponinC");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00886665040283094);

    // rY[33]:
    this->mVariableNames.push_back("cytosolic_Ca_buffer__Ca_TroponinC_Ca_Mg");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.117873278193472);

    // rY[34]:
    this->mVariableNames.push_back("cytosolic_Ca_buffer__Mg_TroponinC_Ca_Mg");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0103906683506505);

    // rY[35]:
    this->mVariableNames.push_back("cytosolic_Ca_buffer__Ca_Calmodulin");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.000293073957804278);

    // rY[36]:
    this->mVariableNames.push_back("cytosolic_Ca_buffer__Ca_Myosin");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00195899238146509);

    // rY[37]:
    this->mVariableNames.push_back("cytosolic_Ca_buffer__Mg_Myosin");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.137523520981802);

    // rY[38]:
    this->mVariableNames.push_back("cytosolic_Ca_buffer__Ca_SRB");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00215728901718264);

    // rY[39]:
    this->mVariableNames.push_back("indo_fluo_Ca_buffer_not_connected__Ca_Indo1_Cytosol");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0);

    // rY[40]:
    this->mVariableNames.push_back("indo_fluo_Ca_buffer_not_connected__Ca_Indo1_SL");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0);

    // rY[41]:
    this->mVariableNames.push_back("indo_fluo_Ca_buffer_not_connected__Ca_Indo1_jct");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0);

    // rY[42]:
    this->mVariableNames.push_back("indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_Cytosol");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0);

    // rY[43]:
    this->mVariableNames.push_back("indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_SL");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0);

    // rY[44]:
    this->mVariableNames.push_back("indo_fluo_Ca_buffer_not_connected__Ca_Fluo3_jct");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("millimolar_per_millisecond");

    // mParameters[3]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[4]:
    this->mParameterNames.push_back("cytosolic_chloride_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[5]:
    this->mParameterNames.push_back("cytosolic_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[7]:
    this->mParameterNames.push_back("extracellular_chloride_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[8]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[9]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[10]:
    this->mParameterNames.push_back("faraday_constant");
    this->mParameterUnits.push_back("coulomb_per_mole");

    // mParameters[11]:
    this->mParameterNames.push_back("gas_constant");
    this->mParameterUnits.push_back("joule_per_kilomole_kelvin");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("litre_per_farad_millisecond");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_background_chloride_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("millivolt");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_fast_transient_outward_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[18]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[19]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[20]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[21]:
    this->mParameterNames.push_back("membrane_slow_transient_outward_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[22]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("microA_per_microF");

    // mParameters[23]:
    this->mParameterNames.push_back("temperature");
    this->mParameterUnits.push_back("kelvin");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("chloride_reversal_potential");
    this->mDerivedQuantityUnits.push_back("millivolt");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_background_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_background_chloride_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_background_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_calcium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_capacitance");
    this->mDerivedQuantityUnits.push_back("uF");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_fast_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [17]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [18]:
    this->mDerivedQuantityNames.push_back("membrane_slow_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [19]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [20]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [21]:
    this->mDerivedQuantityNames.push_back("potassium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("millivolt");

    // Derived Quantity index [22]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellshannon_wang_puglisi_weber_bers_2004FromCellMLGRL1Opt)

