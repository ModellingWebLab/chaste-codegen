//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: Trovato2020
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: GeneralizedRushLarsenFirstOrderOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "Trovato2020.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class CellTrovato2020FromCellMLGRL1Opt_LookupTables : public AbstractLookupTableCollection
{
public:
    static CellTrovato2020FromCellMLGRL1Opt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new CellTrovato2020FromCellMLGRL1Opt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<40; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane__v)
    {
        const double _offset_0 = var_chaste_interface__membrane__v - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__v)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__v>mTableMaxs[0] || var_chaste_interface__membrane__v<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~CellTrovato2020FromCellMLGRL1Opt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    CellTrovato2020FromCellMLGRL1Opt_LookupTables(const CellTrovato2020FromCellMLGRL1Opt_LookupTables&);
    CellTrovato2020FromCellMLGRL1Opt_LookupTables& operator= (const CellTrovato2020FromCellMLGRL1Opt_LookupTables&);
    CellTrovato2020FromCellMLGRL1Opt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 40;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        CellTrovato2020FromCellMLGRL1Opt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][40];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 0.29999999999999999 + 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(1.4344412457471867 + 0.026171159382360639 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(2.2916666666666665 + 0.041666666666666664 * var_chaste_interface__membrane__v);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-1.0416666666666667 + 0.10416666666666667 * var_chaste_interface__membrane__v);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(0.75 - 0.0625 * var_chaste_interface__membrane__v);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(6.1904761904761898 + 0.27056277056277056 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-1.7115839243498816 - 0.23640661938534277 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 0.59999999999999998 + 1 / (exp(1.26 + 0.089999999999999997 * var_chaste_interface__membrane__v) + exp(-0.30000000000000004 - 0.050000000000000003 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 5.04 + 0.71999999999999997 / (0.040000000000000001 * exp(1.5985714285714285 + 0.14285714285714285 * var_chaste_interface__membrane__v) + 0.040000000000000001 * exp(-1.5985714285714285 - 0.14285714285714285 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 49.0 + 0.48999999999999999 / (0.00012 * exp(2.1699999999999999 + 0.14285714285714285 * var_chaste_interface__membrane__v) + 0.00012 * exp(-5.0633333333333335 - 0.33333333333333331 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 7.0 + 1 / (0.0044999999999999997 * exp(3.5190000000000001 + 0.10000000000000001 * var_chaste_interface__membrane__v) + 0.0044999999999999997 * exp(-3.5190000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1000.0 + 1 / (3.4999999999999997e-5 * exp(3.3649999999999998 + 0.16666666666666666 * var_chaste_interface__membrane__v) + 3.4999999999999997e-5 * exp(-5.0474999999999994 - 0.25 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-4.2857142857142856 - 0.14285714285714285 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0680000000000001 * exp(0.54333333333333333 + 0.033333333333333333 * var_chaste_interface__membrane__v) + 1.0680000000000001 * exp(-0.54333333333333333 - 0.033333333333333333 * var_chaste_interface__membrane__v);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(12.199999999999999 + 0.20000000000000001 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 0.014999999999999999 * exp(4.6558441558441563 + 0.064935064935064929 * var_chaste_interface__membrane__v) + 0.014999999999999999 * exp(-0.86074429771908767 - 0.012004801920768308 * var_chaste_interface__membrane__v);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 0.0081833060556464818 * exp(3.4155488244627148 + 0.014423770373575654 * var_chaste_interface__membrane__v) + 0.0081833060556464818 * exp(-6.2475442043222005 - 0.049115913555992145 * var_chaste_interface__membrane__v);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-1.2280159080866107 - 0.14729709824716453 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 12.98 + 1 / (4.1230000000000003e-5 * exp(1.4808635917566242 - 0.049067713444553483 * var_chaste_interface__membrane__v) + 0.36520000000000002 * exp(-3.6340139570948562 + 0.25846471956577927 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1.865 + 1 / (1.128e-5 * exp(0.4834232845026985 - 0.038550501156515031 * var_chaste_interface__membrane__v) + 0.066290000000000002 * exp(-2.3793337865397692 + 0.13596193065941536 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-1.2987012987012987 - 0.11195700850873264 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 817.29999999999995 + 1 / (0.001292 * exp(-0.91304347826086951 - 0.0043478260869565218 * var_chaste_interface__membrane__v) + 0.00023259999999999999 * exp(2.7123595505617977 + 0.056179775280898875 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 0.019300000000000001 * exp(-2.1464516129032258 - 0.032258064516129031 * var_chaste_interface__membrane__v) + 0.01 * exp(-2.5 + 0.050000000000000003 * var_chaste_interface__membrane__v);

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(12.620578778135048 + 0.16077170418006431 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 16.0 * exp(-0.054037868972050131 + 0.10888146075367747 * var_chaste_interface__membrane__v) + 3.6859999999999999e-6 * exp(-0.49472505376754605 - 0.12726046399165172 * var_chaste_interface__membrane__v);

                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (0.0097940000000000006 * exp(-0.63992869875222813 - 0.035650623885918005 * var_chaste_interface__membrane__v) + 0.33429999999999999 * exp(0.10112954465231205 + 0.017649135192375574 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(13.617363344051448 + 0.16077170418006431 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][26] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 4.859 + 1 / (0.86280000000000001 * exp(-15.357647523189264 - 0.13157029142819551 * var_chaste_interface__membrane__v) + 1.1095999999999999 * exp(0.69411673565151943 + 0.11067088691648774 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][27] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (8.5519999999999996 * exp(-13.000839630562552 - 0.16792611251049538 * var_chaste_interface__membrane__v) + 6.7649999999999997 * exp(0.33477135461604829 + 0.02876042565429968 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][28] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-6.401120907300438 - 0.13218246467423633 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][29] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 0.0050000000000000001 / (1.0 + exp(11.700053418803417 + 0.13354700854700854 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][30] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 0.0016666666666666668 / (1.0 + exp(12.528044871794872 + 0.13354700854700854 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][31] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-8.1401975683890573 - 0.18996960486322187 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][32] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(9.1578947368421044 + 0.10526315789473684 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][33] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 0.00050000000000000001 * exp(0.94999999999999996 + 0.016666666666666666 * var_chaste_interface__membrane__v) + 0.00050000000000000001 * exp(-13.199999999999999 - 0.10000000000000001 * var_chaste_interface__membrane__v);

                _lookup_table_0[i][34] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(2.0769230769230771 + 0.076923076923076927 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][35] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(1.5384615384615385 - 0.076923076923076927 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][36] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 3.3285782215882072 / (1.0 + exp(3.403513787634354 + 0.034035137876343539 * var_chaste_interface__membrane__v)) + 0.78668405081082138 / (1.0 + exp(0.62658348478969694 - 0.034035137876343539 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][37] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 6.1619999999999999 + 1 / (0.39329999999999998 * exp(-1.0 - 0.01 * var_chaste_interface__membrane__v) + 0.08004 * exp(-0.93131548311990686 + 0.11641443538998836 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][38] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = 43.0 + 1 / (1.7800000000000001e-8 * exp(14.123035029087756 + 0.12377769525931426 * var_chaste_interface__membrane__v) + 0.0014159999999999999 * exp(-1.6345469940728197 - 0.016934801016088061 * var_chaste_interface__membrane__v));

                _lookup_table_0[i][39] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<CellTrovato2020FromCellMLGRL1Opt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[40];

    // Lookup tables
    double (*_lookup_table_0)[40];
    int _lookup_table_0_num_misshit_piecewise[40] = {0};

};

std::shared_ptr<CellTrovato2020FromCellMLGRL1Opt_LookupTables> CellTrovato2020FromCellMLGRL1Opt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> CellTrovato2020FromCellMLGRL1Opt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__i_Stim_Amplitude_converted = -40.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__i_Stim_Period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__i_Stim_PulseDuration = 1.0; // millisecond
        const double var_chaste_interface__membrane__i_Stim_Start = 0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__i_Stim_Amplitude_converted),
                var_chaste_interface__membrane__i_Stim_PulseDuration,
                var_chaste_interface__membrane__i_Stim_Period,
                var_chaste_interface__membrane__i_Stim_Start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double CellTrovato2020FromCellMLGRL1Opt::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    CellTrovato2020FromCellMLGRL1Opt::CellTrovato2020FromCellMLGRL1Opt(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractGeneralizedRushLarsenCardiacCell(
                46,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<CellTrovato2020FromCellMLGRL1Opt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 1.8; // (var_extracellular__cao) [millimolar]
        this->mParameters[1] = 5.4000000000000004; // (var_extracellular__ko) [millimolar]
        this->mParameters[2] = 140.0; // (var_extracellular__nao) [millimolar]
        this->mParameters[3] = 96485.0; // (var_physical_constants__F) [coulomb_per_mole]
        this->mParameters[4] = 8314.0; // (var_physical_constants__R) [joule_per_kilomole_kelvin]
        this->mParameters[5] = 7.7676999999999995e-5; // (var_ICaL__PCa) [dimensionless]
        this->mParameters[6] = 39.4572; // (var_INa__GNa) [milliS_per_microF]
        this->mParameters[7] = 0.023199999999999998; // (var_If__GfK) [milliS_per_microF]
        this->mParameters[8] = 0.011599999999999999; // (var_If__GfNa) [milliS_per_microF]
        this->mParameters[9] = 0.045499999999999999; // (var_IK1__GK1) [milliS_per_microF]
        this->mParameters[10] = 0.0189; // (var_INaL__GNaL) [milliS_per_microF]
        this->mParameters[11] = 0.034200000000000001; // (var_IKr__GKr) [milliS_per_microF]
        this->mParameters[12] = 0.0028999999999999998; // (var_IKs__GKs) [milliS_per_microF]
        this->mParameters[13] = 0.192; // (var_Ito__Gto) [milliS_per_microF]
        this->mParameters[14] = 310.0; // (var_physical_constants__T) [kelvin]
    }

    CellTrovato2020FromCellMLGRL1Opt::~CellTrovato2020FromCellMLGRL1Opt()
    {
    }

    AbstractLookupTableCollection* CellTrovato2020FromCellMLGRL1Opt::GetLookupTableCollection()
    {
        return CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance();
    }
    
    double CellTrovato2020FromCellMLGRL1Opt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.00505983330678751
        double var_chaste_interface__intracellular_ions__nasl = rY[4];
        // Units: millimolar; Initial value: 8.23153516580562
        double var_chaste_interface__intracellular_ions__nass = rY[5];
        // Units: millimolar; Initial value: 8.23154325237268
        double var_chaste_interface__intracellular_ions__kss = rY[7];
        // Units: millimolar; Initial value: 143.767768218104
        double var_chaste_interface__intracellular_ions__ksl = rY[8];
        // Units: millimolar; Initial value: 143.767769906216
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__intracellular_ions__casl = rY[10];
        // Units: millimolar; Initial value: 0.000102004317781147
        double var_chaste_interface__INa__m = rY[14];
        // Units: dimensionless; Initial value: 0.00632661703915808
        double var_chaste_interface__INa__hf = rY[15];
        // Units: dimensionless; Initial value: 0.788611739889677
        double var_chaste_interface__INa__hs = rY[16];
        // Units: dimensionless; Initial value: 0.788545979951331
        double var_chaste_interface__INa__j = rY[17];
        // Units: dimensionless; Initial value: 0.790474358603666
        double var_chaste_interface__INa__hsp = rY[18];
        // Units: dimensionless; Initial value: 0.579693514309867
        double var_chaste_interface__INa__jp = rY[19];
        // Units: dimensionless; Initial value: 0.790947058236417
        double var_chaste_interface__INaL__mL = rY[20];
        // Units: dimensionless; Initial value: 0.000241925773627233
        double var_chaste_interface__INaL__hL = rY[21];
        // Units: dimensionless; Initial value: 0.463574582508218
        double var_chaste_interface__INaL__hLp = rY[22];
        // Units: dimensionless; Initial value: 0.240216198686475
        double var_chaste_interface__Ito__a = rY[23];
        // Units: dimensionless; Initial value: 0.000272851144435704
        double var_chaste_interface__Ito__i1 = rY[24];
        // Units: dimensionless; Initial value: 0.649604795721571
        double var_chaste_interface__Ito__i2 = rY[25];
        // Units: dimensionless; Initial value: 0.989965695822495
        double var_chaste_interface__ICaL__d = rY[26];
        // Units: dimensionless; Initial value: 6.97735089296892e-09
        double var_chaste_interface__ICaL__ff = rY[27];
        // Units: dimensionless; Initial value: 0.999999968230738
        double var_chaste_interface__ICaL__fs = rY[28];
        // Units: dimensionless; Initial value: 0.926692153319136
        double var_chaste_interface__ICaL__fcaf = rY[29];
        // Units: dimensionless; Initial value: 0.99999996819573
        double var_chaste_interface__ICaL__fcas = rY[30];
        // Units: dimensionless; Initial value: 0.999999905741936
        double var_chaste_interface__ICaL__jca = rY[31];
        // Units: dimensionless; Initial value: 0.999978907334662
        double var_chaste_interface__ICaL__ffp = rY[32];
        // Units: dimensionless; Initial value: 0.999999968365903
        double var_chaste_interface__ICaL__fcafp = rY[33];
        // Units: dimensionless; Initial value: 0.999999968278239
        double var_chaste_interface__ICaL__nca = rY[34];
        // Units: dimensionless; Initial value: 0.00547252500964926
        double var_chaste_interface__ICaT__b = rY[35];
        // Units: dimensionless; Initial value: 0.000304250912559619
        double var_chaste_interface__ICaT__g = rY[36];
        // Units: dimensionless; Initial value: 0.994214357917907
        double var_chaste_interface__IKr__xrf = rY[37];
        // Units: dimensionless; Initial value: 0.000331691184084272
        double var_chaste_interface__IKr__xrs = rY[38];
        // Units: dimensionless; Initial value: 0.568716473334161
        double var_chaste_interface__IKs__xs1 = rY[39];
        // Units: dimensionless; Initial value: 0.191165248085394
        double var_chaste_interface__IKs__xs2 = rY[40];
        // Units: dimensionless; Initial value: 0.000222677365291219
        double var_chaste_interface__If__y = rY[41];
        // Units: dimensionless; Initial value: 0.233119011214908
        double var_chaste_interface__IK1__xk1 = rY[42];
        // Units: dimensionless; Initial value: 0.997084813729909
        
        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        const double var_ICaL__PCap = 1.1000000000000001 * mParameters[5]; // dimensionless
        const double var_ICaL__f = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ff; // dimensionless
        const double var_ICaL__fp = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ffp; // dimensionless
        const double var_INaCa_i__h10_i = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]; // dimensionless
        const double var_INaCa_i__h10_ss = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]; // dimensionless
        const double var_INaCa_i__k1_i = 1500000.0 * mParameters[0] / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k1_ss = 1500000.0 * mParameters[0] / var_INaCa_i__h10_ss; // dimensionless
        const double var_IpCa__IpCa = 0.00050000000000000001 * var_chaste_interface__intracellular_ions__casl / (0.00050000000000000001 + var_chaste_interface__intracellular_ions__casl); // microA_per_microF
        const double var_CaMK__CaMKa = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass) + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__h4_i = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nasl) * var_chaste_interface__intracellular_ions__nasl; // dimensionless
        const double var_INaCa_i__k6_i = 1500000.0 * var_chaste_interface__intracellular_ions__casl / var_INaCa_i__h4_i; // dimensionless
        const double var_INaK__b3 = 5.7707741857267899e-10 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ksl + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nasl); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__k6_ss = 1500000.0 * var_chaste_interface__intracellular_ions__cass / var_INaCa_i__h4_ss; // dimensionless
        const double var_ICaL__Afcaf = _lt_0_row[0]; // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_IKr__Axrf = _lt_0_row[1]; // dimensionless
        const double var_ICaL__ICaK = 0.00035740000000000001 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * mParameters[5] * var_chaste_interface__ICaL__d + 0.00035740000000000001 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (4.0 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * mParameters[5] * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (4.0 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaNa = 0.00125 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * mParameters[5] * var_chaste_interface__ICaL__d + 0.00125 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-4.9999999999999992e-15 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (4.9999999999999992e-15 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 4.9999999999999992e-15 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (9.9999999999999995e-8 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))); // microA_per_microF
        const double var_INaCa_i__hca = exp(0.16700000000000001 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // dimensionless
        const double var_INaCa_i__hna = exp(0.52239999999999998 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nasl; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__h2_i = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nasl / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h2_ss = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[2]; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[2]; // dimensionless
        const double var_INaCa_i__h8_i = 0.011348161597821153 * mParameters[2] / (var_INaCa_i__h7_i * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__h8_ss = 0.011348161597821153 * mParameters[2] / (var_INaCa_i__h7_ss * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__k3pp_i = 5000.0 * var_INaCa_i__h8_i; // dimensionless
        const double var_INaCa_i__k3_i = 60000.0 / var_INaCa_i__h7_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = 5000.0 * var_INaCa_i__h8_ss; // dimensionless
        const double var_INaCa_i__k3_ss = 60000.0 / var_INaCa_i__h7_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4pp_i = 5000.0 * var_INaCa_i__h2_i; // dimensionless
        const double var_INaCa_i__k4_i = 60000.0 / (var_INaCa_i__h1_i * var_INaCa_i__hca) + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = 5000.0 * var_INaCa_i__h2_ss; // dimensionless
        const double var_INaCa_i__k4_ss = 60000.0 / (var_INaCa_i__h1_ss * var_INaCa_i__hca) + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = 800.0 * pow(var_chaste_interface__intracellular_ions__nasl, 2) * var_INaCa_i__h2_i / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k7_ss = 800.0 * pow(var_chaste_interface__intracellular_ions__nass, 2) * var_INaCa_i__h2_ss / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k8_i = 800.0 * pow(mParameters[2], 2) * var_INaCa_i__h8_i / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k8_ss = 800.0 * pow(mParameters[2], 2) * var_INaCa_i__h8_ss / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__x1_i = 5000.0 * (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k7_i + 5000.0 * (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = 5000.0 * (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k7_ss + 5000.0 * (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i + (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i; // dimensionless
        const double var_INaCa_i__x2_ss = (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss; // dimensionless
        const double var_INaCa_i__x3_i = (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = 5000.0 * (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k8_i + 5000.0 * (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__x4_ss = 5000.0 * (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k8_ss + 5000.0 * (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaK__Knai = 9.0730000000000004 * exp(-0.051666666666666666 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // millimolar
        const double var_INaK__Knao = 27.780000000000001 * exp(0.38500000000000001 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // millimolar
        const double var_INaK__a1 = 949.5 * pow(var_chaste_interface__intracellular_ions__nasl, 3) / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nasl / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ksl), 2)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = 14800.411886344058 * pow(mParameters[1], 2) / (-1.0 + pow((1.0 + mParameters[2] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[1]), 2)); // dimensionless
        const double var_INaK__b2 = 39.399999999999999 * pow(mParameters[2], 3) / ((-1.0 + pow((1.0 + mParameters[2] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[1]), 2)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = 160.0 * pow(var_chaste_interface__intracellular_ions__ksl, 2) / (-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nasl / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ksl), 2)); // dimensionless
        const double var_INaK__x1 = 439120.79239156016 * var_INaK__a1 + 687.20000000000005 * var_INaK__a1 * var_INaK__b3 + 687.20000000000005 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = 687.20000000000005 * var_INaK__a1 * var_INaK__a3 + 696.32000000000005 * var_INaK__a3 * var_INaK__b4 + 9.120000000000001 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = 444948.47229058668 * var_INaK__a3 + 5827.6798990265261 * var_INaK__b2 + 9.120000000000001 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = 638.99998892834708 * var_INaK__a1 * var_INaK__a3 + 638.99998892834708 * var_INaK__a1 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.3749999999999983e-17 * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (9.3749999999999983e-17 * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.3749999999999983e-17 * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (9.3749999999999992e-10 * pow(mParameters[3], 2) * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))); // microA_per_microF
        const double var_INaCa_i__INaCa_i = 0.00076567200000000001 * (10000.0 * var_INaCa_i__E2_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i - 2.0 * var_INaCa_i__E1_i * var_INaCa_i__k1_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i + var_INaCa_i__k4pp_i * var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i) + 3.0 * var_INaCa_i__k7_i * var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i)) / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__casl, 2)); // microA_per_microF
        const double var_INaCa_i__INaCa_ss = 0.000191418 * (10000.0 * var_INaCa_i__E2_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss - 2.0 * var_INaCa_i__E1_ss * var_INaCa_i__k1_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss + var_INaCa_i__k4pp_ss * var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss) + 3.0 * var_INaCa_i__k7_ss * var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss)) / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cass, 2)); // microA_per_microF
        const double var_INaK__INaK = 592.56652800000006 * var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) + 97.461600000000004 * var_INaK__a3 * var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 64.974400000000003 * var_INaK__a1 * var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 97.461600000000004 * var_INaK__b3 * var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // microA_per_microF
        const double var_ICaT__ICaT = 0.075399999999999995 * (-0.5 * mParameters[4] * mParameters[14] * log(mParameters[0] / var_chaste_interface__intracellular_ions__casl) / mParameters[3] + var_chaste_interface__membrane__v) * var_chaste_interface__ICaT__b * var_chaste_interface__ICaT__g; // microA_per_microF
        const double var_reversal_potentials__EK = mParameters[4] * mParameters[14] * log(mParameters[1] / var_chaste_interface__intracellular_ions__ksl) / mParameters[3]; // millivolt
        const double var_IK1__IK1_converted = 1.000004299990755 * sqrt(mParameters[1]) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * HeartConfig::Instance()->GetCapacitance() * mParameters[9] * var_chaste_interface__IK1__xk1 / (1.0 + exp(10.545454545454545 + 0.090909090909090912 * var_chaste_interface__membrane__v - 0.5 * mParameters[1])); // uA_per_cm2
        const double var_IKr__IKr_converted = 0.43033148291193518 * sqrt(mParameters[1]) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - var_IKr__Axrf) * var_chaste_interface__IKr__xrs + var_IKr__Axrf * var_chaste_interface__IKr__xrf) * HeartConfig::Instance()->GetCapacitance() * mParameters[11] / ((_lt_0_row[2]) * (_lt_0_row[3])); // uA_per_cm2
        const double var_Isus__Isus = 0.030099999999999998 * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) / (_lt_0_row[4]); // microA_per_microF
        const double var_Ito__Ito_converted = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * HeartConfig::Instance()->GetCapacitance() * mParameters[13] * var_chaste_interface__Ito__a * var_chaste_interface__Ito__i1 * var_chaste_interface__Ito__i2; // uA_per_cm2
        const double var_reversal_potentials__ENa = mParameters[4] * mParameters[14] * log(mParameters[2] / var_chaste_interface__intracellular_ions__nasl) / mParameters[3]; // millivolt
        const double var_INa__INa_converted = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (0.010000000000000009 * var_chaste_interface__INa__hs + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__j + (0.010000000000000009 * var_chaste_interface__INa__hsp + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__jp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * HeartConfig::Instance()->GetCapacitance() * mParameters[6]; // uA_per_cm2
        const double var_INaL__INaL_converted = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * var_chaste_interface__INaL__hL + var_chaste_interface__INaL__hLp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * HeartConfig::Instance()->GetCapacitance() * mParameters[10] * var_chaste_interface__INaL__mL; // uA_per_cm2
        const double var_If__If_converted = (pow(var_chaste_interface__If__y, 2) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * mParameters[7] + pow(var_chaste_interface__If__y, 2) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * mParameters[8]) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_IKs__IKs_converted = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__casl), 1.3999999999999999))) * (-mParameters[4] * mParameters[14] * log((0.018329999999999999 * mParameters[2] + mParameters[1]) / (0.018329999999999999 * var_chaste_interface__intracellular_ions__nasl + var_chaste_interface__intracellular_ions__ksl)) / mParameters[3] + var_chaste_interface__membrane__v) * HeartConfig::Instance()->GetCapacitance() * mParameters[12] * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_cm2
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaK + HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaL + HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaNa + HeartConfig::Instance()->GetCapacitance() * var_ICaT__ICaT + HeartConfig::Instance()->GetCapacitance() * var_ICab__ICab + HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__INaCa_i + HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__INaCa_ss + HeartConfig::Instance()->GetCapacitance() * var_INaK__INaK + HeartConfig::Instance()->GetCapacitance() * var_INab__INab + HeartConfig::Instance()->GetCapacitance() * var_IpCa__IpCa + HeartConfig::Instance()->GetCapacitance() * var_Isus__Isus + var_IK1__IK1_converted + var_IKr__IKr_converted + var_IKs__IKs_converted + var_INa__INa_converted + var_INaL__INaL_converted + var_If__If_converted + var_Ito__Ito_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void CellTrovato2020FromCellMLGRL1Opt::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        unsigned v_index = GetVoltageIndex();
        const double delta = 1e-8;

        double d_dt_chaste_interface_var_membrane__v;
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.00505983330678751
        double var_chaste_interface__intracellular_ions__nasl = rY[4];
        // Units: millimolar; Initial value: 8.23153516580562
        double var_chaste_interface__intracellular_ions__nass = rY[5];
        // Units: millimolar; Initial value: 8.23154325237268
        double var_chaste_interface__intracellular_ions__kss = rY[7];
        // Units: millimolar; Initial value: 143.767768218104
        double var_chaste_interface__intracellular_ions__ksl = rY[8];
        // Units: millimolar; Initial value: 143.767769906216
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__intracellular_ions__casl = rY[10];
        // Units: millimolar; Initial value: 0.000102004317781147
        double var_chaste_interface__INa__m = rY[14];
        // Units: dimensionless; Initial value: 0.00632661703915808
        double var_chaste_interface__INa__hf = rY[15];
        // Units: dimensionless; Initial value: 0.788611739889677
        double var_chaste_interface__INa__hs = rY[16];
        // Units: dimensionless; Initial value: 0.788545979951331
        double var_chaste_interface__INa__j = rY[17];
        // Units: dimensionless; Initial value: 0.790474358603666
        double var_chaste_interface__INa__hsp = rY[18];
        // Units: dimensionless; Initial value: 0.579693514309867
        double var_chaste_interface__INa__jp = rY[19];
        // Units: dimensionless; Initial value: 0.790947058236417
        double var_chaste_interface__INaL__mL = rY[20];
        // Units: dimensionless; Initial value: 0.000241925773627233
        double var_chaste_interface__INaL__hL = rY[21];
        // Units: dimensionless; Initial value: 0.463574582508218
        double var_chaste_interface__INaL__hLp = rY[22];
        // Units: dimensionless; Initial value: 0.240216198686475
        double var_chaste_interface__Ito__a = rY[23];
        // Units: dimensionless; Initial value: 0.000272851144435704
        double var_chaste_interface__Ito__i1 = rY[24];
        // Units: dimensionless; Initial value: 0.649604795721571
        double var_chaste_interface__Ito__i2 = rY[25];
        // Units: dimensionless; Initial value: 0.989965695822495
        double var_chaste_interface__ICaL__d = rY[26];
        // Units: dimensionless; Initial value: 6.97735089296892e-09
        double var_chaste_interface__ICaL__ff = rY[27];
        // Units: dimensionless; Initial value: 0.999999968230738
        double var_chaste_interface__ICaL__fs = rY[28];
        // Units: dimensionless; Initial value: 0.926692153319136
        double var_chaste_interface__ICaL__fcaf = rY[29];
        // Units: dimensionless; Initial value: 0.99999996819573
        double var_chaste_interface__ICaL__fcas = rY[30];
        // Units: dimensionless; Initial value: 0.999999905741936
        double var_chaste_interface__ICaL__jca = rY[31];
        // Units: dimensionless; Initial value: 0.999978907334662
        double var_chaste_interface__ICaL__ffp = rY[32];
        // Units: dimensionless; Initial value: 0.999999968365903
        double var_chaste_interface__ICaL__fcafp = rY[33];
        // Units: dimensionless; Initial value: 0.999999968278239
        double var_chaste_interface__ICaL__nca = rY[34];
        // Units: dimensionless; Initial value: 0.00547252500964926
        double var_chaste_interface__ICaT__b = rY[35];
        // Units: dimensionless; Initial value: 0.000304250912559619
        double var_chaste_interface__ICaT__g = rY[36];
        // Units: dimensionless; Initial value: 0.994214357917907
        double var_chaste_interface__IKr__xrf = rY[37];
        // Units: dimensionless; Initial value: 0.000331691184084272
        double var_chaste_interface__IKr__xrs = rY[38];
        // Units: dimensionless; Initial value: 0.568716473334161
        double var_chaste_interface__IKs__xs1 = rY[39];
        // Units: dimensionless; Initial value: 0.191165248085394
        double var_chaste_interface__IKs__xs2 = rY[40];
        // Units: dimensionless; Initial value: 0.000222677365291219
        double var_chaste_interface__If__y = rY[41];
        // Units: dimensionless; Initial value: 0.233119011214908
        double var_chaste_interface__IK1__xk1 = rY[42];
        // Units: dimensionless; Initial value: 0.997084813729909
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_ICaL__PCap = 1.1000000000000001 * mParameters[5]; // dimensionless
        const double var_ICaL__f = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ff; // dimensionless
        const double var_ICaL__fp = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ffp; // dimensionless
        const double var_INaCa_i__h10_i = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]; // dimensionless
        const double var_INaCa_i__h10_ss = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]; // dimensionless
        const double var_INaCa_i__k1_i = 1500000.0 * mParameters[0] / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k1_ss = 1500000.0 * mParameters[0] / var_INaCa_i__h10_ss; // dimensionless
        const double var_IpCa__IpCa = 0.00050000000000000001 * var_chaste_interface__intracellular_ions__casl / (0.00050000000000000001 + var_chaste_interface__intracellular_ions__casl); // microA_per_microF
        const double var_CaMK__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__h4_i = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nasl) * var_chaste_interface__intracellular_ions__nasl; // dimensionless
        const double var_INaCa_i__k6_i = 1500000.0 * var_chaste_interface__intracellular_ions__casl / var_INaCa_i__h4_i; // dimensionless
        const double var_INaK__b3 = 5.7707741857267899e-10 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ksl + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nasl); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__k6_ss = 1500000.0 * var_chaste_interface__intracellular_ions__cass / var_INaCa_i__h4_ss; // dimensionless
        const double var_membrane__Istim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double var_ICaL__Afcaf = _lt_0_row[0]; // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_IKr__Axrf = _lt_0_row[1]; // dimensionless
        const double var_ICaL__ICaK = 0.00035740000000000001 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * mParameters[5] * var_chaste_interface__ICaL__d + 0.00035740000000000001 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (4.0 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * mParameters[5] * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (4.0 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaNa = 0.00125 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * mParameters[5] * var_chaste_interface__ICaL__d + 0.00125 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-4.9999999999999992e-15 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (4.9999999999999992e-15 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 4.9999999999999992e-15 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (9.9999999999999995e-8 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))); // microA_per_microF
        const double var_INaCa_i__hca = exp(0.16700000000000001 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // dimensionless
        const double var_INaCa_i__hna = exp(0.52239999999999998 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nasl; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__h2_i = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nasl / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h2_ss = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[2]; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[2]; // dimensionless
        const double var_INaCa_i__h8_i = 0.011348161597821153 * mParameters[2] / (var_INaCa_i__h7_i * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__h8_ss = 0.011348161597821153 * mParameters[2] / (var_INaCa_i__h7_ss * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__k3pp_i = 5000.0 * var_INaCa_i__h8_i; // dimensionless
        const double var_INaCa_i__k3_i = 60000.0 / var_INaCa_i__h7_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = 5000.0 * var_INaCa_i__h8_ss; // dimensionless
        const double var_INaCa_i__k3_ss = 60000.0 / var_INaCa_i__h7_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4pp_i = 5000.0 * var_INaCa_i__h2_i; // dimensionless
        const double var_INaCa_i__k4_i = 60000.0 / (var_INaCa_i__h1_i * var_INaCa_i__hca) + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = 5000.0 * var_INaCa_i__h2_ss; // dimensionless
        const double var_INaCa_i__k4_ss = 60000.0 / (var_INaCa_i__h1_ss * var_INaCa_i__hca) + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = 800.0 * pow(var_chaste_interface__intracellular_ions__nasl, 2) * var_INaCa_i__h2_i / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k7_ss = 800.0 * pow(var_chaste_interface__intracellular_ions__nass, 2) * var_INaCa_i__h2_ss / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k8_i = 800.0 * pow(mParameters[2], 2) * var_INaCa_i__h8_i / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k8_ss = 800.0 * pow(mParameters[2], 2) * var_INaCa_i__h8_ss / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__x1_i = 5000.0 * (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k7_i + 5000.0 * (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = 5000.0 * (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k7_ss + 5000.0 * (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i + (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i; // dimensionless
        const double var_INaCa_i__x2_ss = (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss; // dimensionless
        const double var_INaCa_i__x3_i = (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = 5000.0 * (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k8_i + 5000.0 * (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__x4_ss = 5000.0 * (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k8_ss + 5000.0 * (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaK__Knai = 9.0730000000000004 * exp(-0.051666666666666666 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // millimolar
        const double var_INaK__Knao = 27.780000000000001 * exp(0.38500000000000001 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // millimolar
        const double var_INaK__a1 = 949.5 * pow(var_chaste_interface__intracellular_ions__nasl, 3) / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nasl / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ksl), 2)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = 14800.411886344058 * pow(mParameters[1], 2) / (-1.0 + pow((1.0 + mParameters[2] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[1]), 2)); // dimensionless
        const double var_INaK__b2 = 39.399999999999999 * pow(mParameters[2], 3) / ((-1.0 + pow((1.0 + mParameters[2] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[1]), 2)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = 160.0 * pow(var_chaste_interface__intracellular_ions__ksl, 2) / (-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nasl / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ksl), 2)); // dimensionless
        const double var_INaK__x1 = 439120.79239156016 * var_INaK__a1 + 687.20000000000005 * var_INaK__a1 * var_INaK__b3 + 687.20000000000005 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = 687.20000000000005 * var_INaK__a1 * var_INaK__a3 + 696.32000000000005 * var_INaK__a3 * var_INaK__b4 + 9.120000000000001 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = 444948.47229058668 * var_INaK__a3 + 5827.6798990265261 * var_INaK__b2 + 9.120000000000001 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = 638.99998892834708 * var_INaK__a1 * var_INaK__a3 + 638.99998892834708 * var_INaK__a1 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.3749999999999983e-17 * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (9.3749999999999983e-17 * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.3749999999999983e-17 * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (9.3749999999999992e-10 * pow(mParameters[3], 2) * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))); // microA_per_microF
        const double var_INaCa_i__INaCa_i = 0.00076567200000000001 * (10000.0 * var_INaCa_i__E2_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i - 2.0 * var_INaCa_i__E1_i * var_INaCa_i__k1_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i + var_INaCa_i__k4pp_i * var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i) + 3.0 * var_INaCa_i__k7_i * var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i)) / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__casl, 2)); // microA_per_microF
        const double var_INaCa_i__INaCa_ss = 0.000191418 * (10000.0 * var_INaCa_i__E2_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss - 2.0 * var_INaCa_i__E1_ss * var_INaCa_i__k1_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss + var_INaCa_i__k4pp_ss * var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss) + 3.0 * var_INaCa_i__k7_ss * var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss)) / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cass, 2)); // microA_per_microF
        const double var_INaK__INaK = 592.56652800000006 * var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) + 97.461600000000004 * var_INaK__a3 * var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 64.974400000000003 * var_INaK__a1 * var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 97.461600000000004 * var_INaK__b3 * var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // microA_per_microF
        const double var_ICaT__ICaT = 0.075399999999999995 * (-0.5 * mParameters[4] * mParameters[14] * log(mParameters[0] / var_chaste_interface__intracellular_ions__casl) / mParameters[3] + var_chaste_interface__membrane__v) * var_chaste_interface__ICaT__b * var_chaste_interface__ICaT__g; // microA_per_microF
        const double var_reversal_potentials__EK = mParameters[4] * mParameters[14] * log(mParameters[1] / var_chaste_interface__intracellular_ions__ksl) / mParameters[3]; // millivolt
        const double var_IK1__IK1 = 1.000004299990755 * sqrt(mParameters[1]) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * mParameters[9] * var_chaste_interface__IK1__xk1 / (1.0 + exp(10.545454545454545 + 0.090909090909090912 * var_chaste_interface__membrane__v - 0.5 * mParameters[1])); // microA_per_microF
        const double var_IKr__IKr = 0.43033148291193518 * sqrt(mParameters[1]) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - var_IKr__Axrf) * var_chaste_interface__IKr__xrs + var_IKr__Axrf * var_chaste_interface__IKr__xrf) * mParameters[11] / ((_lt_0_row[2]) * (_lt_0_row[3])); // microA_per_microF
        const double var_If__IfK = pow(var_chaste_interface__If__y, 2) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * mParameters[7]; // microA_per_microF
        const double var_Isus__Isus = 0.030099999999999998 * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) / (_lt_0_row[4]); // microA_per_microF
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * mParameters[13] * var_chaste_interface__Ito__a * var_chaste_interface__Ito__i1 * var_chaste_interface__Ito__i2; // microA_per_microF
        const double var_reversal_potentials__ENa = mParameters[4] * mParameters[14] * log(mParameters[2] / var_chaste_interface__intracellular_ions__nasl) / mParameters[3]; // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (0.010000000000000009 * var_chaste_interface__INa__hs + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__j + (0.010000000000000009 * var_chaste_interface__INa__hsp + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__jp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * mParameters[6]; // microA_per_microF
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * var_chaste_interface__INaL__hL + var_chaste_interface__INaL__hLp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * mParameters[10] * var_chaste_interface__INaL__mL; // microA_per_microF
        const double var_If__IfNa = pow(var_chaste_interface__If__y, 2) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * mParameters[8]; // microA_per_microF
        const double var_IKs__IKs = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__casl), 1.3999999999999999))) * (-mParameters[4] * mParameters[14] * log((0.018329999999999999 * mParameters[2] + mParameters[1]) / (0.018329999999999999 * var_chaste_interface__intracellular_ions__nasl + var_chaste_interface__intracellular_ions__ksl)) / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[12] * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        d_dt_chaste_interface_var_membrane__v = -var_ICaL__ICaK - var_ICaL__ICaL - var_ICaL__ICaNa - var_ICaT__ICaT - var_ICab__ICab - var_IK1__IK1 - var_IKr__IKr - var_IKs__IKs - var_INa__INa - var_INaCa_i__INaCa_i - var_INaCa_i__INaCa_ss - var_INaK__INaK - var_INaL__INaL - var_INab__INab - var_If__IfK - var_If__IfNa - var_IpCa__IpCa - var_Isus__Isus - var_Ito__Ito - var_membrane__Istim; // millivolt / millisecond

        double evalF = d_dt_chaste_interface_var_membrane__v;
        mEvalF[0] = d_dt_chaste_interface_var_membrane__v;
        double partialF = EvaluatePartialDerivative0(var_chaste_interface__environment__time, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] += evalF*mDt;
        }
        else
        {
            rY[v_index] += (evalF/partialF)*(exp(partialF*mDt)-1.0);
        }
    }

    void CellTrovato2020FromCellMLGRL1Opt::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        const double delta = 1e-8;

        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 4.36004404734282e-05
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.00505983330678751
        double var_chaste_interface__intracellular_ions__nai = rY[3];
        // Units: millimolar; Initial value: 8.23183964616932
        double var_chaste_interface__intracellular_ions__nasl = rY[4];
        // Units: millimolar; Initial value: 8.23153516580562
        double var_chaste_interface__intracellular_ions__nass = rY[5];
        // Units: millimolar; Initial value: 8.23154325237268
        double var_chaste_interface__intracellular_ions__ki = rY[6];
        // Units: millimolar; Initial value: 143.767359809132
        double var_chaste_interface__intracellular_ions__kss = rY[7];
        // Units: millimolar; Initial value: 143.767768218104
        double var_chaste_interface__intracellular_ions__ksl = rY[8];
        // Units: millimolar; Initial value: 143.767769906216
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__intracellular_ions__casl = rY[10];
        // Units: millimolar; Initial value: 0.000102004317781147
        double var_chaste_interface__intracellular_ions__cansr = rY[11];
        // Units: millimolar; Initial value: 1.26350902016858
        double var_chaste_interface__intracellular_ions__cajsr = rY[12];
        // Units: millimolar; Initial value: 1.24811940209535
        double var_chaste_interface__intracellular_ions__cacsr = rY[13];
        // Units: millimolar; Initial value: 1.26516959198518
        double var_chaste_interface__INa__m = rY[14];
        // Units: dimensionless; Initial value: 0.00632661703915808
        double var_chaste_interface__INa__hf = rY[15];
        // Units: dimensionless; Initial value: 0.788611739889677
        double var_chaste_interface__INa__hs = rY[16];
        // Units: dimensionless; Initial value: 0.788545979951331
        double var_chaste_interface__INa__j = rY[17];
        // Units: dimensionless; Initial value: 0.790474358603666
        double var_chaste_interface__INa__hsp = rY[18];
        // Units: dimensionless; Initial value: 0.579693514309867
        double var_chaste_interface__INa__jp = rY[19];
        // Units: dimensionless; Initial value: 0.790947058236417
        double var_chaste_interface__INaL__mL = rY[20];
        // Units: dimensionless; Initial value: 0.000241925773627233
        double var_chaste_interface__INaL__hL = rY[21];
        // Units: dimensionless; Initial value: 0.463574582508218
        double var_chaste_interface__INaL__hLp = rY[22];
        // Units: dimensionless; Initial value: 0.240216198686475
        double var_chaste_interface__Ito__a = rY[23];
        // Units: dimensionless; Initial value: 0.000272851144435704
        double var_chaste_interface__Ito__i1 = rY[24];
        // Units: dimensionless; Initial value: 0.649604795721571
        double var_chaste_interface__Ito__i2 = rY[25];
        // Units: dimensionless; Initial value: 0.989965695822495
        double var_chaste_interface__ICaL__d = rY[26];
        // Units: dimensionless; Initial value: 6.97735089296892e-09
        double var_chaste_interface__ICaL__ff = rY[27];
        // Units: dimensionless; Initial value: 0.999999968230738
        double var_chaste_interface__ICaL__fs = rY[28];
        // Units: dimensionless; Initial value: 0.926692153319136
        double var_chaste_interface__ICaL__fcaf = rY[29];
        // Units: dimensionless; Initial value: 0.99999996819573
        double var_chaste_interface__ICaL__fcas = rY[30];
        // Units: dimensionless; Initial value: 0.999999905741936
        double var_chaste_interface__ICaL__jca = rY[31];
        // Units: dimensionless; Initial value: 0.999978907334662
        double var_chaste_interface__ICaL__ffp = rY[32];
        // Units: dimensionless; Initial value: 0.999999968365903
        double var_chaste_interface__ICaL__fcafp = rY[33];
        // Units: dimensionless; Initial value: 0.999999968278239
        double var_chaste_interface__ICaL__nca = rY[34];
        // Units: dimensionless; Initial value: 0.00547252500964926
        double var_chaste_interface__ICaT__b = rY[35];
        // Units: dimensionless; Initial value: 0.000304250912559619
        double var_chaste_interface__ICaT__g = rY[36];
        // Units: dimensionless; Initial value: 0.994214357917907
        double var_chaste_interface__IKr__xrf = rY[37];
        // Units: dimensionless; Initial value: 0.000331691184084272
        double var_chaste_interface__IKr__xrs = rY[38];
        // Units: dimensionless; Initial value: 0.568716473334161
        double var_chaste_interface__IKs__xs1 = rY[39];
        // Units: dimensionless; Initial value: 0.191165248085394
        double var_chaste_interface__IKs__xs2 = rY[40];
        // Units: dimensionless; Initial value: 0.000222677365291219
        double var_chaste_interface__If__y = rY[41];
        // Units: dimensionless; Initial value: 0.233119011214908
        double var_chaste_interface__IK1__xk1 = rY[42];
        // Units: dimensionless; Initial value: 0.997084813729909
        double var_chaste_interface__ryr__Jrel1 = rY[43];
        // Units: millimolar_per_millisecond; Initial value: 0.000108240945806962
        double var_chaste_interface__ryr__Jrel2 = rY[44];
        // Units: millimolar_per_millisecond; Initial value: 1.25045800437317e-69
        double var_chaste_interface__IP3__u = rY[45];
        // Units: millimolar_per_millisecond; Initial value: 0.466236137183558
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_ICaL__PCap = 1.1000000000000001 * mParameters[5]; // dimensionless
        const double var_ICaL__f = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ff; // dimensionless
        const double var_ICaL__fp = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ffp; // dimensionless
        const double var_ICaL__km2n = var_chaste_interface__ICaL__jca; // per_millisecond
        const double var_INaCa_i__h10_i = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]; // dimensionless
        const double var_INaCa_i__h10_ss = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]; // dimensionless
        const double var_INaCa_i__k1_i = 1500000.0 * mParameters[0] / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k1_ss = 1500000.0 * mParameters[0] / var_INaCa_i__h10_ss; // dimensionless
        const double var_IpCa__IpCa = 0.00050000000000000001 * var_chaste_interface__intracellular_ions__casl / (0.00050000000000000001 + var_chaste_interface__intracellular_ions__casl); // microA_per_microF
        const double var_diff__Jgap = 0.083333333333333329 * var_chaste_interface__intracellular_ions__casl - 0.083333333333333329 * var_chaste_interface__intracellular_ions__cai; // millimolar_per_millisecond
        const double var_CaMK__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double d_dt_chaste_interface_var_CaMK__CaMKt = -0.00068000000000000005 * var_chaste_interface__CaMK__CaMKt + 0.050000000000000003 * (var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKb; // millimolar / millisecond
        const double d_dt_chaste_interface_var_IP3__u = -0.20999999999999999 * var_chaste_interface__IP3__u + 1800.0 * (1.0 - var_chaste_interface__IP3__u) * var_chaste_interface__intracellular_ions__cass; // millimolar_per_millisecond / millisecond
        const double d_dt_chaste_interface_var_ICaL__nca = 1000.0 / (pow((1.0 + 0.002 / var_chaste_interface__intracellular_ions__cass), 4) + 1000.0 / var_ICaL__km2n) - var_ICaL__km2n * var_chaste_interface__ICaL__nca; // 1 / millisecond
        const double var_ICaL__fICaLp = 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa); // dimensionless
        const double var_IP3__Jip3 = 0.0020202000000000002 * (1.0 - var_chaste_interface__IP3__u) * (-var_chaste_interface__intracellular_ions__cass + var_chaste_interface__intracellular_ions__cajsr) * var_chaste_interface__intracellular_ions__cass / (1.0 + 9090.9090909090901 * var_chaste_interface__intracellular_ions__cass); // millimolar_per_millisecond
        const double var_SERCA__dkmplb = 0.00017000000000000001 * var_CaMK__CaMKa / (0.14999999999999999 + var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__dqupcamk = 0.75 * var_CaMK__CaMKa / (0.14999999999999999 + var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__Jup1 = -6.9999999999999994e-5 * var_chaste_interface__intracellular_ions__cansr + 0.00020000000000000001 * (1.0 + var_SERCA__dqupcamk) / (1.0 + (0.00027999999999999998 - var_SERCA__dkmplb) / var_chaste_interface__intracellular_ions__casl); // millimolar_per_millisecond
        const double var_SERCA__Jup2 = -0.00027999999999999998 * var_chaste_interface__intracellular_ions__cansr + 0.0025999999999999999 * (1.0 + var_SERCA__dqupcamk) / (1.0 + (0.00027999999999999998 - var_SERCA__dkmplb) / var_chaste_interface__intracellular_ions__cai); // millimolar_per_millisecond
        const double var_diff__Jdiff = 5.0 * var_chaste_interface__intracellular_ions__cass - 5.0 * var_chaste_interface__intracellular_ions__casl; // millimolar_per_millisecond
        const double var_diff__JgapK = 0.083333333333333329 * var_chaste_interface__intracellular_ions__ksl - 0.083333333333333329 * var_chaste_interface__intracellular_ions__ki; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__ki = 0.25 * var_diff__JgapK; // millimolar / millisecond
        const double var_diff__JdiffK = 5.0 * var_chaste_interface__intracellular_ions__kss - 5.0 * var_chaste_interface__intracellular_ions__ksl; // millimolar_per_millisecond
        const double var_INaCa_i__h4_i = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nasl) * var_chaste_interface__intracellular_ions__nasl; // dimensionless
        const double var_INaCa_i__k6_i = 1500000.0 * var_chaste_interface__intracellular_ions__casl / var_INaCa_i__h4_i; // dimensionless
        const double var_INaK__b3 = 5.7707741857267899e-10 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ksl + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nasl); // dimensionless
        const double var_diff__JgapNa = 0.083333333333333329 * var_chaste_interface__intracellular_ions__nasl - 0.083333333333333329 * var_chaste_interface__intracellular_ions__nai; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__nai = 0.25 * var_diff__JgapNa; // millimolar / millisecond
        const double var_INaCa_i__h4_ss = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__k6_ss = 1500000.0 * var_chaste_interface__intracellular_ions__cass / var_INaCa_i__h4_ss; // dimensionless
        const double var_diff__JdiffNa = 5.0 * var_chaste_interface__intracellular_ions__nass - 5.0 * var_chaste_interface__intracellular_ions__nasl; // millimolar_per_millisecond
        const double var_membrane__Istim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double var_ICaL__Afcaf = _lt_0_row[0]; // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fss = _lt_0_row[5]; // dimensionless
        const double var_ICaL__fcass = var_ICaL__fss; // dimensionless
        const double d_dt_chaste_interface_var_ICaL__jca = 0.013333333333333334 * var_ICaL__fcass - 0.013333333333333334 * var_chaste_interface__ICaL__jca; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL__d = (-var_chaste_interface__ICaL__d + _lt_0_row[6]) / (_lt_0_row[7]); // 1 / millisecond
        const double var_ICaL__tfcaf = _lt_0_row[8]; // millisecond
        const double d_dt_chaste_interface_var_ICaL__fcaf = (-var_chaste_interface__ICaL__fcaf + var_ICaL__fcass) / var_ICaL__tfcaf; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL__fcafp = 0.40000000000000002 * (-var_chaste_interface__ICaL__fcafp + var_ICaL__fcass) / var_ICaL__tfcaf; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL__fcas = (-var_chaste_interface__ICaL__fcas + var_ICaL__fcass) / (_lt_0_row[9]); // 1 / millisecond
        const double var_ICaL__tff = _lt_0_row[10]; // millisecond
        const double d_dt_chaste_interface_var_ICaL__ff = (-var_chaste_interface__ICaL__ff + var_ICaL__fss) / var_ICaL__tff; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL__ffp = 0.40000000000000002 * (-var_chaste_interface__ICaL__ffp + var_ICaL__fss) / var_ICaL__tff; // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaL__fs = (-var_chaste_interface__ICaL__fs + var_ICaL__fss) / (_lt_0_row[11]); // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaT__b = (-var_chaste_interface__ICaT__b + _lt_0_row[12]) * (_lt_0_row[13]); // 1 / millisecond
        const double d_dt_chaste_interface_var_ICaT__g = (-var_chaste_interface__ICaT__g + _lt_0_row[14]) * (_lt_0_row[15]); // 1 / millisecond
        const double d_dt_chaste_interface_var_IK1__xk1 = (-var_chaste_interface__IK1__xk1 + 1 / (1.0 + exp((-144.59 - var_chaste_interface__membrane__v - 2.5537999999999998 * mParameters[1]) / (3.8115000000000001 + 1.5691999999999999 * mParameters[1])))) * (_lt_0_row[16]); // 1 / millisecond
        const double var_IKr__Axrf = _lt_0_row[1]; // dimensionless
        const double var_IKr__xrss = _lt_0_row[17]; // dimensionless
        const double d_dt_chaste_interface_var_IKr__xrf = (-var_chaste_interface__IKr__xrf + var_IKr__xrss) / (_lt_0_row[18]); // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__xrs = (-var_chaste_interface__IKr__xrs + var_IKr__xrss) / (_lt_0_row[19]); // 1 / millisecond
        const double var_IKs__xs1ss = _lt_0_row[20]; // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs1 = (-var_chaste_interface__IKs__xs1 + var_IKs__xs1ss) / (_lt_0_row[21]); // 1 / millisecond
        const double d_dt_chaste_interface_var_IKs__xs2 = (-var_chaste_interface__IKs__xs2 + var_IKs__xs1ss) * (_lt_0_row[22]); // 1 / millisecond
        const double var_INa__hss = _lt_0_row[23]; // dimensionless
        const double var_INa__jss = var_INa__hss; // dimensionless
        const double d_dt_chaste_interface_var_INa__hf = (-var_chaste_interface__INa__hf + var_INa__hss) * (_lt_0_row[24]); // 1 / millisecond
        const double var_INa__ths = _lt_0_row[25]; // millisecond
        const double d_dt_chaste_interface_var_INa__hs = (-var_chaste_interface__INa__hs + var_INa__hss) / var_INa__ths; // 1 / millisecond
        const double d_dt_chaste_interface_var_INa__hsp = 0.33333333333333331 * (-var_chaste_interface__INa__hsp + _lt_0_row[26]) / var_INa__ths; // 1 / millisecond
        const double var_INa__tj = _lt_0_row[27]; // millisecond
        const double d_dt_chaste_interface_var_INa__j = (-var_chaste_interface__INa__j + var_INa__jss) / var_INa__tj; // 1 / millisecond
        const double d_dt_chaste_interface_var_INa__jp = 0.68493150684931503 * (-var_chaste_interface__INa__jp + var_INa__jss) / var_INa__tj; // 1 / millisecond
        const double var_INa__tm = _lt_0_row[28]; // millisecond
        const double d_dt_chaste_interface_var_INa__m = (-var_chaste_interface__INa__m + _lt_0_row[29]) / var_INa__tm; // 1 / millisecond
        const double d_dt_chaste_interface_var_INaL__hL = _lt_0_row[30] - 0.0050000000000000001 * var_chaste_interface__INaL__hL; // 1 / millisecond
        const double d_dt_chaste_interface_var_INaL__hLp = _lt_0_row[31] - 0.0016666666666666668 * var_chaste_interface__INaL__hLp; // 1 / millisecond
        const double d_dt_chaste_interface_var_INaL__mL = (-var_chaste_interface__INaL__mL + _lt_0_row[32]) / var_INa__tm; // 1 / millisecond
        const double d_dt_chaste_interface_var_If__y = (-var_chaste_interface__If__y + _lt_0_row[33]) * (_lt_0_row[34]); // 1 / millisecond
        const double var_Ito__iss = _lt_0_row[35]; // dimensionless
        const double d_dt_chaste_interface_var_Ito__a = (-var_chaste_interface__Ito__a + _lt_0_row[36]) * (_lt_0_row[37]); // 1 / millisecond
        const double d_dt_chaste_interface_var_Ito__i2 = (-var_chaste_interface__Ito__i2 + var_Ito__iss) / (_lt_0_row[38]); // 1 / millisecond
        const double d_dt_chaste_interface_var_Ito__i1 = (-var_chaste_interface__Ito__i1 + var_Ito__iss) / (_lt_0_row[39]); // 1 / millisecond
        const double var_ICaL__ICaK = 0.00035740000000000001 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * mParameters[5] * var_chaste_interface__ICaL__d + 0.00035740000000000001 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__kss = -var_diff__JdiffK - 126.4808362369338 * var_ICaL__ICaK / mParameters[3]; // millimolar / millisecond
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (4.0 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * mParameters[5] * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (4.0 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaNa = 0.00125 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * mParameters[5] * var_chaste_interface__ICaL__d + 0.00125 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-4.9999999999999992e-15 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (4.9999999999999992e-15 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 4.9999999999999992e-15 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (9.9999999999999995e-8 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))); // microA_per_microF
        const double var_INaCa_i__hca = exp(0.16700000000000001 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // dimensionless
        const double var_INaCa_i__hna = exp(0.52239999999999998 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nasl; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__h2_i = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nasl / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h2_ss = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[2]; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[2]; // dimensionless
        const double var_INaCa_i__h8_i = 0.011348161597821153 * mParameters[2] / (var_INaCa_i__h7_i * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__h8_ss = 0.011348161597821153 * mParameters[2] / (var_INaCa_i__h7_ss * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__k3pp_i = 5000.0 * var_INaCa_i__h8_i; // dimensionless
        const double var_INaCa_i__k3_i = 60000.0 / var_INaCa_i__h7_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = 5000.0 * var_INaCa_i__h8_ss; // dimensionless
        const double var_INaCa_i__k3_ss = 60000.0 / var_INaCa_i__h7_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4pp_i = 5000.0 * var_INaCa_i__h2_i; // dimensionless
        const double var_INaCa_i__k4_i = 60000.0 / (var_INaCa_i__h1_i * var_INaCa_i__hca) + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = 5000.0 * var_INaCa_i__h2_ss; // dimensionless
        const double var_INaCa_i__k4_ss = 60000.0 / (var_INaCa_i__h1_ss * var_INaCa_i__hca) + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = 800.0 * pow(var_chaste_interface__intracellular_ions__nasl, 2) * var_INaCa_i__h2_i / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k7_ss = 800.0 * pow(var_chaste_interface__intracellular_ions__nass, 2) * var_INaCa_i__h2_ss / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k8_i = 800.0 * pow(mParameters[2], 2) * var_INaCa_i__h8_i / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k8_ss = 800.0 * pow(mParameters[2], 2) * var_INaCa_i__h8_ss / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__x1_i = 5000.0 * (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k7_i + 5000.0 * (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = 5000.0 * (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k7_ss + 5000.0 * (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i + (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i; // dimensionless
        const double var_INaCa_i__x2_ss = (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss; // dimensionless
        const double var_INaCa_i__x3_i = (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = 5000.0 * (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k8_i + 5000.0 * (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__x4_ss = 5000.0 * (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k8_ss + 5000.0 * (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaK__Knai = 9.0730000000000004 * exp(-0.051666666666666666 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // millimolar
        const double var_INaK__Knao = 27.780000000000001 * exp(0.38500000000000001 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // millimolar
        const double var_INaK__a1 = 949.5 * pow(var_chaste_interface__intracellular_ions__nasl, 3) / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nasl / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ksl), 2)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = 14800.411886344058 * pow(mParameters[1], 2) / (-1.0 + pow((1.0 + mParameters[2] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[1]), 2)); // dimensionless
        const double var_INaK__b2 = 39.399999999999999 * pow(mParameters[2], 3) / ((-1.0 + pow((1.0 + mParameters[2] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[1]), 2)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = 160.0 * pow(var_chaste_interface__intracellular_ions__ksl, 2) / (-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nasl / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ksl), 2)); // dimensionless
        const double var_INaK__x1 = 439120.79239156016 * var_INaK__a1 + 687.20000000000005 * var_INaK__a1 * var_INaK__b3 + 687.20000000000005 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = 687.20000000000005 * var_INaK__a1 * var_INaK__a3 + 696.32000000000005 * var_INaK__a3 * var_INaK__b4 + 9.120000000000001 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = 444948.47229058668 * var_INaK__a3 + 5827.6798990265261 * var_INaK__b2 + 9.120000000000001 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = 638.99998892834708 * var_INaK__a1 * var_INaK__a3 + 638.99998892834708 * var_INaK__a1 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.3749999999999983e-17 * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (9.3749999999999983e-17 * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.3749999999999983e-17 * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (9.3749999999999992e-10 * pow(mParameters[3], 2) * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))); // microA_per_microF
        const double var_INaCa_i__INaCa_i = 0.00076567200000000001 * (10000.0 * var_INaCa_i__E2_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i - 2.0 * var_INaCa_i__E1_i * var_INaCa_i__k1_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i + var_INaCa_i__k4pp_i * var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i) + 3.0 * var_INaCa_i__k7_i * var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i)) / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__casl, 2)); // microA_per_microF
        const double var_INaCa_i__INaCa_ss = 0.000191418 * (10000.0 * var_INaCa_i__E2_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss - 2.0 * var_INaCa_i__E1_ss * var_INaCa_i__k1_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss + var_INaCa_i__k4pp_ss * var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss) + 3.0 * var_INaCa_i__k7_ss * var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss)) / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cass, 2)); // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__nass = -var_diff__JdiffNa + 126.4808362369338 * (-var_ICaL__ICaNa - 3.0 * var_INaCa_i__INaCa_ss) / mParameters[3]; // millimolar / millisecond
        const double var_INaK__INaK = 592.56652800000006 * var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) + 97.461600000000004 * var_INaK__a3 * var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 64.974400000000003 * var_INaK__a1 * var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 97.461600000000004 * var_INaK__b3 * var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // microA_per_microF
        const double var_ICaT__ICaT = 0.075399999999999995 * (-0.5 * mParameters[4] * mParameters[14] * log(mParameters[0] / var_chaste_interface__intracellular_ions__casl) / mParameters[3] + var_chaste_interface__membrane__v) * var_chaste_interface__ICaT__b * var_chaste_interface__ICaT__g; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__casl = (-var_diff__Jgap + 0.13333333333333333 * var_diff__Jdiff - 0.26666666666666666 * var_SERCA__Jup1 + 8.4320557491289208 * (-var_ICaT__ICaT - var_ICab__ICab - var_IpCa__IpCa + 2.0 * var_INaCa_i__INaCa_i) / mParameters[3]) / (1.0 + 2.9750000000000005e-5 / pow((0.0023800000000000002 + var_chaste_interface__intracellular_ions__casl), 2) + 1.75e-6 / pow((0.00050000000000000001 + var_chaste_interface__intracellular_ions__casl), 2)); // millimolar / millisecond
        const double var_reversal_potentials__EK = mParameters[4] * mParameters[14] * log(mParameters[1] / var_chaste_interface__intracellular_ions__ksl) / mParameters[3]; // millivolt
        const double var_IK1__IK1 = 1.000004299990755 * sqrt(mParameters[1]) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * mParameters[9] * var_chaste_interface__IK1__xk1 / (1.0 + exp(10.545454545454545 + 0.090909090909090912 * var_chaste_interface__membrane__v - 0.5 * mParameters[1])); // microA_per_microF
        const double var_IKr__IKr = 0.43033148291193518 * sqrt(mParameters[1]) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - var_IKr__Axrf) * var_chaste_interface__IKr__xrs + var_IKr__Axrf * var_chaste_interface__IKr__xrf) * mParameters[11] / ((_lt_0_row[2]) * (_lt_0_row[3])); // microA_per_microF
        const double var_If__IfK = pow(var_chaste_interface__If__y, 2) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * mParameters[7]; // microA_per_microF
        const double var_Isus__Isus = 0.030099999999999998 * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) / (_lt_0_row[4]); // microA_per_microF
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * mParameters[13] * var_chaste_interface__Ito__a * var_chaste_interface__Ito__i1 * var_chaste_interface__Ito__i2; // microA_per_microF
        const double var_reversal_potentials__ENa = mParameters[4] * mParameters[14] * log(mParameters[2] / var_chaste_interface__intracellular_ions__nasl) / mParameters[3]; // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (0.010000000000000009 * var_chaste_interface__INa__hs + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__j + (0.010000000000000009 * var_chaste_interface__INa__hsp + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__jp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * mParameters[6]; // microA_per_microF
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * var_chaste_interface__INaL__hL + var_chaste_interface__INaL__hLp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * mParameters[10] * var_chaste_interface__INaL__mL; // microA_per_microF
        const double var_If__IfNa = pow(var_chaste_interface__If__y, 2) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * mParameters[8]; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__nasl = -var_diff__JgapNa + 0.13333333333333333 * var_diff__JdiffNa + 16.864111498257842 * (-var_INa__INa - var_INaL__INaL - var_INab__INab - var_If__IfNa - 3.0 * var_INaCa_i__INaCa_i - 3.0 * var_INaK__INaK) / mParameters[3]; // millimolar / millisecond
        const double var_IKs__IKs = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__casl), 1.3999999999999999))) * (-mParameters[4] * mParameters[14] * log((0.018329999999999999 * mParameters[2] + mParameters[1]) / (0.018329999999999999 * var_chaste_interface__intracellular_ions__nasl + var_chaste_interface__intracellular_ions__ksl)) / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[12] * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__ksl = -var_diff__JgapK + 0.13333333333333333 * var_diff__JdiffK + 16.864111498257842 * (-var_IK1__IK1 - var_IKr__IKr - var_IKs__IKs - var_If__IfK - var_Isus__Isus - var_Ito__Ito - var_membrane__Istim + 2.0 * var_INaK__INaK) / mParameters[3]; // millimolar / millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cass = (-var_diff__Jdiff + 0.10000000000000001 * var_IP3__Jip3 + 0.10000000000000001 * var_chaste_interface__ryr__Jrel1 + 63.240418118466899 * (-var_ICaL__ICaL + 2.0 * var_INaCa_i__INaCa_ss) / mParameters[3]) / (1.0 + 0.00415599 / pow((0.0086999999999999994 + var_chaste_interface__intracellular_ions__cass), 2) + 1.7378249999999999e-5 / pow((0.00087000000000000001 + var_chaste_interface__intracellular_ions__cass), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cai = (0.013333333333333334 * var_chaste_interface__ryr__Jrel2 + 0.25 * var_diff__Jgap - 0.066666666666666666 * var_SERCA__Jup2) / (1.0 + 1.575e-5 / pow((0.00050000000000000001 + var_chaste_interface__intracellular_ions__cai), 2) + 0.00026775000000000003 / pow((0.0023800000000000002 + var_chaste_interface__intracellular_ions__cai), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_ryr__Jrel1 = 0.5 * (1.0 + 0.0123 / var_chaste_interface__intracellular_ions__cajsr) * (-var_chaste_interface__ryr__Jrel1 + ((-0.10000000000000001 * var_IP3__Jip3 - 0.10000000000000001 * var_chaste_interface__ryr__Jrel1 + 63.240418118466899 * var_ICaL__ICaL / mParameters[3] + var_diff__Jdiff < 0) ? (15.0 * (1.0 + 1 / (1.0 + 3.7780199833600026e-5 / pow(var_CaMK__CaMKa, 8))) * (-var_diff__Jdiff + 0.10000000000000001 * var_IP3__Jip3 + 0.10000000000000001 * var_chaste_interface__ryr__Jrel1 - 63.240418118466899 * var_ICaL__ICaL / mParameters[3]) / (1.0 + 1 / pow(var_chaste_interface__intracellular_ions__cajsr, 8))) : (0))) / (1.0 + 1 / (1.0 + 3.7780199833600026e-5 / pow(var_CaMK__CaMKa, 8))); // millimolar_per_millisecond / millisecond
        const double d_dt_chaste_interface_var_ryr__Jrel2 = 0.16666666666666666 * (1.0 + 0.0123 / var_chaste_interface__intracellular_ions__cacsr) * (-var_chaste_interface__ryr__Jrel2 + ((0.013333333333333334 * var_chaste_interface__ryr__Jrel2 + 0.25 * var_diff__Jgap - 0.066666666666666666 * var_SERCA__Jup2 > 0) ? (91.0 * (1.0 + 1 / (1.0 + 3.7780199833600026e-5 / pow(var_CaMK__CaMKa, 8))) * (0.013333333333333334 * var_chaste_interface__ryr__Jrel2 + 0.25 * var_diff__Jgap - 0.066666666666666666 * var_SERCA__Jup2) / (1.0 + 1 / pow(var_chaste_interface__intracellular_ions__cacsr, 8))) : (0))) / (1.0 + 1 / (1.0 + 3.7780199833600026e-5 / pow(var_CaMK__CaMKa, 8))); // millimolar_per_millisecond / millisecond
        const double var_trans_flux__Jtr1 = 0.0083333333333333332 * var_chaste_interface__intracellular_ions__cansr - 0.0083333333333333332 * var_chaste_interface__intracellular_ions__cajsr; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cajsr = (-var_IP3__Jip3 - var_chaste_interface__ryr__Jrel1 + var_trans_flux__Jtr1) / (1.0 + 0.95999999999999996 / pow((0.80000000000000004 + var_chaste_interface__intracellular_ions__cajsr), 2)); // millimolar / millisecond
        const double var_trans_flux__Jtr2 = 0.0083333333333333332 * var_chaste_interface__intracellular_ions__cansr - 0.0083333333333333332 * var_chaste_interface__intracellular_ions__cacsr; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cacsr = (-var_chaste_interface__ryr__Jrel2 + var_trans_flux__Jtr2) / (1.0 + 2.3039999999999998 / pow((0.80000000000000004 + var_chaste_interface__intracellular_ions__cacsr), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cansr = -0.050000000000000003 * var_trans_flux__Jtr1 - 0.20000000000000001 * var_trans_flux__Jtr2 + var_SERCA__Jup1 + var_SERCA__Jup2; // millimolar / millisecond
        
        mEvalF[1] = d_dt_chaste_interface_var_intracellular_ions__cai;
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__environment__time, rY, delta);
        mEvalF[2] = d_dt_chaste_interface_var_CaMK__CaMKt;
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__environment__time, rY, delta);
        mEvalF[3] = d_dt_chaste_interface_var_intracellular_ions__nai;
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__environment__time, rY, delta);
        mEvalF[4] = d_dt_chaste_interface_var_intracellular_ions__nasl;
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__environment__time, rY, delta);
        mEvalF[5] = d_dt_chaste_interface_var_intracellular_ions__nass;
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__environment__time, rY, delta);
        mEvalF[6] = d_dt_chaste_interface_var_intracellular_ions__ki;
        mPartialF[6] = EvaluatePartialDerivative6(var_chaste_interface__environment__time, rY, delta);
        mEvalF[7] = d_dt_chaste_interface_var_intracellular_ions__kss;
        mPartialF[7] = EvaluatePartialDerivative7(var_chaste_interface__environment__time, rY, delta);
        mEvalF[8] = d_dt_chaste_interface_var_intracellular_ions__ksl;
        mPartialF[8] = EvaluatePartialDerivative8(var_chaste_interface__environment__time, rY, delta);
        mEvalF[9] = d_dt_chaste_interface_var_intracellular_ions__cass;
        mPartialF[9] = EvaluatePartialDerivative9(var_chaste_interface__environment__time, rY, delta);
        mEvalF[10] = d_dt_chaste_interface_var_intracellular_ions__casl;
        mPartialF[10] = EvaluatePartialDerivative10(var_chaste_interface__environment__time, rY, delta);
        mEvalF[11] = d_dt_chaste_interface_var_intracellular_ions__cansr;
        mPartialF[11] = EvaluatePartialDerivative11(var_chaste_interface__environment__time, rY, delta);
        mEvalF[12] = d_dt_chaste_interface_var_intracellular_ions__cajsr;
        mPartialF[12] = EvaluatePartialDerivative12(var_chaste_interface__environment__time, rY, delta);
        mEvalF[13] = d_dt_chaste_interface_var_intracellular_ions__cacsr;
        mPartialF[13] = EvaluatePartialDerivative13(var_chaste_interface__environment__time, rY, delta);
        mEvalF[14] = d_dt_chaste_interface_var_INa__m;
        mPartialF[14] = EvaluatePartialDerivative14(var_chaste_interface__environment__time, rY, delta);
        mEvalF[15] = d_dt_chaste_interface_var_INa__hf;
        mPartialF[15] = EvaluatePartialDerivative15(var_chaste_interface__environment__time, rY, delta);
        mEvalF[16] = d_dt_chaste_interface_var_INa__hs;
        mPartialF[16] = EvaluatePartialDerivative16(var_chaste_interface__environment__time, rY, delta);
        mEvalF[17] = d_dt_chaste_interface_var_INa__j;
        mPartialF[17] = EvaluatePartialDerivative17(var_chaste_interface__environment__time, rY, delta);
        mEvalF[18] = d_dt_chaste_interface_var_INa__hsp;
        mPartialF[18] = EvaluatePartialDerivative18(var_chaste_interface__environment__time, rY, delta);
        mEvalF[19] = d_dt_chaste_interface_var_INa__jp;
        mPartialF[19] = EvaluatePartialDerivative19(var_chaste_interface__environment__time, rY, delta);
        mEvalF[20] = d_dt_chaste_interface_var_INaL__mL;
        mPartialF[20] = EvaluatePartialDerivative20(var_chaste_interface__environment__time, rY, delta);
        mEvalF[21] = d_dt_chaste_interface_var_INaL__hL;
        mPartialF[21] = EvaluatePartialDerivative21(var_chaste_interface__environment__time, rY, delta);
        mEvalF[22] = d_dt_chaste_interface_var_INaL__hLp;
        mPartialF[22] = EvaluatePartialDerivative22(var_chaste_interface__environment__time, rY, delta);
        mEvalF[23] = d_dt_chaste_interface_var_Ito__a;
        mPartialF[23] = EvaluatePartialDerivative23(var_chaste_interface__environment__time, rY, delta);
        mEvalF[24] = d_dt_chaste_interface_var_Ito__i1;
        mPartialF[24] = EvaluatePartialDerivative24(var_chaste_interface__environment__time, rY, delta);
        mEvalF[25] = d_dt_chaste_interface_var_Ito__i2;
        mPartialF[25] = EvaluatePartialDerivative25(var_chaste_interface__environment__time, rY, delta);
        mEvalF[26] = d_dt_chaste_interface_var_ICaL__d;
        mPartialF[26] = EvaluatePartialDerivative26(var_chaste_interface__environment__time, rY, delta);
        mEvalF[27] = d_dt_chaste_interface_var_ICaL__ff;
        mPartialF[27] = EvaluatePartialDerivative27(var_chaste_interface__environment__time, rY, delta);
        mEvalF[28] = d_dt_chaste_interface_var_ICaL__fs;
        mPartialF[28] = EvaluatePartialDerivative28(var_chaste_interface__environment__time, rY, delta);
        mEvalF[29] = d_dt_chaste_interface_var_ICaL__fcaf;
        mPartialF[29] = EvaluatePartialDerivative29(var_chaste_interface__environment__time, rY, delta);
        mEvalF[30] = d_dt_chaste_interface_var_ICaL__fcas;
        mPartialF[30] = EvaluatePartialDerivative30(var_chaste_interface__environment__time, rY, delta);
        mEvalF[31] = d_dt_chaste_interface_var_ICaL__jca;
        mPartialF[31] = EvaluatePartialDerivative31(var_chaste_interface__environment__time, rY, delta);
        mEvalF[32] = d_dt_chaste_interface_var_ICaL__ffp;
        mPartialF[32] = EvaluatePartialDerivative32(var_chaste_interface__environment__time, rY, delta);
        mEvalF[33] = d_dt_chaste_interface_var_ICaL__fcafp;
        mPartialF[33] = EvaluatePartialDerivative33(var_chaste_interface__environment__time, rY, delta);
        mEvalF[34] = d_dt_chaste_interface_var_ICaL__nca;
        mPartialF[34] = EvaluatePartialDerivative34(var_chaste_interface__environment__time, rY, delta);
        mEvalF[35] = d_dt_chaste_interface_var_ICaT__b;
        mPartialF[35] = EvaluatePartialDerivative35(var_chaste_interface__environment__time, rY, delta);
        mEvalF[36] = d_dt_chaste_interface_var_ICaT__g;
        mPartialF[36] = EvaluatePartialDerivative36(var_chaste_interface__environment__time, rY, delta);
        mEvalF[37] = d_dt_chaste_interface_var_IKr__xrf;
        mPartialF[37] = EvaluatePartialDerivative37(var_chaste_interface__environment__time, rY, delta);
        mEvalF[38] = d_dt_chaste_interface_var_IKr__xrs;
        mPartialF[38] = EvaluatePartialDerivative38(var_chaste_interface__environment__time, rY, delta);
        mEvalF[39] = d_dt_chaste_interface_var_IKs__xs1;
        mPartialF[39] = EvaluatePartialDerivative39(var_chaste_interface__environment__time, rY, delta);
        mEvalF[40] = d_dt_chaste_interface_var_IKs__xs2;
        mPartialF[40] = EvaluatePartialDerivative40(var_chaste_interface__environment__time, rY, delta);
        mEvalF[41] = d_dt_chaste_interface_var_If__y;
        mPartialF[41] = EvaluatePartialDerivative41(var_chaste_interface__environment__time, rY, delta);
        mEvalF[42] = d_dt_chaste_interface_var_IK1__xk1;
        mPartialF[42] = EvaluatePartialDerivative42(var_chaste_interface__environment__time, rY, delta);
        mEvalF[43] = d_dt_chaste_interface_var_ryr__Jrel1;
        mPartialF[43] = EvaluatePartialDerivative43(var_chaste_interface__environment__time, rY, delta);
        mEvalF[44] = d_dt_chaste_interface_var_ryr__Jrel2;
        mPartialF[44] = EvaluatePartialDerivative44(var_chaste_interface__environment__time, rY, delta);
        mEvalF[45] = d_dt_chaste_interface_var_IP3__u;
        mPartialF[45] = EvaluatePartialDerivative45(var_chaste_interface__environment__time, rY, delta);
        
        {
            if (fabs(mPartialF[1]) < delta){
                rY[1] += mDt*d_dt_chaste_interface_var_intracellular_ions__cai;
            }
            else
            {
                rY[1] += (d_dt_chaste_interface_var_intracellular_ions__cai/mPartialF[1])*(exp(mPartialF[1]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[2]) < delta){
                rY[2] += mDt*d_dt_chaste_interface_var_CaMK__CaMKt;
            }
            else
            {
                rY[2] += (d_dt_chaste_interface_var_CaMK__CaMKt/mPartialF[2])*(exp(mPartialF[2]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[3]) < delta){
                rY[3] += mDt*d_dt_chaste_interface_var_intracellular_ions__nai;
            }
            else
            {
                rY[3] += (d_dt_chaste_interface_var_intracellular_ions__nai/mPartialF[3])*(exp(mPartialF[3]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[4]) < delta){
                rY[4] += mDt*d_dt_chaste_interface_var_intracellular_ions__nasl;
            }
            else
            {
                rY[4] += (d_dt_chaste_interface_var_intracellular_ions__nasl/mPartialF[4])*(exp(mPartialF[4]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[5]) < delta){
                rY[5] += mDt*d_dt_chaste_interface_var_intracellular_ions__nass;
            }
            else
            {
                rY[5] += (d_dt_chaste_interface_var_intracellular_ions__nass/mPartialF[5])*(exp(mPartialF[5]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[6]) < delta){
                rY[6] += mDt*d_dt_chaste_interface_var_intracellular_ions__ki;
            }
            else
            {
                rY[6] += (d_dt_chaste_interface_var_intracellular_ions__ki/mPartialF[6])*(exp(mPartialF[6]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[7]) < delta){
                rY[7] += mDt*d_dt_chaste_interface_var_intracellular_ions__kss;
            }
            else
            {
                rY[7] += (d_dt_chaste_interface_var_intracellular_ions__kss/mPartialF[7])*(exp(mPartialF[7]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[8]) < delta){
                rY[8] += mDt*d_dt_chaste_interface_var_intracellular_ions__ksl;
            }
            else
            {
                rY[8] += (d_dt_chaste_interface_var_intracellular_ions__ksl/mPartialF[8])*(exp(mPartialF[8]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[9]) < delta){
                rY[9] += mDt*d_dt_chaste_interface_var_intracellular_ions__cass;
            }
            else
            {
                rY[9] += (d_dt_chaste_interface_var_intracellular_ions__cass/mPartialF[9])*(exp(mPartialF[9]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[10]) < delta){
                rY[10] += mDt*d_dt_chaste_interface_var_intracellular_ions__casl;
            }
            else
            {
                rY[10] += (d_dt_chaste_interface_var_intracellular_ions__casl/mPartialF[10])*(exp(mPartialF[10]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[11]) < delta){
                rY[11] += mDt*d_dt_chaste_interface_var_intracellular_ions__cansr;
            }
            else
            {
                rY[11] += (d_dt_chaste_interface_var_intracellular_ions__cansr/mPartialF[11])*(exp(mPartialF[11]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[12]) < delta){
                rY[12] += mDt*d_dt_chaste_interface_var_intracellular_ions__cajsr;
            }
            else
            {
                rY[12] += (d_dt_chaste_interface_var_intracellular_ions__cajsr/mPartialF[12])*(exp(mPartialF[12]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[13]) < delta){
                rY[13] += mDt*d_dt_chaste_interface_var_intracellular_ions__cacsr;
            }
            else
            {
                rY[13] += (d_dt_chaste_interface_var_intracellular_ions__cacsr/mPartialF[13])*(exp(mPartialF[13]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[14]) < delta){
                rY[14] += mDt*d_dt_chaste_interface_var_INa__m;
            }
            else
            {
                rY[14] += (d_dt_chaste_interface_var_INa__m/mPartialF[14])*(exp(mPartialF[14]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[15]) < delta){
                rY[15] += mDt*d_dt_chaste_interface_var_INa__hf;
            }
            else
            {
                rY[15] += (d_dt_chaste_interface_var_INa__hf/mPartialF[15])*(exp(mPartialF[15]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[16]) < delta){
                rY[16] += mDt*d_dt_chaste_interface_var_INa__hs;
            }
            else
            {
                rY[16] += (d_dt_chaste_interface_var_INa__hs/mPartialF[16])*(exp(mPartialF[16]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[17]) < delta){
                rY[17] += mDt*d_dt_chaste_interface_var_INa__j;
            }
            else
            {
                rY[17] += (d_dt_chaste_interface_var_INa__j/mPartialF[17])*(exp(mPartialF[17]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[18]) < delta){
                rY[18] += mDt*d_dt_chaste_interface_var_INa__hsp;
            }
            else
            {
                rY[18] += (d_dt_chaste_interface_var_INa__hsp/mPartialF[18])*(exp(mPartialF[18]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[19]) < delta){
                rY[19] += mDt*d_dt_chaste_interface_var_INa__jp;
            }
            else
            {
                rY[19] += (d_dt_chaste_interface_var_INa__jp/mPartialF[19])*(exp(mPartialF[19]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[20]) < delta){
                rY[20] += mDt*d_dt_chaste_interface_var_INaL__mL;
            }
            else
            {
                rY[20] += (d_dt_chaste_interface_var_INaL__mL/mPartialF[20])*(exp(mPartialF[20]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[21]) < delta){
                rY[21] += mDt*d_dt_chaste_interface_var_INaL__hL;
            }
            else
            {
                rY[21] += (d_dt_chaste_interface_var_INaL__hL/mPartialF[21])*(exp(mPartialF[21]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[22]) < delta){
                rY[22] += mDt*d_dt_chaste_interface_var_INaL__hLp;
            }
            else
            {
                rY[22] += (d_dt_chaste_interface_var_INaL__hLp/mPartialF[22])*(exp(mPartialF[22]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[23]) < delta){
                rY[23] += mDt*d_dt_chaste_interface_var_Ito__a;
            }
            else
            {
                rY[23] += (d_dt_chaste_interface_var_Ito__a/mPartialF[23])*(exp(mPartialF[23]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[24]) < delta){
                rY[24] += mDt*d_dt_chaste_interface_var_Ito__i1;
            }
            else
            {
                rY[24] += (d_dt_chaste_interface_var_Ito__i1/mPartialF[24])*(exp(mPartialF[24]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[25]) < delta){
                rY[25] += mDt*d_dt_chaste_interface_var_Ito__i2;
            }
            else
            {
                rY[25] += (d_dt_chaste_interface_var_Ito__i2/mPartialF[25])*(exp(mPartialF[25]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[26]) < delta){
                rY[26] += mDt*d_dt_chaste_interface_var_ICaL__d;
            }
            else
            {
                rY[26] += (d_dt_chaste_interface_var_ICaL__d/mPartialF[26])*(exp(mPartialF[26]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[27]) < delta){
                rY[27] += mDt*d_dt_chaste_interface_var_ICaL__ff;
            }
            else
            {
                rY[27] += (d_dt_chaste_interface_var_ICaL__ff/mPartialF[27])*(exp(mPartialF[27]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[28]) < delta){
                rY[28] += mDt*d_dt_chaste_interface_var_ICaL__fs;
            }
            else
            {
                rY[28] += (d_dt_chaste_interface_var_ICaL__fs/mPartialF[28])*(exp(mPartialF[28]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[29]) < delta){
                rY[29] += mDt*d_dt_chaste_interface_var_ICaL__fcaf;
            }
            else
            {
                rY[29] += (d_dt_chaste_interface_var_ICaL__fcaf/mPartialF[29])*(exp(mPartialF[29]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[30]) < delta){
                rY[30] += mDt*d_dt_chaste_interface_var_ICaL__fcas;
            }
            else
            {
                rY[30] += (d_dt_chaste_interface_var_ICaL__fcas/mPartialF[30])*(exp(mPartialF[30]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[31]) < delta){
                rY[31] += mDt*d_dt_chaste_interface_var_ICaL__jca;
            }
            else
            {
                rY[31] += (d_dt_chaste_interface_var_ICaL__jca/mPartialF[31])*(exp(mPartialF[31]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[32]) < delta){
                rY[32] += mDt*d_dt_chaste_interface_var_ICaL__ffp;
            }
            else
            {
                rY[32] += (d_dt_chaste_interface_var_ICaL__ffp/mPartialF[32])*(exp(mPartialF[32]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[33]) < delta){
                rY[33] += mDt*d_dt_chaste_interface_var_ICaL__fcafp;
            }
            else
            {
                rY[33] += (d_dt_chaste_interface_var_ICaL__fcafp/mPartialF[33])*(exp(mPartialF[33]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[34]) < delta){
                rY[34] += mDt*d_dt_chaste_interface_var_ICaL__nca;
            }
            else
            {
                rY[34] += (d_dt_chaste_interface_var_ICaL__nca/mPartialF[34])*(exp(mPartialF[34]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[35]) < delta){
                rY[35] += mDt*d_dt_chaste_interface_var_ICaT__b;
            }
            else
            {
                rY[35] += (d_dt_chaste_interface_var_ICaT__b/mPartialF[35])*(exp(mPartialF[35]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[36]) < delta){
                rY[36] += mDt*d_dt_chaste_interface_var_ICaT__g;
            }
            else
            {
                rY[36] += (d_dt_chaste_interface_var_ICaT__g/mPartialF[36])*(exp(mPartialF[36]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[37]) < delta){
                rY[37] += mDt*d_dt_chaste_interface_var_IKr__xrf;
            }
            else
            {
                rY[37] += (d_dt_chaste_interface_var_IKr__xrf/mPartialF[37])*(exp(mPartialF[37]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[38]) < delta){
                rY[38] += mDt*d_dt_chaste_interface_var_IKr__xrs;
            }
            else
            {
                rY[38] += (d_dt_chaste_interface_var_IKr__xrs/mPartialF[38])*(exp(mPartialF[38]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[39]) < delta){
                rY[39] += mDt*d_dt_chaste_interface_var_IKs__xs1;
            }
            else
            {
                rY[39] += (d_dt_chaste_interface_var_IKs__xs1/mPartialF[39])*(exp(mPartialF[39]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[40]) < delta){
                rY[40] += mDt*d_dt_chaste_interface_var_IKs__xs2;
            }
            else
            {
                rY[40] += (d_dt_chaste_interface_var_IKs__xs2/mPartialF[40])*(exp(mPartialF[40]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[41]) < delta){
                rY[41] += mDt*d_dt_chaste_interface_var_If__y;
            }
            else
            {
                rY[41] += (d_dt_chaste_interface_var_If__y/mPartialF[41])*(exp(mPartialF[41]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[42]) < delta){
                rY[42] += mDt*d_dt_chaste_interface_var_IK1__xk1;
            }
            else
            {
                rY[42] += (d_dt_chaste_interface_var_IK1__xk1/mPartialF[42])*(exp(mPartialF[42]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[43]) < delta){
                rY[43] += mDt*d_dt_chaste_interface_var_ryr__Jrel1;
            }
            else
            {
                rY[43] += (d_dt_chaste_interface_var_ryr__Jrel1/mPartialF[43])*(exp(mPartialF[43]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[44]) < delta){
                rY[44] += mDt*d_dt_chaste_interface_var_ryr__Jrel2;
            }
            else
            {
                rY[44] += (d_dt_chaste_interface_var_ryr__Jrel2/mPartialF[44])*(exp(mPartialF[44]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[45]) < delta){
                rY[45] += mDt*d_dt_chaste_interface_var_IP3__u;
            }
            else
            {
                rY[45] += (d_dt_chaste_interface_var_IP3__u/mPartialF[45])*(exp(mPartialF[45]*mDt)-1.0);
            }
            
        }        
        
    }
   
    
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        double d_dt_chaste_interface_var_membrane__v;
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.00505983330678751
        double var_chaste_interface__intracellular_ions__nasl = rY[4];
        // Units: millimolar; Initial value: 8.23153516580562
        double var_chaste_interface__intracellular_ions__nass = rY[5];
        // Units: millimolar; Initial value: 8.23154325237268
        double var_chaste_interface__intracellular_ions__kss = rY[7];
        // Units: millimolar; Initial value: 143.767768218104
        double var_chaste_interface__intracellular_ions__ksl = rY[8];
        // Units: millimolar; Initial value: 143.767769906216
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__intracellular_ions__casl = rY[10];
        // Units: millimolar; Initial value: 0.000102004317781147
        double var_chaste_interface__INa__m = rY[14];
        // Units: dimensionless; Initial value: 0.00632661703915808
        double var_chaste_interface__INa__hf = rY[15];
        // Units: dimensionless; Initial value: 0.788611739889677
        double var_chaste_interface__INa__hs = rY[16];
        // Units: dimensionless; Initial value: 0.788545979951331
        double var_chaste_interface__INa__j = rY[17];
        // Units: dimensionless; Initial value: 0.790474358603666
        double var_chaste_interface__INa__hsp = rY[18];
        // Units: dimensionless; Initial value: 0.579693514309867
        double var_chaste_interface__INa__jp = rY[19];
        // Units: dimensionless; Initial value: 0.790947058236417
        double var_chaste_interface__INaL__mL = rY[20];
        // Units: dimensionless; Initial value: 0.000241925773627233
        double var_chaste_interface__INaL__hL = rY[21];
        // Units: dimensionless; Initial value: 0.463574582508218
        double var_chaste_interface__INaL__hLp = rY[22];
        // Units: dimensionless; Initial value: 0.240216198686475
        double var_chaste_interface__Ito__a = rY[23];
        // Units: dimensionless; Initial value: 0.000272851144435704
        double var_chaste_interface__Ito__i1 = rY[24];
        // Units: dimensionless; Initial value: 0.649604795721571
        double var_chaste_interface__Ito__i2 = rY[25];
        // Units: dimensionless; Initial value: 0.989965695822495
        double var_chaste_interface__ICaL__d = rY[26];
        // Units: dimensionless; Initial value: 6.97735089296892e-09
        double var_chaste_interface__ICaL__ff = rY[27];
        // Units: dimensionless; Initial value: 0.999999968230738
        double var_chaste_interface__ICaL__fs = rY[28];
        // Units: dimensionless; Initial value: 0.926692153319136
        double var_chaste_interface__ICaL__fcaf = rY[29];
        // Units: dimensionless; Initial value: 0.99999996819573
        double var_chaste_interface__ICaL__fcas = rY[30];
        // Units: dimensionless; Initial value: 0.999999905741936
        double var_chaste_interface__ICaL__jca = rY[31];
        // Units: dimensionless; Initial value: 0.999978907334662
        double var_chaste_interface__ICaL__ffp = rY[32];
        // Units: dimensionless; Initial value: 0.999999968365903
        double var_chaste_interface__ICaL__fcafp = rY[33];
        // Units: dimensionless; Initial value: 0.999999968278239
        double var_chaste_interface__ICaL__nca = rY[34];
        // Units: dimensionless; Initial value: 0.00547252500964926
        double var_chaste_interface__ICaT__b = rY[35];
        // Units: dimensionless; Initial value: 0.000304250912559619
        double var_chaste_interface__ICaT__g = rY[36];
        // Units: dimensionless; Initial value: 0.994214357917907
        double var_chaste_interface__IKr__xrf = rY[37];
        // Units: dimensionless; Initial value: 0.000331691184084272
        double var_chaste_interface__IKr__xrs = rY[38];
        // Units: dimensionless; Initial value: 0.568716473334161
        double var_chaste_interface__IKs__xs1 = rY[39];
        // Units: dimensionless; Initial value: 0.191165248085394
        double var_chaste_interface__IKs__xs2 = rY[40];
        // Units: dimensionless; Initial value: 0.000222677365291219
        double var_chaste_interface__If__y = rY[41];
        // Units: dimensionless; Initial value: 0.233119011214908
        double var_chaste_interface__IK1__xk1 = rY[42];
        // Units: dimensionless; Initial value: 0.997084813729909
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_ICaL__PCap = 1.1000000000000001 * mParameters[5]; // dimensionless
        const double var_ICaL__f = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ff; // dimensionless
        const double var_ICaL__fp = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ffp; // dimensionless
        const double var_INaCa_i__h10_i = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]; // dimensionless
        const double var_INaCa_i__h10_ss = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]; // dimensionless
        const double var_INaCa_i__k1_i = 1500000.0 * mParameters[0] / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k1_ss = 1500000.0 * mParameters[0] / var_INaCa_i__h10_ss; // dimensionless
        const double var_IpCa__IpCa = 0.00050000000000000001 * var_chaste_interface__intracellular_ions__casl / (0.00050000000000000001 + var_chaste_interface__intracellular_ions__casl); // microA_per_microF
        const double var_CaMK__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__h4_i = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nasl) * var_chaste_interface__intracellular_ions__nasl; // dimensionless
        const double var_INaCa_i__k6_i = 1500000.0 * var_chaste_interface__intracellular_ions__casl / var_INaCa_i__h4_i; // dimensionless
        const double var_INaK__b3 = 5.7707741857267899e-10 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ksl + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nasl); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__k6_ss = 1500000.0 * var_chaste_interface__intracellular_ions__cass / var_INaCa_i__h4_ss; // dimensionless
        const double var_membrane__Istim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double var_ICaL__Afcaf = _lt_0_row[0]; // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_IKr__Axrf = _lt_0_row[1]; // dimensionless
        const double var_ICaL__ICaK = 0.00035740000000000001 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * mParameters[5] * var_chaste_interface__ICaL__d + 0.00035740000000000001 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (4.0 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * mParameters[5] * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (4.0 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaNa = 0.00125 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * mParameters[5] * var_chaste_interface__ICaL__d + 0.00125 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-4.9999999999999992e-15 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (4.9999999999999992e-15 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 4.9999999999999992e-15 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (9.9999999999999995e-8 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))); // microA_per_microF
        const double var_INaCa_i__hca = exp(0.16700000000000001 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // dimensionless
        const double var_INaCa_i__hna = exp(0.52239999999999998 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nasl; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__h2_i = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nasl / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h2_ss = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[2]; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[2]; // dimensionless
        const double var_INaCa_i__h8_i = 0.011348161597821153 * mParameters[2] / (var_INaCa_i__h7_i * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__h8_ss = 0.011348161597821153 * mParameters[2] / (var_INaCa_i__h7_ss * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__k3pp_i = 5000.0 * var_INaCa_i__h8_i; // dimensionless
        const double var_INaCa_i__k3_i = 60000.0 / var_INaCa_i__h7_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = 5000.0 * var_INaCa_i__h8_ss; // dimensionless
        const double var_INaCa_i__k3_ss = 60000.0 / var_INaCa_i__h7_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4pp_i = 5000.0 * var_INaCa_i__h2_i; // dimensionless
        const double var_INaCa_i__k4_i = 60000.0 / (var_INaCa_i__h1_i * var_INaCa_i__hca) + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = 5000.0 * var_INaCa_i__h2_ss; // dimensionless
        const double var_INaCa_i__k4_ss = 60000.0 / (var_INaCa_i__h1_ss * var_INaCa_i__hca) + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = 800.0 * pow(var_chaste_interface__intracellular_ions__nasl, 2) * var_INaCa_i__h2_i / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k7_ss = 800.0 * pow(var_chaste_interface__intracellular_ions__nass, 2) * var_INaCa_i__h2_ss / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k8_i = 800.0 * pow(mParameters[2], 2) * var_INaCa_i__h8_i / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k8_ss = 800.0 * pow(mParameters[2], 2) * var_INaCa_i__h8_ss / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__x1_i = 5000.0 * (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k7_i + 5000.0 * (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = 5000.0 * (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k7_ss + 5000.0 * (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i + (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i; // dimensionless
        const double var_INaCa_i__x2_ss = (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss; // dimensionless
        const double var_INaCa_i__x3_i = (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = 5000.0 * (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k8_i + 5000.0 * (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__x4_ss = 5000.0 * (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k8_ss + 5000.0 * (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaK__Knai = 9.0730000000000004 * exp(-0.051666666666666666 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // millimolar
        const double var_INaK__Knao = 27.780000000000001 * exp(0.38500000000000001 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // millimolar
        const double var_INaK__a1 = 949.5 * pow(var_chaste_interface__intracellular_ions__nasl, 3) / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nasl / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ksl), 2)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = 14800.411886344058 * pow(mParameters[1], 2) / (-1.0 + pow((1.0 + mParameters[2] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[1]), 2)); // dimensionless
        const double var_INaK__b2 = 39.399999999999999 * pow(mParameters[2], 3) / ((-1.0 + pow((1.0 + mParameters[2] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[1]), 2)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = 160.0 * pow(var_chaste_interface__intracellular_ions__ksl, 2) / (-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nasl / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ksl), 2)); // dimensionless
        const double var_INaK__x1 = 439120.79239156016 * var_INaK__a1 + 687.20000000000005 * var_INaK__a1 * var_INaK__b3 + 687.20000000000005 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = 687.20000000000005 * var_INaK__a1 * var_INaK__a3 + 696.32000000000005 * var_INaK__a3 * var_INaK__b4 + 9.120000000000001 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = 444948.47229058668 * var_INaK__a3 + 5827.6798990265261 * var_INaK__b2 + 9.120000000000001 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = 638.99998892834708 * var_INaK__a1 * var_INaK__a3 + 638.99998892834708 * var_INaK__a1 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.3749999999999983e-17 * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (9.3749999999999983e-17 * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.3749999999999983e-17 * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (9.3749999999999992e-10 * pow(mParameters[3], 2) * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))); // microA_per_microF
        const double var_INaCa_i__INaCa_i = 0.00076567200000000001 * (10000.0 * var_INaCa_i__E2_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i - 2.0 * var_INaCa_i__E1_i * var_INaCa_i__k1_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i + var_INaCa_i__k4pp_i * var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i) + 3.0 * var_INaCa_i__k7_i * var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i)) / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__casl, 2)); // microA_per_microF
        const double var_INaCa_i__INaCa_ss = 0.000191418 * (10000.0 * var_INaCa_i__E2_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss - 2.0 * var_INaCa_i__E1_ss * var_INaCa_i__k1_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss + var_INaCa_i__k4pp_ss * var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss) + 3.0 * var_INaCa_i__k7_ss * var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss)) / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cass, 2)); // microA_per_microF
        const double var_INaK__INaK = 592.56652800000006 * var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) + 97.461600000000004 * var_INaK__a3 * var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 64.974400000000003 * var_INaK__a1 * var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 97.461600000000004 * var_INaK__b3 * var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // microA_per_microF
        const double var_ICaT__ICaT = 0.075399999999999995 * (-0.5 * mParameters[4] * mParameters[14] * log(mParameters[0] / var_chaste_interface__intracellular_ions__casl) / mParameters[3] + var_chaste_interface__membrane__v) * var_chaste_interface__ICaT__b * var_chaste_interface__ICaT__g; // microA_per_microF
        const double var_reversal_potentials__EK = mParameters[4] * mParameters[14] * log(mParameters[1] / var_chaste_interface__intracellular_ions__ksl) / mParameters[3]; // millivolt
        const double var_IK1__IK1 = 1.000004299990755 * sqrt(mParameters[1]) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * mParameters[9] * var_chaste_interface__IK1__xk1 / (1.0 + exp(10.545454545454545 + 0.090909090909090912 * var_chaste_interface__membrane__v - 0.5 * mParameters[1])); // microA_per_microF
        const double var_IKr__IKr = 0.43033148291193518 * sqrt(mParameters[1]) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - var_IKr__Axrf) * var_chaste_interface__IKr__xrs + var_IKr__Axrf * var_chaste_interface__IKr__xrf) * mParameters[11] / ((_lt_0_row[2]) * (_lt_0_row[3])); // microA_per_microF
        const double var_If__IfK = pow(var_chaste_interface__If__y, 2) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * mParameters[7]; // microA_per_microF
        const double var_Isus__Isus = 0.030099999999999998 * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) / (_lt_0_row[4]); // microA_per_microF
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * mParameters[13] * var_chaste_interface__Ito__a * var_chaste_interface__Ito__i1 * var_chaste_interface__Ito__i2; // microA_per_microF
        const double var_reversal_potentials__ENa = mParameters[4] * mParameters[14] * log(mParameters[2] / var_chaste_interface__intracellular_ions__nasl) / mParameters[3]; // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (0.010000000000000009 * var_chaste_interface__INa__hs + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__j + (0.010000000000000009 * var_chaste_interface__INa__hsp + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__jp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * mParameters[6]; // microA_per_microF
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * var_chaste_interface__INaL__hL + var_chaste_interface__INaL__hLp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * mParameters[10] * var_chaste_interface__INaL__mL; // microA_per_microF
        const double var_If__IfNa = pow(var_chaste_interface__If__y, 2) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * mParameters[8]; // microA_per_microF
        const double var_IKs__IKs = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__casl), 1.3999999999999999))) * (-mParameters[4] * mParameters[14] * log((0.018329999999999999 * mParameters[2] + mParameters[1]) / (0.018329999999999999 * var_chaste_interface__intracellular_ions__nasl + var_chaste_interface__intracellular_ions__ksl)) / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[12] * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        d_dt_chaste_interface_var_membrane__v = -var_ICaL__ICaK - var_ICaL__ICaL - var_ICaL__ICaNa - var_ICaT__ICaT - var_ICab__ICab - var_IK1__IK1 - var_IKr__IKr - var_IKs__IKs - var_INa__INa - var_INaCa_i__INaCa_i - var_INaCa_i__INaCa_ss - var_INaK__INaK - var_INaL__INaL - var_INab__INab - var_If__IfK - var_If__IfNa - var_IpCa__IpCa - var_Isus__Isus - var_Ito__Ito - var_membrane__Istim; // millivolt / millisecond

        return d_dt_chaste_interface_var_membrane__v;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.00505983330678751
            double var_chaste_interface__intracellular_ions__nasl = rY[4];
            // Units: millimolar; Initial value: 8.23153516580562
            double var_chaste_interface__intracellular_ions__nass = rY[5];
            // Units: millimolar; Initial value: 8.23154325237268
            double var_chaste_interface__intracellular_ions__kss = rY[7];
            // Units: millimolar; Initial value: 143.767768218104
            double var_chaste_interface__intracellular_ions__ksl = rY[8];
            // Units: millimolar; Initial value: 143.767769906216
            double var_chaste_interface__intracellular_ions__cass = rY[9];
            // Units: millimolar; Initial value: 0.000101777993438818
            double var_chaste_interface__intracellular_ions__casl = rY[10];
            // Units: millimolar; Initial value: 0.000102004317781147
            double var_chaste_interface__INa__m = rY[14];
            // Units: dimensionless; Initial value: 0.00632661703915808
            double var_chaste_interface__INa__hf = rY[15];
            // Units: dimensionless; Initial value: 0.788611739889677
            double var_chaste_interface__INa__hs = rY[16];
            // Units: dimensionless; Initial value: 0.788545979951331
            double var_chaste_interface__INa__j = rY[17];
            // Units: dimensionless; Initial value: 0.790474358603666
            double var_chaste_interface__INa__hsp = rY[18];
            // Units: dimensionless; Initial value: 0.579693514309867
            double var_chaste_interface__INa__jp = rY[19];
            // Units: dimensionless; Initial value: 0.790947058236417
            double var_chaste_interface__INaL__mL = rY[20];
            // Units: dimensionless; Initial value: 0.000241925773627233
            double var_chaste_interface__INaL__hL = rY[21];
            // Units: dimensionless; Initial value: 0.463574582508218
            double var_chaste_interface__INaL__hLp = rY[22];
            // Units: dimensionless; Initial value: 0.240216198686475
            double var_chaste_interface__Ito__a = rY[23];
            // Units: dimensionless; Initial value: 0.000272851144435704
            double var_chaste_interface__Ito__i1 = rY[24];
            // Units: dimensionless; Initial value: 0.649604795721571
            double var_chaste_interface__Ito__i2 = rY[25];
            // Units: dimensionless; Initial value: 0.989965695822495
            double var_chaste_interface__ICaL__d = rY[26];
            // Units: dimensionless; Initial value: 6.97735089296892e-09
            double var_chaste_interface__ICaL__ff = rY[27];
            // Units: dimensionless; Initial value: 0.999999968230738
            double var_chaste_interface__ICaL__fs = rY[28];
            // Units: dimensionless; Initial value: 0.926692153319136
            double var_chaste_interface__ICaL__fcaf = rY[29];
            // Units: dimensionless; Initial value: 0.99999996819573
            double var_chaste_interface__ICaL__fcas = rY[30];
            // Units: dimensionless; Initial value: 0.999999905741936
            double var_chaste_interface__ICaL__jca = rY[31];
            // Units: dimensionless; Initial value: 0.999978907334662
            double var_chaste_interface__ICaL__ffp = rY[32];
            // Units: dimensionless; Initial value: 0.999999968365903
            double var_chaste_interface__ICaL__fcafp = rY[33];
            // Units: dimensionless; Initial value: 0.999999968278239
            double var_chaste_interface__ICaL__nca = rY[34];
            // Units: dimensionless; Initial value: 0.00547252500964926
            double var_chaste_interface__ICaT__b = rY[35];
            // Units: dimensionless; Initial value: 0.000304250912559619
            double var_chaste_interface__ICaT__g = rY[36];
            // Units: dimensionless; Initial value: 0.994214357917907
            double var_chaste_interface__IKr__xrf = rY[37];
            // Units: dimensionless; Initial value: 0.000331691184084272
            double var_chaste_interface__IKr__xrs = rY[38];
            // Units: dimensionless; Initial value: 0.568716473334161
            double var_chaste_interface__IKs__xs1 = rY[39];
            // Units: dimensionless; Initial value: 0.191165248085394
            double var_chaste_interface__IKs__xs2 = rY[40];
            // Units: dimensionless; Initial value: 0.000222677365291219
            double var_chaste_interface__If__y = rY[41];
            // Units: dimensionless; Initial value: 0.233119011214908
            double var_chaste_interface__IK1__xk1 = rY[42];
            // Units: dimensionless; Initial value: 0.997084813729909
            


            const double var_x0 = 1 / (mParameters[4] * mParameters[14]);
            const double var_x1 = var_x0 * mParameters[3];
            const double var_x2 = var_x1 * var_chaste_interface__membrane__v;
            const double var_x3 = exp(0.38500000000000001 * var_x2);
            const double var_x4 = mParameters[2] / var_x3;
            const double var_x5 = 1.0 + 0.035997120230381568 * var_x4;
            const double var_x6 = pow(var_x5, 3);
            const double var_x7 = pow((0.35820000000000002 + mParameters[1]), 2);
            const double var_x8 = 1 / (-1.0 + var_x6 + 7.7937924625297832 * var_x7);
            const double var_x9 = pow(mParameters[1], 2);
            const double var_x10 = var_x8 * var_x9;
            const double var_x11 = pow(var_chaste_interface__intracellular_ions__nasl, 3);
            const double var_x12 = exp(-0.051666666666666666 * var_x2);
            const double var_x13 = 1 / var_x12;
            const double var_x14 = var_x13 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x15 = 1.0 + 0.11021712774165104 * var_x14;
            const double var_x16 = pow(var_x15, 3);
            const double var_x17 = pow((0.5 + var_chaste_interface__intracellular_ions__ksl), 2);
            const double var_x18 = 1 / (-1.0 + var_x16 + 4.0 * var_x17);
            const double var_x19 = pow(var_x12, (-3));
            const double var_x20 = var_x18 * var_x19;
            const double var_x21 = var_x11 * var_x20;
            const double var_x22 = var_x10 * var_x21;
            const double var_x23 = var_x1 * var_x22;
            const double var_x24 = pow(mParameters[2], 3);
            const double var_x25 = var_x24 * var_x8 / pow(var_x3, 3);
            const double var_x26 = var_x21 * var_x25;
            const double var_x27 = 1.4929407925401197 * var_x26;
            const double var_x28 = var_x1 * var_x27;
            const double var_x29 = pow(var_chaste_interface__intracellular_ions__nasl, 4);
            const double var_x30 = var_x1 * var_x29;
            const double var_x31 = pow((-0.25 + var_x17 + 0.25 * var_x16), (-2));
            const double var_x32 = pow(var_x15, 2);
            const double var_x33 = var_x32 / pow(var_x12, 4);
            const double var_x34 = var_x31 * var_x33;
            const double var_x35 = var_x30 * var_x34;
            const double var_x36 = var_x10 * var_x35;
            const double var_x37 = pow(mParameters[2], 4);
            const double var_x38 = var_x37 / pow(var_x3, 4);
            const double var_x39 = var_x1 * var_x21;
            const double var_x40 = pow(var_x5, 2) / pow((-0.12830724000000002 + var_x7 + 0.12830724000000002 * var_x6), 2);
            const double var_x41 = var_x39 * var_x40;
            const double var_x42 = 0.0010218676570066343 * var_x38 * var_x41;
            const double var_x43 = 1 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ksl + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nasl);
            const double var_x44 = var_x21 * var_x43;
            const double var_x45 = var_x1 * var_x25;
            const double var_x46 = 1.348266719199441e-12 * var_x44 * var_x45;
            const double var_x47 = 0.0015940553210329999 * var_x29 * var_x34 * var_x45;
            const double var_x48 = var_x4 * var_x9;
            const double var_x49 = var_x41 * var_x48;
            const double var_x50 = var_x1 * var_x44;
            const double var_x51 = 9.2284312964898121e-16 * var_x38 * var_x40 * var_x50;
            const double var_x52 = var_x25 * var_x43;
            const double var_x53 = 1.4395827005670213e-15 * var_x35 * var_x52;
            const double var_x54 = pow(var_chaste_interface__intracellular_ions__ksl, 2);
            const double var_x55 = var_x18 * var_x54;
            const double var_x56 = var_x43 * var_x55;
            const double var_x57 = var_x25 * var_x56;
            const double var_x58 = var_x1 * var_x57;
            const double var_x59 = var_x1 * var_x40;
            const double var_x60 = var_x38 * var_x59;
            const double var_x61 = var_x56 * var_x60;
            const double var_x62 = var_x1 * var_x52;
            const double var_x63 = var_x31 * var_x54;
            const double var_x64 = var_x32 * var_x63;
            const double var_x65 = var_x14 * var_x64;
            const double var_x66 = var_x62 * var_x65;
            const double var_x67 = 1.1614636692670073e-13 * var_x61 - 1.8118171462682526e-13 * var_x66 - 1.9599073649699195e-10 * var_x58;
            const double var_x68 = var_x42 + var_x51 + var_x67 - var_x28 - var_x46 - var_x47 - var_x53 + 1863582.3429890024 * var_x23 + 8229.414882767278 * var_x49 - 12837.418322144014 * var_x36;
            const double var_x69 = var_x10 * var_x55;
            const double var_x70 = var_x25 * var_x55;
            const double var_x71 = 2.6817254812739919 * var_x70 + 1648931648.7518551 * var_x69;
            const double var_x72 = 6585420658.1002293 * var_x10 + 9.6722701128385645e-12 * var_x52 + 10.71014095526842 * var_x25;
            const double var_x73 = var_x25 * var_x44;
            const double var_x74 = var_x27 + 1.348266719199441e-12 * var_x73;
            const double var_x75 = 6.3450816326903207e-5 * var_x56 + 5.041496472709802e-7 * var_x44 + 558246.7943749798 * var_x21;
            const double var_x76 = 1 / (var_x71 + var_x72 + var_x74 + var_x75 + 3.3937789869608994e-10 * var_x57 + 24953131.661984976 * var_x22);
            const double var_x77 = 592.56652800000006 * var_x76;
            const double var_x78 = 0.053820060088077798 * var_x1;
            const double var_x79 = 1 / (13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]);
            const double var_x80 = exp(0.52239999999999998 * var_x2);
            const double var_x81 = 1 / var_x80;
            const double var_x82 = 1.0 + 0.011348161597821153 * (1.0 + var_x81) * mParameters[2];
            const double var_x83 = pow(var_x82, (-2));
            const double var_x84 = pow(var_x80, 2);
            const double var_x85 = var_x83 / var_x84;
            const double var_x86 = var_x37 * var_x79 * var_x85;
            const double var_x87 = 1 / var_x82;
            const double var_x88 = var_x81 * var_x87;
            const double var_x89 = var_x24 * var_x79;
            const double var_x90 = var_x88 * var_x89;
            const double var_x91 = 4.7426236949614156 * var_x1;
            const double var_x92 = var_x78 * var_x86 - var_x90 * var_x91;
            const double var_x93 = 0.011348161597821153 + 0.011348161597821153 * var_x80;
            const double var_x94 = 1.0 + var_x93 * var_chaste_interface__intracellular_ions__nass;
            const double var_x95 = 1 / var_x94;
            const double var_x96 = 1 / exp(0.16700000000000001 * var_x2);
            const double var_x97 = var_x95 * var_x96;
            const double var_x98 = var_x80 * var_x95;
            const double var_x99 = 56.740807989105761 * var_x98;
            const double var_x100 = var_x99 * var_chaste_interface__intracellular_ions__nass;
            const double var_x101 = var_x100 + 60000.0 * var_x97;
            const double var_x102 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass;
            const double var_x103 = 1 / var_x102;
            const double var_x104 = 1500000.0 * var_x103;
            const double var_x105 = var_x104 * var_chaste_interface__intracellular_ions__cass;
            const double var_x106 = var_x101 * var_x105 * var_x92;
            const double var_x107 = var_x1 * var_x97;
            const double var_x108 = 29.641398093508847 * var_x1;
            const double var_x109 = var_x98 * var_chaste_interface__intracellular_ions__nass;
            const double var_x110 = var_x108 * var_x109;
            const double var_x111 = 0.33637537555048624 * var_x1;
            const double var_x112 = var_x111 * var_x84;
            const double var_x113 = pow(var_x94, (-2));
            const double var_x114 = pow(var_chaste_interface__intracellular_ions__nass, 2);
            const double var_x115 = var_x113 * var_x114;
            const double var_x116 = var_x112 * var_x115;
            const double var_x117 = 355.6967771221062 * var_x1;
            const double var_x118 = var_x113 * var_chaste_interface__intracellular_ions__nass;
            const double var_x119 = var_x80 * var_x96;
            const double var_x120 = var_x118 * var_x119;
            const double var_x121 = var_x110 - var_x116 - 10020.0 * var_x107 - var_x117 * var_x120;
            const double var_x122 = var_x79 * mParameters[0];
            const double var_x123 = 1500000.0 * var_x122;
            const double var_x124 = var_x123 + 9.0785292782569211 * var_x90;
            const double var_x125 = var_x105 * var_x124;
            const double var_x126 = var_x121 * var_x125;
            const double var_x127 = pow(var_chaste_interface__intracellular_ions__nass, 3);
            const double var_x128 = var_x103 * var_x98;
            const double var_x129 = var_x127 * var_x128;
            const double var_x130 = var_x122 * var_x129;
            const double var_x131 = 13617793.917385383 * var_x130;
            const double var_x132 = var_x121 * var_x131;
            const double var_x133 = 5000.0 + var_x101;
            const double var_x134 = var_x130 * var_x133;
            const double var_x135 = 7113935.5424421234 * var_x1;
            const double var_x136 = var_x134 * var_x135;
            const double var_x137 = pow(var_chaste_interface__intracellular_ions__nass, 4);
            const double var_x138 = var_x103 * var_x122;
            const double var_x139 = var_x113 * var_x138;
            const double var_x140 = 80730.090132116704 * var_x1;
            const double var_x141 = var_x133 * var_x137 * var_x139 * var_x140 * var_x84;
            const double var_x142 = var_x106 + var_x126 + var_x132 + var_x136 - var_x141;
            const double var_x143 = var_x101 * var_x124;
            const double var_x144 = 13617793.917385383 * var_x134 + var_x105 * var_x143;
            const double var_x145 = var_x105 + 9.0785292782569211 * var_x129;
            const double var_x146 = var_x101 * var_x145;
            const double var_x147 = var_x88 * mParameters[2];
            const double var_x148 = 56.740807989105761 * var_x147;
            const double var_x149 = var_x148 + 60000.0 * var_x87;
            const double var_x150 = 5000.0 + var_x149;
            const double var_x151 = var_x129 * var_x150;
            const double var_x152 = 5000.0 * var_x146 + 45392.646391284608 * var_x151;
            const double var_x153 = var_x145 * var_x149;
            const double var_x154 = var_x150 * var_x90;
            const double var_x155 = var_x103 * var_x154;
            const double var_x156 = var_x155 * var_chaste_interface__intracellular_ions__cass;
            const double var_x157 = 13617793.917385383 * var_x156 + var_x123 * var_x153;
            const double var_x158 = var_x124 * var_x149;
            const double var_x159 = 5000.0 * var_x158;
            const double var_x160 = var_x133 * var_x90;
            const double var_x161 = var_x159 + 45392.646391284608 * var_x160;
            const double var_x162 = 1 / (var_x144 + var_x152 + var_x157 + var_x161);
            const double var_x163 = 10000.0 * var_x162;
            const double var_x164 = 0.00036716666666666668 * var_x158;
            const double var_x165 = var_x103 * var_x143;
            const double var_x166 = 0.11015000000000001 * var_x122;
            const double var_x167 = pow((var_x134 + var_x156 + var_x164 + 0.0033333333333333331 * var_x151 + 0.0033333333333333331 * var_x160 + 0.00036716666666666668 * var_x146 + var_x153 * var_x166 + 0.11015000000000001 * var_x165 * var_chaste_interface__intracellular_ions__cass), (-2));
            const double var_x168 = 148206.99046754424 * var_x1;
            const double var_x169 = 1681.8768777524313 * var_x1;
            const double var_x170 = var_x169 * var_x84;
            const double var_x171 = 1778483.8856105309 * var_x1;
            const double var_x172 = var_x145 * (-50100000.0 * var_x107 + var_x109 * var_x168 - var_x115 * var_x170 - var_x120 * var_x171);
            const double var_x173 = 283704.03994552878 * var_x98;
            const double var_x174 = 300000000.0 * var_x97 + var_x173 * var_chaste_interface__intracellular_ions__nass;
            const double var_x175 = var_x78 * var_x84;
            const double var_x176 = var_x103 * var_x113;
            const double var_x177 = var_x137 * var_x176;
            const double var_x178 = var_x129 * var_x91 - var_x175 * var_x177;
            const double var_x179 = var_x174 * var_x178;
            const double var_x180 = var_x123 * var_x149;
            const double var_x181 = var_x178 * var_x180;
            const double var_x182 = var_x81 * var_x83 * mParameters[2];
            const double var_x183 = var_x85 * pow(mParameters[2], 2);
            const double var_x184 = var_x111 * var_x183;
            const double var_x185 = var_x108 * var_x147;
            const double var_x186 = var_x184 - var_x185 + var_x117 * var_x182;
            const double var_x187 = var_x123 * var_x186;
            const double var_x188 = var_x145 * var_x187;
            const double var_x189 = 45392.646391284608 * var_x90;
            const double var_x190 = var_x121 * var_x189;
            const double var_x191 = 45392.646391284608 * var_x186;
            const double var_x192 = var_x129 * var_x191;
            const double var_x193 = var_x103 * var_x90;
            const double var_x194 = 13617793.917385383 * var_x186;
            const double var_x195 = var_x193 * var_x194 * var_chaste_interface__intracellular_ions__cass;
            const double var_x196 = var_x177 * var_x84;
            const double var_x197 = 269.10030044038899 * var_x1;
            const double var_x198 = var_x150 * var_x197;
            const double var_x199 = var_x196 * var_x198;
            const double var_x200 = 23713.118474807077 * var_x1;
            const double var_x201 = var_x160 * var_x200;
            const double var_x202 = var_x197 * var_x86;
            const double var_x203 = var_x133 * var_x202;
            const double var_x204 = var_x151 * var_x200;
            const double var_x205 = var_x135 * var_x156;
            const double var_x206 = var_x140 * var_x150 * var_x86;
            const double var_x207 = var_x103 * var_x206 * var_chaste_interface__intracellular_ions__cass;
            const double var_x208 = var_x92 * (300000000.0 * var_x87 + 283704.03994552878 * var_x147);
            const double var_x209 = var_x124 * (var_x169 * var_x183 + var_x171 * var_x182 - var_x147 * var_x168);
            const double var_x210 = -var_x208 - var_x209;
            const double var_x211 = var_x167 * (var_x141 + var_x199 + var_x201 + var_x205 + var_x210 - var_x106 - var_x126 - var_x132 - var_x136 - var_x172 - var_x179 - var_x181 - var_x188 - var_x190 - var_x192 - var_x195 - var_x203 - var_x204 - var_x207);
            const double var_x212 = 5.3924544444444452e-11 * var_x144;
            const double var_x213 = 3000000.0 * var_x122;
            const double var_x214 = var_x162 * (var_x172 + var_x179 + var_x192 + var_x204 - var_x199);
            const double var_x215 = var_x100 * var_x162;
            const double var_x216 = var_x148 * var_x162;
            const double var_x217 = 1.6177363333333335e-8 * var_x122;
            const double var_x218 = var_x152 * var_x211;
            const double var_x219 = 3.0597222222222222e-13 * var_x211;
            const double var_x220 = var_x109 * var_x157;
            const double var_x221 = var_x208 + var_x209;
            const double var_x222 = 27.235587834770765 * var_x162;
            const double var_x223 = var_x129 * var_x222;
            const double var_x224 = var_x144 * var_x147;
            const double var_x225 = 27.235587834770765 * var_x90;
            const double var_x226 = 1.4686666666666667e-13 * var_x129 * var_x161;
            const double var_x227 = 1.4686666666666667e-13 * var_x90;
            const double var_x228 = var_x144 * var_x162;
            const double var_x229 = var_x157 * var_x162;
            const double var_x230 = var_x152 * var_x162;
            const double var_x231 = 14.227871084884248 * var_x1;
            const double var_x232 = var_x231 * var_x90;
            const double var_x233 = var_x161 * var_x162;
            const double var_x234 = 0.16146018026423339 * var_x1;
            const double var_x235 = var_x234 * var_x86;
            const double var_x236 = var_x110 * var_x229 + var_x142 * var_x163 + var_x185 * var_x228 + var_x211 * var_x212 + var_x211 * var_x226 + var_x215 * (var_x181 + var_x188 + var_x195 + var_x207 - var_x205) + var_x219 * var_x220 + var_x223 * (var_x190 + var_x203 + var_x221 - var_x201) + var_x230 * var_x232 - var_x116 * var_x229 - var_x142 * var_x216 - var_x184 * var_x228 - var_x213 * var_x214 - var_x214 * var_x225 - var_x217 * var_x218 - var_x218 * var_x227 - var_x219 * var_x224 - var_x230 * var_x235 + var_x129 * var_x231 * var_x233 - var_x196 * var_x233 * var_x234;
            const double var_x237 = pow(var_chaste_interface__intracellular_ions__cass, (-2));
            const double var_x238 = 1.0 + 2.2499999999999996e-8 * var_x237;
            const double var_x239 = 1 / var_x238;
            const double var_x240 = 0.000191418 * var_x239;
            const double var_x241 = 1.0 + var_x93 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x242 = 1 / var_x241;
            const double var_x243 = var_x242 * var_x96;
            const double var_x244 = var_x242 * var_x80;
            const double var_x245 = 56.740807989105761 * var_x244;
            const double var_x246 = var_x245 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x247 = var_x246 + 60000.0 * var_x243;
            const double var_x248 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nasl) * var_chaste_interface__intracellular_ions__nasl;
            const double var_x249 = 1 / var_x248;
            const double var_x250 = 1500000.0 * var_x249;
            const double var_x251 = var_x250 * var_chaste_interface__intracellular_ions__casl;
            const double var_x252 = var_x247 * var_x251 * var_x92;
            const double var_x253 = var_x1 * var_x243;
            const double var_x254 = var_x244 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x255 = var_x108 * var_x254;
            const double var_x256 = pow(var_x241, (-2));
            const double var_x257 = pow(var_chaste_interface__intracellular_ions__nasl, 2);
            const double var_x258 = var_x256 * var_x257;
            const double var_x259 = var_x112 * var_x258;
            const double var_x260 = var_x256 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x261 = var_x119 * var_x260;
            const double var_x262 = var_x255 - var_x259 - 10020.0 * var_x253 - var_x117 * var_x261;
            const double var_x263 = var_x124 * var_x251;
            const double var_x264 = var_x262 * var_x263;
            const double var_x265 = var_x244 * var_x249;
            const double var_x266 = var_x11 * var_x265;
            const double var_x267 = var_x122 * var_x266;
            const double var_x268 = 13617793.917385383 * var_x267;
            const double var_x269 = var_x262 * var_x268;
            const double var_x270 = 5000.0 + var_x247;
            const double var_x271 = var_x267 * var_x270;
            const double var_x272 = var_x135 * var_x271;
            const double var_x273 = var_x122 * var_x249;
            const double var_x274 = var_x256 * var_x273;
            const double var_x275 = 80730.090132116704 * var_x270 * var_x274 * var_x30 * var_x84;
            const double var_x276 = var_x252 + var_x264 + var_x269 + var_x272 - var_x275;
            const double var_x277 = var_x124 * var_x247;
            const double var_x278 = 13617793.917385383 * var_x271 + var_x251 * var_x277;
            const double var_x279 = var_x251 + 9.0785292782569211 * var_x266;
            const double var_x280 = var_x247 * var_x279;
            const double var_x281 = var_x150 * var_x266;
            const double var_x282 = 5000.0 * var_x280 + 45392.646391284608 * var_x281;
            const double var_x283 = var_x154 * var_x249;
            const double var_x284 = var_x283 * var_chaste_interface__intracellular_ions__casl;
            const double var_x285 = 13617793.917385383 * var_x284 + var_x180 * var_x279;
            const double var_x286 = var_x159 + var_x189 * var_x270;
            const double var_x287 = 1 / (var_x278 + var_x282 + var_x285 + var_x286);
            const double var_x288 = 10000.0 * var_x287;
            const double var_x289 = var_x249 * var_x277;
            const double var_x290 = var_x270 * var_x90;
            const double var_x291 = pow((var_x164 + var_x271 + var_x284 + 0.0033333333333333331 * var_x281 + 0.0033333333333333331 * var_x290 + 0.00036716666666666668 * var_x280 + 0.11015000000000001 * var_x289 * var_chaste_interface__intracellular_ions__casl + var_x149 * var_x166 * var_x279), (-2));
            const double var_x292 = var_x279 * (-50100000.0 * var_x253 + var_x168 * var_x254 - var_x170 * var_x258 - var_x171 * var_x261);
            const double var_x293 = 283704.03994552878 * var_x244;
            const double var_x294 = 300000000.0 * var_x243 + var_x293 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x295 = var_x249 * var_x256;
            const double var_x296 = var_x29 * var_x295;
            const double var_x297 = var_x266 * var_x91 - var_x175 * var_x296;
            const double var_x298 = var_x294 * var_x297;
            const double var_x299 = var_x180 * var_x297;
            const double var_x300 = var_x187 * var_x279;
            const double var_x301 = var_x189 * var_x262;
            const double var_x302 = var_x191 * var_x266;
            const double var_x303 = var_x249 * var_x90;
            const double var_x304 = var_x194 * var_x303 * var_chaste_interface__intracellular_ions__casl;
            const double var_x305 = var_x296 * var_x84;
            const double var_x306 = var_x198 * var_x305;
            const double var_x307 = var_x200 * var_x290;
            const double var_x308 = var_x202 * var_x270;
            const double var_x309 = var_x200 * var_x281;
            const double var_x310 = var_x135 * var_x284;
            const double var_x311 = var_x206 * var_x249 * var_chaste_interface__intracellular_ions__casl;
            const double var_x312 = var_x291 * (var_x210 + var_x275 + var_x306 + var_x307 + var_x310 - var_x252 - var_x264 - var_x269 - var_x272 - var_x292 - var_x298 - var_x299 - var_x300 - var_x301 - var_x302 - var_x304 - var_x308 - var_x309 - var_x311);
            const double var_x313 = 5.3924544444444452e-11 * var_x278;
            const double var_x314 = var_x292 + var_x298 + var_x302 + var_x309 - var_x306;
            const double var_x315 = var_x213 * var_x287;
            const double var_x316 = var_x246 * var_x287;
            const double var_x317 = var_x148 * var_x287;
            const double var_x318 = var_x217 * var_x282;
            const double var_x319 = 3.0597222222222222e-13 * var_x312;
            const double var_x320 = var_x254 * var_x285;
            const double var_x321 = 27.235587834770765 * var_x287;
            const double var_x322 = var_x266 * var_x321;
            const double var_x323 = var_x147 * var_x278;
            const double var_x324 = var_x225 * var_x287;
            const double var_x325 = 1.4686666666666667e-13 * var_x266 * var_x286;
            const double var_x326 = var_x227 * var_x282;
            const double var_x327 = var_x278 * var_x287;
            const double var_x328 = var_x285 * var_x287;
            const double var_x329 = var_x282 * var_x287;
            const double var_x330 = var_x286 * var_x287;
            const double var_x331 = var_x185 * var_x327 + var_x232 * var_x329 + var_x255 * var_x328 + var_x276 * var_x288 + var_x312 * var_x313 + var_x312 * var_x325 + var_x316 * (var_x299 + var_x300 + var_x304 + var_x311 - var_x310) + var_x319 * var_x320 + var_x322 * (var_x221 + var_x301 + var_x308 - var_x307) - var_x184 * var_x327 - var_x235 * var_x329 - var_x259 * var_x328 - var_x276 * var_x317 - var_x312 * var_x318 - var_x312 * var_x326 - var_x314 * var_x315 - var_x314 * var_x324 - var_x319 * var_x323 + var_x231 * var_x266 * var_x330 - var_x234 * var_x305 * var_x330;
            const double var_x332 = pow(var_chaste_interface__intracellular_ions__casl, (-2));
            const double var_x333 = 1.0 + 2.2499999999999996e-8 * var_x332;
            const double var_x334 = 1 / var_x333;
            const double var_x335 = 0.00076567200000000001 * var_x334;
            const double var_x336 = 3.0973929308714605 * var_x1 * var_x70;
            const double var_x337 = 0.0018355507117076787 * var_x55 * var_x60;
            const double var_x338 = var_x48 * var_x59;
            const double var_x339 = 1128638.1408383038 * var_x338 * var_x55;
            const double var_x340 = var_x1 * var_x65;
            const double var_x341 = 1760611.1922499281 * var_x10 * var_x340;
            const double var_x342 = 0.0028633545243956569 * var_x45 * var_x65;
            const double var_x343 = var_x337 + var_x339 - var_x336 - var_x341 - var_x342 + 8850.1627627912421 * var_x49 + 2004153.064618669 * var_x23 - 13805.74964605608 * var_x36;
            const double var_x344 = var_x43 * var_x76;
            const double var_x345 = 5.6242888537963013e-8 * var_x344;
            const double var_x346 = 12.370212803335024 * var_x45;
            const double var_x347 = 86528.253128121869 * var_x39;
            const double var_x348 = 596.05597051775783 * var_x35;
            const double var_x349 = 1.1171471980328542e-11 * var_x62;
            const double var_x350 = 7.8143195327001933e-8 * var_x50;
            const double var_x351 = 0.0073307305278664144 * var_x60;
            const double var_x352 = 5.3829490884356011e-10 * var_x35 * var_x43;
            const double var_x353 = 6.6203429148219431e-15 * var_x43 * var_x60;
            const double var_x354 = 4507498.4968736656 * var_x338;
            const double var_x355 = 6.7748240181513803e-8 * var_x340 * var_x43;
            const double var_x356 = var_x28 + var_x336 + var_x341 + var_x342 + var_x346 + var_x348 + var_x349 + var_x352 + var_x355 + var_x46 + var_x47 + var_x53 - var_x337 - var_x339 - var_x347 - var_x350 - var_x351 - var_x353 - var_x354 - var_x42 - var_x51 + 3.6236342925365053e-13 * var_x66 + 26643.167968200094 * var_x36 + 3.9198147299398391e-10 * var_x58 - 2.3229273385340146e-13 * var_x61 - 17079.577645558518 * var_x49 - 3867735.4076076713 * var_x23;
            const double var_x357 = pow((var_x10 + 0.25039124064514068 * var_x69 + 7.6555420442407695e-17 * var_x44 + 8.4770104046173956e-5 * var_x21 + 2.0473509426327076e-22 * var_x73 + 0.0037891477184972245 * var_x22 + 9.6350437764149725e-15 * var_x56 + 4.0722159152815902e-10 * var_x70 + 1.4687399051632995e-21 * var_x52 + 1.6263412029867345e-9 * var_x25 + 5.1534733514501733e-20 * var_x57 + 2.2670393738686469e-10 * var_x26), (-2));
            const double var_x358 = 1.6968894934804497e-10 * var_x57;
            const double var_x359 = var_x357 * (var_x358 + var_x74 + 12023111.890251627 * var_x22);
            const double var_x360 = 1.3663755203068986e-17 * var_x359;
            const double var_x361 = var_x356 * var_x357;
            const double var_x362 = var_x71 + 12930019.771733347 * var_x22;
            const double var_x363 = var_x362 * var_x43;
            const double var_x364 = 1.2968823323348782e-27 * var_x363;
            const double var_x365 = var_x347 + var_x350 + var_x67 - var_x348 - var_x352 - var_x355;
            const double var_x366 = var_x10 * var_x76;
            const double var_x367 = 1442471.8231021101 * var_x366;
            const double var_x368 = -0.75 * mParameters[1];
            const double var_x369 = exp(9.9999999999999995e-8);
            const double var_x370 = 0.75 * var_chaste_interface__intracellular_ions__kss;
            const double var_x371 = 1 / (-1.0 + var_x369);
            const double var_x372 = 9.9999999999999995e-8 * mParameters[3];
            const double var_x373 = var_x371 * var_x372;
            const double var_x374 = exp(-9.9999999999999995e-8);
            const double var_x375 = 1 / (-1.0 + var_x374);
            const double var_x376 = var_x372 * var_x375;
            const double var_x377 = var_x376 * (var_x368 + var_x370 * var_x374);
            const double var_x378 = 5000000.0 * var_x1;
            const double var_x379 = var_x378 * (var_x377 + var_x373 * (var_x368 + var_x369 * var_x370));
            const double var_x380 = fabs(var_chaste_interface__membrane__v);
            const double var_x381 = 1 / mParameters[3];
            const double var_x382 = var_x381 * mParameters[4] * mParameters[14];
            const double var_x383 = fabs(var_x382);
            const double var_x384 = var_x380 < 9.9999999999999995e-8 * var_x383;
            const double var_x385 = exp(var_x2);
            const double var_x386 = var_x370 * var_x385;
            const double var_x387 = var_x368 + var_x386;
            const double var_x388 = -1.0 + var_x385;
            const double var_x389 = 1 / var_x388;
            const double var_x390 = var_x0 * pow(mParameters[3], 2);
            const double var_x391 = var_x389 * var_x390;
            const double var_x392 = var_x387 * var_x391;
            const double var_x393 = pow(mParameters[3], 3) / (pow(mParameters[4], 2) * pow(mParameters[14], 2));
            const double var_x394 = var_x393 * var_chaste_interface__membrane__v;
            const double var_x395 = var_x389 * var_x394;
            const double var_x396 = var_x385 * var_chaste_interface__membrane__v;
            const double var_x397 = var_x393 * var_x396 / pow(var_x388, 2);
            const double var_x398 = ((var_x384) ? (var_x379) : (var_x392 + var_x386 * var_x395 - var_x387 * var_x397));
            const double var_x399 = 1.0 - var_chaste_interface__ICaL__nca;
            const double var_x400 = 0.40000000000000002 * var_chaste_interface__ICaL__fs;
            const double var_x401 = 0.59999999999999998 * var_chaste_interface__ICaL__ff;
            const double var_x402 = 0.10000000000000001 * var_chaste_interface__membrane__v;
            const double var_x403 = exp(-1.0 + var_x402);
            const double var_x404 = 1.0 + var_x403;
            const double var_x405 = 0.59999999999999998 / var_x404;
            const double var_x406 = 0.29999999999999999 + var_x405;
            const double var_x407 = 0.69999999999999996 - var_x405;
            const double var_x408 = var_x407 * var_chaste_interface__ICaL__fcas;
            const double var_x409 = var_x408 + var_x406 * var_chaste_interface__ICaL__fcaf;
            const double var_x410 = var_x409 * var_chaste_interface__ICaL__jca;
            const double var_x411 = var_x399 * (var_x400 + var_x401) + var_x410 * var_chaste_interface__ICaL__nca;
            const double var_x412 = var_x411 * mParameters[5];
            const double var_x413 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x414 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x415 = 1.0 + 0.0015 * var_x414;
            const double var_x416 = 1 / var_x415;
            const double var_x417 = 0.050000000000000003 * var_x416;
            const double var_x418 = var_x413 * var_x417 + var_chaste_interface__CaMK__CaMKt;
            const double var_x419 = 1.0 + 0.14999999999999999 / var_x418;
            const double var_x420 = 1 / var_x419;
            const double var_x421 = 0.00035740000000000001 * var_x420;
            const double var_x422 = -0.00035740000000000001 + var_x421;
            const double var_x423 = var_x422 * var_chaste_interface__ICaL__d;
            const double var_x424 = var_x412 * var_x423;
            const double var_x425 = var_x21 * var_x76;
            const double var_x426 = var_x425 * (var_x351 + var_x353 + var_x354 - var_x346 - var_x349);
            const double var_x427 = 0.59999999999999998 * var_chaste_interface__ICaL__ffp;
            const double var_x428 = var_x408 + var_x406 * var_chaste_interface__ICaL__fcafp;
            const double var_x429 = var_x428 * var_chaste_interface__ICaL__jca;
            const double var_x430 = var_x399 * (var_x400 + var_x427) + var_x429 * var_chaste_interface__ICaL__nca;
            const double var_x431 = var_x420 * var_x430;
            const double var_x432 = var_x431 * mParameters[5];
            const double var_x433 = 0.00039314000000000005 * var_x432;
            const double var_x434 = var_x398 * var_chaste_interface__ICaL__d;
            const double var_x435 = var_x433 * var_x434;
            const double var_x436 = var_x358 + var_x75;
            const double var_x437 = var_x10 * var_x436;
            const double var_x438 = 3.3261382388091721e-14 * var_x437;
            const double var_x439 = var_x21 * var_x72;
            const double var_x440 = 1.9046600420239519e-18 * var_x439;
            const double var_x441 = 9.9999999999999995e-8 * var_x382 + var_chaste_interface__membrane__v;
            const double var_x442 = ((var_x384) ? (-var_x377 + var_x379 * var_x441) : (var_x392 * var_chaste_interface__membrane__v));
            const double var_x443 = var_x442 * mParameters[5];
            const double var_x444 = var_x423 * var_x443;
            const double var_x445 = 0.059999999999999998 * var_x403 / pow(var_x404, 2);
            const double var_x446 = var_x445 * var_chaste_interface__ICaL__fcas;
            const double var_x447 = var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca;
            const double var_x448 = var_x447 * (var_x446 - var_x445 * var_chaste_interface__ICaL__fcaf);
            const double var_x449 = 0.00039314000000000005 * var_x443;
            const double var_x450 = var_x420 * var_chaste_interface__ICaL__d;
            const double var_x451 = var_x447 * (var_x446 - var_x445 * var_chaste_interface__ICaL__fcafp);
            const double var_x452 = var_x450 * var_x451;
            const double var_x453 = var_x449 * var_x452;
            const double var_x454 = var_x1 * var_x425 * var_x72;
            const double var_x455 = var_x72 * var_x76;
            const double var_x456 = var_x35 * var_x455;
            const double var_x457 = var_x338 * var_x436 * var_x76;
            const double var_x458 = -0.34100000000000003 * mParameters[0];
            const double var_x459 = 4.9999999999999992e-15 * mParameters[3];
            const double var_x460 = var_x371 * var_x459;
            const double var_x461 = var_x375 * var_x459;
            const double var_x462 = var_x461 * (var_x458 + var_x374 * var_chaste_interface__intracellular_ions__casl);
            const double var_x463 = 10000000.0 * var_x1;
            const double var_x464 = var_x463 * (var_x462 + var_x460 * (var_x458 + var_x369 * var_chaste_interface__intracellular_ions__casl));
            const double var_x465 = 4.9999999999999998e-8 * var_x383;
            const double var_x466 = var_x380 < var_x465;
            const double var_x467 = exp(2.0 * var_x2);
            const double var_x468 = var_x467 * var_chaste_interface__intracellular_ions__casl;
            const double var_x469 = var_x458 + var_x468;
            const double var_x470 = -1.0 + var_x467;
            const double var_x471 = 1 / var_x470;
            const double var_x472 = var_x390 * var_x471;
            const double var_x473 = 9.9999999999999995e-8 * var_x472;
            const double var_x474 = var_x469 * var_x473;
            const double var_x475 = var_x394 * var_x471;
            const double var_x476 = var_x467 * var_chaste_interface__membrane__v;
            const double var_x477 = var_x393 * var_x476 / pow(var_x470, 2);
            const double var_x478 = var_chaste_interface__ICaT__b * var_chaste_interface__ICaT__g;
            const double var_x479 = 0.075399999999999995 * var_x478;
            const double var_x480 = -var_x479 - ((var_x466) ? (var_x464) : (var_x474 + 1.9999999999999999e-7 * var_x468 * var_x475 - 1.9999999999999999e-7 * var_x469 * var_x477));
            const double var_x481 = -0.75 * mParameters[2];
            const double var_x482 = 0.75 * var_chaste_interface__intracellular_ions__nass;
            const double var_x483 = var_x376 * (var_x481 + var_x374 * var_x482);
            const double var_x484 = var_x378 * (var_x483 + var_x373 * (var_x481 + var_x369 * var_x482));
            const double var_x485 = var_x385 * var_x482;
            const double var_x486 = var_x481 + var_x485;
            const double var_x487 = var_x391 * var_x486;
            const double var_x488 = ((var_x384) ? (var_x484) : (var_x487 + var_x395 * var_x485 - var_x397 * var_x486));
            const double var_x489 = -0.00125 + 0.00125 * var_x420;
            const double var_x490 = var_x412 * var_x489;
            const double var_x491 = var_x490 * var_chaste_interface__ICaL__d;
            const double var_x492 = 0.0013750000000000001 * var_x432;
            const double var_x493 = ((var_x384) ? (-var_x483 + var_x441 * var_x484) : (var_x487 * var_chaste_interface__membrane__v));
            const double var_x494 = var_x493 * mParameters[5];
            const double var_x495 = var_x489 * var_x494;
            const double var_x496 = var_x448 * var_chaste_interface__ICaL__d;
            const double var_x497 = 0.0013750000000000001 * var_x494;
            const double var_x498 = var_x488 * var_x491 + var_x495 * var_x496 - var_x452 * var_x497 - var_x488 * var_x492 * var_chaste_interface__ICaL__d;
            const double var_x499 = 1.9999999999999999e-7 * mParameters[3];
            const double var_x500 = var_x371 * var_x499;
            const double var_x501 = var_x375 * var_x499;
            const double var_x502 = var_x501 * (var_x458 + var_x374 * var_chaste_interface__intracellular_ions__cass);
            const double var_x503 = var_x463 * (var_x502 + var_x500 * (var_x458 + var_x369 * var_chaste_interface__intracellular_ions__cass));
            const double var_x504 = var_x467 * var_chaste_interface__intracellular_ions__cass;
            const double var_x505 = var_x458 + var_x504;
            const double var_x506 = 4.0 * var_x472;
            const double var_x507 = var_x505 * var_x506;
            const double var_x508 = ((var_x466) ? (var_x503) : (var_x507 + 8.0 * var_x475 * var_x504 - 8.0 * var_x477 * var_x505));
            const double var_x509 = var_x420;
            const double var_x510 = -1.0 + var_x509;
            const double var_x511 = var_x412 * var_x510;
            const double var_x512 = var_x511 * var_chaste_interface__ICaL__d;
            const double var_x513 = 1.1000000000000001 * var_x431;
            const double var_x514 = mParameters[5] * var_chaste_interface__ICaL__d;
            const double var_x515 = var_x513 * var_x514;
            const double var_x516 = var_x508 * var_x515;
            const double var_x517 = 4.9999999999999998e-8 * var_x382 + var_chaste_interface__membrane__v;
            const double var_x518 = -var_x502 + var_x503 * var_x517;
            const double var_x519 = var_x507 * var_chaste_interface__membrane__v;
            const double var_x520 = ((var_x466) ? (var_x518) : (var_x519));
            const double var_x521 = var_x520 * mParameters[5];
            const double var_x522 = var_x510 * var_x521;
            const double var_x523 = 1.1000000000000001 * var_x521;
            const double var_x524 = var_x450 * var_x523;
            const double var_x525 = var_x451 * var_x524;
            const double var_x526 = -var_x516 - var_x525 + var_x496 * var_x522 + var_x508 * var_x512;
            const double var_x527 = -mParameters[2];
            const double var_x528 = 9.3749999999999983e-17 * mParameters[3];
            const double var_x529 = var_x371 * var_x528;
            const double var_x530 = var_x375 * var_x528;
            const double var_x531 = exp(var_x2);
            const double var_x532 = var_x531 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x533 = var_x527 + var_x532;
            const double var_x534 = -1.0 + var_x531;
            const double var_x535 = 9.3749999999999992e-10 / var_x534;
            const double var_x536 = var_x390 * var_x535;
            const double var_x537 = var_x531 * var_chaste_interface__membrane__v;
            const double var_x538 = pow(var_chaste_interface__If__y, 2);
            const double var_x539 = var_x538 * mParameters[8];
            const double var_x540 = 1.0 - var_x509;
            const double var_x541 = (-var_x509 * var_chaste_interface__INaL__hLp - var_x540 * var_chaste_interface__INaL__hL) * mParameters[10];
            const double var_x542 = var_x541 * var_chaste_interface__INaL__mL;
            const double var_x543 = 0.98999999999999999 * var_chaste_interface__INa__hf;
            const double var_x544 = var_x543 + 0.010000000000000009 * var_chaste_interface__INa__hs;
            const double var_x545 = var_x540 * var_x544;
            const double var_x546 = var_x543 + 0.010000000000000009 * var_chaste_interface__INa__hsp;
            const double var_x547 = var_x546 * var_chaste_interface__INa__jp;
            const double var_x548 = var_x509 * var_x547 + var_x545 * var_chaste_interface__INa__j;
            const double var_x549 = pow(var_chaste_interface__INa__m, 3) * mParameters[6];
            const double var_x550 = var_x548 * var_x549;
            const double var_x551 = var_x542 - var_x539 - var_x550 - ((var_x384) ? (var_x378 * (var_x529 * (var_x527 + var_x369 * var_chaste_interface__intracellular_ions__nasl) + var_x530 * (var_x527 + var_x374 * var_chaste_interface__intracellular_ions__nasl))) : (var_x533 * var_x536 + var_x394 * var_x532 * var_x535 - 9.3749999999999992e-10 * var_x393 * var_x533 * var_x537 / pow(var_x534, 2)));
            const double var_x552 = exp(0.75 - 0.0625 * var_chaste_interface__membrane__v);
            const double var_x553 = 1.0 + var_x552;
            const double var_x554 = 0.030099999999999998 / var_x553;
            const double var_x555 = var_x538 * mParameters[7];
            const double var_x556 = 1 / var_chaste_interface__intracellular_ions__ksl;
            const double var_x557 = var_x382 * log(var_x556 * mParameters[1]);
            const double var_x558 = -var_x557 + var_chaste_interface__membrane__v;
            const double var_x559 = 1 / var_chaste_interface__intracellular_ions__casl;
            const double var_x560 = pow(var_x559, 1.3999999999999999);
            const double var_x561 = 1.0 + 6.4818210260626455e-7 * var_x560;
            const double var_x562 = -1.0 - 0.59999999999999998 / var_x561;
            const double var_x563 = var_x562 * mParameters[12] * var_chaste_interface__IKs__xs2;
            const double var_x564 = var_x563 * var_chaste_interface__IKs__xs1;
            const double var_x565 = mParameters[13] * var_chaste_interface__Ito__i1 * var_chaste_interface__Ito__i2;
            const double var_x566 = var_x565 * var_chaste_interface__Ito__a;
            const double var_x567 = exp(10.545454545454545 + 0.090909090909090912 * var_chaste_interface__membrane__v - 0.5 * mParameters[1]);
            const double var_x568 = 1.0 + var_x567;
            const double var_x569 = sqrt(mParameters[1]);
            const double var_x570 = var_x569 * mParameters[9] / var_x568;
            const double var_x571 = 1.000004299990755 * var_x570;
            const double var_x572 = var_x571 * var_chaste_interface__IK1__xk1;
            const double var_x573 = exp(-1.0416666666666667 + 0.10416666666666667 * var_chaste_interface__membrane__v);
            const double var_x574 = 1.0 + var_x573;
            const double var_x575 = 1 / var_x574;
            const double var_x576 = exp(1.4344412457471867 + 0.026171159382360639 * var_chaste_interface__membrane__v);
            const double var_x577 = 1.0 + var_x576;
            const double var_x578 = 1 / var_x577;
            const double var_x579 = var_x578;
            const double var_x580 = 1.0 - var_x579;
            const double var_x581 = var_x579 * var_chaste_interface__IKr__xrf + var_x580 * var_chaste_interface__IKr__xrs;
            const double var_x582 = var_x569 * var_x575 * var_x581 * mParameters[11];
            const double var_x583 = exp(2.2916666666666665 + 0.041666666666666664 * var_chaste_interface__membrane__v);
            const double var_x584 = 1.0 + var_x583;
            const double var_x585 = 1 / var_x584;
            const double var_x586 = 0.43033148291193518 * var_x585;
            const double var_x587 = var_x582 * var_x586;
            const double var_x588 = var_x558 * var_x569;
            const double var_x589 = 0.026171159382360639 * var_x576 / pow(var_x577, 2);
            const double var_x590 = var_x588 * mParameters[11];
            const double var_x591 = var_x575 * var_x586 * var_x590;
            const double var_x592 = var_x564 - var_x554 - var_x555 - var_x566 - var_x572 - var_x587 - var_x591 * (var_x589 * var_chaste_interface__IKr__xrs - var_x589 * var_chaste_interface__IKr__xrf) - 0.0018812499999999999 * var_x552 * var_x558 / pow(var_x553, 2) + 0.017930478454663966 * var_x558 * var_x582 * var_x583 / pow(var_x584, 2) + 0.044826196136659918 * var_x573 * var_x581 * var_x585 * var_x590 / pow(var_x574, 2) + 0.090909481817341362 * var_x567 * var_x588 * mParameters[9] * var_chaste_interface__IK1__xk1 / pow(var_x568, 2);
            
            partialF = var_x480 + var_x498 + var_x526 + var_x551 + var_x592 - var_x435 - var_x453 + 82.600849572375722 * var_x426 + 12.803131683718236 * var_x454 - 0.088195275017347044 * var_x456 - 987.32334834492804 * var_x457 + var_x343 * var_x345 + var_x361 * var_x364 + var_x361 * var_x440 + var_x398 * var_x424 + var_x444 * var_x448 - var_x236 * var_x240 - var_x331 * var_x335 - var_x356 * var_x360 - var_x361 * var_x438 - var_x365 * var_x367 - var_x68 * var_x77;
        }
        else
        {
            const double y_save = rY[0];
            rY[0] += delta;
            const double temp = EvaluateYDerivative0(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[0])/delta;
            rY[0] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 4.36004404734282e-05
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.00505983330678751
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__intracellular_ions__casl = rY[10];
        // Units: millimolar; Initial value: 0.000102004317781147
        double var_chaste_interface__intracellular_ions__cansr = rY[11];
        // Units: millimolar; Initial value: 1.26350902016858
        double var_chaste_interface__ryr__Jrel2 = rY[44];
        // Units: millimolar_per_millisecond; Initial value: 1.25045800437317e-69
        


        // Mathematics
        const double var_diff__Jgap = 0.083333333333333329 * var_chaste_interface__intracellular_ions__casl - 0.083333333333333329 * var_chaste_interface__intracellular_ions__cai; // millimolar_per_millisecond
        const double var_CaMK__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_SERCA__dkmplb = 0.00017000000000000001 * var_CaMK__CaMKa / (0.14999999999999999 + var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__dqupcamk = 0.75 * var_CaMK__CaMKa / (0.14999999999999999 + var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__Jup2 = -0.00027999999999999998 * var_chaste_interface__intracellular_ions__cansr + 0.0025999999999999999 * (1.0 + var_SERCA__dqupcamk) / (1.0 + (0.00027999999999999998 - var_SERCA__dkmplb) / var_chaste_interface__intracellular_ions__cai); // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cai = (0.013333333333333334 * var_chaste_interface__ryr__Jrel2 + 0.25 * var_diff__Jgap - 0.066666666666666666 * var_SERCA__Jup2) / (1.0 + 1.575e-5 / pow((0.00050000000000000001 + var_chaste_interface__intracellular_ions__cai), 2) + 0.00026775000000000003 / pow((0.0023800000000000002 + var_chaste_interface__intracellular_ions__cai), 2)); // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__cai;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__intracellular_ions__cai = rY[1];
            // Units: millimolar; Initial value: 4.36004404734282e-05
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.00505983330678751
            double var_chaste_interface__intracellular_ions__cass = rY[9];
            // Units: millimolar; Initial value: 0.000101777993438818
            double var_chaste_interface__intracellular_ions__casl = rY[10];
            // Units: millimolar; Initial value: 0.000102004317781147
            double var_chaste_interface__intracellular_ions__cansr = rY[11];
            // Units: millimolar; Initial value: 1.26350902016858
            double var_chaste_interface__ryr__Jrel2 = rY[44];
            // Units: millimolar_per_millisecond; Initial value: 1.25045800437317e-69
            


            const double var_x413 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x414 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x415 = 1.0 + 0.0015 * var_x414;
            const double var_x416 = 1 / var_x415;
            const double var_x417 = 0.050000000000000003 * var_x416;
            const double var_x418 = var_x413 * var_x417 + var_chaste_interface__CaMK__CaMKt;
            const double var_x901 = 1 / var_chaste_interface__intracellular_ions__cai;
            const double var_x902 = 0.14999999999999999 + var_x418;
            const double var_x903 = 1 / var_x902;
            const double var_x904 = var_x418 * var_x903;
            const double var_x905 = 0.00027999999999999998 - 0.00017000000000000001 * var_x904;
            const double var_x906 = 1.0 + var_x901 * var_x905;
            const double var_x907 = pow(var_x906, (-2));
            const double var_x908 = 0.00017333333333333334 * var_x907;
            const double var_x909 = 1.0 + 0.75 * var_x904;
            const double var_x910 = var_x905 * var_x909;
            const double var_x911 = var_x910 / pow(var_chaste_interface__intracellular_ions__cai, 2);
            const double var_x912 = -0.020833333333333332 - var_x908 * var_x911;
            const double var_x913 = 0.00050000000000000001 + var_chaste_interface__intracellular_ions__cai;
            const double var_x914 = 0.0023800000000000002 + var_chaste_interface__intracellular_ions__cai;
            const double var_x915 = 1.0 + 1.575e-5 / pow(var_x913, 2) + 0.00026775000000000003 / pow(var_x914, 2);
            const double var_x916 = 1 / var_x915;
            const double var_x917 = var_x916;
            const double var_x918 = 1.8666666666666665e-5 * var_chaste_interface__intracellular_ions__cansr;
            const double var_x919 = 1 / var_x906;
            const double var_x920 = 0.00017333333333333334 * var_x919;
            const double var_x921 = var_x918 + 0.020833333333333332 * var_chaste_interface__intracellular_ions__casl + 0.013333333333333334 * var_chaste_interface__ryr__Jrel2 - 0.020833333333333332 * var_chaste_interface__intracellular_ions__cai - var_x909 * var_x920;
            
            partialF = var_x912 * var_x917 + var_x921 * (3.15e-5 / pow(var_x913, 3) + 0.00053550000000000006 / pow(var_x914, 3)) / pow(var_x915, 2);
        }
        else
        {
            const double y_save = rY[1];
            rY[1] += delta;
            const double temp = EvaluateYDerivative1(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[1])/delta;
            rY[1] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.00505983330678751
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        


        // Mathematics
        const double var_CaMK__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double d_dt_chaste_interface_var_CaMK__CaMKt = -0.00068000000000000005 * var_chaste_interface__CaMK__CaMKt + 0.050000000000000003 * (var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKb; // millimolar / millisecond

        return d_dt_chaste_interface_var_CaMK__CaMKt;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.00505983330678751
            double var_chaste_interface__intracellular_ions__cass = rY[9];
            // Units: millimolar; Initial value: 0.000101777993438818
            


            const double var_x413 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x414 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x415 = 1.0 + 0.0015 * var_x414;
            const double var_x416 = 1 / var_x415;
            const double var_x417 = 0.050000000000000003 * var_x416;
            const double var_x418 = var_x413 * var_x417 + var_chaste_interface__CaMK__CaMKt;
            const double var_x922 = 1 - var_x417;
            const double var_x935 = 0.0025000000000000005 * var_x416;
            
            partialF = -0.00068000000000000005 - var_x418 * var_x935 + var_x413 * var_x922 * var_x935;
        }
        else
        {
            const double y_save = rY[2];
            rY[2] += delta;
            const double temp = EvaluateYDerivative2(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[2])/delta;
            rY[2] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__intracellular_ions__nai = rY[3];
        // Units: millimolar; Initial value: 8.23183964616932
        double var_chaste_interface__intracellular_ions__nasl = rY[4];
        // Units: millimolar; Initial value: 8.23153516580562
        


        // Mathematics
        const double var_diff__JgapNa = 0.083333333333333329 * var_chaste_interface__intracellular_ions__nasl - 0.083333333333333329 * var_chaste_interface__intracellular_ions__nai; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__nai = 0.25 * var_diff__JgapNa; // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__nai;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.020833333333333332;
        }
        else
        {
            const double y_save = rY[3];
            rY[3] += delta;
            const double temp = EvaluateYDerivative3(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[3])/delta;
            rY[3] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.00505983330678751
        double var_chaste_interface__intracellular_ions__nai = rY[3];
        // Units: millimolar; Initial value: 8.23183964616932
        double var_chaste_interface__intracellular_ions__nasl = rY[4];
        // Units: millimolar; Initial value: 8.23153516580562
        double var_chaste_interface__intracellular_ions__nass = rY[5];
        // Units: millimolar; Initial value: 8.23154325237268
        double var_chaste_interface__intracellular_ions__ksl = rY[8];
        // Units: millimolar; Initial value: 143.767769906216
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__intracellular_ions__casl = rY[10];
        // Units: millimolar; Initial value: 0.000102004317781147
        double var_chaste_interface__INa__m = rY[14];
        // Units: dimensionless; Initial value: 0.00632661703915808
        double var_chaste_interface__INa__hf = rY[15];
        // Units: dimensionless; Initial value: 0.788611739889677
        double var_chaste_interface__INa__hs = rY[16];
        // Units: dimensionless; Initial value: 0.788545979951331
        double var_chaste_interface__INa__j = rY[17];
        // Units: dimensionless; Initial value: 0.790474358603666
        double var_chaste_interface__INa__hsp = rY[18];
        // Units: dimensionless; Initial value: 0.579693514309867
        double var_chaste_interface__INa__jp = rY[19];
        // Units: dimensionless; Initial value: 0.790947058236417
        double var_chaste_interface__INaL__mL = rY[20];
        // Units: dimensionless; Initial value: 0.000241925773627233
        double var_chaste_interface__INaL__hL = rY[21];
        // Units: dimensionless; Initial value: 0.463574582508218
        double var_chaste_interface__INaL__hLp = rY[22];
        // Units: dimensionless; Initial value: 0.240216198686475
        double var_chaste_interface__If__y = rY[41];
        // Units: dimensionless; Initial value: 0.233119011214908
        


        // Mathematics
        const double var_INaCa_i__h10_i = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]; // dimensionless
        const double var_INaCa_i__k1_i = 1500000.0 * mParameters[0] / var_INaCa_i__h10_i; // dimensionless
        const double var_CaMK__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_INaCa_i__h4_i = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nasl) * var_chaste_interface__intracellular_ions__nasl; // dimensionless
        const double var_INaCa_i__k6_i = 1500000.0 * var_chaste_interface__intracellular_ions__casl / var_INaCa_i__h4_i; // dimensionless
        const double var_INaK__b3 = 5.7707741857267899e-10 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ksl + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nasl); // dimensionless
        const double var_diff__JgapNa = 0.083333333333333329 * var_chaste_interface__intracellular_ions__nasl - 0.083333333333333329 * var_chaste_interface__intracellular_ions__nai; // millimolar_per_millisecond
        const double var_diff__JdiffNa = 5.0 * var_chaste_interface__intracellular_ions__nass - 5.0 * var_chaste_interface__intracellular_ions__nasl; // millimolar_per_millisecond
        const double var_INaCa_i__hca = exp(0.16700000000000001 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // dimensionless
        const double var_INaCa_i__hna = exp(0.52239999999999998 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nasl; // dimensionless
        const double var_INaCa_i__h2_i = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nasl / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[2]; // dimensionless
        const double var_INaCa_i__h8_i = 0.011348161597821153 * mParameters[2] / (var_INaCa_i__h7_i * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__k3pp_i = 5000.0 * var_INaCa_i__h8_i; // dimensionless
        const double var_INaCa_i__k3_i = 60000.0 / var_INaCa_i__h7_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k4pp_i = 5000.0 * var_INaCa_i__h2_i; // dimensionless
        const double var_INaCa_i__k4_i = 60000.0 / (var_INaCa_i__h1_i * var_INaCa_i__hca) + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k7_i = 800.0 * pow(var_chaste_interface__intracellular_ions__nasl, 2) * var_INaCa_i__h2_i / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k8_i = 800.0 * pow(mParameters[2], 2) * var_INaCa_i__h8_i / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__x1_i = 5000.0 * (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k7_i + 5000.0 * (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x2_i = (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i + (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i; // dimensionless
        const double var_INaCa_i__x3_i = (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x4_i = 5000.0 * (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k8_i + 5000.0 * (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaK__Knai = 9.0730000000000004 * exp(-0.051666666666666666 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // millimolar
        const double var_INaK__Knao = 27.780000000000001 * exp(0.38500000000000001 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // millimolar
        const double var_INaK__a1 = 949.5 * pow(var_chaste_interface__intracellular_ions__nasl, 3) / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nasl / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ksl), 2)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = 14800.411886344058 * pow(mParameters[1], 2) / (-1.0 + pow((1.0 + mParameters[2] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[1]), 2)); // dimensionless
        const double var_INaK__b2 = 39.399999999999999 * pow(mParameters[2], 3) / ((-1.0 + pow((1.0 + mParameters[2] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[1]), 2)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = 160.0 * pow(var_chaste_interface__intracellular_ions__ksl, 2) / (-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nasl / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ksl), 2)); // dimensionless
        const double var_INaK__x1 = 439120.79239156016 * var_INaK__a1 + 687.20000000000005 * var_INaK__a1 * var_INaK__b3 + 687.20000000000005 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = 687.20000000000005 * var_INaK__a1 * var_INaK__a3 + 696.32000000000005 * var_INaK__a3 * var_INaK__b4 + 9.120000000000001 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = 444948.47229058668 * var_INaK__a3 + 5827.6798990265261 * var_INaK__b2 + 9.120000000000001 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = 638.99998892834708 * var_INaK__a1 * var_INaK__a3 + 638.99998892834708 * var_INaK__a1 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.3749999999999983e-17 * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (9.3749999999999983e-17 * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.3749999999999983e-17 * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (9.3749999999999992e-10 * pow(mParameters[3], 2) * (-mParameters[2] + var_chaste_interface__intracellular_ions__nasl * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))); // microA_per_microF
        const double var_INaCa_i__INaCa_i = 0.00076567200000000001 * (10000.0 * var_INaCa_i__E2_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i - 2.0 * var_INaCa_i__E1_i * var_INaCa_i__k1_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i + var_INaCa_i__k4pp_i * var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i) + 3.0 * var_INaCa_i__k7_i * var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i)) / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__casl, 2)); // microA_per_microF
        const double var_INaK__INaK = 592.56652800000006 * var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) + 97.461600000000004 * var_INaK__a3 * var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 64.974400000000003 * var_INaK__a1 * var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 97.461600000000004 * var_INaK__b3 * var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // microA_per_microF
        const double var_reversal_potentials__ENa = mParameters[4] * mParameters[14] * log(mParameters[2] / var_chaste_interface__intracellular_ions__nasl) / mParameters[3]; // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (0.010000000000000009 * var_chaste_interface__INa__hs + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__j + (0.010000000000000009 * var_chaste_interface__INa__hsp + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__jp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * mParameters[6]; // microA_per_microF
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * var_chaste_interface__INaL__hL + var_chaste_interface__INaL__hLp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * mParameters[10] * var_chaste_interface__INaL__mL; // microA_per_microF
        const double var_If__IfNa = pow(var_chaste_interface__If__y, 2) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * mParameters[8]; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__nasl = -var_diff__JgapNa + 0.13333333333333333 * var_diff__JdiffNa + 16.864111498257842 * (-var_INa__INa - var_INaL__INaL - var_INab__INab - var_If__IfNa - 3.0 * var_INaCa_i__INaCa_i - 3.0 * var_INaK__INaK) / mParameters[3]; // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__nasl;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.00505983330678751
            double var_chaste_interface__intracellular_ions__nasl = rY[4];
            // Units: millimolar; Initial value: 8.23153516580562
            double var_chaste_interface__intracellular_ions__ksl = rY[8];
            // Units: millimolar; Initial value: 143.767769906216
            double var_chaste_interface__intracellular_ions__cass = rY[9];
            // Units: millimolar; Initial value: 0.000101777993438818
            double var_chaste_interface__intracellular_ions__casl = rY[10];
            // Units: millimolar; Initial value: 0.000102004317781147
            double var_chaste_interface__INa__m = rY[14];
            // Units: dimensionless; Initial value: 0.00632661703915808
            double var_chaste_interface__INa__hf = rY[15];
            // Units: dimensionless; Initial value: 0.788611739889677
            double var_chaste_interface__INa__hs = rY[16];
            // Units: dimensionless; Initial value: 0.788545979951331
            double var_chaste_interface__INa__j = rY[17];
            // Units: dimensionless; Initial value: 0.790474358603666
            double var_chaste_interface__INa__hsp = rY[18];
            // Units: dimensionless; Initial value: 0.579693514309867
            double var_chaste_interface__INa__jp = rY[19];
            // Units: dimensionless; Initial value: 0.790947058236417
            double var_chaste_interface__INaL__mL = rY[20];
            // Units: dimensionless; Initial value: 0.000241925773627233
            double var_chaste_interface__INaL__hL = rY[21];
            // Units: dimensionless; Initial value: 0.463574582508218
            double var_chaste_interface__INaL__hLp = rY[22];
            // Units: dimensionless; Initial value: 0.240216198686475
            double var_chaste_interface__If__y = rY[41];
            // Units: dimensionless; Initial value: 0.233119011214908
            


            const double var_x0 = 1 / (mParameters[4] * mParameters[14]);
            const double var_x1 = var_x0 * mParameters[3];
            const double var_x2 = var_x1 * var_chaste_interface__membrane__v;
            const double var_x3 = exp(0.38500000000000001 * var_x2);
            const double var_x4 = mParameters[2] / var_x3;
            const double var_x5 = 1.0 + 0.035997120230381568 * var_x4;
            const double var_x6 = pow(var_x5, 3);
            const double var_x7 = pow((0.35820000000000002 + mParameters[1]), 2);
            const double var_x8 = 1 / (-1.0 + var_x6 + 7.7937924625297832 * var_x7);
            const double var_x9 = pow(mParameters[1], 2);
            const double var_x10 = var_x8 * var_x9;
            const double var_x11 = pow(var_chaste_interface__intracellular_ions__nasl, 3);
            const double var_x12 = exp(-0.051666666666666666 * var_x2);
            const double var_x13 = 1 / var_x12;
            const double var_x14 = var_x13 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x15 = 1.0 + 0.11021712774165104 * var_x14;
            const double var_x16 = pow(var_x15, 3);
            const double var_x17 = pow((0.5 + var_chaste_interface__intracellular_ions__ksl), 2);
            const double var_x18 = 1 / (-1.0 + var_x16 + 4.0 * var_x17);
            const double var_x19 = pow(var_x12, (-3));
            const double var_x20 = var_x18 * var_x19;
            const double var_x21 = var_x11 * var_x20;
            const double var_x22 = var_x10 * var_x21;
            const double var_x24 = pow(mParameters[2], 3);
            const double var_x25 = var_x24 * var_x8 / pow(var_x3, 3);
            const double var_x26 = var_x21 * var_x25;
            const double var_x27 = 1.4929407925401197 * var_x26;
            const double var_x31 = pow((-0.25 + var_x17 + 0.25 * var_x16), (-2));
            const double var_x32 = pow(var_x15, 2);
            const double var_x33 = var_x32 / pow(var_x12, 4);
            const double var_x43 = 1 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ksl + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nasl);
            const double var_x44 = var_x21 * var_x43;
            const double var_x52 = var_x25 * var_x43;
            const double var_x54 = pow(var_chaste_interface__intracellular_ions__ksl, 2);
            const double var_x55 = var_x18 * var_x54;
            const double var_x56 = var_x43 * var_x55;
            const double var_x57 = var_x25 * var_x56;
            const double var_x63 = var_x31 * var_x54;
            const double var_x64 = var_x32 * var_x63;
            const double var_x69 = var_x10 * var_x55;
            const double var_x70 = var_x25 * var_x55;
            const double var_x71 = 2.6817254812739919 * var_x70 + 1648931648.7518551 * var_x69;
            const double var_x72 = 6585420658.1002293 * var_x10 + 9.6722701128385645e-12 * var_x52 + 10.71014095526842 * var_x25;
            const double var_x73 = var_x25 * var_x44;
            const double var_x74 = var_x27 + 1.348266719199441e-12 * var_x73;
            const double var_x75 = 6.3450816326903207e-5 * var_x56 + 5.041496472709802e-7 * var_x44 + 558246.7943749798 * var_x21;
            const double var_x76 = 1 / (var_x71 + var_x72 + var_x74 + var_x75 + 3.3937789869608994e-10 * var_x57 + 24953131.661984976 * var_x22);
            const double var_x79 = 1 / (13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]);
            const double var_x80 = exp(0.52239999999999998 * var_x2);
            const double var_x81 = 1 / var_x80;
            const double var_x82 = 1.0 + 0.011348161597821153 * (1.0 + var_x81) * mParameters[2];
            const double var_x87 = 1 / var_x82;
            const double var_x88 = var_x81 * var_x87;
            const double var_x89 = var_x24 * var_x79;
            const double var_x90 = var_x88 * var_x89;
            const double var_x93 = 0.011348161597821153 + 0.011348161597821153 * var_x80;
            const double var_x96 = 1 / exp(0.16700000000000001 * var_x2);
            const double var_x122 = var_x79 * mParameters[0];
            const double var_x123 = 1500000.0 * var_x122;
            const double var_x124 = var_x123 + 9.0785292782569211 * var_x90;
            const double var_x147 = var_x88 * mParameters[2];
            const double var_x148 = 56.740807989105761 * var_x147;
            const double var_x149 = var_x148 + 60000.0 * var_x87;
            const double var_x150 = 5000.0 + var_x149;
            const double var_x154 = var_x150 * var_x90;
            const double var_x158 = var_x124 * var_x149;
            const double var_x159 = 5000.0 * var_x158;
            const double var_x164 = 0.00036716666666666668 * var_x158;
            const double var_x166 = 0.11015000000000001 * var_x122;
            const double var_x180 = var_x123 * var_x149;
            const double var_x189 = 45392.646391284608 * var_x90;
            const double var_x213 = 3000000.0 * var_x122;
            const double var_x217 = 1.6177363333333335e-8 * var_x122;
            const double var_x225 = 27.235587834770765 * var_x90;
            const double var_x227 = 1.4686666666666667e-13 * var_x90;
            const double var_x241 = 1.0 + var_x93 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x242 = 1 / var_x241;
            const double var_x243 = var_x242 * var_x96;
            const double var_x244 = var_x242 * var_x80;
            const double var_x245 = 56.740807989105761 * var_x244;
            const double var_x246 = var_x245 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x247 = var_x246 + 60000.0 * var_x243;
            const double var_x248 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nasl) * var_chaste_interface__intracellular_ions__nasl;
            const double var_x249 = 1 / var_x248;
            const double var_x250 = 1500000.0 * var_x249;
            const double var_x251 = var_x250 * var_chaste_interface__intracellular_ions__casl;
            const double var_x254 = var_x244 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x256 = pow(var_x241, (-2));
            const double var_x257 = pow(var_chaste_interface__intracellular_ions__nasl, 2);
            const double var_x260 = var_x256 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x263 = var_x124 * var_x251;
            const double var_x265 = var_x244 * var_x249;
            const double var_x266 = var_x11 * var_x265;
            const double var_x267 = var_x122 * var_x266;
            const double var_x268 = 13617793.917385383 * var_x267;
            const double var_x270 = 5000.0 + var_x247;
            const double var_x271 = var_x267 * var_x270;
            const double var_x273 = var_x122 * var_x249;
            const double var_x274 = var_x256 * var_x273;
            const double var_x277 = var_x124 * var_x247;
            const double var_x278 = 13617793.917385383 * var_x271 + var_x251 * var_x277;
            const double var_x279 = var_x251 + 9.0785292782569211 * var_x266;
            const double var_x280 = var_x247 * var_x279;
            const double var_x281 = var_x150 * var_x266;
            const double var_x282 = 5000.0 * var_x280 + 45392.646391284608 * var_x281;
            const double var_x283 = var_x154 * var_x249;
            const double var_x284 = var_x283 * var_chaste_interface__intracellular_ions__casl;
            const double var_x285 = 13617793.917385383 * var_x284 + var_x180 * var_x279;
            const double var_x286 = var_x159 + var_x189 * var_x270;
            const double var_x287 = 1 / (var_x278 + var_x282 + var_x285 + var_x286);
            const double var_x288 = 10000.0 * var_x287;
            const double var_x289 = var_x249 * var_x277;
            const double var_x290 = var_x270 * var_x90;
            const double var_x291 = pow((var_x164 + var_x271 + var_x284 + 0.0033333333333333331 * var_x281 + 0.0033333333333333331 * var_x290 + 0.00036716666666666668 * var_x280 + 0.11015000000000001 * var_x289 * var_chaste_interface__intracellular_ions__casl + var_x149 * var_x166 * var_x279), (-2));
            const double var_x293 = 283704.03994552878 * var_x244;
            const double var_x294 = 300000000.0 * var_x243 + var_x293 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x295 = var_x249 * var_x256;
            const double var_x313 = 5.3924544444444452e-11 * var_x278;
            const double var_x315 = var_x213 * var_x287;
            const double var_x316 = var_x246 * var_x287;
            const double var_x317 = var_x148 * var_x287;
            const double var_x318 = var_x217 * var_x282;
            const double var_x320 = var_x254 * var_x285;
            const double var_x321 = 27.235587834770765 * var_x287;
            const double var_x323 = var_x147 * var_x278;
            const double var_x324 = var_x225 * var_x287;
            const double var_x325 = 1.4686666666666667e-13 * var_x266 * var_x286;
            const double var_x326 = var_x227 * var_x282;
            const double var_x328 = var_x285 * var_x287;
            const double var_x330 = var_x286 * var_x287;
            const double var_x332 = pow(var_chaste_interface__intracellular_ions__casl, (-2));
            const double var_x333 = 1.0 + 2.2499999999999996e-8 * var_x332;
            const double var_x334 = 1 / var_x333;
            const double var_x344 = var_x43 * var_x76;
            const double var_x357 = pow((var_x10 + 0.25039124064514068 * var_x69 + 7.6555420442407695e-17 * var_x44 + 8.4770104046173956e-5 * var_x21 + 2.0473509426327076e-22 * var_x73 + 0.0037891477184972245 * var_x22 + 9.6350437764149725e-15 * var_x56 + 4.0722159152815902e-10 * var_x70 + 1.4687399051632995e-21 * var_x52 + 1.6263412029867345e-9 * var_x25 + 5.1534733514501733e-20 * var_x57 + 2.2670393738686469e-10 * var_x26), (-2));
            const double var_x358 = 1.6968894934804497e-10 * var_x57;
            const double var_x359 = var_x357 * (var_x358 + var_x74 + 12023111.890251627 * var_x22);
            const double var_x362 = var_x71 + 12930019.771733347 * var_x22;
            const double var_x363 = var_x362 * var_x43;
            const double var_x366 = var_x10 * var_x76;
            const double var_x369 = exp(9.9999999999999995e-8);
            const double var_x371 = 1 / (-1.0 + var_x369);
            const double var_x374 = exp(-9.9999999999999995e-8);
            const double var_x375 = 1 / (-1.0 + var_x374);
            const double var_x378 = 5000000.0 * var_x1;
            const double var_x380 = fabs(var_chaste_interface__membrane__v);
            const double var_x381 = 1 / mParameters[3];
            const double var_x382 = var_x381 * mParameters[4] * mParameters[14];
            const double var_x383 = fabs(var_x382);
            const double var_x384 = var_x380 < 9.9999999999999995e-8 * var_x383;
            const double var_x390 = var_x0 * pow(mParameters[3], 2);
            const double var_x413 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x414 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x415 = 1.0 + 0.0015 * var_x414;
            const double var_x416 = 1 / var_x415;
            const double var_x417 = 0.050000000000000003 * var_x416;
            const double var_x418 = var_x413 * var_x417 + var_chaste_interface__CaMK__CaMKt;
            const double var_x419 = 1.0 + 0.14999999999999999 / var_x418;
            const double var_x420 = 1 / var_x419;
            const double var_x436 = var_x358 + var_x75;
            const double var_x437 = var_x10 * var_x436;
            const double var_x439 = var_x21 * var_x72;
            const double var_x441 = 9.9999999999999995e-8 * var_x382 + var_chaste_interface__membrane__v;
            const double var_x455 = var_x72 * var_x76;
            const double var_x509 = var_x420;
            const double var_x528 = 9.3749999999999983e-17 * mParameters[3];
            const double var_x529 = var_x371 * var_x528;
            const double var_x530 = var_x375 * var_x528;
            const double var_x531 = exp(var_x2);
            const double var_x534 = -1.0 + var_x531;
            const double var_x535 = 9.3749999999999992e-10 / var_x534;
            const double var_x536 = var_x390 * var_x535;
            const double var_x537 = var_x531 * var_chaste_interface__membrane__v;
            const double var_x538 = pow(var_chaste_interface__If__y, 2);
            const double var_x539 = var_x538 * mParameters[8];
            const double var_x540 = 1.0 - var_x509;
            const double var_x541 = (-var_x509 * var_chaste_interface__INaL__hLp - var_x540 * var_chaste_interface__INaL__hL) * mParameters[10];
            const double var_x542 = var_x541 * var_chaste_interface__INaL__mL;
            const double var_x543 = 0.98999999999999999 * var_chaste_interface__INa__hf;
            const double var_x544 = var_x543 + 0.010000000000000009 * var_chaste_interface__INa__hs;
            const double var_x545 = var_x540 * var_x544;
            const double var_x546 = var_x543 + 0.010000000000000009 * var_chaste_interface__INa__hsp;
            const double var_x547 = var_x546 * var_chaste_interface__INa__jp;
            const double var_x548 = var_x509 * var_x547 + var_x545 * var_chaste_interface__INa__j;
            const double var_x549 = pow(var_chaste_interface__INa__m, 3) * mParameters[6];
            const double var_x550 = var_x548 * var_x549;
            const double var_x604 = 1 / var_chaste_interface__intracellular_ions__nasl;
            const double var_x619 = var_x20 * var_x257;
            const double var_x620 = var_x10 * var_x619;
            const double var_x621 = 4.4788223776203591 * var_x25 * var_x619;
            const double var_x622 = var_x11 * var_x31;
            const double var_x623 = var_x33 * var_x622;
            const double var_x624 = var_x10 * var_x623;
            const double var_x625 = 4.0448001575983228e-12 * var_x52 * var_x619;
            const double var_x626 = pow((1 + 0.0028096208831939005 * var_chaste_interface__intracellular_ions__nasl + 0.0021553256090254577 * var_chaste_interface__intracellular_ions__ksl), (-2));
            const double var_x627 = var_x21 * var_x626;
            const double var_x628 = var_x25 * var_x627;
            const double var_x629 = 2.3840715066649271e-15 * var_x628;
            const double var_x630 = 0.030852683632896775 * var_x25 * var_x623;
            const double var_x631 = 2.786289097871654e-14 * var_x52 * var_x623;
            const double var_x632 = var_x55 * var_x626;
            const double var_x633 = var_x25 * var_x632;
            const double var_x634 = var_x13 * var_x64;
            const double var_x635 = var_x52 * var_x634;
            const double var_x636 = -3.0005234378016216e-13 * var_x633 - 3.5067428637450051e-12 * var_x635;
            const double var_x637 = var_x621 + var_x625 + var_x636 - var_x629 - var_x630 - var_x631 + 36069335.67075488 * var_x620 - 248466.16107375509 * var_x624;
            const double var_x638 = -0.011348161597821153 - 0.011348161597821153 * var_x80;
            const double var_x639 = var_x638 * var_x96;
            const double var_x640 = var_x256 * var_x639;
            const double var_x641 = var_x638 * var_x80;
            const double var_x642 = 56.740807989105761 * var_x641;
            const double var_x643 = var_x260 * var_x642;
            const double var_x644 = var_x245 + var_x643 + 60000.0 * var_x640;
            const double var_x645 = var_x263 * var_x644;
            const double var_x646 = (-0.066666666666666666 - 0.026666666666666668 * var_chaste_interface__intracellular_ions__nasl) / pow(var_x248, 2);
            const double var_x647 = var_x646 * var_chaste_interface__intracellular_ions__casl;
            const double var_x648 = 1500000.0 * var_x647;
            const double var_x649 = var_x277 * var_x648;
            const double var_x650 = var_x257 * var_x265;
            const double var_x651 = 40853381.752156146 * var_x122;
            const double var_x652 = var_x270 * var_x650 * var_x651;
            const double var_x653 = var_x268 * var_x644;
            const double var_x654 = var_x244 * var_x646;
            const double var_x655 = var_x11 * var_x654;
            const double var_x656 = 13617793.917385383 * var_x270;
            const double var_x657 = var_x122 * var_x655 * var_x656;
            const double var_x658 = var_x11 * var_x274 * var_x641 * var_x656;
            const double var_x659 = var_x645 + var_x649 + var_x652 + var_x653 + var_x657 + var_x658;
            const double var_x660 = 283704.03994552878 * var_x641;
            const double var_x661 = var_x279 * (var_x293 + 300000000.0 * var_x640 + var_x260 * var_x660);
            const double var_x662 = 9.0785292782569211 * var_x11;
            const double var_x663 = var_x295 * var_x641;
            const double var_x664 = var_x648 + 27.235587834770765 * var_x650 + var_x654 * var_x662 + var_x662 * var_x663;
            const double var_x665 = var_x294 * var_x664;
            const double var_x666 = var_x180 * var_x664;
            const double var_x667 = 136177.93917385384 * var_x150;
            const double var_x668 = var_x650 * var_x667;
            const double var_x669 = 45392.646391284608 * var_x150;
            const double var_x670 = var_x655 * var_x669;
            const double var_x671 = var_x11 * var_x663;
            const double var_x672 = var_x669 * var_x671;
            const double var_x673 = 13617793.917385383 * var_x154;
            const double var_x674 = var_x647 * var_x673;
            const double var_x675 = -var_x645 - var_x649 - var_x652 - var_x653 - var_x657 - var_x658 - var_x661 - var_x665 - var_x666 - var_x668 - var_x670 - var_x672 - var_x674 - var_x189 * var_x644;
            const double var_x676 = var_x291 * var_x313;
            const double var_x677 = var_x661 + var_x665 + var_x668 + var_x670 + var_x672;
            const double var_x678 = var_x291 * var_x318;
            const double var_x679 = 3.0597222222222222e-13 * var_x291;
            const double var_x680 = var_x675 * var_x679;
            const double var_x681 = var_x291 * var_x675;
            const double var_x682 = var_x286 * var_x321;
            const double var_x683 = 1236295.4078425223 * var_x87 * var_x89;
            const double var_x684 = var_x245 * var_x328 + var_x288 * var_x659 + var_x316 * (var_x666 + var_x674) + var_x320 * var_x680 + var_x325 * var_x681 + var_x328 * var_x643 + var_x655 * var_x682 + var_x671 * var_x682 + var_x675 * var_x676 - var_x315 * var_x677 - var_x317 * var_x659 - var_x323 * var_x680 - var_x324 * var_x677 - var_x326 * var_x681 - var_x675 * var_x678 + 81.706763504312292 * var_x330 * var_x650 + var_x11 * var_x242 * var_x249 * var_x287 * var_x644 * var_x683;
            const double var_x685 = 34076345.656450219 * var_x10 * var_x634;
            const double var_x686 = 0.055419764988303033 * var_x25 * var_x634;
            const double var_x687 = -var_x685 - var_x686 + 38790059.315200046 * var_x620 - 267208.05766560155 * var_x624;
            const double var_x688 = 1.1219685328242758e-7 * var_x632;
            const double var_x689 = 1674740.3831249396 * var_x619;
            const double var_x690 = 8.9146219515644901e-10 * var_x627;
            const double var_x691 = var_x25 * var_x626;
            const double var_x692 = 11536.567171311443 * var_x623;
            const double var_x693 = 1.5124489418129408e-6 * var_x43 * var_x619;
            const double var_x694 = 1.3112562615776865e-6 * var_x43 * var_x634;
            const double var_x695 = 1.0418611138907615e-8 * var_x43 * var_x623;
            const double var_x696 = var_x629 + var_x630 + var_x631 + var_x685 + var_x686 + var_x688 + var_x690 + var_x692 + var_x694 + var_x695 - var_x621 - var_x625 - var_x689 - var_x693 + 6.0010468756032432e-13 * var_x633 + 7.0134857274900101e-12 * var_x635 + 1.7102983595469244e-14 * var_x691 + 515674.21873935661 * var_x624 - 74859394.985954925 * var_x620;
            const double var_x697 = var_x626 * var_x76;
            const double var_x698 = var_x362 * var_x697;
            const double var_x700 = var_x636 + var_x689 + var_x693 - var_x688 - var_x690 - var_x692 - var_x694 - var_x695;
            const double var_x701 = var_x455 * var_x619;
            const double var_x704 = var_x455 * var_x623;
            const double var_x705 = var_x26 * var_x697;
            const double var_x706 = var_x374 * var_x530;
            const double var_x707 = var_x378 * var_x441;
            const double var_x708 = var_x382 * var_x604;
            const double var_x709 = -((var_x384) ? (-var_x706 + var_x707 * (var_x706 + var_x369 * var_x529)) : (var_x536 * var_x537)) + var_x542 * var_x708 - var_x539 * var_x708 - var_x550 * var_x708;
            const double var_x936 = 1777.6995840000002 * var_x76;
            const double var_x937 = 0.0022970159999999998 * var_x334;
            const double var_x938 = 1.6872866561388904e-7 * var_x344;
            const double var_x939 = 4.0991265609206957e-17 * var_x359;
            const double var_x940 = 3.8906469970046351e-27 * var_x363;
            const double var_x941 = 4327415.4693063302 * var_x366;
            const double var_x942 = 9.9784147164275156e-14 * var_x437;
            const double var_x943 = 5.7139801260718552e-18 * var_x439;
            const double var_x944 = 16.864111498257842 * var_x381;
            const double var_x945 = var_x357 * var_x940;
            const double var_x946 = var_x357 * var_x942;
            const double var_x947 = var_x357 * var_x943;
            
            partialF = -0.75 + var_x944 * (var_x709 + 743.40764615138153 * var_x701 - 4.2381629256244946e-12 * var_x705 - 5.1210159687491839 * var_x704 - 2.9835432286463117e-10 * var_x698 + var_x687 * var_x938 + var_x696 * var_x945 + var_x696 * var_x947 - var_x637 * var_x936 - var_x684 * var_x937 - var_x696 * var_x939 - var_x696 * var_x946 - var_x700 * var_x941);
        }
        else
        {
            const double y_save = rY[4];
            rY[4] += delta;
            const double temp = EvaluateYDerivative4(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[4])/delta;
            rY[4] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.00505983330678751
        double var_chaste_interface__intracellular_ions__nasl = rY[4];
        // Units: millimolar; Initial value: 8.23153516580562
        double var_chaste_interface__intracellular_ions__nass = rY[5];
        // Units: millimolar; Initial value: 8.23154325237268
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__ICaL__d = rY[26];
        // Units: dimensionless; Initial value: 6.97735089296892e-09
        double var_chaste_interface__ICaL__ff = rY[27];
        // Units: dimensionless; Initial value: 0.999999968230738
        double var_chaste_interface__ICaL__fs = rY[28];
        // Units: dimensionless; Initial value: 0.926692153319136
        double var_chaste_interface__ICaL__fcaf = rY[29];
        // Units: dimensionless; Initial value: 0.99999996819573
        double var_chaste_interface__ICaL__fcas = rY[30];
        // Units: dimensionless; Initial value: 0.999999905741936
        double var_chaste_interface__ICaL__jca = rY[31];
        // Units: dimensionless; Initial value: 0.999978907334662
        double var_chaste_interface__ICaL__ffp = rY[32];
        // Units: dimensionless; Initial value: 0.999999968365903
        double var_chaste_interface__ICaL__fcafp = rY[33];
        // Units: dimensionless; Initial value: 0.999999968278239
        double var_chaste_interface__ICaL__nca = rY[34];
        // Units: dimensionless; Initial value: 0.00547252500964926
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_ICaL__PCap = 1.1000000000000001 * mParameters[5]; // dimensionless
        const double var_ICaL__f = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ff; // dimensionless
        const double var_ICaL__fp = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ffp; // dimensionless
        const double var_INaCa_i__h10_ss = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]; // dimensionless
        const double var_INaCa_i__k1_ss = 1500000.0 * mParameters[0] / var_INaCa_i__h10_ss; // dimensionless
        const double var_CaMK__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__k6_ss = 1500000.0 * var_chaste_interface__intracellular_ions__cass / var_INaCa_i__h4_ss; // dimensionless
        const double var_diff__JdiffNa = 5.0 * var_chaste_interface__intracellular_ions__nass - 5.0 * var_chaste_interface__intracellular_ions__nasl; // millimolar_per_millisecond
        const double var_ICaL__Afcaf = _lt_0_row[0]; // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__ICaNa = 0.00125 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * mParameters[5] * var_chaste_interface__ICaL__d + 0.00125 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[2] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_INaCa_i__hca = exp(0.16700000000000001 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // dimensionless
        const double var_INaCa_i__hna = exp(0.52239999999999998 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__h2_ss = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[2]; // dimensionless
        const double var_INaCa_i__h8_ss = 0.011348161597821153 * mParameters[2] / (var_INaCa_i__h7_ss * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__k3pp_ss = 5000.0 * var_INaCa_i__h8_ss; // dimensionless
        const double var_INaCa_i__k3_ss = 60000.0 / var_INaCa_i__h7_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4pp_ss = 5000.0 * var_INaCa_i__h2_ss; // dimensionless
        const double var_INaCa_i__k4_ss = 60000.0 / (var_INaCa_i__h1_ss * var_INaCa_i__hca) + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_ss = 800.0 * pow(var_chaste_interface__intracellular_ions__nass, 2) * var_INaCa_i__h2_ss / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k8_ss = 800.0 * pow(mParameters[2], 2) * var_INaCa_i__h8_ss / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__x1_ss = 5000.0 * (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k7_ss + 5000.0 * (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_ss = (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss; // dimensionless
        const double var_INaCa_i__x3_ss = (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_ss = 5000.0 * (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k8_ss + 5000.0 * (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__INaCa_ss = 0.000191418 * (10000.0 * var_INaCa_i__E2_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss - 2.0 * var_INaCa_i__E1_ss * var_INaCa_i__k1_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss + var_INaCa_i__k4pp_ss * var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss) + 3.0 * var_INaCa_i__k7_ss * var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss)) / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cass, 2)); // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__nass = -var_diff__JdiffNa + 126.4808362369338 * (-var_ICaL__ICaNa - 3.0 * var_INaCa_i__INaCa_ss) / mParameters[3]; // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__nass;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.00505983330678751
            double var_chaste_interface__intracellular_ions__nass = rY[5];
            // Units: millimolar; Initial value: 8.23154325237268
            double var_chaste_interface__intracellular_ions__cass = rY[9];
            // Units: millimolar; Initial value: 0.000101777993438818
            double var_chaste_interface__ICaL__d = rY[26];
            // Units: dimensionless; Initial value: 6.97735089296892e-09
            double var_chaste_interface__ICaL__ff = rY[27];
            // Units: dimensionless; Initial value: 0.999999968230738
            double var_chaste_interface__ICaL__fs = rY[28];
            // Units: dimensionless; Initial value: 0.926692153319136
            double var_chaste_interface__ICaL__fcaf = rY[29];
            // Units: dimensionless; Initial value: 0.99999996819573
            double var_chaste_interface__ICaL__fcas = rY[30];
            // Units: dimensionless; Initial value: 0.999999905741936
            double var_chaste_interface__ICaL__jca = rY[31];
            // Units: dimensionless; Initial value: 0.999978907334662
            double var_chaste_interface__ICaL__ffp = rY[32];
            // Units: dimensionless; Initial value: 0.999999968365903
            double var_chaste_interface__ICaL__fcafp = rY[33];
            // Units: dimensionless; Initial value: 0.999999968278239
            double var_chaste_interface__ICaL__nca = rY[34];
            // Units: dimensionless; Initial value: 0.00547252500964926
            


            const double var_x0 = 1 / (mParameters[4] * mParameters[14]);
            const double var_x1 = var_x0 * mParameters[3];
            const double var_x2 = var_x1 * var_chaste_interface__membrane__v;
            const double var_x24 = pow(mParameters[2], 3);
            const double var_x79 = 1 / (13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]);
            const double var_x80 = exp(0.52239999999999998 * var_x2);
            const double var_x81 = 1 / var_x80;
            const double var_x82 = 1.0 + 0.011348161597821153 * (1.0 + var_x81) * mParameters[2];
            const double var_x87 = 1 / var_x82;
            const double var_x88 = var_x81 * var_x87;
            const double var_x89 = var_x24 * var_x79;
            const double var_x90 = var_x88 * var_x89;
            const double var_x93 = 0.011348161597821153 + 0.011348161597821153 * var_x80;
            const double var_x94 = 1.0 + var_x93 * var_chaste_interface__intracellular_ions__nass;
            const double var_x95 = 1 / var_x94;
            const double var_x96 = 1 / exp(0.16700000000000001 * var_x2);
            const double var_x97 = var_x95 * var_x96;
            const double var_x98 = var_x80 * var_x95;
            const double var_x99 = 56.740807989105761 * var_x98;
            const double var_x100 = var_x99 * var_chaste_interface__intracellular_ions__nass;
            const double var_x101 = var_x100 + 60000.0 * var_x97;
            const double var_x102 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass;
            const double var_x103 = 1 / var_x102;
            const double var_x104 = 1500000.0 * var_x103;
            const double var_x105 = var_x104 * var_chaste_interface__intracellular_ions__cass;
            const double var_x109 = var_x98 * var_chaste_interface__intracellular_ions__nass;
            const double var_x113 = pow(var_x94, (-2));
            const double var_x114 = pow(var_chaste_interface__intracellular_ions__nass, 2);
            const double var_x118 = var_x113 * var_chaste_interface__intracellular_ions__nass;
            const double var_x122 = var_x79 * mParameters[0];
            const double var_x123 = 1500000.0 * var_x122;
            const double var_x124 = var_x123 + 9.0785292782569211 * var_x90;
            const double var_x125 = var_x105 * var_x124;
            const double var_x127 = pow(var_chaste_interface__intracellular_ions__nass, 3);
            const double var_x128 = var_x103 * var_x98;
            const double var_x129 = var_x127 * var_x128;
            const double var_x130 = var_x122 * var_x129;
            const double var_x131 = 13617793.917385383 * var_x130;
            const double var_x133 = 5000.0 + var_x101;
            const double var_x134 = var_x130 * var_x133;
            const double var_x138 = var_x103 * var_x122;
            const double var_x139 = var_x113 * var_x138;
            const double var_x143 = var_x101 * var_x124;
            const double var_x144 = 13617793.917385383 * var_x134 + var_x105 * var_x143;
            const double var_x145 = var_x105 + 9.0785292782569211 * var_x129;
            const double var_x146 = var_x101 * var_x145;
            const double var_x147 = var_x88 * mParameters[2];
            const double var_x148 = 56.740807989105761 * var_x147;
            const double var_x149 = var_x148 + 60000.0 * var_x87;
            const double var_x150 = 5000.0 + var_x149;
            const double var_x151 = var_x129 * var_x150;
            const double var_x152 = 5000.0 * var_x146 + 45392.646391284608 * var_x151;
            const double var_x153 = var_x145 * var_x149;
            const double var_x154 = var_x150 * var_x90;
            const double var_x155 = var_x103 * var_x154;
            const double var_x156 = var_x155 * var_chaste_interface__intracellular_ions__cass;
            const double var_x157 = 13617793.917385383 * var_x156 + var_x123 * var_x153;
            const double var_x158 = var_x124 * var_x149;
            const double var_x159 = 5000.0 * var_x158;
            const double var_x160 = var_x133 * var_x90;
            const double var_x161 = var_x159 + 45392.646391284608 * var_x160;
            const double var_x162 = 1 / (var_x144 + var_x152 + var_x157 + var_x161);
            const double var_x163 = 10000.0 * var_x162;
            const double var_x164 = 0.00036716666666666668 * var_x158;
            const double var_x165 = var_x103 * var_x143;
            const double var_x166 = 0.11015000000000001 * var_x122;
            const double var_x167 = pow((var_x134 + var_x156 + var_x164 + 0.0033333333333333331 * var_x151 + 0.0033333333333333331 * var_x160 + 0.00036716666666666668 * var_x146 + var_x153 * var_x166 + 0.11015000000000001 * var_x165 * var_chaste_interface__intracellular_ions__cass), (-2));
            const double var_x173 = 283704.03994552878 * var_x98;
            const double var_x174 = 300000000.0 * var_x97 + var_x173 * var_chaste_interface__intracellular_ions__nass;
            const double var_x176 = var_x103 * var_x113;
            const double var_x180 = var_x123 * var_x149;
            const double var_x189 = 45392.646391284608 * var_x90;
            const double var_x212 = 5.3924544444444452e-11 * var_x144;
            const double var_x213 = 3000000.0 * var_x122;
            const double var_x215 = var_x100 * var_x162;
            const double var_x216 = var_x148 * var_x162;
            const double var_x217 = 1.6177363333333335e-8 * var_x122;
            const double var_x220 = var_x109 * var_x157;
            const double var_x222 = 27.235587834770765 * var_x162;
            const double var_x224 = var_x144 * var_x147;
            const double var_x226 = 1.4686666666666667e-13 * var_x129 * var_x161;
            const double var_x227 = 1.4686666666666667e-13 * var_x90;
            const double var_x229 = var_x157 * var_x162;
            const double var_x233 = var_x161 * var_x162;
            const double var_x237 = pow(var_chaste_interface__intracellular_ions__cass, (-2));
            const double var_x238 = 1.0 + 2.2499999999999996e-8 * var_x237;
            const double var_x239 = 1 / var_x238;
            const double var_x369 = exp(9.9999999999999995e-8);
            const double var_x371 = 1 / (-1.0 + var_x369);
            const double var_x374 = exp(-9.9999999999999995e-8);
            const double var_x375 = 1 / (-1.0 + var_x374);
            const double var_x378 = 5000000.0 * var_x1;
            const double var_x380 = fabs(var_chaste_interface__membrane__v);
            const double var_x381 = 1 / mParameters[3];
            const double var_x382 = var_x381 * mParameters[4] * mParameters[14];
            const double var_x383 = fabs(var_x382);
            const double var_x384 = var_x380 < 9.9999999999999995e-8 * var_x383;
            const double var_x385 = exp(var_x2);
            const double var_x388 = -1.0 + var_x385;
            const double var_x389 = 1 / var_x388;
            const double var_x390 = var_x0 * pow(mParameters[3], 2);
            const double var_x391 = var_x389 * var_x390;
            const double var_x396 = var_x385 * var_chaste_interface__membrane__v;
            const double var_x399 = 1.0 - var_chaste_interface__ICaL__nca;
            const double var_x400 = 0.40000000000000002 * var_chaste_interface__ICaL__fs;
            const double var_x401 = 0.59999999999999998 * var_chaste_interface__ICaL__ff;
            const double var_x402 = 0.10000000000000001 * var_chaste_interface__membrane__v;
            const double var_x403 = exp(-1.0 + var_x402);
            const double var_x404 = 1.0 + var_x403;
            const double var_x405 = 0.59999999999999998 / var_x404;
            const double var_x406 = 0.29999999999999999 + var_x405;
            const double var_x407 = 0.69999999999999996 - var_x405;
            const double var_x408 = var_x407 * var_chaste_interface__ICaL__fcas;
            const double var_x409 = var_x408 + var_x406 * var_chaste_interface__ICaL__fcaf;
            const double var_x410 = var_x409 * var_chaste_interface__ICaL__jca;
            const double var_x411 = var_x399 * (var_x400 + var_x401) + var_x410 * var_chaste_interface__ICaL__nca;
            const double var_x412 = var_x411 * mParameters[5];
            const double var_x413 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x414 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x415 = 1.0 + 0.0015 * var_x414;
            const double var_x416 = 1 / var_x415;
            const double var_x417 = 0.050000000000000003 * var_x416;
            const double var_x418 = var_x413 * var_x417 + var_chaste_interface__CaMK__CaMKt;
            const double var_x419 = 1.0 + 0.14999999999999999 / var_x418;
            const double var_x420 = 1 / var_x419;
            const double var_x427 = 0.59999999999999998 * var_chaste_interface__ICaL__ffp;
            const double var_x428 = var_x408 + var_x406 * var_chaste_interface__ICaL__fcafp;
            const double var_x429 = var_x428 * var_chaste_interface__ICaL__jca;
            const double var_x430 = var_x399 * (var_x400 + var_x427) + var_x429 * var_chaste_interface__ICaL__nca;
            const double var_x431 = var_x420 * var_x430;
            const double var_x432 = var_x431 * mParameters[5];
            const double var_x441 = 9.9999999999999995e-8 * var_x382 + var_chaste_interface__membrane__v;
            const double var_x489 = -0.00125 + 0.00125 * var_x420;
            const double var_x490 = var_x412 * var_x489;
            const double var_x491 = var_x490 * var_chaste_interface__ICaL__d;
            const double var_x492 = 0.0013750000000000001 * var_x432;
            const double var_x638 = -0.011348161597821153 - 0.011348161597821153 * var_x80;
            const double var_x639 = var_x638 * var_x96;
            const double var_x641 = var_x638 * var_x80;
            const double var_x642 = 56.740807989105761 * var_x641;
            const double var_x651 = 40853381.752156146 * var_x122;
            const double var_x660 = 283704.03994552878 * var_x641;
            const double var_x667 = 136177.93917385384 * var_x150;
            const double var_x669 = 45392.646391284608 * var_x150;
            const double var_x673 = 13617793.917385383 * var_x154;
            const double var_x683 = 1236295.4078425223 * var_x87 * var_x89;
            const double var_x707 = var_x378 * var_x441;
            const double var_x710 = var_x113 * var_x639;
            const double var_x711 = var_x118 * var_x642;
            const double var_x712 = var_x711 + var_x99 + 60000.0 * var_x710;
            const double var_x713 = var_x125 * var_x712;
            const double var_x714 = (-0.066666666666666666 - 0.026666666666666668 * var_chaste_interface__intracellular_ions__nass) / pow(var_x102, 2);
            const double var_x715 = var_x714 * var_chaste_interface__intracellular_ions__cass;
            const double var_x716 = 1500000.0 * var_x715;
            const double var_x717 = var_x143 * var_x716;
            const double var_x718 = var_x114 * var_x128;
            const double var_x719 = var_x133 * var_x651 * var_x718;
            const double var_x720 = var_x131 * var_x712;
            const double var_x721 = var_x714 * var_x98;
            const double var_x722 = var_x127 * var_x721;
            const double var_x723 = 13617793.917385383 * var_x133;
            const double var_x724 = var_x122 * var_x722 * var_x723;
            const double var_x725 = var_x127 * var_x139 * var_x641 * var_x723;
            const double var_x726 = var_x713 + var_x717 + var_x719 + var_x720 + var_x724 + var_x725;
            const double var_x727 = var_x145 * (var_x173 + 300000000.0 * var_x710 + var_x118 * var_x660);
            const double var_x728 = 9.0785292782569211 * var_x127;
            const double var_x729 = var_x176 * var_x641;
            const double var_x730 = var_x716 + 27.235587834770765 * var_x718 + var_x721 * var_x728 + var_x728 * var_x729;
            const double var_x731 = var_x174 * var_x730;
            const double var_x732 = var_x180 * var_x730;
            const double var_x733 = var_x667 * var_x718;
            const double var_x734 = var_x127 * var_x669;
            const double var_x735 = var_x721 * var_x734;
            const double var_x736 = var_x729 * var_x734;
            const double var_x737 = var_x673 * var_x715;
            const double var_x738 = -var_x713 - var_x717 - var_x719 - var_x720 - var_x724 - var_x725 - var_x727 - var_x731 - var_x732 - var_x733 - var_x735 - var_x736 - var_x737 - var_x189 * var_x712;
            const double var_x739 = var_x167 * var_x212;
            const double var_x740 = var_x727 + var_x731 + var_x733 + var_x735 + var_x736;
            const double var_x741 = var_x162 * var_x213;
            const double var_x742 = var_x167 * var_x738;
            const double var_x743 = var_x152 * var_x217;
            const double var_x744 = 3.0597222222222222e-13 * var_x742;
            const double var_x745 = var_x222 * var_x90;
            const double var_x746 = var_x161 * var_x222;
            const double var_x747 = var_x152 * var_x227;
            const double var_x748 = var_x163 * var_x726 + var_x215 * (var_x732 + var_x737) + var_x220 * var_x744 + var_x226 * var_x742 + var_x229 * var_x711 + var_x229 * var_x99 + var_x722 * var_x746 + var_x738 * var_x739 - var_x216 * var_x726 - var_x224 * var_x744 - var_x740 * var_x741 - var_x740 * var_x745 - var_x742 * var_x743 - var_x742 * var_x747 + 81.706763504312292 * var_x233 * var_x718 + var_x127 * var_x729 * var_x746 + var_x103 * var_x127 * var_x162 * var_x683 * var_x712 * var_x95;
            const double var_x749 = 7.4999999999999997e-8 * mParameters[3];
            const double var_x750 = var_x374 * var_x375 * var_x749;
            const double var_x751 = ((var_x384) ? (-var_x750 + var_x707 * (var_x750 + var_x369 * var_x371 * var_x749)) : (0.75 * var_x391 * var_x396));
            const double var_x752 = var_x751 * var_chaste_interface__ICaL__d;
            const double var_x753 = var_x491 * var_x751 - var_x492 * var_x752;
            const double var_x950 = 0.00057425399999999995 * var_x239;
            const double var_x951 = 126.4808362369338 * var_x381;
            
            partialF = -5.0 + var_x951 * (var_x753 - var_x748 * var_x950);
        }
        else
        {
            const double y_save = rY[5];
            rY[5] += delta;
            const double temp = EvaluateYDerivative5(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[5])/delta;
            rY[5] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__intracellular_ions__ki = rY[6];
        // Units: millimolar; Initial value: 143.767359809132
        double var_chaste_interface__intracellular_ions__ksl = rY[8];
        // Units: millimolar; Initial value: 143.767769906216
        


        // Mathematics
        const double var_diff__JgapK = 0.083333333333333329 * var_chaste_interface__intracellular_ions__ksl - 0.083333333333333329 * var_chaste_interface__intracellular_ions__ki; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__ki = 0.25 * var_diff__JgapK; // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__ki;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.020833333333333332;
        }
        else
        {
            const double y_save = rY[6];
            rY[6] += delta;
            const double temp = EvaluateYDerivative6(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[6])/delta;
            rY[6] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.00505983330678751
        double var_chaste_interface__intracellular_ions__kss = rY[7];
        // Units: millimolar; Initial value: 143.767768218104
        double var_chaste_interface__intracellular_ions__ksl = rY[8];
        // Units: millimolar; Initial value: 143.767769906216
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__ICaL__d = rY[26];
        // Units: dimensionless; Initial value: 6.97735089296892e-09
        double var_chaste_interface__ICaL__ff = rY[27];
        // Units: dimensionless; Initial value: 0.999999968230738
        double var_chaste_interface__ICaL__fs = rY[28];
        // Units: dimensionless; Initial value: 0.926692153319136
        double var_chaste_interface__ICaL__fcaf = rY[29];
        // Units: dimensionless; Initial value: 0.99999996819573
        double var_chaste_interface__ICaL__fcas = rY[30];
        // Units: dimensionless; Initial value: 0.999999905741936
        double var_chaste_interface__ICaL__jca = rY[31];
        // Units: dimensionless; Initial value: 0.999978907334662
        double var_chaste_interface__ICaL__ffp = rY[32];
        // Units: dimensionless; Initial value: 0.999999968365903
        double var_chaste_interface__ICaL__fcafp = rY[33];
        // Units: dimensionless; Initial value: 0.999999968278239
        double var_chaste_interface__ICaL__nca = rY[34];
        // Units: dimensionless; Initial value: 0.00547252500964926
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_ICaL__PCap = 1.1000000000000001 * mParameters[5]; // dimensionless
        const double var_ICaL__f = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ff; // dimensionless
        const double var_ICaL__fp = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ffp; // dimensionless
        const double var_CaMK__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa); // dimensionless
        const double var_diff__JdiffK = 5.0 * var_chaste_interface__intracellular_ions__kss - 5.0 * var_chaste_interface__intracellular_ions__ksl; // millimolar_per_millisecond
        const double var_ICaL__Afcaf = _lt_0_row[0]; // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__ICaK = 0.00035740000000000001 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * mParameters[5] * var_chaste_interface__ICaL__d + 0.00035740000000000001 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 9.9999999999999995e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 9.9999999999999995e-8 * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * (9.9999999999999995e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[3] / (mParameters[4] * mParameters[14])) : (pow(mParameters[3], 2) * (-0.75 * mParameters[1] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__kss = -var_diff__JdiffK - 126.4808362369338 * var_ICaL__ICaK / mParameters[3]; // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__kss;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.00505983330678751
            double var_chaste_interface__intracellular_ions__cass = rY[9];
            // Units: millimolar; Initial value: 0.000101777993438818
            double var_chaste_interface__ICaL__d = rY[26];
            // Units: dimensionless; Initial value: 6.97735089296892e-09
            double var_chaste_interface__ICaL__ff = rY[27];
            // Units: dimensionless; Initial value: 0.999999968230738
            double var_chaste_interface__ICaL__fs = rY[28];
            // Units: dimensionless; Initial value: 0.926692153319136
            double var_chaste_interface__ICaL__fcaf = rY[29];
            // Units: dimensionless; Initial value: 0.99999996819573
            double var_chaste_interface__ICaL__fcas = rY[30];
            // Units: dimensionless; Initial value: 0.999999905741936
            double var_chaste_interface__ICaL__jca = rY[31];
            // Units: dimensionless; Initial value: 0.999978907334662
            double var_chaste_interface__ICaL__ffp = rY[32];
            // Units: dimensionless; Initial value: 0.999999968365903
            double var_chaste_interface__ICaL__fcafp = rY[33];
            // Units: dimensionless; Initial value: 0.999999968278239
            double var_chaste_interface__ICaL__nca = rY[34];
            // Units: dimensionless; Initial value: 0.00547252500964926
            


            const double var_x0 = 1 / (mParameters[4] * mParameters[14]);
            const double var_x1 = var_x0 * mParameters[3];
            const double var_x2 = var_x1 * var_chaste_interface__membrane__v;
            const double var_x369 = exp(9.9999999999999995e-8);
            const double var_x371 = 1 / (-1.0 + var_x369);
            const double var_x374 = exp(-9.9999999999999995e-8);
            const double var_x375 = 1 / (-1.0 + var_x374);
            const double var_x378 = 5000000.0 * var_x1;
            const double var_x380 = fabs(var_chaste_interface__membrane__v);
            const double var_x381 = 1 / mParameters[3];
            const double var_x382 = var_x381 * mParameters[4] * mParameters[14];
            const double var_x383 = fabs(var_x382);
            const double var_x384 = var_x380 < 9.9999999999999995e-8 * var_x383;
            const double var_x385 = exp(var_x2);
            const double var_x388 = -1.0 + var_x385;
            const double var_x389 = 1 / var_x388;
            const double var_x390 = var_x0 * pow(mParameters[3], 2);
            const double var_x391 = var_x389 * var_x390;
            const double var_x396 = var_x385 * var_chaste_interface__membrane__v;
            const double var_x399 = 1.0 - var_chaste_interface__ICaL__nca;
            const double var_x400 = 0.40000000000000002 * var_chaste_interface__ICaL__fs;
            const double var_x401 = 0.59999999999999998 * var_chaste_interface__ICaL__ff;
            const double var_x402 = 0.10000000000000001 * var_chaste_interface__membrane__v;
            const double var_x403 = exp(-1.0 + var_x402);
            const double var_x404 = 1.0 + var_x403;
            const double var_x405 = 0.59999999999999998 / var_x404;
            const double var_x406 = 0.29999999999999999 + var_x405;
            const double var_x407 = 0.69999999999999996 - var_x405;
            const double var_x408 = var_x407 * var_chaste_interface__ICaL__fcas;
            const double var_x409 = var_x408 + var_x406 * var_chaste_interface__ICaL__fcaf;
            const double var_x410 = var_x409 * var_chaste_interface__ICaL__jca;
            const double var_x411 = var_x399 * (var_x400 + var_x401) + var_x410 * var_chaste_interface__ICaL__nca;
            const double var_x412 = var_x411 * mParameters[5];
            const double var_x413 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x414 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x415 = 1.0 + 0.0015 * var_x414;
            const double var_x416 = 1 / var_x415;
            const double var_x417 = 0.050000000000000003 * var_x416;
            const double var_x418 = var_x413 * var_x417 + var_chaste_interface__CaMK__CaMKt;
            const double var_x419 = 1.0 + 0.14999999999999999 / var_x418;
            const double var_x420 = 1 / var_x419;
            const double var_x421 = 0.00035740000000000001 * var_x420;
            const double var_x427 = 0.59999999999999998 * var_chaste_interface__ICaL__ffp;
            const double var_x428 = var_x408 + var_x406 * var_chaste_interface__ICaL__fcafp;
            const double var_x429 = var_x428 * var_chaste_interface__ICaL__jca;
            const double var_x430 = var_x399 * (var_x400 + var_x427) + var_x429 * var_chaste_interface__ICaL__nca;
            const double var_x431 = var_x420 * var_x430;
            const double var_x432 = var_x431 * mParameters[5];
            const double var_x433 = 0.00039314000000000005 * var_x432;
            const double var_x441 = 9.9999999999999995e-8 * var_x382 + var_chaste_interface__membrane__v;
            const double var_x707 = var_x378 * var_x441;
            const double var_x749 = 7.4999999999999997e-8 * mParameters[3];
            const double var_x750 = var_x374 * var_x375 * var_x749;
            const double var_x751 = ((var_x384) ? (-var_x750 + var_x707 * (var_x750 + var_x369 * var_x371 * var_x749)) : (0.75 * var_x391 * var_x396));
            const double var_x752 = var_x751 * var_chaste_interface__ICaL__d;
            const double var_x754 = var_x433 * var_x752;
            const double var_x951 = 126.4808362369338 * var_x381;
            const double var_x955 = 0.00035740000000000001 - var_x421;
            const double var_x956 = var_x412 * var_x955;
            
            partialF = -5.0 - var_x951 * (var_x754 + var_x752 * var_x956);
        }
        else
        {
            const double y_save = rY[7];
            rY[7] += delta;
            const double temp = EvaluateYDerivative7(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[7])/delta;
            rY[7] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__intracellular_ions__nasl = rY[4];
        // Units: millimolar; Initial value: 8.23153516580562
        double var_chaste_interface__intracellular_ions__ki = rY[6];
        // Units: millimolar; Initial value: 143.767359809132
        double var_chaste_interface__intracellular_ions__kss = rY[7];
        // Units: millimolar; Initial value: 143.767768218104
        double var_chaste_interface__intracellular_ions__ksl = rY[8];
        // Units: millimolar; Initial value: 143.767769906216
        double var_chaste_interface__intracellular_ions__casl = rY[10];
        // Units: millimolar; Initial value: 0.000102004317781147
        double var_chaste_interface__Ito__a = rY[23];
        // Units: dimensionless; Initial value: 0.000272851144435704
        double var_chaste_interface__Ito__i1 = rY[24];
        // Units: dimensionless; Initial value: 0.649604795721571
        double var_chaste_interface__Ito__i2 = rY[25];
        // Units: dimensionless; Initial value: 0.989965695822495
        double var_chaste_interface__IKr__xrf = rY[37];
        // Units: dimensionless; Initial value: 0.000331691184084272
        double var_chaste_interface__IKr__xrs = rY[38];
        // Units: dimensionless; Initial value: 0.568716473334161
        double var_chaste_interface__IKs__xs1 = rY[39];
        // Units: dimensionless; Initial value: 0.191165248085394
        double var_chaste_interface__IKs__xs2 = rY[40];
        // Units: dimensionless; Initial value: 0.000222677365291219
        double var_chaste_interface__If__y = rY[41];
        // Units: dimensionless; Initial value: 0.233119011214908
        double var_chaste_interface__IK1__xk1 = rY[42];
        // Units: dimensionless; Initial value: 0.997084813729909
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_diff__JgapK = 0.083333333333333329 * var_chaste_interface__intracellular_ions__ksl - 0.083333333333333329 * var_chaste_interface__intracellular_ions__ki; // millimolar_per_millisecond
        const double var_diff__JdiffK = 5.0 * var_chaste_interface__intracellular_ions__kss - 5.0 * var_chaste_interface__intracellular_ions__ksl; // millimolar_per_millisecond
        const double var_INaK__b3 = 5.7707741857267899e-10 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ksl + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nasl); // dimensionless
        const double var_membrane__Istim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double var_IKr__Axrf = _lt_0_row[1]; // dimensionless
        const double var_INaK__Knai = 9.0730000000000004 * exp(-0.051666666666666666 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // millimolar
        const double var_INaK__Knao = 27.780000000000001 * exp(0.38500000000000001 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // millimolar
        const double var_INaK__a1 = 949.5 * pow(var_chaste_interface__intracellular_ions__nasl, 3) / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nasl / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ksl), 2)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = 14800.411886344058 * pow(mParameters[1], 2) / (-1.0 + pow((1.0 + mParameters[2] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[1]), 2)); // dimensionless
        const double var_INaK__b2 = 39.399999999999999 * pow(mParameters[2], 3) / ((-1.0 + pow((1.0 + mParameters[2] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[1]), 2)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = 160.0 * pow(var_chaste_interface__intracellular_ions__ksl, 2) / (-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nasl / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ksl), 2)); // dimensionless
        const double var_INaK__x1 = 439120.79239156016 * var_INaK__a1 + 687.20000000000005 * var_INaK__a1 * var_INaK__b3 + 687.20000000000005 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = 687.20000000000005 * var_INaK__a1 * var_INaK__a3 + 696.32000000000005 * var_INaK__a3 * var_INaK__b4 + 9.120000000000001 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = 444948.47229058668 * var_INaK__a3 + 5827.6798990265261 * var_INaK__b2 + 9.120000000000001 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = 638.99998892834708 * var_INaK__a1 * var_INaK__a3 + 638.99998892834708 * var_INaK__a1 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__INaK = 592.56652800000006 * var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) + 97.461600000000004 * var_INaK__a3 * var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 64.974400000000003 * var_INaK__a1 * var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 97.461600000000004 * var_INaK__b3 * var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // microA_per_microF
        const double var_reversal_potentials__EK = mParameters[4] * mParameters[14] * log(mParameters[1] / var_chaste_interface__intracellular_ions__ksl) / mParameters[3]; // millivolt
        const double var_IK1__IK1 = 1.000004299990755 * sqrt(mParameters[1]) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * mParameters[9] * var_chaste_interface__IK1__xk1 / (1.0 + exp(10.545454545454545 + 0.090909090909090912 * var_chaste_interface__membrane__v - 0.5 * mParameters[1])); // microA_per_microF
        const double var_IKr__IKr = 0.43033148291193518 * sqrt(mParameters[1]) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - var_IKr__Axrf) * var_chaste_interface__IKr__xrs + var_IKr__Axrf * var_chaste_interface__IKr__xrf) * mParameters[11] / ((_lt_0_row[2]) * (_lt_0_row[3])); // microA_per_microF
        const double var_If__IfK = pow(var_chaste_interface__If__y, 2) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * mParameters[7]; // microA_per_microF
        const double var_Isus__Isus = 0.030099999999999998 * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) / (_lt_0_row[4]); // microA_per_microF
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * mParameters[13] * var_chaste_interface__Ito__a * var_chaste_interface__Ito__i1 * var_chaste_interface__Ito__i2; // microA_per_microF
        const double var_IKs__IKs = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__casl), 1.3999999999999999))) * (-mParameters[4] * mParameters[14] * log((0.018329999999999999 * mParameters[2] + mParameters[1]) / (0.018329999999999999 * var_chaste_interface__intracellular_ions__nasl + var_chaste_interface__intracellular_ions__ksl)) / mParameters[3] + var_chaste_interface__membrane__v) * mParameters[12] * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__ksl = -var_diff__JgapK + 0.13333333333333333 * var_diff__JdiffK + 16.864111498257842 * (-var_IK1__IK1 - var_IKr__IKr - var_IKs__IKs - var_If__IfK - var_Isus__Isus - var_Ito__Ito - var_membrane__Istim + 2.0 * var_INaK__INaK) / mParameters[3]; // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__ksl;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            double var_chaste_interface__intracellular_ions__nasl = rY[4];
            // Units: millimolar; Initial value: 8.23153516580562
            double var_chaste_interface__intracellular_ions__ksl = rY[8];
            // Units: millimolar; Initial value: 143.767769906216
            double var_chaste_interface__intracellular_ions__casl = rY[10];
            // Units: millimolar; Initial value: 0.000102004317781147
            double var_chaste_interface__Ito__a = rY[23];
            // Units: dimensionless; Initial value: 0.000272851144435704
            double var_chaste_interface__Ito__i1 = rY[24];
            // Units: dimensionless; Initial value: 0.649604795721571
            double var_chaste_interface__Ito__i2 = rY[25];
            // Units: dimensionless; Initial value: 0.989965695822495
            double var_chaste_interface__IKr__xrf = rY[37];
            // Units: dimensionless; Initial value: 0.000331691184084272
            double var_chaste_interface__IKr__xrs = rY[38];
            // Units: dimensionless; Initial value: 0.568716473334161
            double var_chaste_interface__IKs__xs1 = rY[39];
            // Units: dimensionless; Initial value: 0.191165248085394
            double var_chaste_interface__IKs__xs2 = rY[40];
            // Units: dimensionless; Initial value: 0.000222677365291219
            double var_chaste_interface__If__y = rY[41];
            // Units: dimensionless; Initial value: 0.233119011214908
            double var_chaste_interface__IK1__xk1 = rY[42];
            // Units: dimensionless; Initial value: 0.997084813729909
            


            const double var_x0 = 1 / (mParameters[4] * mParameters[14]);
            const double var_x1 = var_x0 * mParameters[3];
            const double var_x2 = var_x1 * var_chaste_interface__membrane__v;
            const double var_x3 = exp(0.38500000000000001 * var_x2);
            const double var_x4 = mParameters[2] / var_x3;
            const double var_x5 = 1.0 + 0.035997120230381568 * var_x4;
            const double var_x6 = pow(var_x5, 3);
            const double var_x7 = pow((0.35820000000000002 + mParameters[1]), 2);
            const double var_x8 = 1 / (-1.0 + var_x6 + 7.7937924625297832 * var_x7);
            const double var_x9 = pow(mParameters[1], 2);
            const double var_x10 = var_x8 * var_x9;
            const double var_x11 = pow(var_chaste_interface__intracellular_ions__nasl, 3);
            const double var_x12 = exp(-0.051666666666666666 * var_x2);
            const double var_x13 = 1 / var_x12;
            const double var_x14 = var_x13 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x15 = 1.0 + 0.11021712774165104 * var_x14;
            const double var_x16 = pow(var_x15, 3);
            const double var_x17 = pow((0.5 + var_chaste_interface__intracellular_ions__ksl), 2);
            const double var_x18 = 1 / (-1.0 + var_x16 + 4.0 * var_x17);
            const double var_x19 = pow(var_x12, (-3));
            const double var_x20 = var_x18 * var_x19;
            const double var_x21 = var_x11 * var_x20;
            const double var_x22 = var_x10 * var_x21;
            const double var_x24 = pow(mParameters[2], 3);
            const double var_x25 = var_x24 * var_x8 / pow(var_x3, 3);
            const double var_x26 = var_x21 * var_x25;
            const double var_x27 = 1.4929407925401197 * var_x26;
            const double var_x31 = pow((-0.25 + var_x17 + 0.25 * var_x16), (-2));
            const double var_x43 = 1 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ksl + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nasl);
            const double var_x44 = var_x21 * var_x43;
            const double var_x52 = var_x25 * var_x43;
            const double var_x54 = pow(var_chaste_interface__intracellular_ions__ksl, 2);
            const double var_x55 = var_x18 * var_x54;
            const double var_x56 = var_x43 * var_x55;
            const double var_x57 = var_x25 * var_x56;
            const double var_x63 = var_x31 * var_x54;
            const double var_x69 = var_x10 * var_x55;
            const double var_x70 = var_x25 * var_x55;
            const double var_x71 = 2.6817254812739919 * var_x70 + 1648931648.7518551 * var_x69;
            const double var_x72 = 6585420658.1002293 * var_x10 + 9.6722701128385645e-12 * var_x52 + 10.71014095526842 * var_x25;
            const double var_x73 = var_x25 * var_x44;
            const double var_x74 = var_x27 + 1.348266719199441e-12 * var_x73;
            const double var_x75 = 6.3450816326903207e-5 * var_x56 + 5.041496472709802e-7 * var_x44 + 558246.7943749798 * var_x21;
            const double var_x76 = 1 / (var_x71 + var_x72 + var_x74 + var_x75 + 3.3937789869608994e-10 * var_x57 + 24953131.661984976 * var_x22);
            const double var_x344 = var_x43 * var_x76;
            const double var_x357 = pow((var_x10 + 0.25039124064514068 * var_x69 + 7.6555420442407695e-17 * var_x44 + 8.4770104046173956e-5 * var_x21 + 2.0473509426327076e-22 * var_x73 + 0.0037891477184972245 * var_x22 + 9.6350437764149725e-15 * var_x56 + 4.0722159152815902e-10 * var_x70 + 1.4687399051632995e-21 * var_x52 + 1.6263412029867345e-9 * var_x25 + 5.1534733514501733e-20 * var_x57 + 2.2670393738686469e-10 * var_x26), (-2));
            const double var_x358 = 1.6968894934804497e-10 * var_x57;
            const double var_x359 = var_x357 * (var_x358 + var_x74 + 12023111.890251627 * var_x22);
            const double var_x362 = var_x71 + 12930019.771733347 * var_x22;
            const double var_x363 = var_x362 * var_x43;
            const double var_x366 = var_x10 * var_x76;
            const double var_x381 = 1 / mParameters[3];
            const double var_x382 = var_x381 * mParameters[4] * mParameters[14];
            const double var_x436 = var_x358 + var_x75;
            const double var_x437 = var_x10 * var_x436;
            const double var_x439 = var_x21 * var_x72;
            const double var_x455 = var_x72 * var_x76;
            const double var_x538 = pow(var_chaste_interface__If__y, 2);
            const double var_x552 = exp(0.75 - 0.0625 * var_chaste_interface__membrane__v);
            const double var_x553 = 1.0 + var_x552;
            const double var_x554 = 0.030099999999999998 / var_x553;
            const double var_x555 = var_x538 * mParameters[7];
            const double var_x556 = 1 / var_chaste_interface__intracellular_ions__ksl;
            const double var_x559 = 1 / var_chaste_interface__intracellular_ions__casl;
            const double var_x560 = pow(var_x559, 1.3999999999999999);
            const double var_x561 = 1.0 + 6.4818210260626455e-7 * var_x560;
            const double var_x562 = -1.0 - 0.59999999999999998 / var_x561;
            const double var_x563 = var_x562 * mParameters[12] * var_chaste_interface__IKs__xs2;
            const double var_x564 = var_x563 * var_chaste_interface__IKs__xs1;
            const double var_x565 = mParameters[13] * var_chaste_interface__Ito__i1 * var_chaste_interface__Ito__i2;
            const double var_x566 = var_x565 * var_chaste_interface__Ito__a;
            const double var_x567 = exp(10.545454545454545 + 0.090909090909090912 * var_chaste_interface__membrane__v - 0.5 * mParameters[1]);
            const double var_x568 = 1.0 + var_x567;
            const double var_x569 = sqrt(mParameters[1]);
            const double var_x570 = var_x569 * mParameters[9] / var_x568;
            const double var_x571 = 1.000004299990755 * var_x570;
            const double var_x572 = var_x571 * var_chaste_interface__IK1__xk1;
            const double var_x573 = exp(-1.0416666666666667 + 0.10416666666666667 * var_chaste_interface__membrane__v);
            const double var_x574 = 1.0 + var_x573;
            const double var_x575 = 1 / var_x574;
            const double var_x576 = exp(1.4344412457471867 + 0.026171159382360639 * var_chaste_interface__membrane__v);
            const double var_x577 = 1.0 + var_x576;
            const double var_x578 = 1 / var_x577;
            const double var_x579 = var_x578;
            const double var_x580 = 1.0 - var_x579;
            const double var_x581 = var_x579 * var_chaste_interface__IKr__xrf + var_x580 * var_chaste_interface__IKr__xrs;
            const double var_x582 = var_x569 * var_x575 * var_x581 * mParameters[11];
            const double var_x583 = exp(2.2916666666666665 + 0.041666666666666664 * var_chaste_interface__membrane__v);
            const double var_x584 = 1.0 + var_x583;
            const double var_x585 = 1 / var_x584;
            const double var_x586 = 0.43033148291193518 * var_x585;
            const double var_x587 = var_x582 * var_x586;
            const double var_x616 = 1 / (0.018329999999999999 * var_chaste_interface__intracellular_ions__nasl + var_chaste_interface__intracellular_ions__ksl);
            const double var_x617 = var_x382 * var_x564 * var_x616;
            const double var_x622 = var_x11 * var_x31;
            const double var_x626 = pow((1 + 0.0028096208831939005 * var_chaste_interface__intracellular_ions__nasl + 0.0021553256090254577 * var_chaste_interface__intracellular_ions__ksl), (-2));
            const double var_x627 = var_x21 * var_x626;
            const double var_x628 = var_x25 * var_x627;
            const double var_x632 = var_x55 * var_x626;
            const double var_x633 = var_x25 * var_x632;
            const double var_x691 = var_x25 * var_x626;
            const double var_x697 = var_x626 * var_x76;
            const double var_x698 = var_x362 * var_x697;
            const double var_x705 = var_x26 * var_x697;
            const double var_x755 = -4.0 - 8.0 * var_chaste_interface__intracellular_ions__ksl;
            const double var_x756 = var_x19 * var_x622;
            const double var_x757 = var_x755 * var_x756;
            const double var_x758 = var_x10 * var_x757;
            const double var_x759 = 0.09330879953375748 * var_x25 * var_x757;
            const double var_x760 = 1.8288767722361083e-15 * var_x628;
            const double var_x761 = 8.4266669949965062e-14 * var_x52 * var_x757;
            const double var_x762 = var_x18 * var_chaste_interface__intracellular_ions__ksl;
            const double var_x763 = var_x43 * var_x762;
            const double var_x764 = var_x25 * var_x763;
            const double var_x765 = var_x63 * var_x755;
            const double var_x766 = var_x52 * var_x765;
            const double var_x767 = 1.0605559334252811e-11 * var_x766 + 3.3937789869608994e-10 * var_x764 - 2.3017714043409702e-13 * var_x633;
            const double var_x768 = var_x759 + var_x761 + var_x767 - var_x760 + 751444.4931407267 * var_x758;
            const double var_x769 = 3297863297.5037103 * var_x10 * var_x762;
            const double var_x770 = 5.3634509625479838 * var_x25 * var_x762;
            const double var_x771 = 103058228.04699095 * var_x10 * var_x765;
            const double var_x772 = 0.16760784257962449 * var_x25 * var_x765;
            const double var_x773 = var_x769 + var_x770 + var_x771 + var_x772 + 808126.23573333421 * var_x758;
            const double var_x774 = 8.6068818956382799e-8 * var_x632;
            const double var_x775 = 0.00012690163265380641 * var_x763;
            const double var_x776 = 6.8386140998302939e-10 * var_x627;
            const double var_x777 = var_x43 * var_x755;
            const double var_x778 = 3.9656760204314505e-6 * var_x63 * var_x777;
            const double var_x779 = 34890.424648436237 * var_x757;
            const double var_x780 = 3.1509352954436263e-8 * var_x756 * var_x777;
            const double var_x781 = var_x760 + var_x774 + var_x776 - var_x759 - var_x761 - var_x769 - var_x770 - var_x771 - var_x772 - var_x775 - var_x778 - var_x779 - var_x780 + 4.6035428086819405e-13 * var_x633 + 1.3120097004743531e-14 * var_x691 - 2.1211118668505621e-11 * var_x766 - 6.7875579739217989e-10 * var_x764 - 1559570.728874061 * var_x758;
            const double var_x782 = var_x767 + var_x775 + var_x778 + var_x779 + var_x780 - var_x774 - var_x776;
            const double var_x783 = var_x455 * var_x757;
            const double var_x784 = var_x382 * var_x556;
            const double var_x785 = var_x617 - var_x554 * var_x784 - var_x555 * var_x784 - var_x566 * var_x784 - var_x572 * var_x784 - var_x587 * var_x784;
            const double var_x944 = 16.864111498257842 * var_x381;
            const double var_x960 = 1185.1330560000001 * var_x76;
            const double var_x961 = 2.7327510406137971e-17 * var_x359;
            const double var_x962 = 1.1248577707592603e-7 * var_x344;
            const double var_x963 = 2884943.6462042201 * var_x366;
            const double var_x964 = 2.5937646646697565e-27 * var_x363;
            const double var_x965 = 6.6522764776183441e-14 * var_x437;
            const double var_x966 = 3.8093200840479037e-18 * var_x439;
            const double var_x967 = var_x357 * var_x964;
            const double var_x968 = var_x357 * var_x965;
            const double var_x969 = var_x357 * var_x966;
            
            partialF = -0.75 + var_x944 * (var_x785 + 1.5258303269789357e-10 * var_x698 + 2.1674623181275951e-12 * var_x705 - 10.325106196546965 * var_x783 + var_x768 * var_x960 + var_x781 * var_x961 + var_x781 * var_x968 + var_x782 * var_x963 - var_x773 * var_x962 - var_x781 * var_x967 - var_x781 * var_x969);
        }
        else
        {
            const double y_save = rY[8];
            rY[8] += delta;
            const double temp = EvaluateYDerivative8(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[8])/delta;
            rY[8] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.00505983330678751
        double var_chaste_interface__intracellular_ions__nass = rY[5];
        // Units: millimolar; Initial value: 8.23154325237268
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__intracellular_ions__casl = rY[10];
        // Units: millimolar; Initial value: 0.000102004317781147
        double var_chaste_interface__intracellular_ions__cajsr = rY[12];
        // Units: millimolar; Initial value: 1.24811940209535
        double var_chaste_interface__ICaL__d = rY[26];
        // Units: dimensionless; Initial value: 6.97735089296892e-09
        double var_chaste_interface__ICaL__ff = rY[27];
        // Units: dimensionless; Initial value: 0.999999968230738
        double var_chaste_interface__ICaL__fs = rY[28];
        // Units: dimensionless; Initial value: 0.926692153319136
        double var_chaste_interface__ICaL__fcaf = rY[29];
        // Units: dimensionless; Initial value: 0.99999996819573
        double var_chaste_interface__ICaL__fcas = rY[30];
        // Units: dimensionless; Initial value: 0.999999905741936
        double var_chaste_interface__ICaL__jca = rY[31];
        // Units: dimensionless; Initial value: 0.999978907334662
        double var_chaste_interface__ICaL__ffp = rY[32];
        // Units: dimensionless; Initial value: 0.999999968365903
        double var_chaste_interface__ICaL__fcafp = rY[33];
        // Units: dimensionless; Initial value: 0.999999968278239
        double var_chaste_interface__ICaL__nca = rY[34];
        // Units: dimensionless; Initial value: 0.00547252500964926
        double var_chaste_interface__ryr__Jrel1 = rY[43];
        // Units: millimolar_per_millisecond; Initial value: 0.000108240945806962
        double var_chaste_interface__IP3__u = rY[45];
        // Units: millimolar_per_millisecond; Initial value: 0.466236137183558
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_ICaL__PCap = 1.1000000000000001 * mParameters[5]; // dimensionless
        const double var_ICaL__f = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ff; // dimensionless
        const double var_ICaL__fp = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ffp; // dimensionless
        const double var_INaCa_i__h10_ss = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]; // dimensionless
        const double var_INaCa_i__k1_ss = 1500000.0 * mParameters[0] / var_INaCa_i__h10_ss; // dimensionless
        const double var_CaMK__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa); // dimensionless
        const double var_IP3__Jip3 = 0.0020202000000000002 * (1.0 - var_chaste_interface__IP3__u) * (-var_chaste_interface__intracellular_ions__cass + var_chaste_interface__intracellular_ions__cajsr) * var_chaste_interface__intracellular_ions__cass / (1.0 + 9090.9090909090901 * var_chaste_interface__intracellular_ions__cass); // millimolar_per_millisecond
        const double var_diff__Jdiff = 5.0 * var_chaste_interface__intracellular_ions__cass - 5.0 * var_chaste_interface__intracellular_ions__casl; // millimolar_per_millisecond
        const double var_INaCa_i__h4_ss = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__k6_ss = 1500000.0 * var_chaste_interface__intracellular_ions__cass / var_INaCa_i__h4_ss; // dimensionless
        const double var_ICaL__Afcaf = _lt_0_row[0]; // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (4.0 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * mParameters[5] * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (4.0 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_INaCa_i__hca = exp(0.16700000000000001 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // dimensionless
        const double var_INaCa_i__hna = exp(0.52239999999999998 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__h2_ss = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[2]; // dimensionless
        const double var_INaCa_i__h8_ss = 0.011348161597821153 * mParameters[2] / (var_INaCa_i__h7_ss * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__k3pp_ss = 5000.0 * var_INaCa_i__h8_ss; // dimensionless
        const double var_INaCa_i__k3_ss = 60000.0 / var_INaCa_i__h7_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4pp_ss = 5000.0 * var_INaCa_i__h2_ss; // dimensionless
        const double var_INaCa_i__k4_ss = 60000.0 / (var_INaCa_i__h1_ss * var_INaCa_i__hca) + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_ss = 800.0 * pow(var_chaste_interface__intracellular_ions__nass, 2) * var_INaCa_i__h2_ss / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k8_ss = 800.0 * pow(mParameters[2], 2) * var_INaCa_i__h8_ss / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__x1_ss = 5000.0 * (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k7_ss + 5000.0 * (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_ss = (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss; // dimensionless
        const double var_INaCa_i__x3_ss = (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_ss = 5000.0 * (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k8_ss + 5000.0 * (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__INaCa_ss = 0.000191418 * (10000.0 * var_INaCa_i__E2_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss - 2.0 * var_INaCa_i__E1_ss * var_INaCa_i__k1_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss + var_INaCa_i__k4pp_ss * var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss) + 3.0 * var_INaCa_i__k7_ss * var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss)) / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cass, 2)); // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__cass = (-var_diff__Jdiff + 0.10000000000000001 * var_IP3__Jip3 + 0.10000000000000001 * var_chaste_interface__ryr__Jrel1 + 63.240418118466899 * (-var_ICaL__ICaL + 2.0 * var_INaCa_i__INaCa_ss) / mParameters[3]) / (1.0 + 0.00415599 / pow((0.0086999999999999994 + var_chaste_interface__intracellular_ions__cass), 2) + 1.7378249999999999e-5 / pow((0.00087000000000000001 + var_chaste_interface__intracellular_ions__cass), 2)); // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__cass;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.00505983330678751
            double var_chaste_interface__intracellular_ions__nass = rY[5];
            // Units: millimolar; Initial value: 8.23154325237268
            double var_chaste_interface__intracellular_ions__cass = rY[9];
            // Units: millimolar; Initial value: 0.000101777993438818
            double var_chaste_interface__intracellular_ions__casl = rY[10];
            // Units: millimolar; Initial value: 0.000102004317781147
            double var_chaste_interface__intracellular_ions__cajsr = rY[12];
            // Units: millimolar; Initial value: 1.24811940209535
            double var_chaste_interface__ICaL__d = rY[26];
            // Units: dimensionless; Initial value: 6.97735089296892e-09
            double var_chaste_interface__ICaL__ff = rY[27];
            // Units: dimensionless; Initial value: 0.999999968230738
            double var_chaste_interface__ICaL__fs = rY[28];
            // Units: dimensionless; Initial value: 0.926692153319136
            double var_chaste_interface__ICaL__fcaf = rY[29];
            // Units: dimensionless; Initial value: 0.99999996819573
            double var_chaste_interface__ICaL__fcas = rY[30];
            // Units: dimensionless; Initial value: 0.999999905741936
            double var_chaste_interface__ICaL__jca = rY[31];
            // Units: dimensionless; Initial value: 0.999978907334662
            double var_chaste_interface__ICaL__ffp = rY[32];
            // Units: dimensionless; Initial value: 0.999999968365903
            double var_chaste_interface__ICaL__fcafp = rY[33];
            // Units: dimensionless; Initial value: 0.999999968278239
            double var_chaste_interface__ICaL__nca = rY[34];
            // Units: dimensionless; Initial value: 0.00547252500964926
            double var_chaste_interface__ryr__Jrel1 = rY[43];
            // Units: millimolar_per_millisecond; Initial value: 0.000108240945806962
            double var_chaste_interface__IP3__u = rY[45];
            // Units: millimolar_per_millisecond; Initial value: 0.466236137183558
            


            const double var_x0 = 1 / (mParameters[4] * mParameters[14]);
            const double var_x1 = var_x0 * mParameters[3];
            const double var_x2 = var_x1 * var_chaste_interface__membrane__v;
            const double var_x24 = pow(mParameters[2], 3);
            const double var_x79 = 1 / (13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]);
            const double var_x80 = exp(0.52239999999999998 * var_x2);
            const double var_x81 = 1 / var_x80;
            const double var_x82 = 1.0 + 0.011348161597821153 * (1.0 + var_x81) * mParameters[2];
            const double var_x87 = 1 / var_x82;
            const double var_x88 = var_x81 * var_x87;
            const double var_x89 = var_x24 * var_x79;
            const double var_x90 = var_x88 * var_x89;
            const double var_x93 = 0.011348161597821153 + 0.011348161597821153 * var_x80;
            const double var_x94 = 1.0 + var_x93 * var_chaste_interface__intracellular_ions__nass;
            const double var_x95 = 1 / var_x94;
            const double var_x96 = 1 / exp(0.16700000000000001 * var_x2);
            const double var_x97 = var_x95 * var_x96;
            const double var_x98 = var_x80 * var_x95;
            const double var_x99 = 56.740807989105761 * var_x98;
            const double var_x100 = var_x99 * var_chaste_interface__intracellular_ions__nass;
            const double var_x101 = var_x100 + 60000.0 * var_x97;
            const double var_x102 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass;
            const double var_x103 = 1 / var_x102;
            const double var_x104 = 1500000.0 * var_x103;
            const double var_x105 = var_x104 * var_chaste_interface__intracellular_ions__cass;
            const double var_x109 = var_x98 * var_chaste_interface__intracellular_ions__nass;
            const double var_x122 = var_x79 * mParameters[0];
            const double var_x123 = 1500000.0 * var_x122;
            const double var_x124 = var_x123 + 9.0785292782569211 * var_x90;
            const double var_x127 = pow(var_chaste_interface__intracellular_ions__nass, 3);
            const double var_x128 = var_x103 * var_x98;
            const double var_x129 = var_x127 * var_x128;
            const double var_x130 = var_x122 * var_x129;
            const double var_x133 = 5000.0 + var_x101;
            const double var_x134 = var_x130 * var_x133;
            const double var_x138 = var_x103 * var_x122;
            const double var_x143 = var_x101 * var_x124;
            const double var_x144 = 13617793.917385383 * var_x134 + var_x105 * var_x143;
            const double var_x145 = var_x105 + 9.0785292782569211 * var_x129;
            const double var_x146 = var_x101 * var_x145;
            const double var_x147 = var_x88 * mParameters[2];
            const double var_x148 = 56.740807989105761 * var_x147;
            const double var_x149 = var_x148 + 60000.0 * var_x87;
            const double var_x150 = 5000.0 + var_x149;
            const double var_x151 = var_x129 * var_x150;
            const double var_x152 = 5000.0 * var_x146 + 45392.646391284608 * var_x151;
            const double var_x153 = var_x145 * var_x149;
            const double var_x154 = var_x150 * var_x90;
            const double var_x155 = var_x103 * var_x154;
            const double var_x156 = var_x155 * var_chaste_interface__intracellular_ions__cass;
            const double var_x157 = 13617793.917385383 * var_x156 + var_x123 * var_x153;
            const double var_x158 = var_x124 * var_x149;
            const double var_x159 = 5000.0 * var_x158;
            const double var_x160 = var_x133 * var_x90;
            const double var_x161 = var_x159 + 45392.646391284608 * var_x160;
            const double var_x162 = 1 / (var_x144 + var_x152 + var_x157 + var_x161);
            const double var_x163 = 10000.0 * var_x162;
            const double var_x164 = 0.00036716666666666668 * var_x158;
            const double var_x165 = var_x103 * var_x143;
            const double var_x166 = 0.11015000000000001 * var_x122;
            const double var_x167 = pow((var_x134 + var_x156 + var_x164 + 0.0033333333333333331 * var_x151 + 0.0033333333333333331 * var_x160 + 0.00036716666666666668 * var_x146 + var_x153 * var_x166 + 0.11015000000000001 * var_x165 * var_chaste_interface__intracellular_ions__cass), (-2));
            const double var_x173 = 283704.03994552878 * var_x98;
            const double var_x174 = 300000000.0 * var_x97 + var_x173 * var_chaste_interface__intracellular_ions__nass;
            const double var_x193 = var_x103 * var_x90;
            const double var_x212 = 5.3924544444444452e-11 * var_x144;
            const double var_x213 = 3000000.0 * var_x122;
            const double var_x215 = var_x100 * var_x162;
            const double var_x216 = var_x148 * var_x162;
            const double var_x217 = 1.6177363333333335e-8 * var_x122;
            const double var_x220 = var_x109 * var_x157;
            const double var_x222 = 27.235587834770765 * var_x162;
            const double var_x223 = var_x129 * var_x222;
            const double var_x224 = var_x144 * var_x147;
            const double var_x226 = 1.4686666666666667e-13 * var_x129 * var_x161;
            const double var_x227 = 1.4686666666666667e-13 * var_x90;
            const double var_x229 = var_x157 * var_x162;
            const double var_x237 = pow(var_chaste_interface__intracellular_ions__cass, (-2));
            const double var_x238 = 1.0 + 2.2499999999999996e-8 * var_x237;
            const double var_x239 = 1 / var_x238;
            const double var_x369 = exp(9.9999999999999995e-8);
            const double var_x371 = 1 / (-1.0 + var_x369);
            const double var_x374 = exp(-9.9999999999999995e-8);
            const double var_x375 = 1 / (-1.0 + var_x374);
            const double var_x380 = fabs(var_chaste_interface__membrane__v);
            const double var_x381 = 1 / mParameters[3];
            const double var_x382 = var_x381 * mParameters[4] * mParameters[14];
            const double var_x383 = fabs(var_x382);
            const double var_x390 = var_x0 * pow(mParameters[3], 2);
            const double var_x399 = 1.0 - var_chaste_interface__ICaL__nca;
            const double var_x400 = 0.40000000000000002 * var_chaste_interface__ICaL__fs;
            const double var_x401 = 0.59999999999999998 * var_chaste_interface__ICaL__ff;
            const double var_x402 = 0.10000000000000001 * var_chaste_interface__membrane__v;
            const double var_x403 = exp(-1.0 + var_x402);
            const double var_x404 = 1.0 + var_x403;
            const double var_x405 = 0.59999999999999998 / var_x404;
            const double var_x406 = 0.29999999999999999 + var_x405;
            const double var_x407 = 0.69999999999999996 - var_x405;
            const double var_x408 = var_x407 * var_chaste_interface__ICaL__fcas;
            const double var_x409 = var_x408 + var_x406 * var_chaste_interface__ICaL__fcaf;
            const double var_x410 = var_x409 * var_chaste_interface__ICaL__jca;
            const double var_x411 = var_x399 * (var_x400 + var_x401) + var_x410 * var_chaste_interface__ICaL__nca;
            const double var_x412 = var_x411 * mParameters[5];
            const double var_x413 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x414 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x415 = 1.0 + 0.0015 * var_x414;
            const double var_x416 = 1 / var_x415;
            const double var_x417 = 0.050000000000000003 * var_x416;
            const double var_x418 = var_x413 * var_x417 + var_chaste_interface__CaMK__CaMKt;
            const double var_x419 = 1.0 + 0.14999999999999999 / var_x418;
            const double var_x420 = 1 / var_x419;
            const double var_x427 = 0.59999999999999998 * var_chaste_interface__ICaL__ffp;
            const double var_x428 = var_x408 + var_x406 * var_chaste_interface__ICaL__fcafp;
            const double var_x429 = var_x428 * var_chaste_interface__ICaL__jca;
            const double var_x430 = var_x399 * (var_x400 + var_x427) + var_x429 * var_chaste_interface__ICaL__nca;
            const double var_x431 = var_x420 * var_x430;
            const double var_x458 = -0.34100000000000003 * mParameters[0];
            const double var_x463 = 10000000.0 * var_x1;
            const double var_x465 = 4.9999999999999998e-8 * var_x383;
            const double var_x466 = var_x380 < var_x465;
            const double var_x467 = exp(2.0 * var_x2);
            const double var_x470 = -1.0 + var_x467;
            const double var_x471 = 1 / var_x470;
            const double var_x472 = var_x390 * var_x471;
            const double var_x476 = var_x467 * var_chaste_interface__membrane__v;
            const double var_x499 = 1.9999999999999999e-7 * mParameters[3];
            const double var_x500 = var_x371 * var_x499;
            const double var_x501 = var_x375 * var_x499;
            const double var_x502 = var_x501 * (var_x458 + var_x374 * var_chaste_interface__intracellular_ions__cass);
            const double var_x503 = var_x463 * (var_x502 + var_x500 * (var_x458 + var_x369 * var_chaste_interface__intracellular_ions__cass));
            const double var_x504 = var_x467 * var_chaste_interface__intracellular_ions__cass;
            const double var_x505 = var_x458 + var_x504;
            const double var_x506 = 4.0 * var_x472;
            const double var_x507 = var_x505 * var_x506;
            const double var_x509 = var_x420;
            const double var_x510 = -1.0 + var_x509;
            const double var_x511 = var_x412 * var_x510;
            const double var_x512 = var_x511 * var_chaste_interface__ICaL__d;
            const double var_x513 = 1.1000000000000001 * var_x431;
            const double var_x514 = mParameters[5] * var_chaste_interface__ICaL__d;
            const double var_x515 = var_x513 * var_x514;
            const double var_x517 = 4.9999999999999998e-8 * var_x382 + var_chaste_interface__membrane__v;
            const double var_x518 = -var_x502 + var_x503 * var_x517;
            const double var_x519 = var_x507 * var_chaste_interface__membrane__v;
            const double var_x520 = ((var_x466) ? (var_x518) : (var_x519));
            const double var_x521 = var_x520 * mParameters[5];
            const double var_x540 = 1.0 - var_x509;
            const double var_x594 = 1 / (pow(var_x418, 2) * pow(var_x419, 2));
            const double var_x595 = var_x594 * var_chaste_interface__ICaL__d;
            const double var_x613 = var_x412 * var_x520 * var_chaste_interface__ICaL__d;
            const double var_x739 = var_x167 * var_x212;
            const double var_x741 = var_x162 * var_x213;
            const double var_x743 = var_x152 * var_x217;
            const double var_x745 = var_x222 * var_x90;
            const double var_x747 = var_x152 * var_x227;
            const double var_x786 = 2250000000000.0 * var_x149;
            const double var_x787 = var_x138 * var_x786;
            const double var_x788 = 13617793.917385383 * var_x155;
            const double var_x789 = -var_x787 - var_x788 - var_x104 * var_x143 - var_x104 * var_x174;
            const double var_x790 = var_x162 * var_x165;
            const double var_x791 = var_x162 * var_x174;
            const double var_x792 = var_x167 * var_x789;
            const double var_x793 = 3.0597222222222222e-13 * var_x792;
            const double var_x794 = 85111211.983658642 * var_x147;
            const double var_x795 = 15000000000.0 * var_x790 + var_x215 * (var_x787 + var_x788) + var_x220 * var_x793 + var_x226 * var_x792 + var_x739 * var_x789 - var_x224 * var_x793 - var_x743 * var_x792 - var_x747 * var_x792 - var_x790 * var_x794 - 4500000000000.0 * var_x138 * var_x791 - 40853381.752156146 * var_x193 * var_x791;
            const double var_x796 = var_x100 * var_x229 + var_x144 * var_x163 + var_x161 * var_x223 - var_x144 * var_x216 - var_x152 * var_x741 - var_x152 * var_x745;
            const double var_x797 = var_x796 / (pow(var_x238, 2) * pow(var_chaste_interface__intracellular_ions__cass, 3));
            const double var_x798 = var_x237 * var_x413 / pow(var_x415, 2);
            const double var_x799 = var_x595 * var_x798;
            const double var_x801 = var_x430 * var_x799;
            const double var_x803 = 1.1250000000000001e-5 * var_x798;
            const double var_x804 = var_x594 * var_x803;
            const double var_x807 = var_x374 * var_x501;
            const double var_x808 = var_x463 * var_x517;
            const double var_x809 = ((var_x466) ? (-var_x807 + var_x808 * (var_x807 + var_x369 * var_x500)) : (var_x476 * var_x506));
            const double var_x810 = var_x515 * var_x809;
            const double var_x811 = var_x613 * var_x804;
            const double var_x812 = 1.2375000000000001e-5 * var_x521 * var_x801;
            const double var_x813 = var_x811 - var_x810 - var_x812 + var_x512 * var_x809;
            const double var_x850 = var_x513 * var_x521;
            const double var_x972 = 0.00038283600000000001 * var_x239;
            const double var_x973 = 0.0086999999999999994 + var_chaste_interface__intracellular_ions__cass;
            const double var_x974 = 0.00087000000000000001 + var_chaste_interface__intracellular_ions__cass;
            const double var_x975 = 1.0 + 0.00415599 / pow(var_x973, 2) + 1.7378249999999999e-5 / pow(var_x974, 2);
            const double var_x976 = 1 / var_x975;
            const double var_x977 = 63.240418118466899 * var_x381;
            const double var_x980 = -var_chaste_interface__intracellular_ions__cass + var_chaste_interface__intracellular_ions__cajsr;
            const double var_x981 = 1 / (1.0 + 9090.9090909090901 * var_chaste_interface__intracellular_ions__cass);
            const double var_x982 = 1.0 - var_chaste_interface__IP3__u;
            const double var_x983 = var_x981 * var_x982;
            const double var_x984 = 0.00020202000000000002 * var_x983;
            const double var_x985 = var_x980 * var_x984;
            const double var_x986 = var_x984 * var_chaste_interface__intracellular_ions__cass;
            const double var_x987 = var_x980 * var_chaste_interface__intracellular_ions__cass;
            const double var_x988 = var_x982 * var_x987 / pow((0.00011 + var_chaste_interface__intracellular_ions__cass), 2);
            const double var_x989 = -5.0 + var_x985 - var_x986 - 2.22222e-8 * var_x988;
            const double var_x990 = var_x411 * var_x540;
            const double var_x991 = var_x521 * var_x990;
            const double var_x992 = var_x991 * var_chaste_interface__ICaL__d;
            const double var_x993 = var_x850 * var_chaste_interface__ICaL__d;
            const double var_x994 = 5.0 * var_chaste_interface__intracellular_ions__casl + 0.10000000000000001 * var_chaste_interface__ryr__Jrel1 - 5.0 * var_chaste_interface__intracellular_ions__cass + var_x985 * var_chaste_interface__intracellular_ions__cass;
            
            partialF = var_x976 * (var_x989 + var_x977 * (var_x813 + 1.7227619999999998e-11 * var_x797 + var_x795 * var_x972)) + (var_x994 + var_x977 * (-var_x992 - var_x993 + var_x796 * var_x972)) * (0.0083119800000000001 / pow(var_x973, 3) + 3.4756499999999998e-5 / pow(var_x974, 3)) / pow(var_x975, 2);
        }
        else
        {
            const double y_save = rY[9];
            rY[9] += delta;
            const double temp = EvaluateYDerivative9(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[9])/delta;
            rY[9] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 4.36004404734282e-05
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.00505983330678751
        double var_chaste_interface__intracellular_ions__nasl = rY[4];
        // Units: millimolar; Initial value: 8.23153516580562
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__intracellular_ions__casl = rY[10];
        // Units: millimolar; Initial value: 0.000102004317781147
        double var_chaste_interface__intracellular_ions__cansr = rY[11];
        // Units: millimolar; Initial value: 1.26350902016858
        double var_chaste_interface__ICaT__b = rY[35];
        // Units: dimensionless; Initial value: 0.000304250912559619
        double var_chaste_interface__ICaT__g = rY[36];
        // Units: dimensionless; Initial value: 0.994214357917907
        


        // Mathematics
        const double var_INaCa_i__h10_i = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]; // dimensionless
        const double var_INaCa_i__k1_i = 1500000.0 * mParameters[0] / var_INaCa_i__h10_i; // dimensionless
        const double var_IpCa__IpCa = 0.00050000000000000001 * var_chaste_interface__intracellular_ions__casl / (0.00050000000000000001 + var_chaste_interface__intracellular_ions__casl); // microA_per_microF
        const double var_diff__Jgap = 0.083333333333333329 * var_chaste_interface__intracellular_ions__casl - 0.083333333333333329 * var_chaste_interface__intracellular_ions__cai; // millimolar_per_millisecond
        const double var_CaMK__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_SERCA__dkmplb = 0.00017000000000000001 * var_CaMK__CaMKa / (0.14999999999999999 + var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__dqupcamk = 0.75 * var_CaMK__CaMKa / (0.14999999999999999 + var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__Jup1 = -6.9999999999999994e-5 * var_chaste_interface__intracellular_ions__cansr + 0.00020000000000000001 * (1.0 + var_SERCA__dqupcamk) / (1.0 + (0.00027999999999999998 - var_SERCA__dkmplb) / var_chaste_interface__intracellular_ions__casl); // millimolar_per_millisecond
        const double var_diff__Jdiff = 5.0 * var_chaste_interface__intracellular_ions__cass - 5.0 * var_chaste_interface__intracellular_ions__casl; // millimolar_per_millisecond
        const double var_INaCa_i__h4_i = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nasl) * var_chaste_interface__intracellular_ions__nasl; // dimensionless
        const double var_INaCa_i__k6_i = 1500000.0 * var_chaste_interface__intracellular_ions__casl / var_INaCa_i__h4_i; // dimensionless
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-4.9999999999999992e-15 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (4.9999999999999992e-15 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 4.9999999999999992e-15 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (9.9999999999999995e-8 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__casl * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))); // microA_per_microF
        const double var_INaCa_i__hca = exp(0.16700000000000001 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // dimensionless
        const double var_INaCa_i__hna = exp(0.52239999999999998 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14])); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nasl; // dimensionless
        const double var_INaCa_i__h2_i = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nasl / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[2]; // dimensionless
        const double var_INaCa_i__h8_i = 0.011348161597821153 * mParameters[2] / (var_INaCa_i__h7_i * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__k3pp_i = 5000.0 * var_INaCa_i__h8_i; // dimensionless
        const double var_INaCa_i__k3_i = 60000.0 / var_INaCa_i__h7_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k4pp_i = 5000.0 * var_INaCa_i__h2_i; // dimensionless
        const double var_INaCa_i__k4_i = 60000.0 / (var_INaCa_i__h1_i * var_INaCa_i__hca) + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k7_i = 800.0 * pow(var_chaste_interface__intracellular_ions__nasl, 2) * var_INaCa_i__h2_i / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k8_i = 800.0 * pow(mParameters[2], 2) * var_INaCa_i__h8_i / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__x1_i = 5000.0 * (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k7_i + 5000.0 * (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x2_i = (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i + (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i; // dimensionless
        const double var_INaCa_i__x3_i = (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x4_i = 5000.0 * (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k8_i + 5000.0 * (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__INaCa_i = 0.00076567200000000001 * (10000.0 * var_INaCa_i__E2_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i - 2.0 * var_INaCa_i__E1_i * var_INaCa_i__k1_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i + var_INaCa_i__k4pp_i * var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i) + 3.0 * var_INaCa_i__k7_i * var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i)) / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__casl, 2)); // microA_per_microF
        const double var_ICaT__ICaT = 0.075399999999999995 * (-0.5 * mParameters[4] * mParameters[14] * log(mParameters[0] / var_chaste_interface__intracellular_ions__casl) / mParameters[3] + var_chaste_interface__membrane__v) * var_chaste_interface__ICaT__b * var_chaste_interface__ICaT__g; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__casl = (-var_diff__Jgap + 0.13333333333333333 * var_diff__Jdiff - 0.26666666666666666 * var_SERCA__Jup1 + 8.4320557491289208 * (-var_ICaT__ICaT - var_ICab__ICab - var_IpCa__IpCa + 2.0 * var_INaCa_i__INaCa_i) / mParameters[3]) / (1.0 + 2.9750000000000005e-5 / pow((0.0023800000000000002 + var_chaste_interface__intracellular_ions__casl), 2) + 1.75e-6 / pow((0.00050000000000000001 + var_chaste_interface__intracellular_ions__casl), 2)); // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__casl;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            double var_chaste_interface__intracellular_ions__cai = rY[1];
            // Units: millimolar; Initial value: 4.36004404734282e-05
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.00505983330678751
            double var_chaste_interface__intracellular_ions__nasl = rY[4];
            // Units: millimolar; Initial value: 8.23153516580562
            double var_chaste_interface__intracellular_ions__cass = rY[9];
            // Units: millimolar; Initial value: 0.000101777993438818
            double var_chaste_interface__intracellular_ions__casl = rY[10];
            // Units: millimolar; Initial value: 0.000102004317781147
            double var_chaste_interface__intracellular_ions__cansr = rY[11];
            // Units: millimolar; Initial value: 1.26350902016858
            double var_chaste_interface__ICaT__b = rY[35];
            // Units: dimensionless; Initial value: 0.000304250912559619
            double var_chaste_interface__ICaT__g = rY[36];
            // Units: dimensionless; Initial value: 0.994214357917907
            


            const double var_x0 = 1 / (mParameters[4] * mParameters[14]);
            const double var_x1 = var_x0 * mParameters[3];
            const double var_x2 = var_x1 * var_chaste_interface__membrane__v;
            const double var_x11 = pow(var_chaste_interface__intracellular_ions__nasl, 3);
            const double var_x24 = pow(mParameters[2], 3);
            const double var_x79 = 1 / (13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[2]) * mParameters[2]);
            const double var_x80 = exp(0.52239999999999998 * var_x2);
            const double var_x81 = 1 / var_x80;
            const double var_x82 = 1.0 + 0.011348161597821153 * (1.0 + var_x81) * mParameters[2];
            const double var_x87 = 1 / var_x82;
            const double var_x88 = var_x81 * var_x87;
            const double var_x89 = var_x24 * var_x79;
            const double var_x90 = var_x88 * var_x89;
            const double var_x93 = 0.011348161597821153 + 0.011348161597821153 * var_x80;
            const double var_x96 = 1 / exp(0.16700000000000001 * var_x2);
            const double var_x122 = var_x79 * mParameters[0];
            const double var_x123 = 1500000.0 * var_x122;
            const double var_x124 = var_x123 + 9.0785292782569211 * var_x90;
            const double var_x147 = var_x88 * mParameters[2];
            const double var_x148 = 56.740807989105761 * var_x147;
            const double var_x149 = var_x148 + 60000.0 * var_x87;
            const double var_x150 = 5000.0 + var_x149;
            const double var_x154 = var_x150 * var_x90;
            const double var_x158 = var_x124 * var_x149;
            const double var_x159 = 5000.0 * var_x158;
            const double var_x164 = 0.00036716666666666668 * var_x158;
            const double var_x166 = 0.11015000000000001 * var_x122;
            const double var_x180 = var_x123 * var_x149;
            const double var_x189 = 45392.646391284608 * var_x90;
            const double var_x213 = 3000000.0 * var_x122;
            const double var_x217 = 1.6177363333333335e-8 * var_x122;
            const double var_x225 = 27.235587834770765 * var_x90;
            const double var_x227 = 1.4686666666666667e-13 * var_x90;
            const double var_x241 = 1.0 + var_x93 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x242 = 1 / var_x241;
            const double var_x243 = var_x242 * var_x96;
            const double var_x244 = var_x242 * var_x80;
            const double var_x245 = 56.740807989105761 * var_x244;
            const double var_x246 = var_x245 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x247 = var_x246 + 60000.0 * var_x243;
            const double var_x248 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nasl) * var_chaste_interface__intracellular_ions__nasl;
            const double var_x249 = 1 / var_x248;
            const double var_x250 = 1500000.0 * var_x249;
            const double var_x251 = var_x250 * var_chaste_interface__intracellular_ions__casl;
            const double var_x254 = var_x244 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x265 = var_x244 * var_x249;
            const double var_x266 = var_x11 * var_x265;
            const double var_x267 = var_x122 * var_x266;
            const double var_x270 = 5000.0 + var_x247;
            const double var_x271 = var_x267 * var_x270;
            const double var_x273 = var_x122 * var_x249;
            const double var_x277 = var_x124 * var_x247;
            const double var_x278 = 13617793.917385383 * var_x271 + var_x251 * var_x277;
            const double var_x279 = var_x251 + 9.0785292782569211 * var_x266;
            const double var_x280 = var_x247 * var_x279;
            const double var_x281 = var_x150 * var_x266;
            const double var_x282 = 5000.0 * var_x280 + 45392.646391284608 * var_x281;
            const double var_x283 = var_x154 * var_x249;
            const double var_x284 = var_x283 * var_chaste_interface__intracellular_ions__casl;
            const double var_x285 = 13617793.917385383 * var_x284 + var_x180 * var_x279;
            const double var_x286 = var_x159 + var_x189 * var_x270;
            const double var_x287 = 1 / (var_x278 + var_x282 + var_x285 + var_x286);
            const double var_x288 = 10000.0 * var_x287;
            const double var_x289 = var_x249 * var_x277;
            const double var_x290 = var_x270 * var_x90;
            const double var_x291 = pow((var_x164 + var_x271 + var_x284 + 0.0033333333333333331 * var_x281 + 0.0033333333333333331 * var_x290 + 0.00036716666666666668 * var_x280 + 0.11015000000000001 * var_x289 * var_chaste_interface__intracellular_ions__casl + var_x149 * var_x166 * var_x279), (-2));
            const double var_x293 = 283704.03994552878 * var_x244;
            const double var_x294 = 300000000.0 * var_x243 + var_x293 * var_chaste_interface__intracellular_ions__nasl;
            const double var_x303 = var_x249 * var_x90;
            const double var_x313 = 5.3924544444444452e-11 * var_x278;
            const double var_x315 = var_x213 * var_x287;
            const double var_x316 = var_x246 * var_x287;
            const double var_x317 = var_x148 * var_x287;
            const double var_x318 = var_x217 * var_x282;
            const double var_x320 = var_x254 * var_x285;
            const double var_x321 = 27.235587834770765 * var_x287;
            const double var_x322 = var_x266 * var_x321;
            const double var_x323 = var_x147 * var_x278;
            const double var_x324 = var_x225 * var_x287;
            const double var_x325 = 1.4686666666666667e-13 * var_x266 * var_x286;
            const double var_x326 = var_x227 * var_x282;
            const double var_x328 = var_x285 * var_x287;
            const double var_x332 = pow(var_chaste_interface__intracellular_ions__casl, (-2));
            const double var_x333 = 1.0 + 2.2499999999999996e-8 * var_x332;
            const double var_x334 = 1 / var_x333;
            const double var_x369 = exp(9.9999999999999995e-8);
            const double var_x371 = 1 / (-1.0 + var_x369);
            const double var_x374 = exp(-9.9999999999999995e-8);
            const double var_x375 = 1 / (-1.0 + var_x374);
            const double var_x380 = fabs(var_chaste_interface__membrane__v);
            const double var_x381 = 1 / mParameters[3];
            const double var_x382 = var_x381 * mParameters[4] * mParameters[14];
            const double var_x383 = fabs(var_x382);
            const double var_x390 = var_x0 * pow(mParameters[3], 2);
            const double var_x413 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x414 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x415 = 1.0 + 0.0015 * var_x414;
            const double var_x416 = 1 / var_x415;
            const double var_x417 = 0.050000000000000003 * var_x416;
            const double var_x418 = var_x413 * var_x417 + var_chaste_interface__CaMK__CaMKt;
            const double var_x458 = -0.34100000000000003 * mParameters[0];
            const double var_x459 = 4.9999999999999992e-15 * mParameters[3];
            const double var_x460 = var_x371 * var_x459;
            const double var_x461 = var_x375 * var_x459;
            const double var_x462 = var_x461 * (var_x458 + var_x374 * var_chaste_interface__intracellular_ions__casl);
            const double var_x463 = 10000000.0 * var_x1;
            const double var_x464 = var_x463 * (var_x462 + var_x460 * (var_x458 + var_x369 * var_chaste_interface__intracellular_ions__casl));
            const double var_x465 = 4.9999999999999998e-8 * var_x383;
            const double var_x466 = var_x380 < var_x465;
            const double var_x467 = exp(2.0 * var_x2);
            const double var_x468 = var_x467 * var_chaste_interface__intracellular_ions__casl;
            const double var_x469 = var_x458 + var_x468;
            const double var_x470 = -1.0 + var_x467;
            const double var_x471 = 1 / var_x470;
            const double var_x472 = var_x390 * var_x471;
            const double var_x473 = 9.9999999999999995e-8 * var_x472;
            const double var_x474 = var_x469 * var_x473;
            const double var_x476 = var_x467 * var_chaste_interface__membrane__v;
            const double var_x478 = var_chaste_interface__ICaT__b * var_chaste_interface__ICaT__g;
            const double var_x479 = 0.075399999999999995 * var_x478;
            const double var_x517 = 4.9999999999999998e-8 * var_x382 + var_chaste_interface__membrane__v;
            const double var_x559 = 1 / var_chaste_interface__intracellular_ions__casl;
            const double var_x676 = var_x291 * var_x313;
            const double var_x678 = var_x291 * var_x318;
            const double var_x679 = 3.0597222222222222e-13 * var_x291;
            const double var_x786 = 2250000000000.0 * var_x149;
            const double var_x794 = 85111211.983658642 * var_x147;
            const double var_x808 = var_x463 * var_x517;
            const double var_x814 = var_x273 * var_x786;
            const double var_x815 = 13617793.917385383 * var_x283;
            const double var_x816 = -var_x814 - var_x815 - var_x250 * var_x277 - var_x250 * var_x294;
            const double var_x817 = var_x287 * var_x289;
            const double var_x818 = var_x287 * var_x294;
            const double var_x819 = var_x679 * var_x816;
            const double var_x820 = var_x291 * var_x816;
            const double var_x821 = 15000000000.0 * var_x817 + var_x316 * (var_x814 + var_x815) + var_x320 * var_x819 + var_x325 * var_x820 + var_x676 * var_x816 - var_x323 * var_x819 - var_x326 * var_x820 - var_x678 * var_x816 - var_x794 * var_x817 - 4500000000000.0 * var_x273 * var_x818 - 40853381.752156146 * var_x303 * var_x818;
            const double var_x822 = var_x246 * var_x328 + var_x278 * var_x288 + var_x286 * var_x322 - var_x278 * var_x317 - var_x282 * var_x315 - var_x282 * var_x324;
            const double var_x823 = var_x822 / (pow(var_x333, 2) * pow(var_chaste_interface__intracellular_ions__casl, 3));
            const double var_x827 = var_x374 * var_x461;
            const double var_x828 = 0.00050000000000000001 + var_chaste_interface__intracellular_ions__casl;
            const double var_x829 = 0.00050000000000000001 / var_x828;
            const double var_x830 = pow(var_x828, (-2));
            const double var_x831 = -var_x829 - ((var_x466) ? (-var_x827 + var_x808 * (var_x827 + var_x369 * var_x460)) : (var_x473 * var_x476)) + 0.00050000000000000001 * var_x830 * var_chaste_interface__intracellular_ions__casl - 0.037699999999999997 * var_x382 * var_x478 * var_x559;
            const double var_x892 = var_x382 * log(var_x559 * mParameters[0]);
            const double var_x902 = 0.14999999999999999 + var_x418;
            const double var_x903 = 1 / var_x902;
            const double var_x904 = var_x418 * var_x903;
            const double var_x905 = 0.00027999999999999998 - 0.00017000000000000001 * var_x904;
            const double var_x909 = 1.0 + 0.75 * var_x904;
            const double var_x910 = var_x905 * var_x909;
            const double var_x918 = 1.8666666666666665e-5 * var_chaste_interface__intracellular_ions__cansr;
            const double var_x999 = 0.001531344 * var_x334;
            const double var_x1000 = 0.0023800000000000002 + var_chaste_interface__intracellular_ions__casl;
            const double var_x1001 = 1.0 + 2.9750000000000005e-5 / pow(var_x1000, 2) + 1.75e-6 * var_x830;
            const double var_x1002 = 1 / var_x1001;
            const double var_x1003 = 8.4320557491289208 * var_x381;
            const double var_x1005 = 1.0 + var_x559 * var_x905;
            const double var_x1006 = 1 / var_x1005;
            const double var_x1007 = 5.333333333333334e-5 * var_x1006;
            const double var_x1008 = pow(var_x1005, (-2));
            const double var_x1009 = 5.333333333333334e-5 * var_x1008;
            const double var_x1011 = var_x1002;
            const double var_x1012 = var_x332 * var_x910;
            
            partialF = var_x1011 * (-0.75 + var_x1003 * (var_x831 + 6.8910479999999991e-11 * var_x823 + var_x821 * var_x999) - var_x1009 * var_x1012) + (5.950000000000001e-5 / pow(var_x1000, 3) + 3.4999999999999999e-6 / pow(var_x828, 3)) * (var_x918 + 0.66666666666666663 * var_chaste_interface__intracellular_ions__cass + 0.083333333333333329 * var_chaste_interface__intracellular_ions__cai - 0.75 * var_chaste_interface__intracellular_ions__casl + var_x1003 * (-((var_x466) ? (-var_x462 + var_x464 * var_x517) : (var_x474 * var_chaste_interface__membrane__v)) + var_x822 * var_x999 - var_x479 * (-0.5 * var_x892 + var_chaste_interface__membrane__v) - var_x829 * var_chaste_interface__intracellular_ions__casl) - var_x1007 * var_x909) / pow(var_x1001, 2);
        }
        else
        {
            const double y_save = rY[10];
            rY[10] += delta;
            const double temp = EvaluateYDerivative10(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[10])/delta;
            rY[10] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 4.36004404734282e-05
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.00505983330678751
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__intracellular_ions__casl = rY[10];
        // Units: millimolar; Initial value: 0.000102004317781147
        double var_chaste_interface__intracellular_ions__cansr = rY[11];
        // Units: millimolar; Initial value: 1.26350902016858
        double var_chaste_interface__intracellular_ions__cajsr = rY[12];
        // Units: millimolar; Initial value: 1.24811940209535
        double var_chaste_interface__intracellular_ions__cacsr = rY[13];
        // Units: millimolar; Initial value: 1.26516959198518
        


        // Mathematics
        const double var_CaMK__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_SERCA__dkmplb = 0.00017000000000000001 * var_CaMK__CaMKa / (0.14999999999999999 + var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__dqupcamk = 0.75 * var_CaMK__CaMKa / (0.14999999999999999 + var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__Jup1 = -6.9999999999999994e-5 * var_chaste_interface__intracellular_ions__cansr + 0.00020000000000000001 * (1.0 + var_SERCA__dqupcamk) / (1.0 + (0.00027999999999999998 - var_SERCA__dkmplb) / var_chaste_interface__intracellular_ions__casl); // millimolar_per_millisecond
        const double var_SERCA__Jup2 = -0.00027999999999999998 * var_chaste_interface__intracellular_ions__cansr + 0.0025999999999999999 * (1.0 + var_SERCA__dqupcamk) / (1.0 + (0.00027999999999999998 - var_SERCA__dkmplb) / var_chaste_interface__intracellular_ions__cai); // millimolar_per_millisecond
        const double var_trans_flux__Jtr1 = 0.0083333333333333332 * var_chaste_interface__intracellular_ions__cansr - 0.0083333333333333332 * var_chaste_interface__intracellular_ions__cajsr; // millimolar_per_millisecond
        const double var_trans_flux__Jtr2 = 0.0083333333333333332 * var_chaste_interface__intracellular_ions__cansr - 0.0083333333333333332 * var_chaste_interface__intracellular_ions__cacsr; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cansr = -0.050000000000000003 * var_trans_flux__Jtr1 - 0.20000000000000001 * var_trans_flux__Jtr2 + var_SERCA__Jup1 + var_SERCA__Jup2; // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__cansr;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.0024333333333333334;
        }
        else
        {
            const double y_save = rY[11];
            rY[11] += delta;
            const double temp = EvaluateYDerivative11(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[11])/delta;
            rY[11] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__intracellular_ions__cansr = rY[11];
        // Units: millimolar; Initial value: 1.26350902016858
        double var_chaste_interface__intracellular_ions__cajsr = rY[12];
        // Units: millimolar; Initial value: 1.24811940209535
        double var_chaste_interface__ryr__Jrel1 = rY[43];
        // Units: millimolar_per_millisecond; Initial value: 0.000108240945806962
        double var_chaste_interface__IP3__u = rY[45];
        // Units: millimolar_per_millisecond; Initial value: 0.466236137183558
        


        // Mathematics
        const double var_IP3__Jip3 = 0.0020202000000000002 * (1.0 - var_chaste_interface__IP3__u) * (-var_chaste_interface__intracellular_ions__cass + var_chaste_interface__intracellular_ions__cajsr) * var_chaste_interface__intracellular_ions__cass / (1.0 + 9090.9090909090901 * var_chaste_interface__intracellular_ions__cass); // millimolar_per_millisecond
        const double var_trans_flux__Jtr1 = 0.0083333333333333332 * var_chaste_interface__intracellular_ions__cansr - 0.0083333333333333332 * var_chaste_interface__intracellular_ions__cajsr; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cajsr = (-var_IP3__Jip3 - var_chaste_interface__ryr__Jrel1 + var_trans_flux__Jtr1) / (1.0 + 0.95999999999999996 / pow((0.80000000000000004 + var_chaste_interface__intracellular_ions__cajsr), 2)); // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__cajsr;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__intracellular_ions__cass = rY[9];
            // Units: millimolar; Initial value: 0.000101777993438818
            double var_chaste_interface__intracellular_ions__cansr = rY[11];
            // Units: millimolar; Initial value: 1.26350902016858
            double var_chaste_interface__intracellular_ions__cajsr = rY[12];
            // Units: millimolar; Initial value: 1.24811940209535
            double var_chaste_interface__ryr__Jrel1 = rY[43];
            // Units: millimolar_per_millisecond; Initial value: 0.000108240945806962
            double var_chaste_interface__IP3__u = rY[45];
            // Units: millimolar_per_millisecond; Initial value: 0.466236137183558
            


            const double var_x980 = -var_chaste_interface__intracellular_ions__cass + var_chaste_interface__intracellular_ions__cajsr;
            const double var_x981 = 1 / (1.0 + 9090.9090909090901 * var_chaste_interface__intracellular_ions__cass);
            const double var_x982 = 1.0 - var_chaste_interface__IP3__u;
            const double var_x983 = var_x981 * var_x982;
            const double var_x1019 = 0.0020202000000000002 * var_x983;
            const double var_x1020 = var_x1019 * var_chaste_interface__intracellular_ions__cass;
            const double var_x1021 = 0.80000000000000004 + var_chaste_interface__intracellular_ions__cajsr;
            const double var_x1022 = 1.0 + 0.95999999999999996 / pow(var_x1021, 2);
            const double var_x1023 = 1 / var_x1022;
            const double var_x1024 = var_x1023;
            const double var_x1025 = -var_chaste_interface__ryr__Jrel1;
            const double var_x1026 = 0.0083333333333333332 * var_chaste_interface__intracellular_ions__cansr;
            
            partialF = var_x1024 * (-0.0083333333333333332 - var_x1020) + 1.9199999999999999 * (var_x1025 + var_x1026 - 0.0083333333333333332 * var_chaste_interface__intracellular_ions__cajsr - var_x1020 * var_x980) / (pow(var_x1021, 3) * pow(var_x1022, 2));
        }
        else
        {
            const double y_save = rY[12];
            rY[12] += delta;
            const double temp = EvaluateYDerivative12(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[12])/delta;
            rY[12] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__intracellular_ions__cansr = rY[11];
        // Units: millimolar; Initial value: 1.26350902016858
        double var_chaste_interface__intracellular_ions__cacsr = rY[13];
        // Units: millimolar; Initial value: 1.26516959198518
        double var_chaste_interface__ryr__Jrel2 = rY[44];
        // Units: millimolar_per_millisecond; Initial value: 1.25045800437317e-69
        


        // Mathematics
        const double var_trans_flux__Jtr2 = 0.0083333333333333332 * var_chaste_interface__intracellular_ions__cansr - 0.0083333333333333332 * var_chaste_interface__intracellular_ions__cacsr; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cacsr = (-var_chaste_interface__ryr__Jrel2 + var_trans_flux__Jtr2) / (1.0 + 2.3039999999999998 / pow((0.80000000000000004 + var_chaste_interface__intracellular_ions__cacsr), 2)); // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__cacsr;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__intracellular_ions__cansr = rY[11];
            // Units: millimolar; Initial value: 1.26350902016858
            double var_chaste_interface__intracellular_ions__cacsr = rY[13];
            // Units: millimolar; Initial value: 1.26516959198518
            double var_chaste_interface__ryr__Jrel2 = rY[44];
            // Units: millimolar_per_millisecond; Initial value: 1.25045800437317e-69
            


            const double var_x1026 = 0.0083333333333333332 * var_chaste_interface__intracellular_ions__cansr;
            const double var_x1027 = 0.80000000000000004 + var_chaste_interface__intracellular_ions__cacsr;
            const double var_x1028 = pow(var_x1027, (-2));
            const double var_x1029 = 1 / (1.0 + 2.3039999999999998 * var_x1028);
            const double var_x1030 = 0.0083333333333333332 * var_x1029;
            const double var_x1031 = -var_chaste_interface__ryr__Jrel2;
            
            partialF = -var_x1030 + 0.86805555555555558 * (var_x1026 + var_x1031 - 0.0083333333333333332 * var_chaste_interface__intracellular_ions__cacsr) / (pow(var_x1027, 3) * pow((0.43402777777777779 + var_x1028), 2));
        }
        else
        {
            const double y_save = rY[13];
            rY[13] += delta;
            const double temp = EvaluateYDerivative13(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[13])/delta;
            rY[13] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__INa__m = rY[14];
        // Units: dimensionless; Initial value: 0.00632661703915808
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_INa__tm = _lt_0_row[28]; // millisecond
        const double d_dt_chaste_interface_var_INa__m = (-var_chaste_interface__INa__m + _lt_0_row[29]) / var_INa__tm; // 1 / millisecond

        return d_dt_chaste_interface_var_INa__m;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1034 = exp(0.33477135461604829 + 0.02876042565429968 * var_chaste_interface__membrane__v);
            const double var_x1035 = exp(-13.000839630562552 - 0.16792611251049538 * var_chaste_interface__membrane__v);
            const double var_x1037 = 8.5519999999999996 * var_x1035;
            const double var_x1038 = 6.7649999999999997 * var_x1034;
            const double var_x1040 = -var_x1037 - var_x1038;
            
            partialF = var_x1040;
        }
        else
        {
            const double y_save = rY[14];
            rY[14] += delta;
            const double temp = EvaluateYDerivative14(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[14])/delta;
            rY[14] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__INa__hf = rY[15];
        // Units: dimensionless; Initial value: 0.788611739889677
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_INa__hss = _lt_0_row[23]; // dimensionless
        const double d_dt_chaste_interface_var_INa__hf = (-var_chaste_interface__INa__hf + var_INa__hss) * (_lt_0_row[24]); // 1 / millisecond

        return d_dt_chaste_interface_var_INa__hf;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1045 = exp(-0.054037868972050131 + 0.10888146075367747 * var_chaste_interface__membrane__v);
            const double var_x1046 = exp(-0.49472505376754605 - 0.12726046399165172 * var_chaste_interface__membrane__v);
            const double var_x1047 = 16.0 * var_x1045;
            const double var_x1048 = 3.6859999999999999e-6 * var_x1046;
            
            partialF = -var_x1047 - var_x1048;
        }
        else
        {
            const double y_save = rY[15];
            rY[15] += delta;
            const double temp = EvaluateYDerivative15(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[15])/delta;
            rY[15] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__INa__hs = rY[16];
        // Units: dimensionless; Initial value: 0.788545979951331
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_INa__hss = _lt_0_row[23]; // dimensionless
        const double var_INa__ths = _lt_0_row[25]; // millisecond
        const double d_dt_chaste_interface_var_INa__hs = (-var_chaste_interface__INa__hs + var_INa__hss) / var_INa__ths; // 1 / millisecond

        return d_dt_chaste_interface_var_INa__hs;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1051 = exp(0.10112954465231205 + 0.017649135192375574 * var_chaste_interface__membrane__v);
            const double var_x1052 = exp(-0.63992869875222813 - 0.035650623885918005 * var_chaste_interface__membrane__v);
            const double var_x1054 = 0.0097940000000000006 * var_x1052;
            const double var_x1055 = 0.33429999999999999 * var_x1051;
            
            partialF = -var_x1054 - var_x1055;
        }
        else
        {
            const double y_save = rY[16];
            rY[16] += delta;
            const double temp = EvaluateYDerivative16(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[16])/delta;
            rY[16] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__INa__j = rY[17];
        // Units: dimensionless; Initial value: 0.790474358603666
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_INa__hss = _lt_0_row[23]; // dimensionless
        const double var_INa__jss = var_INa__hss; // dimensionless
        const double var_INa__tj = _lt_0_row[27]; // millisecond
        const double d_dt_chaste_interface_var_INa__j = (-var_chaste_interface__INa__j + var_INa__jss) / var_INa__tj; // 1 / millisecond

        return d_dt_chaste_interface_var_INa__j;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1057 = exp(-15.357647523189264 - 0.13157029142819551 * var_chaste_interface__membrane__v);
            const double var_x1058 = exp(0.69411673565151943 + 0.11067088691648774 * var_chaste_interface__membrane__v);
            const double var_x1059 = 1 / (0.86280000000000001 * var_x1057 + 1.1095999999999999 * var_x1058);
            const double var_x1060 = 1 / (4.859 + var_x1059);
            
            partialF = -var_x1060;
        }
        else
        {
            const double y_save = rY[17];
            rY[17] += delta;
            const double temp = EvaluateYDerivative17(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[17])/delta;
            rY[17] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__INa__hsp = rY[18];
        // Units: dimensionless; Initial value: 0.579693514309867
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_INa__ths = _lt_0_row[25]; // millisecond
        const double d_dt_chaste_interface_var_INa__hsp = 0.33333333333333331 * (-var_chaste_interface__INa__hsp + _lt_0_row[26]) / var_INa__ths; // 1 / millisecond

        return d_dt_chaste_interface_var_INa__hsp;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1051 = exp(0.10112954465231205 + 0.017649135192375574 * var_chaste_interface__membrane__v);
            const double var_x1052 = exp(-0.63992869875222813 - 0.035650623885918005 * var_chaste_interface__membrane__v);
            
            partialF = -0.11143333333333333 * var_x1051 - 0.003264666666666667 * var_x1052;
        }
        else
        {
            const double y_save = rY[18];
            rY[18] += delta;
            const double temp = EvaluateYDerivative18(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[18])/delta;
            rY[18] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__INa__jp = rY[19];
        // Units: dimensionless; Initial value: 0.790947058236417
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_INa__hss = _lt_0_row[23]; // dimensionless
        const double var_INa__jss = var_INa__hss; // dimensionless
        const double var_INa__tj = _lt_0_row[27]; // millisecond
        const double d_dt_chaste_interface_var_INa__jp = 0.68493150684931503 * (-var_chaste_interface__INa__jp + var_INa__jss) / var_INa__tj; // 1 / millisecond

        return d_dt_chaste_interface_var_INa__jp;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1057 = exp(-15.357647523189264 - 0.13157029142819551 * var_chaste_interface__membrane__v);
            const double var_x1058 = exp(0.69411673565151943 + 0.11067088691648774 * var_chaste_interface__membrane__v);
            const double var_x1059 = 1 / (0.86280000000000001 * var_x1057 + 1.1095999999999999 * var_x1058);
            const double var_x1060 = 1 / (4.859 + var_x1059);
            
            partialF = -0.68493150684931503 * var_x1060;
        }
        else
        {
            const double y_save = rY[19];
            rY[19] += delta;
            const double temp = EvaluateYDerivative19(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[19])/delta;
            rY[19] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__INaL__mL = rY[20];
        // Units: dimensionless; Initial value: 0.000241925773627233
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_INa__tm = _lt_0_row[28]; // millisecond
        const double d_dt_chaste_interface_var_INaL__mL = (-var_chaste_interface__INaL__mL + _lt_0_row[32]) / var_INa__tm; // 1 / millisecond

        return d_dt_chaste_interface_var_INaL__mL;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1034 = exp(0.33477135461604829 + 0.02876042565429968 * var_chaste_interface__membrane__v);
            const double var_x1035 = exp(-13.000839630562552 - 0.16792611251049538 * var_chaste_interface__membrane__v);
            const double var_x1037 = 8.5519999999999996 * var_x1035;
            const double var_x1038 = 6.7649999999999997 * var_x1034;
            const double var_x1040 = -var_x1037 - var_x1038;
            
            partialF = var_x1040;
        }
        else
        {
            const double y_save = rY[20];
            rY[20] += delta;
            const double temp = EvaluateYDerivative20(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[20])/delta;
            rY[20] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__INaL__hL = rY[21];
        // Units: dimensionless; Initial value: 0.463574582508218
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double d_dt_chaste_interface_var_INaL__hL = _lt_0_row[30] - 0.0050000000000000001 * var_chaste_interface__INaL__hL; // 1 / millisecond

        return d_dt_chaste_interface_var_INaL__hL;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.0050000000000000001;
        }
        else
        {
            const double y_save = rY[21];
            rY[21] += delta;
            const double temp = EvaluateYDerivative21(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[21])/delta;
            rY[21] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__INaL__hLp = rY[22];
        // Units: dimensionless; Initial value: 0.240216198686475
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double d_dt_chaste_interface_var_INaL__hLp = _lt_0_row[31] - 0.0016666666666666668 * var_chaste_interface__INaL__hLp; // 1 / millisecond

        return d_dt_chaste_interface_var_INaL__hLp;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.0016666666666666668;
        }
        else
        {
            const double y_save = rY[22];
            rY[22] += delta;
            const double temp = EvaluateYDerivative22(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[22])/delta;
            rY[22] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__Ito__a = rY[23];
        // Units: dimensionless; Initial value: 0.000272851144435704
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double d_dt_chaste_interface_var_Ito__a = (-var_chaste_interface__Ito__a + _lt_0_row[36]) * (_lt_0_row[37]); // 1 / millisecond

        return d_dt_chaste_interface_var_Ito__a;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1072 = 0.034035137876343539 * var_chaste_interface__membrane__v;
            const double var_x1073 = exp(0.62658348478969694 - var_x1072);
            const double var_x1074 = 1.0 + var_x1073;
            const double var_x1075 = exp(3.403513787634354 + var_x1072);
            const double var_x1076 = 1.0 + var_x1075;
            const double var_x1077 = 3.3285782215882072 / var_x1076;
            const double var_x1078 = 0.78668405081082138 / var_x1074;
            
            partialF = -var_x1077 - var_x1078;
        }
        else
        {
            const double y_save = rY[23];
            rY[23] += delta;
            const double temp = EvaluateYDerivative23(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[23])/delta;
            rY[23] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__Ito__i1 = rY[24];
        // Units: dimensionless; Initial value: 0.649604795721571
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_Ito__iss = _lt_0_row[35]; // dimensionless
        const double d_dt_chaste_interface_var_Ito__i1 = (-var_chaste_interface__Ito__i1 + var_Ito__iss) / (_lt_0_row[39]); // 1 / millisecond

        return d_dt_chaste_interface_var_Ito__i1;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1079 = exp(14.123035029087756 + 0.12377769525931426 * var_chaste_interface__membrane__v);
            const double var_x1080 = exp(-1.6345469940728197 - 0.016934801016088061 * var_chaste_interface__membrane__v);
            const double var_x1081 = 1 / (1.7800000000000001e-8 * var_x1079 + 0.0014159999999999999 * var_x1080);
            const double var_x1082 = 1 / (43.0 + var_x1081);
            
            partialF = -var_x1082;
        }
        else
        {
            const double y_save = rY[24];
            rY[24] += delta;
            const double temp = EvaluateYDerivative24(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[24])/delta;
            rY[24] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__Ito__i2 = rY[25];
        // Units: dimensionless; Initial value: 0.989965695822495
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_Ito__iss = _lt_0_row[35]; // dimensionless
        const double d_dt_chaste_interface_var_Ito__i2 = (-var_chaste_interface__Ito__i2 + var_Ito__iss) / (_lt_0_row[38]); // 1 / millisecond

        return d_dt_chaste_interface_var_Ito__i2;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1087 = exp(-1.0 - 0.01 * var_chaste_interface__membrane__v);
            const double var_x1088 = exp(-0.93131548311990686 + 0.11641443538998836 * var_chaste_interface__membrane__v);
            const double var_x1089 = 1 / (0.39329999999999998 * var_x1087 + 0.08004 * var_x1088);
            const double var_x1090 = 1 / (6.1619999999999999 + var_x1089);
            
            partialF = -var_x1090;
        }
        else
        {
            const double y_save = rY[25];
            rY[25] += delta;
            const double temp = EvaluateYDerivative25(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[25])/delta;
            rY[25] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__ICaL__d = rY[26];
        // Units: dimensionless; Initial value: 6.97735089296892e-09
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double d_dt_chaste_interface_var_ICaL__d = (-var_chaste_interface__ICaL__d + _lt_0_row[6]) / (_lt_0_row[7]); // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__d;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1093 = exp(1.26 + 0.089999999999999997 * var_chaste_interface__membrane__v);
            const double var_x1094 = exp(-0.30000000000000004 - 0.050000000000000003 * var_chaste_interface__membrane__v);
            const double var_x1095 = var_x1093 + var_x1094;
            const double var_x1096 = 0.59999999999999998 + 1 / var_x1095;
            const double var_x1097 = 1 / var_x1096;
            
            partialF = -var_x1097;
        }
        else
        {
            const double y_save = rY[26];
            rY[26] += delta;
            const double temp = EvaluateYDerivative26(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[26])/delta;
            rY[26] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__ICaL__ff = rY[27];
        // Units: dimensionless; Initial value: 0.999999968230738
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_ICaL__fss = _lt_0_row[5]; // dimensionless
        const double var_ICaL__tff = _lt_0_row[10]; // millisecond
        const double d_dt_chaste_interface_var_ICaL__ff = (-var_chaste_interface__ICaL__ff + var_ICaL__fss) / var_ICaL__tff; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__ff;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x402 = 0.10000000000000001 * var_chaste_interface__membrane__v;
            const double var_x1098 = exp(3.5190000000000001 + var_x402);
            const double var_x1099 = -var_x402;
            const double var_x1100 = exp(-3.5190000000000001 + var_x1099);
            const double var_x1101 = 1 / (0.0044999999999999997 * var_x1098 + 0.0044999999999999997 * var_x1100);
            const double var_x1102 = 1 / (7.0 + var_x1101);
            
            partialF = -var_x1102;
        }
        else
        {
            const double y_save = rY[27];
            rY[27] += delta;
            const double temp = EvaluateYDerivative27(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[27])/delta;
            rY[27] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__ICaL__fs = rY[28];
        // Units: dimensionless; Initial value: 0.926692153319136
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_ICaL__fss = _lt_0_row[5]; // dimensionless
        const double d_dt_chaste_interface_var_ICaL__fs = (-var_chaste_interface__ICaL__fs + var_ICaL__fss) / (_lt_0_row[11]); // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__fs;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1109 = exp(3.3649999999999998 + 0.16666666666666666 * var_chaste_interface__membrane__v);
            const double var_x1110 = exp(-5.0474999999999994 - 0.25 * var_chaste_interface__membrane__v);
            const double var_x1111 = 1 / (3.4999999999999997e-5 * var_x1109 + 3.4999999999999997e-5 * var_x1110);
            const double var_x1112 = 1 / (1000.0 + var_x1111);
            
            partialF = -var_x1112;
        }
        else
        {
            const double y_save = rY[28];
            rY[28] += delta;
            const double temp = EvaluateYDerivative28(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[28])/delta;
            rY[28] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__ICaL__fcaf = rY[29];
        // Units: dimensionless; Initial value: 0.99999996819573
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_ICaL__fss = _lt_0_row[5]; // dimensionless
        const double var_ICaL__fcass = var_ICaL__fss; // dimensionless
        const double var_ICaL__tfcaf = _lt_0_row[8]; // millisecond
        const double d_dt_chaste_interface_var_ICaL__fcaf = (-var_chaste_interface__ICaL__fcaf + var_ICaL__fcass) / var_ICaL__tfcaf; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__fcaf;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1113 = 0.14285714285714285 * var_chaste_interface__membrane__v;
            const double var_x1114 = exp(1.5985714285714285 + var_x1113);
            const double var_x1115 = -var_x1113;
            const double var_x1116 = exp(-1.5985714285714285 + var_x1115);
            const double var_x1117 = 1 / (0.040000000000000001 * var_x1114 + 0.040000000000000001 * var_x1116);
            const double var_x1118 = 1 / (5.04 + 0.71999999999999997 * var_x1117);
            
            partialF = -var_x1118;
        }
        else
        {
            const double y_save = rY[29];
            rY[29] += delta;
            const double temp = EvaluateYDerivative29(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[29])/delta;
            rY[29] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__ICaL__fcas = rY[30];
        // Units: dimensionless; Initial value: 0.999999905741936
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_ICaL__fss = _lt_0_row[5]; // dimensionless
        const double var_ICaL__fcass = var_ICaL__fss; // dimensionless
        const double d_dt_chaste_interface_var_ICaL__fcas = (-var_chaste_interface__ICaL__fcas + var_ICaL__fcass) / (_lt_0_row[9]); // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__fcas;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1113 = 0.14285714285714285 * var_chaste_interface__membrane__v;
            const double var_x1120 = exp(2.1699999999999999 + var_x1113);
            const double var_x1121 = exp(-5.0633333333333335 - 0.33333333333333331 * var_chaste_interface__membrane__v);
            const double var_x1122 = 1 / (0.00012 * var_x1120 + 0.00012 * var_x1121);
            const double var_x1123 = 1 / (49.0 + 0.48999999999999999 * var_x1122);
            
            partialF = -var_x1123;
        }
        else
        {
            const double y_save = rY[30];
            rY[30] += delta;
            const double temp = EvaluateYDerivative30(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[30])/delta;
            rY[30] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__ICaL__jca = rY[31];
        // Units: dimensionless; Initial value: 0.999978907334662
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_ICaL__fss = _lt_0_row[5]; // dimensionless
        const double var_ICaL__fcass = var_ICaL__fss; // dimensionless
        const double d_dt_chaste_interface_var_ICaL__jca = 0.013333333333333334 * var_ICaL__fcass - 0.013333333333333334 * var_chaste_interface__ICaL__jca; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__jca;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.013333333333333334;
        }
        else
        {
            const double y_save = rY[31];
            rY[31] += delta;
            const double temp = EvaluateYDerivative31(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[31])/delta;
            rY[31] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__ICaL__ffp = rY[32];
        // Units: dimensionless; Initial value: 0.999999968365903
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_ICaL__fss = _lt_0_row[5]; // dimensionless
        const double var_ICaL__tff = _lt_0_row[10]; // millisecond
        const double d_dt_chaste_interface_var_ICaL__ffp = 0.40000000000000002 * (-var_chaste_interface__ICaL__ffp + var_ICaL__fss) / var_ICaL__tff; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__ffp;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x402 = 0.10000000000000001 * var_chaste_interface__membrane__v;
            const double var_x1098 = exp(3.5190000000000001 + var_x402);
            const double var_x1099 = -var_x402;
            const double var_x1100 = exp(-3.5190000000000001 + var_x1099);
            const double var_x1101 = 1 / (0.0044999999999999997 * var_x1098 + 0.0044999999999999997 * var_x1100);
            const double var_x1102 = 1 / (7.0 + var_x1101);
            
            partialF = -0.40000000000000002 * var_x1102;
        }
        else
        {
            const double y_save = rY[32];
            rY[32] += delta;
            const double temp = EvaluateYDerivative32(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[32])/delta;
            rY[32] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__ICaL__fcafp = rY[33];
        // Units: dimensionless; Initial value: 0.999999968278239
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_ICaL__fss = _lt_0_row[5]; // dimensionless
        const double var_ICaL__fcass = var_ICaL__fss; // dimensionless
        const double var_ICaL__tfcaf = _lt_0_row[8]; // millisecond
        const double d_dt_chaste_interface_var_ICaL__fcafp = 0.40000000000000002 * (-var_chaste_interface__ICaL__fcafp + var_ICaL__fcass) / var_ICaL__tfcaf; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__fcafp;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1113 = 0.14285714285714285 * var_chaste_interface__membrane__v;
            const double var_x1114 = exp(1.5985714285714285 + var_x1113);
            const double var_x1115 = -var_x1113;
            const double var_x1116 = exp(-1.5985714285714285 + var_x1115);
            const double var_x1117 = 1 / (0.040000000000000001 * var_x1114 + 0.040000000000000001 * var_x1116);
            const double var_x1118 = 1 / (5.04 + 0.71999999999999997 * var_x1117);
            
            partialF = -0.40000000000000002 * var_x1118;
        }
        else
        {
            const double y_save = rY[33];
            rY[33] += delta;
            const double temp = EvaluateYDerivative33(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[33])/delta;
            rY[33] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__ICaL__jca = rY[31];
        // Units: dimensionless; Initial value: 0.999978907334662
        double var_chaste_interface__ICaL__nca = rY[34];
        // Units: dimensionless; Initial value: 0.00547252500964926
        


        // Mathematics
        const double var_ICaL__km2n = var_chaste_interface__ICaL__jca; // per_millisecond
        const double d_dt_chaste_interface_var_ICaL__nca = 1000.0 / (pow((1.0 + 0.002 / var_chaste_interface__intracellular_ions__cass), 4) + 1000.0 / var_ICaL__km2n) - var_ICaL__km2n * var_chaste_interface__ICaL__nca; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__nca;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__ICaL__jca = rY[31];
            // Units: dimensionless; Initial value: 0.999978907334662
            


            
            partialF = -var_chaste_interface__ICaL__jca;
        }
        else
        {
            const double y_save = rY[34];
            rY[34] += delta;
            const double temp = EvaluateYDerivative34(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[34])/delta;
            rY[34] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative35(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__ICaT__b = rY[35];
        // Units: dimensionless; Initial value: 0.000304250912559619
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double d_dt_chaste_interface_var_ICaT__b = (-var_chaste_interface__ICaT__b + _lt_0_row[12]) * (_lt_0_row[13]); // 1 / millisecond

        return d_dt_chaste_interface_var_ICaT__b;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative35(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1129 = 0.033333333333333333 * var_chaste_interface__membrane__v;
            const double var_x1130 = exp(0.54333333333333333 + var_x1129);
            const double var_x1131 = exp(-0.54333333333333333 - var_x1129);
            const double var_x1132 = 1.0680000000000001 * var_x1130;
            const double var_x1133 = 1.0680000000000001 * var_x1131;
            
            partialF = -var_x1132 - var_x1133;
        }
        else
        {
            const double y_save = rY[35];
            rY[35] += delta;
            const double temp = EvaluateYDerivative35(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[35])/delta;
            rY[35] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative36(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__ICaT__g = rY[36];
        // Units: dimensionless; Initial value: 0.994214357917907
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double d_dt_chaste_interface_var_ICaT__g = (-var_chaste_interface__ICaT__g + _lt_0_row[14]) * (_lt_0_row[15]); // 1 / millisecond

        return d_dt_chaste_interface_var_ICaT__g;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative36(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1136 = exp(4.6558441558441563 + 0.064935064935064929 * var_chaste_interface__membrane__v);
            const double var_x1137 = exp(-0.86074429771908767 - 0.012004801920768308 * var_chaste_interface__membrane__v);
            const double var_x1138 = 0.014999999999999999 * var_x1136;
            const double var_x1139 = 0.014999999999999999 * var_x1137;
            
            partialF = -var_x1138 - var_x1139;
        }
        else
        {
            const double y_save = rY[36];
            rY[36] += delta;
            const double temp = EvaluateYDerivative36(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[36])/delta;
            rY[36] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative37(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__IKr__xrf = rY[37];
        // Units: dimensionless; Initial value: 0.000331691184084272
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_IKr__xrss = _lt_0_row[17]; // dimensionless
        const double d_dt_chaste_interface_var_IKr__xrf = (-var_chaste_interface__IKr__xrf + var_IKr__xrss) / (_lt_0_row[18]); // 1 / millisecond

        return d_dt_chaste_interface_var_IKr__xrf;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative37(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1140 = exp(1.4808635917566242 - 0.049067713444553483 * var_chaste_interface__membrane__v);
            const double var_x1141 = exp(-3.6340139570948562 + 0.25846471956577927 * var_chaste_interface__membrane__v);
            const double var_x1142 = 1 / (4.1230000000000003e-5 * var_x1140 + 0.36520000000000002 * var_x1141);
            const double var_x1143 = 1 / (12.98 + var_x1142);
            
            partialF = -var_x1143;
        }
        else
        {
            const double y_save = rY[37];
            rY[37] += delta;
            const double temp = EvaluateYDerivative37(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[37])/delta;
            rY[37] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative38(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__IKr__xrs = rY[38];
        // Units: dimensionless; Initial value: 0.568716473334161
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_IKr__xrss = _lt_0_row[17]; // dimensionless
        const double d_dt_chaste_interface_var_IKr__xrs = (-var_chaste_interface__IKr__xrs + var_IKr__xrss) / (_lt_0_row[19]); // 1 / millisecond

        return d_dt_chaste_interface_var_IKr__xrs;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative38(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1148 = exp(0.4834232845026985 - 0.038550501156515031 * var_chaste_interface__membrane__v);
            const double var_x1149 = exp(-2.3793337865397692 + 0.13596193065941536 * var_chaste_interface__membrane__v);
            const double var_x1150 = 1 / (1.128e-5 * var_x1148 + 0.066290000000000002 * var_x1149);
            const double var_x1151 = 1 / (1.865 + var_x1150);
            
            partialF = -var_x1151;
        }
        else
        {
            const double y_save = rY[38];
            rY[38] += delta;
            const double temp = EvaluateYDerivative38(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[38])/delta;
            rY[38] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative39(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__IKs__xs1 = rY[39];
        // Units: dimensionless; Initial value: 0.191165248085394
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_IKs__xs1ss = _lt_0_row[20]; // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs1 = (-var_chaste_interface__IKs__xs1 + var_IKs__xs1ss) / (_lt_0_row[21]); // 1 / millisecond

        return d_dt_chaste_interface_var_IKs__xs1;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative39(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1152 = exp(-0.91304347826086951 - 0.0043478260869565218 * var_chaste_interface__membrane__v);
            const double var_x1153 = exp(2.7123595505617977 + 0.056179775280898875 * var_chaste_interface__membrane__v);
            const double var_x1154 = 1 / (0.001292 * var_x1152 + 0.00023259999999999999 * var_x1153);
            const double var_x1155 = 1 / (817.29999999999995 + var_x1154);
            
            partialF = -var_x1155;
        }
        else
        {
            const double y_save = rY[39];
            rY[39] += delta;
            const double temp = EvaluateYDerivative39(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[39])/delta;
            rY[39] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative40(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__IKs__xs2 = rY[40];
        // Units: dimensionless; Initial value: 0.000222677365291219
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_IKs__xs1ss = _lt_0_row[20]; // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs2 = (-var_chaste_interface__IKs__xs2 + var_IKs__xs1ss) * (_lt_0_row[22]); // 1 / millisecond

        return d_dt_chaste_interface_var_IKs__xs2;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative40(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1160 = exp(-2.5 + 0.050000000000000003 * var_chaste_interface__membrane__v);
            const double var_x1161 = exp(-2.1464516129032258 - 0.032258064516129031 * var_chaste_interface__membrane__v);
            const double var_x1162 = 0.019300000000000001 * var_x1161;
            const double var_x1163 = 0.01 * var_x1160;
            
            partialF = -var_x1162 - var_x1163;
        }
        else
        {
            const double y_save = rY[40];
            rY[40] += delta;
            const double temp = EvaluateYDerivative40(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[40])/delta;
            rY[40] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative41(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__If__y = rY[41];
        // Units: dimensionless; Initial value: 0.233119011214908
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double d_dt_chaste_interface_var_If__y = (-var_chaste_interface__If__y + _lt_0_row[33]) * (_lt_0_row[34]); // 1 / millisecond

        return d_dt_chaste_interface_var_If__y;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative41(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x402 = 0.10000000000000001 * var_chaste_interface__membrane__v;
            const double var_x1099 = -var_x402;
            const double var_x1166 = exp(0.94999999999999996 + 0.016666666666666666 * var_chaste_interface__membrane__v);
            const double var_x1167 = exp(-13.199999999999999 + var_x1099);
            const double var_x1168 = 0.00050000000000000001 * var_x1166;
            const double var_x1169 = 0.00050000000000000001 * var_x1167;
            
            partialF = -var_x1168 - var_x1169;
        }
        else
        {
            const double y_save = rY[41];
            rY[41] += delta;
            const double temp = EvaluateYDerivative41(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[41])/delta;
            rY[41] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative42(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__IK1__xk1 = rY[42];
        // Units: dimensionless; Initial value: 0.997084813729909
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double d_dt_chaste_interface_var_IK1__xk1 = (-var_chaste_interface__IK1__xk1 + 1 / (1.0 + exp((-144.59 - var_chaste_interface__membrane__v - 2.5537999999999998 * mParameters[1]) / (3.8115000000000001 + 1.5691999999999999 * mParameters[1])))) * (_lt_0_row[16]); // 1 / millisecond

        return d_dt_chaste_interface_var_IK1__xk1;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative42(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            


            const double var_x1173 = exp(3.4155488244627148 + 0.014423770373575654 * var_chaste_interface__membrane__v);
            const double var_x1174 = exp(-6.2475442043222005 - 0.049115913555992145 * var_chaste_interface__membrane__v);
            const double var_x1175 = 0.0081833060556464818 * var_x1173;
            const double var_x1176 = 0.0081833060556464818 * var_x1174;
            
            partialF = -var_x1175 - var_x1176;
        }
        else
        {
            const double y_save = rY[42];
            rY[42] += delta;
            const double temp = EvaluateYDerivative42(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[42])/delta;
            rY[42] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative43(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.00505983330678751
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__intracellular_ions__casl = rY[10];
        // Units: millimolar; Initial value: 0.000102004317781147
        double var_chaste_interface__intracellular_ions__cajsr = rY[12];
        // Units: millimolar; Initial value: 1.24811940209535
        double var_chaste_interface__ICaL__d = rY[26];
        // Units: dimensionless; Initial value: 6.97735089296892e-09
        double var_chaste_interface__ICaL__ff = rY[27];
        // Units: dimensionless; Initial value: 0.999999968230738
        double var_chaste_interface__ICaL__fs = rY[28];
        // Units: dimensionless; Initial value: 0.926692153319136
        double var_chaste_interface__ICaL__fcaf = rY[29];
        // Units: dimensionless; Initial value: 0.99999996819573
        double var_chaste_interface__ICaL__fcas = rY[30];
        // Units: dimensionless; Initial value: 0.999999905741936
        double var_chaste_interface__ICaL__jca = rY[31];
        // Units: dimensionless; Initial value: 0.999978907334662
        double var_chaste_interface__ICaL__ffp = rY[32];
        // Units: dimensionless; Initial value: 0.999999968365903
        double var_chaste_interface__ICaL__fcafp = rY[33];
        // Units: dimensionless; Initial value: 0.999999968278239
        double var_chaste_interface__ICaL__nca = rY[34];
        // Units: dimensionless; Initial value: 0.00547252500964926
        double var_chaste_interface__ryr__Jrel1 = rY[43];
        // Units: millimolar_per_millisecond; Initial value: 0.000108240945806962
        double var_chaste_interface__IP3__u = rY[45];
        // Units: millimolar_per_millisecond; Initial value: 0.466236137183558
        

        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_ICaL__PCap = 1.1000000000000001 * mParameters[5]; // dimensionless
        const double var_ICaL__f = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ff; // dimensionless
        const double var_ICaL__fp = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ffp; // dimensionless
        const double var_CaMK__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa); // dimensionless
        const double var_IP3__Jip3 = 0.0020202000000000002 * (1.0 - var_chaste_interface__IP3__u) * (-var_chaste_interface__intracellular_ions__cass + var_chaste_interface__intracellular_ions__cajsr) * var_chaste_interface__intracellular_ions__cass / (1.0 + 9090.9090909090901 * var_chaste_interface__intracellular_ions__cass); // millimolar_per_millisecond
        const double var_diff__Jdiff = 5.0 * var_chaste_interface__intracellular_ions__cass - 5.0 * var_chaste_interface__intracellular_ions__casl; // millimolar_per_millisecond
        const double var_ICaL__Afcaf = _lt_0_row[0]; // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (4.0 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * mParameters[5] * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 4.9999999999999998e-8 * fabs(mParameters[4] * mParameters[14] / mParameters[3])) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[4] * mParameters[14] / mParameters[3] + var_chaste_interface__membrane__v) * (1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) * mParameters[3] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[3] / (mParameters[4] * mParameters[14])) : (4.0 * pow(mParameters[3], 2) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * var_chaste_interface__membrane__v / ((-1.0 + exp(2.0 * var_chaste_interface__membrane__v * mParameters[3] / (mParameters[4] * mParameters[14]))) * mParameters[4] * mParameters[14]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double d_dt_chaste_interface_var_ryr__Jrel1 = 0.5 * (1.0 + 0.0123 / var_chaste_interface__intracellular_ions__cajsr) * (-var_chaste_interface__ryr__Jrel1 + ((-0.10000000000000001 * var_IP3__Jip3 - 0.10000000000000001 * var_chaste_interface__ryr__Jrel1 + 63.240418118466899 * var_ICaL__ICaL / mParameters[3] + var_diff__Jdiff < 0) ? (15.0 * (1.0 + 1 / (1.0 + 3.7780199833600026e-5 / pow(var_CaMK__CaMKa, 8))) * (-var_diff__Jdiff + 0.10000000000000001 * var_IP3__Jip3 + 0.10000000000000001 * var_chaste_interface__ryr__Jrel1 - 63.240418118466899 * var_ICaL__ICaL / mParameters[3]) / (1.0 + 1 / pow(var_chaste_interface__intracellular_ions__cajsr, 8))) : (0))) / (1.0 + 1 / (1.0 + 3.7780199833600026e-5 / pow(var_CaMK__CaMKa, 8))); // millimolar_per_millisecond / millisecond

        return d_dt_chaste_interface_var_ryr__Jrel1;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative43(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -86.6814002878592
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.00505983330678751
            double var_chaste_interface__intracellular_ions__cass = rY[9];
            // Units: millimolar; Initial value: 0.000101777993438818
            double var_chaste_interface__intracellular_ions__casl = rY[10];
            // Units: millimolar; Initial value: 0.000102004317781147
            double var_chaste_interface__intracellular_ions__cajsr = rY[12];
            // Units: millimolar; Initial value: 1.24811940209535
            double var_chaste_interface__ICaL__d = rY[26];
            // Units: dimensionless; Initial value: 6.97735089296892e-09
            double var_chaste_interface__ICaL__ff = rY[27];
            // Units: dimensionless; Initial value: 0.999999968230738
            double var_chaste_interface__ICaL__fs = rY[28];
            // Units: dimensionless; Initial value: 0.926692153319136
            double var_chaste_interface__ICaL__fcaf = rY[29];
            // Units: dimensionless; Initial value: 0.99999996819573
            double var_chaste_interface__ICaL__fcas = rY[30];
            // Units: dimensionless; Initial value: 0.999999905741936
            double var_chaste_interface__ICaL__jca = rY[31];
            // Units: dimensionless; Initial value: 0.999978907334662
            double var_chaste_interface__ICaL__ffp = rY[32];
            // Units: dimensionless; Initial value: 0.999999968365903
            double var_chaste_interface__ICaL__fcafp = rY[33];
            // Units: dimensionless; Initial value: 0.999999968278239
            double var_chaste_interface__ICaL__nca = rY[34];
            // Units: dimensionless; Initial value: 0.00547252500964926
            double var_chaste_interface__ryr__Jrel1 = rY[43];
            // Units: millimolar_per_millisecond; Initial value: 0.000108240945806962
            double var_chaste_interface__IP3__u = rY[45];
            // Units: millimolar_per_millisecond; Initial value: 0.466236137183558
            


            const double var_x0 = 1 / (mParameters[4] * mParameters[14]);
            const double var_x1 = var_x0 * mParameters[3];
            const double var_x2 = var_x1 * var_chaste_interface__membrane__v;
            const double var_x369 = exp(9.9999999999999995e-8);
            const double var_x371 = 1 / (-1.0 + var_x369);
            const double var_x374 = exp(-9.9999999999999995e-8);
            const double var_x375 = 1 / (-1.0 + var_x374);
            const double var_x380 = fabs(var_chaste_interface__membrane__v);
            const double var_x381 = 1 / mParameters[3];
            const double var_x382 = var_x381 * mParameters[4] * mParameters[14];
            const double var_x383 = fabs(var_x382);
            const double var_x390 = var_x0 * pow(mParameters[3], 2);
            const double var_x399 = 1.0 - var_chaste_interface__ICaL__nca;
            const double var_x400 = 0.40000000000000002 * var_chaste_interface__ICaL__fs;
            const double var_x401 = 0.59999999999999998 * var_chaste_interface__ICaL__ff;
            const double var_x402 = 0.10000000000000001 * var_chaste_interface__membrane__v;
            const double var_x403 = exp(-1.0 + var_x402);
            const double var_x404 = 1.0 + var_x403;
            const double var_x405 = 0.59999999999999998 / var_x404;
            const double var_x406 = 0.29999999999999999 + var_x405;
            const double var_x407 = 0.69999999999999996 - var_x405;
            const double var_x408 = var_x407 * var_chaste_interface__ICaL__fcas;
            const double var_x409 = var_x408 + var_x406 * var_chaste_interface__ICaL__fcaf;
            const double var_x410 = var_x409 * var_chaste_interface__ICaL__jca;
            const double var_x411 = var_x399 * (var_x400 + var_x401) + var_x410 * var_chaste_interface__ICaL__nca;
            const double var_x413 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x414 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x415 = 1.0 + 0.0015 * var_x414;
            const double var_x416 = 1 / var_x415;
            const double var_x417 = 0.050000000000000003 * var_x416;
            const double var_x418 = var_x413 * var_x417 + var_chaste_interface__CaMK__CaMKt;
            const double var_x419 = 1.0 + 0.14999999999999999 / var_x418;
            const double var_x420 = 1 / var_x419;
            const double var_x427 = 0.59999999999999998 * var_chaste_interface__ICaL__ffp;
            const double var_x428 = var_x408 + var_x406 * var_chaste_interface__ICaL__fcafp;
            const double var_x429 = var_x428 * var_chaste_interface__ICaL__jca;
            const double var_x430 = var_x399 * (var_x400 + var_x427) + var_x429 * var_chaste_interface__ICaL__nca;
            const double var_x431 = var_x420 * var_x430;
            const double var_x458 = -0.34100000000000003 * mParameters[0];
            const double var_x463 = 10000000.0 * var_x1;
            const double var_x465 = 4.9999999999999998e-8 * var_x383;
            const double var_x466 = var_x380 < var_x465;
            const double var_x467 = exp(2.0 * var_x2);
            const double var_x470 = -1.0 + var_x467;
            const double var_x471 = 1 / var_x470;
            const double var_x472 = var_x390 * var_x471;
            const double var_x499 = 1.9999999999999999e-7 * mParameters[3];
            const double var_x500 = var_x371 * var_x499;
            const double var_x501 = var_x375 * var_x499;
            const double var_x502 = var_x501 * (var_x458 + var_x374 * var_chaste_interface__intracellular_ions__cass);
            const double var_x503 = var_x463 * (var_x502 + var_x500 * (var_x458 + var_x369 * var_chaste_interface__intracellular_ions__cass));
            const double var_x504 = var_x467 * var_chaste_interface__intracellular_ions__cass;
            const double var_x505 = var_x458 + var_x504;
            const double var_x506 = 4.0 * var_x472;
            const double var_x507 = var_x505 * var_x506;
            const double var_x509 = var_x420;
            const double var_x513 = 1.1000000000000001 * var_x431;
            const double var_x514 = mParameters[5] * var_chaste_interface__ICaL__d;
            const double var_x517 = 4.9999999999999998e-8 * var_x382 + var_chaste_interface__membrane__v;
            const double var_x518 = -var_x502 + var_x503 * var_x517;
            const double var_x519 = var_x507 * var_chaste_interface__membrane__v;
            const double var_x540 = 1.0 - var_x509;
            const double var_x977 = 63.240418118466899 * var_x381;
            const double var_x980 = -var_chaste_interface__intracellular_ions__cass + var_chaste_interface__intracellular_ions__cajsr;
            const double var_x981 = 1 / (1.0 + 9090.9090909090901 * var_chaste_interface__intracellular_ions__cass);
            const double var_x982 = 1.0 - var_chaste_interface__IP3__u;
            const double var_x983 = var_x981 * var_x982;
            const double var_x984 = 0.00020202000000000002 * var_x983;
            const double var_x985 = var_x980 * var_x984;
            const double var_x990 = var_x411 * var_x540;
            const double var_x994 = 5.0 * var_chaste_interface__intracellular_ions__casl + 0.10000000000000001 * var_chaste_interface__ryr__Jrel1 - 5.0 * var_chaste_interface__intracellular_ions__cass + var_x985 * var_chaste_interface__intracellular_ions__cass;
            const double var_x1179 = 1.0 + 1 / pow(var_chaste_interface__intracellular_ions__cajsr, 8);
            const double var_x1180 = 1 / var_x1179;
            const double var_x1181 = 1.0 + 0.0123 / var_chaste_interface__intracellular_ions__cajsr;
            const double var_x1185 = var_x514 * var_x977;
            const double var_x1186 = (((var_x380 >= var_x465) || (var_x994 - var_x1185 * var_x518 * (var_x513 + var_x990) > 0))) && (((var_x466) || (var_x994 - var_x1185 * (var_x519 * var_x990 + 4.4000000000000004 * var_x431 * var_x472 * var_x505 * var_chaste_interface__membrane__v) > 0)));
            const double var_x1187 = 1.0 + 3.7780199833600026e-5 / pow(var_x418, 8);
            const double var_x1188 = 1.0 + 1 / var_x1187;
            const double var_x1189 = var_x1180 * var_x1188;
            const double var_x1194 = 1 / var_x1188;
            const double var_x1195 = 0.5 * var_x1181 * var_x1194;
            
            partialF = ((var_x1186) ? (var_x1195 * (-1 + 1.5 * var_x1189)) : (-var_x1195));
        }
        else
        {
            const double y_save = rY[43];
            rY[43] += delta;
            const double temp = EvaluateYDerivative43(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[43])/delta;
            rY[43] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative44(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 4.36004404734282e-05
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.00505983330678751
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__intracellular_ions__casl = rY[10];
        // Units: millimolar; Initial value: 0.000102004317781147
        double var_chaste_interface__intracellular_ions__cansr = rY[11];
        // Units: millimolar; Initial value: 1.26350902016858
        double var_chaste_interface__intracellular_ions__cacsr = rY[13];
        // Units: millimolar; Initial value: 1.26516959198518
        double var_chaste_interface__ryr__Jrel2 = rY[44];
        // Units: millimolar_per_millisecond; Initial value: 1.25045800437317e-69
        


        // Mathematics
        const double var_diff__Jgap = 0.083333333333333329 * var_chaste_interface__intracellular_ions__casl - 0.083333333333333329 * var_chaste_interface__intracellular_ions__cai; // millimolar_per_millisecond
        const double var_CaMK__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_SERCA__dkmplb = 0.00017000000000000001 * var_CaMK__CaMKa / (0.14999999999999999 + var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__dqupcamk = 0.75 * var_CaMK__CaMKa / (0.14999999999999999 + var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__Jup2 = -0.00027999999999999998 * var_chaste_interface__intracellular_ions__cansr + 0.0025999999999999999 * (1.0 + var_SERCA__dqupcamk) / (1.0 + (0.00027999999999999998 - var_SERCA__dkmplb) / var_chaste_interface__intracellular_ions__cai); // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_ryr__Jrel2 = 0.16666666666666666 * (1.0 + 0.0123 / var_chaste_interface__intracellular_ions__cacsr) * (-var_chaste_interface__ryr__Jrel2 + ((0.013333333333333334 * var_chaste_interface__ryr__Jrel2 + 0.25 * var_diff__Jgap - 0.066666666666666666 * var_SERCA__Jup2 > 0) ? (91.0 * (1.0 + 1 / (1.0 + 3.7780199833600026e-5 / pow(var_CaMK__CaMKa, 8))) * (0.013333333333333334 * var_chaste_interface__ryr__Jrel2 + 0.25 * var_diff__Jgap - 0.066666666666666666 * var_SERCA__Jup2) / (1.0 + 1 / pow(var_chaste_interface__intracellular_ions__cacsr, 8))) : (0))) / (1.0 + 1 / (1.0 + 3.7780199833600026e-5 / pow(var_CaMK__CaMKa, 8))); // millimolar_per_millisecond / millisecond

        return d_dt_chaste_interface_var_ryr__Jrel2;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative44(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__intracellular_ions__cai = rY[1];
            // Units: millimolar; Initial value: 4.36004404734282e-05
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.00505983330678751
            double var_chaste_interface__intracellular_ions__cass = rY[9];
            // Units: millimolar; Initial value: 0.000101777993438818
            double var_chaste_interface__intracellular_ions__casl = rY[10];
            // Units: millimolar; Initial value: 0.000102004317781147
            double var_chaste_interface__intracellular_ions__cansr = rY[11];
            // Units: millimolar; Initial value: 1.26350902016858
            double var_chaste_interface__intracellular_ions__cacsr = rY[13];
            // Units: millimolar; Initial value: 1.26516959198518
            double var_chaste_interface__ryr__Jrel2 = rY[44];
            // Units: millimolar_per_millisecond; Initial value: 1.25045800437317e-69
            


            const double var_x413 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x414 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x415 = 1.0 + 0.0015 * var_x414;
            const double var_x416 = 1 / var_x415;
            const double var_x417 = 0.050000000000000003 * var_x416;
            const double var_x418 = var_x413 * var_x417 + var_chaste_interface__CaMK__CaMKt;
            const double var_x901 = 1 / var_chaste_interface__intracellular_ions__cai;
            const double var_x902 = 0.14999999999999999 + var_x418;
            const double var_x903 = 1 / var_x902;
            const double var_x904 = var_x418 * var_x903;
            const double var_x905 = 0.00027999999999999998 - 0.00017000000000000001 * var_x904;
            const double var_x906 = 1.0 + var_x901 * var_x905;
            const double var_x909 = 1.0 + 0.75 * var_x904;
            const double var_x918 = 1.8666666666666665e-5 * var_chaste_interface__intracellular_ions__cansr;
            const double var_x919 = 1 / var_x906;
            const double var_x920 = 0.00017333333333333334 * var_x919;
            const double var_x921 = var_x918 + 0.020833333333333332 * var_chaste_interface__intracellular_ions__casl + 0.013333333333333334 * var_chaste_interface__ryr__Jrel2 - 0.020833333333333332 * var_chaste_interface__intracellular_ions__cai - var_x909 * var_x920;
            const double var_x1187 = 1.0 + 3.7780199833600026e-5 / pow(var_x418, 8);
            const double var_x1188 = 1.0 + 1 / var_x1187;
            const double var_x1194 = 1 / var_x1188;
            const double var_x1209 = 1.0 + 1 / pow(var_chaste_interface__intracellular_ions__cacsr, 8);
            const double var_x1210 = 1 / var_x1209;
            const double var_x1211 = 1.0 + 0.0123 / var_chaste_interface__intracellular_ions__cacsr;
            const double var_x1213 = var_x921 > 0;
            const double var_x1214 = var_x1188 * var_x1210;
            const double var_x1217 = 0.16666666666666666 * var_x1194 * var_x1211;
            
            partialF = ((var_x1213) ? (var_x1217 * (-1 + 1.2133333333333334 * var_x1214)) : (-var_x1217));
        }
        else
        {
            const double y_save = rY[44];
            rY[44] += delta;
            const double temp = EvaluateYDerivative44(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[44])/delta;
            rY[44] = y_save;
        }
        return partialF;
    }
    double CellTrovato2020FromCellMLGRL1Opt::EvaluateYDerivative45(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__IP3__u = rY[45];
        // Units: millimolar_per_millisecond; Initial value: 0.466236137183558
        


        // Mathematics
        const double d_dt_chaste_interface_var_IP3__u = -0.20999999999999999 * var_chaste_interface__IP3__u + 1800.0 * (1.0 - var_chaste_interface__IP3__u) * var_chaste_interface__intracellular_ions__cass; // millimolar_per_millisecond / millisecond

        return d_dt_chaste_interface_var_IP3__u;
    }

    double CellTrovato2020FromCellMLGRL1Opt::EvaluatePartialDerivative45(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__intracellular_ions__cass = rY[9];
            // Units: millimolar; Initial value: 0.000101777993438818
            


            
            partialF = -0.20999999999999999 - 1800.0 * var_chaste_interface__intracellular_ions__cass;
        }
        else
        {
            const double y_save = rY[45];
            rY[45] += delta;
            const double temp = EvaluateYDerivative45(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[45])/delta;
            rY[45] = y_save;
        }
        return partialF;
    }

    std::vector<double> CellTrovato2020FromCellMLGRL1Opt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.6814002878592
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.00505983330678751
        double var_chaste_interface__intracellular_ions__nasl = rY[4];
        // Units: millimolar; Initial value: 8.23153516580562
        double var_chaste_interface__intracellular_ions__ksl = rY[8];
        // Units: millimolar; Initial value: 143.767769906216
        double var_chaste_interface__intracellular_ions__cass = rY[9];
        // Units: millimolar; Initial value: 0.000101777993438818
        double var_chaste_interface__intracellular_ions__casl = rY[10];
        // Units: millimolar; Initial value: 0.000102004317781147
        double var_chaste_interface__INa__m = rY[14];
        // Units: dimensionless; Initial value: 0.00632661703915808
        double var_chaste_interface__INa__hf = rY[15];
        // Units: dimensionless; Initial value: 0.788611739889677
        double var_chaste_interface__INa__hs = rY[16];
        // Units: dimensionless; Initial value: 0.788545979951331
        double var_chaste_interface__INa__j = rY[17];
        // Units: dimensionless; Initial value: 0.790474358603666
        double var_chaste_interface__INa__hsp = rY[18];
        // Units: dimensionless; Initial value: 0.579693514309867
        double var_chaste_interface__INa__jp = rY[19];
        // Units: dimensionless; Initial value: 0.790947058236417
        double var_chaste_interface__INaL__mL = rY[20];
        // Units: dimensionless; Initial value: 0.000241925773627233
        double var_chaste_interface__INaL__hL = rY[21];
        // Units: dimensionless; Initial value: 0.463574582508218
        double var_chaste_interface__INaL__hLp = rY[22];
        // Units: dimensionless; Initial value: 0.240216198686475
        double var_chaste_interface__Ito__a = rY[23];
        // Units: dimensionless; Initial value: 0.000272851144435704
        double var_chaste_interface__Ito__i1 = rY[24];
        // Units: dimensionless; Initial value: 0.649604795721571
        double var_chaste_interface__Ito__i2 = rY[25];
        // Units: dimensionless; Initial value: 0.989965695822495
        double var_chaste_interface__IKr__xrf = rY[37];
        // Units: dimensionless; Initial value: 0.000331691184084272
        double var_chaste_interface__IKr__xrs = rY[38];
        // Units: dimensionless; Initial value: 0.568716473334161
        double var_chaste_interface__IKs__xs1 = rY[39];
        // Units: dimensionless; Initial value: 0.191165248085394
        double var_chaste_interface__IKs__xs2 = rY[40];
        // Units: dimensionless; Initial value: 0.000222677365291219
        double var_chaste_interface__If__y = rY[41];
        // Units: dimensionless; Initial value: 0.233119011214908
        double var_chaste_interface__IK1__xk1 = rY[42];
        // Units: dimensionless; Initial value: 0.997084813729909
        
        // Lookup table indexing
        const bool _oob_0 = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = CellTrovato2020FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_INa__Ahf = 0.98999999999999999; // dimensionless
        const double var_INa__Ahs = 1.0 - var_INa__Ahf; // dimensionless
        const double var_INa__h = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hs; // dimensionless
        const double var_INa__hp = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hsp; // dimensionless
        const double var_IK1__GK1Total = 1.000004299990755 * sqrt(mParameters[1]) * mParameters[9]; // milliS_per_microF
        const double var_IKr__GKr_total = 0.43033148291193518 * sqrt(mParameters[1]) * mParameters[11]; // milliS_per_microF
        const double var_IKs__KsCa = 1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__casl), 1.3999999999999999)); // dimensionless
        const double var_IKs__GKsTotal = mParameters[12] * var_IKs__KsCa; // milliS_per_microF
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_INa__fINap = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaL__fINaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_membrane__Istim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_IK1__rk1 = 1 / (1.0 + exp(10.545454545454545 + 0.090909090909090912 * var_chaste_interface__membrane__v - 0.5 * mParameters[1])); // millisecond
        const double var_IKr__Axrf = _lt_0_row[1]; // dimensionless
        const double var_IKr__Axrs = 1.0 - var_IKr__Axrf; // dimensionless
        const double var_IKr__rkr = 1 / ((_lt_0_row[2]) * (_lt_0_row[3])); // dimensionless
        const double var_IKr__xr = var_IKr__Axrf * var_chaste_interface__IKr__xrf + var_IKr__Axrs * var_chaste_interface__IKr__xrs; // dimensionless
        const double var_reversal_potentials__ECa = 0.5 * mParameters[4] * mParameters[14] * log(mParameters[0] / var_chaste_interface__intracellular_ions__casl) / mParameters[3]; // millivolt
        const double var_reversal_potentials__EK = mParameters[4] * mParameters[14] * log(mParameters[1] / var_chaste_interface__intracellular_ions__ksl) / mParameters[3]; // millivolt
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IK1__GK1Total * var_IK1__rk1 * var_chaste_interface__IK1__xk1; // microA_per_microF
        const double var_IK1__IK1_converted = HeartConfig::Instance()->GetCapacitance() * var_IK1__IK1; // uA_per_cm2
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKr__GKr_total * var_IKr__rkr * var_IKr__xr; // microA_per_microF
        const double var_IKr__IKr_converted = HeartConfig::Instance()->GetCapacitance() * var_IKr__IKr; // uA_per_cm2
        const double var_If__IfK = pow(var_chaste_interface__If__y, 2) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * mParameters[7]; // microA_per_microF
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * mParameters[13] * var_chaste_interface__Ito__a * var_chaste_interface__Ito__i1 * var_chaste_interface__Ito__i2; // microA_per_microF
        const double var_Ito__Ito_converted = HeartConfig::Instance()->GetCapacitance() * var_Ito__Ito; // uA_per_cm2
        const double var_reversal_potentials__ENa = mParameters[4] * mParameters[14] * log(mParameters[2] / var_chaste_interface__intracellular_ions__nasl) / mParameters[3]; // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INa__fINap) * var_INa__h * var_chaste_interface__INa__j + var_INa__fINap * var_INa__hp * var_chaste_interface__INa__jp) * mParameters[6]; // microA_per_microF
        const double var_INa__INa_converted = HeartConfig::Instance()->GetCapacitance() * var_INa__INa; // uA_per_cm2
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INaL__fINaLp) * var_chaste_interface__INaL__hL + var_INaL__fINaLp * var_chaste_interface__INaL__hLp) * mParameters[10] * var_chaste_interface__INaL__mL; // microA_per_microF
        const double var_INaL__INaL_converted = HeartConfig::Instance()->GetCapacitance() * var_INaL__INaL; // uA_per_cm2
        const double var_If__IfNa = pow(var_chaste_interface__If__y, 2) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * mParameters[8]; // microA_per_microF
        const double var_If__If = var_If__IfK + var_If__IfNa; // microA_per_microF
        const double var_If__If_converted = HeartConfig::Instance()->GetCapacitance() * var_If__If; // uA_per_cm2
        const double var_reversal_potentials__PKNa = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = mParameters[4] * mParameters[14] * log((mParameters[2] * var_reversal_potentials__PKNa + mParameters[1]) / (var_chaste_interface__intracellular_ions__nasl * var_reversal_potentials__PKNa + var_chaste_interface__intracellular_ions__ksl)) / mParameters[3]; // millivolt
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__v) * var_IKs__GKsTotal * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        const double var_IKs__IKs_converted = HeartConfig::Instance()->GetCapacitance() * var_IKs__IKs; // uA_per_cm2

        std::vector<double> dqs(16);
        dqs[0] = var_reversal_potentials__ECa;
        dqs[1] = var_INa__INa_converted;
        dqs[2] = var_If__If_converted;
        dqs[3] = var_IK1__IK1_converted;
        dqs[4] = var_IK1__GK1Total;
        dqs[5] = var_INaL__INaL_converted;
        dqs[6] = var_IKr__IKr_converted;
        dqs[7] = var_IKr__GKr_total;
        dqs[8] = var_IKs__IKs_converted;
        dqs[9] = var_IKs__GKsTotal;
        dqs[10] = var_membrane__Istim_converted;
        dqs[11] = var_Ito__Ito_converted;
        dqs[12] = var_reversal_potentials__EK;
        dqs[13] = var_reversal_potentials__EKs;
        dqs[14] = var_reversal_potentials__ENa;
        dqs[15] = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<CellTrovato2020FromCellMLGRL1Opt>::Initialise(void)
{
    this->mSystemName = "Trovato2020";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-86.6814002878592);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(4.36004404734282e-05);

    // rY[2]:
    this->mVariableNames.push_back("CaMK__CaMKt");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00505983330678751);

    // rY[3]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.23183964616932);

    // rY[4]:
    this->mVariableNames.push_back("intracellular_ions__nasl");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.23153516580562);

    // rY[5]:
    this->mVariableNames.push_back("intracellular_ions__nass");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.23154325237268);

    // rY[6]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(143.767359809132);

    // rY[7]:
    this->mVariableNames.push_back("intracellular_ions__kss");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(143.767768218104);

    // rY[8]:
    this->mVariableNames.push_back("intracellular_ions__ksl");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(143.767769906216);

    // rY[9]:
    this->mVariableNames.push_back("intracellular_ions__cass");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.000101777993438818);

    // rY[10]:
    this->mVariableNames.push_back("intracellular_ions__casl");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.000102004317781147);

    // rY[11]:
    this->mVariableNames.push_back("intracellular_ions__cansr");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.26350902016858);

    // rY[12]:
    this->mVariableNames.push_back("intracellular_ions__cajsr");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.24811940209535);

    // rY[13]:
    this->mVariableNames.push_back("intracellular_ions__cacsr");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.26516959198518);

    // rY[14]:
    this->mVariableNames.push_back("INa__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00632661703915808);

    // rY[15]:
    this->mVariableNames.push_back("INa__hf");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.788611739889677);

    // rY[16]:
    this->mVariableNames.push_back("INa__hs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.788545979951331);

    // rY[17]:
    this->mVariableNames.push_back("INa__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.790474358603666);

    // rY[18]:
    this->mVariableNames.push_back("INa__hsp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.579693514309867);

    // rY[19]:
    this->mVariableNames.push_back("INa__jp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.790947058236417);

    // rY[20]:
    this->mVariableNames.push_back("INaL__mL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000241925773627233);

    // rY[21]:
    this->mVariableNames.push_back("INaL__hL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.463574582508218);

    // rY[22]:
    this->mVariableNames.push_back("INaL__hLp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.240216198686475);

    // rY[23]:
    this->mVariableNames.push_back("Ito__a");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000272851144435704);

    // rY[24]:
    this->mVariableNames.push_back("Ito__i1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.649604795721571);

    // rY[25]:
    this->mVariableNames.push_back("Ito__i2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.989965695822495);

    // rY[26]:
    this->mVariableNames.push_back("ICaL__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(6.97735089296892e-09);

    // rY[27]:
    this->mVariableNames.push_back("ICaL__ff");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999999968230738);

    // rY[28]:
    this->mVariableNames.push_back("ICaL__fs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.926692153319136);

    // rY[29]:
    this->mVariableNames.push_back("ICaL__fcaf");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99999996819573);

    // rY[30]:
    this->mVariableNames.push_back("ICaL__fcas");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999999905741936);

    // rY[31]:
    this->mVariableNames.push_back("ICaL__jca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999978907334662);

    // rY[32]:
    this->mVariableNames.push_back("ICaL__ffp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999999968365903);

    // rY[33]:
    this->mVariableNames.push_back("ICaL__fcafp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999999968278239);

    // rY[34]:
    this->mVariableNames.push_back("ICaL__nca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00547252500964926);

    // rY[35]:
    this->mVariableNames.push_back("ICaT__b");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000304250912559619);

    // rY[36]:
    this->mVariableNames.push_back("ICaT__g");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.994214357917907);

    // rY[37]:
    this->mVariableNames.push_back("IKr__xrf");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000331691184084272);

    // rY[38]:
    this->mVariableNames.push_back("IKr__xrs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.568716473334161);

    // rY[39]:
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.191165248085394);

    // rY[40]:
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000222677365291219);

    // rY[41]:
    this->mVariableNames.push_back("If__y");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.233119011214908);

    // rY[42]:
    this->mVariableNames.push_back("IK1__xk1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.997084813729909);

    // rY[43]:
    this->mVariableNames.push_back("ryr__Jrel1");
    this->mVariableUnits.push_back("millimolar_per_millisecond");
    this->mInitialConditions.push_back(0.000108240945806962);

    // rY[44]:
    this->mVariableNames.push_back("ryr__Jrel2");
    this->mVariableUnits.push_back("millimolar_per_millisecond");
    this->mInitialConditions.push_back(1.25045800437317e-69);

    // rY[45]:
    this->mVariableNames.push_back("IP3__u");
    this->mVariableUnits.push_back("millimolar_per_millisecond");
    this->mInitialConditions.push_back(0.466236137183558);

    // mParameters[0]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[1]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[2]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[3]:
    this->mParameterNames.push_back("faraday_constant");
    this->mParameterUnits.push_back("coulomb_per_mole");

    // mParameters[4]:
    this->mParameterNames.push_back("gas_constant");
    this->mParameterUnits.push_back("joule_per_kilomole_kelvin");

    // mParameters[5]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_hyperpolarisation_activated_funny_current_potassium_component_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_hyperpolarisation_activated_funny_current_sodium_component_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_persistent_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[14]:
    this->mParameterNames.push_back("temperature");
    this->mParameterUnits.push_back("kelvin");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("calcium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("millivolt");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_hyperpolarisation_activated_funny_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_persistent_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("potassium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("millivolt");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("slow_delayed_rectifier_potassium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("millivolt");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("sodium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("millivolt");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(CellTrovato2020FromCellMLGRL1Opt)

