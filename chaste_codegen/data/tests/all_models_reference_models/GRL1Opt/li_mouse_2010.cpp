//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: Li_Mouse_2010
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: GeneralizedRushLarsenFirstOrderOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "li_mouse_2010.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<39; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__cell__V)
    {
        const double _offset_0 = var_chaste_interface__cell__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__cell__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__cell__V>mTableMaxs[0] || var_chaste_interface__cell__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables(const Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables&);
    Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables& operator= (const Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables&);
    Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 39;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][39];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(-0.075369662812530269 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[0] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] >= 2){
                    EXCEPTION("Lookup table 0 at ["<<i<<"][0] has non-finite value: " << val);
                }
                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1.0 - exp(-0.075369662812530269 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[1] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] >= 2){
                    EXCEPTION("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val);
                }
                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1.0 + exp(5.9871794871794881 - 0.12820512820512822 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(0.013189690992192795 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(-0.024495140414072337 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1.0 + 0.27000000000000002 * exp(-0.024495140414072337 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(-0.037684831406265135 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 0.1245 * exp(-0.0037684831406265135 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(0.15506520491866829 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(-0.038580246913580245 * pow((-1 + 0.20000000000000001 * var_chaste_interface__cell__V), 2));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1 / (1.0 + exp(4.024390243902439 + 0.12195121951219513 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 0.10000000000000001 / (1.0 + exp(6.666666666666667 - 0.16666666666666666 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 8.0 + 315.0 / (1.0 + exp(7.5 + 0.25 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 3.802 / (0.20000000000000001 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V) + 0.1027 * exp(-0.14705882352941177 - 0.058823529411764705 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 3.802 / (0.1027 * exp(-0.16666666666666666 - 0.066666666666666666 * var_chaste_interface__cell__V) + 0.23000000000000001 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 3.802 / (0.25 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V) + 0.1027 * exp(-0.20833333333333334 - 0.083333333333333329 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1 / (0.39395599999999997 + 0.188495 * exp(-0.42168674698795178 - 0.060240963855421679 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 6.9999999999999997e-7 * exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 0.19170000000000001 * exp(-0.12315270935960591 - 0.04926108374384236 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 0.20000000000000001 * exp(0.12315270935960591 - 0.04926108374384236 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 0.22 * exp(0.36945812807881773 - 0.04926108374384236 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(1.6096500000000002 + 0.035770000000000003 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(-2.8066499999999999 - 0.062370000000000002 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1 / (1.0 + exp(10.279999999999999 + 0.20000000000000001 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 9.6645000000000003 + 10.936199999999999 / (1.0 + exp(10.279999999999999 + 0.20000000000000001 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 0.033500000000000002 * exp(0.0109 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 0.070300000000000001 * exp(0.14349999999999999 + 0.0287 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][26] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 6.8899999999999994e-5 * exp(-0.041779999999999998 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][27] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 0.0064970000000000002 * exp(-0.16339999999999999 - 0.032680000000000001 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][28] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(0.01176 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][29] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(-0.063100000000000003 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][30] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return ((fabs(26.5 + var_chaste_interface__cell__V) < 7.8124999999817923e-7) ? (3.7604140624912359e-12 / (1.0 - exp(-9.9999999999766942e-8)) - 640000.00000149151 * (26.499999218749998 + var_chaste_interface__cell__V) * (-3.7604140624912359e-12 / (1.0 - exp(9.9999999999766942e-8)) - 3.7604140624912359e-12 / (1.0 - exp(-9.9999999999766942e-8)))) : (4.8133299999999997e-6 * (26.5 + var_chaste_interface__cell__V) / (1.0 - exp(-3.3919999999999999 - 0.128 * var_chaste_interface__cell__V))));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[31] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[31] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[31] >= 2){
                    EXCEPTION("Lookup table 31 at ["<<i<<"][31] has non-finite value: " << val);
                }
                _lookup_table_0[i][31] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(-1.0069999999999999 - 0.037999999999999999 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][32] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1 / (1.0 + exp(-0.64479166666666676 - 0.10416666666666667 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][33] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 13.17 + 39.299999999999997 * exp(-0.050000000000000003 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][34] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 2.0579999999999998 + 0.49299999999999999 * exp(-0.062899999999999998 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][35] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1 / (1.0 + exp(7.7962962962962958 + 0.18518518518518517 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][36] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 270.0 + 1050.0 / (1.0 + exp(7.9298245614035094 + 0.17543859649122806 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][37] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 643.0 + 1000.0 / (1.0 + exp(7.7962962962962958 + 0.18518518518518517 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][38] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[39];

    // Lookup tables
    double (*_lookup_table_0)[39];
    int _lookup_table_0_num_misshit_piecewise[39] = {0};

};

std::shared_ptr<Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables> Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::mpInstance;


    boost::shared_ptr<RegularStimulus> Cellli_mouse_2010FromCellMLGRL1Opt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -15.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_chaste_interface__cell__stim_offset = 0; // millisecond
        const double var_chaste_interface__cell__stim_period = 333.33300000000003; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Cellli_mouse_2010FromCellMLGRL1Opt::Cellli_mouse_2010FromCellMLGRL1Opt(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractGeneralizedRushLarsenCardiacCell(
                36,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellli_mouse_2010FromCellMLGRL1Opt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 4.5; // (var_calcium_fluxes__v1) [per_millisecond]
        this->mParameters[1] = 1400.0; // (var_cell__Cao) [micromolar]
        this->mParameters[2] = 5400.0; // (var_cell__Ko) [micromolar]
        this->mParameters[3] = 134000.0; // (var_cell__Nao) [micromolar]
        this->mParameters[4] = 2.5; // (var_L_type_calcium_current__P_CaL) [per_millisecond]
        this->mParameters[5] = 1.0; // (var_cell__Cm) [microF_per_cm2]
        this->mParameters[6] = 16.0; // (var_fast_sodium_current__g_Na) [milliS_per_microF]
        this->mParameters[7] = 0.34999999999999998; // (var_time_independent_K_I__g_K1) [milliS_per_microF]
        this->mParameters[8] = 0.059499999999999997; // (var_non_inactivating_steady_state_K_I__g_Kss) [milliS_per_microF]
        this->mParameters[9] = 0.016500000000000001; // (var_rapid_delayed_rectifier_K_I__g_Kr) [milliS_per_microF]
        this->mParameters[10] = 0.0057499999999999999; // (var_slow_delayed_rectifier_K_I__g_Ks) [milliS_per_microF]
        this->mParameters[11] = 3.9390000000000001; // (var_sodium_calcium_exchange_current__V_max_NCX) [picoA_per_picoF]
    }

    Cellli_mouse_2010FromCellMLGRL1Opt::~Cellli_mouse_2010FromCellMLGRL1Opt()
    {
    }

    AbstractLookupTableCollection* Cellli_mouse_2010FromCellMLGRL1Opt::GetLookupTableCollection()
    {
        return Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance();
    }
    
    double Cellli_mouse_2010FromCellMLGRL1Opt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = rY[13];
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__potassium_concentration__Ki = rY[22];
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = rY[23];
        // Units: dimensionless; Initial value: 0.00346258606821817
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = rY[24];
        // Units: dimensionless; Initial value: 0.955684946168062
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
        // Units: dimensionless; Initial value: 0.00336735013094628
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = rY[32];
        // Units: dimensionless; Initial value: 0.0142335908879204
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = rY[33];
        // Units: dimensionless; Initial value: 0.996989882138174
        
        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_pump_current__i_pCa = 0.095500000000000002 * pow(var_calcium_concentration__Cai, 2) / (0.083232249999999994 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL_converted = HeartConfig::Instance()->GetCapacitance() * ((fabs(var_chaste_interface__cell__V) < 1.3267937823834197e-6) ? (-376848.31406265136 * (-1.3267937823834197e-6 + var_chaste_interface__cell__V) * (3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(9.9999999999999995e-8)) * mParameters[5]) + 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * mParameters[5])) - 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * mParameters[5])) : (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * _lt_0_row[0]) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((_lt_0_row[1]) * mParameters[5]))); // uA_per_cm2
        const double var_calcium_activated_chloride_current__i_ClCa = 2.0 * (40.0 + var_chaste_interface__cell__V) * var_calcium_concentration__Cai / ((_lt_0_row[2]) * (10.0 + var_calcium_concentration__Cai)); // picoA_per_picoF
        const double var_calcium_background_current__i_Cab = 0.00069999999999999999 * var_chaste_interface__cell__V - 0.0092875564766839377 * log(mParameters[1] / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_fast_transient_outward_K_I__E_K = 26.535875647668394 * log(mParameters[2] / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_K_I__i_Kto_f = 0.53469999999999995 * pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__fast_transient_outward_K_I__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss_converted = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * mParameters[8] * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // uA_per_cm2
        const double var_slow_delayed_rectifier_K_I__i_Ks_converted = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[10]; // uA_per_cm2
        const double var_slow_transient_outward_K_I__i_Kto_s = 0; // picoA_per_picoF
        const double var_fast_sodium_current__E_Na = 26.535875647668394 * log((mParameters[3] + 0.1111111111111111 * mParameters[2]) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)); // millivolt
        const double var_fast_sodium_current__i_Na_converted = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__fast_sodium_current__O_Na * mParameters[6]; // uA_per_cm2
        const double var_rapid_delayed_rectifier_K_I__i_Kr_converted = (-26.535875647668394 * log((mParameters[2] + 0.020408163265306124 * mParameters[3]) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * mParameters[9]; // uA_per_cm2
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__cell__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX_converted = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * _lt_0_row[3] - pow(mParameters[3], 3) * var_calcium_concentration__Cai * _lt_0_row[4]) * HeartConfig::Instance()->GetCapacitance() * mParameters[11] / ((_lt_0_row[5]) * (1400.0 * pow(var_chaste_interface__sodium_concentration__Nai, 3) + 681472000000000.0 * var_calcium_concentration__Cai + pow(mParameters[3], 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] + 1728000000000.0 * (1.0 + 0.27777777777777779 * var_calcium_concentration__Cai) * mParameters[1] + 3.6000000000000001 * pow(mParameters[3], 3) * (1.0 + 5.7870370370370368e-13 * pow(var_chaste_interface__sodium_concentration__Nai, 3)))); // uA_per_cm2
        const double var_sodium_potassium_pump_current__i_NaK = 2.4860000000000002 * mParameters[2] / ((1.0 + 13435672565.051065 * pow((1 / var_chaste_interface__sodium_concentration__Nai), 2.3999999999999999)) * (1500.0 + mParameters[2]) * (1.0 + _lt_0_row[7] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[3])) * _lt_0_row[6])); // picoA_per_picoF
        const double var_time_independent_K_I__i_K1_converted = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[2] * mParameters[7] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + mParameters[2])); // uA_per_cm2
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur = 0.25 * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur; // picoA_per_picoF
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_calcium_activated_chloride_current__i_ClCa + HeartConfig::Instance()->GetCapacitance() * var_calcium_background_current__i_Cab + HeartConfig::Instance()->GetCapacitance() * var_calcium_pump_current__i_pCa + HeartConfig::Instance()->GetCapacitance() * var_fast_transient_outward_K_I__i_Kto_f + HeartConfig::Instance()->GetCapacitance() * var_slow_transient_outward_K_I__i_Kto_s + HeartConfig::Instance()->GetCapacitance() * var_sodium_background_current__i_Nab + HeartConfig::Instance()->GetCapacitance() * var_sodium_potassium_pump_current__i_NaK + HeartConfig::Instance()->GetCapacitance() * var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur + var_L_type_calcium_current__i_CaL_converted + var_fast_sodium_current__i_Na_converted + var_non_inactivating_steady_state_K_I__i_Kss_converted + var_rapid_delayed_rectifier_K_I__i_Kr_converted + var_slow_delayed_rectifier_K_I__i_Ks_converted + var_sodium_calcium_exchange_current__i_NCX_converted + var_time_independent_K_I__i_K1_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellli_mouse_2010FromCellMLGRL1Opt::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        unsigned v_index = GetVoltageIndex();
        const double delta = 1e-8;

        double d_dt_chaste_interface_var_cell__V;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = rY[13];
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__potassium_concentration__Ki = rY[22];
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = rY[23];
        // Units: dimensionless; Initial value: 0.00346258606821817
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = rY[24];
        // Units: dimensionless; Initial value: 0.955684946168062
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
        // Units: dimensionless; Initial value: 0.00336735013094628
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = rY[32];
        // Units: dimensionless; Initial value: 0.0142335908879204
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = rY[33];
        // Units: dimensionless; Initial value: 0.996989882138174
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_pump_current__i_pCa = 0.095500000000000002 * pow(var_calcium_concentration__Cai, 2) / (0.083232249999999994 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL = ((fabs(var_chaste_interface__cell__V) < 1.3267937823834197e-6) ? (-376848.31406265136 * (-1.3267937823834197e-6 + var_chaste_interface__cell__V) * (3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(9.9999999999999995e-8)) * mParameters[5]) + 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * mParameters[5])) - 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * mParameters[5])) : (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * _lt_0_row[0]) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((_lt_0_row[1]) * mParameters[5]))); // picoA_per_picoF
        const double var_calcium_background_current__i_Cab = 0.00069999999999999999 * var_chaste_interface__cell__V - 0.0092875564766839377 * log(mParameters[1] / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // picoA_per_picoF
        const double var_fast_transient_outward_K_I__E_K = 26.535875647668394 * log(mParameters[2] / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_K_I__i_Kto_f = 0.53469999999999995 * pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__fast_transient_outward_K_I__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * mParameters[8] * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // picoA_per_picoF
        const double var_slow_delayed_rectifier_K_I__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[10]; // picoA_per_picoF
        const double var_slow_transient_outward_K_I__i_Kto_s = 0; // picoA_per_picoF
        const double var_fast_sodium_current__E_Na = 26.535875647668394 * log((mParameters[3] + 0.1111111111111111 * mParameters[2]) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)); // millivolt
        const double var_fast_sodium_current__i_Na = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_chaste_interface__fast_sodium_current__O_Na * mParameters[6]; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__i_Kr = (-26.535875647668394 * log((mParameters[2] + 0.020408163265306124 * mParameters[3]) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) + var_chaste_interface__cell__V) * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * mParameters[9]; // picoA_per_picoF
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__cell__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * _lt_0_row[3] - pow(mParameters[3], 3) * var_calcium_concentration__Cai * _lt_0_row[4]) * mParameters[11] / ((_lt_0_row[5]) * (1400.0 * pow(var_chaste_interface__sodium_concentration__Nai, 3) + 681472000000000.0 * var_calcium_concentration__Cai + pow(mParameters[3], 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] + 1728000000000.0 * (1.0 + 0.27777777777777779 * var_calcium_concentration__Cai) * mParameters[1] + 3.6000000000000001 * pow(mParameters[3], 3) * (1.0 + 5.7870370370370368e-13 * pow(var_chaste_interface__sodium_concentration__Nai, 3)))); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = 2.4860000000000002 * mParameters[2] / ((1.0 + 13435672565.051065 * pow((1 / var_chaste_interface__sodium_concentration__Nai), 2.3999999999999999)) * (1500.0 + mParameters[2]) * (1.0 + _lt_0_row[7] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[3])) * _lt_0_row[6])); // picoA_per_picoF
        const double var_time_independent_K_I__i_K1 = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[2] * mParameters[7] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + mParameters[2])); // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur = 0.25 * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur; // picoA_per_picoF
        d_dt_chaste_interface_var_cell__V = -var_L_type_calcium_current__i_CaL - var_calcium_background_current__i_Cab - var_calcium_pump_current__i_pCa - var_cell__i_Stim - var_fast_sodium_current__i_Na - var_fast_transient_outward_K_I__i_Kto_f - var_non_inactivating_steady_state_K_I__i_Kss - var_rapid_delayed_rectifier_K_I__i_Kr - var_slow_delayed_rectifier_K_I__i_Ks - var_slow_transient_outward_K_I__i_Kto_s - var_sodium_background_current__i_Nab - var_sodium_calcium_exchange_current__i_NCX - var_sodium_potassium_pump_current__i_NaK - var_time_independent_K_I__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur - 2.0 * (40.0 + var_chaste_interface__cell__V) * var_calcium_concentration__Cai / ((_lt_0_row[2]) * (10.0 + var_calcium_concentration__Cai)); // millivolt / millisecond

        double evalF = d_dt_chaste_interface_var_cell__V;
        mEvalF[0] = d_dt_chaste_interface_var_cell__V;
        double partialF = EvaluatePartialDerivative0(var_chaste_interface__environment__time, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] += evalF*mDt;
        }
        else
        {
            rY[v_index] += (evalF/partialF)*(exp(partialF*mDt)-1.0);
        }
    }

    void Cellli_mouse_2010FromCellMLGRL1Opt::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        const double delta = 1e-8;

        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
        // Units: micromolar; Initial value: 171.167969039613
        double var_chaste_interface__calcium_concentration__CaNSR = rY[4];
        // Units: micromolar; Initial value: 404.825013216286
        double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
        // Units: dimensionless; Initial value: 0.000280539508743811
        double var_chaste_interface__calcium_fluxes__CaMKt = rY[6];
        // Units: dimensionless; Initial value: 0.729027738385079
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[8];
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        double var_chaste_interface__ryanodine_receptors__P_C2 = rY[9];
        // Units: dimensionless; Initial value: 0.565182571165673
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__I = rY[11];
        // Units: dimensionless; Initial value: 0.427651445872853
        double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = rY[13];
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__fast_sodium_current__C_Na1 = rY[15];
        // Units: dimensionless; Initial value: 0.000420472760277688
        double var_chaste_interface__fast_sodium_current__C_Na2 = rY[16];
        // Units: dimensionless; Initial value: 0.0240114508843199
        double var_chaste_interface__fast_sodium_current__I1_Na = rY[17];
        // Units: dimensionless; Initial value: 0.000517471697712382
        double var_chaste_interface__fast_sodium_current__I2_Na = rY[18];
        // Units: dimensionless; Initial value: 2.45406116958509e-05
        double var_chaste_interface__fast_sodium_current__IF_Na = rY[19];
        // Units: dimensionless; Initial value: 0.000306123648969581
        double var_chaste_interface__fast_sodium_current__IC_Na2 = rY[20];
        // Units: dimensionless; Initial value: 0.0174528857380179
        double var_chaste_interface__fast_sodium_current__IC_Na3 = rY[21];
        // Units: dimensionless; Initial value: 0.402980726914811
        double var_chaste_interface__potassium_concentration__Ki = rY[22];
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = rY[23];
        // Units: dimensionless; Initial value: 0.00346258606821817
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = rY[24];
        // Units: dimensionless; Initial value: 0.955684946168062
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 = rY[28];
        // Units: dimensionless; Initial value: 0.0011733433957123
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 = rY[29];
        // Units: dimensionless; Initial value: 0.00105586824723736
        double var_chaste_interface__rapid_delayed_rectifier_K_I__I_K = rY[30];
        // Units: dimensionless; Initial value: 0.00140618453684944
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
        // Units: dimensionless; Initial value: 0.00336735013094628
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = rY[32];
        // Units: dimensionless; Initial value: 0.0142335908879204
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = rY[33];
        // Units: dimensionless; Initial value: 0.996989882138174
        double var_chaste_interface__slow_transient_outward_K_I__ato_s = rY[34];
        // Units: dimensionless; Initial value: 0.0443263407760382
        double var_chaste_interface__slow_transient_outward_K_I__ito_s = rY[35];
        // Units: dimensionless; Initial value: 0.887568880831388
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__iKss = 0; // 1 / millisecond
        const double var_L_type_calcium_current__C = 1.0 - var_chaste_interface__L_type_calcium_current__I - var_chaste_interface__L_type_calcium_current__O; // dimensionless
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__calcium_fluxes__CaMKt) / (1.0 + 0.69999999999999996 / var_chaste_interface__calcium_concentration__Cass); // dimensionless
        const double d_dt_chaste_interface_var_calcium_fluxes__CaMKt = -0.00020000000000000001 * var_chaste_interface__calcium_fluxes__CaMKt + 0.050000000000000003 * (var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt) * var_calcium_fluxes__CaMKb; // 1 / millisecond
        const double var_calcium_fluxes__J_tr = 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaNSR - 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaJSR; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_xfer = 0.125 * var_chaste_interface__calcium_concentration__Cass - 0.125 * var_calcium_concentration__Cai; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_serca = pow(var_calcium_concentration__Cai, 2) * (0.50590000000000002 + 1.5167893800000001 * pow((var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt), 2.5830000000000002) / (1.7590641847756086 + pow((var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt), 2.5830000000000002))) / (0.16974399999999998 + pow(var_calcium_concentration__Cai, 2)); // micromolar_per_millisecond
        const double var_calcium_pump_current__i_pCa = 0.095500000000000002 * pow(var_calcium_concentration__Cai, 2) / (0.083232249999999994 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_L_type_calcium_current__expVL = _lt_0_row[8]; // dimensionless
        const double d_dt_chaste_interface_var_L_type_calcium_current__O = -1.1986666666666668 * var_chaste_interface__L_type_calcium_current__O + 0.66666666666666663 * var_L_type_calcium_current__C * var_L_type_calcium_current__expVL / (1.0 + var_L_type_calcium_current__expVL); // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__I = -0.00034782608695652176 * (0.0625 + var_L_type_calcium_current__expVL) * var_chaste_interface__L_type_calcium_current__I / (0.0625 + 0.40000000000000002 * var_L_type_calcium_current__expVL) + 0.0028985507246376812 * (0.0625 + var_L_type_calcium_current__expVL) * var_L_type_calcium_current__C * var_chaste_interface__calcium_concentration__Cass / (1.0 + var_L_type_calcium_current__expVL); // 1 / millisecond
        const double var_L_type_calcium_current__i_CaL = ((fabs(var_chaste_interface__cell__V) < 1.3267937823834197e-6) ? (-376848.31406265136 * (-1.3267937823834197e-6 + var_chaste_interface__cell__V) * (3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(9.9999999999999995e-8)) * mParameters[5]) + 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * mParameters[5])) - 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * mParameters[5])) : (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * _lt_0_row[0]) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((_lt_0_row[1]) * mParameters[5]))); // picoA_per_picoF
        const double d_dt_chaste_interface_var_calcium_fluxes__P_RyR = -0.01 * var_chaste_interface__calcium_fluxes__P_RyR - 0.2857142857142857 * var_L_type_calcium_current__i_CaL * _lt_0_row[9]; // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__y_gate = (-var_chaste_interface__L_type_calcium_current__y_gate + _lt_0_row[10] + _lt_0_row[11]) / (_lt_0_row[12]); // 1 / millisecond
        const double var_calcium_background_current__i_Cab = 0.00069999999999999999 * var_chaste_interface__cell__V - 0.0092875564766839377 * log(mParameters[1] / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_calcium_fluxes__J_leak = ((var_chaste_interface__environment__time < 3333330000000.0005) ? (3.0000000000000001e-5 * var_chaste_interface__calcium_concentration__CaNSR - 3.0000000000000001e-5 * var_calcium_concentration__Cai) : (0.10000000000000001 * var_chaste_interface__calcium_concentration__CaNSR - 0.10000000000000001 * var_calcium_concentration__Cai)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaNSR = 95.238095238095241 * var_calcium_fluxes__J_serca - 95.238095238095241 * var_calcium_fluxes__J_leak - 0.33333333333333337 * var_calcium_fluxes__J_tr; // micromolar / millisecond
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // picoA_per_picoF
        const double var_fast_sodium_current__C_Na3 = 1.0 - var_chaste_interface__fast_sodium_current__C_Na1 - var_chaste_interface__fast_sodium_current__C_Na2 - var_chaste_interface__fast_sodium_current__I1_Na - var_chaste_interface__fast_sodium_current__I2_Na - var_chaste_interface__fast_sodium_current__IC_Na2 - var_chaste_interface__fast_sodium_current__IC_Na3 - var_chaste_interface__fast_sodium_current__IF_Na - var_chaste_interface__fast_sodium_current__O_Na; // dimensionless
        const double var_fast_sodium_current__alpha_Na11 = _lt_0_row[13]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na12 = _lt_0_row[14]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na13 = _lt_0_row[15]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na2 = _lt_0_row[16]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = _lt_0_row[17]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na4 = 0.001 * var_fast_sodium_current__alpha_Na2; // per_millisecond
        const double var_fast_sodium_current__alpha_Na5 = 1.0526315789473684e-5 * var_fast_sodium_current__alpha_Na2; // per_millisecond
        const double var_fast_sodium_current__beta_Na11 = _lt_0_row[18]; // per_millisecond
        const double var_fast_sodium_current__beta_Na12 = _lt_0_row[19]; // per_millisecond
        const double var_fast_sodium_current__beta_Na13 = _lt_0_row[20]; // per_millisecond
        const double var_fast_sodium_current__beta_Na3 = 0.008539999999999999 + 2.0000000000000002e-5 * var_chaste_interface__cell__V; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__C_Na1 = var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__alpha_Na12 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na3 + var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__beta_Na13 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__alpha_Na13 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na3; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__C_Na2 = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na12 + var_fast_sodium_current__C_Na3 * var_fast_sodium_current__alpha_Na11 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__alpha_Na12 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na11 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na3; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IC_Na2 = var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na11 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na12 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__beta_Na11; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IC_Na3 = var_fast_sodium_current__C_Na3 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__beta_Na11 - var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na11 - var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na3; // 1 / millisecond
        const double var_fast_sodium_current__beta_Na2 = var_fast_sodium_current__alpha_Na13 * var_fast_sodium_current__alpha_Na2 * var_fast_sodium_current__alpha_Na3 / (var_fast_sodium_current__beta_Na13 * var_fast_sodium_current__beta_Na3); // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__O_Na = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__alpha_Na13 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na2 - var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__alpha_Na2 - var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__beta_Na13; // 1 / millisecond
        const double var_fast_sodium_current__beta_Na4 = var_fast_sodium_current__alpha_Na3; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IF_Na = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__beta_Na4 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na12 + var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__alpha_Na2 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na4 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na2; // 1 / millisecond
        const double var_fast_sodium_current__beta_Na5 = 0.02 * var_fast_sodium_current__alpha_Na3; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__I1_Na = var_chaste_interface__fast_sodium_current__I2_Na * var_fast_sodium_current__beta_Na5 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na4 - var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__alpha_Na5 - var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__beta_Na4; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__I2_Na = var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__alpha_Na5 - var_chaste_interface__fast_sodium_current__I2_Na * var_fast_sodium_current__beta_Na5; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_transient_outward_K_I__ato_f = 0.18064 * (1.0 - var_chaste_interface__fast_transient_outward_K_I__ato_f) * _lt_0_row[21] - 0.39560000000000001 * var_chaste_interface__fast_transient_outward_K_I__ato_f * _lt_0_row[22]; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_transient_outward_K_I__ito_f = (-var_chaste_interface__fast_transient_outward_K_I__ito_f + _lt_0_row[23]) / (_lt_0_row[24]); // 1 / millisecond
        const double var_fast_transient_outward_K_I__E_K = 26.535875647668394 * log(mParameters[2] / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_K_I__i_Kto_f = 0.53469999999999995 * pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__fast_transient_outward_K_I__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * mParameters[8] * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__alpha_a1 = _lt_0_row[25]; // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__alpha_i = _lt_0_row[26]; // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_a1 = _lt_0_row[27]; // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_i = _lt_0_row[28]; // per_millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__I_K = var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__alpha_i - var_chaste_interface__rapid_delayed_rectifier_K_I__I_K * var_rapid_delayed_rectifier_K_I__beta_i; // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__O_K = var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 * var_rapid_delayed_rectifier_K_I__alpha_a1 + var_chaste_interface__rapid_delayed_rectifier_K_I__I_K * var_rapid_delayed_rectifier_K_I__beta_i - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__alpha_i - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__beta_a1; // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K1 = 0.036777999999999998 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 - 0.023761000000000001 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 + 0.022348 * (1.0 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 - var_chaste_interface__rapid_delayed_rectifier_K_I__I_K - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K) * _lt_0_row[29] - 0.047002000000000002 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 * _lt_0_row[30]; // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K2 = 0.023761000000000001 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 - 0.036777999999999998 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 + var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__beta_a1 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 * var_rapid_delayed_rectifier_K_I__alpha_a1; // 1 / millisecond
        const double var_calcium_fluxes__J_rel = ((var_chaste_interface__environment__time < 3333330000000.0005) ? ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * (var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2) * var_chaste_interface__calcium_fluxes__P_RyR * mParameters[0]) : (10.0 * var_chaste_interface__calcium_concentration__CaJSR - 10.0 * var_chaste_interface__calcium_concentration__Cass)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaJSR = (-var_calcium_fluxes__J_rel + var_calcium_fluxes__J_tr) / (1.0 + 79.365079365079367 / pow((1 + 0.0015873015873015873 * var_chaste_interface__calcium_concentration__CaJSR), 2)); // micromolar / millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__Cass = (3.5000000000000004 * var_calcium_fluxes__J_rel - 1000.0 * var_calcium_fluxes__J_xfer - 32.656617993405561 * var_L_type_calcium_current__i_CaL * mParameters[5]) / (1.0 + 65.399999999999991 / pow((0.59999999999999998 + var_chaste_interface__calcium_concentration__Cass), 2)); // micromolar / millisecond
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_C2 = 0.0089999999999999993 * var_chaste_interface__ryanodine_receptors__P_O1 - 0.00080000000000000004 * var_chaste_interface__ryanodine_receptors__P_C2; // 1 / millisecond
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O2 = -0.96499999999999997 * var_chaste_interface__ryanodine_receptors__P_O2 + 0.0040499999999999998 * pow(var_chaste_interface__calcium_concentration__Cass, 3.0) * var_chaste_interface__ryanodine_receptors__P_O1; // 1 / millisecond
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O1 = 0.00080000000000000004 * var_chaste_interface__ryanodine_receptors__P_C2 + 0.96499999999999997 * var_chaste_interface__ryanodine_receptors__P_O2 - 0.080249999999999988 * var_chaste_interface__ryanodine_receptors__P_O1 + 0.0060749999999999997 * pow(var_chaste_interface__calcium_concentration__Cass, 4.0) * (1.0 - var_chaste_interface__ryanodine_receptors__P_C2 - var_chaste_interface__ryanodine_receptors__P_O1 - var_chaste_interface__ryanodine_receptors__P_O2) - 0.0040499999999999998 * pow(var_chaste_interface__calcium_concentration__Cass, 3.0) * var_chaste_interface__ryanodine_receptors__P_O1; // 1 / millisecond
        const double d_dt_chaste_interface_var_slow_delayed_rectifier_K_I__nKs = (1.0 - var_chaste_interface__slow_delayed_rectifier_K_I__nKs) * _lt_0_row[31] - 9.5333299999999997e-5 * var_chaste_interface__slow_delayed_rectifier_K_I__nKs * _lt_0_row[32]; // 1 / millisecond
        const double var_slow_delayed_rectifier_K_I__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[10]; // picoA_per_picoF
        const double var_slow_transient_outward_K_I__i_Kto_s = 0; // picoA_per_picoF
        const double var_fast_sodium_current__E_Na = 26.535875647668394 * log((mParameters[3] + 0.1111111111111111 * mParameters[2]) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)); // millivolt
        const double var_fast_sodium_current__i_Na = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_chaste_interface__fast_sodium_current__O_Na * mParameters[6]; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__i_Kr = (-26.535875647668394 * log((mParameters[2] + 0.020408163265306124 * mParameters[3]) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) + var_chaste_interface__cell__V) * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * mParameters[9]; // picoA_per_picoF
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__cell__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * _lt_0_row[3] - pow(mParameters[3], 3) * var_calcium_concentration__Cai * _lt_0_row[4]) * mParameters[11] / ((_lt_0_row[5]) * (1400.0 * pow(var_chaste_interface__sodium_concentration__Nai, 3) + 681472000000000.0 * var_calcium_concentration__Cai + pow(mParameters[3], 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] + 1728000000000.0 * (1.0 + 0.27777777777777779 * var_calcium_concentration__Cai) * mParameters[1] + 3.6000000000000001 * pow(mParameters[3], 3) * (1.0 + 5.7870370370370368e-13 * pow(var_chaste_interface__sodium_concentration__Nai, 3)))); // picoA_per_picoF
        const double d_dt_chaste_interface_var_calcium_concentration__Cai_converted = 0.001 * (-var_calcium_fluxes__J_serca - 0.032656617993405558 * (-2.0 * var_sodium_calcium_exchange_current__i_NCX + var_calcium_background_current__i_Cab + var_calcium_pump_current__i_pCa) * mParameters[5] + var_calcium_fluxes__J_leak + var_calcium_fluxes__J_xfer) / (1.0 + 65.399999999999991 / pow((0.59999999999999998 + var_calcium_concentration__Cai), 2)); // millimolar / millisecond
        const double var_sodium_potassium_pump_current__i_NaK = 2.4860000000000002 * mParameters[2] / ((1.0 + 13435672565.051065 * pow((1 / var_chaste_interface__sodium_concentration__Nai), 2.3999999999999999)) * (1500.0 + mParameters[2]) * (1.0 + _lt_0_row[7] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[3])) * _lt_0_row[6])); // picoA_per_picoF
        const double d_dt_chaste_interface_var_sodium_concentration__Nai = 0.065313235986811116 * (-var_fast_sodium_current__i_Na - var_sodium_background_current__i_Nab - 3.0 * var_sodium_calcium_exchange_current__i_NCX - 3.0 * var_sodium_potassium_pump_current__i_NaK) * mParameters[5]; // micromolar / millisecond
        const double var_time_independent_K_I__i_K1 = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[2] * mParameters[7] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + mParameters[2])); // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__ass = _lt_0_row[33]; // dimensionless
        const double d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__aKss = (-var_chaste_interface__non_inactivating_steady_state_K_I__aKss + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / (_lt_0_row[34]); // 1 / millisecond
        const double d_dt_chaste_interface_var_slow_transient_outward_K_I__ato_s = (-var_chaste_interface__slow_transient_outward_K_I__ato_s + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / (_lt_0_row[35]); // 1 / millisecond
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__iss = _lt_0_row[36]; // dimensionless
        const double d_dt_chaste_interface_var_slow_transient_outward_K_I__ito_s = (-var_chaste_interface__slow_transient_outward_K_I__ito_s + var_ultra_rapidly_activating_delayed_rectifier_K_I__iss) / (_lt_0_row[37]); // 1 / millisecond
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur = 0.25 * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur; // picoA_per_picoF
        const double d_dt_chaste_interface_var_potassium_concentration__Ki = 0.065313235986811116 * (-var_cell__i_Stim - var_fast_transient_outward_K_I__i_Kto_f - var_non_inactivating_steady_state_K_I__i_Kss - var_rapid_delayed_rectifier_K_I__i_Kr - var_slow_delayed_rectifier_K_I__i_Ks - var_slow_transient_outward_K_I__i_Kto_s - var_time_independent_K_I__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur + 2.0 * var_sodium_potassium_pump_current__i_NaK) * mParameters[5]; // micromolar / millisecond
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__aur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / (_lt_0_row[35]); // 1 / millisecond
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__iur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur + var_ultra_rapidly_activating_delayed_rectifier_K_I__iss) / (_lt_0_row[38]); // 1 / millisecond
        
        mEvalF[1] = d_dt_chaste_interface_var_calcium_concentration__Cai_converted;
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__environment__time, rY, delta);
        mEvalF[2] = d_dt_chaste_interface_var_calcium_concentration__Cass;
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__environment__time, rY, delta);
        mEvalF[3] = d_dt_chaste_interface_var_calcium_concentration__CaJSR;
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__environment__time, rY, delta);
        mEvalF[4] = d_dt_chaste_interface_var_calcium_concentration__CaNSR;
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__environment__time, rY, delta);
        mEvalF[5] = d_dt_chaste_interface_var_calcium_fluxes__P_RyR;
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__environment__time, rY, delta);
        mEvalF[6] = d_dt_chaste_interface_var_calcium_fluxes__CaMKt;
        mPartialF[6] = EvaluatePartialDerivative6(var_chaste_interface__environment__time, rY, delta);
        mEvalF[7] = d_dt_chaste_interface_var_ryanodine_receptors__P_O1;
        mPartialF[7] = EvaluatePartialDerivative7(var_chaste_interface__environment__time, rY, delta);
        mEvalF[8] = d_dt_chaste_interface_var_ryanodine_receptors__P_O2;
        mPartialF[8] = EvaluatePartialDerivative8(var_chaste_interface__environment__time, rY, delta);
        mEvalF[9] = d_dt_chaste_interface_var_ryanodine_receptors__P_C2;
        mPartialF[9] = EvaluatePartialDerivative9(var_chaste_interface__environment__time, rY, delta);
        mEvalF[10] = d_dt_chaste_interface_var_L_type_calcium_current__O;
        mPartialF[10] = EvaluatePartialDerivative10(var_chaste_interface__environment__time, rY, delta);
        mEvalF[11] = d_dt_chaste_interface_var_L_type_calcium_current__I;
        mPartialF[11] = EvaluatePartialDerivative11(var_chaste_interface__environment__time, rY, delta);
        mEvalF[12] = d_dt_chaste_interface_var_L_type_calcium_current__y_gate;
        mPartialF[12] = EvaluatePartialDerivative12(var_chaste_interface__environment__time, rY, delta);
        mEvalF[13] = d_dt_chaste_interface_var_sodium_concentration__Nai;
        mPartialF[13] = EvaluatePartialDerivative13(var_chaste_interface__environment__time, rY, delta);
        mEvalF[14] = d_dt_chaste_interface_var_fast_sodium_current__O_Na;
        mPartialF[14] = EvaluatePartialDerivative14(var_chaste_interface__environment__time, rY, delta);
        mEvalF[15] = d_dt_chaste_interface_var_fast_sodium_current__C_Na1;
        mPartialF[15] = EvaluatePartialDerivative15(var_chaste_interface__environment__time, rY, delta);
        mEvalF[16] = d_dt_chaste_interface_var_fast_sodium_current__C_Na2;
        mPartialF[16] = EvaluatePartialDerivative16(var_chaste_interface__environment__time, rY, delta);
        mEvalF[17] = d_dt_chaste_interface_var_fast_sodium_current__I1_Na;
        mPartialF[17] = EvaluatePartialDerivative17(var_chaste_interface__environment__time, rY, delta);
        mEvalF[18] = d_dt_chaste_interface_var_fast_sodium_current__I2_Na;
        mPartialF[18] = EvaluatePartialDerivative18(var_chaste_interface__environment__time, rY, delta);
        mEvalF[19] = d_dt_chaste_interface_var_fast_sodium_current__IF_Na;
        mPartialF[19] = EvaluatePartialDerivative19(var_chaste_interface__environment__time, rY, delta);
        mEvalF[20] = d_dt_chaste_interface_var_fast_sodium_current__IC_Na2;
        mPartialF[20] = EvaluatePartialDerivative20(var_chaste_interface__environment__time, rY, delta);
        mEvalF[21] = d_dt_chaste_interface_var_fast_sodium_current__IC_Na3;
        mPartialF[21] = EvaluatePartialDerivative21(var_chaste_interface__environment__time, rY, delta);
        mEvalF[22] = d_dt_chaste_interface_var_potassium_concentration__Ki;
        mPartialF[22] = EvaluatePartialDerivative22(var_chaste_interface__environment__time, rY, delta);
        mEvalF[23] = d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__aur;
        mPartialF[23] = EvaluatePartialDerivative23(var_chaste_interface__environment__time, rY, delta);
        mEvalF[24] = d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__iur;
        mPartialF[24] = EvaluatePartialDerivative24(var_chaste_interface__environment__time, rY, delta);
        mEvalF[25] = d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__aKss;
        mPartialF[25] = EvaluatePartialDerivative25(var_chaste_interface__environment__time, rY, delta);
        mEvalF[26] = d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__iKss;
        mPartialF[26] = EvaluatePartialDerivative26(var_chaste_interface__environment__time, rY, delta);
        mEvalF[27] = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__O_K;
        mPartialF[27] = EvaluatePartialDerivative27(var_chaste_interface__environment__time, rY, delta);
        mEvalF[28] = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K1;
        mPartialF[28] = EvaluatePartialDerivative28(var_chaste_interface__environment__time, rY, delta);
        mEvalF[29] = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K2;
        mPartialF[29] = EvaluatePartialDerivative29(var_chaste_interface__environment__time, rY, delta);
        mEvalF[30] = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__I_K;
        mPartialF[30] = EvaluatePartialDerivative30(var_chaste_interface__environment__time, rY, delta);
        mEvalF[31] = d_dt_chaste_interface_var_slow_delayed_rectifier_K_I__nKs;
        mPartialF[31] = EvaluatePartialDerivative31(var_chaste_interface__environment__time, rY, delta);
        mEvalF[32] = d_dt_chaste_interface_var_fast_transient_outward_K_I__ato_f;
        mPartialF[32] = EvaluatePartialDerivative32(var_chaste_interface__environment__time, rY, delta);
        mEvalF[33] = d_dt_chaste_interface_var_fast_transient_outward_K_I__ito_f;
        mPartialF[33] = EvaluatePartialDerivative33(var_chaste_interface__environment__time, rY, delta);
        mEvalF[34] = d_dt_chaste_interface_var_slow_transient_outward_K_I__ato_s;
        mPartialF[34] = EvaluatePartialDerivative34(var_chaste_interface__environment__time, rY, delta);
        mEvalF[35] = d_dt_chaste_interface_var_slow_transient_outward_K_I__ito_s;
        mPartialF[35] = EvaluatePartialDerivative35(var_chaste_interface__environment__time, rY, delta);
        
        {
            if (fabs(mPartialF[1]) < delta){
                rY[1] += mDt*d_dt_chaste_interface_var_calcium_concentration__Cai_converted;
            }
            else
            {
                rY[1] += (d_dt_chaste_interface_var_calcium_concentration__Cai_converted/mPartialF[1])*(exp(mPartialF[1]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[2]) < delta){
                rY[2] += mDt*d_dt_chaste_interface_var_calcium_concentration__Cass;
            }
            else
            {
                rY[2] += (d_dt_chaste_interface_var_calcium_concentration__Cass/mPartialF[2])*(exp(mPartialF[2]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[3]) < delta){
                rY[3] += mDt*d_dt_chaste_interface_var_calcium_concentration__CaJSR;
            }
            else
            {
                rY[3] += (d_dt_chaste_interface_var_calcium_concentration__CaJSR/mPartialF[3])*(exp(mPartialF[3]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[4]) < delta){
                rY[4] += mDt*d_dt_chaste_interface_var_calcium_concentration__CaNSR;
            }
            else
            {
                rY[4] += (d_dt_chaste_interface_var_calcium_concentration__CaNSR/mPartialF[4])*(exp(mPartialF[4]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[5]) < delta){
                rY[5] += mDt*d_dt_chaste_interface_var_calcium_fluxes__P_RyR;
            }
            else
            {
                rY[5] += (d_dt_chaste_interface_var_calcium_fluxes__P_RyR/mPartialF[5])*(exp(mPartialF[5]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[6]) < delta){
                rY[6] += mDt*d_dt_chaste_interface_var_calcium_fluxes__CaMKt;
            }
            else
            {
                rY[6] += (d_dt_chaste_interface_var_calcium_fluxes__CaMKt/mPartialF[6])*(exp(mPartialF[6]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[7]) < delta){
                rY[7] += mDt*d_dt_chaste_interface_var_ryanodine_receptors__P_O1;
            }
            else
            {
                rY[7] += (d_dt_chaste_interface_var_ryanodine_receptors__P_O1/mPartialF[7])*(exp(mPartialF[7]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[8]) < delta){
                rY[8] += mDt*d_dt_chaste_interface_var_ryanodine_receptors__P_O2;
            }
            else
            {
                rY[8] += (d_dt_chaste_interface_var_ryanodine_receptors__P_O2/mPartialF[8])*(exp(mPartialF[8]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[9]) < delta){
                rY[9] += mDt*d_dt_chaste_interface_var_ryanodine_receptors__P_C2;
            }
            else
            {
                rY[9] += (d_dt_chaste_interface_var_ryanodine_receptors__P_C2/mPartialF[9])*(exp(mPartialF[9]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[10]) < delta){
                rY[10] += mDt*d_dt_chaste_interface_var_L_type_calcium_current__O;
            }
            else
            {
                rY[10] += (d_dt_chaste_interface_var_L_type_calcium_current__O/mPartialF[10])*(exp(mPartialF[10]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[11]) < delta){
                rY[11] += mDt*d_dt_chaste_interface_var_L_type_calcium_current__I;
            }
            else
            {
                rY[11] += (d_dt_chaste_interface_var_L_type_calcium_current__I/mPartialF[11])*(exp(mPartialF[11]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[12]) < delta){
                rY[12] += mDt*d_dt_chaste_interface_var_L_type_calcium_current__y_gate;
            }
            else
            {
                rY[12] += (d_dt_chaste_interface_var_L_type_calcium_current__y_gate/mPartialF[12])*(exp(mPartialF[12]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[13]) < delta){
                rY[13] += mDt*d_dt_chaste_interface_var_sodium_concentration__Nai;
            }
            else
            {
                rY[13] += (d_dt_chaste_interface_var_sodium_concentration__Nai/mPartialF[13])*(exp(mPartialF[13]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[14]) < delta){
                rY[14] += mDt*d_dt_chaste_interface_var_fast_sodium_current__O_Na;
            }
            else
            {
                rY[14] += (d_dt_chaste_interface_var_fast_sodium_current__O_Na/mPartialF[14])*(exp(mPartialF[14]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[15]) < delta){
                rY[15] += mDt*d_dt_chaste_interface_var_fast_sodium_current__C_Na1;
            }
            else
            {
                rY[15] += (d_dt_chaste_interface_var_fast_sodium_current__C_Na1/mPartialF[15])*(exp(mPartialF[15]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[16]) < delta){
                rY[16] += mDt*d_dt_chaste_interface_var_fast_sodium_current__C_Na2;
            }
            else
            {
                rY[16] += (d_dt_chaste_interface_var_fast_sodium_current__C_Na2/mPartialF[16])*(exp(mPartialF[16]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[17]) < delta){
                rY[17] += mDt*d_dt_chaste_interface_var_fast_sodium_current__I1_Na;
            }
            else
            {
                rY[17] += (d_dt_chaste_interface_var_fast_sodium_current__I1_Na/mPartialF[17])*(exp(mPartialF[17]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[18]) < delta){
                rY[18] += mDt*d_dt_chaste_interface_var_fast_sodium_current__I2_Na;
            }
            else
            {
                rY[18] += (d_dt_chaste_interface_var_fast_sodium_current__I2_Na/mPartialF[18])*(exp(mPartialF[18]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[19]) < delta){
                rY[19] += mDt*d_dt_chaste_interface_var_fast_sodium_current__IF_Na;
            }
            else
            {
                rY[19] += (d_dt_chaste_interface_var_fast_sodium_current__IF_Na/mPartialF[19])*(exp(mPartialF[19]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[20]) < delta){
                rY[20] += mDt*d_dt_chaste_interface_var_fast_sodium_current__IC_Na2;
            }
            else
            {
                rY[20] += (d_dt_chaste_interface_var_fast_sodium_current__IC_Na2/mPartialF[20])*(exp(mPartialF[20]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[21]) < delta){
                rY[21] += mDt*d_dt_chaste_interface_var_fast_sodium_current__IC_Na3;
            }
            else
            {
                rY[21] += (d_dt_chaste_interface_var_fast_sodium_current__IC_Na3/mPartialF[21])*(exp(mPartialF[21]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[22]) < delta){
                rY[22] += mDt*d_dt_chaste_interface_var_potassium_concentration__Ki;
            }
            else
            {
                rY[22] += (d_dt_chaste_interface_var_potassium_concentration__Ki/mPartialF[22])*(exp(mPartialF[22]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[23]) < delta){
                rY[23] += mDt*d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__aur;
            }
            else
            {
                rY[23] += (d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__aur/mPartialF[23])*(exp(mPartialF[23]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[24]) < delta){
                rY[24] += mDt*d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__iur;
            }
            else
            {
                rY[24] += (d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__iur/mPartialF[24])*(exp(mPartialF[24]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[25]) < delta){
                rY[25] += mDt*d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__aKss;
            }
            else
            {
                rY[25] += (d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__aKss/mPartialF[25])*(exp(mPartialF[25]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[26]) < delta){
                rY[26] += mDt*d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__iKss;
            }
            else
            {
                rY[26] += (d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__iKss/mPartialF[26])*(exp(mPartialF[26]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[27]) < delta){
                rY[27] += mDt*d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__O_K;
            }
            else
            {
                rY[27] += (d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__O_K/mPartialF[27])*(exp(mPartialF[27]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[28]) < delta){
                rY[28] += mDt*d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K1;
            }
            else
            {
                rY[28] += (d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K1/mPartialF[28])*(exp(mPartialF[28]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[29]) < delta){
                rY[29] += mDt*d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K2;
            }
            else
            {
                rY[29] += (d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K2/mPartialF[29])*(exp(mPartialF[29]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[30]) < delta){
                rY[30] += mDt*d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__I_K;
            }
            else
            {
                rY[30] += (d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__I_K/mPartialF[30])*(exp(mPartialF[30]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[31]) < delta){
                rY[31] += mDt*d_dt_chaste_interface_var_slow_delayed_rectifier_K_I__nKs;
            }
            else
            {
                rY[31] += (d_dt_chaste_interface_var_slow_delayed_rectifier_K_I__nKs/mPartialF[31])*(exp(mPartialF[31]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[32]) < delta){
                rY[32] += mDt*d_dt_chaste_interface_var_fast_transient_outward_K_I__ato_f;
            }
            else
            {
                rY[32] += (d_dt_chaste_interface_var_fast_transient_outward_K_I__ato_f/mPartialF[32])*(exp(mPartialF[32]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[33]) < delta){
                rY[33] += mDt*d_dt_chaste_interface_var_fast_transient_outward_K_I__ito_f;
            }
            else
            {
                rY[33] += (d_dt_chaste_interface_var_fast_transient_outward_K_I__ito_f/mPartialF[33])*(exp(mPartialF[33]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[34]) < delta){
                rY[34] += mDt*d_dt_chaste_interface_var_slow_transient_outward_K_I__ato_s;
            }
            else
            {
                rY[34] += (d_dt_chaste_interface_var_slow_transient_outward_K_I__ato_s/mPartialF[34])*(exp(mPartialF[34]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[35]) < delta){
                rY[35] += mDt*d_dt_chaste_interface_var_slow_transient_outward_K_I__ito_s;
            }
            else
            {
                rY[35] += (d_dt_chaste_interface_var_slow_transient_outward_K_I__ito_s/mPartialF[35])*(exp(mPartialF[35]*mDt)-1.0);
            }
            
        }        
        
    }
   
    
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        double d_dt_chaste_interface_var_cell__V;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = rY[13];
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__potassium_concentration__Ki = rY[22];
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = rY[23];
        // Units: dimensionless; Initial value: 0.00346258606821817
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = rY[24];
        // Units: dimensionless; Initial value: 0.955684946168062
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
        // Units: dimensionless; Initial value: 0.00336735013094628
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = rY[32];
        // Units: dimensionless; Initial value: 0.0142335908879204
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = rY[33];
        // Units: dimensionless; Initial value: 0.996989882138174
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_pump_current__i_pCa = 0.095500000000000002 * pow(var_calcium_concentration__Cai, 2) / (0.083232249999999994 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL = ((fabs(var_chaste_interface__cell__V) < 1.3267937823834197e-6) ? (-376848.31406265136 * (-1.3267937823834197e-6 + var_chaste_interface__cell__V) * (3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(9.9999999999999995e-8)) * mParameters[5]) + 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * mParameters[5])) - 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * mParameters[5])) : (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * _lt_0_row[0]) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((_lt_0_row[1]) * mParameters[5]))); // picoA_per_picoF
        const double var_calcium_background_current__i_Cab = 0.00069999999999999999 * var_chaste_interface__cell__V - 0.0092875564766839377 * log(mParameters[1] / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // picoA_per_picoF
        const double var_fast_transient_outward_K_I__E_K = 26.535875647668394 * log(mParameters[2] / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_K_I__i_Kto_f = 0.53469999999999995 * pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__fast_transient_outward_K_I__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * mParameters[8] * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // picoA_per_picoF
        const double var_slow_delayed_rectifier_K_I__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[10]; // picoA_per_picoF
        const double var_slow_transient_outward_K_I__i_Kto_s = 0; // picoA_per_picoF
        const double var_fast_sodium_current__E_Na = 26.535875647668394 * log((mParameters[3] + 0.1111111111111111 * mParameters[2]) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)); // millivolt
        const double var_fast_sodium_current__i_Na = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_chaste_interface__fast_sodium_current__O_Na * mParameters[6]; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__i_Kr = (-26.535875647668394 * log((mParameters[2] + 0.020408163265306124 * mParameters[3]) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) + var_chaste_interface__cell__V) * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * mParameters[9]; // picoA_per_picoF
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__cell__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * _lt_0_row[3] - pow(mParameters[3], 3) * var_calcium_concentration__Cai * _lt_0_row[4]) * mParameters[11] / ((_lt_0_row[5]) * (1400.0 * pow(var_chaste_interface__sodium_concentration__Nai, 3) + 681472000000000.0 * var_calcium_concentration__Cai + pow(mParameters[3], 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] + 1728000000000.0 * (1.0 + 0.27777777777777779 * var_calcium_concentration__Cai) * mParameters[1] + 3.6000000000000001 * pow(mParameters[3], 3) * (1.0 + 5.7870370370370368e-13 * pow(var_chaste_interface__sodium_concentration__Nai, 3)))); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = 2.4860000000000002 * mParameters[2] / ((1.0 + 13435672565.051065 * pow((1 / var_chaste_interface__sodium_concentration__Nai), 2.3999999999999999)) * (1500.0 + mParameters[2]) * (1.0 + _lt_0_row[7] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[3])) * _lt_0_row[6])); // picoA_per_picoF
        const double var_time_independent_K_I__i_K1 = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[2] * mParameters[7] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + mParameters[2])); // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur = 0.25 * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur; // picoA_per_picoF
        d_dt_chaste_interface_var_cell__V = -var_L_type_calcium_current__i_CaL - var_calcium_background_current__i_Cab - var_calcium_pump_current__i_pCa - var_cell__i_Stim - var_fast_sodium_current__i_Na - var_fast_transient_outward_K_I__i_Kto_f - var_non_inactivating_steady_state_K_I__i_Kss - var_rapid_delayed_rectifier_K_I__i_Kr - var_slow_delayed_rectifier_K_I__i_Ks - var_slow_transient_outward_K_I__i_Kto_s - var_sodium_background_current__i_Nab - var_sodium_calcium_exchange_current__i_NCX - var_sodium_potassium_pump_current__i_NaK - var_time_independent_K_I__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur - 2.0 * (40.0 + var_chaste_interface__cell__V) * var_calcium_concentration__Cai / ((_lt_0_row[2]) * (10.0 + var_calcium_concentration__Cai)); // millivolt / millisecond

        return d_dt_chaste_interface_var_cell__V;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
            // Units: millimolar; Initial value: 9.499150681398009e-05
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.0954184301907784
            double var_chaste_interface__L_type_calcium_current__O = rY[10];
            // Units: dimensionless; Initial value: 1.23713515513533e-06
            double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
            // Units: dimensionless; Initial value: 0.845044436980163
            double var_chaste_interface__sodium_concentration__Nai = rY[13];
            // Units: micromolar; Initial value: 12364.7482121793
            double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
            // Units: dimensionless; Initial value: 1.46826771436314e-06
            double var_chaste_interface__potassium_concentration__Ki = rY[22];
            // Units: micromolar; Initial value: 115599.50642567
            double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = rY[23];
            // Units: dimensionless; Initial value: 0.00346258606821817
            double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = rY[24];
            // Units: dimensionless; Initial value: 0.955684946168062
            double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
            // Units: dimensionless; Initial value: 0.287585636847048
            double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = rY[26];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
            // Units: dimensionless; Initial value: 0.0131742086125972
            double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
            // Units: dimensionless; Initial value: 0.00336735013094628
            double var_chaste_interface__fast_transient_outward_K_I__ato_f = rY[32];
            // Units: dimensionless; Initial value: 0.0142335908879204
            double var_chaste_interface__fast_transient_outward_K_I__ito_f = rY[33];
            // Units: dimensionless; Initial value: 0.996989882138174
            

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x0 = exp(9.9999999999999995e-8);
            const double var_x1 = 1 / (1.0 - var_x0);
            const double var_x2 = -var_chaste_interface__calcium_concentration__Cass;
            const double var_x3 = var_x2 + var_x0 * mParameters[1];
            const double var_x4 = var_x1 * var_x3;
            const double var_x5 = var_x4 * var_chaste_interface__L_type_calcium_current__O;
            const double var_x6 = 1 / mParameters[5];
            const double var_x7 = var_x6 * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate;
            const double var_x8 = 0.0011539722641785788 * var_x7;
            const double var_x9 = exp(-9.9999999999999995e-8);
            const double var_x10 = 1 / (1.0 - var_x9);
            const double var_x11 = var_x2 + var_x9 * mParameters[1];
            const double var_x12 = var_x10 * var_x11;
            const double var_x13 = var_x12 * var_chaste_interface__L_type_calcium_current__O;
            const double var_x14 = fabs(var_chaste_interface__cell__V) < 1.3267937823834197e-6;
            const double var_x15 = _lt_0_row[0];
            const double var_x16 = var_x15 * mParameters[1];
            const double var_x17 = var_x16 + var_x2;
            const double var_x18 = 1.0 - var_x15;
            const double var_x19 = 1 / var_x18;
            const double var_x20 = var_x19 * var_x7 * var_chaste_interface__L_type_calcium_current__O;
            const double var_x21 = 0.0023079445283571576 * var_x20;
            const double var_x22 = var_x17 * var_x21;
            const double var_x23 = var_x17 * var_x7 * var_chaste_interface__cell__V;
            const double var_x24 = ((var_x14) ? (-var_x13 * var_x8 - var_x5 * var_x8) : (-var_x22 + 0.00017394900089230317 * var_x16 * var_x20 * var_chaste_interface__cell__V + 0.00017394900089230317 * var_x15 * var_x23 * var_chaste_interface__L_type_calcium_current__O / pow(var_x18, 2)));
            const double var_x25 = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * mParameters[10];
            const double var_x26 = var_chaste_interface__fast_sodium_current__O_Na * mParameters[6];
            const double var_x27 = var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * mParameters[9];
            const double var_x28 = var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur;
            const double var_x29 = pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3);
            const double var_x30 = 0.53469999999999995 * var_x29;
            const double var_x31 = mParameters[8] * var_chaste_interface__non_inactivating_steady_state_K_I__iKss;
            const double var_x32 = var_x31 * var_chaste_interface__non_inactivating_steady_state_K_I__aKss;
            const double var_x33 = exp(5.9871794871794881 - 0.12820512820512822 * var_chaste_interface__cell__V);
            const double var_x34 = 1.0 + var_x33;
            const double var_x35 = 1 / var_x34;
            const double var_x36 = var_x35 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x37 = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x38 = 1 / (10.0 + var_x37);
            const double var_x39 = 2000.0 * var_x38;
            const double var_x40 = 1 / var_chaste_interface__potassium_concentration__Ki;
            const double var_x41 = var_x40 * mParameters[2];
            const double var_x42 = log(var_x41);
            const double var_x43 = exp(0.089599999999999999 * var_chaste_interface__cell__V - 2.3776144580310881 * var_x42);
            const double var_x44 = 1.0 + var_x43;
            const double var_x45 = mParameters[7] / (210.0 + mParameters[2]);
            const double var_x46 = var_x45 / var_x44;
            const double var_x47 = var_x46 * mParameters[2];
            const double var_x48 = _lt_0_row[3];
            const double var_x49 = pow(var_chaste_interface__sodium_concentration__Nai, 3);
            const double var_x50 = var_x49 * mParameters[1];
            const double var_x51 = var_x48 * var_x50;
            const double var_x52 = _lt_0_row[4];
            const double var_x53 = pow(mParameters[3], 3);
            const double var_x54 = var_x53 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x55 = 1.0 + 0.27000000000000002 * var_x52;
            const double var_x56 = 1 / var_x55;
            const double var_x57 = (1.0 + 277.77777777777777 * var_chaste_interface__calcium_concentration__Cai_converted) * mParameters[1];
            const double var_x58 = var_x53 * (1.0 + 5.7870370370370368e-13 * var_x49);
            const double var_x59 = var_x37 * var_x53;
            const double var_x60 = mParameters[11] / (var_x50 + var_x59 + 1400.0 * var_x49 + 1728000000000.0 * var_x57 + 3.6000000000000001 * var_x58 + 6.81472e+17 * var_chaste_interface__calcium_concentration__Cai_converted);
            const double var_x61 = var_x56 * var_x60;
            const double var_x62 = var_x61 * (0.013189690992192795 * var_x51 + 24.495140414072335 * var_x52 * var_x54);
            const double var_x63 = 1 / var_chaste_interface__sodium_concentration__Nai;
            const double var_x64 = pow(var_x63, 2.3999999999999999);
            const double var_x65 = exp(-0.0037684831406265135 * var_chaste_interface__cell__V);
            const double var_x66 = exp(1.4858841010401188e-5 * mParameters[3]);
            const double var_x67 = _lt_0_row[6];
            const double var_x68 = 1.0 + 0.1245 * var_x65 + 0.036499999999999998 * var_x67 * (-0.14285714285714285 + 0.14285714285714285 * var_x66);
            const double var_x69 = mParameters[2] / (1500.0 + mParameters[2]);
            const double var_x70 = var_x69 * (0.00046917615100800094 * var_x65 + 0.037684831406265135 * var_x67 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x66)) / (pow(var_x68, 2) * (1.0 + 13435672565.051065 * var_x64));
            const double var_x71 = var_x51 - var_x52 * var_x59;
            const double var_x72 = var_x52 * var_x60 * var_x71 / pow(var_x55, 2);
            const double var_x73 = 40.0 + var_chaste_interface__cell__V;
            const double var_x74 = 26.535875647668394 * var_x42;
            const double var_x75 = -var_x74 + var_chaste_interface__cell__V;
            const double var_x76 = var_x43 * var_x45 * var_x75 / pow(var_x44, 2);
            const double var_x77 = var_x76 * mParameters[2];
            
            partialF = -0.0033 - var_x24 - var_x25 - var_x26 - var_x27 - var_x32 - var_x47 + 0.089599999999999999 * var_x77 - 0.25 * var_x28 - var_x62 - 2.4860000000000002 * var_x70 - 0.0066136879117995317 * var_x72 - var_x30 * var_chaste_interface__fast_transient_outward_K_I__ito_f - var_x36 * var_x39 - 256.41025641025641 * var_x33 * var_x38 * var_x73 * var_chaste_interface__calcium_concentration__Cai_converted / pow(var_x34, 2);
        }
        else
        {
            const double y_save = rY[0];
            rY[0] += delta;
            const double temp = EvaluateYDerivative0(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[0])/delta;
            rY[0] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaNSR = rY[4];
        // Units: micromolar; Initial value: 404.825013216286
        double var_chaste_interface__calcium_fluxes__CaMKt = rY[6];
        // Units: dimensionless; Initial value: 0.729027738385079
        double var_chaste_interface__sodium_concentration__Nai = rY[13];
        // Units: micromolar; Initial value: 12364.7482121793
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__calcium_fluxes__CaMKt) / (1.0 + 0.69999999999999996 / var_chaste_interface__calcium_concentration__Cass); // dimensionless
        const double var_calcium_fluxes__J_xfer = 0.125 * var_chaste_interface__calcium_concentration__Cass - 0.125 * var_calcium_concentration__Cai; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_serca = pow(var_calcium_concentration__Cai, 2) * (0.50590000000000002 + 1.5167893800000001 * pow((var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt), 2.5830000000000002) / (1.7590641847756086 + pow((var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt), 2.5830000000000002))) / (0.16974399999999998 + pow(var_calcium_concentration__Cai, 2)); // micromolar_per_millisecond
        const double var_calcium_pump_current__i_pCa = 0.095500000000000002 * pow(var_calcium_concentration__Cai, 2) / (0.083232249999999994 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_calcium_background_current__i_Cab = 0.00069999999999999999 * var_chaste_interface__cell__V - 0.0092875564766839377 * log(mParameters[1] / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_calcium_fluxes__J_leak = ((var_chaste_interface__environment__time < 3333330000000.0005) ? (3.0000000000000001e-5 * var_chaste_interface__calcium_concentration__CaNSR - 3.0000000000000001e-5 * var_calcium_concentration__Cai) : (0.10000000000000001 * var_chaste_interface__calcium_concentration__CaNSR - 0.10000000000000001 * var_calcium_concentration__Cai)); // micromolar_per_millisecond
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * _lt_0_row[3] - pow(mParameters[3], 3) * var_calcium_concentration__Cai * _lt_0_row[4]) * mParameters[11] / ((_lt_0_row[5]) * (1400.0 * pow(var_chaste_interface__sodium_concentration__Nai, 3) + 681472000000000.0 * var_calcium_concentration__Cai + pow(mParameters[3], 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] + 1728000000000.0 * (1.0 + 0.27777777777777779 * var_calcium_concentration__Cai) * mParameters[1] + 3.6000000000000001 * pow(mParameters[3], 3) * (1.0 + 5.7870370370370368e-13 * pow(var_chaste_interface__sodium_concentration__Nai, 3)))); // picoA_per_picoF
        const double d_dt_chaste_interface_var_calcium_concentration__Cai_converted = 0.001 * (-var_calcium_fluxes__J_serca - 0.032656617993405558 * (-2.0 * var_sodium_calcium_exchange_current__i_NCX + var_calcium_background_current__i_Cab + var_calcium_pump_current__i_pCa) * mParameters[5] + var_calcium_fluxes__J_leak + var_calcium_fluxes__J_xfer) / (1.0 + 65.399999999999991 / pow((0.59999999999999998 + var_calcium_concentration__Cai), 2)); // millimolar / millisecond

        return d_dt_chaste_interface_var_calcium_concentration__Cai_converted;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
            // Units: millimolar; Initial value: 9.499150681398009e-05
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.0954184301907784
            double var_chaste_interface__calcium_concentration__CaNSR = rY[4];
            // Units: micromolar; Initial value: 404.825013216286
            double var_chaste_interface__calcium_fluxes__CaMKt = rY[6];
            // Units: dimensionless; Initial value: 0.729027738385079
            double var_chaste_interface__sodium_concentration__Nai = rY[13];
            // Units: micromolar; Initial value: 12364.7482121793
            

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x37 = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x48 = _lt_0_row[3];
            const double var_x49 = pow(var_chaste_interface__sodium_concentration__Nai, 3);
            const double var_x50 = var_x49 * mParameters[1];
            const double var_x51 = var_x48 * var_x50;
            const double var_x52 = _lt_0_row[4];
            const double var_x53 = pow(mParameters[3], 3);
            const double var_x54 = var_x53 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x55 = 1.0 + 0.27000000000000002 * var_x52;
            const double var_x56 = 1 / var_x55;
            const double var_x57 = (1.0 + 277.77777777777777 * var_chaste_interface__calcium_concentration__Cai_converted) * mParameters[1];
            const double var_x58 = var_x53 * (1.0 + 5.7870370370370368e-13 * var_x49);
            const double var_x59 = var_x37 * var_x53;
            const double var_x60 = mParameters[11] / (var_x50 + var_x59 + 1400.0 * var_x49 + 1728000000000.0 * var_x57 + 3.6000000000000001 * var_x58 + 6.81472e+17 * var_chaste_interface__calcium_concentration__Cai_converted);
            const double var_x61 = var_x56 * var_x60;
            const double var_x71 = var_x51 - var_x52 * var_x59;
            const double var_x78 = 1 / var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x79 = pow(var_chaste_interface__calcium_concentration__Cai_converted, 2);
            const double var_x80 = pow(var_chaste_interface__calcium_concentration__Cai_converted, 3);
            const double var_x81 = var_x80 / pow((8.3232249999999994e-8 + var_x79), 2);
            const double var_x82 = 1000000.0 * var_x79;
            const double var_x83 = 1 / (0.083232249999999994 + var_x82);
            const double var_x84 = var_x83 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x85 = 1000.0 * var_x53;
            const double var_x86 = var_x52 * var_x61;
            const double var_x87 = -6.81472e+17 - var_x85 - 480000000000000.0 * mParameters[1];
            const double var_x88 = var_x56 * var_x71 * mParameters[11] / pow((2.0543764087152516e-15 * var_x49 + 5.282682193839219e-18 * var_x58 + 2.535687453042825e-6 * var_x57 + 1.4674117205108941e-18 * var_x50 + 1.4674117205108941e-15 * var_x54 + var_chaste_interface__calcium_concentration__Cai_converted), 2);
            const double var_x131 = 0.00059999999999999995 + var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x132 = 1.0 + 6.5400000000000004e-5 / pow(var_x131, 2);
            const double var_x133 = 1 / var_x132;
            const double var_x134 = 0.001 * var_x133;
            const double var_x136 = 1.4063880539705308e-37 * var_x88;
            const double var_x137 = var_x53 * var_x86;
            const double var_x138 = 1.0 - var_chaste_interface__calcium_fluxes__CaMKt;
            const double var_x139 = 1.0 + 0.69999999999999996 / var_chaste_interface__calcium_concentration__Cass;
            const double var_x140 = 1 / var_x139;
            const double var_x141 = 0.050000000000000003 * var_x140;
            const double var_x142 = var_x138 * var_x141 + var_chaste_interface__calcium_fluxes__CaMKt;
            const double var_x143 = pow(var_x142, 2.5830000000000002);
            const double var_x144 = 1 / (1.7590641847756086 + var_x143);
            const double var_x145 = 1.5167893800000001 * var_x144;
            const double var_x146 = 0.50590000000000002 + var_x143 * var_x145;
            const double var_x147 = var_x146 * var_x80 / pow((1.6974399999999999e-7 + var_x79), 2);
            const double var_x148 = 1 / (0.16974399999999998 + var_x82);
            const double var_x149 = var_x146 * var_x148;
            const double var_x150 = var_x149 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x151 = var_chaste_interface__environment__time < 3333330000000.0005;
            const double var_x152 = ((var_x151) ? (-0.029999999999999999) : (-100.0));
            
            partialF = var_x134 * (-125.0 + var_x152 + 2.0 * var_x147 - 2000000.0 * var_x150 + (0.0062374140367404624 * var_x81 - 6237.4140367404616 * var_x84 - 65.313235986811122 * var_x137 - 0.00030330018395124703 * var_x78 + var_x136 * var_x87) * mParameters[5]) + 1.3080000000000001e-7 * (0.125 * var_chaste_interface__calcium_concentration__Cass - 125.0 * var_chaste_interface__calcium_concentration__Cai_converted - var_x149 * var_x82 - 0.032656617993405558 * (0.00069999999999999999 * var_chaste_interface__cell__V - 0.0092875564766839377 * log(0.001 * var_x78 * mParameters[1]) + 95500.0 * var_x79 * var_x83 - 2.0 * var_x61 * var_x71) * mParameters[5] + ((var_x151) ? (3.0000000000000001e-5 * var_chaste_interface__calcium_concentration__CaNSR - 0.029999999999999999 * var_chaste_interface__calcium_concentration__Cai_converted) : (0.10000000000000001 * var_chaste_interface__calcium_concentration__CaNSR - 100.0 * var_chaste_interface__calcium_concentration__Cai_converted))) / (pow(var_x131, 3) * pow(var_x132, 2));
        }
        else
        {
            const double y_save = rY[1];
            rY[1] += delta;
            const double temp = EvaluateYDerivative1(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[1])/delta;
            rY[1] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
        // Units: micromolar; Initial value: 171.167969039613
        double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
        // Units: dimensionless; Initial value: 0.000280539508743811
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[8];
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
        // Units: dimensionless; Initial value: 0.845044436980163
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__J_xfer = 0.125 * var_chaste_interface__calcium_concentration__Cass - 0.125 * var_calcium_concentration__Cai; // micromolar_per_millisecond
        const double var_L_type_calcium_current__i_CaL = ((fabs(var_chaste_interface__cell__V) < 1.3267937823834197e-6) ? (-376848.31406265136 * (-1.3267937823834197e-6 + var_chaste_interface__cell__V) * (3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(9.9999999999999995e-8)) * mParameters[5]) + 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * mParameters[5])) - 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * mParameters[5])) : (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * _lt_0_row[0]) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((_lt_0_row[1]) * mParameters[5]))); // picoA_per_picoF
        const double var_calcium_fluxes__J_rel = ((var_chaste_interface__environment__time < 3333330000000.0005) ? ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * (var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2) * var_chaste_interface__calcium_fluxes__P_RyR * mParameters[0]) : (10.0 * var_chaste_interface__calcium_concentration__CaJSR - 10.0 * var_chaste_interface__calcium_concentration__Cass)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__Cass = (3.5000000000000004 * var_calcium_fluxes__J_rel - 1000.0 * var_calcium_fluxes__J_xfer - 32.656617993405561 * var_L_type_calcium_current__i_CaL * mParameters[5]) / (1.0 + 65.399999999999991 / pow((0.59999999999999998 + var_chaste_interface__calcium_concentration__Cass), 2)); // micromolar / millisecond

        return d_dt_chaste_interface_var_calcium_concentration__Cass;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
            // Units: millimolar; Initial value: 9.499150681398009e-05
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.0954184301907784
            double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
            // Units: micromolar; Initial value: 171.167969039613
            double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
            // Units: dimensionless; Initial value: 0.000280539508743811
            double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
            // Units: dimensionless; Initial value: 0.00571393383393735
            double var_chaste_interface__ryanodine_receptors__P_O2 = rY[8];
            // Units: dimensionless; Initial value: 2.09864618235341e-08
            double var_chaste_interface__L_type_calcium_current__O = rY[10];
            // Units: dimensionless; Initial value: 1.23713515513533e-06
            double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
            // Units: dimensionless; Initial value: 0.845044436980163
            

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x0 = exp(9.9999999999999995e-8);
            const double var_x1 = 1 / (1.0 - var_x0);
            const double var_x2 = -var_chaste_interface__calcium_concentration__Cass;
            const double var_x3 = var_x2 + var_x0 * mParameters[1];
            const double var_x6 = 1 / mParameters[5];
            const double var_x7 = var_x6 * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate;
            const double var_x9 = exp(-9.9999999999999995e-8);
            const double var_x10 = 1 / (1.0 - var_x9);
            const double var_x11 = var_x2 + var_x9 * mParameters[1];
            const double var_x14 = fabs(var_chaste_interface__cell__V) < 1.3267937823834197e-6;
            const double var_x15 = _lt_0_row[0];
            const double var_x16 = var_x15 * mParameters[1];
            const double var_x17 = var_x16 + var_x2;
            const double var_x18 = 1.0 - var_x15;
            const double var_x19 = 1 / var_x18;
            const double var_x20 = var_x19 * var_x7 * var_chaste_interface__L_type_calcium_current__O;
            const double var_x21 = 0.0023079445283571576 * var_x20;
            const double var_x22 = var_x17 * var_x21;
            const double var_x90 = 0.5 - 376848.31406265136 * var_chaste_interface__cell__V;
            const double var_x91 = 3.0621664503101105e-9 * var_x7;
            const double var_x92 = var_x91 * var_chaste_interface__L_type_calcium_current__O;
            const double var_x93 = var_x1 * var_x92;
            const double var_x94 = var_x10 * var_x92;
            const double var_x95 = ((var_x14) ? (var_x94 + var_x90 * (-var_x93 - var_x94)) : (var_x21 * var_chaste_interface__cell__V));
            const double var_x151 = var_chaste_interface__environment__time < 3333330000000.0005;
            const double var_x161 = 0.59999999999999998 + var_chaste_interface__calcium_concentration__Cass;
            const double var_x162 = pow(var_x161, (-2));
            const double var_x163 = 1 / (1.0 + 65.399999999999991 * var_x162);
            const double var_x164 = 32.656617993405561 * mParameters[5];
            const double var_x166 = -var_chaste_interface__ryanodine_receptors__P_O1 - var_chaste_interface__ryanodine_receptors__P_O2;
            const double var_x167 = var_chaste_interface__calcium_fluxes__P_RyR * mParameters[0];
            const double var_x168 = ((var_x151) ? (var_x166 * var_x167) : (-10.0));
            const double var_x169 = var_x2 + var_chaste_interface__calcium_concentration__CaJSR;
            const double var_x170 = var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2;
            const double var_x171 = var_x167 * var_x170;
            const double var_x172 = ((var_x151) ? (var_x169 * var_x171) : (10.0 * var_chaste_interface__calcium_concentration__CaJSR - 10.0 * var_chaste_interface__calcium_concentration__Cass));
            const double var_x173 = var_x11 * var_x94;
            const double var_x174 = ((var_x14) ? (-var_x173 - 376848.31406265136 * (-1.3267937823834197e-6 + var_chaste_interface__cell__V) * (var_x173 + var_x3 * var_x93)) : (-var_x22 * var_chaste_interface__cell__V));
            
            partialF = var_x163 * (-125.0 + 3.5000000000000004 * var_x168 - var_x164 * var_x95) + 0.030581039755351685 * (125000.0 * var_chaste_interface__calcium_concentration__Cai_converted + 3.5000000000000004 * var_x172 - 125.0 * var_chaste_interface__calcium_concentration__Cass - var_x164 * var_x174) / (pow(var_x161, 3) * pow((0.015290519877675841 + var_x162), 2));
        }
        else
        {
            const double y_save = rY[2];
            rY[2] += delta;
            const double temp = EvaluateYDerivative2(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[2])/delta;
            rY[2] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
        // Units: micromolar; Initial value: 171.167969039613
        double var_chaste_interface__calcium_concentration__CaNSR = rY[4];
        // Units: micromolar; Initial value: 404.825013216286
        double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
        // Units: dimensionless; Initial value: 0.000280539508743811
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[8];
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        


        // Mathematics
        const double var_calcium_fluxes__J_tr = 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaNSR - 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaJSR; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_rel = ((var_chaste_interface__environment__time < 3333330000000.0005) ? ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * (var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2) * var_chaste_interface__calcium_fluxes__P_RyR * mParameters[0]) : (10.0 * var_chaste_interface__calcium_concentration__CaJSR - 10.0 * var_chaste_interface__calcium_concentration__Cass)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaJSR = (-var_calcium_fluxes__J_rel + var_calcium_fluxes__J_tr) / (1.0 + 79.365079365079367 / pow((1 + 0.0015873015873015873 * var_chaste_interface__calcium_concentration__CaJSR), 2)); // micromolar / millisecond

        return d_dt_chaste_interface_var_calcium_concentration__CaJSR;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.0954184301907784
            double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
            // Units: micromolar; Initial value: 171.167969039613
            double var_chaste_interface__calcium_concentration__CaNSR = rY[4];
            // Units: micromolar; Initial value: 404.825013216286
            double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
            // Units: dimensionless; Initial value: 0.000280539508743811
            double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
            // Units: dimensionless; Initial value: 0.00571393383393735
            double var_chaste_interface__ryanodine_receptors__P_O2 = rY[8];
            // Units: dimensionless; Initial value: 2.09864618235341e-08
            


            const double var_x2 = -var_chaste_interface__calcium_concentration__Cass;
            const double var_x151 = var_chaste_interface__environment__time < 3333330000000.0005;
            const double var_x167 = var_chaste_interface__calcium_fluxes__P_RyR * mParameters[0];
            const double var_x169 = var_x2 + var_chaste_interface__calcium_concentration__CaJSR;
            const double var_x170 = var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2;
            const double var_x171 = var_x167 * var_x170;
            const double var_x172 = ((var_x151) ? (var_x169 * var_x171) : (10.0 * var_chaste_interface__calcium_concentration__CaJSR - 10.0 * var_chaste_interface__calcium_concentration__Cass));
            const double var_x175 = ((var_x151) ? (var_x171) : (10.0));
            const double var_x180 = 1 + 0.0015873015873015873 * var_chaste_interface__calcium_concentration__CaJSR;
            const double var_x181 = pow(var_x180, (-2));
            const double var_x182 = 1 / (1.0 + 79.365079365079367 * var_x181);
            
            partialF = var_x182 * (-0.050000000000000003 - var_x175) + 4.0000000000000003e-5 * (-var_x172 + 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaNSR - 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaJSR) / (pow(var_x180, 3) * pow((0.0126 + var_x181), 2));
        }
        else
        {
            const double y_save = rY[3];
            rY[3] += delta;
            const double temp = EvaluateYDerivative3(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[3])/delta;
            rY[3] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
        // Units: micromolar; Initial value: 171.167969039613
        double var_chaste_interface__calcium_concentration__CaNSR = rY[4];
        // Units: micromolar; Initial value: 404.825013216286
        double var_chaste_interface__calcium_fluxes__CaMKt = rY[6];
        // Units: dimensionless; Initial value: 0.729027738385079
        


        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__calcium_fluxes__CaMKt) / (1.0 + 0.69999999999999996 / var_chaste_interface__calcium_concentration__Cass); // dimensionless
        const double var_calcium_fluxes__J_tr = 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaNSR - 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaJSR; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_serca = pow(var_calcium_concentration__Cai, 2) * (0.50590000000000002 + 1.5167893800000001 * pow((var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt), 2.5830000000000002) / (1.7590641847756086 + pow((var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt), 2.5830000000000002))) / (0.16974399999999998 + pow(var_calcium_concentration__Cai, 2)); // micromolar_per_millisecond
        const double var_calcium_fluxes__J_leak = ((var_chaste_interface__environment__time < 3333330000000.0005) ? (3.0000000000000001e-5 * var_chaste_interface__calcium_concentration__CaNSR - 3.0000000000000001e-5 * var_calcium_concentration__Cai) : (0.10000000000000001 * var_chaste_interface__calcium_concentration__CaNSR - 0.10000000000000001 * var_calcium_concentration__Cai)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaNSR = 95.238095238095241 * var_calcium_fluxes__J_serca - 95.238095238095241 * var_calcium_fluxes__J_leak - 0.33333333333333337 * var_calcium_fluxes__J_tr; // micromolar / millisecond

        return d_dt_chaste_interface_var_calcium_concentration__CaNSR;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            const double var_x151 = var_chaste_interface__environment__time < 3333330000000.0005;
            const double var_x158 = ((var_x151) ? (3.0000000000000001e-5) : (0.10000000000000001));
            
            partialF = -0.016666666666666666 - 95.238095238095241 * var_x158;
        }
        else
        {
            const double y_save = rY[4];
            rY[4] += delta;
            const double temp = EvaluateYDerivative4(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[4])/delta;
            rY[4] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
        // Units: dimensionless; Initial value: 0.000280539508743811
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
        // Units: dimensionless; Initial value: 0.845044436980163
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_L_type_calcium_current__i_CaL = ((fabs(var_chaste_interface__cell__V) < 1.3267937823834197e-6) ? (-376848.31406265136 * (-1.3267937823834197e-6 + var_chaste_interface__cell__V) * (3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(9.9999999999999995e-8)) * mParameters[5]) + 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * mParameters[5])) - 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * mParameters[5])) : (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * _lt_0_row[0]) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((_lt_0_row[1]) * mParameters[5]))); // picoA_per_picoF
        const double d_dt_chaste_interface_var_calcium_fluxes__P_RyR = -0.01 * var_chaste_interface__calcium_fluxes__P_RyR - 0.2857142857142857 * var_L_type_calcium_current__i_CaL * _lt_0_row[9]; // 1 / millisecond

        return d_dt_chaste_interface_var_calcium_fluxes__P_RyR;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.01;
        }
        else
        {
            const double y_save = rY[5];
            rY[5] += delta;
            const double temp = EvaluateYDerivative5(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[5])/delta;
            rY[5] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_fluxes__CaMKt = rY[6];
        // Units: dimensionless; Initial value: 0.729027738385079
        


        // Mathematics
        const double var_calcium_fluxes__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__calcium_fluxes__CaMKt) / (1.0 + 0.69999999999999996 / var_chaste_interface__calcium_concentration__Cass); // dimensionless
        const double d_dt_chaste_interface_var_calcium_fluxes__CaMKt = -0.00020000000000000001 * var_chaste_interface__calcium_fluxes__CaMKt + 0.050000000000000003 * (var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt) * var_calcium_fluxes__CaMKb; // 1 / millisecond

        return d_dt_chaste_interface_var_calcium_fluxes__CaMKt;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.0954184301907784
            double var_chaste_interface__calcium_fluxes__CaMKt = rY[6];
            // Units: dimensionless; Initial value: 0.729027738385079
            


            const double var_x138 = 1.0 - var_chaste_interface__calcium_fluxes__CaMKt;
            const double var_x139 = 1.0 + 0.69999999999999996 / var_chaste_interface__calcium_concentration__Cass;
            const double var_x140 = 1 / var_x139;
            const double var_x141 = 0.050000000000000003 * var_x140;
            const double var_x142 = var_x138 * var_x141 + var_chaste_interface__calcium_fluxes__CaMKt;
            const double var_x187 = 0.0025000000000000005 * var_x140;
            
            partialF = -0.00020000000000000001 - var_x142 * var_x187 + var_x138 * var_x187 * (1 - var_x141);
        }
        else
        {
            const double y_save = rY[6];
            rY[6] += delta;
            const double temp = EvaluateYDerivative6(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[6])/delta;
            rY[6] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[8];
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        double var_chaste_interface__ryanodine_receptors__P_C2 = rY[9];
        // Units: dimensionless; Initial value: 0.565182571165673
        


        // Mathematics
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O1 = 0.00080000000000000004 * var_chaste_interface__ryanodine_receptors__P_C2 + 0.96499999999999997 * var_chaste_interface__ryanodine_receptors__P_O2 - 0.080249999999999988 * var_chaste_interface__ryanodine_receptors__P_O1 + 0.0060749999999999997 * pow(var_chaste_interface__calcium_concentration__Cass, 4.0) * (1.0 - var_chaste_interface__ryanodine_receptors__P_C2 - var_chaste_interface__ryanodine_receptors__P_O1 - var_chaste_interface__ryanodine_receptors__P_O2) - 0.0040499999999999998 * pow(var_chaste_interface__calcium_concentration__Cass, 3.0) * var_chaste_interface__ryanodine_receptors__P_O1; // 1 / millisecond

        return d_dt_chaste_interface_var_ryanodine_receptors__P_O1;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.0954184301907784
            


            const double var_x188 = pow(var_chaste_interface__calcium_concentration__Cass, 3.0);
            const double var_x190 = 0.0040499999999999998 * var_x188;
            const double var_x191 = -0.0060749999999999997 * pow(var_chaste_interface__calcium_concentration__Cass, 4.0);
            
            partialF = -0.080249999999999988 + var_x191 - var_x190;
        }
        else
        {
            const double y_save = rY[7];
            rY[7] += delta;
            const double temp = EvaluateYDerivative7(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[7])/delta;
            rY[7] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[8];
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        


        // Mathematics
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O2 = -0.96499999999999997 * var_chaste_interface__ryanodine_receptors__P_O2 + 0.0040499999999999998 * pow(var_chaste_interface__calcium_concentration__Cass, 3.0) * var_chaste_interface__ryanodine_receptors__P_O1; // 1 / millisecond

        return d_dt_chaste_interface_var_ryanodine_receptors__P_O2;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.96499999999999997;
        }
        else
        {
            const double y_save = rY[8];
            rY[8] += delta;
            const double temp = EvaluateYDerivative8(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[8])/delta;
            rY[8] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_C2 = rY[9];
        // Units: dimensionless; Initial value: 0.565182571165673
        


        // Mathematics
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_C2 = 0.0089999999999999993 * var_chaste_interface__ryanodine_receptors__P_O1 - 0.00080000000000000004 * var_chaste_interface__ryanodine_receptors__P_C2; // 1 / millisecond

        return d_dt_chaste_interface_var_ryanodine_receptors__P_C2;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.00080000000000000004;
        }
        else
        {
            const double y_save = rY[9];
            rY[9] += delta;
            const double temp = EvaluateYDerivative9(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[9])/delta;
            rY[9] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__I = rY[11];
        // Units: dimensionless; Initial value: 0.427651445872853
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_L_type_calcium_current__C = 1.0 - var_chaste_interface__L_type_calcium_current__I - var_chaste_interface__L_type_calcium_current__O; // dimensionless
        const double var_L_type_calcium_current__expVL = _lt_0_row[8]; // dimensionless
        const double d_dt_chaste_interface_var_L_type_calcium_current__O = -1.1986666666666668 * var_chaste_interface__L_type_calcium_current__O + 0.66666666666666663 * var_L_type_calcium_current__C * var_L_type_calcium_current__expVL / (1.0 + var_L_type_calcium_current__expVL); // 1 / millisecond

        return d_dt_chaste_interface_var_L_type_calcium_current__O;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x192 = _lt_0_row[8];
            const double var_x193 = 1.0 + var_x192;
            const double var_x194 = 1 / var_x193;
            const double var_x195 = var_x192 * var_x194;
            const double var_x199 = -0.66666666666666663 * var_x195;
            
            partialF = -1.1986666666666668 + var_x199;
        }
        else
        {
            const double y_save = rY[10];
            rY[10] += delta;
            const double temp = EvaluateYDerivative10(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[10])/delta;
            rY[10] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__I = rY[11];
        // Units: dimensionless; Initial value: 0.427651445872853
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_L_type_calcium_current__C = 1.0 - var_chaste_interface__L_type_calcium_current__I - var_chaste_interface__L_type_calcium_current__O; // dimensionless
        const double var_L_type_calcium_current__expVL = _lt_0_row[8]; // dimensionless
        const double d_dt_chaste_interface_var_L_type_calcium_current__I = -0.00034782608695652176 * (0.0625 + var_L_type_calcium_current__expVL) * var_chaste_interface__L_type_calcium_current__I / (0.0625 + 0.40000000000000002 * var_L_type_calcium_current__expVL) + 0.0028985507246376812 * (0.0625 + var_L_type_calcium_current__expVL) * var_L_type_calcium_current__C * var_chaste_interface__calcium_concentration__Cass / (1.0 + var_L_type_calcium_current__expVL); // 1 / millisecond

        return d_dt_chaste_interface_var_L_type_calcium_current__I;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.0954184301907784
            

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x192 = _lt_0_row[8];
            const double var_x193 = 1.0 + var_x192;
            const double var_x194 = 1 / var_x193;
            const double var_x200 = 1 / (0.0625 + 0.40000000000000002 * var_x192);
            const double var_x202 = 0.0625 + var_x192;
            const double var_x205 = 0.0028985507246376812 * var_x194;
            const double var_x206 = -var_x202 * var_x205 * var_chaste_interface__calcium_concentration__Cass;
            
            partialF = var_x206 - 0.00034782608695652176 * var_x200 * var_x202;
        }
        else
        {
            const double y_save = rY[11];
            rY[11] += delta;
            const double temp = EvaluateYDerivative11(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[11])/delta;
            rY[11] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
        // Units: dimensionless; Initial value: 0.845044436980163
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_L_type_calcium_current__y_gate = (-var_chaste_interface__L_type_calcium_current__y_gate + _lt_0_row[10] + _lt_0_row[11]) / (_lt_0_row[12]); // 1 / millisecond

        return d_dt_chaste_interface_var_L_type_calcium_current__y_gate;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x121 = 0.25 * var_chaste_interface__cell__V;
            const double var_x207 = exp(7.5 + var_x121);
            const double var_x208 = 1.0 + var_x207;
            const double var_x209 = 1 / var_x208;
            const double var_x210 = 1 / (8.0 + 315.0 * var_x209);
            
            partialF = -var_x210;
        }
        else
        {
            const double y_save = rY[12];
            rY[12] += delta;
            const double temp = EvaluateYDerivative12(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[12])/delta;
            rY[12] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__sodium_concentration__Nai = rY[13];
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__potassium_concentration__Ki = rY[22];
        // Units: micromolar; Initial value: 115599.50642567
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_fast_sodium_current__E_Na = 26.535875647668394 * log((mParameters[3] + 0.1111111111111111 * mParameters[2]) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)); // millivolt
        const double var_fast_sodium_current__i_Na = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_chaste_interface__fast_sodium_current__O_Na * mParameters[6]; // picoA_per_picoF
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__cell__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * _lt_0_row[3] - pow(mParameters[3], 3) * var_calcium_concentration__Cai * _lt_0_row[4]) * mParameters[11] / ((_lt_0_row[5]) * (1400.0 * pow(var_chaste_interface__sodium_concentration__Nai, 3) + 681472000000000.0 * var_calcium_concentration__Cai + pow(mParameters[3], 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] + 1728000000000.0 * (1.0 + 0.27777777777777779 * var_calcium_concentration__Cai) * mParameters[1] + 3.6000000000000001 * pow(mParameters[3], 3) * (1.0 + 5.7870370370370368e-13 * pow(var_chaste_interface__sodium_concentration__Nai, 3)))); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = 2.4860000000000002 * mParameters[2] / ((1.0 + 13435672565.051065 * pow((1 / var_chaste_interface__sodium_concentration__Nai), 2.3999999999999999)) * (1500.0 + mParameters[2]) * (1.0 + _lt_0_row[7] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[3])) * _lt_0_row[6])); // picoA_per_picoF
        const double d_dt_chaste_interface_var_sodium_concentration__Nai = 0.065313235986811116 * (-var_fast_sodium_current__i_Na - var_sodium_background_current__i_Nab - 3.0 * var_sodium_calcium_exchange_current__i_NCX - 3.0 * var_sodium_potassium_pump_current__i_NaK) * mParameters[5]; // micromolar / millisecond

        return d_dt_chaste_interface_var_sodium_concentration__Nai;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
            // Units: millimolar; Initial value: 9.499150681398009e-05
            double var_chaste_interface__sodium_concentration__Nai = rY[13];
            // Units: micromolar; Initial value: 12364.7482121793
            double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
            // Units: dimensionless; Initial value: 1.46826771436314e-06
            double var_chaste_interface__potassium_concentration__Ki = rY[22];
            // Units: micromolar; Initial value: 115599.50642567
            

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x26 = var_chaste_interface__fast_sodium_current__O_Na * mParameters[6];
            const double var_x37 = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x48 = _lt_0_row[3];
            const double var_x49 = pow(var_chaste_interface__sodium_concentration__Nai, 3);
            const double var_x50 = var_x49 * mParameters[1];
            const double var_x51 = var_x48 * var_x50;
            const double var_x52 = _lt_0_row[4];
            const double var_x53 = pow(mParameters[3], 3);
            const double var_x54 = var_x53 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x55 = 1.0 + 0.27000000000000002 * var_x52;
            const double var_x56 = 1 / var_x55;
            const double var_x57 = (1.0 + 277.77777777777777 * var_chaste_interface__calcium_concentration__Cai_converted) * mParameters[1];
            const double var_x58 = var_x53 * (1.0 + 5.7870370370370368e-13 * var_x49);
            const double var_x59 = var_x37 * var_x53;
            const double var_x60 = mParameters[11] / (var_x50 + var_x59 + 1400.0 * var_x49 + 1728000000000.0 * var_x57 + 3.6000000000000001 * var_x58 + 6.81472e+17 * var_chaste_interface__calcium_concentration__Cai_converted);
            const double var_x61 = var_x56 * var_x60;
            const double var_x63 = 1 / var_chaste_interface__sodium_concentration__Nai;
            const double var_x64 = pow(var_x63, 2.3999999999999999);
            const double var_x65 = exp(-0.0037684831406265135 * var_chaste_interface__cell__V);
            const double var_x66 = exp(1.4858841010401188e-5 * mParameters[3]);
            const double var_x67 = _lt_0_row[6];
            const double var_x68 = 1.0 + 0.1245 * var_x65 + 0.036499999999999998 * var_x67 * (-0.14285714285714285 + 0.14285714285714285 * var_x66);
            const double var_x69 = mParameters[2] / (1500.0 + mParameters[2]);
            const double var_x71 = var_x51 - var_x52 * var_x59;
            const double var_x88 = var_x56 * var_x71 * mParameters[11] / pow((2.0543764087152516e-15 * var_x49 + 5.282682193839219e-18 * var_x58 + 2.535687453042825e-6 * var_x57 + 1.4674117205108941e-18 * var_x50 + 1.4674117205108941e-15 * var_x54 + var_chaste_interface__calcium_concentration__Cai_converted), 2);
            const double var_x103 = 1 / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki);
            const double var_x106 = var_x103 * var_x26;
            const double var_x107 = pow(var_chaste_interface__sodium_concentration__Nai, 2);
            const double var_x108 = var_x107 * mParameters[1];
            const double var_x109 = -3 * var_x108 - 4200.0 * var_x107 - 6.2500000000000002e-12 * var_x107 * var_x53;
            const double var_x110 = var_x108 * var_x48 * var_x61;
            const double var_x111 = var_x63 * var_x64 * var_x69 / (var_x68 * pow((7.44287265976699e-11 + var_x64), 2));
            const double var_x215 = 4.2191641619115923e-37 * var_x88;
            
            partialF = (-1.7331439082928402 * var_x106 - 0.004506174161561384 * var_x103 - 0.58781912388130009 * var_x110 - 8.7011250677251544e-11 * var_x111 - var_x109 * var_x215) * mParameters[5];
        }
        else
        {
            const double y_save = rY[13];
            rY[13] += delta;
            const double temp = EvaluateYDerivative13(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[13])/delta;
            rY[13] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__fast_sodium_current__C_Na1 = rY[15];
        // Units: dimensionless; Initial value: 0.000420472760277688
        double var_chaste_interface__fast_sodium_current__IF_Na = rY[19];
        // Units: dimensionless; Initial value: 0.000306123648969581
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_fast_sodium_current__alpha_Na13 = _lt_0_row[15]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na2 = _lt_0_row[16]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = _lt_0_row[17]; // per_millisecond
        const double var_fast_sodium_current__beta_Na13 = _lt_0_row[20]; // per_millisecond
        const double var_fast_sodium_current__beta_Na3 = 0.008539999999999999 + 2.0000000000000002e-5 * var_chaste_interface__cell__V; // per_millisecond
        const double var_fast_sodium_current__beta_Na2 = var_fast_sodium_current__alpha_Na13 * var_fast_sodium_current__alpha_Na2 * var_fast_sodium_current__alpha_Na3 / (var_fast_sodium_current__beta_Na13 * var_fast_sodium_current__beta_Na3); // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__O_Na = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__alpha_Na13 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na2 - var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__alpha_Na2 - var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__beta_Na13; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current__O_Na;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x217 = -0.04926108374384236 * var_chaste_interface__cell__V;
            const double var_x218 = exp(0.36945812807881773 + var_x217);
            const double var_x224 = exp(-0.42168674698795178 - 0.060240963855421679 * var_chaste_interface__cell__V);
            const double var_x230 = 1 / (0.39395599999999997 + 0.188495 * var_x224);
            const double var_x242 = var_x230;
            const double var_x243 = 0.22 * var_x218;
            
            partialF = -var_x242 - var_x243;
        }
        else
        {
            const double y_save = rY[14];
            rY[14] += delta;
            const double temp = EvaluateYDerivative14(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[14])/delta;
            rY[14] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__fast_sodium_current__C_Na1 = rY[15];
        // Units: dimensionless; Initial value: 0.000420472760277688
        double var_chaste_interface__fast_sodium_current__C_Na2 = rY[16];
        // Units: dimensionless; Initial value: 0.0240114508843199
        double var_chaste_interface__fast_sodium_current__IF_Na = rY[19];
        // Units: dimensionless; Initial value: 0.000306123648969581
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_fast_sodium_current__alpha_Na12 = _lt_0_row[14]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na13 = _lt_0_row[15]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = _lt_0_row[17]; // per_millisecond
        const double var_fast_sodium_current__beta_Na12 = _lt_0_row[19]; // per_millisecond
        const double var_fast_sodium_current__beta_Na13 = _lt_0_row[20]; // per_millisecond
        const double var_fast_sodium_current__beta_Na3 = 0.008539999999999999 + 2.0000000000000002e-5 * var_chaste_interface__cell__V; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__C_Na1 = var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__alpha_Na12 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na3 + var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__beta_Na13 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__alpha_Na13 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na3; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current__C_Na1;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x217 = -0.04926108374384236 * var_chaste_interface__cell__V;
            const double var_x220 = exp(-0.20833333333333334 - 0.083333333333333329 * var_chaste_interface__cell__V);
            const double var_x221 = exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V);
            const double var_x227 = 2.0000000000000002e-5 * var_chaste_interface__cell__V;
            const double var_x231 = 1 / (0.25 * var_x221 + 0.1027 * var_x220);
            const double var_x244 = 3.802 * var_x231;
            const double var_x248 = exp(0.12315270935960591 + var_x217);
            const double var_x256 = 0.20000000000000001 * var_x248;
            const double var_x257 = -var_x256;
            const double var_x258 = -0.008539999999999999 - var_x227;
            
            partialF = var_x257 + var_x258 - var_x244;
        }
        else
        {
            const double y_save = rY[15];
            rY[15] += delta;
            const double temp = EvaluateYDerivative15(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[15])/delta;
            rY[15] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__fast_sodium_current__C_Na1 = rY[15];
        // Units: dimensionless; Initial value: 0.000420472760277688
        double var_chaste_interface__fast_sodium_current__C_Na2 = rY[16];
        // Units: dimensionless; Initial value: 0.0240114508843199
        double var_chaste_interface__fast_sodium_current__I1_Na = rY[17];
        // Units: dimensionless; Initial value: 0.000517471697712382
        double var_chaste_interface__fast_sodium_current__I2_Na = rY[18];
        // Units: dimensionless; Initial value: 2.45406116958509e-05
        double var_chaste_interface__fast_sodium_current__IF_Na = rY[19];
        // Units: dimensionless; Initial value: 0.000306123648969581
        double var_chaste_interface__fast_sodium_current__IC_Na2 = rY[20];
        // Units: dimensionless; Initial value: 0.0174528857380179
        double var_chaste_interface__fast_sodium_current__IC_Na3 = rY[21];
        // Units: dimensionless; Initial value: 0.402980726914811
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_fast_sodium_current__C_Na3 = 1.0 - var_chaste_interface__fast_sodium_current__C_Na1 - var_chaste_interface__fast_sodium_current__C_Na2 - var_chaste_interface__fast_sodium_current__I1_Na - var_chaste_interface__fast_sodium_current__I2_Na - var_chaste_interface__fast_sodium_current__IC_Na2 - var_chaste_interface__fast_sodium_current__IC_Na3 - var_chaste_interface__fast_sodium_current__IF_Na - var_chaste_interface__fast_sodium_current__O_Na; // dimensionless
        const double var_fast_sodium_current__alpha_Na11 = _lt_0_row[13]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na12 = _lt_0_row[14]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = _lt_0_row[17]; // per_millisecond
        const double var_fast_sodium_current__beta_Na11 = _lt_0_row[18]; // per_millisecond
        const double var_fast_sodium_current__beta_Na12 = _lt_0_row[19]; // per_millisecond
        const double var_fast_sodium_current__beta_Na3 = 0.008539999999999999 + 2.0000000000000002e-5 * var_chaste_interface__cell__V; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__C_Na2 = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na12 + var_fast_sodium_current__C_Na3 * var_fast_sodium_current__alpha_Na11 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__alpha_Na12 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na11 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na3; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current__C_Na2;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x217 = -0.04926108374384236 * var_chaste_interface__cell__V;
            const double var_x221 = exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V);
            const double var_x227 = 2.0000000000000002e-5 * var_chaste_interface__cell__V;
            const double var_x253 = exp(-0.16666666666666666 - 0.066666666666666666 * var_chaste_interface__cell__V);
            const double var_x258 = -0.008539999999999999 - var_x227;
            const double var_x259 = 3.802 / (0.1027 * var_x253 + 0.23000000000000001 * var_x221);
            const double var_x263 = exp(-0.12315270935960591 + var_x217);
            const double var_x266 = exp(-0.14705882352941177 - 0.058823529411764705 * var_chaste_interface__cell__V);
            const double var_x268 = 3.802 / (0.20000000000000001 * var_x221 + 0.1027 * var_x266);
            const double var_x269 = -var_x268;
            const double var_x270 = 0.19170000000000001 * var_x263;
            const double var_x271 = -var_x259 - var_x270;
            const double var_x272 = var_x258 + var_x269;
            
            partialF = var_x271 + var_x272;
        }
        else
        {
            const double y_save = rY[16];
            rY[16] += delta;
            const double temp = EvaluateYDerivative16(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[16])/delta;
            rY[16] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_sodium_current__I1_Na = rY[17];
        // Units: dimensionless; Initial value: 0.000517471697712382
        double var_chaste_interface__fast_sodium_current__I2_Na = rY[18];
        // Units: dimensionless; Initial value: 2.45406116958509e-05
        double var_chaste_interface__fast_sodium_current__IF_Na = rY[19];
        // Units: dimensionless; Initial value: 0.000306123648969581
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_fast_sodium_current__alpha_Na2 = _lt_0_row[16]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = _lt_0_row[17]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na4 = 0.001 * var_fast_sodium_current__alpha_Na2; // per_millisecond
        const double var_fast_sodium_current__alpha_Na5 = 1.0526315789473684e-5 * var_fast_sodium_current__alpha_Na2; // per_millisecond
        const double var_fast_sodium_current__beta_Na4 = var_fast_sodium_current__alpha_Na3; // per_millisecond
        const double var_fast_sodium_current__beta_Na5 = 0.02 * var_fast_sodium_current__alpha_Na3; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__I1_Na = var_chaste_interface__fast_sodium_current__I2_Na * var_fast_sodium_current__beta_Na5 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na4 - var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__alpha_Na5 - var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__beta_Na4; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current__I1_Na;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x224 = exp(-0.42168674698795178 - 0.060240963855421679 * var_chaste_interface__cell__V);
            const double var_x230 = 1 / (0.39395599999999997 + 0.188495 * var_x224);
            const double var_x232 = exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V);
            const double var_x260 = 6.9999999999999997e-7 * var_x232;
            const double var_x277 = -var_x260;
            const double var_x278 = 1.0526315789473684e-5 * var_x230;
            
            partialF = var_x277 - var_x278;
        }
        else
        {
            const double y_save = rY[17];
            rY[17] += delta;
            const double temp = EvaluateYDerivative17(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[17])/delta;
            rY[17] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_sodium_current__I1_Na = rY[17];
        // Units: dimensionless; Initial value: 0.000517471697712382
        double var_chaste_interface__fast_sodium_current__I2_Na = rY[18];
        // Units: dimensionless; Initial value: 2.45406116958509e-05
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_fast_sodium_current__alpha_Na2 = _lt_0_row[16]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = _lt_0_row[17]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na5 = 1.0526315789473684e-5 * var_fast_sodium_current__alpha_Na2; // per_millisecond
        const double var_fast_sodium_current__beta_Na5 = 0.02 * var_fast_sodium_current__alpha_Na3; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__I2_Na = var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__alpha_Na5 - var_chaste_interface__fast_sodium_current__I2_Na * var_fast_sodium_current__beta_Na5; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current__I2_Na;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x232 = exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V);
            const double var_x279 = 1.4e-8 * var_x232;
            
            partialF = -var_x279;
        }
        else
        {
            const double y_save = rY[18];
            rY[18] += delta;
            const double temp = EvaluateYDerivative18(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[18])/delta;
            rY[18] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__fast_sodium_current__C_Na1 = rY[15];
        // Units: dimensionless; Initial value: 0.000420472760277688
        double var_chaste_interface__fast_sodium_current__I1_Na = rY[17];
        // Units: dimensionless; Initial value: 0.000517471697712382
        double var_chaste_interface__fast_sodium_current__IF_Na = rY[19];
        // Units: dimensionless; Initial value: 0.000306123648969581
        double var_chaste_interface__fast_sodium_current__IC_Na2 = rY[20];
        // Units: dimensionless; Initial value: 0.0174528857380179
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_fast_sodium_current__alpha_Na12 = _lt_0_row[14]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na13 = _lt_0_row[15]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na2 = _lt_0_row[16]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = _lt_0_row[17]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na4 = 0.001 * var_fast_sodium_current__alpha_Na2; // per_millisecond
        const double var_fast_sodium_current__beta_Na12 = _lt_0_row[19]; // per_millisecond
        const double var_fast_sodium_current__beta_Na13 = _lt_0_row[20]; // per_millisecond
        const double var_fast_sodium_current__beta_Na3 = 0.008539999999999999 + 2.0000000000000002e-5 * var_chaste_interface__cell__V; // per_millisecond
        const double var_fast_sodium_current__beta_Na2 = var_fast_sodium_current__alpha_Na13 * var_fast_sodium_current__alpha_Na2 * var_fast_sodium_current__alpha_Na3 / (var_fast_sodium_current__beta_Na13 * var_fast_sodium_current__beta_Na3); // per_millisecond
        const double var_fast_sodium_current__beta_Na4 = var_fast_sodium_current__alpha_Na3; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IF_Na = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__beta_Na4 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na12 + var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__alpha_Na2 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na4 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na2; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current__IF_Na;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x217 = -0.04926108374384236 * var_chaste_interface__cell__V;
            const double var_x218 = exp(0.36945812807881773 + var_x217);
            const double var_x220 = exp(-0.20833333333333334 - 0.083333333333333329 * var_chaste_interface__cell__V);
            const double var_x221 = exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V);
            const double var_x224 = exp(-0.42168674698795178 - 0.060240963855421679 * var_chaste_interface__cell__V);
            const double var_x227 = 2.0000000000000002e-5 * var_chaste_interface__cell__V;
            const double var_x228 = 0.008539999999999999 + var_x227;
            const double var_x229 = 1 / var_x228;
            const double var_x230 = 1 / (0.39395599999999997 + 0.188495 * var_x224);
            const double var_x231 = 1 / (0.25 * var_x221 + 0.1027 * var_x220);
            const double var_x232 = exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V);
            const double var_x233 = 1 / var_x218;
            const double var_x234 = var_x230 * var_x231 * var_x232 * var_x233;
            const double var_x235 = var_x229 * var_x234;
            const double var_x245 = 1.2097272727272726e-5 * var_x235;
            const double var_x248 = exp(0.12315270935960591 + var_x217);
            const double var_x256 = 0.20000000000000001 * var_x248;
            const double var_x257 = -var_x256;
            const double var_x260 = 6.9999999999999997e-7 * var_x232;
            const double var_x277 = -var_x260;
            const double var_x280 = 0.001 * var_x230;
            
            partialF = var_x257 + var_x277 - var_x245 - var_x280;
        }
        else
        {
            const double y_save = rY[19];
            rY[19] += delta;
            const double temp = EvaluateYDerivative19(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[19])/delta;
            rY[19] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_sodium_current__C_Na2 = rY[16];
        // Units: dimensionless; Initial value: 0.0240114508843199
        double var_chaste_interface__fast_sodium_current__IF_Na = rY[19];
        // Units: dimensionless; Initial value: 0.000306123648969581
        double var_chaste_interface__fast_sodium_current__IC_Na2 = rY[20];
        // Units: dimensionless; Initial value: 0.0174528857380179
        double var_chaste_interface__fast_sodium_current__IC_Na3 = rY[21];
        // Units: dimensionless; Initial value: 0.402980726914811
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_fast_sodium_current__alpha_Na11 = _lt_0_row[13]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na12 = _lt_0_row[14]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = _lt_0_row[17]; // per_millisecond
        const double var_fast_sodium_current__beta_Na11 = _lt_0_row[18]; // per_millisecond
        const double var_fast_sodium_current__beta_Na12 = _lt_0_row[19]; // per_millisecond
        const double var_fast_sodium_current__beta_Na3 = 0.008539999999999999 + 2.0000000000000002e-5 * var_chaste_interface__cell__V; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IC_Na2 = var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na11 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na12 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__beta_Na11; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current__IC_Na2;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x217 = -0.04926108374384236 * var_chaste_interface__cell__V;
            const double var_x221 = exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V);
            const double var_x232 = exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V);
            const double var_x253 = exp(-0.16666666666666666 - 0.066666666666666666 * var_chaste_interface__cell__V);
            const double var_x259 = 3.802 / (0.1027 * var_x253 + 0.23000000000000001 * var_x221);
            const double var_x260 = 6.9999999999999997e-7 * var_x232;
            const double var_x263 = exp(-0.12315270935960591 + var_x217);
            const double var_x270 = 0.19170000000000001 * var_x263;
            const double var_x271 = -var_x259 - var_x270;
            const double var_x277 = -var_x260;
            
            partialF = var_x271 + var_x277;
        }
        else
        {
            const double y_save = rY[20];
            rY[20] += delta;
            const double temp = EvaluateYDerivative20(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[20])/delta;
            rY[20] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__fast_sodium_current__C_Na1 = rY[15];
        // Units: dimensionless; Initial value: 0.000420472760277688
        double var_chaste_interface__fast_sodium_current__C_Na2 = rY[16];
        // Units: dimensionless; Initial value: 0.0240114508843199
        double var_chaste_interface__fast_sodium_current__I1_Na = rY[17];
        // Units: dimensionless; Initial value: 0.000517471697712382
        double var_chaste_interface__fast_sodium_current__I2_Na = rY[18];
        // Units: dimensionless; Initial value: 2.45406116958509e-05
        double var_chaste_interface__fast_sodium_current__IF_Na = rY[19];
        // Units: dimensionless; Initial value: 0.000306123648969581
        double var_chaste_interface__fast_sodium_current__IC_Na2 = rY[20];
        // Units: dimensionless; Initial value: 0.0174528857380179
        double var_chaste_interface__fast_sodium_current__IC_Na3 = rY[21];
        // Units: dimensionless; Initial value: 0.402980726914811
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_fast_sodium_current__C_Na3 = 1.0 - var_chaste_interface__fast_sodium_current__C_Na1 - var_chaste_interface__fast_sodium_current__C_Na2 - var_chaste_interface__fast_sodium_current__I1_Na - var_chaste_interface__fast_sodium_current__I2_Na - var_chaste_interface__fast_sodium_current__IC_Na2 - var_chaste_interface__fast_sodium_current__IC_Na3 - var_chaste_interface__fast_sodium_current__IF_Na - var_chaste_interface__fast_sodium_current__O_Na; // dimensionless
        const double var_fast_sodium_current__alpha_Na11 = _lt_0_row[13]; // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = _lt_0_row[17]; // per_millisecond
        const double var_fast_sodium_current__beta_Na11 = _lt_0_row[18]; // per_millisecond
        const double var_fast_sodium_current__beta_Na3 = 0.008539999999999999 + 2.0000000000000002e-5 * var_chaste_interface__cell__V; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IC_Na3 = var_fast_sodium_current__C_Na3 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__beta_Na11 - var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na11 - var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na3; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current__IC_Na3;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x221 = exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V);
            const double var_x227 = 2.0000000000000002e-5 * var_chaste_interface__cell__V;
            const double var_x232 = exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V);
            const double var_x258 = -0.008539999999999999 - var_x227;
            const double var_x260 = 6.9999999999999997e-7 * var_x232;
            const double var_x266 = exp(-0.14705882352941177 - 0.058823529411764705 * var_chaste_interface__cell__V);
            const double var_x268 = 3.802 / (0.20000000000000001 * var_x221 + 0.1027 * var_x266);
            const double var_x269 = -var_x268;
            const double var_x272 = var_x258 + var_x269;
            const double var_x277 = -var_x260;
            
            partialF = var_x272 + var_x277;
        }
        else
        {
            const double y_save = rY[21];
            rY[21] += delta;
            const double temp = EvaluateYDerivative21(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[21])/delta;
            rY[21] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__sodium_concentration__Nai = rY[13];
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__potassium_concentration__Ki = rY[22];
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = rY[23];
        // Units: dimensionless; Initial value: 0.00346258606821817
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = rY[24];
        // Units: dimensionless; Initial value: 0.955684946168062
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
        // Units: dimensionless; Initial value: 0.00336735013094628
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = rY[32];
        // Units: dimensionless; Initial value: 0.0142335908879204
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = rY[33];
        // Units: dimensionless; Initial value: 0.996989882138174
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // picoA_per_picoF
        const double var_fast_transient_outward_K_I__E_K = 26.535875647668394 * log(mParameters[2] / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_K_I__i_Kto_f = 0.53469999999999995 * pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__fast_transient_outward_K_I__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * mParameters[8] * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // picoA_per_picoF
        const double var_slow_delayed_rectifier_K_I__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[10]; // picoA_per_picoF
        const double var_slow_transient_outward_K_I__i_Kto_s = 0; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__i_Kr = (-26.535875647668394 * log((mParameters[2] + 0.020408163265306124 * mParameters[3]) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) + var_chaste_interface__cell__V) * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * mParameters[9]; // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = 2.4860000000000002 * mParameters[2] / ((1.0 + 13435672565.051065 * pow((1 / var_chaste_interface__sodium_concentration__Nai), 2.3999999999999999)) * (1500.0 + mParameters[2]) * (1.0 + _lt_0_row[7] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[3])) * _lt_0_row[6])); // picoA_per_picoF
        const double var_time_independent_K_I__i_K1 = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[2] * mParameters[7] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + mParameters[2])); // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur = 0.25 * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur; // picoA_per_picoF
        const double d_dt_chaste_interface_var_potassium_concentration__Ki = 0.065313235986811116 * (-var_cell__i_Stim - var_fast_transient_outward_K_I__i_Kto_f - var_non_inactivating_steady_state_K_I__i_Kss - var_rapid_delayed_rectifier_K_I__i_Kr - var_slow_delayed_rectifier_K_I__i_Ks - var_slow_transient_outward_K_I__i_Kto_s - var_time_independent_K_I__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur + 2.0 * var_sodium_potassium_pump_current__i_NaK) * mParameters[5]; // micromolar / millisecond

        return d_dt_chaste_interface_var_potassium_concentration__Ki;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            double var_chaste_interface__sodium_concentration__Nai = rY[13];
            // Units: micromolar; Initial value: 12364.7482121793
            double var_chaste_interface__potassium_concentration__Ki = rY[22];
            // Units: micromolar; Initial value: 115599.50642567
            double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = rY[23];
            // Units: dimensionless; Initial value: 0.00346258606821817
            double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = rY[24];
            // Units: dimensionless; Initial value: 0.955684946168062
            double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
            // Units: dimensionless; Initial value: 0.287585636847048
            double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = rY[26];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
            // Units: dimensionless; Initial value: 0.0131742086125972
            double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
            // Units: dimensionless; Initial value: 0.00336735013094628
            double var_chaste_interface__fast_transient_outward_K_I__ato_f = rY[32];
            // Units: dimensionless; Initial value: 0.0142335908879204
            double var_chaste_interface__fast_transient_outward_K_I__ito_f = rY[33];
            // Units: dimensionless; Initial value: 0.996989882138174
            


            const double var_x25 = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * mParameters[10];
            const double var_x27 = var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * mParameters[9];
            const double var_x28 = var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur;
            const double var_x29 = pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3);
            const double var_x31 = mParameters[8] * var_chaste_interface__non_inactivating_steady_state_K_I__iKss;
            const double var_x32 = var_x31 * var_chaste_interface__non_inactivating_steady_state_K_I__aKss;
            const double var_x40 = 1 / var_chaste_interface__potassium_concentration__Ki;
            const double var_x41 = var_x40 * mParameters[2];
            const double var_x42 = log(var_x41);
            const double var_x43 = exp(0.089599999999999999 * var_chaste_interface__cell__V - 2.3776144580310881 * var_x42);
            const double var_x44 = 1.0 + var_x43;
            const double var_x45 = mParameters[7] / (210.0 + mParameters[2]);
            const double var_x46 = var_x45 / var_x44;
            const double var_x74 = 26.535875647668394 * var_x42;
            const double var_x75 = -var_x74 + var_chaste_interface__cell__V;
            const double var_x76 = var_x43 * var_x45 * var_x75 / pow(var_x44, 2);
            const double var_x104 = 1 / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai);
            const double var_x105 = var_x104 * var_x27;
            const double var_x114 = var_x29 * var_chaste_interface__fast_transient_outward_K_I__ito_f;
            const double var_x115 = var_x114 * var_x40;
            const double var_x116 = var_x28 * var_x40;
            const double var_x117 = var_x25 * var_x40;
            const double var_x118 = var_x32 * var_x40;
            const double var_x119 = var_x41 * var_x46;
            const double var_x120 = var_x41 * var_x76;
            
            partialF = (0.15528969418303848 * var_x120 - 0.43328597707321004 * var_x116 - 1.7331439082928402 * var_x105 - 1.7331439082928402 * var_x117 - 1.7331439082928402 * var_x118 - 1.7331439082928402 * var_x119 - 0.92671204776418159 * var_x115) * mParameters[5];
        }
        else
        {
            const double y_save = rY[22];
            rY[22] += delta;
            const double temp = EvaluateYDerivative22(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[22])/delta;
            rY[22] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = rY[23];
        // Units: dimensionless; Initial value: 0.00346258606821817
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__ass = _lt_0_row[33]; // dimensionless
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__aur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / (_lt_0_row[35]); // 1 / millisecond

        return d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__aur;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x288 = exp(-0.062899999999999998 * var_chaste_interface__cell__V);
            const double var_x290 = 1 / (2.0579999999999998 + 0.49299999999999999 * var_x288);
            const double var_x293 = -var_x290;
            
            partialF = var_x293;
        }
        else
        {
            const double y_save = rY[23];
            rY[23] += delta;
            const double temp = EvaluateYDerivative23(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[23])/delta;
            rY[23] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = rY[24];
        // Units: dimensionless; Initial value: 0.955684946168062
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__iss = _lt_0_row[36]; // dimensionless
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__iur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur + var_ultra_rapidly_activating_delayed_rectifier_K_I__iss) / (_lt_0_row[38]); // 1 / millisecond

        return d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__iur;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x294 = exp(7.7962962962962958 + 0.18518518518518517 * var_chaste_interface__cell__V);
            const double var_x295 = 1.0 + var_x294;
            const double var_x296 = 1 / var_x295;
            const double var_x297 = 1 / (643.0 + 1000.0 * var_x296);
            
            partialF = -var_x297;
        }
        else
        {
            const double y_save = rY[24];
            rY[24] += delta;
            const double temp = EvaluateYDerivative24(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[24])/delta;
            rY[24] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
        // Units: dimensionless; Initial value: 0.287585636847048
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__ass = _lt_0_row[33]; // dimensionless
        const double d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__aKss = (-var_chaste_interface__non_inactivating_steady_state_K_I__aKss + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / (_lt_0_row[34]); // 1 / millisecond

        return d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__aKss;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x301 = exp(-0.050000000000000003 * var_chaste_interface__cell__V);
            const double var_x302 = 1 / (13.17 + 39.299999999999997 * var_x301);
            
            partialF = -var_x302;
        }
        else
        {
            const double y_save = rY[25];
            rY[25] += delta;
            const double temp = EvaluateYDerivative25(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[25])/delta;
            rY[25] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        


        // Mathematics
        const double d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__iKss = 0; // 1 / millisecond

        return d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__iKss;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = 0;
        }
        else
        {
            const double y_save = rY[26];
            rY[26] += delta;
            const double temp = EvaluateYDerivative26(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[26])/delta;
            rY[26] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 = rY[29];
        // Units: dimensionless; Initial value: 0.00105586824723736
        double var_chaste_interface__rapid_delayed_rectifier_K_I__I_K = rY[30];
        // Units: dimensionless; Initial value: 0.00140618453684944
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_rapid_delayed_rectifier_K_I__alpha_a1 = _lt_0_row[25]; // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__alpha_i = _lt_0_row[26]; // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_a1 = _lt_0_row[27]; // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_i = _lt_0_row[28]; // per_millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__O_K = var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 * var_rapid_delayed_rectifier_K_I__alpha_a1 + var_chaste_interface__rapid_delayed_rectifier_K_I__I_K * var_rapid_delayed_rectifier_K_I__beta_i - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__alpha_i - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__beta_a1; // 1 / millisecond

        return d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__O_K;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x305 = exp(-0.041779999999999998 * var_chaste_interface__cell__V);
            const double var_x307 = exp(0.14349999999999999 + 0.0287 * var_chaste_interface__cell__V);
            const double var_x311 = 6.8899999999999994e-5 * var_x305;
            const double var_x312 = 0.070300000000000001 * var_x307;
            
            partialF = -var_x311 - var_x312;
        }
        else
        {
            const double y_save = rY[27];
            rY[27] += delta;
            const double temp = EvaluateYDerivative27(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[27])/delta;
            rY[27] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 = rY[28];
        // Units: dimensionless; Initial value: 0.0011733433957123
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 = rY[29];
        // Units: dimensionless; Initial value: 0.00105586824723736
        double var_chaste_interface__rapid_delayed_rectifier_K_I__I_K = rY[30];
        // Units: dimensionless; Initial value: 0.00140618453684944
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K1 = 0.036777999999999998 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 - 0.023761000000000001 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 + 0.022348 * (1.0 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 - var_chaste_interface__rapid_delayed_rectifier_K_I__I_K - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K) * _lt_0_row[29] - 0.047002000000000002 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 * _lt_0_row[30]; // 1 / millisecond

        return d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K1;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x315 = _lt_0_row[29];
            const double var_x316 = _lt_0_row[30];
            const double var_x317 = -0.022348 * var_x315;
            
            partialF = -0.023761000000000001 + var_x317 - 0.047002000000000002 * var_x316;
        }
        else
        {
            const double y_save = rY[28];
            rY[28] += delta;
            const double temp = EvaluateYDerivative28(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[28])/delta;
            rY[28] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 = rY[28];
        // Units: dimensionless; Initial value: 0.0011733433957123
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 = rY[29];
        // Units: dimensionless; Initial value: 0.00105586824723736
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_rapid_delayed_rectifier_K_I__alpha_a1 = _lt_0_row[25]; // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_a1 = _lt_0_row[27]; // per_millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K2 = 0.023761000000000001 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 - 0.036777999999999998 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 + var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__beta_a1 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 * var_rapid_delayed_rectifier_K_I__alpha_a1; // 1 / millisecond

        return d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K2;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x303 = exp(0.0109 * var_chaste_interface__cell__V);
            const double var_x313 = 0.033500000000000002 * var_x303;
            
            partialF = -0.036777999999999998 - var_x313;
        }
        else
        {
            const double y_save = rY[29];
            rY[29] += delta;
            const double temp = EvaluateYDerivative29(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[29])/delta;
            rY[29] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__rapid_delayed_rectifier_K_I__I_K = rY[30];
        // Units: dimensionless; Initial value: 0.00140618453684944
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_rapid_delayed_rectifier_K_I__alpha_i = _lt_0_row[26]; // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_i = _lt_0_row[28]; // per_millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__I_K = var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__alpha_i - var_chaste_interface__rapid_delayed_rectifier_K_I__I_K * var_rapid_delayed_rectifier_K_I__beta_i; // 1 / millisecond

        return d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__I_K;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x309 = exp(-0.16339999999999999 - 0.032680000000000001 * var_chaste_interface__cell__V);
            const double var_x314 = 0.0064970000000000002 * var_x309;
            
            partialF = -var_x314;
        }
        else
        {
            const double y_save = rY[30];
            rY[30] += delta;
            const double temp = EvaluateYDerivative30(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[30])/delta;
            rY[30] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
        // Units: dimensionless; Initial value: 0.00336735013094628
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_slow_delayed_rectifier_K_I__nKs = (1.0 - var_chaste_interface__slow_delayed_rectifier_K_I__nKs) * _lt_0_row[31] - 9.5333299999999997e-5 * var_chaste_interface__slow_delayed_rectifier_K_I__nKs * _lt_0_row[32]; // 1 / millisecond

        return d_dt_chaste_interface_var_slow_delayed_rectifier_K_I__nKs;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x319 = 1 / (1.0 - exp(9.9999999999766942e-8));
            const double var_x320 = 1 / (1.0 - exp(-9.9999999999766942e-8));
            const double var_x321 = _lt_0_row[32];
            const double var_x323 = 26.5 + var_chaste_interface__cell__V;
            const double var_x324 = fabs(var_x323) < 7.8124999999817923e-7;
            const double var_x325 = exp(-3.3919999999999999 - 0.128 * var_chaste_interface__cell__V);
            const double var_x326 = 1.0 - var_x325;
            const double var_x327 = 4.8133299999999997e-6 / var_x326;
            const double var_x328 = -9.5333299999999997e-5 * var_x321;
            const double var_x329 = -3.7604140624912359e-12 * var_x320;
            
            partialF = ((var_x324) ? (var_x328 + var_x329 + 640000.00000149151 * (26.499999218749998 + var_chaste_interface__cell__V) * (var_x329 - 3.7604140624912359e-12 * var_x319)) : (var_x328 - var_x323 * var_x327));
        }
        else
        {
            const double y_save = rY[31];
            rY[31] += delta;
            const double temp = EvaluateYDerivative31(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[31])/delta;
            rY[31] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = rY[32];
        // Units: dimensionless; Initial value: 0.0142335908879204
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_fast_transient_outward_K_I__ato_f = 0.18064 * (1.0 - var_chaste_interface__fast_transient_outward_K_I__ato_f) * _lt_0_row[21] - 0.39560000000000001 * var_chaste_interface__fast_transient_outward_K_I__ato_f * _lt_0_row[22]; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_transient_outward_K_I__ato_f;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x330 = _lt_0_row[21];
            const double var_x331 = _lt_0_row[22];
            
            partialF = -0.18064 * var_x330 - 0.39560000000000001 * var_x331;
        }
        else
        {
            const double y_save = rY[32];
            rY[32] += delta;
            const double temp = EvaluateYDerivative32(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[32])/delta;
            rY[32] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = rY[33];
        // Units: dimensionless; Initial value: 0.996989882138174
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_fast_transient_outward_K_I__ito_f = (-var_chaste_interface__fast_transient_outward_K_I__ito_f + _lt_0_row[23]) / (_lt_0_row[24]); // 1 / millisecond

        return d_dt_chaste_interface_var_fast_transient_outward_K_I__ito_f;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x185 = 0.20000000000000001 * var_chaste_interface__cell__V;
            const double var_x332 = exp(10.279999999999999 + var_x185);
            const double var_x333 = 1.0 + var_x332;
            const double var_x334 = 1 / var_x333;
            const double var_x335 = 1 / (9.6645000000000003 + 10.936199999999999 * var_x334);
            
            partialF = -var_x335;
        }
        else
        {
            const double y_save = rY[33];
            rY[33] += delta;
            const double temp = EvaluateYDerivative33(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[33])/delta;
            rY[33] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__slow_transient_outward_K_I__ato_s = rY[34];
        // Units: dimensionless; Initial value: 0.0443263407760382
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__ass = _lt_0_row[33]; // dimensionless
        const double d_dt_chaste_interface_var_slow_transient_outward_K_I__ato_s = (-var_chaste_interface__slow_transient_outward_K_I__ato_s + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / (_lt_0_row[35]); // 1 / millisecond

        return d_dt_chaste_interface_var_slow_transient_outward_K_I__ato_s;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x288 = exp(-0.062899999999999998 * var_chaste_interface__cell__V);
            const double var_x290 = 1 / (2.0579999999999998 + 0.49299999999999999 * var_x288);
            const double var_x293 = -var_x290;
            
            partialF = var_x293;
        }
        else
        {
            const double y_save = rY[34];
            rY[34] += delta;
            const double temp = EvaluateYDerivative34(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[34])/delta;
            rY[34] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluateYDerivative35(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__slow_transient_outward_K_I__ito_s = rY[35];
        // Units: dimensionless; Initial value: 0.887568880831388
        

        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__iss = _lt_0_row[36]; // dimensionless
        const double d_dt_chaste_interface_var_slow_transient_outward_K_I__ito_s = (-var_chaste_interface__slow_transient_outward_K_I__ito_s + var_ultra_rapidly_activating_delayed_rectifier_K_I__iss) / (_lt_0_row[37]); // 1 / millisecond

        return d_dt_chaste_interface_var_slow_transient_outward_K_I__ito_s;
    }

    double Cellli_mouse_2010FromCellMLGRL1Opt::EvaluatePartialDerivative35(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            


            const double var_x337 = exp(7.9298245614035094 + 0.17543859649122806 * var_chaste_interface__cell__V);
            const double var_x338 = 1.0 + var_x337;
            const double var_x339 = 1 / var_x338;
            const double var_x340 = 1 / (270.0 + 1050.0 * var_x339);
            
            partialF = -var_x340;
        }
        else
        {
            const double y_save = rY[35];
            rY[35] += delta;
            const double temp = EvaluateYDerivative35(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[35])/delta;
            rY[35] = y_save;
        }
        return partialF;
    }

    std::vector<double> Cellli_mouse_2010FromCellMLGRL1Opt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
        // Units: micromolar; Initial value: 171.167969039613
        double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
        // Units: dimensionless; Initial value: 0.000280539508743811
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[8];
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = rY[13];
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__potassium_concentration__Ki = rY[22];
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
        // Units: dimensionless; Initial value: 0.00336735013094628
        
        // Lookup table indexing
        const bool _oob_0 = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellli_mouse_2010FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__v1_caff = 10.0; // per_millisecond
        const double var_cell__F = 96.5; // coulomb_per_millimole
        const double var_cell__R = 8.3140000000000001; // joule_per_mole_kelvin
        const double var_cell__T = 308.0; // kelvin
        const double var_L_type_calcium_current__i_CaL = ((fabs(var_chaste_interface__cell__V) < 1.3267937823834197e-6) ? (-376848.31406265136 * (-1.3267937823834197e-6 + var_chaste_interface__cell__V) * (3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(9.9999999999999995e-8)) * mParameters[5]) + 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * mParameters[5])) - 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * mParameters[5])) : (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * _lt_0_row[0]) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((_lt_0_row[1]) * mParameters[5]))); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL_converted = HeartConfig::Instance()->GetCapacitance() * var_L_type_calcium_current__i_CaL; // uA_per_cm2
        const double var_cell__prepulses_number = 10000000000.0; // dimensionless
        const double var_chaste_interface__cell__stim_period = 333.33300000000003; // millisecond
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_fast_transient_outward_K_I__E_K = var_cell__R * var_cell__T * log(mParameters[2] / var_chaste_interface__potassium_concentration__Ki) / var_cell__F; // millivolt
        const double var_non_inactivating_steady_state_K_I__i_Kss = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * mParameters[8] * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss_converted = HeartConfig::Instance()->GetCapacitance() * var_non_inactivating_steady_state_K_I__i_Kss; // uA_per_cm2
        const double var_calcium_fluxes__J_rel = ((var_chaste_interface__environment__time < var_cell__prepulses_number * var_chaste_interface__cell__stim_period) ? ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * (var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2) * var_chaste_interface__calcium_fluxes__P_RyR * mParameters[0]) : ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * var_calcium_fluxes__v1_caff)); // micromolar_per_millisecond
        const double var_slow_delayed_rectifier_K_I__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[10]; // picoA_per_picoF
        const double var_slow_delayed_rectifier_K_I__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_slow_delayed_rectifier_K_I__i_Ks; // uA_per_cm2
        const double var_sodium_calcium_exchange_current__K_mAllo = 0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mCai = 3.6000000000000001; // micromolar
        const double var_sodium_calcium_exchange_current__K_mCao = 1400.0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mNai = 12000.0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mNao = 88000.0; // micromolar
        const double var_sodium_calcium_exchange_current__eta = 0.34999999999999998; // dimensionless
        const double var_sodium_calcium_exchange_current__k_sat = 0.27000000000000002; // dimensionless
        const double var_fast_sodium_current__E_Na = var_cell__R * var_cell__T * log((mParameters[3] + 0.1111111111111111 * mParameters[2]) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)) / var_cell__F; // millivolt
        const double var_fast_sodium_current__i_Na = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_chaste_interface__fast_sodium_current__O_Na * mParameters[6]; // picoA_per_picoF
        const double var_fast_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_rapid_delayed_rectifier_K_I__i_Kr = (-var_cell__R * var_cell__T * log((mParameters[2] + 0.020408163265306124 * mParameters[3]) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) / var_cell__F + var_chaste_interface__cell__V) * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * mParameters[9]; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_rapid_delayed_rectifier_K_I__i_Kr; // uA_per_cm2
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * exp(var_cell__F * var_chaste_interface__cell__V * var_sodium_calcium_exchange_current__eta / (var_cell__R * var_cell__T)) - pow(mParameters[3], 3) * var_calcium_concentration__Cai * exp((-1.0 + var_sodium_calcium_exchange_current__eta) * var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))) * mParameters[11] / ((1.0 + pow(var_sodium_calcium_exchange_current__K_mAllo, 2) / pow(var_calcium_concentration__Cai, 2)) * (1.0 + var_sodium_calcium_exchange_current__k_sat * exp((-1.0 + var_sodium_calcium_exchange_current__eta) * var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))) * (pow(mParameters[3], 3) * var_calcium_concentration__Cai + pow(var_sodium_calcium_exchange_current__K_mNao, 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] + pow(var_chaste_interface__sodium_concentration__Nai, 3) * var_sodium_calcium_exchange_current__K_mCao + pow(mParameters[3], 3) * (1.0 + pow(var_chaste_interface__sodium_concentration__Nai, 3) / pow(var_sodium_calcium_exchange_current__K_mNai, 3)) * var_sodium_calcium_exchange_current__K_mCai + pow(var_sodium_calcium_exchange_current__K_mNai, 3) * (1.0 + var_calcium_concentration__Cai / var_sodium_calcium_exchange_current__K_mCai) * mParameters[1])); // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX_converted = HeartConfig::Instance()->GetCapacitance() * var_sodium_calcium_exchange_current__i_NCX; // uA_per_cm2
        const double var_time_independent_K_I__i_K1 = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[2] * mParameters[7] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + mParameters[2])); // picoA_per_picoF
        const double var_time_independent_K_I__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_time_independent_K_I__i_K1; // uA_per_cm2

        std::vector<double> dqs(11);
        dqs[0] = var_calcium_fluxes__J_rel;
        dqs[1] = var_chaste_interface__calcium_concentration__Cai_converted;
        dqs[2] = var_L_type_calcium_current__i_CaL_converted;
        dqs[3] = var_fast_sodium_current__i_Na_converted;
        dqs[4] = var_time_independent_K_I__i_K1_converted;
        dqs[5] = var_non_inactivating_steady_state_K_I__i_Kss_converted;
        dqs[6] = var_rapid_delayed_rectifier_K_I__i_Kr_converted;
        dqs[7] = var_slow_delayed_rectifier_K_I__i_Ks_converted;
        dqs[8] = var_sodium_calcium_exchange_current__i_NCX_converted;
        dqs[9] = var_cell__i_Stim_converted;
        dqs[10] = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellli_mouse_2010FromCellMLGRL1Opt>::Initialise(void)
{
    this->mSystemName = "Li_Mouse_2010";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-78.9452115785979);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(9.499150681398009e-05);

    // rY[2]:
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(0.0954184301907784);

    // rY[3]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(171.167969039613);

    // rY[4]:
    this->mVariableNames.push_back("calcium_concentration__CaNSR");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(404.825013216286);

    // rY[5]:
    this->mVariableNames.push_back("calcium_fluxes__P_RyR");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000280539508743811);

    // rY[6]:
    this->mVariableNames.push_back("calcium_fluxes__CaMKt");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.729027738385079);

    // rY[7]:
    this->mVariableNames.push_back("ryanodine_receptors__P_O1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00571393383393735);

    // rY[8]:
    this->mVariableNames.push_back("ryanodine_receptors__P_O2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.09864618235341e-08);

    // rY[9]:
    this->mVariableNames.push_back("ryanodine_receptors__P_C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.565182571165673);

    // rY[10]:
    this->mVariableNames.push_back("L_type_calcium_current__O");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.23713515513533e-06);

    // rY[11]:
    this->mVariableNames.push_back("L_type_calcium_current__I");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.427651445872853);

    // rY[12]:
    this->mVariableNames.push_back("L_type_calcium_current__y_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.845044436980163);

    // rY[13]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(12364.7482121793);

    // rY[14]:
    this->mVariableNames.push_back("fast_sodium_current__O_Na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.46826771436314e-06);

    // rY[15]:
    this->mVariableNames.push_back("fast_sodium_current__C_Na1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000420472760277688);

    // rY[16]:
    this->mVariableNames.push_back("fast_sodium_current__C_Na2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0240114508843199);

    // rY[17]:
    this->mVariableNames.push_back("fast_sodium_current__I1_Na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000517471697712382);

    // rY[18]:
    this->mVariableNames.push_back("fast_sodium_current__I2_Na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.45406116958509e-05);

    // rY[19]:
    this->mVariableNames.push_back("fast_sodium_current__IF_Na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000306123648969581);

    // rY[20]:
    this->mVariableNames.push_back("fast_sodium_current__IC_Na2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0174528857380179);

    // rY[21]:
    this->mVariableNames.push_back("fast_sodium_current__IC_Na3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.402980726914811);

    // rY[22]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(115599.50642567);

    // rY[23]:
    this->mVariableNames.push_back("ultra_rapidly_activating_delayed_rectifier_K_I__aur");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00346258606821817);

    // rY[24]:
    this->mVariableNames.push_back("ultra_rapidly_activating_delayed_rectifier_K_I__iur");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.955684946168062);

    // rY[25]:
    this->mVariableNames.push_back("non_inactivating_steady_state_K_I__aKss");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.287585636847048);

    // rY[26]:
    this->mVariableNames.push_back("non_inactivating_steady_state_K_I__iKss");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[27]:
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_I__O_K");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0131742086125972);

    // rY[28]:
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_I__C_K1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0011733433957123);

    // rY[29]:
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_I__C_K2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00105586824723736);

    // rY[30]:
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_I__I_K");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00140618453684944);

    // rY[31]:
    this->mVariableNames.push_back("slow_delayed_rectifier_K_I__nKs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00336735013094628);

    // rY[32]:
    this->mVariableNames.push_back("fast_transient_outward_K_I__ato_f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0142335908879204);

    // rY[33]:
    this->mVariableNames.push_back("fast_transient_outward_K_I__ito_f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.996989882138174);

    // rY[34]:
    this->mVariableNames.push_back("slow_transient_outward_K_I__ato_s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0443263407760382);

    // rY[35]:
    this->mVariableNames.push_back("slow_transient_outward_K_I__ito_s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.887568880831388);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[1]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[2]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[4]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[5]:
    this->mParameterNames.push_back("membrane_capacitance");
    this->mParameterUnits.push_back("microF_per_cm2");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_non_inactivating_steady_state_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("picoA_per_picoF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("micromolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_concentration");
    this->mDerivedQuantityUnits.push_back("millimolar");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_non_inactivating_steady_state_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellli_mouse_2010FromCellMLGRL1Opt)

