//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: priebe_beuckelmann_1998
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: GeneralizedRushLarsenFirstOrderOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "priebe_beuckelmann_1998.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<21; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__cell__V)
    {
        const double _offset_0 = var_chaste_interface__cell__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__cell__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__cell__V>mTableMaxs[0] || var_chaste_interface__cell__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables(const Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables&);
    Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables& operator= (const Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables&);
    Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 21;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][21];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(1.1304347826086956 + 0.043478260869565216 * var_chaste_interface__cell__V);

                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.14710000000000001 - 0.25101580310038191 * exp(-0.08830693125184777 * pow((-1 + 0.15937778911130945 * var_chaste_interface__cell__V), 2)) / sqrt(M_PI);

                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.89836705491478086 * pow((-1 + 0.044722719141323794 * var_chaste_interface__cell__V), 2));

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.00054739999999999997 + (0.0112 + 0.068699999999999997 * exp(-1.06213655 - 0.1081 * var_chaste_interface__cell__V)) / (1.0 + exp(-2.7305064499999996 - 0.27789999999999998 * var_chaste_interface__cell__V));

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-1.0052757950443461 + 0.16333730787449161 * var_chaste_interface__cell__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-0.51325540000000003 - 0.12620000000000001 * var_chaste_interface__cell__V);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.0021416822000000003 + 0.00052660000000000001 * var_chaste_interface__cell__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(5.1411779999999991 + 0.078299999999999995 * var_chaste_interface__cell__V);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.105056 + 0.0016000000000000001 * var_chaste_interface__cell__V);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-0.17842998931347828 - 0.069846547135942336 * var_chaste_interface__cell__V);

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(1.0082174462705435 + 0.063211125158027806 * var_chaste_interface__cell__V);

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(47.130000000000003 + var_chaste_interface__cell__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[11] < 2){
                    double left = _lookup_table_0[i-1][11];
                    double right = _lookup_table_0[i+1][11];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 11 at ["<<i<<"][11] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[11] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[11] >= 2){
                    EXCEPTION("Lookup table 11 at ["<<i<<"][11] has non-finite value: " << val);
                }
                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.090909090909090912 * var_chaste_interface__cell__V);

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(6.9907280000000006e-6 - 0.1348 * var_chaste_interface__cell__V);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.51490000000000002 * exp(0.67236288 - 0.13439999999999999 * var_chaste_interface__cell__V) + 5.1860000000000002e-5 * var_chaste_interface__cell__V;

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(3.9880601600000003 - 0.094299999999999995 * var_chaste_interface__cell__V);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.70203392000000009 - 0.0166 * var_chaste_interface__cell__V);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-5.9326369200000002 - 0.17319999999999999 * var_chaste_interface__cell__V);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 5.6119999999999998e-5 * var_chaste_interface__cell__V + 0.072099999999999997 * exp(-5.9257863000000004 - 0.17299999999999999 * var_chaste_interface__cell__V);

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-5.4573693999999993 - 0.16039999999999999 * var_chaste_interface__cell__V);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.0001215 * var_chaste_interface__cell__V + 0.076700000000000004 * exp(-5.6479010000000002e-8 - 1.6600000000000001e-9 * var_chaste_interface__cell__V);

                _lookup_table_0[i][20] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[21];

    // Lookup tables
    double (*_lookup_table_0)[21];
    int _lookup_table_0_num_misshit_piecewise[21] = {0};

};

std::shared_ptr<Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables> Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -15.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 3.0; // ms
        const double var_chaste_interface__cell__stim_offset = 100.0; // ms
        const double var_chaste_interface__cell__stim_period = 2000.0; // ms
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractGeneralizedRushLarsenCardiacCell(
                22,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 22.0; // (var_Irel__G_rel_max) [per_ms]
        this->mParameters[1] = 153.40000000000001; // (var_cell__Cm) [pF]
        this->mParameters[2] = 1.0; // (var_Ionic_concentrations__conc_clamp) [dimensionless]
        this->mParameters[3] = 2.0; // (var_Ionic_concentrations__Cao) [mM]
        this->mParameters[4] = 4.0; // (var_Ionic_concentrations__Ko) [mM]
        this->mParameters[5] = 138.0; // (var_Ionic_concentrations__Nao) [mM]
        this->mParameters[6] = 96.486699999999999; // (var_cell__F) [coulomb_per_millimole]
        this->mParameters[7] = 8.3142999999999994; // (var_cell__R) [joule_per_mole_kelvin]
        this->mParameters[8] = 0.064000000000000001; // (var_ICa__g_Ca_max) [mS_per_uF]
        this->mParameters[9] = 16.0; // (var_INa__g_Na) [mS_per_uF]
        this->mParameters[10] = 0; // (var_INa__perc_reduced_inact_for_IpNa) [dimensionless]
        this->mParameters[11] = 0; // (var_INa__shift_INa_inact) [mV]
        this->mParameters[12] = 1.0; // (var_IK1__g_K1_scale) [dimensionless]
        this->mParameters[13] = 0.014999999999999999; // (var_IKr__g_Kr_max) [mS_per_uF]
        this->mParameters[14] = 0.02; // (var_IKs__g_Ks_max) [mS_per_uF]
        this->mParameters[15] = 1000.0; // (var_INaCa__K_NaCa_normal) [uA_per_uF]
        this->mParameters[16] = 1.0; // (var_Ito__g_to_max_factor) [dimensionless]
        this->mParameters[17] = 310.14999999999998; // (var_cell__T) [kelvin]
    }

    Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::~Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt()
    {
    }

    AbstractLookupTableCollection* Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::GetLookupTableCollection()
    {
        return Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance();
    }
    
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = rY[5];
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = rY[6];
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = rY[7];
        // Units: dimensionless; Initial value: 1.75032478501027e-05
        double var_chaste_interface__Ito_t_gate__t = rY[8];
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[9];
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[10];
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__Ionic_concentrations__Ki = rY[19];
        // Units: mM; Initial value: 140.0
        
        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        const double var_cell__FonRT = mParameters[6] / (mParameters[7] * mParameters[17]); // per_mV
        const double var_ICa__E_Ca = 0.5 * log(mParameters[3] / var_chaste_interface__Ionic_concentrations__Cai) / var_cell__FonRT; // mV
        const double var_IK1__E_K1 = log(mParameters[4] / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_INa__E_Na = log(mParameters[5] / var_chaste_interface__Ionic_concentrations__Nai) / var_cell__FonRT; // mV
        const double var_cell__failing = 0; // dimensionless
        const double var_cell__dVdt = -(-var_ICa__E_Ca + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.00084999999999999995) : (0.0012999999999999999)) - (-var_INa__E_Na + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.001) : (0)) - pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (-log((mParameters[4] + 0.018329999999999999 * mParameters[5]) / (var_chaste_interface__Ionic_concentrations__Ki + 0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT + var_chaste_interface__cell__V) * mParameters[14] - (-log(mParameters[4] / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT + var_chaste_interface__cell__V) * mParameters[13] * var_chaste_interface__IKr_Xr_gate__Xr / (_lt_0_row[0]) - (-log((mParameters[4] + 0.042999999999999997 * mParameters[5]) / (var_chaste_interface__Ionic_concentrations__Ki + 0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.29999999999999999 * mParameters[16]) : (0.191 * mParameters[16])) * var_chaste_interface__Ito_r_gate__r * var_chaste_interface__Ito_t_gate__t - (pow(var_chaste_interface__Ionic_concentrations__Nai, 3) * mParameters[3] * exp(0.34999999999999998 * var_cell__FonRT * var_chaste_interface__cell__V) - pow(mParameters[5], 3) * var_chaste_interface__Ionic_concentrations__Cai * exp(-0.65000000000000002 * var_cell__FonRT * var_chaste_interface__cell__V)) * ((var_cell__failing == 0) ? (mParameters[15]) : (1650.0)) / ((1.0 + 0.10000000000000001 * exp(-0.65000000000000002 * var_cell__FonRT * var_chaste_interface__cell__V)) * (669921.875 + pow(mParameters[5], 3)) * (1.3799999999999999 + mParameters[3])) - ((var_cell__failing == 0) ? (1.3) : (0.75)) * mParameters[4] / ((1.0 + 31.622776601683793 * pow((1 / var_chaste_interface__Ionic_concentrations__Nai), 1.5)) * (1.5 + mParameters[4]) * (1.0 + 0.1245 * exp(-0.10000000000000001 * var_cell__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[5])) * exp(-var_cell__FonRT * var_chaste_interface__cell__V))) - pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_INa__E_Na + var_chaste_interface__cell__V) * mParameters[9] * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j - 0.10000000000000001 * (-var_IK1__E_K1 + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (2.5) : (2.0)) * mParameters[12] / ((1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)) * (0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)) + (exp(-1.0 + 0.10000000000000001 * var_chaste_interface__cell__V - 0.10000000000000001 * var_IK1__E_K1) + 3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.00020000000000000001 * var_IK1__E_K1)) / (1.0 + exp(0.5 * var_IK1__E_K1 - 0.5 * var_chaste_interface__cell__V)))) - 0.00059999999999999995 * (-var_ICa__E_Ca + var_chaste_interface__cell__V) * mParameters[8] * var_chaste_interface__ICa_d_gate__d * var_chaste_interface__ICa_f_gate__f / (0.00059999999999999995 + var_chaste_interface__Ionic_concentrations__Cai); // mV_per_ms
        const double var_chaste_interface__i_ionic = -HeartConfig::Instance()->GetCapacitance() * var_cell__dVdt; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        unsigned v_index = GetVoltageIndex();
        const double delta = 1e-8;

        double d_dt_chaste_interface_var_cell__V;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = rY[5];
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = rY[6];
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = rY[7];
        // Units: dimensionless; Initial value: 1.75032478501027e-05
        double var_chaste_interface__Ito_t_gate__t = rY[8];
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[9];
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[10];
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__Ionic_concentrations__Ki = rY[19];
        // Units: mM; Initial value: 140.0
        

        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_cell__FonRT = mParameters[6] / (mParameters[7] * mParameters[17]); // per_mV
        const double var_ICa__E_Ca = 0.5 * log(mParameters[3] / var_chaste_interface__Ionic_concentrations__Cai) / var_cell__FonRT; // mV
        const double var_IK1__E_K1 = log(mParameters[4] / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_INa__E_Na = log(mParameters[5] / var_chaste_interface__Ionic_concentrations__Nai) / var_cell__FonRT; // mV
        const double var_ICa__i_Ca = 0.00059999999999999995 * (-var_ICa__E_Ca + var_chaste_interface__cell__V) * mParameters[8] * var_chaste_interface__ICa_d_gate__d * var_chaste_interface__ICa_f_gate__f / (0.00059999999999999995 + var_chaste_interface__Ionic_concentrations__Cai); // uA_per_uF
        const double var_IKr__i_Kr = (-log(mParameters[4] / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT + var_chaste_interface__cell__V) * mParameters[13] * var_chaste_interface__IKr_Xr_gate__Xr / (_lt_0_row[0]); // uA_per_uF
        const double var_IKs__i_Ks = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (-log((mParameters[4] + 0.018329999999999999 * mParameters[5]) / (var_chaste_interface__Ionic_concentrations__Ki + 0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT + var_chaste_interface__cell__V) * mParameters[14]; // uA_per_uF
        const double var_INa__i_Na = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_INa__E_Na + var_chaste_interface__cell__V) * mParameters[9] * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_cell__failing = 0; // dimensionless
        const double var_ICab__i_b_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.00084999999999999995) : (0.0012999999999999999)); // uA_per_uF
        const double var_IK1__i_K1 = 0.10000000000000001 * (-var_IK1__E_K1 + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (2.5) : (2.0)) * mParameters[12] / ((1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)) * (0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)) + (exp(-1.0 + 0.10000000000000001 * var_chaste_interface__cell__V - 0.10000000000000001 * var_IK1__E_K1) + 3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.00020000000000000001 * var_IK1__E_K1)) / (1.0 + exp(0.5 * var_IK1__E_K1 - 0.5 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Ionic_concentrations__Nai, 3) * mParameters[3] * exp(0.34999999999999998 * var_cell__FonRT * var_chaste_interface__cell__V) - pow(mParameters[5], 3) * var_chaste_interface__Ionic_concentrations__Cai * exp(-0.65000000000000002 * var_cell__FonRT * var_chaste_interface__cell__V)) * ((var_cell__failing == 0) ? (mParameters[15]) : (1650.0)) / ((1.0 + 0.10000000000000001 * exp(-0.65000000000000002 * var_cell__FonRT * var_chaste_interface__cell__V)) * (669921.875 + pow(mParameters[5], 3)) * (1.3799999999999999 + mParameters[3])); // uA_per_uF
        const double var_INaK__i_NaK = ((var_cell__failing == 0) ? (1.3) : (0.75)) * mParameters[4] / ((1.0 + 31.622776601683793 * pow((1 / var_chaste_interface__Ionic_concentrations__Nai), 1.5)) * (1.5 + mParameters[4]) * (1.0 + 0.1245 * exp(-0.10000000000000001 * var_cell__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[5])) * exp(-var_cell__FonRT * var_chaste_interface__cell__V))); // uA_per_uF
        const double var_INab__i_b_Na = (-var_INa__E_Na + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.001) : (0)); // uA_per_uF
        const double var_Ito__i_to = (-log((mParameters[4] + 0.042999999999999997 * mParameters[5]) / (var_chaste_interface__Ionic_concentrations__Ki + 0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.29999999999999999 * mParameters[16]) : (0.191 * mParameters[16])) * var_chaste_interface__Ito_r_gate__r * var_chaste_interface__Ito_t_gate__t; // uA_per_uF
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_cell__dVdt = -var_ICa__i_Ca - var_ICab__i_b_Ca - var_IK1__i_K1 - var_IKr__i_Kr - var_IKs__i_Ks - var_INa__i_Na - var_INaCa__i_NaCa - var_INaK__i_NaK - var_INab__i_b_Na - var_Ito__i_to - var_cell__i_Stim; // mV_per_ms
        d_dt_chaste_interface_var_cell__V = var_cell__dVdt; // mV / ms

        double evalF = d_dt_chaste_interface_var_cell__V;
        mEvalF[0] = d_dt_chaste_interface_var_cell__V;
        double partialF = EvaluatePartialDerivative0(var_chaste_interface__environment__time, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] += evalF*mDt;
        }
        else
        {
            rY[v_index] += (evalF/partialF)*(exp(partialF*mDt)-1.0);
        }
    }

    void Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        const double delta = 1e-8;

        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = rY[5];
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = rY[6];
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = rY[7];
        // Units: dimensionless; Initial value: 1.75032478501027e-05
        double var_chaste_interface__Ito_t_gate__t = rY[8];
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[9];
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[10];
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Irel__APtrack = rY[11];
        // Units: dimensionless; Initial value: -1.372158997089e-136
        double var_chaste_interface__Irel__APtrack2 = rY[12];
        // Units: dimensionless; Initial value: -7.58517896402761e-136
        double var_chaste_interface__Irel__APtrack3 = rY[13];
        // Units: dimensionless; Initial value: 4.82035353592764e-05
        double var_chaste_interface__Irel__Cainfluxtrack = rY[14];
        // Units: mM; Initial value: -7.71120176147331e-138
        double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__Ionic_concentrations__Ki = rY[19];
        // Units: mM; Initial value: 140.0
        double var_chaste_interface__Ionic_concentrations__Ca_JSR = rY[20];
        // Units: mM; Initial value: 2.5
        double var_chaste_interface__Ionic_concentrations__Ca_NSR = rY[21];
        // Units: mM; Initial value: 2.5
        

        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_Irel__OVRLDtrack = 0; // 1 / ms
        const double d_dt_chaste_interface_var_Irel__OVRLDtrack2 = 0; // 1 / ms
        const double d_dt_chaste_interface_var_Irel__OVRLDtrack3 = 0; // 1 / ms
        const double var_Ionic_concentrations__volume = 12100.0 * M_PI; // fL
        const double var_Ionic_concentrations__V_JSR = 0.0047999999999999996 * var_Ionic_concentrations__volume; // fL
        const double var_Ionic_concentrations__V_NSR = 0.055199999999999999 * var_Ionic_concentrations__volume; // fL
        const double var_Ionic_concentrations__V_myo = 0.68000000000000005 * var_Ionic_concentrations__volume; // fL
        const double d_dt_chaste_interface_var_Irel__APtrack2 = (((var_chaste_interface__Irel__APtrack > 0.17999999999999999) && (var_chaste_interface__Irel__APtrack < 0.20000000000000001)) ? (100.0 - 100.5 * var_chaste_interface__Irel__APtrack2) : (-0.5 * var_chaste_interface__Irel__APtrack2)); // 1 / ms
        const double d_dt_chaste_interface_var_Irel__APtrack3 = (((var_chaste_interface__Irel__APtrack > 0.17999999999999999) && (var_chaste_interface__Irel__APtrack < 0.20000000000000001)) ? (100.0 - 100.5 * var_chaste_interface__Irel__APtrack3) : (-0.01 * var_chaste_interface__Irel__APtrack3)); // 1 / ms
        const double var_Irel__i_rel = (-var_chaste_interface__Ionic_concentrations__Cai + var_chaste_interface__Ionic_concentrations__Ca_JSR) * ((var_chaste_interface__Irel__Cainfluxtrack > 5.0000000000000004e-6) ? ((1.0 - var_chaste_interface__Irel__APtrack2) * (-5.0000000000000004e-6 + var_chaste_interface__Irel__Cainfluxtrack) * var_chaste_interface__Irel__APtrack2 * mParameters[0] / (0.00079500000000000003 + var_chaste_interface__Irel__Cainfluxtrack)) : (0)); // mM_per_ms
        const double var_Itr__i_tr = 0.0055555555555555558 * var_chaste_interface__Ionic_concentrations__Ca_NSR - 0.0055555555555555558 * var_chaste_interface__Ionic_concentrations__Ca_JSR; // mM_per_ms
        const double d_dt_chaste_interface_var_Ionic_concentrations__Ca_JSR = (-var_Irel__i_rel + var_Itr__i_tr) / (1.0 + 8.0 / pow((0.80000000000000004 + var_chaste_interface__Ionic_concentrations__Ca_JSR), 2)); // mM / ms
        const double var_cell__FonRT = mParameters[6] / (mParameters[7] * mParameters[17]); // per_mV
        const double var_ICa__E_Ca = 0.5 * log(mParameters[3] / var_chaste_interface__Ionic_concentrations__Cai) / var_cell__FonRT; // mV
        const double var_IK1__E_K1 = log(mParameters[4] / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_INa__E_Na = log(mParameters[5] / var_chaste_interface__Ionic_concentrations__Nai) / var_cell__FonRT; // mV
        const double var_ICa__i_Ca = 0.00059999999999999995 * (-var_ICa__E_Ca + var_chaste_interface__cell__V) * mParameters[8] * var_chaste_interface__ICa_d_gate__d * var_chaste_interface__ICa_f_gate__f / (0.00059999999999999995 + var_chaste_interface__Ionic_concentrations__Cai); // uA_per_uF
        const double d_dt_chaste_interface_var_ICa_d_gate__d = -(_lt_0_row[1]) * var_chaste_interface__ICa_d_gate__d + 0.63524014987941491 * (1.0 - var_chaste_interface__ICa_d_gate__d) * _lt_0_row[2] / sqrt(M_PI); // 1 / ms
        const double d_dt_chaste_interface_var_ICa_f_gate__f = -(_lt_0_row[3]) * var_chaste_interface__ICa_f_gate__f + 0.0068719999999999996 * (1.0 - var_chaste_interface__ICa_f_gate__f) / (_lt_0_row[4]); // 1 / ms
        const double var_IKr__i_Kr = (-log(mParameters[4] / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT + var_chaste_interface__cell__V) * mParameters[13] * var_chaste_interface__IKr_Xr_gate__Xr / (_lt_0_row[0]); // uA_per_uF
        const double d_dt_chaste_interface_var_IKr_Xr_gate__Xr = 0.0050000000000000001 * (1.0 - var_chaste_interface__IKr_Xr_gate__Xr) * _lt_0_row[6] / (_lt_0_row[5]) - 0.016 * var_chaste_interface__IKr_Xr_gate__Xr * _lt_0_row[8] / (_lt_0_row[7]); // 1 / ms
        const double var_IKs__i_Ks = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (-log((mParameters[4] + 0.018329999999999999 * mParameters[5]) / (var_chaste_interface__Ionic_concentrations__Ki + 0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT + var_chaste_interface__cell__V) * mParameters[14]; // uA_per_uF
        const double d_dt_chaste_interface_var_IKs_Xs_gate__Xs = 0.0030130000000000001 * (1.0 - var_chaste_interface__IKs_Xs_gate__Xs) / (_lt_0_row[9]) - 0.0058700000000000002 * var_chaste_interface__IKs_Xs_gate__Xs / (_lt_0_row[10]); // 1 / ms
        const double var_INa__i_Na = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_INa__E_Na + var_chaste_interface__cell__V) * mParameters[9] * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INa_h_gate__alpha_h = ((var_chaste_interface__cell__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[11] - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_ms
        const double var_INa_h_gate__beta_h = ((var_chaste_interface__cell__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V - 0.34999999999999998 * mParameters[11]) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * mParameters[11])) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * mParameters[11] - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_ms
        const double d_dt_chaste_interface_var_INa_h_gate__h = (var_INa_h_gate__alpha_h + var_INa_h_gate__beta_h) * (-var_chaste_interface__INa_h_gate__h + 0.01 * mParameters[10] + (1.0 - 0.01 * mParameters[10]) * var_INa_h_gate__alpha_h / (var_INa_h_gate__alpha_h + var_INa_h_gate__beta_h)); // 1 / ms
        const double var_INa_j_gate__alpha_j = ((var_chaste_interface__cell__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24399999999999999 * var_chaste_interface__cell__V - 0.24399999999999999 * mParameters[11]) - 3.4740000000000003e-5 * exp(0.043909999999999998 * mParameters[11] - 0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * mParameters[11]))) : (0)); // per_ms
        const double var_INa_j_gate__beta_j = ((var_chaste_interface__cell__V < -40.0) ? (0.1212 * exp(0.01052 * mParameters[11] - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[11] - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.29999999999999999 * exp(2.5349999999999999e-7 * mParameters[11] - 2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[11] - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double d_dt_chaste_interface_var_INa_j_gate__j = (var_INa_j_gate__alpha_j + var_INa_j_gate__beta_j) * (-var_chaste_interface__INa_j_gate__j + 0.01 * mParameters[10] + (1.0 - 0.01 * mParameters[10]) * var_INa_j_gate__alpha_j / (var_INa_j_gate__alpha_j + var_INa_j_gate__beta_j)); // 1 / ms
        const double d_dt_chaste_interface_var_INa_m_gate__m = (1.0 - var_chaste_interface__INa_m_gate__m) * _lt_0_row[11] - 0.080000000000000002 * var_chaste_interface__INa_m_gate__m * _lt_0_row[12]; // 1 / ms
        const double d_dt_chaste_interface_var_Ito_r_gate__r = -(_lt_0_row[14]) * var_chaste_interface__Ito_r_gate__r / (_lt_0_row[13]) + 0.52659999999999996 * (1.0 - var_chaste_interface__Ito_r_gate__r) * _lt_0_row[16] / (_lt_0_row[15]); // 1 / ms
        const double d_dt_chaste_interface_var_Ito_t_gate__t = (1.0 - var_chaste_interface__Ito_t_gate__t) * (_lt_0_row[18]) / (_lt_0_row[17]) - (_lt_0_row[20]) * var_chaste_interface__Ito_t_gate__t / (_lt_0_row[19]); // 1 / ms
        const double var_cell__failing = 0; // dimensionless
        const double var_ICab__i_b_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.00084999999999999995) : (0.0012999999999999999)); // uA_per_uF
        const double var_IK1__i_K1 = 0.10000000000000001 * (-var_IK1__E_K1 + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (2.5) : (2.0)) * mParameters[12] / ((1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)) * (0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)) + (exp(-1.0 + 0.10000000000000001 * var_chaste_interface__cell__V - 0.10000000000000001 * var_IK1__E_K1) + 3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.00020000000000000001 * var_IK1__E_K1)) / (1.0 + exp(0.5 * var_IK1__E_K1 - 0.5 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Ionic_concentrations__Nai, 3) * mParameters[3] * exp(0.34999999999999998 * var_cell__FonRT * var_chaste_interface__cell__V) - pow(mParameters[5], 3) * var_chaste_interface__Ionic_concentrations__Cai * exp(-0.65000000000000002 * var_cell__FonRT * var_chaste_interface__cell__V)) * ((var_cell__failing == 0) ? (mParameters[15]) : (1650.0)) / ((1.0 + 0.10000000000000001 * exp(-0.65000000000000002 * var_cell__FonRT * var_chaste_interface__cell__V)) * (669921.875 + pow(mParameters[5], 3)) * (1.3799999999999999 + mParameters[3])); // uA_per_uF
        const double d_dt_chaste_interface_var_Irel__Cainfluxtrack = ((var_chaste_interface__Irel__APtrack > 0.20000000000000001) ? (-0.5 * (-var_INaCa__i_NaCa + var_ICa__i_Ca + var_ICab__i_b_Ca) * mParameters[1] / (var_Ionic_concentrations__V_myo * mParameters[6])) : ((var_chaste_interface__Irel__APtrack2 > 0.01) ? (0) : (-0.5 * var_chaste_interface__Irel__Cainfluxtrack))); // mM / ms
        const double var_INaK__i_NaK = ((var_cell__failing == 0) ? (1.3) : (0.75)) * mParameters[4] / ((1.0 + 31.622776601683793 * pow((1 / var_chaste_interface__Ionic_concentrations__Nai), 1.5)) * (1.5 + mParameters[4]) * (1.0 + 0.1245 * exp(-0.10000000000000001 * var_cell__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[5])) * exp(-var_cell__FonRT * var_chaste_interface__cell__V))); // uA_per_uF
        const double var_INab__i_b_Na = (-var_INa__E_Na + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.001) : (0)); // uA_per_uF
        const double d_dt_chaste_interface_var_Ionic_concentrations__Nai = -(3.0 * var_INaCa__i_NaCa + 3.0 * var_INaK__i_NaK + var_INa__i_Na + var_INab__i_b_Na) * mParameters[2] * mParameters[1] / (var_Ionic_concentrations__V_myo * mParameters[6]); // mM / ms
        const double var_Ileak__i_leak = ((var_cell__failing == 0) ? (0.00025999999999999998) : (0.00017000000000000001)) * var_chaste_interface__Ionic_concentrations__Ca_NSR; // mM_per_ms
        const double var_Ito__i_to = (-log((mParameters[4] + 0.042999999999999997 * mParameters[5]) / (var_chaste_interface__Ionic_concentrations__Ki + 0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.29999999999999999 * mParameters[16]) : (0.191 * mParameters[16])) * var_chaste_interface__Ito_r_gate__r * var_chaste_interface__Ito_t_gate__t; // uA_per_uF
        const double var_Iup__i_up = ((var_cell__failing == 0) ? (0.0044999999999999997) : (0.0015)) * var_chaste_interface__Ionic_concentrations__Cai / (0.00092000000000000003 + var_chaste_interface__Ionic_concentrations__Cai); // mM_per_ms
        const double d_dt_chaste_interface_var_Ionic_concentrations__Ca_NSR = var_Iup__i_up - var_Ileak__i_leak - var_Ionic_concentrations__V_JSR * var_Itr__i_tr / var_Ionic_concentrations__V_NSR; // mM / ms
        const double d_dt_chaste_interface_var_Ionic_concentrations__Cai = ((-var_Iup__i_up + var_Ileak__i_leak) * var_Ionic_concentrations__V_NSR / var_Ionic_concentrations__V_myo + var_Ionic_concentrations__V_JSR * var_Irel__i_rel / var_Ionic_concentrations__V_myo - 0.5 * (-2.0 * var_INaCa__i_NaCa + var_ICa__i_Ca + var_ICab__i_b_Ca) * mParameters[1] / (var_Ionic_concentrations__V_myo * mParameters[6])) / (1.0 + 0.00011900000000000002 / pow((0.0023800000000000002 + var_chaste_interface__Ionic_concentrations__Cai), 2) + 3.5000000000000004e-5 / pow((0.00050000000000000001 + var_chaste_interface__Ionic_concentrations__Cai), 2)); // mM / ms
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double d_dt_chaste_interface_var_Ionic_concentrations__Ki = -(-2.0 * var_INaK__i_NaK + var_IK1__i_K1 + var_IKr__i_Kr + var_IKs__i_Ks + var_Ito__i_to + var_cell__i_Stim) * mParameters[2] * mParameters[1] / (var_Ionic_concentrations__V_myo * mParameters[6]); // mM / ms
        const double var_cell__dVdt = -var_ICa__i_Ca - var_ICab__i_b_Ca - var_IK1__i_K1 - var_IKr__i_Kr - var_IKs__i_Ks - var_INa__i_Na - var_INaCa__i_NaCa - var_INaK__i_NaK - var_INab__i_b_Na - var_Ito__i_to - var_cell__i_Stim; // mV_per_ms
        const double d_dt_chaste_interface_var_Irel__APtrack = ((var_cell__dVdt > 150.0) ? (100.0 - 100.5 * var_chaste_interface__Irel__APtrack) : (-0.5 * var_chaste_interface__Irel__APtrack)); // 1 / ms
        
        mEvalF[1] = d_dt_chaste_interface_var_Ionic_concentrations__Cai;
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__environment__time, rY, delta);
        mEvalF[2] = d_dt_chaste_interface_var_INa_m_gate__m;
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__environment__time, rY, delta);
        mEvalF[3] = d_dt_chaste_interface_var_INa_h_gate__h;
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__environment__time, rY, delta);
        mEvalF[4] = d_dt_chaste_interface_var_INa_j_gate__j;
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__environment__time, rY, delta);
        mEvalF[5] = d_dt_chaste_interface_var_ICa_d_gate__d;
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__environment__time, rY, delta);
        mEvalF[6] = d_dt_chaste_interface_var_ICa_f_gate__f;
        mPartialF[6] = EvaluatePartialDerivative6(var_chaste_interface__environment__time, rY, delta);
        mEvalF[7] = d_dt_chaste_interface_var_Ito_r_gate__r;
        mPartialF[7] = EvaluatePartialDerivative7(var_chaste_interface__environment__time, rY, delta);
        mEvalF[8] = d_dt_chaste_interface_var_Ito_t_gate__t;
        mPartialF[8] = EvaluatePartialDerivative8(var_chaste_interface__environment__time, rY, delta);
        mEvalF[9] = d_dt_chaste_interface_var_IKs_Xs_gate__Xs;
        mPartialF[9] = EvaluatePartialDerivative9(var_chaste_interface__environment__time, rY, delta);
        mEvalF[10] = d_dt_chaste_interface_var_IKr_Xr_gate__Xr;
        mPartialF[10] = EvaluatePartialDerivative10(var_chaste_interface__environment__time, rY, delta);
        mEvalF[11] = d_dt_chaste_interface_var_Irel__APtrack;
        mPartialF[11] = EvaluatePartialDerivative11(var_chaste_interface__environment__time, rY, delta);
        mEvalF[12] = d_dt_chaste_interface_var_Irel__APtrack2;
        mPartialF[12] = EvaluatePartialDerivative12(var_chaste_interface__environment__time, rY, delta);
        mEvalF[13] = d_dt_chaste_interface_var_Irel__APtrack3;
        mPartialF[13] = EvaluatePartialDerivative13(var_chaste_interface__environment__time, rY, delta);
        mEvalF[14] = d_dt_chaste_interface_var_Irel__Cainfluxtrack;
        mPartialF[14] = EvaluatePartialDerivative14(var_chaste_interface__environment__time, rY, delta);
        mEvalF[15] = d_dt_chaste_interface_var_Irel__OVRLDtrack;
        mPartialF[15] = EvaluatePartialDerivative15(var_chaste_interface__environment__time, rY, delta);
        mEvalF[16] = d_dt_chaste_interface_var_Irel__OVRLDtrack2;
        mPartialF[16] = EvaluatePartialDerivative16(var_chaste_interface__environment__time, rY, delta);
        mEvalF[17] = d_dt_chaste_interface_var_Irel__OVRLDtrack3;
        mPartialF[17] = EvaluatePartialDerivative17(var_chaste_interface__environment__time, rY, delta);
        mEvalF[18] = d_dt_chaste_interface_var_Ionic_concentrations__Nai;
        mPartialF[18] = EvaluatePartialDerivative18(var_chaste_interface__environment__time, rY, delta);
        mEvalF[19] = d_dt_chaste_interface_var_Ionic_concentrations__Ki;
        mPartialF[19] = EvaluatePartialDerivative19(var_chaste_interface__environment__time, rY, delta);
        mEvalF[20] = d_dt_chaste_interface_var_Ionic_concentrations__Ca_JSR;
        mPartialF[20] = EvaluatePartialDerivative20(var_chaste_interface__environment__time, rY, delta);
        mEvalF[21] = d_dt_chaste_interface_var_Ionic_concentrations__Ca_NSR;
        mPartialF[21] = EvaluatePartialDerivative21(var_chaste_interface__environment__time, rY, delta);
        
        {
            if (fabs(mPartialF[1]) < delta){
                rY[1] += mDt*d_dt_chaste_interface_var_Ionic_concentrations__Cai;
            }
            else
            {
                rY[1] += (d_dt_chaste_interface_var_Ionic_concentrations__Cai/mPartialF[1])*(exp(mPartialF[1]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[2]) < delta){
                rY[2] += mDt*d_dt_chaste_interface_var_INa_m_gate__m;
            }
            else
            {
                rY[2] += (d_dt_chaste_interface_var_INa_m_gate__m/mPartialF[2])*(exp(mPartialF[2]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[3]) < delta){
                rY[3] += mDt*d_dt_chaste_interface_var_INa_h_gate__h;
            }
            else
            {
                rY[3] += (d_dt_chaste_interface_var_INa_h_gate__h/mPartialF[3])*(exp(mPartialF[3]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[4]) < delta){
                rY[4] += mDt*d_dt_chaste_interface_var_INa_j_gate__j;
            }
            else
            {
                rY[4] += (d_dt_chaste_interface_var_INa_j_gate__j/mPartialF[4])*(exp(mPartialF[4]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[5]) < delta){
                rY[5] += mDt*d_dt_chaste_interface_var_ICa_d_gate__d;
            }
            else
            {
                rY[5] += (d_dt_chaste_interface_var_ICa_d_gate__d/mPartialF[5])*(exp(mPartialF[5]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[6]) < delta){
                rY[6] += mDt*d_dt_chaste_interface_var_ICa_f_gate__f;
            }
            else
            {
                rY[6] += (d_dt_chaste_interface_var_ICa_f_gate__f/mPartialF[6])*(exp(mPartialF[6]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[7]) < delta){
                rY[7] += mDt*d_dt_chaste_interface_var_Ito_r_gate__r;
            }
            else
            {
                rY[7] += (d_dt_chaste_interface_var_Ito_r_gate__r/mPartialF[7])*(exp(mPartialF[7]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[8]) < delta){
                rY[8] += mDt*d_dt_chaste_interface_var_Ito_t_gate__t;
            }
            else
            {
                rY[8] += (d_dt_chaste_interface_var_Ito_t_gate__t/mPartialF[8])*(exp(mPartialF[8]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[9]) < delta){
                rY[9] += mDt*d_dt_chaste_interface_var_IKs_Xs_gate__Xs;
            }
            else
            {
                rY[9] += (d_dt_chaste_interface_var_IKs_Xs_gate__Xs/mPartialF[9])*(exp(mPartialF[9]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[10]) < delta){
                rY[10] += mDt*d_dt_chaste_interface_var_IKr_Xr_gate__Xr;
            }
            else
            {
                rY[10] += (d_dt_chaste_interface_var_IKr_Xr_gate__Xr/mPartialF[10])*(exp(mPartialF[10]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[11]) < delta){
                rY[11] += mDt*d_dt_chaste_interface_var_Irel__APtrack;
            }
            else
            {
                rY[11] += (d_dt_chaste_interface_var_Irel__APtrack/mPartialF[11])*(exp(mPartialF[11]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[12]) < delta){
                rY[12] += mDt*d_dt_chaste_interface_var_Irel__APtrack2;
            }
            else
            {
                rY[12] += (d_dt_chaste_interface_var_Irel__APtrack2/mPartialF[12])*(exp(mPartialF[12]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[13]) < delta){
                rY[13] += mDt*d_dt_chaste_interface_var_Irel__APtrack3;
            }
            else
            {
                rY[13] += (d_dt_chaste_interface_var_Irel__APtrack3/mPartialF[13])*(exp(mPartialF[13]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[14]) < delta){
                rY[14] += mDt*d_dt_chaste_interface_var_Irel__Cainfluxtrack;
            }
            else
            {
                rY[14] += (d_dt_chaste_interface_var_Irel__Cainfluxtrack/mPartialF[14])*(exp(mPartialF[14]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[15]) < delta){
                rY[15] += mDt*d_dt_chaste_interface_var_Irel__OVRLDtrack;
            }
            else
            {
                rY[15] += (d_dt_chaste_interface_var_Irel__OVRLDtrack/mPartialF[15])*(exp(mPartialF[15]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[16]) < delta){
                rY[16] += mDt*d_dt_chaste_interface_var_Irel__OVRLDtrack2;
            }
            else
            {
                rY[16] += (d_dt_chaste_interface_var_Irel__OVRLDtrack2/mPartialF[16])*(exp(mPartialF[16]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[17]) < delta){
                rY[17] += mDt*d_dt_chaste_interface_var_Irel__OVRLDtrack3;
            }
            else
            {
                rY[17] += (d_dt_chaste_interface_var_Irel__OVRLDtrack3/mPartialF[17])*(exp(mPartialF[17]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[18]) < delta){
                rY[18] += mDt*d_dt_chaste_interface_var_Ionic_concentrations__Nai;
            }
            else
            {
                rY[18] += (d_dt_chaste_interface_var_Ionic_concentrations__Nai/mPartialF[18])*(exp(mPartialF[18]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[19]) < delta){
                rY[19] += mDt*d_dt_chaste_interface_var_Ionic_concentrations__Ki;
            }
            else
            {
                rY[19] += (d_dt_chaste_interface_var_Ionic_concentrations__Ki/mPartialF[19])*(exp(mPartialF[19]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[20]) < delta){
                rY[20] += mDt*d_dt_chaste_interface_var_Ionic_concentrations__Ca_JSR;
            }
            else
            {
                rY[20] += (d_dt_chaste_interface_var_Ionic_concentrations__Ca_JSR/mPartialF[20])*(exp(mPartialF[20]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[21]) < delta){
                rY[21] += mDt*d_dt_chaste_interface_var_Ionic_concentrations__Ca_NSR;
            }
            else
            {
                rY[21] += (d_dt_chaste_interface_var_Ionic_concentrations__Ca_NSR/mPartialF[21])*(exp(mPartialF[21]*mDt)-1.0);
            }
            
        }        
        
    }
   
    
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        double d_dt_chaste_interface_var_cell__V;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = rY[5];
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = rY[6];
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = rY[7];
        // Units: dimensionless; Initial value: 1.75032478501027e-05
        double var_chaste_interface__Ito_t_gate__t = rY[8];
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[9];
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[10];
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__Ionic_concentrations__Ki = rY[19];
        // Units: mM; Initial value: 140.0
        

        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_cell__FonRT = mParameters[6] / (mParameters[7] * mParameters[17]); // per_mV
        const double var_ICa__E_Ca = 0.5 * log(mParameters[3] / var_chaste_interface__Ionic_concentrations__Cai) / var_cell__FonRT; // mV
        const double var_IK1__E_K1 = log(mParameters[4] / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_INa__E_Na = log(mParameters[5] / var_chaste_interface__Ionic_concentrations__Nai) / var_cell__FonRT; // mV
        const double var_ICa__i_Ca = 0.00059999999999999995 * (-var_ICa__E_Ca + var_chaste_interface__cell__V) * mParameters[8] * var_chaste_interface__ICa_d_gate__d * var_chaste_interface__ICa_f_gate__f / (0.00059999999999999995 + var_chaste_interface__Ionic_concentrations__Cai); // uA_per_uF
        const double var_IKr__i_Kr = (-log(mParameters[4] / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT + var_chaste_interface__cell__V) * mParameters[13] * var_chaste_interface__IKr_Xr_gate__Xr / (_lt_0_row[0]); // uA_per_uF
        const double var_IKs__i_Ks = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (-log((mParameters[4] + 0.018329999999999999 * mParameters[5]) / (var_chaste_interface__Ionic_concentrations__Ki + 0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT + var_chaste_interface__cell__V) * mParameters[14]; // uA_per_uF
        const double var_INa__i_Na = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_INa__E_Na + var_chaste_interface__cell__V) * mParameters[9] * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_cell__failing = 0; // dimensionless
        const double var_ICab__i_b_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.00084999999999999995) : (0.0012999999999999999)); // uA_per_uF
        const double var_IK1__i_K1 = 0.10000000000000001 * (-var_IK1__E_K1 + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (2.5) : (2.0)) * mParameters[12] / ((1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)) * (0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)) + (exp(-1.0 + 0.10000000000000001 * var_chaste_interface__cell__V - 0.10000000000000001 * var_IK1__E_K1) + 3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.00020000000000000001 * var_IK1__E_K1)) / (1.0 + exp(0.5 * var_IK1__E_K1 - 0.5 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Ionic_concentrations__Nai, 3) * mParameters[3] * exp(0.34999999999999998 * var_cell__FonRT * var_chaste_interface__cell__V) - pow(mParameters[5], 3) * var_chaste_interface__Ionic_concentrations__Cai * exp(-0.65000000000000002 * var_cell__FonRT * var_chaste_interface__cell__V)) * ((var_cell__failing == 0) ? (mParameters[15]) : (1650.0)) / ((1.0 + 0.10000000000000001 * exp(-0.65000000000000002 * var_cell__FonRT * var_chaste_interface__cell__V)) * (669921.875 + pow(mParameters[5], 3)) * (1.3799999999999999 + mParameters[3])); // uA_per_uF
        const double var_INaK__i_NaK = ((var_cell__failing == 0) ? (1.3) : (0.75)) * mParameters[4] / ((1.0 + 31.622776601683793 * pow((1 / var_chaste_interface__Ionic_concentrations__Nai), 1.5)) * (1.5 + mParameters[4]) * (1.0 + 0.1245 * exp(-0.10000000000000001 * var_cell__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[5])) * exp(-var_cell__FonRT * var_chaste_interface__cell__V))); // uA_per_uF
        const double var_INab__i_b_Na = (-var_INa__E_Na + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.001) : (0)); // uA_per_uF
        const double var_Ito__i_to = (-log((mParameters[4] + 0.042999999999999997 * mParameters[5]) / (var_chaste_interface__Ionic_concentrations__Ki + 0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.29999999999999999 * mParameters[16]) : (0.191 * mParameters[16])) * var_chaste_interface__Ito_r_gate__r * var_chaste_interface__Ito_t_gate__t; // uA_per_uF
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_cell__dVdt = -var_ICa__i_Ca - var_ICab__i_b_Ca - var_IK1__i_K1 - var_IKr__i_Kr - var_IKs__i_Ks - var_INa__i_Na - var_INaCa__i_NaCa - var_INaK__i_NaK - var_INab__i_b_Na - var_Ito__i_to - var_cell__i_Stim; // mV_per_ms
        d_dt_chaste_interface_var_cell__V = var_cell__dVdt; // mV / ms

        return d_dt_chaste_interface_var_cell__V;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -90.7796417483135
            double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
            // Units: mM; Initial value: 0.0002
            double var_chaste_interface__INa_m_gate__m = rY[2];
            // Units: dimensionless; Initial value: 0.000585525582501575
            double var_chaste_interface__INa_h_gate__h = rY[3];
            // Units: dimensionless; Initial value: 0.995865529216237
            double var_chaste_interface__INa_j_gate__j = rY[4];
            // Units: dimensionless; Initial value: 0.997011204496203
            double var_chaste_interface__ICa_d_gate__d = rY[5];
            // Units: dimensionless; Initial value: 2.50653215966786e-10
            double var_chaste_interface__ICa_f_gate__f = rY[6];
            // Units: dimensionless; Initial value: 0.92130376850548
            double var_chaste_interface__Ito_r_gate__r = rY[7];
            // Units: dimensionless; Initial value: 1.75032478501027e-05
            double var_chaste_interface__Ito_t_gate__t = rY[8];
            // Units: dimensionless; Initial value: 0.999897251531651
            double var_chaste_interface__IKs_Xs_gate__Xs = rY[9];
            // Units: dimensionless; Initial value: 0.00885658064818147
            double var_chaste_interface__IKr_Xr_gate__Xr = rY[10];
            // Units: dimensionless; Initial value: 0.000215523048438941
            double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
            // Units: mM; Initial value: 10.0
            double var_chaste_interface__Ionic_concentrations__Ki = rY[19];
            // Units: mM; Initial value: 140.0
            


            const double var_x0 = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * mParameters[14];
            const double var_x1 = var_x0;
            const double var_x2 = mParameters[13] * var_chaste_interface__IKr_Xr_gate__Xr;
            const double var_x3 = exp(1.1304347826086956 + 0.043478260869565216 * var_chaste_interface__cell__V);
            const double var_x4 = 1.0 + var_x3;
            const double var_x5 = 1 / var_x4;
            const double var_x6 = var_x5;
            const double var_x7 = var_x2 * var_x6;
            const double var_x8 = mParameters[16] * var_chaste_interface__Ito_t_gate__t;
            const double var_x9 = var_x8 * var_chaste_interface__Ito_r_gate__r;
            const double var_x10 = 0.29999999999999999 * var_x9;
            const double var_x11 = 1 / var_chaste_interface__Ionic_concentrations__Ki;
            const double var_x12 = 1 / mParameters[6];
            const double var_x13 = var_x12 * mParameters[7] * mParameters[17];
            const double var_x14 = var_x13 * log(var_x11 * mParameters[4]);
            const double var_x15 = exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_x14);
            const double var_x16 = 1.0 + var_x15;
            const double var_x17 = 1 / var_x16;
            const double var_x18 = exp(0.5 * var_x14 - 0.5 * var_chaste_interface__cell__V);
            const double var_x19 = 1.0 + var_x18;
            const double var_x20 = 1 / var_x19;
            const double var_x21 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x22 = exp(-1.0 + var_x21 - 0.10000000000000001 * var_x14);
            const double var_x23 = exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.00020000000000000001 * var_x14);
            const double var_x24 = var_x22 + 3.0 * var_x23;
            const double var_x25 = 0.10000000000000001 * var_x17 + var_x20 * var_x24;
            const double var_x26 = mParameters[12] / var_x25;
            const double var_x27 = 0.25 * var_x17;
            const double var_x28 = var_x26 * var_x27;
            const double var_x29 = pow(var_chaste_interface__INa_m_gate__m, 3);
            const double var_x30 = var_x29 * mParameters[9] * var_chaste_interface__INa_j_gate__j;
            const double var_x31 = var_x30 * var_chaste_interface__INa_h_gate__h;
            const double var_x32 = var_x31;
            const double var_x33 = 0.00059999999999999995 + var_chaste_interface__Ionic_concentrations__Cai;
            const double var_x34 = 1 / var_x33;
            const double var_x35 = var_x34 * mParameters[8] * var_chaste_interface__ICa_f_gate__f;
            const double var_x36 = 0.00059999999999999995 * var_x35;
            const double var_x37 = var_x36 * var_chaste_interface__ICa_d_gate__d;
            const double var_x38 = -var_x14 + var_chaste_interface__cell__V;
            const double var_x39 = 0.043478260869565216 * var_x2 * var_x3 * var_x38 / pow(var_x4, 2);
            const double var_x40 = var_x15 / pow(var_x16, 2);
            const double var_x41 = 0.014999999999999999 * var_x26 * var_x38 * var_x40;
            const double var_x42 = 1 / var_chaste_interface__Ionic_concentrations__Nai;
            const double var_x43 = pow(var_x42, 1.5);
            const double var_x44 = 1 / (1.5 + mParameters[4]);
            const double var_x45 = var_x44 * mParameters[4] / (1.0 + 31.622776601683793 * var_x43);
            const double var_x46 = 1.3 * var_x45;
            const double var_x47 = mParameters[6] / (mParameters[7] * mParameters[17]);
            const double var_x48 = exp(-var_x21 * var_x47);
            const double var_x49 = exp(0.01485884101040119 * mParameters[5]);
            const double var_x50 = var_x47 * var_chaste_interface__cell__V;
            const double var_x51 = exp(-var_x50);
            const double var_x52 = 1.0 + 0.1245 * var_x48 + 0.036499999999999998 * var_x51 * (-0.14285714285714285 + 0.14285714285714285 * var_x49);
            const double var_x53 = (0.012450000000000001 * var_x47 * var_x48 + var_x47 * var_x51 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x49)) / pow(var_x52, 2);
            const double var_x54 = 0.10000000000000001 * var_x22;
            const double var_x55 = 0.00060000000000000006 * var_x23;
            const double var_x56 = 0.0060000000000000001 * var_x40;
            const double var_x57 = 0.5 * var_x18 * var_x24 / pow(var_x19, 2);
            const double var_x58 = var_x27 * var_x38 * mParameters[12] / pow(var_x25, 2);
            const double var_x59 = var_x58 * (var_x56 - var_x57 - var_x20 * (var_x54 + var_x55));
            const double var_x60 = 0.34999999999999998 * var_chaste_interface__cell__V;
            const double var_x61 = mParameters[3] * exp(var_x47 * var_x60);
            const double var_x62 = var_x61 * pow(var_chaste_interface__Ionic_concentrations__Nai, 3);
            const double var_x63 = exp(-0.65000000000000002 * var_x50);
            const double var_x64 = pow(mParameters[5], 3);
            const double var_x65 = var_x63 * var_x64;
            const double var_x66 = var_x65 * var_chaste_interface__Ionic_concentrations__Cai;
            const double var_x67 = 1.0 + 0.10000000000000001 * var_x63;
            const double var_x68 = mParameters[15] / ((669921.875 + var_x64) * (1.3799999999999999 + mParameters[3]));
            const double var_x69 = var_x68 / var_x67;
            const double var_x70 = var_x69 * (0.34999999999999998 * var_x47 * var_x62 + 0.65000000000000002 * var_x47 * var_x66);
            const double var_x71 = var_x62 - var_x66;
            const double var_x72 = var_x47 * var_x63 * var_x68 * var_x71 / pow(var_x67, 2);
            const double var_x73 = -var_x70 - 0.065000000000000002 * var_x72;
            
            partialF = -0.0018500000000000001 + var_x39 + var_x41 + var_x73 - var_x1 - var_x10 - var_x28 - var_x32 - var_x37 - var_x59 - var_x7 - var_x46 * var_x53;
        }
        else
        {
            const double y_save = rY[0];
            rY[0] += delta;
            const double temp = EvaluateYDerivative0(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[0])/delta;
            rY[0] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__ICa_d_gate__d = rY[5];
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = rY[6];
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Irel__APtrack2 = rY[12];
        // Units: dimensionless; Initial value: -7.58517896402761e-136
        double var_chaste_interface__Irel__Cainfluxtrack = rY[14];
        // Units: mM; Initial value: -7.71120176147331e-138
        double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__Ionic_concentrations__Ca_JSR = rY[20];
        // Units: mM; Initial value: 2.5
        double var_chaste_interface__Ionic_concentrations__Ca_NSR = rY[21];
        // Units: mM; Initial value: 2.5
        


        // Mathematics
        const double var_Ionic_concentrations__volume = 12100.0 * M_PI; // fL
        const double var_Ionic_concentrations__V_JSR = 0.0047999999999999996 * var_Ionic_concentrations__volume; // fL
        const double var_Ionic_concentrations__V_NSR = 0.055199999999999999 * var_Ionic_concentrations__volume; // fL
        const double var_Ionic_concentrations__V_myo = 0.68000000000000005 * var_Ionic_concentrations__volume; // fL
        const double var_Irel__i_rel = (-var_chaste_interface__Ionic_concentrations__Cai + var_chaste_interface__Ionic_concentrations__Ca_JSR) * ((var_chaste_interface__Irel__Cainfluxtrack > 5.0000000000000004e-6) ? ((1.0 - var_chaste_interface__Irel__APtrack2) * (-5.0000000000000004e-6 + var_chaste_interface__Irel__Cainfluxtrack) * var_chaste_interface__Irel__APtrack2 * mParameters[0] / (0.00079500000000000003 + var_chaste_interface__Irel__Cainfluxtrack)) : (0)); // mM_per_ms
        const double var_cell__FonRT = mParameters[6] / (mParameters[7] * mParameters[17]); // per_mV
        const double var_ICa__E_Ca = 0.5 * log(mParameters[3] / var_chaste_interface__Ionic_concentrations__Cai) / var_cell__FonRT; // mV
        const double var_ICa__i_Ca = 0.00059999999999999995 * (-var_ICa__E_Ca + var_chaste_interface__cell__V) * mParameters[8] * var_chaste_interface__ICa_d_gate__d * var_chaste_interface__ICa_f_gate__f / (0.00059999999999999995 + var_chaste_interface__Ionic_concentrations__Cai); // uA_per_uF
        const double var_cell__failing = 0; // dimensionless
        const double var_ICab__i_b_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.00084999999999999995) : (0.0012999999999999999)); // uA_per_uF
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Ionic_concentrations__Nai, 3) * mParameters[3] * exp(0.34999999999999998 * var_cell__FonRT * var_chaste_interface__cell__V) - pow(mParameters[5], 3) * var_chaste_interface__Ionic_concentrations__Cai * exp(-0.65000000000000002 * var_cell__FonRT * var_chaste_interface__cell__V)) * ((var_cell__failing == 0) ? (mParameters[15]) : (1650.0)) / ((1.0 + 0.10000000000000001 * exp(-0.65000000000000002 * var_cell__FonRT * var_chaste_interface__cell__V)) * (669921.875 + pow(mParameters[5], 3)) * (1.3799999999999999 + mParameters[3])); // uA_per_uF
        const double var_Ileak__i_leak = ((var_cell__failing == 0) ? (0.00025999999999999998) : (0.00017000000000000001)) * var_chaste_interface__Ionic_concentrations__Ca_NSR; // mM_per_ms
        const double var_Iup__i_up = ((var_cell__failing == 0) ? (0.0044999999999999997) : (0.0015)) * var_chaste_interface__Ionic_concentrations__Cai / (0.00092000000000000003 + var_chaste_interface__Ionic_concentrations__Cai); // mM_per_ms
        const double d_dt_chaste_interface_var_Ionic_concentrations__Cai = ((-var_Iup__i_up + var_Ileak__i_leak) * var_Ionic_concentrations__V_NSR / var_Ionic_concentrations__V_myo + var_Ionic_concentrations__V_JSR * var_Irel__i_rel / var_Ionic_concentrations__V_myo - 0.5 * (-2.0 * var_INaCa__i_NaCa + var_ICa__i_Ca + var_ICab__i_b_Ca) * mParameters[1] / (var_Ionic_concentrations__V_myo * mParameters[6])) / (1.0 + 0.00011900000000000002 / pow((0.0023800000000000002 + var_chaste_interface__Ionic_concentrations__Cai), 2) + 3.5000000000000004e-5 / pow((0.00050000000000000001 + var_chaste_interface__Ionic_concentrations__Cai), 2)); // mM / ms

        return d_dt_chaste_interface_var_Ionic_concentrations__Cai;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -90.7796417483135
            double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
            // Units: mM; Initial value: 0.0002
            double var_chaste_interface__ICa_d_gate__d = rY[5];
            // Units: dimensionless; Initial value: 2.50653215966786e-10
            double var_chaste_interface__ICa_f_gate__f = rY[6];
            // Units: dimensionless; Initial value: 0.92130376850548
            double var_chaste_interface__Irel__APtrack2 = rY[12];
            // Units: dimensionless; Initial value: -7.58517896402761e-136
            double var_chaste_interface__Irel__Cainfluxtrack = rY[14];
            // Units: mM; Initial value: -7.71120176147331e-138
            double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
            // Units: mM; Initial value: 10.0
            double var_chaste_interface__Ionic_concentrations__Ca_JSR = rY[20];
            // Units: mM; Initial value: 2.5
            double var_chaste_interface__Ionic_concentrations__Ca_NSR = rY[21];
            // Units: mM; Initial value: 2.5
            


            const double var_x12 = 1 / mParameters[6];
            const double var_x13 = var_x12 * mParameters[7] * mParameters[17];
            const double var_x33 = 0.00059999999999999995 + var_chaste_interface__Ionic_concentrations__Cai;
            const double var_x34 = 1 / var_x33;
            const double var_x35 = var_x34 * mParameters[8] * var_chaste_interface__ICa_f_gate__f;
            const double var_x36 = 0.00059999999999999995 * var_x35;
            const double var_x37 = var_x36 * var_chaste_interface__ICa_d_gate__d;
            const double var_x47 = mParameters[6] / (mParameters[7] * mParameters[17]);
            const double var_x50 = var_x47 * var_chaste_interface__cell__V;
            const double var_x60 = 0.34999999999999998 * var_chaste_interface__cell__V;
            const double var_x61 = mParameters[3] * exp(var_x47 * var_x60);
            const double var_x62 = var_x61 * pow(var_chaste_interface__Ionic_concentrations__Nai, 3);
            const double var_x63 = exp(-0.65000000000000002 * var_x50);
            const double var_x64 = pow(mParameters[5], 3);
            const double var_x65 = var_x63 * var_x64;
            const double var_x66 = var_x65 * var_chaste_interface__Ionic_concentrations__Cai;
            const double var_x67 = 1.0 + 0.10000000000000001 * var_x63;
            const double var_x68 = mParameters[15] / ((669921.875 + var_x64) * (1.3799999999999999 + mParameters[3]));
            const double var_x69 = var_x68 / var_x67;
            const double var_x71 = var_x62 - var_x66;
            const double var_x74 = 1 / var_chaste_interface__Ionic_concentrations__Cai;
            const double var_x75 = 0.00042499999999999998 * var_x13;
            const double var_x76 = var_x74 * var_x75;
            const double var_x77 = log(var_x74 * mParameters[3]);
            const double var_x78 = -0.5 * var_x13 * var_x77 + var_chaste_interface__cell__V;
            const double var_x79 = 0.00059999999999999995 * var_x78 * mParameters[8] * var_chaste_interface__ICa_d_gate__d;
            const double var_x80 = var_x79 * var_chaste_interface__ICa_f_gate__f / pow(var_x33, 2);
            const double var_x81 = var_x65 * var_x69;
            const double var_x83 = 0.00029999999999999997 * var_x13 * var_x35 * var_x74 * var_chaste_interface__ICa_d_gate__d;
            const double var_x117 = 0.0023800000000000002 + var_chaste_interface__Ionic_concentrations__Cai;
            const double var_x118 = 0.00050000000000000001 + var_chaste_interface__Ionic_concentrations__Cai;
            const double var_x119 = 1.0 + 0.00011900000000000002 / pow(var_x117, 2) + 3.5000000000000004e-5 / pow(var_x118, 2);
            const double var_x120 = 1 / var_x119;
            const double var_x122 = var_x12 * mParameters[1] / M_PI;
            const double var_x123 = 6.076810889645114e-5 * var_x122;
            const double var_x124 = 0.00079500000000000003 + var_chaste_interface__Irel__Cainfluxtrack;
            const double var_x125 = 1 / var_x124;
            const double var_x126 = 1.0 - var_chaste_interface__Irel__APtrack2;
            const double var_x127 = -5.0000000000000004e-6 + var_chaste_interface__Irel__Cainfluxtrack;
            const double var_x128 = var_x125 * var_x126 * var_x127 * mParameters[0];
            const double var_x129 = var_x128 * var_chaste_interface__Irel__APtrack2;
            const double var_x130 = var_chaste_interface__Irel__Cainfluxtrack > 5.0000000000000004e-6;
            const double var_x131 = ((var_x130) ? (-var_x129) : (0));
            const double var_x132 = 0.00092000000000000003 + var_chaste_interface__Ionic_concentrations__Cai;
            const double var_x133 = 1 / var_x132;
            const double var_x134 = 0.00036529411764705876 * var_x133;
            const double var_x135 = var_chaste_interface__Ionic_concentrations__Cai / pow(var_x132, 2);
            const double var_x136 = var_x76 + var_x83 - var_x80;
            const double var_x137 = -var_chaste_interface__Ionic_concentrations__Cai + var_chaste_interface__Ionic_concentrations__Ca_JSR;
            const double var_x138 = ((var_x130) ? (var_x129 * var_x137) : (0));
            const double var_x139 = var_x69 * var_x71;
            const double var_x140 = var_x37 * var_x78 - var_x75 * var_x77;
            
            partialF = var_x120 * (-var_x134 + 0.0070588235294117632 * var_x131 + 0.00036529411764705876 * var_x135 - var_x123 * (var_x136 + 2.0 * var_x81)) + (0.00023800000000000004 / pow(var_x117, 3) + 7.0000000000000007e-5 / pow(var_x118, 3)) * (0.0070588235294117632 * var_x138 + 2.1105882352941172e-5 * var_chaste_interface__Ionic_concentrations__Ca_NSR - var_x123 * (var_x140 + 0.00084999999999999995 * var_chaste_interface__cell__V - 2.0 * var_x139) - var_x134 * var_chaste_interface__Ionic_concentrations__Cai) / pow(var_x119, 2);
        }
        else
        {
            const double y_save = rY[1];
            rY[1] += delta;
            const double temp = EvaluateYDerivative1(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[1])/delta;
            rY[1] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__INa_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.000585525582501575
        

        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_INa_m_gate__m = (1.0 - var_chaste_interface__INa_m_gate__m) * _lt_0_row[11] - 0.080000000000000002 * var_chaste_interface__INa_m_gate__m * _lt_0_row[12]; // 1 / ms

        return d_dt_chaste_interface_var_INa_m_gate__m;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -90.7796417483135
            

        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x21 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x151 = 1 / (1.0 - exp(1.0000000000287557e-7));
            const double var_x152 = 1 / (1.0 - exp(-1.0000000000287557e-7));
            const double var_x153 = _lt_0_row[12];
            const double var_x155 = 47.130000000000003 + var_chaste_interface__cell__V;
            const double var_x156 = fabs(var_x155) < 1.0000000000287557e-6;
            const double var_x157 = -var_x21;
            const double var_x158 = exp(-4.7130000000000001 + var_x157);
            const double var_x159 = 1.0 - var_x158;
            const double var_x160 = 0.32000000000000001 / var_x159;
            const double var_x161 = -0.080000000000000002 * var_x153;
            const double var_x162 = -3.200000000092018e-7 * var_x152;
            
            partialF = ((var_x156) ? (var_x161 + var_x162 + 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (var_x162 - 3.200000000092018e-7 * var_x151)) : (var_x161 - var_x155 * var_x160));
        }
        else
        {
            const double y_save = rY[2];
            rY[2] += delta;
            const double temp = EvaluateYDerivative2(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[2])/delta;
            rY[2] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__INa_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.995865529216237
        


        // Mathematics
        const double var_INa_h_gate__alpha_h = ((var_chaste_interface__cell__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[11] - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_ms
        const double var_INa_h_gate__beta_h = ((var_chaste_interface__cell__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V - 0.34999999999999998 * mParameters[11]) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * mParameters[11])) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * mParameters[11] - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_ms
        const double d_dt_chaste_interface_var_INa_h_gate__h = (var_INa_h_gate__alpha_h + var_INa_h_gate__beta_h) * (-var_chaste_interface__INa_h_gate__h + 0.01 * mParameters[10] + (1.0 - 0.01 * mParameters[10]) * var_INa_h_gate__alpha_h / (var_INa_h_gate__alpha_h + var_INa_h_gate__beta_h)); // 1 / ms

        return d_dt_chaste_interface_var_INa_h_gate__h;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -90.7796417483135
            


            const double var_x60 = 0.34999999999999998 * var_chaste_interface__cell__V;
            const double var_x163 = exp(-11.764705882352942 + 0.14705882352941177 * mParameters[11] - 0.14705882352941177 * var_chaste_interface__cell__V);
            const double var_x164 = var_chaste_interface__cell__V < -40.0;
            const double var_x165 = ((var_x164) ? (0.13500000000000001 * var_x163) : (0));
            const double var_x166 = var_x165;
            const double var_x167 = exp(var_x60 - 0.34999999999999998 * mParameters[11]);
            const double var_x168 = exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * mParameters[11]);
            const double var_x169 = exp(-0.96036036036036043 - 0.0900900900900901 * mParameters[11] - 0.0900900900900901 * var_chaste_interface__cell__V);
            const double var_x170 = 1.0 + var_x169;
            const double var_x171 = ((var_x164) ? (310000.0 * var_x167 + 3.5600000000000001 * var_x168) : (7.6923076923076916 / var_x170));
            const double var_x172 = var_x171;
            
            partialF = -var_x166 - var_x172;
        }
        else
        {
            const double y_save = rY[3];
            rY[3] += delta;
            const double temp = EvaluateYDerivative3(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[3])/delta;
            rY[3] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__INa_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.997011204496203
        


        // Mathematics
        const double var_INa_j_gate__alpha_j = ((var_chaste_interface__cell__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24399999999999999 * var_chaste_interface__cell__V - 0.24399999999999999 * mParameters[11]) - 3.4740000000000003e-5 * exp(0.043909999999999998 * mParameters[11] - 0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * mParameters[11]))) : (0)); // per_ms
        const double var_INa_j_gate__beta_j = ((var_chaste_interface__cell__V < -40.0) ? (0.1212 * exp(0.01052 * mParameters[11] - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[11] - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.29999999999999999 * exp(2.5349999999999999e-7 * mParameters[11] - 2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[11] - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double d_dt_chaste_interface_var_INa_j_gate__j = (var_INa_j_gate__alpha_j + var_INa_j_gate__beta_j) * (-var_chaste_interface__INa_j_gate__j + 0.01 * mParameters[10] + (1.0 - 0.01 * mParameters[10]) * var_INa_j_gate__alpha_j / (var_INa_j_gate__alpha_j + var_INa_j_gate__beta_j)); // 1 / ms

        return d_dt_chaste_interface_var_INa_j_gate__j;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -90.7796417483135
            


            const double var_x21 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x157 = -var_x21;
            const double var_x164 = var_chaste_interface__cell__V < -40.0;
            const double var_x179 = exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[11] - 0.13780000000000001 * var_chaste_interface__cell__V);
            const double var_x180 = 1.0 + var_x179;
            const double var_x181 = exp(0.01052 * mParameters[11] - 0.01052 * var_chaste_interface__cell__V);
            const double var_x182 = var_x181 / var_x180;
            const double var_x183 = exp(-3.2000000000000002 + var_x157 + 0.10000000000000001 * mParameters[11]);
            const double var_x184 = 1.0 + var_x183;
            const double var_x185 = exp(2.5349999999999999e-7 * mParameters[11] - 2.5349999999999999e-7 * var_chaste_interface__cell__V);
            const double var_x186 = var_x185 / var_x184;
            const double var_x187 = ((var_x164) ? (0.1212 * var_x182) : (0.29999999999999999 * var_x186));
            const double var_x188 = var_x187;
            const double var_x189 = 37.780000000000001 + var_chaste_interface__cell__V;
            const double var_x190 = exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * mParameters[11]);
            const double var_x191 = 1.0 + var_x190;
            const double var_x192 = 1 / var_x191;
            const double var_x193 = exp(0.24399999999999999 * var_chaste_interface__cell__V - 0.24399999999999999 * mParameters[11]);
            const double var_x194 = exp(0.043909999999999998 * mParameters[11] - 0.043909999999999998 * var_chaste_interface__cell__V);
            const double var_x195 = -127140.0 * var_x193 - 3.4740000000000003e-5 * var_x194;
            const double var_x196 = var_x192 * var_x195;
            const double var_x197 = ((var_x164) ? (var_x189 * var_x196) : (0));
            const double var_x198 = var_x197;
            
            partialF = -var_x188 - var_x198;
        }
        else
        {
            const double y_save = rY[4];
            rY[4] += delta;
            const double temp = EvaluateYDerivative4(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[4])/delta;
            rY[4] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__ICa_d_gate__d = rY[5];
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        

        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_ICa_d_gate__d = -(_lt_0_row[1]) * var_chaste_interface__ICa_d_gate__d + 0.63524014987941491 * (1.0 - var_chaste_interface__ICa_d_gate__d) * _lt_0_row[2] / sqrt(M_PI); // 1 / ms

        return d_dt_chaste_interface_var_ICa_d_gate__d;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -90.7796417483135
            

        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x203 = 1 / sqrt(M_PI);
            const double var_x204 = 0.25101580310038191 * var_x203 * exp(-0.08830693125184777 * pow((-1 + 0.15937778911130945 * var_chaste_interface__cell__V), 2));
            const double var_x205 = 0.63524014987941491 * var_x203 * _lt_0_row[2];
            
            partialF = -0.14710000000000001 + var_x204 - var_x205;
        }
        else
        {
            const double y_save = rY[5];
            rY[5] += delta;
            const double temp = EvaluateYDerivative5(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[5])/delta;
            rY[5] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__ICa_f_gate__f = rY[6];
        // Units: dimensionless; Initial value: 0.92130376850548
        

        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_ICa_f_gate__f = -(_lt_0_row[3]) * var_chaste_interface__ICa_f_gate__f + 0.0068719999999999996 * (1.0 - var_chaste_interface__ICa_f_gate__f) / (_lt_0_row[4]); // 1 / ms

        return d_dt_chaste_interface_var_ICa_f_gate__f;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -90.7796417483135
            


            const double var_x206 = exp(-2.7305064499999996 - 0.27789999999999998 * var_chaste_interface__cell__V);
            const double var_x207 = 1.0 + var_x206;
            const double var_x208 = 1 / var_x207;
            const double var_x209 = exp(-1.06213655 - 0.1081 * var_chaste_interface__cell__V);
            const double var_x210 = 0.0112 + 0.068699999999999997 * var_x209;
            const double var_x211 = exp(-1.0052757950443461 + 0.16333730787449161 * var_chaste_interface__cell__V);
            const double var_x212 = 1.0 + var_x211;
            
            partialF = -0.00054739999999999997 - 0.0068719999999999996 / var_x212 - var_x208 * var_x210;
        }
        else
        {
            const double y_save = rY[6];
            rY[6] += delta;
            const double temp = EvaluateYDerivative6(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[6])/delta;
            rY[6] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ito_r_gate__r = rY[7];
        // Units: dimensionless; Initial value: 1.75032478501027e-05
        

        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_Ito_r_gate__r = -(_lt_0_row[14]) * var_chaste_interface__Ito_r_gate__r / (_lt_0_row[13]) + 0.52659999999999996 * (1.0 - var_chaste_interface__Ito_r_gate__r) * _lt_0_row[16] / (_lt_0_row[15]); // 1 / ms

        return d_dt_chaste_interface_var_Ito_r_gate__r;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -90.7796417483135
            

        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x213 = exp(6.9907280000000006e-6 - 0.1348 * var_chaste_interface__cell__V);
            const double var_x214 = 1.0 + var_x213;
            const double var_x215 = 1 / var_x214;
            const double var_x216 = exp(0.67236288 - 0.13439999999999999 * var_chaste_interface__cell__V);
            const double var_x218 = exp(3.9880601600000003 - 0.094299999999999995 * var_chaste_interface__cell__V);
            const double var_x219 = 1.0 + var_x218;
            const double var_x220 = _lt_0_row[16];
            const double var_x221 = var_x220 / var_x219;
            const double var_x222 = 0.51490000000000002 * var_x216 + 5.1860000000000002e-5 * var_chaste_interface__cell__V;
            
            partialF = -0.52659999999999996 * var_x221 - var_x215 * var_x222;
        }
        else
        {
            const double y_save = rY[7];
            rY[7] += delta;
            const double temp = EvaluateYDerivative7(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[7])/delta;
            rY[7] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ito_t_gate__t = rY[8];
        // Units: dimensionless; Initial value: 0.999897251531651
        

        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_Ito_t_gate__t = (1.0 - var_chaste_interface__Ito_t_gate__t) * (_lt_0_row[18]) / (_lt_0_row[17]) - (_lt_0_row[20]) * var_chaste_interface__Ito_t_gate__t / (_lt_0_row[19]); // 1 / ms

        return d_dt_chaste_interface_var_Ito_t_gate__t;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -90.7796417483135
            


            const double var_x223 = exp(-5.9326369200000002 - 0.17319999999999999 * var_chaste_interface__cell__V);
            const double var_x224 = 1.0 + var_x223;
            const double var_x225 = 1 / var_x224;
            const double var_x227 = exp(-5.9257863000000004 - 0.17299999999999999 * var_chaste_interface__cell__V);
            const double var_x228 = exp(-5.4573693999999993 - 0.16039999999999999 * var_chaste_interface__cell__V);
            const double var_x229 = 1.0 + var_x228;
            const double var_x230 = 1 / var_x229;
            const double var_x231 = exp(-5.6479010000000002e-8 - 1.6600000000000001e-9 * var_chaste_interface__cell__V);
            const double var_x232 = 5.6119999999999998e-5 * var_chaste_interface__cell__V + 0.072099999999999997 * var_x227;
            const double var_x233 = 0.0001215 * var_chaste_interface__cell__V + 0.076700000000000004 * var_x231;
            
            partialF = -var_x225 * var_x232 - var_x230 * var_x233;
        }
        else
        {
            const double y_save = rY[8];
            rY[8] += delta;
            const double temp = EvaluateYDerivative8(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[8])/delta;
            rY[8] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[9];
        // Units: dimensionless; Initial value: 0.00885658064818147
        

        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_IKs_Xs_gate__Xs = 0.0030130000000000001 * (1.0 - var_chaste_interface__IKs_Xs_gate__Xs) / (_lt_0_row[9]) - 0.0058700000000000002 * var_chaste_interface__IKs_Xs_gate__Xs / (_lt_0_row[10]); // 1 / ms

        return d_dt_chaste_interface_var_IKs_Xs_gate__Xs;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -90.7796417483135
            


            const double var_x234 = exp(-0.17842998931347828 - 0.069846547135942336 * var_chaste_interface__cell__V);
            const double var_x235 = 1.0 + var_x234;
            const double var_x236 = exp(1.0082174462705435 + 0.063211125158027806 * var_chaste_interface__cell__V);
            const double var_x237 = 1.0 + var_x236;
            
            partialF = -0.0058700000000000002 / var_x237 - 0.0030130000000000001 / var_x235;
        }
        else
        {
            const double y_save = rY[9];
            rY[9] += delta;
            const double temp = EvaluateYDerivative9(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[9])/delta;
            rY[9] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[10];
        // Units: dimensionless; Initial value: 0.000215523048438941
        

        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_IKr_Xr_gate__Xr = 0.0050000000000000001 * (1.0 - var_chaste_interface__IKr_Xr_gate__Xr) * _lt_0_row[6] / (_lt_0_row[5]) - 0.016 * var_chaste_interface__IKr_Xr_gate__Xr * _lt_0_row[8] / (_lt_0_row[7]); // 1 / ms

        return d_dt_chaste_interface_var_IKr_Xr_gate__Xr;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -90.7796417483135
            

        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x239 = exp(-0.51325540000000003 - 0.12620000000000001 * var_chaste_interface__cell__V);
            const double var_x240 = 1.0 + var_x239;
            const double var_x241 = _lt_0_row[6];
            const double var_x242 = var_x241 / var_x240;
            const double var_x243 = exp(5.1411779999999991 + 0.078299999999999995 * var_chaste_interface__cell__V);
            const double var_x244 = 1.0 + var_x243;
            const double var_x245 = _lt_0_row[8];
            const double var_x246 = var_x245 / var_x244;
            
            partialF = -0.016 * var_x246 - 0.0050000000000000001 * var_x242;
        }
        else
        {
            const double y_save = rY[10];
            rY[10] += delta;
            const double temp = EvaluateYDerivative10(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[10])/delta;
            rY[10] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = rY[5];
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = rY[6];
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = rY[7];
        // Units: dimensionless; Initial value: 1.75032478501027e-05
        double var_chaste_interface__Ito_t_gate__t = rY[8];
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[9];
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[10];
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Irel__APtrack = rY[11];
        // Units: dimensionless; Initial value: -1.372158997089e-136
        double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__Ionic_concentrations__Ki = rY[19];
        // Units: mM; Initial value: 140.0
        

        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_cell__FonRT = mParameters[6] / (mParameters[7] * mParameters[17]); // per_mV
        const double var_ICa__E_Ca = 0.5 * log(mParameters[3] / var_chaste_interface__Ionic_concentrations__Cai) / var_cell__FonRT; // mV
        const double var_IK1__E_K1 = log(mParameters[4] / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_INa__E_Na = log(mParameters[5] / var_chaste_interface__Ionic_concentrations__Nai) / var_cell__FonRT; // mV
        const double var_ICa__i_Ca = 0.00059999999999999995 * (-var_ICa__E_Ca + var_chaste_interface__cell__V) * mParameters[8] * var_chaste_interface__ICa_d_gate__d * var_chaste_interface__ICa_f_gate__f / (0.00059999999999999995 + var_chaste_interface__Ionic_concentrations__Cai); // uA_per_uF
        const double var_IKr__i_Kr = (-log(mParameters[4] / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT + var_chaste_interface__cell__V) * mParameters[13] * var_chaste_interface__IKr_Xr_gate__Xr / (_lt_0_row[0]); // uA_per_uF
        const double var_IKs__i_Ks = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (-log((mParameters[4] + 0.018329999999999999 * mParameters[5]) / (var_chaste_interface__Ionic_concentrations__Ki + 0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT + var_chaste_interface__cell__V) * mParameters[14]; // uA_per_uF
        const double var_INa__i_Na = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_INa__E_Na + var_chaste_interface__cell__V) * mParameters[9] * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_cell__failing = 0; // dimensionless
        const double var_ICab__i_b_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.00084999999999999995) : (0.0012999999999999999)); // uA_per_uF
        const double var_IK1__i_K1 = 0.10000000000000001 * (-var_IK1__E_K1 + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (2.5) : (2.0)) * mParameters[12] / ((1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)) * (0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)) + (exp(-1.0 + 0.10000000000000001 * var_chaste_interface__cell__V - 0.10000000000000001 * var_IK1__E_K1) + 3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.00020000000000000001 * var_IK1__E_K1)) / (1.0 + exp(0.5 * var_IK1__E_K1 - 0.5 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Ionic_concentrations__Nai, 3) * mParameters[3] * exp(0.34999999999999998 * var_cell__FonRT * var_chaste_interface__cell__V) - pow(mParameters[5], 3) * var_chaste_interface__Ionic_concentrations__Cai * exp(-0.65000000000000002 * var_cell__FonRT * var_chaste_interface__cell__V)) * ((var_cell__failing == 0) ? (mParameters[15]) : (1650.0)) / ((1.0 + 0.10000000000000001 * exp(-0.65000000000000002 * var_cell__FonRT * var_chaste_interface__cell__V)) * (669921.875 + pow(mParameters[5], 3)) * (1.3799999999999999 + mParameters[3])); // uA_per_uF
        const double var_INaK__i_NaK = ((var_cell__failing == 0) ? (1.3) : (0.75)) * mParameters[4] / ((1.0 + 31.622776601683793 * pow((1 / var_chaste_interface__Ionic_concentrations__Nai), 1.5)) * (1.5 + mParameters[4]) * (1.0 + 0.1245 * exp(-0.10000000000000001 * var_cell__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[5])) * exp(-var_cell__FonRT * var_chaste_interface__cell__V))); // uA_per_uF
        const double var_INab__i_b_Na = (-var_INa__E_Na + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.001) : (0)); // uA_per_uF
        const double var_Ito__i_to = (-log((mParameters[4] + 0.042999999999999997 * mParameters[5]) / (var_chaste_interface__Ionic_concentrations__Ki + 0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.29999999999999999 * mParameters[16]) : (0.191 * mParameters[16])) * var_chaste_interface__Ito_r_gate__r * var_chaste_interface__Ito_t_gate__t; // uA_per_uF
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_cell__dVdt = -var_ICa__i_Ca - var_ICab__i_b_Ca - var_IK1__i_K1 - var_IKr__i_Kr - var_IKs__i_Ks - var_INa__i_Na - var_INaCa__i_NaCa - var_INaK__i_NaK - var_INab__i_b_Na - var_Ito__i_to - var_cell__i_Stim; // mV_per_ms
        const double d_dt_chaste_interface_var_Irel__APtrack = ((var_cell__dVdt > 150.0) ? (100.0 - 100.5 * var_chaste_interface__Irel__APtrack) : (-0.5 * var_chaste_interface__Irel__APtrack)); // 1 / ms

        return d_dt_chaste_interface_var_Irel__APtrack;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -90.7796417483135
            double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
            // Units: mM; Initial value: 0.0002
            double var_chaste_interface__INa_m_gate__m = rY[2];
            // Units: dimensionless; Initial value: 0.000585525582501575
            double var_chaste_interface__INa_h_gate__h = rY[3];
            // Units: dimensionless; Initial value: 0.995865529216237
            double var_chaste_interface__INa_j_gate__j = rY[4];
            // Units: dimensionless; Initial value: 0.997011204496203
            double var_chaste_interface__ICa_d_gate__d = rY[5];
            // Units: dimensionless; Initial value: 2.50653215966786e-10
            double var_chaste_interface__ICa_f_gate__f = rY[6];
            // Units: dimensionless; Initial value: 0.92130376850548
            double var_chaste_interface__Ito_r_gate__r = rY[7];
            // Units: dimensionless; Initial value: 1.75032478501027e-05
            double var_chaste_interface__Ito_t_gate__t = rY[8];
            // Units: dimensionless; Initial value: 0.999897251531651
            double var_chaste_interface__IKs_Xs_gate__Xs = rY[9];
            // Units: dimensionless; Initial value: 0.00885658064818147
            double var_chaste_interface__IKr_Xr_gate__Xr = rY[10];
            // Units: dimensionless; Initial value: 0.000215523048438941
            double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
            // Units: mM; Initial value: 10.0
            double var_chaste_interface__Ionic_concentrations__Ki = rY[19];
            // Units: mM; Initial value: 140.0
            


            const double var_x0 = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * mParameters[14];
            const double var_x1 = var_x0;
            const double var_x2 = mParameters[13] * var_chaste_interface__IKr_Xr_gate__Xr;
            const double var_x3 = exp(1.1304347826086956 + 0.043478260869565216 * var_chaste_interface__cell__V);
            const double var_x4 = 1.0 + var_x3;
            const double var_x5 = 1 / var_x4;
            const double var_x6 = var_x5;
            const double var_x7 = var_x2 * var_x6;
            const double var_x8 = mParameters[16] * var_chaste_interface__Ito_t_gate__t;
            const double var_x9 = var_x8 * var_chaste_interface__Ito_r_gate__r;
            const double var_x10 = 0.29999999999999999 * var_x9;
            const double var_x11 = 1 / var_chaste_interface__Ionic_concentrations__Ki;
            const double var_x12 = 1 / mParameters[6];
            const double var_x13 = var_x12 * mParameters[7] * mParameters[17];
            const double var_x14 = var_x13 * log(var_x11 * mParameters[4]);
            const double var_x15 = exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_x14);
            const double var_x16 = 1.0 + var_x15;
            const double var_x17 = 1 / var_x16;
            const double var_x18 = exp(0.5 * var_x14 - 0.5 * var_chaste_interface__cell__V);
            const double var_x19 = 1.0 + var_x18;
            const double var_x20 = 1 / var_x19;
            const double var_x21 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x22 = exp(-1.0 + var_x21 - 0.10000000000000001 * var_x14);
            const double var_x23 = exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.00020000000000000001 * var_x14);
            const double var_x24 = var_x22 + 3.0 * var_x23;
            const double var_x25 = 0.10000000000000001 * var_x17 + var_x20 * var_x24;
            const double var_x26 = mParameters[12] / var_x25;
            const double var_x27 = 0.25 * var_x17;
            const double var_x28 = var_x26 * var_x27;
            const double var_x29 = pow(var_chaste_interface__INa_m_gate__m, 3);
            const double var_x30 = var_x29 * mParameters[9] * var_chaste_interface__INa_j_gate__j;
            const double var_x31 = var_x30 * var_chaste_interface__INa_h_gate__h;
            const double var_x32 = var_x31;
            const double var_x33 = 0.00059999999999999995 + var_chaste_interface__Ionic_concentrations__Cai;
            const double var_x34 = 1 / var_x33;
            const double var_x35 = var_x34 * mParameters[8] * var_chaste_interface__ICa_f_gate__f;
            const double var_x36 = 0.00059999999999999995 * var_x35;
            const double var_x37 = var_x36 * var_chaste_interface__ICa_d_gate__d;
            const double var_x38 = -var_x14 + var_chaste_interface__cell__V;
            const double var_x42 = 1 / var_chaste_interface__Ionic_concentrations__Nai;
            const double var_x43 = pow(var_x42, 1.5);
            const double var_x44 = 1 / (1.5 + mParameters[4]);
            const double var_x45 = var_x44 * mParameters[4] / (1.0 + 31.622776601683793 * var_x43);
            const double var_x46 = 1.3 * var_x45;
            const double var_x47 = mParameters[6] / (mParameters[7] * mParameters[17]);
            const double var_x48 = exp(-var_x21 * var_x47);
            const double var_x49 = exp(0.01485884101040119 * mParameters[5]);
            const double var_x50 = var_x47 * var_chaste_interface__cell__V;
            const double var_x51 = exp(-var_x50);
            const double var_x52 = 1.0 + 0.1245 * var_x48 + 0.036499999999999998 * var_x51 * (-0.14285714285714285 + 0.14285714285714285 * var_x49);
            const double var_x60 = 0.34999999999999998 * var_chaste_interface__cell__V;
            const double var_x61 = mParameters[3] * exp(var_x47 * var_x60);
            const double var_x62 = var_x61 * pow(var_chaste_interface__Ionic_concentrations__Nai, 3);
            const double var_x63 = exp(-0.65000000000000002 * var_x50);
            const double var_x64 = pow(mParameters[5], 3);
            const double var_x65 = var_x63 * var_x64;
            const double var_x66 = var_x65 * var_chaste_interface__Ionic_concentrations__Cai;
            const double var_x67 = 1.0 + 0.10000000000000001 * var_x63;
            const double var_x68 = mParameters[15] / ((669921.875 + var_x64) * (1.3799999999999999 + mParameters[3]));
            const double var_x69 = var_x68 / var_x67;
            const double var_x71 = var_x62 - var_x66;
            const double var_x74 = 1 / var_chaste_interface__Ionic_concentrations__Cai;
            const double var_x75 = 0.00042499999999999998 * var_x13;
            const double var_x77 = log(var_x74 * mParameters[3]);
            const double var_x78 = -0.5 * var_x13 * var_x77 + var_chaste_interface__cell__V;
            const double var_x84 = var_x13 * log(var_x42 * mParameters[5]);
            const double var_x85 = -var_x84 + var_chaste_interface__cell__V;
            const double var_x91 = var_chaste_interface__Ionic_concentrations__Ki;
            const double var_x92 = 1 / (var_x91 + 0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai);
            const double var_x93 = mParameters[4];
            const double var_x94 = var_x13 * log(var_x92 * (var_x93 + 0.042999999999999997 * mParameters[5]));
            const double var_x97 = 1 / (var_x91 + 0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai);
            const double var_x98 = -var_x13 * log(var_x97 * (var_x93 + 0.018329999999999999 * mParameters[5])) + var_chaste_interface__cell__V;
            const double var_x105 = 1 / var_x52;
            const double var_x139 = var_x69 * var_x71;
            const double var_x140 = var_x37 * var_x78 - var_x75 * var_x77;
            
            partialF = ((var_x140 + var_x139 + 0.0018500000000000001 * var_chaste_interface__cell__V - 0.001 * var_x84 + var_x1 * var_x98 + var_x10 * (-var_x94 + var_chaste_interface__cell__V) + var_x105 * var_x46 + var_x28 * var_x38 + var_x32 * var_x85 + var_x38 * var_x7 + GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance() < -150.0) ? (-100.5) : (-0.5));
        }
        else
        {
            const double y_save = rY[11];
            rY[11] += delta;
            const double temp = EvaluateYDerivative11(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[11])/delta;
            rY[11] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Irel__APtrack = rY[11];
        // Units: dimensionless; Initial value: -1.372158997089e-136
        double var_chaste_interface__Irel__APtrack2 = rY[12];
        // Units: dimensionless; Initial value: -7.58517896402761e-136
        


        // Mathematics
        const double d_dt_chaste_interface_var_Irel__APtrack2 = (((var_chaste_interface__Irel__APtrack > 0.17999999999999999) && (var_chaste_interface__Irel__APtrack < 0.20000000000000001)) ? (100.0 - 100.5 * var_chaste_interface__Irel__APtrack2) : (-0.5 * var_chaste_interface__Irel__APtrack2)); // 1 / ms

        return d_dt_chaste_interface_var_Irel__APtrack2;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Irel__APtrack = rY[11];
            // Units: dimensionless; Initial value: -1.372158997089e-136
            


            const double var_x247 = (var_chaste_interface__Irel__APtrack > 0.17999999999999999) && (var_chaste_interface__Irel__APtrack < 0.20000000000000001);
            
            partialF = ((var_x247) ? (-100.5) : (-0.5));
        }
        else
        {
            const double y_save = rY[12];
            rY[12] += delta;
            const double temp = EvaluateYDerivative12(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[12])/delta;
            rY[12] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Irel__APtrack = rY[11];
        // Units: dimensionless; Initial value: -1.372158997089e-136
        double var_chaste_interface__Irel__APtrack3 = rY[13];
        // Units: dimensionless; Initial value: 4.82035353592764e-05
        


        // Mathematics
        const double d_dt_chaste_interface_var_Irel__APtrack3 = (((var_chaste_interface__Irel__APtrack > 0.17999999999999999) && (var_chaste_interface__Irel__APtrack < 0.20000000000000001)) ? (100.0 - 100.5 * var_chaste_interface__Irel__APtrack3) : (-0.01 * var_chaste_interface__Irel__APtrack3)); // 1 / ms

        return d_dt_chaste_interface_var_Irel__APtrack3;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Irel__APtrack = rY[11];
            // Units: dimensionless; Initial value: -1.372158997089e-136
            


            const double var_x247 = (var_chaste_interface__Irel__APtrack > 0.17999999999999999) && (var_chaste_interface__Irel__APtrack < 0.20000000000000001);
            
            partialF = ((var_x247) ? (-100.5) : (-0.01));
        }
        else
        {
            const double y_save = rY[13];
            rY[13] += delta;
            const double temp = EvaluateYDerivative13(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[13])/delta;
            rY[13] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__ICa_d_gate__d = rY[5];
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = rY[6];
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Irel__APtrack = rY[11];
        // Units: dimensionless; Initial value: -1.372158997089e-136
        double var_chaste_interface__Irel__APtrack2 = rY[12];
        // Units: dimensionless; Initial value: -7.58517896402761e-136
        double var_chaste_interface__Irel__Cainfluxtrack = rY[14];
        // Units: mM; Initial value: -7.71120176147331e-138
        double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
        // Units: mM; Initial value: 10.0
        


        // Mathematics
        const double var_Ionic_concentrations__volume = 12100.0 * M_PI; // fL
        const double var_Ionic_concentrations__V_myo = 0.68000000000000005 * var_Ionic_concentrations__volume; // fL
        const double var_cell__FonRT = mParameters[6] / (mParameters[7] * mParameters[17]); // per_mV
        const double var_ICa__E_Ca = 0.5 * log(mParameters[3] / var_chaste_interface__Ionic_concentrations__Cai) / var_cell__FonRT; // mV
        const double var_ICa__i_Ca = 0.00059999999999999995 * (-var_ICa__E_Ca + var_chaste_interface__cell__V) * mParameters[8] * var_chaste_interface__ICa_d_gate__d * var_chaste_interface__ICa_f_gate__f / (0.00059999999999999995 + var_chaste_interface__Ionic_concentrations__Cai); // uA_per_uF
        const double var_cell__failing = 0; // dimensionless
        const double var_ICab__i_b_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.00084999999999999995) : (0.0012999999999999999)); // uA_per_uF
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Ionic_concentrations__Nai, 3) * mParameters[3] * exp(0.34999999999999998 * var_cell__FonRT * var_chaste_interface__cell__V) - pow(mParameters[5], 3) * var_chaste_interface__Ionic_concentrations__Cai * exp(-0.65000000000000002 * var_cell__FonRT * var_chaste_interface__cell__V)) * ((var_cell__failing == 0) ? (mParameters[15]) : (1650.0)) / ((1.0 + 0.10000000000000001 * exp(-0.65000000000000002 * var_cell__FonRT * var_chaste_interface__cell__V)) * (669921.875 + pow(mParameters[5], 3)) * (1.3799999999999999 + mParameters[3])); // uA_per_uF
        const double d_dt_chaste_interface_var_Irel__Cainfluxtrack = ((var_chaste_interface__Irel__APtrack > 0.20000000000000001) ? (-0.5 * (-var_INaCa__i_NaCa + var_ICa__i_Ca + var_ICab__i_b_Ca) * mParameters[1] / (var_Ionic_concentrations__V_myo * mParameters[6])) : ((var_chaste_interface__Irel__APtrack2 > 0.01) ? (0) : (-0.5 * var_chaste_interface__Irel__Cainfluxtrack))); // mM / ms

        return d_dt_chaste_interface_var_Irel__Cainfluxtrack;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Irel__APtrack = rY[11];
            // Units: dimensionless; Initial value: -1.372158997089e-136
            double var_chaste_interface__Irel__APtrack2 = rY[12];
            // Units: dimensionless; Initial value: -7.58517896402761e-136
            


            const double var_x248 = var_chaste_interface__Irel__APtrack > 0.20000000000000001;
            
            partialF = (((var_x248) || (var_chaste_interface__Irel__APtrack2 > 0.01)) ? (0) : (-0.5));
        }
        else
        {
            const double y_save = rY[14];
            rY[14] += delta;
            const double temp = EvaluateYDerivative14(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[14])/delta;
            rY[14] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        


        // Mathematics
        const double d_dt_chaste_interface_var_Irel__OVRLDtrack = 0; // 1 / ms

        return d_dt_chaste_interface_var_Irel__OVRLDtrack;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = 0;
        }
        else
        {
            const double y_save = rY[15];
            rY[15] += delta;
            const double temp = EvaluateYDerivative15(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[15])/delta;
            rY[15] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        


        // Mathematics
        const double d_dt_chaste_interface_var_Irel__OVRLDtrack2 = 0; // 1 / ms

        return d_dt_chaste_interface_var_Irel__OVRLDtrack2;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = 0;
        }
        else
        {
            const double y_save = rY[16];
            rY[16] += delta;
            const double temp = EvaluateYDerivative16(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[16])/delta;
            rY[16] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        


        // Mathematics
        const double d_dt_chaste_interface_var_Irel__OVRLDtrack3 = 0; // 1 / ms

        return d_dt_chaste_interface_var_Irel__OVRLDtrack3;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = 0;
        }
        else
        {
            const double y_save = rY[17];
            rY[17] += delta;
            const double temp = EvaluateYDerivative17(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[17])/delta;
            rY[17] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
        // Units: mM; Initial value: 10.0
        


        // Mathematics
        const double var_Ionic_concentrations__volume = 12100.0 * M_PI; // fL
        const double var_Ionic_concentrations__V_myo = 0.68000000000000005 * var_Ionic_concentrations__volume; // fL
        const double var_cell__FonRT = mParameters[6] / (mParameters[7] * mParameters[17]); // per_mV
        const double var_INa__E_Na = log(mParameters[5] / var_chaste_interface__Ionic_concentrations__Nai) / var_cell__FonRT; // mV
        const double var_INa__i_Na = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_INa__E_Na + var_chaste_interface__cell__V) * mParameters[9] * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_cell__failing = 0; // dimensionless
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Ionic_concentrations__Nai, 3) * mParameters[3] * exp(0.34999999999999998 * var_cell__FonRT * var_chaste_interface__cell__V) - pow(mParameters[5], 3) * var_chaste_interface__Ionic_concentrations__Cai * exp(-0.65000000000000002 * var_cell__FonRT * var_chaste_interface__cell__V)) * ((var_cell__failing == 0) ? (mParameters[15]) : (1650.0)) / ((1.0 + 0.10000000000000001 * exp(-0.65000000000000002 * var_cell__FonRT * var_chaste_interface__cell__V)) * (669921.875 + pow(mParameters[5], 3)) * (1.3799999999999999 + mParameters[3])); // uA_per_uF
        const double var_INaK__i_NaK = ((var_cell__failing == 0) ? (1.3) : (0.75)) * mParameters[4] / ((1.0 + 31.622776601683793 * pow((1 / var_chaste_interface__Ionic_concentrations__Nai), 1.5)) * (1.5 + mParameters[4]) * (1.0 + 0.1245 * exp(-0.10000000000000001 * var_cell__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[5])) * exp(-var_cell__FonRT * var_chaste_interface__cell__V))); // uA_per_uF
        const double var_INab__i_b_Na = (-var_INa__E_Na + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.001) : (0)); // uA_per_uF
        const double d_dt_chaste_interface_var_Ionic_concentrations__Nai = -(3.0 * var_INaCa__i_NaCa + 3.0 * var_INaK__i_NaK + var_INa__i_Na + var_INab__i_b_Na) * mParameters[2] * mParameters[1] / (var_Ionic_concentrations__V_myo * mParameters[6]); // mM / ms

        return d_dt_chaste_interface_var_Ionic_concentrations__Nai;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -90.7796417483135
            double var_chaste_interface__INa_m_gate__m = rY[2];
            // Units: dimensionless; Initial value: 0.000585525582501575
            double var_chaste_interface__INa_h_gate__h = rY[3];
            // Units: dimensionless; Initial value: 0.995865529216237
            double var_chaste_interface__INa_j_gate__j = rY[4];
            // Units: dimensionless; Initial value: 0.997011204496203
            double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
            // Units: mM; Initial value: 10.0
            


            const double var_x12 = 1 / mParameters[6];
            const double var_x13 = var_x12 * mParameters[7] * mParameters[17];
            const double var_x21 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x29 = pow(var_chaste_interface__INa_m_gate__m, 3);
            const double var_x30 = var_x29 * mParameters[9] * var_chaste_interface__INa_j_gate__j;
            const double var_x31 = var_x30 * var_chaste_interface__INa_h_gate__h;
            const double var_x42 = 1 / var_chaste_interface__Ionic_concentrations__Nai;
            const double var_x43 = pow(var_x42, 1.5);
            const double var_x44 = 1 / (1.5 + mParameters[4]);
            const double var_x47 = mParameters[6] / (mParameters[7] * mParameters[17]);
            const double var_x48 = exp(-var_x21 * var_x47);
            const double var_x49 = exp(0.01485884101040119 * mParameters[5]);
            const double var_x50 = var_x47 * var_chaste_interface__cell__V;
            const double var_x51 = exp(-var_x50);
            const double var_x52 = 1.0 + 0.1245 * var_x48 + 0.036499999999999998 * var_x51 * (-0.14285714285714285 + 0.14285714285714285 * var_x49);
            const double var_x60 = 0.34999999999999998 * var_chaste_interface__cell__V;
            const double var_x61 = mParameters[3] * exp(var_x47 * var_x60);
            const double var_x63 = exp(-0.65000000000000002 * var_x50);
            const double var_x64 = pow(mParameters[5], 3);
            const double var_x67 = 1.0 + 0.10000000000000001 * var_x63;
            const double var_x68 = mParameters[15] / ((669921.875 + var_x64) * (1.3799999999999999 + mParameters[3]));
            const double var_x69 = var_x68 / var_x67;
            const double var_x101 = var_x13 * var_x42;
            const double var_x102 = 0.001 * var_x101;
            const double var_x105 = 1 / var_x52;
            const double var_x106 = var_x105 * var_x42 * var_x43 * var_x44 * mParameters[4] / pow((0.031622776601683791 + var_x43), 2);
            const double var_x107 = var_x61 * var_x69 * pow(var_chaste_interface__Ionic_concentrations__Nai, 2);
            const double var_x122 = var_x12 * mParameters[1] / M_PI;
            const double var_x250 = var_x122 * mParameters[2];
            const double var_x251 = 0.00012153621779290228 * var_x250;
            
            partialF = -var_x251 * (var_x102 + 9.0 * var_x107 + 0.18499324311985019 * var_x106 + var_x101 * var_x31);
        }
        else
        {
            const double y_save = rY[18];
            rY[18] += delta;
            const double temp = EvaluateYDerivative18(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[18])/delta;
            rY[18] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ito_r_gate__r = rY[7];
        // Units: dimensionless; Initial value: 1.75032478501027e-05
        double var_chaste_interface__Ito_t_gate__t = rY[8];
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[9];
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[10];
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__Ionic_concentrations__Ki = rY[19];
        // Units: mM; Initial value: 140.0
        

        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_Ionic_concentrations__volume = 12100.0 * M_PI; // fL
        const double var_Ionic_concentrations__V_myo = 0.68000000000000005 * var_Ionic_concentrations__volume; // fL
        const double var_cell__FonRT = mParameters[6] / (mParameters[7] * mParameters[17]); // per_mV
        const double var_IK1__E_K1 = log(mParameters[4] / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_IKr__i_Kr = (-log(mParameters[4] / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT + var_chaste_interface__cell__V) * mParameters[13] * var_chaste_interface__IKr_Xr_gate__Xr / (_lt_0_row[0]); // uA_per_uF
        const double var_IKs__i_Ks = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (-log((mParameters[4] + 0.018329999999999999 * mParameters[5]) / (var_chaste_interface__Ionic_concentrations__Ki + 0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT + var_chaste_interface__cell__V) * mParameters[14]; // uA_per_uF
        const double var_cell__failing = 0; // dimensionless
        const double var_IK1__i_K1 = 0.10000000000000001 * (-var_IK1__E_K1 + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (2.5) : (2.0)) * mParameters[12] / ((1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)) * (0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)) + (exp(-1.0 + 0.10000000000000001 * var_chaste_interface__cell__V - 0.10000000000000001 * var_IK1__E_K1) + 3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.00020000000000000001 * var_IK1__E_K1)) / (1.0 + exp(0.5 * var_IK1__E_K1 - 0.5 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_INaK__i_NaK = ((var_cell__failing == 0) ? (1.3) : (0.75)) * mParameters[4] / ((1.0 + 31.622776601683793 * pow((1 / var_chaste_interface__Ionic_concentrations__Nai), 1.5)) * (1.5 + mParameters[4]) * (1.0 + 0.1245 * exp(-0.10000000000000001 * var_cell__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[5])) * exp(-var_cell__FonRT * var_chaste_interface__cell__V))); // uA_per_uF
        const double var_Ito__i_to = (-log((mParameters[4] + 0.042999999999999997 * mParameters[5]) / (var_chaste_interface__Ionic_concentrations__Ki + 0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT + var_chaste_interface__cell__V) * ((var_cell__failing == 0) ? (0.29999999999999999 * mParameters[16]) : (0.191 * mParameters[16])) * var_chaste_interface__Ito_r_gate__r * var_chaste_interface__Ito_t_gate__t; // uA_per_uF
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double d_dt_chaste_interface_var_Ionic_concentrations__Ki = -(-2.0 * var_INaK__i_NaK + var_IK1__i_K1 + var_IKr__i_Kr + var_IKs__i_Ks + var_Ito__i_to + var_cell__i_Stim) * mParameters[2] * mParameters[1] / (var_Ionic_concentrations__V_myo * mParameters[6]); // mM / ms

        return d_dt_chaste_interface_var_Ionic_concentrations__Ki;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -90.7796417483135
            double var_chaste_interface__Ito_r_gate__r = rY[7];
            // Units: dimensionless; Initial value: 1.75032478501027e-05
            double var_chaste_interface__Ito_t_gate__t = rY[8];
            // Units: dimensionless; Initial value: 0.999897251531651
            double var_chaste_interface__IKs_Xs_gate__Xs = rY[9];
            // Units: dimensionless; Initial value: 0.00885658064818147
            double var_chaste_interface__IKr_Xr_gate__Xr = rY[10];
            // Units: dimensionless; Initial value: 0.000215523048438941
            double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
            // Units: mM; Initial value: 10.0
            double var_chaste_interface__Ionic_concentrations__Ki = rY[19];
            // Units: mM; Initial value: 140.0
            


            const double var_x0 = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * mParameters[14];
            const double var_x1 = var_x0;
            const double var_x2 = mParameters[13] * var_chaste_interface__IKr_Xr_gate__Xr;
            const double var_x3 = exp(1.1304347826086956 + 0.043478260869565216 * var_chaste_interface__cell__V);
            const double var_x4 = 1.0 + var_x3;
            const double var_x5 = 1 / var_x4;
            const double var_x6 = var_x5;
            const double var_x7 = var_x2 * var_x6;
            const double var_x8 = mParameters[16] * var_chaste_interface__Ito_t_gate__t;
            const double var_x9 = var_x8 * var_chaste_interface__Ito_r_gate__r;
            const double var_x10 = 0.29999999999999999 * var_x9;
            const double var_x11 = 1 / var_chaste_interface__Ionic_concentrations__Ki;
            const double var_x12 = 1 / mParameters[6];
            const double var_x13 = var_x12 * mParameters[7] * mParameters[17];
            const double var_x14 = var_x13 * log(var_x11 * mParameters[4]);
            const double var_x15 = exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_x14);
            const double var_x16 = 1.0 + var_x15;
            const double var_x17 = 1 / var_x16;
            const double var_x18 = exp(0.5 * var_x14 - 0.5 * var_chaste_interface__cell__V);
            const double var_x19 = 1.0 + var_x18;
            const double var_x20 = 1 / var_x19;
            const double var_x21 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x22 = exp(-1.0 + var_x21 - 0.10000000000000001 * var_x14);
            const double var_x23 = exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.00020000000000000001 * var_x14);
            const double var_x24 = var_x22 + 3.0 * var_x23;
            const double var_x25 = 0.10000000000000001 * var_x17 + var_x20 * var_x24;
            const double var_x26 = mParameters[12] / var_x25;
            const double var_x27 = 0.25 * var_x17;
            const double var_x28 = var_x26 * var_x27;
            const double var_x38 = -var_x14 + var_chaste_interface__cell__V;
            const double var_x40 = var_x15 / pow(var_x16, 2);
            const double var_x41 = 0.014999999999999999 * var_x26 * var_x38 * var_x40;
            const double var_x54 = 0.10000000000000001 * var_x22;
            const double var_x55 = 0.00060000000000000006 * var_x23;
            const double var_x56 = 0.0060000000000000001 * var_x40;
            const double var_x57 = 0.5 * var_x18 * var_x24 / pow(var_x19, 2);
            const double var_x58 = var_x27 * var_x38 * mParameters[12] / pow(var_x25, 2);
            const double var_x91 = var_chaste_interface__Ionic_concentrations__Ki;
            const double var_x92 = 1 / (var_x91 + 0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai);
            const double var_x97 = 1 / (var_x91 + 0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai);
            const double var_x103 = var_x13 * var_x97;
            const double var_x108 = var_x13 * var_x92;
            const double var_x110 = var_x11 * var_x13;
            const double var_x111 = var_x58 * (var_x110 * var_x56 - var_x110 * var_x57 - var_x20 * (var_x110 * var_x54 + var_x110 * var_x55));
            const double var_x112 = var_x1 * var_x103;
            const double var_x113 = var_x110 * var_x7;
            const double var_x114 = var_x10 * var_x108;
            const double var_x115 = var_x110 * var_x28;
            const double var_x116 = var_x110 * var_x41;
            const double var_x122 = var_x12 * mParameters[1] / M_PI;
            const double var_x250 = var_x122 * mParameters[2];
            const double var_x251 = 0.00012153621779290228 * var_x250;
            
            partialF = -var_x251 * (var_x111 + var_x112 + var_x113 + var_x114 + var_x115 - var_x116);
        }
        else
        {
            const double y_save = rY[19];
            rY[19] += delta;
            const double temp = EvaluateYDerivative19(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[19])/delta;
            rY[19] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__Irel__APtrack2 = rY[12];
        // Units: dimensionless; Initial value: -7.58517896402761e-136
        double var_chaste_interface__Irel__Cainfluxtrack = rY[14];
        // Units: mM; Initial value: -7.71120176147331e-138
        double var_chaste_interface__Ionic_concentrations__Ca_JSR = rY[20];
        // Units: mM; Initial value: 2.5
        double var_chaste_interface__Ionic_concentrations__Ca_NSR = rY[21];
        // Units: mM; Initial value: 2.5
        


        // Mathematics
        const double var_Irel__i_rel = (-var_chaste_interface__Ionic_concentrations__Cai + var_chaste_interface__Ionic_concentrations__Ca_JSR) * ((var_chaste_interface__Irel__Cainfluxtrack > 5.0000000000000004e-6) ? ((1.0 - var_chaste_interface__Irel__APtrack2) * (-5.0000000000000004e-6 + var_chaste_interface__Irel__Cainfluxtrack) * var_chaste_interface__Irel__APtrack2 * mParameters[0] / (0.00079500000000000003 + var_chaste_interface__Irel__Cainfluxtrack)) : (0)); // mM_per_ms
        const double var_Itr__i_tr = 0.0055555555555555558 * var_chaste_interface__Ionic_concentrations__Ca_NSR - 0.0055555555555555558 * var_chaste_interface__Ionic_concentrations__Ca_JSR; // mM_per_ms
        const double d_dt_chaste_interface_var_Ionic_concentrations__Ca_JSR = (-var_Irel__i_rel + var_Itr__i_tr) / (1.0 + 8.0 / pow((0.80000000000000004 + var_chaste_interface__Ionic_concentrations__Ca_JSR), 2)); // mM / ms

        return d_dt_chaste_interface_var_Ionic_concentrations__Ca_JSR;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
            // Units: mM; Initial value: 0.0002
            double var_chaste_interface__Irel__APtrack2 = rY[12];
            // Units: dimensionless; Initial value: -7.58517896402761e-136
            double var_chaste_interface__Irel__Cainfluxtrack = rY[14];
            // Units: mM; Initial value: -7.71120176147331e-138
            double var_chaste_interface__Ionic_concentrations__Ca_JSR = rY[20];
            // Units: mM; Initial value: 2.5
            double var_chaste_interface__Ionic_concentrations__Ca_NSR = rY[21];
            // Units: mM; Initial value: 2.5
            


            const double var_x124 = 0.00079500000000000003 + var_chaste_interface__Irel__Cainfluxtrack;
            const double var_x125 = 1 / var_x124;
            const double var_x126 = 1.0 - var_chaste_interface__Irel__APtrack2;
            const double var_x127 = -5.0000000000000004e-6 + var_chaste_interface__Irel__Cainfluxtrack;
            const double var_x128 = var_x125 * var_x126 * var_x127 * mParameters[0];
            const double var_x129 = var_x128 * var_chaste_interface__Irel__APtrack2;
            const double var_x130 = var_chaste_interface__Irel__Cainfluxtrack > 5.0000000000000004e-6;
            const double var_x137 = -var_chaste_interface__Ionic_concentrations__Cai + var_chaste_interface__Ionic_concentrations__Ca_JSR;
            const double var_x138 = ((var_x130) ? (var_x129 * var_x137) : (0));
            const double var_x149 = ((var_x130) ? (var_x129) : (0));
            const double var_x255 = 0.80000000000000004 + var_chaste_interface__Ionic_concentrations__Ca_JSR;
            const double var_x256 = pow(var_x255, (-2));
            const double var_x257 = 1 / (1.0 + 8.0 * var_x256);
            const double var_x258 = var_x257;
            
            partialF = var_x258 * (-0.0055555555555555558 - var_x149) + 0.25 * (-var_x138 + 0.0055555555555555558 * var_chaste_interface__Ionic_concentrations__Ca_NSR - 0.0055555555555555558 * var_chaste_interface__Ionic_concentrations__Ca_JSR) / (pow(var_x255, 3) * pow((0.125 + var_x256), 2));
        }
        else
        {
            const double y_save = rY[20];
            rY[20] += delta;
            const double temp = EvaluateYDerivative20(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[20])/delta;
            rY[20] = y_save;
        }
        return partialF;
    }
    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluateYDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__Ionic_concentrations__Ca_JSR = rY[20];
        // Units: mM; Initial value: 2.5
        double var_chaste_interface__Ionic_concentrations__Ca_NSR = rY[21];
        // Units: mM; Initial value: 2.5
        


        // Mathematics
        const double var_Ionic_concentrations__volume = 12100.0 * M_PI; // fL
        const double var_Ionic_concentrations__V_JSR = 0.0047999999999999996 * var_Ionic_concentrations__volume; // fL
        const double var_Ionic_concentrations__V_NSR = 0.055199999999999999 * var_Ionic_concentrations__volume; // fL
        const double var_Itr__i_tr = 0.0055555555555555558 * var_chaste_interface__Ionic_concentrations__Ca_NSR - 0.0055555555555555558 * var_chaste_interface__Ionic_concentrations__Ca_JSR; // mM_per_ms
        const double var_cell__failing = 0; // dimensionless
        const double var_Ileak__i_leak = ((var_cell__failing == 0) ? (0.00025999999999999998) : (0.00017000000000000001)) * var_chaste_interface__Ionic_concentrations__Ca_NSR; // mM_per_ms
        const double var_Iup__i_up = ((var_cell__failing == 0) ? (0.0044999999999999997) : (0.0015)) * var_chaste_interface__Ionic_concentrations__Cai / (0.00092000000000000003 + var_chaste_interface__Ionic_concentrations__Cai); // mM_per_ms
        const double d_dt_chaste_interface_var_Ionic_concentrations__Ca_NSR = var_Iup__i_up - var_Ileak__i_leak - var_Ionic_concentrations__V_JSR * var_Itr__i_tr / var_Ionic_concentrations__V_NSR; // mM / ms

        return d_dt_chaste_interface_var_Ionic_concentrations__Ca_NSR;
    }

    double Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::EvaluatePartialDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.00074309178743961349;
        }
        else
        {
            const double y_save = rY[21];
            rY[21] += delta;
            const double temp = EvaluateYDerivative21(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[21])/delta;
            rY[21] = y_save;
        }
        return partialF;
    }

    std::vector<double> Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = rY[1];
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = rY[5];
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = rY[6];
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = rY[7];
        // Units: dimensionless; Initial value: 1.75032478501027e-05
        double var_chaste_interface__Ito_t_gate__t = rY[8];
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = rY[9];
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = rY[10];
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Irel__APtrack2 = rY[12];
        // Units: dimensionless; Initial value: -7.58517896402761e-136
        double var_chaste_interface__Irel__Cainfluxtrack = rY[14];
        // Units: mM; Initial value: -7.71120176147331e-138
        double var_chaste_interface__Ionic_concentrations__Nai = rY[18];
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__Ionic_concentrations__Ki = rY[19];
        // Units: mM; Initial value: 140.0
        double var_chaste_interface__Ionic_concentrations__Ca_JSR = rY[20];
        // Units: mM; Initial value: 2.5
        double var_chaste_interface__Ionic_concentrations__Ca_NSR = rY[21];
        // Units: mM; Initial value: 2.5
        
        // Lookup table indexing
        const bool _oob_0 = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_ICa_f_Ca_gate__Km_Ca = 0.00059999999999999995; // mM
        const double var_INaCa__K_mCa = 1.3799999999999999; // mM
        const double var_INaCa__K_mNa = 87.5; // mM
        const double var_INaCa__K_sat = 0.10000000000000001; // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_ICa_f_Ca_gate__f_Ca = var_ICa_f_Ca_gate__Km_Ca / (var_ICa_f_Ca_gate__Km_Ca + var_chaste_interface__Ionic_concentrations__Cai); // dimensionless
        const double var_Irel__K_mrel = 0.00080000000000000004; // mM
        const double var_Irel__delta_Ca_ith = 5.0000000000000004e-6; // mM
        const double var_Irel__G_rel = ((var_chaste_interface__Irel__Cainfluxtrack > var_Irel__delta_Ca_ith) ? ((1.0 - var_chaste_interface__Irel__APtrack2) * (-var_Irel__delta_Ca_ith + var_chaste_interface__Irel__Cainfluxtrack) * var_chaste_interface__Irel__APtrack2 * mParameters[0] / (-var_Irel__delta_Ca_ith + var_chaste_interface__Irel__Cainfluxtrack + var_Irel__K_mrel)) : (0)); // per_ms
        const double var_Irel__i_rel = (-var_chaste_interface__Ionic_concentrations__Cai + var_chaste_interface__Ionic_concentrations__Ca_JSR) * var_Irel__G_rel; // mM_per_ms
        const double var_Iup__K_mup = 0.00092000000000000003; // mM
        const double var_cell__Cm_converted = 9.9999999999999995e-7 * mParameters[1]; // uF
        const double var_cell__FonRT = mParameters[6] / (mParameters[7] * mParameters[17]); // per_mV
        const double var_ICa__E_Ca = 0.5 * log(mParameters[3] / var_chaste_interface__Ionic_concentrations__Cai) / var_cell__FonRT; // mV
        const double var_IK1__E_K1 = log(mParameters[4] / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_IKr__E_K = log(mParameters[4] / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_IKs__E_Ks = log((mParameters[4] + 0.018329999999999999 * mParameters[5]) / (var_chaste_interface__Ionic_concentrations__Ki + 0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT; // mV
        const double var_INa__E_Na = log(mParameters[5] / var_chaste_interface__Ionic_concentrations__Nai) / var_cell__FonRT; // mV
        const double var_Ito__E_to = log((mParameters[4] + 0.042999999999999997 * mParameters[5]) / (var_chaste_interface__Ionic_concentrations__Ki + 0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT; // mV
        const double var_ICa__i_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * mParameters[8] * var_chaste_interface__ICa_d_gate__d * var_ICa_f_Ca_gate__f_Ca * var_chaste_interface__ICa_f_gate__f; // uA_per_uF
        const double var_ICa__i_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_ICa__i_Ca; // uA_per_cm2
        const double var_ICa_f_gate__alpha_f = 0.0068719999999999996 / (_lt_0_row[4]); // per_ms
        const double var_ICa_f_gate__beta_f = _lt_0_row[3]; // per_ms
        const double var_ICa_f_gate__tau_f = 1 / (var_ICa_f_gate__alpha_f + var_ICa_f_gate__beta_f); // ms
        const double var_IK1_K1_gate__alpha_K1 = 0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)); // per_ms
        const double var_IK1_K1_gate__beta_K1 = (exp(-1.0 + 0.10000000000000001 * var_chaste_interface__cell__V - 0.10000000000000001 * var_IK1__E_K1) + 3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.00020000000000000001 * var_IK1__E_K1)) / (1.0 + exp(0.5 * var_IK1__E_K1 - 0.5 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1_K1_gate__K1_infinity = var_IK1_K1_gate__alpha_K1 / (var_IK1_K1_gate__alpha_K1 + var_IK1_K1_gate__beta_K1); // dimensionless
        const double var_IKr__rik = 1 / (_lt_0_row[0]); // dimensionless
        const double var_IKr__i_Kr = (-var_IKr__E_K + var_chaste_interface__cell__V) * mParameters[13] * var_IKr__rik * var_chaste_interface__IKr_Xr_gate__Xr; // uA_per_uF
        const double var_IKr__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_IKr__i_Kr; // uA_per_cm2
        const double var_IKs__i_Ks = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (-var_IKs__E_Ks + var_chaste_interface__cell__V) * mParameters[14]; // uA_per_uF
        const double var_IKs__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_IKs__i_Ks; // uA_per_cm2
        const double var_INa__i_Na = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_INa__E_Na + var_chaste_interface__cell__V) * mParameters[9] * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INa__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_INa__i_Na; // uA_per_cm2
        const double var_INa_h_gate__alpha_h = ((var_chaste_interface__cell__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[11] - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_ms
        const double var_INa_h_gate__beta_h = ((var_chaste_interface__cell__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V - 0.34999999999999998 * mParameters[11]) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * mParameters[11])) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * mParameters[11] - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INa_h_gate__tau_h = 1 / (var_INa_h_gate__alpha_h + var_INa_h_gate__beta_h); // ms
        const double var_INa_j_gate__alpha_j = ((var_chaste_interface__cell__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24399999999999999 * var_chaste_interface__cell__V - 0.24399999999999999 * mParameters[11]) - 3.4740000000000003e-5 * exp(0.043909999999999998 * mParameters[11] - 0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * mParameters[11]))) : (0)); // per_ms
        const double var_INa_j_gate__beta_j = ((var_chaste_interface__cell__V < -40.0) ? (0.1212 * exp(0.01052 * mParameters[11] - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[11] - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.29999999999999999 * exp(2.5349999999999999e-7 * mParameters[11] - 2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[11] - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INa_j_gate__tau_j = 1 / (var_INa_j_gate__alpha_j + var_INa_j_gate__beta_j); // ms
        const double var_cell__failing = 0; // dimensionless
        const double var_ICab__g_b_Ca_max = ((var_cell__failing == 0) ? (0.00084999999999999995) : (0.0012999999999999999)); // mS_per_uF
        const double var_ICab__i_b_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * var_ICab__g_b_Ca_max; // uA_per_uF
        const double var_ICab__i_b_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_ICab__i_b_Ca; // uA_per_cm2
        const double var_IK1__g_K1_max = ((var_cell__failing == 0) ? (2.5) : (2.0)); // mS_per_uF
        const double var_IK1__i_K1 = (-var_IK1__E_K1 + var_chaste_interface__cell__V) * var_IK1__g_K1_max * mParameters[12] * var_IK1_K1_gate__K1_infinity; // uA_per_uF
        const double var_IK1__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_IK1__i_K1; // uA_per_cm2
        const double var_INaCa__K_NaCa = ((var_cell__failing == 0) ? (mParameters[15]) : (1650.0)); // uA_per_uF
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Ionic_concentrations__Nai, 3) * mParameters[3] * exp(var_INaCa__eta * var_cell__FonRT * var_chaste_interface__cell__V) - pow(mParameters[5], 3) * var_chaste_interface__Ionic_concentrations__Cai * exp((-1.0 + var_INaCa__eta) * var_cell__FonRT * var_chaste_interface__cell__V)) * var_INaCa__K_NaCa / ((1.0 + var_INaCa__K_sat * exp((-1.0 + var_INaCa__eta) * var_cell__FonRT * var_chaste_interface__cell__V)) * (pow(var_INaCa__K_mNa, 3) + pow(mParameters[5], 3)) * (var_INaCa__K_mCa + mParameters[3])); // uA_per_uF
        const double var_INaCa__i_NaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa__i_NaCa; // uA_per_cm2
        const double var_INab__g_b_Na_max = ((var_cell__failing == 0) ? (0.001) : (0)); // mS_per_uF
        const double var_INab__i_b_Na = (-var_INa__E_Na + var_chaste_interface__cell__V) * var_INab__g_b_Na_max; // uA_per_uF
        const double var_INab__i_b_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_INab__i_b_Na; // uA_per_cm2
        const double var_Ileak__K_leak = ((var_cell__failing == 0) ? (0.00025999999999999998) : (0.00017000000000000001)); // per_ms
        const double var_Ileak__i_leak = var_Ileak__K_leak * var_chaste_interface__Ionic_concentrations__Ca_NSR; // mM_per_ms
        const double var_Ito__g_to_max = ((var_cell__failing == 0) ? (0.29999999999999999 * mParameters[16]) : (0.191 * mParameters[16])); // mS_per_uF
        const double var_Ito__i_to = (-var_Ito__E_to + var_chaste_interface__cell__V) * var_Ito__g_to_max * var_chaste_interface__Ito_r_gate__r * var_chaste_interface__Ito_t_gate__t; // uA_per_uF
        const double var_Ito__i_to_converted = HeartConfig::Instance()->GetCapacitance() * var_Ito__i_to; // uA_per_cm2
        const double var_Iup__I_up_max = ((var_cell__failing == 0) ? (0.0044999999999999997) : (0.0015)); // mM_per_ms
        const double var_Iup__i_up = var_chaste_interface__Ionic_concentrations__Cai * var_Iup__I_up_max / (var_chaste_interface__Ionic_concentrations__Cai + var_Iup__K_mup); // mM_per_ms
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2

        std::vector<double> dqs(26);
        dqs[0] = var_Ileak__i_leak;
        dqs[1] = var_Irel__i_rel;
        dqs[2] = var_Iup__i_up;
        dqs[3] = var_Iup__I_up_max;
        dqs[4] = var_ICa__E_Ca;
        dqs[5] = var_ICa__i_Ca_converted;
        dqs[6] = var_ICa_f_Ca_gate__f_Ca;
        dqs[7] = var_ICa_f_gate__tau_f;
        dqs[8] = var_ICab__i_b_Ca_converted;
        dqs[9] = var_ICab__g_b_Ca_max;
        dqs[10] = var_INab__i_b_Na_converted;
        dqs[11] = var_INab__g_b_Na_max;
        dqs[12] = var_cell__Cm_converted;
        dqs[13] = var_INa__i_Na_converted;
        dqs[14] = var_INa_h_gate__tau_h;
        dqs[15] = var_INa_j_gate__tau_j;
        dqs[16] = var_IK1__i_K1_converted;
        dqs[17] = var_IKr__i_Kr_converted;
        dqs[18] = var_IKs__i_Ks_converted;
        dqs[19] = var_INaCa__i_NaCa_converted;
        dqs[20] = var_cell__i_Stim_converted;
        dqs[21] = var_Ito__i_to_converted;
        dqs[22] = var_Ito__g_to_max;
        dqs[23] = var_IKr__E_K;
        dqs[24] = var_INa__E_Na;
        dqs[25] = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt>::Initialise(void)
{
    this->mSystemName = "priebe_beuckelmann_1998";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "ms";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-90.7796417483135);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.0002);

    // rY[2]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000585525582501575);

    // rY[3]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.995865529216237);

    // rY[4]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.997011204496203);

    // rY[5]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.50653215966786e-10);

    // rY[6]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.92130376850548);

    // rY[7]:
    this->mVariableNames.push_back("Ito_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.75032478501027e-05);

    // rY[8]:
    this->mVariableNames.push_back("Ito_t_gate__t");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999897251531651);

    // rY[9]:
    this->mVariableNames.push_back("IKs_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00885658064818147);

    // rY[10]:
    this->mVariableNames.push_back("IKr_Xr_gate__Xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000215523048438941);

    // rY[11]:
    this->mVariableNames.push_back("Irel__APtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(-1.372158997089e-136);

    // rY[12]:
    this->mVariableNames.push_back("Irel__APtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(-7.58517896402761e-136);

    // rY[13]:
    this->mVariableNames.push_back("Irel__APtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(4.82035353592764e-05);

    // rY[14]:
    this->mVariableNames.push_back("Irel__Cainfluxtrack");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(-7.71120176147331e-138);

    // rY[15]:
    this->mVariableNames.push_back("Irel__OVRLDtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-06);

    // rY[16]:
    this->mVariableNames.push_back("Irel__OVRLDtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-06);

    // rY[17]:
    this->mVariableNames.push_back("Irel__OVRLDtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-06);

    // rY[18]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(10.0);

    // rY[19]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(140.0);

    // rY[20]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(2.5);

    // rY[21]:
    this->mVariableNames.push_back("NSR_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(2.5);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_ms");

    // mParameters[1]:
    this->mParameterNames.push_back("cell__Cm");
    this->mParameterUnits.push_back("pF");

    // mParameters[2]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[6]:
    this->mParameterNames.push_back("faraday_constant");
    this->mParameterUnits.push_back("coulomb_per_millimole");

    // mParameters[7]:
    this->mParameterNames.push_back("gas_constant");
    this->mParameterUnits.push_back("joule_per_mole_kelvin");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("mV");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[17]:
    this->mParameterNames.push_back("temperature");
    this->mParameterUnits.push_back("kelvin");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_leak_current");
    this->mDerivedQuantityUnits.push_back("mM_per_ms");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("mM_per_ms");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("SR_uptake_current");
    this->mDerivedQuantityUnits.push_back("mM_per_ms");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("SR_uptake_current_max");
    this->mDerivedQuantityUnits.push_back("mM_per_ms");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("calcium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("mV");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f_gate_tau");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_background_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_background_calcium_current_conductance");
    this->mDerivedQuantityUnits.push_back("mS_per_uF");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_background_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_background_sodium_current_conductance");
    this->mDerivedQuantityUnits.push_back("mS_per_uF");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_capacitance");
    this->mDerivedQuantityUnits.push_back("uF");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [17]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [18]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [19]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [20]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [21]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [22]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current_conductance");
    this->mDerivedQuantityUnits.push_back("mS_per_uF");

    // Derived Quantity index [23]:
    this->mDerivedQuantityNames.push_back("potassium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("mV");

    // Derived Quantity index [24]:
    this->mDerivedQuantityNames.push_back("sodium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("mV");

    // Derived Quantity index [25]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("ms");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellpriebe_beuckelmann_1998FromCellMLGRL1Opt)

