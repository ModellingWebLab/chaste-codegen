//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: fox_model_2001
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: GeneralizedRushLarsenFirstOrderOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "fox_mcharg_gilmour_2002.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<28; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables(const Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables&);
    Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables& operator= (const Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables&);
    Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 28;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][28];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.074883406923417162 * var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[0] < 2){
                    double left = _lookup_table_0[i-1][0];
                    double right = _lookup_table_0[i+1][0];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 0 at ["<<i<<"][0] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[0] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] >= 2){
                    EXCEPTION("Lookup table 0 at ["<<i<<"][0] has non-finite value: " << val);
                }
                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = -1.0 + exp(0.074883406923417162 * var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[1] < 2){
                    double left = _lookup_table_0[i-1][1];
                    double right = _lookup_table_0[i+1][1];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[1] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] >= 2){
                    EXCEPTION("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val);
                }
                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.037441703461708581 * var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[2] < 2){
                    double left = _lookup_table_0[i-1][2];
                    double right = _lookup_table_0[i+1][2];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 2 at ["<<i<<"][2] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[2] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[2] >= 2){
                    EXCEPTION("Lookup table 2 at ["<<i<<"][2] has non-finite value: " << val);
                }
                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = -1.0 + exp(0.037441703461708581 * var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[3] < 2){
                    double left = _lookup_table_0[i-1][3];
                    double right = _lookup_table_0[i+1][3];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 3 at ["<<i<<"][3] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[3] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[3] >= 2){
                    EXCEPTION("Lookup table 3 at ["<<i<<"][3] has non-finite value: " << val);
                }
                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + 2.5 * exp(2.8000000000000003 + 0.10000000000000001 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.013104596211598003 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.024337107250110578 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + 0.20000000000000001 * exp(-0.024337107250110578 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.037441703461708581 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.1245 * exp(-0.0037441703461708587 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.25 * exp(-0.01 * var_chaste_interface__membrane__V) / (1.0 + exp(-0.070000000000000007 * var_chaste_interface__membrane__V)) + 0.070000000000000007 * exp(-2.0 - 0.050000000000000003 * var_chaste_interface__membrane__V) / (1.0 + exp(2.0 + 0.050000000000000003 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(2.5 + 0.20000000000000001 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 30.0 + 200.0 / (1.0 + exp(2.1052631578947367 + 0.10526315789473684 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + 1.6499999999999999 * exp(0.050000000000000003 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(47.130000000000003 + var_chaste_interface__membrane__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[16] < 2){
                    double left = _lookup_table_0[i-1][16];
                    double right = _lookup_table_0[i+1][16];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 16 at ["<<i<<"][16] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[16] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[16] >= 2){
                    EXCEPTION("Lookup table 16 at ["<<i<<"][16] has non-finite value: " << val);
                }
                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.090909090909090912 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-2.1819999999999999 - 0.18190000000000001 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 43.0 + 1 / (exp(-7.6769999999999996 - 0.012800000000000001 * var_chaste_interface__membrane__V) + exp(-5.4950000000000001 + 0.1691 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(1.1764705882352942 - 0.073529411764705885 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(-10.0 + var_chaste_interface__membrane__V) < 1.455604075689676e-6) ? (-1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) - 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8)) + 343500.00000040967 * (-9.9999985443959236 + var_chaste_interface__membrane__V) * (1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) + 1.0465793304208771e-10 / (1.0 - exp(-2.1542940320207204e-7)) + 1.9068413391534758e-10 / (-1.0 + exp(9.9999999999880736e-8)) + 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8)))) : (0.00013100000000000001 * (-10.0 + var_chaste_interface__membrane__V) / (-1.0 + exp(-0.68699999999999994 + 0.068699999999999997 * var_chaste_interface__membrane__V)) + 7.1899999999999999e-5 * (-10.0 + var_chaste_interface__membrane__V) / (1.0 - exp(1.48 - 0.14799999999999999 * var_chaste_interface__membrane__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[21] < 2){
                    double left = _lookup_table_0[i-1][21];
                    double right = _lookup_table_0[i+1][21];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 21 at ["<<i<<"][21] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[21] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[21] >= 2){
                    EXCEPTION("Lookup table 21 at ["<<i<<"][21] has non-finite value: " << val);
                }
                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.035770000000000003 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.062370000000000002 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + 0.051334999999999999 * exp(-6.7000000000000002 - 0.20000000000000001 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-6.7000000000000002 - 0.20000000000000001 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + 0.051334999999999999 * exp(6.7000000000000002 + 0.20000000000000001 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][26] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(6.7000000000000002 + 0.20000000000000001 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][27] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[28];

    // Lookup tables
    double (*_lookup_table_0)[28];
    int _lookup_table_0_num_misshit_piecewise[28] = {0};

};

std::shared_ptr<Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables> Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_amplitude_converted = -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__stim_duration = 1.0; // millisecond
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__stim_start = 100.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude_converted),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractGeneralizedRushLarsenCardiacCell(
                13,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 9.9999999999999995e-7; // (var_calcium_dynamics__P_leak) [per_millisecond]
        this->mParameters[1] = 6.0; // (var_calcium_dynamics__P_rel) [per_millisecond]
        this->mParameters[2] = 0.10000000000000001; // (var_calcium_dynamics__V_up) [micromolar_per_millisecond]
        this->mParameters[3] = 149.40000000000001; // (var_standard_ionic_concentrations__K_i) [millimolar]
        this->mParameters[4] = 10.0; // (var_standard_ionic_concentrations__Na_i) [millimolar]
        this->mParameters[5] = 2000.0; // (var_standard_ionic_concentrations__Ca_o) [micromolar]
        this->mParameters[6] = 4.0; // (var_standard_ionic_concentrations__K_o) [millimolar]
        this->mParameters[7] = 138.0; // (var_standard_ionic_concentrations__Na_o) [millimolar]
        this->mParameters[8] = 2.26e-5; // (var_L_type_Ca_current__P_Ca) [cm_per_millisecond]
        this->mParameters[9] = 30.0; // (var_L_type_Ca_current_f_Ca_gate__tau_f_Ca) [millisecond]
        this->mParameters[10] = 12.800000000000001; // (var_fast_sodium_current__g_Na) [milliS_per_microF]
        this->mParameters[11] = 0; // (var_fast_sodium_current__perc_reduced_inact_for_IpNa) [dimensionless]
        this->mParameters[12] = 0; // (var_fast_sodium_current__shift_INa_inact) [millivolt]
        this->mParameters[13] = 2.7999999999999998; // (var_time_independent_potassium_current__g_K1) [milliS_per_microF]
        this->mParameters[14] = 0.013599999999999999; // (var_rapid_activating_delayed_rectifiyer_K_current__g_Kr) [milliS_per_microF]
        this->mParameters[15] = 0.024500000000000001; // (var_slow_activating_delayed_rectifiyer_K_current__g_Ks) [milliS_per_microF]
        this->mParameters[16] = 1500.0; // (var_Na_Ca_exchanger__K_NaCa) [microA_per_microF]
        this->mParameters[17] = 0.23815; // (var_transient_outward_potassium_current__g_to) [milliS_per_microF]
    }

    Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::~Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt()
    {
    }

    AbstractLookupTableCollection* Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::GetLookupTableCollection()
    {
        return Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance();
    }
    
    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__calcium_dynamics__Ca_i_converted = rY[1];
        // Units: millimolar; Initial value: 4.72e-05
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = rY[5];
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = rY[6];
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = rY[7];
        // Units: dimensionless; Initial value: 3.742e-05
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = rY[8];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[9];
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[10];
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = rY[11];
        // Units: dimensionless; Initial value: 0.942
        
        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        const double var_calcium_dynamics__Ca_i = 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted; // micromolar
        const double var_sarcolemmal_calcium_pump__i_p_Ca = 0.050000000000000003 * var_calcium_dynamics__Ca_i / (0.050000000000000003 + var_calcium_dynamics__Ca_i); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca_max = ((fabs(var_chaste_interface__membrane__V) < 1.3354093264248704e-6) ? (374417.03461708582 * (1.3354093264248704e-6 + var_chaste_interface__membrane__V) * (1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(-9.9999999999999995e-8))) - 1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(-9.9999999999999995e-8))) : (14.452497536219512 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * _lt_0_row[0]) * mParameters[8] * var_chaste_interface__membrane__V / (_lt_0_row[1]))); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_L_type_Ca_current__i_Ca_max * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f; // uA_per_cm2
        const double var_calcium_background_current__i_Ca_b = 0.00038420000000000001 * var_chaste_interface__membrane__V - 0.0051306426321243524 * log(mParameters[5] / var_calcium_dynamics__Ca_i); // microA_per_microF
        const double var_L_type_Ca_current__i_CaK = ((fabs(var_chaste_interface__membrane__V) < 2.6708186528497407e-6) ? (187208.51730854291 * (2.6708186528497407e-6 + var_chaste_interface__membrane__V) * (5.5873499999999997e-9 * (-mParameters[6] + mParameters[3] * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(9.9999999999999995e-8))) + 5.5873499999999997e-9 * (-mParameters[6] + mParameters[3] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(-9.9999999999999995e-8)))) - 5.5873499999999997e-9 * (-mParameters[6] + mParameters[3] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(-9.9999999999999995e-8)))) : (0.0020919990183677745 * (-mParameters[6] + mParameters[3] * _lt_0_row[2]) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__membrane__V / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (_lt_0_row[3])))); // microA_per_microF
        const double var_rapid_activating_delayed_rectifiyer_K_current__E_K = 26.708186528497411 * log(mParameters[6] / mParameters[3]); // millivolt
        const double var_plateau_potassium_current__i_Kp = 0.0022160000000000001 * (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) / (_lt_0_row[4]); // microA_per_microF
        const double var_rapid_activating_delayed_rectifiyer_K_current__i_Kr_converted = 0.5 * sqrt(mParameters[6]) * (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[14] * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr / (_lt_0_row[5]); // uA_per_cm2
        const double var_Na_Ca_exchanger__i_NaCa_converted = (pow(mParameters[4], 3) * mParameters[5] * _lt_0_row[6] - pow(mParameters[7], 3) * var_calcium_dynamics__Ca_i * _lt_0_row[7]) * HeartConfig::Instance()->GetCapacitance() * mParameters[16] / ((_lt_0_row[8]) * (1380.0 + mParameters[5]) * (669921.875 + pow(mParameters[7], 3))); // uA_per_cm2
        const double var_fast_sodium_current__E_Na = 26.708186528497411 * log(mParameters[7] / mParameters[4]); // millivolt
        const double var_fast_sodium_current__i_Na_converted = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[10] * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // uA_per_cm2
        const double var_slow_activating_delayed_rectifiyer_K_current__i_Ks_converted = pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2) * (-26.708186528497411 * log((mParameters[6] + 0.018329999999999999 * mParameters[7]) / (mParameters[3] + 0.018329999999999999 * mParameters[4])) + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[15]; // uA_per_cm2
        const double var_sodium_background_current__i_Na_b = 0.0030999999999999999 * var_chaste_interface__membrane__V - 0.0030999999999999999 * var_fast_sodium_current__E_Na; // microA_per_microF
        const double var_sodium_potassium_pump__i_NaK = 0.69299999999999995 * mParameters[6] / ((1.0 + 31.622776601683793 * pow((1 / mParameters[4]), 1.5)) * (1.5 + mParameters[6]) * (1.0 + _lt_0_row[10] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[7])) * _lt_0_row[9])); // microA_per_microF
        const double var_time_independent_potassium_current__i_K1_converted = (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[6] * mParameters[13] / ((2.0 + exp(0.06065555960796791 * var_chaste_interface__membrane__V - 0.06065555960796791 * var_rapid_activating_delayed_rectifiyer_K_current__E_K)) * (13.0 + mParameters[6])); // uA_per_cm2
        const double var_transient_outward_potassium_current__i_to_converted = (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[17] * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to; // uA_per_cm2
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_L_type_Ca_current__i_CaK + HeartConfig::Instance()->GetCapacitance() * var_calcium_background_current__i_Ca_b + HeartConfig::Instance()->GetCapacitance() * var_plateau_potassium_current__i_Kp + HeartConfig::Instance()->GetCapacitance() * var_sarcolemmal_calcium_pump__i_p_Ca + HeartConfig::Instance()->GetCapacitance() * var_sodium_background_current__i_Na_b + HeartConfig::Instance()->GetCapacitance() * var_sodium_potassium_pump__i_NaK + var_L_type_Ca_current__i_Ca_converted + var_Na_Ca_exchanger__i_NaCa_converted + var_fast_sodium_current__i_Na_converted + var_rapid_activating_delayed_rectifiyer_K_current__i_Kr_converted + var_slow_activating_delayed_rectifiyer_K_current__i_Ks_converted + var_time_independent_potassium_current__i_K1_converted + var_transient_outward_potassium_current__i_to_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        unsigned v_index = GetVoltageIndex();
        const double delta = 1e-8;

        double d_dt_chaste_interface_var_membrane__V;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__calcium_dynamics__Ca_i_converted = rY[1];
        // Units: millimolar; Initial value: 4.72e-05
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = rY[5];
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = rY[6];
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = rY[7];
        // Units: dimensionless; Initial value: 3.742e-05
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = rY[8];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[9];
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[10];
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = rY[11];
        // Units: dimensionless; Initial value: 0.942
        

        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_calcium_dynamics__Ca_i = 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted; // micromolar
        const double var_sarcolemmal_calcium_pump__i_p_Ca = 0.050000000000000003 * var_calcium_dynamics__Ca_i / (0.050000000000000003 + var_calcium_dynamics__Ca_i); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca_max = ((fabs(var_chaste_interface__membrane__V) < 1.3354093264248704e-6) ? (374417.03461708582 * (1.3354093264248704e-6 + var_chaste_interface__membrane__V) * (1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(-9.9999999999999995e-8))) - 1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(-9.9999999999999995e-8))) : (14.452497536219512 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * _lt_0_row[0]) * mParameters[8] * var_chaste_interface__membrane__V / (_lt_0_row[1]))); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca = var_L_type_Ca_current__i_Ca_max * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f; // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.00038420000000000001 * var_chaste_interface__membrane__V - 0.0051306426321243524 * log(mParameters[5] / var_calcium_dynamics__Ca_i); // microA_per_microF
        const double var_rapid_activating_delayed_rectifiyer_K_current__E_K = 26.708186528497411 * log(mParameters[6] / mParameters[3]); // millivolt
        const double var_Na_Ca_exchanger__i_NaCa = (pow(mParameters[4], 3) * mParameters[5] * _lt_0_row[6] - pow(mParameters[7], 3) * var_calcium_dynamics__Ca_i * _lt_0_row[7]) * mParameters[16] / ((_lt_0_row[8]) * (1380.0 + mParameters[5]) * (669921.875 + pow(mParameters[7], 3))); // microA_per_microF
        const double var_fast_sodium_current__E_Na = 26.708186528497411 * log(mParameters[7] / mParameters[4]); // millivolt
        d_dt_chaste_interface_var_membrane__V = -((fabs(var_chaste_interface__membrane__V) < 2.6708186528497407e-6) ? (187208.51730854291 * (2.6708186528497407e-6 + var_chaste_interface__membrane__V) * (5.5873499999999997e-9 * (-mParameters[6] + mParameters[3] * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(9.9999999999999995e-8))) + 5.5873499999999997e-9 * (-mParameters[6] + mParameters[3] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(-9.9999999999999995e-8)))) - 5.5873499999999997e-9 * (-mParameters[6] + mParameters[3] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(-9.9999999999999995e-8)))) : (0.0020919990183677745 * (-mParameters[6] + mParameters[3] * _lt_0_row[2]) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__membrane__V / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (_lt_0_row[3])))) - var_L_type_Ca_current__i_Ca - var_Na_Ca_exchanger__i_NaCa - var_calcium_background_current__i_Ca_b - var_sarcolemmal_calcium_pump__i_p_Ca + 0.0030999999999999999 * var_fast_sodium_current__E_Na - 0.0030999999999999999 * var_chaste_interface__membrane__V - GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance() - 0.0022160000000000001 * (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) / (_lt_0_row[4]) - pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2) * (-26.708186528497411 * log((mParameters[6] + 0.018329999999999999 * mParameters[7]) / (mParameters[3] + 0.018329999999999999 * mParameters[4])) + var_chaste_interface__membrane__V) * mParameters[15] - (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * mParameters[17] * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to - 0.69299999999999995 * mParameters[6] / ((1.0 + 31.622776601683793 * pow((1 / mParameters[4]), 1.5)) * (1.5 + mParameters[6]) * (1.0 + _lt_0_row[10] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[7])) * _lt_0_row[9])) - pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * mParameters[10] * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j - 0.5 * sqrt(mParameters[6]) * (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * mParameters[14] * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr / (_lt_0_row[5]) - (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * mParameters[6] * mParameters[13] / ((2.0 + exp(0.06065555960796791 * var_chaste_interface__membrane__V - 0.06065555960796791 * var_rapid_activating_delayed_rectifiyer_K_current__E_K)) * (13.0 + mParameters[6])); // millivolt / millisecond

        double evalF = d_dt_chaste_interface_var_membrane__V;
        mEvalF[0] = d_dt_chaste_interface_var_membrane__V;
        double partialF = EvaluatePartialDerivative0(var_chaste_interface__environment__time, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] += evalF*mDt;
        }
        else
        {
            rY[v_index] += (evalF/partialF)*(exp(partialF*mDt)-1.0);
        }
    }

    void Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        const double delta = 1e-8;

        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__calcium_dynamics__Ca_i_converted = rY[1];
        // Units: millimolar; Initial value: 4.72e-05
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = rY[5];
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = rY[6];
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = rY[7];
        // Units: dimensionless; Initial value: 3.742e-05
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = rY[8];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[9];
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[10];
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = rY[11];
        // Units: dimensionless; Initial value: 0.942
        double var_chaste_interface__calcium_dynamics__Ca_SR = rY[12];
        // Units: micromolar; Initial value: 320.0
        

        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_calcium_dynamics__Ca_i = 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted; // micromolar
        const double d_dt_chaste_interface_var_L_type_Ca_current_f_Ca_gate__f_Ca = (-var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca + 1 / (1.0 + 171.46776406035667 * pow(var_calcium_dynamics__Ca_i, 3))) / mParameters[9]; // 1 / millisecond
        const double var_calcium_dynamics__J_leak = (-var_calcium_dynamics__Ca_i + var_chaste_interface__calcium_dynamics__Ca_SR) * mParameters[0]; // micromolar_per_millisecond
        const double var_calcium_dynamics__J_up = mParameters[2] / (1.0 + 0.1024 / pow(var_calcium_dynamics__Ca_i, 2)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_L_type_Ca_current_d_gate__d = (-var_chaste_interface__L_type_Ca_current_d_gate__d + _lt_0_row[11]) * (_lt_0_row[12]); // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_Ca_current_f_gate__f = (-var_chaste_interface__L_type_Ca_current_f_gate__f + _lt_0_row[13]) / (_lt_0_row[14]); // 1 / millisecond
        const double var_calcium_dynamics__J_rel = (-var_calcium_dynamics__Ca_i + var_chaste_interface__calcium_dynamics__Ca_SR / (1.0 + 8000000000.0 / pow(var_chaste_interface__calcium_dynamics__Ca_SR, 3))) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f * mParameters[1] / (_lt_0_row[15]); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_dynamics__Ca_SR = 12.92 * (-var_calcium_dynamics__J_leak - var_calcium_dynamics__J_rel + var_calcium_dynamics__J_up) / (1.0 + 16.666666666666668 / pow((1 + 0.0016666666666666668 * var_chaste_interface__calcium_dynamics__Ca_SR), 2)); // micromolar / millisecond
        const double var_fast_sodium_current_h_gate__alpha_h = 0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[12] - 0.14705882352941177 * var_chaste_interface__membrane__V); // per_millisecond
        const double var_fast_sodium_current_h_gate__beta_h = 7.5 / (1.0 + exp(-1.1000000000000001 + 0.10000000000000001 * mParameters[12] - 0.10000000000000001 * var_chaste_interface__membrane__V)); // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_h_gate__h = (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h) * (-var_chaste_interface__fast_sodium_current_h_gate__h + 0.01 * mParameters[11] + (1.0 - 0.01 * mParameters[11]) * var_fast_sodium_current_h_gate__alpha_h / (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h)); // 1 / millisecond
        const double var_fast_sodium_current_j_gate__alpha_j = 0.17499999999999999 * exp(-4.3478260869565215 + 0.043478260869565216 * mParameters[12] - 0.043478260869565216 * var_chaste_interface__membrane__V) / (1.0 + exp(11.85 + 0.14999999999999999 * var_chaste_interface__membrane__V - 0.14999999999999999 * mParameters[12])); // per_millisecond
        const double var_fast_sodium_current_j_gate__beta_j = 0.29999999999999999 / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[12] - 0.10000000000000001 * var_chaste_interface__membrane__V)); // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_j_gate__j = (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j) * (-var_chaste_interface__fast_sodium_current_j_gate__j + 0.01 * mParameters[11] + (1.0 - 0.01 * mParameters[11]) * var_fast_sodium_current_j_gate__alpha_j / (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j)); // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_m_gate__m = (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m) * _lt_0_row[16] - 0.080000000000000002 * var_chaste_interface__fast_sodium_current_m_gate__m * _lt_0_row[17]; // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = (-var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr + _lt_0_row[18]) / (_lt_0_row[19]); // 1 / millisecond
        const double var_sarcolemmal_calcium_pump__i_p_Ca = 0.050000000000000003 * var_calcium_dynamics__Ca_i / (0.050000000000000003 + var_calcium_dynamics__Ca_i); // microA_per_microF
        const double d_dt_chaste_interface_var_slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = (-var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks + _lt_0_row[20]) * _lt_0_row[21]; // 1 / millisecond
        const double var_L_type_Ca_current__i_Ca_max = ((fabs(var_chaste_interface__membrane__V) < 1.3354093264248704e-6) ? (374417.03461708582 * (1.3354093264248704e-6 + var_chaste_interface__membrane__V) * (1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(-9.9999999999999995e-8))) - 1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(-9.9999999999999995e-8))) : (14.452497536219512 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * _lt_0_row[0]) * mParameters[8] * var_chaste_interface__membrane__V / (_lt_0_row[1]))); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca = var_L_type_Ca_current__i_Ca_max * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f; // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.00038420000000000001 * var_chaste_interface__membrane__V - 0.0051306426321243524 * log(mParameters[5] / var_calcium_dynamics__Ca_i); // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = (pow(mParameters[4], 3) * mParameters[5] * _lt_0_row[6] - pow(mParameters[7], 3) * var_calcium_dynamics__Ca_i * _lt_0_row[7]) * mParameters[16] / ((_lt_0_row[8]) * (1380.0 + mParameters[5]) * (669921.875 + pow(mParameters[7], 3))); // microA_per_microF
        const double d_dt_chaste_interface_var_calcium_dynamics__Ca_i_converted = 0.001 * (-var_calcium_dynamics__J_up + 0.061518471582797281 * var_Na_Ca_exchanger__i_NaCa - 0.03075923579139864 * var_L_type_Ca_current__i_Ca - 0.03075923579139864 * var_calcium_background_current__i_Ca_b - 0.03075923579139864 * var_sarcolemmal_calcium_pump__i_p_Ca + var_calcium_dynamics__J_leak + var_calcium_dynamics__J_rel) / (1.0 + 5.0 / pow((1 + 0.5 * var_calcium_dynamics__Ca_i), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_transient_outward_potassium_current_X_to_gate__X_to = 0.045159999999999999 * (1.0 - var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to) * _lt_0_row[22] - 0.098900000000000002 * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to * _lt_0_row[23]; // 1 / millisecond
        const double d_dt_chaste_interface_var_transient_outward_potassium_current_Y_to_gate__Y_to = 0.0054149999999999997 * (1.0 - var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to) * _lt_0_row[25] / (_lt_0_row[24]) - 0.0054149999999999997 * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to * _lt_0_row[27] / (_lt_0_row[26]); // 1 / millisecond
        
        mEvalF[1] = d_dt_chaste_interface_var_calcium_dynamics__Ca_i_converted;
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__environment__time, rY, delta);
        mEvalF[2] = d_dt_chaste_interface_var_fast_sodium_current_m_gate__m;
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__environment__time, rY, delta);
        mEvalF[3] = d_dt_chaste_interface_var_fast_sodium_current_h_gate__h;
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__environment__time, rY, delta);
        mEvalF[4] = d_dt_chaste_interface_var_fast_sodium_current_j_gate__j;
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__environment__time, rY, delta);
        mEvalF[5] = d_dt_chaste_interface_var_rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr;
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__environment__time, rY, delta);
        mEvalF[6] = d_dt_chaste_interface_var_slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks;
        mPartialF[6] = EvaluatePartialDerivative6(var_chaste_interface__environment__time, rY, delta);
        mEvalF[7] = d_dt_chaste_interface_var_transient_outward_potassium_current_X_to_gate__X_to;
        mPartialF[7] = EvaluatePartialDerivative7(var_chaste_interface__environment__time, rY, delta);
        mEvalF[8] = d_dt_chaste_interface_var_transient_outward_potassium_current_Y_to_gate__Y_to;
        mPartialF[8] = EvaluatePartialDerivative8(var_chaste_interface__environment__time, rY, delta);
        mEvalF[9] = d_dt_chaste_interface_var_L_type_Ca_current_f_gate__f;
        mPartialF[9] = EvaluatePartialDerivative9(var_chaste_interface__environment__time, rY, delta);
        mEvalF[10] = d_dt_chaste_interface_var_L_type_Ca_current_d_gate__d;
        mPartialF[10] = EvaluatePartialDerivative10(var_chaste_interface__environment__time, rY, delta);
        mEvalF[11] = d_dt_chaste_interface_var_L_type_Ca_current_f_Ca_gate__f_Ca;
        mPartialF[11] = EvaluatePartialDerivative11(var_chaste_interface__environment__time, rY, delta);
        mEvalF[12] = d_dt_chaste_interface_var_calcium_dynamics__Ca_SR;
        mPartialF[12] = EvaluatePartialDerivative12(var_chaste_interface__environment__time, rY, delta);
        
        {
            if (fabs(mPartialF[1]) < delta){
                rY[1] += mDt*d_dt_chaste_interface_var_calcium_dynamics__Ca_i_converted;
            }
            else
            {
                rY[1] += (d_dt_chaste_interface_var_calcium_dynamics__Ca_i_converted/mPartialF[1])*(exp(mPartialF[1]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[2]) < delta){
                rY[2] += mDt*d_dt_chaste_interface_var_fast_sodium_current_m_gate__m;
            }
            else
            {
                rY[2] += (d_dt_chaste_interface_var_fast_sodium_current_m_gate__m/mPartialF[2])*(exp(mPartialF[2]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[3]) < delta){
                rY[3] += mDt*d_dt_chaste_interface_var_fast_sodium_current_h_gate__h;
            }
            else
            {
                rY[3] += (d_dt_chaste_interface_var_fast_sodium_current_h_gate__h/mPartialF[3])*(exp(mPartialF[3]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[4]) < delta){
                rY[4] += mDt*d_dt_chaste_interface_var_fast_sodium_current_j_gate__j;
            }
            else
            {
                rY[4] += (d_dt_chaste_interface_var_fast_sodium_current_j_gate__j/mPartialF[4])*(exp(mPartialF[4]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[5]) < delta){
                rY[5] += mDt*d_dt_chaste_interface_var_rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr;
            }
            else
            {
                rY[5] += (d_dt_chaste_interface_var_rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr/mPartialF[5])*(exp(mPartialF[5]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[6]) < delta){
                rY[6] += mDt*d_dt_chaste_interface_var_slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks;
            }
            else
            {
                rY[6] += (d_dt_chaste_interface_var_slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks/mPartialF[6])*(exp(mPartialF[6]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[7]) < delta){
                rY[7] += mDt*d_dt_chaste_interface_var_transient_outward_potassium_current_X_to_gate__X_to;
            }
            else
            {
                rY[7] += (d_dt_chaste_interface_var_transient_outward_potassium_current_X_to_gate__X_to/mPartialF[7])*(exp(mPartialF[7]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[8]) < delta){
                rY[8] += mDt*d_dt_chaste_interface_var_transient_outward_potassium_current_Y_to_gate__Y_to;
            }
            else
            {
                rY[8] += (d_dt_chaste_interface_var_transient_outward_potassium_current_Y_to_gate__Y_to/mPartialF[8])*(exp(mPartialF[8]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[9]) < delta){
                rY[9] += mDt*d_dt_chaste_interface_var_L_type_Ca_current_f_gate__f;
            }
            else
            {
                rY[9] += (d_dt_chaste_interface_var_L_type_Ca_current_f_gate__f/mPartialF[9])*(exp(mPartialF[9]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[10]) < delta){
                rY[10] += mDt*d_dt_chaste_interface_var_L_type_Ca_current_d_gate__d;
            }
            else
            {
                rY[10] += (d_dt_chaste_interface_var_L_type_Ca_current_d_gate__d/mPartialF[10])*(exp(mPartialF[10]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[11]) < delta){
                rY[11] += mDt*d_dt_chaste_interface_var_L_type_Ca_current_f_Ca_gate__f_Ca;
            }
            else
            {
                rY[11] += (d_dt_chaste_interface_var_L_type_Ca_current_f_Ca_gate__f_Ca/mPartialF[11])*(exp(mPartialF[11]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[12]) < delta){
                rY[12] += mDt*d_dt_chaste_interface_var_calcium_dynamics__Ca_SR;
            }
            else
            {
                rY[12] += (d_dt_chaste_interface_var_calcium_dynamics__Ca_SR/mPartialF[12])*(exp(mPartialF[12]*mDt)-1.0);
            }
            
        }        
        
    }
   
    
    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluateYDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        double d_dt_chaste_interface_var_membrane__V;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__calcium_dynamics__Ca_i_converted = rY[1];
        // Units: millimolar; Initial value: 4.72e-05
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = rY[5];
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = rY[6];
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = rY[7];
        // Units: dimensionless; Initial value: 3.742e-05
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = rY[8];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[9];
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[10];
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = rY[11];
        // Units: dimensionless; Initial value: 0.942
        

        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_calcium_dynamics__Ca_i = 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted; // micromolar
        const double var_sarcolemmal_calcium_pump__i_p_Ca = 0.050000000000000003 * var_calcium_dynamics__Ca_i / (0.050000000000000003 + var_calcium_dynamics__Ca_i); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca_max = ((fabs(var_chaste_interface__membrane__V) < 1.3354093264248704e-6) ? (374417.03461708582 * (1.3354093264248704e-6 + var_chaste_interface__membrane__V) * (1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(-9.9999999999999995e-8))) - 1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(-9.9999999999999995e-8))) : (14.452497536219512 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * _lt_0_row[0]) * mParameters[8] * var_chaste_interface__membrane__V / (_lt_0_row[1]))); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca = var_L_type_Ca_current__i_Ca_max * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f; // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.00038420000000000001 * var_chaste_interface__membrane__V - 0.0051306426321243524 * log(mParameters[5] / var_calcium_dynamics__Ca_i); // microA_per_microF
        const double var_rapid_activating_delayed_rectifiyer_K_current__E_K = 26.708186528497411 * log(mParameters[6] / mParameters[3]); // millivolt
        const double var_Na_Ca_exchanger__i_NaCa = (pow(mParameters[4], 3) * mParameters[5] * _lt_0_row[6] - pow(mParameters[7], 3) * var_calcium_dynamics__Ca_i * _lt_0_row[7]) * mParameters[16] / ((_lt_0_row[8]) * (1380.0 + mParameters[5]) * (669921.875 + pow(mParameters[7], 3))); // microA_per_microF
        const double var_fast_sodium_current__E_Na = 26.708186528497411 * log(mParameters[7] / mParameters[4]); // millivolt
        d_dt_chaste_interface_var_membrane__V = -((fabs(var_chaste_interface__membrane__V) < 2.6708186528497407e-6) ? (187208.51730854291 * (2.6708186528497407e-6 + var_chaste_interface__membrane__V) * (5.5873499999999997e-9 * (-mParameters[6] + mParameters[3] * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(9.9999999999999995e-8))) + 5.5873499999999997e-9 * (-mParameters[6] + mParameters[3] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(-9.9999999999999995e-8)))) - 5.5873499999999997e-9 * (-mParameters[6] + mParameters[3] * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (-1.0 + exp(-9.9999999999999995e-8)))) : (0.0020919990183677745 * (-mParameters[6] + mParameters[3] * _lt_0_row[2]) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f * var_chaste_interface__membrane__V / ((1.0 - 3.773584905660377 * var_L_type_Ca_current__i_Ca_max) * (_lt_0_row[3])))) - var_L_type_Ca_current__i_Ca - var_Na_Ca_exchanger__i_NaCa - var_calcium_background_current__i_Ca_b - var_sarcolemmal_calcium_pump__i_p_Ca + 0.0030999999999999999 * var_fast_sodium_current__E_Na - 0.0030999999999999999 * var_chaste_interface__membrane__V - GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance() - 0.0022160000000000001 * (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) / (_lt_0_row[4]) - pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2) * (-26.708186528497411 * log((mParameters[6] + 0.018329999999999999 * mParameters[7]) / (mParameters[3] + 0.018329999999999999 * mParameters[4])) + var_chaste_interface__membrane__V) * mParameters[15] - (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * mParameters[17] * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to - 0.69299999999999995 * mParameters[6] / ((1.0 + 31.622776601683793 * pow((1 / mParameters[4]), 1.5)) * (1.5 + mParameters[6]) * (1.0 + _lt_0_row[10] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[7])) * _lt_0_row[9])) - pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * mParameters[10] * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j - 0.5 * sqrt(mParameters[6]) * (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * mParameters[14] * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr / (_lt_0_row[5]) - (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * mParameters[6] * mParameters[13] / ((2.0 + exp(0.06065555960796791 * var_chaste_interface__membrane__V - 0.06065555960796791 * var_rapid_activating_delayed_rectifiyer_K_current__E_K)) * (13.0 + mParameters[6])); // millivolt / millisecond

        return d_dt_chaste_interface_var_membrane__V;
    }

    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluatePartialDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -94.7
            double var_chaste_interface__calcium_dynamics__Ca_i_converted = rY[1];
            // Units: millimolar; Initial value: 4.72e-05
            double var_chaste_interface__fast_sodium_current_m_gate__m = rY[2];
            // Units: dimensionless; Initial value: 0.00024676
            double var_chaste_interface__fast_sodium_current_h_gate__h = rY[3];
            // Units: dimensionless; Initial value: 0.99869
            double var_chaste_interface__fast_sodium_current_j_gate__j = rY[4];
            // Units: dimensionless; Initial value: 0.99887
            double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = rY[5];
            // Units: dimensionless; Initial value: 0.229
            double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = rY[6];
            // Units: dimensionless; Initial value: 0.0001
            double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = rY[7];
            // Units: dimensionless; Initial value: 3.742e-05
            double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = rY[8];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[9];
            // Units: dimensionless; Initial value: 0.983
            double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[10];
            // Units: dimensionless; Initial value: 0.0001
            double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = rY[11];
            // Units: dimensionless; Initial value: 0.942
            

        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

            const double var_x0 = exp(-9.9999999999999995e-8);
            const double var_x1 = 1 / (-1.0 + var_x0);
            const double var_x2 = -mParameters[6];
            const double var_x3 = var_x1 * (var_x2 + var_x0 * mParameters[3]);
            const double var_x4 = exp(9.9999999999999995e-8);
            const double var_x5 = 1 / (-1.0 + var_x4);
            const double var_x6 = -0.34100000000000003 * mParameters[5];
            const double var_x7 = 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted;
            const double var_x8 = var_x5 * (var_x6 + var_x4 * var_x7);
            const double var_x9 = 7.2262487681097562 * mParameters[8];
            const double var_x10 = var_x1 * (var_x6 + var_x0 * var_x7);
            const double var_x11 = fabs(var_chaste_interface__membrane__V);
            const double var_x12 = var_x11 < 1.3354093264248704e-6;
            const double var_x13 = _lt_0_row[0];
            const double var_x14 = var_x6 + var_x13 * var_x7;
            const double var_x15 = -1.0 + var_x13;
            const double var_x16 = mParameters[8] / var_x15;
            const double var_x17 = 14.452497536219512 * var_x14 * var_x16;
            const double var_x18 = var_x13 * var_chaste_interface__membrane__V;
            const double var_x19 = var_x16 * var_x18;
            const double var_x20 = var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f;
            const double var_x21 = var_x20 * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca;
            const double var_x22 = var_x21 * ((var_x12) ? (var_x10 * var_x9 + var_x8 * var_x9) : (var_x17 + 1082.2522540644097 * var_x19 * var_chaste_interface__calcium_dynamics__Ca_i_converted - 1.0822522540644097 * var_x14 * var_x18 * mParameters[8] / pow(var_x15, 2)));
            const double var_x23 = 1.9299999999999998e-5 * mParameters[8];
            const double var_x24 = var_x10 * var_x23;
            const double var_x25 = ((var_x12) ? (-var_x24 + 374417.03461708582 * (1.3354093264248704e-6 + var_chaste_interface__membrane__V) * (var_x24 + var_x23 * var_x8)) : (var_x17 * var_chaste_interface__membrane__V));
            const double var_x26 = pow((0.26500000000000001 - var_x25), (-2));
            const double var_x27 = 1.48064775e-9 * var_x26;
            const double var_x28 = var_x22 * var_x27;
            const double var_x29 = var_x28 * var_x3;
            const double var_x30 = -0.5 - 187208.51730854291 * var_chaste_interface__membrane__V;
            const double var_x31 = var_x5 * (var_x2 + var_x4 * mParameters[3]);
            const double var_x32 = 1 / (1.0 - 3.773584905660377 * var_x25);
            const double var_x33 = var_x21 * var_x32;
            const double var_x34 = 0.0010459995091838873 * var_x33;
            const double var_x35 = exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__V);
            const double var_x36 = 1.0 + var_x35;
            const double var_x37 = mParameters[17] * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to;
            const double var_x38 = log(mParameters[6] / mParameters[3]);
            const double var_x39 = 26.708186528497411 * var_x38;
            const double var_x40 = -var_x39 + var_chaste_interface__membrane__V;
            const double var_x41 = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3);
            const double var_x42 = var_x41 * mParameters[10] * var_chaste_interface__fast_sodium_current_j_gate__j;
            const double var_x43 = sqrt(mParameters[6]);
            const double var_x44 = var_x43 * mParameters[14] * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr;
            const double var_x45 = 0.10000000000000001 * var_chaste_interface__membrane__V;
            const double var_x46 = exp(2.8000000000000003 + var_x45);
            const double var_x47 = 0.5 / (1.0 + 2.5 * var_x46);
            const double var_x48 = exp(0.06065555960796791 * var_chaste_interface__membrane__V - 1.6200000000000001 * var_x38);
            const double var_x49 = mParameters[6];
            const double var_x50 = mParameters[13] / (13.0 + mParameters[6]);
            const double var_x51 = _lt_0_row[7];
            const double var_x52 = pow(mParameters[7], 3);
            const double var_x53 = var_x51 * var_x52;
            const double var_x54 = pow(mParameters[4], 3) * mParameters[5] * _lt_0_row[6];
            const double var_x55 = 1.0 + 0.20000000000000001 * var_x51;
            const double var_x56 = mParameters[16] / ((1380.0 + mParameters[5]) * (669921.875 + var_x52));
            const double var_x57 = var_x56 / var_x55;
            const double var_x58 = var_x57 * (0.013104596211598003 * var_x54 + 24.337107250110581 * var_x53 * var_chaste_interface__calcium_dynamics__Ca_i_converted);
            const double var_x59 = 1 / mParameters[4];
            const double var_x60 = exp(-0.0037441703461708587 * var_chaste_interface__membrane__V);
            const double var_x61 = exp(0.01485884101040119 * mParameters[7]);
            const double var_x62 = 0.037441703461708581 * var_chaste_interface__membrane__V;
            const double var_x63 = exp(-var_x62);
            const double var_x64 = var_x54 - var_x53 * var_x7;
            const double var_x65 = var_x51 * var_x56 * var_x64 / pow(var_x55, 2);
            const double var_x66 = -0.0034841999999999998 - var_x22 - var_x58 - 0.0022160000000000001 / var_x36 - 0.0048674214500221162 * var_x65 - var_x37 * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to - var_x42 * var_chaste_interface__fast_sodium_current_h_gate__h - var_x44 * var_x47 - pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2) * mParameters[15] - var_x49 * var_x50 / (2.0 + var_x48) - 0.00037056856187290968 * var_x35 * var_x40 / pow(var_x36, 2) + 0.02 * var_x40 * var_x44 * var_x46 / pow((0.40000000000000002 + var_x46), 2) + 0.015163889901991977 * var_x40 * var_x48 * var_x50 * mParameters[6] / pow((1 + 0.5 * var_x48), 2) - 0.69299999999999995 * (0.00046614920809827186 * var_x60 + 0.037441703461708581 * var_x63 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x61)) * mParameters[6] / ((1.0 + 31.622776601683793 * pow(var_x59, 1.5)) * (1.5 + mParameters[6]) * pow((1.0 + 0.1245 * var_x60 + 0.036499999999999998 * var_x63 * (-0.14285714285714285 + 0.14285714285714285 * var_x61)), 2));
            const double var_x67 = var_x11 < 2.6708186528497407e-6;
            const double var_x68 = exp(var_x62);
            const double var_x69 = var_x68 * mParameters[3];
            const double var_x70 = var_x2 + var_x69;
            const double var_x71 = var_x33 * var_x70;
            const double var_x72 = -1.0 + var_x68;
            const double var_x73 = 1 / var_x72;
            const double var_x74 = 0.0020919990183677745 * var_x73;
            const double var_x75 = 7.8328006887911654e-5 * var_chaste_interface__membrane__V;
            const double var_x76 = var_x70 * var_chaste_interface__membrane__V;
            const double var_x77 = 0.00055437973986746029 * var_x26 * var_x73 * var_x76;
            
            partialF = ((var_x67) ? (var_x29 + var_x66 + var_x30 * (var_x29 + var_x28 * var_x31) - var_x3 * var_x34 - var_x31 * var_x34) : (var_x66 - var_x22 * var_x77 - var_x71 * var_x74 + var_x68 * var_x71 * var_x75 / pow(var_x72, 2) - var_x33 * var_x69 * var_x73 * var_x75));
        }
        else
        {
            const double y_save = rY[0];
            rY[0] += delta;
            const double temp = EvaluateYDerivative0(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[0])/delta;
            rY[0] = y_save;
        }
        return partialF;
    }
    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluateYDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__calcium_dynamics__Ca_i_converted = rY[1];
        // Units: millimolar; Initial value: 4.72e-05
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[9];
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[10];
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = rY[11];
        // Units: dimensionless; Initial value: 0.942
        double var_chaste_interface__calcium_dynamics__Ca_SR = rY[12];
        // Units: micromolar; Initial value: 320.0
        

        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_calcium_dynamics__Ca_i = 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted; // micromolar
        const double var_calcium_dynamics__J_leak = (-var_calcium_dynamics__Ca_i + var_chaste_interface__calcium_dynamics__Ca_SR) * mParameters[0]; // micromolar_per_millisecond
        const double var_calcium_dynamics__J_up = mParameters[2] / (1.0 + 0.1024 / pow(var_calcium_dynamics__Ca_i, 2)); // micromolar_per_millisecond
        const double var_calcium_dynamics__J_rel = (-var_calcium_dynamics__Ca_i + var_chaste_interface__calcium_dynamics__Ca_SR / (1.0 + 8000000000.0 / pow(var_chaste_interface__calcium_dynamics__Ca_SR, 3))) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f * mParameters[1] / (_lt_0_row[15]); // micromolar_per_millisecond
        const double var_sarcolemmal_calcium_pump__i_p_Ca = 0.050000000000000003 * var_calcium_dynamics__Ca_i / (0.050000000000000003 + var_calcium_dynamics__Ca_i); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca_max = ((fabs(var_chaste_interface__membrane__V) < 1.3354093264248704e-6) ? (374417.03461708582 * (1.3354093264248704e-6 + var_chaste_interface__membrane__V) * (1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(-9.9999999999999995e-8))) - 1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(-9.9999999999999995e-8))) : (14.452497536219512 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * _lt_0_row[0]) * mParameters[8] * var_chaste_interface__membrane__V / (_lt_0_row[1]))); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca = var_L_type_Ca_current__i_Ca_max * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f; // microA_per_microF
        const double var_calcium_background_current__i_Ca_b = 0.00038420000000000001 * var_chaste_interface__membrane__V - 0.0051306426321243524 * log(mParameters[5] / var_calcium_dynamics__Ca_i); // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa = (pow(mParameters[4], 3) * mParameters[5] * _lt_0_row[6] - pow(mParameters[7], 3) * var_calcium_dynamics__Ca_i * _lt_0_row[7]) * mParameters[16] / ((_lt_0_row[8]) * (1380.0 + mParameters[5]) * (669921.875 + pow(mParameters[7], 3))); // microA_per_microF
        const double d_dt_chaste_interface_var_calcium_dynamics__Ca_i_converted = 0.001 * (-var_calcium_dynamics__J_up + 0.061518471582797281 * var_Na_Ca_exchanger__i_NaCa - 0.03075923579139864 * var_L_type_Ca_current__i_Ca - 0.03075923579139864 * var_calcium_background_current__i_Ca_b - 0.03075923579139864 * var_sarcolemmal_calcium_pump__i_p_Ca + var_calcium_dynamics__J_leak + var_calcium_dynamics__J_rel) / (1.0 + 5.0 / pow((1 + 0.5 * var_calcium_dynamics__Ca_i), 2)); // millimolar / millisecond

        return d_dt_chaste_interface_var_calcium_dynamics__Ca_i_converted;
    }

    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluatePartialDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -94.7
            double var_chaste_interface__calcium_dynamics__Ca_i_converted = rY[1];
            // Units: millimolar; Initial value: 4.72e-05
            double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[9];
            // Units: dimensionless; Initial value: 0.983
            double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[10];
            // Units: dimensionless; Initial value: 0.0001
            double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = rY[11];
            // Units: dimensionless; Initial value: 0.942
            double var_chaste_interface__calcium_dynamics__Ca_SR = rY[12];
            // Units: micromolar; Initial value: 320.0
            

        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

            const double var_x0 = exp(-9.9999999999999995e-8);
            const double var_x1 = 1 / (-1.0 + var_x0);
            const double var_x4 = exp(9.9999999999999995e-8);
            const double var_x5 = 1 / (-1.0 + var_x4);
            const double var_x6 = -0.34100000000000003 * mParameters[5];
            const double var_x7 = 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted;
            const double var_x8 = var_x5 * (var_x6 + var_x4 * var_x7);
            const double var_x10 = var_x1 * (var_x6 + var_x0 * var_x7);
            const double var_x11 = fabs(var_chaste_interface__membrane__V);
            const double var_x12 = var_x11 < 1.3354093264248704e-6;
            const double var_x13 = _lt_0_row[0];
            const double var_x14 = var_x6 + var_x13 * var_x7;
            const double var_x15 = -1.0 + var_x13;
            const double var_x16 = mParameters[8] / var_x15;
            const double var_x17 = 14.452497536219512 * var_x14 * var_x16;
            const double var_x18 = var_x13 * var_chaste_interface__membrane__V;
            const double var_x19 = var_x16 * var_x18;
            const double var_x20 = var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f;
            const double var_x21 = var_x20 * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca;
            const double var_x23 = 1.9299999999999998e-5 * mParameters[8];
            const double var_x24 = var_x10 * var_x23;
            const double var_x25 = ((var_x12) ? (-var_x24 + 374417.03461708582 * (1.3354093264248704e-6 + var_chaste_interface__membrane__V) * (var_x24 + var_x23 * var_x8)) : (var_x17 * var_chaste_interface__membrane__V));
            const double var_x51 = _lt_0_row[7];
            const double var_x52 = pow(mParameters[7], 3);
            const double var_x53 = var_x51 * var_x52;
            const double var_x54 = pow(mParameters[4], 3) * mParameters[5] * _lt_0_row[6];
            const double var_x55 = 1.0 + 0.20000000000000001 * var_x51;
            const double var_x56 = mParameters[16] / ((1380.0 + mParameters[5]) * (669921.875 + var_x52));
            const double var_x57 = var_x56 / var_x55;
            const double var_x64 = var_x54 - var_x53 * var_x7;
            const double var_x78 = 0.019299999999999998 * mParameters[8];
            const double var_x79 = var_x0 * var_x1 * var_x78;
            const double var_x80 = var_x21 * ((var_x12) ? (-var_x79 + (0.5 + 374417.03461708582 * var_chaste_interface__membrane__V) * (var_x79 + var_x4 * var_x5 * var_x78)) : (14452.497536219513 * var_x19));
            const double var_x83 = 1 / (0.050000000000000003 + var_x7);
            const double var_x84 = 1 / var_chaste_interface__calcium_dynamics__Ca_i_converted;
            const double var_x85 = var_chaste_interface__calcium_dynamics__Ca_i_converted / pow((5.0000000000000002e-5 + var_chaste_interface__calcium_dynamics__Ca_i_converted), 2);
            const double var_x86 = var_x53 * var_x57;
            const double var_x95 = var_x25 * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca;
            const double var_x96 = var_x95 * var_chaste_interface__L_type_Ca_current_d_gate__d;
            const double var_x108 = exp(0.050000000000000003 * var_chaste_interface__membrane__V);
            const double var_x109 = -var_x7;
            const double var_x110 = pow(var_chaste_interface__calcium_dynamics__Ca_SR, (-3));
            const double var_x111 = 1 / (1.0 + 8000000000.0 * var_x110);
            const double var_x112 = var_x109 + var_x111 * var_chaste_interface__calcium_dynamics__Ca_SR;
            const double var_x114 = 0.002 + var_chaste_interface__calcium_dynamics__Ca_i_converted;
            const double var_x115 = 1.0 + 2.0000000000000002e-5 / pow(var_x114, 2);
            const double var_x116 = 0.001 / var_x115;
            const double var_x117 = 1.537961789569932 * var_x83;
            const double var_x118 = 1000.0 * mParameters[0];
            const double var_x119 = pow(var_chaste_interface__calcium_dynamics__Ca_i_converted, 2);
            const double var_x120 = 1.0 + 1.024e-7 / var_x119;
            const double var_x121 = pow(var_chaste_interface__calcium_dynamics__Ca_i_converted, 3);
            const double var_x122 = 2.0480000000000001e-7 * mParameters[2] / (pow(var_x120, 2) * var_x121);
            const double var_x123 = mParameters[1] / (1.0 + 1.6499999999999999 * var_x108);
            const double var_x124 = var_x123 * var_x21;
            const double var_x125 = 1000.0 * var_x124;
            const double var_x126 = (var_x109 + var_chaste_interface__calcium_dynamics__Ca_SR) * mParameters[0];
            const double var_x127 = mParameters[2] / var_x120;
            const double var_x128 = 0.03075923579139864 * var_x96;
            const double var_x129 = var_x112 * var_x123;
            const double var_x130 = var_x129 * var_x21;
            
            partialF = var_x116 * (-var_x117 - var_x118 - var_x122 - var_x125 + 0.001537961789569932 * var_x85 - 0.00015781464648291512 * var_x84 - 61.518471582797282 * var_x86 - 0.03075923579139864 * var_x80) + 4.0000000000000001e-8 * (var_x126 + var_x130 - var_x127 + 0.00015781464648291512 * log(0.001 * var_x84 * mParameters[5]) - 1.1817698391055359e-5 * var_chaste_interface__membrane__V - var_x117 * var_chaste_interface__calcium_dynamics__Ca_i_converted - var_x128 * var_chaste_interface__L_type_Ca_current_f_gate__f + 0.061518471582797281 * var_x57 * var_x64) / (pow(var_x114, 3) * pow(var_x115, 2));
        }
        else
        {
            const double y_save = rY[1];
            rY[1] += delta;
            const double temp = EvaluateYDerivative1(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[1])/delta;
            rY[1] = y_save;
        }
        return partialF;
    }
    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluateYDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.00024676
        

        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_fast_sodium_current_m_gate__m = (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m) * _lt_0_row[16] - 0.080000000000000002 * var_chaste_interface__fast_sodium_current_m_gate__m * _lt_0_row[17]; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current_m_gate__m;
    }

    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluatePartialDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -94.7
            

        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

            const double var_x45 = 0.10000000000000001 * var_chaste_interface__membrane__V;
            const double var_x136 = 1 / (1.0 - exp(1.0000000000287557e-7));
            const double var_x137 = 1 / (1.0 - exp(-1.0000000000287557e-7));
            const double var_x138 = _lt_0_row[17];
            const double var_x140 = 47.130000000000003 + var_chaste_interface__membrane__V;
            const double var_x141 = fabs(var_x140) < 1.0000000000287557e-6;
            const double var_x142 = -var_x45;
            const double var_x143 = exp(-4.7130000000000001 + var_x142);
            const double var_x144 = 1.0 - var_x143;
            const double var_x145 = 0.32000000000000001 / var_x144;
            const double var_x146 = -0.080000000000000002 * var_x138;
            const double var_x147 = -3.200000000092018e-7 * var_x137;
            
            partialF = ((var_x141) ? (var_x146 + var_x147 + 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__V) * (var_x147 - 3.200000000092018e-7 * var_x136)) : (var_x146 - var_x140 * var_x145));
        }
        else
        {
            const double y_save = rY[2];
            rY[2] += delta;
            const double temp = EvaluateYDerivative2(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[2])/delta;
            rY[2] = y_save;
        }
        return partialF;
    }
    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluateYDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.99869
        


        // Mathematics
        const double var_fast_sodium_current_h_gate__alpha_h = 0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[12] - 0.14705882352941177 * var_chaste_interface__membrane__V); // per_millisecond
        const double var_fast_sodium_current_h_gate__beta_h = 7.5 / (1.0 + exp(-1.1000000000000001 + 0.10000000000000001 * mParameters[12] - 0.10000000000000001 * var_chaste_interface__membrane__V)); // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_h_gate__h = (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h) * (-var_chaste_interface__fast_sodium_current_h_gate__h + 0.01 * mParameters[11] + (1.0 - 0.01 * mParameters[11]) * var_fast_sodium_current_h_gate__alpha_h / (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h)); // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current_h_gate__h;
    }

    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluatePartialDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -94.7
            


            const double var_x45 = 0.10000000000000001 * var_chaste_interface__membrane__V;
            const double var_x142 = -var_x45;
            const double var_x148 = var_x142 + 0.10000000000000001 * mParameters[12];
            const double var_x149 = exp(-1.1000000000000001 + var_x148);
            const double var_x150 = 1.0 + var_x149;
            const double var_x151 = 1 / var_x150;
            const double var_x152 = 7.5 * var_x151;
            const double var_x153 = exp(-11.764705882352942 + 0.14705882352941177 * mParameters[12] - 0.14705882352941177 * var_chaste_interface__membrane__V);
            const double var_x154 = 0.13500000000000001 * var_x153;
            
            partialF = -var_x152 - var_x154;
        }
        else
        {
            const double y_save = rY[3];
            rY[3] += delta;
            const double temp = EvaluateYDerivative3(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[3])/delta;
            rY[3] = y_save;
        }
        return partialF;
    }
    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluateYDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.99887
        


        // Mathematics
        const double var_fast_sodium_current_j_gate__alpha_j = 0.17499999999999999 * exp(-4.3478260869565215 + 0.043478260869565216 * mParameters[12] - 0.043478260869565216 * var_chaste_interface__membrane__V) / (1.0 + exp(11.85 + 0.14999999999999999 * var_chaste_interface__membrane__V - 0.14999999999999999 * mParameters[12])); // per_millisecond
        const double var_fast_sodium_current_j_gate__beta_j = 0.29999999999999999 / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[12] - 0.10000000000000001 * var_chaste_interface__membrane__V)); // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_j_gate__j = (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j) * (-var_chaste_interface__fast_sodium_current_j_gate__j + 0.01 * mParameters[11] + (1.0 - 0.01 * mParameters[11]) * var_fast_sodium_current_j_gate__alpha_j / (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j)); // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current_j_gate__j;
    }

    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluatePartialDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -94.7
            


            const double var_x45 = 0.10000000000000001 * var_chaste_interface__membrane__V;
            const double var_x142 = -var_x45;
            const double var_x148 = var_x142 + 0.10000000000000001 * mParameters[12];
            const double var_x161 = exp(-3.2000000000000002 + var_x148);
            const double var_x162 = 1.0 + var_x161;
            const double var_x163 = 1 / var_x162;
            const double var_x164 = 0.29999999999999999 * var_x163;
            const double var_x165 = exp(11.85 + 0.14999999999999999 * var_chaste_interface__membrane__V - 0.14999999999999999 * mParameters[12]);
            const double var_x166 = 1.0 + var_x165;
            const double var_x167 = exp(-4.3478260869565215 + 0.043478260869565216 * mParameters[12] - 0.043478260869565216 * var_chaste_interface__membrane__V);
            const double var_x168 = var_x167 / var_x166;
            const double var_x169 = 0.17499999999999999 * var_x168;
            
            partialF = -var_x164 - var_x169;
        }
        else
        {
            const double y_save = rY[4];
            rY[4] += delta;
            const double temp = EvaluateYDerivative4(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[4])/delta;
            rY[4] = y_save;
        }
        return partialF;
    }
    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluateYDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = rY[5];
        // Units: dimensionless; Initial value: 0.229
        

        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = (-var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr + _lt_0_row[18]) / (_lt_0_row[19]); // 1 / millisecond

        return d_dt_chaste_interface_var_rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr;
    }

    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluatePartialDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -94.7
            


            const double var_x177 = exp(-7.6769999999999996 - 0.012800000000000001 * var_chaste_interface__membrane__V);
            const double var_x178 = exp(-5.4950000000000001 + 0.1691 * var_chaste_interface__membrane__V);
            const double var_x179 = var_x177 + var_x178;
            const double var_x180 = 1 / var_x179;
            const double var_x181 = 1 / (43.0 + var_x180);
            
            partialF = -var_x181;
        }
        else
        {
            const double y_save = rY[5];
            rY[5] += delta;
            const double temp = EvaluateYDerivative5(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[5])/delta;
            rY[5] = y_save;
        }
        return partialF;
    }
    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluateYDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = rY[6];
        // Units: dimensionless; Initial value: 0.0001
        

        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = (-var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks + _lt_0_row[20]) * _lt_0_row[21]; // 1 / millisecond

        return d_dt_chaste_interface_var_slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks;
    }

    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluatePartialDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -94.7
            


            const double var_x185 = 1 / (-1.0 + exp(9.9999999999880736e-8));
            const double var_x186 = 1 / (-1.0 + exp(-9.9999999999880736e-8));
            const double var_x187 = 1 / (1.0 - exp(2.1542940320207204e-7));
            const double var_x188 = 1 / (1.0 - exp(-2.1542940320207204e-7));
            const double var_x189 = 1.0465793304208771e-10 * var_x187;
            const double var_x190 = 1.9068413391534758e-10 * var_x186;
            const double var_x191 = var_x189 + var_x190;
            const double var_x192 = 343500.00000040967 * (-9.9999985443959236 + var_chaste_interface__membrane__V) * (var_x191 + 1.0465793304208771e-10 * var_x188 + 1.9068413391534758e-10 * var_x185);
            const double var_x194 = -10.0 + var_chaste_interface__membrane__V;
            const double var_x195 = fabs(var_x194) < 1.455604075689676e-6;
            const double var_x196 = exp(-0.68699999999999994 + 0.068699999999999997 * var_chaste_interface__membrane__V);
            const double var_x197 = -1.0 + var_x196;
            const double var_x198 = 0.00013100000000000001 / var_x197;
            const double var_x199 = exp(1.48 - 0.14799999999999999 * var_chaste_interface__membrane__V);
            const double var_x200 = 1.0 - var_x199;
            const double var_x201 = 7.1899999999999999e-5 / var_x200;
            const double var_x202 = var_x194 * var_x198;
            const double var_x203 = var_x194 * var_x201;
            
            partialF = ((var_x195) ? (var_x191 - var_x192) : (-var_x202 - var_x203));
        }
        else
        {
            const double y_save = rY[6];
            rY[6] += delta;
            const double temp = EvaluateYDerivative6(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[6])/delta;
            rY[6] = y_save;
        }
        return partialF;
    }
    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluateYDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = rY[7];
        // Units: dimensionless; Initial value: 3.742e-05
        

        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_transient_outward_potassium_current_X_to_gate__X_to = 0.045159999999999999 * (1.0 - var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to) * _lt_0_row[22] - 0.098900000000000002 * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to * _lt_0_row[23]; // 1 / millisecond

        return d_dt_chaste_interface_var_transient_outward_potassium_current_X_to_gate__X_to;
    }

    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluatePartialDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -94.7
            

        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

            const double var_x204 = _lt_0_row[22];
            const double var_x205 = _lt_0_row[23];
            
            partialF = -0.045159999999999999 * var_x204 - 0.098900000000000002 * var_x205;
        }
        else
        {
            const double y_save = rY[7];
            rY[7] += delta;
            const double temp = EvaluateYDerivative7(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[7])/delta;
            rY[7] = y_save;
        }
        return partialF;
    }
    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluateYDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = rY[8];
        // Units: dimensionless; Initial value: 1.0
        

        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_transient_outward_potassium_current_Y_to_gate__Y_to = 0.0054149999999999997 * (1.0 - var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to) * _lt_0_row[25] / (_lt_0_row[24]) - 0.0054149999999999997 * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to * _lt_0_row[27] / (_lt_0_row[26]); // 1 / millisecond

        return d_dt_chaste_interface_var_transient_outward_potassium_current_Y_to_gate__Y_to;
    }

    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluatePartialDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -94.7
            


            const double var_x206 = 0.20000000000000001 * var_chaste_interface__membrane__V;
            const double var_x207 = exp(6.7000000000000002 + var_x206);
            const double var_x208 = 1.0 + 0.051334999999999999 * var_x207;
            const double var_x209 = exp(-6.7000000000000002 - var_x206);
            const double var_x210 = 1.0 + 0.051334999999999999 * var_x209;
            const double var_x212 = var_x207 / var_x208;
            const double var_x213 = var_x209 / var_x210;
            
            partialF = -0.0054149999999999997 * var_x212 - 0.0054149999999999997 * var_x213;
        }
        else
        {
            const double y_save = rY[8];
            rY[8] += delta;
            const double temp = EvaluateYDerivative8(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[8])/delta;
            rY[8] = y_save;
        }
        return partialF;
    }
    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluateYDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[9];
        // Units: dimensionless; Initial value: 0.983
        

        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_L_type_Ca_current_f_gate__f = (-var_chaste_interface__L_type_Ca_current_f_gate__f + _lt_0_row[13]) / (_lt_0_row[14]); // 1 / millisecond

        return d_dt_chaste_interface_var_L_type_Ca_current_f_gate__f;
    }

    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluatePartialDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -94.7
            


            const double var_x216 = exp(2.1052631578947367 + 0.10526315789473684 * var_chaste_interface__membrane__V);
            const double var_x217 = 1.0 + var_x216;
            const double var_x218 = 1 / var_x217;
            const double var_x219 = 1 / (30.0 + 200.0 * var_x218);
            
            partialF = -var_x219;
        }
        else
        {
            const double y_save = rY[9];
            rY[9] += delta;
            const double temp = EvaluateYDerivative9(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[9])/delta;
            rY[9] = y_save;
        }
        return partialF;
    }
    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluateYDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[10];
        // Units: dimensionless; Initial value: 0.0001
        

        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double d_dt_chaste_interface_var_L_type_Ca_current_d_gate__d = (-var_chaste_interface__L_type_Ca_current_d_gate__d + _lt_0_row[11]) * (_lt_0_row[12]); // 1 / millisecond

        return d_dt_chaste_interface_var_L_type_Ca_current_d_gate__d;
    }

    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluatePartialDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -94.7
            


            const double var_x222 = exp(-0.070000000000000007 * var_chaste_interface__membrane__V);
            const double var_x223 = 1.0 + var_x222;
            const double var_x224 = exp(-0.01 * var_chaste_interface__membrane__V);
            const double var_x225 = var_x224 / var_x223;
            const double var_x226 = 0.050000000000000003 * var_chaste_interface__membrane__V;
            const double var_x227 = exp(2.0 + var_x226);
            const double var_x228 = 1.0 + var_x227;
            const double var_x229 = exp(-2.0 - var_x226);
            const double var_x230 = var_x229 / var_x228;
            const double var_x231 = 0.25 * var_x225;
            const double var_x232 = 0.070000000000000007 * var_x230;
            
            partialF = -var_x231 - var_x232;
        }
        else
        {
            const double y_save = rY[10];
            rY[10] += delta;
            const double temp = EvaluateYDerivative10(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[10])/delta;
            rY[10] = y_save;
        }
        return partialF;
    }
    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluateYDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_dynamics__Ca_i_converted = rY[1];
        // Units: millimolar; Initial value: 4.72e-05
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = rY[11];
        // Units: dimensionless; Initial value: 0.942
        


        // Mathematics
        const double var_calcium_dynamics__Ca_i = 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted; // micromolar
        const double d_dt_chaste_interface_var_L_type_Ca_current_f_Ca_gate__f_Ca = (-var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca + 1 / (1.0 + 171.46776406035667 * pow(var_calcium_dynamics__Ca_i, 3))) / mParameters[9]; // 1 / millisecond

        return d_dt_chaste_interface_var_L_type_Ca_current_f_Ca_gate__f_Ca;
    }

    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluatePartialDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            const double var_x233 = 1 / mParameters[9];
            
            partialF = -var_x233;
        }
        else
        {
            const double y_save = rY[11];
            rY[11] += delta;
            const double temp = EvaluateYDerivative11(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[11])/delta;
            rY[11] = y_save;
        }
        return partialF;
    }
    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluateYDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__calcium_dynamics__Ca_i_converted = rY[1];
        // Units: millimolar; Initial value: 4.72e-05
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[9];
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[10];
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = rY[11];
        // Units: dimensionless; Initial value: 0.942
        double var_chaste_interface__calcium_dynamics__Ca_SR = rY[12];
        // Units: micromolar; Initial value: 320.0
        

        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_calcium_dynamics__Ca_i = 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted; // micromolar
        const double var_calcium_dynamics__J_leak = (-var_calcium_dynamics__Ca_i + var_chaste_interface__calcium_dynamics__Ca_SR) * mParameters[0]; // micromolar_per_millisecond
        const double var_calcium_dynamics__J_up = mParameters[2] / (1.0 + 0.1024 / pow(var_calcium_dynamics__Ca_i, 2)); // micromolar_per_millisecond
        const double var_calcium_dynamics__J_rel = (-var_calcium_dynamics__Ca_i + var_chaste_interface__calcium_dynamics__Ca_SR / (1.0 + 8000000000.0 / pow(var_chaste_interface__calcium_dynamics__Ca_SR, 3))) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f * mParameters[1] / (_lt_0_row[15]); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_dynamics__Ca_SR = 12.92 * (-var_calcium_dynamics__J_leak - var_calcium_dynamics__J_rel + var_calcium_dynamics__J_up) / (1.0 + 16.666666666666668 / pow((1 + 0.0016666666666666668 * var_chaste_interface__calcium_dynamics__Ca_SR), 2)); // micromolar / millisecond

        return d_dt_chaste_interface_var_calcium_dynamics__Ca_SR;
    }

    double Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::EvaluatePartialDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -94.7
            double var_chaste_interface__calcium_dynamics__Ca_i_converted = rY[1];
            // Units: millimolar; Initial value: 4.72e-05
            double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[9];
            // Units: dimensionless; Initial value: 0.983
            double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[10];
            // Units: dimensionless; Initial value: 0.0001
            double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = rY[11];
            // Units: dimensionless; Initial value: 0.942
            double var_chaste_interface__calcium_dynamics__Ca_SR = rY[12];
            // Units: micromolar; Initial value: 320.0
            


            const double var_x7 = 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted;
            const double var_x20 = var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_gate__f;
            const double var_x21 = var_x20 * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca;
            const double var_x108 = exp(0.050000000000000003 * var_chaste_interface__membrane__V);
            const double var_x109 = -var_x7;
            const double var_x110 = pow(var_chaste_interface__calcium_dynamics__Ca_SR, (-3));
            const double var_x111 = 1 / (1.0 + 8000000000.0 * var_x110);
            const double var_x112 = var_x109 + var_x111 * var_chaste_interface__calcium_dynamics__Ca_SR;
            const double var_x119 = pow(var_chaste_interface__calcium_dynamics__Ca_i_converted, 2);
            const double var_x120 = 1.0 + 1.024e-7 / var_x119;
            const double var_x123 = mParameters[1] / (1.0 + 1.6499999999999999 * var_x108);
            const double var_x124 = var_x123 * var_x21;
            const double var_x126 = (var_x109 + var_chaste_interface__calcium_dynamics__Ca_SR) * mParameters[0];
            const double var_x127 = mParameters[2] / var_x120;
            const double var_x129 = var_x112 * var_x123;
            const double var_x130 = var_x129 * var_x21;
            const double var_x134 = var_x124 * (var_x111 + 3.75e-10 * var_x110 / pow((1.2500000000000001e-10 + var_x110), 2));
            const double var_x234 = 1 + 0.0016666666666666668 * var_chaste_interface__calcium_dynamics__Ca_SR;
            const double var_x235 = pow(var_x234, (-2));
            const double var_x236 = 1 / (1.0 + 16.666666666666668 * var_x235);
            const double var_x237 = 12.92 * var_x236;
            
            partialF = var_x237 * (-var_x134 - mParameters[0]) + 0.0025839999999999999 * (var_x127 - var_x126 - var_x130) / (pow(var_x234, 3) * pow((0.059999999999999998 + var_x235), 2));
        }
        else
        {
            const double y_save = rY[12];
            rY[12] += delta;
            const double temp = EvaluateYDerivative12(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[12])/delta;
            rY[12] = y_save;
        }
        return partialF;
    }

    std::vector<double> Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -94.7
        double var_chaste_interface__calcium_dynamics__Ca_i_converted = rY[1];
        // Units: millimolar; Initial value: 4.72e-05
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.00024676
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.99869
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.99887
        double var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr = rY[5];
        // Units: dimensionless; Initial value: 0.229
        double var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks = rY[6];
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to = rY[7];
        // Units: dimensionless; Initial value: 3.742e-05
        double var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to = rY[8];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__L_type_Ca_current_f_gate__f = rY[9];
        // Units: dimensionless; Initial value: 0.983
        double var_chaste_interface__L_type_Ca_current_d_gate__d = rY[10];
        // Units: dimensionless; Initial value: 0.0001
        double var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca = rY[11];
        // Units: dimensionless; Initial value: 0.942
        double var_chaste_interface__calcium_dynamics__Ca_SR = rY[12];
        // Units: micromolar; Initial value: 320.0
        
        // Lookup table indexing
        const bool _oob_0 = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_Na_Ca_exchanger__K_mCa = 1380.0; // micromolar
        const double var_Na_Ca_exchanger__K_mNa = 87.5; // millimolar
        const double var_Na_Ca_exchanger__K_sat = 0.20000000000000001; // dimensionless
        const double var_Na_Ca_exchanger__eta = 0.34999999999999998; // dimensionless
        const double var_calcium_dynamics__Ca_i = 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted; // micromolar
        const double var_calcium_dynamics__gamma = 1 / (1.0 + 8000000000.0 / pow(var_chaste_interface__calcium_dynamics__Ca_SR, 3)); // dimensionless
        const double var_membrane__F = 96.5; // coulomb_per_millimole
        const double var_membrane__R = 8.3140000000000001; // joule_per_mole_kelvin
        const double var_membrane__T = 310.0; // kelvin
        const double var_L_type_Ca_current_f_gate__tau_f = _lt_0_row[14]; // millisecond
        const double var_calcium_dynamics__J_rel = (-var_calcium_dynamics__Ca_i + var_chaste_interface__calcium_dynamics__Ca_SR * var_calcium_dynamics__gamma) * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f * mParameters[1] / (_lt_0_row[15]); // micromolar_per_millisecond
        const double var_fast_sodium_current_h_gate__alpha_h = 0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[12] - 0.14705882352941177 * var_chaste_interface__membrane__V); // per_millisecond
        const double var_fast_sodium_current_h_gate__beta_h = 7.5 / (1.0 + exp(-1.1000000000000001 + 0.10000000000000001 * mParameters[12] - 0.10000000000000001 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_fast_sodium_current_h_gate__tau_h = 1 / (var_fast_sodium_current_h_gate__alpha_h + var_fast_sodium_current_h_gate__beta_h); // millisecond
        const double var_fast_sodium_current_j_gate__alpha_j = 0.17499999999999999 * exp(-4.3478260869565215 + 0.043478260869565216 * mParameters[12] - 0.043478260869565216 * var_chaste_interface__membrane__V) / (1.0 + exp(11.85 + 0.14999999999999999 * var_chaste_interface__membrane__V - 0.14999999999999999 * mParameters[12])); // per_millisecond
        const double var_fast_sodium_current_j_gate__beta_j = 0.29999999999999999 / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[12] - 0.10000000000000001 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_fast_sodium_current_j_gate__tau_j = 1 / (var_fast_sodium_current_j_gate__alpha_j + var_fast_sodium_current_j_gate__beta_j); // millisecond
        const double var_membrane__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_rapid_activating_delayed_rectifiyer_K_current__R_V = 1 / (_lt_0_row[5]); // dimensionless
        const double var_L_type_Ca_current__i_Ca_max = ((fabs(var_chaste_interface__membrane__V) < 1.3354093264248704e-6) ? (374417.03461708582 * (1.3354093264248704e-6 + var_chaste_interface__membrane__V) * (1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(-9.9999999999999995e-8))) - 1.9299999999999998e-5 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * exp(-9.9999999999999995e-8)) * mParameters[8] / (-1.0 + exp(-9.9999999999999995e-8))) : (14.452497536219512 * (-0.34100000000000003 * mParameters[5] + 1000.0 * var_chaste_interface__calcium_dynamics__Ca_i_converted * _lt_0_row[0]) * mParameters[8] * var_chaste_interface__membrane__V / (_lt_0_row[1]))); // microA_per_microF
        const double var_L_type_Ca_current__i_Ca = var_L_type_Ca_current__i_Ca_max * var_chaste_interface__L_type_Ca_current_d_gate__d * var_chaste_interface__L_type_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__L_type_Ca_current_f_gate__f; // microA_per_microF
        const double var_L_type_Ca_current__i_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_L_type_Ca_current__i_Ca; // uA_per_cm2
        const double var_rapid_activating_delayed_rectifiyer_K_current__E_K = var_membrane__R * var_membrane__T * log(mParameters[6] / mParameters[3]) / var_membrane__F; // millivolt
        const double var_rapid_activating_delayed_rectifiyer_K_current__i_Kr = 0.5 * sqrt(mParameters[6]) * (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * var_rapid_activating_delayed_rectifiyer_K_current__R_V * mParameters[14] * var_chaste_interface__rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr; // microA_per_microF
        const double var_rapid_activating_delayed_rectifiyer_K_current__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_rapid_activating_delayed_rectifiyer_K_current__i_Kr; // uA_per_cm2
        const double var_Na_Ca_exchanger__i_NaCa = (pow(mParameters[4], 3) * mParameters[5] * exp(var_Na_Ca_exchanger__eta * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T)) - pow(mParameters[7], 3) * var_calcium_dynamics__Ca_i * exp((-1.0 + var_Na_Ca_exchanger__eta) * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * mParameters[16] / ((1.0 + var_Na_Ca_exchanger__K_sat * exp((-1.0 + var_Na_Ca_exchanger__eta) * var_membrane__F * var_chaste_interface__membrane__V / (var_membrane__R * var_membrane__T))) * (pow(var_Na_Ca_exchanger__K_mNa, 3) + pow(mParameters[7], 3)) * (var_Na_Ca_exchanger__K_mCa + mParameters[5])); // microA_per_microF
        const double var_Na_Ca_exchanger__i_NaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_Na_Ca_exchanger__i_NaCa; // uA_per_cm2
        const double var_fast_sodium_current__E_Na = var_membrane__R * var_membrane__T * log(mParameters[7] / mParameters[4]) / var_membrane__F; // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * mParameters[10] * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // microA_per_microF
        const double var_fast_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_slow_activating_delayed_rectifiyer_K_current__E_Ks = var_membrane__R * var_membrane__T * log((mParameters[6] + 0.018329999999999999 * mParameters[7]) / (mParameters[3] + 0.018329999999999999 * mParameters[4])) / var_membrane__F; // millivolt
        const double var_slow_activating_delayed_rectifiyer_K_current__i_Ks = pow(var_chaste_interface__slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks, 2) * (-var_slow_activating_delayed_rectifiyer_K_current__E_Ks + var_chaste_interface__membrane__V) * mParameters[15]; // microA_per_microF
        const double var_slow_activating_delayed_rectifiyer_K_current__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_slow_activating_delayed_rectifiyer_K_current__i_Ks; // uA_per_cm2
        const double var_time_independent_potassium_current__K_mK1 = 13.0; // millimolar
        const double var_time_independent_potassium_current_K1_gate__K1_infinity = 1 / (2.0 + exp(1.6200000000000001 * (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * var_membrane__F / (var_membrane__R * var_membrane__T))); // dimensionless
        const double var_time_independent_potassium_current__i_K1 = (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * mParameters[6] * mParameters[13] * var_time_independent_potassium_current_K1_gate__K1_infinity / (mParameters[6] + var_time_independent_potassium_current__K_mK1); // microA_per_microF
        const double var_time_independent_potassium_current__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_time_independent_potassium_current__i_K1; // uA_per_cm2
        const double var_transient_outward_potassium_current__i_to = (-var_rapid_activating_delayed_rectifiyer_K_current__E_K + var_chaste_interface__membrane__V) * mParameters[17] * var_chaste_interface__transient_outward_potassium_current_X_to_gate__X_to * var_chaste_interface__transient_outward_potassium_current_Y_to_gate__Y_to; // microA_per_microF
        const double var_transient_outward_potassium_current__i_to_converted = HeartConfig::Instance()->GetCapacitance() * var_transient_outward_potassium_current__i_to; // uA_per_cm2

        std::vector<double> dqs(14);
        dqs[0] = var_calcium_dynamics__J_rel;
        dqs[1] = var_chaste_interface__calcium_dynamics__Ca_i_converted;
        dqs[2] = var_L_type_Ca_current__i_Ca_converted;
        dqs[3] = var_L_type_Ca_current_f_gate__tau_f;
        dqs[4] = var_fast_sodium_current__i_Na_converted;
        dqs[5] = var_fast_sodium_current_h_gate__tau_h;
        dqs[6] = var_fast_sodium_current_j_gate__tau_j;
        dqs[7] = var_time_independent_potassium_current__i_K1_converted;
        dqs[8] = var_rapid_activating_delayed_rectifiyer_K_current__i_Kr_converted;
        dqs[9] = var_slow_activating_delayed_rectifiyer_K_current__i_Ks_converted;
        dqs[10] = var_Na_Ca_exchanger__i_NaCa_converted;
        dqs[11] = var_membrane__i_Stim_converted;
        dqs[12] = var_transient_outward_potassium_current__i_to_converted;
        dqs[13] = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt>::Initialise(void)
{
    this->mSystemName = "fox_model_2001";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-94.7);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(4.72e-05);

    // rY[2]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00024676);

    // rY[3]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99869);

    // rY[4]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99887);

    // rY[5]:
    this->mVariableNames.push_back("rapid_activating_delayed_rectifiyer_K_current_X_kr_gate__X_kr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.229);

    // rY[6]:
    this->mVariableNames.push_back("slow_activating_delayed_rectifiyer_K_current_X_ks_gate__X_ks");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001);

    // rY[7]:
    this->mVariableNames.push_back("transient_outward_potassium_current_X_to_gate__X_to");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.742e-05);

    // rY[8]:
    this->mVariableNames.push_back("transient_outward_potassium_current_Y_to_gate__Y_to");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[9]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.983);

    // rY[10]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001);

    // rY[11]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.942);

    // rY[12]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(320.0);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("micromolar_per_millisecond");

    // mParameters[3]:
    this->mParameterNames.push_back("cytosolic_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[4]:
    this->mParameterNames.push_back("cytosolic_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[7]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("cm_per_millisecond");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_fCa_gate_tau");
    this->mParameterUnits.push_back("millisecond");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("millivolt");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("microA_per_microF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("micromolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_concentration");
    this->mDerivedQuantityUnits.push_back("millimolar");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellfox_mcharg_gilmour_2002FromCellMLGRL1Opt)

