//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: benson_epicardial_2008
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: GeneralizedRushLarsenFirstOrderOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "benson_epicardial_2008.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<40; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__cell__V)
    {
        const double _offset_0 = var_chaste_interface__cell__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__cell__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__cell__V>mTableMaxs[0] || var_chaste_interface__cell__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables(const Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables&);
    Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables& operator= (const Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables&);
    Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 40;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][40];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.01310255922773 * var_chaste_interface__cell__V);

                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.024333324280070002 * var_chaste_interface__cell__V);

                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + 0.27000000000000002 * exp(-0.024333324280070002 * var_chaste_interface__cell__V);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.0374358835078 * var_chaste_interface__cell__V);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.1245 * exp(-0.00374358835078 * var_chaste_interface__cell__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[5] < 2){
                    double left = _lookup_table_0[i-1][5];
                    double right = _lookup_table_0[i+1][5];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 5 at ["<<i<<"][5] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[5] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[5] >= 2){
                    EXCEPTION("Lookup table 5 at ["<<i<<"][5] has non-finite value: " << val);
                }
                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = -1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[6] < 2){
                    double left = _lookup_table_0[i-1][6];
                    double right = _lookup_table_0[i+1][6];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 6 at ["<<i<<"][6] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[6] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[6] >= 2){
                    EXCEPTION("Lookup table 6 at ["<<i<<"][6] has non-finite value: " << val);
                }
                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.074871767015599999 * var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[7] < 2){
                    double left = _lookup_table_0[i-1][7];
                    double right = _lookup_table_0[i+1][7];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 7 at ["<<i<<"][7] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[7] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[7] >= 2){
                    EXCEPTION("Lookup table 7 at ["<<i<<"][7] has non-finite value: " << val);
                }
                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = -1.0 + exp(0.074871767015599999 * var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[8] < 2){
                    double left = _lookup_table_0[i-1][8];
                    double right = _lookup_table_0[i+1][8];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 8 at ["<<i<<"][8] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[8] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[8] >= 2){
                    EXCEPTION("Lookup table 8 at ["<<i<<"][8] has non-finite value: " << val);
                }
                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = -100.0 * exp(0.0374358835078 * var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[9] < 2){
                    double left = _lookup_table_0[i-1][9];
                    double right = _lookup_table_0[i+1][9];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 9 at ["<<i<<"][9] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[9] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[9] >= 2){
                    EXCEPTION("Lookup table 9 at ["<<i<<"][9] has non-finite value: " << val);
                }
                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 - exp(0.0374358835078 * var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[10] < 2){
                    double left = _lookup_table_0[i-1][10];
                    double right = _lookup_table_0[i+1][10];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 10 at ["<<i<<"][10] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[10] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[10] >= 2){
                    EXCEPTION("Lookup table 10 at ["<<i<<"][10] has non-finite value: " << val);
                }
                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V);

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__cell__V);

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.0033333333333333335 * var_chaste_interface__cell__V);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = -0.80000000000000004 / (1.0 + exp(-19.117647058823529 - 0.29411764705882354 * var_chaste_interface__cell__V));

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(0.59347181008902072 - 0.14836795252225518 * var_chaste_interface__cell__V));

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.58999999999999997 + 0.80000000000000004 * exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__cell__V) / (1.0 + exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__cell__V));

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.69999999999999996 / (1.0 + exp(2.4457142857142857 + 0.14285714285714285 * var_chaste_interface__cell__V));

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.052900000000000003 + 0.24110000000000001 * exp(-0.19019454876899997 * pow((-1 + 0.10318426646304972 * var_chaste_interface__cell__V), 2));

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.77000000000000002 / (1.0 + exp(2.4457142857142857 + 0.14285714285714285 * var_chaste_interface__cell__V));

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.0054000000000000003 + 0.042299999999999997 * exp(-1.20074125971556 * pow((-1 + 0.053842757610673787 * var_chaste_interface__cell__V), 2));

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-2.3729411764705883 - 0.23529411764705882 * var_chaste_interface__cell__V));

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(38.360799999999998 + var_chaste_interface__cell__V) < 6.5703022339436146e-7) ? (-1.9710906701830842e-10 / (-1.0 + exp(-1.0000000000062181e-7)) + 0.00059999999999999995 * (-1.7383999999999999 + var_chaste_interface__cell__V) / (1.0 - exp(0.2364224 - 0.13600000000000001 * var_chaste_interface__cell__V)) + 760999.99999526795 * (38.360800657030218 + var_chaste_interface__cell__V) * (1.9710906701830842e-10 / (-1.0 + exp(1.0000000000062181e-7)) + 1.9710906701830842e-10 / (-1.0 + exp(-1.0000000000062181e-7)))) : ((fabs(-1.7383999999999999 + var_chaste_interface__cell__V) < 7.352941176468758e-7) ? (4.4117647058812543e-10 / (1.0 - exp(-9.9999999999975114e-8)) + 0.00029999999999999997 * (38.360799999999998 + var_chaste_interface__cell__V) / (-1.0 + exp(5.8385137599999997 + 0.1522 * var_chaste_interface__cell__V)) - 680000.00000016927 * (-1.7384007352941175 + var_chaste_interface__cell__V) * (-4.4117647058812543e-10 / (1.0 - exp(9.9999999999975114e-8)) - 4.4117647058812543e-10 / (1.0 - exp(-9.9999999999975114e-8)))) : (0.00029999999999999997 * (38.360799999999998 + var_chaste_interface__cell__V) / (-1.0 + exp(5.8385137599999997 + 0.1522 * var_chaste_interface__cell__V)) + 0.00059999999999999995 * (-1.7383999999999999 + var_chaste_interface__cell__V) / (1.0 - exp(0.2364224 - 0.13600000000000001 * var_chaste_interface__cell__V)))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[22] < 2){
                    double left = _lookup_table_0[i-1][22];
                    double right = _lookup_table_0[i+1][22];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 22 at ["<<i<<"][22] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[22] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[22] >= 2){
                    EXCEPTION("Lookup table 22 at ["<<i<<"][22] has non-finite value: " << val);
                }
                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(-0.55000000000000004 + var_chaste_interface__cell__V) < 7.8124999999948028e-7) ? (1 / (-2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)) + 7.6100000000000007e-5 * (44.600000000000001 + var_chaste_interface__cell__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__cell__V)) + 640000.00000042573 * (-0.54999921875000002 + var_chaste_interface__cell__V) * (2.8124999999996902e-10 / (-1.0 + exp(9.9999999999988984e-8)) + 2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8))))) : ((fabs(44.600000000000001 + var_chaste_interface__cell__V) < 1.0030090258350555e-8) ? (1 / (7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)) + 0.00036000000000000002 * (-0.55000000000000004 + var_chaste_interface__cell__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__cell__V)) - 49850000.061936118 * (44.599999989969909 + var_chaste_interface__cell__V) * (-7.6328986866047728e-13 / (1.0 - exp(9.9999999875755032e-8)) - 7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8))))) : (1 / (7.6100000000000007e-5 * (44.600000000000001 + var_chaste_interface__cell__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__cell__V)) + 0.00036000000000000002 * (-0.55000000000000004 + var_chaste_interface__cell__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__cell__V))))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[23] < 2){
                    double left = _lookup_table_0[i-1][23];
                    double right = _lookup_table_0[i+1][23];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 23 at ["<<i<<"][23] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[23] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[23] >= 2){
                    EXCEPTION("Lookup table 23 at ["<<i<<"][23] has non-finite value: " << val);
                }
                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(0.4251012145748988 - 0.04048582995951417 * var_chaste_interface__cell__V));

                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((var_chaste_interface__cell__V >= -40.0) ? (0) : (0.13500000000000001 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__cell__V)));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[25] < 2){
                    double left = _lookup_table_0[i-1][25];
                    double right = _lookup_table_0[i+1][25];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 25 at ["<<i<<"][25] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[25] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[25] >= 2){
                    EXCEPTION("Lookup table 25 at ["<<i<<"][25] has non-finite value: " << val);
                }
                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((var_chaste_interface__cell__V >= -40.0) ? (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__cell__V))) : (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V)));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[26] < 2){
                    double left = _lookup_table_0[i-1][26];
                    double right = _lookup_table_0[i+1][26];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 26 at ["<<i<<"][26] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[26] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[26] >= 2){
                    EXCEPTION("Lookup table 26 at ["<<i<<"][26] has non-finite value: " << val);
                }
                _lookup_table_0[i][26] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((var_chaste_interface__cell__V >= -40.0) ? (0) : ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V) - 3.4740000000000003e-5 * exp(-0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[27] < 2){
                    double left = _lookup_table_0[i-1][27];
                    double right = _lookup_table_0[i+1][27];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 27 at ["<<i<<"][27] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[27] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[27] >= 2){
                    EXCEPTION("Lookup table 27 at ["<<i<<"][27] has non-finite value: " << val);
                }
                _lookup_table_0[i][27] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((var_chaste_interface__cell__V >= -40.0) ? (0.29999999999999999 * exp(-2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__cell__V))) : (0.1212 * exp(-0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[28] < 2){
                    double left = _lookup_table_0[i-1][28];
                    double right = _lookup_table_0[i+1][28];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 28 at ["<<i<<"][28] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[28] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[28] >= 2){
                    EXCEPTION("Lookup table 28 at ["<<i<<"][28] has non-finite value: " << val);
                }
                _lookup_table_0[i][28] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(47.130000000000003 + var_chaste_interface__cell__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[29] < 2){
                    double left = _lookup_table_0[i-1][29];
                    double right = _lookup_table_0[i+1][29];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 29 at ["<<i<<"][29] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[29] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[29] >= 2){
                    EXCEPTION("Lookup table 29 at ["<<i<<"][29] has non-finite value: " << val);
                }
                _lookup_table_0[i][29] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.090909090909090912 * var_chaste_interface__cell__V);

                _lookup_table_0[i][30] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.0016666666666666668 / (1.0 + exp(14.918032786885247 + 0.16393442622950821 * var_chaste_interface__cell__V));

                _lookup_table_0[i][31] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-1.6000000000000001 + 0.040000000000000001 * var_chaste_interface__cell__V);

                _lookup_table_0[i][32] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-1.6000000000000001 + 0.040000000000000001 * var_chaste_interface__cell__V);

                _lookup_table_0[i][33] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-3.6000000000000001 - 0.040000000000000001 * var_chaste_interface__cell__V);

                _lookup_table_0[i][34] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-3.6000000000000001 - 0.040000000000000001 * var_chaste_interface__cell__V);

                _lookup_table_0[i][35] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(12.0 + 0.20000000000000001 * var_chaste_interface__cell__V);

                _lookup_table_0[i][36] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V);

                _lookup_table_0[i][37] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V);

                _lookup_table_0[i][38] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(12.6 + 0.20000000000000001 * var_chaste_interface__cell__V);

                _lookup_table_0[i][39] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[40];

    // Lookup tables
    double (*_lookup_table_0)[40];
    int _lookup_table_0_num_misshit_piecewise[40] = {0};

};

std::shared_ptr<Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables> Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> Cellbenson_epicardial_2008FromCellMLGRL1Opt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -20.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 3.0; // ms
        const double var_chaste_interface__cell__stim_offset = 0; // ms
        const double var_chaste_interface__cell__stim_period = 1000.0; // ms
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Cellbenson_epicardial_2008FromCellMLGRL1Opt::Cellbenson_epicardial_2008FromCellMLGRL1Opt(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractGeneralizedRushLarsenCardiacCell(
                29,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellbenson_epicardial_2008FromCellMLGRL1Opt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 3000.0; // (var_Irel__Grel_max) [per_ms]
        this->mParameters[1] = 1.8; // (var_Environment__Ca_o) [mM]
        this->mParameters[2] = 5.4000000000000004; // (var_Environment__K_o) [mM]
        this->mParameters[3] = 140.0; // (var_Environment__Na_o) [mM]
        this->mParameters[4] = 0.000243; // (var_ICaL__pca) [L_per_F_ms]
        this->mParameters[5] = 11.5; // (var_INa__GNa_max) [mS_per_uF]
        this->mParameters[6] = 0.5; // (var_IK1__gK1_max) [mS_per_uF]
        this->mParameters[7] = 0.013854200000000001; // (var_IKr__gkr_max) [mS_per_uF]
        this->mParameters[8] = 0.024897499999999999; // (var_IKs__gks_max) [mS_per_uF]
        this->mParameters[9] = 4.5; // (var_INaCa__NCXmax) [uA_per_uF]
        this->mParameters[10] = 0.19; // (var_Ito__gitodv) [mS_per_uF]
    }

    Cellbenson_epicardial_2008FromCellMLGRL1Opt::~Cellbenson_epicardial_2008FromCellMLGRL1Opt()
    {
    }

    AbstractLookupTableCollection* Cellbenson_epicardial_2008FromCellMLGRL1Opt::GetLookupTableCollection()
    {
        return Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance();
    }
    
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.00012131666
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.987317750543
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.991924983076
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 1.64013e-06
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 7.24074e-06
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.019883138161
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.019890650554
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.013970786703
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.99996472752
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.829206149767
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.000816605172
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.26130711759
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 135.469546216758
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 15.59207157178
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        
        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        const double var_Environment__tissue = 0; // dimensionless
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__INaCa = (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[1] * _lt_0_row[0] - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * _lt_0_row[1]) * mParameters[9] / ((_lt_0_row[2]) * (1.0 + 1.5624999999999999e-8 / pow(var_INaCa__ca_i_NaCa, 2)) * (669921.875 * var_INaCa__ca_i_NaCa + 1.3 * pow(var_chaste_interface__Na__Na_i, 3) + pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[1] + 0.0035999999999999999 * pow(mParameters[3], 3) * (1.0 + 0.00053738391835633597 * pow(var_chaste_interface__Na__Na_i, 3)) + 1860.8670000000004 * (1.0 + 277.77777777777777 * var_INaCa__ca_i_NaCa) * mParameters[1])); // uA_per_uF
        const double var_INaK__INaK = 0.61875000000000002 * mParameters[2] / ((1.0 + 100.0 / pow(var_chaste_interface__Na__Na_i, 2)) * (1.5 + mParameters[2]) * (1.0 + _lt_0_row[4] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3])) * _lt_0_row[3])); // uA_per_uF
        const double var_cell__caiont = -2.0 * var_INaCa__INaCa + 0.057500000000000002 * var_chaste_interface__Ca__Ca_i / (0.00050000000000000001 + var_chaste_interface__Ca__Ca_i) + ((var_Environment__tissue == 0) ? (pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * mParameters[4] / (_lt_0_row[6]))) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2) : (((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * mParameters[4] / (_lt_0_row[6]))) * var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2)) + ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.0028824983370005666 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * _lt_0_row[7]) * var_chaste_interface__cell__V / (_lt_0_row[8]))); // uA_per_uF
        const double var_cell__clont = 0.00022499999999999999 * var_chaste_interface__cell__V + 0.00601027620873753 * log(100.0 / var_chaste_interface__Cl__Cl_i) + ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (3.8593999999999993e-9 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(9.9999999999999995e-8)) + 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) - 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) : (0.001444800488100033 * (_lt_0_row[9] + var_chaste_interface__Cl__Cl_i) * var_chaste_interface__cell__V / (_lt_0_row[10]))) * var_chaste_interface__Ito2__AA; // uA_per_uF
        const double var_reversal_potentials__EK = 26.712338705500134 * log(mParameters[2] / var_chaste_interface__K__K_i); // mV
        const double var_reversal_potentials__ENa = 26.712338705500134 * log(mParameters[3] / var_chaste_interface__Na__Na_i); // mV
        const double var_cell__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + 0.0064999999999999997 * pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_chaste_interface__INal__hL + pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * ((var_Environment__tissue == 0) ? (mParameters[5]) : (4.0 * mParameters[5])) * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // uA_per_uF
        const double var_cell__kiont = -2.0 * var_INaK__INaK + 0.0027599999999999999 * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) / (_lt_0_row[11]) + (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * (-26.712338705500134 * log((0.018329999999999999 * mParameters[3] + mParameters[2]) / (0.018329999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i)) + var_chaste_interface__cell__V) * mParameters[8] * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 + 0.43033148291193518 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[7] * var_chaste_interface__IKr__xr / (_lt_0_row[12]) + 0.4389381125701739 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[6] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)) + (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)))) + pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[10] * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv * _lt_0_row[13]; // uA_per_uF
        const double var_chaste_interface__i_ionic = (var_cell__caiont + var_cell__clont + var_cell__kiont + var_cell__naiont) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellbenson_epicardial_2008FromCellMLGRL1Opt::UpdateTransmembranePotential(double var_chaste_interface__Environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        unsigned v_index = GetVoltageIndex();
        const double delta = 1e-8;

        double d_dt_chaste_interface_var_cell__V;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.00012131666
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.987317750543
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.991924983076
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 1.64013e-06
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 7.24074e-06
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.019883138161
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.019890650554
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.013970786703
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.99996472752
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.829206149767
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.000816605172
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.26130711759
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 135.469546216758
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 15.59207157178
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_Environment__tissue = 0; // dimensionless
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_IpCa__IpCa = 0.057500000000000002 * var_chaste_interface__Ca__Ca_i / (0.00050000000000000001 + var_chaste_interface__Ca__Ca_i); // uA_per_uF
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * mParameters[4] / (_lt_0_row[6]))); // uA_per_uF
        const double var_ICaL__ICaL = ((var_Environment__tissue == 0) ? (pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca) : (var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca)); // uA_per_uF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.0028824983370005666 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * _lt_0_row[7]) * var_chaste_interface__cell__V / (_lt_0_row[8]))); // uA_per_uF
        const double var_INaCa__INaCa = (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[1] * _lt_0_row[0] - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * _lt_0_row[1]) * mParameters[9] / ((_lt_0_row[2]) * (1.0 + 1.5624999999999999e-8 / pow(var_INaCa__ca_i_NaCa, 2)) * (669921.875 * var_INaCa__ca_i_NaCa + 1.3 * pow(var_chaste_interface__Na__Na_i, 3) + pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[1] + 0.0035999999999999999 * pow(mParameters[3], 3) * (1.0 + 0.00053738391835633597 * pow(var_chaste_interface__Na__Na_i, 3)) + 1860.8670000000004 * (1.0 + 277.77777777777777 * var_INaCa__ca_i_NaCa) * mParameters[1])); // uA_per_uF
        const double var_INaK__INaK = 0.61875000000000002 * mParameters[2] / ((1.0 + 100.0 / pow(var_chaste_interface__Na__Na_i, 2)) * (1.5 + mParameters[2]) * (1.0 + _lt_0_row[4] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3])) * _lt_0_row[3])); // uA_per_uF
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time) / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_reversal_potentials__ECl = -26.712338705500134 * log(100.0 / var_chaste_interface__Cl__Cl_i); // mV
        const double var_cell__clont = 0.5 * var_cell__i_Stim + 0.00022499999999999999 * var_chaste_interface__cell__V - 0.00022499999999999999 * var_reversal_potentials__ECl + ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (3.8593999999999993e-9 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(9.9999999999999995e-8)) + 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) - 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) : (0.001444800488100033 * (_lt_0_row[9] + var_chaste_interface__Cl__Cl_i) * var_chaste_interface__cell__V / (_lt_0_row[10]))) * var_chaste_interface__Ito2__AA; // uA_per_uF
        const double var_reversal_potentials__EK = 26.712338705500134 * log(mParameters[2] / var_chaste_interface__K__K_i); // mV
        const double var_reversal_potentials__ENa = 26.712338705500134 * log(mParameters[3] / var_chaste_interface__Na__Na_i); // mV
        const double var_cell__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + 0.0064999999999999997 * pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_chaste_interface__INal__hL + pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * ((var_Environment__tissue == 0) ? (mParameters[5]) : (4.0 * mParameters[5])) * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // uA_per_uF
        const double var_cell__kiont = 0.5 * var_cell__i_Stim - 2.0 * var_INaK__INaK + 0.0027599999999999999 * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) / (_lt_0_row[11]) + (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * (-26.712338705500134 * log((0.018329999999999999 * mParameters[3] + mParameters[2]) / (0.018329999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i)) + var_chaste_interface__cell__V) * mParameters[8] * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 + 0.43033148291193518 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[7] * var_chaste_interface__IKr__xr / (_lt_0_row[12]) + 0.4389381125701739 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[6] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)) + (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)))) + pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[10] * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv * _lt_0_row[13]; // uA_per_uF
        d_dt_chaste_interface_var_cell__V = -var_ICaL__ICaL - var_ICab__ICab - var_IpCa__IpCa - var_cell__clont - var_cell__kiont - var_cell__naiont + 2.0 * var_INaCa__INaCa; // mV / ms

        double evalF = d_dt_chaste_interface_var_cell__V;
        mEvalF[0] = d_dt_chaste_interface_var_cell__V;
        double partialF = EvaluatePartialDerivative0(var_chaste_interface__Environment__time, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] += evalF*mDt;
        }
        else
        {
            rY[v_index] += (evalF/partialF)*(exp(partialF*mDt)-1.0);
        }
    }

    void Cellbenson_epicardial_2008FromCellMLGRL1Opt::ComputeOneStepExceptVoltage(double var_chaste_interface__Environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        const double delta = 1e-8;

        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.00012131666
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.987317750543
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.991924983076
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 1.64013e-06
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 7.24074e-06
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.019883138161
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.019890650554
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.013970786703
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.99996472752
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.829206149767
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.000816605172
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.26130711759
        double var_chaste_interface__Irel__CaMKtrap = rY[20];
        // Units: dimensionless; Initial value: 0.021123704774
        double var_chaste_interface__Irel__ro = rY[21];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Irel__ri = rY[22];
        // Units: dimensionless; Initial value: 0.862666650318
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 135.469546216758
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 15.59207157178
        double var_chaste_interface__Ca__Ca_jsr = rY[26];
        // Units: mM; Initial value: 1.737580994071
        double var_chaste_interface__Ca__Ca_nsr = rY[27];
        // Units: mM; Initial value: 1.832822335168
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_Environment__tissue = 0; // dimensionless
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_Idiff_Itr__idiff = 5.0 * var_chaste_interface__Ca__Ca_ss - 5.0 * var_chaste_interface__Ca__Ca_i; // mM_per_ms
        const double var_Idiff_Itr__itr = 0.0083333333333333332 * var_chaste_interface__Ca__Ca_nsr - 0.0083333333333333332 * var_chaste_interface__Ca__Ca_jsr; // mM_per_ms
        const double var_IpCa__IpCa = 0.057500000000000002 * var_chaste_interface__Ca__Ca_i / (0.00050000000000000001 + var_chaste_interface__Ca__Ca_i); // uA_per_uF
        const double var_Irel__CaMKactive = 0.050000000000000003 * (1.0 - var_chaste_interface__Irel__CaMKtrap) / (1.0 + 0.0015 / var_chaste_interface__Ca__Ca_ss) + var_chaste_interface__Irel__CaMKtrap; // dimensionless
        const double d_dt_chaste_interface_var_Irel__CaMKtrap = -0.00068000000000000005 * var_chaste_interface__Irel__CaMKtrap + 0.050000000000000003 * (-var_chaste_interface__Irel__CaMKtrap + var_Irel__CaMKactive) * var_Irel__CaMKactive; // 1 / ms
        const double d_dt_chaste_interface_var_Ito2__AA = 1 / (1.0 + 0.1502 / var_chaste_interface__Ca__Ca_ss) - var_chaste_interface__Ito2__AA; // 1 / ms
        const double var_Iup_Ileak__iup = 0.0043750000000000004 * (1.0 + 0.75 * var_Irel__CaMKactive / (0.14999999999999999 + var_Irel__CaMKactive)) * var_chaste_interface__Ca__Ca_i / (0.00092000000000000003 - 0.00017000000000000001 * var_Irel__CaMKactive / (0.14999999999999999 + var_Irel__CaMKactive) + var_chaste_interface__Ca__Ca_i); // mM_per_ms
        const double var_Iup_Ileak__ileak = 0.00029166666666666669 * var_chaste_interface__Ca__Ca_nsr; // mM_per_ms
        const double d_dt_chaste_interface_var_ICaL__dp = 0.90000000000000002 - 0.10000000000000001 * var_chaste_interface__ICaL__dp + _lt_0_row[14]; // 1 / ms
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * mParameters[4] / (_lt_0_row[6]))); // uA_per_uF
        const double var_ICaL__ICaL = ((var_Environment__tissue == 0) ? (pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca) : (var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca)); // uA_per_uF
        const double d_dt_chaste_interface_var_ICaL__fca = (0.14999999999999999 - var_chaste_interface__ICaL__fca + 0.55000000000000004 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca__Ca_ss) + 0.29999999999999999 / (1.0 - 20.0 * var_ICaL__ICaL)) / (0.5 + 1 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca__Ca_ss) + 10.0 * var_Irel__CaMKactive / (0.14999999999999999 + var_Irel__CaMKactive)); // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__d = (-var_chaste_interface__ICaL__d + _lt_0_row[15]) / (_lt_0_row[16]); // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__f = (_lt_0_row[18]) * (0.29999999999999999 - var_chaste_interface__ICaL__f + _lt_0_row[17]); // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__f2 = (_lt_0_row[20]) * (0.23000000000000001 - var_chaste_interface__ICaL__f2 + _lt_0_row[19]); // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__fca2 = (-var_chaste_interface__ICaL__fca2 + 1 / (1.0 - 100.0 * var_ICaL__ICaL)) / (125.0 + 300.0 / (1.0 + exp(-4.375 - 25.0 * var_ICaL__ICaL))); // 1 / ms
        const double var_ICab__ICab = ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.0028824983370005666 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * _lt_0_row[7]) * var_chaste_interface__cell__V / (_lt_0_row[8]))); // uA_per_uF
        const double d_dt_chaste_interface_var_IKr__xr = (-var_chaste_interface__IKr__xr + _lt_0_row[21]) * _lt_0_row[22]; // 1 / ms
        const double var_IKs__tauxs = _lt_0_row[23]; // ms
        const double var_IKs__xss = _lt_0_row[24]; // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs1 = (-var_chaste_interface__IKs__xs1 + var_IKs__xss) / var_IKs__tauxs; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__xs2 = 0.5 * (-var_chaste_interface__IKs__xs2 + var_IKs__xss) / var_IKs__tauxs; // 1 / ms
        const double d_dt_chaste_interface_var_INa__H = (1.0 - var_chaste_interface__INa__H) * _lt_0_row[25] - _lt_0_row[26] * var_chaste_interface__INa__H; // 1 / ms
        const double d_dt_chaste_interface_var_INa__J = (1.0 - var_chaste_interface__INa__J) * _lt_0_row[27] - _lt_0_row[28] * var_chaste_interface__INa__J; // 1 / ms
        const double d_dt_chaste_interface_var_INa__m = (1.0 - var_chaste_interface__INa__m) * _lt_0_row[29] - 0.080000000000000002 * var_chaste_interface__INa__m * _lt_0_row[30]; // 1 / ms
        const double var_INaCa__INaCa = (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[1] * _lt_0_row[0] - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * _lt_0_row[1]) * mParameters[9] / ((_lt_0_row[2]) * (1.0 + 1.5624999999999999e-8 / pow(var_INaCa__ca_i_NaCa, 2)) * (669921.875 * var_INaCa__ca_i_NaCa + 1.3 * pow(var_chaste_interface__Na__Na_i, 3) + pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[1] + 0.0035999999999999999 * pow(mParameters[3], 3) * (1.0 + 0.00053738391835633597 * pow(var_chaste_interface__Na__Na_i, 3)) + 1860.8670000000004 * (1.0 + 277.77777777777777 * var_INaCa__ca_i_NaCa) * mParameters[1])); // uA_per_uF
        const double var_INaK__INaK = 0.61875000000000002 * mParameters[2] / ((1.0 + 100.0 / pow(var_chaste_interface__Na__Na_i, 2)) * (1.5 + mParameters[2]) * (1.0 + _lt_0_row[4] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3])) * _lt_0_row[3])); // uA_per_uF
        const double d_dt_chaste_interface_var_INal__mL = (1.0 - var_chaste_interface__INal__mL) * _lt_0_row[29] - 0.080000000000000002 * var_chaste_interface__INal__mL * _lt_0_row[30]; // 1 / ms
        const double d_dt_chaste_interface_var_INal__hL = _lt_0_row[31] - 0.0016666666666666668 * var_chaste_interface__INal__hL; // 1 / ms
        const double var_Irel__cafac = 1 / (1.0 + exp(3.3333333333333335 + 66.666666666666671 * var_ICaL__ICaL)); // dimensionless
        const double d_dt_chaste_interface_var_Irel__ro = -0.33333333333333331 * var_chaste_interface__Irel__ro + 0.33333333333333331 * pow(var_chaste_interface__Ca__Ca_jsr, 1.8999999999999999) / ((1.0 + 1 / pow(var_ICaL__ICaL, 2)) * (pow(var_chaste_interface__Ca__Ca_jsr, 1.8999999999999999) + 1644.6531773416521 * pow((var_chaste_interface__Ca__Ca_ss / (0.0028 + var_chaste_interface__Ca__Ca_ss)), 1.8999999999999999))); // 1 / ms
        const double d_dt_chaste_interface_var_Irel__ri = (-var_chaste_interface__Irel__ri + 1 / (1.0 + exp(-16.0 + 80.0 * var_Irel__cafac + 40000.0 * var_chaste_interface__Ca__Ca_ss))) / (3.0 + (350.0 - 10.0 * var_Irel__CaMKactive / (0.14999999999999999 + var_Irel__CaMKactive)) / (1.0 + exp(-15.0 + 5000.0 * var_chaste_interface__Ca__Ca_ss + 15.0 * var_Irel__cafac)) + 10.0 * var_Irel__CaMKactive / (0.14999999999999999 + var_Irel__CaMKactive)); // 1 / ms
        const double var_Irel__irelcicr = (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_jsr) * ((var_Environment__tissue == 0) ? (1 / (1.0 + exp(2.6000000000000001 + 0.20000000000000001 * var_ICaL__ibarca))) : (1.0)) * mParameters[0] * var_chaste_interface__Irel__ri * var_chaste_interface__Irel__ro; // mM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_jsr = (-var_Irel__irelcicr + var_Idiff_Itr__itr) / (1.0 + 8.0 / pow((0.80000000000000004 + var_chaste_interface__Ca__Ca_jsr), 2)); // mM / ms
        const double d_dt_chaste_interface_var_Ito__ydv = 25.0 * (1.0 - var_chaste_interface__Ito__ydv) * _lt_0_row[33] / (_lt_0_row[32]) - 25.0 * var_chaste_interface__Ito__ydv * _lt_0_row[35] / (_lt_0_row[34]); // 1 / ms
        const double d_dt_chaste_interface_var_Ito__ydv2 = 0.029999999999999999 * (1.0 - var_chaste_interface__Ito__ydv2) / (_lt_0_row[36]) - 0.20000000000000001 * var_chaste_interface__Ito__ydv2 * _lt_0_row[38] / (_lt_0_row[37]); // 1 / ms
        const double d_dt_chaste_interface_var_Ito__zdv = 0.0038999999999999998 * (1.0 - var_chaste_interface__Ito__zdv) / (_lt_0_row[39]) - 0.10000000000000001 * var_chaste_interface__Ito__zdv * _lt_0_row[38] / (_lt_0_row[37]); // 1 / ms
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time) / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_cell__AF = 5.0619267243613002e-10 * M_PI; // uF_mole_per_C
        const double var_cell__vcell = 1.2100000000000001e-5 * M_PI; // uL
        const double var_cell__vjsr = 0.0047999999999999996 * var_cell__vcell; // uL
        const double var_cell__vmyo = 0.68000000000000005 * var_cell__vcell; // uL
        const double var_cell__vnsr = 0.055199999999999999 * var_cell__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_nsr = -var_Iup_Ileak__ileak - var_Idiff_Itr__itr * var_cell__vjsr / var_cell__vnsr + var_Iup_Ileak__iup; // mM / ms
        const double var_cell__vss = 0.02 * var_cell__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_i = ((-var_Iup_Ileak__iup + var_Iup_Ileak__ileak) * var_cell__vnsr / var_cell__vmyo + var_Idiff_Itr__idiff * var_cell__vss / var_cell__vmyo + 0.5 * (-var_ICab__ICab - var_IpCa__IpCa + 2.0 * var_INaCa__INaCa) * var_cell__AF / var_cell__vmyo) / (1.0 + 0.00011900000000000002 / pow((0.0023800000000000002 + var_chaste_interface__Ca__Ca_i), 2) + 3.5000000000000004e-5 / pow((0.00050000000000000001 + var_chaste_interface__Ca__Ca_i), 2)); // mM / ms
        const double d_dt_chaste_interface_var_Ca__Ca_ss = (-var_Idiff_Itr__idiff + var_Irel__irelcicr * var_cell__vjsr / var_cell__vss - 0.5 * var_ICaL__ICaL * var_cell__AF / var_cell__vss) / (1.0 + 0.0097788000000000007 / pow((0.0086999999999999994 + var_chaste_interface__Ca__Ca_ss), 2) + 4.0890000000000003e-5 / pow((0.00087000000000000001 + var_chaste_interface__Ca__Ca_ss), 2)); // mM / ms
        const double var_reversal_potentials__ECl = -26.712338705500134 * log(100.0 / var_chaste_interface__Cl__Cl_i); // mV
        const double var_cell__clont = 0.5 * var_cell__i_Stim + 0.00022499999999999999 * var_chaste_interface__cell__V - 0.00022499999999999999 * var_reversal_potentials__ECl + ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (3.8593999999999993e-9 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(9.9999999999999995e-8)) + 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) - 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) : (0.001444800488100033 * (_lt_0_row[9] + var_chaste_interface__Cl__Cl_i) * var_chaste_interface__cell__V / (_lt_0_row[10]))) * var_chaste_interface__Ito2__AA; // uA_per_uF
        const double var_reversal_potentials__EK = 26.712338705500134 * log(mParameters[2] / var_chaste_interface__K__K_i); // mV
        const double var_K__CTKCl = 7.0755999999999996e-6 * (-var_reversal_potentials__ECl + var_reversal_potentials__EK) / (87.825100000000006 - var_reversal_potentials__ECl + var_reversal_potentials__EK); // mM_per_ms
        const double var_reversal_potentials__ENa = 26.712338705500134 * log(mParameters[3] / var_chaste_interface__Na__Na_i); // mV
        const double var_Na__CTNaCl = 9.8442999999999999e-6 * pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4) / (59494197.640692554 + pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4)); // mM_per_ms
        const double d_dt_chaste_interface_var_Cl__Cl_i = var_cell__AF * var_cell__clont / var_cell__vmyo + var_K__CTKCl + var_Na__CTNaCl; // mM / ms
        const double var_cell__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + 0.0064999999999999997 * pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_chaste_interface__INal__hL + pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * ((var_Environment__tissue == 0) ? (mParameters[5]) : (4.0 * mParameters[5])) * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // uA_per_uF
        const double d_dt_chaste_interface_var_Na__Na_i = -var_cell__AF * var_cell__naiont / var_cell__vmyo + var_Na__CTNaCl; // mM / ms
        const double var_cell__kiont = 0.5 * var_cell__i_Stim - 2.0 * var_INaK__INaK + 0.0027599999999999999 * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) / (_lt_0_row[11]) + (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * (-26.712338705500134 * log((0.018329999999999999 * mParameters[3] + mParameters[2]) / (0.018329999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i)) + var_chaste_interface__cell__V) * mParameters[8] * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 + 0.43033148291193518 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[7] * var_chaste_interface__IKr__xr / (_lt_0_row[12]) + 0.4389381125701739 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[6] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)) + (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)))) + pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[10] * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv * _lt_0_row[13]; // uA_per_uF
        const double d_dt_chaste_interface_var_K__K_i = -var_cell__AF * var_cell__kiont / var_cell__vmyo + var_K__CTKCl; // mM / ms
        
        mEvalF[1] = d_dt_chaste_interface_var_Ca__Ca_i;
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[2] = d_dt_chaste_interface_var_INa__H;
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[3] = d_dt_chaste_interface_var_INa__m;
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[4] = d_dt_chaste_interface_var_INa__J;
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[5] = d_dt_chaste_interface_var_ICaL__d;
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[6] = d_dt_chaste_interface_var_ICaL__dp;
        mPartialF[6] = EvaluatePartialDerivative6(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[7] = d_dt_chaste_interface_var_ICaL__f;
        mPartialF[7] = EvaluatePartialDerivative7(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[8] = d_dt_chaste_interface_var_ICaL__fca;
        mPartialF[8] = EvaluatePartialDerivative8(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[9] = d_dt_chaste_interface_var_ICaL__fca2;
        mPartialF[9] = EvaluatePartialDerivative9(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[10] = d_dt_chaste_interface_var_ICaL__f2;
        mPartialF[10] = EvaluatePartialDerivative10(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[11] = d_dt_chaste_interface_var_IKr__xr;
        mPartialF[11] = EvaluatePartialDerivative11(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[12] = d_dt_chaste_interface_var_IKs__xs1;
        mPartialF[12] = EvaluatePartialDerivative12(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[13] = d_dt_chaste_interface_var_IKs__xs2;
        mPartialF[13] = EvaluatePartialDerivative13(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[14] = d_dt_chaste_interface_var_Ito__ydv;
        mPartialF[14] = EvaluatePartialDerivative14(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[15] = d_dt_chaste_interface_var_Ito__ydv2;
        mPartialF[15] = EvaluatePartialDerivative15(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[16] = d_dt_chaste_interface_var_Ito__zdv;
        mPartialF[16] = EvaluatePartialDerivative16(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[17] = d_dt_chaste_interface_var_Ito2__AA;
        mPartialF[17] = EvaluatePartialDerivative17(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[18] = d_dt_chaste_interface_var_INal__mL;
        mPartialF[18] = EvaluatePartialDerivative18(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[19] = d_dt_chaste_interface_var_INal__hL;
        mPartialF[19] = EvaluatePartialDerivative19(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[20] = d_dt_chaste_interface_var_Irel__CaMKtrap;
        mPartialF[20] = EvaluatePartialDerivative20(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[21] = d_dt_chaste_interface_var_Irel__ro;
        mPartialF[21] = EvaluatePartialDerivative21(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[22] = d_dt_chaste_interface_var_Irel__ri;
        mPartialF[22] = EvaluatePartialDerivative22(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[23] = d_dt_chaste_interface_var_Na__Na_i;
        mPartialF[23] = EvaluatePartialDerivative23(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[24] = d_dt_chaste_interface_var_K__K_i;
        mPartialF[24] = EvaluatePartialDerivative24(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[25] = d_dt_chaste_interface_var_Cl__Cl_i;
        mPartialF[25] = EvaluatePartialDerivative25(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[26] = d_dt_chaste_interface_var_Ca__Ca_jsr;
        mPartialF[26] = EvaluatePartialDerivative26(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[27] = d_dt_chaste_interface_var_Ca__Ca_nsr;
        mPartialF[27] = EvaluatePartialDerivative27(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[28] = d_dt_chaste_interface_var_Ca__Ca_ss;
        mPartialF[28] = EvaluatePartialDerivative28(var_chaste_interface__Environment__time, rY, delta);
        
        {
            if (fabs(mPartialF[1]) < delta){
                rY[1] += mDt*d_dt_chaste_interface_var_Ca__Ca_i;
            }
            else
            {
                rY[1] += (d_dt_chaste_interface_var_Ca__Ca_i/mPartialF[1])*(exp(mPartialF[1]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[2]) < delta){
                rY[2] += mDt*d_dt_chaste_interface_var_INa__H;
            }
            else
            {
                rY[2] += (d_dt_chaste_interface_var_INa__H/mPartialF[2])*(exp(mPartialF[2]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[3]) < delta){
                rY[3] += mDt*d_dt_chaste_interface_var_INa__m;
            }
            else
            {
                rY[3] += (d_dt_chaste_interface_var_INa__m/mPartialF[3])*(exp(mPartialF[3]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[4]) < delta){
                rY[4] += mDt*d_dt_chaste_interface_var_INa__J;
            }
            else
            {
                rY[4] += (d_dt_chaste_interface_var_INa__J/mPartialF[4])*(exp(mPartialF[4]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[5]) < delta){
                rY[5] += mDt*d_dt_chaste_interface_var_ICaL__d;
            }
            else
            {
                rY[5] += (d_dt_chaste_interface_var_ICaL__d/mPartialF[5])*(exp(mPartialF[5]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[6]) < delta){
                rY[6] += mDt*d_dt_chaste_interface_var_ICaL__dp;
            }
            else
            {
                rY[6] += (d_dt_chaste_interface_var_ICaL__dp/mPartialF[6])*(exp(mPartialF[6]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[7]) < delta){
                rY[7] += mDt*d_dt_chaste_interface_var_ICaL__f;
            }
            else
            {
                rY[7] += (d_dt_chaste_interface_var_ICaL__f/mPartialF[7])*(exp(mPartialF[7]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[8]) < delta){
                rY[8] += mDt*d_dt_chaste_interface_var_ICaL__fca;
            }
            else
            {
                rY[8] += (d_dt_chaste_interface_var_ICaL__fca/mPartialF[8])*(exp(mPartialF[8]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[9]) < delta){
                rY[9] += mDt*d_dt_chaste_interface_var_ICaL__fca2;
            }
            else
            {
                rY[9] += (d_dt_chaste_interface_var_ICaL__fca2/mPartialF[9])*(exp(mPartialF[9]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[10]) < delta){
                rY[10] += mDt*d_dt_chaste_interface_var_ICaL__f2;
            }
            else
            {
                rY[10] += (d_dt_chaste_interface_var_ICaL__f2/mPartialF[10])*(exp(mPartialF[10]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[11]) < delta){
                rY[11] += mDt*d_dt_chaste_interface_var_IKr__xr;
            }
            else
            {
                rY[11] += (d_dt_chaste_interface_var_IKr__xr/mPartialF[11])*(exp(mPartialF[11]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[12]) < delta){
                rY[12] += mDt*d_dt_chaste_interface_var_IKs__xs1;
            }
            else
            {
                rY[12] += (d_dt_chaste_interface_var_IKs__xs1/mPartialF[12])*(exp(mPartialF[12]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[13]) < delta){
                rY[13] += mDt*d_dt_chaste_interface_var_IKs__xs2;
            }
            else
            {
                rY[13] += (d_dt_chaste_interface_var_IKs__xs2/mPartialF[13])*(exp(mPartialF[13]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[14]) < delta){
                rY[14] += mDt*d_dt_chaste_interface_var_Ito__ydv;
            }
            else
            {
                rY[14] += (d_dt_chaste_interface_var_Ito__ydv/mPartialF[14])*(exp(mPartialF[14]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[15]) < delta){
                rY[15] += mDt*d_dt_chaste_interface_var_Ito__ydv2;
            }
            else
            {
                rY[15] += (d_dt_chaste_interface_var_Ito__ydv2/mPartialF[15])*(exp(mPartialF[15]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[16]) < delta){
                rY[16] += mDt*d_dt_chaste_interface_var_Ito__zdv;
            }
            else
            {
                rY[16] += (d_dt_chaste_interface_var_Ito__zdv/mPartialF[16])*(exp(mPartialF[16]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[17]) < delta){
                rY[17] += mDt*d_dt_chaste_interface_var_Ito2__AA;
            }
            else
            {
                rY[17] += (d_dt_chaste_interface_var_Ito2__AA/mPartialF[17])*(exp(mPartialF[17]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[18]) < delta){
                rY[18] += mDt*d_dt_chaste_interface_var_INal__mL;
            }
            else
            {
                rY[18] += (d_dt_chaste_interface_var_INal__mL/mPartialF[18])*(exp(mPartialF[18]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[19]) < delta){
                rY[19] += mDt*d_dt_chaste_interface_var_INal__hL;
            }
            else
            {
                rY[19] += (d_dt_chaste_interface_var_INal__hL/mPartialF[19])*(exp(mPartialF[19]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[20]) < delta){
                rY[20] += mDt*d_dt_chaste_interface_var_Irel__CaMKtrap;
            }
            else
            {
                rY[20] += (d_dt_chaste_interface_var_Irel__CaMKtrap/mPartialF[20])*(exp(mPartialF[20]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[21]) < delta){
                rY[21] += mDt*d_dt_chaste_interface_var_Irel__ro;
            }
            else
            {
                rY[21] += (d_dt_chaste_interface_var_Irel__ro/mPartialF[21])*(exp(mPartialF[21]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[22]) < delta){
                rY[22] += mDt*d_dt_chaste_interface_var_Irel__ri;
            }
            else
            {
                rY[22] += (d_dt_chaste_interface_var_Irel__ri/mPartialF[22])*(exp(mPartialF[22]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[23]) < delta){
                rY[23] += mDt*d_dt_chaste_interface_var_Na__Na_i;
            }
            else
            {
                rY[23] += (d_dt_chaste_interface_var_Na__Na_i/mPartialF[23])*(exp(mPartialF[23]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[24]) < delta){
                rY[24] += mDt*d_dt_chaste_interface_var_K__K_i;
            }
            else
            {
                rY[24] += (d_dt_chaste_interface_var_K__K_i/mPartialF[24])*(exp(mPartialF[24]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[25]) < delta){
                rY[25] += mDt*d_dt_chaste_interface_var_Cl__Cl_i;
            }
            else
            {
                rY[25] += (d_dt_chaste_interface_var_Cl__Cl_i/mPartialF[25])*(exp(mPartialF[25]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[26]) < delta){
                rY[26] += mDt*d_dt_chaste_interface_var_Ca__Ca_jsr;
            }
            else
            {
                rY[26] += (d_dt_chaste_interface_var_Ca__Ca_jsr/mPartialF[26])*(exp(mPartialF[26]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[27]) < delta){
                rY[27] += mDt*d_dt_chaste_interface_var_Ca__Ca_nsr;
            }
            else
            {
                rY[27] += (d_dt_chaste_interface_var_Ca__Ca_nsr/mPartialF[27])*(exp(mPartialF[27]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[28]) < delta){
                rY[28] += mDt*d_dt_chaste_interface_var_Ca__Ca_ss;
            }
            else
            {
                rY[28] += (d_dt_chaste_interface_var_Ca__Ca_ss/mPartialF[28])*(exp(mPartialF[28]*mDt)-1.0);
            }
            
        }        
        
    }
   
    
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative0(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        double d_dt_chaste_interface_var_cell__V;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.00012131666
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.987317750543
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.991924983076
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 1.64013e-06
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 7.24074e-06
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.019883138161
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.019890650554
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.013970786703
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.99996472752
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.829206149767
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.000816605172
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.26130711759
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 135.469546216758
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 15.59207157178
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_Environment__tissue = 0; // dimensionless
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_IpCa__IpCa = 0.057500000000000002 * var_chaste_interface__Ca__Ca_i / (0.00050000000000000001 + var_chaste_interface__Ca__Ca_i); // uA_per_uF
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * mParameters[4] / (_lt_0_row[6]))); // uA_per_uF
        const double var_ICaL__ICaL = ((var_Environment__tissue == 0) ? (pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca) : (var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca)); // uA_per_uF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.0028824983370005666 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * _lt_0_row[7]) * var_chaste_interface__cell__V / (_lt_0_row[8]))); // uA_per_uF
        const double var_INaCa__INaCa = (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[1] * _lt_0_row[0] - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * _lt_0_row[1]) * mParameters[9] / ((_lt_0_row[2]) * (1.0 + 1.5624999999999999e-8 / pow(var_INaCa__ca_i_NaCa, 2)) * (669921.875 * var_INaCa__ca_i_NaCa + 1.3 * pow(var_chaste_interface__Na__Na_i, 3) + pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[1] + 0.0035999999999999999 * pow(mParameters[3], 3) * (1.0 + 0.00053738391835633597 * pow(var_chaste_interface__Na__Na_i, 3)) + 1860.8670000000004 * (1.0 + 277.77777777777777 * var_INaCa__ca_i_NaCa) * mParameters[1])); // uA_per_uF
        const double var_INaK__INaK = 0.61875000000000002 * mParameters[2] / ((1.0 + 100.0 / pow(var_chaste_interface__Na__Na_i, 2)) * (1.5 + mParameters[2]) * (1.0 + _lt_0_row[4] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3])) * _lt_0_row[3])); // uA_per_uF
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time) / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_reversal_potentials__ECl = -26.712338705500134 * log(100.0 / var_chaste_interface__Cl__Cl_i); // mV
        const double var_cell__clont = 0.5 * var_cell__i_Stim + 0.00022499999999999999 * var_chaste_interface__cell__V - 0.00022499999999999999 * var_reversal_potentials__ECl + ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (3.8593999999999993e-9 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(9.9999999999999995e-8)) + 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) - 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) : (0.001444800488100033 * (_lt_0_row[9] + var_chaste_interface__Cl__Cl_i) * var_chaste_interface__cell__V / (_lt_0_row[10]))) * var_chaste_interface__Ito2__AA; // uA_per_uF
        const double var_reversal_potentials__EK = 26.712338705500134 * log(mParameters[2] / var_chaste_interface__K__K_i); // mV
        const double var_reversal_potentials__ENa = 26.712338705500134 * log(mParameters[3] / var_chaste_interface__Na__Na_i); // mV
        const double var_cell__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + 0.0064999999999999997 * pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_chaste_interface__INal__hL + pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * ((var_Environment__tissue == 0) ? (mParameters[5]) : (4.0 * mParameters[5])) * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // uA_per_uF
        const double var_cell__kiont = 0.5 * var_cell__i_Stim - 2.0 * var_INaK__INaK + 0.0027599999999999999 * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) / (_lt_0_row[11]) + (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * (-26.712338705500134 * log((0.018329999999999999 * mParameters[3] + mParameters[2]) / (0.018329999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i)) + var_chaste_interface__cell__V) * mParameters[8] * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 + 0.43033148291193518 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[7] * var_chaste_interface__IKr__xr / (_lt_0_row[12]) + 0.4389381125701739 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[6] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)) + (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)))) + pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[10] * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv * _lt_0_row[13]; // uA_per_uF
        d_dt_chaste_interface_var_cell__V = -var_ICaL__ICaL - var_ICab__ICab - var_IpCa__IpCa - var_cell__clont - var_cell__kiont - var_cell__naiont + 2.0 * var_INaCa__INaCa; // mV / ms

        return d_dt_chaste_interface_var_cell__V;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative0(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            double var_chaste_interface__Ca__Ca_i = rY[1];
            // Units: mM; Initial value: 0.00012131666
            double var_chaste_interface__INa__H = rY[2];
            // Units: dimensionless; Initial value: 0.987317750543
            double var_chaste_interface__INa__m = rY[3];
            // Units: dimensionless; Initial value: 0.001356538159
            double var_chaste_interface__INa__J = rY[4];
            // Units: dimensionless; Initial value: 0.991924983076
            double var_chaste_interface__ICaL__d = rY[5];
            // Units: dimensionless; Initial value: 1.64013e-06
            double var_chaste_interface__ICaL__dp = rY[6];
            // Units: dimensionless; Initial value: 8.98230672628
            double var_chaste_interface__ICaL__f = rY[7];
            // Units: dimensionless; Initial value: 0.999961508634
            double var_chaste_interface__ICaL__fca = rY[8];
            // Units: dimensionless; Initial value: 0.97836624923
            double var_chaste_interface__ICaL__fca2 = rY[9];
            // Units: dimensionless; Initial value: 0.893052931249
            double var_chaste_interface__ICaL__f2 = rY[10];
            // Units: dimensionless; Initial value: 0.992234519148
            double var_chaste_interface__IKr__xr = rY[11];
            // Units: dimensionless; Initial value: 7.24074e-06
            double var_chaste_interface__IKs__xs1 = rY[12];
            // Units: dimensionless; Initial value: 0.019883138161
            double var_chaste_interface__IKs__xs2 = rY[13];
            // Units: dimensionless; Initial value: 0.019890650554
            double var_chaste_interface__Ito__ydv = rY[14];
            // Units: dimensionless; Initial value: 0.013970786703
            double var_chaste_interface__Ito__ydv2 = rY[15];
            // Units: dimensionless; Initial value: 0.99996472752
            double var_chaste_interface__Ito__zdv = rY[16];
            // Units: dimensionless; Initial value: 0.829206149767
            double var_chaste_interface__Ito2__AA = rY[17];
            // Units: dimensionless; Initial value: 0.000816605172
            double var_chaste_interface__INal__mL = rY[18];
            // Units: dimensionless; Initial value: 0.001356538159
            double var_chaste_interface__INal__hL = rY[19];
            // Units: dimensionless; Initial value: 0.26130711759
            double var_chaste_interface__Na__Na_i = rY[23];
            // Units: mM; Initial value: 12.972433387269
            double var_chaste_interface__K__K_i = rY[24];
            // Units: mM; Initial value: 135.469546216758
            double var_chaste_interface__Cl__Cl_i = rY[25];
            // Units: mM; Initial value: 15.59207157178
            double var_chaste_interface__Ca__Ca_ss = rY[28];
            // Units: mM; Initial value: 0.00012271265
            

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x0 = 7224.0024405001659 * mParameters[4];
            const double var_x1 = exp(9.9999999999763197e-8);
            const double var_x2 = 1 / (-1.0 + var_x1);
            const double var_x3 = -0.34100000000000003 * mParameters[1];
            const double var_x4 = var_chaste_interface__Ca__Ca_ss;
            const double var_x5 = var_x2 * (var_x3 + var_x1 * var_x4);
            const double var_x6 = exp(-9.9999999999763197e-8);
            const double var_x7 = 1 / (-1.0 + var_x6);
            const double var_x8 = var_x7 * (var_x3 + var_x4 * var_x6);
            const double var_x9 = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp);
            const double var_x10 = var_x9 * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca2;
            const double var_x11 = var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__fca;
            const double var_x12 = var_x10 * var_x11;
            const double var_x13 = -15.0 + var_chaste_interface__cell__V;
            const double var_x14 = fabs(var_x13) < 1.3356169352718439e-6;
            const double var_x15 = 0.074871767015599999 * var_chaste_interface__cell__V;
            const double var_x16 = exp(-1.1230765052339999 + var_x15);
            const double var_x17 = var_x3 + var_x16 * var_x4;
            const double var_x18 = -1.0 + var_x16;
            const double var_x19 = mParameters[4] / var_x18;
            const double var_x20 = var_x17 * var_x19;
            const double var_x21 = 14448.004881000332 * var_x20;
            const double var_x22 = var_x12 * var_x21;
            const double var_x23 = var_x19 * var_chaste_interface__Ca__Ca_ss;
            const double var_x24 = var_x13 * var_x16;
            const double var_x25 = var_x12 * var_x24;
            const double var_x26 = 1081.7476552905084 * var_x25;
            const double var_x27 = pow(var_x18, 2);
            const double var_x28 = var_x17 * mParameters[4] / var_x27;
            const double var_x29 = ((var_x14) ? (var_x12 * (var_x0 * var_x5 + var_x0 * var_x8)) : (var_x22 + var_x23 * var_x26 - var_x26 * var_x28));
            const double var_x30 = exp(9.9999999999999995e-8);
            const double var_x31 = 1 / (1.0 - var_x30);
            const double var_x32 = -100.0 * var_x30 + var_chaste_interface__Cl__Cl_i;
            const double var_x33 = exp(-9.9999999999999995e-8);
            const double var_x34 = 1 / (1.0 - var_x33);
            const double var_x35 = -100.0 * var_x33 + var_chaste_interface__Cl__Cl_i;
            const double var_x36 = fabs(var_chaste_interface__cell__V);
            const double var_x37 = var_x36 < 2.671233870550013e-6;
            const double var_x38 = 0.0374358835078 * var_chaste_interface__cell__V;
            const double var_x39 = exp(var_x38);
            const double var_x40 = 1.0 - var_x39;
            const double var_x41 = 1 / var_x40;
            const double var_x42 = var_x41 * var_chaste_interface__Ito2__AA;
            const double var_x43 = -100.0 * var_x39 + var_chaste_interface__Cl__Cl_i;
            const double var_x44 = 0.001444800488100033 * var_x43;
            const double var_x45 = var_x42 * var_chaste_interface__cell__V;
            const double var_x46 = ((var_x37) ? (0.00022499999999999999 + (0.00072240024405001652 * var_x31 * var_x32 + 0.00072240024405001652 * var_x34 * var_x35) * var_chaste_interface__Ito2__AA) : (0.00022499999999999999 + var_x42 * var_x44 - 0.005408738276452542 * var_x39 * var_x45 + 5.4087382764525417e-5 * var_x39 * var_x43 * var_chaste_interface__Ito2__AA * var_chaste_interface__cell__V / pow(var_x40, 2)));
            const double var_x47 = 1 / (-1.0 + var_x30);
            const double var_x48 = var_x47 * (var_x3 + var_x30 * var_chaste_interface__Ca__Ca_i);
            const double var_x49 = 1 / (-1.0 + var_x33);
            const double var_x50 = var_x49 * (var_x3 + var_x33 * var_chaste_interface__Ca__Ca_i);
            const double var_x51 = var_x36 < 1.3356169352750065e-6;
            const double var_x52 = exp(var_x15);
            const double var_x53 = var_x52 * var_chaste_interface__Ca__Ca_i;
            const double var_x54 = var_x3 + var_x53;
            const double var_x55 = -1.0 + var_x52;
            const double var_x56 = 1 / var_x55;
            const double var_x57 = 0.0028824983370005666 * var_x56;
            const double var_x58 = var_x54 * var_x57;
            const double var_x59 = var_x52 * var_chaste_interface__cell__V;
            const double var_x60 = ((var_x51) ? (0.0014412491685002833 * var_x48 + 0.0014412491685002833 * var_x50) : (var_x58 + 0.00021581774391076088 * var_x53 * var_x56 * var_chaste_interface__cell__V - 0.00021581774391076088 * var_x54 * var_x59 / pow(var_x55, 2)));
            const double var_x61 = exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V);
            const double var_x62 = 1.0 + var_x61;
            const double var_x63 = 1 / var_x62;
            const double var_x64 = pow(var_chaste_interface__INal__mL, 3);
            const double var_x65 = 0.0064999999999999997 * var_x64;
            const double var_x66 = 1 / var_chaste_interface__K__K_i;
            const double var_x67 = log(var_x66 * mParameters[2]);
            const double var_x68 = 26.712338705500134 * var_x67;
            const double var_x69 = -var_x68 + var_chaste_interface__cell__V;
            const double var_x70 = var_x61 * var_x69 / pow(var_x62, 2);
            const double var_x71 = 1 / var_chaste_interface__Ca__Ca_i;
            const double var_x72 = pow(var_x71, 1.3999999999999999);
            const double var_x73 = 1.0 + 6.4818210260626455e-7 * var_x72;
            const double var_x74 = 1 / var_x73;
            const double var_x75 = -1.0 - 0.59999999999999998 * var_x74;
            const double var_x76 = mParameters[8] * var_chaste_interface__IKs__xs2;
            const double var_x77 = var_x75 * var_x76;
            const double var_x78 = var_x77 * var_chaste_interface__IKs__xs1;
            const double var_x79 = pow(var_chaste_interface__INa__m, 3);
            const double var_x80 = var_x79 * mParameters[5] * var_chaste_interface__INa__J;
            const double var_x81 = var_x80 * var_chaste_interface__INa__H;
            const double var_x82 = exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__cell__V);
            const double var_x83 = 1.0 + var_x82;
            const double var_x84 = sqrt(mParameters[2]);
            const double var_x85 = var_x84 * mParameters[7] / var_x83;
            const double var_x86 = 0.43033148291193518 * var_x85;
            const double var_x87 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 6.370892781261781 * var_x67);
            const double var_x88 = 1.0 + var_x87;
            const double var_x89 = 1 / var_x88;
            const double var_x90 = exp(-2.4444678999999998 + 13.738155796238718 * var_x67 - 0.51429999999999998 * var_chaste_interface__cell__V);
            const double var_x91 = 1.0 + var_x90;
            const double var_x92 = 1 / var_x91;
            const double var_x93 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 1.6494869150646332 * var_x67);
            const double var_x94 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 2.1455350448257708 * var_x67);
            const double var_x95 = var_x93 + 0.49124000000000001 * var_x94;
            const double var_x96 = var_x92 * var_x95;
            const double var_x97 = var_x84 * mParameters[6] / (var_x96 + 1.02 * var_x89);
            const double var_x98 = var_x89 * var_x97;
            const double var_x99 = pow(var_chaste_interface__Ito__ydv, 3);
            const double var_x100 = _lt_0_row[13];
            const double var_x101 = var_x100 * var_x99 * mParameters[10] * var_chaste_interface__Ito__zdv;
            const double var_x102 = var_x101 * var_chaste_interface__Ito__ydv2;
            const double var_x103 = _lt_0_row[0];
            const double var_x104 = pow(var_chaste_interface__Na__Na_i, 3);
            const double var_x105 = var_x104 * mParameters[1];
            const double var_x106 = var_x103 * var_x105;
            const double var_x107 = _lt_0_row[1];
            const double var_x108 = pow(mParameters[3], 3);
            const double var_x109 = var_x108 * var_chaste_interface__Ca__Ca_i;
            const double var_x110 = 1.0 + 0.27000000000000002 * var_x107;
            const double var_x111 = 1 / var_x110;
            const double var_x112 = 1.0 + 6.9444444444444451e-9 / pow(var_chaste_interface__Ca__Ca_i, 2);
            const double var_x113 = 1 / var_x112;
            const double var_x114 = 1.5 * var_x108;
            const double var_x115 = var_x114 * var_chaste_interface__Ca__Ca_i;
            const double var_x116 = var_x108 * (1.0 + 0.00053738391835633597 * var_x104);
            const double var_x117 = (1.0 + 416.66666666666669 * var_chaste_interface__Ca__Ca_i) * mParameters[1];
            const double var_x118 = 1 / (var_x105 + var_x115 + 1004882.8125 * var_chaste_interface__Ca__Ca_i + 0.0035999999999999999 * var_x116 + 1.3 * var_x104 + 1860.8670000000004 * var_x117);
            const double var_x119 = var_x113 * var_x118 * mParameters[9];
            const double var_x120 = var_x111 * var_x119;
            const double var_x121 = var_x120 * (0.01310255922773 * var_x106 + 0.036499986420104998 * var_x107 * var_x109);
            const double var_x122 = pow(var_chaste_interface__Na__Na_i, 2);
            const double var_x123 = 1 / var_x122;
            const double var_x124 = exp(-0.00374358835078 * var_chaste_interface__cell__V);
            const double var_x125 = exp(0.01485884101040119 * mParameters[3]);
            const double var_x126 = exp(-var_x38);
            const double var_x127 = 1.0 + 0.1245 * var_x124 + 0.036499999999999998 * var_x126 * (-0.14285714285714285 + 0.14285714285714285 * var_x125);
            const double var_x128 = mParameters[2] / (1.5 + mParameters[2]);
            const double var_x129 = var_x128 * (0.00046607674967211004 * var_x124 + 0.0374358835078 * var_x126 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x125)) / (pow(var_x127, 2) * (1.0 + 100.0 * var_x123));
            const double var_x130 = var_x87 / pow(var_x88, 2);
            const double var_x131 = var_x69 * var_x97;
            const double var_x132 = var_x130 * var_x131;
            const double var_x133 = var_x69 * var_x84;
            const double var_x134 = var_x133 * var_x82 * mParameters[7] * var_chaste_interface__IKr__xr / pow(var_x83, 2);
            const double var_x135 = var_x90 * var_x95 / pow(var_x91, 2);
            const double var_x136 = 0.24326999999999999 * var_x130 - 0.51429999999999998 * var_x135 - var_x92 * (0.061749999999999999 * var_x93 + 0.039456396800000001 * var_x94);
            const double var_x137 = var_x133 * var_x89 * mParameters[6] / pow((var_x89 + 0.98039215686274506 * var_x96), 2);
            const double var_x138 = 0.42189361069797565 * var_x137;
            const double var_x139 = var_x106 - var_x107 * var_x115;
            const double var_x140 = var_x107 * var_x119 * var_x139 / pow(var_x110, 2);
            const double var_x141 = var_x102 * var_x69;
            
            partialF = var_x78 - var_x102 - var_x29 - var_x46 - var_x60 - var_x81 + 0.10468673984798647 * var_x132 + 0.027943602786489299 * var_x134 - var_x121 - 0.61875000000000002 * var_x129 - 0.0027599999999999999 * var_x63 - 0.0065699975556189009 * var_x140 - 0.0033333333333333335 * var_x141 - 0.4389381125701739 * var_x98 - 0.00046153846153846147 * var_x70 - var_x136 * var_x138 - var_x65 * var_chaste_interface__INal__hL - var_x86 * var_chaste_interface__IKr__xr;
        }
        else
        {
            const double y_save = rY[0];
            rY[0] += delta;
            const double temp = EvaluateYDerivative0(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[0])/delta;
            rY[0] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative1(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.00012131666
        double var_chaste_interface__Irel__CaMKtrap = rY[20];
        // Units: dimensionless; Initial value: 0.021123704774
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__Ca__Ca_nsr = rY[27];
        // Units: mM; Initial value: 1.832822335168
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_Idiff_Itr__idiff = 5.0 * var_chaste_interface__Ca__Ca_ss - 5.0 * var_chaste_interface__Ca__Ca_i; // mM_per_ms
        const double var_IpCa__IpCa = 0.057500000000000002 * var_chaste_interface__Ca__Ca_i / (0.00050000000000000001 + var_chaste_interface__Ca__Ca_i); // uA_per_uF
        const double var_Irel__CaMKactive = 0.050000000000000003 * (1.0 - var_chaste_interface__Irel__CaMKtrap) / (1.0 + 0.0015 / var_chaste_interface__Ca__Ca_ss) + var_chaste_interface__Irel__CaMKtrap; // dimensionless
        const double var_Iup_Ileak__iup = 0.0043750000000000004 * (1.0 + 0.75 * var_Irel__CaMKactive / (0.14999999999999999 + var_Irel__CaMKactive)) * var_chaste_interface__Ca__Ca_i / (0.00092000000000000003 - 0.00017000000000000001 * var_Irel__CaMKactive / (0.14999999999999999 + var_Irel__CaMKactive) + var_chaste_interface__Ca__Ca_i); // mM_per_ms
        const double var_Iup_Ileak__ileak = 0.00029166666666666669 * var_chaste_interface__Ca__Ca_nsr; // mM_per_ms
        const double var_ICab__ICab = ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.0028824983370005666 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_i * _lt_0_row[7]) * var_chaste_interface__cell__V / (_lt_0_row[8]))); // uA_per_uF
        const double var_INaCa__INaCa = (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[1] * _lt_0_row[0] - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * _lt_0_row[1]) * mParameters[9] / ((_lt_0_row[2]) * (1.0 + 1.5624999999999999e-8 / pow(var_INaCa__ca_i_NaCa, 2)) * (669921.875 * var_INaCa__ca_i_NaCa + 1.3 * pow(var_chaste_interface__Na__Na_i, 3) + pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[1] + 0.0035999999999999999 * pow(mParameters[3], 3) * (1.0 + 0.00053738391835633597 * pow(var_chaste_interface__Na__Na_i, 3)) + 1860.8670000000004 * (1.0 + 277.77777777777777 * var_INaCa__ca_i_NaCa) * mParameters[1])); // uA_per_uF
        const double var_cell__AF = 5.0619267243613002e-10 * M_PI; // uF_mole_per_C
        const double var_cell__vcell = 1.2100000000000001e-5 * M_PI; // uL
        const double var_cell__vmyo = 0.68000000000000005 * var_cell__vcell; // uL
        const double var_cell__vnsr = 0.055199999999999999 * var_cell__vcell; // uL
        const double var_cell__vss = 0.02 * var_cell__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_i = ((-var_Iup_Ileak__iup + var_Iup_Ileak__ileak) * var_cell__vnsr / var_cell__vmyo + var_Idiff_Itr__idiff * var_cell__vss / var_cell__vmyo + 0.5 * (-var_ICab__ICab - var_IpCa__IpCa + 2.0 * var_INaCa__INaCa) * var_cell__AF / var_cell__vmyo) / (1.0 + 0.00011900000000000002 / pow((0.0023800000000000002 + var_chaste_interface__Ca__Ca_i), 2) + 3.5000000000000004e-5 / pow((0.00050000000000000001 + var_chaste_interface__Ca__Ca_i), 2)); // mM / ms

        return d_dt_chaste_interface_var_Ca__Ca_i;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative1(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            double var_chaste_interface__Ca__Ca_i = rY[1];
            // Units: mM; Initial value: 0.00012131666
            double var_chaste_interface__Irel__CaMKtrap = rY[20];
            // Units: dimensionless; Initial value: 0.021123704774
            double var_chaste_interface__Na__Na_i = rY[23];
            // Units: mM; Initial value: 12.972433387269
            double var_chaste_interface__Ca__Ca_nsr = rY[27];
            // Units: mM; Initial value: 1.832822335168
            double var_chaste_interface__Ca__Ca_ss = rY[28];
            // Units: mM; Initial value: 0.00012271265
            

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x3 = -0.34100000000000003 * mParameters[1];
            const double var_x15 = 0.074871767015599999 * var_chaste_interface__cell__V;
            const double var_x30 = exp(9.9999999999999995e-8);
            const double var_x33 = exp(-9.9999999999999995e-8);
            const double var_x36 = fabs(var_chaste_interface__cell__V);
            const double var_x47 = 1 / (-1.0 + var_x30);
            const double var_x48 = var_x47 * (var_x3 + var_x30 * var_chaste_interface__Ca__Ca_i);
            const double var_x49 = 1 / (-1.0 + var_x33);
            const double var_x50 = var_x49 * (var_x3 + var_x33 * var_chaste_interface__Ca__Ca_i);
            const double var_x51 = var_x36 < 1.3356169352750065e-6;
            const double var_x52 = exp(var_x15);
            const double var_x53 = var_x52 * var_chaste_interface__Ca__Ca_i;
            const double var_x54 = var_x3 + var_x53;
            const double var_x55 = -1.0 + var_x52;
            const double var_x56 = 1 / var_x55;
            const double var_x57 = 0.0028824983370005666 * var_x56;
            const double var_x58 = var_x54 * var_x57;
            const double var_x59 = var_x52 * var_chaste_interface__cell__V;
            const double var_x103 = _lt_0_row[0];
            const double var_x104 = pow(var_chaste_interface__Na__Na_i, 3);
            const double var_x105 = var_x104 * mParameters[1];
            const double var_x106 = var_x103 * var_x105;
            const double var_x107 = _lt_0_row[1];
            const double var_x108 = pow(mParameters[3], 3);
            const double var_x109 = var_x108 * var_chaste_interface__Ca__Ca_i;
            const double var_x110 = 1.0 + 0.27000000000000002 * var_x107;
            const double var_x111 = 1 / var_x110;
            const double var_x112 = 1.0 + 6.9444444444444451e-9 / pow(var_chaste_interface__Ca__Ca_i, 2);
            const double var_x113 = 1 / var_x112;
            const double var_x114 = 1.5 * var_x108;
            const double var_x115 = var_x114 * var_chaste_interface__Ca__Ca_i;
            const double var_x116 = var_x108 * (1.0 + 0.00053738391835633597 * var_x104);
            const double var_x117 = (1.0 + 416.66666666666669 * var_chaste_interface__Ca__Ca_i) * mParameters[1];
            const double var_x118 = 1 / (var_x105 + var_x115 + 1004882.8125 * var_chaste_interface__Ca__Ca_i + 0.0035999999999999999 * var_x116 + 1.3 * var_x104 + 1860.8670000000004 * var_x117);
            const double var_x119 = var_x113 * var_x118 * mParameters[9];
            const double var_x120 = var_x111 * var_x119;
            const double var_x139 = var_x106 - var_x107 * var_x115;
            const double var_x142 = 3.8499135947999997e-9 * var_x33 * var_x49;
            const double var_x143 = ((var_x51) ? (-var_x142 + (0.5 + 374358.83507800003 * var_chaste_interface__cell__V) * (var_x142 + 3.8499135947999997e-9 * var_x30 * var_x47)) : (var_x57 * var_x59));
            const double var_x144 = 0.00050000000000000001 + var_chaste_interface__Ca__Ca_i;
            const double var_x145 = 1 / var_x144;
            const double var_x146 = pow(var_x144, (-2));
            const double var_x147 = var_x146 * var_chaste_interface__Ca__Ca_i;
            const double var_x148 = var_x107 * var_x120;
            const double var_x149 = -1004882.8125 - var_x114 - 775361.25000000012 * mParameters[1];
            const double var_x150 = var_x111 * var_x139 * mParameters[9];
            const double var_x151 = var_x113 * var_x150 / pow((1.2936831875607387e-6 * var_x104 + 0.0018518248862973764 * var_x117 + 1.4927113702623908e-6 * var_x109 + 9.9514091350826051e-7 * var_x105 + 3.5825072886297377e-9 * var_x116 + var_chaste_interface__Ca__Ca_i), 2);
            const double var_x153 = var_x118 * var_x150 / (pow(var_x112, 2) * pow(var_chaste_interface__Ca__Ca_i, 3));
            const double var_x218 = 0.0023800000000000002 + var_chaste_interface__Ca__Ca_i;
            const double var_x219 = 1.0 + 0.00011900000000000002 / pow(var_x218, 2) + 3.5000000000000004e-5 * var_x146;
            const double var_x220 = 1 / var_x219;
            const double var_x221 = var_x220;
            const double var_x222 = 1.768721357868101e-6 * var_x145;
            const double var_x223 = 1.0 - var_chaste_interface__Irel__CaMKtrap;
            const double var_x224 = 1 / var_chaste_interface__Ca__Ca_ss;
            const double var_x225 = 1.0 + 0.0015 * var_x224;
            const double var_x226 = 1 / var_x225;
            const double var_x227 = 0.050000000000000003 * var_x226;
            const double var_x228 = var_x223 * var_x227 + var_chaste_interface__Irel__CaMKtrap;
            const double var_x229 = 0.14999999999999999 + var_x228;
            const double var_x230 = 1 / var_x229;
            const double var_x231 = var_x228 * var_x230;
            const double var_x232 = 0.00092000000000000003 - 0.00017000000000000001 * var_x231 + var_chaste_interface__Ca__Ca_i;
            const double var_x233 = 1 / var_x232;
            const double var_x234 = 1.0 + 0.75 * var_x231;
            const double var_x235 = var_x233 * var_x234;
            const double var_x236 = 0.00035514705882352943 * var_x235;
            const double var_x237 = 0.00035514705882352943 * var_chaste_interface__Ca__Ca_i;
            const double var_x238 = var_x234 / pow(var_x232, 2);
            const double var_x239 = var_x237 * var_x238;
            const double var_x240 = 6.0924326210094507e-17 * var_x151;
            const double var_x241 = var_x108 * var_x148;
            const double var_x242 = 3.8499135947999997e-9 * var_x50;
            
            partialF = var_x221 * (-0.14705882352941174 + var_x239 - var_x222 - var_x236 + 8.544547622551213e-13 * var_x153 + 1.768721357868101e-6 * var_x147 - 9.2281114323553099e-5 * var_x241 - 3.0760371441184366e-5 * var_x143 + var_x149 * var_x240) + (0.00023800000000000004 / pow(var_x218, 3) + 7.0000000000000007e-5 / pow(var_x144, 3)) * (0.14705882352941174 * var_chaste_interface__Ca__Ca_ss + 2.3676470588235295e-5 * var_chaste_interface__Ca__Ca_nsr - 3.0760371441184366e-5 * ((var_x51) ? (-var_x242 + 374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (var_x242 + 3.8499135947999997e-9 * var_x48)) : (var_x58 * var_chaste_interface__cell__V)) - 0.14705882352941174 * var_chaste_interface__Ca__Ca_i - var_x222 * var_chaste_interface__Ca__Ca_i - var_x236 * var_chaste_interface__Ca__Ca_i + 6.1520742882368733e-5 * var_x120 * var_x139) / pow(var_x219, 2);
        }
        else
        {
            const double y_save = rY[1];
            rY[1] += delta;
            const double temp = EvaluateYDerivative1(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[1])/delta;
            rY[1] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative2(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.987317750543
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_INa__H = (1.0 - var_chaste_interface__INa__H) * _lt_0_row[25] - _lt_0_row[26] * var_chaste_interface__INa__H; // 1 / ms

        return d_dt_chaste_interface_var_INa__H;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative2(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            


            const double var_x256 = exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__cell__V);
            const double var_x257 = 1.0 + var_x256;
            const double var_x258 = var_chaste_interface__cell__V >= -40.0;
            const double var_x259 = exp(0.079000000000000001 * var_chaste_interface__cell__V);
            const double var_x260 = exp(0.34999999999999998 * var_chaste_interface__cell__V);
            const double var_x261 = exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__cell__V);
            
            partialF = ((var_x258) ? (-7.6923076923076916 / var_x257) : (-310000.0 * var_x260 - 0.13500000000000001 * var_x261 - 3.5600000000000001 * var_x259));
        }
        else
        {
            const double y_save = rY[2];
            rY[2] += delta;
            const double temp = EvaluateYDerivative2(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[2])/delta;
            rY[2] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative3(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.001356538159
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_INa__m = (1.0 - var_chaste_interface__INa__m) * _lt_0_row[29] - 0.080000000000000002 * var_chaste_interface__INa__m * _lt_0_row[30]; // 1 / ms

        return d_dt_chaste_interface_var_INa__m;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative3(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x263 = 1 / (1.0 - exp(1.0000000000287557e-7));
            const double var_x264 = 1 / (1.0 - exp(-1.0000000000287557e-7));
            const double var_x266 = _lt_0_row[30];
            const double var_x269 = 47.130000000000003 + var_chaste_interface__cell__V;
            const double var_x270 = fabs(var_x269) < 1.0000000000287557e-6;
            const double var_x271 = -0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x272 = exp(-4.7130000000000001 + var_x271);
            const double var_x273 = 1.0 - var_x272;
            const double var_x274 = 0.32000000000000001 / var_x273;
            const double var_x276 = -0.080000000000000002 * var_x266;
            const double var_x277 = -3.200000000092018e-7 * var_x264;
            const double var_x278 = ((var_x270) ? (var_x276 + var_x277 + 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (var_x277 - 3.200000000092018e-7 * var_x263)) : (var_x276 - var_x269 * var_x274));
            
            partialF = var_x278;
        }
        else
        {
            const double y_save = rY[3];
            rY[3] += delta;
            const double temp = EvaluateYDerivative3(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[3])/delta;
            rY[3] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative4(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.991924983076
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_INa__J = (1.0 - var_chaste_interface__INa__J) * _lt_0_row[27] - _lt_0_row[28] * var_chaste_interface__INa__J; // 1 / ms

        return d_dt_chaste_interface_var_INa__J;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative4(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            


            const double var_x258 = var_chaste_interface__cell__V >= -40.0;
            const double var_x271 = -0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x279 = exp(-3.2000000000000002 + var_x271);
            const double var_x280 = 1.0 + var_x279;
            const double var_x281 = exp(-2.5349999999999999e-7 * var_chaste_interface__cell__V);
            const double var_x282 = var_x281 / var_x280;
            const double var_x284 = exp(0.24440000000000001 * var_chaste_interface__cell__V);
            const double var_x285 = exp(-0.043909999999999998 * var_chaste_interface__cell__V);
            const double var_x286 = -127140.0 * var_x284 - 3.4740000000000003e-5 * var_x285;
            const double var_x288 = exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V);
            const double var_x289 = 1.0 + var_x288;
            const double var_x290 = 1 / var_x289;
            const double var_x291 = exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V);
            const double var_x292 = 1.0 + var_x291;
            const double var_x293 = exp(-0.01052 * var_chaste_interface__cell__V);
            const double var_x294 = var_x293 / var_x292;
            const double var_x295 = 37.780000000000001 + var_chaste_interface__cell__V;
            const double var_x296 = var_x290 * var_x295;
            
            partialF = ((var_x258) ? (-0.29999999999999999 * var_x282) : (-0.1212 * var_x294 - var_x286 * var_x296));
        }
        else
        {
            const double y_save = rY[4];
            rY[4] += delta;
            const double temp = EvaluateYDerivative4(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[4])/delta;
            rY[4] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative5(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 1.64013e-06
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_ICaL__d = (-var_chaste_interface__ICaL__d + _lt_0_row[15]) / (_lt_0_row[16]); // 1 / ms

        return d_dt_chaste_interface_var_ICaL__d;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative5(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            


            const double var_x297 = exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__cell__V);
            const double var_x298 = 1.0 + var_x297;
            const double var_x299 = exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__cell__V);
            const double var_x300 = var_x299 / var_x298;
            const double var_x303 = 1 / (0.58999999999999997 + 0.80000000000000004 * var_x300);
            
            partialF = -var_x303;
        }
        else
        {
            const double y_save = rY[5];
            rY[5] += delta;
            const double temp = EvaluateYDerivative5(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[5])/delta;
            rY[5] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative6(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.98230672628
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_ICaL__dp = 0.90000000000000002 - 0.10000000000000001 * var_chaste_interface__ICaL__dp + _lt_0_row[14]; // 1 / ms

        return d_dt_chaste_interface_var_ICaL__dp;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative6(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.10000000000000001;
        }
        else
        {
            const double y_save = rY[6];
            rY[6] += delta;
            const double temp = EvaluateYDerivative6(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[6])/delta;
            rY[6] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative7(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999961508634
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_ICaL__f = (_lt_0_row[18]) * (0.29999999999999999 - var_chaste_interface__ICaL__f + _lt_0_row[17]); // 1 / ms

        return d_dt_chaste_interface_var_ICaL__f;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative7(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            


            const double var_x308 = 0.24110000000000001 * exp(-0.19019454876899997 * pow((-1 + 0.10318426646304972 * var_chaste_interface__cell__V), 2));
            
            partialF = -0.052900000000000003 - var_x308;
        }
        else
        {
            const double y_save = rY[7];
            rY[7] += delta;
            const double temp = EvaluateYDerivative7(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[7])/delta;
            rY[7] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative8(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 1.64013e-06
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__Irel__CaMKtrap = rY[20];
        // Units: dimensionless; Initial value: 0.021123704774
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_Environment__tissue = 0; // dimensionless
        const double var_Irel__CaMKactive = 0.050000000000000003 * (1.0 - var_chaste_interface__Irel__CaMKtrap) / (1.0 + 0.0015 / var_chaste_interface__Ca__Ca_ss) + var_chaste_interface__Irel__CaMKtrap; // dimensionless
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * mParameters[4] / (_lt_0_row[6]))); // uA_per_uF
        const double var_ICaL__ICaL = ((var_Environment__tissue == 0) ? (pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca) : (var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca)); // uA_per_uF
        const double d_dt_chaste_interface_var_ICaL__fca = (0.14999999999999999 - var_chaste_interface__ICaL__fca + 0.55000000000000004 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca__Ca_ss) + 0.29999999999999999 / (1.0 - 20.0 * var_ICaL__ICaL)) / (0.5 + 1 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca__Ca_ss) + 10.0 * var_Irel__CaMKactive / (0.14999999999999999 + var_Irel__CaMKactive)); // 1 / ms

        return d_dt_chaste_interface_var_ICaL__fca;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative8(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            double var_chaste_interface__ICaL__d = rY[5];
            // Units: dimensionless; Initial value: 1.64013e-06
            double var_chaste_interface__ICaL__dp = rY[6];
            // Units: dimensionless; Initial value: 8.98230672628
            double var_chaste_interface__ICaL__f = rY[7];
            // Units: dimensionless; Initial value: 0.999961508634
            double var_chaste_interface__ICaL__fca = rY[8];
            // Units: dimensionless; Initial value: 0.97836624923
            double var_chaste_interface__ICaL__fca2 = rY[9];
            // Units: dimensionless; Initial value: 0.893052931249
            double var_chaste_interface__ICaL__f2 = rY[10];
            // Units: dimensionless; Initial value: 0.992234519148
            double var_chaste_interface__Irel__CaMKtrap = rY[20];
            // Units: dimensionless; Initial value: 0.021123704774
            double var_chaste_interface__Ca__Ca_ss = rY[28];
            // Units: mM; Initial value: 0.00012271265
            


            const double var_x1 = exp(9.9999999999763197e-8);
            const double var_x2 = 1 / (-1.0 + var_x1);
            const double var_x3 = -0.34100000000000003 * mParameters[1];
            const double var_x4 = var_chaste_interface__Ca__Ca_ss;
            const double var_x5 = var_x2 * (var_x3 + var_x1 * var_x4);
            const double var_x6 = exp(-9.9999999999763197e-8);
            const double var_x7 = 1 / (-1.0 + var_x6);
            const double var_x8 = var_x7 * (var_x3 + var_x4 * var_x6);
            const double var_x9 = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp);
            const double var_x10 = var_x9 * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca2;
            const double var_x11 = var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__fca;
            const double var_x12 = var_x10 * var_x11;
            const double var_x13 = -15.0 + var_chaste_interface__cell__V;
            const double var_x14 = fabs(var_x13) < 1.3356169352718439e-6;
            const double var_x15 = 0.074871767015599999 * var_chaste_interface__cell__V;
            const double var_x16 = exp(-1.1230765052339999 + var_x15);
            const double var_x17 = var_x3 + var_x16 * var_x4;
            const double var_x18 = -1.0 + var_x16;
            const double var_x19 = mParameters[4] / var_x18;
            const double var_x20 = var_x17 * var_x19;
            const double var_x21 = 14448.004881000332 * var_x20;
            const double var_x22 = var_x12 * var_x21;
            const double var_x165 = -14.999998664383064 + var_chaste_interface__cell__V;
            const double var_x166 = 0.019296999999954306 * mParameters[4];
            const double var_x167 = var_x166 * var_x8;
            const double var_x168 = var_x165 * (var_x167 + var_x166 * var_x5);
            const double var_x169 = -var_x167 + 374358.83507888648 * var_x168;
            const double var_x170 = var_x10 * var_x169;
            const double var_x171 = var_x170 * var_chaste_interface__ICaL__fca;
            const double var_x172 = var_x171 * var_chaste_interface__ICaL__f;
            const double var_x174 = var_x13 * var_x22;
            const double var_x178 = var_x13 * var_x21;
            const double var_x179 = var_x10 * var_x178;
            const double var_x181 = ((var_x14) ? (var_x170 * var_chaste_interface__ICaL__f) : (var_x179 * var_chaste_interface__ICaL__f));
            const double var_x223 = 1.0 - var_chaste_interface__Irel__CaMKtrap;
            const double var_x224 = 1 / var_chaste_interface__Ca__Ca_ss;
            const double var_x225 = 1.0 + 0.0015 * var_x224;
            const double var_x226 = 1 / var_x225;
            const double var_x227 = 0.050000000000000003 * var_x226;
            const double var_x228 = var_x223 * var_x227 + var_chaste_interface__Irel__CaMKtrap;
            const double var_x229 = 0.14999999999999999 + var_x228;
            const double var_x230 = 1 / var_x229;
            const double var_x231 = var_x228 * var_x230;
            const double var_x310 = 1 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca__Ca_ss);
            const double var_x311 = 10.0 * var_x231;
            const double var_x312 = 1 / (0.5 + var_x311 + var_x310);
            const double var_x313 = ((var_x14) ? (var_x172) : (var_x174));
            const double var_x314 = -var_x313;
            const double var_x315 = 0.014999999999999999 / pow((0.050000000000000003 + var_x314), 2);
            
            partialF = var_x312 * (-1 + var_x181 * var_x315);
        }
        else
        {
            const double y_save = rY[8];
            rY[8] += delta;
            const double temp = EvaluateYDerivative8(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[8])/delta;
            rY[8] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative9(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 1.64013e-06
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_Environment__tissue = 0; // dimensionless
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * mParameters[4] / (_lt_0_row[6]))); // uA_per_uF
        const double var_ICaL__ICaL = ((var_Environment__tissue == 0) ? (pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca) : (var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca)); // uA_per_uF
        const double d_dt_chaste_interface_var_ICaL__fca2 = (-var_chaste_interface__ICaL__fca2 + 1 / (1.0 - 100.0 * var_ICaL__ICaL)) / (125.0 + 300.0 / (1.0 + exp(-4.375 - 25.0 * var_ICaL__ICaL))); // 1 / ms

        return d_dt_chaste_interface_var_ICaL__fca2;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative9(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            double var_chaste_interface__ICaL__d = rY[5];
            // Units: dimensionless; Initial value: 1.64013e-06
            double var_chaste_interface__ICaL__dp = rY[6];
            // Units: dimensionless; Initial value: 8.98230672628
            double var_chaste_interface__ICaL__f = rY[7];
            // Units: dimensionless; Initial value: 0.999961508634
            double var_chaste_interface__ICaL__fca = rY[8];
            // Units: dimensionless; Initial value: 0.97836624923
            double var_chaste_interface__ICaL__fca2 = rY[9];
            // Units: dimensionless; Initial value: 0.893052931249
            double var_chaste_interface__ICaL__f2 = rY[10];
            // Units: dimensionless; Initial value: 0.992234519148
            double var_chaste_interface__Ca__Ca_ss = rY[28];
            // Units: mM; Initial value: 0.00012271265
            


            const double var_x1 = exp(9.9999999999763197e-8);
            const double var_x2 = 1 / (-1.0 + var_x1);
            const double var_x3 = -0.34100000000000003 * mParameters[1];
            const double var_x4 = var_chaste_interface__Ca__Ca_ss;
            const double var_x5 = var_x2 * (var_x3 + var_x1 * var_x4);
            const double var_x6 = exp(-9.9999999999763197e-8);
            const double var_x7 = 1 / (-1.0 + var_x6);
            const double var_x8 = var_x7 * (var_x3 + var_x4 * var_x6);
            const double var_x9 = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp);
            const double var_x10 = var_x9 * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca2;
            const double var_x11 = var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__fca;
            const double var_x12 = var_x10 * var_x11;
            const double var_x13 = -15.0 + var_chaste_interface__cell__V;
            const double var_x14 = fabs(var_x13) < 1.3356169352718439e-6;
            const double var_x15 = 0.074871767015599999 * var_chaste_interface__cell__V;
            const double var_x16 = exp(-1.1230765052339999 + var_x15);
            const double var_x17 = var_x3 + var_x16 * var_x4;
            const double var_x18 = -1.0 + var_x16;
            const double var_x19 = mParameters[4] / var_x18;
            const double var_x20 = var_x17 * var_x19;
            const double var_x21 = 14448.004881000332 * var_x20;
            const double var_x22 = var_x12 * var_x21;
            const double var_x165 = -14.999998664383064 + var_chaste_interface__cell__V;
            const double var_x166 = 0.019296999999954306 * mParameters[4];
            const double var_x167 = var_x166 * var_x8;
            const double var_x168 = var_x165 * (var_x167 + var_x166 * var_x5);
            const double var_x169 = -var_x167 + 374358.83507888648 * var_x168;
            const double var_x170 = var_x10 * var_x169;
            const double var_x171 = var_x170 * var_chaste_interface__ICaL__fca;
            const double var_x172 = var_x171 * var_chaste_interface__ICaL__f;
            const double var_x174 = var_x13 * var_x22;
            const double var_x178 = var_x13 * var_x21;
            const double var_x182 = var_x11 * var_x9;
            const double var_x183 = var_x169 * var_x182;
            const double var_x184 = var_x178 * var_x182;
            const double var_x185 = ((var_x14) ? (var_x183 * var_chaste_interface__ICaL__f2) : (var_x184 * var_chaste_interface__ICaL__f2));
            const double var_x313 = ((var_x14) ? (var_x172) : (var_x174));
            const double var_x314 = -var_x313;
            const double var_x321 = exp(-4.375 - 25.0 * var_x313);
            const double var_x322 = 1.0 + var_x321;
            const double var_x323 = 1 / var_x322;
            const double var_x324 = 1 / (125.0 + 300.0 * var_x323);
            const double var_x325 = 0.01 / pow((0.01 + var_x314), 2);
            const double var_x327 = 0.083333333333333329 * var_x321 * (-var_chaste_interface__ICaL__fca2 + 1 / (1.0 - 100.0 * var_x313)) / (pow(var_x322, 2) * pow((0.41666666666666669 + var_x323), 2));
            
            partialF = var_x324 * (-1 + var_x185 * var_x325) - var_x185 * var_x327;
        }
        else
        {
            const double y_save = rY[9];
            rY[9] += delta;
            const double temp = EvaluateYDerivative9(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[9])/delta;
            rY[9] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative10(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.992234519148
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_ICaL__f2 = (_lt_0_row[20]) * (0.23000000000000001 - var_chaste_interface__ICaL__f2 + _lt_0_row[19]); // 1 / ms

        return d_dt_chaste_interface_var_ICaL__f2;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative10(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            


            const double var_x328 = 0.042299999999999997 * exp(-1.20074125971556 * pow((-1 + 0.053842757610673787 * var_chaste_interface__cell__V), 2));
            
            partialF = -0.0054000000000000003 - var_x328;
        }
        else
        {
            const double y_save = rY[10];
            rY[10] += delta;
            const double temp = EvaluateYDerivative10(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[10])/delta;
            rY[10] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative11(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 7.24074e-06
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_IKr__xr = (-var_chaste_interface__IKr__xr + _lt_0_row[21]) * _lt_0_row[22]; // 1 / ms

        return d_dt_chaste_interface_var_IKr__xr;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative11(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            


            const double var_x332 = 1 / (-1.0 + exp(1.0000000000062181e-7));
            const double var_x333 = 1 / (-1.0 + exp(-1.0000000000062181e-7));
            const double var_x334 = exp(0.2364224 - 0.13600000000000001 * var_chaste_interface__cell__V);
            const double var_x335 = 1.0 - var_x334;
            const double var_x336 = 0.00059999999999999995 / var_x335;
            const double var_x337 = -1.7383999999999999 + var_chaste_interface__cell__V;
            const double var_x339 = 1.9710906701830842e-10 * var_x333;
            const double var_x340 = var_x336 * var_x337;
            const double var_x341 = 760999.99999526795 * (38.360800657030218 + var_chaste_interface__cell__V) * (var_x339 + 1.9710906701830842e-10 * var_x332);
            const double var_x343 = 38.360799999999998 + var_chaste_interface__cell__V;
            const double var_x344 = fabs(var_x343) < 6.5703022339436146e-7;
            const double var_x345 = 1 / (1.0 - exp(9.9999999999975114e-8));
            const double var_x346 = 1 / (1.0 - exp(-9.9999999999975114e-8));
            const double var_x347 = exp(5.8385137599999997 + 0.1522 * var_chaste_interface__cell__V);
            const double var_x348 = -1.0 + var_x347;
            const double var_x349 = 0.00029999999999999997 / var_x348;
            const double var_x351 = 4.4117647058812543e-10 * var_x346;
            const double var_x352 = var_x343 * var_x349;
            const double var_x353 = -var_x351;
            const double var_x354 = 680000.00000016927 * (-1.7384007352941175 + var_chaste_interface__cell__V) * (var_x353 - 4.4117647058812543e-10 * var_x345);
            const double var_x355 = fabs(var_x337) < 7.352941176468758e-7;
            const double var_x356 = -var_x340;
            const double var_x357 = -var_x352;
            
            partialF = ((var_x344) ? (var_x339 + var_x356 - var_x341) : ((var_x355) ? (var_x353 + var_x354 + var_x357) : (var_x356 + var_x357)));
        }
        else
        {
            const double y_save = rY[11];
            rY[11] += delta;
            const double temp = EvaluateYDerivative11(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[11])/delta;
            rY[11] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative12(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.019883138161
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_IKs__tauxs = _lt_0_row[23]; // ms
        const double var_IKs__xss = _lt_0_row[24]; // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs1 = (-var_chaste_interface__IKs__xs1 + var_IKs__xss) / var_IKs__tauxs; // 1 / ms

        return d_dt_chaste_interface_var_IKs__xs1;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative12(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            


            const double var_x361 = 1 / (-1.0 + exp(-9.999999999987797e-8));
            const double var_x362 = 1 / (-1.0 + exp(9.9999999999988984e-8));
            const double var_x363 = exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__cell__V);
            const double var_x364 = 1.0 - var_x363;
            const double var_x365 = 7.6100000000000007e-5 / var_x364;
            const double var_x366 = 44.600000000000001 + var_chaste_interface__cell__V;
            const double var_x368 = -0.55000000000000004 + var_chaste_interface__cell__V;
            const double var_x369 = fabs(var_x368) < 7.8124999999948028e-7;
            const double var_x370 = 1 / (1.0 - exp(9.9999999875755032e-8));
            const double var_x371 = 1 / (1.0 - exp(-9.9999999875755032e-8));
            const double var_x372 = exp(-0.070400000000000004 + 0.128 * var_chaste_interface__cell__V);
            const double var_x373 = -1.0 + var_x372;
            const double var_x374 = 0.00036000000000000002 / var_x373;
            const double var_x376 = fabs(var_x366) < 1.0030090258350555e-8;
            const double var_x378 = 2.8124999999965681e-10 * var_x361;
            const double var_x379 = var_x365 * var_x366;
            const double var_x380 = 7.6328986866047728e-13 * var_x371;
            const double var_x381 = var_x368 * var_x374;
            const double var_x382 = ((var_x369) ? (var_x379 - var_x378 + 640000.00000042573 * (-0.54999921875000002 + var_chaste_interface__cell__V) * (var_x378 + 2.8124999999996902e-10 * var_x362)) : ((var_x376) ? (var_x380 + var_x381 - 49850000.061936118 * (44.599999989969909 + var_chaste_interface__cell__V) * (-var_x380 - 7.6328986866047728e-13 * var_x370)) : (var_x379 + var_x381)));
            
            partialF = -var_x382;
        }
        else
        {
            const double y_save = rY[12];
            rY[12] += delta;
            const double temp = EvaluateYDerivative12(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[12])/delta;
            rY[12] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative13(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.019890650554
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_IKs__tauxs = _lt_0_row[23]; // ms
        const double var_IKs__xss = _lt_0_row[24]; // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs2 = 0.5 * (-var_chaste_interface__IKs__xs2 + var_IKs__xss) / var_IKs__tauxs; // 1 / ms

        return d_dt_chaste_interface_var_IKs__xs2;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative13(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            


            const double var_x361 = 1 / (-1.0 + exp(-9.999999999987797e-8));
            const double var_x362 = 1 / (-1.0 + exp(9.9999999999988984e-8));
            const double var_x363 = exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__cell__V);
            const double var_x364 = 1.0 - var_x363;
            const double var_x365 = 7.6100000000000007e-5 / var_x364;
            const double var_x366 = 44.600000000000001 + var_chaste_interface__cell__V;
            const double var_x368 = -0.55000000000000004 + var_chaste_interface__cell__V;
            const double var_x369 = fabs(var_x368) < 7.8124999999948028e-7;
            const double var_x370 = 1 / (1.0 - exp(9.9999999875755032e-8));
            const double var_x371 = 1 / (1.0 - exp(-9.9999999875755032e-8));
            const double var_x372 = exp(-0.070400000000000004 + 0.128 * var_chaste_interface__cell__V);
            const double var_x373 = -1.0 + var_x372;
            const double var_x374 = 0.00036000000000000002 / var_x373;
            const double var_x376 = fabs(var_x366) < 1.0030090258350555e-8;
            const double var_x378 = 2.8124999999965681e-10 * var_x361;
            const double var_x379 = var_x365 * var_x366;
            const double var_x380 = 7.6328986866047728e-13 * var_x371;
            const double var_x381 = var_x368 * var_x374;
            const double var_x382 = ((var_x369) ? (var_x379 - var_x378 + 640000.00000042573 * (-0.54999921875000002 + var_chaste_interface__cell__V) * (var_x378 + 2.8124999999996902e-10 * var_x362)) : ((var_x376) ? (var_x380 + var_x381 - 49850000.061936118 * (44.599999989969909 + var_chaste_interface__cell__V) * (-var_x380 - 7.6328986866047728e-13 * var_x370)) : (var_x379 + var_x381)));
            
            partialF = -0.5 * var_x382;
        }
        else
        {
            const double y_save = rY[13];
            rY[13] += delta;
            const double temp = EvaluateYDerivative13(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[13])/delta;
            rY[13] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative14(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.013970786703
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_Ito__ydv = 25.0 * (1.0 - var_chaste_interface__Ito__ydv) * _lt_0_row[33] / (_lt_0_row[32]) - 25.0 * var_chaste_interface__Ito__ydv * _lt_0_row[35] / (_lt_0_row[34]); // 1 / ms

        return d_dt_chaste_interface_var_Ito__ydv;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative14(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            


            const double var_x384 = 0.040000000000000001 * var_chaste_interface__cell__V;
            const double var_x385 = exp(-1.6000000000000001 + var_x384);
            const double var_x386 = 1.0 + var_x385;
            const double var_x387 = var_x385 / var_x386;
            const double var_x389 = exp(-3.6000000000000001 - var_x384);
            const double var_x390 = 1.0 + var_x389;
            const double var_x391 = var_x389 / var_x390;
            
            partialF = -25.0 * var_x387 - 25.0 * var_x391;
        }
        else
        {
            const double y_save = rY[14];
            rY[14] += delta;
            const double temp = EvaluateYDerivative14(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[14])/delta;
            rY[14] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative15(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.99996472752
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_Ito__ydv2 = 0.029999999999999999 * (1.0 - var_chaste_interface__Ito__ydv2) / (_lt_0_row[36]) - 0.20000000000000001 * var_chaste_interface__Ito__ydv2 * _lt_0_row[38] / (_lt_0_row[37]); // 1 / ms

        return d_dt_chaste_interface_var_Ito__ydv2;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative15(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            


            const double var_x394 = 0.20000000000000001 * var_chaste_interface__cell__V;
            const double var_x395 = exp(5.0 + var_x394);
            const double var_x396 = 1.0 + var_x395;
            const double var_x398 = var_x395 / var_x396;
            const double var_x399 = exp(12.0 + var_x394);
            const double var_x400 = 1.0 + var_x399;
            
            partialF = -0.029999999999999999 / var_x400 - 0.20000000000000001 * var_x398;
        }
        else
        {
            const double y_save = rY[15];
            rY[15] += delta;
            const double temp = EvaluateYDerivative15(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[15])/delta;
            rY[15] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative16(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.829206149767
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_Ito__zdv = 0.0038999999999999998 * (1.0 - var_chaste_interface__Ito__zdv) / (_lt_0_row[39]) - 0.10000000000000001 * var_chaste_interface__Ito__zdv * _lt_0_row[38] / (_lt_0_row[37]); // 1 / ms

        return d_dt_chaste_interface_var_Ito__zdv;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative16(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            


            const double var_x394 = 0.20000000000000001 * var_chaste_interface__cell__V;
            const double var_x395 = exp(5.0 + var_x394);
            const double var_x396 = 1.0 + var_x395;
            const double var_x398 = var_x395 / var_x396;
            const double var_x402 = exp(12.6 + var_x394);
            const double var_x403 = 1.0 + var_x402;
            
            partialF = -0.10000000000000001 * var_x398 - 0.0038999999999999998 / var_x403;
        }
        else
        {
            const double y_save = rY[16];
            rY[16] += delta;
            const double temp = EvaluateYDerivative16(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[16])/delta;
            rY[16] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative17(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.000816605172
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        


        // Mathematics
        const double d_dt_chaste_interface_var_Ito2__AA = 1 / (1.0 + 0.1502 / var_chaste_interface__Ca__Ca_ss) - var_chaste_interface__Ito2__AA; // 1 / ms

        return d_dt_chaste_interface_var_Ito2__AA;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative17(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -1.0;
        }
        else
        {
            const double y_save = rY[17];
            rY[17] += delta;
            const double temp = EvaluateYDerivative17(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[17])/delta;
            rY[17] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative18(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.001356538159
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_INal__mL = (1.0 - var_chaste_interface__INal__mL) * _lt_0_row[29] - 0.080000000000000002 * var_chaste_interface__INal__mL * _lt_0_row[30]; // 1 / ms

        return d_dt_chaste_interface_var_INal__mL;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative18(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x263 = 1 / (1.0 - exp(1.0000000000287557e-7));
            const double var_x264 = 1 / (1.0 - exp(-1.0000000000287557e-7));
            const double var_x266 = _lt_0_row[30];
            const double var_x269 = 47.130000000000003 + var_chaste_interface__cell__V;
            const double var_x270 = fabs(var_x269) < 1.0000000000287557e-6;
            const double var_x271 = -0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x272 = exp(-4.7130000000000001 + var_x271);
            const double var_x273 = 1.0 - var_x272;
            const double var_x274 = 0.32000000000000001 / var_x273;
            const double var_x276 = -0.080000000000000002 * var_x266;
            const double var_x277 = -3.200000000092018e-7 * var_x264;
            const double var_x278 = ((var_x270) ? (var_x276 + var_x277 + 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (var_x277 - 3.200000000092018e-7 * var_x263)) : (var_x276 - var_x269 * var_x274));
            
            partialF = var_x278;
        }
        else
        {
            const double y_save = rY[18];
            rY[18] += delta;
            const double temp = EvaluateYDerivative18(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[18])/delta;
            rY[18] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative19(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.26130711759
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double d_dt_chaste_interface_var_INal__hL = _lt_0_row[31] - 0.0016666666666666668 * var_chaste_interface__INal__hL; // 1 / ms

        return d_dt_chaste_interface_var_INal__hL;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative19(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.0016666666666666668;
        }
        else
        {
            const double y_save = rY[19];
            rY[19] += delta;
            const double temp = EvaluateYDerivative19(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[19])/delta;
            rY[19] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative20(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Irel__CaMKtrap = rY[20];
        // Units: dimensionless; Initial value: 0.021123704774
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        


        // Mathematics
        const double var_Irel__CaMKactive = 0.050000000000000003 * (1.0 - var_chaste_interface__Irel__CaMKtrap) / (1.0 + 0.0015 / var_chaste_interface__Ca__Ca_ss) + var_chaste_interface__Irel__CaMKtrap; // dimensionless
        const double d_dt_chaste_interface_var_Irel__CaMKtrap = -0.00068000000000000005 * var_chaste_interface__Irel__CaMKtrap + 0.050000000000000003 * (-var_chaste_interface__Irel__CaMKtrap + var_Irel__CaMKactive) * var_Irel__CaMKactive; // 1 / ms

        return d_dt_chaste_interface_var_Irel__CaMKtrap;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative20(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Irel__CaMKtrap = rY[20];
            // Units: dimensionless; Initial value: 0.021123704774
            double var_chaste_interface__Ca__Ca_ss = rY[28];
            // Units: mM; Initial value: 0.00012271265
            


            const double var_x223 = 1.0 - var_chaste_interface__Irel__CaMKtrap;
            const double var_x224 = 1 / var_chaste_interface__Ca__Ca_ss;
            const double var_x225 = 1.0 + 0.0015 * var_x224;
            const double var_x226 = 1 / var_x225;
            const double var_x227 = 0.050000000000000003 * var_x226;
            const double var_x228 = var_x223 * var_x227 + var_chaste_interface__Irel__CaMKtrap;
            const double var_x243 = 1 - var_x227;
            const double var_x407 = 0.0025000000000000005 * var_x226;
            
            partialF = -0.00068000000000000005 - var_x228 * var_x407 + var_x223 * var_x243 * var_x407;
        }
        else
        {
            const double y_save = rY[20];
            rY[20] += delta;
            const double temp = EvaluateYDerivative20(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[20])/delta;
            rY[20] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative21(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 1.64013e-06
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__Irel__ro = rY[21];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ca__Ca_jsr = rY[26];
        // Units: mM; Initial value: 1.737580994071
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_Environment__tissue = 0; // dimensionless
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * mParameters[4] / (_lt_0_row[6]))); // uA_per_uF
        const double var_ICaL__ICaL = ((var_Environment__tissue == 0) ? (pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca) : (var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca)); // uA_per_uF
        const double d_dt_chaste_interface_var_Irel__ro = -0.33333333333333331 * var_chaste_interface__Irel__ro + 0.33333333333333331 * pow(var_chaste_interface__Ca__Ca_jsr, 1.8999999999999999) / ((1.0 + 1 / pow(var_ICaL__ICaL, 2)) * (pow(var_chaste_interface__Ca__Ca_jsr, 1.8999999999999999) + 1644.6531773416521 * pow((var_chaste_interface__Ca__Ca_ss / (0.0028 + var_chaste_interface__Ca__Ca_ss)), 1.8999999999999999))); // 1 / ms

        return d_dt_chaste_interface_var_Irel__ro;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative21(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.33333333333333331;
        }
        else
        {
            const double y_save = rY[21];
            rY[21] += delta;
            const double temp = EvaluateYDerivative21(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[21])/delta;
            rY[21] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative22(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 1.64013e-06
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__Irel__CaMKtrap = rY[20];
        // Units: dimensionless; Initial value: 0.021123704774
        double var_chaste_interface__Irel__ri = rY[22];
        // Units: dimensionless; Initial value: 0.862666650318
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_Environment__tissue = 0; // dimensionless
        const double var_Irel__CaMKactive = 0.050000000000000003 * (1.0 - var_chaste_interface__Irel__CaMKtrap) / (1.0 + 0.0015 / var_chaste_interface__Ca__Ca_ss) + var_chaste_interface__Irel__CaMKtrap; // dimensionless
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * mParameters[4] / (_lt_0_row[6]))); // uA_per_uF
        const double var_ICaL__ICaL = ((var_Environment__tissue == 0) ? (pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca) : (var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca)); // uA_per_uF
        const double var_Irel__cafac = 1 / (1.0 + exp(3.3333333333333335 + 66.666666666666671 * var_ICaL__ICaL)); // dimensionless
        const double d_dt_chaste_interface_var_Irel__ri = (-var_chaste_interface__Irel__ri + 1 / (1.0 + exp(-16.0 + 80.0 * var_Irel__cafac + 40000.0 * var_chaste_interface__Ca__Ca_ss))) / (3.0 + (350.0 - 10.0 * var_Irel__CaMKactive / (0.14999999999999999 + var_Irel__CaMKactive)) / (1.0 + exp(-15.0 + 5000.0 * var_chaste_interface__Ca__Ca_ss + 15.0 * var_Irel__cafac)) + 10.0 * var_Irel__CaMKactive / (0.14999999999999999 + var_Irel__CaMKactive)); // 1 / ms

        return d_dt_chaste_interface_var_Irel__ri;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative22(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            double var_chaste_interface__ICaL__d = rY[5];
            // Units: dimensionless; Initial value: 1.64013e-06
            double var_chaste_interface__ICaL__dp = rY[6];
            // Units: dimensionless; Initial value: 8.98230672628
            double var_chaste_interface__ICaL__f = rY[7];
            // Units: dimensionless; Initial value: 0.999961508634
            double var_chaste_interface__ICaL__fca = rY[8];
            // Units: dimensionless; Initial value: 0.97836624923
            double var_chaste_interface__ICaL__fca2 = rY[9];
            // Units: dimensionless; Initial value: 0.893052931249
            double var_chaste_interface__ICaL__f2 = rY[10];
            // Units: dimensionless; Initial value: 0.992234519148
            double var_chaste_interface__Irel__CaMKtrap = rY[20];
            // Units: dimensionless; Initial value: 0.021123704774
            double var_chaste_interface__Ca__Ca_ss = rY[28];
            // Units: mM; Initial value: 0.00012271265
            


            const double var_x1 = exp(9.9999999999763197e-8);
            const double var_x2 = 1 / (-1.0 + var_x1);
            const double var_x3 = -0.34100000000000003 * mParameters[1];
            const double var_x4 = var_chaste_interface__Ca__Ca_ss;
            const double var_x5 = var_x2 * (var_x3 + var_x1 * var_x4);
            const double var_x6 = exp(-9.9999999999763197e-8);
            const double var_x7 = 1 / (-1.0 + var_x6);
            const double var_x8 = var_x7 * (var_x3 + var_x4 * var_x6);
            const double var_x9 = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp);
            const double var_x10 = var_x9 * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca2;
            const double var_x11 = var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__fca;
            const double var_x12 = var_x10 * var_x11;
            const double var_x13 = -15.0 + var_chaste_interface__cell__V;
            const double var_x14 = fabs(var_x13) < 1.3356169352718439e-6;
            const double var_x15 = 0.074871767015599999 * var_chaste_interface__cell__V;
            const double var_x16 = exp(-1.1230765052339999 + var_x15);
            const double var_x17 = var_x3 + var_x16 * var_x4;
            const double var_x18 = -1.0 + var_x16;
            const double var_x19 = mParameters[4] / var_x18;
            const double var_x20 = var_x17 * var_x19;
            const double var_x21 = 14448.004881000332 * var_x20;
            const double var_x22 = var_x12 * var_x21;
            const double var_x165 = -14.999998664383064 + var_chaste_interface__cell__V;
            const double var_x166 = 0.019296999999954306 * mParameters[4];
            const double var_x167 = var_x166 * var_x8;
            const double var_x168 = var_x165 * (var_x167 + var_x166 * var_x5);
            const double var_x169 = -var_x167 + 374358.83507888648 * var_x168;
            const double var_x170 = var_x10 * var_x169;
            const double var_x171 = var_x170 * var_chaste_interface__ICaL__fca;
            const double var_x172 = var_x171 * var_chaste_interface__ICaL__f;
            const double var_x174 = var_x13 * var_x22;
            const double var_x223 = 1.0 - var_chaste_interface__Irel__CaMKtrap;
            const double var_x224 = 1 / var_chaste_interface__Ca__Ca_ss;
            const double var_x225 = 1.0 + 0.0015 * var_x224;
            const double var_x226 = 1 / var_x225;
            const double var_x227 = 0.050000000000000003 * var_x226;
            const double var_x228 = var_x223 * var_x227 + var_chaste_interface__Irel__CaMKtrap;
            const double var_x229 = 0.14999999999999999 + var_x228;
            const double var_x230 = 1 / var_x229;
            const double var_x231 = var_x228 * var_x230;
            const double var_x311 = 10.0 * var_x231;
            const double var_x313 = ((var_x14) ? (var_x172) : (var_x174));
            const double var_x453 = exp(3.3333333333333335 + 66.666666666666671 * var_x313);
            const double var_x454 = 1.0 + var_x453;
            const double var_x457 = 1 / var_x454;
            const double var_x460 = exp(-15.0 + 5000.0 * var_chaste_interface__Ca__Ca_ss + 15.0 * var_x457);
            const double var_x461 = 1.0 + var_x460;
            const double var_x462 = 1 / var_x461;
            const double var_x463 = 350.0 - var_x311;
            const double var_x464 = var_x462 * var_x463;
            const double var_x465 = 1 / (3.0 + var_x311 + var_x464);
            
            partialF = -var_x465;
        }
        else
        {
            const double y_save = rY[22];
            rY[22] += delta;
            const double temp = EvaluateYDerivative22(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[22])/delta;
            rY[22] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative23(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.00012131666
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.987317750543
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.991924983076
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.26130711759
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 15.59207157178
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_Environment__tissue = 0; // dimensionless
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__INaCa = (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[1] * _lt_0_row[0] - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * _lt_0_row[1]) * mParameters[9] / ((_lt_0_row[2]) * (1.0 + 1.5624999999999999e-8 / pow(var_INaCa__ca_i_NaCa, 2)) * (669921.875 * var_INaCa__ca_i_NaCa + 1.3 * pow(var_chaste_interface__Na__Na_i, 3) + pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[1] + 0.0035999999999999999 * pow(mParameters[3], 3) * (1.0 + 0.00053738391835633597 * pow(var_chaste_interface__Na__Na_i, 3)) + 1860.8670000000004 * (1.0 + 277.77777777777777 * var_INaCa__ca_i_NaCa) * mParameters[1])); // uA_per_uF
        const double var_INaK__INaK = 0.61875000000000002 * mParameters[2] / ((1.0 + 100.0 / pow(var_chaste_interface__Na__Na_i, 2)) * (1.5 + mParameters[2]) * (1.0 + _lt_0_row[4] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3])) * _lt_0_row[3])); // uA_per_uF
        const double var_cell__AF = 5.0619267243613002e-10 * M_PI; // uF_mole_per_C
        const double var_cell__vcell = 1.2100000000000001e-5 * M_PI; // uL
        const double var_cell__vmyo = 0.68000000000000005 * var_cell__vcell; // uL
        const double var_reversal_potentials__ECl = -26.712338705500134 * log(100.0 / var_chaste_interface__Cl__Cl_i); // mV
        const double var_reversal_potentials__ENa = 26.712338705500134 * log(mParameters[3] / var_chaste_interface__Na__Na_i); // mV
        const double var_Na__CTNaCl = 9.8442999999999999e-6 * pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4) / (59494197.640692554 + pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4)); // mM_per_ms
        const double var_cell__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + 0.0064999999999999997 * pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_chaste_interface__INal__hL + pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * ((var_Environment__tissue == 0) ? (mParameters[5]) : (4.0 * mParameters[5])) * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // uA_per_uF
        const double d_dt_chaste_interface_var_Na__Na_i = -var_cell__AF * var_cell__naiont / var_cell__vmyo + var_Na__CTNaCl; // mM / ms

        return d_dt_chaste_interface_var_Na__Na_i;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative23(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            double var_chaste_interface__Ca__Ca_i = rY[1];
            // Units: mM; Initial value: 0.00012131666
            double var_chaste_interface__INa__H = rY[2];
            // Units: dimensionless; Initial value: 0.987317750543
            double var_chaste_interface__INa__m = rY[3];
            // Units: dimensionless; Initial value: 0.001356538159
            double var_chaste_interface__INa__J = rY[4];
            // Units: dimensionless; Initial value: 0.991924983076
            double var_chaste_interface__INal__mL = rY[18];
            // Units: dimensionless; Initial value: 0.001356538159
            double var_chaste_interface__INal__hL = rY[19];
            // Units: dimensionless; Initial value: 0.26130711759
            double var_chaste_interface__Na__Na_i = rY[23];
            // Units: mM; Initial value: 12.972433387269
            double var_chaste_interface__Cl__Cl_i = rY[25];
            // Units: mM; Initial value: 15.59207157178
            

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x38 = 0.0374358835078 * var_chaste_interface__cell__V;
            const double var_x64 = pow(var_chaste_interface__INal__mL, 3);
            const double var_x79 = pow(var_chaste_interface__INa__m, 3);
            const double var_x80 = var_x79 * mParameters[5] * var_chaste_interface__INa__J;
            const double var_x81 = var_x80 * var_chaste_interface__INa__H;
            const double var_x103 = _lt_0_row[0];
            const double var_x104 = pow(var_chaste_interface__Na__Na_i, 3);
            const double var_x105 = var_x104 * mParameters[1];
            const double var_x106 = var_x103 * var_x105;
            const double var_x107 = _lt_0_row[1];
            const double var_x108 = pow(mParameters[3], 3);
            const double var_x109 = var_x108 * var_chaste_interface__Ca__Ca_i;
            const double var_x110 = 1.0 + 0.27000000000000002 * var_x107;
            const double var_x111 = 1 / var_x110;
            const double var_x112 = 1.0 + 6.9444444444444451e-9 / pow(var_chaste_interface__Ca__Ca_i, 2);
            const double var_x113 = 1 / var_x112;
            const double var_x114 = 1.5 * var_x108;
            const double var_x115 = var_x114 * var_chaste_interface__Ca__Ca_i;
            const double var_x116 = var_x108 * (1.0 + 0.00053738391835633597 * var_x104);
            const double var_x117 = (1.0 + 416.66666666666669 * var_chaste_interface__Ca__Ca_i) * mParameters[1];
            const double var_x118 = 1 / (var_x105 + var_x115 + 1004882.8125 * var_chaste_interface__Ca__Ca_i + 0.0035999999999999999 * var_x116 + 1.3 * var_x104 + 1860.8670000000004 * var_x117);
            const double var_x119 = var_x113 * var_x118 * mParameters[9];
            const double var_x120 = var_x111 * var_x119;
            const double var_x122 = pow(var_chaste_interface__Na__Na_i, 2);
            const double var_x123 = 1 / var_x122;
            const double var_x124 = exp(-0.00374358835078 * var_chaste_interface__cell__V);
            const double var_x125 = exp(0.01485884101040119 * mParameters[3]);
            const double var_x126 = exp(-var_x38);
            const double var_x127 = 1.0 + 0.1245 * var_x124 + 0.036499999999999998 * var_x126 * (-0.14285714285714285 + 0.14285714285714285 * var_x125);
            const double var_x128 = mParameters[2] / (1.5 + mParameters[2]);
            const double var_x139 = var_x106 - var_x107 * var_x115;
            const double var_x150 = var_x111 * var_x139 * mParameters[9];
            const double var_x151 = var_x113 * var_x150 / pow((1.2936831875607387e-6 * var_x104 + 0.0018518248862973764 * var_x117 + 1.4927113702623908e-6 * var_x109 + 9.9514091350826051e-7 * var_x105 + 3.5825072886297377e-9 * var_x116 + var_chaste_interface__Ca__Ca_i), 2);
            const double var_x158 = 1 / var_chaste_interface__Na__Na_i;
            const double var_x159 = log(var_x158 * mParameters[3]);
            const double var_x197 = var_x158 * var_x64 * var_chaste_interface__INal__hL;
            const double var_x199 = var_x158 * var_x81;
            const double var_x200 = var_x128 / (var_x104 * var_x127 * pow((0.01 + var_x123), 2));
            const double var_x201 = var_x122 * mParameters[1];
            const double var_x202 = -3 * var_x201 - 3.9000000000000004 * var_x122 - 5.8037463182484285e-6 * var_x108 * var_x122;
            const double var_x203 = var_x103 * var_x120 * var_x201;
            const double var_x211 = 1 / var_chaste_interface__Cl__Cl_i;
            const double var_x476 = 1.827729786302835e-16 * var_x151;
            const double var_x477 = log(100.0 * var_x211);
            const double var_x478 = var_x159 + var_x477;
            const double var_x479 = pow(var_x478, 4);
            const double var_x480 = 2.8839711417381356e-9 * pow(var_x478, 7) / pow((1 + 0.008558014922736952 * var_x479), 2);
            const double var_x481 = 20.048989239405216 * pow(var_x478, 3) / (59494197.640692554 + 509152.23122530844 * var_x479);
            const double var_x482 = var_x158 * var_x480 - var_x158 * var_x481;
            
            partialF = var_x482 - 0.0016433629212878199 * var_x199 - 1.068185898837083e-5 * var_x197 - 0.00055368668594131857 * var_x203 - 2.283957579507939e-6 * var_x200 - var_x202 * var_x476;
        }
        else
        {
            const double y_save = rY[23];
            rY[23] += delta;
            const double temp = EvaluateYDerivative23(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[23])/delta;
            rY[23] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative24(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.00012131666
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 7.24074e-06
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.019883138161
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.019890650554
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.013970786703
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.99996472752
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.829206149767
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 135.469546216758
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 15.59207157178
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_INaK__INaK = 0.61875000000000002 * mParameters[2] / ((1.0 + 100.0 / pow(var_chaste_interface__Na__Na_i, 2)) * (1.5 + mParameters[2]) * (1.0 + _lt_0_row[4] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3])) * _lt_0_row[3])); // uA_per_uF
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time) / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_cell__AF = 5.0619267243613002e-10 * M_PI; // uF_mole_per_C
        const double var_cell__vcell = 1.2100000000000001e-5 * M_PI; // uL
        const double var_cell__vmyo = 0.68000000000000005 * var_cell__vcell; // uL
        const double var_reversal_potentials__ECl = -26.712338705500134 * log(100.0 / var_chaste_interface__Cl__Cl_i); // mV
        const double var_reversal_potentials__EK = 26.712338705500134 * log(mParameters[2] / var_chaste_interface__K__K_i); // mV
        const double var_K__CTKCl = 7.0755999999999996e-6 * (-var_reversal_potentials__ECl + var_reversal_potentials__EK) / (87.825100000000006 - var_reversal_potentials__ECl + var_reversal_potentials__EK); // mM_per_ms
        const double var_cell__kiont = 0.5 * var_cell__i_Stim - 2.0 * var_INaK__INaK + 0.0027599999999999999 * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) / (_lt_0_row[11]) + (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * (-26.712338705500134 * log((0.018329999999999999 * mParameters[3] + mParameters[2]) / (0.018329999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i)) + var_chaste_interface__cell__V) * mParameters[8] * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 + 0.43033148291193518 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[7] * var_chaste_interface__IKr__xr / (_lt_0_row[12]) + 0.4389381125701739 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[6] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)) + (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)))) + pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[10] * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv * _lt_0_row[13]; // uA_per_uF
        const double d_dt_chaste_interface_var_K__K_i = -var_cell__AF * var_cell__kiont / var_cell__vmyo + var_K__CTKCl; // mM / ms

        return d_dt_chaste_interface_var_K__K_i;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative24(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            double var_chaste_interface__Ca__Ca_i = rY[1];
            // Units: mM; Initial value: 0.00012131666
            double var_chaste_interface__IKr__xr = rY[11];
            // Units: dimensionless; Initial value: 7.24074e-06
            double var_chaste_interface__IKs__xs1 = rY[12];
            // Units: dimensionless; Initial value: 0.019883138161
            double var_chaste_interface__IKs__xs2 = rY[13];
            // Units: dimensionless; Initial value: 0.019890650554
            double var_chaste_interface__Ito__ydv = rY[14];
            // Units: dimensionless; Initial value: 0.013970786703
            double var_chaste_interface__Ito__ydv2 = rY[15];
            // Units: dimensionless; Initial value: 0.99996472752
            double var_chaste_interface__Ito__zdv = rY[16];
            // Units: dimensionless; Initial value: 0.829206149767
            double var_chaste_interface__Na__Na_i = rY[23];
            // Units: mM; Initial value: 12.972433387269
            double var_chaste_interface__K__K_i = rY[24];
            // Units: mM; Initial value: 135.469546216758
            double var_chaste_interface__Cl__Cl_i = rY[25];
            // Units: mM; Initial value: 15.59207157178
            

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

            const double var_x61 = exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V);
            const double var_x62 = 1.0 + var_x61;
            const double var_x63 = 1 / var_x62;
            const double var_x66 = 1 / var_chaste_interface__K__K_i;
            const double var_x67 = log(var_x66 * mParameters[2]);
            const double var_x68 = 26.712338705500134 * var_x67;
            const double var_x69 = -var_x68 + var_chaste_interface__cell__V;
            const double var_x71 = 1 / var_chaste_interface__Ca__Ca_i;
            const double var_x72 = pow(var_x71, 1.3999999999999999);
            const double var_x73 = 1.0 + 6.4818210260626455e-7 * var_x72;
            const double var_x74 = 1 / var_x73;
            const double var_x76 = mParameters[8] * var_chaste_interface__IKs__xs2;
            const double var_x82 = exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__cell__V);
            const double var_x83 = 1.0 + var_x82;
            const double var_x84 = sqrt(mParameters[2]);
            const double var_x85 = var_x84 * mParameters[7] / var_x83;
            const double var_x87 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 6.370892781261781 * var_x67);
            const double var_x88 = 1.0 + var_x87;
            const double var_x89 = 1 / var_x88;
            const double var_x90 = exp(-2.4444678999999998 + 13.738155796238718 * var_x67 - 0.51429999999999998 * var_chaste_interface__cell__V);
            const double var_x91 = 1.0 + var_x90;
            const double var_x92 = 1 / var_x91;
            const double var_x93 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 1.6494869150646332 * var_x67);
            const double var_x94 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 2.1455350448257708 * var_x67);
            const double var_x95 = var_x93 + 0.49124000000000001 * var_x94;
            const double var_x96 = var_x92 * var_x95;
            const double var_x97 = var_x84 * mParameters[6] / (var_x96 + 1.02 * var_x89);
            const double var_x98 = var_x89 * var_x97;
            const double var_x99 = pow(var_chaste_interface__Ito__ydv, 3);
            const double var_x100 = _lt_0_row[13];
            const double var_x101 = var_x100 * var_x99 * mParameters[10] * var_chaste_interface__Ito__zdv;
            const double var_x102 = var_x101 * var_chaste_interface__Ito__ydv2;
            const double var_x130 = var_x87 / pow(var_x88, 2);
            const double var_x131 = var_x69 * var_x97;
            const double var_x133 = var_x69 * var_x84;
            const double var_x135 = var_x90 * var_x95 / pow(var_x91, 2);
            const double var_x137 = var_x133 * var_x89 * mParameters[6] / pow((var_x89 + 0.98039215686274506 * var_x96), 2);
            const double var_x154 = 1 / (0.018329999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i);
            const double var_x204 = var_x63 * var_x66;
            const double var_x205 = var_x66 * var_x98;
            const double var_x206 = var_x66 * var_x85 * var_chaste_interface__IKr__xr;
            const double var_x207 = var_x102 * var_x66;
            const double var_x208 = var_x130 * var_x66;
            const double var_x209 = 6.4983106368870169 * var_x208 - var_x92 * (1.6494869150646332 * var_x66 * var_x93 + 1.0539726354202117 * var_x66 * var_x94) - 13.738155796238718 * var_x135 * var_x66;
            const double var_x210 = var_x131 * var_x208;
            const double var_x211 = 1 / var_chaste_interface__Cl__Cl_i;
            const double var_x477 = log(100.0 * var_x211);
            const double var_x484 = -6.1520742882368733e-5 - 3.6912445729421236e-5 * var_x74;
            const double var_x485 = var_x484 * var_x76;
            const double var_x486 = var_x485 * var_chaste_interface__IKs__xs1;
            const double var_x488 = 2.595520834746433e-5 * var_x137;
            const double var_x489 = var_x154 * var_x486;
            const double var_x490 = var_x68 + 26.712338705500134 * var_x477;
            const double var_x491 = 0.00018900582374463672 / (87.825100000000006 + var_x490);
            const double var_x492 = 2.4504050574883893e-8 * var_x490 / pow((1 + 0.30415380916731244 * var_x477 + 0.30415380916731244 * var_x67), 2);
            const double var_x493 = var_x492 * var_x66 - var_x491 * var_x66;
            
            partialF = var_x493 + 26.712338705500134 * var_x489 + 0.00017203830661668509 * var_x210 - 0.00070719080288027735 * var_x206 - 4.535681662754383e-6 * var_x204 - 0.0016433629212878199 * var_x207 - 0.00072133461893788295 * var_x205 - var_x209 * var_x488;
        }
        else
        {
            const double y_save = rY[24];
            rY[24] += delta;
            const double temp = EvaluateYDerivative24(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[24])/delta;
            rY[24] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative25(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.000816605172
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 135.469546216758
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 15.59207157178
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time) / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_cell__AF = 5.0619267243613002e-10 * M_PI; // uF_mole_per_C
        const double var_cell__vcell = 1.2100000000000001e-5 * M_PI; // uL
        const double var_cell__vmyo = 0.68000000000000005 * var_cell__vcell; // uL
        const double var_reversal_potentials__ECl = -26.712338705500134 * log(100.0 / var_chaste_interface__Cl__Cl_i); // mV
        const double var_cell__clont = 0.5 * var_cell__i_Stim + 0.00022499999999999999 * var_chaste_interface__cell__V - 0.00022499999999999999 * var_reversal_potentials__ECl + ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (3.8593999999999993e-9 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(9.9999999999999995e-8)) + 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) - 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) : (0.001444800488100033 * (_lt_0_row[9] + var_chaste_interface__Cl__Cl_i) * var_chaste_interface__cell__V / (_lt_0_row[10]))) * var_chaste_interface__Ito2__AA; // uA_per_uF
        const double var_reversal_potentials__EK = 26.712338705500134 * log(mParameters[2] / var_chaste_interface__K__K_i); // mV
        const double var_K__CTKCl = 7.0755999999999996e-6 * (-var_reversal_potentials__ECl + var_reversal_potentials__EK) / (87.825100000000006 - var_reversal_potentials__ECl + var_reversal_potentials__EK); // mM_per_ms
        const double var_reversal_potentials__ENa = 26.712338705500134 * log(mParameters[3] / var_chaste_interface__Na__Na_i); // mV
        const double var_Na__CTNaCl = 9.8442999999999999e-6 * pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4) / (59494197.640692554 + pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4)); // mM_per_ms
        const double d_dt_chaste_interface_var_Cl__Cl_i = var_cell__AF * var_cell__clont / var_cell__vmyo + var_K__CTKCl + var_Na__CTNaCl; // mM / ms

        return d_dt_chaste_interface_var_Cl__Cl_i;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative25(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            double var_chaste_interface__Ito2__AA = rY[17];
            // Units: dimensionless; Initial value: 0.000816605172
            double var_chaste_interface__Na__Na_i = rY[23];
            // Units: mM; Initial value: 12.972433387269
            double var_chaste_interface__K__K_i = rY[24];
            // Units: mM; Initial value: 135.469546216758
            double var_chaste_interface__Cl__Cl_i = rY[25];
            // Units: mM; Initial value: 15.59207157178
            


            const double var_x30 = exp(9.9999999999999995e-8);
            const double var_x31 = 1 / (1.0 - var_x30);
            const double var_x33 = exp(-9.9999999999999995e-8);
            const double var_x34 = 1 / (1.0 - var_x33);
            const double var_x36 = fabs(var_chaste_interface__cell__V);
            const double var_x37 = var_x36 < 2.671233870550013e-6;
            const double var_x38 = 0.0374358835078 * var_chaste_interface__cell__V;
            const double var_x39 = exp(var_x38);
            const double var_x40 = 1.0 - var_x39;
            const double var_x41 = 1 / var_x40;
            const double var_x42 = var_x41 * var_chaste_interface__Ito2__AA;
            const double var_x45 = var_x42 * var_chaste_interface__cell__V;
            const double var_x66 = 1 / var_chaste_interface__K__K_i;
            const double var_x67 = log(var_x66 * mParameters[2]);
            const double var_x68 = 26.712338705500134 * var_x67;
            const double var_x158 = 1 / var_chaste_interface__Na__Na_i;
            const double var_x159 = log(var_x158 * mParameters[3]);
            const double var_x192 = 3.8593999999999993e-9 * var_x31;
            const double var_x193 = 3.8593999999999993e-9 * var_x34;
            const double var_x211 = 1 / var_chaste_interface__Cl__Cl_i;
            const double var_x212 = -0.00601027620873753 * var_x211;
            const double var_x213 = ((var_x37) ? (var_x212 + (-var_x193 + (0.5 + 187179.41753900002 * var_chaste_interface__cell__V) * (var_x192 + var_x193)) * var_chaste_interface__Ito2__AA) : (var_x212 + 0.001444800488100033 * var_x45));
            const double var_x477 = log(100.0 * var_x211);
            const double var_x478 = var_x159 + var_x477;
            const double var_x479 = pow(var_x478, 4);
            const double var_x480 = 2.8839711417381356e-9 * pow(var_x478, 7) / pow((1 + 0.008558014922736952 * var_x479), 2);
            const double var_x481 = 20.048989239405216 * pow(var_x478, 3) / (59494197.640692554 + 509152.23122530844 * var_x479);
            const double var_x483 = var_x211 * var_x480 - var_x211 * var_x481;
            const double var_x490 = var_x68 + 26.712338705500134 * var_x477;
            const double var_x491 = 0.00018900582374463672 / (87.825100000000006 + var_x490);
            const double var_x492 = 2.4504050574883893e-8 * var_x490 / pow((1 + 0.30415380916731244 * var_x477 + 0.30415380916731244 * var_x67), 2);
            const double var_x494 = var_x211 * var_x492 - var_x211 * var_x491;
            
            partialF = var_x483 + var_x494 + 6.1520742882368733e-5 * var_x213;
        }
        else
        {
            const double y_save = rY[25];
            rY[25] += delta;
            const double temp = EvaluateYDerivative25(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[25])/delta;
            rY[25] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative26(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Irel__ro = rY[21];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Irel__ri = rY[22];
        // Units: dimensionless; Initial value: 0.862666650318
        double var_chaste_interface__Ca__Ca_jsr = rY[26];
        // Units: mM; Initial value: 1.737580994071
        double var_chaste_interface__Ca__Ca_nsr = rY[27];
        // Units: mM; Initial value: 1.832822335168
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_Environment__tissue = 0; // dimensionless
        const double var_Idiff_Itr__itr = 0.0083333333333333332 * var_chaste_interface__Ca__Ca_nsr - 0.0083333333333333332 * var_chaste_interface__Ca__Ca_jsr; // mM_per_ms
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * mParameters[4] / (_lt_0_row[6]))); // uA_per_uF
        const double var_Irel__irelcicr = (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_jsr) * ((var_Environment__tissue == 0) ? (1 / (1.0 + exp(2.6000000000000001 + 0.20000000000000001 * var_ICaL__ibarca))) : (1.0)) * mParameters[0] * var_chaste_interface__Irel__ri * var_chaste_interface__Irel__ro; // mM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_jsr = (-var_Irel__irelcicr + var_Idiff_Itr__itr) / (1.0 + 8.0 / pow((0.80000000000000004 + var_chaste_interface__Ca__Ca_jsr), 2)); // mM / ms

        return d_dt_chaste_interface_var_Ca__Ca_jsr;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative26(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            double var_chaste_interface__Irel__ro = rY[21];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__Irel__ri = rY[22];
            // Units: dimensionless; Initial value: 0.862666650318
            double var_chaste_interface__Ca__Ca_jsr = rY[26];
            // Units: mM; Initial value: 1.737580994071
            double var_chaste_interface__Ca__Ca_nsr = rY[27];
            // Units: mM; Initial value: 1.832822335168
            double var_chaste_interface__Ca__Ca_ss = rY[28];
            // Units: mM; Initial value: 0.00012271265
            


            const double var_x1 = exp(9.9999999999763197e-8);
            const double var_x2 = 1 / (-1.0 + var_x1);
            const double var_x3 = -0.34100000000000003 * mParameters[1];
            const double var_x4 = var_chaste_interface__Ca__Ca_ss;
            const double var_x5 = var_x2 * (var_x3 + var_x1 * var_x4);
            const double var_x6 = exp(-9.9999999999763197e-8);
            const double var_x7 = 1 / (-1.0 + var_x6);
            const double var_x8 = var_x7 * (var_x3 + var_x4 * var_x6);
            const double var_x13 = -15.0 + var_chaste_interface__cell__V;
            const double var_x14 = fabs(var_x13) < 1.3356169352718439e-6;
            const double var_x15 = 0.074871767015599999 * var_chaste_interface__cell__V;
            const double var_x16 = exp(-1.1230765052339999 + var_x15);
            const double var_x17 = var_x3 + var_x16 * var_x4;
            const double var_x18 = -1.0 + var_x16;
            const double var_x19 = mParameters[4] / var_x18;
            const double var_x20 = var_x17 * var_x19;
            const double var_x165 = -14.999998664383064 + var_chaste_interface__cell__V;
            const double var_x166 = 0.019296999999954306 * mParameters[4];
            const double var_x167 = var_x166 * var_x8;
            const double var_x168 = var_x165 * (var_x167 + var_x166 * var_x5);
            const double var_x409 = var_x8 * mParameters[4];
            const double var_x495 = exp(2.6000000000000001 + 74871.767015777295 * var_x168 - 0.0038593999999908609 * var_x409);
            const double var_x496 = 1.0 + var_x495;
            const double var_x497 = -var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_jsr;
            const double var_x498 = var_x497 * mParameters[0];
            const double var_x499 = var_x498 * var_chaste_interface__Irel__ri;
            const double var_x502 = 2889.6009762000663 * var_x20;
            const double var_x504 = exp(2.6000000000000001 + var_x13 * var_x502);
            const double var_x505 = 1.0 + var_x504;
            const double var_x508 = 0.80000000000000004 + var_chaste_interface__Ca__Ca_jsr;
            const double var_x509 = pow(var_x508, (-2));
            const double var_x510 = 1 / (1.0 + 8.0 * var_x509);
            const double var_x511 = var_x510;
            const double var_x512 = 1 / var_x496;
            const double var_x513 = var_x499 * var_x512;
            const double var_x514 = 1 / var_x505;
            const double var_x515 = var_x499 * var_x514;
            const double var_x519 = mParameters[0] * var_chaste_interface__Irel__ri * var_chaste_interface__Irel__ro;
            const double var_x520 = var_x519;
            const double var_x521 = var_x512 * var_x520;
            const double var_x522 = var_x514 * var_x520;
            const double var_x523 = ((var_x14) ? (var_x521) : (var_x522));
            const double var_x524 = ((var_x14) ? (var_x513 * var_chaste_interface__Irel__ro) : (var_x515 * var_chaste_interface__Irel__ro));
            
            partialF = var_x511 * (-0.0083333333333333332 - var_x523) + 0.25 * (-var_x524 + 0.0083333333333333332 * var_chaste_interface__Ca__Ca_nsr - 0.0083333333333333332 * var_chaste_interface__Ca__Ca_jsr) / (pow(var_x508, 3) * pow((0.125 + var_x509), 2));
        }
        else
        {
            const double y_save = rY[26];
            rY[26] += delta;
            const double temp = EvaluateYDerivative26(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[26])/delta;
            rY[26] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative27(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.00012131666
        double var_chaste_interface__Irel__CaMKtrap = rY[20];
        // Units: dimensionless; Initial value: 0.021123704774
        double var_chaste_interface__Ca__Ca_jsr = rY[26];
        // Units: mM; Initial value: 1.737580994071
        double var_chaste_interface__Ca__Ca_nsr = rY[27];
        // Units: mM; Initial value: 1.832822335168
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        


        // Mathematics
        const double var_Idiff_Itr__itr = 0.0083333333333333332 * var_chaste_interface__Ca__Ca_nsr - 0.0083333333333333332 * var_chaste_interface__Ca__Ca_jsr; // mM_per_ms
        const double var_Irel__CaMKactive = 0.050000000000000003 * (1.0 - var_chaste_interface__Irel__CaMKtrap) / (1.0 + 0.0015 / var_chaste_interface__Ca__Ca_ss) + var_chaste_interface__Irel__CaMKtrap; // dimensionless
        const double var_Iup_Ileak__iup = 0.0043750000000000004 * (1.0 + 0.75 * var_Irel__CaMKactive / (0.14999999999999999 + var_Irel__CaMKactive)) * var_chaste_interface__Ca__Ca_i / (0.00092000000000000003 - 0.00017000000000000001 * var_Irel__CaMKactive / (0.14999999999999999 + var_Irel__CaMKactive) + var_chaste_interface__Ca__Ca_i); // mM_per_ms
        const double var_Iup_Ileak__ileak = 0.00029166666666666669 * var_chaste_interface__Ca__Ca_nsr; // mM_per_ms
        const double var_cell__vcell = 1.2100000000000001e-5 * M_PI; // uL
        const double var_cell__vjsr = 0.0047999999999999996 * var_cell__vcell; // uL
        const double var_cell__vnsr = 0.055199999999999999 * var_cell__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_nsr = -var_Iup_Ileak__ileak - var_Idiff_Itr__itr * var_cell__vjsr / var_cell__vnsr + var_Iup_Ileak__iup; // mM / ms

        return d_dt_chaste_interface_var_Ca__Ca_nsr;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative27(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.0010163043478260869;
        }
        else
        {
            const double y_save = rY[27];
            rY[27] += delta;
            const double temp = EvaluateYDerivative27(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[27])/delta;
            rY[27] = y_save;
        }
        return partialF;
    }
    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluateYDerivative28(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.00012131666
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 1.64013e-06
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__Irel__ro = rY[21];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Irel__ri = rY[22];
        // Units: dimensionless; Initial value: 0.862666650318
        double var_chaste_interface__Ca__Ca_jsr = rY[26];
        // Units: mM; Initial value: 1.737580994071
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        

        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_Environment__tissue = 0; // dimensionless
        const double var_Idiff_Itr__idiff = 5.0 * var_chaste_interface__Ca__Ca_ss - 5.0 * var_chaste_interface__Ca__Ca_i; // mM_per_ms
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * mParameters[4] / (_lt_0_row[6]))); // uA_per_uF
        const double var_ICaL__ICaL = ((var_Environment__tissue == 0) ? (pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca) : (var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca)); // uA_per_uF
        const double var_Irel__irelcicr = (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_jsr) * ((var_Environment__tissue == 0) ? (1 / (1.0 + exp(2.6000000000000001 + 0.20000000000000001 * var_ICaL__ibarca))) : (1.0)) * mParameters[0] * var_chaste_interface__Irel__ri * var_chaste_interface__Irel__ro; // mM_per_ms
        const double var_cell__AF = 5.0619267243613002e-10 * M_PI; // uF_mole_per_C
        const double var_cell__vcell = 1.2100000000000001e-5 * M_PI; // uL
        const double var_cell__vjsr = 0.0047999999999999996 * var_cell__vcell; // uL
        const double var_cell__vss = 0.02 * var_cell__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_ss = (-var_Idiff_Itr__idiff + var_Irel__irelcicr * var_cell__vjsr / var_cell__vss - 0.5 * var_ICaL__ICaL * var_cell__AF / var_cell__vss) / (1.0 + 0.0097788000000000007 / pow((0.0086999999999999994 + var_chaste_interface__Ca__Ca_ss), 2) + 4.0890000000000003e-5 / pow((0.00087000000000000001 + var_chaste_interface__Ca__Ca_ss), 2)); // mM / ms

        return d_dt_chaste_interface_var_Ca__Ca_ss;
    }

    double Cellbenson_epicardial_2008FromCellMLGRL1Opt::EvaluatePartialDerivative28(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -85.781844107117
            double var_chaste_interface__Ca__Ca_i = rY[1];
            // Units: mM; Initial value: 0.00012131666
            double var_chaste_interface__ICaL__d = rY[5];
            // Units: dimensionless; Initial value: 1.64013e-06
            double var_chaste_interface__ICaL__dp = rY[6];
            // Units: dimensionless; Initial value: 8.98230672628
            double var_chaste_interface__ICaL__f = rY[7];
            // Units: dimensionless; Initial value: 0.999961508634
            double var_chaste_interface__ICaL__fca = rY[8];
            // Units: dimensionless; Initial value: 0.97836624923
            double var_chaste_interface__ICaL__fca2 = rY[9];
            // Units: dimensionless; Initial value: 0.893052931249
            double var_chaste_interface__ICaL__f2 = rY[10];
            // Units: dimensionless; Initial value: 0.992234519148
            double var_chaste_interface__Irel__ro = rY[21];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__Irel__ri = rY[22];
            // Units: dimensionless; Initial value: 0.862666650318
            double var_chaste_interface__Ca__Ca_jsr = rY[26];
            // Units: mM; Initial value: 1.737580994071
            double var_chaste_interface__Ca__Ca_ss = rY[28];
            // Units: mM; Initial value: 0.00012271265
            


            const double var_x1 = exp(9.9999999999763197e-8);
            const double var_x2 = 1 / (-1.0 + var_x1);
            const double var_x3 = -0.34100000000000003 * mParameters[1];
            const double var_x4 = var_chaste_interface__Ca__Ca_ss;
            const double var_x5 = var_x2 * (var_x3 + var_x1 * var_x4);
            const double var_x6 = exp(-9.9999999999763197e-8);
            const double var_x7 = 1 / (-1.0 + var_x6);
            const double var_x8 = var_x7 * (var_x3 + var_x4 * var_x6);
            const double var_x9 = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp);
            const double var_x10 = var_x9 * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca2;
            const double var_x11 = var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__fca;
            const double var_x12 = var_x10 * var_x11;
            const double var_x13 = -15.0 + var_chaste_interface__cell__V;
            const double var_x14 = fabs(var_x13) < 1.3356169352718439e-6;
            const double var_x15 = 0.074871767015599999 * var_chaste_interface__cell__V;
            const double var_x16 = exp(-1.1230765052339999 + var_x15);
            const double var_x17 = var_x3 + var_x16 * var_x4;
            const double var_x18 = -1.0 + var_x16;
            const double var_x19 = mParameters[4] / var_x18;
            const double var_x20 = var_x17 * var_x19;
            const double var_x21 = 14448.004881000332 * var_x20;
            const double var_x22 = var_x12 * var_x21;
            const double var_x24 = var_x13 * var_x16;
            const double var_x25 = var_x12 * var_x24;
            const double var_x165 = -14.999998664383064 + var_chaste_interface__cell__V;
            const double var_x166 = 0.019296999999954306 * mParameters[4];
            const double var_x167 = var_x166 * var_x8;
            const double var_x168 = var_x165 * (var_x167 + var_x166 * var_x5);
            const double var_x169 = -var_x167 + 374358.83507888648 * var_x168;
            const double var_x170 = var_x10 * var_x169;
            const double var_x171 = var_x170 * var_chaste_interface__ICaL__fca;
            const double var_x172 = var_x171 * var_chaste_interface__ICaL__f;
            const double var_x174 = var_x13 * var_x22;
            const double var_x214 = var_x6 * var_x7;
            const double var_x215 = var_x166 * var_x214;
            const double var_x216 = var_x215 + var_x1 * var_x166 * var_x2;
            const double var_x217 = ((var_x14) ? (var_x12 * (-var_x215 + var_x216 * (-5615382.0261832969 + 374358.83507888648 * var_chaste_interface__cell__V))) : (14448.004881000332 * var_x19 * var_x25));
            const double var_x313 = ((var_x14) ? (var_x172) : (var_x174));
            const double var_x409 = var_x8 * mParameters[4];
            const double var_x452 = var_x214 * mParameters[4];
            const double var_x495 = exp(2.6000000000000001 + 74871.767015777295 * var_x168 - 0.0038593999999908609 * var_x409);
            const double var_x496 = 1.0 + var_x495;
            const double var_x497 = -var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_jsr;
            const double var_x498 = var_x497 * mParameters[0];
            const double var_x499 = var_x498 * var_chaste_interface__Irel__ri;
            const double var_x500 = var_x499 * var_chaste_interface__Irel__ro;
            const double var_x501 = var_x495 * var_x500 / pow(var_x496, 2);
            const double var_x502 = 2889.6009762000663 * var_x20;
            const double var_x504 = exp(2.6000000000000001 + var_x13 * var_x502);
            const double var_x505 = 1.0 + var_x504;
            const double var_x506 = var_x504 / pow(var_x505, 2);
            const double var_x512 = 1 / var_x496;
            const double var_x513 = var_x499 * var_x512;
            const double var_x514 = 1 / var_x505;
            const double var_x515 = var_x499 * var_x514;
            const double var_x519 = mParameters[0] * var_chaste_interface__Irel__ri * var_chaste_interface__Irel__ro;
            const double var_x520 = var_x519;
            const double var_x521 = var_x512 * var_x520;
            const double var_x522 = var_x514 * var_x520;
            const double var_x524 = ((var_x14) ? (var_x513 * var_chaste_interface__Irel__ro) : (var_x515 * var_chaste_interface__Irel__ro));
            const double var_x525 = ((var_x14) ? (-var_x521 - var_x501 * (-0.0038593999999908609 * var_x452 + var_x216 * (-1123076.4052366593 + 74871.767015777295 * var_chaste_interface__cell__V))) : (-var_x522 - 2889.6009762000663 * var_x19 * var_x24 * var_x497 * var_x506 * var_x519));
            const double var_x529 = 0.0086999999999999994 + var_chaste_interface__Ca__Ca_ss;
            const double var_x530 = 0.00087000000000000001 + var_chaste_interface__Ca__Ca_ss;
            const double var_x531 = 1.0 + 0.0097788000000000007 / pow(var_x529, 2) + 4.0890000000000003e-5 / pow(var_x530, 2);
            const double var_x532 = 1 / var_x531;
            const double var_x533 = var_x532;
            
            partialF = var_x533 * (-5.0 + 0.23999999999999996 * var_x525 - 0.0010458526290002684 * var_x217) + (0.019557600000000001 / pow(var_x529, 3) + 8.1780000000000006e-5 / pow(var_x530, 3)) * (0.23999999999999996 * var_x524 + 5.0 * var_chaste_interface__Ca__Ca_i - 5.0 * var_chaste_interface__Ca__Ca_ss - 0.0010458526290002684 * var_x313) / pow(var_x531, 2);
        }
        else
        {
            const double y_save = rY[28];
            rY[28] += delta;
            const double temp = EvaluateYDerivative28(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[28])/delta;
            rY[28] = y_save;
        }
        return partialF;
    }

    std::vector<double> Cellbenson_epicardial_2008FromCellMLGRL1Opt::ComputeDerivedQuantities(double var_chaste_interface__Environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -85.781844107117
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.00012131666
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.987317750543
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.001356538159
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.991924983076
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 1.64013e-06
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.98230672628
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999961508634
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.97836624923
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.893052931249
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.992234519148
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 7.24074e-06
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.019883138161
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.019890650554
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.013970786703
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.99996472752
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.829206149767
        double var_chaste_interface__Irel__ro = rY[21];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Irel__ri = rY[22];
        // Units: dimensionless; Initial value: 0.862666650318
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 12.972433387269
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 135.469546216758
        double var_chaste_interface__Ca__Ca_jsr = rY[26];
        // Units: mM; Initial value: 1.737580994071
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.00012271265
        
        // Lookup table indexing
        const bool _oob_0 = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellbenson_epicardial_2008FromCellMLGRL1Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_Environment__tissue = 0; // dimensionless
        const double var_IKr__gkr = 0.43033148291193518 * sqrt(mParameters[2]) * mParameters[7]; // mS_per_uF
        const double var_IKs__gks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[8]; // mS_per_uF
        const double var_INa__GNa = ((var_Environment__tissue == 0) ? (mParameters[5]) : (4.0 * mParameters[5])); // mS_per_uF
        const double var_INa__gNa = pow(var_chaste_interface__INa__m, 3) * var_INa__GNa * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // mS_per_uF
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__allo = 1 / (1.0 + pow(var_INaCa__KmCa, 2) / pow(var_INaCa__ca_i_NaCa, 2)); // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INaCa__denom2 = pow(var_INaCa__KmNao, 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_INaCa__ca_i_NaCa / var_INaCa__KmCai) * mParameters[1]; // mM4
        const double var_INaCa__denom3 = pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[1] + pow(mParameters[3], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[1] + var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * mParameters[4] / (_lt_0_row[6]))); // uA_per_uF
        const double var_ICaL__ICaL = ((var_Environment__tissue == 0) ? (pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca) : (var_chaste_interface__ICaL__d * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca)); // uA_per_uF
        const double var_ICaL__ICaL_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaL; // uA_per_cm2
        const double var_IKr__r = 1 / (_lt_0_row[12]); // dimensionless
        const double var_INaCa__denom1 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__num = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[1] * exp(var_Environment__FonRT * var_INaCa__eta * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__INaCa = mParameters[9] * var_INaCa__allo * var_INaCa__num / ((var_INaCa__denom2 + var_INaCa__denom3) * var_INaCa__denom1); // uA_per_uF
        const double var_INaCa__INaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa__INaCa; // uA_per_cm2
        const double var_Irel__vg = ((var_Environment__tissue == 0) ? (1 / (1.0 + exp(2.6000000000000001 + 0.20000000000000001 * var_ICaL__ibarca))) : (1.0)); // dimensionless
        const double var_Irel__Grel = mParameters[0] * var_Irel__vg; // per_ms
        const double var_Irel__irelcicr = (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_jsr) * var_Irel__Grel * var_chaste_interface__Irel__ri * var_chaste_interface__Irel__ro; // mM_per_ms
        const double var_Ito__rv = _lt_0_row[13]; // dimensionless
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_reversal_potentials__EK = log(mParameters[2] / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)); // per_ms
        const double var_IK1__bk1 = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__IK1 = 0.43033148291193518 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IK1__ak1 * mParameters[6] / (var_IK1__ak1 + var_IK1__bk1); // uA_per_uF
        const double var_IK1__IK1_converted = HeartConfig::Instance()->GetCapacitance() * var_IK1__IK1; // uA_per_cm2
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKr__gkr * var_IKr__r * var_chaste_interface__IKr__xr; // uA_per_uF
        const double var_IKr__IKr_converted = HeartConfig::Instance()->GetCapacitance() * var_IKr__IKr; // uA_per_cm2
        const double var_Ito__Ito = pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[10] * var_Ito__rv * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv; // uA_per_uF
        const double var_Ito__Ito_converted = HeartConfig::Instance()->GetCapacitance() * var_Ito__Ito; // uA_per_cm2
        const double var_reversal_potentials__ENa = log(mParameters[3] / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__INa = (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INa__gNa; // uA_per_uF
        const double var_INa__INa_converted = HeartConfig::Instance()->GetCapacitance() * var_INa__INa; // uA_per_cm2
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((mParameters[3] * var_reversal_potentials__prnak + mParameters[2]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_Environment__FonRT; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__cell__V) * var_IKs__gks * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_uF
        const double var_IKs__IKs_converted = HeartConfig::Instance()->GetCapacitance() * var_IKs__IKs; // uA_per_cm2

        std::vector<double> dqs(10);
        dqs[0] = var_Irel__irelcicr;
        dqs[1] = var_ICaL__ICaL_converted;
        dqs[2] = var_INa__INa_converted;
        dqs[3] = var_IK1__IK1_converted;
        dqs[4] = var_IKr__IKr_converted;
        dqs[5] = var_IKs__IKs_converted;
        dqs[6] = var_INaCa__INaCa_converted;
        dqs[7] = var_cell__i_Stim_converted;
        dqs[8] = var_Ito__Ito_converted;
        dqs[9] = var_chaste_interface__Environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellbenson_epicardial_2008FromCellMLGRL1Opt>::Initialise(void)
{
    this->mSystemName = "benson_epicardial_2008";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "ms";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-85.781844107117);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00012131666);

    // rY[2]:
    this->mVariableNames.push_back("INa__H");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.987317750543);

    // rY[3]:
    this->mVariableNames.push_back("INa__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001356538159);

    // rY[4]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.991924983076);

    // rY[5]:
    this->mVariableNames.push_back("ICaL__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.64013e-06);

    // rY[6]:
    this->mVariableNames.push_back("ICaL__dp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.98230672628);

    // rY[7]:
    this->mVariableNames.push_back("ICaL__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999961508634);

    // rY[8]:
    this->mVariableNames.push_back("ICaL__fca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.97836624923);

    // rY[9]:
    this->mVariableNames.push_back("ICaL__fca2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.893052931249);

    // rY[10]:
    this->mVariableNames.push_back("ICaL__f2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.992234519148);

    // rY[11]:
    this->mVariableNames.push_back("IKr__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(7.24074e-06);

    // rY[12]:
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.019883138161);

    // rY[13]:
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.019890650554);

    // rY[14]:
    this->mVariableNames.push_back("Ito__ydv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.013970786703);

    // rY[15]:
    this->mVariableNames.push_back("Ito__ydv2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99996472752);

    // rY[16]:
    this->mVariableNames.push_back("Ito__zdv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.829206149767);

    // rY[17]:
    this->mVariableNames.push_back("Ito2__AA");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000816605172);

    // rY[18]:
    this->mVariableNames.push_back("INal__mL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001356538159);

    // rY[19]:
    this->mVariableNames.push_back("INal__hL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.26130711759);

    // rY[20]:
    this->mVariableNames.push_back("Irel_CaMKtrap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.021123704774);

    // rY[21]:
    this->mVariableNames.push_back("Irel__ro");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[22]:
    this->mVariableNames.push_back("Irel__ri");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.862666650318);

    // rY[23]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(12.972433387269);

    // rY[24]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(135.469546216758);

    // rY[25]:
    this->mVariableNames.push_back("Cl__Cl_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(15.59207157178);

    // rY[26]:
    this->mVariableNames.push_back("Ca__Ca_jsr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(1.737580994071);

    // rY[27]:
    this->mVariableNames.push_back("Ca__Ca_nsr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(1.832822335168);

    // rY[28]:
    this->mVariableNames.push_back("Ca__Ca_ss");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00012271265);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_ms");

    // mParameters[1]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[2]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[4]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("L_per_F_ms");

    // mParameters[5]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("mM_per_ms");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("ms");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellbenson_epicardial_2008FromCellMLGRL1Opt)

