//! @file
//!
//! This source file was generated from CellML by chaste_codegen version 0.3.1
//!
//! Model: Li_Mouse_2010
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: normal)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "li_mouse_2010.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Cellli_mouse_2010FromCellMLGRL2Opt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -15.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_chaste_interface__cell__stim_offset = 0; // millisecond
        const double var_chaste_interface__cell__stim_period = 333.33300000000003; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Cellli_mouse_2010FromCellMLGRL2Opt::Cellli_mouse_2010FromCellMLGRL2Opt(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractGeneralizedRushLarsenCardiacCell(
                36,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellli_mouse_2010FromCellMLGRL2Opt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 4.5; // (var_calcium_fluxes__v1) [per_millisecond]
        this->mParameters[1] = 1400.0; // (var_cell__Cao) [micromolar]
        this->mParameters[2] = 5400.0; // (var_cell__Ko) [micromolar]
        this->mParameters[3] = 134000.0; // (var_cell__Nao) [micromolar]
        this->mParameters[4] = 2.5; // (var_L_type_calcium_current__P_CaL) [per_millisecond]
        this->mParameters[5] = 1.0; // (var_cell__Cm) [microF_per_cm2]
        this->mParameters[6] = 16.0; // (var_fast_sodium_current__g_Na) [milliS_per_microF]
        this->mParameters[7] = 0.34999999999999998; // (var_time_independent_K_I__g_K1) [milliS_per_microF]
        this->mParameters[8] = 0.059499999999999997; // (var_non_inactivating_steady_state_K_I__g_Kss) [milliS_per_microF]
        this->mParameters[9] = 0.016500000000000001; // (var_rapid_delayed_rectifier_K_I__g_Kr) [milliS_per_microF]
        this->mParameters[10] = 0.0057499999999999999; // (var_slow_delayed_rectifier_K_I__g_Ks) [milliS_per_microF]
        this->mParameters[11] = 3.9390000000000001; // (var_sodium_calcium_exchange_current__V_max_NCX) [picoA_per_picoF]
    }

    Cellli_mouse_2010FromCellMLGRL2Opt::~Cellli_mouse_2010FromCellMLGRL2Opt()
    {
    }
    
    double Cellli_mouse_2010FromCellMLGRL2Opt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = rY[13];
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__potassium_concentration__Ki = rY[22];
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = rY[23];
        // Units: dimensionless; Initial value: 0.00346258606821817
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = rY[24];
        // Units: dimensionless; Initial value: 0.955684946168062
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
        // Units: dimensionless; Initial value: 0.00336735013094628
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = rY[32];
        // Units: dimensionless; Initial value: 0.0142335908879204
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = rY[33];
        // Units: dimensionless; Initial value: 0.996989882138174
        
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_pump_current__i_pCa = 0.095500000000000002 * pow(var_calcium_concentration__Cai, 2) / (0.083232249999999994 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_calcium_activated_chloride_current__i_ClCa = 2.0 * (40.0 + var_chaste_interface__cell__V) * var_calcium_concentration__Cai / ((1.0 + exp(5.9871794871794881 - 0.12820512820512822 * var_chaste_interface__cell__V)) * (10.0 + var_calcium_concentration__Cai)); // picoA_per_picoF
        const double var_calcium_background_current__i_Cab = 0.00069999999999999999 * var_chaste_interface__cell__V - 0.0092875564766839377 * log(mParameters[1] / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL_converted = HeartConfig::Instance()->GetCapacitance() * ((fabs(0.075369662812530269 * var_chaste_interface__cell__V) > 1.0000000000000001e-5) ? (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((1.0 - exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * mParameters[5])) : (-3.062166450310111e-7 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-1.0000000000000001e-5)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-1.0000000000000001e-5)) * mParameters[5]))); // uA_per_cm2
        const double var_fast_transient_outward_K_I__E_K = 26.535875647668394 * log(mParameters[2] / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_K_I__i_Kto_f = 0.53469999999999995 * pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__fast_transient_outward_K_I__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss_converted = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * mParameters[8] * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // uA_per_cm2
        const double var_slow_delayed_rectifier_K_I__i_Ks_converted = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[10]; // uA_per_cm2
        const double var_slow_transient_outward_K_I__i_Kto_s = 0; // picoA_per_picoF
        const double var_fast_sodium_current__E_Na = 26.535875647668394 * log((mParameters[3] + 0.1111111111111111 * mParameters[2]) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)); // millivolt
        const double var_fast_sodium_current__i_Na_converted = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__fast_sodium_current__O_Na * mParameters[6]; // uA_per_cm2
        const double var_rapid_delayed_rectifier_K_I__i_Kr_converted = (-26.535875647668394 * log((mParameters[2] + 0.020408163265306124 * mParameters[3]) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * mParameters[9]; // uA_per_cm2
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__cell__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX_converted = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * exp(0.013189690992192795 * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_calcium_concentration__Cai * exp(-0.024495140414072337 * var_chaste_interface__cell__V)) * HeartConfig::Instance()->GetCapacitance() * mParameters[11] / ((1.0 + 0.27000000000000002 * exp(-0.024495140414072337 * var_chaste_interface__cell__V)) * (1400.0 * pow(var_chaste_interface__sodium_concentration__Nai, 3) + 681472000000000.0 * var_calcium_concentration__Cai + pow(mParameters[3], 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] + 1728000000000.0 * (1.0 + 0.27777777777777779 * var_calcium_concentration__Cai) * mParameters[1] + 3.6000000000000001 * pow(mParameters[3], 3) * (1.0 + 5.7870370370370368e-13 * pow(var_chaste_interface__sodium_concentration__Nai, 3)))); // uA_per_cm2
        const double var_sodium_potassium_pump_current__i_NaK = 2.4860000000000002 * mParameters[2] / ((1.0 + 13435672565.051065 * pow(1 / var_chaste_interface__sodium_concentration__Nai, 2.3999999999999999)) * (1500.0 + mParameters[2]) * (1.0 + 0.1245 * exp(-0.0037684831406265135 * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[3])) * exp(-0.037684831406265135 * var_chaste_interface__cell__V))); // picoA_per_picoF
        const double var_time_independent_K_I__i_K1_converted = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[2] * mParameters[7] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + mParameters[2])); // uA_per_cm2
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur = 0.25 * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur; // picoA_per_picoF
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_calcium_activated_chloride_current__i_ClCa + HeartConfig::Instance()->GetCapacitance() * var_calcium_background_current__i_Cab + HeartConfig::Instance()->GetCapacitance() * var_calcium_pump_current__i_pCa + HeartConfig::Instance()->GetCapacitance() * var_fast_transient_outward_K_I__i_Kto_f + HeartConfig::Instance()->GetCapacitance() * var_slow_transient_outward_K_I__i_Kto_s + HeartConfig::Instance()->GetCapacitance() * var_sodium_background_current__i_Nab + HeartConfig::Instance()->GetCapacitance() * var_sodium_potassium_pump_current__i_NaK + HeartConfig::Instance()->GetCapacitance() * var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur + var_L_type_calcium_current__i_CaL_converted + var_fast_sodium_current__i_Na_converted + var_non_inactivating_steady_state_K_I__i_Kss_converted + var_rapid_delayed_rectifier_K_I__i_Kr_converted + var_slow_delayed_rectifier_K_I__i_Ks_converted + var_sodium_calcium_exchange_current__i_NCX_converted + var_time_independent_K_I__i_K1_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellli_mouse_2010FromCellMLGRL2Opt::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        const unsigned v_index = GetVoltageIndex();
        const double delta = 1e-8;
        const double yinit = rY[v_index];

        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = rY[13];
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__potassium_concentration__Ki = rY[22];
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = rY[23];
        // Units: dimensionless; Initial value: 0.00346258606821817
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = rY[24];
        // Units: dimensionless; Initial value: 0.955684946168062
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
        // Units: dimensionless; Initial value: 0.00336735013094628
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = rY[32];
        // Units: dimensionless; Initial value: 0.0142335908879204
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = rY[33];
        // Units: dimensionless; Initial value: 0.996989882138174
        

        // Mathematics
        double d_dt_chaste_interface_var_cell__V;
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_pump_current__i_pCa = 0.095500000000000002 * pow(var_calcium_concentration__Cai, 2) / (0.083232249999999994 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_calcium_background_current__i_Cab = 0.00069999999999999999 * var_chaste_interface__cell__V - 0.0092875564766839377 * log(mParameters[1] / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL = ((fabs(0.075369662812530269 * var_chaste_interface__cell__V) > 1.0000000000000001e-5) ? (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((1.0 - exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * mParameters[5])) : (-3.062166450310111e-7 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-1.0000000000000001e-5)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-1.0000000000000001e-5)) * mParameters[5]))); // picoA_per_picoF
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // picoA_per_picoF
        const double var_fast_transient_outward_K_I__E_K = 26.535875647668394 * log(mParameters[2] / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_K_I__i_Kto_f = 0.53469999999999995 * pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__fast_transient_outward_K_I__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * mParameters[8] * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // picoA_per_picoF
        const double var_slow_delayed_rectifier_K_I__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[10]; // picoA_per_picoF
        const double var_slow_transient_outward_K_I__i_Kto_s = 0; // picoA_per_picoF
        const double var_fast_sodium_current__E_Na = 26.535875647668394 * log((mParameters[3] + 0.1111111111111111 * mParameters[2]) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)); // millivolt
        const double var_fast_sodium_current__i_Na = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_chaste_interface__fast_sodium_current__O_Na * mParameters[6]; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__i_Kr = (-26.535875647668394 * log((mParameters[2] + 0.020408163265306124 * mParameters[3]) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) + var_chaste_interface__cell__V) * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * mParameters[9]; // picoA_per_picoF
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__cell__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * exp(0.013189690992192795 * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_calcium_concentration__Cai * exp(-0.024495140414072337 * var_chaste_interface__cell__V)) * mParameters[11] / ((1.0 + 0.27000000000000002 * exp(-0.024495140414072337 * var_chaste_interface__cell__V)) * (1400.0 * pow(var_chaste_interface__sodium_concentration__Nai, 3) + 681472000000000.0 * var_calcium_concentration__Cai + pow(mParameters[3], 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] + 1728000000000.0 * (1.0 + 0.27777777777777779 * var_calcium_concentration__Cai) * mParameters[1] + 3.6000000000000001 * pow(mParameters[3], 3) * (1.0 + 5.7870370370370368e-13 * pow(var_chaste_interface__sodium_concentration__Nai, 3)))); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = 2.4860000000000002 * mParameters[2] / ((1.0 + 13435672565.051065 * pow(1 / var_chaste_interface__sodium_concentration__Nai, 2.3999999999999999)) * (1500.0 + mParameters[2]) * (1.0 + 0.1245 * exp(-0.0037684831406265135 * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[3])) * exp(-0.037684831406265135 * var_chaste_interface__cell__V))); // picoA_per_picoF
        const double var_time_independent_K_I__i_K1 = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[2] * mParameters[7] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + mParameters[2])); // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur = 0.25 * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur; // picoA_per_picoF
        d_dt_chaste_interface_var_cell__V = -var_L_type_calcium_current__i_CaL - var_calcium_background_current__i_Cab - var_calcium_pump_current__i_pCa - var_cell__i_Stim - var_fast_sodium_current__i_Na - var_fast_transient_outward_K_I__i_Kto_f - var_non_inactivating_steady_state_K_I__i_Kss - var_rapid_delayed_rectifier_K_I__i_Kr - var_slow_delayed_rectifier_K_I__i_Ks - var_slow_transient_outward_K_I__i_Kto_s - var_sodium_background_current__i_Nab - var_sodium_calcium_exchange_current__i_NCX - var_sodium_potassium_pump_current__i_NaK - var_time_independent_K_I__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur - 2.0 * (40.0 + var_chaste_interface__cell__V) * var_calcium_concentration__Cai / ((1.0 + exp(5.9871794871794881 - 0.12820512820512822 * var_chaste_interface__cell__V)) * (10.0 + var_calcium_concentration__Cai)); // millivolt / millisecond

        double evalF = d_dt_chaste_interface_var_cell__V;
        mEvalF[0] = d_dt_chaste_interface_var_cell__V;
        double partialF = EvaluatePartialDerivative0(var_chaste_interface__environment__time, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] += 0.5*evalF*mDt;
        }
        else
        {
            rY[v_index] += (evalF/partialF)*(exp(partialF*0.5*mDt)-1.0);
        }

        rY[v_index] = yinit;
        evalF = EvaluateYDerivative0(var_chaste_interface__environment__time, rY);
        mEvalF[0] = evalF;
        partialF = EvaluatePartialDerivative0(var_chaste_interface__environment__time, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] = yinit + evalF*mDt;
        }
        else
        {
            rY[v_index] = yinit + (evalF/partialF)*(exp(partialF*mDt)-1.0);
        }
    }

    void Cellli_mouse_2010FromCellMLGRL2Opt::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        const double delta=1e-8;
        const unsigned size = GetNumberOfStateVariables();
        mYInit = rY;
        double y_save;

        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
        // Units: micromolar; Initial value: 171.167969039613
        double var_chaste_interface__calcium_concentration__CaNSR = rY[4];
        // Units: micromolar; Initial value: 404.825013216286
        double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
        // Units: dimensionless; Initial value: 0.000280539508743811
        double var_chaste_interface__calcium_fluxes__CaMKt = rY[6];
        // Units: dimensionless; Initial value: 0.729027738385079
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[8];
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        double var_chaste_interface__ryanodine_receptors__P_C2 = rY[9];
        // Units: dimensionless; Initial value: 0.565182571165673
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__I = rY[11];
        // Units: dimensionless; Initial value: 0.427651445872853
        double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = rY[13];
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__fast_sodium_current__C_Na1 = rY[15];
        // Units: dimensionless; Initial value: 0.000420472760277688
        double var_chaste_interface__fast_sodium_current__C_Na2 = rY[16];
        // Units: dimensionless; Initial value: 0.0240114508843199
        double var_chaste_interface__fast_sodium_current__I1_Na = rY[17];
        // Units: dimensionless; Initial value: 0.000517471697712382
        double var_chaste_interface__fast_sodium_current__I2_Na = rY[18];
        // Units: dimensionless; Initial value: 2.45406116958509e-05
        double var_chaste_interface__fast_sodium_current__IF_Na = rY[19];
        // Units: dimensionless; Initial value: 0.000306123648969581
        double var_chaste_interface__fast_sodium_current__IC_Na2 = rY[20];
        // Units: dimensionless; Initial value: 0.0174528857380179
        double var_chaste_interface__fast_sodium_current__IC_Na3 = rY[21];
        // Units: dimensionless; Initial value: 0.402980726914811
        double var_chaste_interface__potassium_concentration__Ki = rY[22];
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = rY[23];
        // Units: dimensionless; Initial value: 0.00346258606821817
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = rY[24];
        // Units: dimensionless; Initial value: 0.955684946168062
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 = rY[28];
        // Units: dimensionless; Initial value: 0.0011733433957123
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 = rY[29];
        // Units: dimensionless; Initial value: 0.00105586824723736
        double var_chaste_interface__rapid_delayed_rectifier_K_I__I_K = rY[30];
        // Units: dimensionless; Initial value: 0.00140618453684944
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
        // Units: dimensionless; Initial value: 0.00336735013094628
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = rY[32];
        // Units: dimensionless; Initial value: 0.0142335908879204
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = rY[33];
        // Units: dimensionless; Initial value: 0.996989882138174
        double var_chaste_interface__slow_transient_outward_K_I__ato_s = rY[34];
        // Units: dimensionless; Initial value: 0.0443263407760382
        double var_chaste_interface__slow_transient_outward_K_I__ito_s = rY[35];
        // Units: dimensionless; Initial value: 0.887568880831388
        
        
        // Mathematics
        double d_dt_chaste_interface_var_cell__V;
        const double d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__iKss = 0; // 1 / millisecond
        const double var_L_type_calcium_current__C = 1.0 - var_chaste_interface__L_type_calcium_current__I - var_chaste_interface__L_type_calcium_current__O; // dimensionless
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__calcium_fluxes__CaMKt) / (1.0 + 0.69999999999999996 / var_chaste_interface__calcium_concentration__Cass); // dimensionless
        const double d_dt_chaste_interface_var_calcium_fluxes__CaMKt = -0.00020000000000000001 * var_chaste_interface__calcium_fluxes__CaMKt + 0.050000000000000003 * (var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt) * var_calcium_fluxes__CaMKb; // 1 / millisecond
        const double var_calcium_fluxes__J_tr = 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaNSR - 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaJSR; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_xfer = 0.125 * var_chaste_interface__calcium_concentration__Cass - 0.125 * var_calcium_concentration__Cai; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_serca = pow(var_calcium_concentration__Cai, 2) * (0.50590000000000002 + 1.5167893800000001 * pow((var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt), 2.5830000000000002) / (1.7590641847756086 + pow((var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt), 2.5830000000000002))) / (0.16974399999999998 + pow(var_calcium_concentration__Cai, 2)); // micromolar_per_millisecond
        const double var_calcium_pump_current__i_pCa = 0.095500000000000002 * pow(var_calcium_concentration__Cai, 2) / (0.083232249999999994 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_L_type_calcium_current__expVL = exp(0.15506520491866829 * var_chaste_interface__cell__V); // dimensionless
        const double d_dt_chaste_interface_var_L_type_calcium_current__O = -1.1986666666666668 * var_chaste_interface__L_type_calcium_current__O + 0.66666666666666663 * var_L_type_calcium_current__C * var_L_type_calcium_current__expVL / (1.0 + var_L_type_calcium_current__expVL); // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__I = -0.00034782608695652176 * (0.0625 + var_L_type_calcium_current__expVL) * var_chaste_interface__L_type_calcium_current__I / (0.0625 + 0.40000000000000002 * var_L_type_calcium_current__expVL) + 0.0028985507246376812 * (0.0625 + var_L_type_calcium_current__expVL) * var_L_type_calcium_current__C * var_chaste_interface__calcium_concentration__Cass / (1.0 + var_L_type_calcium_current__expVL); // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__y_gate = (-var_chaste_interface__L_type_calcium_current__y_gate + 1 / (1.0 + exp(4.024390243902439 + 0.12195121951219513 * var_chaste_interface__cell__V)) + 0.10000000000000001 / (1.0 + exp(6.666666666666667 - 0.16666666666666666 * var_chaste_interface__cell__V))) / (8.0 + 315.0 / (1.0 + exp(7.5 + 0.25 * var_chaste_interface__cell__V))); // 1 / millisecond
        const double var_calcium_background_current__i_Cab = 0.00069999999999999999 * var_chaste_interface__cell__V - 0.0092875564766839377 * log(mParameters[1] / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL = ((fabs(0.075369662812530269 * var_chaste_interface__cell__V) > 1.0000000000000001e-5) ? (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((1.0 - exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * mParameters[5])) : (-3.062166450310111e-7 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-1.0000000000000001e-5)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-1.0000000000000001e-5)) * mParameters[5]))); // picoA_per_picoF
        const double d_dt_chaste_interface_var_calcium_fluxes__P_RyR = -0.01 * var_chaste_interface__calcium_fluxes__P_RyR - 0.2857142857142857 * var_L_type_calcium_current__i_CaL * exp(-0.038580246913580245 * pow((-1 + 0.20000000000000001 * var_chaste_interface__cell__V), 2)); // 1 / millisecond
        const double var_calcium_fluxes__J_leak = ((var_chaste_interface__environment__time < 3333330000000.0005) ? (3.0000000000000001e-5 * var_chaste_interface__calcium_concentration__CaNSR - 3.0000000000000001e-5 * var_calcium_concentration__Cai) : (0.10000000000000001 * var_chaste_interface__calcium_concentration__CaNSR - 0.10000000000000001 * var_calcium_concentration__Cai)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaNSR = 95.238095238095241 * var_calcium_fluxes__J_serca - 95.238095238095241 * var_calcium_fluxes__J_leak - 0.33333333333333337 * var_calcium_fluxes__J_tr; // micromolar / millisecond
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // picoA_per_picoF
        const double var_fast_sodium_current__C_Na3 = 1.0 - var_chaste_interface__fast_sodium_current__C_Na1 - var_chaste_interface__fast_sodium_current__C_Na2 - var_chaste_interface__fast_sodium_current__I1_Na - var_chaste_interface__fast_sodium_current__I2_Na - var_chaste_interface__fast_sodium_current__IC_Na2 - var_chaste_interface__fast_sodium_current__IC_Na3 - var_chaste_interface__fast_sodium_current__IF_Na - var_chaste_interface__fast_sodium_current__O_Na; // dimensionless
        const double var_fast_sodium_current__alpha_Na11 = 3.802 / (0.20000000000000001 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V) + 0.1027 * exp(-0.14705882352941177 - 0.058823529411764705 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na12 = 3.802 / (0.1027 * exp(-0.16666666666666666 - 0.066666666666666666 * var_chaste_interface__cell__V) + 0.23000000000000001 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na13 = 3.802 / (0.25 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V) + 0.1027 * exp(-0.20833333333333334 - 0.083333333333333329 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na2 = 1 / (0.39395599999999997 + 0.188495 * exp(-0.42168674698795178 - 0.060240963855421679 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = 6.9999999999999997e-7 * exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__alpha_Na4 = 0.001 * var_fast_sodium_current__alpha_Na2; // per_millisecond
        const double var_fast_sodium_current__alpha_Na5 = 1.0526315789473684e-5 * var_fast_sodium_current__alpha_Na2; // per_millisecond
        const double var_fast_sodium_current__beta_Na11 = 0.19170000000000001 * exp(-0.12315270935960591 - 0.04926108374384236 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na12 = 0.20000000000000001 * exp(0.12315270935960591 - 0.04926108374384236 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na13 = 0.22 * exp(0.36945812807881773 - 0.04926108374384236 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na3 = 0.008539999999999999 + 2.0000000000000002e-5 * var_chaste_interface__cell__V; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__C_Na1 = var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__alpha_Na12 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na3 + var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__beta_Na13 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__alpha_Na13 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na3; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__C_Na2 = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na12 + var_fast_sodium_current__C_Na3 * var_fast_sodium_current__alpha_Na11 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__alpha_Na12 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na11 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na3; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IC_Na2 = var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na11 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na12 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__beta_Na11; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IC_Na3 = var_fast_sodium_current__C_Na3 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__beta_Na11 - var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na11 - var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na3; // 1 / millisecond
        const double var_fast_sodium_current__beta_Na2 = var_fast_sodium_current__alpha_Na13 * var_fast_sodium_current__alpha_Na2 * var_fast_sodium_current__alpha_Na3 / (var_fast_sodium_current__beta_Na13 * var_fast_sodium_current__beta_Na3); // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__O_Na = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__alpha_Na13 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na2 - var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__alpha_Na2 - var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__beta_Na13; // 1 / millisecond
        const double var_fast_sodium_current__beta_Na4 = var_fast_sodium_current__alpha_Na3; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IF_Na = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__beta_Na4 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na12 + var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__alpha_Na2 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na4 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na2; // 1 / millisecond
        const double var_fast_sodium_current__beta_Na5 = 0.02 * var_fast_sodium_current__alpha_Na3; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__I1_Na = var_chaste_interface__fast_sodium_current__I2_Na * var_fast_sodium_current__beta_Na5 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na4 - var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__alpha_Na5 - var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__beta_Na4; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__I2_Na = var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__alpha_Na5 - var_chaste_interface__fast_sodium_current__I2_Na * var_fast_sodium_current__beta_Na5; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_transient_outward_K_I__ato_f = 0.18064 * (1.0 - var_chaste_interface__fast_transient_outward_K_I__ato_f) * exp(1.6096500000000002 + 0.035770000000000003 * var_chaste_interface__cell__V) - 0.39560000000000001 * var_chaste_interface__fast_transient_outward_K_I__ato_f * exp(-2.8066499999999999 - 0.062370000000000002 * var_chaste_interface__cell__V); // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_transient_outward_K_I__ito_f = (-var_chaste_interface__fast_transient_outward_K_I__ito_f + 1 / (1.0 + exp(10.279999999999999 + 0.20000000000000001 * var_chaste_interface__cell__V))) / (9.6645000000000003 + 10.936199999999999 / (1.0 + exp(10.279999999999999 + 0.20000000000000001 * var_chaste_interface__cell__V))); // 1 / millisecond
        const double var_fast_transient_outward_K_I__E_K = 26.535875647668394 * log(mParameters[2] / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_K_I__i_Kto_f = 0.53469999999999995 * pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__fast_transient_outward_K_I__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * mParameters[8] * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__alpha_a1 = 0.033500000000000002 * exp(0.0109 * var_chaste_interface__cell__V); // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__alpha_i = 0.070300000000000001 * exp(0.14349999999999999 + 0.0287 * var_chaste_interface__cell__V); // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_a1 = 6.8899999999999994e-5 * exp(-0.041779999999999998 * var_chaste_interface__cell__V); // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_i = 0.0064970000000000002 * exp(-0.16339999999999999 - 0.032680000000000001 * var_chaste_interface__cell__V); // per_millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__I_K = var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__alpha_i - var_chaste_interface__rapid_delayed_rectifier_K_I__I_K * var_rapid_delayed_rectifier_K_I__beta_i; // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__O_K = var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 * var_rapid_delayed_rectifier_K_I__alpha_a1 + var_chaste_interface__rapid_delayed_rectifier_K_I__I_K * var_rapid_delayed_rectifier_K_I__beta_i - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__alpha_i - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__beta_a1; // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K1 = 0.036777999999999998 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 - 0.023761000000000001 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 + 0.022348 * (1.0 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 - var_chaste_interface__rapid_delayed_rectifier_K_I__I_K - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K) * exp(0.01176 * var_chaste_interface__cell__V) - 0.047002000000000002 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 * exp(-0.063100000000000003 * var_chaste_interface__cell__V); // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K2 = 0.023761000000000001 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 - 0.036777999999999998 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 + var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__beta_a1 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 * var_rapid_delayed_rectifier_K_I__alpha_a1; // 1 / millisecond
        const double var_calcium_fluxes__J_rel = ((var_chaste_interface__environment__time < 3333330000000.0005) ? ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * (var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2) * var_chaste_interface__calcium_fluxes__P_RyR * mParameters[0]) : (10.0 * var_chaste_interface__calcium_concentration__CaJSR - 10.0 * var_chaste_interface__calcium_concentration__Cass)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaJSR = (-var_calcium_fluxes__J_rel + var_calcium_fluxes__J_tr) / (1.0 + 79.365079365079367 / pow((1 + 0.0015873015873015873 * var_chaste_interface__calcium_concentration__CaJSR), 2)); // micromolar / millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__Cass = (3.5000000000000004 * var_calcium_fluxes__J_rel - 1000.0 * var_calcium_fluxes__J_xfer - 32.656617993405561 * var_L_type_calcium_current__i_CaL * mParameters[5]) / (1.0 + 65.399999999999991 / pow((0.59999999999999998 + var_chaste_interface__calcium_concentration__Cass), 2)); // micromolar / millisecond
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_C2 = 0.0089999999999999993 * var_chaste_interface__ryanodine_receptors__P_O1 - 0.00080000000000000004 * var_chaste_interface__ryanodine_receptors__P_C2; // 1 / millisecond
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O2 = -0.96499999999999997 * var_chaste_interface__ryanodine_receptors__P_O2 + 0.0040499999999999998 * pow(var_chaste_interface__calcium_concentration__Cass, 3.0) * var_chaste_interface__ryanodine_receptors__P_O1; // 1 / millisecond
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O1 = 0.00080000000000000004 * var_chaste_interface__ryanodine_receptors__P_C2 + 0.96499999999999997 * var_chaste_interface__ryanodine_receptors__P_O2 - 0.080249999999999988 * var_chaste_interface__ryanodine_receptors__P_O1 + 0.0060749999999999997 * pow(var_chaste_interface__calcium_concentration__Cass, 4.0) * (1.0 - var_chaste_interface__ryanodine_receptors__P_C2 - var_chaste_interface__ryanodine_receptors__P_O1 - var_chaste_interface__ryanodine_receptors__P_O2) - 0.0040499999999999998 * pow(var_chaste_interface__calcium_concentration__Cass, 3.0) * var_chaste_interface__ryanodine_receptors__P_O1; // 1 / millisecond
        const double d_dt_chaste_interface_var_slow_delayed_rectifier_K_I__nKs = -9.5333299999999997e-5 * var_chaste_interface__slow_delayed_rectifier_K_I__nKs * exp(-1.0069999999999999 - 0.037999999999999999 * var_chaste_interface__cell__V) + 4.8133299999999997e-6 * (1.0 - var_chaste_interface__slow_delayed_rectifier_K_I__nKs) * (26.5 + var_chaste_interface__cell__V) / (1.0 - exp(-3.3919999999999999 - 0.128 * var_chaste_interface__cell__V)); // 1 / millisecond
        const double var_slow_delayed_rectifier_K_I__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[10]; // picoA_per_picoF
        const double var_slow_transient_outward_K_I__i_Kto_s = 0; // picoA_per_picoF
        const double var_fast_sodium_current__E_Na = 26.535875647668394 * log((mParameters[3] + 0.1111111111111111 * mParameters[2]) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)); // millivolt
        const double var_fast_sodium_current__i_Na = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_chaste_interface__fast_sodium_current__O_Na * mParameters[6]; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__i_Kr = (-26.535875647668394 * log((mParameters[2] + 0.020408163265306124 * mParameters[3]) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) + var_chaste_interface__cell__V) * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * mParameters[9]; // picoA_per_picoF
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__cell__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * exp(0.013189690992192795 * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_calcium_concentration__Cai * exp(-0.024495140414072337 * var_chaste_interface__cell__V)) * mParameters[11] / ((1.0 + 0.27000000000000002 * exp(-0.024495140414072337 * var_chaste_interface__cell__V)) * (1400.0 * pow(var_chaste_interface__sodium_concentration__Nai, 3) + 681472000000000.0 * var_calcium_concentration__Cai + pow(mParameters[3], 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] + 1728000000000.0 * (1.0 + 0.27777777777777779 * var_calcium_concentration__Cai) * mParameters[1] + 3.6000000000000001 * pow(mParameters[3], 3) * (1.0 + 5.7870370370370368e-13 * pow(var_chaste_interface__sodium_concentration__Nai, 3)))); // picoA_per_picoF
        const double d_dt_chaste_interface_var_calcium_concentration__Cai_converted = 0.001 * (-var_calcium_fluxes__J_serca - 0.032656617993405558 * (-2.0 * var_sodium_calcium_exchange_current__i_NCX + var_calcium_background_current__i_Cab + var_calcium_pump_current__i_pCa) * mParameters[5] + var_calcium_fluxes__J_leak + var_calcium_fluxes__J_xfer) / (1.0 + 65.399999999999991 / pow((0.59999999999999998 + var_calcium_concentration__Cai), 2)); // millimolar / millisecond
        const double var_sodium_potassium_pump_current__i_NaK = 2.4860000000000002 * mParameters[2] / ((1.0 + 13435672565.051065 * pow(1 / var_chaste_interface__sodium_concentration__Nai, 2.3999999999999999)) * (1500.0 + mParameters[2]) * (1.0 + 0.1245 * exp(-0.0037684831406265135 * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[3])) * exp(-0.037684831406265135 * var_chaste_interface__cell__V))); // picoA_per_picoF
        const double d_dt_chaste_interface_var_sodium_concentration__Nai = 0.065313235986811116 * (-var_fast_sodium_current__i_Na - var_sodium_background_current__i_Nab - 3.0 * var_sodium_calcium_exchange_current__i_NCX - 3.0 * var_sodium_potassium_pump_current__i_NaK) * mParameters[5]; // micromolar / millisecond
        const double var_time_independent_K_I__i_K1 = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[2] * mParameters[7] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + mParameters[2])); // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__ass = 1 / (1.0 + exp(-0.64479166666666676 - 0.10416666666666667 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__aKss = (-var_chaste_interface__non_inactivating_steady_state_K_I__aKss + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / (13.17 + 39.299999999999997 * exp(-0.050000000000000003 * var_chaste_interface__cell__V)); // 1 / millisecond
        const double d_dt_chaste_interface_var_slow_transient_outward_K_I__ato_s = (-var_chaste_interface__slow_transient_outward_K_I__ato_s + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / (2.0579999999999998 + 0.49299999999999999 * exp(-0.062899999999999998 * var_chaste_interface__cell__V)); // 1 / millisecond
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__iss = 1 / (1.0 + exp(7.7962962962962958 + 0.18518518518518517 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_slow_transient_outward_K_I__ito_s = (-var_chaste_interface__slow_transient_outward_K_I__ito_s + var_ultra_rapidly_activating_delayed_rectifier_K_I__iss) / (270.0 + 1050.0 / (1.0 + exp(7.9298245614035094 + 0.17543859649122806 * var_chaste_interface__cell__V))); // 1 / millisecond
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur = 0.25 * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur; // picoA_per_picoF
        const double d_dt_chaste_interface_var_potassium_concentration__Ki = 0.065313235986811116 * (-var_cell__i_Stim - var_fast_transient_outward_K_I__i_Kto_f - var_non_inactivating_steady_state_K_I__i_Kss - var_rapid_delayed_rectifier_K_I__i_Kr - var_slow_delayed_rectifier_K_I__i_Ks - var_slow_transient_outward_K_I__i_Kto_s - var_time_independent_K_I__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur + 2.0 * var_sodium_potassium_pump_current__i_NaK) * mParameters[5]; // micromolar / millisecond
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__aur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / (2.0579999999999998 + 0.49299999999999999 * exp(-0.062899999999999998 * var_chaste_interface__cell__V)); // 1 / millisecond
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__iur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur + var_ultra_rapidly_activating_delayed_rectifier_K_I__iss) / (643.0 + 1000.0 / (1.0 + exp(7.7962962962962958 + 0.18518518518518517 * var_chaste_interface__cell__V))); // 1 / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_cell__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_cell__V = -var_L_type_calcium_current__i_CaL - var_calcium_background_current__i_Cab - var_calcium_pump_current__i_pCa - var_cell__i_Stim - var_fast_sodium_current__i_Na - var_fast_transient_outward_K_I__i_Kto_f - var_non_inactivating_steady_state_K_I__i_Kss - var_rapid_delayed_rectifier_K_I__i_Kr - var_slow_delayed_rectifier_K_I__i_Ks - var_slow_transient_outward_K_I__i_Kto_s - var_sodium_background_current__i_Nab - var_sodium_calcium_exchange_current__i_NCX - var_sodium_potassium_pump_current__i_NaK - var_time_independent_K_I__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur - 2.0 * (40.0 + var_chaste_interface__cell__V) * var_calcium_concentration__Cai / ((1.0 + exp(5.9871794871794881 - 0.12820512820512822 * var_chaste_interface__cell__V)) * (10.0 + var_calcium_concentration__Cai)); // millivolt / millisecond
        }
        
        mEvalF[0] = d_dt_chaste_interface_var_cell__V;
        mEvalF[1] = d_dt_chaste_interface_var_calcium_concentration__Cai_converted;
        mEvalF[2] = d_dt_chaste_interface_var_calcium_concentration__Cass;
        mEvalF[3] = d_dt_chaste_interface_var_calcium_concentration__CaJSR;
        mEvalF[4] = d_dt_chaste_interface_var_calcium_concentration__CaNSR;
        mEvalF[5] = d_dt_chaste_interface_var_calcium_fluxes__P_RyR;
        mEvalF[6] = d_dt_chaste_interface_var_calcium_fluxes__CaMKt;
        mEvalF[7] = d_dt_chaste_interface_var_ryanodine_receptors__P_O1;
        mEvalF[8] = d_dt_chaste_interface_var_ryanodine_receptors__P_O2;
        mEvalF[9] = d_dt_chaste_interface_var_ryanodine_receptors__P_C2;
        mEvalF[10] = d_dt_chaste_interface_var_L_type_calcium_current__O;
        mEvalF[11] = d_dt_chaste_interface_var_L_type_calcium_current__I;
        mEvalF[12] = d_dt_chaste_interface_var_L_type_calcium_current__y_gate;
        mEvalF[13] = d_dt_chaste_interface_var_sodium_concentration__Nai;
        mEvalF[14] = d_dt_chaste_interface_var_fast_sodium_current__O_Na;
        mEvalF[15] = d_dt_chaste_interface_var_fast_sodium_current__C_Na1;
        mEvalF[16] = d_dt_chaste_interface_var_fast_sodium_current__C_Na2;
        mEvalF[17] = d_dt_chaste_interface_var_fast_sodium_current__I1_Na;
        mEvalF[18] = d_dt_chaste_interface_var_fast_sodium_current__I2_Na;
        mEvalF[19] = d_dt_chaste_interface_var_fast_sodium_current__IF_Na;
        mEvalF[20] = d_dt_chaste_interface_var_fast_sodium_current__IC_Na2;
        mEvalF[21] = d_dt_chaste_interface_var_fast_sodium_current__IC_Na3;
        mEvalF[22] = d_dt_chaste_interface_var_potassium_concentration__Ki;
        mEvalF[23] = d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__aur;
        mEvalF[24] = d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__iur;
        mEvalF[25] = d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__aKss;
        mEvalF[26] = d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__iKss;
        mEvalF[27] = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__O_K;
        mEvalF[28] = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K1;
        mEvalF[29] = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K2;
        mEvalF[30] = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__I_K;
        mEvalF[31] = d_dt_chaste_interface_var_slow_delayed_rectifier_K_I__nKs;
        mEvalF[32] = d_dt_chaste_interface_var_fast_transient_outward_K_I__ato_f;
        mEvalF[33] = d_dt_chaste_interface_var_fast_transient_outward_K_I__ito_f;
        mEvalF[34] = d_dt_chaste_interface_var_slow_transient_outward_K_I__ato_s;
        mEvalF[35] = d_dt_chaste_interface_var_slow_transient_outward_K_I__ito_s;

        
        mPartialF[0] = EvaluatePartialDerivative0(var_chaste_interface__environment__time, rY, delta);
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__environment__time, rY, delta);
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__environment__time, rY, delta);
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__environment__time, rY, delta);
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__environment__time, rY, delta);
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__environment__time, rY, delta);
        mPartialF[6] = EvaluatePartialDerivative6(var_chaste_interface__environment__time, rY, delta);
        mPartialF[7] = EvaluatePartialDerivative7(var_chaste_interface__environment__time, rY, delta);
        mPartialF[8] = EvaluatePartialDerivative8(var_chaste_interface__environment__time, rY, delta);
        mPartialF[9] = EvaluatePartialDerivative9(var_chaste_interface__environment__time, rY, delta);
        mPartialF[10] = EvaluatePartialDerivative10(var_chaste_interface__environment__time, rY, delta);
        mPartialF[11] = EvaluatePartialDerivative11(var_chaste_interface__environment__time, rY, delta);
        mPartialF[12] = EvaluatePartialDerivative12(var_chaste_interface__environment__time, rY, delta);
        mPartialF[13] = EvaluatePartialDerivative13(var_chaste_interface__environment__time, rY, delta);
        mPartialF[14] = EvaluatePartialDerivative14(var_chaste_interface__environment__time, rY, delta);
        mPartialF[15] = EvaluatePartialDerivative15(var_chaste_interface__environment__time, rY, delta);
        mPartialF[16] = EvaluatePartialDerivative16(var_chaste_interface__environment__time, rY, delta);
        mPartialF[17] = EvaluatePartialDerivative17(var_chaste_interface__environment__time, rY, delta);
        mPartialF[18] = EvaluatePartialDerivative18(var_chaste_interface__environment__time, rY, delta);
        mPartialF[19] = EvaluatePartialDerivative19(var_chaste_interface__environment__time, rY, delta);
        mPartialF[20] = EvaluatePartialDerivative20(var_chaste_interface__environment__time, rY, delta);
        mPartialF[21] = EvaluatePartialDerivative21(var_chaste_interface__environment__time, rY, delta);
        mPartialF[22] = EvaluatePartialDerivative22(var_chaste_interface__environment__time, rY, delta);
        mPartialF[23] = EvaluatePartialDerivative23(var_chaste_interface__environment__time, rY, delta);
        mPartialF[24] = EvaluatePartialDerivative24(var_chaste_interface__environment__time, rY, delta);
        mPartialF[25] = EvaluatePartialDerivative25(var_chaste_interface__environment__time, rY, delta);
        mPartialF[26] = EvaluatePartialDerivative26(var_chaste_interface__environment__time, rY, delta);
        mPartialF[27] = EvaluatePartialDerivative27(var_chaste_interface__environment__time, rY, delta);
        mPartialF[28] = EvaluatePartialDerivative28(var_chaste_interface__environment__time, rY, delta);
        mPartialF[29] = EvaluatePartialDerivative29(var_chaste_interface__environment__time, rY, delta);
        mPartialF[30] = EvaluatePartialDerivative30(var_chaste_interface__environment__time, rY, delta);
        mPartialF[31] = EvaluatePartialDerivative31(var_chaste_interface__environment__time, rY, delta);
        mPartialF[32] = EvaluatePartialDerivative32(var_chaste_interface__environment__time, rY, delta);
        mPartialF[33] = EvaluatePartialDerivative33(var_chaste_interface__environment__time, rY, delta);
        mPartialF[34] = EvaluatePartialDerivative34(var_chaste_interface__environment__time, rY, delta);
        mPartialF[35] = EvaluatePartialDerivative35(var_chaste_interface__environment__time, rY, delta);
        for (unsigned var=0; var<size; var++)
        {
            if (var == 0) continue;
            if (fabs(mPartialF[var]) < delta)
            {
                rY[var] = mYInit[var] + 0.5*mDt*mEvalF[var];
            }
            else
            {
                rY[var] = mYInit[var] + (mEvalF[var]/mPartialF[var])*(exp(mPartialF[var]*0.5*mDt)-1.0);
            }
            
        }
        
        
        y_save = rY[1];
        rY[1] = mYInit[1];
        mEvalF[1] = EvaluateYDerivative1(var_chaste_interface__environment__time, rY);
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__environment__time, rY, delta);
        rY[1] = y_save;
        
        
        y_save = rY[2];
        rY[2] = mYInit[2];
        mEvalF[2] = EvaluateYDerivative2(var_chaste_interface__environment__time, rY);
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__environment__time, rY, delta);
        rY[2] = y_save;
        
        
        y_save = rY[3];
        rY[3] = mYInit[3];
        mEvalF[3] = EvaluateYDerivative3(var_chaste_interface__environment__time, rY);
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__environment__time, rY, delta);
        rY[3] = y_save;
        
        
        y_save = rY[4];
        rY[4] = mYInit[4];
        mEvalF[4] = EvaluateYDerivative4(var_chaste_interface__environment__time, rY);
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__environment__time, rY, delta);
        rY[4] = y_save;
        
        
        y_save = rY[5];
        rY[5] = mYInit[5];
        mEvalF[5] = EvaluateYDerivative5(var_chaste_interface__environment__time, rY);
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__environment__time, rY, delta);
        rY[5] = y_save;
        
        
        y_save = rY[6];
        rY[6] = mYInit[6];
        mEvalF[6] = EvaluateYDerivative6(var_chaste_interface__environment__time, rY);
        mPartialF[6] = EvaluatePartialDerivative6(var_chaste_interface__environment__time, rY, delta);
        rY[6] = y_save;
        
        
        y_save = rY[7];
        rY[7] = mYInit[7];
        mEvalF[7] = EvaluateYDerivative7(var_chaste_interface__environment__time, rY);
        mPartialF[7] = EvaluatePartialDerivative7(var_chaste_interface__environment__time, rY, delta);
        rY[7] = y_save;
        
        
        y_save = rY[8];
        rY[8] = mYInit[8];
        mEvalF[8] = EvaluateYDerivative8(var_chaste_interface__environment__time, rY);
        mPartialF[8] = EvaluatePartialDerivative8(var_chaste_interface__environment__time, rY, delta);
        rY[8] = y_save;
        
        
        y_save = rY[9];
        rY[9] = mYInit[9];
        mEvalF[9] = EvaluateYDerivative9(var_chaste_interface__environment__time, rY);
        mPartialF[9] = EvaluatePartialDerivative9(var_chaste_interface__environment__time, rY, delta);
        rY[9] = y_save;
        
        
        y_save = rY[10];
        rY[10] = mYInit[10];
        mEvalF[10] = EvaluateYDerivative10(var_chaste_interface__environment__time, rY);
        mPartialF[10] = EvaluatePartialDerivative10(var_chaste_interface__environment__time, rY, delta);
        rY[10] = y_save;
        
        
        y_save = rY[11];
        rY[11] = mYInit[11];
        mEvalF[11] = EvaluateYDerivative11(var_chaste_interface__environment__time, rY);
        mPartialF[11] = EvaluatePartialDerivative11(var_chaste_interface__environment__time, rY, delta);
        rY[11] = y_save;
        
        
        y_save = rY[12];
        rY[12] = mYInit[12];
        mEvalF[12] = EvaluateYDerivative12(var_chaste_interface__environment__time, rY);
        mPartialF[12] = EvaluatePartialDerivative12(var_chaste_interface__environment__time, rY, delta);
        rY[12] = y_save;
        
        
        y_save = rY[13];
        rY[13] = mYInit[13];
        mEvalF[13] = EvaluateYDerivative13(var_chaste_interface__environment__time, rY);
        mPartialF[13] = EvaluatePartialDerivative13(var_chaste_interface__environment__time, rY, delta);
        rY[13] = y_save;
        
        
        y_save = rY[14];
        rY[14] = mYInit[14];
        mEvalF[14] = EvaluateYDerivative14(var_chaste_interface__environment__time, rY);
        mPartialF[14] = EvaluatePartialDerivative14(var_chaste_interface__environment__time, rY, delta);
        rY[14] = y_save;
        
        
        y_save = rY[15];
        rY[15] = mYInit[15];
        mEvalF[15] = EvaluateYDerivative15(var_chaste_interface__environment__time, rY);
        mPartialF[15] = EvaluatePartialDerivative15(var_chaste_interface__environment__time, rY, delta);
        rY[15] = y_save;
        
        
        y_save = rY[16];
        rY[16] = mYInit[16];
        mEvalF[16] = EvaluateYDerivative16(var_chaste_interface__environment__time, rY);
        mPartialF[16] = EvaluatePartialDerivative16(var_chaste_interface__environment__time, rY, delta);
        rY[16] = y_save;
        
        
        y_save = rY[17];
        rY[17] = mYInit[17];
        mEvalF[17] = EvaluateYDerivative17(var_chaste_interface__environment__time, rY);
        mPartialF[17] = EvaluatePartialDerivative17(var_chaste_interface__environment__time, rY, delta);
        rY[17] = y_save;
        
        
        y_save = rY[18];
        rY[18] = mYInit[18];
        mEvalF[18] = EvaluateYDerivative18(var_chaste_interface__environment__time, rY);
        mPartialF[18] = EvaluatePartialDerivative18(var_chaste_interface__environment__time, rY, delta);
        rY[18] = y_save;
        
        
        y_save = rY[19];
        rY[19] = mYInit[19];
        mEvalF[19] = EvaluateYDerivative19(var_chaste_interface__environment__time, rY);
        mPartialF[19] = EvaluatePartialDerivative19(var_chaste_interface__environment__time, rY, delta);
        rY[19] = y_save;
        
        
        y_save = rY[20];
        rY[20] = mYInit[20];
        mEvalF[20] = EvaluateYDerivative20(var_chaste_interface__environment__time, rY);
        mPartialF[20] = EvaluatePartialDerivative20(var_chaste_interface__environment__time, rY, delta);
        rY[20] = y_save;
        
        
        y_save = rY[21];
        rY[21] = mYInit[21];
        mEvalF[21] = EvaluateYDerivative21(var_chaste_interface__environment__time, rY);
        mPartialF[21] = EvaluatePartialDerivative21(var_chaste_interface__environment__time, rY, delta);
        rY[21] = y_save;
        
        
        y_save = rY[22];
        rY[22] = mYInit[22];
        mEvalF[22] = EvaluateYDerivative22(var_chaste_interface__environment__time, rY);
        mPartialF[22] = EvaluatePartialDerivative22(var_chaste_interface__environment__time, rY, delta);
        rY[22] = y_save;
        
        
        y_save = rY[23];
        rY[23] = mYInit[23];
        mEvalF[23] = EvaluateYDerivative23(var_chaste_interface__environment__time, rY);
        mPartialF[23] = EvaluatePartialDerivative23(var_chaste_interface__environment__time, rY, delta);
        rY[23] = y_save;
        
        
        y_save = rY[24];
        rY[24] = mYInit[24];
        mEvalF[24] = EvaluateYDerivative24(var_chaste_interface__environment__time, rY);
        mPartialF[24] = EvaluatePartialDerivative24(var_chaste_interface__environment__time, rY, delta);
        rY[24] = y_save;
        
        
        y_save = rY[25];
        rY[25] = mYInit[25];
        mEvalF[25] = EvaluateYDerivative25(var_chaste_interface__environment__time, rY);
        mPartialF[25] = EvaluatePartialDerivative25(var_chaste_interface__environment__time, rY, delta);
        rY[25] = y_save;
        
        
        y_save = rY[26];
        rY[26] = mYInit[26];
        mEvalF[26] = EvaluateYDerivative26(var_chaste_interface__environment__time, rY);
        mPartialF[26] = EvaluatePartialDerivative26(var_chaste_interface__environment__time, rY, delta);
        rY[26] = y_save;
        
        
        y_save = rY[27];
        rY[27] = mYInit[27];
        mEvalF[27] = EvaluateYDerivative27(var_chaste_interface__environment__time, rY);
        mPartialF[27] = EvaluatePartialDerivative27(var_chaste_interface__environment__time, rY, delta);
        rY[27] = y_save;
        
        
        y_save = rY[28];
        rY[28] = mYInit[28];
        mEvalF[28] = EvaluateYDerivative28(var_chaste_interface__environment__time, rY);
        mPartialF[28] = EvaluatePartialDerivative28(var_chaste_interface__environment__time, rY, delta);
        rY[28] = y_save;
        
        
        y_save = rY[29];
        rY[29] = mYInit[29];
        mEvalF[29] = EvaluateYDerivative29(var_chaste_interface__environment__time, rY);
        mPartialF[29] = EvaluatePartialDerivative29(var_chaste_interface__environment__time, rY, delta);
        rY[29] = y_save;
        
        
        y_save = rY[30];
        rY[30] = mYInit[30];
        mEvalF[30] = EvaluateYDerivative30(var_chaste_interface__environment__time, rY);
        mPartialF[30] = EvaluatePartialDerivative30(var_chaste_interface__environment__time, rY, delta);
        rY[30] = y_save;
        
        
        y_save = rY[31];
        rY[31] = mYInit[31];
        mEvalF[31] = EvaluateYDerivative31(var_chaste_interface__environment__time, rY);
        mPartialF[31] = EvaluatePartialDerivative31(var_chaste_interface__environment__time, rY, delta);
        rY[31] = y_save;
        
        
        y_save = rY[32];
        rY[32] = mYInit[32];
        mEvalF[32] = EvaluateYDerivative32(var_chaste_interface__environment__time, rY);
        mPartialF[32] = EvaluatePartialDerivative32(var_chaste_interface__environment__time, rY, delta);
        rY[32] = y_save;
        
        
        y_save = rY[33];
        rY[33] = mYInit[33];
        mEvalF[33] = EvaluateYDerivative33(var_chaste_interface__environment__time, rY);
        mPartialF[33] = EvaluatePartialDerivative33(var_chaste_interface__environment__time, rY, delta);
        rY[33] = y_save;
        
        
        y_save = rY[34];
        rY[34] = mYInit[34];
        mEvalF[34] = EvaluateYDerivative34(var_chaste_interface__environment__time, rY);
        mPartialF[34] = EvaluatePartialDerivative34(var_chaste_interface__environment__time, rY, delta);
        rY[34] = y_save;
        
        
        y_save = rY[35];
        rY[35] = mYInit[35];
        mEvalF[35] = EvaluateYDerivative35(var_chaste_interface__environment__time, rY);
        mPartialF[35] = EvaluatePartialDerivative35(var_chaste_interface__environment__time, rY, delta);
        rY[35] = y_save;
                
        for (unsigned var=0; var<size; var++)
        {
            if (var == 0) continue;
            if (fabs(mPartialF[var]) < delta)
            {
                rY[var] = mYInit[var] + mDt*mEvalF[var];
            }
            else
            {
                rY[var] = mYInit[var] + (mEvalF[var]/mPartialF[var])*(exp(mPartialF[var]*mDt)-1.0);
            }
            
        }


    }
   
    
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        double d_dt_chaste_interface_var_cell__V;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = rY[13];
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__potassium_concentration__Ki = rY[22];
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = rY[23];
        // Units: dimensionless; Initial value: 0.00346258606821817
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = rY[24];
        // Units: dimensionless; Initial value: 0.955684946168062
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
        // Units: dimensionless; Initial value: 0.00336735013094628
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = rY[32];
        // Units: dimensionless; Initial value: 0.0142335908879204
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = rY[33];
        // Units: dimensionless; Initial value: 0.996989882138174
        
        
        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_pump_current__i_pCa = 0.095500000000000002 * pow(var_calcium_concentration__Cai, 2) / (0.083232249999999994 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_calcium_background_current__i_Cab = 0.00069999999999999999 * var_chaste_interface__cell__V - 0.0092875564766839377 * log(mParameters[1] / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL = ((fabs(0.075369662812530269 * var_chaste_interface__cell__V) > 1.0000000000000001e-5) ? (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((1.0 - exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * mParameters[5])) : (-3.062166450310111e-7 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-1.0000000000000001e-5)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-1.0000000000000001e-5)) * mParameters[5]))); // picoA_per_picoF
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // picoA_per_picoF
        const double var_fast_transient_outward_K_I__E_K = 26.535875647668394 * log(mParameters[2] / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_K_I__i_Kto_f = 0.53469999999999995 * pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__fast_transient_outward_K_I__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * mParameters[8] * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // picoA_per_picoF
        const double var_slow_delayed_rectifier_K_I__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[10]; // picoA_per_picoF
        const double var_slow_transient_outward_K_I__i_Kto_s = 0; // picoA_per_picoF
        const double var_fast_sodium_current__E_Na = 26.535875647668394 * log((mParameters[3] + 0.1111111111111111 * mParameters[2]) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)); // millivolt
        const double var_fast_sodium_current__i_Na = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_chaste_interface__fast_sodium_current__O_Na * mParameters[6]; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__i_Kr = (-26.535875647668394 * log((mParameters[2] + 0.020408163265306124 * mParameters[3]) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) + var_chaste_interface__cell__V) * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * mParameters[9]; // picoA_per_picoF
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__cell__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * exp(0.013189690992192795 * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_calcium_concentration__Cai * exp(-0.024495140414072337 * var_chaste_interface__cell__V)) * mParameters[11] / ((1.0 + 0.27000000000000002 * exp(-0.024495140414072337 * var_chaste_interface__cell__V)) * (1400.0 * pow(var_chaste_interface__sodium_concentration__Nai, 3) + 681472000000000.0 * var_calcium_concentration__Cai + pow(mParameters[3], 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] + 1728000000000.0 * (1.0 + 0.27777777777777779 * var_calcium_concentration__Cai) * mParameters[1] + 3.6000000000000001 * pow(mParameters[3], 3) * (1.0 + 5.7870370370370368e-13 * pow(var_chaste_interface__sodium_concentration__Nai, 3)))); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = 2.4860000000000002 * mParameters[2] / ((1.0 + 13435672565.051065 * pow(1 / var_chaste_interface__sodium_concentration__Nai, 2.3999999999999999)) * (1500.0 + mParameters[2]) * (1.0 + 0.1245 * exp(-0.0037684831406265135 * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[3])) * exp(-0.037684831406265135 * var_chaste_interface__cell__V))); // picoA_per_picoF
        const double var_time_independent_K_I__i_K1 = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[2] * mParameters[7] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + mParameters[2])); // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur = 0.25 * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur; // picoA_per_picoF
        d_dt_chaste_interface_var_cell__V = -var_L_type_calcium_current__i_CaL - var_calcium_background_current__i_Cab - var_calcium_pump_current__i_pCa - var_cell__i_Stim - var_fast_sodium_current__i_Na - var_fast_transient_outward_K_I__i_Kto_f - var_non_inactivating_steady_state_K_I__i_Kss - var_rapid_delayed_rectifier_K_I__i_Kr - var_slow_delayed_rectifier_K_I__i_Ks - var_slow_transient_outward_K_I__i_Kto_s - var_sodium_background_current__i_Nab - var_sodium_calcium_exchange_current__i_NCX - var_sodium_potassium_pump_current__i_NaK - var_time_independent_K_I__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur - 2.0 * (40.0 + var_chaste_interface__cell__V) * var_calcium_concentration__Cai / ((1.0 + exp(5.9871794871794881 - 0.12820512820512822 * var_chaste_interface__cell__V)) * (10.0 + var_calcium_concentration__Cai)); // millivolt / millisecond

        return d_dt_chaste_interface_var_cell__V;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
            // Units: millimolar; Initial value: 9.499150681398009e-05
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.0954184301907784
            double var_chaste_interface__L_type_calcium_current__O = rY[10];
            // Units: dimensionless; Initial value: 1.23713515513533e-06
            double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
            // Units: dimensionless; Initial value: 0.845044436980163
            double var_chaste_interface__sodium_concentration__Nai = rY[13];
            // Units: micromolar; Initial value: 12364.7482121793
            double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
            // Units: dimensionless; Initial value: 1.46826771436314e-06
            double var_chaste_interface__potassium_concentration__Ki = rY[22];
            // Units: micromolar; Initial value: 115599.50642567
            double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = rY[23];
            // Units: dimensionless; Initial value: 0.00346258606821817
            double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = rY[24];
            // Units: dimensionless; Initial value: 0.955684946168062
            double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
            // Units: dimensionless; Initial value: 0.287585636847048
            double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = rY[26];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
            // Units: dimensionless; Initial value: 0.0131742086125972
            double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
            // Units: dimensionless; Initial value: 0.00336735013094628
            double var_chaste_interface__fast_transient_outward_K_I__ato_f = rY[32];
            // Units: dimensionless; Initial value: 0.0142335908879204
            double var_chaste_interface__fast_transient_outward_K_I__ito_f = rY[33];
            // Units: dimensionless; Initial value: 0.996989882138174
            
            const double var_x0 = -var_chaste_interface__calcium_concentration__Cass;
            const double var_x1 = 0.075369662812530269 * var_chaste_interface__cell__V;
            const double var_x2 = exp(-var_x1);
            const double var_x3 = var_x2 * mParameters[1];
            const double var_x4 = var_x0 + var_x3;
            const double var_x5 = 1.0 - var_x2;
            const double var_x6 = 1 / var_x5;
            const double var_x7 = 1 / mParameters[5];
            const double var_x8 = var_x7 * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate;
            const double var_x9 = var_x8 * var_chaste_interface__L_type_calcium_current__O;
            const double var_x10 = var_x6 * var_x9;
            const double var_x11 = 0.0023079445283571576 * var_x10;
            const double var_x12 = var_x11 * var_x4;
            const double var_x13 = var_x4 * var_chaste_interface__cell__V;
            const double var_x14 = fabs(var_x1) > 1.0000000000000001e-5;
            const double var_x15 = ((var_x14) ? (-var_x12 + 0.00017394900089230317 * var_x10 * var_x3 * var_chaste_interface__cell__V + 0.00017394900089230317 * var_x13 * var_x2 * var_x9 / pow(var_x5, 2)) : (0));
            const double var_x16 = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * mParameters[10];
            const double var_x17 = var_chaste_interface__fast_sodium_current__O_Na * mParameters[6];
            const double var_x18 = var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * mParameters[9];
            const double var_x19 = var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur;
            const double var_x20 = pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3);
            const double var_x21 = 0.53469999999999995 * var_x20;
            const double var_x22 = mParameters[8] * var_chaste_interface__non_inactivating_steady_state_K_I__iKss;
            const double var_x23 = var_x22 * var_chaste_interface__non_inactivating_steady_state_K_I__aKss;
            const double var_x24 = exp(5.9871794871794881 - 0.12820512820512822 * var_chaste_interface__cell__V);
            const double var_x25 = 1.0 + var_x24;
            const double var_x26 = 1 / var_x25;
            const double var_x27 = var_x26 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x28 = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x29 = 1 / (10.0 + var_x28);
            const double var_x30 = 2000.0 * var_x29;
            const double var_x31 = 1 / var_chaste_interface__potassium_concentration__Ki;
            const double var_x32 = var_x31 * mParameters[2];
            const double var_x33 = log(var_x32);
            const double var_x34 = exp(0.089599999999999999 * var_chaste_interface__cell__V - 2.3776144580310881 * var_x33);
            const double var_x35 = 1.0 + var_x34;
            const double var_x36 = mParameters[7] / (210.0 + mParameters[2]);
            const double var_x37 = var_x36 / var_x35;
            const double var_x38 = var_x37 * mParameters[2];
            const double var_x39 = exp(0.013189690992192795 * var_chaste_interface__cell__V);
            const double var_x40 = pow(var_chaste_interface__sodium_concentration__Nai, 3);
            const double var_x41 = var_x40 * mParameters[1];
            const double var_x42 = var_x39 * var_x41;
            const double var_x43 = exp(-0.024495140414072337 * var_chaste_interface__cell__V);
            const double var_x44 = pow(mParameters[3], 3);
            const double var_x45 = var_x44 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x46 = 1.0 + 0.27000000000000002 * var_x43;
            const double var_x47 = 1 / var_x46;
            const double var_x48 = (1.0 + 277.77777777777777 * var_chaste_interface__calcium_concentration__Cai_converted) * mParameters[1];
            const double var_x49 = var_x44 * (1.0 + 5.7870370370370368e-13 * var_x40);
            const double var_x50 = var_x28 * var_x44;
            const double var_x51 = mParameters[11] / (var_x41 + var_x50 + 1400.0 * var_x40 + 1728000000000.0 * var_x48 + 3.6000000000000001 * var_x49 + 6.81472e+17 * var_chaste_interface__calcium_concentration__Cai_converted);
            const double var_x52 = var_x47 * var_x51;
            const double var_x53 = var_x52 * (0.013189690992192795 * var_x42 + 24.495140414072335 * var_x43 * var_x45);
            const double var_x54 = 1 / var_chaste_interface__sodium_concentration__Nai;
            const double var_x55 = pow(var_x54, 2.3999999999999999);
            const double var_x56 = exp(-0.0037684831406265135 * var_chaste_interface__cell__V);
            const double var_x57 = exp(1.4858841010401188e-5 * mParameters[3]);
            const double var_x58 = exp(-0.037684831406265135 * var_chaste_interface__cell__V);
            const double var_x59 = 1.0 + 0.1245 * var_x56 + 0.036499999999999998 * var_x58 * (-0.14285714285714285 + 0.14285714285714285 * var_x57);
            const double var_x60 = mParameters[2] / (1500.0 + mParameters[2]);
            const double var_x61 = var_x60 * (0.00046917615100800094 * var_x56 + 0.037684831406265135 * var_x58 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x57)) / (pow(var_x59, 2) * (1.0 + 13435672565.051065 * var_x55));
            const double var_x62 = var_x42 - var_x43 * var_x50;
            const double var_x63 = var_x43 * var_x51 * var_x62 / pow(var_x46, 2);
            const double var_x64 = 40.0 + var_chaste_interface__cell__V;
            const double var_x65 = 26.535875647668394 * var_x33;
            const double var_x66 = -var_x65 + var_chaste_interface__cell__V;
            const double var_x67 = var_x34 * var_x36 * var_x66 / pow(var_x35, 2);
            const double var_x68 = var_x67 * mParameters[2];
            
            partialF = -0.0033 - var_x15 - var_x16 - var_x17 - var_x18 - var_x23 - var_x38 + 0.089599999999999999 * var_x68 - 0.25 * var_x19 - 1.0 * var_x53 - 2.4860000000000002 * var_x61 - 0.0066136879117995317 * var_x63 - var_x21 * var_chaste_interface__fast_transient_outward_K_I__ito_f - var_x27 * var_x30 - 256.41025641025641 * var_x24 * var_x29 * var_x64 * var_chaste_interface__calcium_concentration__Cai_converted / pow(var_x25, 2);
        }
        else
        {
            const double y_save = rY[0];
            rY[0] += delta;
            const double temp = EvaluateYDerivative0(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[0])/delta;
            rY[0] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaNSR = rY[4];
        // Units: micromolar; Initial value: 404.825013216286
        double var_chaste_interface__calcium_fluxes__CaMKt = rY[6];
        // Units: dimensionless; Initial value: 0.729027738385079
        double var_chaste_interface__sodium_concentration__Nai = rY[13];
        // Units: micromolar; Initial value: 12364.7482121793
        
        
        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__calcium_fluxes__CaMKt) / (1.0 + 0.69999999999999996 / var_chaste_interface__calcium_concentration__Cass); // dimensionless
        const double var_calcium_fluxes__J_xfer = 0.125 * var_chaste_interface__calcium_concentration__Cass - 0.125 * var_calcium_concentration__Cai; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_serca = pow(var_calcium_concentration__Cai, 2) * (0.50590000000000002 + 1.5167893800000001 * pow((var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt), 2.5830000000000002) / (1.7590641847756086 + pow((var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt), 2.5830000000000002))) / (0.16974399999999998 + pow(var_calcium_concentration__Cai, 2)); // micromolar_per_millisecond
        const double var_calcium_pump_current__i_pCa = 0.095500000000000002 * pow(var_calcium_concentration__Cai, 2) / (0.083232249999999994 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_calcium_background_current__i_Cab = 0.00069999999999999999 * var_chaste_interface__cell__V - 0.0092875564766839377 * log(mParameters[1] / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_calcium_fluxes__J_leak = ((var_chaste_interface__environment__time < 3333330000000.0005) ? (3.0000000000000001e-5 * var_chaste_interface__calcium_concentration__CaNSR - 3.0000000000000001e-5 * var_calcium_concentration__Cai) : (0.10000000000000001 * var_chaste_interface__calcium_concentration__CaNSR - 0.10000000000000001 * var_calcium_concentration__Cai)); // micromolar_per_millisecond
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * exp(0.013189690992192795 * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_calcium_concentration__Cai * exp(-0.024495140414072337 * var_chaste_interface__cell__V)) * mParameters[11] / ((1.0 + 0.27000000000000002 * exp(-0.024495140414072337 * var_chaste_interface__cell__V)) * (1400.0 * pow(var_chaste_interface__sodium_concentration__Nai, 3) + 681472000000000.0 * var_calcium_concentration__Cai + pow(mParameters[3], 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] + 1728000000000.0 * (1.0 + 0.27777777777777779 * var_calcium_concentration__Cai) * mParameters[1] + 3.6000000000000001 * pow(mParameters[3], 3) * (1.0 + 5.7870370370370368e-13 * pow(var_chaste_interface__sodium_concentration__Nai, 3)))); // picoA_per_picoF
        const double d_dt_chaste_interface_var_calcium_concentration__Cai_converted = 0.001 * (-var_calcium_fluxes__J_serca - 0.032656617993405558 * (-2.0 * var_sodium_calcium_exchange_current__i_NCX + var_calcium_background_current__i_Cab + var_calcium_pump_current__i_pCa) * mParameters[5] + var_calcium_fluxes__J_leak + var_calcium_fluxes__J_xfer) / (1.0 + 65.399999999999991 / pow((0.59999999999999998 + var_calcium_concentration__Cai), 2)); // millimolar / millisecond

        return d_dt_chaste_interface_var_calcium_concentration__Cai_converted;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
            // Units: millimolar; Initial value: 9.499150681398009e-05
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.0954184301907784
            double var_chaste_interface__calcium_concentration__CaNSR = rY[4];
            // Units: micromolar; Initial value: 404.825013216286
            double var_chaste_interface__calcium_fluxes__CaMKt = rY[6];
            // Units: dimensionless; Initial value: 0.729027738385079
            double var_chaste_interface__sodium_concentration__Nai = rY[13];
            // Units: micromolar; Initial value: 12364.7482121793
            
            const double var_x28 = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x39 = exp(0.013189690992192795 * var_chaste_interface__cell__V);
            const double var_x40 = pow(var_chaste_interface__sodium_concentration__Nai, 3);
            const double var_x41 = var_x40 * mParameters[1];
            const double var_x42 = var_x39 * var_x41;
            const double var_x43 = exp(-0.024495140414072337 * var_chaste_interface__cell__V);
            const double var_x44 = pow(mParameters[3], 3);
            const double var_x45 = var_x44 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x46 = 1.0 + 0.27000000000000002 * var_x43;
            const double var_x47 = 1 / var_x46;
            const double var_x48 = (1.0 + 277.77777777777777 * var_chaste_interface__calcium_concentration__Cai_converted) * mParameters[1];
            const double var_x49 = var_x44 * (1.0 + 5.7870370370370368e-13 * var_x40);
            const double var_x50 = var_x28 * var_x44;
            const double var_x51 = mParameters[11] / (var_x41 + var_x50 + 1400.0 * var_x40 + 1728000000000.0 * var_x48 + 3.6000000000000001 * var_x49 + 6.81472e+17 * var_chaste_interface__calcium_concentration__Cai_converted);
            const double var_x52 = var_x47 * var_x51;
            const double var_x62 = var_x42 - var_x43 * var_x50;
            const double var_x69 = 1 / var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x70 = pow(var_chaste_interface__calcium_concentration__Cai_converted, 2);
            const double var_x71 = pow(var_chaste_interface__calcium_concentration__Cai_converted, 3);
            const double var_x72 = var_x71 / pow((8.3232249999999994e-8 + var_x70), 2);
            const double var_x73 = 1000000.0 * var_x70;
            const double var_x74 = 1 / (0.083232249999999994 + var_x73);
            const double var_x75 = var_x74 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x76 = 1000.0 * var_x44;
            const double var_x77 = var_x43 * var_x52;
            const double var_x78 = -6.81472e+17 - var_x76 - 480000000000000.0 * mParameters[1];
            const double var_x79 = var_x47 * var_x62 * mParameters[11] / pow((2.0543764087152516e-15 * var_x40 + 5.282682193839219e-18 * var_x49 + 2.535687453042825e-6 * var_x48 + 1.4674117205108941e-18 * var_x41 + 1.4674117205108941e-15 * var_x45 + var_chaste_interface__calcium_concentration__Cai_converted), 2);
            const double var_x119 = 0.00059999999999999995 + var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x120 = 1.0 + 6.5400000000000004e-5 / pow(var_x119, 2);
            const double var_x121 = 1 / var_x120;
            const double var_x122 = 0.001 * var_x121;
            const double var_x124 = 1.4063880539705308e-37 * var_x79;
            const double var_x125 = var_x44 * var_x77;
            const double var_x126 = 1.0 - var_chaste_interface__calcium_fluxes__CaMKt;
            const double var_x127 = 1.0 + 0.69999999999999996 / var_chaste_interface__calcium_concentration__Cass;
            const double var_x128 = 1 / var_x127;
            const double var_x129 = 0.050000000000000003 * var_x128;
            const double var_x130 = var_x126 * var_x129 + var_chaste_interface__calcium_fluxes__CaMKt;
            const double var_x131 = pow(var_x130, 2.5830000000000002);
            const double var_x132 = 1 / (1.7590641847756086 + var_x131);
            const double var_x133 = 1.5167893800000001 * var_x132;
            const double var_x134 = 0.50590000000000002 + var_x131 * var_x133;
            const double var_x135 = var_x134 * var_x71 / pow((1.6974399999999999e-7 + var_x70), 2);
            const double var_x136 = 1 / (0.16974399999999998 + var_x73);
            const double var_x137 = var_x134 * var_x136;
            const double var_x138 = var_x137 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x139 = var_chaste_interface__environment__time < 3333330000000.0005;
            const double var_x140 = ((var_x139) ? (-0.029999999999999999) : (-100.0));
            
            partialF = var_x122 * (-125.0 + var_x140 + 2.0 * var_x135 - 2000000.0 * var_x138 + (0.0062374140367404624 * var_x72 - 6237.4140367404616 * var_x75 - 65.313235986811122 * var_x125 - 0.00030330018395124703 * var_x69 + var_x124 * var_x78) * mParameters[5]) + 1.3080000000000001e-7 * (0.125 * var_chaste_interface__calcium_concentration__Cass - 125.0 * var_chaste_interface__calcium_concentration__Cai_converted - var_x137 * var_x73 - 0.032656617993405558 * (0.00069999999999999999 * var_chaste_interface__cell__V - 0.0092875564766839377 * log(0.001 * var_x69 * mParameters[1]) + 95500.0 * var_x70 * var_x74 - 2.0 * var_x52 * var_x62) * mParameters[5] + ((var_x139) ? (3.0000000000000001e-5 * var_chaste_interface__calcium_concentration__CaNSR - 0.029999999999999999 * var_chaste_interface__calcium_concentration__Cai_converted) : (0.10000000000000001 * var_chaste_interface__calcium_concentration__CaNSR - 100.0 * var_chaste_interface__calcium_concentration__Cai_converted))) / (pow(var_x119, 3) * pow(var_x120, 2));
        }
        else
        {
            const double y_save = rY[1];
            rY[1] += delta;
            const double temp = EvaluateYDerivative1(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[1])/delta;
            rY[1] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
        // Units: micromolar; Initial value: 171.167969039613
        double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
        // Units: dimensionless; Initial value: 0.000280539508743811
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[8];
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
        // Units: dimensionless; Initial value: 0.845044436980163
        
        
        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__J_xfer = 0.125 * var_chaste_interface__calcium_concentration__Cass - 0.125 * var_calcium_concentration__Cai; // micromolar_per_millisecond
        const double var_L_type_calcium_current__i_CaL = ((fabs(0.075369662812530269 * var_chaste_interface__cell__V) > 1.0000000000000001e-5) ? (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((1.0 - exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * mParameters[5])) : (-3.062166450310111e-7 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-1.0000000000000001e-5)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-1.0000000000000001e-5)) * mParameters[5]))); // picoA_per_picoF
        const double var_calcium_fluxes__J_rel = ((var_chaste_interface__environment__time < 3333330000000.0005) ? ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * (var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2) * var_chaste_interface__calcium_fluxes__P_RyR * mParameters[0]) : (10.0 * var_chaste_interface__calcium_concentration__CaJSR - 10.0 * var_chaste_interface__calcium_concentration__Cass)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__Cass = (3.5000000000000004 * var_calcium_fluxes__J_rel - 1000.0 * var_calcium_fluxes__J_xfer - 32.656617993405561 * var_L_type_calcium_current__i_CaL * mParameters[5]) / (1.0 + 65.399999999999991 / pow((0.59999999999999998 + var_chaste_interface__calcium_concentration__Cass), 2)); // micromolar / millisecond

        return d_dt_chaste_interface_var_calcium_concentration__Cass;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
            // Units: millimolar; Initial value: 9.499150681398009e-05
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.0954184301907784
            double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
            // Units: micromolar; Initial value: 171.167969039613
            double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
            // Units: dimensionless; Initial value: 0.000280539508743811
            double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
            // Units: dimensionless; Initial value: 0.00571393383393735
            double var_chaste_interface__ryanodine_receptors__P_O2 = rY[8];
            // Units: dimensionless; Initial value: 2.09864618235341e-08
            double var_chaste_interface__L_type_calcium_current__O = rY[10];
            // Units: dimensionless; Initial value: 1.23713515513533e-06
            double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
            // Units: dimensionless; Initial value: 0.845044436980163
            
            const double var_x0 = -var_chaste_interface__calcium_concentration__Cass;
            const double var_x1 = 0.075369662812530269 * var_chaste_interface__cell__V;
            const double var_x2 = exp(-var_x1);
            const double var_x3 = var_x2 * mParameters[1];
            const double var_x4 = var_x0 + var_x3;
            const double var_x5 = 1.0 - var_x2;
            const double var_x6 = 1 / var_x5;
            const double var_x7 = 1 / mParameters[5];
            const double var_x8 = var_x7 * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate;
            const double var_x9 = var_x8 * var_chaste_interface__L_type_calcium_current__O;
            const double var_x10 = var_x6 * var_x9;
            const double var_x11 = 0.0023079445283571576 * var_x10;
            const double var_x12 = var_x11 * var_x4;
            const double var_x14 = fabs(var_x1) > 1.0000000000000001e-5;
            const double var_x81 = exp(-1.0000000000000001e-5);
            const double var_x82 = 3.062166450310111e-7 / (1.0 - var_x81);
            const double var_x83 = var_x82 * var_x9;
            const double var_x84 = ((var_x14) ? (var_x11 * var_chaste_interface__cell__V) : (var_x83));
            const double var_x86 = var_x0 + var_x81 * mParameters[1];
            const double var_x139 = var_chaste_interface__environment__time < 3333330000000.0005;
            const double var_x149 = 0.59999999999999998 + var_chaste_interface__calcium_concentration__Cass;
            const double var_x150 = pow(var_x149, (-2));
            const double var_x151 = 1 / (1.0 + 65.399999999999991 * var_x150);
            const double var_x152 = 32.656617993405561 * mParameters[5];
            const double var_x154 = -var_chaste_interface__ryanodine_receptors__P_O1 - var_chaste_interface__ryanodine_receptors__P_O2;
            const double var_x155 = var_chaste_interface__calcium_fluxes__P_RyR * mParameters[0];
            const double var_x156 = ((var_x139) ? (var_x154 * var_x155) : (-10.0));
            const double var_x157 = var_x0 + var_chaste_interface__calcium_concentration__CaJSR;
            const double var_x158 = var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2;
            const double var_x159 = var_x155 * var_x158;
            const double var_x160 = ((var_x139) ? (var_x157 * var_x159) : (10.0 * var_chaste_interface__calcium_concentration__CaJSR - 10.0 * var_chaste_interface__calcium_concentration__Cass));
            const double var_x161 = ((var_x14) ? (-var_x12 * var_chaste_interface__cell__V) : (-var_x83 * var_x86));
            
            partialF = var_x151 * (-125.0 + 3.5000000000000004 * var_x156 - var_x152 * var_x84) + 0.030581039755351685 * (125000.0 * var_chaste_interface__calcium_concentration__Cai_converted + 3.5000000000000004 * var_x160 - 125.0 * var_chaste_interface__calcium_concentration__Cass - var_x152 * var_x161) / (pow(var_x149, 3) * pow((0.015290519877675841 + var_x150), 2));
        }
        else
        {
            const double y_save = rY[2];
            rY[2] += delta;
            const double temp = EvaluateYDerivative2(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[2])/delta;
            rY[2] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
        // Units: micromolar; Initial value: 171.167969039613
        double var_chaste_interface__calcium_concentration__CaNSR = rY[4];
        // Units: micromolar; Initial value: 404.825013216286
        double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
        // Units: dimensionless; Initial value: 0.000280539508743811
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[8];
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        
        
        // Mathematics
        const double var_calcium_fluxes__J_tr = 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaNSR - 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaJSR; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_rel = ((var_chaste_interface__environment__time < 3333330000000.0005) ? ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * (var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2) * var_chaste_interface__calcium_fluxes__P_RyR * mParameters[0]) : (10.0 * var_chaste_interface__calcium_concentration__CaJSR - 10.0 * var_chaste_interface__calcium_concentration__Cass)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaJSR = (-var_calcium_fluxes__J_rel + var_calcium_fluxes__J_tr) / (1.0 + 79.365079365079367 / pow((1 + 0.0015873015873015873 * var_chaste_interface__calcium_concentration__CaJSR), 2)); // micromolar / millisecond

        return d_dt_chaste_interface_var_calcium_concentration__CaJSR;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.0954184301907784
            double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
            // Units: micromolar; Initial value: 171.167969039613
            double var_chaste_interface__calcium_concentration__CaNSR = rY[4];
            // Units: micromolar; Initial value: 404.825013216286
            double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
            // Units: dimensionless; Initial value: 0.000280539508743811
            double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
            // Units: dimensionless; Initial value: 0.00571393383393735
            double var_chaste_interface__ryanodine_receptors__P_O2 = rY[8];
            // Units: dimensionless; Initial value: 2.09864618235341e-08
            
            const double var_x0 = -var_chaste_interface__calcium_concentration__Cass;
            const double var_x139 = var_chaste_interface__environment__time < 3333330000000.0005;
            const double var_x155 = var_chaste_interface__calcium_fluxes__P_RyR * mParameters[0];
            const double var_x157 = var_x0 + var_chaste_interface__calcium_concentration__CaJSR;
            const double var_x158 = var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2;
            const double var_x159 = var_x155 * var_x158;
            const double var_x160 = ((var_x139) ? (var_x157 * var_x159) : (10.0 * var_chaste_interface__calcium_concentration__CaJSR - 10.0 * var_chaste_interface__calcium_concentration__Cass));
            const double var_x162 = ((var_x139) ? (var_x159) : (10.0));
            const double var_x167 = 1 + 0.0015873015873015873 * var_chaste_interface__calcium_concentration__CaJSR;
            const double var_x168 = pow(var_x167, (-2));
            const double var_x169 = 1 / (1.0 + 79.365079365079367 * var_x168);
            
            partialF = var_x169 * (-0.050000000000000003 - var_x162) + 4.0000000000000003e-5 * (-var_x160 + 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaNSR - 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaJSR) / (pow(var_x167, 3) * pow((0.0126 + var_x168), 2));
        }
        else
        {
            const double y_save = rY[3];
            rY[3] += delta;
            const double temp = EvaluateYDerivative3(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[3])/delta;
            rY[3] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
        // Units: micromolar; Initial value: 171.167969039613
        double var_chaste_interface__calcium_concentration__CaNSR = rY[4];
        // Units: micromolar; Initial value: 404.825013216286
        double var_chaste_interface__calcium_fluxes__CaMKt = rY[6];
        // Units: dimensionless; Initial value: 0.729027738385079
        
        
        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__calcium_fluxes__CaMKt) / (1.0 + 0.69999999999999996 / var_chaste_interface__calcium_concentration__Cass); // dimensionless
        const double var_calcium_fluxes__J_tr = 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaNSR - 0.050000000000000003 * var_chaste_interface__calcium_concentration__CaJSR; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_serca = pow(var_calcium_concentration__Cai, 2) * (0.50590000000000002 + 1.5167893800000001 * pow((var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt), 2.5830000000000002) / (1.7590641847756086 + pow((var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt), 2.5830000000000002))) / (0.16974399999999998 + pow(var_calcium_concentration__Cai, 2)); // micromolar_per_millisecond
        const double var_calcium_fluxes__J_leak = ((var_chaste_interface__environment__time < 3333330000000.0005) ? (3.0000000000000001e-5 * var_chaste_interface__calcium_concentration__CaNSR - 3.0000000000000001e-5 * var_calcium_concentration__Cai) : (0.10000000000000001 * var_chaste_interface__calcium_concentration__CaNSR - 0.10000000000000001 * var_calcium_concentration__Cai)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaNSR = 95.238095238095241 * var_calcium_fluxes__J_serca - 95.238095238095241 * var_calcium_fluxes__J_leak - 0.33333333333333337 * var_calcium_fluxes__J_tr; // micromolar / millisecond

        return d_dt_chaste_interface_var_calcium_concentration__CaNSR;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            
            const double var_x139 = var_chaste_interface__environment__time < 3333330000000.0005;
            const double var_x146 = ((var_x139) ? (3.0000000000000001e-5) : (0.10000000000000001));
            
            partialF = -0.016666666666666666 - 95.238095238095241 * var_x146;
        }
        else
        {
            const double y_save = rY[4];
            rY[4] += delta;
            const double temp = EvaluateYDerivative4(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[4])/delta;
            rY[4] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
        // Units: dimensionless; Initial value: 0.000280539508743811
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
        // Units: dimensionless; Initial value: 0.845044436980163
        
        
        // Mathematics
        const double var_L_type_calcium_current__i_CaL = ((fabs(0.075369662812530269 * var_chaste_interface__cell__V) > 1.0000000000000001e-5) ? (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((1.0 - exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * mParameters[5])) : (-3.062166450310111e-7 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-1.0000000000000001e-5)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-1.0000000000000001e-5)) * mParameters[5]))); // picoA_per_picoF
        const double d_dt_chaste_interface_var_calcium_fluxes__P_RyR = -0.01 * var_chaste_interface__calcium_fluxes__P_RyR - 0.2857142857142857 * var_L_type_calcium_current__i_CaL * exp(-0.038580246913580245 * pow((-1 + 0.20000000000000001 * var_chaste_interface__cell__V), 2)); // 1 / millisecond

        return d_dt_chaste_interface_var_calcium_fluxes__P_RyR;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            
            
            partialF = -0.01;
        }
        else
        {
            const double y_save = rY[5];
            rY[5] += delta;
            const double temp = EvaluateYDerivative5(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[5])/delta;
            rY[5] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_fluxes__CaMKt = rY[6];
        // Units: dimensionless; Initial value: 0.729027738385079
        
        
        // Mathematics
        const double var_calcium_fluxes__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__calcium_fluxes__CaMKt) / (1.0 + 0.69999999999999996 / var_chaste_interface__calcium_concentration__Cass); // dimensionless
        const double d_dt_chaste_interface_var_calcium_fluxes__CaMKt = -0.00020000000000000001 * var_chaste_interface__calcium_fluxes__CaMKt + 0.050000000000000003 * (var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt) * var_calcium_fluxes__CaMKb; // 1 / millisecond

        return d_dt_chaste_interface_var_calcium_fluxes__CaMKt;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.0954184301907784
            double var_chaste_interface__calcium_fluxes__CaMKt = rY[6];
            // Units: dimensionless; Initial value: 0.729027738385079
            
            const double var_x126 = 1.0 - var_chaste_interface__calcium_fluxes__CaMKt;
            const double var_x127 = 1.0 + 0.69999999999999996 / var_chaste_interface__calcium_concentration__Cass;
            const double var_x128 = 1 / var_x127;
            const double var_x129 = 0.050000000000000003 * var_x128;
            const double var_x130 = var_x126 * var_x129 + var_chaste_interface__calcium_fluxes__CaMKt;
            const double var_x174 = 0.0025000000000000005 * var_x128;
            
            partialF = -0.00020000000000000001 - var_x130 * var_x174 + var_x126 * var_x174 * (1 - var_x129);
        }
        else
        {
            const double y_save = rY[6];
            rY[6] += delta;
            const double temp = EvaluateYDerivative6(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[6])/delta;
            rY[6] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[8];
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        double var_chaste_interface__ryanodine_receptors__P_C2 = rY[9];
        // Units: dimensionless; Initial value: 0.565182571165673
        
        
        // Mathematics
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O1 = 0.00080000000000000004 * var_chaste_interface__ryanodine_receptors__P_C2 + 0.96499999999999997 * var_chaste_interface__ryanodine_receptors__P_O2 - 0.080249999999999988 * var_chaste_interface__ryanodine_receptors__P_O1 + 0.0060749999999999997 * pow(var_chaste_interface__calcium_concentration__Cass, 4.0) * (1.0 - var_chaste_interface__ryanodine_receptors__P_C2 - var_chaste_interface__ryanodine_receptors__P_O1 - var_chaste_interface__ryanodine_receptors__P_O2) - 0.0040499999999999998 * pow(var_chaste_interface__calcium_concentration__Cass, 3.0) * var_chaste_interface__ryanodine_receptors__P_O1; // 1 / millisecond

        return d_dt_chaste_interface_var_ryanodine_receptors__P_O1;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.0954184301907784
            
            const double var_x175 = pow(var_chaste_interface__calcium_concentration__Cass, 3.0);
            const double var_x177 = 0.0040499999999999998 * var_x175;
            const double var_x178 = -0.0060749999999999997 * pow(var_chaste_interface__calcium_concentration__Cass, 4.0);
            
            partialF = -0.080249999999999988 + var_x178 - var_x177;
        }
        else
        {
            const double y_save = rY[7];
            rY[7] += delta;
            const double temp = EvaluateYDerivative7(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[7])/delta;
            rY[7] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[8];
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        
        
        // Mathematics
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O2 = -0.96499999999999997 * var_chaste_interface__ryanodine_receptors__P_O2 + 0.0040499999999999998 * pow(var_chaste_interface__calcium_concentration__Cass, 3.0) * var_chaste_interface__ryanodine_receptors__P_O1; // 1 / millisecond

        return d_dt_chaste_interface_var_ryanodine_receptors__P_O2;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            
            
            partialF = -0.96499999999999997;
        }
        else
        {
            const double y_save = rY[8];
            rY[8] += delta;
            const double temp = EvaluateYDerivative8(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[8])/delta;
            rY[8] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_C2 = rY[9];
        // Units: dimensionless; Initial value: 0.565182571165673
        
        
        // Mathematics
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_C2 = 0.0089999999999999993 * var_chaste_interface__ryanodine_receptors__P_O1 - 0.00080000000000000004 * var_chaste_interface__ryanodine_receptors__P_C2; // 1 / millisecond

        return d_dt_chaste_interface_var_ryanodine_receptors__P_C2;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            
            
            partialF = -0.00080000000000000004;
        }
        else
        {
            const double y_save = rY[9];
            rY[9] += delta;
            const double temp = EvaluateYDerivative9(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[9])/delta;
            rY[9] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__I = rY[11];
        // Units: dimensionless; Initial value: 0.427651445872853
        
        
        // Mathematics
        const double var_L_type_calcium_current__C = 1.0 - var_chaste_interface__L_type_calcium_current__I - var_chaste_interface__L_type_calcium_current__O; // dimensionless
        const double var_L_type_calcium_current__expVL = exp(0.15506520491866829 * var_chaste_interface__cell__V); // dimensionless
        const double d_dt_chaste_interface_var_L_type_calcium_current__O = -1.1986666666666668 * var_chaste_interface__L_type_calcium_current__O + 0.66666666666666663 * var_L_type_calcium_current__C * var_L_type_calcium_current__expVL / (1.0 + var_L_type_calcium_current__expVL); // 1 / millisecond

        return d_dt_chaste_interface_var_L_type_calcium_current__O;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x179 = exp(0.15506520491866829 * var_chaste_interface__cell__V);
            const double var_x180 = 1.0 + var_x179;
            const double var_x181 = 1 / var_x180;
            const double var_x182 = var_x179 * var_x181;
            const double var_x186 = -0.66666666666666663 * var_x182;
            
            partialF = -1.1986666666666668 + var_x186;
        }
        else
        {
            const double y_save = rY[10];
            rY[10] += delta;
            const double temp = EvaluateYDerivative10(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[10])/delta;
            rY[10] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__I = rY[11];
        // Units: dimensionless; Initial value: 0.427651445872853
        
        
        // Mathematics
        const double var_L_type_calcium_current__C = 1.0 - var_chaste_interface__L_type_calcium_current__I - var_chaste_interface__L_type_calcium_current__O; // dimensionless
        const double var_L_type_calcium_current__expVL = exp(0.15506520491866829 * var_chaste_interface__cell__V); // dimensionless
        const double d_dt_chaste_interface_var_L_type_calcium_current__I = -0.00034782608695652176 * (0.0625 + var_L_type_calcium_current__expVL) * var_chaste_interface__L_type_calcium_current__I / (0.0625 + 0.40000000000000002 * var_L_type_calcium_current__expVL) + 0.0028985507246376812 * (0.0625 + var_L_type_calcium_current__expVL) * var_L_type_calcium_current__C * var_chaste_interface__calcium_concentration__Cass / (1.0 + var_L_type_calcium_current__expVL); // 1 / millisecond

        return d_dt_chaste_interface_var_L_type_calcium_current__I;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            double var_chaste_interface__calcium_concentration__Cass = rY[2];
            // Units: micromolar; Initial value: 0.0954184301907784
            
            const double var_x179 = exp(0.15506520491866829 * var_chaste_interface__cell__V);
            const double var_x180 = 1.0 + var_x179;
            const double var_x181 = 1 / var_x180;
            const double var_x187 = 1 / (0.0625 + 0.40000000000000002 * var_x179);
            const double var_x189 = 0.0625 + var_x179;
            const double var_x192 = 0.0028985507246376812 * var_x181;
            const double var_x193 = -var_x189 * var_x192 * var_chaste_interface__calcium_concentration__Cass;
            
            partialF = var_x193 - 0.00034782608695652176 * var_x187 * var_x189;
        }
        else
        {
            const double y_save = rY[11];
            rY[11] += delta;
            const double temp = EvaluateYDerivative11(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[11])/delta;
            rY[11] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
        // Units: dimensionless; Initial value: 0.845044436980163
        
        
        // Mathematics
        const double d_dt_chaste_interface_var_L_type_calcium_current__y_gate = (-var_chaste_interface__L_type_calcium_current__y_gate + 1 / (1.0 + exp(4.024390243902439 + 0.12195121951219513 * var_chaste_interface__cell__V)) + 0.10000000000000001 / (1.0 + exp(6.666666666666667 - 0.16666666666666666 * var_chaste_interface__cell__V))) / (8.0 + 315.0 / (1.0 + exp(7.5 + 0.25 * var_chaste_interface__cell__V))); // 1 / millisecond

        return d_dt_chaste_interface_var_L_type_calcium_current__y_gate;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x109 = 0.25 * var_chaste_interface__cell__V;
            const double var_x194 = exp(7.5 + var_x109);
            const double var_x195 = 1.0 + var_x194;
            const double var_x196 = 1 / var_x195;
            const double var_x197 = 1 / (8.0 + 315.0 * var_x196);
            
            partialF = -var_x197;
        }
        else
        {
            const double y_save = rY[12];
            rY[12] += delta;
            const double temp = EvaluateYDerivative12(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[12])/delta;
            rY[12] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__sodium_concentration__Nai = rY[13];
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__potassium_concentration__Ki = rY[22];
        // Units: micromolar; Initial value: 115599.50642567
        
        
        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_fast_sodium_current__E_Na = 26.535875647668394 * log((mParameters[3] + 0.1111111111111111 * mParameters[2]) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)); // millivolt
        const double var_fast_sodium_current__i_Na = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_chaste_interface__fast_sodium_current__O_Na * mParameters[6]; // picoA_per_picoF
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__cell__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * exp(0.013189690992192795 * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_calcium_concentration__Cai * exp(-0.024495140414072337 * var_chaste_interface__cell__V)) * mParameters[11] / ((1.0 + 0.27000000000000002 * exp(-0.024495140414072337 * var_chaste_interface__cell__V)) * (1400.0 * pow(var_chaste_interface__sodium_concentration__Nai, 3) + 681472000000000.0 * var_calcium_concentration__Cai + pow(mParameters[3], 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] + 1728000000000.0 * (1.0 + 0.27777777777777779 * var_calcium_concentration__Cai) * mParameters[1] + 3.6000000000000001 * pow(mParameters[3], 3) * (1.0 + 5.7870370370370368e-13 * pow(var_chaste_interface__sodium_concentration__Nai, 3)))); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = 2.4860000000000002 * mParameters[2] / ((1.0 + 13435672565.051065 * pow(1 / var_chaste_interface__sodium_concentration__Nai, 2.3999999999999999)) * (1500.0 + mParameters[2]) * (1.0 + 0.1245 * exp(-0.0037684831406265135 * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[3])) * exp(-0.037684831406265135 * var_chaste_interface__cell__V))); // picoA_per_picoF
        const double d_dt_chaste_interface_var_sodium_concentration__Nai = 0.065313235986811116 * (-var_fast_sodium_current__i_Na - var_sodium_background_current__i_Nab - 3.0 * var_sodium_calcium_exchange_current__i_NCX - 3.0 * var_sodium_potassium_pump_current__i_NaK) * mParameters[5]; // micromolar / millisecond

        return d_dt_chaste_interface_var_sodium_concentration__Nai;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
            // Units: millimolar; Initial value: 9.499150681398009e-05
            double var_chaste_interface__sodium_concentration__Nai = rY[13];
            // Units: micromolar; Initial value: 12364.7482121793
            double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
            // Units: dimensionless; Initial value: 1.46826771436314e-06
            double var_chaste_interface__potassium_concentration__Ki = rY[22];
            // Units: micromolar; Initial value: 115599.50642567
            
            const double var_x17 = var_chaste_interface__fast_sodium_current__O_Na * mParameters[6];
            const double var_x28 = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x39 = exp(0.013189690992192795 * var_chaste_interface__cell__V);
            const double var_x40 = pow(var_chaste_interface__sodium_concentration__Nai, 3);
            const double var_x41 = var_x40 * mParameters[1];
            const double var_x42 = var_x39 * var_x41;
            const double var_x43 = exp(-0.024495140414072337 * var_chaste_interface__cell__V);
            const double var_x44 = pow(mParameters[3], 3);
            const double var_x45 = var_x44 * var_chaste_interface__calcium_concentration__Cai_converted;
            const double var_x46 = 1.0 + 0.27000000000000002 * var_x43;
            const double var_x47 = 1 / var_x46;
            const double var_x48 = (1.0 + 277.77777777777777 * var_chaste_interface__calcium_concentration__Cai_converted) * mParameters[1];
            const double var_x49 = var_x44 * (1.0 + 5.7870370370370368e-13 * var_x40);
            const double var_x50 = var_x28 * var_x44;
            const double var_x51 = mParameters[11] / (var_x41 + var_x50 + 1400.0 * var_x40 + 1728000000000.0 * var_x48 + 3.6000000000000001 * var_x49 + 6.81472e+17 * var_chaste_interface__calcium_concentration__Cai_converted);
            const double var_x52 = var_x47 * var_x51;
            const double var_x54 = 1 / var_chaste_interface__sodium_concentration__Nai;
            const double var_x55 = pow(var_x54, 2.3999999999999999);
            const double var_x56 = exp(-0.0037684831406265135 * var_chaste_interface__cell__V);
            const double var_x57 = exp(1.4858841010401188e-5 * mParameters[3]);
            const double var_x58 = exp(-0.037684831406265135 * var_chaste_interface__cell__V);
            const double var_x59 = 1.0 + 0.1245 * var_x56 + 0.036499999999999998 * var_x58 * (-0.14285714285714285 + 0.14285714285714285 * var_x57);
            const double var_x60 = mParameters[2] / (1500.0 + mParameters[2]);
            const double var_x62 = var_x42 - var_x43 * var_x50;
            const double var_x79 = var_x47 * var_x62 * mParameters[11] / pow((2.0543764087152516e-15 * var_x40 + 5.282682193839219e-18 * var_x49 + 2.535687453042825e-6 * var_x48 + 1.4674117205108941e-18 * var_x41 + 1.4674117205108941e-15 * var_x45 + var_chaste_interface__calcium_concentration__Cai_converted), 2);
            const double var_x91 = 1 / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki);
            const double var_x94 = var_x17 * var_x91;
            const double var_x95 = pow(var_chaste_interface__sodium_concentration__Nai, 2);
            const double var_x96 = var_x95 * mParameters[1];
            const double var_x97 = -3 * var_x96 - 4200.0 * var_x95 - 6.2500000000000002e-12 * var_x44 * var_x95;
            const double var_x98 = var_x39 * var_x52 * var_x96;
            const double var_x99 = var_x54 * var_x55 * var_x60 / (var_x59 * pow((7.44287265976699e-11 + var_x55), 2));
            const double var_x202 = 4.2191641619115923e-37 * var_x79;
            
            partialF = (-1.7331439082928402 * var_x94 - 0.004506174161561384 * var_x91 - 0.58781912388130009 * var_x98 - 8.7011250677251544e-11 * var_x99 - var_x202 * var_x97) * mParameters[5];
        }
        else
        {
            const double y_save = rY[13];
            rY[13] += delta;
            const double temp = EvaluateYDerivative13(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[13])/delta;
            rY[13] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__fast_sodium_current__C_Na1 = rY[15];
        // Units: dimensionless; Initial value: 0.000420472760277688
        double var_chaste_interface__fast_sodium_current__IF_Na = rY[19];
        // Units: dimensionless; Initial value: 0.000306123648969581
        
        
        // Mathematics
        const double var_fast_sodium_current__alpha_Na13 = 3.802 / (0.25 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V) + 0.1027 * exp(-0.20833333333333334 - 0.083333333333333329 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na2 = 1 / (0.39395599999999997 + 0.188495 * exp(-0.42168674698795178 - 0.060240963855421679 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = 6.9999999999999997e-7 * exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na13 = 0.22 * exp(0.36945812807881773 - 0.04926108374384236 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na3 = 0.008539999999999999 + 2.0000000000000002e-5 * var_chaste_interface__cell__V; // per_millisecond
        const double var_fast_sodium_current__beta_Na2 = var_fast_sodium_current__alpha_Na13 * var_fast_sodium_current__alpha_Na2 * var_fast_sodium_current__alpha_Na3 / (var_fast_sodium_current__beta_Na13 * var_fast_sodium_current__beta_Na3); // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__O_Na = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__alpha_Na13 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na2 - var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__alpha_Na2 - var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__beta_Na13; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current__O_Na;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x204 = -0.04926108374384236 * var_chaste_interface__cell__V;
            const double var_x205 = exp(0.36945812807881773 + var_x204);
            const double var_x211 = exp(-0.42168674698795178 - 0.060240963855421679 * var_chaste_interface__cell__V);
            const double var_x217 = 1 / (0.39395599999999997 + 0.188495 * var_x211);
            const double var_x229 = var_x217;
            const double var_x230 = 0.22 * var_x205;
            
            partialF = -var_x229 - var_x230;
        }
        else
        {
            const double y_save = rY[14];
            rY[14] += delta;
            const double temp = EvaluateYDerivative14(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[14])/delta;
            rY[14] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__fast_sodium_current__C_Na1 = rY[15];
        // Units: dimensionless; Initial value: 0.000420472760277688
        double var_chaste_interface__fast_sodium_current__C_Na2 = rY[16];
        // Units: dimensionless; Initial value: 0.0240114508843199
        double var_chaste_interface__fast_sodium_current__IF_Na = rY[19];
        // Units: dimensionless; Initial value: 0.000306123648969581
        
        
        // Mathematics
        const double var_fast_sodium_current__alpha_Na12 = 3.802 / (0.1027 * exp(-0.16666666666666666 - 0.066666666666666666 * var_chaste_interface__cell__V) + 0.23000000000000001 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na13 = 3.802 / (0.25 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V) + 0.1027 * exp(-0.20833333333333334 - 0.083333333333333329 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = 6.9999999999999997e-7 * exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na12 = 0.20000000000000001 * exp(0.12315270935960591 - 0.04926108374384236 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na13 = 0.22 * exp(0.36945812807881773 - 0.04926108374384236 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na3 = 0.008539999999999999 + 2.0000000000000002e-5 * var_chaste_interface__cell__V; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__C_Na1 = var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__alpha_Na12 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na3 + var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__beta_Na13 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__alpha_Na13 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na3; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current__C_Na1;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x204 = -0.04926108374384236 * var_chaste_interface__cell__V;
            const double var_x207 = exp(-0.20833333333333334 - 0.083333333333333329 * var_chaste_interface__cell__V);
            const double var_x208 = exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V);
            const double var_x214 = 2.0000000000000002e-5 * var_chaste_interface__cell__V;
            const double var_x218 = 1 / (0.25 * var_x208 + 0.1027 * var_x207);
            const double var_x231 = 3.802 * var_x218;
            const double var_x235 = exp(0.12315270935960591 + var_x204);
            const double var_x243 = 0.20000000000000001 * var_x235;
            const double var_x244 = -var_x243;
            const double var_x245 = -0.008539999999999999 - var_x214;
            
            partialF = var_x244 + var_x245 - var_x231;
        }
        else
        {
            const double y_save = rY[15];
            rY[15] += delta;
            const double temp = EvaluateYDerivative15(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[15])/delta;
            rY[15] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__fast_sodium_current__C_Na1 = rY[15];
        // Units: dimensionless; Initial value: 0.000420472760277688
        double var_chaste_interface__fast_sodium_current__C_Na2 = rY[16];
        // Units: dimensionless; Initial value: 0.0240114508843199
        double var_chaste_interface__fast_sodium_current__I1_Na = rY[17];
        // Units: dimensionless; Initial value: 0.000517471697712382
        double var_chaste_interface__fast_sodium_current__I2_Na = rY[18];
        // Units: dimensionless; Initial value: 2.45406116958509e-05
        double var_chaste_interface__fast_sodium_current__IF_Na = rY[19];
        // Units: dimensionless; Initial value: 0.000306123648969581
        double var_chaste_interface__fast_sodium_current__IC_Na2 = rY[20];
        // Units: dimensionless; Initial value: 0.0174528857380179
        double var_chaste_interface__fast_sodium_current__IC_Na3 = rY[21];
        // Units: dimensionless; Initial value: 0.402980726914811
        
        
        // Mathematics
        const double var_fast_sodium_current__C_Na3 = 1.0 - var_chaste_interface__fast_sodium_current__C_Na1 - var_chaste_interface__fast_sodium_current__C_Na2 - var_chaste_interface__fast_sodium_current__I1_Na - var_chaste_interface__fast_sodium_current__I2_Na - var_chaste_interface__fast_sodium_current__IC_Na2 - var_chaste_interface__fast_sodium_current__IC_Na3 - var_chaste_interface__fast_sodium_current__IF_Na - var_chaste_interface__fast_sodium_current__O_Na; // dimensionless
        const double var_fast_sodium_current__alpha_Na11 = 3.802 / (0.20000000000000001 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V) + 0.1027 * exp(-0.14705882352941177 - 0.058823529411764705 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na12 = 3.802 / (0.1027 * exp(-0.16666666666666666 - 0.066666666666666666 * var_chaste_interface__cell__V) + 0.23000000000000001 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = 6.9999999999999997e-7 * exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na11 = 0.19170000000000001 * exp(-0.12315270935960591 - 0.04926108374384236 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na12 = 0.20000000000000001 * exp(0.12315270935960591 - 0.04926108374384236 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na3 = 0.008539999999999999 + 2.0000000000000002e-5 * var_chaste_interface__cell__V; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__C_Na2 = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na12 + var_fast_sodium_current__C_Na3 * var_fast_sodium_current__alpha_Na11 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__alpha_Na12 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na11 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na3; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current__C_Na2;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x204 = -0.04926108374384236 * var_chaste_interface__cell__V;
            const double var_x208 = exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V);
            const double var_x214 = 2.0000000000000002e-5 * var_chaste_interface__cell__V;
            const double var_x240 = exp(-0.16666666666666666 - 0.066666666666666666 * var_chaste_interface__cell__V);
            const double var_x245 = -0.008539999999999999 - var_x214;
            const double var_x246 = 3.802 / (0.1027 * var_x240 + 0.23000000000000001 * var_x208);
            const double var_x250 = exp(-0.12315270935960591 + var_x204);
            const double var_x253 = exp(-0.14705882352941177 - 0.058823529411764705 * var_chaste_interface__cell__V);
            const double var_x255 = 3.802 / (0.20000000000000001 * var_x208 + 0.1027 * var_x253);
            const double var_x256 = -var_x255;
            const double var_x257 = 0.19170000000000001 * var_x250;
            const double var_x258 = -var_x246 - var_x257;
            const double var_x259 = var_x245 + var_x256;
            
            partialF = var_x258 + var_x259;
        }
        else
        {
            const double y_save = rY[16];
            rY[16] += delta;
            const double temp = EvaluateYDerivative16(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[16])/delta;
            rY[16] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_sodium_current__I1_Na = rY[17];
        // Units: dimensionless; Initial value: 0.000517471697712382
        double var_chaste_interface__fast_sodium_current__I2_Na = rY[18];
        // Units: dimensionless; Initial value: 2.45406116958509e-05
        double var_chaste_interface__fast_sodium_current__IF_Na = rY[19];
        // Units: dimensionless; Initial value: 0.000306123648969581
        
        
        // Mathematics
        const double var_fast_sodium_current__alpha_Na2 = 1 / (0.39395599999999997 + 0.188495 * exp(-0.42168674698795178 - 0.060240963855421679 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = 6.9999999999999997e-7 * exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__alpha_Na4 = 0.001 * var_fast_sodium_current__alpha_Na2; // per_millisecond
        const double var_fast_sodium_current__alpha_Na5 = 1.0526315789473684e-5 * var_fast_sodium_current__alpha_Na2; // per_millisecond
        const double var_fast_sodium_current__beta_Na4 = var_fast_sodium_current__alpha_Na3; // per_millisecond
        const double var_fast_sodium_current__beta_Na5 = 0.02 * var_fast_sodium_current__alpha_Na3; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__I1_Na = var_chaste_interface__fast_sodium_current__I2_Na * var_fast_sodium_current__beta_Na5 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na4 - var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__alpha_Na5 - var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__beta_Na4; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current__I1_Na;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x211 = exp(-0.42168674698795178 - 0.060240963855421679 * var_chaste_interface__cell__V);
            const double var_x217 = 1 / (0.39395599999999997 + 0.188495 * var_x211);
            const double var_x219 = exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V);
            const double var_x247 = 6.9999999999999997e-7 * var_x219;
            const double var_x264 = -var_x247;
            const double var_x265 = 1.0526315789473684e-5 * var_x217;
            
            partialF = var_x264 - var_x265;
        }
        else
        {
            const double y_save = rY[17];
            rY[17] += delta;
            const double temp = EvaluateYDerivative17(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[17])/delta;
            rY[17] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_sodium_current__I1_Na = rY[17];
        // Units: dimensionless; Initial value: 0.000517471697712382
        double var_chaste_interface__fast_sodium_current__I2_Na = rY[18];
        // Units: dimensionless; Initial value: 2.45406116958509e-05
        
        
        // Mathematics
        const double var_fast_sodium_current__alpha_Na2 = 1 / (0.39395599999999997 + 0.188495 * exp(-0.42168674698795178 - 0.060240963855421679 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = 6.9999999999999997e-7 * exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__alpha_Na5 = 1.0526315789473684e-5 * var_fast_sodium_current__alpha_Na2; // per_millisecond
        const double var_fast_sodium_current__beta_Na5 = 0.02 * var_fast_sodium_current__alpha_Na3; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__I2_Na = var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__alpha_Na5 - var_chaste_interface__fast_sodium_current__I2_Na * var_fast_sodium_current__beta_Na5; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current__I2_Na;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x219 = exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V);
            const double var_x266 = 1.4e-8 * var_x219;
            
            partialF = -var_x266;
        }
        else
        {
            const double y_save = rY[18];
            rY[18] += delta;
            const double temp = EvaluateYDerivative18(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[18])/delta;
            rY[18] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__fast_sodium_current__C_Na1 = rY[15];
        // Units: dimensionless; Initial value: 0.000420472760277688
        double var_chaste_interface__fast_sodium_current__I1_Na = rY[17];
        // Units: dimensionless; Initial value: 0.000517471697712382
        double var_chaste_interface__fast_sodium_current__IF_Na = rY[19];
        // Units: dimensionless; Initial value: 0.000306123648969581
        double var_chaste_interface__fast_sodium_current__IC_Na2 = rY[20];
        // Units: dimensionless; Initial value: 0.0174528857380179
        
        
        // Mathematics
        const double var_fast_sodium_current__alpha_Na12 = 3.802 / (0.1027 * exp(-0.16666666666666666 - 0.066666666666666666 * var_chaste_interface__cell__V) + 0.23000000000000001 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na13 = 3.802 / (0.25 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V) + 0.1027 * exp(-0.20833333333333334 - 0.083333333333333329 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na2 = 1 / (0.39395599999999997 + 0.188495 * exp(-0.42168674698795178 - 0.060240963855421679 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = 6.9999999999999997e-7 * exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__alpha_Na4 = 0.001 * var_fast_sodium_current__alpha_Na2; // per_millisecond
        const double var_fast_sodium_current__beta_Na12 = 0.20000000000000001 * exp(0.12315270935960591 - 0.04926108374384236 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na13 = 0.22 * exp(0.36945812807881773 - 0.04926108374384236 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na3 = 0.008539999999999999 + 2.0000000000000002e-5 * var_chaste_interface__cell__V; // per_millisecond
        const double var_fast_sodium_current__beta_Na2 = var_fast_sodium_current__alpha_Na13 * var_fast_sodium_current__alpha_Na2 * var_fast_sodium_current__alpha_Na3 / (var_fast_sodium_current__beta_Na13 * var_fast_sodium_current__beta_Na3); // per_millisecond
        const double var_fast_sodium_current__beta_Na4 = var_fast_sodium_current__alpha_Na3; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IF_Na = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__beta_Na4 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na12 + var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__alpha_Na2 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na4 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na2; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current__IF_Na;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x204 = -0.04926108374384236 * var_chaste_interface__cell__V;
            const double var_x205 = exp(0.36945812807881773 + var_x204);
            const double var_x207 = exp(-0.20833333333333334 - 0.083333333333333329 * var_chaste_interface__cell__V);
            const double var_x208 = exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V);
            const double var_x211 = exp(-0.42168674698795178 - 0.060240963855421679 * var_chaste_interface__cell__V);
            const double var_x214 = 2.0000000000000002e-5 * var_chaste_interface__cell__V;
            const double var_x215 = 0.008539999999999999 + var_x214;
            const double var_x216 = 1 / var_x215;
            const double var_x217 = 1 / (0.39395599999999997 + 0.188495 * var_x211);
            const double var_x218 = 1 / (0.25 * var_x208 + 0.1027 * var_x207);
            const double var_x219 = exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V);
            const double var_x220 = 1 / var_x205;
            const double var_x221 = var_x217 * var_x218 * var_x219 * var_x220;
            const double var_x222 = var_x216 * var_x221;
            const double var_x232 = 1.2097272727272726e-5 * var_x222;
            const double var_x235 = exp(0.12315270935960591 + var_x204);
            const double var_x243 = 0.20000000000000001 * var_x235;
            const double var_x244 = -var_x243;
            const double var_x247 = 6.9999999999999997e-7 * var_x219;
            const double var_x264 = -var_x247;
            const double var_x267 = 0.001 * var_x217;
            
            partialF = var_x244 + var_x264 - var_x232 - var_x267;
        }
        else
        {
            const double y_save = rY[19];
            rY[19] += delta;
            const double temp = EvaluateYDerivative19(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[19])/delta;
            rY[19] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_sodium_current__C_Na2 = rY[16];
        // Units: dimensionless; Initial value: 0.0240114508843199
        double var_chaste_interface__fast_sodium_current__IF_Na = rY[19];
        // Units: dimensionless; Initial value: 0.000306123648969581
        double var_chaste_interface__fast_sodium_current__IC_Na2 = rY[20];
        // Units: dimensionless; Initial value: 0.0174528857380179
        double var_chaste_interface__fast_sodium_current__IC_Na3 = rY[21];
        // Units: dimensionless; Initial value: 0.402980726914811
        
        
        // Mathematics
        const double var_fast_sodium_current__alpha_Na11 = 3.802 / (0.20000000000000001 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V) + 0.1027 * exp(-0.14705882352941177 - 0.058823529411764705 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na12 = 3.802 / (0.1027 * exp(-0.16666666666666666 - 0.066666666666666666 * var_chaste_interface__cell__V) + 0.23000000000000001 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = 6.9999999999999997e-7 * exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na11 = 0.19170000000000001 * exp(-0.12315270935960591 - 0.04926108374384236 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na12 = 0.20000000000000001 * exp(0.12315270935960591 - 0.04926108374384236 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na3 = 0.008539999999999999 + 2.0000000000000002e-5 * var_chaste_interface__cell__V; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IC_Na2 = var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na11 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na12 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__beta_Na11; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current__IC_Na2;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x204 = -0.04926108374384236 * var_chaste_interface__cell__V;
            const double var_x208 = exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V);
            const double var_x219 = exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V);
            const double var_x240 = exp(-0.16666666666666666 - 0.066666666666666666 * var_chaste_interface__cell__V);
            const double var_x246 = 3.802 / (0.1027 * var_x240 + 0.23000000000000001 * var_x208);
            const double var_x247 = 6.9999999999999997e-7 * var_x219;
            const double var_x250 = exp(-0.12315270935960591 + var_x204);
            const double var_x257 = 0.19170000000000001 * var_x250;
            const double var_x258 = -var_x246 - var_x257;
            const double var_x264 = -var_x247;
            
            partialF = var_x258 + var_x264;
        }
        else
        {
            const double y_save = rY[20];
            rY[20] += delta;
            const double temp = EvaluateYDerivative20(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[20])/delta;
            rY[20] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__fast_sodium_current__C_Na1 = rY[15];
        // Units: dimensionless; Initial value: 0.000420472760277688
        double var_chaste_interface__fast_sodium_current__C_Na2 = rY[16];
        // Units: dimensionless; Initial value: 0.0240114508843199
        double var_chaste_interface__fast_sodium_current__I1_Na = rY[17];
        // Units: dimensionless; Initial value: 0.000517471697712382
        double var_chaste_interface__fast_sodium_current__I2_Na = rY[18];
        // Units: dimensionless; Initial value: 2.45406116958509e-05
        double var_chaste_interface__fast_sodium_current__IF_Na = rY[19];
        // Units: dimensionless; Initial value: 0.000306123648969581
        double var_chaste_interface__fast_sodium_current__IC_Na2 = rY[20];
        // Units: dimensionless; Initial value: 0.0174528857380179
        double var_chaste_interface__fast_sodium_current__IC_Na3 = rY[21];
        // Units: dimensionless; Initial value: 0.402980726914811
        
        
        // Mathematics
        const double var_fast_sodium_current__C_Na3 = 1.0 - var_chaste_interface__fast_sodium_current__C_Na1 - var_chaste_interface__fast_sodium_current__C_Na2 - var_chaste_interface__fast_sodium_current__I1_Na - var_chaste_interface__fast_sodium_current__I2_Na - var_chaste_interface__fast_sodium_current__IC_Na2 - var_chaste_interface__fast_sodium_current__IC_Na3 - var_chaste_interface__fast_sodium_current__IF_Na - var_chaste_interface__fast_sodium_current__O_Na; // dimensionless
        const double var_fast_sodium_current__alpha_Na11 = 3.802 / (0.20000000000000001 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V) + 0.1027 * exp(-0.14705882352941177 - 0.058823529411764705 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = 6.9999999999999997e-7 * exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na11 = 0.19170000000000001 * exp(-0.12315270935960591 - 0.04926108374384236 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na3 = 0.008539999999999999 + 2.0000000000000002e-5 * var_chaste_interface__cell__V; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IC_Na3 = var_fast_sodium_current__C_Na3 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__beta_Na11 - var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na11 - var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na3; // 1 / millisecond

        return d_dt_chaste_interface_var_fast_sodium_current__IC_Na3;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x208 = exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V);
            const double var_x214 = 2.0000000000000002e-5 * var_chaste_interface__cell__V;
            const double var_x219 = exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V);
            const double var_x245 = -0.008539999999999999 - var_x214;
            const double var_x247 = 6.9999999999999997e-7 * var_x219;
            const double var_x253 = exp(-0.14705882352941177 - 0.058823529411764705 * var_chaste_interface__cell__V);
            const double var_x255 = 3.802 / (0.20000000000000001 * var_x208 + 0.1027 * var_x253);
            const double var_x256 = -var_x255;
            const double var_x259 = var_x245 + var_x256;
            const double var_x264 = -var_x247;
            
            partialF = var_x259 + var_x264;
        }
        else
        {
            const double y_save = rY[21];
            rY[21] += delta;
            const double temp = EvaluateYDerivative21(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[21])/delta;
            rY[21] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__sodium_concentration__Nai = rY[13];
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__potassium_concentration__Ki = rY[22];
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = rY[23];
        // Units: dimensionless; Initial value: 0.00346258606821817
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = rY[24];
        // Units: dimensionless; Initial value: 0.955684946168062
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
        // Units: dimensionless; Initial value: 0.00336735013094628
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = rY[32];
        // Units: dimensionless; Initial value: 0.0142335908879204
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = rY[33];
        // Units: dimensionless; Initial value: 0.996989882138174
        
        
        // Mathematics
        const double var_cell__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // picoA_per_picoF
        const double var_fast_transient_outward_K_I__E_K = 26.535875647668394 * log(mParameters[2] / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_K_I__i_Kto_f = 0.53469999999999995 * pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__fast_transient_outward_K_I__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * mParameters[8] * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // picoA_per_picoF
        const double var_slow_delayed_rectifier_K_I__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[10]; // picoA_per_picoF
        const double var_slow_transient_outward_K_I__i_Kto_s = 0; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__i_Kr = (-26.535875647668394 * log((mParameters[2] + 0.020408163265306124 * mParameters[3]) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) + var_chaste_interface__cell__V) * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * mParameters[9]; // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = 2.4860000000000002 * mParameters[2] / ((1.0 + 13435672565.051065 * pow(1 / var_chaste_interface__sodium_concentration__Nai, 2.3999999999999999)) * (1500.0 + mParameters[2]) * (1.0 + 0.1245 * exp(-0.0037684831406265135 * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * mParameters[3])) * exp(-0.037684831406265135 * var_chaste_interface__cell__V))); // picoA_per_picoF
        const double var_time_independent_K_I__i_K1 = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[2] * mParameters[7] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + mParameters[2])); // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur = 0.25 * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur; // picoA_per_picoF
        const double d_dt_chaste_interface_var_potassium_concentration__Ki = 0.065313235986811116 * (-var_cell__i_Stim - var_fast_transient_outward_K_I__i_Kto_f - var_non_inactivating_steady_state_K_I__i_Kss - var_rapid_delayed_rectifier_K_I__i_Kr - var_slow_delayed_rectifier_K_I__i_Ks - var_slow_transient_outward_K_I__i_Kto_s - var_time_independent_K_I__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur + 2.0 * var_sodium_potassium_pump_current__i_NaK) * mParameters[5]; // micromolar / millisecond

        return d_dt_chaste_interface_var_potassium_concentration__Ki;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            double var_chaste_interface__sodium_concentration__Nai = rY[13];
            // Units: micromolar; Initial value: 12364.7482121793
            double var_chaste_interface__potassium_concentration__Ki = rY[22];
            // Units: micromolar; Initial value: 115599.50642567
            double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = rY[23];
            // Units: dimensionless; Initial value: 0.00346258606821817
            double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = rY[24];
            // Units: dimensionless; Initial value: 0.955684946168062
            double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
            // Units: dimensionless; Initial value: 0.287585636847048
            double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = rY[26];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
            // Units: dimensionless; Initial value: 0.0131742086125972
            double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
            // Units: dimensionless; Initial value: 0.00336735013094628
            double var_chaste_interface__fast_transient_outward_K_I__ato_f = rY[32];
            // Units: dimensionless; Initial value: 0.0142335908879204
            double var_chaste_interface__fast_transient_outward_K_I__ito_f = rY[33];
            // Units: dimensionless; Initial value: 0.996989882138174
            
            const double var_x16 = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * mParameters[10];
            const double var_x18 = var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * mParameters[9];
            const double var_x19 = var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur;
            const double var_x20 = pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3);
            const double var_x22 = mParameters[8] * var_chaste_interface__non_inactivating_steady_state_K_I__iKss;
            const double var_x23 = var_x22 * var_chaste_interface__non_inactivating_steady_state_K_I__aKss;
            const double var_x31 = 1 / var_chaste_interface__potassium_concentration__Ki;
            const double var_x32 = var_x31 * mParameters[2];
            const double var_x33 = log(var_x32);
            const double var_x34 = exp(0.089599999999999999 * var_chaste_interface__cell__V - 2.3776144580310881 * var_x33);
            const double var_x35 = 1.0 + var_x34;
            const double var_x36 = mParameters[7] / (210.0 + mParameters[2]);
            const double var_x37 = var_x36 / var_x35;
            const double var_x65 = 26.535875647668394 * var_x33;
            const double var_x66 = -var_x65 + var_chaste_interface__cell__V;
            const double var_x67 = var_x34 * var_x36 * var_x66 / pow(var_x35, 2);
            const double var_x92 = 1 / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai);
            const double var_x93 = var_x18 * var_x92;
            const double var_x102 = var_x20 * var_chaste_interface__fast_transient_outward_K_I__ito_f;
            const double var_x103 = var_x102 * var_x31;
            const double var_x104 = var_x19 * var_x31;
            const double var_x105 = var_x16 * var_x31;
            const double var_x106 = var_x23 * var_x31;
            const double var_x107 = var_x32 * var_x37;
            const double var_x108 = var_x32 * var_x67;
            
            partialF = (0.15528969418303848 * var_x108 - 0.43328597707321004 * var_x104 - 1.7331439082928402 * var_x105 - 1.7331439082928402 * var_x106 - 1.7331439082928402 * var_x107 - 1.7331439082928402 * var_x93 - 0.92671204776418159 * var_x103) * mParameters[5];
        }
        else
        {
            const double y_save = rY[22];
            rY[22] += delta;
            const double temp = EvaluateYDerivative22(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[22])/delta;
            rY[22] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = rY[23];
        // Units: dimensionless; Initial value: 0.00346258606821817
        
        
        // Mathematics
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__ass = 1 / (1.0 + exp(-0.64479166666666676 - 0.10416666666666667 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__aur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / (2.0579999999999998 + 0.49299999999999999 * exp(-0.062899999999999998 * var_chaste_interface__cell__V)); // 1 / millisecond

        return d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__aur;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x275 = exp(-0.062899999999999998 * var_chaste_interface__cell__V);
            const double var_x277 = 1 / (2.0579999999999998 + 0.49299999999999999 * var_x275);
            const double var_x280 = -var_x277;
            
            partialF = var_x280;
        }
        else
        {
            const double y_save = rY[23];
            rY[23] += delta;
            const double temp = EvaluateYDerivative23(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[23])/delta;
            rY[23] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = rY[24];
        // Units: dimensionless; Initial value: 0.955684946168062
        
        
        // Mathematics
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__iss = 1 / (1.0 + exp(7.7962962962962958 + 0.18518518518518517 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__iur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur + var_ultra_rapidly_activating_delayed_rectifier_K_I__iss) / (643.0 + 1000.0 / (1.0 + exp(7.7962962962962958 + 0.18518518518518517 * var_chaste_interface__cell__V))); // 1 / millisecond

        return d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__iur;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x281 = exp(7.7962962962962958 + 0.18518518518518517 * var_chaste_interface__cell__V);
            const double var_x282 = 1.0 + var_x281;
            const double var_x283 = 1 / var_x282;
            const double var_x284 = 1 / (643.0 + 1000.0 * var_x283);
            
            partialF = -var_x284;
        }
        else
        {
            const double y_save = rY[24];
            rY[24] += delta;
            const double temp = EvaluateYDerivative24(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[24])/delta;
            rY[24] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
        // Units: dimensionless; Initial value: 0.287585636847048
        
        
        // Mathematics
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__ass = 1 / (1.0 + exp(-0.64479166666666676 - 0.10416666666666667 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__aKss = (-var_chaste_interface__non_inactivating_steady_state_K_I__aKss + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / (13.17 + 39.299999999999997 * exp(-0.050000000000000003 * var_chaste_interface__cell__V)); // 1 / millisecond

        return d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__aKss;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x288 = exp(-0.050000000000000003 * var_chaste_interface__cell__V);
            const double var_x289 = 1 / (13.17 + 39.299999999999997 * var_x288);
            
            partialF = -var_x289;
        }
        else
        {
            const double y_save = rY[25];
            rY[25] += delta;
            const double temp = EvaluateYDerivative25(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[25])/delta;
            rY[25] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        
        
        // Mathematics
        const double d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__iKss = 0; // 1 / millisecond

        return d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__iKss;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            
            
            partialF = 0;
        }
        else
        {
            const double y_save = rY[26];
            rY[26] += delta;
            const double temp = EvaluateYDerivative26(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[26])/delta;
            rY[26] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 = rY[29];
        // Units: dimensionless; Initial value: 0.00105586824723736
        double var_chaste_interface__rapid_delayed_rectifier_K_I__I_K = rY[30];
        // Units: dimensionless; Initial value: 0.00140618453684944
        
        
        // Mathematics
        const double var_rapid_delayed_rectifier_K_I__alpha_a1 = 0.033500000000000002 * exp(0.0109 * var_chaste_interface__cell__V); // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__alpha_i = 0.070300000000000001 * exp(0.14349999999999999 + 0.0287 * var_chaste_interface__cell__V); // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_a1 = 6.8899999999999994e-5 * exp(-0.041779999999999998 * var_chaste_interface__cell__V); // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_i = 0.0064970000000000002 * exp(-0.16339999999999999 - 0.032680000000000001 * var_chaste_interface__cell__V); // per_millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__O_K = var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 * var_rapid_delayed_rectifier_K_I__alpha_a1 + var_chaste_interface__rapid_delayed_rectifier_K_I__I_K * var_rapid_delayed_rectifier_K_I__beta_i - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__alpha_i - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__beta_a1; // 1 / millisecond

        return d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__O_K;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x292 = exp(-0.041779999999999998 * var_chaste_interface__cell__V);
            const double var_x294 = exp(0.14349999999999999 + 0.0287 * var_chaste_interface__cell__V);
            const double var_x298 = 6.8899999999999994e-5 * var_x292;
            const double var_x299 = 0.070300000000000001 * var_x294;
            
            partialF = -var_x298 - var_x299;
        }
        else
        {
            const double y_save = rY[27];
            rY[27] += delta;
            const double temp = EvaluateYDerivative27(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[27])/delta;
            rY[27] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 = rY[28];
        // Units: dimensionless; Initial value: 0.0011733433957123
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 = rY[29];
        // Units: dimensionless; Initial value: 0.00105586824723736
        double var_chaste_interface__rapid_delayed_rectifier_K_I__I_K = rY[30];
        // Units: dimensionless; Initial value: 0.00140618453684944
        
        
        // Mathematics
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K1 = 0.036777999999999998 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 - 0.023761000000000001 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 + 0.022348 * (1.0 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 - var_chaste_interface__rapid_delayed_rectifier_K_I__I_K - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K) * exp(0.01176 * var_chaste_interface__cell__V) - 0.047002000000000002 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 * exp(-0.063100000000000003 * var_chaste_interface__cell__V); // 1 / millisecond

        return d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K1;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x302 = exp(0.01176 * var_chaste_interface__cell__V);
            const double var_x303 = exp(-0.063100000000000003 * var_chaste_interface__cell__V);
            const double var_x304 = -0.022348 * var_x302;
            
            partialF = -0.023761000000000001 + var_x304 - 0.047002000000000002 * var_x303;
        }
        else
        {
            const double y_save = rY[28];
            rY[28] += delta;
            const double temp = EvaluateYDerivative28(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[28])/delta;
            rY[28] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 = rY[28];
        // Units: dimensionless; Initial value: 0.0011733433957123
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 = rY[29];
        // Units: dimensionless; Initial value: 0.00105586824723736
        
        
        // Mathematics
        const double var_rapid_delayed_rectifier_K_I__alpha_a1 = 0.033500000000000002 * exp(0.0109 * var_chaste_interface__cell__V); // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_a1 = 6.8899999999999994e-5 * exp(-0.041779999999999998 * var_chaste_interface__cell__V); // per_millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K2 = 0.023761000000000001 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 - 0.036777999999999998 * var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 + var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__beta_a1 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 * var_rapid_delayed_rectifier_K_I__alpha_a1; // 1 / millisecond

        return d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K2;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x290 = exp(0.0109 * var_chaste_interface__cell__V);
            const double var_x300 = 0.033500000000000002 * var_x290;
            
            partialF = -0.036777999999999998 - var_x300;
        }
        else
        {
            const double y_save = rY[29];
            rY[29] += delta;
            const double temp = EvaluateYDerivative29(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[29])/delta;
            rY[29] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__rapid_delayed_rectifier_K_I__I_K = rY[30];
        // Units: dimensionless; Initial value: 0.00140618453684944
        
        
        // Mathematics
        const double var_rapid_delayed_rectifier_K_I__alpha_i = 0.070300000000000001 * exp(0.14349999999999999 + 0.0287 * var_chaste_interface__cell__V); // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_i = 0.0064970000000000002 * exp(-0.16339999999999999 - 0.032680000000000001 * var_chaste_interface__cell__V); // per_millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__I_K = var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__alpha_i - var_chaste_interface__rapid_delayed_rectifier_K_I__I_K * var_rapid_delayed_rectifier_K_I__beta_i; // 1 / millisecond

        return d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__I_K;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x296 = exp(-0.16339999999999999 - 0.032680000000000001 * var_chaste_interface__cell__V);
            const double var_x301 = 0.0064970000000000002 * var_x296;
            
            partialF = -var_x301;
        }
        else
        {
            const double y_save = rY[30];
            rY[30] += delta;
            const double temp = EvaluateYDerivative30(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[30])/delta;
            rY[30] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
        // Units: dimensionless; Initial value: 0.00336735013094628
        
        
        // Mathematics
        const double d_dt_chaste_interface_var_slow_delayed_rectifier_K_I__nKs = -9.5333299999999997e-5 * var_chaste_interface__slow_delayed_rectifier_K_I__nKs * exp(-1.0069999999999999 - 0.037999999999999999 * var_chaste_interface__cell__V) + 4.8133299999999997e-6 * (1.0 - var_chaste_interface__slow_delayed_rectifier_K_I__nKs) * (26.5 + var_chaste_interface__cell__V) / (1.0 - exp(-3.3919999999999999 - 0.128 * var_chaste_interface__cell__V)); // 1 / millisecond

        return d_dt_chaste_interface_var_slow_delayed_rectifier_K_I__nKs;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x306 = exp(-3.3919999999999999 - 0.128 * var_chaste_interface__cell__V);
            const double var_x307 = 1.0 - var_x306;
            const double var_x308 = 4.8133299999999997e-6 / var_x307;
            const double var_x309 = exp(-1.0069999999999999 - 0.037999999999999999 * var_chaste_interface__cell__V);
            const double var_x310 = 26.5 + var_chaste_interface__cell__V;
            
            partialF = -9.5333299999999997e-5 * var_x309 - var_x308 * var_x310;
        }
        else
        {
            const double y_save = rY[31];
            rY[31] += delta;
            const double temp = EvaluateYDerivative31(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[31])/delta;
            rY[31] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = rY[32];
        // Units: dimensionless; Initial value: 0.0142335908879204
        
        
        // Mathematics
        const double d_dt_chaste_interface_var_fast_transient_outward_K_I__ato_f = 0.18064 * (1.0 - var_chaste_interface__fast_transient_outward_K_I__ato_f) * exp(1.6096500000000002 + 0.035770000000000003 * var_chaste_interface__cell__V) - 0.39560000000000001 * var_chaste_interface__fast_transient_outward_K_I__ato_f * exp(-2.8066499999999999 - 0.062370000000000002 * var_chaste_interface__cell__V); // 1 / millisecond

        return d_dt_chaste_interface_var_fast_transient_outward_K_I__ato_f;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x311 = exp(1.6096500000000002 + 0.035770000000000003 * var_chaste_interface__cell__V);
            const double var_x312 = exp(-2.8066499999999999 - 0.062370000000000002 * var_chaste_interface__cell__V);
            
            partialF = -0.18064 * var_x311 - 0.39560000000000001 * var_x312;
        }
        else
        {
            const double y_save = rY[32];
            rY[32] += delta;
            const double temp = EvaluateYDerivative32(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[32])/delta;
            rY[32] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = rY[33];
        // Units: dimensionless; Initial value: 0.996989882138174
        
        
        // Mathematics
        const double d_dt_chaste_interface_var_fast_transient_outward_K_I__ito_f = (-var_chaste_interface__fast_transient_outward_K_I__ito_f + 1 / (1.0 + exp(10.279999999999999 + 0.20000000000000001 * var_chaste_interface__cell__V))) / (9.6645000000000003 + 10.936199999999999 / (1.0 + exp(10.279999999999999 + 0.20000000000000001 * var_chaste_interface__cell__V))); // 1 / millisecond

        return d_dt_chaste_interface_var_fast_transient_outward_K_I__ito_f;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x172 = 0.20000000000000001 * var_chaste_interface__cell__V;
            const double var_x313 = exp(10.279999999999999 + var_x172);
            const double var_x314 = 1.0 + var_x313;
            const double var_x315 = 1 / var_x314;
            const double var_x316 = 1 / (9.6645000000000003 + 10.936199999999999 * var_x315);
            
            partialF = -var_x316;
        }
        else
        {
            const double y_save = rY[33];
            rY[33] += delta;
            const double temp = EvaluateYDerivative33(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[33])/delta;
            rY[33] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__slow_transient_outward_K_I__ato_s = rY[34];
        // Units: dimensionless; Initial value: 0.0443263407760382
        
        
        // Mathematics
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__ass = 1 / (1.0 + exp(-0.64479166666666676 - 0.10416666666666667 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_slow_transient_outward_K_I__ato_s = (-var_chaste_interface__slow_transient_outward_K_I__ato_s + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / (2.0579999999999998 + 0.49299999999999999 * exp(-0.062899999999999998 * var_chaste_interface__cell__V)); // 1 / millisecond

        return d_dt_chaste_interface_var_slow_transient_outward_K_I__ato_s;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x275 = exp(-0.062899999999999998 * var_chaste_interface__cell__V);
            const double var_x277 = 1 / (2.0579999999999998 + 0.49299999999999999 * var_x275);
            const double var_x280 = -var_x277;
            
            partialF = var_x280;
        }
        else
        {
            const double y_save = rY[34];
            rY[34] += delta;
            const double temp = EvaluateYDerivative34(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[34])/delta;
            rY[34] = y_save;
        }
        return partialF;
    }
    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluateYDerivative35(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__slow_transient_outward_K_I__ito_s = rY[35];
        // Units: dimensionless; Initial value: 0.887568880831388
        
        
        // Mathematics
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__iss = 1 / (1.0 + exp(7.7962962962962958 + 0.18518518518518517 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_slow_transient_outward_K_I__ito_s = (-var_chaste_interface__slow_transient_outward_K_I__ito_s + var_ultra_rapidly_activating_delayed_rectifier_K_I__iss) / (270.0 + 1050.0 / (1.0 + exp(7.9298245614035094 + 0.17543859649122806 * var_chaste_interface__cell__V))); // 1 / millisecond

        return d_dt_chaste_interface_var_slow_transient_outward_K_I__ito_s;
    }

    double Cellli_mouse_2010FromCellMLGRL2Opt::EvaluatePartialDerivative35(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -78.9452115785979
            
            const double var_x318 = exp(7.9298245614035094 + 0.17543859649122806 * var_chaste_interface__cell__V);
            const double var_x319 = 1.0 + var_x318;
            const double var_x320 = 1 / var_x319;
            const double var_x321 = 1 / (270.0 + 1050.0 * var_x320);
            
            partialF = -var_x321;
        }
        else
        {
            const double y_save = rY[35];
            rY[35] += delta;
            const double temp = EvaluateYDerivative35(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[35])/delta;
            rY[35] = y_save;
        }
        return partialF;
    }

    std::vector<double> Cellli_mouse_2010FromCellMLGRL2Opt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = rY[1];
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = rY[2];
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaJSR = rY[3];
        // Units: micromolar; Initial value: 171.167969039613
        double var_chaste_interface__calcium_fluxes__P_RyR = rY[5];
        // Units: dimensionless; Initial value: 0.000280539508743811
        double var_chaste_interface__ryanodine_receptors__P_O1 = rY[7];
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = rY[8];
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        double var_chaste_interface__L_type_calcium_current__O = rY[10];
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__y_gate = rY[12];
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = rY[13];
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = rY[14];
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__potassium_concentration__Ki = rY[22];
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = rY[25];
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = rY[27];
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = rY[31];
        // Units: dimensionless; Initial value: 0.00336735013094628
        

        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__v1_caff = 10.0; // per_millisecond
        const double var_cell__Acap = 0.00013866; // cm2
        const double var_cell__F = 96.5; // coulomb_per_millimole
        const double var_cell__R = 8.3140000000000001; // joule_per_mole_kelvin
        const double var_cell__T = 308.0; // kelvin
        const double var_L_type_calcium_current__FVRT = var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T); // dimensionless
        const double var_L_type_calcium_current__FVRT_Ca = 2.0 * var_L_type_calcium_current__FVRT; // dimensionless
        const double var_cell__Vss = 2.1999999999999998e-8; // microlitre
        const double var_L_type_calcium_current__i_CaL = ((fabs(var_L_type_calcium_current__FVRT_Ca) > 1.0000000000000001e-5) ? (-2.0 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-var_L_type_calcium_current__FVRT_Ca)) * var_L_type_calcium_current__FVRT_Ca * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate * var_cell__F * var_cell__Vss / ((1.0 - exp(-var_L_type_calcium_current__FVRT_Ca)) * var_cell__Acap * mParameters[5])) : (-2.0000000000000002e-5 * (-var_chaste_interface__calcium_concentration__Cass + mParameters[1] * exp(-1.0000000000000001e-5)) * var_chaste_interface__L_type_calcium_current__O * mParameters[4] * var_chaste_interface__L_type_calcium_current__y_gate * var_cell__F * var_cell__Vss / ((1.0 - exp(-1.0000000000000001e-5)) * var_cell__Acap * mParameters[5]))); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL_converted = HeartConfig::Instance()->GetCapacitance() * var_L_type_calcium_current__i_CaL; // uA_per_cm2
        const double var_cell__prepulses_number = 10000000000.0; // dimensionless
        const double var_chaste_interface__cell__stim_period = 333.33300000000003; // millisecond
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_fast_transient_outward_K_I__E_K = var_cell__R * var_cell__T * log(mParameters[2] / var_chaste_interface__potassium_concentration__Ki) / var_cell__F; // millivolt
        const double var_non_inactivating_steady_state_K_I__i_Kss = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * mParameters[8] * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss_converted = HeartConfig::Instance()->GetCapacitance() * var_non_inactivating_steady_state_K_I__i_Kss; // uA_per_cm2
        const double var_calcium_fluxes__J_rel = ((var_chaste_interface__environment__time < var_cell__prepulses_number * var_chaste_interface__cell__stim_period) ? ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * (var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2) * var_chaste_interface__calcium_fluxes__P_RyR * mParameters[0]) : ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * var_calcium_fluxes__v1_caff)); // micromolar_per_millisecond
        const double var_slow_delayed_rectifier_K_I__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[10]; // picoA_per_picoF
        const double var_slow_delayed_rectifier_K_I__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_slow_delayed_rectifier_K_I__i_Ks; // uA_per_cm2
        const double var_sodium_calcium_exchange_current__K_mAllo = 0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mCai = 3.6000000000000001; // micromolar
        const double var_sodium_calcium_exchange_current__K_mCao = 1400.0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mNai = 12000.0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mNao = 88000.0; // micromolar
        const double var_sodium_calcium_exchange_current__eta = 0.34999999999999998; // dimensionless
        const double var_sodium_calcium_exchange_current__k_sat = 0.27000000000000002; // dimensionless
        const double var_fast_sodium_current__E_Na = var_cell__R * var_cell__T * log((mParameters[3] + 0.1111111111111111 * mParameters[2]) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)) / var_cell__F; // millivolt
        const double var_fast_sodium_current__i_Na = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_chaste_interface__fast_sodium_current__O_Na * mParameters[6]; // picoA_per_picoF
        const double var_fast_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_rapid_delayed_rectifier_K_I__i_Kr = (-var_cell__R * var_cell__T * log((mParameters[2] + 0.020408163265306124 * mParameters[3]) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) / var_cell__F + var_chaste_interface__cell__V) * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * mParameters[9]; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_rapid_delayed_rectifier_K_I__i_Kr; // uA_per_cm2
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] * exp(var_cell__F * var_chaste_interface__cell__V * var_sodium_calcium_exchange_current__eta / (var_cell__R * var_cell__T)) - pow(mParameters[3], 3) * var_calcium_concentration__Cai * exp((-1.0 + var_sodium_calcium_exchange_current__eta) * var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))) * mParameters[11] / ((1.0 + pow(var_sodium_calcium_exchange_current__K_mAllo, 2) / pow(var_calcium_concentration__Cai, 2)) * (1.0 + var_sodium_calcium_exchange_current__k_sat * exp((-1.0 + var_sodium_calcium_exchange_current__eta) * var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))) * (pow(mParameters[3], 3) * var_calcium_concentration__Cai + pow(var_sodium_calcium_exchange_current__K_mNao, 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * mParameters[1] + pow(var_chaste_interface__sodium_concentration__Nai, 3) * var_sodium_calcium_exchange_current__K_mCao + pow(mParameters[3], 3) * (1.0 + pow(var_chaste_interface__sodium_concentration__Nai, 3) / pow(var_sodium_calcium_exchange_current__K_mNai, 3)) * var_sodium_calcium_exchange_current__K_mCai + pow(var_sodium_calcium_exchange_current__K_mNai, 3) * (1.0 + var_calcium_concentration__Cai / var_sodium_calcium_exchange_current__K_mCai) * mParameters[1])); // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX_converted = HeartConfig::Instance()->GetCapacitance() * var_sodium_calcium_exchange_current__i_NCX; // uA_per_cm2
        const double var_time_independent_K_I__i_K1 = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * mParameters[2] * mParameters[7] / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + mParameters[2])); // picoA_per_picoF
        const double var_time_independent_K_I__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_time_independent_K_I__i_K1; // uA_per_cm2

        std::vector<double> dqs(11);
        dqs[0] = var_calcium_fluxes__J_rel;
        dqs[1] = var_chaste_interface__calcium_concentration__Cai_converted;
        dqs[2] = var_L_type_calcium_current__i_CaL_converted;
        dqs[3] = var_fast_sodium_current__i_Na_converted;
        dqs[4] = var_time_independent_K_I__i_K1_converted;
        dqs[5] = var_non_inactivating_steady_state_K_I__i_Kss_converted;
        dqs[6] = var_rapid_delayed_rectifier_K_I__i_Kr_converted;
        dqs[7] = var_slow_delayed_rectifier_K_I__i_Ks_converted;
        dqs[8] = var_sodium_calcium_exchange_current__i_NCX_converted;
        dqs[9] = var_cell__i_Stim_converted;
        dqs[10] = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellli_mouse_2010FromCellMLGRL2Opt>::Initialise(void)
{
    this->mSystemName = "Li_Mouse_2010";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-78.9452115785979);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(9.499150681398009e-05);

    // rY[2]:
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(0.0954184301907784);

    // rY[3]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(171.167969039613);

    // rY[4]:
    this->mVariableNames.push_back("calcium_concentration__CaNSR");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(404.825013216286);

    // rY[5]:
    this->mVariableNames.push_back("calcium_fluxes__P_RyR");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000280539508743811);

    // rY[6]:
    this->mVariableNames.push_back("calcium_fluxes__CaMKt");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.729027738385079);

    // rY[7]:
    this->mVariableNames.push_back("ryanodine_receptors__P_O1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00571393383393735);

    // rY[8]:
    this->mVariableNames.push_back("ryanodine_receptors__P_O2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.09864618235341e-08);

    // rY[9]:
    this->mVariableNames.push_back("ryanodine_receptors__P_C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.565182571165673);

    // rY[10]:
    this->mVariableNames.push_back("L_type_calcium_current__O");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.23713515513533e-06);

    // rY[11]:
    this->mVariableNames.push_back("L_type_calcium_current__I");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.427651445872853);

    // rY[12]:
    this->mVariableNames.push_back("L_type_calcium_current__y_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.845044436980163);

    // rY[13]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(12364.7482121793);

    // rY[14]:
    this->mVariableNames.push_back("fast_sodium_current__O_Na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.46826771436314e-06);

    // rY[15]:
    this->mVariableNames.push_back("fast_sodium_current__C_Na1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000420472760277688);

    // rY[16]:
    this->mVariableNames.push_back("fast_sodium_current__C_Na2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0240114508843199);

    // rY[17]:
    this->mVariableNames.push_back("fast_sodium_current__I1_Na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000517471697712382);

    // rY[18]:
    this->mVariableNames.push_back("fast_sodium_current__I2_Na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.45406116958509e-05);

    // rY[19]:
    this->mVariableNames.push_back("fast_sodium_current__IF_Na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000306123648969581);

    // rY[20]:
    this->mVariableNames.push_back("fast_sodium_current__IC_Na2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0174528857380179);

    // rY[21]:
    this->mVariableNames.push_back("fast_sodium_current__IC_Na3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.402980726914811);

    // rY[22]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(115599.50642567);

    // rY[23]:
    this->mVariableNames.push_back("ultra_rapidly_activating_delayed_rectifier_K_I__aur");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00346258606821817);

    // rY[24]:
    this->mVariableNames.push_back("ultra_rapidly_activating_delayed_rectifier_K_I__iur");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.955684946168062);

    // rY[25]:
    this->mVariableNames.push_back("non_inactivating_steady_state_K_I__aKss");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.287585636847048);

    // rY[26]:
    this->mVariableNames.push_back("non_inactivating_steady_state_K_I__iKss");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[27]:
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_I__O_K");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0131742086125972);

    // rY[28]:
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_I__C_K1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0011733433957123);

    // rY[29]:
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_I__C_K2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00105586824723736);

    // rY[30]:
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_I__I_K");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00140618453684944);

    // rY[31]:
    this->mVariableNames.push_back("slow_delayed_rectifier_K_I__nKs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00336735013094628);

    // rY[32]:
    this->mVariableNames.push_back("fast_transient_outward_K_I__ato_f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0142335908879204);

    // rY[33]:
    this->mVariableNames.push_back("fast_transient_outward_K_I__ito_f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.996989882138174);

    // rY[34]:
    this->mVariableNames.push_back("slow_transient_outward_K_I__ato_s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0443263407760382);

    // rY[35]:
    this->mVariableNames.push_back("slow_transient_outward_K_I__ito_s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.887568880831388);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[1]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[2]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[4]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[5]:
    this->mParameterNames.push_back("membrane_capacitance");
    this->mParameterUnits.push_back("microF_per_cm2");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_non_inactivating_steady_state_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("picoA_per_picoF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("micromolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_concentration");
    this->mDerivedQuantityUnits.push_back("millimolar");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_non_inactivating_steady_state_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellli_mouse_2010FromCellMLGRL2Opt)

