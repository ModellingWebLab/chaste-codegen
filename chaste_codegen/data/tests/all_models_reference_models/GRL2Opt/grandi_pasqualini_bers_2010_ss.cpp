//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: grandi_pasqualini_bers_2010
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: GeneralizedRushLarsenSecondOrderOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "grandi_pasqualini_bers_2010_ss.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<19; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane_potential__V_m)
    {
        const double _offset_0 = var_chaste_interface__membrane_potential__V_m - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane_potential__V_m)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane_potential__V_m>mTableMaxs[0] || var_chaste_interface__membrane_potential__V_m<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables(const Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables&);
    Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables& operator= (const Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables&);
    Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 19;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][19];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(7.4880000000000004 - 0.16722408026755853 * var_chaste_interface__membrane_potential__V_m));

                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(3.0833333333333335 + 0.041666666666666664 * var_chaste_interface__membrane_potential__V_m);

                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__membrane_potential__V_m));

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(5.0 + var_chaste_interface__membrane_potential__V_m) < 6.0000000000337561e-7) ? (1 / (47619047.618779711 * (1.0 - exp(-1.000000000005626e-7)) / (1.0 + exp(-1.000000000005626e-7)) - 833333.33332864498 * (4.9999994000000001 + var_chaste_interface__membrane_potential__V_m) * (-47619047.618779711 * (1.0 - exp(1.000000000005626e-7)) / (1.0 + exp(1.000000000005626e-7)) - 47619047.618779711 * (1.0 - exp(-1.000000000005626e-7)) / (1.0 + exp(-1.000000000005626e-7))))) : (0.035000000000000003 * (1.0 + exp(-0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__membrane_potential__V_m)) * (5.0 + var_chaste_interface__membrane_potential__V_m) / (1.0 - exp(-0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__membrane_potential__V_m))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[3] < 2){
                    double left = _lookup_table_0[i-1][3];
                    double right = _lookup_table_0[i+1][3];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 3 at ["<<i<<"][3] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[3] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[3] >= 2){
                    EXCEPTION("Lookup table 3 at ["<<i<<"][3] has non-finite value: " << val);
                }
                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(3.8888888888888888 + 0.1111111111111111 * var_chaste_interface__membrane_potential__V_m));

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 0.59999999999999998 / (1.0 + exp(2.5 - 0.050000000000000003 * var_chaste_interface__membrane_potential__V_m));

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 0.02 + 0.019699999999999999 * exp(-0.23877882250000002 * pow((1 + 0.068965517241379309 * var_chaste_interface__membrane_potential__V_m), 2));

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-2.0 - 0.20000000000000001 * var_chaste_interface__membrane_potential__V_m));

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 230.0 / (1.0 + exp(2.0 + 0.050000000000000003 * var_chaste_interface__membrane_potential__V_m)) + 3300.0 / ((1.0 + exp(1.2222222222222223 + 0.1111111111111111 * var_chaste_interface__membrane_potential__V_m)) * (1.0 + exp(-2.4444444444444446 - 0.1111111111111111 * var_chaste_interface__membrane_potential__V_m)));

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-0.26666666666666666 - 0.070175438596491224 * var_chaste_interface__membrane_potential__V_m));

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 0.00100999899000101 + 0.00100999899000101 * exp(-0.17252124645892353 - 0.070821529745042494 * var_chaste_interface__membrane_potential__V_m);

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / pow((1.0 + exp(-6.2967884828349945 - 0.11074197120708749 * var_chaste_interface__membrane_potential__V_m)), 2);

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 0.12920000000000001 * exp(-8.682389366752302 * pow((1 + 0.021838829438742085 * var_chaste_interface__membrane_potential__V_m), 2)) + 0.064869999999999997 * exp(-0.0089012876052174655 * pow((-1 + 0.2073398299813394 * var_chaste_interface__membrane_potential__V_m), 2));

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(1.4615384615384615 - 0.076923076923076927 * var_chaste_interface__membrane_potential__V_m));

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 0.5 + 8.5 * exp(-0.81000000000000005 * pow((1 + 0.022222222222222223 * var_chaste_interface__membrane_potential__V_m), 2));

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 0.5 + 9.0 / (1.0 + exp(0.20000000000000001 + 0.066666666666666666 * var_chaste_interface__membrane_potential__V_m));

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(3.8999999999999999 + 0.20000000000000001 * var_chaste_interface__membrane_potential__V_m));

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 7.0 + 85.0 * exp(-7.2727272727272725 * pow((1 + 0.025000000000000001 * var_chaste_interface__membrane_potential__V_m), 2));

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane_potential__V_m = mTableMins[0] + i*mTableSteps[0];
                double val = 30.0 + 800.0 / (1.0 + exp(6.0 + 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m));

                _lookup_table_0[i][18] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[19];

    // Lookup tables
    double (*_lookup_table_0)[19];
    int _lookup_table_0_num_misshit_piecewise[19] = {0};

};

std::shared_ptr<Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables> Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane_potential__stim_amplitude_converted = -9.5 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane_potential__stim_duration = 5.0; // msec
        const double var_chaste_interface__membrane_potential__stim_period = 1000.0; // msec
        const double var_chaste_interface__membrane_potential__stim_start = 100.0; // msec
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane_potential__stim_amplitude_converted),
                var_chaste_interface__membrane_potential__stim_duration,
                var_chaste_interface__membrane_potential__stim_period,
                var_chaste_interface__membrane_potential__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractGeneralizedRushLarsenCardiacCell(
                39,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 5.3480000000000003e-6; // (var_SR_Fluxes__SR_leak_max) [per_msec]
        this->mParameters[1] = 25.0; // (var_parameters__ks) [per_msec]
        this->mParameters[2] = 0.0053114; // (var_parameters__Vmax_SRCaP) [mM_per_msec]
        this->mParameters[3] = 1.0; // (var_Na_Concentrations__conc_clamp) [dimensionless]
        this->mParameters[4] = 15.0; // (var_parameters__Cli) [mM]
        this->mParameters[5] = 1.8; // (var_parameters__Cao) [mM]
        this->mParameters[6] = 150.0; // (var_parameters__Clo) [mM]
        this->mParameters[7] = 5.4000000000000004; // (var_parameters__Ko) [mM]
        this->mParameters[8] = 140.0; // (var_parameters__Nao) [mM]
        this->mParameters[9] = 96485.0; // (var_parameters__Frdy) [coulomb_per_mole]
        this->mParameters[10] = 8314.0; // (var_parameters__R) [joule_per_kelvin_per_kilomole]
        this->mParameters[11] = 0.5; // (var_parameters__pCa_max) [cm_per_sec]
        this->mParameters[12] = 23.0; // (var_parameters__GNa) [mS_per_uF]
        this->mParameters[13] = 0; // (var_I_Na__perc_reduced_inact_for_IpNa) [dimensionless]
        this->mParameters[14] = 0; // (var_I_Na__shift_INa_inact) [mV]
        this->mParameters[15] = 1.0; // (var_I_to__GtoFast_factor) [dimensionless]
        this->mParameters[16] = 0.34999999999999998; // (var_I_Ki__g_ki_factor) [mS_per_uF]
        this->mParameters[17] = 0.035000000000000003; // (var_I_Kr__gkr_max) [mS_per_uF]
        this->mParameters[18] = 1.0; // (var_I_Ks__GKs_factor) [dimensionless]
        this->mParameters[19] = 1.0; // (var_I_to__GtoSlow_factor) [dimensionless]
        this->mParameters[20] = 4.5; // (var_parameters__IbarNCX) [uA_per_uF]
        this->mParameters[21] = 1.8; // (var_parameters__IbarNaK) [uA_per_uF]
        this->mParameters[22] = 1.3809999999999999e-10; // (var_parameters__Cmem) [farad]
        this->mParameters[23] = 310.0; // (var_parameters__Temp) [kelvin]
    }

    Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::~Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt()
    {
    }

    AbstractLookupTableCollection* Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::GetLookupTableCollection()
    {
        return Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance();
    }
    
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Na__m = rY[2];
        // Units: dimensionless; Initial value: 0.00381858135062259
        double var_chaste_interface__I_Na__h = rY[3];
        // Units: dimensionless; Initial value: 0.625086621635645
        double var_chaste_interface__I_Na__j = rY[4];
        // Units: dimensionless; Initial value: 0.62332507235506
        double var_chaste_interface__I_Kr__x_kr = rY[5];
        // Units: dimensionless; Initial value: 0.021733554982663
        double var_chaste_interface__I_Ks__x_ks = rY[6];
        // Units: dimensionless; Initial value: 0.00428981903391989
        double var_chaste_interface__I_to__x_to_s = rY[7];
        // Units: dimensionless; Initial value: 0.000441539203559411
        double var_chaste_interface__I_to__y_to_s = rY[8];
        // Units: dimensionless; Initial value: 0.784875334693892
        double var_chaste_interface__I_to__x_to_f = rY[9];
        // Units: dimensionless; Initial value: 0.000441531250866821
        double var_chaste_interface__I_to__y_to_f = rY[10];
        // Units: dimensionless; Initial value: 0.999995817153572
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
        // Units: dimensionless; Initial value: 0.0246142436477748
        double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
        // Units: dimensionless; Initial value: 0.0152416826209301
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Na_Concentrations__Na_i = rY[35];
        // Units: mM; Initial value: 8.32114502072456
        double var_chaste_interface__K_Concentration__K_i = rY[36];
        // Units: mM; Initial value: 120.0
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        
        // Lookup table indexing
        const bool _oob_0 = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane_potential__V_m);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane_potential__V_m);

        const double var_I_Ca__fcaCaMSL = 0; // dimensionless
        const double var_I_Ca__fcaCaj = 0; // dimensionless
        const double var_I_Kp__kp_kp = _lt_0_row[0]; // dimensionless
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_I_NaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[8])) * exp(-var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)); // dimensionless
        const double var_I_NaK__I_nak_junc = 0.11 * var_I_NaK__fnak * mParameters[21] * mParameters[7] / ((1.0 + 14641.0 / pow(var_chaste_interface__Na_Concentrations__Na_j, 4)) * (1.5 + mParameters[7])); // uA_per_uF
        const double var_I_NaK__I_nak_sl = 0.89000000000000001 * var_I_NaK__fnak * mParameters[21] * mParameters[7] / ((1.0 + 14641.0 / pow(var_chaste_interface__Na_Concentrations__Na_sl, 4)) * (1.5 + mParameters[7])); // uA_per_uF
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_parameters__ecl = log(mParameters[4] / mParameters[6]) / var_parameters__FoRT; // mV
        const double var_parameters__ek = log(mParameters[7] / var_chaste_interface__K_Concentration__K_i) / var_parameters__FoRT; // mV
        const double var_parameters__ena_junc = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_j) / var_parameters__FoRT; // mV
        const double var_parameters__ena_sl = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_sl) / var_parameters__FoRT; // mV
        const double var_I_NCX__I_ncx_junc = 0.11 * pow(1.5700000000000001, var_parameters__Qpow) * (pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] * exp(0.27000000000000002 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) - pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * mParameters[20] / ((1.0 + 0.32000000000000001 * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2)) * (1.3 * pow(var_chaste_interface__Na_Concentrations__Na_j, 3) + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_j) * var_chaste_interface__Ca_Concentrations__Ca_j + 0.0035899999999999999 * pow(mParameters[8], 3) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_Concentrations__Na_j, 3)))); // uA_per_uF
        const double var_I_NCX__I_ncx_sl = 0.89000000000000001 * pow(1.5700000000000001, var_parameters__Qpow) * (pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] * exp(0.27000000000000002 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) - pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * mParameters[20] / ((1.0 + 0.32000000000000001 * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 2)) * (1.3 * pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_sl) * var_chaste_interface__Ca_Concentrations__Ca_sl + 0.0035899999999999999 * pow(mParameters[8], 3) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_Concentrations__Na_sl, 3)))); // uA_per_uF
        const double var_membrane_potential__I_tot = var_I_NCX__I_ncx_junc + var_I_NCX__I_ncx_sl + var_I_NaK__I_nak_junc + var_I_NaK__I_nak_sl + 0.010148299999999999 * var_chaste_interface__membrane_potential__V_m - 0.0089999999999999993 * var_parameters__ecl - 6.567e-5 * var_parameters__ena_junc - 0.00053133 * var_parameters__ena_sl + 0.002 * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Kp__kp_kp + 0.006029375 * (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) / (1.0 + 0.10000000000000001 / var_chaste_interface__Ca_Concentrations__Ca_j) + 0.048783124999999997 * (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) / (1.0 + 0.10000000000000001 / var_chaste_interface__Ca_Concentrations__Ca_sl) - 3.0321500000000001e-5 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_j) / var_parameters__FoRT - 0.00024532850000000001 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_sl) / var_parameters__FoRT + 0.0035000000000000001 * pow(var_chaste_interface__I_Ks__x_ks, 2) * (-log((0.018329999999999999 * mParameters[8] + mParameters[7]) / (0.018329999999999999 * var_chaste_interface__Na_Concentrations__Na_i + var_chaste_interface__K_Concentration__K_i)) / var_parameters__FoRT + var_chaste_interface__membrane_potential__V_m) * mParameters[18] + 0.0074029999999999999 * pow(2.3500000000000001, var_parameters__Qpow) * pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) / (5.2281977629563632e-6 + pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001)) + 0.059896999999999999 * pow(2.3500000000000001, var_parameters__Qpow) * pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) / (5.2281977629563632e-6 + pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001)) + 0.1144 * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * mParameters[15] * var_chaste_interface__I_to__x_to_f * var_chaste_interface__I_to__y_to_f + 0.015599999999999999 * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * mParameters[19] * var_chaste_interface__I_to__x_to_s * var_chaste_interface__I_to__y_to_s + 0.11 * pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * mParameters[12] + 0.45000000000000001 * pow(1.8, var_parameters__Qpow) * (1.0 + 0.099999999999999978 * var_I_Ca__fcaCaMSL + 0.90000000000000002 * var_I_Ca__fcaCaj - 0.099999999999999978 * var_chaste_interface__I_Ca__f_Ca_Bsl - 0.90000000000000002 * var_chaste_interface__I_Ca__f_Ca_Bj) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (1.35e-7 * pow(mParameters[9], 2) * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f + 0.43033148291193518 * sqrt(mParameters[7]) * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * mParameters[17] * var_chaste_interface__I_Kr__x_kr / (_lt_0_row[1]) + 0.89000000000000001 * pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * mParameters[12] + 0.044999999999999991 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f + 0.044999999999999991 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f + 0.40500000000000003 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f + 0.40500000000000003 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f + 0.4389381125701739 * sqrt(mParameters[7]) * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * mParameters[16] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane_potential__V_m - 0.23849999999999999 * var_parameters__ek)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane_potential__V_m - 0.23849999999999999 * var_parameters__ek)) + (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane_potential__V_m - 0.080320000000000003 * var_parameters__ek) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane_potential__V_m - 0.061749999999999999 * var_parameters__ek)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_parameters__ek - 0.51429999999999998 * var_chaste_interface__membrane_potential__V_m)))); // uA_per_uF
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_membrane_potential__I_tot; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        const unsigned v_index = GetVoltageIndex();
        const double delta = 1e-8;
        const double yinit = rY[v_index];

        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Na__m = rY[2];
        // Units: dimensionless; Initial value: 0.00381858135062259
        double var_chaste_interface__I_Na__h = rY[3];
        // Units: dimensionless; Initial value: 0.625086621635645
        double var_chaste_interface__I_Na__j = rY[4];
        // Units: dimensionless; Initial value: 0.62332507235506
        double var_chaste_interface__I_Kr__x_kr = rY[5];
        // Units: dimensionless; Initial value: 0.021733554982663
        double var_chaste_interface__I_Ks__x_ks = rY[6];
        // Units: dimensionless; Initial value: 0.00428981903391989
        double var_chaste_interface__I_to__x_to_s = rY[7];
        // Units: dimensionless; Initial value: 0.000441539203559411
        double var_chaste_interface__I_to__y_to_s = rY[8];
        // Units: dimensionless; Initial value: 0.784875334693892
        double var_chaste_interface__I_to__x_to_f = rY[9];
        // Units: dimensionless; Initial value: 0.000441531250866821
        double var_chaste_interface__I_to__y_to_f = rY[10];
        // Units: dimensionless; Initial value: 0.999995817153572
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
        // Units: dimensionless; Initial value: 0.0246142436477748
        double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
        // Units: dimensionless; Initial value: 0.0152416826209301
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Na_Concentrations__Na_i = rY[35];
        // Units: mM; Initial value: 8.32114502072456
        double var_chaste_interface__K_Concentration__K_i = rY[36];
        // Units: mM; Initial value: 120.0
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        

        // Lookup table indexing
        const bool _oob_0 = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane_potential__V_m);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane_potential__V_m);

        // Mathematics
        double d_dt_chaste_interface_var_membrane_potential__V_m;
        const double var_I_Ca__fcaCaMSL = 0; // dimensionless
        const double var_I_Ca__fcaCaj = 0; // dimensionless
        const double var_I_Kp__kp_kp = _lt_0_row[0]; // dimensionless
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_I_NaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[8])) * exp(-var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)); // dimensionless
        const double var_I_NaK__I_nak_junc = 0.11 * var_I_NaK__fnak * mParameters[21] * mParameters[7] / ((1.0 + 14641.0 / pow(var_chaste_interface__Na_Concentrations__Na_j, 4)) * (1.5 + mParameters[7])); // uA_per_uF
        const double var_I_NaK__I_nak_sl = 0.89000000000000001 * var_I_NaK__fnak * mParameters[21] * mParameters[7] / ((1.0 + 14641.0 / pow(var_chaste_interface__Na_Concentrations__Na_sl, 4)) * (1.5 + mParameters[7])); // uA_per_uF
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_parameters__ecl = log(mParameters[4] / mParameters[6]) / var_parameters__FoRT; // mV
        const double var_parameters__ek = log(mParameters[7] / var_chaste_interface__K_Concentration__K_i) / var_parameters__FoRT; // mV
        const double var_parameters__ena_junc = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_j) / var_parameters__FoRT; // mV
        const double var_parameters__ena_sl = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_sl) / var_parameters__FoRT; // mV
        const double var_I_NCX__I_ncx_junc = 0.11 * pow(1.5700000000000001, var_parameters__Qpow) * (pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] * exp(0.27000000000000002 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) - pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * mParameters[20] / ((1.0 + 0.32000000000000001 * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2)) * (1.3 * pow(var_chaste_interface__Na_Concentrations__Na_j, 3) + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_j) * var_chaste_interface__Ca_Concentrations__Ca_j + 0.0035899999999999999 * pow(mParameters[8], 3) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_Concentrations__Na_j, 3)))); // uA_per_uF
        const double var_I_NCX__I_ncx_sl = 0.89000000000000001 * pow(1.5700000000000001, var_parameters__Qpow) * (pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] * exp(0.27000000000000002 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) - pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * mParameters[20] / ((1.0 + 0.32000000000000001 * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 2)) * (1.3 * pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_sl) * var_chaste_interface__Ca_Concentrations__Ca_sl + 0.0035899999999999999 * pow(mParameters[8], 3) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_Concentrations__Na_sl, 3)))); // uA_per_uF
        const double var_Na_Concentrations__I_Na_tot_junc = 3.0 * var_I_NCX__I_ncx_junc + 3.0 * var_I_NaK__I_nak_junc + 6.567e-5 * var_chaste_interface__membrane_potential__V_m - 6.567e-5 * var_parameters__ena_junc + 0.11 * pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * mParameters[12] + 0.40500000000000003 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f; // uA_per_uF
        const double var_Na_Concentrations__I_Na_tot_sl = 3.0 * var_I_NCX__I_ncx_sl + 3.0 * var_I_NaK__I_nak_sl + 0.00053133 * var_chaste_interface__membrane_potential__V_m - 0.00053133 * var_parameters__ena_sl + 0.89000000000000001 * pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * mParameters[12] + 0.044999999999999991 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f; // uA_per_uF
        const double var_Ca_Concentrations__I_Ca_tot_junc = 6.0643000000000002e-5 * var_chaste_interface__membrane_potential__V_m - 2.0 * var_I_NCX__I_ncx_junc - 3.0321500000000001e-5 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_j) / var_parameters__FoRT + 0.0074029999999999999 * pow(2.3500000000000001, var_parameters__Qpow) * pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) / (5.2281977629563632e-6 + pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001)) + 0.40500000000000003 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f; // uA_per_uF
        const double var_Ca_Concentrations__I_Ca_tot_sl = 0.00049065700000000003 * var_chaste_interface__membrane_potential__V_m - 2.0 * var_I_NCX__I_ncx_sl - 0.00024532850000000001 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_sl) / var_parameters__FoRT + 0.059896999999999999 * pow(2.3500000000000001, var_parameters__Qpow) * pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) / (5.2281977629563632e-6 + pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001)) + 0.044999999999999991 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f; // uA_per_uF
        d_dt_chaste_interface_var_membrane_potential__V_m = -var_Ca_Concentrations__I_Ca_tot_junc - var_Ca_Concentrations__I_Ca_tot_sl - var_Na_Concentrations__I_Na_tot_junc - var_Na_Concentrations__I_Na_tot_sl + 2.0 * var_I_NaK__I_nak_junc + 2.0 * var_I_NaK__I_nak_sl + 0.0089999999999999993 * var_parameters__ecl - 0.0089999999999999993 * var_chaste_interface__membrane_potential__V_m - GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance() - 0.002 * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Kp__kp_kp - 0.006029375 * (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) / (1.0 + 0.10000000000000001 / var_chaste_interface__Ca_Concentrations__Ca_j) - 0.048783124999999997 * (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) / (1.0 + 0.10000000000000001 / var_chaste_interface__Ca_Concentrations__Ca_sl) - 0.0035000000000000001 * pow(var_chaste_interface__I_Ks__x_ks, 2) * (-log((0.018329999999999999 * mParameters[8] + mParameters[7]) / (0.018329999999999999 * var_chaste_interface__Na_Concentrations__Na_i + var_chaste_interface__K_Concentration__K_i)) / var_parameters__FoRT + var_chaste_interface__membrane_potential__V_m) * mParameters[18] - 0.1144 * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * mParameters[15] * var_chaste_interface__I_to__x_to_f * var_chaste_interface__I_to__y_to_f - 0.015599999999999999 * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * mParameters[19] * var_chaste_interface__I_to__x_to_s * var_chaste_interface__I_to__y_to_s - 0.45000000000000001 * pow(1.8, var_parameters__Qpow) * (1.0 + 0.099999999999999978 * var_I_Ca__fcaCaMSL + 0.90000000000000002 * var_I_Ca__fcaCaj - 0.099999999999999978 * var_chaste_interface__I_Ca__f_Ca_Bsl - 0.90000000000000002 * var_chaste_interface__I_Ca__f_Ca_Bj) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (1.35e-7 * pow(mParameters[9], 2) * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f - 0.43033148291193518 * sqrt(mParameters[7]) * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * mParameters[17] * var_chaste_interface__I_Kr__x_kr / (_lt_0_row[1]) - 0.4389381125701739 * sqrt(mParameters[7]) * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * mParameters[16] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane_potential__V_m - 0.23849999999999999 * var_parameters__ek)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane_potential__V_m - 0.23849999999999999 * var_parameters__ek)) + (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane_potential__V_m - 0.080320000000000003 * var_parameters__ek) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane_potential__V_m - 0.061749999999999999 * var_parameters__ek)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_parameters__ek - 0.51429999999999998 * var_chaste_interface__membrane_potential__V_m)))); // mV / msec

        double evalF = d_dt_chaste_interface_var_membrane_potential__V_m;
        mEvalF[0] = d_dt_chaste_interface_var_membrane_potential__V_m;
        double partialF = EvaluatePartialDerivative0(var_chaste_interface__environment__time, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] += 0.5*evalF*mDt;
        }
        else
        {
            rY[v_index] += (evalF/partialF)*(exp(partialF*0.5*mDt)-1.0);
        }

        rY[v_index] = yinit;
        evalF = EvaluateYDerivative0(var_chaste_interface__environment__time, rY);
        mEvalF[0] = evalF;
        partialF = EvaluatePartialDerivative0(var_chaste_interface__environment__time, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] = yinit + evalF*mDt;
        }
        else
        {
            rY[v_index] = yinit + (evalF/partialF)*(exp(partialF*mDt)-1.0);
        }
    }

    void Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        const double delta=1e-8;
        const unsigned size = GetNumberOfStateVariables();
        mYInit = rY;
        double y_save;

        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__I_Na__m = rY[2];
        // Units: dimensionless; Initial value: 0.00381858135062259
        double var_chaste_interface__I_Na__h = rY[3];
        // Units: dimensionless; Initial value: 0.625086621635645
        double var_chaste_interface__I_Na__j = rY[4];
        // Units: dimensionless; Initial value: 0.62332507235506
        double var_chaste_interface__I_Kr__x_kr = rY[5];
        // Units: dimensionless; Initial value: 0.021733554982663
        double var_chaste_interface__I_Ks__x_ks = rY[6];
        // Units: dimensionless; Initial value: 0.00428981903391989
        double var_chaste_interface__I_to__x_to_s = rY[7];
        // Units: dimensionless; Initial value: 0.000441539203559411
        double var_chaste_interface__I_to__y_to_s = rY[8];
        // Units: dimensionless; Initial value: 0.784875334693892
        double var_chaste_interface__I_to__x_to_f = rY[9];
        // Units: dimensionless; Initial value: 0.000441531250866821
        double var_chaste_interface__I_to__y_to_f = rY[10];
        // Units: dimensionless; Initial value: 0.999995817153572
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
        // Units: dimensionless; Initial value: 0.0246142436477748
        double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
        // Units: dimensionless; Initial value: 0.0152416826209301
        double var_chaste_interface__SR_Fluxes__Ry_Rr = rY[15];
        // Units: mM; Initial value: 0.891022230597263
        double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
        // Units: mM; Initial value: 7.37484660389498e-07
        double var_chaste_interface__SR_Fluxes__Ry_Ri = rY[17];
        // Units: mM; Initial value: 9.01984485847386e-08
        double var_chaste_interface__Na_Buffers__Na_Bj = rY[18];
        // Units: mM; Initial value: 3.43545459048316
        double var_chaste_interface__Na_Buffers__Na_Bsl = rY[19];
        // Units: mM; Initial value: 0.749601264899653
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL = rY[20];
        // Units: mM; Initial value: 0.00893708435270205
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc = rY[21];
        // Units: mM; Initial value: 0.117445983314504
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm = rY[22];
        // Units: mM; Initial value: 0.0105996734077994
        double var_chaste_interface__Cytosolic_Ca_Buffers__CaM = rY[23];
        // Units: mM; Initial value: 0.000295653619580701
        double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c = rY[24];
        // Units: mM; Initial value: 0.00192645052472679
        double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m = rY[25];
        // Units: mM; Initial value: 0.137557201546068
        double var_chaste_interface__Cytosolic_Ca_Buffers__SRB = rY[26];
        // Units: mM; Initial value: 0.00217414510791738
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j = rY[27];
        // Units: mM; Initial value: 0.00738583890572642
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl = rY[28];
        // Units: mM; Initial value: 0.00988178900584875
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j = rY[29];
        // Units: mM; Initial value: 0.0734662466011574
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl = rY[30];
        // Units: mM; Initial value: 0.114400081504523
        double var_chaste_interface__SR_Ca_Concentrations__Csqn_b = rY[31];
        // Units: mM; Initial value: 1.19772047585784
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Na_Concentrations__Na_i = rY[35];
        // Units: mM; Initial value: 8.32114502072456
        double var_chaste_interface__K_Concentration__K_i = rY[36];
        // Units: mM; Initial value: 120.0
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        

        // Lookup table indexing
        const bool _oob_0 = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane_potential__V_m);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane_potential__V_m);

        // Mathematics
        double d_dt_chaste_interface_var_membrane_potential__V_m;
        const double d_dt_chaste_interface_var_K_Concentration__K_i = 0; // mM / msec
        const double d_dt_chaste_interface_var_I_Ca__f_Ca_Bj = -0.011900000000000001 * var_chaste_interface__I_Ca__f_Ca_Bj + 1.7 * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj) * var_chaste_interface__Ca_Concentrations__Ca_j; // 1 / msec
        const double d_dt_chaste_interface_var_I_Ca__f_Ca_Bsl = -0.011900000000000001 * var_chaste_interface__I_Ca__f_Ca_Bsl + 1.7 * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl) * var_chaste_interface__Ca_Concentrations__Ca_sl; // 1 / msec
        const double var_I_Ca__fcaCaMSL = 0; // dimensionless
        const double var_I_Ca__fcaCaj = 0; // dimensionless
        const double var_SR_Fluxes__RI = 1.0 - var_chaste_interface__SR_Fluxes__Ry_Ri - var_chaste_interface__SR_Fluxes__Ry_Ro - var_chaste_interface__SR_Fluxes__Ry_Rr; // mM
        const double var_SR_Fluxes__J_SRleak = (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__SR_Ca_Concentrations__Ca_sr) * mParameters[0]; // mM_per_msec
        const double d_dt_chaste_interface_var_I_Ca__d = (-var_chaste_interface__I_Ca__d + _lt_0_row[2]) * _lt_0_row[3]; // 1 / msec
        const double d_dt_chaste_interface_var_I_Ca__f = (_lt_0_row[6]) * (-var_chaste_interface__I_Ca__f + _lt_0_row[4] + _lt_0_row[5]); // 1 / msec
        const double d_dt_chaste_interface_var_I_Kr__x_kr = (-var_chaste_interface__I_Kr__x_kr + _lt_0_row[7]) / (_lt_0_row[8]); // 1 / msec
        const double d_dt_chaste_interface_var_I_Ks__x_ks = (_lt_0_row[10]) * (-var_chaste_interface__I_Ks__x_ks + _lt_0_row[9]); // 1 / msec
        const double d_dt_chaste_interface_var_I_Na__h = (((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0) : (0.057000000000000002 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[14] - 0.14705882352941177 * var_chaste_interface__membrane_potential__V_m))) + ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (5.9230769230769234 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[14] - 0.0900900900900901 * var_chaste_interface__membrane_potential__V_m))) : (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane_potential__V_m - 0.34849999999999998 * mParameters[14]) + 2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane_potential__V_m - 0.079000000000000001 * mParameters[14])))) * (-var_chaste_interface__I_Na__h + 0.01 * mParameters[13] + (1.0 - 0.01 * mParameters[13]) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__membrane_potential__V_m - 0.13458950201884254 * mParameters[14])), 2)); // 1 / msec
        const double d_dt_chaste_interface_var_I_Na__j = (((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0) : ((37.780000000000001 + var_chaste_interface__membrane_potential__V_m) * (-25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane_potential__V_m - 0.24440000000000001 * mParameters[14]) - 6.9480000000000002e-6 * exp(0.043909999999999998 * mParameters[14] - 0.043909999999999998 * var_chaste_interface__membrane_potential__V_m)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane_potential__V_m - 0.311 * mParameters[14])))) + ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane_potential__V_m - 0.057000000000000002 * mParameters[14]) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[14] - 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m))) : (0.024240000000000001 * exp(0.01052 * mParameters[14] - 0.01052 * var_chaste_interface__membrane_potential__V_m) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[14] - 0.13780000000000001 * var_chaste_interface__membrane_potential__V_m))))) * (-var_chaste_interface__I_Na__j + 0.01 * mParameters[13] + (1.0 - 0.01 * mParameters[13]) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__membrane_potential__V_m - 0.13458950201884254 * mParameters[14])), 2)); // 1 / msec
        const double d_dt_chaste_interface_var_I_Na__m = (-var_chaste_interface__I_Na__m + _lt_0_row[11]) / (_lt_0_row[12]); // 1 / msec
        const double var_I_to__xtoss = _lt_0_row[13]; // dimensionless
        const double d_dt_chaste_interface_var_I_to__x_to_f = (-var_chaste_interface__I_to__x_to_f + var_I_to__xtoss) / (_lt_0_row[14]); // 1 / msec
        const double d_dt_chaste_interface_var_I_to__x_to_s = (-var_chaste_interface__I_to__x_to_s + var_I_to__xtoss) / (_lt_0_row[15]); // 1 / msec
        const double var_I_to__ytoss = _lt_0_row[16]; // dimensionless
        const double d_dt_chaste_interface_var_I_to__y_to_f = (-var_chaste_interface__I_to__y_to_f + var_I_to__ytoss) / (_lt_0_row[17]); // 1 / msec
        const double d_dt_chaste_interface_var_I_to__y_to_s = (-var_chaste_interface__I_to__y_to_s + var_I_to__ytoss) / (_lt_0_row[18]); // 1 / msec
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_I_NaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[8])) * exp(-var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)); // dimensionless
        const double var_I_NaK__I_nak_junc = 0.11 * var_I_NaK__fnak * mParameters[21] * mParameters[7] / ((1.0 + 14641.0 / pow(var_chaste_interface__Na_Concentrations__Na_j, 4)) * (1.5 + mParameters[7])); // uA_per_uF
        const double var_I_NaK__I_nak_sl = 0.89000000000000001 * var_I_NaK__fnak * mParameters[21] * mParameters[7] / ((1.0 + 14641.0 / pow(var_chaste_interface__Na_Concentrations__Na_sl, 4)) * (1.5 + mParameters[7])); // uA_per_uF
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_parameters__Vcell = 1.0506250000000001e-11 * M_PI; // liter
        const double var_parameters__Vjunc = 0.00053900000000000009 * var_parameters__Vcell; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double d_dt_chaste_interface_var_Na_Concentrations__Na_i = 1.6385999999999999e-12 * (-var_chaste_interface__Na_Concentrations__Na_i + var_chaste_interface__Na_Concentrations__Na_sl) * mParameters[3] / var_parameters__Vmyo; // mM / msec
        const double var_parameters__Bmax_SLhighj = 0.000165 * var_parameters__Vmyo / var_parameters__Vjunc; // mM
        const double var_parameters__Bmax_SLlowj = 0.00046000000000000001 * var_parameters__Vmyo / var_parameters__Vjunc; // mM
        const double var_parameters__Vsl = 0.02 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_SLhighsl = 0.0134 * var_parameters__Vmyo / var_parameters__Vsl; // mM
        const double var_parameters__Bmax_SLlowsl = 0.037400000000000003 * var_parameters__Vmyo / var_parameters__Vsl; // mM
        const double var_parameters__Vsr = 0.035000000000000003 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_Csqn = 0.14000000000000001 * var_parameters__Vmyo / var_parameters__Vsr; // mM
        const double var_SR_Fluxes__kCaSR = 15.0 - 14.0 / (1.0 + 0.13584112963311223 * pow((1 / var_chaste_interface__SR_Ca_Concentrations__Ca_sr), 2.5)); // dimensionless
        const double var_parameters__ena_junc = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_j) / var_parameters__FoRT; // mV
        const double var_parameters__ena_sl = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_sl) / var_parameters__FoRT; // mV
        const double var_SR_Fluxes__J_serca = pow(2.6000000000000001, var_parameters__Qpow) * (2814485.1633595936 * pow(var_chaste_interface__Ca_Concentrations__Ca_i, 1.7869999999999999) - 0.38742512113256738 * pow(var_chaste_interface__SR_Ca_Concentrations__Ca_sr, 1.7869999999999999)) * mParameters[2] / (1.0 + 0.38742512113256738 * pow(var_chaste_interface__SR_Ca_Concentrations__Ca_sr, 1.7869999999999999) + 2814485.1633595936 * pow(var_chaste_interface__Ca_Concentrations__Ca_i, 1.7869999999999999)); // mM_per_msec
        const double var_SR_Fluxes__kiSRCa = 0.5 * var_SR_Fluxes__kCaSR; // per_mM_per_msec
        const double var_SR_Fluxes__koSRCa = 10.0 / var_SR_Fluxes__kCaSR; // per_mM2_per_msec
        const double d_dt_chaste_interface_var_SR_Fluxes__Ry_Ri = -0.065000000000000002 * var_chaste_interface__SR_Fluxes__Ry_Ri + pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2) * var_SR_Fluxes__RI * var_SR_Fluxes__koSRCa + var_chaste_interface__Ca_Concentrations__Ca_j * var_chaste_interface__SR_Fluxes__Ry_Ro * var_SR_Fluxes__kiSRCa; // mM / msec
        const double d_dt_chaste_interface_var_SR_Fluxes__Ry_Ro = 0.0050000000000000001 * var_chaste_interface__SR_Fluxes__Ry_Ri - 0.059999999999999998 * var_chaste_interface__SR_Fluxes__Ry_Ro + pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2) * var_chaste_interface__SR_Fluxes__Ry_Rr * var_SR_Fluxes__koSRCa - var_chaste_interface__Ca_Concentrations__Ca_j * var_chaste_interface__SR_Fluxes__Ry_Ro * var_SR_Fluxes__kiSRCa; // mM / msec
        const double d_dt_chaste_interface_var_SR_Fluxes__Ry_Rr = 0.059999999999999998 * var_chaste_interface__SR_Fluxes__Ry_Ro + 0.0050000000000000001 * var_SR_Fluxes__RI - pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2) * var_chaste_interface__SR_Fluxes__Ry_Rr * var_SR_Fluxes__koSRCa - var_chaste_interface__Ca_Concentrations__Ca_j * var_chaste_interface__SR_Fluxes__Ry_Rr * var_SR_Fluxes__kiSRCa; // mM / msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__CaM = -0.23799999999999999 * var_chaste_interface__Cytosolic_Ca_Buffers__CaM + 34.0 * (0.024 - var_chaste_interface__Cytosolic_Ca_Buffers__CaM) * var_chaste_interface__Ca_Concentrations__Ca_i; // mM / msec
        const double d_dt_chaste_interface_var_SR_Ca_Concentrations__Csqn_b = -65.0 * var_chaste_interface__SR_Ca_Concentrations__Csqn_b + 100.0 * (-var_chaste_interface__SR_Ca_Concentrations__Csqn_b + var_parameters__Bmax_Csqn) * var_chaste_interface__SR_Ca_Concentrations__Ca_sr; // mM / msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_c = -0.00046000000000000001 * var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c + 13.800000000000001 * (0.14000000000000001 - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m) * var_chaste_interface__Ca_Concentrations__Ca_i; // mM / msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_m = 0.0021979999999999999 - 0.015699999999999999 * var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c - 0.015757 * var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m; // mM / msec
        const double var_Na_Buffers__dNa_Bj_dt = -0.001 * var_chaste_interface__Na_Buffers__Na_Bj + 0.0001 * (7.5609999999999999 - var_chaste_interface__Na_Buffers__Na_Bj) * var_chaste_interface__Na_Concentrations__Na_j; // mM_per_msec
        const double d_dt_chaste_interface_var_Na_Buffers__Na_Bj = var_Na_Buffers__dNa_Bj_dt; // mM / msec
        const double var_Na_Buffers__dNa_Bsl_dt = -0.001 * var_chaste_interface__Na_Buffers__Na_Bsl + 0.0001 * (1.6499999999999999 - var_chaste_interface__Na_Buffers__Na_Bsl) * var_chaste_interface__Na_Concentrations__Na_sl; // mM_per_msec
        const double d_dt_chaste_interface_var_Na_Buffers__Na_Bsl = var_Na_Buffers__dNa_Bsl_dt; // mM / msec
        const double d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_j = -0.029999999999999999 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j + 100.0 * (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j + var_parameters__Bmax_SLhighj) * var_chaste_interface__Ca_Concentrations__Ca_j; // mM / msec
        const double d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_sl = -0.029999999999999999 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl + 100.0 * (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl + var_parameters__Bmax_SLhighsl) * var_chaste_interface__Ca_Concentrations__Ca_sl; // mM / msec
        const double d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_j = -1.3 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j + 100.0 * (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j + var_parameters__Bmax_SLlowj) * var_chaste_interface__Ca_Concentrations__Ca_j; // mM / msec
        const double d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_sl = -1.3 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl + 100.0 * (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl + var_parameters__Bmax_SLlowsl) * var_chaste_interface__Ca_Concentrations__Ca_sl; // mM / msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__SRB = -0.059999999999999998 * var_chaste_interface__Cytosolic_Ca_Buffers__SRB + 100.0 * (0.017100000000000001 - var_chaste_interface__Cytosolic_Ca_Buffers__SRB) * var_chaste_interface__Ca_Concentrations__Ca_i; // mM / msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHc = -3.1999999999999999e-5 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc + 2.3700000000000001 * (0.14000000000000001 - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm) * var_chaste_interface__Ca_Concentrations__Ca_i; // mM / msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHm = 0.00042000000000000007 - 0.0030000000000000001 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc - 0.0063300000000000006 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm; // mM / msec
        const double d_dt_chaste_interface_var_Ca_Concentrations__Ca_i = -0.0026180000000000001 + 0.23799999999999999 * var_chaste_interface__Cytosolic_Ca_Buffers__CaM + 0.059999999999999998 * var_chaste_interface__Cytosolic_Ca_Buffers__SRB + 0.019599999999999999 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL + 0.0063300000000000006 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm + 0.016159999999999997 * var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c + 0.003032 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc + 0.015757 * var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m + 3.2742999999999999e-12 * (-var_chaste_interface__Ca_Concentrations__Ca_i + var_chaste_interface__Ca_Concentrations__Ca_sl) / var_parameters__Vmyo - 34.0 * (0.024 - var_chaste_interface__Cytosolic_Ca_Buffers__CaM) * var_chaste_interface__Ca_Concentrations__Ca_i - 100.0 * (0.017100000000000001 - var_chaste_interface__Cytosolic_Ca_Buffers__SRB) * var_chaste_interface__Ca_Concentrations__Ca_i - 32.700000000000003 * (0.070000000000000007 - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL) * var_chaste_interface__Ca_Concentrations__Ca_i - 2.3700000000000001 * (0.14000000000000001 - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm) * var_chaste_interface__Ca_Concentrations__Ca_i - 13.800000000000001 * (0.14000000000000001 - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m) * var_chaste_interface__Ca_Concentrations__Ca_i - var_SR_Fluxes__J_serca * var_parameters__Vsr / var_parameters__Vmyo; // mM / msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CL = -0.019599999999999999 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL + 32.700000000000003 * (0.070000000000000007 - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL) * var_chaste_interface__Ca_Concentrations__Ca_i; // mM / msec
        const double var_SR_Fluxes__J_SRCarel = (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__SR_Ca_Concentrations__Ca_sr) * var_chaste_interface__SR_Fluxes__Ry_Ro * mParameters[1]; // mM_per_msec
        const double d_dt_chaste_interface_var_SR_Ca_Concentrations__Ca_sr = -var_SR_Fluxes__J_SRCarel + 65.0 * var_chaste_interface__SR_Ca_Concentrations__Csqn_b - 100.0 * (-var_chaste_interface__SR_Ca_Concentrations__Csqn_b + var_parameters__Bmax_Csqn) * var_chaste_interface__SR_Ca_Concentrations__Ca_sr - var_SR_Fluxes__J_SRleak * var_parameters__Vmyo / var_parameters__Vsr + var_SR_Fluxes__J_serca; // mM / msec
        const double var_I_NCX__I_ncx_junc = 0.11 * pow(1.5700000000000001, var_parameters__Qpow) * (pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] * exp(0.27000000000000002 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) - pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * mParameters[20] / ((1.0 + 0.32000000000000001 * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2)) * (1.3 * pow(var_chaste_interface__Na_Concentrations__Na_j, 3) + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_j) * var_chaste_interface__Ca_Concentrations__Ca_j + 0.0035899999999999999 * pow(mParameters[8], 3) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_Concentrations__Na_j, 3)))); // uA_per_uF
        const double var_I_NCX__I_ncx_sl = 0.89000000000000001 * pow(1.5700000000000001, var_parameters__Qpow) * (pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] * exp(0.27000000000000002 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) - pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * mParameters[20] / ((1.0 + 0.32000000000000001 * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 2)) * (1.3 * pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_sl) * var_chaste_interface__Ca_Concentrations__Ca_sl + 0.0035899999999999999 * pow(mParameters[8], 3) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_Concentrations__Na_sl, 3)))); // uA_per_uF
        const double var_Na_Concentrations__I_Na_tot_junc = 3.0 * var_I_NCX__I_ncx_junc + 3.0 * var_I_NaK__I_nak_junc + 6.567e-5 * var_chaste_interface__membrane_potential__V_m - 6.567e-5 * var_parameters__ena_junc + 0.11 * pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * mParameters[12] + 0.40500000000000003 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f; // uA_per_uF
        const double d_dt_chaste_interface_var_Na_Concentrations__Na_j = (-var_Na_Buffers__dNa_Bj_dt + 1.8312999999999999e-14 * (-var_chaste_interface__Na_Concentrations__Na_j + var_chaste_interface__Na_Concentrations__Na_sl) / var_parameters__Vjunc - var_Na_Concentrations__I_Na_tot_junc * mParameters[22] / (mParameters[9] * var_parameters__Vjunc)) * mParameters[3]; // mM / msec
        const double var_Na_Concentrations__I_Na_tot_sl = 3.0 * var_I_NCX__I_ncx_sl + 3.0 * var_I_NaK__I_nak_sl + 0.00053133 * var_chaste_interface__membrane_potential__V_m - 0.00053133 * var_parameters__ena_sl + 0.89000000000000001 * pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * mParameters[12] + 0.044999999999999991 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f; // uA_per_uF
        const double d_dt_chaste_interface_var_Na_Concentrations__Na_sl = (-var_Na_Buffers__dNa_Bsl_dt + 1.6385999999999999e-12 * (-var_chaste_interface__Na_Concentrations__Na_sl + var_chaste_interface__Na_Concentrations__Na_i) / var_parameters__Vsl + 1.8312999999999999e-14 * (-var_chaste_interface__Na_Concentrations__Na_sl + var_chaste_interface__Na_Concentrations__Na_j) / var_parameters__Vsl - var_Na_Concentrations__I_Na_tot_sl * mParameters[22] / (mParameters[9] * var_parameters__Vsl)) * mParameters[3]; // mM / msec
        const double var_Ca_Concentrations__I_Ca_tot_junc = 6.0643000000000002e-5 * var_chaste_interface__membrane_potential__V_m - 2.0 * var_I_NCX__I_ncx_junc - 3.0321500000000001e-5 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_j) / var_parameters__FoRT + 0.0074029999999999999 * pow(2.3500000000000001, var_parameters__Qpow) * pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) / (5.2281977629563632e-6 + pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001)) + 0.40500000000000003 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f; // uA_per_uF
        const double d_dt_chaste_interface_var_Ca_Concentrations__Ca_j = 0.029999999999999999 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j + 1.3 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j + 8.2413000000000004e-13 * (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__Ca_Concentrations__Ca_sl) / var_parameters__Vjunc - 100.0 * (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j + var_parameters__Bmax_SLhighj) * var_chaste_interface__Ca_Concentrations__Ca_j - 100.0 * (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j + var_parameters__Bmax_SLlowj) * var_chaste_interface__Ca_Concentrations__Ca_j + var_SR_Fluxes__J_SRCarel * var_parameters__Vsr / var_parameters__Vjunc + var_SR_Fluxes__J_SRleak * var_parameters__Vmyo / var_parameters__Vjunc - 0.5 * var_Ca_Concentrations__I_Ca_tot_junc * mParameters[22] / (mParameters[9] * var_parameters__Vjunc); // mM / msec
        const double var_Ca_Concentrations__I_Ca_tot_sl = 0.00049065700000000003 * var_chaste_interface__membrane_potential__V_m - 2.0 * var_I_NCX__I_ncx_sl - 0.00024532850000000001 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_sl) / var_parameters__FoRT + 0.059896999999999999 * pow(2.3500000000000001, var_parameters__Qpow) * pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) / (5.2281977629563632e-6 + pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001)) + 0.044999999999999991 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f; // uA_per_uF
        const double d_dt_chaste_interface_var_Ca_Concentrations__Ca_sl = 0.029999999999999999 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl + 1.3 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl + 8.2413000000000004e-13 * (-var_chaste_interface__Ca_Concentrations__Ca_sl + var_chaste_interface__Ca_Concentrations__Ca_j) / var_parameters__Vsl + 3.2742999999999999e-12 * (-var_chaste_interface__Ca_Concentrations__Ca_sl + var_chaste_interface__Ca_Concentrations__Ca_i) / var_parameters__Vsl - 100.0 * (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl + var_parameters__Bmax_SLhighsl) * var_chaste_interface__Ca_Concentrations__Ca_sl - 100.0 * (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl + var_parameters__Bmax_SLlowsl) * var_chaste_interface__Ca_Concentrations__Ca_sl - 0.5 * var_Ca_Concentrations__I_Ca_tot_sl * mParameters[22] / (mParameters[9] * var_parameters__Vsl); // mM / msec

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane_potential__V_m = 0.0;
        }
        else
        {
            const double var_I_Kp__kp_kp = _lt_0_row[0]; // dimensionless
            const double var_parameters__ecl = log(mParameters[4] / mParameters[6]) / var_parameters__FoRT; // mV
            const double var_parameters__ek = log(mParameters[7] / var_chaste_interface__K_Concentration__K_i) / var_parameters__FoRT; // mV
            d_dt_chaste_interface_var_membrane_potential__V_m = -var_Ca_Concentrations__I_Ca_tot_junc - var_Ca_Concentrations__I_Ca_tot_sl - var_Na_Concentrations__I_Na_tot_junc - var_Na_Concentrations__I_Na_tot_sl + 2.0 * var_I_NaK__I_nak_junc + 2.0 * var_I_NaK__I_nak_sl + 0.0089999999999999993 * var_parameters__ecl - 0.0089999999999999993 * var_chaste_interface__membrane_potential__V_m - GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance() - 0.002 * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Kp__kp_kp - 0.006029375 * (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) / (1.0 + 0.10000000000000001 / var_chaste_interface__Ca_Concentrations__Ca_j) - 0.048783124999999997 * (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) / (1.0 + 0.10000000000000001 / var_chaste_interface__Ca_Concentrations__Ca_sl) - 0.0035000000000000001 * pow(var_chaste_interface__I_Ks__x_ks, 2) * (-log((0.018329999999999999 * mParameters[8] + mParameters[7]) / (0.018329999999999999 * var_chaste_interface__Na_Concentrations__Na_i + var_chaste_interface__K_Concentration__K_i)) / var_parameters__FoRT + var_chaste_interface__membrane_potential__V_m) * mParameters[18] - 0.1144 * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * mParameters[15] * var_chaste_interface__I_to__x_to_f * var_chaste_interface__I_to__y_to_f - 0.015599999999999999 * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * mParameters[19] * var_chaste_interface__I_to__x_to_s * var_chaste_interface__I_to__y_to_s - 0.45000000000000001 * pow(1.8, var_parameters__Qpow) * (1.0 + 0.099999999999999978 * var_I_Ca__fcaCaMSL + 0.90000000000000002 * var_I_Ca__fcaCaj - 0.099999999999999978 * var_chaste_interface__I_Ca__f_Ca_Bsl - 0.90000000000000002 * var_chaste_interface__I_Ca__f_Ca_Bj) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (1.35e-7 * pow(mParameters[9], 2) * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f - 0.43033148291193518 * sqrt(mParameters[7]) * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * mParameters[17] * var_chaste_interface__I_Kr__x_kr / (_lt_0_row[1]) - 0.4389381125701739 * sqrt(mParameters[7]) * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * mParameters[16] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane_potential__V_m - 0.23849999999999999 * var_parameters__ek)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane_potential__V_m - 0.23849999999999999 * var_parameters__ek)) + (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane_potential__V_m - 0.080320000000000003 * var_parameters__ek) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane_potential__V_m - 0.061749999999999999 * var_parameters__ek)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_parameters__ek - 0.51429999999999998 * var_chaste_interface__membrane_potential__V_m)))); // mV / msec
        }
        
        mEvalF[0] = d_dt_chaste_interface_var_membrane_potential__V_m;
        mEvalF[1] = d_dt_chaste_interface_var_Ca_Concentrations__Ca_i;
        mEvalF[2] = d_dt_chaste_interface_var_I_Na__m;
        mEvalF[3] = d_dt_chaste_interface_var_I_Na__h;
        mEvalF[4] = d_dt_chaste_interface_var_I_Na__j;
        mEvalF[5] = d_dt_chaste_interface_var_I_Kr__x_kr;
        mEvalF[6] = d_dt_chaste_interface_var_I_Ks__x_ks;
        mEvalF[7] = d_dt_chaste_interface_var_I_to__x_to_s;
        mEvalF[8] = d_dt_chaste_interface_var_I_to__y_to_s;
        mEvalF[9] = d_dt_chaste_interface_var_I_to__x_to_f;
        mEvalF[10] = d_dt_chaste_interface_var_I_to__y_to_f;
        mEvalF[11] = d_dt_chaste_interface_var_I_Ca__d;
        mEvalF[12] = d_dt_chaste_interface_var_I_Ca__f;
        mEvalF[13] = d_dt_chaste_interface_var_I_Ca__f_Ca_Bj;
        mEvalF[14] = d_dt_chaste_interface_var_I_Ca__f_Ca_Bsl;
        mEvalF[15] = d_dt_chaste_interface_var_SR_Fluxes__Ry_Rr;
        mEvalF[16] = d_dt_chaste_interface_var_SR_Fluxes__Ry_Ro;
        mEvalF[17] = d_dt_chaste_interface_var_SR_Fluxes__Ry_Ri;
        mEvalF[18] = d_dt_chaste_interface_var_Na_Buffers__Na_Bj;
        mEvalF[19] = d_dt_chaste_interface_var_Na_Buffers__Na_Bsl;
        mEvalF[20] = d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CL;
        mEvalF[21] = d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHc;
        mEvalF[22] = d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHm;
        mEvalF[23] = d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__CaM;
        mEvalF[24] = d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_c;
        mEvalF[25] = d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_m;
        mEvalF[26] = d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__SRB;
        mEvalF[27] = d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_j;
        mEvalF[28] = d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_sl;
        mEvalF[29] = d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_j;
        mEvalF[30] = d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_sl;
        mEvalF[31] = d_dt_chaste_interface_var_SR_Ca_Concentrations__Csqn_b;
        mEvalF[32] = d_dt_chaste_interface_var_SR_Ca_Concentrations__Ca_sr;
        mEvalF[33] = d_dt_chaste_interface_var_Na_Concentrations__Na_j;
        mEvalF[34] = d_dt_chaste_interface_var_Na_Concentrations__Na_sl;
        mEvalF[35] = d_dt_chaste_interface_var_Na_Concentrations__Na_i;
        mEvalF[36] = d_dt_chaste_interface_var_K_Concentration__K_i;
        mEvalF[37] = d_dt_chaste_interface_var_Ca_Concentrations__Ca_j;
        mEvalF[38] = d_dt_chaste_interface_var_Ca_Concentrations__Ca_sl;

        
        mPartialF[0] = EvaluatePartialDerivative0(var_chaste_interface__environment__time, rY, delta);
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__environment__time, rY, delta);
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__environment__time, rY, delta);
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__environment__time, rY, delta);
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__environment__time, rY, delta);
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__environment__time, rY, delta);
        mPartialF[6] = EvaluatePartialDerivative6(var_chaste_interface__environment__time, rY, delta);
        mPartialF[7] = EvaluatePartialDerivative7(var_chaste_interface__environment__time, rY, delta);
        mPartialF[8] = EvaluatePartialDerivative8(var_chaste_interface__environment__time, rY, delta);
        mPartialF[9] = EvaluatePartialDerivative9(var_chaste_interface__environment__time, rY, delta);
        mPartialF[10] = EvaluatePartialDerivative10(var_chaste_interface__environment__time, rY, delta);
        mPartialF[11] = EvaluatePartialDerivative11(var_chaste_interface__environment__time, rY, delta);
        mPartialF[12] = EvaluatePartialDerivative12(var_chaste_interface__environment__time, rY, delta);
        mPartialF[13] = EvaluatePartialDerivative13(var_chaste_interface__environment__time, rY, delta);
        mPartialF[14] = EvaluatePartialDerivative14(var_chaste_interface__environment__time, rY, delta);
        mPartialF[15] = EvaluatePartialDerivative15(var_chaste_interface__environment__time, rY, delta);
        mPartialF[16] = EvaluatePartialDerivative16(var_chaste_interface__environment__time, rY, delta);
        mPartialF[17] = EvaluatePartialDerivative17(var_chaste_interface__environment__time, rY, delta);
        mPartialF[18] = EvaluatePartialDerivative18(var_chaste_interface__environment__time, rY, delta);
        mPartialF[19] = EvaluatePartialDerivative19(var_chaste_interface__environment__time, rY, delta);
        mPartialF[20] = EvaluatePartialDerivative20(var_chaste_interface__environment__time, rY, delta);
        mPartialF[21] = EvaluatePartialDerivative21(var_chaste_interface__environment__time, rY, delta);
        mPartialF[22] = EvaluatePartialDerivative22(var_chaste_interface__environment__time, rY, delta);
        mPartialF[23] = EvaluatePartialDerivative23(var_chaste_interface__environment__time, rY, delta);
        mPartialF[24] = EvaluatePartialDerivative24(var_chaste_interface__environment__time, rY, delta);
        mPartialF[25] = EvaluatePartialDerivative25(var_chaste_interface__environment__time, rY, delta);
        mPartialF[26] = EvaluatePartialDerivative26(var_chaste_interface__environment__time, rY, delta);
        mPartialF[27] = EvaluatePartialDerivative27(var_chaste_interface__environment__time, rY, delta);
        mPartialF[28] = EvaluatePartialDerivative28(var_chaste_interface__environment__time, rY, delta);
        mPartialF[29] = EvaluatePartialDerivative29(var_chaste_interface__environment__time, rY, delta);
        mPartialF[30] = EvaluatePartialDerivative30(var_chaste_interface__environment__time, rY, delta);
        mPartialF[31] = EvaluatePartialDerivative31(var_chaste_interface__environment__time, rY, delta);
        mPartialF[32] = EvaluatePartialDerivative32(var_chaste_interface__environment__time, rY, delta);
        mPartialF[33] = EvaluatePartialDerivative33(var_chaste_interface__environment__time, rY, delta);
        mPartialF[34] = EvaluatePartialDerivative34(var_chaste_interface__environment__time, rY, delta);
        mPartialF[35] = EvaluatePartialDerivative35(var_chaste_interface__environment__time, rY, delta);
        mPartialF[36] = EvaluatePartialDerivative36(var_chaste_interface__environment__time, rY, delta);
        mPartialF[37] = EvaluatePartialDerivative37(var_chaste_interface__environment__time, rY, delta);
        mPartialF[38] = EvaluatePartialDerivative38(var_chaste_interface__environment__time, rY, delta);
        for (unsigned var=0; var<size; var++)
        {
            if (var == 0) continue;
            if (fabs(mPartialF[var]) < delta)
            {
                rY[var] = mYInit[var] + 0.5*mDt*mEvalF[var];
            }
            else
            {
                rY[var] = mYInit[var] + (mEvalF[var]/mPartialF[var])*(exp(mPartialF[var]*0.5*mDt)-1.0);
            }
            
        }
        
        
        y_save = rY[1];
        rY[1] = mYInit[1];
        mEvalF[1] = EvaluateYDerivative1(var_chaste_interface__environment__time, rY);
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__environment__time, rY, delta);
        rY[1] = y_save;
        
        
        y_save = rY[2];
        rY[2] = mYInit[2];
        mEvalF[2] = EvaluateYDerivative2(var_chaste_interface__environment__time, rY);
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__environment__time, rY, delta);
        rY[2] = y_save;
        
        
        y_save = rY[3];
        rY[3] = mYInit[3];
        mEvalF[3] = EvaluateYDerivative3(var_chaste_interface__environment__time, rY);
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__environment__time, rY, delta);
        rY[3] = y_save;
        
        
        y_save = rY[4];
        rY[4] = mYInit[4];
        mEvalF[4] = EvaluateYDerivative4(var_chaste_interface__environment__time, rY);
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__environment__time, rY, delta);
        rY[4] = y_save;
        
        
        y_save = rY[5];
        rY[5] = mYInit[5];
        mEvalF[5] = EvaluateYDerivative5(var_chaste_interface__environment__time, rY);
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__environment__time, rY, delta);
        rY[5] = y_save;
        
        
        y_save = rY[6];
        rY[6] = mYInit[6];
        mEvalF[6] = EvaluateYDerivative6(var_chaste_interface__environment__time, rY);
        mPartialF[6] = EvaluatePartialDerivative6(var_chaste_interface__environment__time, rY, delta);
        rY[6] = y_save;
        
        
        y_save = rY[7];
        rY[7] = mYInit[7];
        mEvalF[7] = EvaluateYDerivative7(var_chaste_interface__environment__time, rY);
        mPartialF[7] = EvaluatePartialDerivative7(var_chaste_interface__environment__time, rY, delta);
        rY[7] = y_save;
        
        
        y_save = rY[8];
        rY[8] = mYInit[8];
        mEvalF[8] = EvaluateYDerivative8(var_chaste_interface__environment__time, rY);
        mPartialF[8] = EvaluatePartialDerivative8(var_chaste_interface__environment__time, rY, delta);
        rY[8] = y_save;
        
        
        y_save = rY[9];
        rY[9] = mYInit[9];
        mEvalF[9] = EvaluateYDerivative9(var_chaste_interface__environment__time, rY);
        mPartialF[9] = EvaluatePartialDerivative9(var_chaste_interface__environment__time, rY, delta);
        rY[9] = y_save;
        
        
        y_save = rY[10];
        rY[10] = mYInit[10];
        mEvalF[10] = EvaluateYDerivative10(var_chaste_interface__environment__time, rY);
        mPartialF[10] = EvaluatePartialDerivative10(var_chaste_interface__environment__time, rY, delta);
        rY[10] = y_save;
        
        
        y_save = rY[11];
        rY[11] = mYInit[11];
        mEvalF[11] = EvaluateYDerivative11(var_chaste_interface__environment__time, rY);
        mPartialF[11] = EvaluatePartialDerivative11(var_chaste_interface__environment__time, rY, delta);
        rY[11] = y_save;
        
        
        y_save = rY[12];
        rY[12] = mYInit[12];
        mEvalF[12] = EvaluateYDerivative12(var_chaste_interface__environment__time, rY);
        mPartialF[12] = EvaluatePartialDerivative12(var_chaste_interface__environment__time, rY, delta);
        rY[12] = y_save;
        
        
        y_save = rY[13];
        rY[13] = mYInit[13];
        mEvalF[13] = EvaluateYDerivative13(var_chaste_interface__environment__time, rY);
        mPartialF[13] = EvaluatePartialDerivative13(var_chaste_interface__environment__time, rY, delta);
        rY[13] = y_save;
        
        
        y_save = rY[14];
        rY[14] = mYInit[14];
        mEvalF[14] = EvaluateYDerivative14(var_chaste_interface__environment__time, rY);
        mPartialF[14] = EvaluatePartialDerivative14(var_chaste_interface__environment__time, rY, delta);
        rY[14] = y_save;
        
        
        y_save = rY[15];
        rY[15] = mYInit[15];
        mEvalF[15] = EvaluateYDerivative15(var_chaste_interface__environment__time, rY);
        mPartialF[15] = EvaluatePartialDerivative15(var_chaste_interface__environment__time, rY, delta);
        rY[15] = y_save;
        
        
        y_save = rY[16];
        rY[16] = mYInit[16];
        mEvalF[16] = EvaluateYDerivative16(var_chaste_interface__environment__time, rY);
        mPartialF[16] = EvaluatePartialDerivative16(var_chaste_interface__environment__time, rY, delta);
        rY[16] = y_save;
        
        
        y_save = rY[17];
        rY[17] = mYInit[17];
        mEvalF[17] = EvaluateYDerivative17(var_chaste_interface__environment__time, rY);
        mPartialF[17] = EvaluatePartialDerivative17(var_chaste_interface__environment__time, rY, delta);
        rY[17] = y_save;
        
        
        y_save = rY[18];
        rY[18] = mYInit[18];
        mEvalF[18] = EvaluateYDerivative18(var_chaste_interface__environment__time, rY);
        mPartialF[18] = EvaluatePartialDerivative18(var_chaste_interface__environment__time, rY, delta);
        rY[18] = y_save;
        
        
        y_save = rY[19];
        rY[19] = mYInit[19];
        mEvalF[19] = EvaluateYDerivative19(var_chaste_interface__environment__time, rY);
        mPartialF[19] = EvaluatePartialDerivative19(var_chaste_interface__environment__time, rY, delta);
        rY[19] = y_save;
        
        
        y_save = rY[20];
        rY[20] = mYInit[20];
        mEvalF[20] = EvaluateYDerivative20(var_chaste_interface__environment__time, rY);
        mPartialF[20] = EvaluatePartialDerivative20(var_chaste_interface__environment__time, rY, delta);
        rY[20] = y_save;
        
        
        y_save = rY[21];
        rY[21] = mYInit[21];
        mEvalF[21] = EvaluateYDerivative21(var_chaste_interface__environment__time, rY);
        mPartialF[21] = EvaluatePartialDerivative21(var_chaste_interface__environment__time, rY, delta);
        rY[21] = y_save;
        
        
        y_save = rY[22];
        rY[22] = mYInit[22];
        mEvalF[22] = EvaluateYDerivative22(var_chaste_interface__environment__time, rY);
        mPartialF[22] = EvaluatePartialDerivative22(var_chaste_interface__environment__time, rY, delta);
        rY[22] = y_save;
        
        
        y_save = rY[23];
        rY[23] = mYInit[23];
        mEvalF[23] = EvaluateYDerivative23(var_chaste_interface__environment__time, rY);
        mPartialF[23] = EvaluatePartialDerivative23(var_chaste_interface__environment__time, rY, delta);
        rY[23] = y_save;
        
        
        y_save = rY[24];
        rY[24] = mYInit[24];
        mEvalF[24] = EvaluateYDerivative24(var_chaste_interface__environment__time, rY);
        mPartialF[24] = EvaluatePartialDerivative24(var_chaste_interface__environment__time, rY, delta);
        rY[24] = y_save;
        
        
        y_save = rY[25];
        rY[25] = mYInit[25];
        mEvalF[25] = EvaluateYDerivative25(var_chaste_interface__environment__time, rY);
        mPartialF[25] = EvaluatePartialDerivative25(var_chaste_interface__environment__time, rY, delta);
        rY[25] = y_save;
        
        
        y_save = rY[26];
        rY[26] = mYInit[26];
        mEvalF[26] = EvaluateYDerivative26(var_chaste_interface__environment__time, rY);
        mPartialF[26] = EvaluatePartialDerivative26(var_chaste_interface__environment__time, rY, delta);
        rY[26] = y_save;
        
        
        y_save = rY[27];
        rY[27] = mYInit[27];
        mEvalF[27] = EvaluateYDerivative27(var_chaste_interface__environment__time, rY);
        mPartialF[27] = EvaluatePartialDerivative27(var_chaste_interface__environment__time, rY, delta);
        rY[27] = y_save;
        
        
        y_save = rY[28];
        rY[28] = mYInit[28];
        mEvalF[28] = EvaluateYDerivative28(var_chaste_interface__environment__time, rY);
        mPartialF[28] = EvaluatePartialDerivative28(var_chaste_interface__environment__time, rY, delta);
        rY[28] = y_save;
        
        
        y_save = rY[29];
        rY[29] = mYInit[29];
        mEvalF[29] = EvaluateYDerivative29(var_chaste_interface__environment__time, rY);
        mPartialF[29] = EvaluatePartialDerivative29(var_chaste_interface__environment__time, rY, delta);
        rY[29] = y_save;
        
        
        y_save = rY[30];
        rY[30] = mYInit[30];
        mEvalF[30] = EvaluateYDerivative30(var_chaste_interface__environment__time, rY);
        mPartialF[30] = EvaluatePartialDerivative30(var_chaste_interface__environment__time, rY, delta);
        rY[30] = y_save;
        
        
        y_save = rY[31];
        rY[31] = mYInit[31];
        mEvalF[31] = EvaluateYDerivative31(var_chaste_interface__environment__time, rY);
        mPartialF[31] = EvaluatePartialDerivative31(var_chaste_interface__environment__time, rY, delta);
        rY[31] = y_save;
        
        
        y_save = rY[32];
        rY[32] = mYInit[32];
        mEvalF[32] = EvaluateYDerivative32(var_chaste_interface__environment__time, rY);
        mPartialF[32] = EvaluatePartialDerivative32(var_chaste_interface__environment__time, rY, delta);
        rY[32] = y_save;
        
        
        y_save = rY[33];
        rY[33] = mYInit[33];
        mEvalF[33] = EvaluateYDerivative33(var_chaste_interface__environment__time, rY);
        mPartialF[33] = EvaluatePartialDerivative33(var_chaste_interface__environment__time, rY, delta);
        rY[33] = y_save;
        
        
        y_save = rY[34];
        rY[34] = mYInit[34];
        mEvalF[34] = EvaluateYDerivative34(var_chaste_interface__environment__time, rY);
        mPartialF[34] = EvaluatePartialDerivative34(var_chaste_interface__environment__time, rY, delta);
        rY[34] = y_save;
        
        
        y_save = rY[35];
        rY[35] = mYInit[35];
        mEvalF[35] = EvaluateYDerivative35(var_chaste_interface__environment__time, rY);
        mPartialF[35] = EvaluatePartialDerivative35(var_chaste_interface__environment__time, rY, delta);
        rY[35] = y_save;
        
        
        y_save = rY[36];
        rY[36] = mYInit[36];
        mEvalF[36] = EvaluateYDerivative36(var_chaste_interface__environment__time, rY);
        mPartialF[36] = EvaluatePartialDerivative36(var_chaste_interface__environment__time, rY, delta);
        rY[36] = y_save;
        
        
        y_save = rY[37];
        rY[37] = mYInit[37];
        mEvalF[37] = EvaluateYDerivative37(var_chaste_interface__environment__time, rY);
        mPartialF[37] = EvaluatePartialDerivative37(var_chaste_interface__environment__time, rY, delta);
        rY[37] = y_save;
        
        
        y_save = rY[38];
        rY[38] = mYInit[38];
        mEvalF[38] = EvaluateYDerivative38(var_chaste_interface__environment__time, rY);
        mPartialF[38] = EvaluatePartialDerivative38(var_chaste_interface__environment__time, rY, delta);
        rY[38] = y_save;
                
        for (unsigned var=0; var<size; var++)
        {
            if (var == 0) continue;
            if (fabs(mPartialF[var]) < delta)
            {
                rY[var] = mYInit[var] + mDt*mEvalF[var];
            }
            else
            {
                rY[var] = mYInit[var] + (mEvalF[var]/mPartialF[var])*(exp(mPartialF[var]*mDt)-1.0);
            }
            
        }


    }
   
    
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        double d_dt_chaste_interface_var_membrane_potential__V_m;
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Na__m = rY[2];
        // Units: dimensionless; Initial value: 0.00381858135062259
        double var_chaste_interface__I_Na__h = rY[3];
        // Units: dimensionless; Initial value: 0.625086621635645
        double var_chaste_interface__I_Na__j = rY[4];
        // Units: dimensionless; Initial value: 0.62332507235506
        double var_chaste_interface__I_Kr__x_kr = rY[5];
        // Units: dimensionless; Initial value: 0.021733554982663
        double var_chaste_interface__I_Ks__x_ks = rY[6];
        // Units: dimensionless; Initial value: 0.00428981903391989
        double var_chaste_interface__I_to__x_to_s = rY[7];
        // Units: dimensionless; Initial value: 0.000441539203559411
        double var_chaste_interface__I_to__y_to_s = rY[8];
        // Units: dimensionless; Initial value: 0.784875334693892
        double var_chaste_interface__I_to__x_to_f = rY[9];
        // Units: dimensionless; Initial value: 0.000441531250866821
        double var_chaste_interface__I_to__y_to_f = rY[10];
        // Units: dimensionless; Initial value: 0.999995817153572
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
        // Units: dimensionless; Initial value: 0.0246142436477748
        double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
        // Units: dimensionless; Initial value: 0.0152416826209301
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Na_Concentrations__Na_i = rY[35];
        // Units: mM; Initial value: 8.32114502072456
        double var_chaste_interface__K_Concentration__K_i = rY[36];
        // Units: mM; Initial value: 120.0
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        

        // Lookup table indexing
        const bool _oob_0 = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane_potential__V_m);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane_potential__V_m);

        // Mathematics
        const double var_I_Ca__fcaCaMSL = 0; // dimensionless
        const double var_I_Ca__fcaCaj = 0; // dimensionless
        const double var_I_Kp__kp_kp = _lt_0_row[0]; // dimensionless
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_I_NaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[8])) * exp(-var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)); // dimensionless
        const double var_I_NaK__I_nak_junc = 0.11 * var_I_NaK__fnak * mParameters[21] * mParameters[7] / ((1.0 + 14641.0 / pow(var_chaste_interface__Na_Concentrations__Na_j, 4)) * (1.5 + mParameters[7])); // uA_per_uF
        const double var_I_NaK__I_nak_sl = 0.89000000000000001 * var_I_NaK__fnak * mParameters[21] * mParameters[7] / ((1.0 + 14641.0 / pow(var_chaste_interface__Na_Concentrations__Na_sl, 4)) * (1.5 + mParameters[7])); // uA_per_uF
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_parameters__ecl = log(mParameters[4] / mParameters[6]) / var_parameters__FoRT; // mV
        const double var_parameters__ek = log(mParameters[7] / var_chaste_interface__K_Concentration__K_i) / var_parameters__FoRT; // mV
        const double var_parameters__ena_junc = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_j) / var_parameters__FoRT; // mV
        const double var_parameters__ena_sl = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_sl) / var_parameters__FoRT; // mV
        const double var_I_NCX__I_ncx_junc = 0.11 * pow(1.5700000000000001, var_parameters__Qpow) * (pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] * exp(0.27000000000000002 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) - pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * mParameters[20] / ((1.0 + 0.32000000000000001 * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2)) * (1.3 * pow(var_chaste_interface__Na_Concentrations__Na_j, 3) + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_j) * var_chaste_interface__Ca_Concentrations__Ca_j + 0.0035899999999999999 * pow(mParameters[8], 3) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_Concentrations__Na_j, 3)))); // uA_per_uF
        const double var_I_NCX__I_ncx_sl = 0.89000000000000001 * pow(1.5700000000000001, var_parameters__Qpow) * (pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] * exp(0.27000000000000002 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) - pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * mParameters[20] / ((1.0 + 0.32000000000000001 * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 2)) * (1.3 * pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_sl) * var_chaste_interface__Ca_Concentrations__Ca_sl + 0.0035899999999999999 * pow(mParameters[8], 3) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_Concentrations__Na_sl, 3)))); // uA_per_uF
        const double var_Na_Concentrations__I_Na_tot_junc = 3.0 * var_I_NCX__I_ncx_junc + 3.0 * var_I_NaK__I_nak_junc + 6.567e-5 * var_chaste_interface__membrane_potential__V_m - 6.567e-5 * var_parameters__ena_junc + 0.11 * pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * mParameters[12] + 0.40500000000000003 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f; // uA_per_uF
        const double var_Na_Concentrations__I_Na_tot_sl = 3.0 * var_I_NCX__I_ncx_sl + 3.0 * var_I_NaK__I_nak_sl + 0.00053133 * var_chaste_interface__membrane_potential__V_m - 0.00053133 * var_parameters__ena_sl + 0.89000000000000001 * pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * mParameters[12] + 0.044999999999999991 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f; // uA_per_uF
        const double var_Ca_Concentrations__I_Ca_tot_junc = 6.0643000000000002e-5 * var_chaste_interface__membrane_potential__V_m - 2.0 * var_I_NCX__I_ncx_junc - 3.0321500000000001e-5 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_j) / var_parameters__FoRT + 0.0074029999999999999 * pow(2.3500000000000001, var_parameters__Qpow) * pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) / (5.2281977629563632e-6 + pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001)) + 0.40500000000000003 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f; // uA_per_uF
        const double var_Ca_Concentrations__I_Ca_tot_sl = 0.00049065700000000003 * var_chaste_interface__membrane_potential__V_m - 2.0 * var_I_NCX__I_ncx_sl - 0.00024532850000000001 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_sl) / var_parameters__FoRT + 0.059896999999999999 * pow(2.3500000000000001, var_parameters__Qpow) * pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) / (5.2281977629563632e-6 + pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001)) + 0.044999999999999991 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f; // uA_per_uF
        d_dt_chaste_interface_var_membrane_potential__V_m = -var_Ca_Concentrations__I_Ca_tot_junc - var_Ca_Concentrations__I_Ca_tot_sl - var_Na_Concentrations__I_Na_tot_junc - var_Na_Concentrations__I_Na_tot_sl + 2.0 * var_I_NaK__I_nak_junc + 2.0 * var_I_NaK__I_nak_sl + 0.0089999999999999993 * var_parameters__ecl - 0.0089999999999999993 * var_chaste_interface__membrane_potential__V_m - GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance() - 0.002 * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Kp__kp_kp - 0.006029375 * (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) / (1.0 + 0.10000000000000001 / var_chaste_interface__Ca_Concentrations__Ca_j) - 0.048783124999999997 * (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) / (1.0 + 0.10000000000000001 / var_chaste_interface__Ca_Concentrations__Ca_sl) - 0.0035000000000000001 * pow(var_chaste_interface__I_Ks__x_ks, 2) * (-log((0.018329999999999999 * mParameters[8] + mParameters[7]) / (0.018329999999999999 * var_chaste_interface__Na_Concentrations__Na_i + var_chaste_interface__K_Concentration__K_i)) / var_parameters__FoRT + var_chaste_interface__membrane_potential__V_m) * mParameters[18] - 0.1144 * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * mParameters[15] * var_chaste_interface__I_to__x_to_f * var_chaste_interface__I_to__y_to_f - 0.015599999999999999 * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * mParameters[19] * var_chaste_interface__I_to__x_to_s * var_chaste_interface__I_to__y_to_s - 0.45000000000000001 * pow(1.8, var_parameters__Qpow) * (1.0 + 0.099999999999999978 * var_I_Ca__fcaCaMSL + 0.90000000000000002 * var_I_Ca__fcaCaj - 0.099999999999999978 * var_chaste_interface__I_Ca__f_Ca_Bsl - 0.90000000000000002 * var_chaste_interface__I_Ca__f_Ca_Bj) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (1.35e-7 * pow(mParameters[9], 2) * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f - 0.43033148291193518 * sqrt(mParameters[7]) * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * mParameters[17] * var_chaste_interface__I_Kr__x_kr / (_lt_0_row[1]) - 0.4389381125701739 * sqrt(mParameters[7]) * (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * mParameters[16] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane_potential__V_m - 0.23849999999999999 * var_parameters__ek)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane_potential__V_m - 0.23849999999999999 * var_parameters__ek)) + (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane_potential__V_m - 0.080320000000000003 * var_parameters__ek) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane_potential__V_m - 0.061749999999999999 * var_parameters__ek)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_parameters__ek - 0.51429999999999998 * var_chaste_interface__membrane_potential__V_m)))); // mV / msec

        return d_dt_chaste_interface_var_membrane_potential__V_m;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            double var_chaste_interface__I_Na__m = rY[2];
            // Units: dimensionless; Initial value: 0.00381858135062259
            double var_chaste_interface__I_Na__h = rY[3];
            // Units: dimensionless; Initial value: 0.625086621635645
            double var_chaste_interface__I_Na__j = rY[4];
            // Units: dimensionless; Initial value: 0.62332507235506
            double var_chaste_interface__I_Kr__x_kr = rY[5];
            // Units: dimensionless; Initial value: 0.021733554982663
            double var_chaste_interface__I_Ks__x_ks = rY[6];
            // Units: dimensionless; Initial value: 0.00428981903391989
            double var_chaste_interface__I_to__x_to_s = rY[7];
            // Units: dimensionless; Initial value: 0.000441539203559411
            double var_chaste_interface__I_to__y_to_s = rY[8];
            // Units: dimensionless; Initial value: 0.784875334693892
            double var_chaste_interface__I_to__x_to_f = rY[9];
            // Units: dimensionless; Initial value: 0.000441531250866821
            double var_chaste_interface__I_to__y_to_f = rY[10];
            // Units: dimensionless; Initial value: 0.999995817153572
            double var_chaste_interface__I_Ca__d = rY[11];
            // Units: dimensionless; Initial value: 2.93982287251302e-06
            double var_chaste_interface__I_Ca__f = rY[12];
            // Units: dimensionless; Initial value: 0.99511673495949
            double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
            // Units: dimensionless; Initial value: 0.0246142436477748
            double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
            // Units: dimensionless; Initial value: 0.0152416826209301
            double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
            // Units: mM; Initial value: 8.3215690202059
            double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
            // Units: mM; Initial value: 8.32094589677861
            double var_chaste_interface__K_Concentration__K_i = rY[36];
            // Units: mM; Initial value: 120.0
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
            // Units: mM; Initial value: 0.000106544589194246
            


            const double var_x0 = -0.34100000000000003 * mParameters[5];
            const double var_x1 = exp(9.9999999999999995e-8);
            const double var_x2 = 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x3 = 1 / (-1.0 + var_x1);
            const double var_x4 = mParameters[9] * mParameters[11];
            const double var_x5 = 1.08e-10 * var_x4;
            const double var_x6 = var_x3 * var_x5;
            const double var_x7 = exp(-9.9999999999999995e-8);
            const double var_x8 = 1 / (-1.0 + var_x7);
            const double var_x9 = var_x5 * var_x8;
            const double var_x10 = var_x9 * (var_x0 + var_x2 * var_x7);
            const double var_x11 = var_x10 + var_x6 * (var_x0 + var_x1 * var_x2);
            const double var_x12 = 1.0 - var_chaste_interface__I_Ca__f_Ca_Bj;
            const double var_x13 = 1 / (mParameters[10] * mParameters[23]);
            const double var_x14 = var_x13 * mParameters[9];
            const double var_x15 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x16 = pow(1.8, var_x15);
            const double var_x17 = var_x16 * var_chaste_interface__I_Ca__f;
            const double var_x18 = var_x17 * var_chaste_interface__I_Ca__d;
            const double var_x19 = var_x14 * var_x18;
            const double var_x20 = var_x12 * var_x19;
            const double var_x21 = 4050000.0000000005 * var_x11 * var_x20;
            const double var_x22 = 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x23 = var_x9 * (var_x0 + var_x22 * var_x7);
            const double var_x24 = var_x14 * (var_x23 + var_x6 * (var_x0 + var_x1 * var_x22));
            const double var_x25 = 1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl;
            const double var_x26 = var_x18 * var_x25;
            const double var_x27 = 449999.99999999994 * var_x24 * var_x26;
            const double var_x28 = exp(7.4880000000000004 - 0.16722408026755853 * var_chaste_interface__membrane_potential__V_m);
            const double var_x29 = 1.0 + var_x28;
            const double var_x30 = 0.002 / var_x29;
            const double var_x31 = 1 / var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x32 = 1.0 + 0.10000000000000001 * var_x31;
            const double var_x33 = 1 / var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x34 = 1.0 + 0.10000000000000001 * var_x33;
            const double var_x35 = pow(var_chaste_interface__I_Ks__x_ks, 2) * mParameters[18];
            const double var_x36 = 0.0035000000000000001 * var_x35;
            const double var_x37 = 1 / var_chaste_interface__K_Concentration__K_i;
            const double var_x38 = 1 / mParameters[9];
            const double var_x39 = var_x38 * mParameters[10] * mParameters[23];
            const double var_x40 = var_x39 * log(var_x37 * mParameters[7]);
            const double var_x41 = -var_x40 + var_chaste_interface__membrane_potential__V_m;
            const double var_x42 = 0.1144 * mParameters[15] * var_chaste_interface__I_to__x_to_f * var_chaste_interface__I_to__y_to_f;
            const double var_x43 = 0.015599999999999999 * mParameters[19] * var_chaste_interface__I_to__x_to_s * var_chaste_interface__I_to__y_to_s;
            const double var_x44 = pow(var_chaste_interface__I_Na__m, 3);
            const double var_x45 = var_x44 * var_chaste_interface__I_Na__j * mParameters[12];
            const double var_x46 = var_x45 * var_chaste_interface__I_Na__h;
            const double var_x47 = sqrt(mParameters[7]);
            const double var_x48 = var_x47 * mParameters[17] * var_chaste_interface__I_Kr__x_kr;
            const double var_x49 = exp(3.0833333333333335 + 0.041666666666666664 * var_chaste_interface__membrane_potential__V_m);
            const double var_x50 = 1.0 + var_x49;
            const double var_x51 = 0.43033148291193518 / var_x50;
            const double var_x52 = var_x48 * var_x51;
            const double var_x53 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane_potential__V_m - 0.23849999999999999 * var_x40);
            const double var_x54 = 1.0 + var_x53;
            const double var_x55 = 1 / var_x54;
            const double var_x56 = exp(-2.4444678999999998 + 0.51429999999999998 * var_x40 - 0.51429999999999998 * var_chaste_interface__membrane_potential__V_m);
            const double var_x57 = 1.0 + var_x56;
            const double var_x58 = 1 / var_x57;
            const double var_x59 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane_potential__V_m - 0.080320000000000003 * var_x40);
            const double var_x60 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane_potential__V_m - 0.061749999999999999 * var_x40);
            const double var_x61 = var_x60 + 0.49124000000000001 * var_x59;
            const double var_x62 = var_x58 * var_x61;
            const double var_x63 = var_x47 * mParameters[16] / (var_x62 + 1.02 * var_x55);
            const double var_x64 = 0.4389381125701739 * var_x55 * var_x63;
            const double var_x65 = var_x53 / pow(var_x54, 2);
            const double var_x66 = 0.10468673984798647 * var_x41 * var_x63 * var_x65;
            const double var_x67 = var_x14 * var_chaste_interface__membrane_potential__V_m;
            const double var_x68 = exp(0.27000000000000002 * var_x67);
            const double var_x69 = pow(var_chaste_interface__Na_Concentrations__Na_j, 3);
            const double var_x70 = var_x69 * mParameters[5];
            const double var_x71 = var_x68 * var_x70;
            const double var_x72 = 0.27000000000000002 * var_x14;
            const double var_x73 = exp(-0.72999999999999998 * var_x67);
            const double var_x74 = pow(mParameters[8], 3);
            const double var_x75 = var_x74 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x76 = var_x73 * var_x75;
            const double var_x77 = 0.72999999999999998 * var_x14;
            const double var_x78 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_j) * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x79 = 1.0 + 0.00053869674493876331 * var_x69;
            const double var_x80 = 0.0035899999999999999 * var_x74;
            const double var_x81 = 1 / (var_x70 + var_x75 + 669921.875 * var_x78 + 1.3 * var_x69 + var_x79 * var_x80);
            const double var_x82 = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2);
            const double var_x83 = 1 / var_x82;
            const double var_x84 = 1.0 + 2.2499999999999996e-8 * var_x83;
            const double var_x85 = 1 / var_x84;
            const double var_x86 = 1.0 + 0.32000000000000001 * var_x73;
            const double var_x87 = pow(1.5700000000000001, var_x15) * mParameters[20];
            const double var_x88 = var_x87 / var_x86;
            const double var_x89 = var_x85 * var_x88;
            const double var_x90 = var_x81 * var_x89;
            const double var_x91 = var_x90 * (var_x71 * var_x72 + var_x76 * var_x77);
            const double var_x92 = pow(var_chaste_interface__Na_Concentrations__Na_j, (-4));
            const double var_x93 = 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m;
            const double var_x94 = exp(-var_x14 * var_x93);
            const double var_x95 = exp(0.01485884101040119 * mParameters[8]);
            const double var_x96 = exp(-var_x67);
            const double var_x97 = 1.0 + 0.1245 * var_x94 + 0.036499999999999998 * var_x96 * (-0.14285714285714285 + 0.14285714285714285 * var_x95);
            const double var_x98 = mParameters[21] * mParameters[7] / (1.5 + mParameters[7]);
            const double var_x99 = var_x98 * (0.012450000000000001 * var_x14 * var_x94 + var_x14 * var_x96 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x95)) / pow(var_x97, 2);
            const double var_x100 = var_x99 / (1.0 + 14641.0 * var_x92);
            const double var_x101 = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3);
            const double var_x102 = var_x101 * mParameters[5];
            const double var_x103 = var_x102 * var_x68;
            const double var_x104 = var_x74 * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x105 = var_x104 * var_x73;
            const double var_x106 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_sl) * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x107 = 1.0 + 0.00053869674493876331 * var_x101;
            const double var_x108 = 1 / (var_x102 + var_x104 + 669921.875 * var_x106 + 1.3 * var_x101 + var_x107 * var_x80);
            const double var_x109 = pow(var_chaste_interface__Ca_Concentrations__Ca_sl, (-2));
            const double var_x110 = 1.0 + 2.2499999999999996e-8 * var_x109;
            const double var_x111 = 1 / var_x110;
            const double var_x112 = var_x111 * var_x88;
            const double var_x113 = var_x108 * var_x112;
            const double var_x114 = var_x113 * (var_x103 * var_x72 + var_x105 * var_x77);
            const double var_x115 = pow(var_chaste_interface__Na_Concentrations__Na_sl, (-4));
            const double var_x116 = var_x99 / (1.0 + 14641.0 * var_x115);
            const double var_x117 = 0.061749999999999999 * var_x60;
            const double var_x118 = 0.039456396800000001 * var_x59;
            const double var_x119 = 0.24326999999999999 * var_x65;
            const double var_x120 = 0.51429999999999998 * var_x56 * var_x61 / pow(var_x57, 2);
            const double var_x121 = var_x41 * var_x47;
            const double var_x122 = 0.42189361069797565 * var_x121 * var_x55 * mParameters[16] / pow((var_x55 + 0.98039215686274506 * var_x62), 2);
            const double var_x123 = var_x71 - var_x76;
            const double var_x124 = var_x123 * var_x81;
            const double var_x125 = var_x14 * var_x73 * var_x87 / pow(var_x86, 2);
            const double var_x126 = var_x124 * var_x125 * var_x85;
            const double var_x127 = var_x103 - var_x105;
            const double var_x128 = var_x108 * var_x127;
            const double var_x129 = var_x111 * var_x125 * var_x128;
            const double var_x130 = -0.010148299999999999 + var_x66 - var_x30 - var_x36 - var_x42 - var_x43 - var_x52 - var_x64 - var_x46 - 0.11 * var_x100 - 0.11 * var_x91 - 0.89000000000000001 * var_x114 - 0.89000000000000001 * var_x116 - 0.006029375 / var_x32 - 0.025696 * var_x126 - 0.048783124999999997 / var_x34 - 0.20790400000000001 * var_x129 - var_x122 * (var_x119 - var_x120 - var_x58 * (var_x117 + var_x118)) - 0.00033444816053511704 * var_x28 * var_x41 / pow(var_x29, 2) + 0.017930478454663966 * var_x41 * var_x48 * var_x49 / pow(var_x50, 2);
            const double var_x131 = var_x130 - var_x21 - var_x27;
            const double var_x132 = -0.75 * mParameters[8];
            const double var_x133 = 0.75 * var_chaste_interface__Na_Concentrations__Na_j;
            const double var_x134 = 7.4999999999999986e-16 * mParameters[9];
            const double var_x135 = var_x134 * var_x3;
            const double var_x136 = var_x134 * var_x8;
            const double var_x137 = var_x136 * (var_x132 + var_x133 * var_x7);
            const double var_x138 = var_x137 + var_x135 * (var_x132 + var_x1 * var_x133);
            const double var_x139 = 2025000.0000000002 * var_x138 * var_x20;
            const double var_x140 = -0.75 * mParameters[7];
            const double var_x141 = 0.75 * var_chaste_interface__K_Concentration__K_i;
            const double var_x142 = 1.3499999999999999e-14 * mParameters[9];
            const double var_x143 = var_x142 * var_x8 * (var_x140 + var_x141 * var_x7);
            const double var_x144 = var_x14 * (var_x143 + var_x142 * var_x3 * (var_x140 + var_x1 * var_x141));
            const double var_x145 = 1.0 - 0.099999999999999978 * var_chaste_interface__I_Ca__f_Ca_Bsl - 0.90000000000000002 * var_chaste_interface__I_Ca__f_Ca_Bj;
            const double var_x146 = var_x145 * var_x18;
            const double var_x147 = 0.75 * var_chaste_interface__Na_Concentrations__Na_sl;
            const double var_x148 = var_x136 * (var_x132 + var_x147 * var_x7);
            const double var_x149 = var_x148 + var_x135 * (var_x132 + var_x1 * var_x147);
            const double var_x150 = 224999.99999999997 * var_x149 * var_x19 * var_x25;
            const double var_x151 = -var_x139 - var_x150 - 2250000.0 * var_x144 * var_x146;
            const double var_x152 = fabs(var_chaste_interface__membrane_potential__V_m);
            const double var_x153 = fabs(var_x39);
            const double var_x154 = var_x152 < 4.9999999999999998e-8 * var_x153;
            const double var_x155 = var_x152 < 9.9999999999999995e-8 * var_x153;
            const double var_x156 = (var_x154) && (var_x155);
            const double var_x157 = exp(var_x67);
            const double var_x158 = 3.3749999999999992e-10 * var_x132 + 3.3749999999999992e-10 * var_x147 * var_x157;
            const double var_x159 = var_x13 * pow(mParameters[9], 2);
            const double var_x160 = -1.0 + var_x157;
            const double var_x161 = 1 / var_x160;
            const double var_x162 = var_x161 * var_x26;
            const double var_x163 = var_x159 * var_x162;
            const double var_x164 = var_x158 * var_x163;
            const double var_x165 = var_x140 + var_x141 * var_x157;
            const double var_x166 = var_x159 * var_x161;
            const double var_x167 = var_x165 * var_x166;
            const double var_x168 = 6.0749999999999998e-8 * var_x146;
            const double var_x169 = var_x166 * var_x18;
            const double var_x170 = var_x12 * var_x169;
            const double var_x171 = 3.0374999999999999e-9 * var_x132 + 3.0374999999999999e-9 * var_x133 * var_x157;
            const double var_x172 = var_x170 * var_x171;
            const double var_x173 = var_x157 * var_chaste_interface__membrane_potential__V_m;
            const double var_x174 = pow(mParameters[9], 3) / (pow(mParameters[10], 2) * pow(mParameters[23], 2));
            const double var_x175 = var_x174 / pow(var_x160, 2);
            const double var_x176 = var_x173 * var_x175;
            const double var_x177 = var_x158 * var_x176 * var_x26;
            const double var_x178 = var_x12 * var_x171;
            const double var_x179 = var_x18 * var_chaste_interface__membrane_potential__V_m;
            const double var_x180 = var_x157 * var_x179;
            const double var_x181 = var_x175 * var_x178 * var_x180;
            const double var_x182 = 2.5312499999999994e-10 * var_x173;
            const double var_x183 = var_x162 * var_x174 * var_x182 * var_chaste_interface__Na_Concentrations__Na_sl;
            const double var_x184 = 4.5562500000000002e-8 * var_x146 * var_x173;
            const double var_x185 = var_x161 * var_x174;
            const double var_x186 = 2.2781249999999999e-9 * var_x12 * var_x180 * var_x185 * var_chaste_interface__Na_Concentrations__Na_j;
            const double var_x187 = var_x177 + var_x181 - var_x164 - var_x172 - var_x183 - var_x186 - var_x167 * var_x168 + var_x165 * var_x168 * var_x176 - var_x184 * var_x185 * var_chaste_interface__K_Concentration__K_i;
            const double var_x188 = exp(2.0 * var_x67);
            const double var_x189 = var_x0 + var_x188 * var_x22;
            const double var_x190 = var_x189 * var_x26;
            const double var_x191 = -1.0 + var_x188;
            const double var_x192 = mParameters[11] / var_x191;
            const double var_x193 = var_x159 * var_x192;
            const double var_x194 = 9.7199999999999977e-5 * var_x193;
            const double var_x195 = var_x190 * var_x194;
            const double var_x196 = var_x12 * var_x193;
            const double var_x197 = var_x0 + var_x188 * var_x2;
            const double var_x198 = 0.00087480000000000001 * var_x197;
            const double var_x199 = var_x196 * var_x198;
            const double var_x200 = var_x18 * var_x199;
            const double var_x201 = var_x188 * var_chaste_interface__membrane_potential__V_m;
            const double var_x202 = var_x174 * mParameters[11] / pow(var_x191, 2);
            const double var_x203 = 0.00019439999999999995 * var_x190 * var_x201 * var_x202;
            const double var_x204 = var_x179 * var_x188;
            const double var_x205 = var_x12 * var_x204;
            const double var_x206 = 0.0017496 * var_x197 * var_x202 * var_x205;
            const double var_x207 = var_x201 * var_x26;
            const double var_x208 = var_x174 * var_x192;
            const double var_x209 = 6.6290399999999991e-5 * var_x207 * var_x208 * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x210 = 0.00059661360000000006 * var_x205 * var_x208 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x211 = var_x130 + var_x203 + var_x206 - var_x195 - var_x200 - var_x209 - var_x210;
            
            partialF = ((var_x156) ? (var_x131 + var_x151) : ((var_x154) ? (var_x131 + var_x187) : ((var_x155) ? (var_x151 + var_x211) : (var_x187 + var_x211))));
        }
        else
        {
            const double y_save = rY[0];
            rY[0] += delta;
            const double temp = EvaluateYDerivative0(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[0])/delta;
            rY[0] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL = rY[20];
        // Units: mM; Initial value: 0.00893708435270205
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc = rY[21];
        // Units: mM; Initial value: 0.117445983314504
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm = rY[22];
        // Units: mM; Initial value: 0.0105996734077994
        double var_chaste_interface__Cytosolic_Ca_Buffers__CaM = rY[23];
        // Units: mM; Initial value: 0.000295653619580701
        double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c = rY[24];
        // Units: mM; Initial value: 0.00192645052472679
        double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m = rY[25];
        // Units: mM; Initial value: 0.137557201546068
        double var_chaste_interface__Cytosolic_Ca_Buffers__SRB = rY[26];
        // Units: mM; Initial value: 0.00217414510791738
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        


        // Mathematics
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_parameters__Vcell = 1.0506250000000001e-11 * M_PI; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Vsr = 0.035000000000000003 * var_parameters__Vcell; // liter
        const double var_SR_Fluxes__J_serca = pow(2.6000000000000001, var_parameters__Qpow) * (2814485.1633595936 * pow(var_chaste_interface__Ca_Concentrations__Ca_i, 1.7869999999999999) - 0.38742512113256738 * pow(var_chaste_interface__SR_Ca_Concentrations__Ca_sr, 1.7869999999999999)) * mParameters[2] / (1.0 + 0.38742512113256738 * pow(var_chaste_interface__SR_Ca_Concentrations__Ca_sr, 1.7869999999999999) + 2814485.1633595936 * pow(var_chaste_interface__Ca_Concentrations__Ca_i, 1.7869999999999999)); // mM_per_msec
        const double d_dt_chaste_interface_var_Ca_Concentrations__Ca_i = -0.0026180000000000001 + 0.23799999999999999 * var_chaste_interface__Cytosolic_Ca_Buffers__CaM + 0.059999999999999998 * var_chaste_interface__Cytosolic_Ca_Buffers__SRB + 0.019599999999999999 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL + 0.0063300000000000006 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm + 0.016159999999999997 * var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c + 0.003032 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc + 0.015757 * var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m + 3.2742999999999999e-12 * (-var_chaste_interface__Ca_Concentrations__Ca_i + var_chaste_interface__Ca_Concentrations__Ca_sl) / var_parameters__Vmyo - 34.0 * (0.024 - var_chaste_interface__Cytosolic_Ca_Buffers__CaM) * var_chaste_interface__Ca_Concentrations__Ca_i - 100.0 * (0.017100000000000001 - var_chaste_interface__Cytosolic_Ca_Buffers__SRB) * var_chaste_interface__Ca_Concentrations__Ca_i - 32.700000000000003 * (0.070000000000000007 - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL) * var_chaste_interface__Ca_Concentrations__Ca_i - 2.3700000000000001 * (0.14000000000000001 - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm) * var_chaste_interface__Ca_Concentrations__Ca_i - 13.800000000000001 * (0.14000000000000001 - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m) * var_chaste_interface__Ca_Concentrations__Ca_i - var_SR_Fluxes__J_serca * var_parameters__Vsr / var_parameters__Vmyo; // mM / msec

        return d_dt_chaste_interface_var_Ca_Concentrations__Ca_i;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
            // Units: mM; Initial value: 8.72745589849657e-05
            double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL = rY[20];
            // Units: mM; Initial value: 0.00893708435270205
            double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc = rY[21];
            // Units: mM; Initial value: 0.117445983314504
            double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm = rY[22];
            // Units: mM; Initial value: 0.0105996734077994
            double var_chaste_interface__Cytosolic_Ca_Buffers__CaM = rY[23];
            // Units: mM; Initial value: 0.000295653619580701
            double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c = rY[24];
            // Units: mM; Initial value: 0.00192645052472679
            double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m = rY[25];
            // Units: mM; Initial value: 0.137557201546068
            double var_chaste_interface__Cytosolic_Ca_Buffers__SRB = rY[26];
            // Units: mM; Initial value: 0.00217414510791738
            double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
            // Units: mM; Initial value: 0.555180633859957
            


            const double var_x15 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x372 = 34.0 * var_chaste_interface__Cytosolic_Ca_Buffers__CaM;
            const double var_x373 = 100.0 * var_chaste_interface__Cytosolic_Ca_Buffers__SRB;
            const double var_x374 = 32.700000000000003 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL;
            const double var_x375 = 2.3700000000000001 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc;
            const double var_x376 = 2.3700000000000001 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm;
            const double var_x377 = 13.800000000000001 * var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c;
            const double var_x378 = 13.800000000000001 * var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m;
            const double var_x379 = 1 / M_PI;
            const double var_x380 = 0.4794655196082917 * var_x379;
            const double var_x381 = pow(var_chaste_interface__Ca_Concentrations__Ca_i, 0.78699999999999992);
            const double var_x382 = pow(var_chaste_interface__SR_Ca_Concentrations__Ca_sr, 1.7869999999999999);
            const double var_x383 = 0.38742512113256738 * var_x382;
            const double var_x384 = pow(var_chaste_interface__Ca_Concentrations__Ca_i, 1.7869999999999999);
            const double var_x385 = 2814485.1633595936 * var_x384;
            const double var_x386 = pow(2.6000000000000001, var_x15) * mParameters[2];
            const double var_x387 = var_x386 / (1.0 + var_x383 + var_x385);
            const double var_x388 = var_x381 * var_x387;
            const double var_x389 = var_x386 * (var_x385 - var_x383) / pow((3.5530476870814998e-7 + var_x384 + 1.3765399305573384e-7 * var_x382), 2);
            const double var_x390 = var_x381 * var_x389;
            
            partialF = -7.0788000000000011 + var_x372 + var_x373 + var_x374 + var_x375 + var_x376 + var_x377 + var_x378 - var_x380 + 3.4188518090540365e-8 * var_x390 - 270818.42237280885 * var_x388;
        }
        else
        {
            const double y_save = rY[1];
            rY[1] += delta;
            const double temp = EvaluateYDerivative1(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[1])/delta;
            rY[1] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Na__m = rY[2];
        // Units: dimensionless; Initial value: 0.00381858135062259
        

        // Lookup table indexing
        const bool _oob_0 = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane_potential__V_m);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane_potential__V_m);

        // Mathematics
        const double d_dt_chaste_interface_var_I_Na__m = (-var_chaste_interface__I_Na__m + _lt_0_row[11]) / (_lt_0_row[12]); // 1 / msec

        return d_dt_chaste_interface_var_I_Na__m;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            


            const double var_x399 = exp(-0.0089012876052174655 * pow((-1 + 0.2073398299813394 * var_chaste_interface__membrane_potential__V_m), 2));
            const double var_x400 = exp(-8.682389366752302 * pow((1 + 0.021838829438742085 * var_chaste_interface__membrane_potential__V_m), 2));
            const double var_x403 = 0.12920000000000001 * var_x400;
            const double var_x404 = 0.064869999999999997 * var_x399;
            const double var_x405 = 1 / (var_x403 + var_x404);
            
            partialF = -var_x405;
        }
        else
        {
            const double y_save = rY[2];
            rY[2] += delta;
            const double temp = EvaluateYDerivative2(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[2])/delta;
            rY[2] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Na__h = rY[3];
        // Units: dimensionless; Initial value: 0.625086621635645
        


        // Mathematics
        const double d_dt_chaste_interface_var_I_Na__h = (((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0) : (0.057000000000000002 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[14] - 0.14705882352941177 * var_chaste_interface__membrane_potential__V_m))) + ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (5.9230769230769234 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[14] - 0.0900900900900901 * var_chaste_interface__membrane_potential__V_m))) : (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane_potential__V_m - 0.34849999999999998 * mParameters[14]) + 2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane_potential__V_m - 0.079000000000000001 * mParameters[14])))) * (-var_chaste_interface__I_Na__h + 0.01 * mParameters[13] + (1.0 - 0.01 * mParameters[13]) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__membrane_potential__V_m - 0.13458950201884254 * mParameters[14])), 2)); // 1 / msec

        return d_dt_chaste_interface_var_I_Na__h;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            


            const double var_x406 = exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[14] - 0.0900900900900901 * var_chaste_interface__membrane_potential__V_m);
            const double var_x407 = 1.0 + var_x406;
            const double var_x414 = 1 / var_x407;
            const double var_x416 = var_chaste_interface__membrane_potential__V_m >= -40.0;
            const double var_x417 = exp(0.34849999999999998 * var_chaste_interface__membrane_potential__V_m - 0.34849999999999998 * mParameters[14]);
            const double var_x418 = exp(0.079000000000000001 * var_chaste_interface__membrane_potential__V_m - 0.079000000000000001 * mParameters[14]);
            const double var_x419 = exp(-11.764705882352942 + 0.14705882352941177 * mParameters[14] - 0.14705882352941177 * var_chaste_interface__membrane_potential__V_m);
            const double var_x420 = 310000.0 * var_x417;
            const double var_x421 = 2.7000000000000002 * var_x418;
            const double var_x422 = 0.057000000000000002 * var_x419;
            
            partialF = ((var_x416) ? (-5.9230769230769234 * var_x414) : (-var_x420 - var_x421 - var_x422));
        }
        else
        {
            const double y_save = rY[3];
            rY[3] += delta;
            const double temp = EvaluateYDerivative3(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[3])/delta;
            rY[3] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Na__j = rY[4];
        // Units: dimensionless; Initial value: 0.62332507235506
        


        // Mathematics
        const double d_dt_chaste_interface_var_I_Na__j = (((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0) : ((37.780000000000001 + var_chaste_interface__membrane_potential__V_m) * (-25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane_potential__V_m - 0.24440000000000001 * mParameters[14]) - 6.9480000000000002e-6 * exp(0.043909999999999998 * mParameters[14] - 0.043909999999999998 * var_chaste_interface__membrane_potential__V_m)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane_potential__V_m - 0.311 * mParameters[14])))) + ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane_potential__V_m - 0.057000000000000002 * mParameters[14]) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[14] - 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m))) : (0.024240000000000001 * exp(0.01052 * mParameters[14] - 0.01052 * var_chaste_interface__membrane_potential__V_m) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[14] - 0.13780000000000001 * var_chaste_interface__membrane_potential__V_m))))) * (-var_chaste_interface__I_Na__j + 0.01 * mParameters[13] + (1.0 - 0.01 * mParameters[13]) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__membrane_potential__V_m - 0.13458950201884254 * mParameters[14])), 2)); // 1 / msec

        return d_dt_chaste_interface_var_I_Na__j;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            


            const double var_x93 = 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m;
            const double var_x416 = var_chaste_interface__membrane_potential__V_m >= -40.0;
            const double var_x425 = exp(-3.2000000000000002 - var_x93 + 0.10000000000000001 * mParameters[14]);
            const double var_x426 = 1.0 + var_x425;
            const double var_x427 = exp(0.057000000000000002 * var_chaste_interface__membrane_potential__V_m - 0.057000000000000002 * mParameters[14]);
            const double var_x428 = var_x427 / var_x426;
            const double var_x429 = exp(0.24440000000000001 * var_chaste_interface__membrane_potential__V_m - 0.24440000000000001 * mParameters[14]);
            const double var_x430 = exp(0.043909999999999998 * mParameters[14] - 0.043909999999999998 * var_chaste_interface__membrane_potential__V_m);
            const double var_x431 = -25428.0 * var_x429 - 6.9480000000000002e-6 * var_x430;
            const double var_x432 = exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane_potential__V_m - 0.311 * mParameters[14]);
            const double var_x433 = 1.0 + var_x432;
            const double var_x434 = 1 / var_x433;
            const double var_x435 = var_x431 * var_x434;
            const double var_x436 = exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[14] - 0.13780000000000001 * var_chaste_interface__membrane_potential__V_m);
            const double var_x437 = 1.0 + var_x436;
            const double var_x438 = exp(0.01052 * mParameters[14] - 0.01052 * var_chaste_interface__membrane_potential__V_m);
            const double var_x439 = var_x438 / var_x437;
            const double var_x440 = 37.780000000000001 + var_chaste_interface__membrane_potential__V_m;
            const double var_x441 = 0.024240000000000001 * var_x439;
            const double var_x442 = var_x435 * var_x440;
            
            partialF = ((var_x416) ? (-0.59999999999999998 * var_x428) : (-var_x441 - var_x442));
        }
        else
        {
            const double y_save = rY[4];
            rY[4] += delta;
            const double temp = EvaluateYDerivative4(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[4])/delta;
            rY[4] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Kr__x_kr = rY[5];
        // Units: dimensionless; Initial value: 0.021733554982663
        

        // Lookup table indexing
        const bool _oob_0 = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane_potential__V_m);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane_potential__V_m);

        // Mathematics
        const double d_dt_chaste_interface_var_I_Kr__x_kr = (-var_chaste_interface__I_Kr__x_kr + _lt_0_row[7]) / (_lt_0_row[8]); // 1 / msec

        return d_dt_chaste_interface_var_I_Kr__x_kr;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            


            const double var_x443 = 0.050000000000000003 * var_chaste_interface__membrane_potential__V_m;
            const double var_x444 = exp(2.0 + var_x443);
            const double var_x445 = 1.0 + var_x444;
            const double var_x446 = 1 / var_x445;
            const double var_x447 = 0.1111111111111111 * var_chaste_interface__membrane_potential__V_m;
            const double var_x448 = exp(1.2222222222222223 + var_x447);
            const double var_x449 = 1.0 + var_x448;
            const double var_x450 = 1 / var_x449;
            const double var_x451 = exp(-2.4444444444444446 - var_x447);
            const double var_x452 = 1.0 + var_x451;
            const double var_x453 = 1 / var_x452;
            const double var_x454 = var_x450 * var_x453;
            const double var_x458 = 1 / (230.0 * var_x446 + 3300.0 * var_x454);
            
            partialF = -var_x458;
        }
        else
        {
            const double y_save = rY[5];
            rY[5] += delta;
            const double temp = EvaluateYDerivative5(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[5])/delta;
            rY[5] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Ks__x_ks = rY[6];
        // Units: dimensionless; Initial value: 0.00428981903391989
        

        // Lookup table indexing
        const bool _oob_0 = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane_potential__V_m);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane_potential__V_m);

        // Mathematics
        const double d_dt_chaste_interface_var_I_Ks__x_ks = (_lt_0_row[10]) * (-var_chaste_interface__I_Ks__x_ks + _lt_0_row[9]); // 1 / msec

        return d_dt_chaste_interface_var_I_Ks__x_ks;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            


            const double var_x461 = exp(-0.17252124645892353 - 0.070821529745042494 * var_chaste_interface__membrane_potential__V_m);
            const double var_x462 = 0.00100999899000101 * var_x461;
            
            partialF = -0.00100999899000101 - var_x462;
        }
        else
        {
            const double y_save = rY[6];
            rY[6] += delta;
            const double temp = EvaluateYDerivative6(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[6])/delta;
            rY[6] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_to__x_to_s = rY[7];
        // Units: dimensionless; Initial value: 0.000441539203559411
        

        // Lookup table indexing
        const bool _oob_0 = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane_potential__V_m);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane_potential__V_m);

        // Mathematics
        const double var_I_to__xtoss = _lt_0_row[13]; // dimensionless
        const double d_dt_chaste_interface_var_I_to__x_to_s = (-var_chaste_interface__I_to__x_to_s + var_I_to__xtoss) / (_lt_0_row[15]); // 1 / msec

        return d_dt_chaste_interface_var_I_to__x_to_s;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            


            const double var_x463 = exp(0.20000000000000001 + 0.066666666666666666 * var_chaste_interface__membrane_potential__V_m);
            const double var_x464 = 1.0 + var_x463;
            const double var_x465 = 1 / var_x464;
            const double var_x466 = 1 / (0.5 + 9.0 * var_x465);
            
            partialF = -var_x466;
        }
        else
        {
            const double y_save = rY[7];
            rY[7] += delta;
            const double temp = EvaluateYDerivative7(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[7])/delta;
            rY[7] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_to__y_to_s = rY[8];
        // Units: dimensionless; Initial value: 0.784875334693892
        

        // Lookup table indexing
        const bool _oob_0 = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane_potential__V_m);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane_potential__V_m);

        // Mathematics
        const double var_I_to__ytoss = _lt_0_row[16]; // dimensionless
        const double d_dt_chaste_interface_var_I_to__y_to_s = (-var_chaste_interface__I_to__y_to_s + var_I_to__ytoss) / (_lt_0_row[18]); // 1 / msec

        return d_dt_chaste_interface_var_I_to__y_to_s;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            


            const double var_x471 = exp(6.0 + 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m);
            const double var_x472 = 1.0 + var_x471;
            const double var_x473 = 1 / var_x472;
            const double var_x474 = 1 / (30.0 + 800.0 * var_x473);
            
            partialF = -var_x474;
        }
        else
        {
            const double y_save = rY[8];
            rY[8] += delta;
            const double temp = EvaluateYDerivative8(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[8])/delta;
            rY[8] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_to__x_to_f = rY[9];
        // Units: dimensionless; Initial value: 0.000441531250866821
        

        // Lookup table indexing
        const bool _oob_0 = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane_potential__V_m);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane_potential__V_m);

        // Mathematics
        const double var_I_to__xtoss = _lt_0_row[13]; // dimensionless
        const double d_dt_chaste_interface_var_I_to__x_to_f = (-var_chaste_interface__I_to__x_to_f + var_I_to__xtoss) / (_lt_0_row[14]); // 1 / msec

        return d_dt_chaste_interface_var_I_to__x_to_f;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            


            const double var_x479 = exp(-0.81000000000000005 * pow((1 + 0.022222222222222223 * var_chaste_interface__membrane_potential__V_m), 2));
            const double var_x480 = 1 / (0.5 + 8.5 * var_x479);
            
            partialF = -var_x480;
        }
        else
        {
            const double y_save = rY[9];
            rY[9] += delta;
            const double temp = EvaluateYDerivative9(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[9])/delta;
            rY[9] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_to__y_to_f = rY[10];
        // Units: dimensionless; Initial value: 0.999995817153572
        

        // Lookup table indexing
        const bool _oob_0 = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane_potential__V_m);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane_potential__V_m);

        // Mathematics
        const double var_I_to__ytoss = _lt_0_row[16]; // dimensionless
        const double d_dt_chaste_interface_var_I_to__y_to_f = (-var_chaste_interface__I_to__y_to_f + var_I_to__ytoss) / (_lt_0_row[17]); // 1 / msec

        return d_dt_chaste_interface_var_I_to__y_to_f;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            


            const double var_x481 = exp(-7.2727272727272725 * pow((1 + 0.025000000000000001 * var_chaste_interface__membrane_potential__V_m), 2));
            const double var_x482 = 1 / (7.0 + 85.0 * var_x481);
            
            partialF = -var_x482;
        }
        else
        {
            const double y_save = rY[10];
            rY[10] += delta;
            const double temp = EvaluateYDerivative10(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[10])/delta;
            rY[10] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        

        // Lookup table indexing
        const bool _oob_0 = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane_potential__V_m);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane_potential__V_m);

        // Mathematics
        const double d_dt_chaste_interface_var_I_Ca__d = (-var_chaste_interface__I_Ca__d + _lt_0_row[2]) * _lt_0_row[3]; // 1 / msec

        return d_dt_chaste_interface_var_I_Ca__d;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            


            const double var_x483 = exp(-0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__membrane_potential__V_m);
            const double var_x484 = 1.0 + var_x483;
            const double var_x485 = exp(-1.000000000005626e-7);
            const double var_x486 = (1.0 - var_x485) / (1.0 + var_x485);
            const double var_x487 = 47619047.618779711 * var_x486;
            const double var_x488 = exp(1.000000000005626e-7);
            const double var_x489 = (1.0 - var_x488) / (1.0 + var_x488);
            const double var_x490 = (4.9999994000000001 + var_chaste_interface__membrane_potential__V_m) * (-var_x487 - 47619047.618779711 * var_x489);
            const double var_x491 = 1 / (var_x487 - 833333.33332864498 * var_x490);
            const double var_x494 = 5.0 + var_chaste_interface__membrane_potential__V_m;
            const double var_x495 = fabs(var_x494) < 6.0000000000337561e-7;
            const double var_x496 = 1.0 - var_x483;
            const double var_x497 = 1 / var_x496;
            const double var_x499 = 0.035000000000000003 * var_x484;
            const double var_x500 = var_x494 * var_x497;
            
            partialF = ((var_x495) ? (-var_x491) : (-var_x499 * var_x500));
        }
        else
        {
            const double y_save = rY[11];
            rY[11] += delta;
            const double temp = EvaluateYDerivative11(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[11])/delta;
            rY[11] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        

        // Lookup table indexing
        const bool _oob_0 = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane_potential__V_m);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane_potential__V_m);

        // Mathematics
        const double d_dt_chaste_interface_var_I_Ca__f = (_lt_0_row[6]) * (-var_chaste_interface__I_Ca__f + _lt_0_row[4] + _lt_0_row[5]); // 1 / msec

        return d_dt_chaste_interface_var_I_Ca__f;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            


            const double var_x503 = 0.019699999999999999 * exp(-0.23877882250000002 * pow((1 + 0.068965517241379309 * var_chaste_interface__membrane_potential__V_m), 2));
            
            partialF = -0.02 - var_x503;
        }
        else
        {
            const double y_save = rY[12];
            rY[12] += delta;
            const double temp = EvaluateYDerivative12(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[12])/delta;
            rY[12] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
        // Units: dimensionless; Initial value: 0.0246142436477748
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        


        // Mathematics
        const double d_dt_chaste_interface_var_I_Ca__f_Ca_Bj = -0.011900000000000001 * var_chaste_interface__I_Ca__f_Ca_Bj + 1.7 * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj) * var_chaste_interface__Ca_Concentrations__Ca_j; // 1 / msec

        return d_dt_chaste_interface_var_I_Ca__f_Ca_Bj;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            


            
            partialF = -0.011900000000000001 - 1.7 * var_chaste_interface__Ca_Concentrations__Ca_j;
        }
        else
        {
            const double y_save = rY[13];
            rY[13] += delta;
            const double temp = EvaluateYDerivative13(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[13])/delta;
            rY[13] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
        // Units: dimensionless; Initial value: 0.0152416826209301
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        


        // Mathematics
        const double d_dt_chaste_interface_var_I_Ca__f_Ca_Bsl = -0.011900000000000001 * var_chaste_interface__I_Ca__f_Ca_Bsl + 1.7 * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl) * var_chaste_interface__Ca_Concentrations__Ca_sl; // 1 / msec

        return d_dt_chaste_interface_var_I_Ca__f_Ca_Bsl;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
            // Units: mM; Initial value: 0.000106544589194246
            


            
            partialF = -0.011900000000000001 - 1.7 * var_chaste_interface__Ca_Concentrations__Ca_sl;
        }
        else
        {
            const double y_save = rY[14];
            rY[14] += delta;
            const double temp = EvaluateYDerivative14(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[14])/delta;
            rY[14] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__SR_Fluxes__Ry_Rr = rY[15];
        // Units: mM; Initial value: 0.891022230597263
        double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
        // Units: mM; Initial value: 7.37484660389498e-07
        double var_chaste_interface__SR_Fluxes__Ry_Ri = rY[17];
        // Units: mM; Initial value: 9.01984485847386e-08
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        


        // Mathematics
        const double var_SR_Fluxes__RI = 1.0 - var_chaste_interface__SR_Fluxes__Ry_Ri - var_chaste_interface__SR_Fluxes__Ry_Ro - var_chaste_interface__SR_Fluxes__Ry_Rr; // mM
        const double var_SR_Fluxes__kCaSR = 15.0 - 14.0 / (1.0 + 0.13584112963311223 * pow((1 / var_chaste_interface__SR_Ca_Concentrations__Ca_sr), 2.5)); // dimensionless
        const double var_SR_Fluxes__kiSRCa = 0.5 * var_SR_Fluxes__kCaSR; // per_mM_per_msec
        const double var_SR_Fluxes__koSRCa = 10.0 / var_SR_Fluxes__kCaSR; // per_mM2_per_msec
        const double d_dt_chaste_interface_var_SR_Fluxes__Ry_Rr = 0.059999999999999998 * var_chaste_interface__SR_Fluxes__Ry_Ro + 0.0050000000000000001 * var_SR_Fluxes__RI - pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2) * var_chaste_interface__SR_Fluxes__Ry_Rr * var_SR_Fluxes__koSRCa - var_chaste_interface__Ca_Concentrations__Ca_j * var_chaste_interface__SR_Fluxes__Ry_Rr * var_SR_Fluxes__kiSRCa; // mM / msec

        return d_dt_chaste_interface_var_SR_Fluxes__Ry_Rr;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
            // Units: mM; Initial value: 0.555180633859957
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            


            const double var_x82 = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2);
            const double var_x508 = 1 / var_chaste_interface__SR_Ca_Concentrations__Ca_sr;
            const double var_x509 = pow(var_x508, 2.5);
            const double var_x510 = 1.0 + 0.13584112963311223 * var_x509;
            const double var_x511 = 1 / var_x510;
            const double var_x512 = 7.0 * var_x511;
            const double var_x513 = -7.5 + var_x512;
            const double var_x514 = var_x513 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x515 = 1 / (15.0 - 14.0 * var_x511);
            const double var_x516 = 10.0 * var_x515 * var_x82;
            const double var_x517 = -var_x516;
            
            partialF = -0.0050000000000000001 + var_x514 + var_x517;
        }
        else
        {
            const double y_save = rY[15];
            rY[15] += delta;
            const double temp = EvaluateYDerivative15(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[15])/delta;
            rY[15] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__SR_Fluxes__Ry_Rr = rY[15];
        // Units: mM; Initial value: 0.891022230597263
        double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
        // Units: mM; Initial value: 7.37484660389498e-07
        double var_chaste_interface__SR_Fluxes__Ry_Ri = rY[17];
        // Units: mM; Initial value: 9.01984485847386e-08
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        


        // Mathematics
        const double var_SR_Fluxes__kCaSR = 15.0 - 14.0 / (1.0 + 0.13584112963311223 * pow((1 / var_chaste_interface__SR_Ca_Concentrations__Ca_sr), 2.5)); // dimensionless
        const double var_SR_Fluxes__kiSRCa = 0.5 * var_SR_Fluxes__kCaSR; // per_mM_per_msec
        const double var_SR_Fluxes__koSRCa = 10.0 / var_SR_Fluxes__kCaSR; // per_mM2_per_msec
        const double d_dt_chaste_interface_var_SR_Fluxes__Ry_Ro = 0.0050000000000000001 * var_chaste_interface__SR_Fluxes__Ry_Ri - 0.059999999999999998 * var_chaste_interface__SR_Fluxes__Ry_Ro + pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2) * var_chaste_interface__SR_Fluxes__Ry_Rr * var_SR_Fluxes__koSRCa - var_chaste_interface__Ca_Concentrations__Ca_j * var_chaste_interface__SR_Fluxes__Ry_Ro * var_SR_Fluxes__kiSRCa; // mM / msec

        return d_dt_chaste_interface_var_SR_Fluxes__Ry_Ro;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
            // Units: mM; Initial value: 0.555180633859957
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            


            const double var_x508 = 1 / var_chaste_interface__SR_Ca_Concentrations__Ca_sr;
            const double var_x509 = pow(var_x508, 2.5);
            const double var_x510 = 1.0 + 0.13584112963311223 * var_x509;
            const double var_x511 = 1 / var_x510;
            const double var_x512 = 7.0 * var_x511;
            const double var_x513 = -7.5 + var_x512;
            const double var_x514 = var_x513 * var_chaste_interface__Ca_Concentrations__Ca_j;
            
            partialF = -0.059999999999999998 + var_x514;
        }
        else
        {
            const double y_save = rY[16];
            rY[16] += delta;
            const double temp = EvaluateYDerivative16(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[16])/delta;
            rY[16] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__SR_Fluxes__Ry_Rr = rY[15];
        // Units: mM; Initial value: 0.891022230597263
        double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
        // Units: mM; Initial value: 7.37484660389498e-07
        double var_chaste_interface__SR_Fluxes__Ry_Ri = rY[17];
        // Units: mM; Initial value: 9.01984485847386e-08
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        


        // Mathematics
        const double var_SR_Fluxes__RI = 1.0 - var_chaste_interface__SR_Fluxes__Ry_Ri - var_chaste_interface__SR_Fluxes__Ry_Ro - var_chaste_interface__SR_Fluxes__Ry_Rr; // mM
        const double var_SR_Fluxes__kCaSR = 15.0 - 14.0 / (1.0 + 0.13584112963311223 * pow((1 / var_chaste_interface__SR_Ca_Concentrations__Ca_sr), 2.5)); // dimensionless
        const double var_SR_Fluxes__kiSRCa = 0.5 * var_SR_Fluxes__kCaSR; // per_mM_per_msec
        const double var_SR_Fluxes__koSRCa = 10.0 / var_SR_Fluxes__kCaSR; // per_mM2_per_msec
        const double d_dt_chaste_interface_var_SR_Fluxes__Ry_Ri = -0.065000000000000002 * var_chaste_interface__SR_Fluxes__Ry_Ri + pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2) * var_SR_Fluxes__RI * var_SR_Fluxes__koSRCa + var_chaste_interface__Ca_Concentrations__Ca_j * var_chaste_interface__SR_Fluxes__Ry_Ro * var_SR_Fluxes__kiSRCa; // mM / msec

        return d_dt_chaste_interface_var_SR_Fluxes__Ry_Ri;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
            // Units: mM; Initial value: 0.555180633859957
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            


            const double var_x82 = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2);
            const double var_x508 = 1 / var_chaste_interface__SR_Ca_Concentrations__Ca_sr;
            const double var_x509 = pow(var_x508, 2.5);
            const double var_x510 = 1.0 + 0.13584112963311223 * var_x509;
            const double var_x511 = 1 / var_x510;
            const double var_x515 = 1 / (15.0 - 14.0 * var_x511);
            const double var_x516 = 10.0 * var_x515 * var_x82;
            const double var_x517 = -var_x516;
            
            partialF = -0.065000000000000002 + var_x517;
        }
        else
        {
            const double y_save = rY[17];
            rY[17] += delta;
            const double temp = EvaluateYDerivative17(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[17])/delta;
            rY[17] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Na_Buffers__Na_Bj = rY[18];
        // Units: mM; Initial value: 3.43545459048316
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        


        // Mathematics
        const double var_Na_Buffers__dNa_Bj_dt = -0.001 * var_chaste_interface__Na_Buffers__Na_Bj + 0.0001 * (7.5609999999999999 - var_chaste_interface__Na_Buffers__Na_Bj) * var_chaste_interface__Na_Concentrations__Na_j; // mM_per_msec
        const double d_dt_chaste_interface_var_Na_Buffers__Na_Bj = var_Na_Buffers__dNa_Bj_dt; // mM / msec

        return d_dt_chaste_interface_var_Na_Buffers__Na_Bj;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
            // Units: mM; Initial value: 8.3215690202059
            


            const double var_x528 = 0.0001 * var_chaste_interface__Na_Concentrations__Na_j;
            
            partialF = -0.001 - var_x528;
        }
        else
        {
            const double y_save = rY[18];
            rY[18] += delta;
            const double temp = EvaluateYDerivative18(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[18])/delta;
            rY[18] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Na_Buffers__Na_Bsl = rY[19];
        // Units: mM; Initial value: 0.749601264899653
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        


        // Mathematics
        const double var_Na_Buffers__dNa_Bsl_dt = -0.001 * var_chaste_interface__Na_Buffers__Na_Bsl + 0.0001 * (1.6499999999999999 - var_chaste_interface__Na_Buffers__Na_Bsl) * var_chaste_interface__Na_Concentrations__Na_sl; // mM_per_msec
        const double d_dt_chaste_interface_var_Na_Buffers__Na_Bsl = var_Na_Buffers__dNa_Bsl_dt; // mM / msec

        return d_dt_chaste_interface_var_Na_Buffers__Na_Bsl;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
            // Units: mM; Initial value: 8.32094589677861
            


            const double var_x530 = 0.0001 * var_chaste_interface__Na_Concentrations__Na_sl;
            
            partialF = -0.001 - var_x530;
        }
        else
        {
            const double y_save = rY[19];
            rY[19] += delta;
            const double temp = EvaluateYDerivative19(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[19])/delta;
            rY[19] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL = rY[20];
        // Units: mM; Initial value: 0.00893708435270205
        


        // Mathematics
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CL = -0.019599999999999999 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL + 32.700000000000003 * (0.070000000000000007 - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL) * var_chaste_interface__Ca_Concentrations__Ca_i; // mM / msec

        return d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CL;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
            // Units: mM; Initial value: 8.72745589849657e-05
            


            const double var_x391 = 32.700000000000003 * var_chaste_interface__Ca_Concentrations__Ca_i;
            
            partialF = -0.019599999999999999 - var_x391;
        }
        else
        {
            const double y_save = rY[20];
            rY[20] += delta;
            const double temp = EvaluateYDerivative20(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[20])/delta;
            rY[20] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc = rY[21];
        // Units: mM; Initial value: 0.117445983314504
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm = rY[22];
        // Units: mM; Initial value: 0.0105996734077994
        


        // Mathematics
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHc = -3.1999999999999999e-5 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc + 2.3700000000000001 * (0.14000000000000001 - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm) * var_chaste_interface__Ca_Concentrations__Ca_i; // mM / msec

        return d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHc;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
            // Units: mM; Initial value: 8.72745589849657e-05
            


            const double var_x392 = 2.3700000000000001 * var_chaste_interface__Ca_Concentrations__Ca_i;
            const double var_x532 = -var_x392;
            
            partialF = -3.1999999999999999e-5 + var_x532;
        }
        else
        {
            const double y_save = rY[21];
            rY[21] += delta;
            const double temp = EvaluateYDerivative21(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[21])/delta;
            rY[21] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc = rY[21];
        // Units: mM; Initial value: 0.117445983314504
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm = rY[22];
        // Units: mM; Initial value: 0.0105996734077994
        


        // Mathematics
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHm = 0.00042000000000000007 - 0.0030000000000000001 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc - 0.0063300000000000006 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm; // mM / msec

        return d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHm;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.0063300000000000006;
        }
        else
        {
            const double y_save = rY[22];
            rY[22] += delta;
            const double temp = EvaluateYDerivative22(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[22])/delta;
            rY[22] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__Cytosolic_Ca_Buffers__CaM = rY[23];
        // Units: mM; Initial value: 0.000295653619580701
        


        // Mathematics
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__CaM = -0.23799999999999999 * var_chaste_interface__Cytosolic_Ca_Buffers__CaM + 34.0 * (0.024 - var_chaste_interface__Cytosolic_Ca_Buffers__CaM) * var_chaste_interface__Ca_Concentrations__Ca_i; // mM / msec

        return d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__CaM;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
            // Units: mM; Initial value: 8.72745589849657e-05
            


            const double var_x393 = 34.0 * var_chaste_interface__Ca_Concentrations__Ca_i;
            
            partialF = -0.23799999999999999 - var_x393;
        }
        else
        {
            const double y_save = rY[23];
            rY[23] += delta;
            const double temp = EvaluateYDerivative23(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[23])/delta;
            rY[23] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c = rY[24];
        // Units: mM; Initial value: 0.00192645052472679
        double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m = rY[25];
        // Units: mM; Initial value: 0.137557201546068
        


        // Mathematics
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_c = -0.00046000000000000001 * var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c + 13.800000000000001 * (0.14000000000000001 - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m) * var_chaste_interface__Ca_Concentrations__Ca_i; // mM / msec

        return d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_c;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
            // Units: mM; Initial value: 8.72745589849657e-05
            


            const double var_x394 = 13.800000000000001 * var_chaste_interface__Ca_Concentrations__Ca_i;
            const double var_x533 = -var_x394;
            
            partialF = -0.00046000000000000001 + var_x533;
        }
        else
        {
            const double y_save = rY[24];
            rY[24] += delta;
            const double temp = EvaluateYDerivative24(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[24])/delta;
            rY[24] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c = rY[24];
        // Units: mM; Initial value: 0.00192645052472679
        double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m = rY[25];
        // Units: mM; Initial value: 0.137557201546068
        


        // Mathematics
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_m = 0.0021979999999999999 - 0.015699999999999999 * var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c - 0.015757 * var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m; // mM / msec

        return d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_m;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = -0.015757;
        }
        else
        {
            const double y_save = rY[25];
            rY[25] += delta;
            const double temp = EvaluateYDerivative25(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[25])/delta;
            rY[25] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__Cytosolic_Ca_Buffers__SRB = rY[26];
        // Units: mM; Initial value: 0.00217414510791738
        


        // Mathematics
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__SRB = -0.059999999999999998 * var_chaste_interface__Cytosolic_Ca_Buffers__SRB + 100.0 * (0.017100000000000001 - var_chaste_interface__Cytosolic_Ca_Buffers__SRB) * var_chaste_interface__Ca_Concentrations__Ca_i; // mM / msec

        return d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__SRB;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
            // Units: mM; Initial value: 8.72745589849657e-05
            


            const double var_x395 = 100.0 * var_chaste_interface__Ca_Concentrations__Ca_i;
            
            partialF = -0.059999999999999998 - var_x395;
        }
        else
        {
            const double y_save = rY[26];
            rY[26] += delta;
            const double temp = EvaluateYDerivative26(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[26])/delta;
            rY[26] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j = rY[27];
        // Units: mM; Initial value: 0.00738583890572642
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        


        // Mathematics
        const double var_parameters__Vcell = 1.0506250000000001e-11 * M_PI; // liter
        const double var_parameters__Vjunc = 0.00053900000000000009 * var_parameters__Vcell; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_SLlowj = 0.00046000000000000001 * var_parameters__Vmyo / var_parameters__Vjunc; // mM
        const double d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_j = -1.3 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j + 100.0 * (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j + var_parameters__Bmax_SLlowj) * var_chaste_interface__Ca_Concentrations__Ca_j; // mM / msec

        return d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_j;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            


            const double var_x534 = 100.0 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x535 = -var_x534;
            
            partialF = -1.3 + var_x535;
        }
        else
        {
            const double y_save = rY[27];
            rY[27] += delta;
            const double temp = EvaluateYDerivative27(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[27])/delta;
            rY[27] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl = rY[28];
        // Units: mM; Initial value: 0.00988178900584875
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        


        // Mathematics
        const double var_parameters__Vcell = 1.0506250000000001e-11 * M_PI; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Vsl = 0.02 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_SLlowsl = 0.037400000000000003 * var_parameters__Vmyo / var_parameters__Vsl; // mM
        const double d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_sl = -1.3 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl + 100.0 * (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl + var_parameters__Bmax_SLlowsl) * var_chaste_interface__Ca_Concentrations__Ca_sl; // mM / msec

        return d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_sl;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
            // Units: mM; Initial value: 0.000106544589194246
            


            const double var_x537 = 100.0 * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x538 = -var_x537;
            
            partialF = -1.3 + var_x538;
        }
        else
        {
            const double y_save = rY[28];
            rY[28] += delta;
            const double temp = EvaluateYDerivative28(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[28])/delta;
            rY[28] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j = rY[29];
        // Units: mM; Initial value: 0.0734662466011574
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        


        // Mathematics
        const double var_parameters__Vcell = 1.0506250000000001e-11 * M_PI; // liter
        const double var_parameters__Vjunc = 0.00053900000000000009 * var_parameters__Vcell; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_SLhighj = 0.000165 * var_parameters__Vmyo / var_parameters__Vjunc; // mM
        const double d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_j = -0.029999999999999999 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j + 100.0 * (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j + var_parameters__Bmax_SLhighj) * var_chaste_interface__Ca_Concentrations__Ca_j; // mM / msec

        return d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_j;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            


            const double var_x534 = 100.0 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x535 = -var_x534;
            
            partialF = -0.029999999999999999 + var_x535;
        }
        else
        {
            const double y_save = rY[29];
            rY[29] += delta;
            const double temp = EvaluateYDerivative29(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[29])/delta;
            rY[29] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl = rY[30];
        // Units: mM; Initial value: 0.114400081504523
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        


        // Mathematics
        const double var_parameters__Vcell = 1.0506250000000001e-11 * M_PI; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Vsl = 0.02 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_SLhighsl = 0.0134 * var_parameters__Vmyo / var_parameters__Vsl; // mM
        const double d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_sl = -0.029999999999999999 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl + 100.0 * (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl + var_parameters__Bmax_SLhighsl) * var_chaste_interface__Ca_Concentrations__Ca_sl; // mM / msec

        return d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_sl;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
            // Units: mM; Initial value: 0.000106544589194246
            


            const double var_x537 = 100.0 * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x538 = -var_x537;
            
            partialF = -0.029999999999999999 + var_x538;
        }
        else
        {
            const double y_save = rY[30];
            rY[30] += delta;
            const double temp = EvaluateYDerivative30(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[30])/delta;
            rY[30] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__SR_Ca_Concentrations__Csqn_b = rY[31];
        // Units: mM; Initial value: 1.19772047585784
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        


        // Mathematics
        const double var_parameters__Vcell = 1.0506250000000001e-11 * M_PI; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Vsr = 0.035000000000000003 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_Csqn = 0.14000000000000001 * var_parameters__Vmyo / var_parameters__Vsr; // mM
        const double d_dt_chaste_interface_var_SR_Ca_Concentrations__Csqn_b = -65.0 * var_chaste_interface__SR_Ca_Concentrations__Csqn_b + 100.0 * (-var_chaste_interface__SR_Ca_Concentrations__Csqn_b + var_parameters__Bmax_Csqn) * var_chaste_interface__SR_Ca_Concentrations__Ca_sr; // mM / msec

        return d_dt_chaste_interface_var_SR_Ca_Concentrations__Csqn_b;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
            // Units: mM; Initial value: 0.555180633859957
            


            const double var_x542 = 100.0 * var_chaste_interface__SR_Ca_Concentrations__Ca_sr;
            
            partialF = -65.0 - var_x542;
        }
        else
        {
            const double y_save = rY[31];
            rY[31] += delta;
            const double temp = EvaluateYDerivative31(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[31])/delta;
            rY[31] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
        // Units: mM; Initial value: 7.37484660389498e-07
        double var_chaste_interface__SR_Ca_Concentrations__Csqn_b = rY[31];
        // Units: mM; Initial value: 1.19772047585784
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        


        // Mathematics
        const double var_SR_Fluxes__J_SRleak = (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__SR_Ca_Concentrations__Ca_sr) * mParameters[0]; // mM_per_msec
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_parameters__Vcell = 1.0506250000000001e-11 * M_PI; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Vsr = 0.035000000000000003 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_Csqn = 0.14000000000000001 * var_parameters__Vmyo / var_parameters__Vsr; // mM
        const double var_SR_Fluxes__J_serca = pow(2.6000000000000001, var_parameters__Qpow) * (2814485.1633595936 * pow(var_chaste_interface__Ca_Concentrations__Ca_i, 1.7869999999999999) - 0.38742512113256738 * pow(var_chaste_interface__SR_Ca_Concentrations__Ca_sr, 1.7869999999999999)) * mParameters[2] / (1.0 + 0.38742512113256738 * pow(var_chaste_interface__SR_Ca_Concentrations__Ca_sr, 1.7869999999999999) + 2814485.1633595936 * pow(var_chaste_interface__Ca_Concentrations__Ca_i, 1.7869999999999999)); // mM_per_msec
        const double var_SR_Fluxes__J_SRCarel = (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__SR_Ca_Concentrations__Ca_sr) * var_chaste_interface__SR_Fluxes__Ry_Ro * mParameters[1]; // mM_per_msec
        const double d_dt_chaste_interface_var_SR_Ca_Concentrations__Ca_sr = -var_SR_Fluxes__J_SRCarel + 65.0 * var_chaste_interface__SR_Ca_Concentrations__Csqn_b - 100.0 * (-var_chaste_interface__SR_Ca_Concentrations__Csqn_b + var_parameters__Bmax_Csqn) * var_chaste_interface__SR_Ca_Concentrations__Ca_sr - var_SR_Fluxes__J_SRleak * var_parameters__Vmyo / var_parameters__Vsr + var_SR_Fluxes__J_serca; // mM / msec

        return d_dt_chaste_interface_var_SR_Ca_Concentrations__Ca_sr;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
            // Units: mM; Initial value: 8.72745589849657e-05
            double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
            // Units: mM; Initial value: 7.37484660389498e-07
            double var_chaste_interface__SR_Ca_Concentrations__Csqn_b = rY[31];
            // Units: mM; Initial value: 1.19772047585784
            double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
            // Units: mM; Initial value: 0.555180633859957
            


            const double var_x15 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x382 = pow(var_chaste_interface__SR_Ca_Concentrations__Ca_sr, 1.7869999999999999);
            const double var_x383 = 0.38742512113256738 * var_x382;
            const double var_x384 = pow(var_chaste_interface__Ca_Concentrations__Ca_i, 1.7869999999999999);
            const double var_x385 = 2814485.1633595936 * var_x384;
            const double var_x386 = pow(2.6000000000000001, var_x15) * mParameters[2];
            const double var_x387 = var_x386 / (1.0 + var_x383 + var_x385);
            const double var_x389 = var_x386 * (var_x385 - var_x383) / pow((3.5530476870814998e-7 + var_x384 + 1.3765399305573384e-7 * var_x382), 2);
            const double var_x396 = pow(var_chaste_interface__SR_Ca_Concentrations__Ca_sr, 0.78699999999999992);
            const double var_x397 = var_x387 * var_x396;
            const double var_x398 = var_x389 * var_x396;
            const double var_x543 = 100.0 * var_chaste_interface__SR_Ca_Concentrations__Csqn_b;
            const double var_x544 = 18.571428571428569 * mParameters[0];
            const double var_x545 = var_chaste_interface__SR_Fluxes__Ry_Ro * mParameters[1];
            const double var_x546 = var_x545;
            
            partialF = -260.0 + var_x543 - var_x544 - var_x546 - 0.69232869146389786 * var_x397 - 8.7400597733819945e-14 * var_x398;
        }
        else
        {
            const double y_save = rY[32];
            rY[32] += delta;
            const double temp = EvaluateYDerivative32(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[32])/delta;
            rY[32] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Na__m = rY[2];
        // Units: dimensionless; Initial value: 0.00381858135062259
        double var_chaste_interface__I_Na__h = rY[3];
        // Units: dimensionless; Initial value: 0.625086621635645
        double var_chaste_interface__I_Na__j = rY[4];
        // Units: dimensionless; Initial value: 0.62332507235506
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
        // Units: dimensionless; Initial value: 0.0246142436477748
        double var_chaste_interface__Na_Buffers__Na_Bj = rY[18];
        // Units: mM; Initial value: 3.43545459048316
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        


        // Mathematics
        const double var_I_Ca__fcaCaj = 0; // dimensionless
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_I_NaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[8])) * exp(-var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)); // dimensionless
        const double var_I_NaK__I_nak_junc = 0.11 * var_I_NaK__fnak * mParameters[21] * mParameters[7] / ((1.0 + 14641.0 / pow(var_chaste_interface__Na_Concentrations__Na_j, 4)) * (1.5 + mParameters[7])); // uA_per_uF
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_parameters__Vcell = 1.0506250000000001e-11 * M_PI; // liter
        const double var_parameters__Vjunc = 0.00053900000000000009 * var_parameters__Vcell; // liter
        const double var_parameters__ena_junc = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_j) / var_parameters__FoRT; // mV
        const double var_Na_Buffers__dNa_Bj_dt = -0.001 * var_chaste_interface__Na_Buffers__Na_Bj + 0.0001 * (7.5609999999999999 - var_chaste_interface__Na_Buffers__Na_Bj) * var_chaste_interface__Na_Concentrations__Na_j; // mM_per_msec
        const double var_I_NCX__I_ncx_junc = 0.11 * pow(1.5700000000000001, var_parameters__Qpow) * (pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] * exp(0.27000000000000002 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) - pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * mParameters[20] / ((1.0 + 0.32000000000000001 * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2)) * (1.3 * pow(var_chaste_interface__Na_Concentrations__Na_j, 3) + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_j) * var_chaste_interface__Ca_Concentrations__Ca_j + 0.0035899999999999999 * pow(mParameters[8], 3) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_Concentrations__Na_j, 3)))); // uA_per_uF
        const double var_Na_Concentrations__I_Na_tot_junc = 3.0 * var_I_NCX__I_ncx_junc + 3.0 * var_I_NaK__I_nak_junc + 6.567e-5 * var_chaste_interface__membrane_potential__V_m - 6.567e-5 * var_parameters__ena_junc + 0.11 * pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * mParameters[12] + 0.40500000000000003 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f; // uA_per_uF
        const double d_dt_chaste_interface_var_Na_Concentrations__Na_j = (-var_Na_Buffers__dNa_Bj_dt + 1.8312999999999999e-14 * (-var_chaste_interface__Na_Concentrations__Na_j + var_chaste_interface__Na_Concentrations__Na_sl) / var_parameters__Vjunc - var_Na_Concentrations__I_Na_tot_junc * mParameters[22] / (mParameters[9] * var_parameters__Vjunc)) * mParameters[3]; // mM / msec

        return d_dt_chaste_interface_var_Na_Concentrations__Na_j;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            double var_chaste_interface__I_Na__m = rY[2];
            // Units: dimensionless; Initial value: 0.00381858135062259
            double var_chaste_interface__I_Na__h = rY[3];
            // Units: dimensionless; Initial value: 0.625086621635645
            double var_chaste_interface__I_Na__j = rY[4];
            // Units: dimensionless; Initial value: 0.62332507235506
            double var_chaste_interface__I_Ca__d = rY[11];
            // Units: dimensionless; Initial value: 2.93982287251302e-06
            double var_chaste_interface__I_Ca__f = rY[12];
            // Units: dimensionless; Initial value: 0.99511673495949
            double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
            // Units: dimensionless; Initial value: 0.0246142436477748
            double var_chaste_interface__Na_Buffers__Na_Bj = rY[18];
            // Units: mM; Initial value: 3.43545459048316
            double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
            // Units: mM; Initial value: 8.3215690202059
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            


            const double var_x1 = exp(9.9999999999999995e-8);
            const double var_x3 = 1 / (-1.0 + var_x1);
            const double var_x7 = exp(-9.9999999999999995e-8);
            const double var_x8 = 1 / (-1.0 + var_x7);
            const double var_x12 = 1.0 - var_chaste_interface__I_Ca__f_Ca_Bj;
            const double var_x13 = 1 / (mParameters[10] * mParameters[23]);
            const double var_x14 = var_x13 * mParameters[9];
            const double var_x15 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x16 = pow(1.8, var_x15);
            const double var_x17 = var_x16 * var_chaste_interface__I_Ca__f;
            const double var_x18 = var_x17 * var_chaste_interface__I_Ca__d;
            const double var_x38 = 1 / mParameters[9];
            const double var_x39 = var_x38 * mParameters[10] * mParameters[23];
            const double var_x44 = pow(var_chaste_interface__I_Na__m, 3);
            const double var_x45 = var_x44 * var_chaste_interface__I_Na__j * mParameters[12];
            const double var_x46 = var_x45 * var_chaste_interface__I_Na__h;
            const double var_x67 = var_x14 * var_chaste_interface__membrane_potential__V_m;
            const double var_x68 = exp(0.27000000000000002 * var_x67);
            const double var_x69 = pow(var_chaste_interface__Na_Concentrations__Na_j, 3);
            const double var_x70 = var_x69 * mParameters[5];
            const double var_x71 = var_x68 * var_x70;
            const double var_x73 = exp(-0.72999999999999998 * var_x67);
            const double var_x74 = pow(mParameters[8], 3);
            const double var_x75 = var_x74 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x76 = var_x73 * var_x75;
            const double var_x78 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_j) * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x79 = 1.0 + 0.00053869674493876331 * var_x69;
            const double var_x80 = 0.0035899999999999999 * var_x74;
            const double var_x81 = 1 / (var_x70 + var_x75 + 669921.875 * var_x78 + 1.3 * var_x69 + var_x79 * var_x80);
            const double var_x82 = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2);
            const double var_x83 = 1 / var_x82;
            const double var_x84 = 1.0 + 2.2499999999999996e-8 * var_x83;
            const double var_x85 = 1 / var_x84;
            const double var_x86 = 1.0 + 0.32000000000000001 * var_x73;
            const double var_x87 = pow(1.5700000000000001, var_x15) * mParameters[20];
            const double var_x88 = var_x87 / var_x86;
            const double var_x89 = var_x85 * var_x88;
            const double var_x90 = var_x81 * var_x89;
            const double var_x92 = pow(var_chaste_interface__Na_Concentrations__Na_j, (-4));
            const double var_x93 = 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m;
            const double var_x94 = exp(-var_x14 * var_x93);
            const double var_x95 = exp(0.01485884101040119 * mParameters[8]);
            const double var_x96 = exp(-var_x67);
            const double var_x97 = 1.0 + 0.1245 * var_x94 + 0.036499999999999998 * var_x96 * (-0.14285714285714285 + 0.14285714285714285 * var_x95);
            const double var_x98 = mParameters[21] * mParameters[7] / (1.5 + mParameters[7]);
            const double var_x123 = var_x71 - var_x76;
            const double var_x152 = fabs(var_chaste_interface__membrane_potential__V_m);
            const double var_x153 = fabs(var_x39);
            const double var_x155 = var_x152 < 9.9999999999999995e-8 * var_x153;
            const double var_x157 = exp(var_x67);
            const double var_x159 = var_x13 * pow(mParameters[9], 2);
            const double var_x160 = -1.0 + var_x157;
            const double var_x161 = 1 / var_x160;
            const double var_x166 = var_x159 * var_x161;
            const double var_x169 = var_x166 * var_x18;
            const double var_x170 = var_x12 * var_x169;
            const double var_x173 = var_x157 * var_chaste_interface__membrane_potential__V_m;
            const double var_x212 = 1 / var_chaste_interface__Na_Concentrations__Na_j;
            const double var_x234 = 0.40500000000000003 * var_x12;
            const double var_x235 = var_x17 * var_x234;
            const double var_x238 = 0.5 * var_x39 + 5000000.0 * var_chaste_interface__membrane_potential__V_m;
            const double var_x242 = var_x14 * var_x238;
            const double var_x295 = 5.6249999999999997e-16 * mParameters[9];
            const double var_x296 = var_x7 * var_x8;
            const double var_x297 = var_x295 * var_x296;
            const double var_x298 = var_x1 * var_x3;
            const double var_x299 = (-var_x297 + var_x242 * (var_x297 + var_x295 * var_x298)) * var_chaste_interface__I_Ca__d;
            const double var_x300 = var_x235 * var_x299;
            const double var_x301 = var_x212 * var_x39;
            const double var_x302 = 6.567e-5 * var_x301;
            const double var_x303 = var_x98 / var_x97;
            const double var_x304 = var_x303 / (pow((6.8301345536507063e-5 + var_x92), 2) * pow(var_chaste_interface__Na_Concentrations__Na_j, 5));
            const double var_x305 = pow(var_chaste_interface__Na_Concentrations__Na_j, 2);
            const double var_x306 = 3 * mParameters[5];
            const double var_x307 = 5.8017639429904805e-6 * var_x74;
            const double var_x308 = -3.9000000000000004 * var_x305 - var_x305 * var_x306 - var_x305 * var_x307;
            const double var_x309 = 5.3588338192419823e-9 * var_x74;
            const double var_x310 = var_x123 * var_x89 / pow((var_x78 + 1.9405247813411081e-6 * var_x69 + 1.4927113702623908e-6 * var_x70 + 1.4927113702623908e-6 * var_x75 + var_x309 * var_x79), 2);
            const double var_x312 = 0.11 * var_x46;
            const double var_x313 = var_x301 * var_x312;
            const double var_x314 = var_x68 * mParameters[5];
            const double var_x315 = var_x305 * var_x314 * var_x90;
            const double var_x318 = 2.2781249999999999e-9 * var_x170 * var_x173;
            const double var_x379 = 1 / M_PI;
            const double var_x529 = 0.0001 * var_chaste_interface__Na_Buffers__Na_Bj;
            const double var_x549 = var_x38 * mParameters[22];
            const double var_x555 = 3.2338732908121872 * var_x379;
            const double var_x556 = 7.3530178752050587e-13 * var_x310;
            const double var_x557 = var_x302 + var_x313 + 9.0157776108189337e-5 * var_x304 + 0.98999999999999999 * var_x315 + var_x308 * var_x556;
            const double var_x558 = var_x379 * var_x549;
            
            partialF = (-0.0007561 + var_x529 - var_x555 - 176588941779729.56 * var_x558 * ((var_x155) ? (var_x300 + var_x557) : (var_x318 + var_x557))) * mParameters[3];
        }
        else
        {
            const double y_save = rY[33];
            rY[33] += delta;
            const double temp = EvaluateYDerivative33(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[33])/delta;
            rY[33] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Na__m = rY[2];
        // Units: dimensionless; Initial value: 0.00381858135062259
        double var_chaste_interface__I_Na__h = rY[3];
        // Units: dimensionless; Initial value: 0.625086621635645
        double var_chaste_interface__I_Na__j = rY[4];
        // Units: dimensionless; Initial value: 0.62332507235506
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
        // Units: dimensionless; Initial value: 0.0152416826209301
        double var_chaste_interface__Na_Buffers__Na_Bsl = rY[19];
        // Units: mM; Initial value: 0.749601264899653
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Na_Concentrations__Na_i = rY[35];
        // Units: mM; Initial value: 8.32114502072456
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        


        // Mathematics
        const double var_I_Ca__fcaCaMSL = 0; // dimensionless
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_I_NaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[8])) * exp(-var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)); // dimensionless
        const double var_I_NaK__I_nak_sl = 0.89000000000000001 * var_I_NaK__fnak * mParameters[21] * mParameters[7] / ((1.0 + 14641.0 / pow(var_chaste_interface__Na_Concentrations__Na_sl, 4)) * (1.5 + mParameters[7])); // uA_per_uF
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_parameters__Vcell = 1.0506250000000001e-11 * M_PI; // liter
        const double var_parameters__Vsl = 0.02 * var_parameters__Vcell; // liter
        const double var_parameters__ena_sl = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_sl) / var_parameters__FoRT; // mV
        const double var_Na_Buffers__dNa_Bsl_dt = -0.001 * var_chaste_interface__Na_Buffers__Na_Bsl + 0.0001 * (1.6499999999999999 - var_chaste_interface__Na_Buffers__Na_Bsl) * var_chaste_interface__Na_Concentrations__Na_sl; // mM_per_msec
        const double var_I_NCX__I_ncx_sl = 0.89000000000000001 * pow(1.5700000000000001, var_parameters__Qpow) * (pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] * exp(0.27000000000000002 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) - pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * mParameters[20] / ((1.0 + 0.32000000000000001 * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 2)) * (1.3 * pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_sl) * var_chaste_interface__Ca_Concentrations__Ca_sl + 0.0035899999999999999 * pow(mParameters[8], 3) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_Concentrations__Na_sl, 3)))); // uA_per_uF
        const double var_Na_Concentrations__I_Na_tot_sl = 3.0 * var_I_NCX__I_ncx_sl + 3.0 * var_I_NaK__I_nak_sl + 0.00053133 * var_chaste_interface__membrane_potential__V_m - 0.00053133 * var_parameters__ena_sl + 0.89000000000000001 * pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * mParameters[12] + 0.044999999999999991 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f; // uA_per_uF
        const double d_dt_chaste_interface_var_Na_Concentrations__Na_sl = (-var_Na_Buffers__dNa_Bsl_dt + 1.6385999999999999e-12 * (-var_chaste_interface__Na_Concentrations__Na_sl + var_chaste_interface__Na_Concentrations__Na_i) / var_parameters__Vsl + 1.8312999999999999e-14 * (-var_chaste_interface__Na_Concentrations__Na_sl + var_chaste_interface__Na_Concentrations__Na_j) / var_parameters__Vsl - var_Na_Concentrations__I_Na_tot_sl * mParameters[22] / (mParameters[9] * var_parameters__Vsl)) * mParameters[3]; // mM / msec

        return d_dt_chaste_interface_var_Na_Concentrations__Na_sl;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            double var_chaste_interface__I_Na__m = rY[2];
            // Units: dimensionless; Initial value: 0.00381858135062259
            double var_chaste_interface__I_Na__h = rY[3];
            // Units: dimensionless; Initial value: 0.625086621635645
            double var_chaste_interface__I_Na__j = rY[4];
            // Units: dimensionless; Initial value: 0.62332507235506
            double var_chaste_interface__I_Ca__d = rY[11];
            // Units: dimensionless; Initial value: 2.93982287251302e-06
            double var_chaste_interface__I_Ca__f = rY[12];
            // Units: dimensionless; Initial value: 0.99511673495949
            double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
            // Units: dimensionless; Initial value: 0.0152416826209301
            double var_chaste_interface__Na_Buffers__Na_Bsl = rY[19];
            // Units: mM; Initial value: 0.749601264899653
            double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
            // Units: mM; Initial value: 8.32094589677861
            double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
            // Units: mM; Initial value: 0.000106544589194246
            


            const double var_x1 = exp(9.9999999999999995e-8);
            const double var_x3 = 1 / (-1.0 + var_x1);
            const double var_x7 = exp(-9.9999999999999995e-8);
            const double var_x8 = 1 / (-1.0 + var_x7);
            const double var_x13 = 1 / (mParameters[10] * mParameters[23]);
            const double var_x14 = var_x13 * mParameters[9];
            const double var_x15 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x16 = pow(1.8, var_x15);
            const double var_x17 = var_x16 * var_chaste_interface__I_Ca__f;
            const double var_x18 = var_x17 * var_chaste_interface__I_Ca__d;
            const double var_x25 = 1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl;
            const double var_x26 = var_x18 * var_x25;
            const double var_x38 = 1 / mParameters[9];
            const double var_x39 = var_x38 * mParameters[10] * mParameters[23];
            const double var_x44 = pow(var_chaste_interface__I_Na__m, 3);
            const double var_x45 = var_x44 * var_chaste_interface__I_Na__j * mParameters[12];
            const double var_x46 = var_x45 * var_chaste_interface__I_Na__h;
            const double var_x67 = var_x14 * var_chaste_interface__membrane_potential__V_m;
            const double var_x68 = exp(0.27000000000000002 * var_x67);
            const double var_x73 = exp(-0.72999999999999998 * var_x67);
            const double var_x74 = pow(mParameters[8], 3);
            const double var_x80 = 0.0035899999999999999 * var_x74;
            const double var_x86 = 1.0 + 0.32000000000000001 * var_x73;
            const double var_x87 = pow(1.5700000000000001, var_x15) * mParameters[20];
            const double var_x88 = var_x87 / var_x86;
            const double var_x93 = 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m;
            const double var_x94 = exp(-var_x14 * var_x93);
            const double var_x95 = exp(0.01485884101040119 * mParameters[8]);
            const double var_x96 = exp(-var_x67);
            const double var_x97 = 1.0 + 0.1245 * var_x94 + 0.036499999999999998 * var_x96 * (-0.14285714285714285 + 0.14285714285714285 * var_x95);
            const double var_x98 = mParameters[21] * mParameters[7] / (1.5 + mParameters[7]);
            const double var_x101 = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3);
            const double var_x102 = var_x101 * mParameters[5];
            const double var_x103 = var_x102 * var_x68;
            const double var_x104 = var_x74 * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x105 = var_x104 * var_x73;
            const double var_x106 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_sl) * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x107 = 1.0 + 0.00053869674493876331 * var_x101;
            const double var_x108 = 1 / (var_x102 + var_x104 + 669921.875 * var_x106 + 1.3 * var_x101 + var_x107 * var_x80);
            const double var_x109 = pow(var_chaste_interface__Ca_Concentrations__Ca_sl, (-2));
            const double var_x110 = 1.0 + 2.2499999999999996e-8 * var_x109;
            const double var_x111 = 1 / var_x110;
            const double var_x112 = var_x111 * var_x88;
            const double var_x113 = var_x108 * var_x112;
            const double var_x115 = pow(var_chaste_interface__Na_Concentrations__Na_sl, (-4));
            const double var_x127 = var_x103 - var_x105;
            const double var_x152 = fabs(var_chaste_interface__membrane_potential__V_m);
            const double var_x153 = fabs(var_x39);
            const double var_x155 = var_x152 < 9.9999999999999995e-8 * var_x153;
            const double var_x157 = exp(var_x67);
            const double var_x159 = var_x13 * pow(mParameters[9], 2);
            const double var_x160 = -1.0 + var_x157;
            const double var_x161 = 1 / var_x160;
            const double var_x162 = var_x161 * var_x26;
            const double var_x163 = var_x159 * var_x162;
            const double var_x173 = var_x157 * var_chaste_interface__membrane_potential__V_m;
            const double var_x182 = 2.5312499999999994e-10 * var_x173;
            const double var_x218 = 1 / var_chaste_interface__Na_Concentrations__Na_sl;
            const double var_x229 = 0.044999999999999991 * var_x25;
            const double var_x230 = var_x17 * var_x229;
            const double var_x238 = 0.5 * var_x39 + 5000000.0 * var_chaste_interface__membrane_potential__V_m;
            const double var_x242 = var_x14 * var_x238;
            const double var_x295 = 5.6249999999999997e-16 * mParameters[9];
            const double var_x296 = var_x7 * var_x8;
            const double var_x297 = var_x295 * var_x296;
            const double var_x298 = var_x1 * var_x3;
            const double var_x299 = (-var_x297 + var_x242 * (var_x297 + var_x295 * var_x298)) * var_chaste_interface__I_Ca__d;
            const double var_x303 = var_x98 / var_x97;
            const double var_x306 = 3 * mParameters[5];
            const double var_x307 = 5.8017639429904805e-6 * var_x74;
            const double var_x309 = 5.3588338192419823e-9 * var_x74;
            const double var_x314 = var_x68 * mParameters[5];
            const double var_x320 = var_x230 * var_x299;
            const double var_x321 = var_x218 * var_x39;
            const double var_x322 = 0.00053133 * var_x321;
            const double var_x323 = var_x303 / (pow((6.8301345536507063e-5 + var_x115), 2) * pow(var_chaste_interface__Na_Concentrations__Na_sl, 5));
            const double var_x324 = pow(var_chaste_interface__Na_Concentrations__Na_sl, 2);
            const double var_x325 = -3.9000000000000004 * var_x324 - var_x306 * var_x324 - var_x307 * var_x324;
            const double var_x326 = var_x112 * var_x127 / pow((var_x106 + 1.9405247813411081e-6 * var_x101 + 1.4927113702623908e-6 * var_x102 + 1.4927113702623908e-6 * var_x104 + var_x107 * var_x309), 2);
            const double var_x328 = 0.89000000000000001 * var_x46;
            const double var_x329 = var_x321 * var_x328;
            const double var_x330 = var_x113 * var_x314 * var_x324;
            const double var_x333 = var_x163 * var_x182;
            const double var_x379 = 1 / M_PI;
            const double var_x531 = 0.0001 * var_chaste_interface__Na_Buffers__Na_Bsl;
            const double var_x549 = var_x38 * mParameters[22];
            const double var_x558 = var_x379 * var_x549;
            const double var_x562 = 5.9492599172113663e-12 * var_x326;
            const double var_x563 = var_x322 + var_x329 + 8.0099999999999998 * var_x330 + 0.00072945837032989554 * var_x323 + var_x325 * var_x562;
            
            partialF = (-0.000165 + var_x531 - 7.8853682331945256 * var_x379 - 4759071980963.7119 * var_x558 * ((var_x155) ? (var_x320 + var_x563) : (var_x333 + var_x563))) * mParameters[3];
        }
        else
        {
            const double y_save = rY[34];
            rY[34] += delta;
            const double temp = EvaluateYDerivative34(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[34])/delta;
            rY[34] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative35(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Na_Concentrations__Na_i = rY[35];
        // Units: mM; Initial value: 8.32114502072456
        


        // Mathematics
        const double var_parameters__Vcell = 1.0506250000000001e-11 * M_PI; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double d_dt_chaste_interface_var_Na_Concentrations__Na_i = 1.6385999999999999e-12 * (-var_chaste_interface__Na_Concentrations__Na_i + var_chaste_interface__Na_Concentrations__Na_sl) * mParameters[3] / var_parameters__Vmyo; // mM / msec

        return d_dt_chaste_interface_var_Na_Concentrations__Na_i;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative35(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            const double var_x379 = 1 / M_PI;
            const double var_x548 = var_x379 * mParameters[3];
            const double var_x564 = 0.23994508763098885 * var_x548;
            
            partialF = -var_x564;
        }
        else
        {
            const double y_save = rY[35];
            rY[35] += delta;
            const double temp = EvaluateYDerivative35(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[35])/delta;
            rY[35] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative36(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        


        // Mathematics
        const double d_dt_chaste_interface_var_K_Concentration__K_i = 0; // mM / msec

        return d_dt_chaste_interface_var_K_Concentration__K_i;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative36(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            


            
            partialF = 0;
        }
        else
        {
            const double y_save = rY[36];
            rY[36] += delta;
            const double temp = EvaluateYDerivative36(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[36])/delta;
            rY[36] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative37(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
        // Units: dimensionless; Initial value: 0.0246142436477748
        double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
        // Units: mM; Initial value: 7.37484660389498e-07
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j = rY[27];
        // Units: mM; Initial value: 0.00738583890572642
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j = rY[29];
        // Units: mM; Initial value: 0.0734662466011574
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        


        // Mathematics
        const double var_I_Ca__fcaCaj = 0; // dimensionless
        const double var_SR_Fluxes__J_SRleak = (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__SR_Ca_Concentrations__Ca_sr) * mParameters[0]; // mM_per_msec
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_parameters__Vcell = 1.0506250000000001e-11 * M_PI; // liter
        const double var_parameters__Vjunc = 0.00053900000000000009 * var_parameters__Vcell; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_SLhighj = 0.000165 * var_parameters__Vmyo / var_parameters__Vjunc; // mM
        const double var_parameters__Bmax_SLlowj = 0.00046000000000000001 * var_parameters__Vmyo / var_parameters__Vjunc; // mM
        const double var_parameters__Vsr = 0.035000000000000003 * var_parameters__Vcell; // liter
        const double var_SR_Fluxes__J_SRCarel = (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__SR_Ca_Concentrations__Ca_sr) * var_chaste_interface__SR_Fluxes__Ry_Ro * mParameters[1]; // mM_per_msec
        const double var_I_NCX__I_ncx_junc = 0.11 * pow(1.5700000000000001, var_parameters__Qpow) * (pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] * exp(0.27000000000000002 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) - pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * mParameters[20] / ((1.0 + 0.32000000000000001 * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2)) * (1.3 * pow(var_chaste_interface__Na_Concentrations__Na_j, 3) + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_j) * var_chaste_interface__Ca_Concentrations__Ca_j + 0.0035899999999999999 * pow(mParameters[8], 3) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_Concentrations__Na_j, 3)))); // uA_per_uF
        const double var_Ca_Concentrations__I_Ca_tot_junc = 6.0643000000000002e-5 * var_chaste_interface__membrane_potential__V_m - 2.0 * var_I_NCX__I_ncx_junc - 3.0321500000000001e-5 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_j) / var_parameters__FoRT + 0.0074029999999999999 * pow(2.3500000000000001, var_parameters__Qpow) * pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) / (5.2281977629563632e-6 + pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001)) + 0.40500000000000003 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f; // uA_per_uF
        const double d_dt_chaste_interface_var_Ca_Concentrations__Ca_j = 0.029999999999999999 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j + 1.3 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j + 8.2413000000000004e-13 * (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__Ca_Concentrations__Ca_sl) / var_parameters__Vjunc - 100.0 * (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j + var_parameters__Bmax_SLhighj) * var_chaste_interface__Ca_Concentrations__Ca_j - 100.0 * (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j + var_parameters__Bmax_SLlowj) * var_chaste_interface__Ca_Concentrations__Ca_j + var_SR_Fluxes__J_SRCarel * var_parameters__Vsr / var_parameters__Vjunc + var_SR_Fluxes__J_SRleak * var_parameters__Vmyo / var_parameters__Vjunc - 0.5 * var_Ca_Concentrations__I_Ca_tot_junc * mParameters[22] / (mParameters[9] * var_parameters__Vjunc); // mM / msec

        return d_dt_chaste_interface_var_Ca_Concentrations__Ca_j;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative37(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            double var_chaste_interface__I_Ca__d = rY[11];
            // Units: dimensionless; Initial value: 2.93982287251302e-06
            double var_chaste_interface__I_Ca__f = rY[12];
            // Units: dimensionless; Initial value: 0.99511673495949
            double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
            // Units: dimensionless; Initial value: 0.0246142436477748
            double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
            // Units: mM; Initial value: 7.37484660389498e-07
            double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j = rY[27];
            // Units: mM; Initial value: 0.00738583890572642
            double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j = rY[29];
            // Units: mM; Initial value: 0.0734662466011574
            double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
            // Units: mM; Initial value: 8.3215690202059
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            


            const double var_x1 = exp(9.9999999999999995e-8);
            const double var_x3 = 1 / (-1.0 + var_x1);
            const double var_x4 = mParameters[9] * mParameters[11];
            const double var_x7 = exp(-9.9999999999999995e-8);
            const double var_x8 = 1 / (-1.0 + var_x7);
            const double var_x12 = 1.0 - var_chaste_interface__I_Ca__f_Ca_Bj;
            const double var_x13 = 1 / (mParameters[10] * mParameters[23]);
            const double var_x14 = var_x13 * mParameters[9];
            const double var_x15 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x16 = pow(1.8, var_x15);
            const double var_x17 = var_x16 * var_chaste_interface__I_Ca__f;
            const double var_x18 = var_x17 * var_chaste_interface__I_Ca__d;
            const double var_x31 = 1 / var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x38 = 1 / mParameters[9];
            const double var_x39 = var_x38 * mParameters[10] * mParameters[23];
            const double var_x67 = var_x14 * var_chaste_interface__membrane_potential__V_m;
            const double var_x68 = exp(0.27000000000000002 * var_x67);
            const double var_x69 = pow(var_chaste_interface__Na_Concentrations__Na_j, 3);
            const double var_x70 = var_x69 * mParameters[5];
            const double var_x71 = var_x68 * var_x70;
            const double var_x73 = exp(-0.72999999999999998 * var_x67);
            const double var_x74 = pow(mParameters[8], 3);
            const double var_x75 = var_x74 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x76 = var_x73 * var_x75;
            const double var_x78 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_j) * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x79 = 1.0 + 0.00053869674493876331 * var_x69;
            const double var_x80 = 0.0035899999999999999 * var_x74;
            const double var_x81 = 1 / (var_x70 + var_x75 + 669921.875 * var_x78 + 1.3 * var_x69 + var_x79 * var_x80);
            const double var_x82 = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2);
            const double var_x83 = 1 / var_x82;
            const double var_x84 = 1.0 + 2.2499999999999996e-8 * var_x83;
            const double var_x85 = 1 / var_x84;
            const double var_x86 = 1.0 + 0.32000000000000001 * var_x73;
            const double var_x87 = pow(1.5700000000000001, var_x15) * mParameters[20];
            const double var_x88 = var_x87 / var_x86;
            const double var_x89 = var_x85 * var_x88;
            const double var_x90 = var_x81 * var_x89;
            const double var_x123 = var_x71 - var_x76;
            const double var_x124 = var_x123 * var_x81;
            const double var_x152 = fabs(var_chaste_interface__membrane_potential__V_m);
            const double var_x153 = fabs(var_x39);
            const double var_x154 = var_x152 < 4.9999999999999998e-8 * var_x153;
            const double var_x159 = var_x13 * pow(mParameters[9], 2);
            const double var_x179 = var_x18 * var_chaste_interface__membrane_potential__V_m;
            const double var_x188 = exp(2.0 * var_x67);
            const double var_x191 = -1.0 + var_x188;
            const double var_x192 = mParameters[11] / var_x191;
            const double var_x193 = var_x159 * var_x192;
            const double var_x196 = var_x12 * var_x193;
            const double var_x204 = var_x179 * var_x188;
            const double var_x227 = 0.5 * var_x39 + 10000000.0 * var_chaste_interface__membrane_potential__V_m;
            const double var_x232 = var_x14 * var_x227;
            const double var_x234 = 0.40500000000000003 * var_x12;
            const double var_x235 = var_x17 * var_x234;
            const double var_x296 = var_x7 * var_x8;
            const double var_x298 = var_x1 * var_x3;
            const double var_x309 = 5.3588338192419823e-9 * var_x74;
            const double var_x310 = var_x123 * var_x89 / pow((var_x78 + 1.9405247813411081e-6 * var_x69 + 1.4927113702623908e-6 * var_x70 + 1.4927113702623908e-6 * var_x75 + var_x309 * var_x79), 2);
            const double var_x342 = 3.6827999999999999e-11 * var_x4;
            const double var_x343 = var_x296 * var_x342;
            const double var_x344 = (-var_x343 + var_x232 * (var_x343 + var_x298 * var_x342)) * var_chaste_interface__I_Ca__d;
            const double var_x345 = var_x235 * var_x344;
            const double var_x346 = 5.2281977629563632e-6 + pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001);
            const double var_x347 = pow(2.3500000000000001, var_x15);
            const double var_x348 = 0.011844800000000001 * var_x347;
            const double var_x349 = var_x348 * pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2.2000000000000002) / pow(var_x346, 2);
            const double var_x351 = var_x348 * pow(var_chaste_interface__Ca_Concentrations__Ca_j, 0.60000000000000009) / var_x346;
            const double var_x352 = 3.0321500000000001e-5 * var_x31 * var_x39;
            const double var_x353 = var_x73 * var_x74;
            const double var_x354 = var_x353 * var_x90;
            const double var_x355 = -669921.875 - var_x74;
            const double var_x356 = var_x355 - 373215529.24791086 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x357 = var_x124 * var_x88 / (pow(var_x84, 2) * pow(var_chaste_interface__Ca_Concentrations__Ca_j, 3));
            const double var_x360 = 0.00029830680000000003 * var_x196 * var_x204;
            const double var_x379 = 1 / M_PI;
            const double var_x536 = 100.0 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j;
            const double var_x540 = 100.0 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j;
            const double var_x545 = var_chaste_interface__SR_Fluxes__Ry_Ro * mParameters[1];
            const double var_x549 = var_x38 * mParameters[22];
            const double var_x558 = var_x379 * var_x549;
            const double var_x566 = 88294470889864.781 * var_x558;
            const double var_x567 = 1205.9369202226344 * mParameters[0];
            const double var_x568 = 64.935064935064929 * var_x545;
            const double var_x569 = 4.9020119168033731e-13 * var_x310;
            const double var_x570 = 145.53224458892851 * var_x379;
            const double var_x571 = var_x351 + var_x352 - var_x349 + 0.22 * var_x354 - 9.8999999999999977e-9 * var_x357 - var_x356 * var_x569;
            
            partialF = -75.37105751391465 + var_x536 + var_x540 - var_x567 - var_x568 - var_x570 - var_x566 * ((var_x154) ? (var_x345 + var_x571) : (var_x360 + var_x571));
        }
        else
        {
            const double y_save = rY[37];
            rY[37] += delta;
            const double temp = EvaluateYDerivative37(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[37])/delta;
            rY[37] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluateYDerivative38(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
        // Units: dimensionless; Initial value: 0.0152416826209301
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl = rY[28];
        // Units: mM; Initial value: 0.00988178900584875
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl = rY[30];
        // Units: mM; Initial value: 0.114400081504523
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        


        // Mathematics
        const double var_I_Ca__fcaCaMSL = 0; // dimensionless
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_parameters__Vcell = 1.0506250000000001e-11 * M_PI; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Vsl = 0.02 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_SLhighsl = 0.0134 * var_parameters__Vmyo / var_parameters__Vsl; // mM
        const double var_parameters__Bmax_SLlowsl = 0.037400000000000003 * var_parameters__Vmyo / var_parameters__Vsl; // mM
        const double var_I_NCX__I_ncx_sl = 0.89000000000000001 * pow(1.5700000000000001, var_parameters__Qpow) * (pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] * exp(0.27000000000000002 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) - pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * mParameters[20] / ((1.0 + 0.32000000000000001 * exp(-0.72999999999999998 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 2)) * (1.3 * pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl + 669921.875 * (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_sl) * var_chaste_interface__Ca_Concentrations__Ca_sl + 0.0035899999999999999 * pow(mParameters[8], 3) * (1.0 + 0.00053869674493876331 * pow(var_chaste_interface__Na_Concentrations__Na_sl, 3)))); // uA_per_uF
        const double var_Ca_Concentrations__I_Ca_tot_sl = 0.00049065700000000003 * var_chaste_interface__membrane_potential__V_m - 2.0 * var_I_NCX__I_ncx_sl - 0.00024532850000000001 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_sl) / var_parameters__FoRT + 0.059896999999999999 * pow(2.3500000000000001, var_parameters__Qpow) * pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) / (5.2281977629563632e-6 + pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001)) + 0.044999999999999991 * pow(1.8, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f; // uA_per_uF
        const double d_dt_chaste_interface_var_Ca_Concentrations__Ca_sl = 0.029999999999999999 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl + 1.3 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl + 8.2413000000000004e-13 * (-var_chaste_interface__Ca_Concentrations__Ca_sl + var_chaste_interface__Ca_Concentrations__Ca_j) / var_parameters__Vsl + 3.2742999999999999e-12 * (-var_chaste_interface__Ca_Concentrations__Ca_sl + var_chaste_interface__Ca_Concentrations__Ca_i) / var_parameters__Vsl - 100.0 * (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl + var_parameters__Bmax_SLhighsl) * var_chaste_interface__Ca_Concentrations__Ca_sl - 100.0 * (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl + var_parameters__Bmax_SLlowsl) * var_chaste_interface__Ca_Concentrations__Ca_sl - 0.5 * var_Ca_Concentrations__I_Ca_tot_sl * mParameters[22] / (mParameters[9] * var_parameters__Vsl); // mM / msec

        return d_dt_chaste_interface_var_Ca_Concentrations__Ca_sl;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::EvaluatePartialDerivative38(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            double var_chaste_interface__I_Ca__d = rY[11];
            // Units: dimensionless; Initial value: 2.93982287251302e-06
            double var_chaste_interface__I_Ca__f = rY[12];
            // Units: dimensionless; Initial value: 0.99511673495949
            double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
            // Units: dimensionless; Initial value: 0.0152416826209301
            double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl = rY[28];
            // Units: mM; Initial value: 0.00988178900584875
            double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl = rY[30];
            // Units: mM; Initial value: 0.114400081504523
            double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
            // Units: mM; Initial value: 8.32094589677861
            double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
            // Units: mM; Initial value: 0.000106544589194246
            


            const double var_x1 = exp(9.9999999999999995e-8);
            const double var_x3 = 1 / (-1.0 + var_x1);
            const double var_x4 = mParameters[9] * mParameters[11];
            const double var_x7 = exp(-9.9999999999999995e-8);
            const double var_x8 = 1 / (-1.0 + var_x7);
            const double var_x13 = 1 / (mParameters[10] * mParameters[23]);
            const double var_x14 = var_x13 * mParameters[9];
            const double var_x15 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x16 = pow(1.8, var_x15);
            const double var_x17 = var_x16 * var_chaste_interface__I_Ca__f;
            const double var_x18 = var_x17 * var_chaste_interface__I_Ca__d;
            const double var_x25 = 1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl;
            const double var_x26 = var_x18 * var_x25;
            const double var_x33 = 1 / var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x38 = 1 / mParameters[9];
            const double var_x39 = var_x38 * mParameters[10] * mParameters[23];
            const double var_x67 = var_x14 * var_chaste_interface__membrane_potential__V_m;
            const double var_x68 = exp(0.27000000000000002 * var_x67);
            const double var_x73 = exp(-0.72999999999999998 * var_x67);
            const double var_x74 = pow(mParameters[8], 3);
            const double var_x80 = 0.0035899999999999999 * var_x74;
            const double var_x86 = 1.0 + 0.32000000000000001 * var_x73;
            const double var_x87 = pow(1.5700000000000001, var_x15) * mParameters[20];
            const double var_x88 = var_x87 / var_x86;
            const double var_x101 = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3);
            const double var_x102 = var_x101 * mParameters[5];
            const double var_x103 = var_x102 * var_x68;
            const double var_x104 = var_x74 * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x105 = var_x104 * var_x73;
            const double var_x106 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_sl) * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x107 = 1.0 + 0.00053869674493876331 * var_x101;
            const double var_x108 = 1 / (var_x102 + var_x104 + 669921.875 * var_x106 + 1.3 * var_x101 + var_x107 * var_x80);
            const double var_x109 = pow(var_chaste_interface__Ca_Concentrations__Ca_sl, (-2));
            const double var_x110 = 1.0 + 2.2499999999999996e-8 * var_x109;
            const double var_x111 = 1 / var_x110;
            const double var_x112 = var_x111 * var_x88;
            const double var_x113 = var_x108 * var_x112;
            const double var_x127 = var_x103 - var_x105;
            const double var_x128 = var_x108 * var_x127;
            const double var_x152 = fabs(var_chaste_interface__membrane_potential__V_m);
            const double var_x153 = fabs(var_x39);
            const double var_x154 = var_x152 < 4.9999999999999998e-8 * var_x153;
            const double var_x159 = var_x13 * pow(mParameters[9], 2);
            const double var_x188 = exp(2.0 * var_x67);
            const double var_x191 = -1.0 + var_x188;
            const double var_x192 = mParameters[11] / var_x191;
            const double var_x193 = var_x159 * var_x192;
            const double var_x201 = var_x188 * var_chaste_interface__membrane_potential__V_m;
            const double var_x207 = var_x201 * var_x26;
            const double var_x227 = 0.5 * var_x39 + 10000000.0 * var_chaste_interface__membrane_potential__V_m;
            const double var_x229 = 0.044999999999999991 * var_x25;
            const double var_x230 = var_x17 * var_x229;
            const double var_x232 = var_x14 * var_x227;
            const double var_x296 = var_x7 * var_x8;
            const double var_x298 = var_x1 * var_x3;
            const double var_x309 = 5.3588338192419823e-9 * var_x74;
            const double var_x326 = var_x112 * var_x127 / pow((var_x106 + 1.9405247813411081e-6 * var_x101 + 1.4927113702623908e-6 * var_x102 + 1.4927113702623908e-6 * var_x104 + var_x107 * var_x309), 2);
            const double var_x342 = 3.6827999999999999e-11 * var_x4;
            const double var_x343 = var_x296 * var_x342;
            const double var_x344 = (-var_x343 + var_x232 * (var_x343 + var_x298 * var_x342)) * var_chaste_interface__I_Ca__d;
            const double var_x347 = pow(2.3500000000000001, var_x15);
            const double var_x353 = var_x73 * var_x74;
            const double var_x355 = -669921.875 - var_x74;
            const double var_x361 = var_x230 * var_x344;
            const double var_x362 = 5.2281977629563632e-6 + pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001);
            const double var_x363 = 0.095835200000000009 * var_x347;
            const double var_x364 = var_x363 * pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 2.2000000000000002) / pow(var_x362, 2);
            const double var_x365 = var_x363 * pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 0.60000000000000009) / var_x362;
            const double var_x366 = 0.00024532850000000001 * var_x33 * var_x39;
            const double var_x367 = var_x113 * var_x353;
            const double var_x368 = var_x355 - 373215529.24791086 * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x369 = var_x128 * var_x88 / (pow(var_x110, 2) * pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 3));
            const double var_x371 = 3.3145199999999996e-5 * var_x193 * var_x207;
            const double var_x379 = 1 / M_PI;
            const double var_x539 = 100.0 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl;
            const double var_x541 = 100.0 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl;
            const double var_x549 = var_x38 * mParameters[22];
            const double var_x558 = var_x379 * var_x549;
            const double var_x573 = 2379535990481.856 * var_x558;
            const double var_x574 = 3.9661732781409103e-12 * var_x326;
            const double var_x575 = var_x365 + var_x366 - var_x364 + 1.78 * var_x367 - 8.0099999999999983e-8 * var_x369 - var_x368 * var_x574;
            
            partialF = -165.10000000000002 + var_x539 + var_x541 - 19.504723378941105 * var_x379 - var_x573 * ((var_x154) ? (var_x361 + var_x575) : (var_x371 + var_x575));
        }
        else
        {
            const double y_save = rY[38];
            rY[38] += delta;
            const double temp = EvaluateYDerivative38(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[38])/delta;
            rY[38] = y_save;
        }
        return partialF;
    }

    std::vector<double> Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__I_Na__m = rY[2];
        // Units: dimensionless; Initial value: 0.00381858135062259
        double var_chaste_interface__I_Na__h = rY[3];
        // Units: dimensionless; Initial value: 0.625086621635645
        double var_chaste_interface__I_Na__j = rY[4];
        // Units: dimensionless; Initial value: 0.62332507235506
        double var_chaste_interface__I_Kr__x_kr = rY[5];
        // Units: dimensionless; Initial value: 0.021733554982663
        double var_chaste_interface__I_Ks__x_ks = rY[6];
        // Units: dimensionless; Initial value: 0.00428981903391989
        double var_chaste_interface__I_to__x_to_s = rY[7];
        // Units: dimensionless; Initial value: 0.000441539203559411
        double var_chaste_interface__I_to__y_to_s = rY[8];
        // Units: dimensionless; Initial value: 0.784875334693892
        double var_chaste_interface__I_to__x_to_f = rY[9];
        // Units: dimensionless; Initial value: 0.000441531250866821
        double var_chaste_interface__I_to__y_to_f = rY[10];
        // Units: dimensionless; Initial value: 0.999995817153572
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
        // Units: dimensionless; Initial value: 0.0246142436477748
        double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
        // Units: dimensionless; Initial value: 0.0152416826209301
        double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
        // Units: mM; Initial value: 7.37484660389498e-07
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Na_Concentrations__Na_i = rY[35];
        // Units: mM; Initial value: 8.32114502072456
        double var_chaste_interface__K_Concentration__K_i = rY[36];
        // Units: mM; Initial value: 120.0
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        
        // Lookup table indexing
        const bool _oob_0 = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane_potential__V_m);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane_potential__V_m);

        // Mathematics
        const double var_I_Ca__fcaCaMSL = 0; // dimensionless
        const double var_I_Ca__fcaCaj = 0; // dimensionless
        const double var_I_Ks__gks_junc = 0.0035000000000000001; // mS_per_uF
        const double var_I_Ks__gks_sl = 0.0035000000000000001; // mS_per_uF
        const double var_SR_Fluxes__J_SRleak = (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__SR_Ca_Concentrations__Ca_sr) * mParameters[0]; // mM_per_msec
        const double var_I_Ca__tauf = 1 / (_lt_0_row[6]); // msec
        const double var_I_Kr__rkr = 1 / (_lt_0_row[1]); // dimensionless
        const double var_I_Na__ah = ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0) : (0.057000000000000002 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[14] - 0.14705882352941177 * var_chaste_interface__membrane_potential__V_m))); // dimensionless
        const double var_I_Na__aj = ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0) : ((37.780000000000001 + var_chaste_interface__membrane_potential__V_m) * (-25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane_potential__V_m - 0.24440000000000001 * mParameters[14]) - 6.9480000000000002e-6 * exp(0.043909999999999998 * mParameters[14] - 0.043909999999999998 * var_chaste_interface__membrane_potential__V_m)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane_potential__V_m - 0.311 * mParameters[14])))); // dimensionless
        const double var_I_Na__bh = ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (5.9230769230769234 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[14] - 0.0900900900900901 * var_chaste_interface__membrane_potential__V_m))) : (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane_potential__V_m - 0.34849999999999998 * mParameters[14]) + 2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane_potential__V_m - 0.079000000000000001 * mParameters[14]))); // dimensionless
        const double var_I_Na__bj = ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane_potential__V_m - 0.057000000000000002 * mParameters[14]) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[14] - 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m))) : (0.024240000000000001 * exp(0.01052 * mParameters[14] - 0.01052 * var_chaste_interface__membrane_potential__V_m) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[14] - 0.13780000000000001 * var_chaste_interface__membrane_potential__V_m)))); // dimensionless
        const double var_I_Na__tauh = 1 / (var_I_Na__ah + var_I_Na__bh); // msec
        const double var_I_Na__tauj = 1 / (var_I_Na__aj + var_I_Na__bj); // msec
        const double var_membrane_potential__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_parameters__Cmem_converted = 1000000.0 * mParameters[22]; // uF
        const double var_parameters__Fjunc = 0.11; // dimensionless
        const double var_parameters__Fjunc_CaL = 0.90000000000000002; // dimensionless
        const double var_parameters__Fsl = 1.0 - var_parameters__Fjunc; // dimensionless
        const double var_I_Ks__GKs_total = (var_I_Ks__gks_junc * var_parameters__Fjunc + var_I_Ks__gks_sl * var_parameters__Fsl) * mParameters[18]; // mS_per_uF
        const double var_parameters__Fsl_CaL = 1.0 - var_parameters__Fjunc_CaL; // dimensionless
        const double var_parameters__IbarSLCaP = 0.067299999999999999; // uA_per_uF
        const double var_parameters__Kdact = 0.00014999999999999999; // mM
        const double var_I_NCX__Ka_junc = 1 / (1.0 + pow(var_parameters__Kdact, 2) / pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2)); // dimensionless
        const double var_I_NCX__Ka_sl = 1 / (1.0 + pow(var_parameters__Kdact, 2) / pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 2)); // dimensionless
        const double var_parameters__KmCai = 0.0035899999999999999; // mM
        const double var_parameters__KmCao = 1.3; // mM
        const double var_parameters__KmKo = 1.5; // mM
        const double var_parameters__KmNai = 12.289999999999999; // mM
        const double var_parameters__KmNaip = 11.0; // mM
        const double var_parameters__KmNao = 87.5; // mM
        const double var_parameters__KmPCa = 0.00050000000000000001; // mM
        const double var_parameters__Kmf = 0.00024600000000000002; // mM
        const double var_parameters__Kmr = 1.7; // mM
        const double var_I_Ki__g_K1 = 0.43033148291193518 * sqrt(mParameters[7]) * mParameters[16]; // mS_per_uF
        const double var_I_Kr__gkr = 0.43033148291193518 * sqrt(mParameters[7]) * mParameters[17]; // mS_per_uF
        const double var_I_NCX__s3_junc = pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * var_parameters__KmCao + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j + pow(var_parameters__KmNao, 3) * (1.0 + var_chaste_interface__Ca_Concentrations__Ca_j / var_parameters__KmCai) * var_chaste_interface__Ca_Concentrations__Ca_j + pow(mParameters[8], 3) * (1.0 + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) / pow(var_parameters__KmNai, 3)) * var_parameters__KmCai; // mM4
        const double var_I_NCX__s3_sl = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * var_parameters__KmCao + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl + pow(var_parameters__KmNao, 3) * (1.0 + var_chaste_interface__Ca_Concentrations__Ca_sl / var_parameters__KmCai) * var_chaste_interface__Ca_Concentrations__Ca_sl + pow(mParameters[8], 3) * (1.0 + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) / pow(var_parameters__KmNai, 3)) * var_parameters__KmCai; // mM4
        const double var_I_NaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[8]); // dimensionless
        const double var_parameters__Q10CaL = 1.8; // dimensionless
        const double var_parameters__Q10NCX = 1.5700000000000001; // dimensionless
        const double var_parameters__Q10SLCaP = 2.3500000000000001; // dimensionless
        const double var_parameters__Q10SRCaP = 2.6000000000000001; // dimensionless
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_I_NaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) + 0.036499999999999998 * var_I_NaK__sigma * exp(-var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)); // dimensionless
        const double var_I_NaK__I_nak_junc = var_I_NaK__fnak * var_parameters__Fjunc * mParameters[21] * mParameters[7] / ((1.0 + pow(var_parameters__KmNaip, 4) / pow(var_chaste_interface__Na_Concentrations__Na_j, 4)) * (var_parameters__KmKo + mParameters[7])); // uA_per_uF
        const double var_I_NaK__I_nak_sl = var_I_NaK__fnak * var_parameters__Fsl * mParameters[21] * mParameters[7] / ((1.0 + pow(var_parameters__KmNaip, 4) / pow(var_chaste_interface__Na_Concentrations__Na_sl, 4)) * (var_parameters__KmKo + mParameters[7])); // uA_per_uF
        const double var_I_NaK__I_nak = var_I_NaK__I_nak_junc + var_I_NaK__I_nak_sl; // uA_per_uF
        const double var_I_NaK__I_nak_converted = HeartConfig::Instance()->GetCapacitance() * var_I_NaK__I_nak; // uA_per_cm2
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_I_PCa__I_pca_junc = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) * pow(var_parameters__Q10SLCaP, var_parameters__Qpow) * var_parameters__Fjunc * var_parameters__IbarSLCaP / (pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) + pow(var_parameters__KmPCa, 1.6000000000000001)); // uA_per_uF
        const double var_I_PCa__I_pca_sl = pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) * pow(var_parameters__Q10SLCaP, var_parameters__Qpow) * var_parameters__Fsl * var_parameters__IbarSLCaP / (pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) + pow(var_parameters__KmPCa, 1.6000000000000001)); // uA_per_uF
        const double var_I_PCa__I_pca = var_I_PCa__I_pca_junc + var_I_PCa__I_pca_sl; // uA_per_uF
        const double var_I_PCa__I_pca_converted = HeartConfig::Instance()->GetCapacitance() * var_I_PCa__I_pca; // uA_per_cm2
        const double var_parameters__ecl = log(mParameters[4] / mParameters[6]) / var_parameters__FoRT; // mV
        const double var_parameters__ek = log(mParameters[7] / var_chaste_interface__K_Concentration__K_i) / var_parameters__FoRT; // mV
        const double var_I_Ki__aki = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane_potential__V_m - 0.23849999999999999 * var_parameters__ek)); // dimensionless
        const double var_I_Ki__bki = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane_potential__V_m - 0.080320000000000003 * var_parameters__ek) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane_potential__V_m - 0.061749999999999999 * var_parameters__ek)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_parameters__ek - 0.51429999999999998 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double var_I_Ki__kiss = var_I_Ki__aki / (var_I_Ki__aki + var_I_Ki__bki); // dimensionless
        const double var_I_Ki__I_ki = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Ki__g_K1 * var_I_Ki__kiss; // uA_per_uF
        const double var_I_Ki__I_ki_converted = HeartConfig::Instance()->GetCapacitance() * var_I_Ki__I_ki; // uA_per_cm2
        const double var_I_Kr__I_kr = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Kr__gkr * var_I_Kr__rkr * var_chaste_interface__I_Kr__x_kr; // uA_per_uF
        const double var_I_Kr__I_kr_converted = HeartConfig::Instance()->GetCapacitance() * var_I_Kr__I_kr; // uA_per_cm2
        const double var_parameters__ena_junc = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_j) / var_parameters__FoRT; // mV
        const double var_I_Na__I_Na_junc = pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * var_parameters__Fjunc * mParameters[12]; // uA_per_uF
        const double var_parameters__ena_sl = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_sl) / var_parameters__FoRT; // mV
        const double var_I_Na__I_Na_sl = pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * var_parameters__Fsl * mParameters[12]; // uA_per_uF
        const double var_I_Na__I_Na = var_I_Na__I_Na_junc + var_I_Na__I_Na_sl; // uA_per_uF
        const double var_I_Na__I_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_I_Na__I_Na; // uA_per_cm2
        const double var_parameters__epi = 1.0; // dimensionless
        const double var_I_to__GtoFast = ((var_parameters__epi == 1.0) ? (0.1144 * mParameters[15]) : (0.0014039999999999999 * mParameters[15])); // mS_per_uF
        const double var_I_to__GtoSlow = ((var_parameters__epi == 1.0) ? (0.015599999999999999 * mParameters[19]) : (0.037595999999999997 * mParameters[19])); // mS_per_uF
        const double var_I_to__I_tof = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_to__GtoFast * var_chaste_interface__I_to__x_to_f * var_chaste_interface__I_to__y_to_f; // uA_per_uF
        const double var_I_to__I_tof_converted = HeartConfig::Instance()->GetCapacitance() * var_I_to__I_tof; // uA_per_cm2
        const double var_I_to__I_tos = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_to__GtoSlow * var_chaste_interface__I_to__x_to_s * var_chaste_interface__I_to__y_to_s; // uA_per_uF
        const double var_I_to__I_to = var_I_to__I_tof + var_I_to__I_tos; // uA_per_uF
        const double var_I_to__I_to_converted = HeartConfig::Instance()->GetCapacitance() * var_I_to__I_to; // uA_per_cm2
        const double var_I_to__I_tos_converted = HeartConfig::Instance()->GetCapacitance() * var_I_to__I_tos; // uA_per_cm2
        const double var_parameters__hillSRCaP = 1.7869999999999999; // dimensionless
        const double var_SR_Fluxes__J_serca = pow(var_parameters__Q10SRCaP, var_parameters__Qpow) * (pow((var_chaste_interface__Ca_Concentrations__Ca_i / var_parameters__Kmf), var_parameters__hillSRCaP) - pow((var_chaste_interface__SR_Ca_Concentrations__Ca_sr / var_parameters__Kmr), var_parameters__hillSRCaP)) * mParameters[2] / (1.0 + pow((var_chaste_interface__Ca_Concentrations__Ca_i / var_parameters__Kmf), var_parameters__hillSRCaP) + pow((var_chaste_interface__SR_Ca_Concentrations__Ca_sr / var_parameters__Kmr), var_parameters__hillSRCaP)); // mM_per_msec
        const double var_SR_Fluxes__J_SRCarel = (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__SR_Ca_Concentrations__Ca_sr) * var_chaste_interface__SR_Fluxes__Ry_Ro * mParameters[1]; // mM_per_msec
        const double var_parameters__ksat = 0.32000000000000001; // dimensionless
        const double var_parameters__nu = 0.27000000000000002; // dimensionless
        const double var_I_NCX__s1_junc = pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] * exp(var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT * var_parameters__nu); // mM4
        const double var_I_NCX__s1_sl = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] * exp(var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT * var_parameters__nu); // mM4
        const double var_I_NCX__s2_junc = pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT); // mM4
        const double var_I_NCX__I_ncx_junc = pow(var_parameters__Q10NCX, var_parameters__Qpow) * (-var_I_NCX__s2_junc + var_I_NCX__s1_junc) * var_I_NCX__Ka_junc * var_parameters__Fjunc * mParameters[20] / ((1.0 + var_parameters__ksat * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * var_I_NCX__s3_junc); // uA_per_uF
        const double var_I_NCX__s2_sl = pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT); // mM4
        const double var_I_NCX__I_ncx_sl = pow(var_parameters__Q10NCX, var_parameters__Qpow) * (-var_I_NCX__s2_sl + var_I_NCX__s1_sl) * var_I_NCX__Ka_sl * var_parameters__Fsl * mParameters[20] / ((1.0 + var_parameters__ksat * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * var_I_NCX__s3_sl); // uA_per_uF
        const double var_I_NCX__I_ncx = var_I_NCX__I_ncx_junc + var_I_NCX__I_ncx_sl; // uA_per_uF
        const double var_I_NCX__I_ncx_converted = HeartConfig::Instance()->GetCapacitance() * var_I_NCX__I_ncx; // uA_per_cm2
        const double var_I_Ca__ibarca_j = ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__I_Ca_junc = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarca_j * var_parameters__Fjunc_CaL; // uA_per_uF
        const double var_I_Ca__ibarca_sl = ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__I_Ca_sl = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarca_sl * var_parameters__Fsl_CaL; // uA_per_uF
        const double var_I_Ca__I_Ca = var_I_Ca__I_Ca_junc + var_I_Ca__I_Ca_sl; // uA_per_uF
        const double var_I_Ca__I_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_I_Ca__I_Ca; // uA_per_cm2
        const double var_parameters__pNaK = 0.018329999999999999; // dimensionless
        const double var_I_Ks__eks = log((mParameters[8] * var_parameters__pNaK + mParameters[7]) / (var_chaste_interface__Na_Concentrations__Na_i * var_parameters__pNaK + var_chaste_interface__K_Concentration__K_i)) / var_parameters__FoRT; // mV
        const double var_I_Ks__I_ks = pow(var_chaste_interface__I_Ks__x_ks, 2) * (-var_I_Ks__eks + var_chaste_interface__membrane_potential__V_m) * var_I_Ks__GKs_total; // uA_per_uF
        const double var_I_Ks__I_ks_converted = HeartConfig::Instance()->GetCapacitance() * var_I_Ks__I_ks; // uA_per_cm2

        std::vector<double> dqs(26);
        dqs[0] = var_SR_Fluxes__J_SRleak;
        dqs[1] = var_SR_Fluxes__J_SRCarel;
        dqs[2] = var_SR_Fluxes__J_serca;
        dqs[3] = var_parameters__ecl;
        dqs[4] = var_I_Ca__I_Ca_converted;
        dqs[5] = var_I_Ca__tauf;
        dqs[6] = var_I_PCa__I_pca_converted;
        dqs[7] = var_parameters__Cmem_converted;
        dqs[8] = var_I_Na__I_Na_converted;
        dqs[9] = var_I_Na__tauh;
        dqs[10] = var_I_Na__tauj;
        dqs[11] = var_I_to__I_tof_converted;
        dqs[12] = var_I_to__GtoFast;
        dqs[13] = var_I_Ki__I_ki_converted;
        dqs[14] = var_I_Ki__g_K1;
        dqs[15] = var_I_Kr__I_kr_converted;
        dqs[16] = var_I_Ks__I_ks_converted;
        dqs[17] = var_I_Ks__GKs_total;
        dqs[18] = var_I_to__I_tos_converted;
        dqs[19] = var_I_to__GtoSlow;
        dqs[20] = var_I_NCX__I_ncx_converted;
        dqs[21] = var_I_NaK__I_nak_converted;
        dqs[22] = var_membrane_potential__i_Stim_converted;
        dqs[23] = var_I_to__I_to_converted;
        dqs[24] = var_parameters__ek;
        dqs[25] = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt>::Initialise(void)
{
    this->mSystemName = "grandi_pasqualini_bers_2010";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "msec";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-81.4229700631461);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(8.72745589849657e-05);

    // rY[2]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00381858135062259);

    // rY[3]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.625086621635645);

    // rY[4]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.62332507235506);

    // rY[5]:
    this->mVariableNames.push_back("I_Kr__x_kr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.021733554982663);

    // rY[6]:
    this->mVariableNames.push_back("I_Ks__x_ks");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00428981903391989);

    // rY[7]:
    this->mVariableNames.push_back("I_to__x_to_s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000441539203559411);

    // rY[8]:
    this->mVariableNames.push_back("I_to__y_to_s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.784875334693892);

    // rY[9]:
    this->mVariableNames.push_back("I_to__x_to_f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000441531250866821);

    // rY[10]:
    this->mVariableNames.push_back("I_to__y_to_f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999995817153572);

    // rY[11]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.93982287251302e-06);

    // rY[12]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99511673495949);

    // rY[13]:
    this->mVariableNames.push_back("I_Ca__f_Ca_Bj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0246142436477748);

    // rY[14]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0152416826209301);

    // rY[15]:
    this->mVariableNames.push_back("SR_Fluxes__Ry_Rr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.891022230597263);

    // rY[16]:
    this->mVariableNames.push_back("SR_Fluxes__Ry_Ro");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(7.37484660389498e-07);

    // rY[17]:
    this->mVariableNames.push_back("SR_Fluxes__Ry_Ri");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(9.01984485847386e-08);

    // rY[18]:
    this->mVariableNames.push_back("Na_Buffers__Na_Bj");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(3.43545459048316);

    // rY[19]:
    this->mVariableNames.push_back("Na_Buffers__Na_Bsl");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.749601264899653);

    // rY[20]:
    this->mVariableNames.push_back("Cytosolic_Ca_Buffers__Tn_CL");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00893708435270205);

    // rY[21]:
    this->mVariableNames.push_back("Cytosolic_Ca_Buffers__Tn_CHc");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.117445983314504);

    // rY[22]:
    this->mVariableNames.push_back("Cytosolic_Ca_Buffers__Tn_CHm");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.0105996734077994);

    // rY[23]:
    this->mVariableNames.push_back("Cytosolic_Ca_Buffers__CaM");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.000295653619580701);

    // rY[24]:
    this->mVariableNames.push_back("Cytosolic_Ca_Buffers__Myo_c");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00192645052472679);

    // rY[25]:
    this->mVariableNames.push_back("Cytosolic_Ca_Buffers__Myo_m");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.137557201546068);

    // rY[26]:
    this->mVariableNames.push_back("Cytosolic_Ca_Buffers__SRB");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00217414510791738);

    // rY[27]:
    this->mVariableNames.push_back("Junctional_and_SL_Ca_Buffers__SLL_j");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00738583890572642);

    // rY[28]:
    this->mVariableNames.push_back("Junctional_and_SL_Ca_Buffers__SLL_sl");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00988178900584875);

    // rY[29]:
    this->mVariableNames.push_back("Junctional_and_SL_Ca_Buffers__SLH_j");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.0734662466011574);

    // rY[30]:
    this->mVariableNames.push_back("Junctional_and_SL_Ca_Buffers__SLH_sl");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.114400081504523);

    // rY[31]:
    this->mVariableNames.push_back("SR_Ca_Concentrations__Csqn_b");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(1.19772047585784);

    // rY[32]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.555180633859957);

    // rY[33]:
    this->mVariableNames.push_back("dyadic_space_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(8.3215690202059);

    // rY[34]:
    this->mVariableNames.push_back("submembrane_space_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(8.32094589677861);

    // rY[35]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(8.32114502072456);

    // rY[36]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(120.0);

    // rY[37]:
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.000175415190830688);

    // rY[38]:
    this->mVariableNames.push_back("submembrane_space_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.000106544589194246);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("per_msec");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_msec");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("mM_per_msec");

    // mParameters[3]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[4]:
    this->mParameterNames.push_back("cytosolic_chloride_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_chloride_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[7]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[8]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[9]:
    this->mParameterNames.push_back("faraday_constant");
    this->mParameterUnits.push_back("coulomb_per_mole");

    // mParameters[10]:
    this->mParameterNames.push_back("gas_constant");
    this->mParameterUnits.push_back("joule_per_kelvin_per_kilomole");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("cm_per_sec");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("mV");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_fast_transient_outward_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[18]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[19]:
    this->mParameterNames.push_back("membrane_slow_transient_outward_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[20]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[21]:
    this->mParameterNames.push_back("membrane_sodium_potassium_pump_current_permeability");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[22]:
    this->mParameterNames.push_back("parameters__Cmem");
    this->mParameterUnits.push_back("farad");

    // mParameters[23]:
    this->mParameterNames.push_back("temperature");
    this->mParameterUnits.push_back("kelvin");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_leak_current");
    this->mDerivedQuantityUnits.push_back("mM_per_msec");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("mM_per_msec");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("SR_uptake_current");
    this->mDerivedQuantityUnits.push_back("mM_per_msec");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("chloride_reversal_potential");
    this->mDerivedQuantityUnits.push_back("mV");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f_gate_tau");
    this->mDerivedQuantityUnits.push_back("msec");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_calcium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_capacitance");
    this->mDerivedQuantityUnits.push_back("uF");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("msec");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("msec");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_fast_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_fast_transient_outward_current_conductance");
    this->mDerivedQuantityUnits.push_back("mS_per_uF");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("mS_per_uF");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [17]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("mS_per_uF");

    // Derived Quantity index [18]:
    this->mDerivedQuantityNames.push_back("membrane_slow_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [19]:
    this->mDerivedQuantityNames.push_back("membrane_slow_transient_outward_current_conductance");
    this->mDerivedQuantityUnits.push_back("mS_per_uF");

    // Derived Quantity index [20]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [21]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [22]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [23]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [24]:
    this->mDerivedQuantityNames.push_back("potassium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("mV");

    // Derived Quantity index [25]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("msec");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL2Opt)

