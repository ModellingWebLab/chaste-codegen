//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: fink_noble_giles_model_2008
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: BackwardEuler)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "fink_noble_giles_model_2008.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"
#include "CardiacNewtonSolver.hpp"

class Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<28; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__cell__V)
    {
        const double _offset_0 = var_chaste_interface__cell__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__cell__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__cell__V>mTableMaxs[0] || var_chaste_interface__cell__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables(const Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables&);
    Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables& operator= (const Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables&);
    Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 28;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][28];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(4.1806020066889626 - 0.16722408026755853 * var_chaste_interface__cell__V);

                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.013101861787960915 * var_chaste_interface__cell__V);

                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.024332029034784559 * var_chaste_interface__cell__V);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + 0.10000000000000001 * exp(-0.024332029034784559 * var_chaste_interface__cell__V);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + 0.035299999999999998 * exp(-0.037433890822745473 * var_chaste_interface__cell__V) + 0.1245 * exp(-0.0037433890822745472 * var_chaste_interface__cell__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-1.1230167246823641 + 0.074867781645490947 * var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[5] < 2){
                    double left = _lookup_table_0[i-1][5];
                    double right = _lookup_table_0[i+1][5];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 5 at ["<<i<<"][5] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[5] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[5] >= 2){
                    EXCEPTION("Lookup table 5 at ["<<i<<"][5] has non-finite value: " << val);
                }
                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = -1.0 + exp(-1.1230167246823641 + 0.074867781645490947 * var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[6] < 2){
                    double left = _lookup_table_0[i-1][6];
                    double right = _lookup_table_0[i+1][6];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 6 at ["<<i<<"][6] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[6] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[6] >= 2){
                    EXCEPTION("Lookup table 6 at ["<<i<<"][6] has non-finite value: " << val);
                }
                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(0.66666666666666663 - 0.13333333333333333 * var_chaste_interface__cell__V));

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(2.5 - 0.050000000000000003 * var_chaste_interface__cell__V)) + 1.3999999999999999 * (0.25 + 1.3999999999999999 / (1.0 + exp(-2.6923076923076925 - 0.076923076923076927 * var_chaste_interface__cell__V))) / (1.0 + exp(1.0 + 0.20000000000000001 * var_chaste_interface__cell__V));

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.75 / (1.0 + exp(5.0 + 0.14285714285714285 * var_chaste_interface__cell__V));

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 40.0 / (1.0 + exp(3.0 + 0.10000000000000001 * var_chaste_interface__cell__V)) + 15.5 / (1.0 + exp(2.5 - 0.10000000000000001 * var_chaste_interface__cell__V)) + 281.0 * exp(-3.0375000000000001 * pow((1 + 0.037037037037037035 * var_chaste_interface__cell__V), 2));

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(2.8571428571428572 + 0.14285714285714285 * var_chaste_interface__cell__V));

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 5.0 + 50.0 / (1.0 + exp(1.3 - 0.10000000000000001 * var_chaste_interface__cell__V)) + 45.0 / (1.0 + exp(3.0 + 0.10000000000000001 * var_chaste_interface__cell__V)) + 275.625 * exp(-3.2400000000000002 * pow((1 + 0.037037037037037035 * var_chaste_interface__cell__V), 2));

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-1.5790000000000006 + 0.0112 * var_chaste_interface__cell__V);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-3.8160000000000025 + 0.036499999999999998 * var_chaste_interface__cell__V);

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.87200000000000344 + 0.0223 * var_chaste_interface__cell__V);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-2.0190000000000001 - 0.060299999999999999 * var_chaste_interface__cell__V);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-8.3940000000000019 - 0.039899999999999998 * var_chaste_interface__cell__V);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-3.1820000000000022 - 0.031199999999999999 * var_chaste_interface__cell__V);

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-0.35714285714285715 - 0.071428571428571425 * var_chaste_interface__cell__V));

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 80.0 + 1400.0 / (sqrt(1.0 + exp(0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__cell__V)) * (1.0 + exp(-2.3333333333333335 + 0.066666666666666666 * var_chaste_interface__cell__V)));

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / pow((1.0 + exp(-6.2967884828349945 - 0.11074197120708749 * var_chaste_interface__cell__V)), 2);

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.10000000000000001 / (1.0 + exp(7.0 + 0.20000000000000001 * var_chaste_interface__cell__V)) + 0.10000000000000001 / (1.0 + exp(-0.25 + 0.0050000000000000001 * var_chaste_interface__cell__V));

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-12.0 - 0.20000000000000001 * var_chaste_interface__cell__V);

                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(3.3333333333333335 - 0.16666666666666666 * var_chaste_interface__cell__V));

                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.80000000000000004 + 9.5 * exp(-0.88888888888888884 * pow((1 + 0.025000000000000001 * var_chaste_interface__cell__V), 2));

                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(4.0 + 0.20000000000000001 * var_chaste_interface__cell__V));

                _lookup_table_0[i][26] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 3.0 + 5.0 / (1.0 + exp(-4.0 + 0.20000000000000001 * var_chaste_interface__cell__V)) + 85.0 * exp(-6.328125 * pow((1 + 0.022222222222222223 * var_chaste_interface__cell__V), 2));

                _lookup_table_0[i][27] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[28];

    // Lookup tables
    double (*_lookup_table_0)[28];
    int _lookup_table_0_num_misshit_piecewise[28] = {0};

};

std::shared_ptr<Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables> Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> Cellfink_noble_giles_model_2008FromCellMLBackwardEuler::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -11.999999999999998 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_chaste_interface__cell__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__cell__stim_start = 100.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Cellfink_noble_giles_model_2008FromCellMLBackwardEuler::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Cellfink_noble_giles_model_2008FromCellMLBackwardEuler::Cellfink_noble_giles_model_2008FromCellMLBackwardEuler(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractBackwardEulerCardiacCell<17>(
                27,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellfink_noble_giles_model_2008FromCellMLBackwardEuler>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 0.00036000000000000002; // (var_Ileak_Iup_Ixfer__Vol_leak) [per_millisecond]
        this->mParameters[1] = 0.30599999999999999; // (var_Irel__Vol_rel) [per_millisecond]
        this->mParameters[2] = 0.0063749999999999996; // (var_Ileak_Iup_Ixfer__Vmax_up) [millimolar_per_millisecond]
        this->mParameters[3] = 0.115; // (var_cell__Cm) [nanoF]
        this->mParameters[4] = 1.0; // (var_Na__conc_clamp) [dimensionless]
        this->mParameters[5] = 2.0; // (var_Environment__Ca_o) [millimolar]
        this->mParameters[6] = 5.4000000000000004; // (var_Environment__K_o) [millimolar]
        this->mParameters[7] = 140.0; // (var_Environment__Na_o) [millimolar]
        this->mParameters[8] = 2.0000000000000002e-5; // (var_ICaL__g_CaL) [litre_per_farad_millisecond]
        this->mParameters[9] = 11.0; // (var_INa__g_Na) [microS_per_nanoF]
        this->mParameters[10] = 0; // (var_INa__perc_reduced_inact_for_IpNa) [dimensionless]
        this->mParameters[11] = 0; // (var_INa__shift_INa_inact) [millivolt]
        this->mParameters[12] = 0.68210000000000004; // (var_IK1__g_K1_0) [microS_per_nanoF]
        this->mParameters[13] = 0.024; // (var_IKr__g_Kr_0) [microS_per_nanoF]
        this->mParameters[14] = 0.039199999999999999; // (var_IKs__g_Ks) [microS_per_nanoF]
        this->mParameters[15] = 200.0; // (var_INaCa__K_NaCa) [nanoA_per_nanoF]
        this->mParameters[16] = 0.20000000000000001; // (var_Ito__g_to) [microS_per_nanoF]
    }

    Cellfink_noble_giles_model_2008FromCellMLBackwardEuler::~Cellfink_noble_giles_model_2008FromCellMLBackwardEuler()
    {
    }

    AbstractLookupTableCollection* Cellfink_noble_giles_model_2008FromCellMLBackwardEuler::GetLookupTableCollection()
    {
        return Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables::Instance();
    }
    
    double Cellfink_noble_giles_model_2008FromCellMLBackwardEuler::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: millimolar; Initial value: 0.0001092
        double var_chaste_interface__iKr_Markov__Or4 = rY[5];
        // Units: dimensionless; Initial value: 0.014
        double var_chaste_interface__iKs_Xs_gate__Xs = rY[12];
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = rY[13];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ito_r_gate__r = rY[14];
        // Units: dimensionless; Initial value: 2.11e-08
        double var_chaste_interface__iNa_m_gate__m = rY[15];
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = rY[16];
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = rY[17];
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = rY[18];
        // Units: dimensionless; Initial value: 5.06e-06
        double var_chaste_interface__iCaL_f_gate__f = rY[19];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = rY[20];
        // Units: dimensionless; Initial value: 0.9995
        double var_chaste_interface__iCaL_fCass_gate__fCass = rY[21];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ca__Ca_ss = rY[23];
        // Units: millimolar; Initial value: 0.0001893
        double var_chaste_interface__Na__Na_i = rY[25];
        // Units: millimolar; Initial value: 7.940167
        double var_chaste_interface__K__K_i = rY[26];
        // Units: millimolar; Initial value: 141.0167
        
        // Lookup table indexing
        const bool _oob_0 = Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        const double var_reversal_potentials__E_K = 26.713760659695652 * log(mParameters[6] / var_chaste_interface__K__K_i); // millivolt
        const double var_reversal_potentials__E_Na = 26.713760659695652 * log(mParameters[7] / var_chaste_interface__Na__Na_i); // millivolt
        const double var_cell__i_tot = 0.00076360000000000002 * var_chaste_interface__cell__V - 0.00029 * var_reversal_potentials__E_Na - 0.0063258185242159298 * log(mParameters[5] / var_chaste_interface__Ca__Ca_i) + 0.061899999999999997 * var_chaste_interface__Ca__Ca_i / (0.00050000000000000001 + var_chaste_interface__Ca__Ca_i) + 0.0097300000000000008 * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) / (_lt_0_row[0]) + pow(var_chaste_interface__iKs_Xs_gate__Xs, 2) * (-26.713760659695652 * log((0.029999999999999999 * mParameters[7] + mParameters[6]) / (0.029999999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i)) + var_chaste_interface__cell__V) * mParameters[14] + (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * mParameters[16] * var_chaste_interface__ito_r_gate__r * var_chaste_interface__ito_s_gate__s + 0.43033148291193518 * sqrt(mParameters[6]) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * (0.11619999999999997 / (1.0 + 0.036532500000000002 / exp(0.11701098901098901 * var_reversal_potentials__E_K - 0.10989010989010989 * var_chaste_interface__cell__V)) + 0.88380000000000003 * pow((1.0 + 0.079111111111111104 / exp(0.053239999999999996 * var_reversal_potentials__E_K - 0.050000000000000003 * var_chaste_interface__cell__V)), 2) / (pow((1.0 + 0.079111111111111104 / exp(0.053239999999999996 * var_reversal_potentials__E_K - 0.050000000000000003 * var_chaste_interface__cell__V)), 3) + 2.0875714285714286 / exp(-0.059333333333333335 + 0.22183333333333333 * var_reversal_potentials__E_K - 0.20833333333333334 * var_chaste_interface__cell__V) + 0.012714285714285714 / exp(0.005915555555555555 * var_reversal_potentials__E_K - 0.0055555555555555558 * var_chaste_interface__cell__V))) * mParameters[12] + 0.43033148291193518 * sqrt(mParameters[6]) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * mParameters[13] * var_chaste_interface__iKr_Markov__Or4 + (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[5] * _lt_0_row[1] - 2.5 * pow(mParameters[7], 3) * var_chaste_interface__Ca__Ca_i * _lt_0_row[2]) * mParameters[15] / ((_lt_0_row[3]) * (669921.875 + pow(mParameters[7], 3)) * (1.3799999999999999 + mParameters[5])) + pow(var_chaste_interface__iNa_m_gate__m, 3) * (-var_reversal_potentials__E_Na + var_chaste_interface__cell__V) * mParameters[9] * var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j + 1.2969999999999999 * mParameters[6] * var_chaste_interface__Na__Na_i / ((1.0 + mParameters[6]) * (40.0 + var_chaste_interface__Na__Na_i) * (_lt_0_row[4])) + ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356880329828957e-6) ? (374338.90822798351 * (-14.999998664311967 + var_chaste_interface__cell__V) * (0.019297068299972742 * (-mParameters[5] + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(9.9999999999858739e-8)) * mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(9.9999999999858739e-8)) + 0.019297068299972742 * (-mParameters[5] + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) - 0.019297068299972742 * (-mParameters[5] + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) : (14447.286958825251 * (-15.0 + var_chaste_interface__cell__V) * (-mParameters[5] + 0.25 * var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (_lt_0_row[6]))); // nanoA_per_nanoF
        const double var_chaste_interface__i_ionic = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_cell__i_tot; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellfink_noble_giles_model_2008FromCellMLBackwardEuler::ComputeResidual(double var_chaste_interface__Environment__time, const double rCurrentGuess[17], double rResidual[17])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__iKs_Xs_gate__Xs = rY[12];
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = rY[13];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ito_r_gate__r = rY[14];
        // Units: dimensionless; Initial value: 2.11e-08
        double var_chaste_interface__iNa_m_gate__m = rY[15];
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = rY[16];
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = rY[17];
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = rY[18];
        // Units: dimensionless; Initial value: 5.06e-06
        double var_chaste_interface__iCaL_f_gate__f = rY[19];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = rY[20];
        // Units: dimensionless; Initial value: 0.9995
        
        //output_nonlinear_state_assignments
        double var_chaste_interface__Ca__Ca_SR = rCurrentGuess[0];
        double var_chaste_interface__Ca__Ca_i = rCurrentGuess[1];
        double var_chaste_interface__Ca__Ca_ss = rCurrentGuess[2];
        double var_chaste_interface__Irel__R_prime = rCurrentGuess[3];
        double var_chaste_interface__K__K_i = rCurrentGuess[4];
        double var_chaste_interface__Na__Na_i = rCurrentGuess[5];
        double var_chaste_interface__iCaL_fCass_gate__fCass = rCurrentGuess[6];
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr1 = rCurrentGuess[7];
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr2 = rCurrentGuess[8];
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr3 = rCurrentGuess[9];
        double var_chaste_interface__iKr_Markov_Sotalol_block__BIr5 = rCurrentGuess[10];
        double var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 = rCurrentGuess[11];
        double var_chaste_interface__iKr_Markov__Cr1 = rCurrentGuess[12];
        double var_chaste_interface__iKr_Markov__Cr2 = rCurrentGuess[13];
        double var_chaste_interface__iKr_Markov__Cr3 = rCurrentGuess[14];
        double var_chaste_interface__iKr_Markov__Ir5 = rCurrentGuess[15];
        double var_chaste_interface__iKr_Markov__Or4 = rCurrentGuess[16];
        
        // Lookup table indexing
        const bool _oob_0 = Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        //output_equations
        const double var_Ileak_Iup_Ixfer__i_leak = (-var_chaste_interface__Ca__Ca_i + var_chaste_interface__Ca__Ca_SR) * mParameters[0]; // millimolar_per_millisecond
        const double var_Ileak_Iup_Ixfer__i_up = mParameters[2] / (1.0 + 6.2499999999999997e-8 / pow(var_chaste_interface__Ca__Ca_i, 2)); // millimolar_per_millisecond
        const double var_Ileak_Iup_Ixfer__i_xfer = 0.0038 * var_chaste_interface__Ca__Ca_ss - 0.0038 * var_chaste_interface__Ca__Ca_i; // millimolar_per_millisecond
        const double var_IpCa__i_p_Ca = 0.061899999999999997 * var_chaste_interface__Ca__Ca_i / (0.00050000000000000001 + var_chaste_interface__Ca__Ca_i); // nanoA_per_nanoF
        const double var_Irel__kcasr = 2.5 - 1.5 / (1.0 + 2.25 / pow(var_chaste_interface__Ca__Ca_SR, 2)); // dimensionless
        const double var_Irel__i_rel = 0.14999999999999999 * pow(var_chaste_interface__Ca__Ca_ss, 2) * (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_SR) * var_chaste_interface__Irel__R_prime * mParameters[1] / ((0.059999999999999998 + 0.14999999999999999 * pow(var_chaste_interface__Ca__Ca_ss, 2) / var_Irel__kcasr) * var_Irel__kcasr); // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca__Ca_SR = (-var_Ileak_Iup_Ixfer__i_leak - var_Irel__i_rel + var_Ileak_Iup_Ixfer__i_up) / (1.0 + 3.0 / pow((0.29999999999999999 + var_chaste_interface__Ca__Ca_SR), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_Irel__R_prime = 0.0050000000000000001 - 0.0050000000000000001 * var_chaste_interface__Irel__R_prime - 0.044999999999999998 * var_chaste_interface__Ca__Ca_ss * var_chaste_interface__Irel__R_prime * var_Irel__kcasr; // 1 / millisecond
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[5] * _lt_0_row[1] - 2.5 * pow(mParameters[7], 3) * var_chaste_interface__Ca__Ca_i * _lt_0_row[2]) * mParameters[15] / ((_lt_0_row[3]) * (669921.875 + pow(mParameters[7], 3)) * (1.3799999999999999 + mParameters[5])); // nanoA_per_nanoF
        const double var_INaK__i_NaK = 1.2969999999999999 * mParameters[6] * var_chaste_interface__Na__Na_i / ((1.0 + mParameters[6]) * (40.0 + var_chaste_interface__Na__Na_i) * (_lt_0_row[4])); // nanoA_per_nanoF
        const double var_cell__i_Stim = 1.0000000000000002 * GetIntracellularAreaStimulus(var_chaste_interface__Environment__time) / HeartConfig::Instance()->GetCapacitance(); // nanoA_per_nanoF
        const double d_dt_chaste_interface_var_iCaL_fCass_gate__fCass = (0.59999999999999998 - var_chaste_interface__iCaL_fCass_gate__fCass + 0.40000000000000002 / (1.0 + 399.99999999999994 * pow(var_chaste_interface__Ca__Ca_ss, 2))) / (2.0 + 80.0 / (1.0 + 399.99999999999994 * pow(var_chaste_interface__Ca__Ca_ss, 2))); // 1 / millisecond
        const double var_ICaL__i_CaL = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356880329828957e-6) ? (374338.90822798351 * (-14.999998664311967 + var_chaste_interface__cell__V) * (0.019297068299972742 * (-mParameters[5] + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(9.9999999999858739e-8)) * mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(9.9999999999858739e-8)) + 0.019297068299972742 * (-mParameters[5] + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) - 0.019297068299972742 * (-mParameters[5] + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) : (14447.286958825251 * (-15.0 + var_chaste_interface__cell__V) * (-mParameters[5] + 0.25 * var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (_lt_0_row[6]))); // nanoA_per_nanoF
        const double d_dt_chaste_interface_var_Ca__Ca_ss = (20.007315288953912 * var_Irel__i_rel - 300.0 * var_Ileak_Iup_Ixfer__i_xfer - 0.094772024954610332 * var_ICaL__i_CaL * mParameters[3]) / (1.0 + 0.0001 / pow((0.00025000000000000001 + var_chaste_interface__Ca__Ca_ss), 2)); // millimolar / millisecond
        const double var_iKr_Markov__alpha_xr1 = _lt_0_row[13]; // per_millisecond
        const double var_iKr_Markov__alpha_xr2 = exp(-3.1680000000000028); // per_millisecond
        const double var_iKr_Markov__alpha_xr3 = _lt_0_row[14]; // per_millisecond
        const double var_iKr_Markov__alpha_xr4 = 1.9631681698237122 * pow((1 / mParameters[6]), 0.40000000000000002) * _lt_0_row[15]; // per_millisecond
        const double var_iKr_Markov__beta_xr1 = _lt_0_row[16]; // per_millisecond
        const double d_dt_chaste_interface_var_iKr_Markov__Cr1 = var_chaste_interface__iKr_Markov__Cr2 * var_iKr_Markov__beta_xr1 - var_chaste_interface__iKr_Markov__Cr1 * var_iKr_Markov__alpha_xr1; // 1 / millisecond
        const double var_iKr_Markov__beta_xr2 = exp(-2.5140000000000011); // per_millisecond
        const double d_dt_chaste_interface_var_iKr_Markov__Cr2 = var_chaste_interface__iKr_Markov__Cr1 * var_iKr_Markov__alpha_xr1 + var_chaste_interface__iKr_Markov__Cr3 * var_iKr_Markov__beta_xr2 - (var_iKr_Markov__alpha_xr2 + var_iKr_Markov__beta_xr1) * var_chaste_interface__iKr_Markov__Cr2; // 1 / millisecond
        const double var_iKr_Markov__beta_xr3 = _lt_0_row[17]; // per_millisecond
        const double d_dt_chaste_interface_var_iKr_Markov__Cr3 = var_chaste_interface__iKr_Markov__Cr2 * var_iKr_Markov__alpha_xr2 + var_chaste_interface__iKr_Markov__Or4 * var_iKr_Markov__beta_xr3 - (var_iKr_Markov__alpha_xr3 + var_iKr_Markov__beta_xr2) * var_chaste_interface__iKr_Markov__Cr3; // 1 / millisecond
        const double var_iKr_Markov__beta_xr4 = _lt_0_row[18]; // per_millisecond
        const double d_dt_chaste_interface_var_iKr_Markov__Ir5 = var_chaste_interface__iKr_Markov__Or4 * var_iKr_Markov__alpha_xr4 - var_chaste_interface__iKr_Markov__Ir5 * var_iKr_Markov__beta_xr4; // 1 / millisecond
        const double d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr1 = var_iKr_Markov__beta_xr1 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr2 - var_iKr_Markov__alpha_xr1 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr1; // 1 / millisecond
        const double d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr2 = var_iKr_Markov__alpha_xr1 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr1 + var_iKr_Markov__beta_xr2 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr3 - (var_iKr_Markov__alpha_xr2 + var_iKr_Markov__beta_xr1) * var_chaste_interface__iKr_Markov_Sotalol_block__BCr2; // 1 / millisecond
        const double d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr3 = var_iKr_Markov__alpha_xr2 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr2 + var_iKr_Markov__beta_xr3 * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 - (var_iKr_Markov__alpha_xr3 + var_iKr_Markov__beta_xr2) * var_chaste_interface__iKr_Markov_Sotalol_block__BCr3; // 1 / millisecond
        const double d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BIr5 = var_iKr_Markov__alpha_xr4 * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 - var_iKr_Markov__beta_xr4 * var_chaste_interface__iKr_Markov_Sotalol_block__BIr5; // 1 / millisecond
        const double var_iKr_Markov_Sotalol_block__OtoB = 0; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__BtoO = 0.00125 * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4; // per_millisecond
        const double d_dt_chaste_interface_var_iKr_Markov__Or4 = -var_iKr_Markov_Sotalol_block__OtoB + var_chaste_interface__iKr_Markov__Cr3 * var_iKr_Markov__alpha_xr3 + var_chaste_interface__iKr_Markov__Ir5 * var_iKr_Markov__beta_xr4 - (var_iKr_Markov__alpha_xr4 + var_iKr_Markov__beta_xr3) * var_chaste_interface__iKr_Markov__Or4 + var_iKr_Markov_Sotalol_block__BtoO; // 1 / millisecond
        const double d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BOr4 = -var_iKr_Markov_Sotalol_block__BtoO + var_iKr_Markov__alpha_xr3 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr3 + var_iKr_Markov__beta_xr4 * var_chaste_interface__iKr_Markov_Sotalol_block__BIr5 - (var_iKr_Markov__alpha_xr4 + var_iKr_Markov__beta_xr3) * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 + var_iKr_Markov_Sotalol_block__OtoB; // 1 / millisecond
        const double var_ICab__i_b_Ca = 0.00047360000000000002 * var_chaste_interface__cell__V - 0.0063258185242159298 * log(mParameters[5] / var_chaste_interface__Ca__Ca_i); // nanoA_per_nanoF
        const double d_dt_chaste_interface_var_Ca__Ca_i = (0.066691050963179718 * var_Ileak_Iup_Ixfer__i_leak - 0.066691050963179718 * var_Ileak_Iup_Ixfer__i_up - 0.00031590674984870116 * (-2.0 * var_INaCa__i_NaCa + var_ICab__i_b_Ca + var_IpCa__i_p_Ca) * mParameters[3] + var_Ileak_Iup_Ixfer__i_xfer) / (1.0 + 0.00020000000000000001 / pow((0.001 + var_chaste_interface__Ca__Ca_i), 2)); // millimolar / millisecond
        const double var_reversal_potentials__E_K = 26.713760659695652 * log(mParameters[6] / var_chaste_interface__K__K_i); // millivolt
        const double var_IKr__i_Kr = 0.43033148291193518 * sqrt(mParameters[6]) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * mParameters[13] * var_chaste_interface__iKr_Markov__Or4; // nanoA_per_nanoF
        const double var_IpK__i_p_K = 0.0097300000000000008 * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) / (_lt_0_row[0]); // nanoA_per_nanoF
        const double var_Ito__i_to = (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * mParameters[16] * var_chaste_interface__ito_r_gate__r * var_chaste_interface__ito_s_gate__s; // nanoA_per_nanoF
        const double var_IK1__i_K1 = 0.43033148291193518 * sqrt(mParameters[6]) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * (0.11619999999999997 / (1.0 + 0.036532500000000002 / exp(0.11701098901098901 * var_reversal_potentials__E_K - 0.10989010989010989 * var_chaste_interface__cell__V)) + 0.88380000000000003 * pow((1.0 + 0.079111111111111104 / exp(0.053239999999999996 * var_reversal_potentials__E_K - 0.050000000000000003 * var_chaste_interface__cell__V)), 2) / (pow((1.0 + 0.079111111111111104 / exp(0.053239999999999996 * var_reversal_potentials__E_K - 0.050000000000000003 * var_chaste_interface__cell__V)), 3) + 2.0875714285714286 / exp(-0.059333333333333335 + 0.22183333333333333 * var_reversal_potentials__E_K - 0.20833333333333334 * var_chaste_interface__cell__V) + 0.012714285714285714 / exp(0.005915555555555555 * var_reversal_potentials__E_K - 0.0055555555555555558 * var_chaste_interface__cell__V))) * mParameters[12]; // nanoA_per_nanoF
        const double var_reversal_potentials__E_Na = 26.713760659695652 * log(mParameters[7] / var_chaste_interface__Na__Na_i); // millivolt
        const double var_INa__i_Na = pow(var_chaste_interface__iNa_m_gate__m, 3) * (-var_reversal_potentials__E_Na + var_chaste_interface__cell__V) * mParameters[9] * var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j; // nanoA_per_nanoF
        const double var_INab__i_b_Na = 0.00029 * var_chaste_interface__cell__V - 0.00029 * var_reversal_potentials__E_Na; // nanoA_per_nanoF
        const double d_dt_chaste_interface_var_Na__Na_i = -0.00063181349969740233 * (3.0 * var_INaCa__i_NaCa + 3.0 * var_INaK__i_NaK + var_INa__i_Na + var_INab__i_b_Na) * mParameters[4] * mParameters[3]; // millimolar / millisecond
        const double var_IKs__i_Ks = pow(var_chaste_interface__iKs_Xs_gate__Xs, 2) * (-26.713760659695652 * log((0.029999999999999999 * mParameters[7] + mParameters[6]) / (0.029999999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i)) + var_chaste_interface__cell__V) * mParameters[14]; // nanoA_per_nanoF
        const double d_dt_chaste_interface_var_K__K_i = -0.00063181349969740233 * (-2.0 * var_INaK__i_NaK + var_IK1__i_K1 + var_IKr__i_Kr + var_IKs__i_Ks + var_IpK__i_p_K + var_Ito__i_to + var_cell__i_Stim) * mParameters[4] * mParameters[3]; // millimolar / millisecond
        
        rResidual[1] = rCurrentGuess[1] - rY[1] - mDt*d_dt_chaste_interface_var_Ca__Ca_i;
        rResidual[12] = rCurrentGuess[12] - rY[2] - mDt*d_dt_chaste_interface_var_iKr_Markov__Cr1;
        rResidual[13] = rCurrentGuess[13] - rY[3] - mDt*d_dt_chaste_interface_var_iKr_Markov__Cr2;
        rResidual[14] = rCurrentGuess[14] - rY[4] - mDt*d_dt_chaste_interface_var_iKr_Markov__Cr3;
        rResidual[16] = rCurrentGuess[16] - rY[5] - mDt*d_dt_chaste_interface_var_iKr_Markov__Or4;
        rResidual[15] = rCurrentGuess[15] - rY[6] - mDt*d_dt_chaste_interface_var_iKr_Markov__Ir5;
        rResidual[7] = rCurrentGuess[7] - rY[7] - mDt*d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr1;
        rResidual[8] = rCurrentGuess[8] - rY[8] - mDt*d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr2;
        rResidual[9] = rCurrentGuess[9] - rY[9] - mDt*d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr3;
        rResidual[11] = rCurrentGuess[11] - rY[10] - mDt*d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BOr4;
        rResidual[10] = rCurrentGuess[10] - rY[11] - mDt*d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BIr5;
        rResidual[6] = rCurrentGuess[6] - rY[21] - mDt*d_dt_chaste_interface_var_iCaL_fCass_gate__fCass;
        rResidual[0] = rCurrentGuess[0] - rY[22] - mDt*d_dt_chaste_interface_var_Ca__Ca_SR;
        rResidual[2] = rCurrentGuess[2] - rY[23] - mDt*d_dt_chaste_interface_var_Ca__Ca_ss;
        rResidual[3] = rCurrentGuess[3] - rY[24] - mDt*d_dt_chaste_interface_var_Irel__R_prime;
        rResidual[5] = rCurrentGuess[5] - rY[25] - mDt*d_dt_chaste_interface_var_Na__Na_i;
        rResidual[4] = rCurrentGuess[4] - rY[26] - mDt*d_dt_chaste_interface_var_K__K_i;
    }

    void Cellfink_noble_giles_model_2008FromCellMLBackwardEuler::ComputeJacobian(double var_chaste_interface__Environment__time, const double rCurrentGuess[17], double rJacobian[17][17])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__iKs_Xs_gate__Xs = rY[12];
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = rY[13];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ito_r_gate__r = rY[14];
        // Units: dimensionless; Initial value: 2.11e-08
        double var_chaste_interface__iNa_m_gate__m = rY[15];
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = rY[16];
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = rY[17];
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = rY[18];
        // Units: dimensionless; Initial value: 5.06e-06
        double var_chaste_interface__iCaL_f_gate__f = rY[19];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = rY[20];
        // Units: dimensionless; Initial value: 0.9995
        
        // Lookup table indexing
        const bool _oob_0 = Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        double var_chaste_interface__Ca__Ca_SR = rCurrentGuess[0];
        double var_chaste_interface__Ca__Ca_i = rCurrentGuess[1];
        double var_chaste_interface__Ca__Ca_ss = rCurrentGuess[2];
        double var_chaste_interface__Irel__R_prime = rCurrentGuess[3];
        double var_chaste_interface__K__K_i = rCurrentGuess[4];
        double var_chaste_interface__Na__Na_i = rCurrentGuess[5];
        double var_chaste_interface__iCaL_fCass_gate__fCass = rCurrentGuess[6];
        double var_chaste_interface__iKr_Markov__Or4 = rCurrentGuess[16];
        
        const double var_x0 = pow(var_chaste_interface__Ca__Ca_SR, (-2));
        const double var_x1 = 1 / (1.0 + 2.25 * var_x0);
        const double var_x2 = 1 / (2.5 - 1.5 * var_x1);
        const double var_x3 = pow(var_chaste_interface__Ca__Ca_ss, 2);
        const double var_x4 = var_x2 * var_x3;
        const double var_x5 = 0.14999999999999999 * var_x4;
        const double var_x6 = 1 / (0.059999999999999998 + var_x5);
        const double var_x7 = var_chaste_interface__Irel__R_prime * mParameters[1];
        const double var_x8 = var_x6 * var_x7;
        const double var_x9 = var_x5 * var_x8;
        const double var_x10 = 1 / (pow((0.44444444444444442 + var_x0), 2) * pow(var_chaste_interface__Ca__Ca_SR, 3));
        const double var_x11 = -var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_SR;
        const double var_x12 = var_x11 / pow((1 - 0.59999999999999998 * var_x1), 2);
        const double var_x13 = var_x10 * var_x12 * var_x3 * var_x8;
        const double var_x14 = var_x12 * var_x7 / pow((0.40000000000000002 + var_x4), 2);
        const double var_x15 = var_x10 * var_x14 * var_x2 * pow(var_chaste_interface__Ca__Ca_ss, 4);
        const double var_x16 = 0.29999999999999999 + var_chaste_interface__Ca__Ca_SR;
        const double var_x17 = pow(var_x16, (-2));
        const double var_x18 = 1 / (1.0 + 3.0 * var_x17);
        const double var_x19 = var_x18;
        const double var_x20 = 1.0 + 6.2499999999999997e-8 / pow(var_chaste_interface__Ca__Ca_i, 2);
        const double var_x21 = mParameters[2] / var_x20;
        const double var_x22 = (-var_chaste_interface__Ca__Ca_i + var_chaste_interface__Ca__Ca_SR) * mParameters[0];
        const double var_x23 = mParameters[2] / (pow(var_x20, 2) * pow(var_chaste_interface__Ca__Ca_i, 3));
        const double var_x24 = var_x14 * pow(var_chaste_interface__Ca__Ca_ss, 3);
        const double var_x25 = var_chaste_interface__Ca__Ca_ss * var_chaste_interface__Irel__R_prime;
        const double var_x26 = var_x11 * var_x6 * mParameters[1];
        const double var_x27 = var_x2 * var_x25 * var_x26;
        const double var_x28 = 0.001 + var_chaste_interface__Ca__Ca_i;
        const double var_x29 = 1.0 + 0.00020000000000000001 / pow(var_x28, 2);
        const double var_x30 = 1 / var_x29;
        const double var_x31 = 0.066691050963179718 * mParameters[0];
        const double var_x32 = 0.00050000000000000001 + var_chaste_interface__Ca__Ca_i;
        const double var_x33 = 1 / var_x32;
        const double var_x34 = 1 / var_chaste_interface__Ca__Ca_i;
        const double var_x35 = _lt_0_row[2];
        const double var_x36 = pow(mParameters[7], 3);
        const double var_x37 = var_x35 * var_x36;
        const double var_x38 = mParameters[15] / ((1.0 + 0.10000000000000001 * var_x35) * (669921.875 + var_x36) * (1.3799999999999999 + mParameters[5]));
        const double var_x39 = var_x37 * var_x38;
        const double var_x40 = mParameters[5] * _lt_0_row[1];
        const double var_x41 = var_x38 * var_x40 * pow(var_chaste_interface__Na__Na_i, 2);
        const double var_x42 = 3.0010972933430868 * var_x4;
        const double var_x43 = var_x42 * var_x8;
        const double var_x44 = 0.00025000000000000001 + var_chaste_interface__Ca__Ca_ss;
        const double var_x45 = 1.0 + 0.0001 / pow(var_x44, 2);
        const double var_x46 = 1 / var_x45;
        const double var_x47 = var_x46;
        const double var_x48 = -5615083.1234197523 + 374338.90822798351 * var_chaste_interface__cell__V;
        const double var_x49 = exp(9.9999999999858739e-8);
        const double var_x50 = 1 / (-1.0 + var_x49);
        const double var_x51 = mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_f_gate__f;
        const double var_x52 = var_x51 * var_chaste_interface__iCaL_fCass_gate__fCass;
        const double var_x53 = 0.0048242670749931854 * var_x52;
        const double var_x54 = exp(-9.9999999999858739e-8);
        const double var_x55 = 1 / (-1.0 + var_x54);
        const double var_x56 = var_x53 * var_x54 * var_x55;
        const double var_x57 = -15.0 + var_chaste_interface__cell__V;
        const double var_x58 = fabs(var_x57) < 1.3356880329828957e-6;
        const double var_x59 = _lt_0_row[5];
        const double var_x60 = var_x57 / (-1.0 + var_x59);
        const double var_x61 = 0.094772024954610332 * mParameters[3];
        const double var_x62 = -mParameters[5];
        const double var_x63 = 0.25 * var_chaste_interface__Ca__Ca_ss;
        const double var_x64 = 0.019297068299972742 * var_x51;
        const double var_x65 = var_x50 * var_x64 * (var_x62 + var_x49 * var_x63);
        const double var_x66 = var_x55 * var_x64 * (var_x62 + var_x54 * var_x63);
        const double var_x67 = var_x66 * var_chaste_interface__iCaL_fCass_gate__fCass;
        const double var_x68 = 14447.286958825251 * var_x60 * (var_x62 + var_x59 * var_x63);
        const double var_x69 = -0.11249999999999999 + 0.067500000000000004 * var_x1;
        const double var_x70 = 1 / var_chaste_interface__K__K_i;
        const double var_x71 = pow(var_chaste_interface__iKs_Xs_gate__Xs, 2) * mParameters[14] / (0.029999999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i);
        const double var_x72 = log(var_x70 * mParameters[6]);
        const double var_x73 = 1 / exp(1.4222406175221964 * var_x72 - 0.050000000000000003 * var_chaste_interface__cell__V);
        const double var_x74 = 1.0 + 0.079111111111111104 * var_x73;
        const double var_x75 = pow(var_x74, 2);
        const double var_x76 = 1 / exp(-0.059333333333333335 + 5.9260025730091517 * var_x72 - 0.20833333333333334 * var_chaste_interface__cell__V);
        const double var_x77 = 1 / exp(0.15802673528024405 * var_x72 - 0.0055555555555555558 * var_chaste_interface__cell__V);
        const double var_x78 = pow(var_x74, 3);
        const double var_x79 = var_x70 * var_x73;
        const double var_x80 = 1 / exp(3.1258035549938383 * var_x72 - 0.10989010989010989 * var_chaste_interface__cell__V);
        const double var_x81 = 1.0 + 0.036532500000000002 * var_x80;
        const double var_x82 = 1 / (var_x78 + 2.0875714285714286 * var_x76 + 0.012714285714285714 * var_x77);
        const double var_x83 = sqrt(mParameters[6]);
        const double var_x84 = var_x83 * mParameters[12];
        const double var_x85 = 0.00027188924024856262 * var_chaste_interface__cell__V - 0.0072631840899465916 * var_x72;
        const double var_x86 = 0.0072631840899465916 * var_x70;
        const double var_x87 = var_x83 * mParameters[13];
        const double var_x88 = mParameters[4] * mParameters[3];
        const double var_x89 = mParameters[6] / ((1.0 + mParameters[6]) * (_lt_0_row[4]));
        const double var_x90 = var_x89 / (40.0 + var_chaste_interface__Na__Na_i);
        const double var_x91 = var_x89 * var_chaste_interface__Na__Na_i / pow((1 + 0.025000000000000001 * var_chaste_interface__Na__Na_i), 2);
        const double var_x92 = 1 / var_chaste_interface__Na__Na_i;
        const double var_x93 = 1 / (1.0 + 399.99999999999994 * var_x3);
        const double var_x94 = 1 / (2.0 + 80.0 * var_x93);
        const double var_x95 = var_chaste_interface__Ca__Ca_ss / pow((0.0025000000000000005 + var_x3), 2);
        const double var_x96 = _lt_0_row[13];
        const double var_x97 = -var_x96;
        const double var_x98 = _lt_0_row[16];
        const double var_x99 = exp(-3.1680000000000028);
        const double var_x100 = -var_x98 - var_x99;
        const double var_x101 = exp(-2.5140000000000011);
        const double var_x102 = _lt_0_row[14];
        const double var_x103 = -var_x101 - var_x102;
        const double var_x104 = _lt_0_row[17];
        const double var_x105 = _lt_0_row[18];
        const double var_x106 = -var_x105;
        const double var_x107 = 1.9631681698237122 * pow((1 / mParameters[6]), 0.40000000000000002) * _lt_0_row[15];
        const double var_x108 = -var_x104 - var_x107;
        
        
        rJacobian[0][0] = 1.0 - (mDt * (var_x19 * (-var_x9 - mParameters[0] + 0.21333333333333335 * var_x15 - 0.032000000000000001 * var_x13) + 0.66666666666666674 * (var_x21 - var_x22 - var_x11 * var_x9) / (pow(var_x16, 3) * pow((0.33333333333333337 + var_x17), 2))));
        rJacobian[0][1] = -(mDt * (var_x19 * (1.2499999999999999e-7 * var_x23 + mParameters[0])));
        rJacobian[0][2] = -(mDt * (var_x19 * (var_x9 + 0.32000000000000001 * var_x24 - 0.29999999999999999 * var_x27)));
        rJacobian[0][3] = -(mDt * (-var_x18 * var_x26 * var_x5));
        rJacobian[0][4] = 0.0;
        rJacobian[0][5] = 0.0;
        rJacobian[0][6] = 0.0;
        rJacobian[0][7] = 0.0;
        rJacobian[0][8] = 0.0;
        rJacobian[0][9] = 0.0;
        rJacobian[0][10] = 0.0;
        rJacobian[0][11] = 0.0;
        rJacobian[0][12] = 0.0;
        rJacobian[0][13] = 0.0;
        rJacobian[0][14] = 0.0;
        rJacobian[0][15] = 0.0;
        rJacobian[0][16] = 0.0;
        rJacobian[1][0] = -(mDt * (var_x30 * var_x31));
        rJacobian[1][1] = 1.0 - (mDt * (var_x30 * (-0.0038 - var_x31 - 8.3363813703974642e-9 * var_x23 + (-1.9554627815634599e-5 * var_x33 - 0.0015795337492435057 * var_x39 - 1.9983687701177615e-6 * var_x34 + 1.9554627815634599e-5 * var_chaste_interface__Ca__Ca_i / pow(var_x32, 2)) * mParameters[3]) + 0.00040000000000000002 * (0.0038 * var_chaste_interface__Ca__Ca_ss + 0.066691050963179718 * var_x22 - 0.0038 * var_chaste_interface__Ca__Ca_i - 0.066691050963179718 * var_x21 - 0.00031590674984870116 * (0.00047360000000000002 * var_chaste_interface__cell__V - 0.0063258185242159298 * log(var_x34 * mParameters[5]) + 0.061899999999999997 * var_x33 * var_chaste_interface__Ca__Ca_i - 2.0 * var_x38 * (var_x40 * pow(var_chaste_interface__Na__Na_i, 3) - 2.5 * var_x37 * var_chaste_interface__Ca__Ca_i)) * mParameters[3]) / (pow(var_x28, 3) * pow(var_x29, 2))));
        rJacobian[1][2] = -(mDt * (0.0038 * var_x30));
        rJacobian[1][3] = 0.0;
        rJacobian[1][4] = 0.0;
        rJacobian[1][5] = -(mDt * (0.0018954404990922068 * var_x30 * var_x41 * mParameters[3]));
        rJacobian[1][6] = 0.0;
        rJacobian[1][7] = 0.0;
        rJacobian[1][8] = 0.0;
        rJacobian[1][9] = 0.0;
        rJacobian[1][10] = 0.0;
        rJacobian[1][11] = 0.0;
        rJacobian[1][12] = 0.0;
        rJacobian[1][13] = 0.0;
        rJacobian[1][14] = 0.0;
        rJacobian[1][15] = 0.0;
        rJacobian[1][16] = 0.0;
        rJacobian[2][0] = -(mDt * (var_x47 * (var_x43 + 0.64023408924652514 * var_x13 - 4.2682272616435011 * var_x15)));
        rJacobian[2][1] = -(mDt * (1.1399999999999999 * var_x46));
        rJacobian[2][2] = 1.0 - (mDt * (var_x47 * (-1.1399999999999999 - var_x43 + 6.0021945866861737 * var_x27 - 6.4023408924652525 * var_x24 - var_x61 * ((var_x58) ? (-var_x56 + var_x48 * (var_x56 + var_x49 * var_x50 * var_x53)) : (3611.8217397063127 * var_x52 * var_x59 * var_x60))) + 0.00020000000000000001 * (1.1399999999999999 * var_chaste_interface__Ca__Ca_i - 1.1399999999999999 * var_chaste_interface__Ca__Ca_ss + var_x11 * var_x43 - var_x61 * ((var_x58) ? (-var_x67 + 374338.90822798351 * (-14.999998664311967 + var_chaste_interface__cell__V) * (var_x67 + var_x65 * var_chaste_interface__iCaL_fCass_gate__fCass)) : (var_x52 * var_x68))) / (pow(var_x44, 3) * pow(var_x45, 2))));
        rJacobian[2][3] = -(mDt * (var_x26 * var_x42 * var_x46));
        rJacobian[2][4] = 0.0;
        rJacobian[2][5] = 0.0;
        rJacobian[2][6] = -(mDt * (-var_x46 * var_x61 * ((var_x58) ? (-var_x66 + var_x48 * (var_x65 + var_x66)) : (var_x51 * var_x68))));
        rJacobian[2][7] = 0.0;
        rJacobian[2][8] = 0.0;
        rJacobian[2][9] = 0.0;
        rJacobian[2][10] = 0.0;
        rJacobian[2][11] = 0.0;
        rJacobian[2][12] = 0.0;
        rJacobian[2][13] = 0.0;
        rJacobian[2][14] = 0.0;
        rJacobian[2][15] = 0.0;
        rJacobian[2][16] = 0.0;
        rJacobian[3][0] = -(mDt * (0.059999999999999998 * var_x10 * var_x25));
        rJacobian[3][1] = 0.0;
        rJacobian[3][2] = -(mDt * (var_x69 * var_chaste_interface__Irel__R_prime));
        rJacobian[3][3] = 1.0 - (mDt * (-0.0050000000000000001 + var_x69 * var_chaste_interface__Ca__Ca_ss));
        rJacobian[3][4] = 0.0;
        rJacobian[3][5] = 0.0;
        rJacobian[3][6] = 0.0;
        rJacobian[3][7] = 0.0;
        rJacobian[3][8] = 0.0;
        rJacobian[3][9] = 0.0;
        rJacobian[3][10] = 0.0;
        rJacobian[3][11] = 0.0;
        rJacobian[3][12] = 0.0;
        rJacobian[3][13] = 0.0;
        rJacobian[3][14] = 0.0;
        rJacobian[3][15] = 0.0;
        rJacobian[3][16] = 0.0;
        rJacobian[4][0] = 0.0;
        rJacobian[4][1] = 0.0;
        rJacobian[4][2] = 0.0;
        rJacobian[4][3] = 0.0;
        rJacobian[4][4] = 1.0 - (mDt * (var_x88 * (-0.016878114612481093 * var_x71 - 0.00016422405517944107 * var_x70 / (_lt_0_row[0]) - var_x84 * var_x85 * (0.19888157678432786 * var_x74 * var_x79 * var_x82 + 0.20280156807699834 * var_x75 * (-12.370953657054676 * var_x70 * var_x76 - 0.33754510655860126 * var_x75 * var_x79 - 0.0020091970628488172 * var_x70 * var_x77) / pow((var_x76 + 0.0060904673920481765 * var_x77 + 0.47902552521727226 * var_x78), 2) - 0.013269275214920797 * var_x70 * var_x80 / pow(var_x81, 2)) - var_x84 * var_x86 * (0.11619999999999997 / var_x81 + 0.88380000000000003 * var_x75 * var_x82) - var_x86 * var_x87 * var_chaste_interface__iKr_Markov__Or4 - 0.016878114612481093 * var_x70 * mParameters[16] * var_chaste_interface__ito_r_gate__r * var_chaste_interface__ito_s_gate__s)));
        rJacobian[4][5] = -(mDt * (var_x88 * (0.0016389242182150614 * var_x90 - 1.0243276363844134e-6 * var_x91 - 0.00050634343837443281 * var_x71)));
        rJacobian[4][6] = 0.0;
        rJacobian[4][7] = 0.0;
        rJacobian[4][8] = 0.0;
        rJacobian[4][9] = 0.0;
        rJacobian[4][10] = 0.0;
        rJacobian[4][11] = 0.0;
        rJacobian[4][12] = 0.0;
        rJacobian[4][13] = 0.0;
        rJacobian[4][14] = 0.0;
        rJacobian[4][15] = 0.0;
        rJacobian[4][16] = -(mDt * (-var_x85 * var_x87 * var_x88));
        rJacobian[5][0] = 0.0;
        rJacobian[5][1] = -(mDt * (0.0047386012477305169 * var_x39 * var_x88));
        rJacobian[5][2] = 0.0;
        rJacobian[5][3] = 0.0;
        rJacobian[5][4] = 0.0;
        rJacobian[5][5] = 1.0 - (mDt * (var_x88 * (1.5364914545766202e-6 * var_x91 - 4.8946532376195178e-6 * var_x92 - 0.0056863214972766203 * var_x41 - 0.0024583863273225921 * var_x90 - 0.016878114612481093 * var_x92 * pow(var_chaste_interface__iNa_m_gate__m, 3) * mParameters[9] * var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j)));
        rJacobian[5][6] = 0.0;
        rJacobian[5][7] = 0.0;
        rJacobian[5][8] = 0.0;
        rJacobian[5][9] = 0.0;
        rJacobian[5][10] = 0.0;
        rJacobian[5][11] = 0.0;
        rJacobian[5][12] = 0.0;
        rJacobian[5][13] = 0.0;
        rJacobian[5][14] = 0.0;
        rJacobian[5][15] = 0.0;
        rJacobian[5][16] = 0.0;
        rJacobian[6][0] = 0.0;
        rJacobian[6][1] = 0.0;
        rJacobian[6][2] = -(mDt * (-0.0020000000000000005 * var_x94 * var_x95 + 6.2500000000000001e-5 * var_x95 * (0.59999999999999998 - var_chaste_interface__iCaL_fCass_gate__fCass + 0.40000000000000002 * var_x93) / pow((0.025000000000000001 + var_x93), 2)));
        rJacobian[6][3] = 0.0;
        rJacobian[6][4] = 0.0;
        rJacobian[6][5] = 0.0;
        rJacobian[6][6] = 1.0 - (mDt * (-var_x94));
        rJacobian[6][7] = 0.0;
        rJacobian[6][8] = 0.0;
        rJacobian[6][9] = 0.0;
        rJacobian[6][10] = 0.0;
        rJacobian[6][11] = 0.0;
        rJacobian[6][12] = 0.0;
        rJacobian[6][13] = 0.0;
        rJacobian[6][14] = 0.0;
        rJacobian[6][15] = 0.0;
        rJacobian[6][16] = 0.0;
        rJacobian[7][0] = 0.0;
        rJacobian[7][1] = 0.0;
        rJacobian[7][2] = 0.0;
        rJacobian[7][3] = 0.0;
        rJacobian[7][4] = 0.0;
        rJacobian[7][5] = 0.0;
        rJacobian[7][6] = 0.0;
        rJacobian[7][7] = 1.0 - (mDt * (var_x97));
        rJacobian[7][8] = -(mDt * (var_x98));
        rJacobian[7][9] = 0.0;
        rJacobian[7][10] = 0.0;
        rJacobian[7][11] = 0.0;
        rJacobian[7][12] = 0.0;
        rJacobian[7][13] = 0.0;
        rJacobian[7][14] = 0.0;
        rJacobian[7][15] = 0.0;
        rJacobian[7][16] = 0.0;
        rJacobian[8][0] = 0.0;
        rJacobian[8][1] = 0.0;
        rJacobian[8][2] = 0.0;
        rJacobian[8][3] = 0.0;
        rJacobian[8][4] = 0.0;
        rJacobian[8][5] = 0.0;
        rJacobian[8][6] = 0.0;
        rJacobian[8][7] = -(mDt * (var_x96));
        rJacobian[8][8] = 1.0 - (mDt * (var_x100));
        rJacobian[8][9] = -(mDt * (var_x101));
        rJacobian[8][10] = 0.0;
        rJacobian[8][11] = 0.0;
        rJacobian[8][12] = 0.0;
        rJacobian[8][13] = 0.0;
        rJacobian[8][14] = 0.0;
        rJacobian[8][15] = 0.0;
        rJacobian[8][16] = 0.0;
        rJacobian[9][0] = 0.0;
        rJacobian[9][1] = 0.0;
        rJacobian[9][2] = 0.0;
        rJacobian[9][3] = 0.0;
        rJacobian[9][4] = 0.0;
        rJacobian[9][5] = 0.0;
        rJacobian[9][6] = 0.0;
        rJacobian[9][7] = 0.0;
        rJacobian[9][8] = -(mDt * (var_x99));
        rJacobian[9][9] = 1.0 - (mDt * (var_x103));
        rJacobian[9][10] = 0.0;
        rJacobian[9][11] = -(mDt * (var_x104));
        rJacobian[9][12] = 0.0;
        rJacobian[9][13] = 0.0;
        rJacobian[9][14] = 0.0;
        rJacobian[9][15] = 0.0;
        rJacobian[9][16] = 0.0;
        rJacobian[10][0] = 0.0;
        rJacobian[10][1] = 0.0;
        rJacobian[10][2] = 0.0;
        rJacobian[10][3] = 0.0;
        rJacobian[10][4] = 0.0;
        rJacobian[10][5] = 0.0;
        rJacobian[10][6] = 0.0;
        rJacobian[10][7] = 0.0;
        rJacobian[10][8] = 0.0;
        rJacobian[10][9] = 0.0;
        rJacobian[10][10] = 1.0 - (mDt * (var_x106));
        rJacobian[10][11] = -(mDt * (var_x107));
        rJacobian[10][12] = 0.0;
        rJacobian[10][13] = 0.0;
        rJacobian[10][14] = 0.0;
        rJacobian[10][15] = 0.0;
        rJacobian[10][16] = 0.0;
        rJacobian[11][0] = 0.0;
        rJacobian[11][1] = 0.0;
        rJacobian[11][2] = 0.0;
        rJacobian[11][3] = 0.0;
        rJacobian[11][4] = 0.0;
        rJacobian[11][5] = 0.0;
        rJacobian[11][6] = 0.0;
        rJacobian[11][7] = 0.0;
        rJacobian[11][8] = 0.0;
        rJacobian[11][9] = -(mDt * (var_x102));
        rJacobian[11][10] = -(mDt * (var_x105));
        rJacobian[11][11] = 1.0 - (mDt * (-0.00125 + var_x108));
        rJacobian[11][12] = 0.0;
        rJacobian[11][13] = 0.0;
        rJacobian[11][14] = 0.0;
        rJacobian[11][15] = 0.0;
        rJacobian[11][16] = 0.0;
        rJacobian[12][0] = 0.0;
        rJacobian[12][1] = 0.0;
        rJacobian[12][2] = 0.0;
        rJacobian[12][3] = 0.0;
        rJacobian[12][4] = 0.0;
        rJacobian[12][5] = 0.0;
        rJacobian[12][6] = 0.0;
        rJacobian[12][7] = 0.0;
        rJacobian[12][8] = 0.0;
        rJacobian[12][9] = 0.0;
        rJacobian[12][10] = 0.0;
        rJacobian[12][11] = 0.0;
        rJacobian[12][12] = 1.0 - (mDt * (var_x97));
        rJacobian[12][13] = -(mDt * (var_x98));
        rJacobian[12][14] = 0.0;
        rJacobian[12][15] = 0.0;
        rJacobian[12][16] = 0.0;
        rJacobian[13][0] = 0.0;
        rJacobian[13][1] = 0.0;
        rJacobian[13][2] = 0.0;
        rJacobian[13][3] = 0.0;
        rJacobian[13][4] = 0.0;
        rJacobian[13][5] = 0.0;
        rJacobian[13][6] = 0.0;
        rJacobian[13][7] = 0.0;
        rJacobian[13][8] = 0.0;
        rJacobian[13][9] = 0.0;
        rJacobian[13][10] = 0.0;
        rJacobian[13][11] = 0.0;
        rJacobian[13][12] = -(mDt * (var_x96));
        rJacobian[13][13] = 1.0 - (mDt * (var_x100));
        rJacobian[13][14] = -(mDt * (var_x101));
        rJacobian[13][15] = 0.0;
        rJacobian[13][16] = 0.0;
        rJacobian[14][0] = 0.0;
        rJacobian[14][1] = 0.0;
        rJacobian[14][2] = 0.0;
        rJacobian[14][3] = 0.0;
        rJacobian[14][4] = 0.0;
        rJacobian[14][5] = 0.0;
        rJacobian[14][6] = 0.0;
        rJacobian[14][7] = 0.0;
        rJacobian[14][8] = 0.0;
        rJacobian[14][9] = 0.0;
        rJacobian[14][10] = 0.0;
        rJacobian[14][11] = 0.0;
        rJacobian[14][12] = 0.0;
        rJacobian[14][13] = -(mDt * (var_x99));
        rJacobian[14][14] = 1.0 - (mDt * (var_x103));
        rJacobian[14][15] = 0.0;
        rJacobian[14][16] = -(mDt * (var_x104));
        rJacobian[15][0] = 0.0;
        rJacobian[15][1] = 0.0;
        rJacobian[15][2] = 0.0;
        rJacobian[15][3] = 0.0;
        rJacobian[15][4] = 0.0;
        rJacobian[15][5] = 0.0;
        rJacobian[15][6] = 0.0;
        rJacobian[15][7] = 0.0;
        rJacobian[15][8] = 0.0;
        rJacobian[15][9] = 0.0;
        rJacobian[15][10] = 0.0;
        rJacobian[15][11] = 0.0;
        rJacobian[15][12] = 0.0;
        rJacobian[15][13] = 0.0;
        rJacobian[15][14] = 0.0;
        rJacobian[15][15] = 1.0 - (mDt * (var_x106));
        rJacobian[15][16] = -(mDt * (var_x107));
        rJacobian[16][0] = 0.0;
        rJacobian[16][1] = 0.0;
        rJacobian[16][2] = 0.0;
        rJacobian[16][3] = 0.0;
        rJacobian[16][4] = 0.0;
        rJacobian[16][5] = 0.0;
        rJacobian[16][6] = 0.0;
        rJacobian[16][7] = 0.0;
        rJacobian[16][8] = 0.0;
        rJacobian[16][9] = 0.0;
        rJacobian[16][10] = 0.0;
        rJacobian[16][11] = -(mDt * (0.00125));
        rJacobian[16][12] = 0.0;
        rJacobian[16][13] = 0.0;
        rJacobian[16][14] = -(mDt * (var_x102));
        rJacobian[16][15] = -(mDt * (var_x105));
        rJacobian[16][16] = 1.0 - (mDt * (var_x108));
    }

    void Cellfink_noble_giles_model_2008FromCellMLBackwardEuler::UpdateTransmembranePotential(double var_chaste_interface__Environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: millimolar; Initial value: 0.0001092
        double var_chaste_interface__iKr_Markov__Or4 = rY[5];
        // Units: dimensionless; Initial value: 0.014
        double var_chaste_interface__iKs_Xs_gate__Xs = rY[12];
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = rY[13];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ito_r_gate__r = rY[14];
        // Units: dimensionless; Initial value: 2.11e-08
        double var_chaste_interface__iNa_m_gate__m = rY[15];
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = rY[16];
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = rY[17];
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = rY[18];
        // Units: dimensionless; Initial value: 5.06e-06
        double var_chaste_interface__iCaL_f_gate__f = rY[19];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = rY[20];
        // Units: dimensionless; Initial value: 0.9995
        double var_chaste_interface__iCaL_fCass_gate__fCass = rY[21];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ca__Ca_ss = rY[23];
        // Units: millimolar; Initial value: 0.0001893
        double var_chaste_interface__Na__Na_i = rY[25];
        // Units: millimolar; Initial value: 7.940167
        double var_chaste_interface__K__K_i = rY[26];
        // Units: millimolar; Initial value: 141.0167
        
        // Lookup table indexing
        const bool _oob_0 = Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        const double var_IpCa__i_p_Ca = 0.061899999999999997 * var_chaste_interface__Ca__Ca_i / (0.00050000000000000001 + var_chaste_interface__Ca__Ca_i); // nanoA_per_nanoF
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[5] * _lt_0_row[1] - 2.5 * pow(mParameters[7], 3) * var_chaste_interface__Ca__Ca_i * _lt_0_row[2]) * mParameters[15] / ((_lt_0_row[3]) * (669921.875 + pow(mParameters[7], 3)) * (1.3799999999999999 + mParameters[5])); // nanoA_per_nanoF
        const double var_INaK__i_NaK = 1.2969999999999999 * mParameters[6] * var_chaste_interface__Na__Na_i / ((1.0 + mParameters[6]) * (40.0 + var_chaste_interface__Na__Na_i) * (_lt_0_row[4])); // nanoA_per_nanoF
        const double var_cell__i_Stim = 1.0000000000000002 * GetIntracellularAreaStimulus(var_chaste_interface__Environment__time) / HeartConfig::Instance()->GetCapacitance(); // nanoA_per_nanoF
        const double var_ICaL__i_CaL = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356880329828957e-6) ? (374338.90822798351 * (-14.999998664311967 + var_chaste_interface__cell__V) * (0.019297068299972742 * (-mParameters[5] + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(9.9999999999858739e-8)) * mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(9.9999999999858739e-8)) + 0.019297068299972742 * (-mParameters[5] + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) - 0.019297068299972742 * (-mParameters[5] + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) : (14447.286958825251 * (-15.0 + var_chaste_interface__cell__V) * (-mParameters[5] + 0.25 * var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (_lt_0_row[6]))); // nanoA_per_nanoF
        const double var_ICab__i_b_Ca = 0.00047360000000000002 * var_chaste_interface__cell__V - 0.0063258185242159298 * log(mParameters[5] / var_chaste_interface__Ca__Ca_i); // nanoA_per_nanoF
        const double var_reversal_potentials__E_K = 26.713760659695652 * log(mParameters[6] / var_chaste_interface__K__K_i); // millivolt
        const double var_IKr__i_Kr = 0.43033148291193518 * sqrt(mParameters[6]) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * mParameters[13] * var_chaste_interface__iKr_Markov__Or4; // nanoA_per_nanoF
        const double var_IpK__i_p_K = 0.0097300000000000008 * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) / (_lt_0_row[0]); // nanoA_per_nanoF
        const double var_Ito__i_to = (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * mParameters[16] * var_chaste_interface__ito_r_gate__r * var_chaste_interface__ito_s_gate__s; // nanoA_per_nanoF
        const double var_IK1__i_K1 = 0.43033148291193518 * sqrt(mParameters[6]) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * (0.11619999999999997 / (1.0 + 0.036532500000000002 / exp(0.11701098901098901 * var_reversal_potentials__E_K - 0.10989010989010989 * var_chaste_interface__cell__V)) + 0.88380000000000003 * pow((1.0 + 0.079111111111111104 / exp(0.053239999999999996 * var_reversal_potentials__E_K - 0.050000000000000003 * var_chaste_interface__cell__V)), 2) / (pow((1.0 + 0.079111111111111104 / exp(0.053239999999999996 * var_reversal_potentials__E_K - 0.050000000000000003 * var_chaste_interface__cell__V)), 3) + 2.0875714285714286 / exp(-0.059333333333333335 + 0.22183333333333333 * var_reversal_potentials__E_K - 0.20833333333333334 * var_chaste_interface__cell__V) + 0.012714285714285714 / exp(0.005915555555555555 * var_reversal_potentials__E_K - 0.0055555555555555558 * var_chaste_interface__cell__V))) * mParameters[12]; // nanoA_per_nanoF
        const double var_reversal_potentials__E_Na = 26.713760659695652 * log(mParameters[7] / var_chaste_interface__Na__Na_i); // millivolt
        const double var_INa__i_Na = pow(var_chaste_interface__iNa_m_gate__m, 3) * (-var_reversal_potentials__E_Na + var_chaste_interface__cell__V) * mParameters[9] * var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j; // nanoA_per_nanoF
        const double var_INab__i_b_Na = 0.00029 * var_chaste_interface__cell__V - 0.00029 * var_reversal_potentials__E_Na; // nanoA_per_nanoF
        const double var_IKs__i_Ks = pow(var_chaste_interface__iKs_Xs_gate__Xs, 2) * (-26.713760659695652 * log((0.029999999999999999 * mParameters[7] + mParameters[6]) / (0.029999999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i)) + var_chaste_interface__cell__V) * mParameters[14]; // nanoA_per_nanoF
        const double d_dt_chaste_interface_var_cell__V = -var_ICaL__i_CaL - var_ICab__i_b_Ca - var_IK1__i_K1 - var_IKr__i_Kr - var_IKs__i_Ks - var_INa__i_Na - var_INaCa__i_NaCa - var_INaK__i_NaK - var_INab__i_b_Na - var_IpCa__i_p_Ca - var_IpK__i_p_K - var_Ito__i_to - var_cell__i_Stim; // millivolt / millisecond
        
        rY[0] += mDt*d_dt_chaste_interface_var_cell__V;
    }
    
    void Cellfink_noble_giles_model_2008FromCellMLBackwardEuler::ComputeOneStepExceptVoltage(double var_chaste_interface__Environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__iKs_Xs_gate__Xs = rY[12];
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = rY[13];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ito_r_gate__r = rY[14];
        // Units: dimensionless; Initial value: 2.11e-08
        double var_chaste_interface__iNa_m_gate__m = rY[15];
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = rY[16];
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = rY[17];
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = rY[18];
        // Units: dimensionless; Initial value: 5.06e-06
        double var_chaste_interface__iCaL_f_gate__f = rY[19];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = rY[20];
        // Units: dimensionless; Initial value: 0.9995
        
        // Lookup table indexing
        const bool _oob_0 = Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        const double var_iCaL_d_gate__alpha_d = 0.25 + 1.3999999999999999 / (1.0 + exp(-2.6923076923076925 - 0.076923076923076927 * var_chaste_interface__cell__V));
        const double var_iCaL_d_gate__beta_d = 1.3999999999999999 / (1.0 + exp(1.0 + 0.20000000000000001 * var_chaste_interface__cell__V));
        const double var_iCaL_d_gate__d_inf_shift = 5.0;
        const double var_iCaL_d_gate__d_inf = 1 / (1.0 + exp(0.13333333333333333 * var_iCaL_d_gate__d_inf_shift - 0.13333333333333333 * var_chaste_interface__cell__V));
        const double var_iCaL_d_gate__gamma_d = 1 / (1.0 + exp(2.5 - 0.050000000000000003 * var_chaste_interface__cell__V));
        const double var_iCaL_d_gate__tau_d = var_iCaL_d_gate__alpha_d * var_iCaL_d_gate__beta_d + var_iCaL_d_gate__gamma_d;
        const double var_iCaL_f2_gate__f2_inf = 0.25 + _lt_0_row[9];
        const double var_iCaL_f2_gate__tau_f2 = _lt_0_row[10];
        const double var_iCaL_f_gate__f_inf = _lt_0_row[11];
        const double var_iCaL_f_gate__tau_f = _lt_0_row[12];
        const double var_iKs_Xs_gate__alpha_xs = 1400.0 / sqrt(1.0 + exp(0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__cell__V));
        const double var_iKs_Xs_gate__beta_xs = 1 / (1.0 + exp(-2.3333333333333335 + 0.066666666666666666 * var_chaste_interface__cell__V));
        const double var_iKs_Xs_gate__tau_xs = 80.0 + var_iKs_Xs_gate__alpha_xs * var_iKs_Xs_gate__beta_xs;
        const double var_iKs_Xs_gate__xs_inf = _lt_0_row[19];
        const double var_iNa_h_gate__alpha_h = ((var_chaste_interface__cell__V < -40.0 + mParameters[11]) ? (0.057000000000000002 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[11] - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0));
        const double var_iNa_h_gate__beta_h = ((var_chaste_interface__cell__V < -40.0 + mParameters[11]) ? (310000.0 * exp(0.34849999999999998 * var_chaste_interface__cell__V - 0.34849999999999998 * mParameters[11]) + 2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * mParameters[11])) : (5.9230769230769234 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[11] - 0.0900900900900901 * var_chaste_interface__cell__V))));
        const double var_iNa_h_gate__h_inf = 0.01 * mParameters[10] + (1.0 - 0.01 * mParameters[10]) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__cell__V - 0.13458950201884254 * mParameters[11])), 2);
        const double var_iNa_h_gate__tau_h = 1 / (var_iNa_h_gate__alpha_h + var_iNa_h_gate__beta_h);
        const double var_iNa_j_gate__alpha_j = ((var_chaste_interface__cell__V < -40.0 + mParameters[11]) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-25428.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * mParameters[11]) - 6.9480000000000002e-6 * exp(0.043909999999999998 * mParameters[11] - 0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * mParameters[11]))) : (0));
        const double var_iNa_j_gate__beta_j = ((var_chaste_interface__cell__V < -40.0 + mParameters[11]) ? (0.024240000000000001 * exp(0.01052 * mParameters[11] - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[11] - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__cell__V - 0.057000000000000002 * mParameters[11]) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[11] - 0.10000000000000001 * var_chaste_interface__cell__V))));
        const double var_iNa_j_gate__j_inf = 0.01 * mParameters[10] + (1.0 - 0.01 * mParameters[10]) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__cell__V - 0.13458950201884254 * mParameters[11])), 2);
        const double var_iNa_j_gate__tau_j = 1 / (var_iNa_j_gate__alpha_j + var_iNa_j_gate__beta_j);
        const double var_iNa_m_gate__alpha_m = 1 / (_lt_0_row[23]);
        const double var_iNa_m_gate__beta_m = _lt_0_row[22];
        const double var_iNa_m_gate__m_inf = _lt_0_row[21];
        const double var_iNa_m_gate__tau_m = var_iNa_m_gate__alpha_m * var_iNa_m_gate__beta_m;
        const double var_ito_r_gate__r_inf = _lt_0_row[24];
        const double var_ito_r_gate__tau_r = _lt_0_row[25];
        const double var_ito_s_gate__s_inf = _lt_0_row[26];
        const double var_ito_s_gate__tau_s = _lt_0_row[27];
        
        
        rY[12] = (var_chaste_interface__iKs_Xs_gate__Xs + ((var_iKs_Xs_gate__xs_inf / var_iKs_Xs_gate__tau_xs) * mDt)) / (1.0 - ((-1 / var_iKs_Xs_gate__tau_xs) * mDt));
        rY[14] = (var_chaste_interface__ito_r_gate__r + ((var_ito_r_gate__r_inf / var_ito_r_gate__tau_r) * mDt)) / (1.0 - ((-1 / var_ito_r_gate__tau_r) * mDt));
        rY[13] = (var_chaste_interface__ito_s_gate__s + ((var_ito_s_gate__s_inf / var_ito_s_gate__tau_s) * mDt)) / (1.0 - ((-1 / var_ito_s_gate__tau_s) * mDt));
        rY[18] = (var_chaste_interface__iCaL_d_gate__d + ((var_iCaL_d_gate__d_inf / var_iCaL_d_gate__tau_d) * mDt)) / (1.0 - ((-1 / var_iCaL_d_gate__tau_d) * mDt));
        rY[20] = (var_chaste_interface__iCaL_f2_gate__f2 + ((var_iCaL_f2_gate__f2_inf / var_iCaL_f2_gate__tau_f2) * mDt)) / (1.0 - ((-1 / var_iCaL_f2_gate__tau_f2) * mDt));
        rY[19] = (var_chaste_interface__iCaL_f_gate__f + ((var_iCaL_f_gate__f_inf / var_iCaL_f_gate__tau_f) * mDt)) / (1.0 - ((-1 / var_iCaL_f_gate__tau_f) * mDt));
        rY[16] = (var_chaste_interface__iNa_h_gate__h + ((var_iNa_h_gate__h_inf / var_iNa_h_gate__tau_h) * mDt)) / (1.0 - ((-1 / var_iNa_h_gate__tau_h) * mDt));
        rY[17] = (var_chaste_interface__iNa_j_gate__j + ((var_iNa_j_gate__j_inf / var_iNa_j_gate__tau_j) * mDt)) / (1.0 - ((-1 / var_iNa_j_gate__tau_j) * mDt));
        rY[15] = (var_chaste_interface__iNa_m_gate__m + ((var_iNa_m_gate__m_inf / var_iNa_m_gate__tau_m) * mDt)) / (1.0 - ((-1 / var_iNa_m_gate__tau_m) * mDt));
        
        double _guess[17] = {rY[22],rY[1],rY[23],rY[24],rY[26],rY[25],rY[21],rY[7],rY[8],rY[9],rY[11],rY[10],rY[2],rY[3],rY[4],rY[6],rY[5]};
        CardiacNewtonSolver<17,Cellfink_noble_giles_model_2008FromCellMLBackwardEuler>* _p_solver = CardiacNewtonSolver<17,Cellfink_noble_giles_model_2008FromCellMLBackwardEuler>::Instance();
        _p_solver->Solve(*this, var_chaste_interface__Environment__time, _guess);
        rY[22] = _guess[0];
        rY[1] = _guess[1];
        rY[23] = _guess[2];
        rY[24] = _guess[3];
        rY[26] = _guess[4];
        rY[25] = _guess[5];
        rY[21] = _guess[6];
        rY[7] = _guess[7];
        rY[8] = _guess[8];
        rY[9] = _guess[9];
        rY[11] = _guess[10];
        rY[10] = _guess[11];
        rY[2] = _guess[12];
        rY[3] = _guess[13];
        rY[4] = _guess[14];
        rY[6] = _guess[15];
        rY[5] = _guess[16];
    }

    std::vector<double> Cellfink_noble_giles_model_2008FromCellMLBackwardEuler::ComputeDerivedQuantities(double var_chaste_interface__Environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: millimolar; Initial value: 0.0001092
        double var_chaste_interface__iKr_Markov__Or4 = rY[5];
        // Units: dimensionless; Initial value: 0.014
        double var_chaste_interface__iKs_Xs_gate__Xs = rY[12];
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = rY[13];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ito_r_gate__r = rY[14];
        // Units: dimensionless; Initial value: 2.11e-08
        double var_chaste_interface__iNa_m_gate__m = rY[15];
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = rY[16];
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = rY[17];
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = rY[18];
        // Units: dimensionless; Initial value: 5.06e-06
        double var_chaste_interface__iCaL_f_gate__f = rY[19];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = rY[20];
        // Units: dimensionless; Initial value: 0.9995
        double var_chaste_interface__iCaL_fCass_gate__fCass = rY[21];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ca__Ca_SR = rY[22];
        // Units: millimolar; Initial value: 2.7656
        double var_chaste_interface__Ca__Ca_ss = rY[23];
        // Units: millimolar; Initial value: 0.0001893
        double var_chaste_interface__Irel__R_prime = rY[24];
        // Units: dimensionless; Initial value: 0.9864
        double var_chaste_interface__Na__Na_i = rY[25];
        // Units: millimolar; Initial value: 7.940167
        double var_chaste_interface__K__K_i = rY[26];
        // Units: millimolar; Initial value: 141.0167
        
        // Lookup table indexing
        const bool _oob_0 = Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfink_noble_giles_model_2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_Environment__F = 96485.341499999995; // coulomb_per_mole
        const double var_Environment__R = 8314.4719999999998; // millijoule_per_mole_kelvin
        const double var_Environment__T = 310.0; // kelvin
        const double var_INaCa__K_sat = 0.10000000000000001; // dimensionless
        const double var_INaCa__Km_Ca = 1.3799999999999999; // millimolar
        const double var_INaCa__Km_Nai = 87.5; // millimolar
        const double var_INaCa__alpha = 2.5; // dimensionless
        const double var_INaCa__gamma = 0.34999999999999998; // dimensionless
        const double var_Irel__EC = 1.5; // millimolar
        const double var_Irel__k1_prime = 0.14999999999999999; // per_millimolar2_per_millisecond
        const double var_Irel__k3 = 0.059999999999999998; // per_millisecond
        const double var_Irel__max_sr = 2.5; // dimensionless
        const double var_Irel__min_sr = 1.0; // dimensionless
        const double var_Irel__kcasr = -(-var_Irel__min_sr + var_Irel__max_sr) / (1.0 + pow(var_Irel__EC, 2) / pow(var_chaste_interface__Ca__Ca_SR, 2)) + var_Irel__max_sr; // dimensionless
        const double var_Irel__k1 = var_Irel__k1_prime / var_Irel__kcasr; // per_millimolar2_per_millisecond
        const double var_Irel__O = pow(var_chaste_interface__Ca__Ca_ss, 2) * var_chaste_interface__Irel__R_prime * var_Irel__k1 / (pow(var_chaste_interface__Ca__Ca_ss, 2) * var_Irel__k1 + var_Irel__k3); // dimensionless
        const double var_Irel__i_rel = (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_SR) * var_Irel__O * mParameters[1]; // millimolar_per_millisecond
        const double var_cell__Cm_converted = 0.001 * mParameters[3]; // uF
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[5] * exp(var_Environment__F * var_INaCa__gamma * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T)) - pow(mParameters[7], 3) * var_chaste_interface__Ca__Ca_i * var_INaCa__alpha * exp((-1.0 + var_INaCa__gamma) * var_Environment__F * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T))) * mParameters[15] / ((1.0 + var_INaCa__K_sat * exp((-1.0 + var_INaCa__gamma) * var_Environment__F * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T))) * (pow(mParameters[7], 3) + pow(var_INaCa__Km_Nai, 3)) * (mParameters[5] + var_INaCa__Km_Ca)); // nanoA_per_nanoF
        const double var_INaCa__i_NaCa_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_INaCa__i_NaCa; // uA_per_cm2
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_iCaL_f2_gate__tau_f2 = _lt_0_row[10]; // millisecond
        const double var_iCaL_fCass_gate__tau_fCass = 2.0 + 80.0 / (1.0 + 399.99999999999994 * pow(var_chaste_interface__Ca__Ca_ss, 2)); // millisecond
        const double var_ICaL__i_CaL = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356880329828957e-6) ? (374338.90822798351 * (-14.999998664311967 + var_chaste_interface__cell__V) * (0.019297068299972742 * (-mParameters[5] + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(9.9999999999858739e-8)) * mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(9.9999999999858739e-8)) + 0.019297068299972742 * (-mParameters[5] + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) - 0.019297068299972742 * (-mParameters[5] + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) : (14447.286958825251 * (-15.0 + var_chaste_interface__cell__V) * (-mParameters[5] + 0.25 * var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * mParameters[8] * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (_lt_0_row[6]))); // nanoA_per_nanoF
        const double var_ICaL__i_CaL_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_ICaL__i_CaL; // uA_per_cm2
        const double var_iCaL_f_gate__tau_f = _lt_0_row[12]; // millisecond
        const double var_iK1_rectification__Mg_Buf = 0.0356; // millimolar
        const double var_iK1_rectification__SPM = 0.0014613; // millimolar
        const double var_iK1_rectification__fac = 1.0648; // dimensionless
        const double var_iK1_rectification__phi = 0.88380000000000003; // dimensionless
        const double var_iNa_h_gate__alpha_h = ((var_chaste_interface__cell__V < -40.0 + mParameters[11]) ? (0.057000000000000002 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[11] - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_millisecond
        const double var_iNa_h_gate__beta_h = ((var_chaste_interface__cell__V < -40.0 + mParameters[11]) ? (310000.0 * exp(0.34849999999999998 * var_chaste_interface__cell__V - 0.34849999999999998 * mParameters[11]) + 2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * mParameters[11])) : (5.9230769230769234 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[11] - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_millisecond
        const double var_iNa_h_gate__tau_h = 1 / (var_iNa_h_gate__alpha_h + var_iNa_h_gate__beta_h); // millisecond
        const double var_iNa_j_gate__alpha_j = ((var_chaste_interface__cell__V < -40.0 + mParameters[11]) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-25428.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * mParameters[11]) - 6.9480000000000002e-6 * exp(0.043909999999999998 * mParameters[11] - 0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * mParameters[11]))) : (0)); // per_millisecond
        const double var_iNa_j_gate__beta_j = ((var_chaste_interface__cell__V < -40.0 + mParameters[11]) ? (0.024240000000000001 * exp(0.01052 * mParameters[11] - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[11] - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__cell__V - 0.057000000000000002 * mParameters[11]) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[11] - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_millisecond
        const double var_iNa_j_gate__tau_j = 1 / (var_iNa_j_gate__alpha_j + var_iNa_j_gate__beta_j); // millisecond
        const double var_reversal_potentials__E_K = var_Environment__R * var_Environment__T * log(mParameters[6] / var_chaste_interface__K__K_i) / var_Environment__F; // millivolt
        const double var_IKr__i_Kr = 0.43033148291193518 * sqrt(mParameters[6]) * (-7.8571428571428568 + 0.028571428571428571 * var_Environment__T) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * mParameters[13] * var_chaste_interface__iKr_Markov__Or4; // nanoA_per_nanoF
        const double var_IKr__i_Kr_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_IKr__i_Kr; // uA_per_cm2
        const double var_Ito__i_to = (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * mParameters[16] * var_chaste_interface__ito_r_gate__r * var_chaste_interface__ito_s_gate__s; // nanoA_per_nanoF
        const double var_Ito__i_to_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_Ito__i_to; // uA_per_cm2
        const double var_iK1_rectification__KbMg = 0.45000000000000001 * exp(-0.050000000000000003 * var_chaste_interface__cell__V + 0.050000000000000003 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__Kd1SPM = 0.00069999999999999999 * exp(-0.20833333333333334 * var_chaste_interface__cell__V - 1.6666666666666667 * var_iK1_rectification__Mg_Buf + 0.20833333333333334 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__Kd2SPM = 0.040000000000000001 * exp(-0.10989010989010989 * var_chaste_interface__cell__V + 0.10989010989010989 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__KiMg = 2.7999999999999998 * exp(-0.0055555555555555558 * var_chaste_interface__cell__V + 0.0055555555555555558 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__rec2 = 1 / (1.0 + var_iK1_rectification__SPM / var_iK1_rectification__Kd2SPM); // dimensionless
        const double var_iK1_rectification__temp = 1.0 + var_iK1_rectification__Mg_Buf / var_iK1_rectification__KbMg; // dimensionless
        const double var_iK1_rectification__rec1 = pow(var_iK1_rectification__temp, 2) / (pow(var_iK1_rectification__temp, 3) + var_iK1_rectification__SPM / var_iK1_rectification__Kd1SPM + var_iK1_rectification__Mg_Buf / var_iK1_rectification__KiMg); // dimensionless
        const double var_iK1_rectification__xK1_inf = (1.0 - var_iK1_rectification__phi) * var_iK1_rectification__rec2 + var_iK1_rectification__phi * var_iK1_rectification__rec1; // dimensionless
        const double var_IK1__i_K1 = 0.43033148291193518 * sqrt(mParameters[6]) * (-7.8571428571428568 + 0.028571428571428571 * var_Environment__T) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * mParameters[12] * var_iK1_rectification__xK1_inf; // nanoA_per_nanoF
        const double var_IK1__i_K1_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_IK1__i_K1; // uA_per_cm2
        const double var_reversal_potentials__E_Na = var_Environment__R * var_Environment__T * log(mParameters[7] / var_chaste_interface__Na__Na_i) / var_Environment__F; // millivolt
        const double var_INa__i_Na = pow(var_chaste_interface__iNa_m_gate__m, 3) * (-var_reversal_potentials__E_Na + var_chaste_interface__cell__V) * mParameters[9] * var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j; // nanoA_per_nanoF
        const double var_INa__i_Na_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_INa__i_Na; // uA_per_cm2
        const double var_reversal_potentials__P_kna = 0.029999999999999999; // dimensionless
        const double var_reversal_potentials__E_Ks = var_Environment__R * var_Environment__T * log((mParameters[7] * var_reversal_potentials__P_kna + mParameters[6]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__P_kna + var_chaste_interface__K__K_i)) / var_Environment__F; // millivolt
        const double var_IKs__i_Ks = pow(var_chaste_interface__iKs_Xs_gate__Xs, 2) * (-var_reversal_potentials__E_Ks + var_chaste_interface__cell__V) * mParameters[14]; // nanoA_per_nanoF
        const double var_IKs__i_Ks_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_IKs__i_Ks; // uA_per_cm2

        std::vector<double> dqs(16);
        dqs[0] = var_Irel__i_rel;
        dqs[1] = var_ICaL__i_CaL_converted;
        dqs[2] = var_iCaL_f2_gate__tau_f2;
        dqs[3] = var_iCaL_fCass_gate__tau_fCass;
        dqs[4] = var_iCaL_f_gate__tau_f;
        dqs[5] = var_cell__Cm_converted;
        dqs[6] = var_INa__i_Na_converted;
        dqs[7] = var_iNa_h_gate__tau_h;
        dqs[8] = var_iNa_j_gate__tau_j;
        dqs[9] = var_IK1__i_K1_converted;
        dqs[10] = var_IKr__i_Kr_converted;
        dqs[11] = var_IKs__i_Ks_converted;
        dqs[12] = var_INaCa__i_NaCa_converted;
        dqs[13] = var_cell__i_Stim_converted;
        dqs[14] = var_Ito__i_to_converted;
        dqs[15] = var_chaste_interface__Environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellfink_noble_giles_model_2008FromCellMLBackwardEuler>::Initialise(void)
{
    this->mSystemName = "fink_noble_giles_model_2008";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-86.45);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0001092);

    // rY[2]:
    this->mVariableNames.push_back("iKr_Markov__Cr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9786);

    // rY[3]:
    this->mVariableNames.push_back("iKr_Markov__Cr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0031);

    // rY[4]:
    this->mVariableNames.push_back("iKr_Markov__Cr3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0029);

    // rY[5]:
    this->mVariableNames.push_back("iKr_Markov__Or4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.014);

    // rY[6]:
    this->mVariableNames.push_back("iKr_Markov__Ir5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0014);

    // rY[7]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[8]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[9]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[10]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BOr4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[11]:
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BIr5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[12]:
    this->mVariableNames.push_back("iKs_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00303);

    // rY[13]:
    this->mVariableNames.push_back("ito_s_gate__s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[14]:
    this->mVariableNames.push_back("ito_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.11e-08);

    // rY[15]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00132);

    // rY[16]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7768);

    // rY[17]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7766);

    // rY[18]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.06e-06);

    // rY[19]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999);

    // rY[20]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f2_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9995);

    // rY[21]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[22]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(2.7656);

    // rY[23]:
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0001893);

    // rY[24]:
    this->mVariableNames.push_back("Irel__R_prime");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9864);

    // rY[25]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.940167);

    // rY[26]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(141.0167);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("millimolar_per_millisecond");

    // mParameters[3]:
    this->mParameterNames.push_back("cell__Cm");
    this->mParameterUnits.push_back("nanoF");

    // mParameters[4]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[7]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("litre_per_farad_millisecond");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("microS_per_nanoF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("millivolt");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("microS_per_nanoF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("microS_per_nanoF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("microS_per_nanoF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("nanoA_per_nanoF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("microS_per_nanoF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f2_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_fCa_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_capacitance");
    this->mDerivedQuantityUnits.push_back("uF");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellfink_noble_giles_model_2008FromCellMLBackwardEuler)

