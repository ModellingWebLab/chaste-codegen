//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: ohara_rudy_cipa_v1_2017
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: BackwardEuler)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "ohara_rudy_cipa_v1_2017.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"
#include "CardiacNewtonSolver.hpp"

class Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<64; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane__v)
    {
        const double _offset_0 = var_chaste_interface__membrane__v - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__v)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__v>mTableMaxs[0] || var_chaste_interface__membrane__v<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables(const Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables&);
    Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables& operator= (const Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables&);
    Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 64;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][64];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.29999999999999999 + 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.037435883507802616 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] < 2){
                    double left = f(var_chaste_interface__membrane__v - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__v + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[1] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] >= 2){
                    EXCEPTION("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val);
                }
                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return -1.0 + exp(0.037435883507802616 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[2] < 2){
                    double left = f(var_chaste_interface__membrane__v - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__v + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[2] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[2] >= 2){
                    EXCEPTION("Lookup table 2 at ["<<i<<"][2] has non-finite value: " << val);
                }
                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.074871767015605231 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[3] < 2){
                    double left = f(var_chaste_interface__membrane__v - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__v + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[3] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[3] >= 2){
                    EXCEPTION("Lookup table 3 at ["<<i<<"][3] has non-finite value: " << val);
                }
                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return -1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[4] < 2){
                    double left = f(var_chaste_interface__membrane__v - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__v + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[4] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[4] >= 2){
                    EXCEPTION("Lookup table 4 at ["<<i<<"][4] has non-finite value: " << val);
                }
                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(-1.4126984126984128 + 0.0066137566137566143 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.0062517925458030373 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.019556505544476088 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 9.0730000000000004 * exp(-0.001934187314569802 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 27.780000000000001 * exp(0.014412815150504008 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1.0 + exp(0.78953107960741553 - 0.054525627044711013 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(-0.0042259999999999997 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.17249999999999999 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(4.6310000000000002e-5 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.0085950000000000002 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(-0.00065749999999999999 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(-0.02877 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(7.7710000000000006e-9 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(3.613e-8 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(-0.16880000000000001 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(1.5349999999999998e-8 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(-0.04641 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.0085159999999999993 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.0046680000000000003 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(-0.02215 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(5.2976190476190466 + 0.27056277056277056 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(-0.93144208037825049 - 0.23640661938534277 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][26] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.59999999999999998 + 1 / (exp(1.26 + 0.089999999999999997 * var_chaste_interface__membrane__v) + exp(-0.30000000000000004 - 0.050000000000000003 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][27] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 7.0 + 1 / (0.040000000000000001 * exp(0.5714285714285714 - 0.14285714285714285 * var_chaste_interface__membrane__v) + 0.040000000000000001 * exp(-0.5714285714285714 + 0.14285714285714285 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][28] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 100.0 + 1 / (0.00012 * exp(0.14285714285714285 * var_chaste_interface__membrane__v) + 0.00012 * exp(-0.33333333333333331 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][29] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 7.0 + 1 / (0.0044999999999999997 * exp(2.0 + 0.10000000000000001 * var_chaste_interface__membrane__v) + 0.0044999999999999997 * exp(-2.0 - 0.10000000000000001 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][30] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1000.0 + 1 / (3.4999999999999997e-5 * exp(0.83333333333333337 + 0.16666666666666666 * var_chaste_interface__membrane__v) + 3.4999999999999997e-5 * exp(-1.25 - 0.25 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][31] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.0081833060556464818 * exp(3.4155488244627148 + 0.014423770373575654 * var_chaste_interface__membrane__v) + 0.0081833060556464818 * exp(-6.2475442043222005 - 0.049115913555992145 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][32] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(-1.2987012987012987 - 0.11195700850873264 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][33] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 817.29999999999995 + 1 / (0.001292 * exp(-0.91304347826086951 - 0.0043478260869565218 * var_chaste_interface__membrane__v) + 0.00023259999999999999 * exp(2.7123595505617977 + 0.056179775280898875 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][34] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.019300000000000001 * exp(-2.1464516129032258 - 0.032258064516129031 * var_chaste_interface__membrane__v) + 0.01 * exp(-2.5 + 0.050000000000000003 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][35] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (8.5519999999999996 * exp(-13.000839630562552 - 0.16792611251049538 * var_chaste_interface__membrane__v) + 6.7649999999999997 * exp(0.33477135461604829 + 0.02876042565429968 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][36] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(-4.0087123898287915 - 0.10130685847431871 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][37] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.0050000000000000001 / (1.0 + exp(11.700053418803417 + 0.13354700854700854 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][38] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.0016666666666666668 / (1.0 + exp(12.528044871794872 + 0.13354700854700854 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][39] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(-8.1401975683890573 - 0.18996960486322187 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][40] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1.0 - 0.94999999999999996 / (1.0 + exp(14.0 + 0.20000000000000001 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[41] < 2){
                    double left = f(var_chaste_interface__membrane__v - mTableSteps[0]);
                    double right = f(var_chaste_interface__membrane__v + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[41] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[41] >= 2){
                    EXCEPTION("Lookup table 41 at ["<<i<<"][41] has non-finite value: " << val);
                }
                _lookup_table_0[i][41] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1.3540000000000001 + 0.0001 / (exp(56.77808727948004 - 4.6425255338904359 * var_chaste_interface__membrane__v) + exp(-10.534927627438641 + 0.062932662051604776 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][42] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1.0 - 0.5 / (1.0 + exp(3.5 + 0.050000000000000003 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][43] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(7.6939240063036234 + 0.17510068289266328 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][44] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1.0515000000000001 / (3.5 / (1.0 + exp(3.403513787634354 + 0.034035137876343539 * var_chaste_interface__membrane__v)) + 0.82719827942757873 / (1.0 + exp(0.62658348478969694 - 0.034035137876343539 * var_chaste_interface__membrane__v)));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][45] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(0.96761133603238858 - 0.067476383265856948 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][46] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1 / (1.0 + exp(1.6423751686909582 - 0.067476383265856948 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][47] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 4.5620000000000003 + 1 / (0.39329999999999998 * exp(-1.0 - 0.01 * var_chaste_interface__membrane__v) + 0.08004 * exp(3.0138637733574445 + 0.060277275467148887 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][48] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 23.620000000000001 + 1 / (1.7800000000000001e-8 * exp(14.123035029087756 + 0.12377769525931426 * var_chaste_interface__membrane__v) + 0.0014159999999999999 * exp(-1.6345469940728197 - 0.016934801016088061 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][49] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.0264 * exp(2.6818084178158563) * exp(4.6310000000000002e-5 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][50] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 4.9860000000000002e-6 * exp(2.4517433881989175) * exp(-0.0042259999999999997 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][51] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.012409999999999999 * exp(2.9189610691546015) * exp(0.17249999999999999 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][52] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.005509 * exp(2.4477197176814647) * exp(7.7710000000000006e-9 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][53] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.31809999999999999 * exp(2.6174203303045127) * exp(3.613e-8 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][54] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.0014159999999999999 * exp(0.64217715821910271) * exp(-0.02877 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][55] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.00078680000000000004 * exp(2.7162091828629111) * exp(1.5349999999999998e-8 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][56] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 5.4550000000000003e-6 * exp(2.4217402245028676) * exp(-0.16880000000000001 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][57] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.001214 * exp(2.7230751049583355) * exp(0.0085159999999999993 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][58] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 1.8539999999999999e-5 * exp(2.2555765142844972) * exp(-0.04641 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][59] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(1.4967756740703964) * exp(0.0046680000000000003 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][60] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v));
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][61] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(0.014412815150504008 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][62] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__membrane__v) {
                    return exp(-0.001934187314569802 * var_chaste_interface__membrane__v);
                };
                const double var_chaste_interface__membrane__v = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__membrane__v);

                _lookup_table_0[i][63] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[64];

    // Lookup tables
    double (*_lookup_table_0)[64];
    int _lookup_table_0_num_misshit_piecewise[64] = {0};

};

std::shared_ptr<Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables> Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables::mpInstance;


    boost::shared_ptr<RegularStimulus> Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__i_Stim_Amplitude_converted = -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__i_Stim_Period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__i_Stim_PulseDuration = 0.5; // millisecond
        const double var_chaste_interface__membrane__i_Stim_Start = 10.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__i_Stim_Amplitude_converted),
                var_chaste_interface__membrane__i_Stim_PulseDuration,
                var_chaste_interface__membrane__i_Stim_Period,
                var_chaste_interface__membrane__i_Stim_Start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler::Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractBackwardEulerCardiacCell<21>(
                48,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 0; // (var_IKr__D) [dimensionless]
        this->mParameters[1] = 0; // (var_IKr__Kmax) [dimensionless]
        this->mParameters[2] = 0; // (var_IKr__Kt) [per_millisecond]
        this->mParameters[3] = 0; // (var_IKr__Ku) [per_millisecond]
        this->mParameters[4] = 1.0; // (var_IKr__Vhalf) [millivolt]
        this->mParameters[5] = 1.0; // (var_IKr__halfmax) [dimensionless]
        this->mParameters[6] = 1.0; // (var_IKr__n) [dimensionless]
        this->mParameters[7] = 1.0; // (var_ryr__Jrel_scaling_factor) [dimensionless]
        this->mParameters[8] = 1.0; // (var_SERCA__Jup_b) [dimensionless]
        this->mParameters[9] = 1.8; // (var_extracellular__cao) [millimolar]
        this->mParameters[10] = 5.4000000000000004; // (var_extracellular__ko) [millimolar]
        this->mParameters[11] = 140.0; // (var_extracellular__nao) [millimolar]
        this->mParameters[12] = 0.00010069999999999999; // (var_ICaL__PCa_b) [dimensionless]
        this->mParameters[13] = 2.4999999999999999e-8; // (var_ICab__PCab) [milliS_per_microF]
        this->mParameters[14] = 0.0030000000000000001; // (var_IKb__GKb_b) [milliS_per_microF]
        this->mParameters[15] = 3.75e-10; // (var_INab__PNab) [milliS_per_microF]
        this->mParameters[16] = 0.00050000000000000001; // (var_IpCa__GpCa) [milliS_per_microF]
        this->mParameters[17] = 75.0; // (var_INa__GNa) [milliS_per_microF]
        this->mParameters[18] = 0.32397839999999978; // (var_IK1__GK1_b) [milliS_per_microF]
        this->mParameters[19] = 0.019957499999999975; // (var_INaL__GNaL_b) [milliS_per_microF]
        this->mParameters[20] = 0.046585454545454562; // (var_IKr__GKr_b) [milliS_per_microF]
        this->mParameters[21] = 0.0063580000000000008; // (var_IKs__GKs_b) [milliS_per_microF]
        this->mParameters[22] = 0.00080000000000000004; // (var_INaCa_i__Gncx_b) [milliS_per_microF]
        this->mParameters[23] = 30.0; // (var_INaK__Pnak_b) [milliS_per_microF]
        this->mParameters[24] = 0.02; // (var_Ito__Gto_b) [milliS_per_microF]
    }

    Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler::~Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler()
    {
    }

    AbstractLookupTableCollection* Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler::GetLookupTableCollection()
    {
        return Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables::Instance();
    }
    
    double Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -88.00190465
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 8.6e-05
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0125840447
        double var_chaste_interface__intracellular_ions__nai = rY[3];
        // Units: millimolar; Initial value: 7.268004498
        double var_chaste_interface__intracellular_ions__nass = rY[4];
        // Units: millimolar; Initial value: 7.268089977
        double var_chaste_interface__intracellular_ions__ki = rY[5];
        // Units: millimolar; Initial value: 144.6555918
        double var_chaste_interface__intracellular_ions__kss = rY[6];
        // Units: millimolar; Initial value: 144.6555651
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 8.49e-05
        double var_chaste_interface__INa__m = rY[10];
        // Units: dimensionless; Initial value: 0.007344121102
        double var_chaste_interface__INa__hf = rY[11];
        // Units: dimensionless; Initial value: 0.6981071913
        double var_chaste_interface__INa__hs = rY[12];
        // Units: dimensionless; Initial value: 0.6980895801
        double var_chaste_interface__INa__j = rY[13];
        // Units: dimensionless; Initial value: 0.6979908432
        double var_chaste_interface__INa__hsp = rY[14];
        // Units: dimensionless; Initial value: 0.4549485525
        double var_chaste_interface__INa__jp = rY[15];
        // Units: dimensionless; Initial value: 0.6979245865
        double var_chaste_interface__INaL__mL = rY[16];
        // Units: dimensionless; Initial value: 0.0001882617273
        double var_chaste_interface__INaL__hL = rY[17];
        // Units: dimensionless; Initial value: 0.5008548855
        double var_chaste_interface__INaL__hLp = rY[18];
        // Units: dimensionless; Initial value: 0.2693065357
        double var_chaste_interface__Ito__a = rY[19];
        // Units: dimensionless; Initial value: 0.001001097687
        double var_chaste_interface__Ito__iF = rY[20];
        // Units: dimensionless; Initial value: 0.9995541745
        double var_chaste_interface__Ito__iS = rY[21];
        // Units: dimensionless; Initial value: 0.5865061736
        double var_chaste_interface__Ito__ap = rY[22];
        // Units: dimensionless; Initial value: 0.0005100862934
        double var_chaste_interface__Ito__iFp = rY[23];
        // Units: dimensionless; Initial value: 0.9995541823
        double var_chaste_interface__Ito__iSp = rY[24];
        // Units: dimensionless; Initial value: 0.6393399482
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 2.34e-09
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 0.9102412777
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 0.9998046777
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 0.9999738312
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__nca = rY[33];
        // Units: dimensionless; Initial value: 0.002749414044
        double var_chaste_interface__IKr__O = rY[38];
        // Units: dimensionless; Initial value: 0.00015551
        double var_chaste_interface__IKs__xs1 = rY[43];
        // Units: dimensionless; Initial value: 0.2707758025
        double var_chaste_interface__IKs__xs2 = rY[44];
        // Units: dimensionless; Initial value: 0.0001928503426
        double var_chaste_interface__IK1__xk1 = rY[45];
        // Units: dimensionless; Initial value: 0.9967597594
        
        // Lookup table indexing
        const bool _oob_0 = Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        const double var_ICaL__f = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ff; // dimensionless
        const double var_ICaL__fp = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ffp; // dimensionless
        const double var_environment__celltype = 0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[12]) : ((var_environment__celltype == 2.0) ? (2.5 * mParameters[12]) : (mParameters[12]))); // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * mParameters[22]) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * mParameters[22]) : (mParameters[22]))); // milliS_per_microF
        const double var_INaCa_i__h10_i = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[11]) * mParameters[11]; // dimensionless
        const double var_INaCa_i__h10_ss = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[11]) * mParameters[11]; // dimensionless
        const double var_INaCa_i__k1_i = 1500000.0 * mParameters[9] / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k1_ss = 1500000.0 * mParameters[9] / var_INaCa_i__h10_ss; // dimensionless
        const double var_IpCa__IpCa_converted = HeartConfig::Instance()->GetCapacitance() * mParameters[16] * var_chaste_interface__intracellular_ions__cai / (0.00050000000000000001 + var_chaste_interface__intracellular_ions__cai); // uA_per_cm2
        const double var_CaMK__CaMKa = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass) + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__h4_i = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nai) * var_chaste_interface__intracellular_ions__nai; // dimensionless
        const double var_INaCa_i__k6_i = 1500000.0 * var_chaste_interface__intracellular_ions__cai / var_INaCa_i__h4_i; // dimensionless
        const double var_INaK__b3 = 5.7707741857267899e-10 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ki + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nai); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__k6_ss = 1500000.0 * var_chaste_interface__intracellular_ions__cass / var_INaCa_i__h4_ss; // dimensionless
        const double var_ICaL__Afcaf = _lt_0_row[0]; // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__ICaK_converted = (0.00035740000000000001 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCa * var_chaste_interface__ICaL__d + 0.00035740000000000001 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_ICaL__ICaL_converted = ((1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * _lt_0_row[3]) / (_lt_0_row[4]))) * var_ICaL__PCa * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * _lt_0_row[3]) / (_lt_0_row[4]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_ICaL__ICaNa_converted = (0.00125 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCa * var_chaste_interface__ICaL__d + 0.00125 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_ICab__ICab_converted = HeartConfig::Instance()->GetCapacitance() * ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cai * exp(9.9999999999999995e-8)) * mParameters[13] / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * mParameters[13] / (-1.0 + exp(-9.9999999999999995e-8))) + 2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * mParameters[13] / (-1.0 + exp(-9.9999999999999995e-8))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cai * _lt_0_row[3]) * mParameters[13] / (_lt_0_row[4]))); // uA_per_cm2
        const double var_INab__INab_converted = HeartConfig::Instance()->GetCapacitance() * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-mParameters[11] + var_chaste_interface__intracellular_ions__nai * exp(9.9999999999999995e-8)) * mParameters[15] / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-mParameters[11] + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * mParameters[15] / (-1.0 + exp(-9.9999999999999995e-8))) + 2.671233870549826e-13 * (-mParameters[11] + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * mParameters[15] / (-1.0 + exp(-9.9999999999999995e-8))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-mParameters[11] + var_chaste_interface__intracellular_ions__nai * _lt_0_row[1]) * mParameters[15] / (_lt_0_row[2]))); // uA_per_cm2
        const double var_Ito__AiF = _lt_0_row[5]; // dimensionless
        const double var_Ito__AiS = 1.0 - var_Ito__AiF; // dimensionless
        const double var_INaCa_i__hca = _lt_0_row[6]; // dimensionless
        const double var_INaCa_i__hna = _lt_0_row[7]; // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__h2_i = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h2_ss = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[11]; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[11]; // dimensionless
        const double var_INaCa_i__h8_i = 0.011348161597821153 * mParameters[11] / (var_INaCa_i__h7_i * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__h8_ss = 0.011348161597821153 * mParameters[11] / (var_INaCa_i__h7_ss * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__k3pp_i = 5000.0 * var_INaCa_i__h8_i; // dimensionless
        const double var_INaCa_i__k3_i = 60000.0 / var_INaCa_i__h7_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = 5000.0 * var_INaCa_i__h8_ss; // dimensionless
        const double var_INaCa_i__k3_ss = 60000.0 / var_INaCa_i__h7_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4pp_i = 5000.0 * var_INaCa_i__h2_i; // dimensionless
        const double var_INaCa_i__k4_i = 60000.0 / (var_INaCa_i__h1_i * var_INaCa_i__hca) + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = 5000.0 * var_INaCa_i__h2_ss; // dimensionless
        const double var_INaCa_i__k4_ss = 60000.0 / (var_INaCa_i__h1_ss * var_INaCa_i__hca) + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = 800.0 * pow(var_chaste_interface__intracellular_ions__nai, 2) * var_INaCa_i__h2_i / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k7_ss = 800.0 * pow(var_chaste_interface__intracellular_ions__nass, 2) * var_INaCa_i__h2_ss / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k8_i = 800.0 * pow(mParameters[11], 2) * var_INaCa_i__h8_i / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k8_ss = 800.0 * pow(mParameters[11], 2) * var_INaCa_i__h8_ss / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__x1_i = 5000.0 * (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k7_i + 5000.0 * (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = 5000.0 * (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k7_ss + 5000.0 * (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i + (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i; // dimensionless
        const double var_INaCa_i__x2_ss = (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss; // dimensionless
        const double var_INaCa_i__x3_i = (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = 5000.0 * (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k8_i + 5000.0 * (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__x4_ss = 5000.0 * (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k8_ss + 5000.0 * (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaK__Knai = _lt_0_row[8]; // millimolar
        const double var_INaK__Knao = _lt_0_row[9]; // millimolar
        const double var_INaK__a1 = 949.5 * pow(var_chaste_interface__intracellular_ions__nai, 3) / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ki), 2)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = 14800.411886344058 * pow(mParameters[10], 2) / (-1.0 + pow((1.0 + mParameters[11] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[10]), 2)); // dimensionless
        const double var_INaK__b2 = 39.399999999999999 * pow(mParameters[11], 3) / ((-1.0 + pow((1.0 + mParameters[11] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[10]), 2)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = 160.0 * pow(var_chaste_interface__intracellular_ions__ki, 2) / (-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ki), 2)); // dimensionless
        const double var_INaK__x1 = 439120.79239156016 * var_INaK__a1 + 687.20000000000005 * var_INaK__a1 * var_INaK__b3 + 687.20000000000005 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = 687.20000000000005 * var_INaK__a1 * var_INaK__a3 + 696.32000000000005 * var_INaK__a3 * var_INaK__b4 + 9.120000000000001 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = 444948.47229058668 * var_INaK__a3 + 5827.6798990265261 * var_INaK__b2 + 9.120000000000001 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = 638.99998892834708 * var_INaK__a1 * var_INaK__a3 + 638.99998892834708 * var_INaK__a1 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaCa_i__INaCa_i_converted = 0.80000000000000004 * (10000.0 * var_INaCa_i__E2_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i - 2.0 * var_INaCa_i__E1_i * var_INaCa_i__k1_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i + var_INaCa_i__k4pp_i * var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i) + 3.0 * var_INaCa_i__k7_i * var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i)) * HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__Gncx / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cai, 2)); // uA_per_cm2
        const double var_INaCa_i__INaCa_ss_converted = 0.20000000000000001 * (10000.0 * var_INaCa_i__E2_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss - 2.0 * var_INaCa_i__E1_ss * var_INaCa_i__k1_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss + var_INaCa_i__k4pp_ss * var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss) + 3.0 * var_INaCa_i__k7_ss * var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss)) * HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__Gncx / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cass, 2)); // uA_per_cm2
        const double var_INaK__INaK_converted = (18.240000000000002 * var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) + 3.0 * var_INaK__a3 * var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 2.0 * var_INaK__a1 * var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 3.0 * var_INaK__b3 * var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4)) * HeartConfig::Instance()->GetCapacitance() * ((var_environment__celltype == 1.0) ? (0.90000000000000002 * mParameters[23]) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * mParameters[23]) : (mParameters[23]))); // uA_per_cm2
        const double var_reversal_potentials__EK = 26.712338705498265 * log(mParameters[10] / var_chaste_interface__intracellular_ions__ki); // millivolt
        const double var_IK1__IK1_converted = sqrt(mParameters[10]) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * HeartConfig::Instance()->GetCapacitance() * ((var_environment__celltype == 1.0) ? (1.2 * mParameters[18]) : ((var_environment__celltype == 2.0) ? (1.3 * mParameters[18]) : (mParameters[18]))) * var_chaste_interface__IK1__xk1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * mParameters[10])); // uA_per_cm2
        const double var_IKb__IKb_converted = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * HeartConfig::Instance()->GetCapacitance() * ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[14]) : (mParameters[14])) / (_lt_0_row[10]); // uA_per_cm2
        const double var_IKr__IKr_converted = 0.43033148291193518 * sqrt(mParameters[10]) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * HeartConfig::Instance()->GetCapacitance() * ((var_environment__celltype == 1.0) ? (1.3 * mParameters[20]) : ((var_environment__celltype == 2.0) ? (0.80000000000000004 * mParameters[20]) : (mParameters[20]))) * var_chaste_interface__IKr__O; // uA_per_cm2
        const double var_Ito__Ito_converted = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (var_Ito__AiF * var_chaste_interface__Ito__iF + var_Ito__AiS * var_chaste_interface__Ito__iS) * var_chaste_interface__Ito__a + (var_Ito__AiF * var_chaste_interface__Ito__iFp + var_Ito__AiS * var_chaste_interface__Ito__iSp) * var_chaste_interface__Ito__ap / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * HeartConfig::Instance()->GetCapacitance() * (((var_environment__celltype == 1.0) || (var_environment__celltype == 2.0)) ? (4.0 * mParameters[24]) : (mParameters[24])); // uA_per_cm2
        const double var_reversal_potentials__ENa = 26.712338705498265 * log(mParameters[11] / var_chaste_interface__intracellular_ions__nai); // millivolt
        const double var_INa__INa_converted = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (0.010000000000000009 * var_chaste_interface__INa__hs + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__j + (0.010000000000000009 * var_chaste_interface__INa__hsp + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__jp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * HeartConfig::Instance()->GetCapacitance() * mParameters[17]; // uA_per_cm2
        const double var_INaL__INaL_converted = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * var_chaste_interface__INaL__hL + var_chaste_interface__INaL__hLp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * HeartConfig::Instance()->GetCapacitance() * ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[19]) : (mParameters[19])) * var_chaste_interface__INaL__mL; // uA_per_cm2
        const double var_IKs__IKs_converted = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__cai), 1.3999999999999999))) * (-26.712338705498265 * log((0.018329999999999999 * mParameters[11] + mParameters[10]) / (0.018329999999999999 * var_chaste_interface__intracellular_ions__nai + var_chaste_interface__intracellular_ions__ki)) + var_chaste_interface__membrane__v) * HeartConfig::Instance()->GetCapacitance() * ((var_environment__celltype == 1.0) ? (1.3999999999999999 * mParameters[21]) : (mParameters[21])) * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_cm2
        const double var_chaste_interface__i_ionic = var_ICaL__ICaK_converted + var_ICaL__ICaL_converted + var_ICaL__ICaNa_converted + var_ICab__ICab_converted + var_IK1__IK1_converted + var_IKb__IKb_converted + var_IKr__IKr_converted + var_IKs__IKs_converted + var_INa__INa_converted + var_INaCa_i__INaCa_i_converted + var_INaCa_i__INaCa_ss_converted + var_INaK__INaK_converted + var_INaL__INaL_converted + var_INab__INab_converted + var_IpCa__IpCa_converted + var_Ito__Ito_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler::ComputeResidual(double var_chaste_interface__environment__time, const double rCurrentGuess[21], double rResidual[21])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -88.00190465
        double var_chaste_interface__INa__m = rY[10];
        // Units: dimensionless; Initial value: 0.007344121102
        double var_chaste_interface__INa__hf = rY[11];
        // Units: dimensionless; Initial value: 0.6981071913
        double var_chaste_interface__INa__hs = rY[12];
        // Units: dimensionless; Initial value: 0.6980895801
        double var_chaste_interface__INa__j = rY[13];
        // Units: dimensionless; Initial value: 0.6979908432
        double var_chaste_interface__INa__hsp = rY[14];
        // Units: dimensionless; Initial value: 0.4549485525
        double var_chaste_interface__INa__jp = rY[15];
        // Units: dimensionless; Initial value: 0.6979245865
        double var_chaste_interface__INaL__mL = rY[16];
        // Units: dimensionless; Initial value: 0.0001882617273
        double var_chaste_interface__INaL__hL = rY[17];
        // Units: dimensionless; Initial value: 0.5008548855
        double var_chaste_interface__INaL__hLp = rY[18];
        // Units: dimensionless; Initial value: 0.2693065357
        double var_chaste_interface__Ito__a = rY[19];
        // Units: dimensionless; Initial value: 0.001001097687
        double var_chaste_interface__Ito__iF = rY[20];
        // Units: dimensionless; Initial value: 0.9995541745
        double var_chaste_interface__Ito__iS = rY[21];
        // Units: dimensionless; Initial value: 0.5865061736
        double var_chaste_interface__Ito__ap = rY[22];
        // Units: dimensionless; Initial value: 0.0005100862934
        double var_chaste_interface__Ito__iFp = rY[23];
        // Units: dimensionless; Initial value: 0.9995541823
        double var_chaste_interface__Ito__iSp = rY[24];
        // Units: dimensionless; Initial value: 0.6393399482
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 2.34e-09
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 0.9102412777
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 0.9998046777
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 0.9999738312
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__IKs__xs1 = rY[43];
        // Units: dimensionless; Initial value: 0.2707758025
        double var_chaste_interface__IKs__xs2 = rY[44];
        // Units: dimensionless; Initial value: 0.0001928503426
        double var_chaste_interface__IK1__xk1 = rY[45];
        // Units: dimensionless; Initial value: 0.9967597594
        
        //output_nonlinear_state_assignments
        double var_chaste_interface__CaMK__CaMKt = rCurrentGuess[0];
        double var_chaste_interface__ICaL__nca = rCurrentGuess[1];
        double var_chaste_interface__IKr__C1 = rCurrentGuess[2];
        double var_chaste_interface__IKr__C2 = rCurrentGuess[3];
        double var_chaste_interface__IKr__Cbound = rCurrentGuess[4];
        double var_chaste_interface__IKr__IC1 = rCurrentGuess[5];
        double var_chaste_interface__IKr__IC2 = rCurrentGuess[6];
        double var_chaste_interface__IKr__IO = rCurrentGuess[7];
        double var_chaste_interface__IKr__IObound = rCurrentGuess[8];
        double var_chaste_interface__IKr__O = rCurrentGuess[9];
        double var_chaste_interface__IKr__Obound = rCurrentGuess[10];
        double var_chaste_interface__intracellular_ions__cai = rCurrentGuess[11];
        double var_chaste_interface__intracellular_ions__cajsr = rCurrentGuess[12];
        double var_chaste_interface__intracellular_ions__cansr = rCurrentGuess[13];
        double var_chaste_interface__intracellular_ions__cass = rCurrentGuess[14];
        double var_chaste_interface__intracellular_ions__ki = rCurrentGuess[15];
        double var_chaste_interface__intracellular_ions__kss = rCurrentGuess[16];
        double var_chaste_interface__intracellular_ions__nai = rCurrentGuess[17];
        double var_chaste_interface__intracellular_ions__nass = rCurrentGuess[18];
        double var_chaste_interface__ryr__Jrelnp = rCurrentGuess[19];
        double var_chaste_interface__ryr__Jrelp = rCurrentGuess[20];
        
        // Lookup table indexing
        const bool _oob_0 = Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        //output_equations
        const double var_ICaL__f = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ff; // dimensionless
        const double var_ICaL__fp = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ffp; // dimensionless
        const double var_ICaL__km2n = var_chaste_interface__ICaL__jca; // per_millisecond
        const double var_environment__celltype = 0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[12]) : ((var_environment__celltype == 2.0) ? (2.5 * mParameters[12]) : (mParameters[12]))); // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * mParameters[22]) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * mParameters[22]) : (mParameters[22]))); // milliS_per_microF
        const double var_SERCA__upScale = ((var_environment__celltype == 1.0) ? (1.3) : (1.0)); // dimensionless
        const double var_INaCa_i__h10_i = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[11]) * mParameters[11]; // dimensionless
        const double var_INaCa_i__h10_ss = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[11]) * mParameters[11]; // dimensionless
        const double var_INaCa_i__k1_i = 1500000.0 * mParameters[9] / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k1_ss = 1500000.0 * mParameters[9] / var_INaCa_i__h10_ss; // dimensionless
        const double var_IpCa__IpCa = mParameters[16] * var_chaste_interface__intracellular_ions__cai / (0.00050000000000000001 + var_chaste_interface__intracellular_ions__cai); // microA_per_microF
        const double var_CaMK__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double d_dt_chaste_interface_var_CaMK__CaMKt = -0.00068000000000000005 * var_chaste_interface__CaMK__CaMKt + 0.050000000000000003 * (var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKb; // millimolar / millisecond
        const double d_dt_chaste_interface_var_ICaL__nca = 1000.0 / (pow((1.0 + 0.002 / var_chaste_interface__intracellular_ions__cass), 4) + 1000.0 / var_ICaL__km2n) - var_ICaL__km2n * var_chaste_interface__ICaL__nca; // 1 / millisecond
        const double var_ICaL__fICaLp = 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__Jup = (-0.00026249999999999998 * var_chaste_interface__intracellular_ions__cansr + 0.0043750000000000004 * (1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * var_SERCA__upScale * var_chaste_interface__intracellular_ions__cai / (0.00092000000000000003 + var_chaste_interface__intracellular_ions__cai) + 0.01203125 * var_SERCA__upScale * var_chaste_interface__intracellular_ions__cai / ((1.0 + 0.14999999999999999 / var_CaMK__CaMKa) * (0.00075000000000000002 + var_chaste_interface__intracellular_ions__cai))) * mParameters[8]; // millimolar_per_millisecond
        const double var_diff__Jdiff = 5.0 * var_chaste_interface__intracellular_ions__cass - 5.0 * var_chaste_interface__intracellular_ions__cai; // millimolar_per_millisecond
        const double var_diff__JdiffK = 0.5 * var_chaste_interface__intracellular_ions__kss - 0.5 * var_chaste_interface__intracellular_ions__ki; // millimolar_per_millisecond
        const double var_INaCa_i__h4_i = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nai) * var_chaste_interface__intracellular_ions__nai; // dimensionless
        const double var_INaCa_i__k6_i = 1500000.0 * var_chaste_interface__intracellular_ions__cai / var_INaCa_i__h4_i; // dimensionless
        const double var_INaK__b3 = 5.7707741857267899e-10 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ki + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nai); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__k6_ss = 1500000.0 * var_chaste_interface__intracellular_ions__cass / var_INaCa_i__h4_ss; // dimensionless
        const double var_diff__JdiffNa = 0.5 * var_chaste_interface__intracellular_ions__nass - 0.5 * var_chaste_interface__intracellular_ions__nai; // millimolar_per_millisecond
        const double var_membrane__Istim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double d_dt_chaste_interface_var_IKr__C1 = 4.9860000000000002e-6 * var_chaste_interface__IKr__C2 * exp(2.4517433881989175) * _lt_0_row[11] + 0.012409999999999999 * var_chaste_interface__IKr__IC1 * exp(2.9189610691546015) * _lt_0_row[12] - 0.0264 * var_chaste_interface__IKr__C1 * exp(2.6818084178158563) * _lt_0_row[13] - 0.44919999999999999 * var_chaste_interface__IKr__C1 * exp(2.7360444511379707) * _lt_0_row[14]; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__C2 = 0.3226 * var_chaste_interface__IKr__IC2 * exp(2.7360444511379707) * _lt_0_row[15] + 0.0264 * var_chaste_interface__IKr__C1 * exp(2.6818084178158563) * _lt_0_row[13] + 0.0014159999999999999 * var_chaste_interface__IKr__O * exp(0.64217715821910271) * _lt_0_row[16] - 0.005509 * var_chaste_interface__IKr__C2 * exp(2.4477197176814647) * _lt_0_row[17] - 0.31809999999999999 * var_chaste_interface__IKr__C2 * exp(2.6174203303045127) * _lt_0_row[18] - 4.9860000000000002e-6 * var_chaste_interface__IKr__C2 * exp(2.4517433881989175) * _lt_0_row[11]; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__Cbound = var_chaste_interface__IKr__IObound * mParameters[2] + mParameters[2] * var_chaste_interface__IKr__Obound - 2 * var_chaste_interface__IKr__Cbound * mParameters[2] / (1.0 + exp(0.14729709824716453 * mParameters[4] - 0.14729709824716453 * var_chaste_interface__membrane__v)); // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__IC1 = 5.4550000000000003e-6 * var_chaste_interface__IKr__IC2 * exp(2.4217402245028676) * _lt_0_row[19] + 0.44919999999999999 * var_chaste_interface__IKr__C1 * exp(2.7360444511379707) * _lt_0_row[14] - 0.00078680000000000004 * var_chaste_interface__IKr__IC1 * exp(2.7162091828629111) * _lt_0_row[20] - 0.012409999999999999 * var_chaste_interface__IKr__IC1 * exp(2.9189610691546015) * _lt_0_row[12]; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__IC2 = 0.00078680000000000004 * var_chaste_interface__IKr__IC1 * exp(2.7162091828629111) * _lt_0_row[20] + 1.8539999999999999e-5 * var_chaste_interface__IKr__IO * exp(2.2555765142844972) * _lt_0_row[21] + 0.31809999999999999 * var_chaste_interface__IKr__C2 * exp(2.6174203303045127) * _lt_0_row[18] - 0.3226 * var_chaste_interface__IKr__IC2 * exp(2.7360444511379707) * _lt_0_row[15] - 0.001214 * var_chaste_interface__IKr__IC2 * exp(2.7230751049583355) * _lt_0_row[22] - 5.4550000000000003e-6 * var_chaste_interface__IKr__IC2 * exp(2.4217402245028676) * _lt_0_row[19]; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__IO = 0.14899999999999999 * var_chaste_interface__IKr__O * exp(1.4967756740703964) * _lt_0_row[23] + 0.001214 * var_chaste_interface__IKr__IC2 * exp(2.7230751049583355) * _lt_0_row[22] - 0.0089779999999999999 * var_chaste_interface__IKr__IO * exp(2.9534155818343937) * _lt_0_row[24] - 1.8539999999999999e-5 * var_chaste_interface__IKr__IO * exp(2.2555765142844972) * _lt_0_row[21] - pow(mParameters[0], mParameters[6]) * var_chaste_interface__IKr__IO * mParameters[1] * mParameters[3] / (pow(mParameters[0], mParameters[6]) + mParameters[5]) + 16.59612385832034 * var_chaste_interface__IKr__IObound * mParameters[3] * exp(1.4967756740703964) * _lt_0_row[23] / (exp(2.9534155818343937) * _lt_0_row[24]); // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__IObound = -var_chaste_interface__IKr__IObound * mParameters[2] + var_chaste_interface__IKr__Cbound * mParameters[2] / (1.0 + exp(0.14729709824716453 * mParameters[4] - 0.14729709824716453 * var_chaste_interface__membrane__v)) + pow(mParameters[0], mParameters[6]) * var_chaste_interface__IKr__IO * mParameters[1] * mParameters[3] / (pow(mParameters[0], mParameters[6]) + mParameters[5]) - 16.59612385832034 * var_chaste_interface__IKr__IObound * mParameters[3] * exp(1.4967756740703964) * _lt_0_row[23] / (exp(2.9534155818343937) * _lt_0_row[24]); // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__O = mParameters[3] * var_chaste_interface__IKr__Obound + 0.005509 * var_chaste_interface__IKr__C2 * exp(2.4477197176814647) * _lt_0_row[17] + 0.0089779999999999999 * var_chaste_interface__IKr__IO * exp(2.9534155818343937) * _lt_0_row[24] - 0.14899999999999999 * var_chaste_interface__IKr__O * exp(1.4967756740703964) * _lt_0_row[23] - 0.0014159999999999999 * var_chaste_interface__IKr__O * exp(0.64217715821910271) * _lt_0_row[16] - pow(mParameters[0], mParameters[6]) * mParameters[1] * mParameters[3] * var_chaste_interface__IKr__O / (pow(mParameters[0], mParameters[6]) + mParameters[5]); // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__Obound = -mParameters[2] * var_chaste_interface__IKr__Obound - mParameters[3] * var_chaste_interface__IKr__Obound + var_chaste_interface__IKr__Cbound * mParameters[2] / (1.0 + exp(0.14729709824716453 * mParameters[4] - 0.14729709824716453 * var_chaste_interface__membrane__v)) + pow(mParameters[0], mParameters[6]) * mParameters[1] * mParameters[3] * var_chaste_interface__IKr__O / (pow(mParameters[0], mParameters[6]) + mParameters[5]); // 1 / millisecond
        const double var_ICaL__Afcaf = _lt_0_row[0]; // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__ICaK = 0.00035740000000000001 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCa * var_chaste_interface__ICaL__d + 0.00035740000000000001 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * _lt_0_row[3]) / (_lt_0_row[4]))) * var_ICaL__PCa * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * _lt_0_row[3]) / (_lt_0_row[4]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaNa = 0.00125 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCa * var_chaste_interface__ICaL__d + 0.00125 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cai * exp(9.9999999999999995e-8)) * mParameters[13] / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * mParameters[13] / (-1.0 + exp(-9.9999999999999995e-8))) + 2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * mParameters[13] / (-1.0 + exp(-9.9999999999999995e-8))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cai * _lt_0_row[3]) * mParameters[13] / (_lt_0_row[4]))); // microA_per_microF
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-mParameters[11] + var_chaste_interface__intracellular_ions__nai * exp(9.9999999999999995e-8)) * mParameters[15] / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-mParameters[11] + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * mParameters[15] / (-1.0 + exp(-9.9999999999999995e-8))) + 2.671233870549826e-13 * (-mParameters[11] + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * mParameters[15] / (-1.0 + exp(-9.9999999999999995e-8))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-mParameters[11] + var_chaste_interface__intracellular_ions__nai * _lt_0_row[1]) * mParameters[15] / (_lt_0_row[2]))); // microA_per_microF
        const double var_Ito__AiF = _lt_0_row[5]; // dimensionless
        const double var_Ito__AiS = 1.0 - var_Ito__AiF; // dimensionless
        const double d_dt_chaste_interface_var_intracellular_ions__kss = -var_diff__JdiffK - 0.0020917052580005369 * var_ICaL__ICaK; // millimolar / millisecond
        const double var_INaCa_i__hca = _lt_0_row[6]; // dimensionless
        const double var_INaCa_i__hna = _lt_0_row[7]; // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__h2_i = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h2_ss = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[11]; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[11]; // dimensionless
        const double var_INaCa_i__h8_i = 0.011348161597821153 * mParameters[11] / (var_INaCa_i__h7_i * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__h8_ss = 0.011348161597821153 * mParameters[11] / (var_INaCa_i__h7_ss * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__k3pp_i = 5000.0 * var_INaCa_i__h8_i; // dimensionless
        const double var_INaCa_i__k3_i = 60000.0 / var_INaCa_i__h7_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = 5000.0 * var_INaCa_i__h8_ss; // dimensionless
        const double var_INaCa_i__k3_ss = 60000.0 / var_INaCa_i__h7_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4pp_i = 5000.0 * var_INaCa_i__h2_i; // dimensionless
        const double var_INaCa_i__k4_i = 60000.0 / (var_INaCa_i__h1_i * var_INaCa_i__hca) + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = 5000.0 * var_INaCa_i__h2_ss; // dimensionless
        const double var_INaCa_i__k4_ss = 60000.0 / (var_INaCa_i__h1_ss * var_INaCa_i__hca) + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = 800.0 * pow(var_chaste_interface__intracellular_ions__nai, 2) * var_INaCa_i__h2_i / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k7_ss = 800.0 * pow(var_chaste_interface__intracellular_ions__nass, 2) * var_INaCa_i__h2_ss / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k8_i = 800.0 * pow(mParameters[11], 2) * var_INaCa_i__h8_i / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k8_ss = 800.0 * pow(mParameters[11], 2) * var_INaCa_i__h8_ss / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__x1_i = 5000.0 * (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k7_i + 5000.0 * (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = 5000.0 * (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k7_ss + 5000.0 * (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i + (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i; // dimensionless
        const double var_INaCa_i__x2_ss = (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss; // dimensionless
        const double var_INaCa_i__x3_i = (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = 5000.0 * (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k8_i + 5000.0 * (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__x4_ss = 5000.0 * (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k8_ss + 5000.0 * (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaK__Knai = _lt_0_row[8]; // millimolar
        const double var_INaK__Knao = _lt_0_row[9]; // millimolar
        const double var_INaK__a1 = 949.5 * pow(var_chaste_interface__intracellular_ions__nai, 3) / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ki), 2)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = 14800.411886344058 * pow(mParameters[10], 2) / (-1.0 + pow((1.0 + mParameters[11] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[10]), 2)); // dimensionless
        const double var_INaK__b2 = 39.399999999999999 * pow(mParameters[11], 3) / ((-1.0 + pow((1.0 + mParameters[11] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[10]), 2)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = 160.0 * pow(var_chaste_interface__intracellular_ions__ki, 2) / (-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ki), 2)); // dimensionless
        const double var_INaK__x1 = 439120.79239156016 * var_INaK__a1 + 687.20000000000005 * var_INaK__a1 * var_INaK__b3 + 687.20000000000005 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = 687.20000000000005 * var_INaK__a1 * var_INaK__a3 + 696.32000000000005 * var_INaK__a3 * var_INaK__b4 + 9.120000000000001 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = 444948.47229058668 * var_INaK__a3 + 5827.6798990265261 * var_INaK__b2 + 9.120000000000001 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = 638.99998892834708 * var_INaK__a1 * var_INaK__a3 + 638.99998892834708 * var_INaK__a1 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaCa_i__INaCa_i = 0.80000000000000004 * (10000.0 * var_INaCa_i__E2_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i - 2.0 * var_INaCa_i__E1_i * var_INaCa_i__k1_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i + var_INaCa_i__k4pp_i * var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i) + 3.0 * var_INaCa_i__k7_i * var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i)) * var_INaCa_i__Gncx / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cai, 2)); // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__cai = (0.029411764705882353 * var_diff__Jdiff + 6.1520742882368733e-5 * var_INaCa_i__INaCa_i - 3.0760371441184366e-5 * var_ICab__ICab - 3.0760371441184366e-5 * var_IpCa__IpCa - 0.081176470588235281 * var_SERCA__Jup) / (1.0 + 3.5000000000000004e-5 / pow((0.00050000000000000001 + var_chaste_interface__intracellular_ions__cai), 2) + 0.0023800000000000002 * ((var_environment__celltype == 1.0) ? (0.065000000000000002) : (0.050000000000000003)) / pow((0.0023800000000000002 + var_chaste_interface__intracellular_ions__cai), 2)); // millimolar / millisecond
        const double var_INaCa_i__INaCa_ss = 0.20000000000000001 * (10000.0 * var_INaCa_i__E2_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss - 2.0 * var_INaCa_i__E1_ss * var_INaCa_i__k1_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss + var_INaCa_i__k4pp_ss * var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss) + 3.0 * var_INaCa_i__k7_ss * var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss)) * var_INaCa_i__Gncx / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cass, 2)); // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__nass = -var_diff__JdiffNa - 0.0020917052580005369 * var_ICaL__ICaNa - 0.0062751157740016106 * var_INaCa_i__INaCa_ss; // millimolar / millisecond
        const double var_INaK__INaK = (18.240000000000002 * var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) + 3.0 * var_INaK__a3 * var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 2.0 * var_INaK__a1 * var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 3.0 * var_INaK__b3 * var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4)) * ((var_environment__celltype == 1.0) ? (0.90000000000000002 * mParameters[23]) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * mParameters[23]) : (mParameters[23]))); // microA_per_microF
        const double var_reversal_potentials__EK = 26.712338705498265 * log(mParameters[10] / var_chaste_interface__intracellular_ions__ki); // millivolt
        const double var_IK1__IK1 = sqrt(mParameters[10]) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((var_environment__celltype == 1.0) ? (1.2 * mParameters[18]) : ((var_environment__celltype == 2.0) ? (1.3 * mParameters[18]) : (mParameters[18]))) * var_chaste_interface__IK1__xk1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * mParameters[10])); // microA_per_microF
        const double var_IKb__IKb = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[14]) : (mParameters[14])) / (_lt_0_row[10]); // microA_per_microF
        const double var_IKr__IKr = 0.43033148291193518 * sqrt(mParameters[10]) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((var_environment__celltype == 1.0) ? (1.3 * mParameters[20]) : ((var_environment__celltype == 2.0) ? (0.80000000000000004 * mParameters[20]) : (mParameters[20]))) * var_chaste_interface__IKr__O; // microA_per_microF
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (var_Ito__AiF * var_chaste_interface__Ito__iF + var_Ito__AiS * var_chaste_interface__Ito__iS) * var_chaste_interface__Ito__a + (var_Ito__AiF * var_chaste_interface__Ito__iFp + var_Ito__AiS * var_chaste_interface__Ito__iSp) * var_chaste_interface__Ito__ap / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (((var_environment__celltype == 1.0) || (var_environment__celltype == 2.0)) ? (4.0 * mParameters[24]) : (mParameters[24])); // microA_per_microF
        const double var_reversal_potentials__ENa = 26.712338705498265 * log(mParameters[11] / var_chaste_interface__intracellular_ions__nai); // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (0.010000000000000009 * var_chaste_interface__INa__hs + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__j + (0.010000000000000009 * var_chaste_interface__INa__hsp + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__jp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * mParameters[17]; // microA_per_microF
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * var_chaste_interface__INaL__hL + var_chaste_interface__INaL__hLp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[19]) : (mParameters[19])) * var_chaste_interface__INaL__mL; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__nai = 0.029411764705882353 * var_diff__JdiffNa - 0.0001845622286471062 * var_INaCa_i__INaCa_i - 0.0001845622286471062 * var_INaK__INaK - 6.1520742882368733e-5 * var_INa__INa - 6.1520742882368733e-5 * var_INaL__INaL - 6.1520742882368733e-5 * var_INab__INab; // millimolar / millisecond
        const double var_IKs__IKs = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__cai), 1.3999999999999999))) * (-26.712338705498265 * log((0.018329999999999999 * mParameters[11] + mParameters[10]) / (0.018329999999999999 * var_chaste_interface__intracellular_ions__nai + var_chaste_interface__intracellular_ions__ki)) + var_chaste_interface__membrane__v) * ((var_environment__celltype == 1.0) ? (1.3999999999999999 * mParameters[21]) : (mParameters[21])) * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__ki = 0.029411764705882353 * var_diff__JdiffK + 0.00012304148576473747 * var_INaK__INaK - 6.1520742882368733e-5 * var_IK1__IK1 - 6.1520742882368733e-5 * var_IKb__IKb - 6.1520742882368733e-5 * var_IKr__IKr - 6.1520742882368733e-5 * var_IKs__IKs - 6.1520742882368733e-5 * var_Ito__Ito - 6.1520742882368733e-5 * var_membrane__Istim; // millimolar / millisecond
        const double var_ryr__Jrel = ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * var_chaste_interface__ryr__Jrelnp + var_chaste_interface__ryr__Jrelp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * mParameters[7]; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cass = (-var_diff__Jdiff + 0.0020917052580005369 * var_INaCa_i__INaCa_ss + 0.23999999999999996 * var_ryr__Jrel - 0.0010458526290002684 * var_ICaL__ICaL) / (1.0 + 0.0097788000000000007 / pow((0.0086999999999999994 + var_chaste_interface__intracellular_ions__cass), 2) + 4.0890000000000003e-5 / pow((0.00087000000000000001 + var_chaste_interface__intracellular_ions__cass), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_ryr__Jrelnp = (-var_chaste_interface__ryr__Jrelnp + ((var_environment__celltype == 2.0) ? (-4.0374999999999996 * var_ICaL__ICaL / (1.0 + 25.62890625 / pow(var_chaste_interface__intracellular_ions__cajsr, 8))) : (-2.375 * var_ICaL__ICaL / (1.0 + 25.62890625 / pow(var_chaste_interface__intracellular_ions__cajsr, 8))))) * ((4.75 / (1.0 + 0.0123 / var_chaste_interface__intracellular_ions__cajsr) < 0.001) ? (1000.0) : (0.21052631578947367 + 0.0025894736842105265 / var_chaste_interface__intracellular_ions__cajsr)); // 1 / millisecond
        const double d_dt_chaste_interface_var_ryr__Jrelp = (-var_chaste_interface__ryr__Jrelp + ((var_environment__celltype == 2.0) ? (-5.046875 * var_ICaL__ICaL / (1.0 + 25.62890625 / pow(var_chaste_interface__intracellular_ions__cajsr, 8))) : (-2.96875 * var_ICaL__ICaL / (1.0 + 25.62890625 / pow(var_chaste_interface__intracellular_ions__cajsr, 8))))) * ((5.9375 / (1.0 + 0.0123 / var_chaste_interface__intracellular_ions__cajsr) < 0.001) ? (1000.0) : (0.16842105263157894 + 0.0020715789473684213 / var_chaste_interface__intracellular_ions__cajsr)); // 1 / millisecond
        const double var_trans_flux__Jtr = 0.01 * var_chaste_interface__intracellular_ions__cansr - 0.01 * var_chaste_interface__intracellular_ions__cajsr; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cajsr = (-var_ryr__Jrel + var_trans_flux__Jtr) / (1.0 + 8.0 / pow((0.80000000000000004 + var_chaste_interface__intracellular_ions__cajsr), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cansr = -0.086956521739130432 * var_trans_flux__Jtr + var_SERCA__Jup; // millimolar / millisecond
        
        rResidual[11] = rCurrentGuess[11] - rY[1] - mDt*d_dt_chaste_interface_var_intracellular_ions__cai;
        rResidual[0] = rCurrentGuess[0] - rY[2] - mDt*d_dt_chaste_interface_var_CaMK__CaMKt;
        rResidual[17] = rCurrentGuess[17] - rY[3] - mDt*d_dt_chaste_interface_var_intracellular_ions__nai;
        rResidual[18] = rCurrentGuess[18] - rY[4] - mDt*d_dt_chaste_interface_var_intracellular_ions__nass;
        rResidual[15] = rCurrentGuess[15] - rY[5] - mDt*d_dt_chaste_interface_var_intracellular_ions__ki;
        rResidual[16] = rCurrentGuess[16] - rY[6] - mDt*d_dt_chaste_interface_var_intracellular_ions__kss;
        rResidual[14] = rCurrentGuess[14] - rY[7] - mDt*d_dt_chaste_interface_var_intracellular_ions__cass;
        rResidual[13] = rCurrentGuess[13] - rY[8] - mDt*d_dt_chaste_interface_var_intracellular_ions__cansr;
        rResidual[12] = rCurrentGuess[12] - rY[9] - mDt*d_dt_chaste_interface_var_intracellular_ions__cajsr;
        rResidual[1] = rCurrentGuess[1] - rY[33] - mDt*d_dt_chaste_interface_var_ICaL__nca;
        rResidual[5] = rCurrentGuess[5] - rY[34] - mDt*d_dt_chaste_interface_var_IKr__IC1;
        rResidual[6] = rCurrentGuess[6] - rY[35] - mDt*d_dt_chaste_interface_var_IKr__IC2;
        rResidual[2] = rCurrentGuess[2] - rY[36] - mDt*d_dt_chaste_interface_var_IKr__C1;
        rResidual[3] = rCurrentGuess[3] - rY[37] - mDt*d_dt_chaste_interface_var_IKr__C2;
        rResidual[9] = rCurrentGuess[9] - rY[38] - mDt*d_dt_chaste_interface_var_IKr__O;
        rResidual[7] = rCurrentGuess[7] - rY[39] - mDt*d_dt_chaste_interface_var_IKr__IO;
        rResidual[8] = rCurrentGuess[8] - rY[40] - mDt*d_dt_chaste_interface_var_IKr__IObound;
        rResidual[10] = rCurrentGuess[10] - rY[41] - mDt*d_dt_chaste_interface_var_IKr__Obound;
        rResidual[4] = rCurrentGuess[4] - rY[42] - mDt*d_dt_chaste_interface_var_IKr__Cbound;
        rResidual[19] = rCurrentGuess[19] - rY[46] - mDt*d_dt_chaste_interface_var_ryr__Jrelnp;
        rResidual[20] = rCurrentGuess[20] - rY[47] - mDt*d_dt_chaste_interface_var_ryr__Jrelp;
    }

    void Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler::ComputeJacobian(double var_chaste_interface__environment__time, const double rCurrentGuess[21], double rJacobian[21][21])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -88.00190465
        double var_chaste_interface__INa__m = rY[10];
        // Units: dimensionless; Initial value: 0.007344121102
        double var_chaste_interface__INa__hf = rY[11];
        // Units: dimensionless; Initial value: 0.6981071913
        double var_chaste_interface__INa__hs = rY[12];
        // Units: dimensionless; Initial value: 0.6980895801
        double var_chaste_interface__INa__j = rY[13];
        // Units: dimensionless; Initial value: 0.6979908432
        double var_chaste_interface__INa__hsp = rY[14];
        // Units: dimensionless; Initial value: 0.4549485525
        double var_chaste_interface__INa__jp = rY[15];
        // Units: dimensionless; Initial value: 0.6979245865
        double var_chaste_interface__INaL__mL = rY[16];
        // Units: dimensionless; Initial value: 0.0001882617273
        double var_chaste_interface__INaL__hL = rY[17];
        // Units: dimensionless; Initial value: 0.5008548855
        double var_chaste_interface__INaL__hLp = rY[18];
        // Units: dimensionless; Initial value: 0.2693065357
        double var_chaste_interface__Ito__a = rY[19];
        // Units: dimensionless; Initial value: 0.001001097687
        double var_chaste_interface__Ito__iF = rY[20];
        // Units: dimensionless; Initial value: 0.9995541745
        double var_chaste_interface__Ito__iS = rY[21];
        // Units: dimensionless; Initial value: 0.5865061736
        double var_chaste_interface__Ito__ap = rY[22];
        // Units: dimensionless; Initial value: 0.0005100862934
        double var_chaste_interface__Ito__iFp = rY[23];
        // Units: dimensionless; Initial value: 0.9995541823
        double var_chaste_interface__Ito__iSp = rY[24];
        // Units: dimensionless; Initial value: 0.6393399482
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 2.34e-09
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 0.9102412777
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 0.9998046777
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 0.9999738312
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__IKs__xs1 = rY[43];
        // Units: dimensionless; Initial value: 0.2707758025
        double var_chaste_interface__IKs__xs2 = rY[44];
        // Units: dimensionless; Initial value: 0.0001928503426
        double var_chaste_interface__IK1__xk1 = rY[45];
        // Units: dimensionless; Initial value: 0.9967597594
        
        // Lookup table indexing
        const bool _oob_0 = Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        double var_chaste_interface__CaMK__CaMKt = rCurrentGuess[0];
        double var_chaste_interface__ICaL__nca = rCurrentGuess[1];
        double var_chaste_interface__IKr__O = rCurrentGuess[9];
        double var_chaste_interface__intracellular_ions__cai = rCurrentGuess[11];
        double var_chaste_interface__intracellular_ions__cajsr = rCurrentGuess[12];
        double var_chaste_interface__intracellular_ions__cansr = rCurrentGuess[13];
        double var_chaste_interface__intracellular_ions__cass = rCurrentGuess[14];
        double var_chaste_interface__intracellular_ions__ki = rCurrentGuess[15];
        double var_chaste_interface__intracellular_ions__kss = rCurrentGuess[16];
        double var_chaste_interface__intracellular_ions__nai = rCurrentGuess[17];
        double var_chaste_interface__intracellular_ions__nass = rCurrentGuess[18];
        double var_chaste_interface__ryr__Jrelnp = rCurrentGuess[19];
        double var_chaste_interface__ryr__Jrelp = rCurrentGuess[20];
        
        const double var_x0 = 1.0 - var_chaste_interface__CaMK__CaMKt;
        const double var_x1 = 1 / var_chaste_interface__intracellular_ions__cass;
        const double var_x2 = 1.0 + 0.0015 * var_x1;
        const double var_x3 = 1 / var_x2;
        const double var_x4 = 0.050000000000000003 * var_x3;
        const double var_x5 = var_x0 * var_x4 + var_chaste_interface__CaMK__CaMKt;
        const double var_x6 = 0.0025000000000000005 * var_x3;
        const double var_x7 = pow(var_chaste_interface__intracellular_ions__cass, (-2));
        const double var_x8 = var_x0 * var_x7 / pow(var_x2, 2);
        const double var_x9 = 1.0 + 0.002 * var_x1;
        const double var_x10 = _lt_0_row[50];
        const double var_x11 = exp(2.7360444511379707);
        const double var_x12 = 0.44919999999999999 * var_x11 * _lt_0_row[14];
        const double var_x13 = _lt_0_row[51];
        const double var_x14 = _lt_0_row[52];
        const double var_x15 = _lt_0_row[53];
        const double var_x16 = _lt_0_row[54];
        const double var_x17 = 0.3226 * var_x11 * _lt_0_row[15];
        const double var_x18 = _lt_0_row[55];
        const double var_x19 = mParameters[2] / (1.0 + exp(0.14729709824716453 * mParameters[4] - 0.14729709824716453 * var_chaste_interface__membrane__v));
        const double var_x20 = _lt_0_row[56];
        const double var_x21 = _lt_0_row[57];
        const double var_x22 = _lt_0_row[58];
        const double var_x23 = _lt_0_row[59];
        const double var_x24 = exp(2.9534155818343937);
        const double var_x25 = _lt_0_row[24];
        const double var_x26 = 0.0089779999999999999 * var_x24 * var_x25;
        const double var_x27 = pow(mParameters[0], mParameters[6]);
        const double var_x28 = var_x27 * mParameters[1] * mParameters[3] / (var_x27 + mParameters[5]);
        const double var_x29 = -var_x28;
        const double var_x30 = _lt_0_row[60];
        const double var_x31 = 16.59612385832034 * var_x30 * mParameters[3] / (var_x24 * var_x25);
        const double var_x32 = 0.14899999999999999 * var_x30;
        const double var_x33 = -mParameters[2];
        const double var_x34 = 0.00075000000000000002 + var_chaste_interface__intracellular_ions__cai;
        const double var_x35 = 1 / var_x34;
        const double var_x36 = 1.0 + 0.14999999999999999 / var_x5;
        const double var_x37 = 1 / (pow(var_x36, 2) * pow(var_x5, 2));
        const double var_x38 = var_x37 * (-1 + var_x4);
        const double var_x39 = var_x38 * var_chaste_interface__intracellular_ions__cai;
        const double var_x40 = var_x35 * var_x39;
        const double var_x41 = 0.00092000000000000003 + var_chaste_interface__intracellular_ions__cai;
        const double var_x42 = 1 / var_x41;
        const double var_x43 = var_x39 * var_x42;
        const double var_x44 = 0.0023800000000000002 + var_chaste_interface__intracellular_ions__cai;
        const double var_x45 = 0.00050000000000000001 + var_chaste_interface__intracellular_ions__cai;
        const double var_x46 = pow(var_x45, (-2));
        const double var_x47 = 1.0 + 0.00011900000000000002 / pow(var_x44, 2) + 3.5000000000000004e-5 * var_x46;
        const double var_x48 = 1 / var_x47;
        const double var_x49 = var_x48;
        const double var_x50 = exp(9.9999999999999995e-8);
        const double var_x51 = 1 / (-1.0 + var_x50);
        const double var_x52 = 2.671233870549826e-13 * var_x51;
        const double var_x53 = var_x50 * var_x52;
        const double var_x54 = exp(-9.9999999999999995e-8);
        const double var_x55 = 1 / (-1.0 + var_x54);
        const double var_x56 = 2.671233870549826e-13 * var_x55;
        const double var_x57 = var_x54 * var_x56;
        const double var_x58 = var_x54 * var_x55;
        const double var_x59 = 8.2168146064385251e-18 * mParameters[13];
        const double var_x60 = 1 / var_x36;
        const double var_x61 = var_x35 * var_x60;
        const double var_x62 = var_x60;
        const double var_x63 = 1.0 - var_x62;
        const double var_x64 = var_x42 * var_x63;
        const double var_x65 = var_x60 * var_chaste_interface__intracellular_ions__cai / pow(var_x34, 2);
        const double var_x66 = var_x63 * var_chaste_interface__intracellular_ions__cai / pow(var_x41, 2);
        const double var_x67 = 3.0760371441184366e-5 * mParameters[16];
        const double var_x68 = var_x67 / var_x45;
        const double var_x69 = _lt_0_row[7];
        const double var_x70 = 1 / var_x69;
        const double var_x71 = 1 / (1.0 + 0.011348161597821153 * (1.0 + var_x70) * mParameters[11]);
        const double var_x72 = var_x70 * var_x71;
        const double var_x73 = var_x72 * mParameters[11];
        const double var_x74 = 56.740807989105761 * var_x73;
        const double var_x75 = var_x74 + 60000.0 * var_x71;
        const double var_x76 = 1 / (13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[11]) * mParameters[11]);
        const double var_x77 = var_x76 * mParameters[9];
        const double var_x78 = 1500000.0 * var_x77;
        const double var_x79 = pow(mParameters[11], 3);
        const double var_x80 = var_x76 * var_x79;
        const double var_x81 = var_x72 * var_x80;
        const double var_x82 = var_x78 + 9.0785292782569211 * var_x81;
        const double var_x83 = var_x75 * var_x82;
        const double var_x84 = 0.00036716666666666668 * var_x83;
        const double var_x85 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nai) * var_chaste_interface__intracellular_ions__nai;
        const double var_x86 = 1 / var_x85;
        const double var_x87 = 1500000.0 * var_x86;
        const double var_x88 = var_x87 * var_chaste_interface__intracellular_ions__cai;
        const double var_x89 = pow(var_chaste_interface__intracellular_ions__nai, 3);
        const double var_x90 = 0.011348161597821153 + 0.011348161597821153 * var_x69;
        const double var_x91 = 1.0 + var_x90 * var_chaste_interface__intracellular_ions__nai;
        const double var_x92 = 1 / var_x91;
        const double var_x93 = var_x69 * var_x92;
        const double var_x94 = var_x86 * var_x93;
        const double var_x95 = var_x89 * var_x94;
        const double var_x96 = var_x88 + 9.0785292782569211 * var_x95;
        const double var_x97 = 1 / _lt_0_row[6];
        const double var_x98 = var_x92 * var_x97;
        const double var_x99 = 56.740807989105761 * var_x93;
        const double var_x100 = var_x99 * var_chaste_interface__intracellular_ions__nai;
        const double var_x101 = var_x100 + 60000.0 * var_x98;
        const double var_x102 = var_x101 * var_x96;
        const double var_x103 = var_x101 * var_x82;
        const double var_x104 = var_x103 * var_x86;
        const double var_x105 = var_x75 * var_x77;
        const double var_x106 = 0.11015000000000001 * var_x105;
        const double var_x107 = 5000.0 + var_x101;
        const double var_x108 = var_x107 * var_x81;
        const double var_x109 = 5000.0 + var_x75;
        const double var_x110 = var_x109 * var_x95;
        const double var_x111 = var_x109 * var_x81;
        const double var_x112 = var_x111 * var_x86;
        const double var_x113 = var_x112 * var_chaste_interface__intracellular_ions__cai;
        const double var_x114 = var_x107 * var_x77;
        const double var_x115 = var_x114 * var_x95;
        const double var_x116 = pow((var_x113 + var_x115 + var_x84 + 0.0033333333333333331 * var_x108 + 0.0033333333333333331 * var_x110 + 0.00036716666666666668 * var_x102 + var_x106 * var_x96 + 0.11015000000000001 * var_x104 * var_chaste_interface__intracellular_ions__cai), (-2));
        const double var_x117 = 283704.03994552878 * var_x93;
        const double var_x118 = 300000000.0 * var_x98 + var_x117 * var_chaste_interface__intracellular_ions__nai;
        const double var_x119 = 2250000000000.0 * var_x105;
        const double var_x120 = var_x119 * var_x86;
        const double var_x121 = 13617793.917385383 * var_x112;
        const double var_x122 = var_x116 * (-var_x120 - var_x121 - var_x103 * var_x87 - var_x118 * var_x87);
        const double var_x123 = 13617793.917385383 * var_x115 + var_x103 * var_x88;
        const double var_x124 = 5.3924544444444452e-11 * var_x123;
        const double var_x125 = 5000.0 * var_x102 + 45392.646391284608 * var_x110;
        const double var_x126 = var_x75 * var_x78;
        const double var_x127 = 13617793.917385383 * var_x113 + var_x126 * var_x96;
        const double var_x128 = 5000.0 * var_x83;
        const double var_x129 = var_x128 + 45392.646391284608 * var_x108;
        const double var_x130 = 1 / (var_x123 + var_x125 + var_x127 + var_x129);
        const double var_x131 = var_x104 * var_x130;
        const double var_x132 = var_x100 * var_x130;
        const double var_x133 = 4500000000000.0 * var_x77;
        const double var_x134 = var_x130 * var_x86;
        const double var_x135 = var_x118 * var_x134;
        const double var_x136 = 1.6177363333333335e-8 * var_x77;
        const double var_x137 = var_x122 * var_x125;
        const double var_x138 = 3.0597222222222222e-13 * var_x122;
        const double var_x139 = var_x127 * var_x93 * var_chaste_interface__intracellular_ions__nai;
        const double var_x140 = var_x123 * var_x73;
        const double var_x141 = 1.4686666666666667e-13 * var_x129 * var_x95;
        const double var_x142 = 40853381.752156146 * var_x81;
        const double var_x143 = 85111211.983658642 * var_x73;
        const double var_x144 = 1.4686666666666667e-13 * var_x81;
        const double var_x145 = 15000000000.0 * var_x131 + var_x122 * var_x124 + var_x122 * var_x141 + var_x132 * (var_x120 + var_x121) + var_x138 * var_x139 - var_x131 * var_x143 - var_x133 * var_x135 - var_x135 * var_x142 - var_x136 * var_x137 - var_x137 * var_x144 - var_x138 * var_x140;
        const double var_x146 = 1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cai, 2);
        const double var_x147 = mParameters[22] / var_x146;
        const double var_x148 = 4.9216594305894988e-5 * var_x147;
        const double var_x149 = 10000.0 * var_x130;
        const double var_x150 = 3000000.0 * var_x77;
        const double var_x151 = var_x125 * var_x130;
        const double var_x152 = var_x127 * var_x130;
        const double var_x153 = var_x130 * var_x74;
        const double var_x154 = var_x129 * var_x130;
        const double var_x155 = 27.235587834770765 * var_x154;
        const double var_x156 = 27.235587834770765 * var_x81;
        const double var_x157 = var_x100 * var_x152 + var_x123 * var_x149 + var_x155 * var_x95 - var_x123 * var_x153 - var_x150 * var_x151 - var_x151 * var_x156;
        const double var_x158 = var_x157 * mParameters[22] / (pow(var_x146, 2) * pow(var_chaste_interface__intracellular_ions__cai, 3));
        const double var_x159 = -0.14705882352941174 - var_x68 + 2.2147467437652741e-12 * var_x158 + var_x145 * var_x148 + (0.00097665441176470586 * var_x65 + 0.00035514705882352943 * var_x66 - 0.00097665441176470586 * var_x61 - 0.00035514705882352943 * var_x64) * mParameters[8] + var_x46 * var_x67 * var_chaste_interface__intracellular_ions__cai;
        const double var_x160 = 1.3356169352749131e-6 + var_chaste_interface__membrane__v;
        const double var_x161 = -0.34100000000000003 * mParameters[9];
        const double var_x162 = var_x161 + var_x54 * var_chaste_interface__intracellular_ions__cai;
        const double var_x163 = 0.0043750000000000004 * var_x64;
        const double var_x164 = 0.01203125 * var_x61;
        const double var_x165 = 0.14705882352941174 * var_chaste_interface__intracellular_ions__cass - 0.14705882352941174 * var_chaste_interface__intracellular_ions__cai + var_x148 * var_x157 - var_x68 * var_chaste_interface__intracellular_ions__cai - 0.081176470588235281 * (-0.00026249999999999998 * var_chaste_interface__intracellular_ions__cansr + var_x163 * var_chaste_interface__intracellular_ions__cai + var_x164 * var_chaste_interface__intracellular_ions__cai) * mParameters[8];
        const double var_x166 = (0.00023800000000000004 / pow(var_x44, 3) + 7.0000000000000007e-5 / pow(var_x45, 3)) / pow(var_x47, 2);
        const double var_x167 = fabs(var_chaste_interface__membrane__v);
        const double var_x168 = var_x167 < 1.3356169352749131e-6;
        const double var_x169 = _lt_0_row[3];
        const double var_x170 = pow(var_chaste_interface__membrane__v, 2);
        const double var_x171 = var_x170 / (-1.0 + var_x169);
        const double var_x172 = 4.6061667277156659e-6 * var_x171 * mParameters[13];
        const double var_x173 = var_x37 * var_x8;
        const double var_x174 = var_x173 * var_chaste_interface__intracellular_ions__cai;
        const double var_x175 = var_x174 * var_x42;
        const double var_x176 = var_x174 * var_x35;
        const double var_x177 = pow(var_x91, (-2));
        const double var_x178 = -0.011348161597821153 - 0.011348161597821153 * var_x69;
        const double var_x179 = var_x178 * var_x97;
        const double var_x180 = var_x177 * var_x179;
        const double var_x181 = var_x178 * var_x69;
        const double var_x182 = 56.740807989105761 * var_x181;
        const double var_x183 = var_x177 * var_chaste_interface__intracellular_ions__nai;
        const double var_x184 = var_x182 * var_x183;
        const double var_x185 = var_x184 + var_x99 + 60000.0 * var_x180;
        const double var_x186 = var_x185 * var_x82 * var_x88;
        const double var_x187 = (-0.066666666666666666 - 0.026666666666666668 * var_chaste_interface__intracellular_ions__nai) / pow(var_x85, 2);
        const double var_x188 = var_x187 * var_chaste_interface__intracellular_ions__cai;
        const double var_x189 = 1500000.0 * var_x188;
        const double var_x190 = var_x103 * var_x189;
        const double var_x191 = pow(var_chaste_interface__intracellular_ions__nai, 2);
        const double var_x192 = var_x191 * var_x94;
        const double var_x193 = 40853381.752156146 * var_x114 * var_x192;
        const double var_x194 = 13617793.917385383 * var_x77;
        const double var_x195 = var_x185 * var_x194 * var_x95;
        const double var_x196 = var_x187 * var_x93;
        const double var_x197 = var_x196 * var_x89;
        const double var_x198 = 13617793.917385383 * var_x114;
        const double var_x199 = var_x197 * var_x198;
        const double var_x200 = var_x177 * var_x181;
        const double var_x201 = var_x200 * var_x86;
        const double var_x202 = var_x201 * var_x89;
        const double var_x203 = var_x198 * var_x202;
        const double var_x204 = var_x186 + var_x190 + var_x193 + var_x195 + var_x199 + var_x203;
        const double var_x205 = 283704.03994552878 * var_x181;
        const double var_x206 = var_x96 * (var_x117 + 300000000.0 * var_x180 + var_x183 * var_x205);
        const double var_x207 = 9.0785292782569211 * var_x89;
        const double var_x208 = var_x189 + 27.235587834770765 * var_x192 + var_x196 * var_x207 + var_x201 * var_x207;
        const double var_x209 = var_x118 * var_x208;
        const double var_x210 = var_x126 * var_x208;
        const double var_x211 = 136177.93917385384 * var_x109;
        const double var_x212 = var_x192 * var_x211;
        const double var_x213 = 45392.646391284608 * var_x81;
        const double var_x214 = 45392.646391284608 * var_x109;
        const double var_x215 = var_x197 * var_x214;
        const double var_x216 = var_x202 * var_x214;
        const double var_x217 = 13617793.917385383 * var_x111;
        const double var_x218 = var_x188 * var_x217;
        const double var_x219 = var_x116 * (-var_x186 - var_x190 - var_x193 - var_x195 - var_x199 - var_x203 - var_x206 - var_x209 - var_x210 - var_x212 - var_x215 - var_x216 - var_x218 - var_x185 * var_x213);
        const double var_x220 = var_x130 * (var_x206 + var_x209 + var_x212 + var_x215 + var_x216);
        const double var_x221 = var_x125 * var_x219;
        const double var_x222 = 3.0597222222222222e-13 * var_x219;
        const double var_x223 = var_x134 * var_x89;
        const double var_x224 = 1236295.4078425223 * var_x71 * var_x80;
        const double var_x225 = var_x124 * var_x219 + var_x132 * (var_x210 + var_x218) + var_x139 * var_x222 + var_x141 * var_x219 + var_x149 * var_x204 + var_x152 * var_x184 + var_x152 * var_x99 + var_x155 * var_x197 - var_x136 * var_x221 - var_x140 * var_x222 - var_x144 * var_x221 - var_x150 * var_x220 - var_x153 * var_x204 - var_x156 * var_x220 + 81.706763504312292 * var_x154 * var_x192 + 27.235587834770765 * var_x129 * var_x200 * var_x223 + var_x185 * var_x223 * var_x224 * var_x92;
        const double var_x226 = 0.14999999999999999 * var_x38;
        const double var_x227 = 0.80000000000000004 + var_chaste_interface__intracellular_ions__cajsr;
        const double var_x228 = pow(var_x227, (-2));
        const double var_x229 = 1 / (1.0 + 8.0 * var_x228);
        const double var_x230 = var_x229 * mParameters[7];
        const double var_x231 = var_x230;
        const double var_x232 = 0.01 * var_x229;
        const double var_x233 = (var_x62 * var_chaste_interface__ryr__Jrelp + var_x63 * var_chaste_interface__ryr__Jrelnp) * mParameters[7];
        const double var_x234 = 1.1250000000000001e-5 * var_x173;
        const double var_x235 = 0.035999999999999997 * var_x38;
        const double var_x236 = var_x56 * (var_x161 + var_x54 * var_chaste_interface__intracellular_ions__cass);
        const double var_x237 = 0.14974353403121046 * var_x171;
        const double var_x238 = ((var_x168) ? (var_x236 + 374358.83507802623 * var_x160 * (-var_x236 + var_x52 * (var_x161 + var_x50 * var_chaste_interface__intracellular_ions__cass))) : (var_x237 * (var_x161 + var_x169 * var_chaste_interface__intracellular_ions__cass)));
        const double var_x239 = 1.0 - var_chaste_interface__ICaL__nca;
        const double var_x240 = 0.40000000000000002 * var_chaste_interface__ICaL__fs;
        const double var_x241 = 0.59999999999999998 * var_chaste_interface__ICaL__ffp;
        const double var_x242 = _lt_0_row[61];
        const double var_x243 = 0.29999999999999999 + var_x242;
        const double var_x244 = (0.69999999999999996 - var_x242) * var_chaste_interface__ICaL__fcas;
        const double var_x245 = (var_x244 + var_x243 * var_chaste_interface__ICaL__fcafp) * var_chaste_interface__ICaL__jca;
        const double var_x246 = var_x239 * (var_x240 + var_x241) + var_x245 * var_chaste_interface__ICaL__nca;
        const double var_x247 = mParameters[12] * var_chaste_interface__ICaL__d;
        const double var_x248 = var_x247 * var_x38;
        const double var_x249 = var_x246 * var_x248;
        const double var_x250 = var_x238 * var_x249;
        const double var_x251 = 0.59999999999999998 * var_chaste_interface__ICaL__ff;
        const double var_x252 = (var_x244 + var_x243 * var_chaste_interface__ICaL__fcaf) * var_chaste_interface__ICaL__jca;
        const double var_x253 = var_x239 * (var_x240 + var_x251) + var_x252 * var_chaste_interface__ICaL__nca;
        const double var_x254 = var_x238 * var_x253;
        const double var_x255 = 0.0086999999999999994 + var_chaste_interface__intracellular_ions__cass;
        const double var_x256 = 0.00087000000000000001 + var_chaste_interface__intracellular_ions__cass;
        const double var_x257 = 1.0 + 0.0097788000000000007 / pow(var_x255, 2) + 4.0890000000000003e-5 / pow(var_x256, 2);
        const double var_x258 = 1 / var_x257;
        const double var_x259 = var_x258;
        const double var_x260 = var_x247 * (-0.0010458526290002684 + 0.0010458526290002684 * var_x60);
        const double var_x261 = -var_x240;
        const double var_x262 = var_x252 + var_x261 - var_x251;
        const double var_x263 = var_x238 * var_x262;
        const double var_x264 = var_x245 + var_x261 - var_x241;
        const double var_x265 = var_x247 * var_x60;
        const double var_x266 = 0.0011504378919002954 * var_x265;
        const double var_x267 = var_x238 * var_x266;
        const double var_x268 = 2.7e-6 * var_x173;
        const double var_x269 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass;
        const double var_x270 = 1 / var_x269;
        const double var_x271 = 1500000.0 * var_x270;
        const double var_x272 = var_x271 * var_chaste_interface__intracellular_ions__cass;
        const double var_x273 = pow(var_chaste_interface__intracellular_ions__nass, 3);
        const double var_x274 = 1.0 + var_x90 * var_chaste_interface__intracellular_ions__nass;
        const double var_x275 = 1 / var_x274;
        const double var_x276 = var_x275 * var_x69;
        const double var_x277 = var_x270 * var_x276;
        const double var_x278 = var_x273 * var_x277;
        const double var_x279 = var_x272 + 9.0785292782569211 * var_x278;
        const double var_x280 = var_x275 * var_x97;
        const double var_x281 = 56.740807989105761 * var_x276;
        const double var_x282 = var_x281 * var_chaste_interface__intracellular_ions__nass;
        const double var_x283 = var_x282 + 60000.0 * var_x280;
        const double var_x284 = var_x279 * var_x283;
        const double var_x285 = var_x283 * var_x82;
        const double var_x286 = var_x270 * var_x285;
        const double var_x287 = 5000.0 + var_x283;
        const double var_x288 = var_x109 * var_x278;
        const double var_x289 = var_x111 * var_x270;
        const double var_x290 = var_x289 * var_chaste_interface__intracellular_ions__cass;
        const double var_x291 = var_x287 * var_x77;
        const double var_x292 = var_x278 * var_x291;
        const double var_x293 = pow((var_x290 + var_x292 + var_x84 + 0.0033333333333333331 * var_x288 + 0.00036716666666666668 * var_x284 + var_x106 * var_x279 + 0.0033333333333333331 * var_x287 * var_x81 + 0.11015000000000001 * var_x286 * var_chaste_interface__intracellular_ions__cass), (-2));
        const double var_x294 = 283704.03994552878 * var_x276;
        const double var_x295 = 300000000.0 * var_x280 + var_x294 * var_chaste_interface__intracellular_ions__nass;
        const double var_x296 = var_x119 * var_x270;
        const double var_x297 = 13617793.917385383 * var_x289;
        const double var_x298 = var_x293 * (-var_x296 - var_x297 - var_x271 * var_x285 - var_x271 * var_x295);
        const double var_x299 = 13617793.917385383 * var_x292 + var_x272 * var_x285;
        const double var_x300 = 5.3924544444444452e-11 * var_x299;
        const double var_x301 = 5000.0 * var_x284 + 45392.646391284608 * var_x288;
        const double var_x302 = 13617793.917385383 * var_x290 + var_x126 * var_x279;
        const double var_x303 = var_x128 + var_x213 * var_x287;
        const double var_x304 = 1 / (var_x299 + var_x301 + var_x302 + var_x303);
        const double var_x305 = var_x286 * var_x304;
        const double var_x306 = var_x282 * var_x304;
        const double var_x307 = var_x270 * var_x304;
        const double var_x308 = var_x295 * var_x307;
        const double var_x309 = var_x136 * var_x301;
        const double var_x310 = 3.0597222222222222e-13 * var_x298;
        const double var_x311 = var_x276 * var_x302 * var_chaste_interface__intracellular_ions__nass;
        const double var_x312 = var_x299 * var_x73;
        const double var_x313 = 1.4686666666666667e-13 * var_x278 * var_x303;
        const double var_x314 = var_x144 * var_x301;
        const double var_x315 = 15000000000.0 * var_x305 + var_x298 * var_x300 + var_x298 * var_x313 + var_x306 * (var_x296 + var_x297) + var_x310 * var_x311 - var_x133 * var_x308 - var_x142 * var_x308 - var_x143 * var_x305 - var_x298 * var_x309 - var_x298 * var_x314 - var_x310 * var_x312;
        const double var_x316 = 1.0 + 2.2499999999999996e-8 * var_x7;
        const double var_x317 = mParameters[22] / var_x316;
        const double var_x318 = 0.0004183410516001074 * var_x317;
        const double var_x319 = 10000.0 * var_x304;
        const double var_x320 = var_x150 * var_x304;
        const double var_x321 = var_x302 * var_x304;
        const double var_x322 = var_x304 * var_x74;
        const double var_x323 = var_x303 * var_x304;
        const double var_x324 = 27.235587834770765 * var_x323;
        const double var_x325 = var_x156 * var_x304;
        const double var_x326 = var_x278 * var_x324 + var_x282 * var_x321 + var_x299 * var_x319 - var_x299 * var_x322 - var_x301 * var_x320 - var_x301 * var_x325;
        const double var_x327 = var_x326 * mParameters[22] / (pow(var_x316, 2) * pow(var_chaste_interface__intracellular_ions__cass, 3));
        const double var_x328 = ((var_x168) ? (var_x57 + (0.5 + 374358.83507802623 * var_chaste_interface__membrane__v) * (var_x53 - var_x57)) : (var_x169 * var_x237));
        const double var_x329 = var_x253 * var_x328;
        const double var_x330 = var_x246 * var_x328;
        const double var_x331 = var_x247 * var_x254;
        const double var_x332 = var_x173 * var_x247;
        const double var_x333 = var_x246 * var_x332;
        const double var_x334 = var_x238 * var_x333;
        const double var_x335 = var_x247 * var_x63;
        const double var_x336 = var_x254 * var_x335;
        const double var_x337 = pow(var_x274, (-2));
        const double var_x338 = var_x179 * var_x337;
        const double var_x339 = var_x337 * var_chaste_interface__intracellular_ions__nass;
        const double var_x340 = var_x182 * var_x339;
        const double var_x341 = var_x281 + var_x340 + 60000.0 * var_x338;
        const double var_x342 = var_x272 * var_x341 * var_x82;
        const double var_x343 = (-0.066666666666666666 - 0.026666666666666668 * var_chaste_interface__intracellular_ions__nass) / pow(var_x269, 2);
        const double var_x344 = var_x343 * var_chaste_interface__intracellular_ions__cass;
        const double var_x345 = 1500000.0 * var_x344;
        const double var_x346 = var_x285 * var_x345;
        const double var_x347 = var_x277 * pow(var_chaste_interface__intracellular_ions__nass, 2);
        const double var_x348 = 40853381.752156146 * var_x291 * var_x347;
        const double var_x349 = var_x194 * var_x278 * var_x341;
        const double var_x350 = var_x276 * var_x343;
        const double var_x351 = var_x273 * var_x350;
        const double var_x352 = 13617793.917385383 * var_x291;
        const double var_x353 = var_x351 * var_x352;
        const double var_x354 = var_x181 * var_x337;
        const double var_x355 = var_x270 * var_x354;
        const double var_x356 = var_x273 * var_x352 * var_x355;
        const double var_x357 = var_x342 + var_x346 + var_x348 + var_x349 + var_x353 + var_x356;
        const double var_x358 = var_x279 * (var_x294 + 300000000.0 * var_x338 + var_x205 * var_x339);
        const double var_x359 = 9.0785292782569211 * var_x273;
        const double var_x360 = var_x345 + 27.235587834770765 * var_x347 + var_x350 * var_x359 + var_x355 * var_x359;
        const double var_x361 = var_x295 * var_x360;
        const double var_x362 = var_x126 * var_x360;
        const double var_x363 = var_x211 * var_x347;
        const double var_x364 = var_x214 * var_x273;
        const double var_x365 = var_x350 * var_x364;
        const double var_x366 = var_x355 * var_x364;
        const double var_x367 = var_x217 * var_x344;
        const double var_x368 = var_x293 * (-var_x342 - var_x346 - var_x348 - var_x349 - var_x353 - var_x356 - var_x358 - var_x361 - var_x362 - var_x363 - var_x365 - var_x366 - var_x367 - var_x213 * var_x341);
        const double var_x369 = var_x358 + var_x361 + var_x363 + var_x365 + var_x366;
        const double var_x370 = 3.0597222222222222e-13 * var_x368;
        const double var_x371 = var_x273 * var_x307;
        const double var_x372 = var_x281 * var_x321 + var_x300 * var_x368 + var_x306 * (var_x362 + var_x367) + var_x311 * var_x370 + var_x313 * var_x368 + var_x319 * var_x357 + var_x321 * var_x340 + var_x324 * var_x351 - var_x309 * var_x368 - var_x312 * var_x370 - var_x314 * var_x368 - var_x320 * var_x369 - var_x322 * var_x357 - var_x325 * var_x369 + 81.706763504312292 * var_x323 * var_x347 + 27.235587834770765 * var_x303 * var_x354 * var_x371 + var_x224 * var_x275 * var_x341 * var_x371;
        const double var_x373 = 0.23999999999999996 * var_x60;
        const double var_x374 = _lt_0_row[5];
        const double var_x375 = 1.0 - var_x374;
        const double var_x376 = (var_x374 * var_chaste_interface__Ito__iF + var_x375 * var_chaste_interface__Ito__iS) * var_chaste_interface__Ito__a;
        const double var_x377 = (var_x374 * var_chaste_interface__Ito__iFp + var_x375 * var_chaste_interface__Ito__iSp) * var_chaste_interface__Ito__ap;
        const double var_x378 = 1 / var_chaste_interface__intracellular_ions__ki;
        const double var_x379 = log(var_x378 * mParameters[10]);
        const double var_x380 = -6.1520742882368733e-5 * var_chaste_interface__membrane__v;
        const double var_x381 = (var_x380 + 0.001643362921287705 * var_x379) * mParameters[24];
        const double var_x382 = sqrt(mParameters[10]);
        const double var_x383 = var_x382 * mParameters[20];
        const double var_x384 = 1 / var_chaste_interface__intracellular_ions__cai;
        const double var_x385 = pow(var_x384, 1.3999999999999999);
        const double var_x386 = 1.0 + 6.4818210260626455e-7 * var_x385;
        const double var_x387 = 1 / (0.018329999999999999 * var_chaste_interface__intracellular_ions__nai + var_chaste_interface__intracellular_ions__ki);
        const double var_x388 = mParameters[21] * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2;
        const double var_x389 = _lt_0_row[62];
        const double var_x390 = 1 / (-1.0 + pow((1.0 + 0.035997120230381568 * mParameters[11] / var_x389), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[10]), 2));
        const double var_x391 = var_x390 * pow(mParameters[10], 2);
        const double var_x392 = pow((0.5 + var_chaste_interface__intracellular_ions__ki), 2);
        const double var_x393 = _lt_0_row[63];
        const double var_x394 = 1 / var_x393;
        const double var_x395 = 1.0 + 0.11021712774165104 * var_x394 * var_chaste_interface__intracellular_ions__nai;
        const double var_x396 = pow(var_x395, 3);
        const double var_x397 = pow((-0.25 + var_x392 + 0.25 * var_x396), (-2));
        const double var_x398 = var_x397 * (-4.0 - 8.0 * var_chaste_interface__intracellular_ions__ki);
        const double var_x399 = pow(var_x393, (-3));
        const double var_x400 = var_x399 * var_x89;
        const double var_x401 = var_x398 * var_x400;
        const double var_x402 = var_x391 * var_x401;
        const double var_x403 = var_x390 * var_x79 / pow(var_x389, 3);
        const double var_x404 = 0.09330879953375748 * var_x401 * var_x403;
        const double var_x405 = pow((1 + 0.0028096208831939005 * var_chaste_interface__intracellular_ions__nai + 0.0021553256090254577 * var_chaste_interface__intracellular_ions__ki), (-2));
        const double var_x406 = 1 / (-1.0 + var_x396 + 4.0 * var_x392);
        const double var_x407 = var_x399 * var_x406;
        const double var_x408 = var_x407 * var_x89;
        const double var_x409 = var_x405 * var_x408;
        const double var_x410 = var_x403 * var_x409;
        const double var_x411 = 1.8288767722361083e-15 * var_x410;
        const double var_x412 = 1 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ki + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nai);
        const double var_x413 = var_x403 * var_x412;
        const double var_x414 = 8.4266669949965062e-14 * var_x401 * var_x413;
        const double var_x415 = var_x406 * var_chaste_interface__intracellular_ions__ki;
        const double var_x416 = var_x412 * var_x415;
        const double var_x417 = 3.3937789869608994e-10 * var_x403;
        const double var_x418 = pow(var_chaste_interface__intracellular_ions__ki, 2);
        const double var_x419 = var_x406 * var_x418;
        const double var_x420 = var_x405 * var_x419;
        const double var_x421 = var_x403 * var_x420;
        const double var_x422 = var_x398 * var_x418;
        const double var_x423 = var_x413 * var_x422;
        const double var_x424 = 1.0605559334252811e-11 * var_x423 - 2.3017714043409702e-13 * var_x421 + var_x416 * var_x417;
        const double var_x425 = var_x404 + var_x414 + var_x424 - var_x411 + 751444.4931407267 * var_x402;
        const double var_x426 = var_x391 * var_x408;
        const double var_x427 = var_x412 * var_x419;
        const double var_x428 = var_x391 * var_x419;
        const double var_x429 = var_x403 * var_x419;
        const double var_x430 = 2.6817254812739919 * var_x429 + 1648931648.7518551 * var_x428;
        const double var_x431 = 6585420658.1002293 * var_x391 + 9.6722701128385645e-12 * var_x413 + 10.71014095526842 * var_x403;
        const double var_x432 = var_x403 * var_x408;
        const double var_x433 = var_x408 * var_x412;
        const double var_x434 = var_x403 * var_x433;
        const double var_x435 = 1.348266719199441e-12 * var_x434 + 1.4929407925401197 * var_x432;
        const double var_x436 = 6.3450816326903207e-5 * var_x427 + 5.041496472709802e-7 * var_x433 + 558246.7943749798 * var_x408;
        const double var_x437 = 1 / (var_x430 + var_x431 + var_x435 + var_x436 + 24953131.661984976 * var_x426 + var_x417 * var_x427);
        const double var_x438 = 0.0022442767003488114 * var_x437;
        const double var_x439 = var_x430 + 12930019.771733347 * var_x426;
        const double var_x440 = var_x405 * var_x437;
        const double var_x441 = var_x439 * var_x440;
        const double var_x442 = 8.6068818956382799e-8 * var_x420;
        const double var_x443 = 0.00012690163265380641 * var_x416;
        const double var_x444 = 6.8386140998302939e-10 * var_x409;
        const double var_x445 = var_x403 * var_x405;
        const double var_x446 = var_x398 * var_x412;
        const double var_x447 = 3.9656760204314505e-6 * var_x418 * var_x446;
        const double var_x448 = 34890.424648436237 * var_x401;
        const double var_x449 = 3297863297.5037103 * var_x391 * var_x415;
        const double var_x450 = 3.1509352954436263e-8 * var_x400 * var_x446;
        const double var_x451 = 5.3634509625479838 * var_x403 * var_x415;
        const double var_x452 = 103058228.04699095 * var_x391 * var_x422;
        const double var_x453 = 0.16760784257962449 * var_x403 * var_x422;
        const double var_x454 = var_x411 + var_x442 + var_x444 - var_x404 - var_x414 - var_x443 - var_x447 - var_x448 - var_x449 - var_x450 - var_x451 - var_x452 - var_x453 + 4.6035428086819405e-13 * var_x421 + 1.3120097004743531e-14 * var_x445 - 2.1211118668505621e-11 * var_x423 - 1559570.728874061 * var_x402 - 6.7875579739217989e-10 * var_x403 * var_x416;
        const double var_x455 = var_x403 * var_x427;
        const double var_x456 = pow((var_x391 + 0.25039124064514068 * var_x428 + 7.6555420442407695e-17 * var_x433 + 8.4770104046173956e-5 * var_x408 + 2.0473509426327076e-22 * var_x434 + 0.0037891477184972245 * var_x426 + 9.6350437764149725e-15 * var_x427 + 4.0722159152815902e-10 * var_x429 + 1.4687399051632995e-21 * var_x413 + 1.6263412029867345e-9 * var_x403 + 5.1534733514501733e-20 * var_x455 + 2.2670393738686469e-10 * var_x432), (-2));
        const double var_x457 = 1.6968894934804497e-10 * var_x455;
        const double var_x458 = var_x456 * (var_x435 + var_x457 + 12023111.890251627 * var_x426);
        const double var_x459 = 5.1749881224336655e-23 * var_x458;
        const double var_x460 = var_x449 + var_x451 + var_x452 + var_x453 + 808126.23573333421 * var_x402;
        const double var_x461 = var_x412 * var_x437;
        const double var_x462 = 2.1301338894738516e-13 * var_x461;
        const double var_x463 = var_x424 + var_x443 + var_x447 + var_x448 + var_x450 - var_x442 - var_x444;
        const double var_x464 = var_x391 * var_x437;
        const double var_x465 = 5.4631940052775603 * var_x464;
        const double var_x466 = var_x454 * var_x456;
        const double var_x467 = var_x412 * var_x439;
        const double var_x468 = 4.9117907678261418e-33 * var_x467;
        const double var_x469 = var_x391 * (var_x436 + var_x457);
        const double var_x470 = 1.2597361137986274e-19 * var_x469;
        const double var_x471 = var_x408 * var_x431;
        const double var_x472 = 7.2136780469647828e-24 * var_x471;
        const double var_x473 = var_x431 * var_x437;
        const double var_x474 = var_x401 * var_x473;
        const double var_x475 = var_x432 * var_x440;
        const double var_x476 = 0.001643362921287705 * var_x378;
        const double var_x477 = var_x387 * var_x388 * (-6.1520742882368733e-5 - 3.6912445729421236e-5 / var_x386);
        const double var_x478 = var_x191 * var_x407;
        const double var_x479 = var_x391 * var_x478;
        const double var_x480 = 4.4788223776203591 * var_x403 * var_x478;
        const double var_x481 = var_x397 * pow(var_x395, 2);
        const double var_x482 = var_x481 * var_x89 / pow(var_x393, 4);
        const double var_x483 = var_x391 * var_x482;
        const double var_x484 = 4.0448001575983228e-12 * var_x413 * var_x478;
        const double var_x485 = 2.3840715066649271e-15 * var_x410;
        const double var_x486 = 0.030852683632896775 * var_x403 * var_x482;
        const double var_x487 = 2.786289097871654e-14 * var_x413 * var_x482;
        const double var_x488 = var_x394 * var_x418 * var_x481;
        const double var_x489 = var_x413 * var_x488;
        const double var_x490 = -3.0005234378016216e-13 * var_x421 - 3.5067428637450051e-12 * var_x489;
        const double var_x491 = var_x480 + var_x484 + var_x490 - var_x485 - var_x486 - var_x487 + 36069335.67075488 * var_x479 - 248466.16107375509 * var_x483;
        const double var_x492 = 1.1219685328242758e-7 * var_x420;
        const double var_x493 = 1674740.3831249396 * var_x478;
        const double var_x494 = 8.9146219515644901e-10 * var_x409;
        const double var_x495 = 11536.567171311443 * var_x482;
        const double var_x496 = 1.5124489418129408e-6 * var_x412 * var_x478;
        const double var_x497 = 1.3112562615776865e-6 * var_x412 * var_x488;
        const double var_x498 = 1.0418611138907615e-8 * var_x412 * var_x482;
        const double var_x499 = 34076345.656450219 * var_x391 * var_x488;
        const double var_x500 = 0.055419764988303033 * var_x403 * var_x488;
        const double var_x501 = var_x485 + var_x486 + var_x487 + var_x492 + var_x494 + var_x495 + var_x497 + var_x498 + var_x499 + var_x500 - var_x480 - var_x484 - var_x493 - var_x496 + 6.0010468756032432e-13 * var_x421 + 7.0134857274900101e-12 * var_x489 + 1.7102983595469244e-14 * var_x445 + 515674.21873935661 * var_x483 - 74859394.985954925 * var_x479;
        const double var_x502 = -var_x499 - var_x500 + 38790059.315200046 * var_x479 - 267208.05766560155 * var_x483;
        const double var_x503 = var_x490 + var_x493 + var_x496 - var_x492 - var_x494 - var_x495 - var_x497 - var_x498;
        const double var_x504 = var_x456 * var_x501;
        const double var_x505 = var_x473 * var_x478;
        const double var_x506 = var_x473 * var_x482;
        const double var_x507 = -0.75 * mParameters[10];
        const double var_x508 = 0.75 * var_chaste_interface__intracellular_ions__kss;
        const double var_x509 = var_x56 * (var_x507 + var_x508 * var_x54);
        const double var_x510 = 0.5 + 187179.41753901311 * var_chaste_interface__membrane__v;
        const double var_x511 = var_x167 < 2.6712338705498262e-6;
        const double var_x512 = _lt_0_row[1];
        const double var_x513 = var_x170 / (-1.0 + var_x512);
        const double var_x514 = 0.037435883507802616 * var_x513;
        const double var_x515 = ((var_x511) ? (var_x509 + var_x510 * (-var_x509 + var_x52 * (var_x507 + var_x50 * var_x508))) : (var_x514 * (var_x507 + var_x508 * var_x512)));
        const double var_x516 = var_x248 * var_x253;
        const double var_x517 = var_x247 * (-7.4757545920939191e-7 + 7.4757545920939191e-7 * var_x60);
        const double var_x518 = 8.2233300513033119e-7 * var_x265;
        const double var_x519 = var_x253 * var_x332;
        const double var_x520 = 0.5 + 187179.41753901311 * var_chaste_interface__membrane__v;
        const double var_x521 = 2.0034254029123695e-13 * var_x58;
        const double var_x522 = ((var_x511) ? (var_x521 + var_x520 * (-var_x521 + 2.0034254029123695e-13 * var_x50 * var_x51)) : (0.028076912630851963 * var_x512 * var_x513));
        const double var_x523 = var_x253 * var_x522;
        const double var_x524 = var_x246 * var_x522;
        const double var_x525 = 1 / var_chaste_interface__intracellular_ions__nai;
        const double var_x526 = log(var_x525 * mParameters[11]);
        const double var_x527 = mParameters[19] * var_chaste_interface__INaL__mL;
        const double var_x528 = var_x527 * (var_x380 + 0.001643362921287705 * var_x526);
        const double var_x529 = 0.98999999999999999 * var_chaste_interface__INa__hf;
        const double var_x530 = (var_x529 + 0.010000000000000009 * var_chaste_interface__INa__hs) * var_chaste_interface__INa__j;
        const double var_x531 = (var_x529 + 0.010000000000000009 * var_chaste_interface__INa__hsp) * var_chaste_interface__INa__jp;
        const double var_x532 = pow(var_chaste_interface__INa__m, 3) * mParameters[17];
        const double var_x533 = 6.1520742882368733e-5 * var_x532 * (-26.712338705498265 * var_x526 + var_chaste_interface__membrane__v);
        const double var_x534 = 0.00014764978291768497 * var_x147;
        const double var_x535 = 0.0033664150505232173 * var_x437;
        const double var_x536 = 3.1952008342107772e-13 * var_x461;
        const double var_x537 = 7.762482183650498e-23 * var_x458;
        const double var_x538 = 7.3676861517392123e-33 * var_x467;
        const double var_x539 = 8.19479100791634 * var_x464;
        const double var_x540 = 1.8896041706979408e-19 * var_x469;
        const double var_x541 = 1.0820517070447174e-23 * var_x471;
        const double var_x542 = var_x57 * mParameters[15];
        const double var_x543 = 0.001643362921287705 * var_x525;
        const double var_x544 = -0.75 * mParameters[11];
        const double var_x545 = 0.75 * var_chaste_interface__intracellular_ions__nass;
        const double var_x546 = var_x56 * (var_x544 + var_x54 * var_x545);
        const double var_x547 = ((var_x511) ? (var_x546 + var_x510 * (-var_x546 + var_x52 * (var_x544 + var_x50 * var_x545))) : (var_x514 * (var_x544 + var_x512 * var_x545)));
        const double var_x548 = var_x247 * (-2.6146315725006711e-6 + 2.6146315725006711e-6 * var_x60);
        const double var_x549 = 2.8760947297507386e-6 * var_x265;
        const double var_x550 = 0.0012550231548003222 * var_x317;
        const double var_x551 = -0.16500000000000001 * var_x250 + var_x226 * var_x331;
        const double var_x552 = pow(var_chaste_interface__intracellular_ions__cajsr, (-8));
        const double var_x553 = 1 / (1.0 + 25.62890625 * var_x552);
        const double var_x554 = 2375.0 * var_x553;
        const double var_x555 = 1 / var_chaste_interface__intracellular_ions__cajsr;
        const double var_x556 = 1 / (1.0 + 0.0123 * var_x555);
        const double var_x557 = 4.75 * var_x556 < 0.001;
        const double var_x558 = var_x551 * var_x553;
        const double var_x559 = 0.0025894736842105265 * var_x555;
        const double var_x560 = 0.21052631578947367 + var_x559;
        const double var_x561 = 2.375 * var_x560;
        const double var_x562 = 1.1000000000000001 * var_x265;
        const double var_x563 = var_x238 * var_x562;
        const double var_x564 = var_x263 * var_x335 + var_x264 * var_x563;
        const double var_x565 = var_x553 * var_x561;
        const double var_x566 = var_x336 + var_x246 * var_x563;
        const double var_x567 = var_x566 / (pow((0.039018442310623382 + var_x552), 2) * pow(var_chaste_interface__intracellular_ions__cajsr, 9));
        const double var_x568 = pow(var_chaste_interface__intracellular_ions__cajsr, (-2));
        const double var_x569 = var_x553 * var_x566;
        const double var_x570 = 1.2375000000000001e-5 * var_x334 + var_x329 * var_x335 + var_x330 * var_x562 - var_x234 * var_x331;
        const double var_x571 = 2968.75 * var_x553;
        const double var_x572 = 5.9375 * var_x556 < 0.001;
        const double var_x573 = 0.0020715789473684213 * var_x555;
        const double var_x574 = 0.16842105263157894 + var_x573;
        const double var_x575 = 2.96875 * var_x574;
        const double var_x576 = var_x553 * var_x575;
        
        
        rJacobian[0][0] = 1.0 - (mDt * (-0.00068000000000000005 - var_x5 * var_x6 + var_x0 * var_x6 * (1 - var_x4)));
        rJacobian[0][1] = 0.0;
        rJacobian[0][2] = 0.0;
        rJacobian[0][3] = 0.0;
        rJacobian[0][4] = 0.0;
        rJacobian[0][5] = 0.0;
        rJacobian[0][6] = 0.0;
        rJacobian[0][7] = 0.0;
        rJacobian[0][8] = 0.0;
        rJacobian[0][9] = 0.0;
        rJacobian[0][10] = 0.0;
        rJacobian[0][11] = 0.0;
        rJacobian[0][12] = 0.0;
        rJacobian[0][13] = 0.0;
        rJacobian[0][14] = -(mDt * (3.7500000000000005e-6 * var_x5 * var_x8 + 1.8750000000000003e-7 * var_x7 * pow(var_x0, 2) / pow(var_x2, 3)));
        rJacobian[0][15] = 0.0;
        rJacobian[0][16] = 0.0;
        rJacobian[0][17] = 0.0;
        rJacobian[0][18] = 0.0;
        rJacobian[0][19] = 0.0;
        rJacobian[0][20] = 0.0;
        rJacobian[1][0] = 0.0;
        rJacobian[1][1] = 1.0 - (mDt * (-var_chaste_interface__ICaL__jca));
        rJacobian[1][2] = 0.0;
        rJacobian[1][3] = 0.0;
        rJacobian[1][4] = 0.0;
        rJacobian[1][5] = 0.0;
        rJacobian[1][6] = 0.0;
        rJacobian[1][7] = 0.0;
        rJacobian[1][8] = 0.0;
        rJacobian[1][9] = 0.0;
        rJacobian[1][10] = 0.0;
        rJacobian[1][11] = 0.0;
        rJacobian[1][12] = 0.0;
        rJacobian[1][13] = 0.0;
        rJacobian[1][14] = -(mDt * (7.9999999999999996e-6 * var_x7 * pow(var_x9, 3) / pow((1 / var_chaste_interface__ICaL__jca + 0.001 * pow(var_x9, 4)), 2)));
        rJacobian[1][15] = 0.0;
        rJacobian[1][16] = 0.0;
        rJacobian[1][17] = 0.0;
        rJacobian[1][18] = 0.0;
        rJacobian[1][19] = 0.0;
        rJacobian[1][20] = 0.0;
        rJacobian[2][0] = 0.0;
        rJacobian[2][1] = 0.0;
        rJacobian[2][2] = 1.0 - (mDt * (-var_x10 - var_x12));
        rJacobian[2][3] = -(mDt * (var_x13));
        rJacobian[2][4] = 0.0;
        rJacobian[2][5] = -(mDt * (var_x14));
        rJacobian[2][6] = 0.0;
        rJacobian[2][7] = 0.0;
        rJacobian[2][8] = 0.0;
        rJacobian[2][9] = 0.0;
        rJacobian[2][10] = 0.0;
        rJacobian[2][11] = 0.0;
        rJacobian[2][12] = 0.0;
        rJacobian[2][13] = 0.0;
        rJacobian[2][14] = 0.0;
        rJacobian[2][15] = 0.0;
        rJacobian[2][16] = 0.0;
        rJacobian[2][17] = 0.0;
        rJacobian[2][18] = 0.0;
        rJacobian[2][19] = 0.0;
        rJacobian[2][20] = 0.0;
        rJacobian[3][0] = 0.0;
        rJacobian[3][1] = 0.0;
        rJacobian[3][2] = -(mDt * (var_x10));
        rJacobian[3][3] = 1.0 - (mDt * (-var_x13 - var_x15 - var_x16));
        rJacobian[3][4] = 0.0;
        rJacobian[3][5] = 0.0;
        rJacobian[3][6] = -(mDt * (var_x17));
        rJacobian[3][7] = 0.0;
        rJacobian[3][8] = 0.0;
        rJacobian[3][9] = -(mDt * (var_x18));
        rJacobian[3][10] = 0.0;
        rJacobian[3][11] = 0.0;
        rJacobian[3][12] = 0.0;
        rJacobian[3][13] = 0.0;
        rJacobian[3][14] = 0.0;
        rJacobian[3][15] = 0.0;
        rJacobian[3][16] = 0.0;
        rJacobian[3][17] = 0.0;
        rJacobian[3][18] = 0.0;
        rJacobian[3][19] = 0.0;
        rJacobian[3][20] = 0.0;
        rJacobian[4][0] = 0.0;
        rJacobian[4][1] = 0.0;
        rJacobian[4][2] = 0.0;
        rJacobian[4][3] = 0.0;
        rJacobian[4][4] = 1.0 - (mDt * (-2 * var_x19));
        rJacobian[4][5] = 0.0;
        rJacobian[4][6] = 0.0;
        rJacobian[4][7] = 0.0;
        rJacobian[4][8] = -(mDt * (mParameters[2]));
        rJacobian[4][9] = 0.0;
        rJacobian[4][10] = -(mDt * (mParameters[2]));
        rJacobian[4][11] = 0.0;
        rJacobian[4][12] = 0.0;
        rJacobian[4][13] = 0.0;
        rJacobian[4][14] = 0.0;
        rJacobian[4][15] = 0.0;
        rJacobian[4][16] = 0.0;
        rJacobian[4][17] = 0.0;
        rJacobian[4][18] = 0.0;
        rJacobian[4][19] = 0.0;
        rJacobian[4][20] = 0.0;
        rJacobian[5][0] = 0.0;
        rJacobian[5][1] = 0.0;
        rJacobian[5][2] = -(mDt * (var_x12));
        rJacobian[5][3] = 0.0;
        rJacobian[5][4] = 0.0;
        rJacobian[5][5] = 1.0 - (mDt * (-var_x14 - var_x20));
        rJacobian[5][6] = -(mDt * (var_x21));
        rJacobian[5][7] = 0.0;
        rJacobian[5][8] = 0.0;
        rJacobian[5][9] = 0.0;
        rJacobian[5][10] = 0.0;
        rJacobian[5][11] = 0.0;
        rJacobian[5][12] = 0.0;
        rJacobian[5][13] = 0.0;
        rJacobian[5][14] = 0.0;
        rJacobian[5][15] = 0.0;
        rJacobian[5][16] = 0.0;
        rJacobian[5][17] = 0.0;
        rJacobian[5][18] = 0.0;
        rJacobian[5][19] = 0.0;
        rJacobian[5][20] = 0.0;
        rJacobian[6][0] = 0.0;
        rJacobian[6][1] = 0.0;
        rJacobian[6][2] = 0.0;
        rJacobian[6][3] = -(mDt * (var_x16));
        rJacobian[6][4] = 0.0;
        rJacobian[6][5] = -(mDt * (var_x20));
        rJacobian[6][6] = 1.0 - (mDt * (-var_x17 - var_x21 - var_x22));
        rJacobian[6][7] = -(mDt * (var_x23));
        rJacobian[6][8] = 0.0;
        rJacobian[6][9] = 0.0;
        rJacobian[6][10] = 0.0;
        rJacobian[6][11] = 0.0;
        rJacobian[6][12] = 0.0;
        rJacobian[6][13] = 0.0;
        rJacobian[6][14] = 0.0;
        rJacobian[6][15] = 0.0;
        rJacobian[6][16] = 0.0;
        rJacobian[6][17] = 0.0;
        rJacobian[6][18] = 0.0;
        rJacobian[6][19] = 0.0;
        rJacobian[6][20] = 0.0;
        rJacobian[7][0] = 0.0;
        rJacobian[7][1] = 0.0;
        rJacobian[7][2] = 0.0;
        rJacobian[7][3] = 0.0;
        rJacobian[7][4] = 0.0;
        rJacobian[7][5] = 0.0;
        rJacobian[7][6] = -(mDt * (var_x22));
        rJacobian[7][7] = 1.0 - (mDt * (var_x29 - var_x23 - var_x26));
        rJacobian[7][8] = -(mDt * (var_x31));
        rJacobian[7][9] = -(mDt * (var_x32));
        rJacobian[7][10] = 0.0;
        rJacobian[7][11] = 0.0;
        rJacobian[7][12] = 0.0;
        rJacobian[7][13] = 0.0;
        rJacobian[7][14] = 0.0;
        rJacobian[7][15] = 0.0;
        rJacobian[7][16] = 0.0;
        rJacobian[7][17] = 0.0;
        rJacobian[7][18] = 0.0;
        rJacobian[7][19] = 0.0;
        rJacobian[7][20] = 0.0;
        rJacobian[8][0] = 0.0;
        rJacobian[8][1] = 0.0;
        rJacobian[8][2] = 0.0;
        rJacobian[8][3] = 0.0;
        rJacobian[8][4] = -(mDt * (var_x19));
        rJacobian[8][5] = 0.0;
        rJacobian[8][6] = 0.0;
        rJacobian[8][7] = -(mDt * (var_x28));
        rJacobian[8][8] = 1.0 - (mDt * (var_x33 - var_x31));
        rJacobian[8][9] = 0.0;
        rJacobian[8][10] = 0.0;
        rJacobian[8][11] = 0.0;
        rJacobian[8][12] = 0.0;
        rJacobian[8][13] = 0.0;
        rJacobian[8][14] = 0.0;
        rJacobian[8][15] = 0.0;
        rJacobian[8][16] = 0.0;
        rJacobian[8][17] = 0.0;
        rJacobian[8][18] = 0.0;
        rJacobian[8][19] = 0.0;
        rJacobian[8][20] = 0.0;
        rJacobian[9][0] = 0.0;
        rJacobian[9][1] = 0.0;
        rJacobian[9][2] = 0.0;
        rJacobian[9][3] = -(mDt * (var_x15));
        rJacobian[9][4] = 0.0;
        rJacobian[9][5] = 0.0;
        rJacobian[9][6] = 0.0;
        rJacobian[9][7] = -(mDt * (var_x26));
        rJacobian[9][8] = 0.0;
        rJacobian[9][9] = 1.0 - (mDt * (var_x29 - var_x18 - var_x32));
        rJacobian[9][10] = -(mDt * (mParameters[3]));
        rJacobian[9][11] = 0.0;
        rJacobian[9][12] = 0.0;
        rJacobian[9][13] = 0.0;
        rJacobian[9][14] = 0.0;
        rJacobian[9][15] = 0.0;
        rJacobian[9][16] = 0.0;
        rJacobian[9][17] = 0.0;
        rJacobian[9][18] = 0.0;
        rJacobian[9][19] = 0.0;
        rJacobian[9][20] = 0.0;
        rJacobian[10][0] = 0.0;
        rJacobian[10][1] = 0.0;
        rJacobian[10][2] = 0.0;
        rJacobian[10][3] = 0.0;
        rJacobian[10][4] = -(mDt * (var_x19));
        rJacobian[10][5] = 0.0;
        rJacobian[10][6] = 0.0;
        rJacobian[10][7] = 0.0;
        rJacobian[10][8] = 0.0;
        rJacobian[10][9] = -(mDt * (var_x28));
        rJacobian[10][10] = 1.0 - (mDt * (var_x33 - mParameters[3]));
        rJacobian[10][11] = 0.0;
        rJacobian[10][12] = 0.0;
        rJacobian[10][13] = 0.0;
        rJacobian[10][14] = 0.0;
        rJacobian[10][15] = 0.0;
        rJacobian[10][16] = 0.0;
        rJacobian[10][17] = 0.0;
        rJacobian[10][18] = 0.0;
        rJacobian[10][19] = 0.0;
        rJacobian[10][20] = 0.0;
        rJacobian[11][0] = -(mDt * (var_x49 * (0.00014649816176470588 * var_x40 - 5.3272058823529409e-5 * var_x43) * mParameters[8]));
        rJacobian[11][1] = 0.0;
        rJacobian[11][2] = 0.0;
        rJacobian[11][3] = 0.0;
        rJacobian[11][4] = 0.0;
        rJacobian[11][5] = 0.0;
        rJacobian[11][6] = 0.0;
        rJacobian[11][7] = 0.0;
        rJacobian[11][8] = 0.0;
        rJacobian[11][9] = 0.0;
        rJacobian[11][10] = 0.0;
        rJacobian[11][11] = 1.0 - (mDt * (((var_x168) ? (var_x166 * (var_x165 - 11.515416819289165 * var_x160 * (var_x52 * (var_x161 + var_x50 * var_chaste_interface__intracellular_ions__cai) * mParameters[13] - var_x162 * var_x56 * mParameters[13]) - var_x162 * var_x55 * var_x59) + var_x49 * (var_x159 + (-1.5380185720592183e-5 - 11.515416819289165 * var_chaste_interface__membrane__v) * (var_x53 * mParameters[13] - var_x57 * mParameters[13]) - var_x58 * var_x59)) : (var_x166 * (var_x165 - var_x172 * (var_x161 + var_x169 * var_chaste_interface__intracellular_ions__cai)) + var_x49 * (var_x159 - var_x169 * var_x172)))));
        rJacobian[11][12] = 0.0;
        rJacobian[11][13] = -(mDt * (2.1308823529411761e-5 * var_x48 * mParameters[8]));
        rJacobian[11][14] = -(mDt * (var_x49 * (0.14705882352941174 + (3.9954044117647064e-9 * var_x175 - 1.0987362132352942e-8 * var_x176) * mParameters[8])));
        rJacobian[11][15] = 0.0;
        rJacobian[11][16] = 0.0;
        rJacobian[11][17] = -(mDt * (var_x148 * var_x225 * var_x48));
        rJacobian[11][18] = 0.0;
        rJacobian[11][19] = 0.0;
        rJacobian[11][20] = 0.0;
        rJacobian[12][0] = -(mDt * (var_x231 * (var_x226 * var_chaste_interface__ryr__Jrelp - var_x226 * var_chaste_interface__ryr__Jrelnp)));
        rJacobian[12][1] = 0.0;
        rJacobian[12][2] = 0.0;
        rJacobian[12][3] = 0.0;
        rJacobian[12][4] = 0.0;
        rJacobian[12][5] = 0.0;
        rJacobian[12][6] = 0.0;
        rJacobian[12][7] = 0.0;
        rJacobian[12][8] = 0.0;
        rJacobian[12][9] = 0.0;
        rJacobian[12][10] = 0.0;
        rJacobian[12][11] = 0.0;
        rJacobian[12][12] = 1.0 - (mDt * (-var_x232 + 0.25 * (-var_x233 + 0.01 * var_chaste_interface__intracellular_ions__cansr - 0.01 * var_chaste_interface__intracellular_ions__cajsr) / (pow(var_x227, 3) * pow((0.125 + var_x228), 2))));
        rJacobian[12][13] = -(mDt * (var_x232));
        rJacobian[12][14] = -(mDt * (var_x231 * (var_x234 * var_chaste_interface__ryr__Jrelnp - var_x234 * var_chaste_interface__ryr__Jrelp)));
        rJacobian[12][15] = 0.0;
        rJacobian[12][16] = 0.0;
        rJacobian[12][17] = 0.0;
        rJacobian[12][18] = 0.0;
        rJacobian[12][19] = -(mDt * (var_x231 * (-1.0 + var_x62)));
        rJacobian[12][20] = -(mDt * (-var_x230 * var_x62));
        rJacobian[13][0] = -(mDt * ((0.00065625000000000004 * var_x43 - 0.0018046875000000001 * var_x40) * mParameters[8]));
        rJacobian[13][1] = 0.0;
        rJacobian[13][2] = 0.0;
        rJacobian[13][3] = 0.0;
        rJacobian[13][4] = 0.0;
        rJacobian[13][5] = 0.0;
        rJacobian[13][6] = 0.0;
        rJacobian[13][7] = 0.0;
        rJacobian[13][8] = 0.0;
        rJacobian[13][9] = 0.0;
        rJacobian[13][10] = 0.0;
        rJacobian[13][11] = -(mDt * ((var_x163 + var_x164 - 0.0043750000000000004 * var_x66 - 0.01203125 * var_x65) * mParameters[8]));
        rJacobian[13][12] = -(mDt * (0.00086956521739130427));
        rJacobian[13][13] = 1.0 - (mDt * (-0.00086956521739130427 - 0.00026249999999999998 * mParameters[8]));
        rJacobian[13][14] = -(mDt * ((1.3535156250000001e-7 * var_x176 - 4.9218750000000005e-8 * var_x175) * mParameters[8]));
        rJacobian[13][15] = 0.0;
        rJacobian[13][16] = 0.0;
        rJacobian[13][17] = 0.0;
        rJacobian[13][18] = 0.0;
        rJacobian[13][19] = 0.0;
        rJacobian[13][20] = 0.0;
        rJacobian[14][0] = -(mDt * (var_x259 * (0.00017256568378504431 * var_x250 + (var_x235 * var_chaste_interface__ryr__Jrelnp - var_x235 * var_chaste_interface__ryr__Jrelp) * mParameters[7] - 0.00015687789435004027 * var_x248 * var_x254)));
        rJacobian[14][1] = -(mDt * (var_x259 * (var_x260 * var_x263 - var_x264 * var_x267)));
        rJacobian[14][2] = 0.0;
        rJacobian[14][3] = 0.0;
        rJacobian[14][4] = 0.0;
        rJacobian[14][5] = 0.0;
        rJacobian[14][6] = 0.0;
        rJacobian[14][7] = 0.0;
        rJacobian[14][8] = 0.0;
        rJacobian[14][9] = 0.0;
        rJacobian[14][10] = 0.0;
        rJacobian[14][11] = -(mDt * (5.0 * var_x258));
        rJacobian[14][12] = 0.0;
        rJacobian[14][13] = 0.0;
        rJacobian[14][14] = 1.0 - (mDt * (var_x259 * (-5.0 + 1.882534732200483e-11 * var_x327 - 1.2942426283878324e-8 * var_x334 + var_x260 * var_x329 + var_x315 * var_x318 + (var_x268 * var_chaste_interface__ryr__Jrelp - var_x268 * var_chaste_interface__ryr__Jrelnp) * mParameters[7] - var_x266 * var_x330 + 1.1765842076253021e-8 * var_x173 * var_x331) + (0.019557600000000001 / pow(var_x255, 3) + 8.1780000000000006e-5 / pow(var_x256, 3)) * (5.0 * var_chaste_interface__intracellular_ions__cai + 0.23999999999999996 * var_x233 - 5.0 * var_chaste_interface__intracellular_ions__cass - 0.0010458526290002684 * var_x336 + var_x318 * var_x326 - var_x246 * var_x267) / pow(var_x257, 2)));
        rJacobian[14][15] = 0.0;
        rJacobian[14][16] = 0.0;
        rJacobian[14][17] = 0.0;
        rJacobian[14][18] = -(mDt * (var_x258 * var_x318 * var_x372));
        rJacobian[14][19] = -(mDt * (var_x259 * (0.23999999999999996 - var_x373) * mParameters[7]));
        rJacobian[14][20] = -(mDt * (var_x258 * var_x373 * mParameters[7]));
        rJacobian[15][0] = -(mDt * (var_x381 * (var_x226 * var_x376 - var_x226 * var_x377)));
        rJacobian[15][1] = 0.0;
        rJacobian[15][2] = 0.0;
        rJacobian[15][3] = 0.0;
        rJacobian[15][4] = 0.0;
        rJacobian[15][5] = 0.0;
        rJacobian[15][6] = 0.0;
        rJacobian[15][7] = 0.0;
        rJacobian[15][8] = 0.0;
        rJacobian[15][9] = -(mDt * (-2.6474312514413617e-5 * var_x383 * (-26.712338705498265 * var_x379 + var_chaste_interface__membrane__v)));
        rJacobian[15][10] = 0.0;
        rJacobian[15][11] = -(mDt * (-3.3496381359330236e-11 * var_x384 * var_x385 * var_x388 * (-26.712338705498265 * log(var_x387 * (0.018329999999999999 * mParameters[11] + mParameters[10])) + var_chaste_interface__membrane__v) / pow(var_x386, 2)));
        rJacobian[15][12] = 0.0;
        rJacobian[15][13] = 0.0;
        rJacobian[15][14] = -(mDt * (var_x381 * (var_x234 * var_x377 - var_x234 * var_x376)));
        rJacobian[15][15] = 1.0 - (mDt * (-0.014705882352941176 + 26.712338705498265 * var_x477 + (4.1045055277386378e-18 * var_x475 + 2.8894523143943372e-16 * var_x441 - 1.95525685054704e-5 * var_x474 + var_x425 * var_x438 + var_x454 * var_x459 + var_x463 * var_x465 + var_x466 * var_x470 - var_x460 * var_x462 - var_x466 * var_x468 - var_x466 * var_x472) * mParameters[23] - var_x476 * mParameters[14] / (_lt_0_row[10]) - var_x476 * (var_x376 * var_x63 + var_x377 * var_x62) * mParameters[24] - 0.00070719080288022792 * var_x378 * var_x383 * var_chaste_interface__IKr__O - var_x382 * var_x476 * mParameters[18] * var_chaste_interface__IK1__xk1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * mParameters[10]))));
        rJacobian[15][16] = -(mDt * (0.014705882352941176));
        rJacobian[15][17] = -(mDt * (0.48963716847178318 * var_x477 + (6.4650838219344423e-6 * var_x506 + 3.7666074812640467e-16 * var_x441 + 5.3505161343735813e-18 * var_x475 - 0.0009385232882625792 * var_x505 + var_x438 * var_x491 + var_x459 * var_x501 + var_x465 * var_x503 + var_x470 * var_x504 - var_x462 * var_x502 - var_x468 * var_x504 - var_x472 * var_x504) * mParameters[23]));
        rJacobian[15][18] = 0.0;
        rJacobian[15][19] = 0.0;
        rJacobian[15][20] = 0.0;
        rJacobian[16][0] = -(mDt * (1.2334995076954966e-7 * var_x249 * var_x515 - 1.1213631888140878e-7 * var_x515 * var_x516));
        rJacobian[16][1] = -(mDt * (var_x262 * var_x515 * var_x517 - var_x264 * var_x515 * var_x518));
        rJacobian[16][2] = 0.0;
        rJacobian[16][3] = 0.0;
        rJacobian[16][4] = 0.0;
        rJacobian[16][5] = 0.0;
        rJacobian[16][6] = 0.0;
        rJacobian[16][7] = 0.0;
        rJacobian[16][8] = 0.0;
        rJacobian[16][9] = 0.0;
        rJacobian[16][10] = 0.0;
        rJacobian[16][11] = 0.0;
        rJacobian[16][12] = 0.0;
        rJacobian[16][13] = 0.0;
        rJacobian[16][14] = -(mDt * (8.4102239161056588e-12 * var_x515 * var_x519 - 9.251246307716226e-12 * var_x333 * var_x515));
        rJacobian[16][15] = -(mDt * (0.5));
        rJacobian[16][16] = 1.0 - (mDt * (-0.5 + var_x517 * var_x523 - var_x518 * var_x524));
        rJacobian[16][17] = 0.0;
        rJacobian[16][18] = 0.0;
        rJacobian[16][19] = 0.0;
        rJacobian[16][20] = 0.0;
        rJacobian[17][0] = -(mDt * (var_x528 * (var_x226 * var_chaste_interface__INaL__hL - var_x226 * var_chaste_interface__INaL__hLp) - var_x533 * (var_x226 * var_x530 - var_x226 * var_x531)));
        rJacobian[17][1] = 0.0;
        rJacobian[17][2] = 0.0;
        rJacobian[17][3] = 0.0;
        rJacobian[17][4] = 0.0;
        rJacobian[17][5] = 0.0;
        rJacobian[17][6] = 0.0;
        rJacobian[17][7] = 0.0;
        rJacobian[17][8] = 0.0;
        rJacobian[17][9] = 0.0;
        rJacobian[17][10] = 0.0;
        rJacobian[17][11] = -(mDt * (-6.644240231295822e-12 * var_x158 - var_x145 * var_x534));
        rJacobian[17][12] = 0.0;
        rJacobian[17][13] = 0.0;
        rJacobian[17][14] = -(mDt * (var_x528 * (var_x234 * var_chaste_interface__INaL__hLp - var_x234 * var_chaste_interface__INaL__hL) - var_x533 * (var_x234 * var_x531 - var_x234 * var_x530)));
        rJacobian[17][15] = -(mDt * ((2.93288527582056e-5 * var_x474 - 4.3341784715915055e-16 * var_x441 - 6.1567582916079571e-18 * var_x475 + var_x460 * var_x536 + var_x466 * var_x538 + var_x466 * var_x541 - var_x425 * var_x535 - var_x454 * var_x537 - var_x463 * var_x539 - var_x466 * var_x540) * mParameters[23]));
        rJacobian[17][16] = 0.0;
        rJacobian[17][17] = 1.0 - (mDt * (-0.014705882352941176 - 6.1520742882368733e-5 * ((var_x511) ? (var_x542 + var_x520 * (-var_x542 + var_x53 * mParameters[15])) : (var_x512 * var_x514 * mParameters[15])) + (0.0014077849323938687 * var_x505 - 9.6976257329016631e-6 * var_x506 - 5.6499112218960703e-16 * var_x441 - 8.025774201560372e-18 * var_x475 + var_x502 * var_x536 + var_x504 * var_x538 + var_x504 * var_x541 - var_x491 * var_x535 - var_x501 * var_x537 - var_x503 * var_x539 - var_x504 * var_x540) * mParameters[23] - var_x225 * var_x534 - var_x527 * var_x543 * (var_x62 * var_chaste_interface__INaL__hLp + var_x63 * var_chaste_interface__INaL__hL) - var_x532 * var_x543 * (var_x530 * var_x63 + var_x531 * var_x62)));
        rJacobian[17][18] = -(mDt * (0.014705882352941176));
        rJacobian[17][19] = 0.0;
        rJacobian[17][20] = 0.0;
        rJacobian[18][0] = -(mDt * (4.3141420946261074e-7 * var_x249 * var_x547 - 3.9219473587510065e-7 * var_x516 * var_x547));
        rJacobian[18][1] = -(mDt * (var_x262 * var_x547 * var_x548 - var_x264 * var_x547 * var_x549));
        rJacobian[18][2] = 0.0;
        rJacobian[18][3] = 0.0;
        rJacobian[18][4] = 0.0;
        rJacobian[18][5] = 0.0;
        rJacobian[18][6] = 0.0;
        rJacobian[18][7] = 0.0;
        rJacobian[18][8] = 0.0;
        rJacobian[18][9] = 0.0;
        rJacobian[18][10] = 0.0;
        rJacobian[18][11] = 0.0;
        rJacobian[18][12] = 0.0;
        rJacobian[18][13] = 0.0;
        rJacobian[18][14] = -(mDt * (-5.6476041966014488e-11 * var_x327 - var_x315 * var_x550 + 2.9414605190632549e-11 * var_x519 * var_x547 - 3.2356065709695809e-11 * var_x333 * var_x547));
        rJacobian[18][15] = 0.0;
        rJacobian[18][16] = 0.0;
        rJacobian[18][17] = -(mDt * (0.5));
        rJacobian[18][18] = 1.0 - (mDt * (-0.5 + var_x523 * var_x548 - var_x372 * var_x550 - var_x524 * var_x549));
        rJacobian[18][19] = 0.0;
        rJacobian[18][20] = 0.0;
        rJacobian[19][0] = -(mDt * (((var_x557) ? (-var_x551 * var_x554) : (-var_x558 * var_x561))));
        rJacobian[19][1] = -(mDt * (((var_x557) ? (-var_x554 * var_x564) : (-var_x564 * var_x565))));
        rJacobian[19][2] = 0.0;
        rJacobian[19][3] = 0.0;
        rJacobian[19][4] = 0.0;
        rJacobian[19][5] = 0.0;
        rJacobian[19][6] = 0.0;
        rJacobian[19][7] = 0.0;
        rJacobian[19][8] = 0.0;
        rJacobian[19][9] = 0.0;
        rJacobian[19][10] = 0.0;
        rJacobian[19][11] = 0.0;
        rJacobian[19][12] = -(mDt * (((var_x557) ? (-741.35040390184417 * var_x567) : (-0.0025894736842105265 * var_x568 * (-var_chaste_interface__ryr__Jrelnp - 2.375 * var_x569) - 0.74135040390184426 * var_x560 * var_x567))));
        rJacobian[19][13] = 0.0;
        rJacobian[19][14] = -(mDt * (((var_x557) ? (-var_x554 * var_x570) : (-var_x565 * var_x570))));
        rJacobian[19][15] = 0.0;
        rJacobian[19][16] = 0.0;
        rJacobian[19][17] = 0.0;
        rJacobian[19][18] = 0.0;
        rJacobian[19][19] = 1.0 - (mDt * (((var_x557) ? (-1000.0) : (-0.21052631578947367 - var_x559))));
        rJacobian[19][20] = 0.0;
        rJacobian[20][0] = -(mDt * (((var_x572) ? (-var_x551 * var_x571) : (-var_x558 * var_x575))));
        rJacobian[20][1] = -(mDt * (((var_x572) ? (-var_x564 * var_x571) : (-var_x564 * var_x576))));
        rJacobian[20][2] = 0.0;
        rJacobian[20][3] = 0.0;
        rJacobian[20][4] = 0.0;
        rJacobian[20][5] = 0.0;
        rJacobian[20][6] = 0.0;
        rJacobian[20][7] = 0.0;
        rJacobian[20][8] = 0.0;
        rJacobian[20][9] = 0.0;
        rJacobian[20][10] = 0.0;
        rJacobian[20][11] = 0.0;
        rJacobian[20][12] = -(mDt * (((var_x572) ? (-926.68800487730527 * var_x567) : (-0.0020715789473684213 * var_x568 * (-var_chaste_interface__ryr__Jrelp - 2.96875 * var_x569) - 0.92668800487730529 * var_x567 * var_x574))));
        rJacobian[20][13] = 0.0;
        rJacobian[20][14] = -(mDt * (((var_x572) ? (-var_x570 * var_x571) : (-var_x570 * var_x576))));
        rJacobian[20][15] = 0.0;
        rJacobian[20][16] = 0.0;
        rJacobian[20][17] = 0.0;
        rJacobian[20][18] = 0.0;
        rJacobian[20][19] = 0.0;
        rJacobian[20][20] = 1.0 - (mDt * (((var_x572) ? (-1000.0) : (-0.16842105263157894 - var_x573))));
    }

    void Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -88.00190465
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 8.6e-05
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0125840447
        double var_chaste_interface__intracellular_ions__nai = rY[3];
        // Units: millimolar; Initial value: 7.268004498
        double var_chaste_interface__intracellular_ions__nass = rY[4];
        // Units: millimolar; Initial value: 7.268089977
        double var_chaste_interface__intracellular_ions__ki = rY[5];
        // Units: millimolar; Initial value: 144.6555918
        double var_chaste_interface__intracellular_ions__kss = rY[6];
        // Units: millimolar; Initial value: 144.6555651
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 8.49e-05
        double var_chaste_interface__INa__m = rY[10];
        // Units: dimensionless; Initial value: 0.007344121102
        double var_chaste_interface__INa__hf = rY[11];
        // Units: dimensionless; Initial value: 0.6981071913
        double var_chaste_interface__INa__hs = rY[12];
        // Units: dimensionless; Initial value: 0.6980895801
        double var_chaste_interface__INa__j = rY[13];
        // Units: dimensionless; Initial value: 0.6979908432
        double var_chaste_interface__INa__hsp = rY[14];
        // Units: dimensionless; Initial value: 0.4549485525
        double var_chaste_interface__INa__jp = rY[15];
        // Units: dimensionless; Initial value: 0.6979245865
        double var_chaste_interface__INaL__mL = rY[16];
        // Units: dimensionless; Initial value: 0.0001882617273
        double var_chaste_interface__INaL__hL = rY[17];
        // Units: dimensionless; Initial value: 0.5008548855
        double var_chaste_interface__INaL__hLp = rY[18];
        // Units: dimensionless; Initial value: 0.2693065357
        double var_chaste_interface__Ito__a = rY[19];
        // Units: dimensionless; Initial value: 0.001001097687
        double var_chaste_interface__Ito__iF = rY[20];
        // Units: dimensionless; Initial value: 0.9995541745
        double var_chaste_interface__Ito__iS = rY[21];
        // Units: dimensionless; Initial value: 0.5865061736
        double var_chaste_interface__Ito__ap = rY[22];
        // Units: dimensionless; Initial value: 0.0005100862934
        double var_chaste_interface__Ito__iFp = rY[23];
        // Units: dimensionless; Initial value: 0.9995541823
        double var_chaste_interface__Ito__iSp = rY[24];
        // Units: dimensionless; Initial value: 0.6393399482
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 2.34e-09
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 0.9102412777
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 0.9998046777
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 0.9999738312
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__nca = rY[33];
        // Units: dimensionless; Initial value: 0.002749414044
        double var_chaste_interface__IKr__O = rY[38];
        // Units: dimensionless; Initial value: 0.00015551
        double var_chaste_interface__IKs__xs1 = rY[43];
        // Units: dimensionless; Initial value: 0.2707758025
        double var_chaste_interface__IKs__xs2 = rY[44];
        // Units: dimensionless; Initial value: 0.0001928503426
        double var_chaste_interface__IK1__xk1 = rY[45];
        // Units: dimensionless; Initial value: 0.9967597594
        
        // Lookup table indexing
        const bool _oob_0 = Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        const double var_ICaL__f = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ff; // dimensionless
        const double var_ICaL__fp = 0.40000000000000002 * var_chaste_interface__ICaL__fs + 0.59999999999999998 * var_chaste_interface__ICaL__ffp; // dimensionless
        const double var_environment__celltype = 0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[12]) : ((var_environment__celltype == 2.0) ? (2.5 * mParameters[12]) : (mParameters[12]))); // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * mParameters[22]) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * mParameters[22]) : (mParameters[22]))); // milliS_per_microF
        const double var_INaCa_i__h10_i = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[11]) * mParameters[11]; // dimensionless
        const double var_INaCa_i__h10_ss = 13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[11]) * mParameters[11]; // dimensionless
        const double var_INaCa_i__k1_i = 1500000.0 * mParameters[9] / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k1_ss = 1500000.0 * mParameters[9] / var_INaCa_i__h10_ss; // dimensionless
        const double var_IpCa__IpCa = mParameters[16] * var_chaste_interface__intracellular_ions__cai / (0.00050000000000000001 + var_chaste_interface__intracellular_ions__cai); // microA_per_microF
        const double var_CaMK__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__CaMK__CaMKt) / (1.0 + 0.0015 / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__h4_i = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nai) * var_chaste_interface__intracellular_ions__nai; // dimensionless
        const double var_INaCa_i__k6_i = 1500000.0 * var_chaste_interface__intracellular_ions__cai / var_INaCa_i__h4_i; // dimensionless
        const double var_INaK__b3 = 5.7707741857267899e-10 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ki + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nai); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__k6_ss = 1500000.0 * var_chaste_interface__intracellular_ions__cass / var_INaCa_i__h4_ss; // dimensionless
        const double var_membrane__Istim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double var_ICaL__Afcaf = _lt_0_row[0]; // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__ICaK = 0.00035740000000000001 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCa * var_chaste_interface__ICaL__d + 0.00035740000000000001 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * _lt_0_row[3]) / (_lt_0_row[4]))) * var_ICaL__PCa * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * _lt_0_row[3]) / (_lt_0_row[4]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaNa = 0.00125 * (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCa * var_chaste_interface__ICaL__d + 0.00125 * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * _lt_0_row[1]) / (_lt_0_row[2]))) * var_ICaL__PCap * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cai * exp(9.9999999999999995e-8)) * mParameters[13] / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * mParameters[13] / (-1.0 + exp(-9.9999999999999995e-8))) + 2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * mParameters[13] / (-1.0 + exp(-9.9999999999999995e-8))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cai * _lt_0_row[3]) * mParameters[13] / (_lt_0_row[4]))); // microA_per_microF
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-mParameters[11] + var_chaste_interface__intracellular_ions__nai * exp(9.9999999999999995e-8)) * mParameters[15] / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-mParameters[11] + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * mParameters[15] / (-1.0 + exp(-9.9999999999999995e-8))) + 2.671233870549826e-13 * (-mParameters[11] + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * mParameters[15] / (-1.0 + exp(-9.9999999999999995e-8))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-mParameters[11] + var_chaste_interface__intracellular_ions__nai * _lt_0_row[1]) * mParameters[15] / (_lt_0_row[2]))); // microA_per_microF
        const double var_Ito__AiF = _lt_0_row[5]; // dimensionless
        const double var_Ito__AiS = 1.0 - var_Ito__AiF; // dimensionless
        const double var_INaCa_i__hca = _lt_0_row[6]; // dimensionless
        const double var_INaCa_i__hna = _lt_0_row[7]; // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + 0.011348161597821153 * (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass; // dimensionless
        const double var_INaCa_i__h2_i = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h2_ss = 0.011348161597821153 * var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[11]; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + 0.011348161597821153 * (1.0 + 1 / var_INaCa_i__hna) * mParameters[11]; // dimensionless
        const double var_INaCa_i__h8_i = 0.011348161597821153 * mParameters[11] / (var_INaCa_i__h7_i * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__h8_ss = 0.011348161597821153 * mParameters[11] / (var_INaCa_i__h7_ss * var_INaCa_i__hna); // dimensionless
        const double var_INaCa_i__k3pp_i = 5000.0 * var_INaCa_i__h8_i; // dimensionless
        const double var_INaCa_i__k3_i = 60000.0 / var_INaCa_i__h7_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = 5000.0 * var_INaCa_i__h8_ss; // dimensionless
        const double var_INaCa_i__k3_ss = 60000.0 / var_INaCa_i__h7_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4pp_i = 5000.0 * var_INaCa_i__h2_i; // dimensionless
        const double var_INaCa_i__k4_i = 60000.0 / (var_INaCa_i__h1_i * var_INaCa_i__hca) + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = 5000.0 * var_INaCa_i__h2_ss; // dimensionless
        const double var_INaCa_i__k4_ss = 60000.0 / (var_INaCa_i__h1_ss * var_INaCa_i__hca) + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = 800.0 * pow(var_chaste_interface__intracellular_ions__nai, 2) * var_INaCa_i__h2_i / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k7_ss = 800.0 * pow(var_chaste_interface__intracellular_ions__nass, 2) * var_INaCa_i__h2_ss / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k8_i = 800.0 * pow(mParameters[11], 2) * var_INaCa_i__h8_i / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k8_ss = 800.0 * pow(mParameters[11], 2) * var_INaCa_i__h8_ss / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__x1_i = 5000.0 * (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k7_i + 5000.0 * (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = 5000.0 * (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k7_ss + 5000.0 * (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i + (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i; // dimensionless
        const double var_INaCa_i__x2_ss = (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss; // dimensionless
        const double var_INaCa_i__x3_i = (5000.0 + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (5000.0 + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = 5000.0 * (5000.0 + var_INaCa_i__k4_i) * var_INaCa_i__k8_i + 5000.0 * (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__x4_ss = 5000.0 * (5000.0 + var_INaCa_i__k4_ss) * var_INaCa_i__k8_ss + 5000.0 * (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaK__Knai = _lt_0_row[8]; // millimolar
        const double var_INaK__Knao = _lt_0_row[9]; // millimolar
        const double var_INaK__a1 = 949.5 * pow(var_chaste_interface__intracellular_ions__nai, 3) / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ki), 2)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = 14800.411886344058 * pow(mParameters[10], 2) / (-1.0 + pow((1.0 + mParameters[11] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[10]), 2)); // dimensionless
        const double var_INaK__b2 = 39.399999999999999 * pow(mParameters[11], 3) / ((-1.0 + pow((1.0 + mParameters[11] / var_INaK__Knao), 3) + 7.7937924625297832 * pow((0.35820000000000002 + mParameters[10]), 2)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = 160.0 * pow(var_chaste_interface__intracellular_ions__ki, 2) / (-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3) + 4.0 * pow((0.5 + var_chaste_interface__intracellular_ions__ki), 2)); // dimensionless
        const double var_INaK__x1 = 439120.79239156016 * var_INaK__a1 + 687.20000000000005 * var_INaK__a1 * var_INaK__b3 + 687.20000000000005 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = 687.20000000000005 * var_INaK__a1 * var_INaK__a3 + 696.32000000000005 * var_INaK__a3 * var_INaK__b4 + 9.120000000000001 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = 444948.47229058668 * var_INaK__a3 + 5827.6798990265261 * var_INaK__b2 + 9.120000000000001 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = 638.99998892834708 * var_INaK__a1 * var_INaK__a3 + 638.99998892834708 * var_INaK__a1 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaCa_i__INaCa_i = 0.80000000000000004 * (10000.0 * var_INaCa_i__E2_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i - 2.0 * var_INaCa_i__E1_i * var_INaCa_i__k1_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i + var_INaCa_i__k4pp_i * var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i) + 3.0 * var_INaCa_i__k7_i * var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i)) * var_INaCa_i__Gncx / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cai, 2)); // microA_per_microF
        const double var_INaCa_i__INaCa_ss = 0.20000000000000001 * (10000.0 * var_INaCa_i__E2_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss - 2.0 * var_INaCa_i__E1_ss * var_INaCa_i__k1_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss + var_INaCa_i__k4pp_ss * var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss) + 3.0 * var_INaCa_i__k7_ss * var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss)) * var_INaCa_i__Gncx / (1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cass, 2)); // microA_per_microF
        const double var_INaK__INaK = (18.240000000000002 * var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) + 3.0 * var_INaK__a3 * var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 2.0 * var_INaK__a1 * var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4) - 3.0 * var_INaK__b3 * var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4)) * ((var_environment__celltype == 1.0) ? (0.90000000000000002 * mParameters[23]) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * mParameters[23]) : (mParameters[23]))); // microA_per_microF
        const double var_reversal_potentials__EK = 26.712338705498265 * log(mParameters[10] / var_chaste_interface__intracellular_ions__ki); // millivolt
        const double var_IK1__IK1 = sqrt(mParameters[10]) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((var_environment__celltype == 1.0) ? (1.2 * mParameters[18]) : ((var_environment__celltype == 2.0) ? (1.3 * mParameters[18]) : (mParameters[18]))) * var_chaste_interface__IK1__xk1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * mParameters[10])); // microA_per_microF
        const double var_IKb__IKb = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[14]) : (mParameters[14])) / (_lt_0_row[10]); // microA_per_microF
        const double var_IKr__IKr = 0.43033148291193518 * sqrt(mParameters[10]) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((var_environment__celltype == 1.0) ? (1.3 * mParameters[20]) : ((var_environment__celltype == 2.0) ? (0.80000000000000004 * mParameters[20]) : (mParameters[20]))) * var_chaste_interface__IKr__O; // microA_per_microF
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (var_Ito__AiF * var_chaste_interface__Ito__iF + var_Ito__AiS * var_chaste_interface__Ito__iS) * var_chaste_interface__Ito__a + (var_Ito__AiF * var_chaste_interface__Ito__iFp + var_Ito__AiS * var_chaste_interface__Ito__iSp) * var_chaste_interface__Ito__ap / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (((var_environment__celltype == 1.0) || (var_environment__celltype == 2.0)) ? (4.0 * mParameters[24]) : (mParameters[24])); // microA_per_microF
        const double var_reversal_potentials__ENa = 26.712338705498265 * log(mParameters[11] / var_chaste_interface__intracellular_ions__nai); // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * (0.010000000000000009 * var_chaste_interface__INa__hs + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__j + (0.010000000000000009 * var_chaste_interface__INa__hsp + 0.98999999999999999 * var_chaste_interface__INa__hf) * var_chaste_interface__INa__jp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * mParameters[17]; // microA_per_microF
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - 1 / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * var_chaste_interface__INaL__hL + var_chaste_interface__INaL__hLp / (1.0 + 0.14999999999999999 / var_CaMK__CaMKa)) * ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[19]) : (mParameters[19])) * var_chaste_interface__INaL__mL; // microA_per_microF
        const double var_IKs__IKs = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__cai), 1.3999999999999999))) * (-26.712338705498265 * log((0.018329999999999999 * mParameters[11] + mParameters[10]) / (0.018329999999999999 * var_chaste_interface__intracellular_ions__nai + var_chaste_interface__intracellular_ions__ki)) + var_chaste_interface__membrane__v) * ((var_environment__celltype == 1.0) ? (1.3999999999999999 * mParameters[21]) : (mParameters[21])) * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        const double d_dt_chaste_interface_var_membrane__v = -var_ICaL__ICaK - var_ICaL__ICaL - var_ICaL__ICaNa - var_ICab__ICab - var_IK1__IK1 - var_IKb__IKb - var_IKr__IKr - var_IKs__IKs - var_INa__INa - var_INaCa_i__INaCa_i - var_INaCa_i__INaCa_ss - var_INaK__INaK - var_INaL__INaL - var_INab__INab - var_IpCa__IpCa - var_Ito__Ito - var_membrane__Istim; // millivolt / millisecond
        
        rY[0] += mDt*d_dt_chaste_interface_var_membrane__v;
    }
    
    void Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -88.00190465
        double var_chaste_interface__INa__m = rY[10];
        // Units: dimensionless; Initial value: 0.007344121102
        double var_chaste_interface__INa__hf = rY[11];
        // Units: dimensionless; Initial value: 0.6981071913
        double var_chaste_interface__INa__hs = rY[12];
        // Units: dimensionless; Initial value: 0.6980895801
        double var_chaste_interface__INa__j = rY[13];
        // Units: dimensionless; Initial value: 0.6979908432
        double var_chaste_interface__INa__hsp = rY[14];
        // Units: dimensionless; Initial value: 0.4549485525
        double var_chaste_interface__INa__jp = rY[15];
        // Units: dimensionless; Initial value: 0.6979245865
        double var_chaste_interface__INaL__mL = rY[16];
        // Units: dimensionless; Initial value: 0.0001882617273
        double var_chaste_interface__INaL__hL = rY[17];
        // Units: dimensionless; Initial value: 0.5008548855
        double var_chaste_interface__INaL__hLp = rY[18];
        // Units: dimensionless; Initial value: 0.2693065357
        double var_chaste_interface__Ito__a = rY[19];
        // Units: dimensionless; Initial value: 0.001001097687
        double var_chaste_interface__Ito__iF = rY[20];
        // Units: dimensionless; Initial value: 0.9995541745
        double var_chaste_interface__Ito__iS = rY[21];
        // Units: dimensionless; Initial value: 0.5865061736
        double var_chaste_interface__Ito__ap = rY[22];
        // Units: dimensionless; Initial value: 0.0005100862934
        double var_chaste_interface__Ito__iFp = rY[23];
        // Units: dimensionless; Initial value: 0.9995541823
        double var_chaste_interface__Ito__iSp = rY[24];
        // Units: dimensionless; Initial value: 0.6393399482
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 2.34e-09
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 0.9102412777
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 0.9998046777
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 0.9999738312
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__IKs__xs1 = rY[43];
        // Units: dimensionless; Initial value: 0.2707758025
        double var_chaste_interface__IKs__xs2 = rY[44];
        // Units: dimensionless; Initial value: 0.0001928503426
        double var_chaste_interface__IK1__xk1 = rY[45];
        // Units: dimensionless; Initial value: 0.9967597594
        
        // Lookup table indexing
        const bool _oob_0 = Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        const double var_ICaL__tjca = 75.0;
        const double var_IKs__txs1_max = 817.29999999999995;
        const double var_INa__hssV1 = 82.900000000000006;
        const double var_INa__hssV2 = 6.0860000000000003;
        const double var_INa__mssV1 = 39.57;
        const double var_INa__mssV2 = 9.8710000000000004;
        const double var_INa__mtD1 = 6.7649999999999997;
        const double var_INa__mtD2 = 8.5519999999999996;
        const double var_INa__mtV1 = 11.640000000000001;
        const double var_INa__mtV2 = 34.770000000000003;
        const double var_INa__mtV3 = 77.420000000000002;
        const double var_INa__mtV4 = 5.9550000000000001;
        const double var_INa__shift_INa_inact = 0;
        const double var_INaL__thL = 200.0;
        const double var_INaL__thLp = 3.0 * var_INaL__thL;
        const double var_environment__celltype = 0;
        const double var_ICaL__dss = _lt_0_row[26];
        const double var_ICaL__fss = _lt_0_row[25];
        const double var_ICaL__fcass = var_ICaL__fss;
        const double var_ICaL__td = _lt_0_row[27];
        const double var_ICaL__tfcaf = _lt_0_row[28];
        const double var_ICaL__tfcafp = 2.5 * var_ICaL__tfcaf;
        const double var_ICaL__tfcas = _lt_0_row[29];
        const double var_ICaL__tff = _lt_0_row[30];
        const double var_ICaL__tffp = 2.5 * var_ICaL__tff;
        const double var_ICaL__tfs = _lt_0_row[31];
        const double var_IK1__txk1 = 122.2 / (exp(3.4155488244627148 + 0.014423770373575654 * var_chaste_interface__membrane__v) + exp(-6.2475442043222005 - 0.049115913555992145 * var_chaste_interface__membrane__v));
        const double var_IK1__xk1ss = 1 / (1.0 + exp((-144.59 - var_chaste_interface__membrane__v - 2.5537999999999998 * mParameters[10]) / (3.8115000000000001 + 1.5691999999999999 * mParameters[10])));
        const double var_IKs__txs1 = 1 / (0.001292 * exp(-0.91304347826086951 - 0.0043478260869565218 * var_chaste_interface__membrane__v) + 0.00023259999999999999 * exp(2.7123595505617977 + 0.056179775280898875 * var_chaste_interface__membrane__v)) + var_IKs__txs1_max;
        const double var_IKs__txs2 = 1 / (_lt_0_row[35]);
        const double var_IKs__xs1ss = _lt_0_row[33];
        const double var_IKs__xs2ss = var_IKs__xs1ss;
        const double var_INa__hss = 1 / (1.0 + exp((-var_INa__shift_INa_inact + var_INa__hssV1 + var_chaste_interface__membrane__v) / var_INa__hssV2));
        const double var_INa__hssp = 1 / (1.0 + exp(14.640157739073281 + 0.16431153466973381 * var_chaste_interface__membrane__v - 0.16431153466973381 * var_INa__shift_INa_inact));
        const double var_INa__jss = var_INa__hss;
        const double var_INa__mss = 1 / (1.0 + exp((-var_INa__mssV1 - var_chaste_interface__membrane__v) / var_INa__mssV2));
        const double var_INa__thf = 1 / (6.149 * exp(0.025140601874691665 + 0.049333991119881598 * var_chaste_interface__membrane__v - 0.049333991119881598 * var_INa__shift_INa_inact) + 1.432e-5 * exp(-0.19029435163086714 + 0.15910898965791567 * var_INa__shift_INa_inact - 0.15910898965791567 * var_chaste_interface__membrane__v));
        const double var_INa__ths = 1 / (0.0097940000000000006 * exp(-0.63992869875222813 + 0.035650623885918005 * var_INa__shift_INa_inact - 0.035650623885918005 * var_chaste_interface__membrane__v) + 0.33429999999999999 * exp(0.10112954465231205 + 0.017649135192375574 * var_chaste_interface__membrane__v - 0.017649135192375574 * var_INa__shift_INa_inact));
        const double var_INa__thsp = 3.0 * var_INa__ths;
        const double var_INa__tj = 2.0379999999999998 + 1 / (0.30520000000000003 * exp(0.025854356306892066 + 0.02600780234070221 * var_chaste_interface__membrane__v - 0.02600780234070221 * var_INa__shift_INa_inact) + 0.021360000000000001 * exp(-12.148291269170388 + 0.12075836251660427 * var_INa__shift_INa_inact - 0.12075836251660427 * var_chaste_interface__membrane__v));
        const double var_INa__tjp = 1.46 * var_INa__tj;
        const double var_INa__tm = 1 / (var_INa__mtD1 * exp((var_INa__mtV1 + var_chaste_interface__membrane__v) / var_INa__mtV2) + var_INa__mtD2 * exp((-var_INa__mtV3 - var_chaste_interface__membrane__v) / var_INa__mtV4));
        const double var_INaL__hLss = 1 / (1.0 + exp(11.700053418803417 + 0.13354700854700854 * var_chaste_interface__membrane__v));
        const double var_INaL__hLssp = 1 / (1.0 + exp(12.528044871794872 + 0.13354700854700854 * var_chaste_interface__membrane__v));
        const double var_INaL__mLss = _lt_0_row[40];
        const double var_INaL__tmL = var_INa__tm;
        const double var_Ito__ass = _lt_0_row[46];
        const double var_Ito__assp = _lt_0_row[47];
        const double var_Ito__delta_epi = ((var_environment__celltype == 1.0) ? (_lt_0_row[41]) : (1.0));
        const double var_Ito__dti_develop = _lt_0_row[42];
        const double var_Ito__dti_recover = _lt_0_row[43];
        const double var_Ito__iss = _lt_0_row[44];
        const double var_Ito__ta = _lt_0_row[45];
        const double var_Ito__tiF_b = _lt_0_row[48];
        const double var_Ito__tiF = var_Ito__delta_epi * var_Ito__tiF_b;
        const double var_Ito__tiFp = var_Ito__dti_develop * var_Ito__dti_recover * var_Ito__tiF;
        const double var_Ito__tiS_b = _lt_0_row[49];
        const double var_Ito__tiS = var_Ito__delta_epi * var_Ito__tiS_b;
        const double var_Ito__tiSp = var_Ito__dti_develop * var_Ito__dti_recover * var_Ito__tiS;
        
        
        rY[25] = (var_chaste_interface__ICaL__d + ((var_ICaL__dss / var_ICaL__td) * mDt)) / (1.0 - ((-1 / var_ICaL__td) * mDt));
        rY[28] = (var_chaste_interface__ICaL__fcaf + ((var_ICaL__fcass / var_ICaL__tfcaf) * mDt)) / (1.0 - ((-1 / var_ICaL__tfcaf) * mDt));
        rY[32] = (var_chaste_interface__ICaL__fcafp + ((var_ICaL__fcass / var_ICaL__tfcafp) * mDt)) / (1.0 - ((-1 / var_ICaL__tfcafp) * mDt));
        rY[29] = (var_chaste_interface__ICaL__fcas + ((var_ICaL__fcass / var_ICaL__tfcas) * mDt)) / (1.0 - ((-1 / var_ICaL__tfcas) * mDt));
        rY[26] = (var_chaste_interface__ICaL__ff + ((var_ICaL__fss / var_ICaL__tff) * mDt)) / (1.0 - ((-1 / var_ICaL__tff) * mDt));
        rY[31] = (var_chaste_interface__ICaL__ffp + ((var_ICaL__fss / var_ICaL__tffp) * mDt)) / (1.0 - ((-1 / var_ICaL__tffp) * mDt));
        rY[27] = (var_chaste_interface__ICaL__fs + ((var_ICaL__fss / var_ICaL__tfs) * mDt)) / (1.0 - ((-1 / var_ICaL__tfs) * mDt));
        rY[30] = (var_chaste_interface__ICaL__jca + ((var_ICaL__fcass / var_ICaL__tjca) * mDt)) / (1.0 - ((-1 / var_ICaL__tjca) * mDt));
        rY[45] = (var_chaste_interface__IK1__xk1 + ((var_IK1__xk1ss / var_IK1__txk1) * mDt)) / (1.0 - ((-1 / var_IK1__txk1) * mDt));
        rY[43] = (var_chaste_interface__IKs__xs1 + ((var_IKs__xs1ss / var_IKs__txs1) * mDt)) / (1.0 - ((-1 / var_IKs__txs1) * mDt));
        rY[44] = (var_chaste_interface__IKs__xs2 + ((var_IKs__xs2ss / var_IKs__txs2) * mDt)) / (1.0 - ((-1 / var_IKs__txs2) * mDt));
        rY[17] = (var_chaste_interface__INaL__hL + ((var_INaL__hLss / var_INaL__thL) * mDt)) / (1.0 - ((-1 / var_INaL__thL) * mDt));
        rY[18] = (var_chaste_interface__INaL__hLp + ((var_INaL__hLssp / var_INaL__thLp) * mDt)) / (1.0 - ((-1 / var_INaL__thLp) * mDt));
        rY[16] = (var_chaste_interface__INaL__mL + ((var_INaL__mLss / var_INaL__tmL) * mDt)) / (1.0 - ((-1 / var_INaL__tmL) * mDt));
        rY[11] = (var_chaste_interface__INa__hf + ((var_INa__hss / var_INa__thf) * mDt)) / (1.0 - ((-1 / var_INa__thf) * mDt));
        rY[12] = (var_chaste_interface__INa__hs + ((var_INa__hss / var_INa__ths) * mDt)) / (1.0 - ((-1 / var_INa__ths) * mDt));
        rY[14] = (var_chaste_interface__INa__hsp + ((var_INa__hssp / var_INa__thsp) * mDt)) / (1.0 - ((-1 / var_INa__thsp) * mDt));
        rY[15] = (var_chaste_interface__INa__jp + ((var_INa__jss / var_INa__tjp) * mDt)) / (1.0 - ((-1 / var_INa__tjp) * mDt));
        rY[10] = (var_chaste_interface__INa__m + ((var_INa__mss / var_INa__tm) * mDt)) / (1.0 - ((-1 / var_INa__tm) * mDt));
        rY[19] = (var_chaste_interface__Ito__a + ((var_Ito__ass / var_Ito__ta) * mDt)) / (1.0 - ((-1 / var_Ito__ta) * mDt));
        rY[22] = (var_chaste_interface__Ito__ap + ((var_Ito__assp / var_Ito__ta) * mDt)) / (1.0 - ((-1 / var_Ito__ta) * mDt));
        rY[20] = (var_chaste_interface__Ito__iF + ((var_Ito__iss / var_Ito__tiF) * mDt)) / (1.0 - ((-1 / var_Ito__tiF) * mDt));
        rY[23] = (var_chaste_interface__Ito__iFp + ((var_Ito__iss / var_Ito__tiFp) * mDt)) / (1.0 - ((-1 / var_Ito__tiFp) * mDt));
        rY[21] = (var_chaste_interface__Ito__iS + ((var_Ito__iss / var_Ito__tiS) * mDt)) / (1.0 - ((-1 / var_Ito__tiS) * mDt));
        rY[24] = (var_chaste_interface__Ito__iSp + ((var_Ito__iss / var_Ito__tiSp) * mDt)) / (1.0 - ((-1 / var_Ito__tiSp) * mDt));
        rY[13] = (var_chaste_interface__INa__j + ((var_INa__jss / var_INa__tj) * mDt)) / (1.0 - ((-1 / var_INa__tj) * mDt));
        
        double _guess[21] = {rY[2],rY[33],rY[36],rY[37],rY[42],rY[34],rY[35],rY[39],rY[40],rY[38],rY[41],rY[1],rY[9],rY[8],rY[7],rY[5],rY[6],rY[3],rY[4],rY[46],rY[47]};
        CardiacNewtonSolver<21,Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler>* _p_solver = CardiacNewtonSolver<21,Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler>::Instance();
        _p_solver->Solve(*this, var_chaste_interface__environment__time, _guess);
        rY[2] = _guess[0];
        rY[33] = _guess[1];
        rY[36] = _guess[2];
        rY[37] = _guess[3];
        rY[42] = _guess[4];
        rY[34] = _guess[5];
        rY[35] = _guess[6];
        rY[39] = _guess[7];
        rY[40] = _guess[8];
        rY[38] = _guess[9];
        rY[41] = _guess[10];
        rY[1] = _guess[11];
        rY[9] = _guess[12];
        rY[8] = _guess[13];
        rY[7] = _guess[14];
        rY[5] = _guess[15];
        rY[6] = _guess[16];
        rY[3] = _guess[17];
        rY[4] = _guess[18];
        rY[46] = _guess[19];
        rY[47] = _guess[20];
    }

    std::vector<double> Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -88.00190465
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 8.6e-05
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0125840447
        double var_chaste_interface__intracellular_ions__nai = rY[3];
        // Units: millimolar; Initial value: 7.268004498
        double var_chaste_interface__intracellular_ions__nass = rY[4];
        // Units: millimolar; Initial value: 7.268089977
        double var_chaste_interface__intracellular_ions__ki = rY[5];
        // Units: millimolar; Initial value: 144.6555918
        double var_chaste_interface__intracellular_ions__kss = rY[6];
        // Units: millimolar; Initial value: 144.6555651
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 8.49e-05
        double var_chaste_interface__INa__m = rY[10];
        // Units: dimensionless; Initial value: 0.007344121102
        double var_chaste_interface__INa__hf = rY[11];
        // Units: dimensionless; Initial value: 0.6981071913
        double var_chaste_interface__INa__hs = rY[12];
        // Units: dimensionless; Initial value: 0.6980895801
        double var_chaste_interface__INa__j = rY[13];
        // Units: dimensionless; Initial value: 0.6979908432
        double var_chaste_interface__INa__hsp = rY[14];
        // Units: dimensionless; Initial value: 0.4549485525
        double var_chaste_interface__INa__jp = rY[15];
        // Units: dimensionless; Initial value: 0.6979245865
        double var_chaste_interface__INaL__mL = rY[16];
        // Units: dimensionless; Initial value: 0.0001882617273
        double var_chaste_interface__INaL__hL = rY[17];
        // Units: dimensionless; Initial value: 0.5008548855
        double var_chaste_interface__INaL__hLp = rY[18];
        // Units: dimensionless; Initial value: 0.2693065357
        double var_chaste_interface__Ito__a = rY[19];
        // Units: dimensionless; Initial value: 0.001001097687
        double var_chaste_interface__Ito__iF = rY[20];
        // Units: dimensionless; Initial value: 0.9995541745
        double var_chaste_interface__Ito__iS = rY[21];
        // Units: dimensionless; Initial value: 0.5865061736
        double var_chaste_interface__Ito__ap = rY[22];
        // Units: dimensionless; Initial value: 0.0005100862934
        double var_chaste_interface__Ito__iFp = rY[23];
        // Units: dimensionless; Initial value: 0.9995541823
        double var_chaste_interface__Ito__iSp = rY[24];
        // Units: dimensionless; Initial value: 0.6393399482
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 2.34e-09
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 0.9102412777
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 0.9998046777
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 0.9999738312
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 0.9999999909
        double var_chaste_interface__ICaL__nca = rY[33];
        // Units: dimensionless; Initial value: 0.002749414044
        double var_chaste_interface__IKr__O = rY[38];
        // Units: dimensionless; Initial value: 0.00015551
        double var_chaste_interface__IKs__xs1 = rY[43];
        // Units: dimensionless; Initial value: 0.2707758025
        double var_chaste_interface__IKs__xs2 = rY[44];
        // Units: dimensionless; Initial value: 0.0001928503426
        double var_chaste_interface__IK1__xk1 = rY[45];
        // Units: dimensionless; Initial value: 0.9967597594
        double var_chaste_interface__ryr__Jrelnp = rY[46];
        // Units: dimensionless; Initial value: 2.5e-07
        double var_chaste_interface__ryr__Jrelp = rY[47];
        // Units: dimensionless; Initial value: 3.12e-07
        
        // Lookup table indexing
        const bool _oob_0 = Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__v);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__v);

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_ICaL__Aff = 0.59999999999999998; // dimensionless
        const double var_ICaL__Afs = 1.0 - var_ICaL__Aff; // dimensionless
        const double var_ICaL__f = var_ICaL__Aff * var_chaste_interface__ICaL__ff + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__fp = var_ICaL__Aff * var_chaste_interface__ICaL__ffp + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_INa__Ahf = 0.98999999999999999; // dimensionless
        const double var_INa__Ahs = 1.0 - var_INa__Ahf; // dimensionless
        const double var_INa__h = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hs; // dimensionless
        const double var_INa__hp = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hsp; // dimensionless
        const double var_INaCa_i__KmCaAct = 0.00014999999999999999; // millimolar
        const double var_INaCa_i__kasymm = 12.5; // dimensionless
        const double var_INaCa_i__kcaoff = 5000.0; // per_millisecond
        const double var_INaCa_i__k2_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k2_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__kcaon = 1500000.0; // per_millisecond
        const double var_INaCa_i__kna1 = 15.0; // per_millisecond
        const double var_INaCa_i__kna2 = 5.0; // per_millisecond
        const double var_INaCa_i__kna3 = 88.120000000000005; // per_millisecond
        const double var_INaCa_i__qca = 0.16700000000000001; // dimensionless
        const double var_INaCa_i__qna = 0.52239999999999998; // dimensionless
        const double var_INaCa_i__wca = 60000.0; // dimensionless
        const double var_INaCa_i__wna = 60000.0; // dimensionless
        const double var_INaCa_i__wnaca = 5000.0; // dimensionless
        const double var_INaK__H = 9.9999999999999995e-8; // millimolar
        const double var_INaK__Khp = 1.698e-7; // millimolar
        const double var_INaK__Kki = 0.5; // per_millisecond
        const double var_INaK__Kko = 0.35820000000000002; // per_millisecond
        const double var_INaK__Kmgatp = 1.698e-7; // millimolar
        const double var_INaK__Knai0 = 9.0730000000000004; // millimolar
        const double var_INaK__Knao0 = 27.780000000000001; // millimolar
        const double var_INaK__Knap = 224.0; // millimolar
        const double var_INaK__Kxkur = 292.0; // millimolar
        const double var_INaK__MgADP = 0.050000000000000003; // millimolar
        const double var_INaK__MgATP = 9.8000000000000007; // millimolar
        const double var_INaK__delta = -0.155; // millivolt
        const double var_INaK__eP = 4.2000000000000002; // dimensionless
        const double var_INaK__k1m = 182.40000000000001; // per_millisecond
        const double var_INaK__b1 = var_INaK__MgADP * var_INaK__k1m; // dimensionless
        const double var_INaK__k1p = 949.5; // per_millisecond
        const double var_INaK__k2m = 39.399999999999999; // per_millisecond
        const double var_INaK__k2p = 687.20000000000005; // per_millisecond
        const double var_INaK__a2 = var_INaK__k2p; // dimensionless
        const double var_INaK__k3m = 79300.0; // per_millisecond
        const double var_INaK__k3p = 1899.0; // per_millisecond
        const double var_INaK__k4m = 40.0; // per_millisecond
        const double var_INaK__k4p = 639.0; // per_millisecond
        const double var_INaK__a4 = var_INaK__MgATP * var_INaK__k4p / ((1.0 + var_INaK__MgATP / var_INaK__Kmgatp) * var_INaK__Kmgatp); // dimensionless
        const double var_IpCa__KmCap = 0.00050000000000000001; // millimolar
        const double var_environment__celltype = 0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[12]) : ((var_environment__celltype == 2.0) ? (2.5 * mParameters[12]) : (mParameters[12]))); // dimensionless
        const double var_ICaL__PCaK = 0.00035740000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaNa = 0.00125 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaKp = 0.00035740000000000001 * var_ICaL__PCap; // dimensionless
        const double var_ICaL__PCaNap = 0.00125 * var_ICaL__PCap; // dimensionless
        const double var_IK1__GK1 = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[18]) : ((var_environment__celltype == 2.0) ? (1.3 * mParameters[18]) : (mParameters[18]))); // milliS_per_microF
        const double var_IKb__GKb = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[14]) : (mParameters[14])); // milliS_per_microF
        const double var_IKr__GKr = ((var_environment__celltype == 1.0) ? (1.3 * mParameters[20]) : ((var_environment__celltype == 2.0) ? (0.80000000000000004 * mParameters[20]) : (mParameters[20]))); // milliS_per_microF
        const double var_IKs__GKs = ((var_environment__celltype == 1.0) ? (1.3999999999999999 * mParameters[21]) : (mParameters[21])); // milliS_per_microF
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * mParameters[22]) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * mParameters[22]) : (mParameters[22]))); // milliS_per_microF
        const double var_INaK__Pnak = ((var_environment__celltype == 1.0) ? (0.90000000000000002 * mParameters[23]) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * mParameters[23]) : (mParameters[23]))); // milliS_per_microF
        const double var_INaL__GNaL = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[19]) : (mParameters[19])); // milliS_per_microF
        const double var_Ito__Gto = (((var_environment__celltype == 1.0) || (var_environment__celltype == 2.0)) ? (4.0 * mParameters[24]) : (mParameters[24])); // milliS_per_microF
        const double var_IK1__GK1_calc = sqrt(mParameters[10]) * var_IK1__GK1; // milliS_per_microF
        const double var_IKr__GKr_calc = 0.43033148291193518 * sqrt(mParameters[10]) * var_IKr__GKr; // milliS_per_microF
        const double var_INaCa_i__h10_i = 1.0 + (1.0 + mParameters[11] / var_INaCa_i__kna2) * mParameters[11] / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h10_ss = 1.0 + (1.0 + mParameters[11] / var_INaCa_i__kna2) * mParameters[11] / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h11_i = pow(mParameters[11], 2) / (var_INaCa_i__h10_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h11_ss = pow(mParameters[11], 2) / (var_INaCa_i__h10_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h12_i = 1 / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__h12_ss = 1 / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__k1_i = var_INaCa_i__h12_i * var_INaCa_i__kcaon * mParameters[9]; // dimensionless
        const double var_INaCa_i__k1_ss = var_INaCa_i__h12_ss * var_INaCa_i__kcaon * mParameters[9]; // dimensionless
        const double var_IKs__KsCa = 1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__cai), 1.3999999999999999)); // dimensionless
        const double var_IKs__GKs_calc = var_IKs__GKs * var_IKs__KsCa; // milliS_per_microF
        const double var_INaCa_i__allo_i = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cai, 2)); // dimensionless
        const double var_IpCa__IpCa = mParameters[16] * var_chaste_interface__intracellular_ions__cai / (var_IpCa__KmCap + var_chaste_interface__intracellular_ions__cai); // microA_per_microF
        const double var_IpCa__IpCa_converted = HeartConfig::Instance()->GetCapacitance() * var_IpCa__IpCa; // uA_per_cm2
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INa__fINap = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__allo_ss = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cass, 2)); // dimensionless
        const double var_INaL__fINaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_Ito__fItop = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__h4_i = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_i = pow(var_chaste_interface__intracellular_ions__nai, 2) / (var_INaCa_i__h4_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_i = 1 / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k6_i = var_INaCa_i__h6_i * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cai; // dimensionless
        const double var_INaK__P = var_INaK__eP / (1.0 + var_INaK__H / var_INaK__Khp + var_chaste_interface__intracellular_ions__nai / var_INaK__Knap + var_chaste_interface__intracellular_ions__ki / var_INaK__Kxkur); // dimensionless
        const double var_INaK__b3 = var_INaK__H * var_INaK__P * var_INaK__k3m / (1.0 + var_INaK__MgATP / var_INaK__Kmgatp); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_ss = pow(var_chaste_interface__intracellular_ions__nass, 2) / (var_INaCa_i__h4_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_ss = 1 / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k6_ss = var_INaCa_i__h6_ss * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cass; // dimensionless
        const double var_membrane__Istim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_ICaL__Afcaf = _lt_0_row[0]; // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__PhiCaK = ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * mParameters[10] + 0.75 * var_chaste_interface__intracellular_ions__kss * _lt_0_row[1]) / (_lt_0_row[2]))); // dimensionless
        const double var_ICaL__PhiCaL = ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cass * _lt_0_row[3]) / (_lt_0_row[4]))); // dimensionless
        const double var_ICaL__PhiCaNa = ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)) + 187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8)))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-0.75 * mParameters[11] + 0.75 * var_chaste_interface__intracellular_ions__nass * _lt_0_row[1]) / (_lt_0_row[2]))); // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__ICaK = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaK * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaKp * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaK_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaK; // uA_per_cm2
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCa * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCap * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaL_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaL; // uA_per_cm2
        const double var_ICaL__ICaNa = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNa * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNap * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaNa_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaNa; // uA_per_cm2
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__v) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cai * exp(9.9999999999999995e-8)) * mParameters[13] / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * mParameters[13] / (-1.0 + exp(-9.9999999999999995e-8))) + 2.671233870549826e-13 * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cai * exp(-9.9999999999999995e-8)) * mParameters[13] / (-1.0 + exp(-9.9999999999999995e-8))) : (0.14974353403121046 * pow(var_chaste_interface__membrane__v, 2) * (-0.34100000000000003 * mParameters[9] + var_chaste_interface__intracellular_ions__cai * _lt_0_row[3]) * mParameters[13] / (_lt_0_row[4]))); // microA_per_microF
        const double var_ICab__ICab_converted = HeartConfig::Instance()->GetCapacitance() * var_ICab__ICab; // uA_per_cm2
        const double var_IK1__rk1 = 1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * mParameters[10])); // millisecond
        const double var_IKb__xkb = 1 / (_lt_0_row[10]); // dimensionless
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__v) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__v) * (2.671233870549826e-13 * (-mParameters[11] + var_chaste_interface__intracellular_ions__nai * exp(9.9999999999999995e-8)) * mParameters[15] / (-1.0 + exp(9.9999999999999995e-8)) - 2.671233870549826e-13 * (-mParameters[11] + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * mParameters[15] / (-1.0 + exp(-9.9999999999999995e-8))) + 2.671233870549826e-13 * (-mParameters[11] + var_chaste_interface__intracellular_ions__nai * exp(-9.9999999999999995e-8)) * mParameters[15] / (-1.0 + exp(-9.9999999999999995e-8))) : (0.037435883507802616 * pow(var_chaste_interface__membrane__v, 2) * (-mParameters[11] + var_chaste_interface__intracellular_ions__nai * _lt_0_row[1]) * mParameters[15] / (_lt_0_row[2]))); // microA_per_microF
        const double var_INab__INab_converted = HeartConfig::Instance()->GetCapacitance() * var_INab__INab; // uA_per_cm2
        const double var_Ito__AiF = _lt_0_row[5]; // dimensionless
        const double var_Ito__AiS = 1.0 - var_Ito__AiF; // dimensionless
        const double var_Ito__i = var_Ito__AiF * var_chaste_interface__Ito__iF + var_Ito__AiS * var_chaste_interface__Ito__iS; // dimensionless
        const double var_Ito__ip = var_Ito__AiF * var_chaste_interface__Ito__iFp + var_Ito__AiS * var_chaste_interface__Ito__iSp; // dimensionless
        const double var_physical_constants__F = 96485.0; // coulomb_per_mole
        const double var_physical_constants__R = 8314.0; // joule_per_kilomole_kelvin
        const double var_physical_constants__T = 310.0; // kelvin
        const double var_INaCa_i__hca = exp(var_INaCa_i__qca * var_chaste_interface__membrane__v * var_physical_constants__F / (var_physical_constants__R * var_physical_constants__T)); // dimensionless
        const double var_INaCa_i__hna = exp(var_INaCa_i__qna * var_chaste_interface__membrane__v * var_physical_constants__F / (var_physical_constants__R * var_physical_constants__T)); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h2_i = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / (var_INaCa_i__h1_i * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h2_ss = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / (var_INaCa_i__h1_ss * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h3_i = 1 / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h3_ss = 1 / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * mParameters[11] / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * mParameters[11] / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h8_i = mParameters[11] / (var_INaCa_i__h7_i * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h8_ss = mParameters[11] / (var_INaCa_i__h7_ss * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h9_i = 1 / var_INaCa_i__h7_i; // dimensionless
        const double var_INaCa_i__h9_ss = 1 / var_INaCa_i__h7_ss; // dimensionless
        const double var_INaCa_i__k3p_i = var_INaCa_i__h9_i * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3p_ss = var_INaCa_i__h9_ss * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3pp_i = var_INaCa_i__h8_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_i = var_INaCa_i__k3p_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = var_INaCa_i__h8_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_ss = var_INaCa_i__k3p_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4p_i = var_INaCa_i__h3_i * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4p_ss = var_INaCa_i__h3_ss * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4pp_i = var_INaCa_i__h2_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_i = var_INaCa_i__k4p_i + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = var_INaCa_i__h2_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_ss = var_INaCa_i__k4p_ss + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = var_INaCa_i__h2_i * var_INaCa_i__h5_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k7_ss = var_INaCa_i__h2_ss * var_INaCa_i__h5_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_i = var_INaCa_i__h11_i * var_INaCa_i__h8_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_ss = var_INaCa_i__h11_ss * var_INaCa_i__h8_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__x1_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k5_i * var_INaCa_i__k7_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k2_i * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k5_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i; // dimensionless
        const double var_INaCa_i__x2_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss; // dimensionless
        const double var_INaCa_i__x3_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i * var_INaCa_i__k5_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k2_i * var_INaCa_i__k8_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E3_i = var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E4_i = var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__JncxCa_i = var_INaCa_i__E2_i * var_INaCa_i__k2_i - var_INaCa_i__E1_i * var_INaCa_i__k1_i; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_i = var_INaCa_i__E3_i * var_INaCa_i__k4pp_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i + 3.0 * var_INaCa_i__E4_i * var_INaCa_i__k7_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i; // millimolar_per_millisecond
        const double var_INaCa_i__x4_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss * var_INaCa_i__k5_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k8_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E3_ss = var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E4_ss = var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__JncxCa_ss = var_INaCa_i__E2_ss * var_INaCa_i__k2_ss - var_INaCa_i__E1_ss * var_INaCa_i__k1_ss; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_ss = var_INaCa_i__E3_ss * var_INaCa_i__k4pp_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss + 3.0 * var_INaCa_i__E4_ss * var_INaCa_i__k7_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss; // millimolar_per_millisecond
        const double var_INaK__Knai = var_INaK__Knai0 * exp(0.33333333333333331 * var_INaK__delta * var_chaste_interface__membrane__v * var_physical_constants__F / (var_physical_constants__R * var_physical_constants__T)); // millimolar
        const double var_INaK__Knao = var_INaK__Knao0 * exp(0.33333333333333331 * (1.0 - var_INaK__delta) * var_chaste_interface__membrane__v * var_physical_constants__F / (var_physical_constants__R * var_physical_constants__T)); // millimolar
        const double var_INaK__a1 = pow(var_chaste_interface__intracellular_ions__nai, 3) * var_INaK__k1p / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = pow(mParameters[10], 2) * var_INaK__k3p / ((-1.0 + pow((1.0 + mParameters[10] / var_INaK__Kko), 2) + pow((1.0 + mParameters[11] / var_INaK__Knao), 3)) * pow(var_INaK__Kko, 2)); // dimensionless
        const double var_INaK__b2 = pow(mParameters[11], 3) * var_INaK__k2m / ((-1.0 + pow((1.0 + mParameters[10] / var_INaK__Kko), 2) + pow((1.0 + mParameters[11] / var_INaK__Knao), 3)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = pow(var_chaste_interface__intracellular_ions__ki, 2) * var_INaK__k4m / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Kki, 2)); // dimensionless
        const double var_INaK__x1 = var_INaK__a1 * var_INaK__a2 * var_INaK__a4 + var_INaK__a1 * var_INaK__a2 * var_INaK__b3 + var_INaK__a2 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = var_INaK__a1 * var_INaK__a2 * var_INaK__a3 + var_INaK__a2 * var_INaK__a3 * var_INaK__b4 + var_INaK__a3 * var_INaK__b1 * var_INaK__b4 + var_INaK__b1 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = var_INaK__a2 * var_INaK__a3 * var_INaK__a4 + var_INaK__a3 * var_INaK__a4 * var_INaK__b1 + var_INaK__a4 * var_INaK__b1 * var_INaK__b2 + var_INaK__b1 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = var_INaK__a1 * var_INaK__a3 * var_INaK__a4 + var_INaK__a1 * var_INaK__a4 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__E1 = var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E2 = var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E3 = var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E4 = var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__JnakK = 2.0 * var_INaK__E4 * var_INaK__b1 - 2.0 * var_INaK__E3 * var_INaK__a1; // millimolar_per_millisecond
        const double var_INaK__JnakNa = 3.0 * var_INaK__E1 * var_INaK__a3 - 3.0 * var_INaK__E2 * var_INaK__b3; // millimolar_per_millisecond
        const double var_physical_constants__zca = 2.0; // dimensionless
        const double var_physical_constants__zk = 1.0; // dimensionless
        const double var_physical_constants__zna = 1.0; // dimensionless
        const double var_INaCa_i__INaCa_i = 0.80000000000000004 * (var_INaCa_i__JncxCa_i * var_physical_constants__zca + var_INaCa_i__JncxNa_i * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_i; // microA_per_microF
        const double var_INaCa_i__INaCa_i_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__INaCa_i; // uA_per_cm2
        const double var_INaCa_i__INaCa_ss = 0.20000000000000001 * (var_INaCa_i__JncxCa_ss * var_physical_constants__zca + var_INaCa_i__JncxNa_ss * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_ss; // microA_per_microF
        const double var_INaCa_i__INaCa_ss_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__INaCa_ss; // uA_per_cm2
        const double var_INaK__INaK = (var_INaK__JnakK * var_physical_constants__zk + var_INaK__JnakNa * var_physical_constants__zna) * var_INaK__Pnak; // microA_per_microF
        const double var_INaK__INaK_converted = HeartConfig::Instance()->GetCapacitance() * var_INaK__INaK; // uA_per_cm2
        const double var_reversal_potentials__EK = var_physical_constants__R * var_physical_constants__T * log(mParameters[10] / var_chaste_interface__intracellular_ions__ki) / var_physical_constants__F; // millivolt
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IK1__GK1_calc * var_IK1__rk1 * var_chaste_interface__IK1__xk1; // microA_per_microF
        const double var_IK1__IK1_converted = HeartConfig::Instance()->GetCapacitance() * var_IK1__IK1; // uA_per_cm2
        const double var_IKb__IKb = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKb__GKb * var_IKb__xkb; // microA_per_microF
        const double var_IKb__IKb_converted = HeartConfig::Instance()->GetCapacitance() * var_IKb__IKb; // uA_per_cm2
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKr__GKr_calc * var_chaste_interface__IKr__O; // microA_per_microF
        const double var_IKr__IKr_converted = HeartConfig::Instance()->GetCapacitance() * var_IKr__IKr; // uA_per_cm2
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - var_Ito__fItop) * var_chaste_interface__Ito__a * var_Ito__i + var_chaste_interface__Ito__ap * var_Ito__fItop * var_Ito__ip) * var_Ito__Gto; // microA_per_microF
        const double var_Ito__Ito_converted = HeartConfig::Instance()->GetCapacitance() * var_Ito__Ito; // uA_per_cm2
        const double var_reversal_potentials__ENa = var_physical_constants__R * var_physical_constants__T * log(mParameters[11] / var_chaste_interface__intracellular_ions__nai) / var_physical_constants__F; // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INa__fINap) * var_INa__h * var_chaste_interface__INa__j + var_INa__fINap * var_INa__hp * var_chaste_interface__INa__jp) * mParameters[17]; // microA_per_microF
        const double var_INa__INa_converted = HeartConfig::Instance()->GetCapacitance() * var_INa__INa; // uA_per_cm2
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INaL__fINaLp) * var_chaste_interface__INaL__hL + var_INaL__fINaLp * var_chaste_interface__INaL__hLp) * var_INaL__GNaL * var_chaste_interface__INaL__mL; // microA_per_microF
        const double var_INaL__INaL_converted = HeartConfig::Instance()->GetCapacitance() * var_INaL__INaL; // uA_per_cm2
        const double var_reversal_potentials__PKNa = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = var_physical_constants__R * var_physical_constants__T * log((mParameters[11] * var_reversal_potentials__PKNa + mParameters[10]) / (var_chaste_interface__intracellular_ions__nai * var_reversal_potentials__PKNa + var_chaste_interface__intracellular_ions__ki)) / var_physical_constants__F; // millivolt
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__v) * var_IKs__GKs_calc * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        const double var_IKs__IKs_converted = HeartConfig::Instance()->GetCapacitance() * var_IKs__IKs; // uA_per_cm2
        const double var_ryr__fJrelp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_ryr__Jrel = ((1.0 - var_ryr__fJrelp) * var_chaste_interface__ryr__Jrelnp + var_chaste_interface__ryr__Jrelp * var_ryr__fJrelp) * mParameters[7]; // millimolar_per_millisecond

        std::vector<double> dqs(25);
        dqs[0] = var_ryr__Jrel;
        dqs[1] = var_ICaL__ICaK_converted;
        dqs[2] = var_ICaL__ICaNa_converted;
        dqs[3] = var_ICaL__ICaL_converted;
        dqs[4] = var_ICab__ICab_converted;
        dqs[5] = var_IKb__IKb_converted;
        dqs[6] = var_INab__INab_converted;
        dqs[7] = var_IpCa__IpCa_converted;
        dqs[8] = var_INa__INa_converted;
        dqs[9] = var_INa__h;
        dqs[10] = var_IK1__IK1_converted;
        dqs[11] = var_IK1__GK1_calc;
        dqs[12] = var_INaL__INaL_converted;
        dqs[13] = var_INaL__GNaL;
        dqs[14] = var_IKr__IKr_converted;
        dqs[15] = var_IKr__GKr_calc;
        dqs[16] = var_IKs__IKs_converted;
        dqs[17] = var_IKs__GKs_calc;
        dqs[18] = var_INaCa_i__INaCa_i_converted;
        dqs[19] = var_INaCa_i__INaCa_ss_converted;
        dqs[20] = var_INaK__INaK_converted;
        dqs[21] = var_membrane__Istim_converted;
        dqs[22] = var_Ito__Ito_converted;
        dqs[23] = var_Ito__Gto;
        dqs[24] = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler>::Initialise(void)
{
    this->mSystemName = "ohara_rudy_cipa_v1_2017";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-88.00190465);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.6e-05);

    // rY[2]:
    this->mVariableNames.push_back("CaMK__CaMKt");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0125840447);

    // rY[3]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.268004498);

    // rY[4]:
    this->mVariableNames.push_back("intracellular_ions__nass");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.268089977);

    // rY[5]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(144.6555918);

    // rY[6]:
    this->mVariableNames.push_back("intracellular_ions__kss");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(144.6555651);

    // rY[7]:
    this->mVariableNames.push_back("intracellular_ions__cass");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(8.49e-05);

    // rY[8]:
    this->mVariableNames.push_back("intracellular_ions__cansr");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.619574538);

    // rY[9]:
    this->mVariableNames.push_back("intracellular_ions__cajsr");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.571234014);

    // rY[10]:
    this->mVariableNames.push_back("INa__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.007344121102);

    // rY[11]:
    this->mVariableNames.push_back("INa__hf");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.6981071913);

    // rY[12]:
    this->mVariableNames.push_back("INa__hs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.6980895801);

    // rY[13]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.6979908432);

    // rY[14]:
    this->mVariableNames.push_back("INa__hsp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.4549485525);

    // rY[15]:
    this->mVariableNames.push_back("INa__jp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.6979245865);

    // rY[16]:
    this->mVariableNames.push_back("INaL__mL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001882617273);

    // rY[17]:
    this->mVariableNames.push_back("INaL__hL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.5008548855);

    // rY[18]:
    this->mVariableNames.push_back("INaL__hLp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.2693065357);

    // rY[19]:
    this->mVariableNames.push_back("Ito__a");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001001097687);

    // rY[20]:
    this->mVariableNames.push_back("Ito__iF");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9995541745);

    // rY[21]:
    this->mVariableNames.push_back("Ito__iS");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.5865061736);

    // rY[22]:
    this->mVariableNames.push_back("Ito__ap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0005100862934);

    // rY[23]:
    this->mVariableNames.push_back("Ito__iFp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9995541823);

    // rY[24]:
    this->mVariableNames.push_back("Ito__iSp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.6393399482);

    // rY[25]:
    this->mVariableNames.push_back("ICaL__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.34e-09);

    // rY[26]:
    this->mVariableNames.push_back("ICaL__ff");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999999909);

    // rY[27]:
    this->mVariableNames.push_back("ICaL__fs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9102412777);

    // rY[28]:
    this->mVariableNames.push_back("ICaL__fcaf");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999999909);

    // rY[29]:
    this->mVariableNames.push_back("ICaL__fcas");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9998046777);

    // rY[30]:
    this->mVariableNames.push_back("ICaL__jca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999738312);

    // rY[31]:
    this->mVariableNames.push_back("ICaL__ffp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999999909);

    // rY[32]:
    this->mVariableNames.push_back("ICaL__fcafp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999999909);

    // rY[33]:
    this->mVariableNames.push_back("ICaL__nca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.002749414044);

    // rY[34]:
    this->mVariableNames.push_back("IKr__IC1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999637);

    // rY[35]:
    this->mVariableNames.push_back("IKr__IC2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(6.83208e-05);

    // rY[36]:
    this->mVariableNames.push_back("IKr__C1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.80145e-08);

    // rY[37]:
    this->mVariableNames.push_back("IKr__C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.26619e-05);

    // rY[38]:
    this->mVariableNames.push_back("IKr__O");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00015551);

    // rY[39]:
    this->mVariableNames.push_back("IKr__IO");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.67623e-05);

    // rY[40]:
    this->mVariableNames.push_back("IKr__IObound");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[41]:
    this->mVariableNames.push_back("IKr__Obound");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[42]:
    this->mVariableNames.push_back("IKr__Cbound");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[43]:
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.2707758025);

    // rY[44]:
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0001928503426);

    // rY[45]:
    this->mVariableNames.push_back("IK1__xk1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9967597594);

    // rY[46]:
    this->mVariableNames.push_back("ryr__Jrelnp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.5e-07);

    // rY[47]:
    this->mVariableNames.push_back("ryr__Jrelp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.12e-07);

    // mParameters[0]:
    this->mParameterNames.push_back("Dynamic_hERG_D");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[1]:
    this->mParameterNames.push_back("Dynamic_hERG_Kmax");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[2]:
    this->mParameterNames.push_back("Dynamic_hERG_Kt");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[3]:
    this->mParameterNames.push_back("Dynamic_hERG_Ku");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[4]:
    this->mParameterNames.push_back("Dynamic_hERG_Vhalf");
    this->mParameterUnits.push_back("millivolt");

    // mParameters[5]:
    this->mParameterNames.push_back("Dynamic_hERG_halfmax");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[6]:
    this->mParameterNames.push_back("Dynamic_hERG_n");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[7]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[8]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[9]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[10]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[11]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_background_calcium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_background_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_background_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_calcium_pump_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[18]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[19]:
    this->mParameterNames.push_back("membrane_persistent_sodium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[20]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[21]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[22]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[23]:
    this->mParameterNames.push_back("membrane_sodium_potassium_pump_current_permeability");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[24]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_channel_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_channel_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_background_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_background_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_background_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_calcium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_persistent_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_persistent_sodium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [17]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [18]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [19]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_dyadic_space_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [20]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [21]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [22]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [23]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [24]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellohara_rudy_cipa_v1_2017FromCellMLBackwardEuler)

