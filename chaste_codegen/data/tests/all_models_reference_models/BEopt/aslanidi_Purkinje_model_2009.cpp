//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: aslanidi_2009
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: BackwardEuler)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "aslanidi_Purkinje_model_2009.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"
#include "CardiacNewtonSolver.hpp"

class Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<35; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables(const Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables&);
    Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables& operator= (const Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables&);
    Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 35;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][35];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = -100.0 * exp(0.037435883507802616 * var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[0] < 2){
                    double left = _lookup_table_0[i-1][0];
                    double right = _lookup_table_0[i+1][0];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 0 at ["<<i<<"][0] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[0] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] >= 2){
                    EXCEPTION("Lookup table 0 at ["<<i<<"][0] has non-finite value: " << val);
                }
                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 - exp(0.037435883507802616 * var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[1] < 2){
                    double left = _lookup_table_0[i-1][1];
                    double right = _lookup_table_0[i+1][1];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[1] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] >= 2){
                    EXCEPTION("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val);
                }
                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.024333324280071702 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.013102559227730915 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + 0.27000000000000002 * exp(-0.024333324280071702 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.037435883507802616 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.1245 * exp(-0.003743588350780262 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-0.26470588235294124 + 0.049019607843137261 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-1.1230765052340785 + 0.074871767015605231 * var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[9] < 2){
                    double left = _lookup_table_0[i-1][9];
                    double right = _lookup_table_0[i+1][9];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 9 at ["<<i<<"][9] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[9] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[9] >= 2){
                    EXCEPTION("Lookup table 9 at ["<<i<<"][9] has non-finite value: " << val);
                }
                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = -1.0 + exp(-1.1230765052340785 + 0.074871767015605231 * var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[10] < 2){
                    double left = _lookup_table_0[i-1][10];
                    double right = _lookup_table_0[i+1][10];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 10 at ["<<i<<"][10] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[10] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[10] >= 2){
                    EXCEPTION("Lookup table 10 at ["<<i<<"][10] has non-finite value: " << val);
                }
                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.074871767015605231 * var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[11] < 2){
                    double left = _lookup_table_0[i-1][11];
                    double right = _lookup_table_0[i+1][11];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 11 at ["<<i<<"][11] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[11] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[11] >= 2){
                    EXCEPTION("Lookup table 11 at ["<<i<<"][11] has non-finite value: " << val);
                }
                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = -1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[12] < 2){
                    double left = _lookup_table_0[i-1][12];
                    double right = _lookup_table_0[i+1][12];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 12 at ["<<i<<"][12] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[12] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[12] >= 2){
                    EXCEPTION("Lookup table 12 at ["<<i<<"][12] has non-finite value: " << val);
                }
                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(0.59347181008902072 - 0.14836795252225518 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.58999999999999997 + 0.80000000000000004 * exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__V) / (1.0 + exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(1.8 + 0.10000000000000001 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-5.4098360655737707 - 0.16393442622950821 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0680000000000001 * exp(0.54333333333333333 + 0.033333333333333333 * var_chaste_interface__membrane__V) + 1.0680000000000001 * exp(-0.54333333333333333 - 0.033333333333333333 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(9.0909090909090917 + 0.15151515151515152 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.014999999999999999 * exp(4.6558441558441563 + 0.064935064935064929 * var_chaste_interface__membrane__V) + 0.014999999999999999 * exp(-0.86074429771908767 - 0.012004801920768308 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-0.0069387755102040824 - 0.081632653061224483 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 100.0 + 900.0 / (1.0 + exp(0.20000000000000001 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(0.65693430656934315 - 0.072992700729927015 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(-0.55000000000000004 + var_chaste_interface__membrane__V) < 7.8124999999948028e-7) ? (-2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)) + 7.6100000000000007e-5 * (44.600000000000001 + var_chaste_interface__membrane__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__membrane__V)) + 640000.00000042573 * (-0.54999921875000002 + var_chaste_interface__membrane__V) * (2.8124999999996902e-10 / (-1.0 + exp(9.9999999999988984e-8)) + 2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)))) : ((fabs(44.600000000000001 + var_chaste_interface__membrane__V) < 1.0030090258350555e-8) ? (7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)) + 0.00036000000000000002 * (-0.55000000000000004 + var_chaste_interface__membrane__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__membrane__V)) - 49850000.061936118 * (44.599999989969909 + var_chaste_interface__membrane__V) * (-7.6328986866047728e-13 / (1.0 - exp(9.9999999875755032e-8)) - 7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)))) : (7.6100000000000007e-5 * (44.600000000000001 + var_chaste_interface__membrane__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__membrane__V)) + 0.00036000000000000002 * (-0.55000000000000004 + var_chaste_interface__membrane__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__membrane__V)))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[23] < 2){
                    double left = _lookup_table_0[i-1][23];
                    double right = _lookup_table_0[i+1][23];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 23 at ["<<i<<"][23] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[23] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[23] >= 2){
                    EXCEPTION("Lookup table 23 at ["<<i<<"][23] has non-finite value: " << val);
                }
                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(-0.55000000000000004 + var_chaste_interface__membrane__V) < 7.8124999999948028e-7) ? (-1.406249999998284e-10 / (-1.0 + exp(-9.999999999987797e-8)) + 3.8050000000000003e-5 * (44.600000000000001 + var_chaste_interface__membrane__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__membrane__V)) + 320000.00000021287 * (-0.54999921875000002 + var_chaste_interface__membrane__V) * (2.8124999999996902e-10 / (-1.0 + exp(9.9999999999988984e-8)) + 2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)))) : ((fabs(44.600000000000001 + var_chaste_interface__membrane__V) < 1.0030090258350555e-8) ? (3.8164493433023864e-13 / (1.0 - exp(-9.9999999875755032e-8)) + 0.00018000000000000001 * (-0.55000000000000004 + var_chaste_interface__membrane__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__membrane__V)) - 24925000.030968059 * (44.599999989969909 + var_chaste_interface__membrane__V) * (-7.6328986866047728e-13 / (1.0 - exp(9.9999999875755032e-8)) - 7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)))) : (3.8050000000000003e-5 * (44.600000000000001 + var_chaste_interface__membrane__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__membrane__V)) + 0.00018000000000000001 * (-0.55000000000000004 + var_chaste_interface__membrane__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__membrane__V)))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[24] < 2){
                    double left = _lookup_table_0[i-1][24];
                    double right = _lookup_table_0[i+1][24];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 24 at ["<<i<<"][24] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[24] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[24] >= 2){
                    EXCEPTION("Lookup table 24 at ["<<i<<"][24] has non-finite value: " << val);
                }
                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(11.311475409836067 + 0.16393442622950821 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 175.0 + 125.0 / (1.0 + exp(-4.166666666666667 - 0.16666666666666666 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][26] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(47.130000000000003 + var_chaste_interface__membrane__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[27] < 2){
                    double left = _lookup_table_0[i-1][27];
                    double right = _lookup_table_0[i+1][27];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 27 at ["<<i<<"][27] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[27] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[27] >= 2){
                    EXCEPTION("Lookup table 27 at ["<<i<<"][27] has non-finite value: " << val);
                }
                _lookup_table_0[i][27] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][28] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 25.0 * exp(-3.7999999999999998 + 0.050000000000000003 * var_chaste_interface__membrane__V) / (1.0 + exp(-3.7999999999999998 + 0.050000000000000003 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][29] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 25.0 * exp(-2.7000000000000002 - 0.050000000000000003 * var_chaste_interface__membrane__V) / (1.0 + exp(-2.7000000000000002 - 0.050000000000000003 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][30] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.0044200000000000003 / ((1.0 + exp(1.7333333333333334 + 0.066666666666666666 * var_chaste_interface__membrane__V)) * (0.0044200000000000003 / (1.0 + exp(1.7333333333333334 + 0.066666666666666666 * var_chaste_interface__membrane__V)) + 0.050000000000000003 * exp(-0.66666666666666663 + 0.066666666666666666 * var_chaste_interface__membrane__V) / (1.0 + exp(-0.66666666666666663 + 0.066666666666666666 * var_chaste_interface__membrane__V))));

                _lookup_table_0[i][31] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 21.5 + 30.0 / (1.0 + exp(-2.5 + 0.10000000000000001 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][32] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.029999999999999999 / ((1.0 + exp(1.6666666666666667 + 0.066666666666666666 * var_chaste_interface__membrane__V)) * (0.029999999999999999 / (1.0 + exp(1.6666666666666667 + 0.066666666666666666 * var_chaste_interface__membrane__V)) + 0.10000000000000001 * exp(-2.6666666666666665 + 0.066666666666666666 * var_chaste_interface__membrane__V) / (1.0 + exp(-2.6666666666666665 + 0.066666666666666666 * var_chaste_interface__membrane__V))));

                _lookup_table_0[i][33] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 6.0 + 5.0 / (1.0 + exp(-1.6499999999999999 + 0.10000000000000001 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][34] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[35];

    // Lookup tables
    double (*_lookup_table_0)[35];
    int _lookup_table_0_num_misshit_piecewise[35] = {0};

};

std::shared_ptr<Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables> Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_amplitude_converted = -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__stim_duration = 1.0; // millisecond
        const double var_chaste_interface__membrane__stim_period = 800.0; // millisecond
        const double var_chaste_interface__membrane__stim_start = 100.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude_converted),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler::Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractBackwardEulerCardiacCell<13>(
                30,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 0.0043750000000000004; // (var_q_leak__q_leak_max) [millimolar_per_millisecond]
        this->mParameters[1] = 3000.0; // (var_q_rel__g_rel_max) [per_millisecond]
        this->mParameters[2] = 0.0043750000000000004; // (var_q_up__q_up_max) [millimolar_per_millisecond]
        this->mParameters[3] = 1.0; // (var_intracellular_ion_concentrations__conc_clamp) [dimensionless]
        this->mParameters[4] = 1.8; // (var_model_parameters__Ca_o) [millimolar]
        this->mParameters[5] = 5.4000000000000004; // (var_model_parameters__K_o) [millimolar]
        this->mParameters[6] = 140.0; // (var_model_parameters__Na_o) [millimolar]
        this->mParameters[7] = 0.3392328; // (var_i_Ca_L__g_Ca_L) [dimensionless]
        this->mParameters[8] = 8.0; // (var_i_Na__g_Na) [milliS_per_microF]
        this->mParameters[9] = 0; // (var_i_Na__perc_reduced_inact_for_IpNa) [dimensionless]
        this->mParameters[10] = 0; // (var_i_Na__shift_INa_inact) [millivolt]
        this->mParameters[11] = 0.25; // (var_i_K1__g_K1_max) [milliS_per_microF]
        this->mParameters[12] = 0.040008488000000002; // (var_i_Kr__g_Kr_max) [milliS_per_microF]
        this->mParameters[13] = 0.052581329000000003; // (var_i_Ks__g_Ks_max) [milliS_per_microF]
        this->mParameters[14] = 4.5; // (var_i_NaCa__i_NaCa_max) [microA_per_microF]
        this->mParameters[15] = 0.14135944; // (var_i_to_1__g_to_1) [milliS_per_microF]
    }

    Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler::~Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler()
    {
    }

    AbstractLookupTableCollection* Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler::GetLookupTableCollection()
    {
        return Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables::Instance();
    }
    
    double Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.43812846286808
        double var_chaste_interface__Ca_i__Ca_i = rY[1];
        // Units: millimolar; Initial value: 0.00022355433459434943
        double var_chaste_interface__i_Na_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.9786390933308567
        double var_chaste_interface__i_Na_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.09866447258167589
        double var_chaste_interface__i_Na_L_m_L_gate__m_L = rY[5];
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_L_h_L_gate__h_L = rY[6];
        // Units: dimensionless; Initial value: 0.8946968372659203
        double var_chaste_interface__i_Ca_L_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 2.322223865147363e-06
        double var_chaste_interface__i_Ca_L_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.9985607329462358
        double var_chaste_interface__i_Ca_L_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.8173435436674658
        double var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca = rY[10];
        // Units: dimensionless; Initial value: 0.9610551285529658
        double var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 = rY[11];
        // Units: dimensionless; Initial value: 0.868690796671854
        double var_chaste_interface__i_Ca_T_b_gate__b = rY[12];
        // Units: dimensionless; Initial value: 0.0002563937630984438
        double var_chaste_interface__i_Ca_T_g_gate__g = rY[13];
        // Units: dimensionless; Initial value: 0.9720432601848331
        double var_chaste_interface__i_to_1_a_gate__a = rY[14];
        // Units: dimensionless; Initial value: 0.0004238729429342389
        double var_chaste_interface__i_to_1_i_gate__i = rY[15];
        // Units: dimensionless; Initial value: 0.9990935802459496
        double var_chaste_interface__i_to_1_i2_gate__i2 = rY[16];
        // Units: dimensionless; Initial value: 0.9777368439681764
        double var_chaste_interface__i_Kr_xr_gate__xr = rY[17];
        // Units: dimensionless; Initial value: 0.07084939408222911
        double var_chaste_interface__i_Ks_xs1_gate__xs1 = rY[18];
        // Units: dimensionless; Initial value: 0.0011737654433043125
        double var_chaste_interface__i_Ks_xs2_gate__xs2 = rY[19];
        // Units: dimensionless; Initial value: 0.001179442867470093
        double var_chaste_interface__i_to_2_a_gate__a = rY[20];
        // Units: dimensionless; Initial value: 0.0014909437525000811
        double var_chaste_interface__intracellular_ion_concentrations__Na_i = rY[21];
        // Units: millimolar; Initial value: 9.927155552932733
        double var_chaste_interface__intracellular_ion_concentrations__Cl_i = rY[22];
        // Units: millimolar; Initial value: 18.904682470140408
        double var_chaste_interface__intracellular_ion_concentrations__K_i = rY[23];
        // Units: millimolar; Initial value: 141.9670801746057
        double var_chaste_interface__Ca_r__Ca_r = rY[27];
        // Units: millimolar; Initial value: 0.00022418117117903934
        
        // Lookup table indexing
        const bool _oob_0 = Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        const double var_equilibrium_potentials__E_K = 26.712338705498265 * log(mParameters[5] / var_chaste_interface__intracellular_ion_concentrations__K_i); // millivolt
        const double var_equilibrium_potentials__E_Na = 26.712338705498265 * log(mParameters[6] / var_chaste_interface__intracellular_ion_concentrations__Na_i); // millivolt
        const double var_membrane__i_tot = 0.0077250000000000001 * var_chaste_interface__membrane__V + 0.0060102762087371094 * log(100.0 / var_chaste_interface__intracellular_ion_concentrations__Cl_i) - 0.0025000000000000001 * var_equilibrium_potentials__E_Na - 0.0050000000000000001 * var_equilibrium_potentials__E_K + (0.0040000000000000001 + 0.4389381125701739 * sqrt(mParameters[5]) * mParameters[11] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_equilibrium_potentials__E_K)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_equilibrium_potentials__E_K)) + (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 0.080320000000000003 * var_equilibrium_potentials__E_K) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 0.061749999999999999 * var_equilibrium_potentials__E_K)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_equilibrium_potentials__E_K - 0.51429999999999998 * var_chaste_interface__membrane__V))))) * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) + 20.0 * ((fabs(var_chaste_interface__membrane__V) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__V) * (3.8593999999999993e-9 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__intracellular_ion_concentrations__Cl_i) / (1.0 - exp(9.9999999999999995e-8)) + 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__intracellular_ion_concentrations__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) - 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__intracellular_ion_concentrations__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) : (0.0014448004881001341 * (_lt_0_row[0] + var_chaste_interface__intracellular_ion_concentrations__Cl_i) * var_chaste_interface__membrane__V / (_lt_0_row[1]))) * var_chaste_interface__i_to_2_a_gate__a + 0.0027599999999999999 * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) / (_lt_0_row[2]) + 0.057500000000000002 * var_chaste_interface__Ca_i__Ca_i / (0.00050000000000000001 + var_chaste_interface__Ca_i__Ca_i) + 0.13 * (-50.0 + var_chaste_interface__membrane__V) * var_chaste_interface__i_Ca_T_b_gate__b * var_chaste_interface__i_Ca_T_g_gate__g + 0.037374999999999999 * pow(var_chaste_interface__i_Na_L_m_L_gate__m_L, 3) * (-var_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) * var_chaste_interface__i_Na_L_h_L_gate__h_L + (-1.5 * pow(mParameters[6], 3) * var_chaste_interface__Ca_i__Ca_i * _lt_0_row[3] + 0.40000000000000002 * pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * mParameters[14] * mParameters[4] * _lt_0_row[4]) / ((_lt_0_row[5]) * (1.0 + 6.9444444444444451e-9 / pow(var_chaste_interface__Ca_i__Ca_i, 2)) * (1004882.8125 * var_chaste_interface__Ca_i__Ca_i + 1.3 * pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) + pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * mParameters[4] + 1.5 * pow(mParameters[6], 3) * var_chaste_interface__Ca_i__Ca_i + 0.0035999999999999999 * pow(mParameters[6], 3) * (1.0 + 0.081300813008130079 * var_chaste_interface__intracellular_ion_concentrations__Na_i) + 1860.8670000000004 * (1.0 + 416.66666666666669 * var_chaste_interface__Ca_i__Ca_i) * mParameters[4])) + pow(var_chaste_interface__i_Na_m_gate__m, 3) * (-var_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) * (0.20000000000000001 * var_chaste_interface__i_Na_j_gate__j + 0.80000000000000004 * var_chaste_interface__i_Na_h_gate__h) * mParameters[8] + (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * (0.20000000000000001 * var_chaste_interface__i_to_1_i2_gate__i2 + 0.80000000000000004 * var_chaste_interface__i_to_1_i_gate__i) * mParameters[15] * var_chaste_interface__i_to_1_a_gate__a + 0.61875000000000002 * mParameters[5] / ((1.0 + 100.0 / pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 2)) * (1.5 + mParameters[5]) * (1.0 + _lt_0_row[7] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[6])) * _lt_0_row[6])) + (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca_i__Ca_i), 1.3999999999999999))) * (-26.712338705498265 * log((0.018329999999999999 * mParameters[6] + mParameters[5]) / (0.018329999999999999 * var_chaste_interface__intracellular_ion_concentrations__Na_i + var_chaste_interface__intracellular_ion_concentrations__K_i)) + var_chaste_interface__membrane__V) * mParameters[13] * var_chaste_interface__i_Ks_xs1_gate__xs1 * var_chaste_interface__i_Ks_xs2_gate__xs2 + 0.43033148291193518 * sqrt(mParameters[5]) * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * mParameters[12] * var_chaste_interface__i_Kr_xr_gate__xr / (_lt_0_row[8]) + ((fabs(-15.0 + var_chaste_interface__membrane__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__membrane__V) * (4.6891709999892238e-6 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_r__Ca_r * exp(9.9999999999770198e-8)) / (-1.0 + exp(9.9999999999770198e-8)) + 4.6891709999892238e-6 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_r__Ca_r * exp(-9.9999999999770198e-8)) / (-1.0 + exp(-9.9999999999770198e-8))) - 4.6891709999892238e-6 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_r__Ca_r * exp(-9.9999999999770198e-8)) / (-1.0 + exp(-9.9999999999770198e-8))) : (3.510865186083326 * (-15.0 + var_chaste_interface__membrane__V) * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_r__Ca_r * _lt_0_row[9]) / (_lt_0_row[10]))) * mParameters[7] * var_chaste_interface__i_Ca_L_d_gate__d * var_chaste_interface__i_Ca_L_f2_gate__f2 * var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 * var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca * var_chaste_interface__i_Ca_L_f_gate__f + ((fabs(var_chaste_interface__membrane__V) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__V) * (3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_i__Ca_i * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_i__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_i__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.0028824983370007683 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_i__Ca_i * _lt_0_row[11]) * var_chaste_interface__membrane__V / (_lt_0_row[12]))); // microA_per_microF
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_membrane__i_tot; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler::ComputeResidual(double var_chaste_interface__environment__time, const double rCurrentGuess[13], double rResidual[13])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.43812846286808
        double var_chaste_interface__i_Na_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.9786390933308567
        double var_chaste_interface__i_Na_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.09866447258167589
        double var_chaste_interface__i_Na_L_m_L_gate__m_L = rY[5];
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_L_h_L_gate__h_L = rY[6];
        // Units: dimensionless; Initial value: 0.8946968372659203
        double var_chaste_interface__i_Ca_L_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 2.322223865147363e-06
        double var_chaste_interface__i_Ca_L_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.9985607329462358
        double var_chaste_interface__i_Ca_L_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.8173435436674658
        double var_chaste_interface__i_to_1_a_gate__a = rY[14];
        // Units: dimensionless; Initial value: 0.0004238729429342389
        double var_chaste_interface__i_to_1_i_gate__i = rY[15];
        // Units: dimensionless; Initial value: 0.9990935802459496
        double var_chaste_interface__i_to_1_i2_gate__i2 = rY[16];
        // Units: dimensionless; Initial value: 0.9777368439681764
        double var_chaste_interface__i_Kr_xr_gate__xr = rY[17];
        // Units: dimensionless; Initial value: 0.07084939408222911
        double var_chaste_interface__i_Ks_xs1_gate__xs1 = rY[18];
        // Units: dimensionless; Initial value: 0.0011737654433043125
        double var_chaste_interface__i_Ks_xs2_gate__xs2 = rY[19];
        // Units: dimensionless; Initial value: 0.001179442867470093
        
        //output_nonlinear_state_assignments
        double var_chaste_interface__Ca_JSR__Ca_JSR = rCurrentGuess[0];
        double var_chaste_interface__Ca_MK_act__Ca_MK_trap = rCurrentGuess[1];
        double var_chaste_interface__Ca_NSR__Ca_NSR = rCurrentGuess[2];
        double var_chaste_interface__Ca_i__Ca_i = rCurrentGuess[3];
        double var_chaste_interface__Ca_r__Ca_r = rCurrentGuess[4];
        double var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 = rCurrentGuess[5];
        double var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca = rCurrentGuess[6];
        double var_chaste_interface__i_to_2_a_gate__a = rCurrentGuess[7];
        double var_chaste_interface__intracellular_ion_concentrations__Cl_i = rCurrentGuess[8];
        double var_chaste_interface__intracellular_ion_concentrations__K_i = rCurrentGuess[9];
        double var_chaste_interface__intracellular_ion_concentrations__Na_i = rCurrentGuess[10];
        double var_chaste_interface__q_rel_ri_gate__ri = rCurrentGuess[11];
        double var_chaste_interface__q_rel_ro_gate__ro = rCurrentGuess[12];
        
        // Lookup table indexing
        const bool _oob_0 = Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        //output_equations
        const double var_Ca_MK_act__Ca_MK_bound = 0.050000000000000003 * (1.0 - var_chaste_interface__Ca_MK_act__Ca_MK_trap) / (1.0 + 0.14999999999999999 / var_chaste_interface__Ca_r__Ca_r); // dimensionless
        const double var_Ca_MK_act__Ca_MK_act = var_Ca_MK_act__Ca_MK_bound + var_chaste_interface__Ca_MK_act__Ca_MK_trap; // dimensionless
        const double var_Ca_r__q_diff = 5.0 * var_chaste_interface__Ca_r__Ca_r - 5.0 * var_chaste_interface__Ca_i__Ca_i; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_MK_act__Ca_MK_trap = -0.00068000000000000005 * var_chaste_interface__Ca_MK_act__Ca_MK_trap + 0.050000000000000003 * (var_Ca_MK_act__Ca_MK_bound + var_chaste_interface__Ca_MK_act__Ca_MK_trap) * var_Ca_MK_act__Ca_MK_bound; // 1 / millisecond
        const double var_i_Ca_p__i_Ca_p = 0.057500000000000002 * var_chaste_interface__Ca_i__Ca_i / (0.00050000000000000001 + var_chaste_interface__Ca_i__Ca_i); // microA_per_microF
        const double d_dt_chaste_interface_var_i_to_2_a_gate__a = 1 / (1.0 + 0.1502 / var_chaste_interface__Ca_r__Ca_r) - var_chaste_interface__i_to_2_a_gate__a; // 1 / millisecond
        const double var_i_to_2__i_to_2 = 20.0 * ((fabs(var_chaste_interface__membrane__V) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__V) * (3.8593999999999993e-9 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__intracellular_ion_concentrations__Cl_i) / (1.0 - exp(9.9999999999999995e-8)) + 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__intracellular_ion_concentrations__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) - 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__intracellular_ion_concentrations__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) : (0.0014448004881001341 * (_lt_0_row[0] + var_chaste_interface__intracellular_ion_concentrations__Cl_i) * var_chaste_interface__membrane__V / (_lt_0_row[1]))) * var_chaste_interface__i_to_2_a_gate__a; // microA_per_microF
        const double var_background_currents__i_Ca_b = ((fabs(var_chaste_interface__membrane__V) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__V) * (3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_i__Ca_i * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_i__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_i__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.0028824983370007683 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_i__Ca_i * _lt_0_row[11]) * var_chaste_interface__membrane__V / (_lt_0_row[12]))); // microA_per_microF
        const double var_i_Ca_L__i_Ca_L_max = ((fabs(-15.0 + var_chaste_interface__membrane__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__membrane__V) * (4.6891709999892238e-6 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_r__Ca_r * exp(9.9999999999770198e-8)) / (-1.0 + exp(9.9999999999770198e-8)) + 4.6891709999892238e-6 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_r__Ca_r * exp(-9.9999999999770198e-8)) / (-1.0 + exp(-9.9999999999770198e-8))) - 4.6891709999892238e-6 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_r__Ca_r * exp(-9.9999999999770198e-8)) / (-1.0 + exp(-9.9999999999770198e-8))) : (3.510865186083326 * (-15.0 + var_chaste_interface__membrane__V) * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_r__Ca_r * _lt_0_row[9]) / (_lt_0_row[10]))); // microA_per_microF
        const double var_i_Ca_L__i_Ca_L = mParameters[7] * var_i_Ca_L__i_Ca_L_max * var_chaste_interface__i_Ca_L_d_gate__d * var_chaste_interface__i_Ca_L_f2_gate__f2 * var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 * var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca * var_chaste_interface__i_Ca_L_f_gate__f; // microA_per_microF
        const double d_dt_chaste_interface_var_i_Ca_L_f_Ca2_gate__f_Ca2 = (-var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 + 1 / (1.0 - 100.0 * var_i_Ca_L__i_Ca_L)) / (125.0 + 300.0 / (1.0 + exp(-4.375 - 25.0 * var_i_Ca_L__i_Ca_L))); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ca_L_f_Ca_gate__f_Ca = (0.14999999999999999 - var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca + 0.55000000000000004 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca_r__Ca_r) + 0.29999999999999999 / (1.0 - 20.0 * var_i_Ca_L__i_Ca_L)) / (0.5 + 1 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca_r__Ca_r) + 10.0 * var_Ca_MK_act__Ca_MK_act / (0.14999999999999999 + var_Ca_MK_act__Ca_MK_act)); // 1 / millisecond
        const double var_equilibrium_potentials__E_Cl = -26.712338705498265 * log(100.0 / var_chaste_interface__intracellular_ion_concentrations__Cl_i); // millivolt
        const double var_background_currents__i_Cl_b = 0.00022499999999999999 * var_chaste_interface__membrane__V - 0.00022499999999999999 * var_equilibrium_potentials__E_Cl; // microA_per_microF
        const double var_equilibrium_potentials__E_K = 26.712338705498265 * log(mParameters[5] / var_chaste_interface__intracellular_ion_concentrations__K_i); // millivolt
        const double var_CT_K_Cl__CT_K_Cl = 7.0755999999999996e-6 * (-var_equilibrium_potentials__E_Cl + var_equilibrium_potentials__E_K) / (87.825100000000006 - var_equilibrium_potentials__E_Cl + var_equilibrium_potentials__E_K); // millimolar_per_millisecond
        const double var_background_currents__i_K_b = 0.0050000000000000001 * var_chaste_interface__membrane__V - 0.0050000000000000001 * var_equilibrium_potentials__E_K; // microA_per_microF
        const double var_equilibrium_potentials__E_Na = 26.712338705498265 * log(mParameters[6] / var_chaste_interface__intracellular_ion_concentrations__Na_i); // millivolt
        const double var_CT_Na_Cl__CT_Na_Cl = 9.8442999999999999e-6 * pow((-var_equilibrium_potentials__E_Cl + var_equilibrium_potentials__E_Na), 4) / (59494197.640692554 + pow((-var_equilibrium_potentials__E_Cl + var_equilibrium_potentials__E_Na), 4)); // millimolar_per_millisecond
        const double var_background_currents__i_Na_b = 0.0025000000000000001 * var_chaste_interface__membrane__V - 0.0025000000000000001 * var_equilibrium_potentials__E_Na; // microA_per_microF
        const double var_i_K1__i_K1 = (0.0040000000000000001 + 0.4389381125701739 * sqrt(mParameters[5]) * mParameters[11] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_equilibrium_potentials__E_K)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_equilibrium_potentials__E_K)) + (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 0.080320000000000003 * var_equilibrium_potentials__E_K) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 0.061749999999999999 * var_equilibrium_potentials__E_K)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_equilibrium_potentials__E_K - 0.51429999999999998 * var_chaste_interface__membrane__V))))) * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V); // microA_per_microF
        const double var_i_K_p__i_K_p = 0.0027599999999999999 * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) / (_lt_0_row[2]); // microA_per_microF
        const double var_i_Kr__i_Kr = 0.43033148291193518 * sqrt(mParameters[5]) * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * mParameters[12] * var_chaste_interface__i_Kr_xr_gate__xr / (_lt_0_row[8]); // microA_per_microF
        const double var_i_Ks__i_Ks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca_i__Ca_i), 1.3999999999999999))) * (-26.712338705498265 * log((0.018329999999999999 * mParameters[6] + mParameters[5]) / (0.018329999999999999 * var_chaste_interface__intracellular_ion_concentrations__Na_i + var_chaste_interface__intracellular_ion_concentrations__K_i)) + var_chaste_interface__membrane__V) * mParameters[13] * var_chaste_interface__i_Ks_xs1_gate__xs1 * var_chaste_interface__i_Ks_xs2_gate__xs2; // microA_per_microF
        const double var_i_Na__i_Na = pow(var_chaste_interface__i_Na_m_gate__m, 3) * (-var_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) * (0.20000000000000001 * var_chaste_interface__i_Na_j_gate__j + 0.80000000000000004 * var_chaste_interface__i_Na_h_gate__h) * mParameters[8]; // microA_per_microF
        const double var_i_NaCa__i_NaCa = (-1.5 * pow(mParameters[6], 3) * var_chaste_interface__Ca_i__Ca_i * _lt_0_row[3] + 0.40000000000000002 * pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * mParameters[14] * mParameters[4] * _lt_0_row[4]) / ((_lt_0_row[5]) * (1.0 + 6.9444444444444451e-9 / pow(var_chaste_interface__Ca_i__Ca_i, 2)) * (1004882.8125 * var_chaste_interface__Ca_i__Ca_i + 1.3 * pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) + pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * mParameters[4] + 1.5 * pow(mParameters[6], 3) * var_chaste_interface__Ca_i__Ca_i + 0.0035999999999999999 * pow(mParameters[6], 3) * (1.0 + 0.081300813008130079 * var_chaste_interface__intracellular_ion_concentrations__Na_i) + 1860.8670000000004 * (1.0 + 416.66666666666669 * var_chaste_interface__Ca_i__Ca_i) * mParameters[4])); // microA_per_microF
        const double var_i_NaK__i_NaK = 0.61875000000000002 * mParameters[5] / ((1.0 + 100.0 / pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 2)) * (1.5 + mParameters[5]) * (1.0 + _lt_0_row[7] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[6])) * _lt_0_row[6])); // microA_per_microF
        const double var_i_Na_L__i_Na_L = 0.037374999999999999 * pow(var_chaste_interface__i_Na_L_m_L_gate__m_L, 3) * (-var_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) * var_chaste_interface__i_Na_L_h_L_gate__h_L; // microA_per_microF
        const double var_i_to_1__i_to_1 = (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * (0.20000000000000001 * var_chaste_interface__i_to_1_i2_gate__i2 + 0.80000000000000004 * var_chaste_interface__i_to_1_i_gate__i) * mParameters[15] * var_chaste_interface__i_to_1_a_gate__a; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ion_concentrations__Cl_i = (-6.767281717060562e-9 * var_background_currents__i_Cl_b - 6.767281717060562e-9 * var_i_to_2__i_to_2 + var_CT_K_Cl__CT_K_Cl + var_CT_Na_Cl__CT_Na_Cl) * mParameters[3]; // millimolar / millisecond
        const double d_dt_chaste_interface_var_intracellular_ion_concentrations__K_i = (1.3534563434121124e-8 * var_i_NaK__i_NaK - 6.767281717060562e-9 * var_background_currents__i_K_b - 6.767281717060562e-9 * var_i_K1__i_K1 - 6.767281717060562e-9 * var_i_K_p__i_K_p - 6.767281717060562e-9 * var_i_Kr__i_Kr - 6.767281717060562e-9 * var_i_Ks__i_Ks - 6.767281717060562e-9 * var_i_to_1__i_to_1 + var_CT_K_Cl__CT_K_Cl) * mParameters[3]; // millimolar / millisecond
        const double d_dt_chaste_interface_var_intracellular_ion_concentrations__Na_i = (-2.0301845151181685e-8 * var_i_NaCa__i_NaCa - 2.0301845151181685e-8 * var_i_NaK__i_NaK - 6.767281717060562e-9 * var_background_currents__i_Na_b - 6.767281717060562e-9 * var_i_Na__i_Na - 6.767281717060562e-9 * var_i_Na_L__i_Na_L + var_CT_Na_Cl__CT_Na_Cl) * mParameters[3]; // millimolar / millisecond
        const double var_q_leak__q_leak = 0.066666666666666666 * var_chaste_interface__Ca_NSR__Ca_NSR * mParameters[0]; // millimolar_per_millisecond
        const double var_q_rel_ri_gate__Ca_fac = 1 / (1.0 + exp(3.3333333333333335 + 66.666666666666671 * var_i_Ca_L__i_Ca_L)); // millimolar
        const double d_dt_chaste_interface_var_q_rel_ri_gate__ri = (-var_chaste_interface__q_rel_ri_gate__ri + 1 / (1.0 + exp(-16.0 + 80.0 * var_q_rel_ri_gate__Ca_fac + 40000.0 * var_chaste_interface__Ca_r__Ca_r))) / (3.0 + (350.0 - 10.0 * var_Ca_MK_act__Ca_MK_act / (0.14999999999999999 + var_Ca_MK_act__Ca_MK_act)) / (1.0 + exp(-15.0 + 5000.0 * var_chaste_interface__Ca_r__Ca_r + 15.0 * var_q_rel_ri_gate__Ca_fac)) + 10.0 * var_Ca_MK_act__Ca_MK_act / (0.14999999999999999 + var_Ca_MK_act__Ca_MK_act)); // 1 / millisecond
        const double var_q_rel__q_rel = (-var_chaste_interface__Ca_r__Ca_r + var_chaste_interface__Ca_JSR__Ca_JSR) * mParameters[1] * var_chaste_interface__q_rel_ri_gate__ri * var_chaste_interface__q_rel_ro_gate__ro / (1.0 + exp(2.6000000000000001 + 0.20000000000000001 * mParameters[7] * var_i_Ca_L__i_Ca_L_max)); // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_r__Ca_r = (-var_Ca_r__q_diff + 0.23999999999999996 * var_q_rel__q_rel - 1.1504378919002956e-7 * var_i_Ca_L__i_Ca_L) / (1.0 + 2.2480000000000002 * var_chaste_interface__Ca_r__Ca_r / pow((0.0086999999999999994 + var_chaste_interface__Ca_r__Ca_r), 2) + 0.094 * var_chaste_interface__Ca_r__Ca_r / pow((0.00087000000000000001 + var_chaste_interface__Ca_r__Ca_r), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_q_rel_ro_gate__ro = -0.33333333333333331 * var_chaste_interface__q_rel_ro_gate__ro + 0.33333333333333331 * pow(var_chaste_interface__Ca_JSR__Ca_JSR, 1.8999999999999999) * pow(var_i_Ca_L__i_Ca_L, 2) / ((1.0 + pow(var_i_Ca_L__i_Ca_L, 2)) * (pow(var_chaste_interface__Ca_JSR__Ca_JSR, 1.8999999999999999) + 1644.6531773416521 * pow((var_chaste_interface__Ca_r__Ca_r / (0.0028 + var_chaste_interface__Ca_r__Ca_r)), 1.8999999999999999))); // 1 / millisecond
        const double var_q_tr__q_tr = 0.0083333333333333332 * var_chaste_interface__Ca_NSR__Ca_NSR - 0.0083333333333333332 * var_chaste_interface__Ca_JSR__Ca_JSR; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_JSR__Ca_JSR = (-var_q_rel__q_rel + var_q_tr__q_tr) / (1.0 + 8.0 / pow((0.80000000000000004 + var_chaste_interface__Ca_JSR__Ca_JSR), 2)); // millimolar / millisecond
        const double var_q_up__q_up = 0.5 * (1.0 + 0.75 * var_Ca_MK_act__Ca_MK_act / (0.14999999999999999 + var_Ca_MK_act__Ca_MK_act)) * var_chaste_interface__Ca_i__Ca_i * mParameters[2] / (0.00092000000000000003 - 0.00017000000000000001 * var_Ca_MK_act__Ca_MK_act / (0.14999999999999999 + var_Ca_MK_act__Ca_MK_act) + var_chaste_interface__Ca_i__Ca_i); // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca_NSR__Ca_NSR = -var_q_leak__q_leak - 0.086956521739130432 * var_q_tr__q_tr + var_q_up__q_up; // millimolar / millisecond
        const double d_dt_chaste_interface_var_Ca_i__Ca_i = -(3.383640858530281e-9 * var_background_currents__i_Ca_b + 3.383640858530281e-9 * var_i_Ca_p__i_Ca_p + 0.081176470588235281 * var_q_up__q_up - 0.029411764705882353 * var_Ca_r__q_diff - 6.767281717060562e-9 * var_i_NaCa__i_NaCa - 0.081176470588235281 * var_q_leak__q_leak) / (1.0 + 0.14000000000000001 * var_chaste_interface__Ca_i__Ca_i / pow((0.00050000000000000001 + var_chaste_interface__Ca_i__Ca_i), 2) + 0.10000000000000001 * var_chaste_interface__Ca_i__Ca_i / pow((0.0023800000000000002 + var_chaste_interface__Ca_i__Ca_i), 2)); // millimolar / millisecond
        
        rResidual[3] = rCurrentGuess[3] - rY[1] - mDt*d_dt_chaste_interface_var_Ca_i__Ca_i;
        rResidual[6] = rCurrentGuess[6] - rY[10] - mDt*d_dt_chaste_interface_var_i_Ca_L_f_Ca_gate__f_Ca;
        rResidual[5] = rCurrentGuess[5] - rY[11] - mDt*d_dt_chaste_interface_var_i_Ca_L_f_Ca2_gate__f_Ca2;
        rResidual[7] = rCurrentGuess[7] - rY[20] - mDt*d_dt_chaste_interface_var_i_to_2_a_gate__a;
        rResidual[10] = rCurrentGuess[10] - rY[21] - mDt*d_dt_chaste_interface_var_intracellular_ion_concentrations__Na_i;
        rResidual[8] = rCurrentGuess[8] - rY[22] - mDt*d_dt_chaste_interface_var_intracellular_ion_concentrations__Cl_i;
        rResidual[9] = rCurrentGuess[9] - rY[23] - mDt*d_dt_chaste_interface_var_intracellular_ion_concentrations__K_i;
        rResidual[1] = rCurrentGuess[1] - rY[24] - mDt*d_dt_chaste_interface_var_Ca_MK_act__Ca_MK_trap;
        rResidual[2] = rCurrentGuess[2] - rY[25] - mDt*d_dt_chaste_interface_var_Ca_NSR__Ca_NSR;
        rResidual[0] = rCurrentGuess[0] - rY[26] - mDt*d_dt_chaste_interface_var_Ca_JSR__Ca_JSR;
        rResidual[4] = rCurrentGuess[4] - rY[27] - mDt*d_dt_chaste_interface_var_Ca_r__Ca_r;
        rResidual[11] = rCurrentGuess[11] - rY[28] - mDt*d_dt_chaste_interface_var_q_rel_ri_gate__ri;
        rResidual[12] = rCurrentGuess[12] - rY[29] - mDt*d_dt_chaste_interface_var_q_rel_ro_gate__ro;
    }

    void Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler::ComputeJacobian(double var_chaste_interface__environment__time, const double rCurrentGuess[13], double rJacobian[13][13])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.43812846286808
        double var_chaste_interface__i_Na_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.9786390933308567
        double var_chaste_interface__i_Na_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.09866447258167589
        double var_chaste_interface__i_Na_L_m_L_gate__m_L = rY[5];
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_L_h_L_gate__h_L = rY[6];
        // Units: dimensionless; Initial value: 0.8946968372659203
        double var_chaste_interface__i_Ca_L_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 2.322223865147363e-06
        double var_chaste_interface__i_Ca_L_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.9985607329462358
        double var_chaste_interface__i_Ca_L_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.8173435436674658
        double var_chaste_interface__i_to_1_a_gate__a = rY[14];
        // Units: dimensionless; Initial value: 0.0004238729429342389
        double var_chaste_interface__i_to_1_i_gate__i = rY[15];
        // Units: dimensionless; Initial value: 0.9990935802459496
        double var_chaste_interface__i_to_1_i2_gate__i2 = rY[16];
        // Units: dimensionless; Initial value: 0.9777368439681764
        double var_chaste_interface__i_Kr_xr_gate__xr = rY[17];
        // Units: dimensionless; Initial value: 0.07084939408222911
        double var_chaste_interface__i_Ks_xs1_gate__xs1 = rY[18];
        // Units: dimensionless; Initial value: 0.0011737654433043125
        double var_chaste_interface__i_Ks_xs2_gate__xs2 = rY[19];
        // Units: dimensionless; Initial value: 0.001179442867470093
        
        // Lookup table indexing
        const bool _oob_0 = Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        double var_chaste_interface__Ca_JSR__Ca_JSR = rCurrentGuess[0];
        double var_chaste_interface__Ca_MK_act__Ca_MK_trap = rCurrentGuess[1];
        double var_chaste_interface__Ca_NSR__Ca_NSR = rCurrentGuess[2];
        double var_chaste_interface__Ca_i__Ca_i = rCurrentGuess[3];
        double var_chaste_interface__Ca_r__Ca_r = rCurrentGuess[4];
        double var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 = rCurrentGuess[5];
        double var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca = rCurrentGuess[6];
        double var_chaste_interface__i_to_2_a_gate__a = rCurrentGuess[7];
        double var_chaste_interface__intracellular_ion_concentrations__Cl_i = rCurrentGuess[8];
        double var_chaste_interface__intracellular_ion_concentrations__K_i = rCurrentGuess[9];
        double var_chaste_interface__intracellular_ion_concentrations__Na_i = rCurrentGuess[10];
        double var_chaste_interface__q_rel_ri_gate__ri = rCurrentGuess[11];
        double var_chaste_interface__q_rel_ro_gate__ro = rCurrentGuess[12];
        
        const double var_x0 = 0.80000000000000004 + var_chaste_interface__Ca_JSR__Ca_JSR;
        const double var_x1 = pow(var_x0, (-2));
        const double var_x2 = 1 / (1.0 + 8.0 * var_x1);
        const double var_x3 = -14.999998664383064 + var_chaste_interface__membrane__V;
        const double var_x4 = -0.34100000000000003 * mParameters[4];
        const double var_x5 = exp(9.9999999999770198e-8);
        const double var_x6 = var_chaste_interface__Ca_r__Ca_r;
        const double var_x7 = 4.6891709999892238e-6 / (-1.0 + var_x5);
        const double var_x8 = exp(-9.9999999999770198e-8);
        const double var_x9 = var_x4 + var_x6 * var_x8;
        const double var_x10 = 1 / (-1.0 + var_x8);
        const double var_x11 = 4.6891709999892238e-6 * var_x10;
        const double var_x12 = var_x11 * var_x9;
        const double var_x13 = var_x3 * (var_x12 + var_x7 * (var_x4 + var_x5 * var_x6));
        const double var_x14 = -15.0 + var_chaste_interface__membrane__V;
        const double var_x15 = fabs(var_x14) < 1.3356169352718439e-6;
        const double var_x16 = 0.074871767015605231 * var_chaste_interface__membrane__V;
        const double var_x17 = exp(-1.1230765052340785 + var_x16);
        const double var_x18 = var_x4 + var_x17 * var_x6;
        const double var_x19 = -1.0 + var_x17;
        const double var_x20 = 3.510865186083326 * var_x14 / var_x19;
        const double var_x21 = ((var_x15) ? (-var_x12 + 374358.83507888648 * var_x13) : (var_x18 * var_x20)) * mParameters[7];
        const double var_x22 = exp(2.6000000000000001 + 0.20000000000000001 * var_x21);
        const double var_x23 = 1.0 + var_x22;
        const double var_x24 = 1 / var_x23;
        const double var_x25 = var_x24 * mParameters[1] * var_chaste_interface__q_rel_ro_gate__ro;
        const double var_x26 = var_x25 * var_chaste_interface__q_rel_ri_gate__ri;
        const double var_x27 = var_x26;
        const double var_x28 = -var_chaste_interface__Ca_r__Ca_r + var_chaste_interface__Ca_JSR__Ca_JSR;
        const double var_x29 = var_x28 * mParameters[1] * var_chaste_interface__q_rel_ri_gate__ri;
        const double var_x30 = var_x11 * var_x8;
        const double var_x31 = var_x30 + var_x5 * var_x7;
        const double var_x32 = ((var_x15) ? (-var_x30 + var_x31 * (-5615382.0261832969 + 374358.83507888648 * var_chaste_interface__membrane__V)) : (var_x17 * var_x20)) * mParameters[7];
        const double var_x33 = var_x22 * var_x29 * var_x32 * var_chaste_interface__q_rel_ro_gate__ro / pow(var_x23, 2);
        const double var_x34 = var_x25 * var_x28;
        const double var_x35 = var_x2;
        const double var_x36 = var_x24 * var_x29;
        const double var_x37 = 1.0 - var_chaste_interface__Ca_MK_act__Ca_MK_trap;
        const double var_x38 = 1 / var_chaste_interface__Ca_r__Ca_r;
        const double var_x39 = 1.0 + 0.14999999999999999 * var_x38;
        const double var_x40 = 1 / var_x39;
        const double var_x41 = 0.050000000000000003 * var_x40;
        const double var_x42 = var_x37 * var_x41;
        const double var_x43 = var_x42 + var_chaste_interface__Ca_MK_act__Ca_MK_trap;
        const double var_x44 = 0.0025000000000000005 * var_x40;
        const double var_x45 = 1 - var_x41;
        const double var_x46 = pow(var_chaste_interface__Ca_r__Ca_r, (-2));
        const double var_x47 = var_x37 * var_x46 / pow(var_x39, 2);
        const double var_x48 = 0.14999999999999999 + var_x42 + var_chaste_interface__Ca_MK_act__Ca_MK_trap;
        const double var_x49 = 1 / var_x48;
        const double var_x50 = var_x45 * var_x49;
        const double var_x51 = var_x43 / pow(var_x48, 2);
        const double var_x52 = var_x51 * (-1.0 + var_x41);
        const double var_x53 = 0.75 * var_x50 + 0.75 * var_x52;
        const double var_x54 = var_x43 * var_x49;
        const double var_x55 = 0.00092000000000000003 - 0.00017000000000000001 * var_x54 + var_chaste_interface__Ca_i__Ca_i;
        const double var_x56 = mParameters[2] / var_x55;
        const double var_x57 = 0.5 * var_chaste_interface__Ca_i__Ca_i;
        const double var_x58 = var_x56 * var_x57;
        const double var_x59 = 0.00017000000000000001 * var_x50 + 0.00017000000000000001 * var_x52;
        const double var_x60 = 1.0 + 0.75 * var_x54;
        const double var_x61 = var_x60 * mParameters[2] / pow(var_x55, 2);
        const double var_x62 = var_x57 * var_x61;
        const double var_x63 = var_x56 * var_x60;
        const double var_x64 = var_x47 * var_x49;
        const double var_x65 = var_x47 * var_x51;
        const double var_x66 = 0.0056249999999999998 * var_x64 - 0.0056249999999999998 * var_x65;
        const double var_x67 = 1.2750000000000001e-6 * var_x64 - 1.2750000000000001e-6 * var_x65;
        const double var_x68 = 0.04058823529411764 * var_chaste_interface__Ca_i__Ca_i;
        const double var_x69 = var_x56 * var_x68;
        const double var_x70 = var_x61 * var_x68;
        const double var_x71 = 0.00050000000000000001 + var_chaste_interface__Ca_i__Ca_i;
        const double var_x72 = pow(var_x71, (-2));
        const double var_x73 = 0.14000000000000001 * var_x72;
        const double var_x74 = 0.0023800000000000002 + var_chaste_interface__Ca_i__Ca_i;
        const double var_x75 = 0.10000000000000001 / pow(var_x74, 2);
        const double var_x76 = 1.0 + var_x73 * var_chaste_interface__Ca_i__Ca_i + var_x75 * var_chaste_interface__Ca_i__Ca_i;
        const double var_x77 = 1 / var_x76;
        const double var_x78 = var_x77;
        const double var_x79 = 0.005411764705882352 * mParameters[0];
        const double var_x80 = exp(9.9999999999999995e-8);
        const double var_x81 = 3.8499135947999997e-9 / (-1.0 + var_x80);
        const double var_x82 = exp(-9.9999999999999995e-8);
        const double var_x83 = 3.8499135947999997e-9 / (-1.0 + var_x82);
        const double var_x84 = var_x82 * var_x83;
        const double var_x85 = fabs(var_chaste_interface__membrane__V);
        const double var_x86 = var_x85 < 1.3356169352749131e-6;
        const double var_x87 = exp(var_x16);
        const double var_x88 = 0.0028824983370007683 * var_chaste_interface__membrane__V / (-1.0 + var_x87);
        const double var_x89 = 1.9455934936549115e-10 / var_x71;
        const double var_x90 = 0.04058823529411764 * var_x63;
        const double var_x91 = _lt_0_row[3];
        const double var_x92 = pow(mParameters[6], 3);
        const double var_x93 = 1 / (1.0 + 0.27000000000000002 * var_x91);
        const double var_x94 = 1.0 + 6.9444444444444451e-9 / pow(var_chaste_interface__Ca_i__Ca_i, 2);
        const double var_x95 = 1 / var_x94;
        const double var_x96 = pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3);
        const double var_x97 = var_x96 * mParameters[4];
        const double var_x98 = 1.5 * var_x92;
        const double var_x99 = var_x98 * var_chaste_interface__Ca_i__Ca_i;
        const double var_x100 = var_x92 * (1.0 + 0.081300813008130079 * var_chaste_interface__intracellular_ion_concentrations__Na_i);
        const double var_x101 = (1.0 + 416.66666666666669 * var_chaste_interface__Ca_i__Ca_i) * mParameters[4];
        const double var_x102 = 1 / (var_x97 + var_x99 + 1004882.8125 * var_chaste_interface__Ca_i__Ca_i + 0.0035999999999999999 * var_x100 + 1.3 * var_x96 + 1860.8670000000004 * var_x101);
        const double var_x103 = var_x102 * var_x93 * var_x95;
        const double var_x104 = var_x103 * var_x91 * var_x92;
        const double var_x105 = -1004882.8125 - var_x98 - 775361.25000000012 * mParameters[4];
        const double var_x106 = mParameters[14] * _lt_0_row[4];
        const double var_x107 = -var_x91 * var_x99 + 0.40000000000000002 * var_x106 * var_x97;
        const double var_x108 = var_x107 * var_x93;
        const double var_x109 = var_x108 * var_x95 / pow((1.2936831875607387e-6 * var_x96 + 0.0018518248862973764 * var_x101 + 9.9514091350826051e-7 * var_x97 + 3.5825072886297377e-9 * var_x100 + 1.4927113702623908e-6 * var_x92 * var_chaste_interface__Ca_i__Ca_i + var_chaste_interface__Ca_i__Ca_i), 2);
        const double var_x110 = 6.7016758831103969e-21 * var_x109;
        const double var_x111 = var_x102 * var_x108 / (pow(var_x94, 2) * pow(var_chaste_interface__Ca_i__Ca_i, 3));
        const double var_x112 = var_chaste_interface__Ca_i__Ca_i;
        const double var_x113 = var_x83 * (var_x4 + var_x112 * var_x82);
        const double var_x114 = pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 2);
        const double var_x115 = var_x114 * mParameters[4];
        const double var_x116 = -3 * var_x115 - 3.9000000000000004 * var_x114 - 0.00029268292682926828 * var_x92;
        const double var_x117 = var_x103 * var_x106 * var_x115;
        const double var_x118 = 0.0086999999999999994 + var_chaste_interface__Ca_r__Ca_r;
        const double var_x119 = pow(var_x118, (-2));
        const double var_x120 = var_x119 * var_chaste_interface__Ca_r__Ca_r;
        const double var_x121 = 0.00087000000000000001 + var_chaste_interface__Ca_r__Ca_r;
        const double var_x122 = pow(var_x121, (-2));
        const double var_x123 = 0.094 * var_x122;
        const double var_x124 = 1 / (1.0 + 2.2480000000000002 * var_x120 + var_x123 * var_chaste_interface__Ca_r__Ca_r);
        const double var_x125 = 0.23999999999999996 * var_x26;
        const double var_x126 = var_chaste_interface__i_Ca_L_d_gate__d * var_chaste_interface__i_Ca_L_f2_gate__f2 * var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 * var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca * var_chaste_interface__i_Ca_L_f_gate__f;
        const double var_x127 = var_x126 * var_x32;
        const double var_x128 = var_x126 * var_x21;
        const double var_x129 = var_x21 * var_chaste_interface__i_Ca_L_d_gate__d * var_chaste_interface__i_Ca_L_f2_gate__f2 * var_chaste_interface__i_Ca_L_f_gate__f;
        const double var_x130 = var_x129 * var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca;
        const double var_x131 = 1.1504378919002956e-7 * var_x124;
        const double var_x132 = var_x129 * var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2;
        const double var_x133 = 0.23999999999999996 * var_x124;
        const double var_x134 = exp(-4.375 - 25.0 * var_x128);
        const double var_x135 = 1.0 + var_x134;
        const double var_x136 = 1 / var_x135;
        const double var_x137 = 1 / (125.0 + 300.0 * var_x136);
        const double var_x138 = -var_x128;
        const double var_x139 = 0.01 / pow((0.01 + var_x138), 2);
        const double var_x140 = var_x137 * var_x139;
        const double var_x141 = 0.083333333333333329 * var_x134 * (-var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 + 1 / (1.0 - 100.0 * var_x128)) / (pow(var_x135, 2) * pow((0.41666666666666669 + var_x136), 2));
        const double var_x142 = -10.0 * var_x50 - 10.0 * var_x52;
        const double var_x143 = 1 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca_r__Ca_r);
        const double var_x144 = 0.01 * (0.14999999999999999 - var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca + 0.55000000000000004 * var_x143 + 0.29999999999999999 / (1.0 - 20.0 * var_x128)) / pow((0.050000000000000003 + var_x54 + 0.10000000000000001 * var_x143), 2);
        const double var_x145 = 10.0 * var_x54;
        const double var_x146 = 1 / (0.5 + var_x145 + var_x143);
        const double var_x147 = pow((0.0030000000000000001 + var_chaste_interface__Ca_r__Ca_r), (-2));
        const double var_x148 = 0.014999999999999999 / pow((0.050000000000000003 + var_x138), 2);
        const double var_x149 = 0.074999999999999997 * var_x65 - 0.074999999999999997 * var_x64;
        const double var_x150 = 3.8593999999999993e-9 / (1.0 - var_x80);
        const double var_x151 = -100.0 * var_x82 + var_chaste_interface__intracellular_ion_concentrations__Cl_i;
        const double var_x152 = 1 / (1.0 - var_x82);
        const double var_x153 = 3.8593999999999993e-9 * var_x152;
        const double var_x154 = 7.7187999999999989e-8 * var_x152;
        const double var_x155 = var_x85 < 2.6712338705498262e-6;
        const double var_x156 = 0.037435883507802616 * var_chaste_interface__membrane__V;
        const double var_x157 = exp(var_x156);
        const double var_x158 = 0.028896009762002683 * var_chaste_interface__membrane__V / (1.0 - var_x157);
        const double var_x159 = 1 / var_chaste_interface__intracellular_ion_concentrations__Cl_i;
        const double var_x160 = log(100.0 * var_x159);
        const double var_x161 = 1 / var_chaste_interface__intracellular_ion_concentrations__K_i;
        const double var_x162 = log(var_x161 * mParameters[5]);
        const double var_x163 = 26.712338705498265 * var_x162;
        const double var_x164 = var_x163 + 26.712338705498265 * var_x160;
        const double var_x165 = 0.00018900582374462349 / (87.825100000000006 + var_x164);
        const double var_x166 = 2.4504050574882179e-8 * var_x164 / pow((1 + 0.30415380916729118 * var_x160 + 0.30415380916729118 * var_x162), 2);
        const double var_x167 = var_x159 * var_x166 - var_x159 * var_x165;
        const double var_x168 = 1 / var_chaste_interface__intracellular_ion_concentrations__Na_i;
        const double var_x169 = var_x160 + log(var_x168 * mParameters[6]);
        const double var_x170 = pow(var_x169, 4);
        const double var_x171 = 2.8839711417365218e-9 * pow(var_x169, 7) / pow((1 + 0.0085580149227345564 * var_x170), 2);
        const double var_x172 = 20.048989239399607 * pow(var_x169, 3) / (59494197.640692554 + 509152.231225166 * var_x170);
        const double var_x173 = var_x159 * var_x171 - var_x159 * var_x172;
        const double var_x174 = var_x161 * var_x166 - var_x161 * var_x165;
        const double var_x175 = var_x168 * var_x171 - var_x168 * var_x172;
        const double var_x176 = 1 / var_chaste_interface__Ca_i__Ca_i;
        const double var_x177 = pow(var_x176, 1.3999999999999999);
        const double var_x178 = 1.0 + 6.4818210260626455e-7 * var_x177;
        const double var_x179 = 1 / (0.018329999999999999 * var_chaste_interface__intracellular_ion_concentrations__Na_i + var_chaste_interface__intracellular_ion_concentrations__K_i);
        const double var_x180 = mParameters[13] * var_chaste_interface__i_Ks_xs1_gate__xs1 * var_chaste_interface__i_Ks_xs2_gate__xs2;
        const double var_x181 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 6.3708927812613361 * var_x162);
        const double var_x182 = 1.0 + var_x181;
        const double var_x183 = 1 / var_x182;
        const double var_x184 = exp(-2.4444678999999998 + 13.738155796237757 * var_x162 - 0.51429999999999998 * var_chaste_interface__membrane__V);
        const double var_x185 = 1.0 + var_x184;
        const double var_x186 = 1 / var_x185;
        const double var_x187 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 2.1455350448256207 * var_x162);
        const double var_x188 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 1.6494869150645177 * var_x162);
        const double var_x189 = var_x188 + 0.49124000000000001 * var_x187;
        const double var_x190 = var_x186 * var_x189;
        const double var_x191 = var_x161 * var_x181 / pow(var_x182, 2);
        const double var_x192 = sqrt(mParameters[5]);
        const double var_x193 = var_x183 * var_x192 * mParameters[11];
        const double var_x194 = 1 / (var_x190 + 1.02 * var_x183);
        const double var_x195 = 26.712338705498265 * var_x161;
        const double var_x196 = var_x179 * var_x180 * (-6.767281717060562e-9 - 4.0603690302363372e-9 / var_x178);
        const double var_x197 = mParameters[5] / (var_x96 * (1.5 + mParameters[5]) * pow((0.01 + 1 / var_x114), 2) * (1.0 + _lt_0_row[7] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[6])) * exp(-var_x156)));
        const double var_x198 = 2.010502764933119e-20 * var_x109;
        const double var_x199 = exp(3.3333333333333335 + 66.666666666666671 * var_x128);
        const double var_x200 = 1.0 + var_x199;
        const double var_x201 = 1 / var_x200;
        const double var_x202 = exp(-15.0 + 5000.0 * var_chaste_interface__Ca_r__Ca_r + 15.0 * var_x201);
        const double var_x203 = 1.0 + var_x202;
        const double var_x204 = 1 / var_x203;
        const double var_x205 = 350.0 - var_x145;
        const double var_x206 = var_x204 * var_x205;
        const double var_x207 = exp(-16.0 + 80.0 * var_x201 + 40000.0 * var_chaste_interface__Ca_r__Ca_r);
        const double var_x208 = 1.0 + var_x207;
        const double var_x209 = (-var_chaste_interface__q_rel_ri_gate__ri + 1 / var_x208) / pow((0.29999999999999999 + var_x54 + 0.10000000000000001 * var_x206), 2);
        const double var_x210 = 0.01 * var_x209;
        const double var_x211 = var_x199 / pow(var_x200, 2);
        const double var_x212 = var_x127 * var_x211;
        const double var_x213 = var_x202 * var_x205 / pow(var_x203, 2);
        const double var_x214 = 1 / (3.0 + var_x145 + var_x206);
        const double var_x215 = var_x207 * var_x214 / pow(var_x208, 2);
        const double var_x216 = var_x130 * var_x211;
        const double var_x217 = 5333.333333333333 * var_x215;
        const double var_x218 = 10.0 * var_x209 * var_x213;
        const double var_x219 = var_x132 * var_x211;
        const double var_x220 = pow(var_chaste_interface__Ca_JSR__Ca_JSR, 1.8999999999999999);
        const double var_x221 = 0.0028 + var_chaste_interface__Ca_r__Ca_r;
        const double var_x222 = 1 / var_x221;
        const double var_x223 = pow((var_x222 * var_chaste_interface__Ca_r__Ca_r), 1.8999999999999999);
        const double var_x224 = 1 / (var_x220 + 1644.6531773416521 * var_x223);
        const double var_x225 = var_x13 - 1.252587239994243e-11 * var_x10 * var_x9;
        const double var_x226 = -1 + 0.066666666666666666 * var_chaste_interface__membrane__V;
        const double var_x227 = pow(var_x226, 2) / pow(var_x19, 2);
        const double var_x228 = ((var_x15) ? (140144537401.62091 * pow(var_x225, 2)) : (2773.3892298416795 * var_x227 * pow(var_x18, 2)));
        const double var_x229 = pow(mParameters[7], 2);
        const double var_x230 = pow(var_chaste_interface__i_Ca_L_d_gate__d, 2);
        const double var_x231 = pow(var_chaste_interface__i_Ca_L_f2_gate__f2, 2);
        const double var_x232 = pow(var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2, 2);
        const double var_x233 = pow(var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca, 2);
        const double var_x234 = pow(var_chaste_interface__i_Ca_L_f_gate__f, 2);
        const double var_x235 = var_x229 * var_x230 * var_x231 * var_x232 * var_x233 * var_x234;
        const double var_x236 = var_x228 * var_x235;
        const double var_x237 = 1.0 + var_x236;
        const double var_x238 = 1 / var_x237;
        const double var_x239 = var_x236 * var_x238;
        const double var_x240 = var_x239 / pow((var_x223 + 0.00060803092942449902 * var_x220), 2);
        const double var_x241 = var_x220 * var_x224;
        const double var_x242 = var_x238 * var_x241;
        const double var_x243 = 0.33333333333333331 * ((var_x15) ? (140144537401.62091 * var_x225 * (2 * var_x3 * var_x31 - 2.505174479988486e-11 * var_x10 * var_x8)) : (5546.778459683359 * var_x17 * var_x18 * var_x227));
        const double var_x244 = pow(var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2, 4);
        const double var_x245 = pow(var_x237, (-2));
        const double var_x246 = pow(mParameters[7], 4);
        const double var_x247 = pow(var_chaste_interface__i_Ca_L_d_gate__d, 4);
        const double var_x248 = pow(var_chaste_interface__i_Ca_L_f2_gate__f2, 4);
        const double var_x249 = pow(var_chaste_interface__i_Ca_L_f_gate__f, 4);
        const double var_x250 = var_x241 * var_x245 * var_x246 * var_x247 * var_x248 * var_x249 * pow(var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca, 4);
        const double var_x251 = 0.66666666666666663 * var_x228 * var_x229 * var_x230 * var_x231 * var_x234 * var_x242;
        const double var_x252 = 0.66666666666666663 * ((var_x15) ? (1.9640491363514324e+22 * pow(var_x225, 4)) : (7691687.8202018235 * pow(var_x18, 4) * pow(var_x226, 4) / pow(var_x19, 4)));
        
        
        rJacobian[0][0] = 1.0 - (mDt * (var_x2 * (-0.0083333333333333332 - var_x27) + 0.25 * (0.0083333333333333332 * var_chaste_interface__Ca_NSR__Ca_NSR - 0.0083333333333333332 * var_chaste_interface__Ca_JSR__Ca_JSR - var_x27 * var_x28) / (pow(var_x0, 3) * pow((0.125 + var_x1), 2))));
        rJacobian[0][1] = 0.0;
        rJacobian[0][2] = -(mDt * (0.0083333333333333332 * var_x2));
        rJacobian[0][3] = 0.0;
        rJacobian[0][4] = -(mDt * (var_x2 * (var_x27 + 0.20000000000000001 * var_x33)));
        rJacobian[0][5] = 0.0;
        rJacobian[0][6] = 0.0;
        rJacobian[0][7] = 0.0;
        rJacobian[0][8] = 0.0;
        rJacobian[0][9] = 0.0;
        rJacobian[0][10] = 0.0;
        rJacobian[0][11] = -(mDt * (-var_x34 * var_x35));
        rJacobian[0][12] = -(mDt * (-var_x35 * var_x36));
        rJacobian[1][0] = 0.0;
        rJacobian[1][1] = 1.0 - (mDt * (-0.00068000000000000005 - var_x43 * var_x44 + var_x37 * var_x44 * var_x45));
        rJacobian[1][2] = 0.0;
        rJacobian[1][3] = 0.0;
        rJacobian[1][4] = -(mDt * (0.00037500000000000001 * var_x43 * var_x47 + 1.8750000000000002e-5 * var_x46 * pow(var_x37, 2) / pow(var_x39, 3)));
        rJacobian[1][5] = 0.0;
        rJacobian[1][6] = 0.0;
        rJacobian[1][7] = 0.0;
        rJacobian[1][8] = 0.0;
        rJacobian[1][9] = 0.0;
        rJacobian[1][10] = 0.0;
        rJacobian[1][11] = 0.0;
        rJacobian[1][12] = 0.0;
        rJacobian[2][0] = -(mDt * (0.00072463768115942019));
        rJacobian[2][1] = -(mDt * (var_x53 * var_x58 + var_x59 * var_x62));
        rJacobian[2][2] = 1.0 - (mDt * (-0.00072463768115942019 - 0.066666666666666666 * mParameters[0]));
        rJacobian[2][3] = -(mDt * (-var_x62 + 0.5 * var_x63));
        rJacobian[2][4] = -(mDt * (var_x58 * var_x66 + var_x62 * var_x67));
        rJacobian[2][5] = 0.0;
        rJacobian[2][6] = 0.0;
        rJacobian[2][7] = 0.0;
        rJacobian[2][8] = 0.0;
        rJacobian[2][9] = 0.0;
        rJacobian[2][10] = 0.0;
        rJacobian[2][11] = 0.0;
        rJacobian[2][12] = 0.0;
        rJacobian[3][0] = 0.0;
        rJacobian[3][1] = -(mDt * (-var_x78 * (var_x53 * var_x69 + var_x59 * var_x70)));
        rJacobian[3][2] = -(mDt * (var_x77 * var_x79));
        rJacobian[3][3] = 1.0 - (mDt * (-var_x78 * (0.14705882352941174 + var_x89 + var_x90 - var_x70 + 1.0150922575590843e-8 * var_x104 + 3.383640858530281e-9 * ((var_x86) ? (-var_x84 + (0.5 + 374358.83507802623 * var_chaste_interface__membrane__V) * (var_x84 + var_x80 * var_x81)) : (var_x87 * var_x88)) - 9.3990023848063356e-17 * var_x111 - var_x105 * var_x110 - 1.9455934936549115e-10 * var_x72 * var_chaste_interface__Ca_i__Ca_i) - (-var_x73 - var_x75 + 0.28000000000000003 * var_chaste_interface__Ca_i__Ca_i / pow(var_x71, 3) + 0.20000000000000001 * var_chaste_interface__Ca_i__Ca_i / pow(var_x74, 3)) * (3.383640858530281e-9 * ((var_x86) ? (-var_x113 + 374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__V) * (var_x113 + var_x81 * (var_x4 + var_x112 * var_x80))) : (var_x88 * (var_x4 + var_x112 * var_x87))) + 0.14705882352941174 * var_chaste_interface__Ca_i__Ca_i - 0.14705882352941174 * var_chaste_interface__Ca_r__Ca_r + var_x89 * var_chaste_interface__Ca_i__Ca_i + var_x90 * var_chaste_interface__Ca_i__Ca_i - var_x79 * var_chaste_interface__Ca_NSR__Ca_NSR - 6.767281717060562e-9 * var_x103 * var_x107) / pow(var_x76, 2)));
        rJacobian[3][4] = -(mDt * (-var_x78 * (-0.14705882352941174 + var_x66 * var_x69 + var_x67 * var_x70)));
        rJacobian[3][5] = 0.0;
        rJacobian[3][6] = 0.0;
        rJacobian[3][7] = 0.0;
        rJacobian[3][8] = 0.0;
        rJacobian[3][9] = 0.0;
        rJacobian[3][10] = -(mDt * (-var_x78 * (-8.1207380604726744e-9 * var_x117 - var_x110 * var_x116)));
        rJacobian[3][11] = 0.0;
        rJacobian[3][12] = 0.0;
        rJacobian[4][0] = -(mDt * (var_x124 * var_x125));
        rJacobian[4][1] = 0.0;
        rJacobian[4][2] = 0.0;
        rJacobian[4][3] = -(mDt * (5.0 * var_x124));
        rJacobian[4][4] = 1.0 - (mDt * (var_x124 * (-5.0 - var_x125 - 0.047999999999999994 * var_x33 - 1.1504378919002956e-7 * var_x127) + 0.19788249895518037 * (-var_x123 - 2.2480000000000002 * var_x119 + 4.4960000000000004 * var_chaste_interface__Ca_r__Ca_r / pow(var_x118, 3) + 0.188 * var_chaste_interface__Ca_r__Ca_r / pow(var_x121, 3)) * (5.0 * var_chaste_interface__Ca_i__Ca_i - 5.0 * var_chaste_interface__Ca_r__Ca_r - 1.1504378919002956e-7 * var_x128 + var_x125 * var_x28) / pow((0.44483985765124551 + var_x120 + 0.041814946619217079 * var_x122 * var_chaste_interface__Ca_r__Ca_r), 2)));
        rJacobian[4][5] = -(mDt * (-var_x130 * var_x131));
        rJacobian[4][6] = -(mDt * (-var_x131 * var_x132));
        rJacobian[4][7] = 0.0;
        rJacobian[4][8] = 0.0;
        rJacobian[4][9] = 0.0;
        rJacobian[4][10] = 0.0;
        rJacobian[4][11] = -(mDt * (var_x133 * var_x34));
        rJacobian[4][12] = -(mDt * (var_x133 * var_x36));
        rJacobian[5][0] = 0.0;
        rJacobian[5][1] = 0.0;
        rJacobian[5][2] = 0.0;
        rJacobian[5][3] = 0.0;
        rJacobian[5][4] = -(mDt * (var_x127 * var_x140 - var_x127 * var_x141));
        rJacobian[5][5] = 1.0 - (mDt * (var_x137 * (-1 + var_x130 * var_x139) - var_x130 * var_x141));
        rJacobian[5][6] = -(mDt * (var_x132 * var_x140 - var_x132 * var_x141));
        rJacobian[5][7] = 0.0;
        rJacobian[5][8] = 0.0;
        rJacobian[5][9] = 0.0;
        rJacobian[5][10] = 0.0;
        rJacobian[5][11] = 0.0;
        rJacobian[5][12] = 0.0;
        rJacobian[6][0] = 0.0;
        rJacobian[6][1] = -(mDt * (var_x142 * var_x144));
        rJacobian[6][2] = 0.0;
        rJacobian[6][3] = 0.0;
        rJacobian[6][4] = -(mDt * (var_x144 * (var_x149 + 0.0030000000000000001 * var_x147) + var_x146 * (-0.0016500000000000002 * var_x147 + var_x127 * var_x148)));
        rJacobian[6][5] = -(mDt * (var_x130 * var_x146 * var_x148));
        rJacobian[6][6] = 1.0 - (mDt * (var_x146 * (-1 + var_x132 * var_x148)));
        rJacobian[6][7] = 0.0;
        rJacobian[6][8] = 0.0;
        rJacobian[6][9] = 0.0;
        rJacobian[6][10] = 0.0;
        rJacobian[6][11] = 0.0;
        rJacobian[6][12] = 0.0;
        rJacobian[7][0] = 0.0;
        rJacobian[7][1] = 0.0;
        rJacobian[7][2] = 0.0;
        rJacobian[7][3] = 0.0;
        rJacobian[7][4] = -(mDt * (0.1502 * var_x46 / pow((1.0 + 0.1502 * var_x38), 2)));
        rJacobian[7][5] = 0.0;
        rJacobian[7][6] = 0.0;
        rJacobian[7][7] = 1.0 - (mDt * (-1.0));
        rJacobian[7][8] = 0.0;
        rJacobian[7][9] = 0.0;
        rJacobian[7][10] = 0.0;
        rJacobian[7][11] = 0.0;
        rJacobian[7][12] = 0.0;
        rJacobian[8][0] = 0.0;
        rJacobian[8][1] = 0.0;
        rJacobian[8][2] = 0.0;
        rJacobian[8][3] = 0.0;
        rJacobian[8][4] = 0.0;
        rJacobian[8][5] = 0.0;
        rJacobian[8][6] = 0.0;
        rJacobian[8][7] = -(mDt * (-6.767281717060562e-9 * ((var_x155) ? (-var_x151 * var_x154 + 3743588.3507802621 * (2.6712338705498262e-6 + var_chaste_interface__membrane__V) * (var_x150 * (-100.0 * var_x80 + var_chaste_interface__intracellular_ion_concentrations__Cl_i) + var_x151 * var_x153)) : (var_x158 * (-100.0 * var_x157 + var_chaste_interface__intracellular_ion_concentrations__Cl_i))) * mParameters[3]));
        rJacobian[8][8] = 1.0 - (mDt * ((var_x167 + var_x173 + 4.0673232301870709e-11 * var_x159 - 6.767281717060562e-9 * ((var_x155) ? ((-var_x154 + 20.0 * (0.5 + 187179.41753901311 * var_chaste_interface__membrane__V) * (var_x150 + var_x153)) * var_chaste_interface__i_to_2_a_gate__a) : (var_x158 * var_chaste_interface__i_to_2_a_gate__a))) * mParameters[3]));
        rJacobian[8][9] = -(mDt * (var_x174 * mParameters[3]));
        rJacobian[8][10] = -(mDt * (var_x175 * mParameters[3]));
        rJacobian[8][11] = 0.0;
        rJacobian[8][12] = 0.0;
        rJacobian[9][0] = 0.0;
        rJacobian[9][1] = 0.0;
        rJacobian[9][2] = 0.0;
        rJacobian[9][3] = -(mDt * (-3.6846019495263273e-15 * var_x176 * var_x177 * var_x180 * (-26.712338705498265 * log(var_x179 * (0.018329999999999999 * mParameters[6] + mParameters[5])) + var_chaste_interface__membrane__V) * mParameters[3] / pow(var_x178, 2)));
        rJacobian[9][4] = 0.0;
        rJacobian[9][5] = 0.0;
        rJacobian[9][6] = 0.0;
        rJacobian[9][7] = 0.0;
        rJacobian[9][8] = -(mDt * (var_x167 * mParameters[3]));
        rJacobian[9][9] = 1.0 - (mDt * ((var_x174 + 26.712338705498265 * var_x196 - 9.0384960670823802e-10 * var_x161 + var_x195 * (-2.7069126868242249e-11 - 2.9704178641172085e-9 * var_x193 * var_x194) + (-var_x163 + var_chaste_interface__membrane__V) * (-2.8550729182210769e-9 * var_x193 * (6.4983106368865622 * var_x191 - var_x186 * (1.053972635420138 * var_x161 * var_x187 + 1.6494869150645177 * var_x161 * var_x188) - 13.738155796237757 * var_x161 * var_x184 * var_x189 / pow(var_x185, 2)) / pow((var_x183 + 0.98039215686274506 * var_x190), 2) + 1.892421372783404e-8 * var_x191 * var_x192 * var_x194 * mParameters[11]) - 4.9892498290294737e-10 * var_x161 / (_lt_0_row[2]) + var_x195 * (-1.3534563434121124e-9 * var_chaste_interface__i_to_1_i2_gate__i2 - 5.4138253736484496e-9 * var_chaste_interface__i_to_1_i_gate__i) * mParameters[15] * var_chaste_interface__i_to_1_a_gate__a - 7.7790988316825085e-8 * var_x161 * var_x192 * mParameters[12] * var_chaste_interface__i_Kr_xr_gate__xr / (_lt_0_row[8])) * mParameters[3]));
        rJacobian[9][10] = -(mDt * ((1.6749022249724892e-10 * var_x197 + 0.48963716847178318 * var_x196) * mParameters[3]));
        rJacobian[9][11] = 0.0;
        rJacobian[9][12] = 0.0;
        rJacobian[10][0] = 0.0;
        rJacobian[10][1] = 0.0;
        rJacobian[10][2] = 0.0;
        rJacobian[10][3] = -(mDt * ((3.045276772677253e-8 * var_x104 - 2.8197007154419011e-16 * var_x111 - var_x105 * var_x198) * mParameters[3]));
        rJacobian[10][4] = 0.0;
        rJacobian[10][5] = 0.0;
        rJacobian[10][6] = 0.0;
        rJacobian[10][7] = 0.0;
        rJacobian[10][8] = -(mDt * (var_x173 * mParameters[3]));
        rJacobian[10][9] = 0.0;
        rJacobian[10][10] = 1.0 - (mDt * ((var_x175 - 2.4362214181418025e-8 * var_x117 - 4.5192480335411901e-10 * var_x168 - 2.5123533374587338e-10 * var_x197 - var_x116 * var_x198 - 6.7562758101440786e-9 * var_x168 * pow(var_chaste_interface__i_Na_L_m_L_gate__m_L, 3) * var_chaste_interface__i_Na_L_h_L_gate__h_L - 1.8076992134164759e-7 * var_x168 * pow(var_chaste_interface__i_Na_m_gate__m, 3) * (0.20000000000000001 * var_chaste_interface__i_Na_j_gate__j + 0.80000000000000004 * var_chaste_interface__i_Na_h_gate__h) * mParameters[8]) * mParameters[3]));
        rJacobian[10][11] = 0.0;
        rJacobian[10][12] = 0.0;
        rJacobian[11][0] = 0.0;
        rJacobian[11][1] = -(mDt * (var_x210 * (var_x142 - var_x142 * var_x204)));
        rJacobian[11][2] = 0.0;
        rJacobian[11][3] = 0.0;
        rJacobian[11][4] = -(mDt * (var_x210 * (var_x149 + var_x213 * (5000.0 - 1000.0 * var_x212) - var_x149 * var_x204) - var_x215 * (40000.0 - 5333.333333333333 * var_x212)));
        rJacobian[11][5] = -(mDt * (var_x216 * var_x217 - var_x216 * var_x218));
        rJacobian[11][6] = -(mDt * (var_x217 * var_x219 - var_x218 * var_x219));
        rJacobian[11][7] = 0.0;
        rJacobian[11][8] = 0.0;
        rJacobian[11][9] = 0.0;
        rJacobian[11][10] = 0.0;
        rJacobian[11][11] = 1.0 - (mDt * (-var_x214));
        rJacobian[11][12] = 0.0;
        rJacobian[12][0] = -(mDt * (-2.3414435371998602e-7 * var_x240 * pow(var_chaste_interface__Ca_JSR__Ca_JSR, 2.7999999999999998) + 0.6333333333333333 * var_x224 * var_x239 * pow(var_chaste_interface__Ca_JSR__Ca_JSR, 0.89999999999999991)));
        rJacobian[12][1] = 0.0;
        rJacobian[12][2] = 0.0;
        rJacobian[12][3] = 0.0;
        rJacobian[12][4] = -(mDt * (var_x235 * var_x242 * var_x243 - var_x228 * var_x243 * var_x244 * var_x250 - 0.00020267697647483301 * var_x220 * var_x221 * var_x223 * var_x240 * var_x38 * (1.8999999999999999 * var_x222 - 1.8999999999999999 * var_chaste_interface__Ca_r__Ca_r / pow(var_x221, 2))));
        rJacobian[12][5] = -(mDt * (var_x233 * var_x251 * var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 - var_x250 * var_x252 * pow(var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2, 3)));
        rJacobian[12][6] = -(mDt * (var_x232 * var_x251 * var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca - var_x241 * var_x244 * var_x245 * var_x246 * var_x247 * var_x248 * var_x249 * var_x252 * pow(var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca, 3)));
        rJacobian[12][7] = 0.0;
        rJacobian[12][8] = 0.0;
        rJacobian[12][9] = 0.0;
        rJacobian[12][10] = 0.0;
        rJacobian[12][11] = 0.0;
        rJacobian[12][12] = 1.0 - (mDt * (-0.33333333333333331));
    }

    void Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.43812846286808
        double var_chaste_interface__Ca_i__Ca_i = rY[1];
        // Units: millimolar; Initial value: 0.00022355433459434943
        double var_chaste_interface__i_Na_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.9786390933308567
        double var_chaste_interface__i_Na_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.09866447258167589
        double var_chaste_interface__i_Na_L_m_L_gate__m_L = rY[5];
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_L_h_L_gate__h_L = rY[6];
        // Units: dimensionless; Initial value: 0.8946968372659203
        double var_chaste_interface__i_Ca_L_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 2.322223865147363e-06
        double var_chaste_interface__i_Ca_L_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.9985607329462358
        double var_chaste_interface__i_Ca_L_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.8173435436674658
        double var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca = rY[10];
        // Units: dimensionless; Initial value: 0.9610551285529658
        double var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 = rY[11];
        // Units: dimensionless; Initial value: 0.868690796671854
        double var_chaste_interface__i_Ca_T_b_gate__b = rY[12];
        // Units: dimensionless; Initial value: 0.0002563937630984438
        double var_chaste_interface__i_Ca_T_g_gate__g = rY[13];
        // Units: dimensionless; Initial value: 0.9720432601848331
        double var_chaste_interface__i_to_1_a_gate__a = rY[14];
        // Units: dimensionless; Initial value: 0.0004238729429342389
        double var_chaste_interface__i_to_1_i_gate__i = rY[15];
        // Units: dimensionless; Initial value: 0.9990935802459496
        double var_chaste_interface__i_to_1_i2_gate__i2 = rY[16];
        // Units: dimensionless; Initial value: 0.9777368439681764
        double var_chaste_interface__i_Kr_xr_gate__xr = rY[17];
        // Units: dimensionless; Initial value: 0.07084939408222911
        double var_chaste_interface__i_Ks_xs1_gate__xs1 = rY[18];
        // Units: dimensionless; Initial value: 0.0011737654433043125
        double var_chaste_interface__i_Ks_xs2_gate__xs2 = rY[19];
        // Units: dimensionless; Initial value: 0.001179442867470093
        double var_chaste_interface__i_to_2_a_gate__a = rY[20];
        // Units: dimensionless; Initial value: 0.0014909437525000811
        double var_chaste_interface__intracellular_ion_concentrations__Na_i = rY[21];
        // Units: millimolar; Initial value: 9.927155552932733
        double var_chaste_interface__intracellular_ion_concentrations__Cl_i = rY[22];
        // Units: millimolar; Initial value: 18.904682470140408
        double var_chaste_interface__intracellular_ion_concentrations__K_i = rY[23];
        // Units: millimolar; Initial value: 141.9670801746057
        double var_chaste_interface__Ca_r__Ca_r = rY[27];
        // Units: millimolar; Initial value: 0.00022418117117903934
        
        // Lookup table indexing
        const bool _oob_0 = Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        const double var_i_Ca_p__i_Ca_p = 0.057500000000000002 * var_chaste_interface__Ca_i__Ca_i / (0.00050000000000000001 + var_chaste_interface__Ca_i__Ca_i); // microA_per_microF
        const double var_i_to_2__i_to_2 = 20.0 * ((fabs(var_chaste_interface__membrane__V) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__V) * (3.8593999999999993e-9 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__intracellular_ion_concentrations__Cl_i) / (1.0 - exp(9.9999999999999995e-8)) + 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__intracellular_ion_concentrations__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) - 3.8593999999999993e-9 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__intracellular_ion_concentrations__Cl_i) / (1.0 - exp(-9.9999999999999995e-8))) : (0.0014448004881001341 * (_lt_0_row[0] + var_chaste_interface__intracellular_ion_concentrations__Cl_i) * var_chaste_interface__membrane__V / (_lt_0_row[1]))) * var_chaste_interface__i_to_2_a_gate__a; // microA_per_microF
        const double var_background_currents__i_Ca_b = ((fabs(var_chaste_interface__membrane__V) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__V) * (3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_i__Ca_i * exp(9.9999999999999995e-8)) / (-1.0 + exp(9.9999999999999995e-8)) + 3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_i__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) - 3.8499135947999997e-9 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_i__Ca_i * exp(-9.9999999999999995e-8)) / (-1.0 + exp(-9.9999999999999995e-8))) : (0.0028824983370007683 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_i__Ca_i * _lt_0_row[11]) * var_chaste_interface__membrane__V / (_lt_0_row[12]))); // microA_per_microF
        const double var_i_Ca_L__i_Ca_L_max = ((fabs(-15.0 + var_chaste_interface__membrane__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__membrane__V) * (4.6891709999892238e-6 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_r__Ca_r * exp(9.9999999999770198e-8)) / (-1.0 + exp(9.9999999999770198e-8)) + 4.6891709999892238e-6 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_r__Ca_r * exp(-9.9999999999770198e-8)) / (-1.0 + exp(-9.9999999999770198e-8))) - 4.6891709999892238e-6 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_r__Ca_r * exp(-9.9999999999770198e-8)) / (-1.0 + exp(-9.9999999999770198e-8))) : (3.510865186083326 * (-15.0 + var_chaste_interface__membrane__V) * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_r__Ca_r * _lt_0_row[9]) / (_lt_0_row[10]))); // microA_per_microF
        const double var_i_Ca_L__i_Ca_L = mParameters[7] * var_i_Ca_L__i_Ca_L_max * var_chaste_interface__i_Ca_L_d_gate__d * var_chaste_interface__i_Ca_L_f2_gate__f2 * var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 * var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca * var_chaste_interface__i_Ca_L_f_gate__f; // microA_per_microF
        const double var_equilibrium_potentials__E_Cl = -26.712338705498265 * log(100.0 / var_chaste_interface__intracellular_ion_concentrations__Cl_i); // millivolt
        const double var_background_currents__i_Cl_b = 0.00022499999999999999 * var_chaste_interface__membrane__V - 0.00022499999999999999 * var_equilibrium_potentials__E_Cl; // microA_per_microF
        const double var_equilibrium_potentials__E_K = 26.712338705498265 * log(mParameters[5] / var_chaste_interface__intracellular_ion_concentrations__K_i); // millivolt
        const double var_background_currents__i_K_b = 0.0050000000000000001 * var_chaste_interface__membrane__V - 0.0050000000000000001 * var_equilibrium_potentials__E_K; // microA_per_microF
        const double var_equilibrium_potentials__E_Na = 26.712338705498265 * log(mParameters[6] / var_chaste_interface__intracellular_ion_concentrations__Na_i); // millivolt
        const double var_background_currents__i_Na_b = 0.0025000000000000001 * var_chaste_interface__membrane__V - 0.0025000000000000001 * var_equilibrium_potentials__E_Na; // microA_per_microF
        const double var_i_K1__i_K1 = (0.0040000000000000001 + 0.4389381125701739 * sqrt(mParameters[5]) * mParameters[11] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_equilibrium_potentials__E_K)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_equilibrium_potentials__E_K)) + (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 0.080320000000000003 * var_equilibrium_potentials__E_K) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 0.061749999999999999 * var_equilibrium_potentials__E_K)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_equilibrium_potentials__E_K - 0.51429999999999998 * var_chaste_interface__membrane__V))))) * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V); // microA_per_microF
        const double var_i_K_p__i_K_p = 0.0027599999999999999 * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) / (_lt_0_row[2]); // microA_per_microF
        const double var_i_Kr__i_Kr = 0.43033148291193518 * sqrt(mParameters[5]) * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * mParameters[12] * var_chaste_interface__i_Kr_xr_gate__xr / (_lt_0_row[8]); // microA_per_microF
        const double var_i_Ks__i_Ks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca_i__Ca_i), 1.3999999999999999))) * (-26.712338705498265 * log((0.018329999999999999 * mParameters[6] + mParameters[5]) / (0.018329999999999999 * var_chaste_interface__intracellular_ion_concentrations__Na_i + var_chaste_interface__intracellular_ion_concentrations__K_i)) + var_chaste_interface__membrane__V) * mParameters[13] * var_chaste_interface__i_Ks_xs1_gate__xs1 * var_chaste_interface__i_Ks_xs2_gate__xs2; // microA_per_microF
        const double var_i_Na__i_Na = pow(var_chaste_interface__i_Na_m_gate__m, 3) * (-var_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) * (0.20000000000000001 * var_chaste_interface__i_Na_j_gate__j + 0.80000000000000004 * var_chaste_interface__i_Na_h_gate__h) * mParameters[8]; // microA_per_microF
        const double var_i_NaCa__i_NaCa = (-1.5 * pow(mParameters[6], 3) * var_chaste_interface__Ca_i__Ca_i * _lt_0_row[3] + 0.40000000000000002 * pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * mParameters[14] * mParameters[4] * _lt_0_row[4]) / ((_lt_0_row[5]) * (1.0 + 6.9444444444444451e-9 / pow(var_chaste_interface__Ca_i__Ca_i, 2)) * (1004882.8125 * var_chaste_interface__Ca_i__Ca_i + 1.3 * pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) + pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * mParameters[4] + 1.5 * pow(mParameters[6], 3) * var_chaste_interface__Ca_i__Ca_i + 0.0035999999999999999 * pow(mParameters[6], 3) * (1.0 + 0.081300813008130079 * var_chaste_interface__intracellular_ion_concentrations__Na_i) + 1860.8670000000004 * (1.0 + 416.66666666666669 * var_chaste_interface__Ca_i__Ca_i) * mParameters[4])); // microA_per_microF
        const double var_i_NaK__i_NaK = 0.61875000000000002 * mParameters[5] / ((1.0 + 100.0 / pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 2)) * (1.5 + mParameters[5]) * (1.0 + _lt_0_row[7] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[6])) * _lt_0_row[6])); // microA_per_microF
        const double var_i_Na_L__i_Na_L = 0.037374999999999999 * pow(var_chaste_interface__i_Na_L_m_L_gate__m_L, 3) * (-var_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) * var_chaste_interface__i_Na_L_h_L_gate__h_L; // microA_per_microF
        const double var_i_to_1__i_to_1 = (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * (0.20000000000000001 * var_chaste_interface__i_to_1_i2_gate__i2 + 0.80000000000000004 * var_chaste_interface__i_to_1_i_gate__i) * mParameters[15] * var_chaste_interface__i_to_1_a_gate__a; // microA_per_microF
        const double d_dt_chaste_interface_var_membrane__V = -var_background_currents__i_Ca_b - var_background_currents__i_Cl_b - var_background_currents__i_K_b - var_background_currents__i_Na_b - var_i_Ca_L__i_Ca_L - var_i_Ca_p__i_Ca_p - var_i_K1__i_K1 - var_i_K_p__i_K_p - var_i_Kr__i_Kr - var_i_Ks__i_Ks - var_i_Na__i_Na - var_i_NaCa__i_NaCa - var_i_NaK__i_NaK - var_i_Na_L__i_Na_L - var_i_to_1__i_to_1 - var_i_to_2__i_to_2 - GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance() - 0.13 * (-50.0 + var_chaste_interface__membrane__V) * var_chaste_interface__i_Ca_T_b_gate__b * var_chaste_interface__i_Ca_T_g_gate__g; // millivolt / millisecond
        
        rY[0] += mDt*d_dt_chaste_interface_var_membrane__V;
    }
    
    void Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.43812846286808
        double var_chaste_interface__i_Na_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.9786390933308567
        double var_chaste_interface__i_Na_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.09866447258167589
        double var_chaste_interface__i_Na_L_m_L_gate__m_L = rY[5];
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_L_h_L_gate__h_L = rY[6];
        // Units: dimensionless; Initial value: 0.8946968372659203
        double var_chaste_interface__i_Ca_L_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 2.322223865147363e-06
        double var_chaste_interface__i_Ca_L_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.9985607329462358
        double var_chaste_interface__i_Ca_L_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.8173435436674658
        double var_chaste_interface__i_Ca_T_b_gate__b = rY[12];
        // Units: dimensionless; Initial value: 0.0002563937630984438
        double var_chaste_interface__i_Ca_T_g_gate__g = rY[13];
        // Units: dimensionless; Initial value: 0.9720432601848331
        double var_chaste_interface__i_to_1_a_gate__a = rY[14];
        // Units: dimensionless; Initial value: 0.0004238729429342389
        double var_chaste_interface__i_to_1_i_gate__i = rY[15];
        // Units: dimensionless; Initial value: 0.9990935802459496
        double var_chaste_interface__i_to_1_i2_gate__i2 = rY[16];
        // Units: dimensionless; Initial value: 0.9777368439681764
        double var_chaste_interface__i_Kr_xr_gate__xr = rY[17];
        // Units: dimensionless; Initial value: 0.07084939408222911
        double var_chaste_interface__i_Ks_xs1_gate__xs1 = rY[18];
        // Units: dimensionless; Initial value: 0.0011737654433043125
        double var_chaste_interface__i_Ks_xs2_gate__xs2 = rY[19];
        // Units: dimensionless; Initial value: 0.001179442867470093
        
        // Lookup table indexing
        const bool _oob_0 = Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        const double var_i_Ca_L_d_gate__d_infinity = _lt_0_row[13];
        const double var_i_Ca_L_d_gate__tau_d = _lt_0_row[14];
        const double var_i_Ca_L_f2_gate__f2_infinity = _lt_0_row[15];
        const double var_i_Ca_L_f2_gate__tau_f2 = 38.0 + 24.217200000000005 * pow((-1 + 0.053763440860215048 * var_chaste_interface__membrane__V), 2);
        const double var_i_Ca_L_f_gate__f_infinity = _lt_0_row[15];
        const double var_i_Ca_L_f_gate__tau_f = 4.0 + 0.03125 * pow((-1 + 0.40000000000000002 * var_chaste_interface__membrane__V), 2);
        const double var_i_Ca_T_b_gate__alpha_b = 1.0680000000000001 * exp(0.54333333333333333 + 0.033333333333333333 * var_chaste_interface__membrane__V);
        const double var_i_Ca_T_b_gate__b_infinity = _lt_0_row[16];
        const double var_i_Ca_T_b_gate__beta_b = 1.0680000000000001 * exp(-0.54333333333333333 - 0.033333333333333333 * var_chaste_interface__membrane__V);
        const double var_i_Ca_T_b_gate__tau_b = 1 / (var_i_Ca_T_b_gate__alpha_b + var_i_Ca_T_b_gate__beta_b);
        const double var_i_Ca_T_g_gate__alpha_g = 0.014999999999999999 * exp(-0.86074429771908767 - 0.012004801920768308 * var_chaste_interface__membrane__V);
        const double var_i_Ca_T_g_gate__beta_g = 0.014999999999999999 * exp(4.6558441558441563 + 0.064935064935064929 * var_chaste_interface__membrane__V);
        const double var_i_Ca_T_g_gate__g_infinity = _lt_0_row[18];
        const double var_i_Ca_T_g_gate__tau_g = 1 / (var_i_Ca_T_g_gate__alpha_g + var_i_Ca_T_g_gate__beta_g);
        const double var_i_Kr_xr_gate__tau_xr = _lt_0_row[21];
        const double var_i_Kr_xr_gate__xr_infinity = _lt_0_row[20];
        const double var_i_Ks_xs1_gate__tau_xs1 = 1 / (((fabs(44.600000000000001 + var_chaste_interface__membrane__V) < 1.0030090258350555e-8) ? (7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)) - 49850000.061936118 * (44.599999989969909 + var_chaste_interface__membrane__V) * (-7.6328986866047728e-13 / (1.0 - exp(9.9999999875755032e-8)) - 7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)))) : (7.6100000000000007e-5 * (44.600000000000001 + var_chaste_interface__membrane__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__membrane__V)))) + ((fabs(-0.55000000000000004 + var_chaste_interface__membrane__V) < 7.8124999999948028e-7) ? (-2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)) + 640000.00000042573 * (-0.54999921875000002 + var_chaste_interface__membrane__V) * (2.8124999999996902e-10 / (-1.0 + exp(9.9999999999988984e-8)) + 2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)))) : (0.00036000000000000002 * (-0.55000000000000004 + var_chaste_interface__membrane__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__membrane__V)))));
        const double var_i_Ks_xs1_gate__xs1_infinity = _lt_0_row[22];
        const double var_i_Ks_xs2_gate__tau_xs2 = 2.0 / (((fabs(44.600000000000001 + var_chaste_interface__membrane__V) < 1.0030090258350555e-8) ? (7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)) - 49850000.061936118 * (44.599999989969909 + var_chaste_interface__membrane__V) * (-7.6328986866047728e-13 / (1.0 - exp(9.9999999875755032e-8)) - 7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)))) : (7.6100000000000007e-5 * (44.600000000000001 + var_chaste_interface__membrane__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__membrane__V)))) + ((fabs(-0.55000000000000004 + var_chaste_interface__membrane__V) < 7.8124999999948028e-7) ? (-2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)) + 640000.00000042573 * (-0.54999921875000002 + var_chaste_interface__membrane__V) * (2.8124999999996902e-10 / (-1.0 + exp(9.9999999999988984e-8)) + 2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)))) : (0.00036000000000000002 * (-0.55000000000000004 + var_chaste_interface__membrane__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__membrane__V)))));
        const double var_i_Ks_xs2_gate__xs2_infinity = _lt_0_row[22];
        const double var_i_Na_L_h_L_gate__h_L_infinity = _lt_0_row[25];
        const double var_i_Na_L_h_L_gate__tau_h_L = _lt_0_row[26];
        const double var_i_Na_L_m_L_gate__alpha_m_L = _lt_0_row[27];
        const double var_i_Na_L_m_L_gate__beta_m_L = _lt_0_row[28];
        const double var_i_Na_L_m_L_gate__m_L_infinity = var_i_Na_L_m_L_gate__alpha_m_L / (var_i_Na_L_m_L_gate__alpha_m_L + var_i_Na_L_m_L_gate__beta_m_L);
        const double var_i_Na_L_m_L_gate__tau_m_L = 1 / (var_i_Na_L_m_L_gate__alpha_m_L + var_i_Na_L_m_L_gate__beta_m_L);
        const double var_i_Na_h_gate__alpha_h = ((var_chaste_interface__membrane__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[10] - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0));
        const double var_i_Na_h_gate__beta_h = ((var_chaste_interface__membrane__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V - 0.34999999999999998 * mParameters[10]) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__V - 0.079000000000000001 * mParameters[10])) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[10] - 0.0900900900900901 * var_chaste_interface__membrane__V))));
        const double var_i_Na_h_gate__h_infinity = 0.01 * mParameters[9] + (1.0 - 0.01 * mParameters[9]) * var_i_Na_h_gate__alpha_h / (var_i_Na_h_gate__alpha_h + var_i_Na_h_gate__beta_h);
        const double var_i_Na_h_gate__tau_h = 1 / (var_i_Na_h_gate__alpha_h + var_i_Na_h_gate__beta_h);
        const double var_i_Na_j_gate__alpha_j = ((var_chaste_interface__membrane__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__membrane__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V - 0.24440000000000001 * mParameters[10]) - 3.4740000000000003e-5 * exp(0.043909999999999998 * mParameters[10] - 0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V - 0.311 * mParameters[10]))) : (0));
        const double var_i_Na_j_gate__beta_j = ((var_chaste_interface__membrane__V < -40.0) ? (0.1212 * exp(0.01052 * mParameters[10] - 0.01052 * var_chaste_interface__membrane__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[10] - 0.13780000000000001 * var_chaste_interface__membrane__V))) : (0.29999999999999999 * exp(2.5349999999999999e-7 * mParameters[10] - 2.5349999999999999e-7 * var_chaste_interface__membrane__V) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[10] - 0.10000000000000001 * var_chaste_interface__membrane__V))));
        const double var_i_Na_j_gate__j_infinity = 0.01 * mParameters[9] + (1.0 - 0.01 * mParameters[9]) * var_i_Na_j_gate__alpha_j / (var_i_Na_j_gate__alpha_j + var_i_Na_j_gate__beta_j);
        const double var_i_Na_j_gate__tau_j = 1 / (var_i_Na_j_gate__alpha_j + var_i_Na_j_gate__beta_j);
        const double var_i_Na_m_gate__alpha_m = _lt_0_row[27];
        const double var_i_Na_m_gate__beta_m = _lt_0_row[28];
        const double var_i_Na_m_gate__m_infinity = var_i_Na_m_gate__alpha_m / (var_i_Na_m_gate__alpha_m + var_i_Na_m_gate__beta_m);
        const double var_i_Na_m_gate__tau_m = 1 / (var_i_Na_m_gate__alpha_m + var_i_Na_m_gate__beta_m);
        const double var_i_to_1_a_gate__alpha_a = _lt_0_row[29];
        const double var_i_to_1_a_gate__beta_a = _lt_0_row[30];
        const double var_i_to_1_a_gate__a_infinity = var_i_to_1_a_gate__alpha_a / (var_i_to_1_a_gate__alpha_a + var_i_to_1_a_gate__beta_a);
        const double var_i_to_1_a_gate__tau_a = 1 / (var_i_to_1_a_gate__alpha_a + var_i_to_1_a_gate__beta_a);
        const double var_i_to_1_i2_gate__alpha_i2 = 0.0044200000000000003 / (1.0 + exp(1.7333333333333334 + 0.066666666666666666 * var_chaste_interface__membrane__V));
        const double var_i_to_1_i2_gate__beta_i2 = 0.050000000000000003 * exp(-0.66666666666666663 + 0.066666666666666666 * var_chaste_interface__membrane__V) / (1.0 + exp(-0.66666666666666663 + 0.066666666666666666 * var_chaste_interface__membrane__V));
        const double var_i_to_1_i2_gate__i2_infinity = var_i_to_1_i2_gate__alpha_i2 / (var_i_to_1_i2_gate__alpha_i2 + var_i_to_1_i2_gate__beta_i2);
        const double var_i_to_1_i2_gate__tau_i2 = _lt_0_row[32];
        const double var_i_to_1_i_gate__alpha_i = 0.029999999999999999 / (1.0 + exp(1.6666666666666667 + 0.066666666666666666 * var_chaste_interface__membrane__V));
        const double var_i_to_1_i_gate__beta_i = 0.10000000000000001 * exp(-2.6666666666666665 + 0.066666666666666666 * var_chaste_interface__membrane__V) / (1.0 + exp(-2.6666666666666665 + 0.066666666666666666 * var_chaste_interface__membrane__V));
        const double var_i_to_1_i_gate__i_infinity = var_i_to_1_i_gate__alpha_i / (var_i_to_1_i_gate__alpha_i + var_i_to_1_i_gate__beta_i);
        const double var_i_to_1_i_gate__tau_i = _lt_0_row[34];
        
        
        rY[12] = (var_chaste_interface__i_Ca_T_b_gate__b + ((var_i_Ca_T_b_gate__b_infinity / var_i_Ca_T_b_gate__tau_b) * mDt)) / (1.0 - ((-1 / var_i_Ca_T_b_gate__tau_b) * mDt));
        rY[13] = (var_chaste_interface__i_Ca_T_g_gate__g + ((var_i_Ca_T_g_gate__g_infinity / var_i_Ca_T_g_gate__tau_g) * mDt)) / (1.0 - ((-1 / var_i_Ca_T_g_gate__tau_g) * mDt));
        rY[17] = (var_chaste_interface__i_Kr_xr_gate__xr + ((var_i_Kr_xr_gate__xr_infinity / var_i_Kr_xr_gate__tau_xr) * mDt)) / (1.0 - ((-1 / var_i_Kr_xr_gate__tau_xr) * mDt));
        rY[18] = (var_chaste_interface__i_Ks_xs1_gate__xs1 + ((var_i_Ks_xs1_gate__xs1_infinity / var_i_Ks_xs1_gate__tau_xs1) * mDt)) / (1.0 - ((-1 / var_i_Ks_xs1_gate__tau_xs1) * mDt));
        rY[19] = (var_chaste_interface__i_Ks_xs2_gate__xs2 + ((var_i_Ks_xs2_gate__xs2_infinity / var_i_Ks_xs2_gate__tau_xs2) * mDt)) / (1.0 - ((-1 / var_i_Ks_xs2_gate__tau_xs2) * mDt));
        rY[6] = (var_chaste_interface__i_Na_L_h_L_gate__h_L + ((var_i_Na_L_h_L_gate__h_L_infinity / var_i_Na_L_h_L_gate__tau_h_L) * mDt)) / (1.0 - ((-1 / var_i_Na_L_h_L_gate__tau_h_L) * mDt));
        rY[5] = (var_chaste_interface__i_Na_L_m_L_gate__m_L + ((var_i_Na_L_m_L_gate__m_L_infinity / var_i_Na_L_m_L_gate__tau_m_L) * mDt)) / (1.0 - ((-1 / var_i_Na_L_m_L_gate__tau_m_L) * mDt));
        rY[14] = (var_chaste_interface__i_to_1_a_gate__a + ((var_i_to_1_a_gate__a_infinity / var_i_to_1_a_gate__tau_a) * mDt)) / (1.0 - ((-1 / var_i_to_1_a_gate__tau_a) * mDt));
        rY[16] = (var_chaste_interface__i_to_1_i2_gate__i2 + ((var_i_to_1_i2_gate__i2_infinity / var_i_to_1_i2_gate__tau_i2) * mDt)) / (1.0 - ((-1 / var_i_to_1_i2_gate__tau_i2) * mDt));
        rY[15] = (var_chaste_interface__i_to_1_i_gate__i + ((var_i_to_1_i_gate__i_infinity / var_i_to_1_i_gate__tau_i) * mDt)) / (1.0 - ((-1 / var_i_to_1_i_gate__tau_i) * mDt));
        rY[7] = (var_chaste_interface__i_Ca_L_d_gate__d + ((var_i_Ca_L_d_gate__d_infinity / var_i_Ca_L_d_gate__tau_d) * mDt)) / (1.0 - ((-1 / var_i_Ca_L_d_gate__tau_d) * mDt));
        rY[9] = (var_chaste_interface__i_Ca_L_f2_gate__f2 + ((var_i_Ca_L_f2_gate__f2_infinity / var_i_Ca_L_f2_gate__tau_f2) * mDt)) / (1.0 - ((-1 / var_i_Ca_L_f2_gate__tau_f2) * mDt));
        rY[8] = (var_chaste_interface__i_Ca_L_f_gate__f + ((var_i_Ca_L_f_gate__f_infinity / var_i_Ca_L_f_gate__tau_f) * mDt)) / (1.0 - ((-1 / var_i_Ca_L_f_gate__tau_f) * mDt));
        rY[3] = (var_chaste_interface__i_Na_h_gate__h + ((var_i_Na_h_gate__h_infinity / var_i_Na_h_gate__tau_h) * mDt)) / (1.0 - ((-1 / var_i_Na_h_gate__tau_h) * mDt));
        rY[4] = (var_chaste_interface__i_Na_j_gate__j + ((var_i_Na_j_gate__j_infinity / var_i_Na_j_gate__tau_j) * mDt)) / (1.0 - ((-1 / var_i_Na_j_gate__tau_j) * mDt));
        rY[2] = (var_chaste_interface__i_Na_m_gate__m + ((var_i_Na_m_gate__m_infinity / var_i_Na_m_gate__tau_m) * mDt)) / (1.0 - ((-1 / var_i_Na_m_gate__tau_m) * mDt));
        
        double _guess[13] = {rY[26],rY[24],rY[25],rY[1],rY[27],rY[11],rY[10],rY[20],rY[22],rY[23],rY[21],rY[28],rY[29]};
        CardiacNewtonSolver<13,Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler>* _p_solver = CardiacNewtonSolver<13,Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler>::Instance();
        _p_solver->Solve(*this, var_chaste_interface__environment__time, _guess);
        rY[26] = _guess[0];
        rY[24] = _guess[1];
        rY[25] = _guess[2];
        rY[1] = _guess[3];
        rY[27] = _guess[4];
        rY[11] = _guess[5];
        rY[10] = _guess[6];
        rY[20] = _guess[7];
        rY[22] = _guess[8];
        rY[23] = _guess[9];
        rY[21] = _guess[10];
        rY[28] = _guess[11];
        rY[29] = _guess[12];
    }

    std::vector<double> Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.43812846286808
        double var_chaste_interface__Ca_i__Ca_i = rY[1];
        // Units: millimolar; Initial value: 0.00022355433459434943
        double var_chaste_interface__i_Na_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.002003390432234504
        double var_chaste_interface__i_Na_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.9786390933308567
        double var_chaste_interface__i_Na_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.09866447258167589
        double var_chaste_interface__i_Ca_L_d_gate__d = rY[7];
        // Units: dimensionless; Initial value: 2.322223865147363e-06
        double var_chaste_interface__i_Ca_L_f_gate__f = rY[8];
        // Units: dimensionless; Initial value: 0.9985607329462358
        double var_chaste_interface__i_Ca_L_f2_gate__f2 = rY[9];
        // Units: dimensionless; Initial value: 0.8173435436674658
        double var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca = rY[10];
        // Units: dimensionless; Initial value: 0.9610551285529658
        double var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 = rY[11];
        // Units: dimensionless; Initial value: 0.868690796671854
        double var_chaste_interface__i_to_1_a_gate__a = rY[14];
        // Units: dimensionless; Initial value: 0.0004238729429342389
        double var_chaste_interface__i_to_1_i_gate__i = rY[15];
        // Units: dimensionless; Initial value: 0.9990935802459496
        double var_chaste_interface__i_to_1_i2_gate__i2 = rY[16];
        // Units: dimensionless; Initial value: 0.9777368439681764
        double var_chaste_interface__i_Kr_xr_gate__xr = rY[17];
        // Units: dimensionless; Initial value: 0.07084939408222911
        double var_chaste_interface__i_Ks_xs1_gate__xs1 = rY[18];
        // Units: dimensionless; Initial value: 0.0011737654433043125
        double var_chaste_interface__i_Ks_xs2_gate__xs2 = rY[19];
        // Units: dimensionless; Initial value: 0.001179442867470093
        double var_chaste_interface__intracellular_ion_concentrations__Na_i = rY[21];
        // Units: millimolar; Initial value: 9.927155552932733
        double var_chaste_interface__intracellular_ion_concentrations__K_i = rY[23];
        // Units: millimolar; Initial value: 141.9670801746057
        double var_chaste_interface__Ca_MK_act__Ca_MK_trap = rY[24];
        // Units: dimensionless; Initial value: 8.789168284782809e-06
        double var_chaste_interface__Ca_JSR__Ca_JSR = rY[26];
        // Units: millimolar; Initial value: 1.1433050636518596
        double var_chaste_interface__Ca_r__Ca_r = rY[27];
        // Units: millimolar; Initial value: 0.00022418117117903934
        double var_chaste_interface__q_rel_ri_gate__ri = rY[28];
        // Units: dimensionless; Initial value: 0.7802870066567904
        double var_chaste_interface__q_rel_ro_gate__ro = rY[29];
        // Units: dimensionless; Initial value: 1.2785734760674763e-09
        
        // Lookup table indexing
        const bool _oob_0 = Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_Ca_MK_act__Ca_MK_0 = 0.050000000000000003; // dimensionless
        const double var_Ca_MK_act__km_Ca_MK = 0.14999999999999999; // millimolar
        const double var_Ca_MK_act__Ca_MK_bound = (1.0 - var_chaste_interface__Ca_MK_act__Ca_MK_trap) * var_Ca_MK_act__Ca_MK_0 / (1.0 + var_Ca_MK_act__km_Ca_MK / var_chaste_interface__Ca_r__Ca_r); // dimensionless
        const double var_Ca_MK_act__Ca_MK_act = var_Ca_MK_act__Ca_MK_bound + var_chaste_interface__Ca_MK_act__Ca_MK_trap; // dimensionless
        const double var_equilibrium_potentials__r_NaK = 0.018329999999999999; // dimensionless
        const double var_i_Ca_L_f_Ca_gate__tau_f_Ca = 0.5 + 1 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca_r__Ca_r) + 10.0 * var_Ca_MK_act__Ca_MK_act / (var_Ca_MK_act__Ca_MK_act + var_Ca_MK_act__km_Ca_MK); // millisecond
        const double var_i_Ks__g_Ks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca_i__Ca_i), 1.3999999999999999))) * mParameters[13]; // milliS_per_microF
        const double var_i_NaCa__X_NaCa = 0.40000000000000002; // dimensionless
        const double var_i_NaCa__k_sat = 0.27000000000000002; // dimensionless
        const double var_i_NaCa__km_Ca_act = 0.000125; // millimolar
        const double var_i_NaCa__km_Ca_i = 0.0035999999999999999; // millimolar
        const double var_i_NaCa__km_Ca_o = 1.3; // millimolar
        const double var_i_NaCa__km_Na_i_1 = 12.300000000000001; // millimolar
        const double var_i_NaCa__km_Na_o = 87.5; // millimolar
        const double var_i_Ca_L_f2_gate__tau_f2 = 38.0 + 24.217200000000005 * pow((-1 + 0.053763440860215048 * var_chaste_interface__membrane__V), 2); // millisecond
        const double var_i_Ca_L_f_gate__tau_f = 4.0 + 0.03125 * pow((-1 + 0.40000000000000002 * var_chaste_interface__membrane__V), 2); // millisecond
        const double var_i_Kr__rr_infinity = 1 / (_lt_0_row[8]); // dimensionless
        const double var_i_Na_h_gate__alpha_h = ((var_chaste_interface__membrane__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[10] - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0)); // per_millisecond
        const double var_i_Na_h_gate__beta_h = ((var_chaste_interface__membrane__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V - 0.34999999999999998 * mParameters[10]) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__V - 0.079000000000000001 * mParameters[10])) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[10] - 0.0900900900900901 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_i_Na_h_gate__tau_h = 1 / (var_i_Na_h_gate__alpha_h + var_i_Na_h_gate__beta_h); // millisecond
        const double var_i_Na_j_gate__alpha_j = ((var_chaste_interface__membrane__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__membrane__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V - 0.24440000000000001 * mParameters[10]) - 3.4740000000000003e-5 * exp(0.043909999999999998 * mParameters[10] - 0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V - 0.311 * mParameters[10]))) : (0)); // per_millisecond
        const double var_i_Na_j_gate__beta_j = ((var_chaste_interface__membrane__V < -40.0) ? (0.1212 * exp(0.01052 * mParameters[10] - 0.01052 * var_chaste_interface__membrane__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[10] - 0.13780000000000001 * var_chaste_interface__membrane__V))) : (0.29999999999999999 * exp(2.5349999999999999e-7 * mParameters[10] - 2.5349999999999999e-7 * var_chaste_interface__membrane__V) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[10] - 0.10000000000000001 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_i_Na_j_gate__tau_j = 1 / (var_i_Na_j_gate__alpha_j + var_i_Na_j_gate__beta_j); // millisecond
        const double var_membrane__i_stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_i_Ca_L__i_Ca_L_max = ((fabs(-15.0 + var_chaste_interface__membrane__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__membrane__V) * (4.6891709999892238e-6 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_r__Ca_r * exp(9.9999999999770198e-8)) / (-1.0 + exp(9.9999999999770198e-8)) + 4.6891709999892238e-6 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_r__Ca_r * exp(-9.9999999999770198e-8)) / (-1.0 + exp(-9.9999999999770198e-8))) - 4.6891709999892238e-6 * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_r__Ca_r * exp(-9.9999999999770198e-8)) / (-1.0 + exp(-9.9999999999770198e-8))) : (3.510865186083326 * (-15.0 + var_chaste_interface__membrane__V) * (-0.34100000000000003 * mParameters[4] + var_chaste_interface__Ca_r__Ca_r * _lt_0_row[9]) / (_lt_0_row[10]))); // microA_per_microF
        const double var_i_Ca_L__i_Ca_L = mParameters[7] * var_i_Ca_L__i_Ca_L_max * var_chaste_interface__i_Ca_L_d_gate__d * var_chaste_interface__i_Ca_L_f2_gate__f2 * var_chaste_interface__i_Ca_L_f_Ca2_gate__f_Ca2 * var_chaste_interface__i_Ca_L_f_Ca_gate__f_Ca * var_chaste_interface__i_Ca_L_f_gate__f; // microA_per_microF
        const double var_i_Ca_L__i_Ca_L_converted = HeartConfig::Instance()->GetCapacitance() * var_i_Ca_L__i_Ca_L; // uA_per_cm2
        const double var_i_Ca_L_f_Ca2_gate__tau_f_Ca2 = 125.0 + 300.0 / (1.0 + exp(-4.375 - 25.0 * var_i_Ca_L__i_Ca_L)); // millisecond
        const double var_i_NaCa__dNaCa_1 = pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * var_i_NaCa__km_Ca_o + 1.5 * pow(var_i_NaCa__km_Na_o, 3) * var_chaste_interface__Ca_i__Ca_i + pow(var_i_NaCa__km_Na_i_1, 3) * (1.0 + 1.5 * var_chaste_interface__Ca_i__Ca_i / var_i_NaCa__km_Ca_i) * mParameters[4]; // millimolar4
        const double var_model_parameters__F = 96485.0; // coulomb_per_mole
        const double var_i_K1__g_K1 = 0.43033148291193518 * sqrt(mParameters[5]) * mParameters[11]; // milliS_per_microF
        const double var_i_Kr__g_Kr = 0.43033148291193518 * sqrt(mParameters[5]) * mParameters[12]; // milliS_per_microF
        const double var_i_NaCa__dNaCa_2 = pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * mParameters[4] + 1.5 * pow(mParameters[6], 3) * var_chaste_interface__Ca_i__Ca_i + pow(mParameters[6], 3) * (1.0 + var_chaste_interface__intracellular_ion_concentrations__Na_i / var_i_NaCa__km_Na_i_1) * var_i_NaCa__km_Ca_i; // millimolar4
        const double var_model_parameters__R = 8314.0; // joule_per_kilomole_kelvin
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_equilibrium_potentials__E_K = var_model_parameters__R * var_model_parameters__T * log(mParameters[5] / var_chaste_interface__intracellular_ion_concentrations__K_i) / var_model_parameters__F; // millivolt
        const double var_equilibrium_potentials__E_Ks = var_model_parameters__R * var_model_parameters__T * log((var_equilibrium_potentials__r_NaK * mParameters[6] + mParameters[5]) / (var_equilibrium_potentials__r_NaK * var_chaste_interface__intracellular_ion_concentrations__Na_i + var_chaste_interface__intracellular_ion_concentrations__K_i)) / var_model_parameters__F; // millivolt
        const double var_equilibrium_potentials__E_Na = var_model_parameters__R * var_model_parameters__T * log(mParameters[6] / var_chaste_interface__intracellular_ion_concentrations__Na_i) / var_model_parameters__F; // millivolt
        const double var_i_K1_xK1_gate__alpha_xK1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__V - 0.23849999999999999 * var_equilibrium_potentials__E_K)); // dimensionless
        const double var_i_K1_xK1_gate__beta_xK1 = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__V - 0.080320000000000003 * var_equilibrium_potentials__E_K) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__V - 0.061749999999999999 * var_equilibrium_potentials__E_K)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_equilibrium_potentials__E_K - 0.51429999999999998 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_i_K1_xK1_gate__xK1 = var_i_K1_xK1_gate__alpha_xK1 / (var_i_K1_xK1_gate__alpha_xK1 + var_i_K1_xK1_gate__beta_xK1); // dimensionless
        const double var_i_K1__i_K1 = (0.0040000000000000001 + var_i_K1__g_K1 * var_i_K1_xK1_gate__xK1) * (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V); // microA_per_microF
        const double var_i_K1__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_i_K1__i_K1; // uA_per_cm2
        const double var_i_Kr__i_Kr = (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * var_i_Kr__g_Kr * var_i_Kr__rr_infinity * var_chaste_interface__i_Kr_xr_gate__xr; // microA_per_microF
        const double var_i_Kr__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_i_Kr__i_Kr; // uA_per_cm2
        const double var_i_Ks__i_Ks = (-var_equilibrium_potentials__E_Ks + var_chaste_interface__membrane__V) * var_i_Ks__g_Ks * var_chaste_interface__i_Ks_xs1_gate__xs1 * var_chaste_interface__i_Ks_xs2_gate__xs2; // microA_per_microF
        const double var_i_Ks__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_i_Ks__i_Ks; // uA_per_cm2
        const double var_i_Na__i_Na = pow(var_chaste_interface__i_Na_m_gate__m, 3) * (-var_equilibrium_potentials__E_Na + var_chaste_interface__membrane__V) * (0.20000000000000001 * var_chaste_interface__i_Na_j_gate__j + 0.80000000000000004 * var_chaste_interface__i_Na_h_gate__h) * mParameters[8]; // microA_per_microF
        const double var_i_Na__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_i_Na__i_Na; // uA_per_cm2
        const double var_i_NaCa__i_NaCa = (-1.5 * pow(mParameters[6], 3) * var_chaste_interface__Ca_i__Ca_i * exp(-0.65000000000000002 * var_chaste_interface__membrane__V * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) + pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * var_i_NaCa__X_NaCa * mParameters[14] * mParameters[4] * exp(0.34999999999999998 * var_chaste_interface__membrane__V * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) / ((1.0 + var_i_NaCa__k_sat * exp(-0.65000000000000002 * var_chaste_interface__membrane__V * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * (1.0 + 0.44444444444444442 * pow(var_i_NaCa__km_Ca_act, 2) / pow(var_chaste_interface__Ca_i__Ca_i, 2)) * (var_i_NaCa__dNaCa_1 + var_i_NaCa__dNaCa_2)); // microA_per_microF
        const double var_i_NaCa__i_NaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_i_NaCa__i_NaCa; // uA_per_cm2
        const double var_i_to_1__i_to_1 = (-var_equilibrium_potentials__E_K + var_chaste_interface__membrane__V) * (0.20000000000000001 * var_chaste_interface__i_to_1_i2_gate__i2 + 0.80000000000000004 * var_chaste_interface__i_to_1_i_gate__i) * mParameters[15] * var_chaste_interface__i_to_1_a_gate__a; // microA_per_microF
        const double var_i_to_1__i_to_1_converted = HeartConfig::Instance()->GetCapacitance() * var_i_to_1__i_to_1; // uA_per_cm2
        const double var_q_rel__vg = 1 / (1.0 + exp(2.6000000000000001 + 0.20000000000000001 * mParameters[7] * var_i_Ca_L__i_Ca_L_max)); // dimensionless
        const double var_q_rel__g_rel = mParameters[1] * var_q_rel__vg; // per_millisecond
        const double var_q_rel__q_rel = (-var_chaste_interface__Ca_r__Ca_r + var_chaste_interface__Ca_JSR__Ca_JSR) * var_q_rel__g_rel * var_chaste_interface__q_rel_ri_gate__ri * var_chaste_interface__q_rel_ro_gate__ro; // millimolar_per_millisecond

        std::vector<double> dqs(16);
        dqs[0] = var_q_rel__q_rel;
        dqs[1] = var_i_Ca_L__i_Ca_L_converted;
        dqs[2] = var_i_Ca_L_f2_gate__tau_f2;
        dqs[3] = var_i_Ca_L_f_Ca2_gate__tau_f_Ca2;
        dqs[4] = var_i_Ca_L_f_Ca_gate__tau_f_Ca;
        dqs[5] = var_i_Ca_L_f_gate__tau_f;
        dqs[6] = var_i_Na__i_Na_converted;
        dqs[7] = var_i_Na_h_gate__tau_h;
        dqs[8] = var_i_Na_j_gate__tau_j;
        dqs[9] = var_i_K1__i_K1_converted;
        dqs[10] = var_i_Kr__i_Kr_converted;
        dqs[11] = var_i_Ks__i_Ks_converted;
        dqs[12] = var_i_NaCa__i_NaCa_converted;
        dqs[13] = var_membrane__i_stim_converted;
        dqs[14] = var_i_to_1__i_to_1_converted;
        dqs[15] = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler>::Initialise(void)
{
    this->mSystemName = "aslanidi_2009";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-83.43812846286808);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00022355433459434943);

    // rY[2]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.002003390432234504);

    // rY[3]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9786390933308567);

    // rY[4]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.09866447258167589);

    // rY[5]:
    this->mVariableNames.push_back("i_Na_L_m_L_gate__m_L");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.002003390432234504);

    // rY[6]:
    this->mVariableNames.push_back("i_Na_L_h_L_gate__h_L");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.8946968372659203);

    // rY[7]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.322223865147363e-06);

    // rY[8]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9985607329462358);

    // rY[9]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f2_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.8173435436674658);

    // rY[10]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9610551285529658);

    // rY[11]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_fCa2_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.868690796671854);

    // rY[12]:
    this->mVariableNames.push_back("i_Ca_T_b_gate__b");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0002563937630984438);

    // rY[13]:
    this->mVariableNames.push_back("i_Ca_T_g_gate__g");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9720432601848331);

    // rY[14]:
    this->mVariableNames.push_back("i_to_1_a_gate__a");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0004238729429342389);

    // rY[15]:
    this->mVariableNames.push_back("i_to_1_i_gate__i");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9990935802459496);

    // rY[16]:
    this->mVariableNames.push_back("i_to_1_i2_gate__i2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9777368439681764);

    // rY[17]:
    this->mVariableNames.push_back("i_Kr_xr_gate__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.07084939408222911);

    // rY[18]:
    this->mVariableNames.push_back("i_Ks_xs1_gate__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0011737654433043125);

    // rY[19]:
    this->mVariableNames.push_back("i_Ks_xs2_gate__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001179442867470093);

    // rY[20]:
    this->mVariableNames.push_back("i_to_2_a_gate__a");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0014909437525000811);

    // rY[21]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(9.927155552932733);

    // rY[22]:
    this->mVariableNames.push_back("intracellular_ion_concentrations__Cl_i");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(18.904682470140408);

    // rY[23]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(141.9670801746057);

    // rY[24]:
    this->mVariableNames.push_back("Ca_MK_act__Ca_MK_trap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.789168284782809e-06);

    // rY[25]:
    this->mVariableNames.push_back("Ca_NSR__Ca_NSR");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.2132524695849454);

    // rY[26]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.1433050636518596);

    // rY[27]:
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.00022418117117903934);

    // rY[28]:
    this->mVariableNames.push_back("q_rel_ri_gate__ri");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7802870066567904);

    // rY[29]:
    this->mVariableNames.push_back("q_rel_ro_gate__ro");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.2785734760674763e-09);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("millimolar_per_millisecond");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("millimolar_per_millisecond");

    // mParameters[3]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("millivolt");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("microA_per_microF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f2_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_fCa2_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_fCa_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellaslanidi_Purkinje_model_2009FromCellMLBackwardEuler)

