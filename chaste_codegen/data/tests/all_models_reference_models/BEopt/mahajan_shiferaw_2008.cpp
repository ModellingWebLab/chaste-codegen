//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: MahajanShiferaw2008_units
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: BackwardEuler)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "mahajan_shiferaw_2008.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"
#include "CardiacNewtonSolver.hpp"

class Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<27; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__cell__V)
    {
        const double _offset_0 = var_chaste_interface__cell__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__cell__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__cell__V>mTableMaxs[0] || var_chaste_interface__cell__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables(const Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables&);
    Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables& operator= (const Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables&);
    Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 27;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][27];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 0.5 / (1.0 + exp(3.3500000000000001 + 0.10000000000000001 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1.0 + exp(1.4732142857142858 + 0.044642857142857144 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1.0 - 1 / (1.0 + exp(-10.0 - 0.25 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1 / (1.0 + exp(-3.5335689045936394 - 0.088339222614840993 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 0.33333333333333331 - 0.33333333333333331 / (1.0 + exp(-13.333333333333334 - 0.33333333333333331 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1 / (1.0 + exp(-0.125 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 10.0 + 4954.0 * exp(0.064102564102564111 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1 / (1.0 + exp(-6.666666666666667 - 0.13333333333333333 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return ((fabs(7.0 + var_chaste_interface__cell__V) < 8.1300813008222672e-7) ? (1.1219512195134727e-9 / (1.0 - exp(-1.0000000000011388e-7)) - 614999.99999929965 * (6.9999991869918698 + var_chaste_interface__cell__V) * (-1.1219512195134727e-9 / (1.0 - exp(1.0000000000011388e-7)) - 1.1219512195134727e-9 / (1.0 - exp(-1.0000000000011388e-7)))) : (0.0013799999999999999 * (7.0 + var_chaste_interface__cell__V) / (1.0 - exp(-0.86099999999999999 - 0.123 * var_chaste_interface__cell__V)))) + ((fabs(10.0 + var_chaste_interface__cell__V) < 6.8965517241448282e-7) ? (-4.2068965517283451e-10 / (-1.0 + exp(-1.000000000001e-7)) + 724999.99999927497 * (10.000000689655172 + var_chaste_interface__cell__V) * (4.2068965517283451e-10 / (-1.0 + exp(1.000000000001e-7)) + 4.2068965517283451e-10 / (-1.0 + exp(-1.000000000001e-7)))) : (0.00060999999999999997 * (10.0 + var_chaste_interface__cell__V) / (-1.0 + exp(1.45 + 0.14499999999999999 * var_chaste_interface__cell__V))));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return ((fabs(30.0 + var_chaste_interface__cell__V) < 1.455604075689676e-6) ? (1 / (-1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) - 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8)) + 343500.00000040967 * (30.000001455604075 + var_chaste_interface__cell__V) * (1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) + 1.0465793304208771e-10 / (1.0 - exp(-2.1542940320207204e-7)) + 1.9068413391534758e-10 / (-1.0 + exp(9.9999999999880736e-8)) + 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8))))) : (1 / (0.00013100000000000001 * (30.0 + var_chaste_interface__cell__V) / (-1.0 + exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__cell__V)) + 7.1899999999999999e-5 * (30.0 + var_chaste_interface__cell__V) / (1.0 - exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__cell__V)))));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[9] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[9] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[9] >= 2){
                    EXCEPTION("Lookup table 9 at ["<<i<<"][9] has non-finite value: " << val);
                }
                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1 / (1.0 + exp(0.089820359281437126 - 0.059880239520958084 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[11] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[11] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[11] >= 2){
                    EXCEPTION("Lookup table 11 at ["<<i<<"][11] has non-finite value: " << val);
                }
                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[12] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[12] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[12] >= 2){
                    EXCEPTION("Lookup table 12 at ["<<i<<"][12] has non-finite value: " << val);
                }
                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[13] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[13] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[13] >= 2){
                    EXCEPTION("Lookup table 13 at ["<<i<<"][13] has non-finite value: " << val);
                }
                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return ((fabs(47.130000000000003 + var_chaste_interface__cell__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V))));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[14] < 2){
                    double left = f(var_chaste_interface__cell__V - mTableSteps[0]);
                    double right = f(var_chaste_interface__cell__V + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[14] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[14] >= 2){
                    EXCEPTION("Lookup table 14 at ["<<i<<"][14] has non-finite value: " << val);
                }
                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(-0.090909090909090912 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1.0 + exp(-1.5 - 0.050000000000000003 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(-1.5 - 0.050000000000000003 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1.0 + exp(-10.728 - 0.35759999999999997 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return exp(-10.728 - 0.35759999999999997 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1.5 + 3.5 * exp(-0.0011111111111111111 * pow(var_chaste_interface__cell__V, 2));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 30.0 + 3000.0 / (1.0 + exp(6.0 + 0.10000000000000001 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 20.0 + 20.0 / (1.0 + exp(3.3500000000000001 + 0.10000000000000001 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1.0 + exp(-0.125 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 1.0 + exp(-3.5335689045936394 - 0.088339222614840993 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 4954.0 * exp(0.064102564102564111 * var_chaste_interface__cell__V);
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__cell__V) {
                    return 0.33333333333333331 / (1.0 + exp(-13.333333333333334 - 0.33333333333333331 * var_chaste_interface__cell__V));
                };
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__cell__V);

                _lookup_table_0[i][26] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[27];

    // Lookup tables
    double (*_lookup_table_0)[27];
    int _lookup_table_0_num_misshit_piecewise[27] = {0};

};

std::shared_ptr<Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables> Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables::mpInstance;


    boost::shared_ptr<RegularStimulus> Cellmahajan_shiferaw_2008FromCellMLBackwardEuler::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -14.999999999999998 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 3.0; // ms
        const double var_chaste_interface__cell__stim_offset = 100.0; // ms
        const double var_chaste_interface__cell__stim_period = 400.0; // ms
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Cellmahajan_shiferaw_2008FromCellMLBackwardEuler::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Cellmahajan_shiferaw_2008FromCellMLBackwardEuler::Cellmahajan_shiferaw_2008FromCellMLBackwardEuler(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractBackwardEulerCardiacCell<15>(
                26,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellmahajan_shiferaw_2008FromCellMLBackwardEuler>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 2.069e-5; // (var_Ileak_Iup_Ixfer__gleak) [per_ms]
        this->mParameters[1] = 1.0; // (var_Irel__release_factor) [dimensionless]
        this->mParameters[2] = 0.40000000000000002; // (var_Ileak_Iup_Ixfer__vup) [uM_per_ms]
        this->mParameters[3] = 1.0; // (var_Na__conc_clamp) [dimensionless]
        this->mParameters[4] = 140.0; // (var_reversal_potentials__K_i) [mM]
        this->mParameters[5] = 1.8; // (var_Environment__Ca_o) [mM]
        this->mParameters[6] = 5.4000000000000004; // (var_Environment__K_o) [mM]
        this->mParameters[7] = 136.0; // (var_Environment__Na_o) [mM]
        this->mParameters[8] = 96.485341500000004; // (var_Environment__F) [coulomb_per_mmole]
        this->mParameters[9] = 8.3144720000000003; // (var_Environment__R) [J_per_moleK]
        this->mParameters[10] = 0.00054000000000000001; // (var_ICaL__pca) [cm_per_s]
        this->mParameters[11] = 12.0; // (var_INa__gna) [uS_per_nF]
        this->mParameters[12] = 0; // (var_INa__perc_reduced_inact_for_IpNa) [dimensionless]
        this->mParameters[13] = 0; // (var_INa__shift_h) [mV]
        this->mParameters[14] = 0.11; // (var_Ito__gtof) [uS_per_nF]
        this->mParameters[15] = 0.29999999999999999; // (var_IK1__gkix) [uS_per_nF]
        this->mParameters[16] = 0.012500000000000001; // (var_IKr__gkr) [uS_per_nF]
        this->mParameters[17] = 0.1386; // (var_IKs__gks) [uS_per_nF]
        this->mParameters[18] = 0.040000000000000001; // (var_Ito__gtos) [uS_per_nF]
        this->mParameters[19] = 0.83999999999999997; // (var_INaCa__gNaCa) [uM_per_ms]
        this->mParameters[20] = 308.0; // (var_Environment__T) [kelvin]
    }

    Cellmahajan_shiferaw_2008FromCellMLBackwardEuler::~Cellmahajan_shiferaw_2008FromCellMLBackwardEuler()
    {
    }

    AbstractLookupTableCollection* Cellmahajan_shiferaw_2008FromCellMLBackwardEuler::GetLookupTableCollection()
    {
        return Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables::Instance();
    }
    
    double Cellmahajan_shiferaw_2008FromCellMLBackwardEuler::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.169816169406
        double var_chaste_interface__Ca__Ca_i_converted = rY[1];
        // Units: millimolar; Initial value: 0.000256752008084
        double var_chaste_interface__INa__xm = rY[2];
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = rY[3];
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = rY[4];
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__ICaL__c1 = rY[5];
        // Units: dimensionless; Initial value: 1.8211252e-05
        double var_chaste_interface__ICaL__c2 = rY[6];
        // Units: dimensionless; Initial value: 0.979322592773
        double var_chaste_interface__ICaL__xi1ca = rY[7];
        // Units: dimensionless; Initial value: 0.001208153482
        double var_chaste_interface__ICaL__xi1ba = rY[8];
        // Units: dimensionless; Initial value: 3.3616596e-05
        double var_chaste_interface__ICaL__xi2ca = rY[9];
        // Units: dimensionless; Initial value: 0.004173008466
        double var_chaste_interface__ICaL__xi2ba = rY[10];
        // Units: dimensionless; Initial value: 0.015242594688
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = rY[14];
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = rY[15];
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = rY[16];
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = rY[17];
        // Units: dimensionless; Initial value: 0.993331326442
        double var_chaste_interface__Na__Na_i = rY[20];
        // Units: mM; Initial value: 11.441712311614
        double var_chaste_interface__Ca__Ca_submem = rY[22];
        // Units: uM; Initial value: 0.226941113355
        
        // Lookup table indexing
        const bool _oob_0 = Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        const double var_Ca__csm = 0.001 * var_chaste_interface__Ca__Ca_submem; // mM
        const double var_Environment__FonRT = mParameters[8] / (mParameters[9] * mParameters[20]); // per_mV
        const double var_reversal_potentials__ek = log(mParameters[6] / mParameters[4]) / var_Environment__FonRT; // mV
        const double var_cell__Itotal = -2912.0 * (1.0 - var_chaste_interface__ICaL__c1 - var_chaste_interface__ICaL__c2 - var_chaste_interface__ICaL__xi1ba - var_chaste_interface__ICaL__xi1ca - var_chaste_interface__ICaL__xi2ba - var_chaste_interface__ICaL__xi2ca) * ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(mParameters[9] * mParameters[20] / mParameters[8])) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[5] + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(-9.9999999999999995e-8)) * mParameters[8] * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[9] * mParameters[20] / mParameters[8] + var_chaste_interface__cell__V) * (1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[5] + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(9.9999999999999995e-8)) * mParameters[8] * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[5] + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(-9.9999999999999995e-8)) * mParameters[8] * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[8] / (mParameters[9] * mParameters[20])) : (4.0 * pow(mParameters[8], 2) * (-0.34100000000000003 * mParameters[5] + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(2.0 * mParameters[8] * var_chaste_interface__cell__V / (mParameters[9] * mParameters[20]))) * mParameters[10] * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * mParameters[8] * var_chaste_interface__cell__V / (mParameters[9] * mParameters[20]))) * mParameters[9] * mParameters[20]))) - (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * (_lt_0_row[0] + var_chaste_interface__Ito__ytos) * mParameters[18] * var_chaste_interface__Ito__xtos - (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * mParameters[14] * var_chaste_interface__Ito__xtof * var_chaste_interface__Ito__ytof - pow(var_chaste_interface__INa__xm, 3) * (-log(mParameters[7] / var_chaste_interface__Na__Na_i) / var_Environment__FonRT + var_chaste_interface__cell__V) * mParameters[11] * var_chaste_interface__INa__xh * var_chaste_interface__INa__xj - (1.0 + 0.80000000000000004 / (1.0 + 1.2500000000000001e-10 / pow(var_chaste_interface__Ca__Ca_i_converted, 3))) * (-log((0.018329999999999999 * mParameters[7] + mParameters[6]) / (0.018329999999999999 * var_chaste_interface__Na__Na_i + mParameters[4])) / var_Environment__FonRT + var_chaste_interface__cell__V) * mParameters[17] * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 - 8.0 * (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[5] * exp(0.34999999999999998 * var_Environment__FonRT * var_chaste_interface__cell__V) - pow(mParameters[7], 3) * var_Ca__csm * exp(-0.65000000000000002 * var_Environment__FonRT * var_chaste_interface__cell__V)) * mParameters[19] / ((1.0 + 0.20000000000000001 * exp(-0.65000000000000002 * var_Environment__FonRT * var_chaste_interface__cell__V)) * (1.0 + 0.026999999999999996 / pow(var_chaste_interface__Ca__Ca_submem, 3)) * (669921.875 * var_Ca__csm + 1.3 * pow(var_chaste_interface__Na__Na_i, 3) + pow(mParameters[7], 3) * var_Ca__csm + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[5] + 0.0035999999999999999 * pow(mParameters[7], 3) * (1.0 + 0.00053738391835633597 * pow(var_chaste_interface__Na__Na_i, 3)) + 1860.8670000000004 * (1.0 + 277.77777777777777 * var_Ca__csm) * mParameters[5])) - 1.5 * mParameters[6] * var_chaste_interface__Na__Na_i / ((1.5 + mParameters[6]) * (12.0 + var_chaste_interface__Na__Na_i) * (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[7])) * exp(-var_Environment__FonRT * var_chaste_interface__cell__V))) - 0.43033148291193518 * sqrt(mParameters[6]) * (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * mParameters[16] * var_chaste_interface__IKr__xr / (_lt_0_row[1]) - 0.4389381125701739 * sqrt(mParameters[6]) * (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * mParameters[15] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__ek)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__ek)) + (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__ek) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__ek)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__ek - 0.51429999999999998 * var_chaste_interface__cell__V)))); // nA_per_nF
        const double var_chaste_interface__i_ionic = -0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_cell__Itotal; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellmahajan_shiferaw_2008FromCellMLBackwardEuler::ComputeResidual(double var_chaste_interface__Environment__time, const double rCurrentGuess[15], double rResidual[15])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.169816169406
        double var_chaste_interface__INa__xm = rY[2];
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = rY[3];
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = rY[4];
        // Units: dimensionless; Initial value: 0.993888937283
        
        //output_nonlinear_state_assignments
        double var_chaste_interface__Ca__Ca_NSR = rCurrentGuess[0];
        double var_chaste_interface__Ca__Ca_dyad = rCurrentGuess[1];
        double var_chaste_interface__Ca__Ca_i_converted = rCurrentGuess[2];
        double var_chaste_interface__Ca__Ca_submem = rCurrentGuess[3];
        double var_chaste_interface__Ca__tropi = rCurrentGuess[4];
        double var_chaste_interface__Ca__trops = rCurrentGuess[5];
        double var_chaste_interface__ICaL__c1 = rCurrentGuess[6];
        double var_chaste_interface__ICaL__c2 = rCurrentGuess[7];
        double var_chaste_interface__ICaL__xi1ba = rCurrentGuess[8];
        double var_chaste_interface__ICaL__xi1ca = rCurrentGuess[9];
        double var_chaste_interface__ICaL__xi2ba = rCurrentGuess[10];
        double var_chaste_interface__ICaL__xi2ca = rCurrentGuess[11];
        double var_chaste_interface__Irel__Ca_JSR = rCurrentGuess[12];
        double var_chaste_interface__Irel__xir = rCurrentGuess[13];
        double var_chaste_interface__Na__Na_i = rCurrentGuess[14];
        
        // Lookup table indexing
        const bool _oob_0 = Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        //output_equations
        const double var_Ca__Ca_i = 1000.0 * var_chaste_interface__Ca__Ca_i_converted; // uM
        const double var_Ca__csm = 0.001 * var_chaste_interface__Ca__Ca_submem; // mM
        const double var_Ca__jd = 0.25 * var_chaste_interface__Ca__Ca_submem - 0.25 * var_Ca__Ca_i; // uM_per_ms
        const double var_Ca__xbi = -0.019599999999999999 * var_chaste_interface__Ca__tropi + 0.0327 * (70.0 - var_chaste_interface__Ca__tropi) * var_Ca__Ca_i; // uM_per_ms
        const double var_Ca__xbs = -0.019599999999999999 * var_chaste_interface__Ca__trops + 0.0327 * (70.0 - var_chaste_interface__Ca__trops) * var_chaste_interface__Ca__Ca_submem; // uM_per_ms
        const double d_dt_chaste_interface_var_Ca__tropi = var_Ca__xbi; // uM / ms
        const double d_dt_chaste_interface_var_Ca__trops = var_Ca__xbs; // uM / ms
        const double var_Environment__FonRT = mParameters[8] / (mParameters[9] * mParameters[20]); // per_mV
        const double var_ICaL__fca = 1 / (1.0 + 27.0 / pow(var_chaste_interface__Ca__Ca_dyad, 3)); // dimensionless
        const double var_ICaL__k1 = 0.024167999999999999 * var_ICaL__fca; // per_ms
        const double var_ICaL__s1 = 0.018268800000000002 * var_ICaL__fca; // per_ms
        const double var_ICaL__po = 1.0 - var_chaste_interface__ICaL__c1 - var_chaste_interface__ICaL__c2 - var_chaste_interface__ICaL__xi1ba - var_chaste_interface__ICaL__xi1ca - var_chaste_interface__ICaL__xi2ba - var_chaste_interface__ICaL__xi2ca; // dimensionless
        const double var_Ileak_Iup_Ixfer__jleak = pow(var_chaste_interface__Ca__Ca_NSR, 2) * (-var_Ca__Ca_i + 16.667000000000002 * var_chaste_interface__Ca__Ca_NSR) * mParameters[0] / (2500.0 + pow(var_chaste_interface__Ca__Ca_NSR, 2)); // uM_per_ms
        const double var_Ileak_Iup_Ixfer__jup = pow(var_Ca__Ca_i, 2) * mParameters[2] / (0.25 + pow(var_Ca__Ca_i, 2)); // uM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_i_converted = 0.001 * (-var_Ca__xbi - var_Ileak_Iup_Ixfer__jup + var_Ca__jd + var_Ileak_Iup_Ixfer__jleak) / (1.0 + 4.5 / pow((0.29999999999999999 + var_Ca__Ca_i), 2) + 3.2307692307692308 / pow((1 + 0.076923076923076927 * var_Ca__Ca_i), 2) + 28.199999999999999 / pow((0.59999999999999998 + var_Ca__Ca_i), 2) + 3.4285714285714284 / pow((1 + 0.14285714285714285 * var_Ca__Ca_i), 2)); // millimolar / ms
        const double var_Irel__Qr = 0.011111111111111112 * (((var_chaste_interface__Irel__Ca_JSR > 50.0) && (var_chaste_interface__Irel__Ca_JSR < 90.0)) ? (-50.0 + var_chaste_interface__Irel__Ca_JSR) : ((var_chaste_interface__Irel__Ca_JSR >= 90.0) ? (-977.00000000000011 + 11.300000000000001 * var_chaste_interface__Irel__Ca_JSR) : (0))) * var_chaste_interface__Ca__Ca_NSR; // uM_per_ms
        const double d_dt_chaste_interface_var_Irel__Ca_JSR = 0.01 * var_chaste_interface__Ca__Ca_NSR - 0.01 * var_chaste_interface__Irel__Ca_JSR; // uM / ms
        const double var_Ca__dCa_JSR = -var_Ileak_Iup_Ixfer__jleak - var_chaste_interface__Irel__xir + var_Ileak_Iup_Ixfer__jup; // uM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_NSR = var_Ca__dCa_JSR; // uM / ms
        const double var_ICaL__Pr = _lt_0_row[2]; // dimensionless
        const double var_ICaL__Ps = _lt_0_row[3]; // dimensionless
        const double var_ICaL__k3 = _lt_0_row[4]; // per_ms
        const double var_ICaL__k3t = var_ICaL__k3; // per_ms
        const double var_ICaL__poinf = _lt_0_row[5]; // dimensionless
        const double var_ICaL__alpha = var_ICaL__poinf; // per_ms
        const double var_ICaL__beta = 1.0 - var_ICaL__poinf; // per_ms
        const double d_dt_chaste_interface_var_ICaL__c1 = 3.0 * var_ICaL__po + 0.0022399999999999998 * var_chaste_interface__ICaL__xi1ba + 0.000103615 * var_chaste_interface__ICaL__xi1ca + var_ICaL__alpha * var_chaste_interface__ICaL__c2 - (0.30413000000000001 + var_ICaL__beta + var_ICaL__k1) * var_chaste_interface__ICaL__c1; // 1 / ms
        const double var_ICaL__recov = _lt_0_row[6]; // ms
        const double var_ICaL__rxa = ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(mParameters[9] * mParameters[20] / mParameters[8])) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[5] + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(-9.9999999999999995e-8)) * mParameters[8] * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[9] * mParameters[20] / mParameters[8] + var_chaste_interface__cell__V) * (1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[5] + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(9.9999999999999995e-8)) * mParameters[8] * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[5] + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(-9.9999999999999995e-8)) * mParameters[8] * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[8] / (mParameters[9] * mParameters[20])) : (4.0 * pow(mParameters[8], 2) * (-0.34100000000000003 * mParameters[5] + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(2.0 * mParameters[8] * var_chaste_interface__cell__V / (mParameters[9] * mParameters[20]))) * mParameters[10] * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * mParameters[8] * var_chaste_interface__cell__V / (mParameters[9] * mParameters[20]))) * mParameters[9] * mParameters[20]))); // mA_per_cm2
        const double var_ICaL__jca = 182.0 * var_ICaL__po * var_ICaL__rxa; // uM_per_ms
        const double var_ICaL__tauba = 450.0 + (-450.0 + var_ICaL__recov) * var_ICaL__Pr; // ms
        const double var_ICaL__k5t = (1.0 - var_ICaL__Ps) / var_ICaL__tauba; // per_ms
        const double var_ICaL__k6t = var_ICaL__Ps / var_ICaL__tauba; // per_ms
        const double var_ICaL__k4t = 1.8437500000000002 * var_ICaL__alpha * var_ICaL__k3t * var_ICaL__k5t / (var_ICaL__beta * var_ICaL__k6t); // per_ms
        const double d_dt_chaste_interface_var_ICaL__xi1ba = 0.00413 * var_chaste_interface__ICaL__c1 + 0.0019499999999999999 * var_ICaL__po + var_ICaL__k4t * var_chaste_interface__ICaL__xi2ba - (0.0023457627118644068 + var_ICaL__k3t) * var_chaste_interface__ICaL__xi1ba; // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__xi2ba = var_chaste_interface__ICaL__c2 * var_ICaL__k6t + var_ICaL__k3t * var_chaste_interface__ICaL__xi1ba - (var_ICaL__k4t + var_ICaL__k5t) * var_chaste_interface__ICaL__xi2ba; // 1 / ms
        const double var_ICaL__tauca = 0.10000000000000001 + 78.032899999999998 / (1.0 + 0.00072525373756441506 * pow(var_chaste_interface__Ca__Ca_dyad, 4)) + (-0.10000000000000001 - 78.032899999999998 / (1.0 + 0.00072525373756441506 * pow(var_chaste_interface__Ca__Ca_dyad, 4)) + var_ICaL__recov) * var_ICaL__Pr; // ms
        const double var_ICaL__k5 = (1.0 - var_ICaL__Ps) / var_ICaL__tauca; // per_ms
        const double var_ICaL__k6 = var_ICaL__Ps * var_ICaL__fca / var_ICaL__tauca; // per_ms
        const double d_dt_chaste_interface_var_ICaL__c2 = var_ICaL__beta * var_chaste_interface__ICaL__c1 + var_ICaL__k5 * var_chaste_interface__ICaL__xi2ca + var_ICaL__k5t * var_chaste_interface__ICaL__xi2ba - (var_ICaL__alpha + var_ICaL__k6 + var_ICaL__k6t) * var_chaste_interface__ICaL__c2; // 1 / ms
        const double var_ICaL__k4 = 9651.1122906915025 * var_ICaL__alpha * var_ICaL__k1 * var_ICaL__k3 * var_ICaL__k5 / (var_ICaL__beta * var_ICaL__k6); // per_ms
        const double d_dt_chaste_interface_var_ICaL__xi1ca = var_chaste_interface__ICaL__c1 * var_ICaL__k1 + var_ICaL__k4 * var_chaste_interface__ICaL__xi2ca + var_ICaL__po * var_ICaL__s1 - (0.000103615 + 1.0361500000000001e-5 * var_ICaL__s1 / var_ICaL__k1 + var_ICaL__k3) * var_chaste_interface__ICaL__xi1ca; // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__xi2ca = var_chaste_interface__ICaL__c2 * var_ICaL__k6 + var_ICaL__k3 * var_chaste_interface__ICaL__xi1ca - (var_ICaL__k4 + var_ICaL__k5) * var_chaste_interface__ICaL__xi2ca; // 1 / ms
        const double var_INaCa__jNaCa = (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[5] * exp(0.34999999999999998 * var_Environment__FonRT * var_chaste_interface__cell__V) - pow(mParameters[7], 3) * var_Ca__csm * exp(-0.65000000000000002 * var_Environment__FonRT * var_chaste_interface__cell__V)) * mParameters[19] / ((1.0 + 0.20000000000000001 * exp(-0.65000000000000002 * var_Environment__FonRT * var_chaste_interface__cell__V)) * (1.0 + 0.026999999999999996 / pow(var_chaste_interface__Ca__Ca_submem, 3)) * (669921.875 * var_Ca__csm + 1.3 * pow(var_chaste_interface__Na__Na_i, 3) + pow(mParameters[7], 3) * var_Ca__csm + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[5] + 0.0035999999999999999 * pow(mParameters[7], 3) * (1.0 + 0.00053738391835633597 * pow(var_chaste_interface__Na__Na_i, 3)) + 1860.8670000000004 * (1.0 + 277.77777777777777 * var_Ca__csm) * mParameters[5])); // uM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_submem = (-var_Ca__xbs + 50.0 * var_INaCa__jNaCa + 50.0 * var_chaste_interface__Irel__xir - 50.0 * var_Ca__jd - 50.0 * var_ICaL__jca) / (1.0 + 4.5 / pow((0.29999999999999999 + var_chaste_interface__Ca__Ca_submem), 2) + 3.2307692307692308 / pow((1 + 0.076923076923076927 * var_chaste_interface__Ca__Ca_submem), 2) + 28.199999999999999 / pow((0.59999999999999998 + var_chaste_interface__Ca__Ca_submem), 2) + 3.4285714285714284 / pow((1 + 0.14285714285714285 * var_chaste_interface__Ca__Ca_submem), 2)); // uM / ms
        const double var_INaK__xiNaK = 1.5 * mParameters[6] * var_chaste_interface__Na__Na_i / ((1.5 + mParameters[6]) * (12.0 + var_chaste_interface__Na__Na_i) * (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[7])) * exp(-var_Environment__FonRT * var_chaste_interface__cell__V))); // nA_per_nF
        const double d_dt_chaste_interface_var_Irel__xir = -0.033333333333333333 * (1.0 - 30.0 * var_Ca__dCa_JSR / var_chaste_interface__Ca__Ca_NSR) * var_chaste_interface__Irel__xir + 2.5807899999999999 * var_ICaL__po * var_Irel__Qr * fabs(var_ICaL__rxa) * _lt_0_row[17] / (_lt_0_row[16]); // uM_per_ms / ms
        const double d_dt_chaste_interface_var_Ca__Ca_dyad = 2.0 * var_chaste_interface__Ca__Ca_submem - 2.0 * var_chaste_interface__Ca__Ca_dyad + (9000.0 * var_ICaL__po * fabs(var_ICaL__rxa) + 26841.799999999999 * var_ICaL__po * var_Irel__Qr * fabs(var_ICaL__rxa) * _lt_0_row[19] / (_lt_0_row[18])) * mParameters[1]; // uM / ms
        const double var_INaCa__xiNaCa = 8.0 * var_INaCa__jNaCa; // nA_per_nF
        const double var_INa__xina = pow(var_chaste_interface__INa__xm, 3) * (-log(mParameters[7] / var_chaste_interface__Na__Na_i) / var_Environment__FonRT + var_chaste_interface__cell__V) * mParameters[11] * var_chaste_interface__INa__xh * var_chaste_interface__INa__xj; // nA_per_nF
        const double d_dt_chaste_interface_var_Na__Na_i = -0.000125 * (3.0 * var_INaCa__xiNaCa + 3.0 * var_INaK__xiNaK + var_INa__xina) * mParameters[3]; // mM / ms
        
        rResidual[2] = rCurrentGuess[2] - rY[1] - mDt*d_dt_chaste_interface_var_Ca__Ca_i_converted;
        rResidual[6] = rCurrentGuess[6] - rY[5] - mDt*d_dt_chaste_interface_var_ICaL__c1;
        rResidual[7] = rCurrentGuess[7] - rY[6] - mDt*d_dt_chaste_interface_var_ICaL__c2;
        rResidual[9] = rCurrentGuess[9] - rY[7] - mDt*d_dt_chaste_interface_var_ICaL__xi1ca;
        rResidual[8] = rCurrentGuess[8] - rY[8] - mDt*d_dt_chaste_interface_var_ICaL__xi1ba;
        rResidual[11] = rCurrentGuess[11] - rY[9] - mDt*d_dt_chaste_interface_var_ICaL__xi2ca;
        rResidual[10] = rCurrentGuess[10] - rY[10] - mDt*d_dt_chaste_interface_var_ICaL__xi2ba;
        rResidual[12] = rCurrentGuess[12] - rY[18] - mDt*d_dt_chaste_interface_var_Irel__Ca_JSR;
        rResidual[13] = rCurrentGuess[13] - rY[19] - mDt*d_dt_chaste_interface_var_Irel__xir;
        rResidual[14] = rCurrentGuess[14] - rY[20] - mDt*d_dt_chaste_interface_var_Na__Na_i;
        rResidual[1] = rCurrentGuess[1] - rY[21] - mDt*d_dt_chaste_interface_var_Ca__Ca_dyad;
        rResidual[3] = rCurrentGuess[3] - rY[22] - mDt*d_dt_chaste_interface_var_Ca__Ca_submem;
        rResidual[0] = rCurrentGuess[0] - rY[23] - mDt*d_dt_chaste_interface_var_Ca__Ca_NSR;
        rResidual[4] = rCurrentGuess[4] - rY[24] - mDt*d_dt_chaste_interface_var_Ca__tropi;
        rResidual[5] = rCurrentGuess[5] - rY[25] - mDt*d_dt_chaste_interface_var_Ca__trops;
    }

    void Cellmahajan_shiferaw_2008FromCellMLBackwardEuler::ComputeJacobian(double var_chaste_interface__Environment__time, const double rCurrentGuess[15], double rJacobian[15][15])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.169816169406
        double var_chaste_interface__INa__xm = rY[2];
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = rY[3];
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = rY[4];
        // Units: dimensionless; Initial value: 0.993888937283
        
        // Lookup table indexing
        const bool _oob_0 = Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        double var_chaste_interface__Ca__Ca_NSR = rCurrentGuess[0];
        double var_chaste_interface__Ca__Ca_dyad = rCurrentGuess[1];
        double var_chaste_interface__Ca__Ca_i_converted = rCurrentGuess[2];
        double var_chaste_interface__Ca__Ca_submem = rCurrentGuess[3];
        double var_chaste_interface__Ca__tropi = rCurrentGuess[4];
        double var_chaste_interface__Ca__trops = rCurrentGuess[5];
        double var_chaste_interface__ICaL__c1 = rCurrentGuess[6];
        double var_chaste_interface__ICaL__c2 = rCurrentGuess[7];
        double var_chaste_interface__ICaL__xi1ba = rCurrentGuess[8];
        double var_chaste_interface__ICaL__xi1ca = rCurrentGuess[9];
        double var_chaste_interface__ICaL__xi2ba = rCurrentGuess[10];
        double var_chaste_interface__ICaL__xi2ca = rCurrentGuess[11];
        double var_chaste_interface__Irel__Ca_JSR = rCurrentGuess[12];
        double var_chaste_interface__Irel__xir = rCurrentGuess[13];
        double var_chaste_interface__Na__Na_i = rCurrentGuess[14];
        
        const double var_x0 = pow(var_chaste_interface__Ca__Ca_NSR, 2);
        const double var_x1 = mParameters[0] / (2500.0 + var_x0);
        const double var_x2 = var_x0 * var_x1;
        const double var_x3 = 16.667000000000002 * var_x2;
        const double var_x4 = 16.667000000000002 * var_chaste_interface__Ca__Ca_NSR - 1000.0 * var_chaste_interface__Ca__Ca_i_converted;
        const double var_x5 = 2 * var_x1 * var_x4 * var_chaste_interface__Ca__Ca_NSR;
        const double var_x6 = 3.2000000000000001e-7 * var_x4 * pow(var_chaste_interface__Ca__Ca_NSR, 3) * mParameters[0] / pow((1 + 0.00040000000000000002 * var_x0), 2);
        const double var_x7 = var_x6 - var_x3 - var_x5;
        const double var_x8 = pow(var_chaste_interface__Ca__Ca_i_converted, 2);
        const double var_x9 = 1000000.0 * var_x8;
        const double var_x10 = mParameters[2] / (0.25 + var_x9);
        const double var_x11 = 2000000.0 * var_x10 * var_chaste_interface__Ca__Ca_i_converted;
        const double var_x12 = 1000.0 * var_x2;
        const double var_x13 = 2.0 * pow(var_chaste_interface__Ca__Ca_i_converted, 3) * mParameters[2] / pow((2.4999999999999999e-7 + var_x8), 2);
        const double var_x14 = var_x11 + var_x12 - var_x13;
        const double var_x15 = (var_chaste_interface__Irel__Ca_JSR > 50.0) && (var_chaste_interface__Irel__Ca_JSR < 90.0);
        const double var_x16 = var_chaste_interface__Irel__Ca_JSR >= 90.0;
        const double var_x17 = ((var_x15) ? (-0.55555555555555558 + 0.011111111111111112 * var_chaste_interface__Irel__Ca_JSR) : ((var_x16) ? (-10.855555555555556 + 0.12555555555555556 * var_chaste_interface__Irel__Ca_JSR) : (0)));
        const double var_x18 = _lt_0_row[19];
        const double var_x19 = 26841.799999999999 * var_x18 / (1.0 + var_x18);
        const double var_x20 = exp(-9.9999999999999995e-8);
        const double var_x21 = 1 / (-1.0 + var_x20);
        const double var_x22 = -0.34100000000000003 * mParameters[5];
        const double var_x23 = 0.001 * var_chaste_interface__Ca__Ca_submem;
        const double var_x24 = mParameters[8] * mParameters[10];
        const double var_x25 = 1.9999999999999999e-7 * var_x24;
        const double var_x26 = var_x21 * var_x25 * (var_x22 + var_x20 * var_x23);
        const double var_x27 = exp(9.9999999999999995e-8);
        const double var_x28 = 1 / (-1.0 + var_x27);
        const double var_x29 = mParameters[9] * mParameters[20] / mParameters[8];
        const double var_x30 = 1 / mParameters[9];
        const double var_x31 = 1 / mParameters[20];
        const double var_x32 = var_x30 * var_x31 * mParameters[8];
        const double var_x33 = 10000000.0 * var_x32 * (4.9999999999999998e-8 * var_x29 + var_chaste_interface__cell__V);
        const double var_x34 = fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(var_x29);
        const double var_x35 = var_x32 * var_chaste_interface__cell__V;
        const double var_x36 = exp(2.0 * var_x35);
        const double var_x37 = var_x30 * var_x31 * pow(mParameters[8], 2) * mParameters[10] * var_chaste_interface__cell__V / (-1.0 + var_x36);
        const double var_x38 = ((var_x34) ? (-var_x26 + var_x33 * (var_x26 + var_x25 * var_x28 * (var_x22 + var_x23 * var_x27))) : (4.0 * var_x37 * (var_x22 + var_x23 * var_x36)));
        const double var_x39 = fabs(var_x38);
        const double var_x40 = 1.0 - var_chaste_interface__ICaL__c1 - var_chaste_interface__ICaL__c2 - var_chaste_interface__ICaL__xi1ba - var_chaste_interface__ICaL__xi1ca - var_chaste_interface__ICaL__xi2ba - var_chaste_interface__ICaL__xi2ca;
        const double var_x41 = var_x39 * var_x40;
        const double var_x42 = var_x19 * var_x41 * mParameters[1];
        const double var_x43 = 1.9999999999999998e-10 * var_x24;
        const double var_x44 = var_x20 * var_x21 * var_x43;
        const double var_x45 = ((var_x34) ? (-var_x44 + var_x33 * (var_x44 + var_x27 * var_x28 * var_x43)) : (0.0040000000000000001 * var_x36 * var_x37));
        const double var_x46 = var_x45 * Signum(var_x38);
        const double var_x47 = 0.011111111111111112 * var_chaste_interface__Ca__Ca_NSR;
        const double var_x48 = ((var_x15) ? (var_x47 * (-50.0 + var_chaste_interface__Irel__Ca_JSR)) : ((var_x16) ? (var_x47 * (-977.00000000000011 + 11.300000000000001 * var_chaste_interface__Irel__Ca_JSR)) : (0)));
        const double var_x49 = var_x40 * var_x46 * var_x48;
        const double var_x50 = var_x39 * var_x48;
        const double var_x51 = (-9000.0 * var_x39 - var_x19 * var_x50) * mParameters[1];
        const double var_x52 = ((var_x15) ? (var_x47) : ((var_x16) ? (0.12555555555555556 * var_chaste_interface__Ca__Ca_NSR) : (0)));
        const double var_x53 = 0.012999999999999999 + var_chaste_interface__Ca__Ca_i_converted;
        const double var_x54 = 0.00059999999999999995 + var_chaste_interface__Ca__Ca_i_converted;
        const double var_x55 = 0.00029999999999999997 + var_chaste_interface__Ca__Ca_i_converted;
        const double var_x56 = 0.0070000000000000001 + var_chaste_interface__Ca__Ca_i_converted;
        const double var_x57 = 1.0 + 0.00054600000000000004 / pow(var_x53, 2) + 2.8200000000000001e-5 / pow(var_x54, 2) + 4.5000000000000001e-6 / pow(var_x55, 2) + 0.00016800000000000002 / pow(var_x56, 2);
        const double var_x58 = 1 / var_x57;
        const double var_x59 = 0.001 * var_x58;
        const double var_x60 = 32.699999999999996 * var_chaste_interface__Ca__tropi;
        const double var_x61 = 32.699999999999996 * var_chaste_interface__Ca__Ca_i_converted;
        const double var_x62 = var_x10 * var_x9;
        const double var_x63 = var_x2 * var_x4;
        const double var_x64 = 0.29999999999999999 + var_chaste_interface__Ca__Ca_submem;
        const double var_x65 = pow(var_x64, (-2));
        const double var_x66 = 1 + 0.076923076923076927 * var_chaste_interface__Ca__Ca_submem;
        const double var_x67 = pow(var_x66, (-2));
        const double var_x68 = 0.59999999999999998 + var_chaste_interface__Ca__Ca_submem;
        const double var_x69 = pow(var_x68, (-2));
        const double var_x70 = 1 + 0.14285714285714285 * var_chaste_interface__Ca__Ca_submem;
        const double var_x71 = pow(var_x70, (-2));
        const double var_x72 = 1 / (1.0 + 4.5 * var_x65 + 3.2307692307692308 * var_x67 + 28.199999999999999 * var_x69 + 3.4285714285714284 * var_x71);
        const double var_x73 = 0.0327 * var_chaste_interface__Ca__trops;
        const double var_x74 = pow(mParameters[7], 3);
        const double var_x75 = 0.001 * var_x74;
        const double var_x76 = -669.921875 - var_x75 - 516.90750000000014 * mParameters[5];
        const double var_x77 = pow(var_chaste_interface__Na__Na_i, 3);
        const double var_x78 = (1.0 + 0.27777777777777779 * var_chaste_interface__Ca__Ca_submem) * mParameters[5];
        const double var_x79 = 0.00053738391835633597 * var_x77;
        const double var_x80 = var_x74 * (1.0 + var_x79);
        const double var_x81 = exp(-0.65000000000000002 * var_x35);
        const double var_x82 = 1 / (1.0 + 0.20000000000000001 * var_x81);
        const double var_x83 = 1.0 + 0.026999999999999996 / pow(var_chaste_interface__Ca__Ca_submem, 3);
        const double var_x84 = 1 / var_x83;
        const double var_x85 = exp(0.34999999999999998 * var_x35);
        const double var_x86 = var_x77 * mParameters[5];
        const double var_x87 = var_x75 * var_chaste_interface__Ca__Ca_submem;
        const double var_x88 = var_x85 * var_x86 - var_x81 * var_x87;
        const double var_x89 = var_x82 * var_x84 * var_x88 * mParameters[19];
        const double var_x90 = var_x89 / pow((var_x78 + 0.00069859909386323679 * var_x77 + 1.9345821060828095e-6 * var_x80 + 0.36000524218012353 * var_chaste_interface__Ca__Ca_submem + var_x79 * mParameters[5] + 5.37383918356336e-7 * var_x74 * var_chaste_interface__Ca__Ca_submem), 2);
        const double var_x91 = 1.4439073785400458e-5 * var_x90;
        const double var_x92 = 1 / (var_x86 + var_x87 + 669.921875 * var_chaste_interface__Ca__Ca_submem + 0.0035999999999999999 * var_x80 + 1.3 * var_x77 + 1860.8670000000004 * var_x78);
        const double var_x93 = var_x82 * var_x92 * mParameters[19];
        const double var_x94 = var_x88 * var_x93 / (pow(var_x83, 2) * pow(var_chaste_interface__Ca__Ca_submem, 4));
        const double var_x95 = var_x84 * var_x93;
        const double var_x96 = var_x74 * var_x81 * var_x95;
        const double var_x97 = var_x72;
        const double var_x98 = 9100.0 * var_x38;
        const double var_x99 = 0.0327 * var_chaste_interface__Ca__Ca_submem;
        const double var_x100 = var_x72 * var_x98;
        const double var_x101 = pow(var_chaste_interface__Na__Na_i, 2);
        const double var_x102 = var_x101 * mParameters[5];
        const double var_x103 = -3 * var_x102 - 3.9000000000000004 * var_x101 - 5.8037463182484285e-6 * var_x101 * var_x74;
        const double var_x104 = var_x102 * var_x85 * var_x95;
        const double var_x105 = pow(var_chaste_interface__Ca__Ca_dyad, 4);
        const double var_x106 = 1 / var_x105;
        const double var_x107 = pow(var_chaste_interface__Ca__Ca_dyad, 3);
        const double var_x108 = 1 / var_x107;
        const double var_x109 = var_x106 / pow((0.037037037037037035 + var_x108), 2);
        const double var_x110 = 0.002685333333333333 * var_x109 * var_chaste_interface__ICaL__c1;
        const double var_x111 = 1 / (_lt_0_row[23]);
        const double var_x112 = var_x111;
        const double var_x113 = 1 / (1.0 + 27.0 * var_x108);
        const double var_x114 = _lt_0_row[24];
        const double var_x115 = 1 / var_x114;
        const double var_x116 = 1.0 + 0.00072525373756441506 * var_x105;
        const double var_x117 = 1 / var_x116;
        const double var_x118 = _lt_0_row[2];
        const double var_x119 = _lt_0_row[25];
        const double var_x120 = 78.032899999999998 * var_x117;
        const double var_x121 = var_x118 * (9.9000000000000004 + var_x119 - var_x120);
        const double var_x122 = 0.22637460951196098 * var_x107 / pow(var_x116, 2);
        const double var_x123 = 0.00016422697956757767 * (var_x122 - var_x118 * var_x122) / pow((0.0012815107473898831 + var_x117 + 0.012815107473898831 * var_x121), 2);
        const double var_x124 = var_x113 * var_x115 * var_x123;
        const double var_x125 = 1 / (0.10000000000000001 + var_x120 + var_x121);
        const double var_x126 = 0.1111111111111111 * var_x109 * var_x115 * var_x125;
        const double var_x127 = var_x115;
        const double var_x128 = 1.0 - var_x127;
        const double var_x129 = var_x123 * var_x128 * var_chaste_interface__ICaL__xi2ca;
        const double var_x130 = -var_x112;
        const double var_x131 = 1.0 + var_x130;
        const double var_x132 = 1 / (450.0 + var_x118 * (-440.0 + var_x119));
        const double var_x133 = var_x127 * var_x132;
        const double var_x134 = var_x113 * var_x125 * var_x127;
        const double var_x135 = var_x128 * var_x132;
        const double var_x136 = var_x125 * var_x128;
        const double var_x137 = _lt_0_row[26];
        const double var_x138 = 0.33333333333333331 - var_x137;
        const double var_x139 = var_x111 * var_x114 * var_x128 * var_x138 / var_x131;
        const double var_x140 = 1.8437500000000002 * var_x139;
        const double var_x141 = 41.377027474346242 + 1117.1797418073486 * var_x108;
        const double var_x142 = -0.018268800000000002 * var_x113;
        const double var_x143 = 233.2480818414322 * var_x139;
        const double var_x144 = 1 / var_chaste_interface__Ca__Ca_NSR;
        const double var_x145 = var_x62 - var_x63 - var_chaste_interface__Irel__xir;
        const double var_x146 = _lt_0_row[17];
        const double var_x147 = 2.5807899999999999 * var_x146 / (1.0 + var_x146);
        const double var_x148 = var_x147 * var_x41;
        const double var_x149 = var_x144 * var_chaste_interface__Irel__xir;
        const double var_x150 = -var_x147 * var_x50;
        const double var_x151 = 8.6634442712402744e-10 * var_x90;
        const double var_x152 = mParameters[6] / ((1.5 + mParameters[6]) * (1.0 + 0.1245 * exp(-0.10000000000000001 * var_x35) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[7])) * exp(-var_x35)));
        
        
        rJacobian[0][0] = 1.0 - (mDt * (var_x7));
        rJacobian[0][1] = 0.0;
        rJacobian[0][2] = -(mDt * (var_x14));
        rJacobian[0][3] = 0.0;
        rJacobian[0][4] = 0.0;
        rJacobian[0][5] = 0.0;
        rJacobian[0][6] = 0.0;
        rJacobian[0][7] = 0.0;
        rJacobian[0][8] = 0.0;
        rJacobian[0][9] = 0.0;
        rJacobian[0][10] = 0.0;
        rJacobian[0][11] = 0.0;
        rJacobian[0][12] = 0.0;
        rJacobian[0][13] = -(mDt * (-1));
        rJacobian[0][14] = 0.0;
        rJacobian[1][0] = -(mDt * (var_x17 * var_x42));
        rJacobian[1][1] = 1.0 - (mDt * (-2.0));
        rJacobian[1][2] = 0.0;
        rJacobian[1][3] = -(mDt * (2.0 + (var_x19 * var_x49 + var_x46 * (9000.0 - 9000.0 * var_chaste_interface__ICaL__c1 - 9000.0 * var_chaste_interface__ICaL__c2 - 9000.0 * var_chaste_interface__ICaL__xi1ba - 9000.0 * var_chaste_interface__ICaL__xi1ca - 9000.0 * var_chaste_interface__ICaL__xi2ba - 9000.0 * var_chaste_interface__ICaL__xi2ca)) * mParameters[1]));
        rJacobian[1][4] = 0.0;
        rJacobian[1][5] = 0.0;
        rJacobian[1][6] = -(mDt * (var_x51));
        rJacobian[1][7] = -(mDt * (var_x51));
        rJacobian[1][8] = -(mDt * (var_x51));
        rJacobian[1][9] = -(mDt * (var_x51));
        rJacobian[1][10] = -(mDt * (var_x51));
        rJacobian[1][11] = -(mDt * (var_x51));
        rJacobian[1][12] = -(mDt * (var_x42 * var_x52));
        rJacobian[1][13] = 0.0;
        rJacobian[1][14] = 0.0;
        rJacobian[2][0] = -(mDt * (var_x59 * (var_x3 + var_x5 - var_x6)));
        rJacobian[2][1] = 0.0;
        rJacobian[2][2] = 1.0 - (mDt * (var_x59 * (-2539.0 + var_x13 + var_x60 - var_x11 - var_x12) + 0.001 * (0.0010920000000000001 / pow(var_x53, 3) + 5.6400000000000002e-5 / pow(var_x54, 3) + 9.0000000000000002e-6 / pow(var_x55, 3) + 0.00033600000000000004 / pow(var_x56, 3)) * (var_x63 - var_x62 + 0.25 * var_chaste_interface__Ca__Ca_submem + 0.019599999999999999 * var_chaste_interface__Ca__tropi - 250.0 * var_chaste_interface__Ca__Ca_i_converted - var_x61 * (70.0 - var_chaste_interface__Ca__tropi)) / pow(var_x57, 2)));
        rJacobian[2][3] = -(mDt * (0.00025000000000000001 * var_x58));
        rJacobian[2][4] = -(mDt * (var_x59 * (0.019599999999999999 + var_x61)));
        rJacobian[2][5] = 0.0;
        rJacobian[2][6] = 0.0;
        rJacobian[2][7] = 0.0;
        rJacobian[2][8] = 0.0;
        rJacobian[2][9] = 0.0;
        rJacobian[2][10] = 0.0;
        rJacobian[2][11] = 0.0;
        rJacobian[2][12] = 0.0;
        rJacobian[2][13] = 0.0;
        rJacobian[2][14] = 0.0;
        rJacobian[3][0] = 0.0;
        rJacobian[3][1] = 0.0;
        rJacobian[3][2] = -(mDt * (12500.0 * var_x72));
        rJacobian[3][3] = 1.0 - (mDt * (var_x97 * (-14.789 + var_x73 + 4.0499999999999998 * var_x94 - 0.050000000000000003 * var_x96 + var_x45 * (-9100.0 + 9100.0 * var_chaste_interface__ICaL__c1 + 9100.0 * var_chaste_interface__ICaL__c2 + 9100.0 * var_chaste_interface__ICaL__xi1ba + 9100.0 * var_chaste_interface__ICaL__xi1ca + 9100.0 * var_chaste_interface__ICaL__xi2ba + 9100.0 * var_chaste_interface__ICaL__xi2ca) + var_x76 * var_x91) + 0.0012574820180071425 * (9.0 / pow(var_x64, 3) + 56.399999999999999 / pow(var_x68, 3) + 0.97959183673469385 / pow(var_x70, 3) + 0.49704142011834318 / pow(var_x66, 3)) * (50.0 * var_chaste_interface__Irel__xir + 0.019599999999999999 * var_chaste_interface__Ca__trops + 12500.0 * var_chaste_interface__Ca__Ca_i_converted - 12.5 * var_chaste_interface__Ca__Ca_submem - var_x40 * var_x98 - var_x99 * (70.0 - var_chaste_interface__Ca__trops) + 50.0 * var_x89 * var_x92) / pow((0.035460992907801421 + var_x69 + 0.15957446808510639 * var_x65 + 0.12158054711246201 * var_x71 + 0.11456628477905074 * var_x67), 2)));
        rJacobian[3][4] = 0.0;
        rJacobian[3][5] = -(mDt * (var_x97 * (0.019599999999999999 + var_x99)));
        rJacobian[3][6] = -(mDt * (var_x100));
        rJacobian[3][7] = -(mDt * (var_x100));
        rJacobian[3][8] = -(mDt * (var_x100));
        rJacobian[3][9] = -(mDt * (var_x100));
        rJacobian[3][10] = -(mDt * (var_x100));
        rJacobian[3][11] = -(mDt * (var_x100));
        rJacobian[3][12] = 0.0;
        rJacobian[3][13] = -(mDt * (50.0 * var_x72));
        rJacobian[3][14] = -(mDt * (var_x97 * (150.0 * var_x104 + var_x103 * var_x91)));
        rJacobian[4][0] = 0.0;
        rJacobian[4][1] = 0.0;
        rJacobian[4][2] = -(mDt * (2289.0 - var_x60));
        rJacobian[4][3] = 0.0;
        rJacobian[4][4] = 1.0 - (mDt * (-0.019599999999999999 - var_x61));
        rJacobian[4][5] = 0.0;
        rJacobian[4][6] = 0.0;
        rJacobian[4][7] = 0.0;
        rJacobian[4][8] = 0.0;
        rJacobian[4][9] = 0.0;
        rJacobian[4][10] = 0.0;
        rJacobian[4][11] = 0.0;
        rJacobian[4][12] = 0.0;
        rJacobian[4][13] = 0.0;
        rJacobian[4][14] = 0.0;
        rJacobian[5][0] = 0.0;
        rJacobian[5][1] = 0.0;
        rJacobian[5][2] = 0.0;
        rJacobian[5][3] = -(mDt * (2.2890000000000001 - var_x73));
        rJacobian[5][4] = 0.0;
        rJacobian[5][5] = 1.0 - (mDt * (-0.019599999999999999 - var_x99));
        rJacobian[5][6] = 0.0;
        rJacobian[5][7] = 0.0;
        rJacobian[5][8] = 0.0;
        rJacobian[5][9] = 0.0;
        rJacobian[5][10] = 0.0;
        rJacobian[5][11] = 0.0;
        rJacobian[5][12] = 0.0;
        rJacobian[5][13] = 0.0;
        rJacobian[5][14] = 0.0;
        rJacobian[6][0] = 0.0;
        rJacobian[6][1] = -(mDt * (-var_x110));
        rJacobian[6][2] = 0.0;
        rJacobian[6][3] = 0.0;
        rJacobian[6][4] = 0.0;
        rJacobian[6][5] = 0.0;
        rJacobian[6][6] = 1.0 - (mDt * (-4.3041299999999998 + var_x112 - 0.024167999999999999 * var_x113));
        rJacobian[6][7] = -(mDt * (-3.0 + var_x112));
        rJacobian[6][8] = -(mDt * (-2.99776));
        rJacobian[6][9] = -(mDt * (-2.999896385));
        rJacobian[6][10] = -(mDt * (-3.0));
        rJacobian[6][11] = -(mDt * (-3.0));
        rJacobian[6][12] = 0.0;
        rJacobian[6][13] = 0.0;
        rJacobian[6][14] = 0.0;
        rJacobian[7][0] = 0.0;
        rJacobian[7][1] = -(mDt * (var_x129 + (-var_x124 - var_x126) * var_chaste_interface__ICaL__c2));
        rJacobian[7][2] = 0.0;
        rJacobian[7][3] = 0.0;
        rJacobian[7][4] = 0.0;
        rJacobian[7][5] = 0.0;
        rJacobian[7][6] = -(mDt * (var_x131));
        rJacobian[7][7] = 1.0 - (mDt * (var_x130 - var_x133 - var_x134));
        rJacobian[7][8] = 0.0;
        rJacobian[7][9] = 0.0;
        rJacobian[7][10] = -(mDt * (var_x135));
        rJacobian[7][11] = -(mDt * (var_x136));
        rJacobian[7][12] = 0.0;
        rJacobian[7][13] = 0.0;
        rJacobian[7][14] = 0.0;
        rJacobian[8][0] = 0.0;
        rJacobian[8][1] = 0.0;
        rJacobian[8][2] = 0.0;
        rJacobian[8][3] = 0.0;
        rJacobian[8][4] = 0.0;
        rJacobian[8][5] = 0.0;
        rJacobian[8][6] = -(mDt * (0.0021800000000000001));
        rJacobian[8][7] = -(mDt * (-0.0019499999999999999));
        rJacobian[8][8] = 1.0 - (mDt * (-0.33762909604519775 + var_x137));
        rJacobian[8][9] = -(mDt * (-0.0019499999999999999));
        rJacobian[8][10] = -(mDt * (-0.0019499999999999999 + var_x140));
        rJacobian[8][11] = -(mDt * (-0.0019499999999999999));
        rJacobian[8][12] = 0.0;
        rJacobian[8][13] = 0.0;
        rJacobian[8][14] = 0.0;
        rJacobian[9][0] = 0.0;
        rJacobian[9][1] = -(mDt * (var_x110 + (0.00063442013684210537 * var_x106 * var_x113 - 2.1032463466666669e-8 * var_x109 * var_x141) * var_chaste_interface__ICaL__xi1ca + 0.0020298666666666667 * var_x109 * var_x40));
        rJacobian[9][2] = 0.0;
        rJacobian[9][3] = 0.0;
        rJacobian[9][4] = 0.0;
        rJacobian[9][5] = 0.0;
        rJacobian[9][6] = -(mDt * (0.0058991999999999968 * var_x113));
        rJacobian[9][7] = -(mDt * (var_x142));
        rJacobian[9][8] = -(mDt * (var_x142));
        rJacobian[9][9] = 1.0 - (mDt * (-0.33343694833333332 + var_x137 + var_x142 - 1.8929217120000003e-7 * var_x113 * var_x141));
        rJacobian[9][10] = -(mDt * (var_x142));
        rJacobian[9][11] = -(mDt * (var_x142 + var_x143));
        rJacobian[9][12] = 0.0;
        rJacobian[9][13] = 0.0;
        rJacobian[9][14] = 0.0;
        rJacobian[10][0] = 0.0;
        rJacobian[10][1] = 0.0;
        rJacobian[10][2] = 0.0;
        rJacobian[10][3] = 0.0;
        rJacobian[10][4] = 0.0;
        rJacobian[10][5] = 0.0;
        rJacobian[10][6] = 0.0;
        rJacobian[10][7] = -(mDt * (var_x133));
        rJacobian[10][8] = -(mDt * (var_x138));
        rJacobian[10][9] = 0.0;
        rJacobian[10][10] = 1.0 - (mDt * (-var_x135 - var_x140));
        rJacobian[10][11] = 0.0;
        rJacobian[10][12] = 0.0;
        rJacobian[10][13] = 0.0;
        rJacobian[10][14] = 0.0;
        rJacobian[11][0] = 0.0;
        rJacobian[11][1] = -(mDt * (-var_x129 + var_x124 * var_chaste_interface__ICaL__c2 + var_x126 * var_chaste_interface__ICaL__c2));
        rJacobian[11][2] = 0.0;
        rJacobian[11][3] = 0.0;
        rJacobian[11][4] = 0.0;
        rJacobian[11][5] = 0.0;
        rJacobian[11][6] = 0.0;
        rJacobian[11][7] = -(mDt * (var_x134));
        rJacobian[11][8] = 0.0;
        rJacobian[11][9] = -(mDt * (var_x138));
        rJacobian[11][10] = 0.0;
        rJacobian[11][11] = 1.0 - (mDt * (-var_x136 - var_x143));
        rJacobian[11][12] = 0.0;
        rJacobian[11][13] = 0.0;
        rJacobian[11][14] = 0.0;
        rJacobian[12][0] = -(mDt * (0.01));
        rJacobian[12][1] = 0.0;
        rJacobian[12][2] = 0.0;
        rJacobian[12][3] = 0.0;
        rJacobian[12][4] = 0.0;
        rJacobian[12][5] = 0.0;
        rJacobian[12][6] = 0.0;
        rJacobian[12][7] = 0.0;
        rJacobian[12][8] = 0.0;
        rJacobian[12][9] = 0.0;
        rJacobian[12][10] = 0.0;
        rJacobian[12][11] = 0.0;
        rJacobian[12][12] = 1.0 - (mDt * (-0.01));
        rJacobian[12][13] = 0.0;
        rJacobian[12][14] = 0.0;
        rJacobian[13][0] = -(mDt * (var_x148 * var_x17 + (var_x144 * var_x7 - var_x145 / var_x0) * var_chaste_interface__Irel__xir));
        rJacobian[13][1] = 0.0;
        rJacobian[13][2] = -(mDt * (var_x14 * var_x149));
        rJacobian[13][3] = -(mDt * (var_x147 * var_x49));
        rJacobian[13][4] = 0.0;
        rJacobian[13][5] = 0.0;
        rJacobian[13][6] = -(mDt * (var_x150));
        rJacobian[13][7] = -(mDt * (var_x150));
        rJacobian[13][8] = -(mDt * (var_x150));
        rJacobian[13][9] = -(mDt * (var_x150));
        rJacobian[13][10] = -(mDt * (var_x150));
        rJacobian[13][11] = -(mDt * (var_x150));
        rJacobian[13][12] = -(mDt * (var_x148 * var_x52));
        rJacobian[13][13] = 1.0 - (mDt * (-0.033333333333333333 - var_x149 + var_x144 * var_x145));
        rJacobian[13][14] = 0.0;
        rJacobian[14][0] = 0.0;
        rJacobian[14][1] = 0.0;
        rJacobian[14][2] = 0.0;
        rJacobian[14][3] = -(mDt * ((3.0000000000000001e-6 * var_x96 - 0.00024299999999999997 * var_x94 - var_x151 * var_x76) * mParameters[3]));
        rJacobian[14][4] = 0.0;
        rJacobian[14][5] = 0.0;
        rJacobian[14][6] = 0.0;
        rJacobian[14][7] = 0.0;
        rJacobian[14][8] = 0.0;
        rJacobian[14][9] = 0.0;
        rJacobian[14][10] = 0.0;
        rJacobian[14][11] = 0.0;
        rJacobian[14][12] = 0.0;
        rJacobian[14][13] = 0.0;
        rJacobian[14][14] = 1.0 - (mDt * ((-0.0089999999999999993 * var_x104 - var_x103 * var_x151 - 0.00056249999999999996 * var_x152 / (12.0 + var_chaste_interface__Na__Na_i) + 3.9062500000000001e-6 * var_x152 * var_chaste_interface__Na__Na_i / pow((1 + 0.083333333333333329 * var_chaste_interface__Na__Na_i), 2) - 0.000125 * var_x29 * pow(var_chaste_interface__INa__xm, 3) * mParameters[11] * var_chaste_interface__INa__xh * var_chaste_interface__INa__xj / var_chaste_interface__Na__Na_i) * mParameters[3]));
    }

    void Cellmahajan_shiferaw_2008FromCellMLBackwardEuler::UpdateTransmembranePotential(double var_chaste_interface__Environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.169816169406
        double var_chaste_interface__Ca__Ca_i_converted = rY[1];
        // Units: millimolar; Initial value: 0.000256752008084
        double var_chaste_interface__INa__xm = rY[2];
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = rY[3];
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = rY[4];
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__ICaL__c1 = rY[5];
        // Units: dimensionless; Initial value: 1.8211252e-05
        double var_chaste_interface__ICaL__c2 = rY[6];
        // Units: dimensionless; Initial value: 0.979322592773
        double var_chaste_interface__ICaL__xi1ca = rY[7];
        // Units: dimensionless; Initial value: 0.001208153482
        double var_chaste_interface__ICaL__xi1ba = rY[8];
        // Units: dimensionless; Initial value: 3.3616596e-05
        double var_chaste_interface__ICaL__xi2ca = rY[9];
        // Units: dimensionless; Initial value: 0.004173008466
        double var_chaste_interface__ICaL__xi2ba = rY[10];
        // Units: dimensionless; Initial value: 0.015242594688
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = rY[14];
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = rY[15];
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = rY[16];
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = rY[17];
        // Units: dimensionless; Initial value: 0.993331326442
        double var_chaste_interface__Na__Na_i = rY[20];
        // Units: mM; Initial value: 11.441712311614
        double var_chaste_interface__Ca__Ca_submem = rY[22];
        // Units: uM; Initial value: 0.226941113355
        
        // Lookup table indexing
        const bool _oob_0 = Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        const double var_Ca__Ca_i = 1000.0 * var_chaste_interface__Ca__Ca_i_converted; // uM
        const double var_Ca__csm = 0.001 * var_chaste_interface__Ca__Ca_submem; // mM
        const double var_Environment__FonRT = mParameters[8] / (mParameters[9] * mParameters[20]); // per_mV
        const double var_ICaL__po = 1.0 - var_chaste_interface__ICaL__c1 - var_chaste_interface__ICaL__c2 - var_chaste_interface__ICaL__xi1ba - var_chaste_interface__ICaL__xi1ca - var_chaste_interface__ICaL__xi2ba - var_chaste_interface__ICaL__xi2ca; // dimensionless
        const double var_ICaL__rxa = ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(mParameters[9] * mParameters[20] / mParameters[8])) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[5] + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(-9.9999999999999995e-8)) * mParameters[8] * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[9] * mParameters[20] / mParameters[8] + var_chaste_interface__cell__V) * (1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[5] + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(9.9999999999999995e-8)) * mParameters[8] * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[5] + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(-9.9999999999999995e-8)) * mParameters[8] * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[8] / (mParameters[9] * mParameters[20])) : (4.0 * pow(mParameters[8], 2) * (-0.34100000000000003 * mParameters[5] + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(2.0 * mParameters[8] * var_chaste_interface__cell__V / (mParameters[9] * mParameters[20]))) * mParameters[10] * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * mParameters[8] * var_chaste_interface__cell__V / (mParameters[9] * mParameters[20]))) * mParameters[9] * mParameters[20]))); // mA_per_cm2
        const double var_ICaL__jca = 182.0 * var_ICaL__po * var_ICaL__rxa; // uM_per_ms
        const double var_INaCa__jNaCa = (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[5] * exp(0.34999999999999998 * var_Environment__FonRT * var_chaste_interface__cell__V) - pow(mParameters[7], 3) * var_Ca__csm * exp(-0.65000000000000002 * var_Environment__FonRT * var_chaste_interface__cell__V)) * mParameters[19] / ((1.0 + 0.20000000000000001 * exp(-0.65000000000000002 * var_Environment__FonRT * var_chaste_interface__cell__V)) * (1.0 + 0.026999999999999996 / pow(var_chaste_interface__Ca__Ca_submem, 3)) * (669921.875 * var_Ca__csm + 1.3 * pow(var_chaste_interface__Na__Na_i, 3) + pow(mParameters[7], 3) * var_Ca__csm + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[5] + 0.0035999999999999999 * pow(mParameters[7], 3) * (1.0 + 0.00053738391835633597 * pow(var_chaste_interface__Na__Na_i, 3)) + 1860.8670000000004 * (1.0 + 277.77777777777777 * var_Ca__csm) * mParameters[5])); // uM_per_ms
        const double var_INaK__xiNaK = 1.5 * mParameters[6] * var_chaste_interface__Na__Na_i / ((1.5 + mParameters[6]) * (12.0 + var_chaste_interface__Na__Na_i) * (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[7])) * exp(-var_Environment__FonRT * var_chaste_interface__cell__V))); // nA_per_nF
        const double var_Ito__rt2 = 3.3500000000000001 + 0.10000000000000001 * var_chaste_interface__cell__V; // dimensionless
        const double var_INaCa__xiNaCa = 8.0 * var_INaCa__jNaCa; // nA_per_nF
        const double var_reversal_potentials__ek = log(mParameters[6] / mParameters[4]) / var_Environment__FonRT; // mV
        const double var_INa__xina = pow(var_chaste_interface__INa__xm, 3) * (-log(mParameters[7] / var_chaste_interface__Na__Na_i) / var_Environment__FonRT + var_chaste_interface__cell__V) * mParameters[11] * var_chaste_interface__INa__xh * var_chaste_interface__INa__xj; // nA_per_nF
        const double d_dt_chaste_interface_var_cell__V = -var_INa__xina - var_INaCa__xiNaCa - var_INaK__xiNaK - 16.0 * var_ICaL__jca - 1.0000000000000002 * GetIntracellularAreaStimulus(var_chaste_interface__Environment__time) / HeartConfig::Instance()->GetCapacitance() - (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * (0.5 / (1.0 + exp(var_Ito__rt2)) + var_chaste_interface__Ito__ytos) * mParameters[18] * var_chaste_interface__Ito__xtos - (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * mParameters[14] * var_chaste_interface__Ito__xtof * var_chaste_interface__Ito__ytof - (1.0 + 0.80000000000000004 / (1.0 + 0.125 / pow(var_Ca__Ca_i, 3))) * (-log((0.018329999999999999 * mParameters[7] + mParameters[6]) / (0.018329999999999999 * var_chaste_interface__Na__Na_i + mParameters[4])) / var_Environment__FonRT + var_chaste_interface__cell__V) * mParameters[17] * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2 - 0.43033148291193518 * sqrt(mParameters[6]) * (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * mParameters[16] * var_chaste_interface__IKr__xr / (_lt_0_row[1]) - 0.4389381125701739 * sqrt(mParameters[6]) * (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * mParameters[15] / ((1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__ek)) * (1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__ek)) + (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__ek) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__ek)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__ek - 0.51429999999999998 * var_chaste_interface__cell__V)))); // mV / ms
        
        rY[0] += mDt*d_dt_chaste_interface_var_cell__V;
    }
    
    void Cellmahajan_shiferaw_2008FromCellMLBackwardEuler::ComputeOneStepExceptVoltage(double var_chaste_interface__Environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.169816169406
        double var_chaste_interface__INa__xm = rY[2];
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = rY[3];
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = rY[4];
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = rY[14];
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = rY[15];
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = rY[16];
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = rY[17];
        // Units: dimensionless; Initial value: 0.993331326442
        
        // Lookup table indexing
        const bool _oob_0 = Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        const double var_IKr__xkrinf = _lt_0_row[7];
        const double var_IKr__xkrv1 = ((fabs(7.0 + var_chaste_interface__cell__V) < 8.1300813008222672e-7) ? (1.1219512195134727e-9 / (1.0 - exp(-1.0000000000011388e-7)) - 614999.99999929965 * (6.9999991869918698 + var_chaste_interface__cell__V) * (-1.1219512195134727e-9 / (1.0 - exp(1.0000000000011388e-7)) - 1.1219512195134727e-9 / (1.0 - exp(-1.0000000000011388e-7)))) : (0.0013799999999999999 * (7.0 + var_chaste_interface__cell__V) / (1.0 - exp(-0.86099999999999999 - 0.123 * var_chaste_interface__cell__V))));
        const double var_IKr__xkrv2 = ((fabs(10.0 + var_chaste_interface__cell__V) < 6.8965517241448282e-7) ? (-4.2068965517283451e-10 / (-1.0 + exp(-1.000000000001e-7)) + 724999.99999927497 * (10.000000689655172 + var_chaste_interface__cell__V) * (4.2068965517283451e-10 / (-1.0 + exp(1.000000000001e-7)) + 4.2068965517283451e-10 / (-1.0 + exp(-1.000000000001e-7)))) : (0.00060999999999999997 * (10.0 + var_chaste_interface__cell__V) / (-1.0 + exp(1.45 + 0.14499999999999999 * var_chaste_interface__cell__V))));
        const double var_IKr__taukr = 1 / (var_IKr__xkrv1 + var_IKr__xkrv2);
        const double var_IKs__tauxs1 = ((fabs(30.0 + var_chaste_interface__cell__V) < 1.455604075689676e-6) ? (1 / (-1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) - 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8)) + 343500.00000040967 * (30.000001455604075 + var_chaste_interface__cell__V) * (1.0465793304208771e-10 / (1.0 - exp(2.1542940320207204e-7)) + 1.0465793304208771e-10 / (1.0 - exp(-2.1542940320207204e-7)) + 1.9068413391534758e-10 / (-1.0 + exp(9.9999999999880736e-8)) + 1.9068413391534758e-10 / (-1.0 + exp(-9.9999999999880736e-8))))) : (1 / (0.00013100000000000001 * (30.0 + var_chaste_interface__cell__V) / (-1.0 + exp(2.0609999999999999 + 0.068699999999999997 * var_chaste_interface__cell__V)) + 7.1899999999999999e-5 * (30.0 + var_chaste_interface__cell__V) / (1.0 - exp(-4.4399999999999995 - 0.14799999999999999 * var_chaste_interface__cell__V)))));
        const double var_IKs__tauxs2 = 4.0 * var_IKs__tauxs1;
        const double var_IKs__xs1ss = _lt_0_row[10];
        const double var_IKs__xs2ss = var_IKs__xs1ss;
        const double var_INa__ah = ((var_chaste_interface__cell__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[13] - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0));
        const double var_INa__aj = ((var_chaste_interface__cell__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * mParameters[13]) - 3.4740000000000003e-5 * exp(0.043909999999999998 * mParameters[13] - 0.043909999999999998 * var_chaste_interface__cell__V)) / (_lt_0_row[11])) : (0));
        const double var_INa__am = _lt_0_row[14];
        const double var_INa__bh = ((var_chaste_interface__cell__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V - 0.34999999999999998 * mParameters[13]) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * mParameters[13])) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[13] - 0.0900900900900901 * var_chaste_interface__cell__V))));
        const double var_INa__bj = ((var_chaste_interface__cell__V < -40.0) ? (0.1212 * exp(0.01052 * mParameters[13] - 0.01052 * var_chaste_interface__cell__V) / (_lt_0_row[12])) : (0.29999999999999999 * exp(2.5349999999999999e-7 * mParameters[13] - 2.5349999999999999e-7 * var_chaste_interface__cell__V) / (_lt_0_row[13])));
        const double var_INa__bm = 0.080000000000000002 * _lt_0_row[15];
        const double var_INa__h_inf = 0.01 * mParameters[12] + (1.0 - 0.01 * mParameters[12]) * var_INa__ah / (var_INa__ah + var_INa__bh);
        const double var_INa__j_inf = 0.01 * mParameters[12] + (1.0 - 0.01 * mParameters[12]) * var_INa__aj / (var_INa__aj + var_INa__bj);
        const double var_INa__tau_h = 1 / (var_INa__ah + var_INa__bh);
        const double var_INa__tau_j = 1 / (var_INa__aj + var_INa__bj);
        const double var_Ito__rt1 = -0.20000000000000001 - 0.066666666666666666 * var_chaste_interface__cell__V;
        const double var_Ito__rt2 = 3.3500000000000001 + 0.10000000000000001 * var_chaste_interface__cell__V;
        const double var_Ito__rt3 = 6.0 + 0.10000000000000001 * var_chaste_interface__cell__V;
        const double var_Ito__rt4 = -0.0011111111111111111 * pow(var_chaste_interface__cell__V, 2);
        const double var_Ito__rt5 = 3.3500000000000001 + 0.10000000000000001 * var_chaste_interface__cell__V;
        const double var_Ito__txf = 1.5 + 3.5 * exp(var_Ito__rt4);
        const double var_Ito__txs = 0.5 + 9.0 / (1.0 + exp(-var_Ito__rt1));
        const double var_Ito__tyf = 20.0 + 20.0 / (1.0 + exp(var_Ito__rt5));
        const double var_Ito__tys = 30.0 + 3000.0 / (1.0 + exp(var_Ito__rt3));
        const double var_Ito__xtos_inf = 1 / (1.0 + exp(var_Ito__rt1));
        const double var_Ito__xtof_inf = var_Ito__xtos_inf;
        const double var_Ito__ytos_inf = 1 / (1.0 + exp(var_Ito__rt2));
        const double var_Ito__ytof_inf = var_Ito__ytos_inf;
        
        
        rY[11] = (var_chaste_interface__IKr__xr + ((var_IKr__xkrinf / var_IKr__taukr) * mDt)) / (1.0 - ((-1 / var_IKr__taukr) * mDt));
        rY[12] = (var_chaste_interface__IKs__xs1 + ((var_IKs__xs1ss / var_IKs__tauxs1) * mDt)) / (1.0 - ((-1 / var_IKs__tauxs1) * mDt));
        rY[13] = (var_chaste_interface__IKs__xs2 + ((var_IKs__xs2ss / var_IKs__tauxs2) * mDt)) / (1.0 - ((-1 / var_IKs__tauxs2) * mDt));
        rY[16] = (var_chaste_interface__Ito__xtof + ((var_Ito__xtof_inf / var_Ito__txf) * mDt)) / (1.0 - ((-1 / var_Ito__txf) * mDt));
        rY[14] = (var_chaste_interface__Ito__xtos + ((var_Ito__xtos_inf / var_Ito__txs) * mDt)) / (1.0 - ((-1 / var_Ito__txs) * mDt));
        rY[17] = (var_chaste_interface__Ito__ytof + ((var_Ito__ytof_inf / var_Ito__tyf) * mDt)) / (1.0 - ((-1 / var_Ito__tyf) * mDt));
        rY[15] = (var_chaste_interface__Ito__ytos + ((var_Ito__ytos_inf / var_Ito__tys) * mDt)) / (1.0 - ((-1 / var_Ito__tys) * mDt));
        rY[3] = (var_chaste_interface__INa__xh + ((var_INa__h_inf / var_INa__tau_h) * mDt)) / (1.0 - ((-1 / var_INa__tau_h) * mDt));
        rY[4] = (var_chaste_interface__INa__xj + ((var_INa__j_inf / var_INa__tau_j) * mDt)) / (1.0 - ((-1 / var_INa__tau_j) * mDt));
        rY[2] = (var_chaste_interface__INa__xm + ((var_INa__am) * mDt)) / (1.0 - ((-var_INa__am - var_INa__bm) * mDt));
        
        double _guess[15] = {rY[23],rY[21],rY[1],rY[22],rY[24],rY[25],rY[5],rY[6],rY[8],rY[7],rY[10],rY[9],rY[18],rY[19],rY[20]};
        CardiacNewtonSolver<15,Cellmahajan_shiferaw_2008FromCellMLBackwardEuler>* _p_solver = CardiacNewtonSolver<15,Cellmahajan_shiferaw_2008FromCellMLBackwardEuler>::Instance();
        _p_solver->Solve(*this, var_chaste_interface__Environment__time, _guess);
        rY[23] = _guess[0];
        rY[21] = _guess[1];
        rY[1] = _guess[2];
        rY[22] = _guess[3];
        rY[24] = _guess[4];
        rY[25] = _guess[5];
        rY[5] = _guess[6];
        rY[6] = _guess[7];
        rY[8] = _guess[8];
        rY[7] = _guess[9];
        rY[10] = _guess[10];
        rY[9] = _guess[11];
        rY[18] = _guess[12];
        rY[19] = _guess[13];
        rY[20] = _guess[14];
    }

    std::vector<double> Cellmahajan_shiferaw_2008FromCellMLBackwardEuler::ComputeDerivedQuantities(double var_chaste_interface__Environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.169816169406
        double var_chaste_interface__Ca__Ca_i_converted = rY[1];
        // Units: millimolar; Initial value: 0.000256752008084
        double var_chaste_interface__INa__xm = rY[2];
        // Units: dimensionless; Initial value: 0.001075453357
        double var_chaste_interface__INa__xh = rY[3];
        // Units: dimensionless; Initial value: 0.990691306716
        double var_chaste_interface__INa__xj = rY[4];
        // Units: dimensionless; Initial value: 0.993888937283
        double var_chaste_interface__ICaL__c1 = rY[5];
        // Units: dimensionless; Initial value: 1.8211252e-05
        double var_chaste_interface__ICaL__c2 = rY[6];
        // Units: dimensionless; Initial value: 0.979322592773
        double var_chaste_interface__ICaL__xi1ca = rY[7];
        // Units: dimensionless; Initial value: 0.001208153482
        double var_chaste_interface__ICaL__xi1ba = rY[8];
        // Units: dimensionless; Initial value: 3.3616596e-05
        double var_chaste_interface__ICaL__xi2ca = rY[9];
        // Units: dimensionless; Initial value: 0.004173008466
        double var_chaste_interface__ICaL__xi2ba = rY[10];
        // Units: dimensionless; Initial value: 0.015242594688
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.007074239331
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.048267587131
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.105468807033
        double var_chaste_interface__Ito__xtos = rY[14];
        // Units: dimensionless; Initial value: 0.00364776906
        double var_chaste_interface__Ito__ytos = rY[15];
        // Units: dimensionless; Initial value: 0.174403618112
        double var_chaste_interface__Ito__xtof = rY[16];
        // Units: dimensionless; Initial value: 0.003643592594
        double var_chaste_interface__Ito__ytof = rY[17];
        // Units: dimensionless; Initial value: 0.993331326442
        double var_chaste_interface__Irel__Ca_JSR = rY[18];
        // Units: uM; Initial value: 97.505463697266
        double var_chaste_interface__Na__Na_i = rY[20];
        // Units: mM; Initial value: 11.441712311614
        double var_chaste_interface__Ca__Ca_submem = rY[22];
        // Units: uM; Initial value: 0.226941113355
        double var_chaste_interface__Ca__Ca_NSR = rY[23];
        // Units: uM; Initial value: 104.450004990523
        
        // Lookup table indexing
        const bool _oob_0 = Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellmahajan_shiferaw_2008FromCellMLBackwardEuler_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_Ca__Ca_i = 1000.0 * var_chaste_interface__Ca__Ca_i_converted; // uM
        const double var_Ca__bcal = 24.0; // uM
        const double var_Ca__bmem = 15.0; // uM
        const double var_Ca__bsar = 42.0; // uM
        const double var_Ca__csm = 0.001 * var_chaste_interface__Ca__Ca_submem; // mM
        const double var_Ca__kmem = 0.29999999999999999; // uM
        const double var_Ca__ksar = 13.0; // uM
        const double var_Ca__mempxi = var_Ca__bmem * var_Ca__kmem / pow((var_Ca__Ca_i + var_Ca__kmem), 2); // dimensionless
        const double var_Ca__mempxs = var_Ca__bmem * var_Ca__kmem / pow((var_chaste_interface__Ca__Ca_submem + var_Ca__kmem), 2); // dimensionless
        const double var_Ca__sarpxi = var_Ca__bsar * var_Ca__ksar / pow((var_Ca__Ca_i + var_Ca__ksar), 2); // dimensionless
        const double var_Ca__sarpxs = var_Ca__bsar * var_Ca__ksar / pow((var_chaste_interface__Ca__Ca_submem + var_Ca__ksar), 2); // dimensionless
        const double var_Ca__srkd = 0.59999999999999998; // uM
        const double var_Ca__srmax = 47.0; // uM
        const double var_Ca__spxi = var_Ca__srkd * var_Ca__srmax / pow((var_Ca__Ca_i + var_Ca__srkd), 2); // dimensionless
        const double var_Ca__spxs = var_Ca__srkd * var_Ca__srmax / pow((var_chaste_interface__Ca__Ca_submem + var_Ca__srkd), 2); // dimensionless
        const double var_Ca__xkcal = 7.0; // uM
        const double var_Ca__bpxi = var_Ca__bcal * var_Ca__xkcal / pow((var_Ca__Ca_i + var_Ca__xkcal), 2); // dimensionless
        const double var_Ca__bpxs = var_Ca__bcal * var_Ca__xkcal / pow((var_chaste_interface__Ca__Ca_submem + var_Ca__xkcal), 2); // dimensionless
        const double var_Ca__dciib = 1 / (1.0 + var_Ca__bpxi + var_Ca__mempxi + var_Ca__sarpxi + var_Ca__spxi); // dimensionless
        const double var_Ca__dcsib = 1 / (1.0 + var_Ca__bpxs + var_Ca__mempxs + var_Ca__sarpxs + var_Ca__spxs); // dimensionless
        const double var_Environment__FonRT = mParameters[8] / (mParameters[9] * mParameters[20]); // per_mV
        const double var_ICaL__gca = 182.0; // mmole_per_coulomb_cm
        const double var_ICaL__po = 1.0 - var_chaste_interface__ICaL__c1 - var_chaste_interface__ICaL__c2 - var_chaste_interface__ICaL__xi1ba - var_chaste_interface__ICaL__xi1ca - var_chaste_interface__ICaL__xi2ba - var_chaste_interface__ICaL__xi2ca; // dimensionless
        const double var_IK1__gkix_total = 0.43033148291193518 * sqrt(mParameters[6]) * mParameters[15]; // uS_per_nF
        const double var_IKr__gkr_total = 0.43033148291193518 * sqrt(mParameters[6]) * mParameters[16]; // uS_per_nF
        const double var_IKs__gksx = 1.0 + 0.80000000000000004 / (1.0 + 0.125 / pow(var_Ca__Ca_i, 3)); // dimensionless
        const double var_IKs__gks_total = mParameters[17] * var_IKs__gksx; // uS_per_nF
        const double var_INaCa__xkdna = 0.29999999999999999; // uM
        const double var_INaCa__aloss = 1 / (1.0 + pow(var_INaCa__xkdna, 3) / pow(var_chaste_interface__Ca__Ca_submem, 3)); // dimensionless
        const double var_INaCa__xmcai = 0.0035999999999999999; // mM
        const double var_INaCa__xmcao = 1.3; // mM
        const double var_INaCa__xmnai = 12.300000000000001; // mM
        const double var_INaCa__xmnao = 87.5; // mM
        const double var_INaCa__yz2 = pow(var_INaCa__xmnai, 3) * (1.0 + var_Ca__csm / var_INaCa__xmcai) * mParameters[5]; // mM4
        const double var_Ileak_Iup_Ixfer__cup = 0.5; // uM
        const double var_Ileak_Iup_Ixfer__kj = 50.0; // uM
        const double var_Ileak_Iup_Ixfer__jleak = pow(var_chaste_interface__Ca__Ca_NSR, 2) * (-var_Ca__Ca_i + 16.667000000000002 * var_chaste_interface__Ca__Ca_NSR) * mParameters[0] / (pow(var_chaste_interface__Ca__Ca_NSR, 2) + pow(var_Ileak_Iup_Ixfer__kj, 2)); // uM_per_ms
        const double var_Ileak_Iup_Ixfer__jup = pow(var_Ca__Ca_i, 2) * mParameters[2] / (pow(var_Ca__Ca_i, 2) + pow(var_Ileak_Iup_Ixfer__cup, 2)); // uM_per_ms
        const double var_Irel__av = 11.300000000000001; // per_ms
        const double var_Irel__ax = 0.35759999999999997; // per_mV
        const double var_Irel__cstar = 90.0; // uM
        const double var_Irel__bv = -50.0 + (1.0 - var_Irel__av) * var_Irel__cstar; // uM_per_ms
        const double var_Irel__Qr0 = (((var_chaste_interface__Irel__Ca_JSR > 50.0) && (var_chaste_interface__Irel__Ca_JSR < var_Irel__cstar)) ? (-50.0 + var_chaste_interface__Irel__Ca_JSR) : ((var_chaste_interface__Irel__Ca_JSR >= var_Irel__cstar) ? (var_chaste_interface__Irel__Ca_JSR * var_Irel__av + var_Irel__bv) : (0))); // uM_per_ms
        const double var_Irel__Qr = var_chaste_interface__Ca__Ca_NSR * var_Irel__Qr0 / var_Irel__cstar; // uM_per_ms
        const double var_Irel__gbarsr = 26841.799999999999; // dimensionless
        const double var_Irel__gdyad = 9000.0; // mmole_per_coulomb_cm
        const double var_INaCa__yz1 = pow(var_INaCa__xmnao, 3) * var_Ca__csm + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__xmcao; // mM4
        const double var_INaCa__yz3 = pow(mParameters[7], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__xmnai, 3)) * var_INaCa__xmcai; // mM4
        const double var_INaCa__yz4 = pow(mParameters[7], 3) * var_Ca__csm + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[5]; // mM4
        const double var_INaCa__zw8 = var_INaCa__yz1 + var_INaCa__yz2 + var_INaCa__yz3 + var_INaCa__yz4; // mM4
        const double var_ICaL__rxa = ((fabs(var_chaste_interface__cell__V) < 4.9999999999999998e-8 * fabs(mParameters[9] * mParameters[20] / mParameters[8])) ? (-1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[5] + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(-9.9999999999999995e-8)) * mParameters[8] * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[9] * mParameters[20] / mParameters[8] + var_chaste_interface__cell__V) * (1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[5] + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(9.9999999999999995e-8)) * mParameters[8] * mParameters[10] / (-1.0 + exp(9.9999999999999995e-8)) + 1.9999999999999999e-7 * (-0.34100000000000003 * mParameters[5] + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(-9.9999999999999995e-8)) * mParameters[8] * mParameters[10] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[8] / (mParameters[9] * mParameters[20])) : (4.0 * pow(mParameters[8], 2) * (-0.34100000000000003 * mParameters[5] + 0.001 * var_chaste_interface__Ca__Ca_submem * exp(2.0 * mParameters[8] * var_chaste_interface__cell__V / (mParameters[9] * mParameters[20]))) * mParameters[10] * var_chaste_interface__cell__V / ((-1.0 + exp(2.0 * mParameters[8] * var_chaste_interface__cell__V / (mParameters[9] * mParameters[20]))) * mParameters[9] * mParameters[20]))); // mA_per_cm2
        const double var_ICaL__jca = var_ICaL__gca * var_ICaL__po * var_ICaL__rxa; // uM_per_ms
        const double var_IKr__rg = 1 / (_lt_0_row[1]); // dimensionless
        const double var_INa__ah = ((var_chaste_interface__cell__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[13] - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_ms
        const double var_INa__aj = ((var_chaste_interface__cell__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * mParameters[13]) - 3.4740000000000003e-5 * exp(0.043909999999999998 * mParameters[13] - 0.043909999999999998 * var_chaste_interface__cell__V)) / (_lt_0_row[11])) : (0)); // per_ms
        const double var_INa__bh = ((var_chaste_interface__cell__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V - 0.34999999999999998 * mParameters[13]) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * mParameters[13])) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[13] - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INa__bj = ((var_chaste_interface__cell__V < -40.0) ? (0.1212 * exp(0.01052 * mParameters[13] - 0.01052 * var_chaste_interface__cell__V) / (_lt_0_row[12])) : (0.29999999999999999 * exp(2.5349999999999999e-7 * mParameters[13] - 2.5349999999999999e-7 * var_chaste_interface__cell__V) / (_lt_0_row[13]))); // per_ms
        const double var_INa__tau_h = 1 / (var_INa__ah + var_INa__bh); // ms
        const double var_INa__tau_j = 1 / (var_INa__aj + var_INa__bj); // ms
        const double var_INaCa__zw3 = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[5] * exp(0.34999999999999998 * var_Environment__FonRT * var_chaste_interface__cell__V) - pow(mParameters[7], 3) * var_Ca__csm * exp(-0.65000000000000002 * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__zw4 = 1.0 + 0.20000000000000001 * exp(-0.65000000000000002 * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__jNaCa = var_INaCa__aloss * mParameters[19] * var_INaCa__zw3 / (var_INaCa__zw4 * var_INaCa__zw8); // uM_per_ms
        const double var_Irel__xicap = var_ICaL__po * var_Irel__gdyad * fabs(var_ICaL__rxa); // uM_per_ms
        const double var_Irel__xirp = var_ICaL__po * var_Irel__Qr * var_Irel__gbarsr * fabs(var_ICaL__rxa) * exp(-(30.0 + var_chaste_interface__cell__V) * var_Irel__ax) / (1.0 + exp(-(30.0 + var_chaste_interface__cell__V) * var_Irel__ax)); // uM_per_ms
        const double var_Irel__xiryr = (var_Irel__xicap + var_Irel__xirp) * mParameters[1]; // uM_per_ms
        const double var_Ito__rt2 = 3.3500000000000001 + 0.10000000000000001 * var_chaste_interface__cell__V; // dimensionless
        const double var_Ito__rs_inf = 1 / (1.0 + exp(var_Ito__rt2)); // dimensionless
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_cell__wca = 8.0; // mV_per_uM
        const double var_ICaL__xica = 2.0 * var_ICaL__jca * var_cell__wca; // nA_per_nF
        const double var_ICaL__xica_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_ICaL__xica; // uA_per_cm2
        const double var_INaCa__xiNaCa = var_INaCa__jNaCa * var_cell__wca; // nA_per_nF
        const double var_INaCa__xiNaCa_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_INaCa__xiNaCa; // uA_per_cm2
        const double var_reversal_potentials__ek = log(mParameters[6] / mParameters[4]) / var_Environment__FonRT; // mV
        const double var_IK1__aki = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__ek)); // per_ms
        const double var_IK1__bki = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__ek) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__ek)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__ek - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__xkin = var_IK1__aki / (var_IK1__aki + var_IK1__bki); // dimensionless
        const double var_IK1__xik1 = (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * var_IK1__gkix_total * var_IK1__xkin; // nA_per_nF
        const double var_IK1__xik1_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_IK1__xik1; // uA_per_cm2
        const double var_IKr__xikr = (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * var_IKr__gkr_total * var_IKr__rg * var_chaste_interface__IKr__xr; // nA_per_nF
        const double var_IKr__xikr_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_IKr__xikr; // uA_per_cm2
        const double var_Ito__xitof = (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * mParameters[14] * var_chaste_interface__Ito__xtof * var_chaste_interface__Ito__ytof; // nA_per_nF
        const double var_Ito__xitos = (-var_reversal_potentials__ek + var_chaste_interface__cell__V) * (0.5 * var_Ito__rs_inf + var_chaste_interface__Ito__ytos) * mParameters[18] * var_chaste_interface__Ito__xtos; // nA_per_nF
        const double var_Ito__xito = var_Ito__xitof + var_Ito__xitos; // nA_per_nF
        const double var_Ito__xito_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_Ito__xito; // uA_per_cm2
        const double var_reversal_potentials__ena = log(mParameters[7] / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__xina = pow(var_chaste_interface__INa__xm, 3) * (-var_reversal_potentials__ena + var_chaste_interface__cell__V) * mParameters[11] * var_chaste_interface__INa__xh * var_chaste_interface__INa__xj; // nA_per_nF
        const double var_INa__xina_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_INa__xina; // uA_per_cm2
        const double var_reversal_potentials__prNaK = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__eks = log((mParameters[7] * var_reversal_potentials__prNaK + mParameters[6]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prNaK + mParameters[4])) / var_Environment__FonRT; // mV
        const double var_IKs__xiks = (-var_reversal_potentials__eks + var_chaste_interface__cell__V) * var_IKs__gks_total * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // nA_per_nF
        const double var_IKs__xiks_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_IKs__xiks; // uA_per_cm2

        std::vector<double> dqs(22);
        dqs[0] = var_Ileak_Iup_Ixfer__jleak;
        dqs[1] = var_Irel__xiryr;
        dqs[2] = var_Ileak_Iup_Ixfer__jup;
        dqs[3] = var_chaste_interface__Ca__Ca_i_converted;
        dqs[4] = var_Ca__dciib;
        dqs[5] = var_ICaL__xica_converted;
        dqs[6] = var_INa__xina_converted;
        dqs[7] = var_INa__tau_h;
        dqs[8] = var_INa__tau_j;
        dqs[9] = var_IK1__xik1_converted;
        dqs[10] = var_IK1__gkix_total;
        dqs[11] = var_IKr__xikr_converted;
        dqs[12] = var_IKr__gkr_total;
        dqs[13] = var_IKs__xiks_converted;
        dqs[14] = var_IKs__gks_total;
        dqs[15] = var_INaCa__xiNaCa_converted;
        dqs[16] = var_cell__i_Stim_converted;
        dqs[17] = var_Ito__xito_converted;
        dqs[18] = var_reversal_potentials__ek;
        dqs[19] = var_reversal_potentials__ena;
        dqs[20] = var_Ca__dcsib;
        dqs[21] = var_chaste_interface__Environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellmahajan_shiferaw_2008FromCellMLBackwardEuler>::Initialise(void)
{
    this->mSystemName = "MahajanShiferaw2008_units";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "ms";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-87.169816169406);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.000256752008084);

    // rY[2]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001075453357);

    // rY[3]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.990691306716);

    // rY[4]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993888937283);

    // rY[5]:
    this->mVariableNames.push_back("ICaL__c1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.8211252e-05);

    // rY[6]:
    this->mVariableNames.push_back("ICaL__c2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.979322592773);

    // rY[7]:
    this->mVariableNames.push_back("ICaL__xi1ca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001208153482);

    // rY[8]:
    this->mVariableNames.push_back("ICaL__xi1ba");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(3.3616596e-05);

    // rY[9]:
    this->mVariableNames.push_back("ICaL__xi2ca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.004173008466);

    // rY[10]:
    this->mVariableNames.push_back("ICaL__xi2ba");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.015242594688);

    // rY[11]:
    this->mVariableNames.push_back("IKr__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.007074239331);

    // rY[12]:
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.048267587131);

    // rY[13]:
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.105468807033);

    // rY[14]:
    this->mVariableNames.push_back("Ito__xtos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00364776906);

    // rY[15]:
    this->mVariableNames.push_back("Ito__ytos");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.174403618112);

    // rY[16]:
    this->mVariableNames.push_back("Ito__xtof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.003643592594);

    // rY[17]:
    this->mVariableNames.push_back("Ito__ytof");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.993331326442);

    // rY[18]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(97.505463697266);

    // rY[19]:
    this->mVariableNames.push_back("Irel__xir");
    this->mVariableUnits.push_back("uM_per_ms");
    this->mInitialConditions.push_back(0.006679257264);

    // rY[20]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(11.441712311614);

    // rY[21]:
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(1.716573130685);

    // rY[22]:
    this->mVariableNames.push_back("submembrane_space_calcium_concentration");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(0.226941113355);

    // rY[23]:
    this->mVariableNames.push_back("NSR_calcium_concentration");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(104.450004990523);

    // rY[24]:
    this->mVariableNames.push_back("Ca__tropi");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(22.171689894953);

    // rY[25]:
    this->mVariableNames.push_back("Ca__trops");
    this->mVariableUnits.push_back("uM");
    this->mInitialConditions.push_back(19.864701949854);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("per_ms");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("uM_per_ms");

    // mParameters[3]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[4]:
    this->mParameterNames.push_back("cytosolic_potassium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[7]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[8]:
    this->mParameterNames.push_back("faraday_constant");
    this->mParameterUnits.push_back("coulomb_per_mmole");

    // mParameters[9]:
    this->mParameterNames.push_back("gas_constant");
    this->mParameterUnits.push_back("J_per_moleK");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("cm_per_s");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("uS_per_nF");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("mV");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_fast_transient_outward_current_conductance");
    this->mParameterUnits.push_back("uS_per_nF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("uS_per_nF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("uS_per_nF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("uS_per_nF");

    // mParameters[18]:
    this->mParameterNames.push_back("membrane_slow_transient_outward_current_conductance");
    this->mParameterUnits.push_back("uS_per_nF");

    // mParameters[19]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("uM_per_ms");

    // mParameters[20]:
    this->mParameterNames.push_back("temperature");
    this->mParameterUnits.push_back("kelvin");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_leak_current");
    this->mDerivedQuantityUnits.push_back("uM_per_ms");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("uM_per_ms");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("SR_uptake_current");
    this->mDerivedQuantityUnits.push_back("uM_per_ms");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_concentration");
    this->mDerivedQuantityUnits.push_back("millimolar");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_flux_scaling_from_intrinsic_buffers");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("ms");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("uS_per_nF");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("uS_per_nF");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("uS_per_nF");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [17]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [18]:
    this->mDerivedQuantityNames.push_back("potassium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("mV");

    // Derived Quantity index [19]:
    this->mDerivedQuantityNames.push_back("sodium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("mV");

    // Derived Quantity index [20]:
    this->mDerivedQuantityNames.push_back("submembrane_space_calcium_flux_scaling_from_intrinsic_buffers");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [21]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("ms");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellmahajan_shiferaw_2008FromCellMLBackwardEuler)

