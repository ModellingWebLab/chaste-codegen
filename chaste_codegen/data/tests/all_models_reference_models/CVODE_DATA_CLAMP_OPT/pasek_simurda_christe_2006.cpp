#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: pasek_simurda_christe_2006
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: CvodeCellWithDataClampOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "pasek_simurda_christe_2006.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<24; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__Vms__Vms)
    {
        const double _offset_0 = var_chaste_interface__Vms__Vms - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__Vms__Vms)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__Vms__Vms>mTableMaxs[0] || var_chaste_interface__Vms__Vms<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables(const Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables&);
    Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables& operator= (const Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables&);
    Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 24;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][24];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return exp(0.078728915539782576 * var_chaste_interface__Vms__Vms);
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] < 2){
                    double left = f(var_chaste_interface__Vms__Vms - mTableSteps[0]);
                    double right = f(var_chaste_interface__Vms__Vms + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[0] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] >= 2){
                    EXCEPTION("Lookup table 0 at ["<<i<<"][0] has non-finite value: " << val);
                }
                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return -1.0 + exp(0.078728915539782576 * var_chaste_interface__Vms__Vms);
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] < 2){
                    double left = f(var_chaste_interface__Vms__Vms - mTableSteps[0]);
                    double right = f(var_chaste_interface__Vms__Vms + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[1] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] >= 2){
                    EXCEPTION("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val);
                }
                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return exp(0.018700000000000001 * var_chaste_interface__Vms__Vms);
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return exp(-0.018700000000000001 * var_chaste_interface__Vms__Vms);
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 1.0 + 0.1245 * exp(-0.0039364457769891295 * var_chaste_interface__Vms__Vms) + 0.0052142857142857138 * (-1.0 + exp(2.0802377414561666)) * exp(-0.039364457769891288 * var_chaste_interface__Vms__Vms);
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 1 / (1.0 + exp(4.9444444444444438 + 0.18518518518518517 * var_chaste_interface__Vms__Vms));
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 0.014999999999999999 / (1.0 + exp(3.0 + 0.040000000000000001 * var_chaste_interface__Vms__Vms)) + 0.040000000000000001 / (1.0 + exp(1.0 - 0.040000000000000001 * var_chaste_interface__Vms__Vms)) + 0.105 * exp(-14.0625 * pow((1 + 0.022222222222222223 * var_chaste_interface__Vms__Vms), 2));
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 0.014999999999999999 / (1.0 + exp(3.0 + 0.040000000000000001 * var_chaste_interface__Vms__Vms)) + 0.080000000000000002 / (1.0 + exp(-11.0 - 0.20000000000000001 * var_chaste_interface__Vms__Vms)) + 0.041000000000000002 * exp(-15.340277777777779 * pow((1 + 0.021276595744680851 * var_chaste_interface__Vms__Vms), 2));
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 1 / (1.0 + exp(-3.0600000000000001 - 0.20000000000000001 * var_chaste_interface__Vms__Vms));
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 0.00025000000000000001 + 0.0010499999999999999 * exp(-0.64800000000000002 * pow((-1 + 0.055555555555555552 * var_chaste_interface__Vms__Vms), 2)) + 0.0030500000000000002 * exp(-0.22049999999999997 * pow((1 + 0.14285714285714285 * var_chaste_interface__Vms__Vms), 2));
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 1 / (1.0 + exp(13.225190839694655 + 0.095419847328244267 * var_chaste_interface__Vms__Vms));
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 0.56230000000000002 * exp(-5.6377730796335452 - 0.070472163495419307 * var_chaste_interface__Vms__Vms) + 0.11885 * exp(2.8198801550934083 + 0.035248501938667604 * var_chaste_interface__Vms__Vms);
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 1 / (1.0 + exp(-0.97292724196277491 - 0.084602368866328256 * var_chaste_interface__Vms__Vms));
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 9.8900000000000006 * exp(-3.8000000000000003 - 0.10000000000000001 * var_chaste_interface__Vms__Vms) + 4.516 * exp(1.7885000000000002 + 0.035770000000000003 * var_chaste_interface__Vms__Vms);
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 0.00047619047619047619 / (1.0 + exp(8.4951456310679614 + 0.097087378640776698 * var_chaste_interface__Vms__Vms));
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 1 / (1.0 + exp(-0.92819614711033271 - 0.087565674255691769 * var_chaste_interface__Vms__Vms));
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 45.159999999999997 * exp(1.7885000000000002 + 0.035770000000000003 * var_chaste_interface__Vms__Vms) + 98.900000000000006 * exp(-3.8000000000000003 - 0.10000000000000001 * var_chaste_interface__Vms__Vms);
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 1 / (1.0 + exp(6.5803808776746413 + 0.14526227103034528 * var_chaste_interface__Vms__Vms));
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 0.035000000000000003 + 0.34999999999999998 * exp(-21.734244000000004 * pow((1 + 0.014285714285714285 * var_chaste_interface__Vms__Vms), 2));
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 0.035000000000000003 + 3.7000000000000002 * exp(-5.433561000000001 * pow((1 + 0.014285714285714285 * var_chaste_interface__Vms__Vms), 2));
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return 1.0 + exp(9.4110800000000001 + 0.081199999999999994 * var_chaste_interface__Vms__Vms);
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return ((fabs(64.400000000000006 + var_chaste_interface__Vms__Vms) < 4.5454545455347883e-7) ? (8.5318181809268536e-6 / (1.0 - exp(-9.999999998955289e-8)) - 1099999.9999805812 * (64.399999545454548 + var_chaste_interface__Vms__Vms) * (-8.5318181809268536e-6 / (1.0 - exp(-9.999999998955289e-8)) - 8.531818183010741e-6 / (1.0 - exp(1.000000000139778e-7)))) : (18.77 * (64.400000000000006 + var_chaste_interface__Vms__Vms) / (1.0 - exp(-14.168000000000001 - 0.22 * var_chaste_interface__Vms__Vms))));
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[21] < 2){
                    double left = f(var_chaste_interface__Vms__Vms - mTableSteps[0]);
                    double right = f(var_chaste_interface__Vms__Vms + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[21] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[21] >= 2){
                    EXCEPTION("Lookup table 21 at ["<<i<<"][21] has non-finite value: " << val);
                }
                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return ((fabs(59.299999999999997 + var_chaste_interface__Vms__Vms) < 1.8181818181584042e-7) ? (2.1320000002980068e-5 / (1.0 - exp(-1.000000000139778e-7)) - 2750000.0000354135 * (59.299999818181817 + var_chaste_interface__Vms__Vms) * (-2.131999999647083e-5 / (1.0 - exp(9.9999999983446669e-8)) - 2.1320000002980068e-5 / (1.0 - exp(-1.000000000139778e-7)))) : (117.26000000000001 * (59.299999999999997 + var_chaste_interface__Vms__Vms) / (1.0 - exp(-32.615000000000002 - 0.55000000000000004 * var_chaste_interface__Vms__Vms))));
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[22] < 2){
                    double left = f(var_chaste_interface__Vms__Vms - mTableSteps[0]);
                    double right = f(var_chaste_interface__Vms__Vms + mTableSteps[0]);
                    val = (left + right) / 2.0;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[22] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[22] >= 2){
                    EXCEPTION("Lookup table 22 at ["<<i<<"][22] has non-finite value: " << val);
                }
                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                auto f = [](double var_chaste_interface__Vms__Vms) {
                    return exp(-4.3919999999999995 - 0.071999999999999995 * var_chaste_interface__Vms__Vms);
                };
                const double var_chaste_interface__Vms__Vms = mTableMins[0] + i*mTableSteps[0];
                double val = f(var_chaste_interface__Vms__Vms);

                _lookup_table_0[i][23] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[24];

    // Lookup tables
    double (*_lookup_table_0)[24];
    int _lookup_table_0_num_misshit_piecewise[24] = {0};

};

std::shared_ptr<Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables> Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables::mpInstance;


    boost::shared_ptr<RegularStimulus> Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__i_Stim__stim_duration_converted = 1.0; // millisecond
        const double var_chaste_interface__i_Stim__stim_offset_converted = 0; // millisecond
        const double var_chaste_interface__i_Stim__stim_period_converted = 1000.0; // millisecond
        const double var_chaste_interface__i_Stim__stim_amplitude_converted = 118.31884057971013 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__i_Stim__stim_amplitude_converted),
                var_chaste_interface__i_Stim__stim_duration_converted,
                var_chaste_interface__i_Stim__stim_period_converted,
                var_chaste_interface__i_Stim__stim_offset_converted
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt::Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCellWithDataClamp(
                pOdeSolver,
                41,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        NV_Ith_S(this->mParameters, 0) = 0.0; // (var_membrane_data_clamp_current_conductance) [dimensionless]
        NV_Ith_S(this->mParameters, 1) = 10.0; // (var_membrane_permeabilities__gNa) [milliS_per_cm2]
        NV_Ith_S(this->mParameters, 2) = 0.23999999999999999; // (var_membrane_permeabilities__gK1) [milliS_per_cm2]
        NV_Ith_S(this->mParameters, 3) = 0.00018000000000000001; // (var_membrane_permeabilities__i_NaCa_max) [microA_per_cm2]
        NV_Ith_S(this->mParameters, 4) = 0.34999999999999998; // (var_membrane_permeabilities__gKto) [milliS_per_cm2]
    }

    Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt::~Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt()
    {
    }

    AbstractLookupTableCollection* Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt::GetLookupTableCollection()
    {
        return Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables::Instance();
    }
    
    double Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__Vms__Vms = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -79.709547
        double var_chaste_interface__ion_concentrations__Cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 3.5486498e-05
        double var_chaste_interface__i_Nas_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 2.1832558e-06
        double var_chaste_interface__i_Nas_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.58232781
        double var_chaste_interface__i_Cas__Co = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 2.5436465e-06
        double var_chaste_interface__i_Cas__C1 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.99994546
        double var_chaste_interface__i_Cas__C2 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.99994546
        double var_chaste_interface__i_Cas__Ccast = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.99570063
        double var_chaste_interface__i_Ktos_rs_gate__rs = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.0023485072
        double var_chaste_interface__i_Ktos_ss_gate__ss = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.98315843
        double var_chaste_interface__i_Ktos_sss_gate__sss = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.6748337
        double var_chaste_interface__i_Ksts_rsts_gate__rsts = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.0031079213
        double var_chaste_interface__i_Ksts_ssts_gate__ssts = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.30773393
        double var_chaste_interface__i_Kfs_qs_gate__qs = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 0.0034357356
        double var_chaste_interface__ion_concentrations__Nai = NV_Ith_S(rY, 32);
        // Units: millimolar; Initial value: 6.9435814
        double var_chaste_interface__ion_concentrations__Ki = NV_Ith_S(rY, 33);
        // Units: millimolar; Initial value: 137.53311
        double var_chaste_interface__ion_concentrations__Cass = NV_Ith_S(rY, 37);
        // Units: millimolar; Initial value: 4.3112114e-05
        double var_chaste_interface__Vmt__Vmt = NV_Ith_S(rY, 40);
        // Units: millivolt; Initial value: -79.709536
        
        // Lookup table indexing
        const bool _oob_0 = Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__Vms__Vms);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__Vms__Vms);

        const double var_i_Cas__i_Cas = ((fabs(var_chaste_interface__Vms__Vms) < 1.2701813471502589e-6) ? (393644.57769891288 * (1.2701813471502589e-6 + var_chaste_interface__Vms__Vms) * (5.2689000000000005e-11 * (-0.40920000000000001 + var_chaste_interface__ion_concentrations__Cass * exp(9.9999999999999995e-8)) * ((0.10000000000000001 - 0.10000000000000001 * var_chaste_interface__i_Cas__Ccast) * var_chaste_interface__i_Cas__C2 + (0.90000000000000002 + 0.10000000000000001 * var_chaste_interface__i_Cas__Ccast) * var_chaste_interface__i_Cas__C1) * var_chaste_interface__i_Cas__Co / (-1.0 + exp(9.9999999999999995e-8)) + 5.2689000000000005e-11 * (-0.40920000000000001 + var_chaste_interface__ion_concentrations__Cass * exp(-9.9999999999999995e-8)) * ((0.10000000000000001 - 0.10000000000000001 * var_chaste_interface__i_Cas__Ccast) * var_chaste_interface__i_Cas__C2 + (0.90000000000000002 + 0.10000000000000001 * var_chaste_interface__i_Cas__Ccast) * var_chaste_interface__i_Cas__C1) * var_chaste_interface__i_Cas__Co / (-1.0 + exp(-9.9999999999999995e-8))) - 5.2689000000000005e-11 * (-0.40920000000000001 + var_chaste_interface__ion_concentrations__Cass * exp(-9.9999999999999995e-8)) * ((0.10000000000000001 - 0.10000000000000001 * var_chaste_interface__i_Cas__Ccast) * var_chaste_interface__i_Cas__C2 + (0.90000000000000002 + 0.10000000000000001 * var_chaste_interface__i_Cas__Ccast) * var_chaste_interface__i_Cas__C1) * var_chaste_interface__i_Cas__Co / (-1.0 + exp(-9.9999999999999995e-8))) : (4.1481478308756044e-5 * (-0.40920000000000001 + var_chaste_interface__ion_concentrations__Cass * _lt_0_row[0]) * ((0.10000000000000001 - 0.10000000000000001 * var_chaste_interface__i_Cas__Ccast) * var_chaste_interface__i_Cas__C2 + (0.90000000000000002 + 0.10000000000000001 * var_chaste_interface__i_Cas__Ccast) * var_chaste_interface__i_Cas__C1) * var_chaste_interface__Vms__Vms * var_chaste_interface__i_Cas__Co / (_lt_0_row[1]))); // microA
        const double var_i_Ktos__E_Ks = 25.403626943005182 * log(5.4000000000000004 / var_chaste_interface__ion_concentrations__Ki); // millivolt
        const double var_i_Nas__E_Nas = 25.403626943005182 * log(140.0 / var_chaste_interface__ion_concentrations__Nai); // millivolt
        const double var_i_Cabs__i_Cabs = 2.8512000000000001e-8 * var_chaste_interface__Vms__Vms - 3.6215410569948183e-7 * log(1.2 / var_chaste_interface__ion_concentrations__Cai); // microA
        const double var_i_K1s__i_K1s = 4.3999999999999999e-5 * (-1.73 - var_i_Ktos__E_Ks + var_chaste_interface__Vms__Vms) * NV_Ith_S(mParameters, 2) / (1.0 + (1.0 + exp(-35.49354838709678)) * exp(-0.10984612576230394 + 0.063494870382834648 * var_chaste_interface__Vms__Vms - 0.063494870382834648 * var_i_Ktos__E_Ks)); // microA
        const double var_i_Kbs__i_Kbs = 6.071999999999999e-8 * var_chaste_interface__Vms__Vms - 6.071999999999999e-8 * var_i_Ktos__E_Ks; // microA
        const double var_i_Kfs__i_Kfs = 6.3799999999999997e-7 * (1.0 * var_chaste_interface__Vms__Vms - 0.20000000000000001 * var_i_Nas__E_Nas - 0.80000000000000004 * var_i_Ktos__E_Ks) * var_chaste_interface__i_Kfs_qs_gate__qs; // microA
        const double var_i_Ksts__i_Ksts = 1.6800000000000002e-6 * (-var_i_Ktos__E_Ks + var_chaste_interface__Vms__Vms) * var_chaste_interface__i_Ksts_rsts_gate__rsts * var_chaste_interface__i_Ksts_ssts_gate__ssts; // microA
        const double var_i_Ktos__i_Ktos = 4.3999999999999999e-5 * (-var_i_Ktos__E_Ks + var_chaste_interface__Vms__Vms) * (0.88600000000000001 * var_chaste_interface__i_Ktos_ss_gate__ss + 0.114 * var_chaste_interface__i_Ktos_sss_gate__sss) * var_chaste_interface__i_Ktos_rs_gate__rs * NV_Ith_S(mParameters, 4); // microA
        const double var_i_Nabs__i_Nabs = 3.5266e-8 * var_chaste_interface__Vms__Vms - 3.5266e-8 * var_i_Nas__E_Nas; // microA
        const double var_i_Nas__i_Nas = 4.3999999999999999e-5 * pow(var_chaste_interface__i_Nas_m_gate__m, 3) * (-25.403626943005182 * log(140.648 / (var_chaste_interface__ion_concentrations__Nai + 0.12 * var_chaste_interface__ion_concentrations__Ki)) + var_chaste_interface__Vms__Vms) * var_chaste_interface__i_Nas_h_gate__h * NV_Ith_S(mParameters, 1); // microA
        const double var_i_NaCas__i_NaCas = 1.8999999999999994e-5 * (1.2 * pow(var_chaste_interface__ion_concentrations__Nai, 3) * _lt_0_row[2] - 2744000.0 * var_chaste_interface__ion_concentrations__Cai * _lt_0_row[3]) * NV_Ith_S(mParameters, 3) / (1.0 + 0.00012 * pow(var_chaste_interface__ion_concentrations__Nai, 3) + 274.40000000000003 * var_chaste_interface__ion_concentrations__Cai); // microA
        const double var_i_NaKs__i_NaKs = 3.2086956521739132e-5 / ((1.0 + 31.622776601683793 * pow((1 / var_chaste_interface__ion_concentrations__Nai), 1.5)) * (_lt_0_row[4])); // microA
        const double var_i_pCas__i_pCas = 3.7399999999999994e-5 * var_chaste_interface__ion_concentrations__Cai / (0.00040000000000000002 + var_chaste_interface__ion_concentrations__Cai); // microA
        const double var_i_circ__i_circ = 0.049589504033939455 * var_chaste_interface__Vmt__Vmt - 0.049589504033939455 * var_chaste_interface__Vms__Vms; // microA
        const double var_chaste_interface__i_ionic = 22753.623188405796 * (var_i_Cabs__i_Cabs + var_i_Cas__i_Cas + var_i_K1s__i_K1s + var_i_Kbs__i_Kbs + var_i_Kfs__i_Kfs + var_i_Ksts__i_Ksts + var_i_Ktos__i_Ktos + var_i_NaCas__i_NaCas + var_i_NaKs__i_NaKs + var_i_Nabs__i_Nabs + var_i_Nas__i_Nas + var_i_circ__i_circ + var_i_pCas__i_pCas) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time_converted, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__Vms__Vms = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -79.709547
        double var_chaste_interface__ion_concentrations__Cai = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 3.5486498e-05
        double var_chaste_interface__i_Nas_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 2.1832558e-06
        double var_chaste_interface__i_Nas_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.58232781
        double var_chaste_interface__i_Nat_m_gate__m = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 2.1832694e-06
        double var_chaste_interface__i_Nat_h_gate__h = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.58232717
        double var_chaste_interface__i_Cas__Co = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 2.5436465e-06
        double var_chaste_interface__i_Cas__C1 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.99994546
        double var_chaste_interface__i_Cas__C2 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.99994546
        double var_chaste_interface__i_Cas__Ccast = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.99570063
        double var_chaste_interface__i_Cat__Co = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 2.543652e-06
        double var_chaste_interface__i_Cat__C1 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.99994546
        double var_chaste_interface__i_Cat__C2 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.99994546
        double var_chaste_interface__i_Cat__Ccast = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 0.99570063
        double var_chaste_interface__i_Ktos_rs_gate__rs = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 0.0023485072
        double var_chaste_interface__i_Ktos_ss_gate__ss = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.98315843
        double var_chaste_interface__i_Ktos_sss_gate__sss = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.6748337
        double var_chaste_interface__i_Ktot_rt_gate__rt = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.0023485094
        double var_chaste_interface__i_Ktot_st_gate__st = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.98315865
        double var_chaste_interface__i_Ktot_sst_gate__sst = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.67478532
        double var_chaste_interface__i_Ksts_rsts_gate__rsts = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.0031079213
        double var_chaste_interface__i_Ksts_ssts_gate__ssts = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.30773393
        double var_chaste_interface__i_Kstt_rstt_gate__rstt = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.0031079241
        double var_chaste_interface__i_Kstt_sstt_gate__sstt = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 0.30773368
        double var_chaste_interface__i_Kfs_qs_gate__qs = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 0.0034357356
        double var_chaste_interface__i_Kft_qt_gate__qt = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.0034357175
        double var_chaste_interface__JCaSRrel__F1 = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 0.67606483
        double var_chaste_interface__JCaSRrel__F2 = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.00038333331
        double var_chaste_interface__JCaSRrel__F3 = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 6.4516879e-11
        double var_chaste_interface__JCaSRrel__F4 = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 0.32355462
        double var_chaste_interface__CaSRup__CaSRup = NV_Ith_S(rY, 30);
        // Units: millimolar; Initial value: 0.22755058
        double var_chaste_interface__CaSRrel__CaSRrel = NV_Ith_S(rY, 31);
        // Units: millimolar; Initial value: 0.22638169
        double var_chaste_interface__ion_concentrations__Nai = NV_Ith_S(rY, 32);
        // Units: millimolar; Initial value: 6.9435814
        double var_chaste_interface__ion_concentrations__Ki = NV_Ith_S(rY, 33);
        // Units: millimolar; Initial value: 137.53311
        double var_chaste_interface__ion_concentrations__Nat = NV_Ith_S(rY, 34);
        // Units: millimolar; Initial value: 140.01386
        double var_chaste_interface__ion_concentrations__Cat = NV_Ith_S(rY, 35);
        // Units: millimolar; Initial value: 1.2271399
        double var_chaste_interface__ion_concentrations__Kt = NV_Ith_S(rY, 36);
        // Units: millimolar; Initial value: 5.3627676
        double var_chaste_interface__ion_concentrations__Cass = NV_Ith_S(rY, 37);
        // Units: millimolar; Initial value: 4.3112114e-05
        double var_chaste_interface__ion_concentrations__BTRH = NV_Ith_S(rY, 38);
        // Units: millimolar; Initial value: 0.92804169
        double var_chaste_interface__ion_concentrations__BTRL = NV_Ith_S(rY, 39);
        // Units: millimolar; Initial value: 0.034317829
        double var_chaste_interface__Vmt__Vmt = NV_Ith_S(rY, 40);
        // Units: millivolt; Initial value: -79.709536

        // Lookup table indexing
        const bool _oob_0 = Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__Vms__Vms);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time_converted));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__Vms__Vms);

        // Mathematics
        double d_dt_chaste_interface_var_Vms__Vms;
        const double d_dt_chaste_interface_var_JCaSRrel__F4 = 0.017999999999999999 * var_chaste_interface__JCaSRrel__F2 - 0.00080000000000000004 * var_chaste_interface__JCaSRrel__F4; // 1 / millisecond
        const double var_i_Cas__C1inf = _lt_0_row[5]; // dimensionless
        const double d_dt_chaste_interface_var_i_Cas__C1 = 0.001 * (-var_chaste_interface__i_Cas__C1 + var_i_Cas__C1inf) / (_lt_0_row[6]); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Cas__C2 = 0.001 * (-var_chaste_interface__i_Cas__C2 + var_i_Cas__C1inf) / (_lt_0_row[7]); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Cas__Co = 0.001 * (-var_chaste_interface__i_Cas__Co + _lt_0_row[8]) / (_lt_0_row[9]); // 1 / millisecond
        const double var_i_Cat__C1inf = 1 / (1.0 + exp(4.9444444444444438 + 0.18518518518518517 * var_chaste_interface__Vmt__Vmt)); // dimensionless
        const double d_dt_chaste_interface_var_i_Cat__C1 = 0.001 * (-var_chaste_interface__i_Cat__C1 + var_i_Cat__C1inf) / (0.014999999999999999 / (1.0 + exp(3.0 + 0.040000000000000001 * var_chaste_interface__Vmt__Vmt)) + 0.040000000000000001 / (1.0 + exp(1.0 - 0.040000000000000001 * var_chaste_interface__Vmt__Vmt)) + 0.105 * exp(-14.0625 * pow((1 + 0.022222222222222223 * var_chaste_interface__Vmt__Vmt), 2))); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Cat__C2 = 0.001 * (-var_chaste_interface__i_Cat__C2 + var_i_Cat__C1inf) / (0.014999999999999999 / (1.0 + exp(3.0 + 0.040000000000000001 * var_chaste_interface__Vmt__Vmt)) + 0.080000000000000002 / (1.0 + exp(-11.0 - 0.20000000000000001 * var_chaste_interface__Vmt__Vmt)) + 0.041000000000000002 * exp(-15.340277777777779 * pow((1 + 0.021276595744680851 * var_chaste_interface__Vmt__Vmt), 2))); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Cat__Co = 0.001 * (-var_chaste_interface__i_Cat__Co + 1 / (1.0 + exp(-3.0600000000000001 - 0.20000000000000001 * var_chaste_interface__Vmt__Vmt))) / (0.00025000000000000001 + 0.0010499999999999999 * exp(-0.64800000000000002 * pow((-1 + 0.055555555555555552 * var_chaste_interface__Vmt__Vmt), 2)) + 0.0030500000000000002 * exp(-0.22049999999999997 * pow((1 + 0.14285714285714285 * var_chaste_interface__Vmt__Vmt), 2))); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Kfs_qs_gate__qs = 0.001 * (-var_chaste_interface__i_Kfs_qs_gate__qs + _lt_0_row[10]) * (_lt_0_row[11]); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Kft_qt_gate__qt = 0.001 * (-var_chaste_interface__i_Kft_qt_gate__qt + 1 / (1.0 + exp(13.225190839694655 + 0.095419847328244267 * var_chaste_interface__Vmt__Vmt))) * (0.56230000000000002 * exp(-5.6377730796335452 - 0.070472163495419307 * var_chaste_interface__Vmt__Vmt) + 0.11885 * exp(2.8198801550934083 + 0.035248501938667604 * var_chaste_interface__Vmt__Vmt)); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ksts_rsts_gate__rsts = 0.001 * (-var_chaste_interface__i_Ksts_rsts_gate__rsts + _lt_0_row[12]) * (_lt_0_row[13]); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ksts_ssts_gate__ssts = _lt_0_row[14] - 0.00047619047619047619 * var_chaste_interface__i_Ksts_ssts_gate__ssts; // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Kstt_rstt_gate__rstt = 0.001 * (-var_chaste_interface__i_Kstt_rstt_gate__rstt + 1 / (1.0 + exp(-0.97292724196277491 - 0.084602368866328256 * var_chaste_interface__Vmt__Vmt))) * (9.8900000000000006 * exp(-3.8000000000000003 - 0.10000000000000001 * var_chaste_interface__Vmt__Vmt) + 4.516 * exp(1.7885000000000002 + 0.035770000000000003 * var_chaste_interface__Vmt__Vmt)); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Kstt_sstt_gate__sstt = 0.00047619047619047619 / (1.0 + exp(8.4951456310679614 + 0.097087378640776698 * var_chaste_interface__Vmt__Vmt)) - 0.00047619047619047619 * var_chaste_interface__i_Kstt_sstt_gate__sstt; // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ktos_rs_gate__rs = 0.001 * (-var_chaste_interface__i_Ktos_rs_gate__rs + _lt_0_row[15]) * (_lt_0_row[16]); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ktos_ss_gate__ss = 0.001 * (-var_chaste_interface__i_Ktos_ss_gate__ss + _lt_0_row[17]) / (_lt_0_row[18]); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ktos_sss_gate__sss = 0.001 * (-var_chaste_interface__i_Ktos_sss_gate__sss + _lt_0_row[17]) / (_lt_0_row[19]); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ktot_rt_gate__rt = 0.001 * (-var_chaste_interface__i_Ktot_rt_gate__rt + 1 / (1.0 + exp(-0.92819614711033271 - 0.087565674255691769 * var_chaste_interface__Vmt__Vmt))) * (45.159999999999997 * exp(1.7885000000000002 + 0.035770000000000003 * var_chaste_interface__Vmt__Vmt) + 98.900000000000006 * exp(-3.8000000000000003 - 0.10000000000000001 * var_chaste_interface__Vmt__Vmt)); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ktot_sst_gate__sst = 0.001 * (-var_chaste_interface__i_Ktot_sst_gate__sst + 1 / (1.0 + exp(6.5803808776746413 + 0.14526227103034528 * var_chaste_interface__Vmt__Vmt))) / (0.035000000000000003 + 3.7000000000000002 * exp(-5.433561000000001 * pow((1 + 0.014285714285714285 * var_chaste_interface__Vmt__Vmt), 2))); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Ktot_st_gate__st = 0.001 * (-var_chaste_interface__i_Ktot_st_gate__st + 1 / (1.0 + exp(6.5803808776746413 + 0.14526227103034528 * var_chaste_interface__Vmt__Vmt))) / (0.035000000000000003 + 0.34999999999999998 * exp(-21.734244000000004 * pow((1 + 0.014285714285714285 * var_chaste_interface__Vmt__Vmt), 2))); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Nas_h_gate__h = 0.28439999999999999 * (1.0 - var_chaste_interface__i_Nas_h_gate__h) / (_lt_0_row[20]) - 0.001 * _lt_0_row[21] * var_chaste_interface__i_Nas_h_gate__h; // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Nas_m_gate__m = 0.001 * (1.0 - var_chaste_interface__i_Nas_m_gate__m) * _lt_0_row[22] - 3.7999999999999998 * var_chaste_interface__i_Nas_m_gate__m * _lt_0_row[23]; // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Nat_h_gate__h = 0.28439999999999999 * (1.0 - var_chaste_interface__i_Nat_h_gate__h) / (1.0 + exp(9.4110800000000001 + 0.081199999999999994 * var_chaste_interface__Vmt__Vmt)) - 0.018769999999999998 * (64.400000000000006 + var_chaste_interface__Vmt__Vmt) * var_chaste_interface__i_Nat_h_gate__h / (1.0 - exp(-14.168000000000001 - 0.22 * var_chaste_interface__Vmt__Vmt)); // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Nat_m_gate__m = -3.7999999999999998 * var_chaste_interface__i_Nat_m_gate__m * exp(-4.3919999999999995 - 0.071999999999999995 * var_chaste_interface__Vmt__Vmt) + 0.11726 * (1.0 - var_chaste_interface__i_Nat_m_gate__m) * (59.299999999999997 + var_chaste_interface__Vmt__Vmt) / (1.0 - exp(-32.615000000000002 - 0.55000000000000004 * var_chaste_interface__Vmt__Vmt)); // 1 / millisecond
        const double d_dt_chaste_interface_var_JCaSRrel__F1 = 0.57599999999999996 * var_chaste_interface__JCaSRrel__F2 - 12150000000.0 * pow(var_chaste_interface__ion_concentrations__Cass, 4) * var_chaste_interface__JCaSRrel__F1; // 1 / millisecond
        const double d_dt_chaste_interface_var_JCaSRrel__F2 = 0.00080000000000000004 * var_chaste_interface__JCaSRrel__F4 + 1.9299999999999999 * var_chaste_interface__JCaSRrel__F3 + 12150000000.0 * pow(var_chaste_interface__ion_concentrations__Cass, 4) * var_chaste_interface__JCaSRrel__F1 - 0.001 * (594.0 + 4050000000.0 * pow(var_chaste_interface__ion_concentrations__Cass, 3)) * var_chaste_interface__JCaSRrel__F2; // 1 / millisecond
        const double d_dt_chaste_interface_var_JCaSRrel__F3 = -1.9299999999999999 * var_chaste_interface__JCaSRrel__F3 + 4050000.0 * pow(var_chaste_interface__ion_concentrations__Cass, 3) * var_chaste_interface__JCaSRrel__F2; // 1 / millisecond
        const double d_dt_chaste_interface_var_i_Cas__Ccast = 0.11111111111111112 / (1.0 + 100.0 * var_chaste_interface__ion_concentrations__Cass) - 0.11111111111111112 * var_chaste_interface__i_Cas__Ccast; // 1 / millisecond
        const double var_i_Cas__i_Cas = ((fabs(var_chaste_interface__Vms__Vms) < 1.2701813471502589e-6) ? (393644.57769891288 * (1.2701813471502589e-6 + var_chaste_interface__Vms__Vms) * (5.2689000000000005e-11 * (-0.40920000000000001 + var_chaste_interface__ion_concentrations__Cass * exp(9.9999999999999995e-8)) * ((0.10000000000000001 - 0.10000000000000001 * var_chaste_interface__i_Cas__Ccast) * var_chaste_interface__i_Cas__C2 + (0.90000000000000002 + 0.10000000000000001 * var_chaste_interface__i_Cas__Ccast) * var_chaste_interface__i_Cas__C1) * var_chaste_interface__i_Cas__Co / (-1.0 + exp(9.9999999999999995e-8)) + 5.2689000000000005e-11 * (-0.40920000000000001 + var_chaste_interface__ion_concentrations__Cass * exp(-9.9999999999999995e-8)) * ((0.10000000000000001 - 0.10000000000000001 * var_chaste_interface__i_Cas__Ccast) * var_chaste_interface__i_Cas__C2 + (0.90000000000000002 + 0.10000000000000001 * var_chaste_interface__i_Cas__Ccast) * var_chaste_interface__i_Cas__C1) * var_chaste_interface__i_Cas__Co / (-1.0 + exp(-9.9999999999999995e-8))) - 5.2689000000000005e-11 * (-0.40920000000000001 + var_chaste_interface__ion_concentrations__Cass * exp(-9.9999999999999995e-8)) * ((0.10000000000000001 - 0.10000000000000001 * var_chaste_interface__i_Cas__Ccast) * var_chaste_interface__i_Cas__C2 + (0.90000000000000002 + 0.10000000000000001 * var_chaste_interface__i_Cas__Ccast) * var_chaste_interface__i_Cas__C1) * var_chaste_interface__i_Cas__Co / (-1.0 + exp(-9.9999999999999995e-8))) : (4.1481478308756044e-5 * (-0.40920000000000001 + var_chaste_interface__ion_concentrations__Cass * _lt_0_row[0]) * ((0.10000000000000001 - 0.10000000000000001 * var_chaste_interface__i_Cas__Ccast) * var_chaste_interface__i_Cas__C2 + (0.90000000000000002 + 0.10000000000000001 * var_chaste_interface__i_Cas__Ccast) * var_chaste_interface__i_Cas__C1) * var_chaste_interface__Vms__Vms * var_chaste_interface__i_Cas__Co / (_lt_0_row[1]))); // microA
        const double d_dt_chaste_interface_var_i_Cat__Ccast = 0.11111111111111112 / (1.0 + 100.0 * var_chaste_interface__ion_concentrations__Cass) - 0.11111111111111112 * var_chaste_interface__i_Cat__Ccast; // 1 / millisecond
        const double var_ion_concentrations__dBTRH = -0.070000000000000007 * var_chaste_interface__ion_concentrations__BTRH + 20000.0 * (1.0 - var_chaste_interface__ion_concentrations__BTRH) * var_chaste_interface__ion_concentrations__Cai; // millimolar_per_second
        const double d_dt_chaste_interface_var_ion_concentrations__BTRH = 0.001 * var_ion_concentrations__dBTRH; // millimolar / millisecond
        const double var_ion_concentrations__dBTRL = -40.0 * var_chaste_interface__ion_concentrations__BTRL + 40000.0 * (1.0 - var_chaste_interface__ion_concentrations__BTRL) * var_chaste_interface__ion_concentrations__Cai; // millimolar_per_second
        const double d_dt_chaste_interface_var_ion_concentrations__BTRL = 0.001 * var_ion_concentrations__dBTRL; // millimolar / millisecond
        const double var_i_Ktos__E_Ks = 25.403626943005182 * log(5.4000000000000004 / var_chaste_interface__ion_concentrations__Ki); // millivolt
        const double var_i_Ktot__E_Kt = 25.403626943005182 * log(var_chaste_interface__ion_concentrations__Kt / var_chaste_interface__ion_concentrations__Ki); // millivolt
        const double var_i_Nas__E_Nas = 25.403626943005182 * log(140.0 / var_chaste_interface__ion_concentrations__Nai); // millivolt
        const double var_i_Nat__E_Nat = 25.403626943005182 * log(var_chaste_interface__ion_concentrations__Nat / var_chaste_interface__ion_concentrations__Nai); // millivolt
        const double var_i_Stim__i_Stim = -4.3949044585987262e-5 * GetIntracellularAreaStimulus(var_chaste_interface__environment__time_converted) / HeartConfig::Instance()->GetCapacitance(); // microA
        const double var_i_Cabs__i_Cabs = 2.8512000000000001e-8 * var_chaste_interface__Vms__Vms - 3.6215410569948183e-7 * log(1.2 / var_chaste_interface__ion_concentrations__Cai); // microA
        const double var_i_Cabt__i_Cabt = 3.6288000000000007e-8 * var_chaste_interface__Vmt__Vmt - 4.6092340725388611e-7 * log(var_chaste_interface__ion_concentrations__Cat / var_chaste_interface__ion_concentrations__Cai); // microA
        const double var_i_Cat__i_Cat = 0.00027760681637398275 * (-0.34100000000000003 * var_chaste_interface__ion_concentrations__Cat + var_chaste_interface__ion_concentrations__Cass * exp(0.078728915539782576 * var_chaste_interface__Vmt__Vmt)) * ((0.10000000000000001 - 0.10000000000000001 * var_chaste_interface__i_Cat__Ccast) * var_chaste_interface__i_Cat__C2 + (0.90000000000000002 + 0.10000000000000001 * var_chaste_interface__i_Cat__Ccast) * var_chaste_interface__i_Cat__C1) * var_chaste_interface__Vmt__Vmt * var_chaste_interface__i_Cat__Co / (-1.0 + exp(0.078728915539782576 * var_chaste_interface__Vmt__Vmt)); // microA
        const double var_i_K1s__i_K1s = 4.3999999999999999e-5 * (-1.73 - var_i_Ktos__E_Ks + var_chaste_interface__Vms__Vms) * NV_Ith_S(mParameters, 2) / (1.0 + (1.0 + exp(-35.49354838709678)) * exp(-0.10984612576230394 + 0.063494870382834648 * var_chaste_interface__Vms__Vms - 0.063494870382834648 * var_i_Ktos__E_Ks)); // microA
        const double var_i_K1t__i_K1t = 5.6000000000000006e-5 * (-1.73 - var_i_Ktot__E_Kt + var_chaste_interface__Vmt__Vmt) * NV_Ith_S(mParameters, 2) / (1.0 + (1.0 + exp(8.0548387096774192 - 8.064516129032258 * var_chaste_interface__ion_concentrations__Kt)) * exp(-0.10984612576230394 + 0.063494870382834648 * var_chaste_interface__Vmt__Vmt - 0.063494870382834648 * var_i_Ktot__E_Kt)); // microA
        const double var_i_Kbs__i_Kbs = 6.071999999999999e-8 * var_chaste_interface__Vms__Vms - 6.071999999999999e-8 * var_i_Ktos__E_Ks; // microA
        const double var_i_Kbt__i_Kbt = 7.7280000000000001e-8 * var_chaste_interface__Vmt__Vmt - 7.7280000000000001e-8 * var_i_Ktot__E_Kt; // microA
        const double var_i_Kfs__i_Kfs = 6.3799999999999997e-7 * (1.0 * var_chaste_interface__Vms__Vms - 0.20000000000000001 * var_i_Nas__E_Nas - 0.80000000000000004 * var_i_Ktos__E_Ks) * var_chaste_interface__i_Kfs_qs_gate__qs; // microA
        const double var_i_Kft__i_Kft = 8.1200000000000012e-7 * (1.0 * var_chaste_interface__Vmt__Vmt - 0.20000000000000001 * var_i_Nat__E_Nat - 0.80000000000000004 * var_i_Ktot__E_Kt) * var_chaste_interface__i_Kft_qt_gate__qt; // microA
        const double var_i_Ksts__i_Ksts = 1.6800000000000002e-6 * (-var_i_Ktos__E_Ks + var_chaste_interface__Vms__Vms) * var_chaste_interface__i_Ksts_rsts_gate__rsts * var_chaste_interface__i_Ksts_ssts_gate__ssts; // microA
        const double var_i_Kstt__i_Kstt = 5.3200000000000007e-6 * (-var_i_Ktot__E_Kt + var_chaste_interface__Vmt__Vmt) * var_chaste_interface__i_Kstt_rstt_gate__rstt * var_chaste_interface__i_Kstt_sstt_gate__sstt; // microA
        const double var_i_Ktos__i_Ktos = 4.3999999999999999e-5 * (-var_i_Ktos__E_Ks + var_chaste_interface__Vms__Vms) * (0.88600000000000001 * var_chaste_interface__i_Ktos_ss_gate__ss + 0.114 * var_chaste_interface__i_Ktos_sss_gate__sss) * var_chaste_interface__i_Ktos_rs_gate__rs * NV_Ith_S(mParameters, 4); // microA
        const double var_i_Ktot__i_Ktot = 5.6000000000000006e-5 * (-var_i_Ktot__E_Kt + var_chaste_interface__Vmt__Vmt) * (0.88600000000000001 * var_chaste_interface__i_Ktot_st_gate__st + 0.114 * var_chaste_interface__i_Ktot_sst_gate__sst) * var_chaste_interface__i_Ktot_rt_gate__rt * NV_Ith_S(mParameters, 4); // microA
        const double var_i_Nabs__i_Nabs = 3.5266e-8 * var_chaste_interface__Vms__Vms - 3.5266e-8 * var_i_Nas__E_Nas; // microA
        const double var_i_Nabt__i_Nabt = 4.4884000000000007e-8 * var_chaste_interface__Vmt__Vmt - 4.4884000000000007e-8 * var_i_Nat__E_Nat; // microA
        const double var_i_Nas__i_Nas = 4.3999999999999999e-5 * pow(var_chaste_interface__i_Nas_m_gate__m, 3) * (-25.403626943005182 * log(140.648 / (var_chaste_interface__ion_concentrations__Nai + 0.12 * var_chaste_interface__ion_concentrations__Ki)) + var_chaste_interface__Vms__Vms) * var_chaste_interface__i_Nas_h_gate__h * NV_Ith_S(mParameters, 1); // microA
        const double var_i_Nat__i_Nat = 5.6000000000000006e-5 * pow(var_chaste_interface__i_Nat_m_gate__m, 3) * (-25.403626943005182 * log((var_chaste_interface__ion_concentrations__Nat + 0.12 * var_chaste_interface__ion_concentrations__Kt) / (var_chaste_interface__ion_concentrations__Nai + 0.12 * var_chaste_interface__ion_concentrations__Ki)) + var_chaste_interface__Vmt__Vmt) * var_chaste_interface__i_Nat_h_gate__h * NV_Ith_S(mParameters, 1); // microA
        const double var_i_NaCas__i_NaCas = 1.8999999999999994e-5 * (1.2 * pow(var_chaste_interface__ion_concentrations__Nai, 3) * _lt_0_row[2] - 2744000.0 * var_chaste_interface__ion_concentrations__Cai * _lt_0_row[3]) * NV_Ith_S(mParameters, 3) / (1.0 + 0.00012 * pow(var_chaste_interface__ion_concentrations__Nai, 3) + 274.40000000000003 * var_chaste_interface__ion_concentrations__Cai); // microA
        const double var_i_NaCat__i_NaCat = 8.1000000000000004e-5 * (pow(var_chaste_interface__ion_concentrations__Nai, 3) * var_chaste_interface__ion_concentrations__Cat * exp(0.018700000000000001 * var_chaste_interface__Vmt__Vmt) - pow(var_chaste_interface__ion_concentrations__Nat, 3) * var_chaste_interface__ion_concentrations__Cai * exp(-0.018700000000000001 * var_chaste_interface__Vmt__Vmt)) * NV_Ith_S(mParameters, 3) / (1.0 + 0.0001 * pow(var_chaste_interface__ion_concentrations__Nai, 3) * var_chaste_interface__ion_concentrations__Cat + 0.0001 * pow(var_chaste_interface__ion_concentrations__Nat, 3) * var_chaste_interface__ion_concentrations__Cai); // microA
        const double var_i_NaKs__i_NaKs = 3.2086956521739132e-5 / ((1.0 + 31.622776601683793 * pow((1 / var_chaste_interface__ion_concentrations__Nai), 1.5)) * (_lt_0_row[4])); // microA
        const double var_i_NaKt__i_NaKt = 5.8999999999999998e-5 * var_chaste_interface__ion_concentrations__Kt / ((1.0 + 31.622776601683793 * pow((1 / var_chaste_interface__ion_concentrations__Nai), 1.5)) * (1.5 + var_chaste_interface__ion_concentrations__Kt) * (1.0 + 0.1245 * exp(-0.0039364457769891295 * var_chaste_interface__Vmt__Vmt) + 0.0052142857142857138 * (-1.0 + exp(0.01485884101040119 * var_chaste_interface__ion_concentrations__Nat)) * exp(-0.039364457769891288 * var_chaste_interface__Vmt__Vmt))); // microA
        const double var_i_pCas__i_pCas = 3.7399999999999994e-5 * var_chaste_interface__ion_concentrations__Cai / (0.00040000000000000002 + var_chaste_interface__ion_concentrations__Cai); // microA
        const double var_i_pCat__i_pCat = 4.7600000000000005e-5 * var_chaste_interface__ion_concentrations__Cai / (0.00040000000000000002 + var_chaste_interface__ion_concentrations__Cai); // microA
        const double var_JCaSRrel__JCaSRrel = 8.0254777070063705e-8 * (-var_chaste_interface__ion_concentrations__Cass + var_chaste_interface__CaSRrel__CaSRrel) * (var_chaste_interface__JCaSRrel__F2 + var_chaste_interface__JCaSRrel__F3); // millimolar_per_second
        const double var_Jtr__Jtr = 1.2930970783395158e-9 * var_chaste_interface__CaSRup__CaSRup - 1.2930970783395158e-9 * var_chaste_interface__CaSRrel__CaSRrel; // millimolar_per_second
        const double d_dt_chaste_interface_var_CaSRrel__CaSRrel = 22428571.428571425 * (-var_JCaSRrel__JCaSRrel + var_Jtr__Jtr) / (1.0 + 12.0 / pow((0.80000000000000004 + var_chaste_interface__CaSRrel__CaSRrel), 2)); // millimolar / millisecond
        const double var_JCaSRup__JCaSRup = 7.4522292993630575e-9 * (13542.188456570031 * pow(var_chaste_interface__ion_concentrations__Cai, 1.2) - 0.2735562310030395 * var_chaste_interface__CaSRup__CaSRup) / (1.0 + 33855.471141425078 * pow(var_chaste_interface__ion_concentrations__Cai, 1.2) + 0.303951367781155 * var_chaste_interface__CaSRup__CaSRup); // millimolar_per_second
        const double d_dt_chaste_interface_var_CaSRup__CaSRup = 2492063.4920634921 * var_JCaSRup__JCaSRup - 2492063.4920634921 * var_Jtr__Jtr; // millimolar / millisecond
        const double var_JCad__JCad = 2.3847133757961781e-6 * var_chaste_interface__ion_concentrations__Cass - 2.3847133757961781e-6 * var_chaste_interface__ion_concentrations__Cai; // millimolar_per_second
        const double d_dt_chaste_interface_var_ion_concentrations__Cai = 0.001 * (1390.5495770780744 * var_i_NaCas__i_NaCas + 1390.5495770780744 * var_i_NaCat__i_NaCat + 134188034.18803419 * var_JCad__JCad - 0.070000000000000007 * var_ion_concentrations__dBTRL - 0.14000000000000001 * var_ion_concentrations__dBTRH - 695.27478853903722 * var_i_Cabs__i_Cabs - 695.27478853903722 * var_i_Cabt__i_Cabt - 695.27478853903722 * var_i_pCas__i_pCas - 695.27478853903722 * var_i_pCat__i_pCat - 134188034.18803419 * var_JCaSRup__JCaSRup) / (1.0 + 0.00011900000000000002 / pow((0.0023800000000000002 + var_chaste_interface__ion_concentrations__Cai), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_ion_concentrations__Cass = 0.001 * (1046666666666.6667 * var_JCaSRrel__JCaSRrel - 5423143.3506044904 * var_i_Cas__i_Cas - 5423143.3506044904 * var_i_Cat__i_Cat - 1046666666666.6667 * var_JCad__JCad) / (1.0 + 0.00011900000000000002 / pow((0.0023800000000000002 + var_chaste_interface__ion_concentrations__Cass), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_ion_concentrations__Ki = 1.3905495770780745 * var_i_Stim__i_Stim + 2.7810991541561489 * var_i_NaKs__i_NaKs + 2.7810991541561489 * var_i_NaKt__i_NaKt - 1.3905495770780745 * var_i_K1s__i_K1s - 1.3905495770780745 * var_i_K1t__i_K1t - 1.3905495770780745 * var_i_Kbs__i_Kbs - 1.3905495770780745 * var_i_Kbt__i_Kbt - 1.3905495770780745 * var_i_Kfs__i_Kfs - 1.3905495770780745 * var_i_Kft__i_Kft - 1.3905495770780745 * var_i_Ksts__i_Ksts - 1.3905495770780745 * var_i_Kstt__i_Kstt - 1.3905495770780745 * var_i_Ktos__i_Ktos - 1.3905495770780745 * var_i_Ktot__i_Ktot; // millimolar / millisecond
        const double d_dt_chaste_interface_var_ion_concentrations__Nai = -1.3905495770780745 * var_i_Nabs__i_Nabs - 1.3905495770780745 * var_i_Nabt__i_Nabt - 1.3905495770780745 * var_i_Nas__i_Nas - 1.3905495770780745 * var_i_Nat__i_Nat - 4.1716487312342236 * var_i_NaCas__i_NaCas - 4.1716487312342236 * var_i_NaCat__i_NaCat - 4.1716487312342236 * var_i_NaKs__i_NaKs - 4.1716487312342236 * var_i_NaKt__i_NaKt; // millimolar / millisecond
        const double var_i_circ__i_circ = 0.049589504033939455 * var_chaste_interface__Vmt__Vmt - 0.049589504033939455 * var_chaste_interface__Vms__Vms; // microA
        const double d_dt_chaste_interface_var_Vmt__Vmt = -17840.909090909088 * var_i_Cabt__i_Cabt - 17840.909090909088 * var_i_Cat__i_Cat - 17840.909090909088 * var_i_K1t__i_K1t - 17840.909090909088 * var_i_Kbt__i_Kbt - 17840.909090909088 * var_i_Kft__i_Kft - 17840.909090909088 * var_i_Kstt__i_Kstt - 17840.909090909088 * var_i_Ktot__i_Ktot - 17840.909090909088 * var_i_NaCat__i_NaCat - 17840.909090909088 * var_i_NaKt__i_NaKt - 17840.909090909088 * var_i_Nabt__i_Nabt - 17840.909090909088 * var_i_Nat__i_Nat - 17840.909090909088 * var_i_circ__i_circ - 17840.909090909088 * var_i_pCat__i_pCat; // millivolt / millisecond
        const double d_dt_chaste_interface_var_ion_concentrations__Cat = 0.0023999999999999998 + 12.325325796828386 * var_i_Cabt__i_Cabt + 12.325325796828386 * var_i_Cat__i_Cat + 12.325325796828386 * var_i_pCat__i_pCat - 0.002 * var_chaste_interface__ion_concentrations__Cat - 24.650651593656772 * var_i_NaCat__i_NaCat; // millimolar / millisecond
        const double d_dt_chaste_interface_var_ion_concentrations__Kt = 0.036000000000000004 + 24.650651593656772 * var_i_K1t__i_K1t + 24.650651593656772 * var_i_Kbt__i_Kbt + 24.650651593656772 * var_i_Kft__i_Kft + 24.650651593656772 * var_i_Kstt__i_Kstt + 24.650651593656772 * var_i_Ktot__i_Ktot - 49.301303187313543 * var_i_NaKt__i_NaKt - 0.0066666666666666671 * var_chaste_interface__ion_concentrations__Kt; // millimolar / millisecond
        const double d_dt_chaste_interface_var_ion_concentrations__Nat = 0.93333333333333335 + 73.951954780970325 * var_i_NaCat__i_NaCat + 73.951954780970325 * var_i_NaKt__i_NaKt + 24.650651593656772 * var_i_Nabt__i_Nabt + 24.650651593656772 * var_i_Nat__i_Nat - 0.0066666666666666671 * var_chaste_interface__ion_concentrations__Nat; // millimolar / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_Vms__Vms = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_Vms__Vms = 22753.623188405796 * var_i_Stim__i_Stim + 22753.623188405796 * var_i_circ__i_circ - 22753.623188405796 * var_i_Cabs__i_Cabs - 22753.623188405796 * var_i_Cas__i_Cas - 22753.623188405796 * var_i_K1s__i_K1s - 22753.623188405796 * var_i_Kbs__i_Kbs - 22753.623188405796 * var_i_Kfs__i_Kfs - 22753.623188405796 * var_i_Ksts__i_Ksts - 22753.623188405796 * var_i_Ktos__i_Ktos - 22753.623188405796 * var_i_NaCas__i_NaCas - 22753.623188405796 * var_i_NaKs__i_NaKs - 22753.623188405796 * var_i_Nabs__i_Nabs - 22753.623188405796 * var_i_Nas__i_Nas - 22753.623188405796 * var_i_pCas__i_pCas + 22753.623188405796 * (-GetExperimentalVoltageAtTimeT(var_chaste_interface__environment__time_converted) + var_chaste_interface__Vms__Vms) * NV_Ith_S(mParameters, 0); // millivolt / millisecond
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_Vms__Vms;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_ion_concentrations__Cai;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_i_Nas_m_gate__m;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_i_Nas_h_gate__h;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_i_Nat_m_gate__m;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_i_Nat_h_gate__h;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_i_Cas__Co;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_i_Cas__C1;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_i_Cas__C2;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_i_Cas__Ccast;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_i_Cat__Co;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_i_Cat__C1;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_i_Cat__C2;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_i_Cat__Ccast;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_i_Ktos_rs_gate__rs;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_i_Ktos_ss_gate__ss;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_i_Ktos_sss_gate__sss;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_i_Ktot_rt_gate__rt;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_i_Ktot_st_gate__st;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_i_Ktot_sst_gate__sst;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_i_Ksts_rsts_gate__rsts;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_i_Ksts_ssts_gate__ssts;
        NV_Ith_S(rDY,22) = d_dt_chaste_interface_var_i_Kstt_rstt_gate__rstt;
        NV_Ith_S(rDY,23) = d_dt_chaste_interface_var_i_Kstt_sstt_gate__sstt;
        NV_Ith_S(rDY,24) = d_dt_chaste_interface_var_i_Kfs_qs_gate__qs;
        NV_Ith_S(rDY,25) = d_dt_chaste_interface_var_i_Kft_qt_gate__qt;
        NV_Ith_S(rDY,26) = d_dt_chaste_interface_var_JCaSRrel__F1;
        NV_Ith_S(rDY,27) = d_dt_chaste_interface_var_JCaSRrel__F2;
        NV_Ith_S(rDY,28) = d_dt_chaste_interface_var_JCaSRrel__F3;
        NV_Ith_S(rDY,29) = d_dt_chaste_interface_var_JCaSRrel__F4;
        NV_Ith_S(rDY,30) = d_dt_chaste_interface_var_CaSRup__CaSRup;
        NV_Ith_S(rDY,31) = d_dt_chaste_interface_var_CaSRrel__CaSRrel;
        NV_Ith_S(rDY,32) = d_dt_chaste_interface_var_ion_concentrations__Nai;
        NV_Ith_S(rDY,33) = d_dt_chaste_interface_var_ion_concentrations__Ki;
        NV_Ith_S(rDY,34) = d_dt_chaste_interface_var_ion_concentrations__Nat;
        NV_Ith_S(rDY,35) = d_dt_chaste_interface_var_ion_concentrations__Cat;
        NV_Ith_S(rDY,36) = d_dt_chaste_interface_var_ion_concentrations__Kt;
        NV_Ith_S(rDY,37) = d_dt_chaste_interface_var_ion_concentrations__Cass;
        NV_Ith_S(rDY,38) = d_dt_chaste_interface_var_ion_concentrations__BTRH;
        NV_Ith_S(rDY,39) = d_dt_chaste_interface_var_ion_concentrations__BTRL;
        NV_Ith_S(rDY,40) = d_dt_chaste_interface_var_Vmt__Vmt;
    }

    N_Vector Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt::ComputeDerivedQuantities(double var_chaste_interface__environment__time_converted, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__Vms__Vms = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -79.709547
        

        // Mathematics
        const double var_i_Stim__i_Stim_converted = -GetIntracellularAreaStimulus(var_chaste_interface__environment__time_converted); // uA_per_cm2
        // Special handling of data clamp current here
        // (we want to save expense of calling the interpolation method if possible.)
        double var_chaste_interface__membrane_data_clamp_current = 0.0;
        if (mDataClampIsOn)
        {
            var_chaste_interface__membrane_data_clamp_current = (-GetExperimentalVoltageAtTimeT(var_chaste_interface__environment__time_converted) + var_chaste_interface__Vms__Vms) * NV_Ith_S(mParameters, 0); // uA_per_cm2
        }
        const double var_model_parameters__Smtot = 0.0001; // cm2
        const double var_model_parameters__Vc = 0.00012738853503184712 * var_model_parameters__Smtot; // cm3
        const double var_model_parameters__Sms = -4400.0 * var_model_parameters__Vc + var_model_parameters__Smtot; // cm2
        const double var_model_parameters__Cms = var_model_parameters__Sms; // microF

        N_Vector dqs = N_VNew_Serial(4);
        NV_Ith_S(dqs, 0) = var_model_parameters__Cms;
        NV_Ith_S(dqs, 1) = var_chaste_interface__membrane_data_clamp_current;
        NV_Ith_S(dqs, 2) = var_i_Stim__i_Stim_converted;
        NV_Ith_S(dqs, 3) = var_chaste_interface__environment__time_converted;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt>::Initialise(void)
{
    this->mSystemName = "pasek_simurda_christe_2006";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-79.709547);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(3.5486498e-05);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("i_Nas_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.1832558e-06);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("i_Nas_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.58232781);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("i_Nat_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.1832694e-06);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("i_Nat_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.58232717);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("i_Cas__Co");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.5436465e-06);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("i_Cas__C1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99994546);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("i_Cas__C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99994546);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("i_Cas__Ccast");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99570063);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("i_Cat__Co");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.543652e-06);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("i_Cat__C1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99994546);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("i_Cat__C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99994546);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("i_Cat__Ccast");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99570063);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("i_Ktos_rs_gate__rs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0023485072);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("i_Ktos_ss_gate__ss");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.98315843);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("i_Ktos_sss_gate__sss");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.6748337);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("i_Ktot_rt_gate__rt");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0023485094);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("i_Ktot_st_gate__st");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.98315865);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("i_Ktot_sst_gate__sst");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.67478532);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("i_Ksts_rsts_gate__rsts");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0031079213);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("i_Ksts_ssts_gate__ssts");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.30773393);

    // NV_Ith_S(rY, 22):
    this->mVariableNames.push_back("i_Kstt_rstt_gate__rstt");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0031079241);

    // NV_Ith_S(rY, 23):
    this->mVariableNames.push_back("i_Kstt_sstt_gate__sstt");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.30773368);

    // NV_Ith_S(rY, 24):
    this->mVariableNames.push_back("i_Kfs_qs_gate__qs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0034357356);

    // NV_Ith_S(rY, 25):
    this->mVariableNames.push_back("i_Kft_qt_gate__qt");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0034357175);

    // NV_Ith_S(rY, 26):
    this->mVariableNames.push_back("JCaSRrel__F1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.67606483);

    // NV_Ith_S(rY, 27):
    this->mVariableNames.push_back("JCaSRrel__F2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00038333331);

    // NV_Ith_S(rY, 28):
    this->mVariableNames.push_back("JCaSRrel__F3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(6.4516879e-11);

    // NV_Ith_S(rY, 29):
    this->mVariableNames.push_back("JCaSRrel__F4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.32355462);

    // NV_Ith_S(rY, 30):
    this->mVariableNames.push_back("CaSRup__CaSRup");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.22755058);

    // NV_Ith_S(rY, 31):
    this->mVariableNames.push_back("CaSRrel__CaSRrel");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.22638169);

    // NV_Ith_S(rY, 32):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(6.9435814);

    // NV_Ith_S(rY, 33):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(137.53311);

    // NV_Ith_S(rY, 34):
    this->mVariableNames.push_back("extracellular_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(140.01386);

    // NV_Ith_S(rY, 35):
    this->mVariableNames.push_back("extracellular_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.2271399);

    // NV_Ith_S(rY, 36):
    this->mVariableNames.push_back("extracellular_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(5.3627676);

    // NV_Ith_S(rY, 37):
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(4.3112114e-05);

    // NV_Ith_S(rY, 38):
    this->mVariableNames.push_back("ion_concentrations__BTRH");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.92804169);

    // NV_Ith_S(rY, 39):
    this->mVariableNames.push_back("ion_concentrations__BTRL");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.034317829);

    // NV_Ith_S(rY, 40):
    this->mVariableNames.push_back("Vmt__Vmt");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-79.709536);

    // mParameters[0]:
    this->mParameterNames.push_back("membrane_data_clamp_current_conductance");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[1]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_cm2");

    // mParameters[2]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_cm2");

    // mParameters[3]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("microA_per_cm2");

    // mParameters[4]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("milliS_per_cm2");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("membrane_capacitance");
    this->mDerivedQuantityUnits.push_back("microF");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_data_clamp_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellpasek_simurda_christe_2006FromCellMLCvodeDataClampOpt)

#endif // CHASTE_CVODE
