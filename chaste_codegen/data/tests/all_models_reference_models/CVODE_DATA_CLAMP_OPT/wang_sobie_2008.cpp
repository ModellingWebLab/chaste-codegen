#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: wang_model_2008
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: CvodeCellWithDataClampOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "wang_sobie_2008.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<38; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables(const Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables&);
    Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables& operator= (const Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables&);
    Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 38;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][38];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.038949423064193495 * var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[0] < 2){
                    double left = _lookup_table_0[i-1][0];
                    double right = _lookup_table_0[i+1][0];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 0 at ["<<i<<"][0] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[0] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[0] >= 2){
                    EXCEPTION("Lookup table 0 at ["<<i<<"][0] has non-finite value: " << val);
                }
                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = -1.0 + exp(0.038949423064193495 * var_chaste_interface__membrane__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[1] < 2){
                    double left = _lookup_table_0[i-1][1];
                    double right = _lookup_table_0[i+1][1];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[1] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[1] >= 2){
                    EXCEPTION("Lookup table 1 at ["<<i<<"][1] has non-finite value: " << val);
                }
                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.013632298072467722 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.025317124991725771 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + 0.10000000000000001 * exp(-0.025317124991725771 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.038949423064193495 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.1245 * exp(-0.0038949423064193493 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 13.0 - 13.0 * exp(-2.1025 * pow((1 + 0.068965517241379309 * var_chaste_interface__membrane__V), 2));

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.40000000000000002 * (1.0 + 0.69999999999999996 * exp(-160.0 * pow((1 + 0.025000000000000001 * var_chaste_interface__membrane__V), 2)) - 0.75 * exp(-pow((1 + 0.050000000000000003 * var_chaste_interface__membrane__V), 2))) * exp(1.2 + 0.10000000000000001 * var_chaste_interface__membrane__V) / (1.0 + 0.12 * exp(1.2 + 0.10000000000000001 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.050000000000000003 * exp(-0.92307692307692313 - 0.076923076923076927 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.038580246913580245 * pow((-1 + 0.20000000000000001 * var_chaste_interface__membrane__V), 2));

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-7.8688524590163942 - 0.16393442622950821 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.10000000000000001 + 5.4000000000000004 / (1.0 + exp(15.151515151515152 + 0.15151515151515152 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(10.0 + 0.15151515151515152 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 8.0 + 32.0 / (1.0 + exp(13.0 + 0.20000000000000001 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((var_chaste_interface__membrane__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0)) + ((var_chaste_interface__membrane__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__membrane__V))));

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((var_chaste_interface__membrane__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[16] < 2){
                    double left = _lookup_table_0[i-1][16];
                    double right = _lookup_table_0[i+1][16];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 16 at ["<<i<<"][16] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[16] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[16] >= 2){
                    EXCEPTION("Lookup table 16 at ["<<i<<"][16] has non-finite value: " << val);
                }
                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((var_chaste_interface__membrane__V < -40.0) ? (0.1212 * exp(-0.01052 * var_chaste_interface__membrane__V) / (1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__membrane__V))) : (0.29999999999999999 * exp(-2.5349999999999999e-7 * var_chaste_interface__membrane__V) / (1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__membrane__V)))) + ((var_chaste_interface__membrane__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__membrane__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V) - 3.4740000000000003e-5 * exp(-0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V))) : (0));

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((var_chaste_interface__membrane__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__membrane__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V) - 3.4740000000000003e-5 * exp(-0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V))) : (0));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[18] < 2){
                    double left = _lookup_table_0[i-1][18];
                    double right = _lookup_table_0[i+1][18];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 18 at ["<<i<<"][18] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[18] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[18] >= 2){
                    EXCEPTION("Lookup table 18 at ["<<i<<"][18] has non-finite value: " << val);
                }
                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__membrane__V) + ((fabs(47.130000000000003 + var_chaste_interface__membrane__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__V))));

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(47.130000000000003 + var_chaste_interface__membrane__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[20] < 2){
                    double left = _lookup_table_0[i-1][20];
                    double right = _lookup_table_0[i+1][20];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 20 at ["<<i<<"][20] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[20] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[20] >= 2){
                    EXCEPTION("Lookup table 20 at ["<<i<<"][20] has non-finite value: " << val);
                }
                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(1.0731000000000002 + 0.035770000000000003 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-1.8711 - 0.062370000000000002 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.00015200000000000001 * exp(0.2419047619047619 - 0.063492063492063489 * var_chaste_interface__membrane__V) / ((1.0 + 0.0067083000000000004 * exp(-8.3841269841269845 - 0.063492063492063489 * var_chaste_interface__membrane__V)) * (0.00015200000000000001 * exp(0.2419047619047619 - 0.063492063492063489 * var_chaste_interface__membrane__V) / (1.0 + 0.0067083000000000004 * exp(-8.3841269841269845 - 0.063492063492063489 * var_chaste_interface__membrane__V)) + 0.00095 * exp(8.3841269841269845 + 0.063492063492063489 * var_chaste_interface__membrane__V) / (1.0 + 0.051334999999999999 * exp(8.3841269841269845 + 0.063492063492063489 * var_chaste_interface__membrane__V))));

                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.00015200000000000001 * exp(-1.9285714285714286 - 0.14285714285714285 * var_chaste_interface__membrane__V) / (1.0 + 0.067083000000000004 * exp(-4.7857142857142856 - 0.14285714285714285 * var_chaste_interface__membrane__V)) + 0.00095 * exp(4.7857142857142856 + 0.14285714285714285 * var_chaste_interface__membrane__V) / (1.0 + 0.051334999999999999 * exp(4.7857142857142856 + 0.14285714285714285 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.013733 * exp(0.038198000000000003 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.090820999999999999 * exp(0.11695499999999999 + 0.023390999999999999 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][26] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 6.8899999999999994e-5 * exp(-0.041779999999999998 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][27] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.0064970000000000002 * exp(-0.16339999999999999 - 0.032680000000000001 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][28] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.01176 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][29] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.063100000000000003 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][30] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(26.5 + var_chaste_interface__membrane__V) < 7.8124999999817923e-7) ? (3.7604140624912359e-12 / (1.0 - exp(-9.9999999999766942e-8)) - 640000.00000149151 * (26.499999218749998 + var_chaste_interface__membrane__V) * (-3.7604140624912359e-12 / (1.0 - exp(9.9999999999766942e-8)) - 3.7604140624912359e-12 / (1.0 - exp(-9.9999999999766942e-8)))) : (4.8133299999999997e-6 * (26.5 + var_chaste_interface__membrane__V) / (1.0 - exp(-3.3919999999999999 - 0.128 * var_chaste_interface__membrane__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[31] < 2){
                    double left = _lookup_table_0[i-1][31];
                    double right = _lookup_table_0[i+1][31];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 31 at ["<<i<<"][31] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[31] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[31] >= 2){
                    EXCEPTION("Lookup table 31 at ["<<i<<"][31] has non-finite value: " << val);
                }
                _lookup_table_0[i][31] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-1.0069999999999999 - 0.037999999999999999 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][32] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-2.9220779220779218 - 0.12987012987012986 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][33] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 13.17 + 39.299999999999997 * exp(-0.086199999999999999 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][34] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 2.0579999999999998 + 0.49299999999999999 * exp(-0.062899999999999998 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][35] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(7.9298245614035094 + 0.17543859649122806 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][36] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1200.0 - 170.0 / (1.0 + exp(7.9298245614035094 + 0.17543859649122806 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][37] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[38];

    // Lookup tables
    double (*_lookup_table_0)[38];
    int _lookup_table_0_num_misshit_piecewise[38] = {0};

};

std::shared_ptr<Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables> Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> Cellwang_sobie_2008FromCellMLCvodeDataClampOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_amplitude_converted = -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__stim_duration = 0.5; // millisecond
        const double var_chaste_interface__membrane__stim_period = 2000.0; // millisecond
        const double var_chaste_interface__membrane__stim_start = 20.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude_converted),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellwang_sobie_2008FromCellMLCvodeDataClampOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellwang_sobie_2008FromCellMLCvodeDataClampOpt::Cellwang_sobie_2008FromCellMLCvodeDataClampOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCellWithDataClamp(
                pOdeSolver,
                35,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellwang_sobie_2008FromCellMLCvodeDataClampOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        NV_Ith_S(this->mParameters, 0) = 30000.0; // (var_membrane__Cli) [micromolar]
        NV_Ith_S(this->mParameters, 1) = 1000.0; // (var_membrane__Cao) [micromolar]
        NV_Ith_S(this->mParameters, 2) = 132000.0; // (var_membrane__Clo) [micromolar]
        NV_Ith_S(this->mParameters, 3) = 5400.0; // (var_membrane__Ko) [micromolar]
        NV_Ith_S(this->mParameters, 4) = 140000.0; // (var_membrane__Nao) [micromolar]
        NV_Ith_S(this->mParameters, 5) = 7.0; // (var_L_type_calcium_current__i_CaL_max) [picoA_per_picoF]
        NV_Ith_S(this->mParameters, 6) = 1.0; // (var_membrane__Cm) [microF_per_cm2]
        NV_Ith_S(this->mParameters, 7) = 0.0; // (var_membrane_data_clamp_current_conductance) [dimensionless]
        NV_Ith_S(this->mParameters, 8) = 10.0; // (var_fast_sodium_current__g_Na) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 9) = 0.1017; // (var_fast_transient_outward_potassium_current__g_Kto_f) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 10) = 0.23499999999999999; // (var_time_independent_potassium_current__g_K1) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 11) = 0.014999999999999999; // (var_non_inactivating_steady_state_potassium_current__g_Kss) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 12) = 1.1699999999999999; // (var_rapid_delayed_rectifier_potassium_current__g_Kr) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 13) = 0.045999999999999999; // (var_slow_delayed_rectifier_potassium_current__g_Ks) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 14) = 0.0047999999999999996; // (var_ultra_rapidly_activating_delayed_rectifier_potassium_current__g_Kur) [milliS_per_microF]
    }

    Cellwang_sobie_2008FromCellMLCvodeDataClampOpt::~Cellwang_sobie_2008FromCellMLCvodeDataClampOpt()
    {
    }

    AbstractLookupTableCollection* Cellwang_sobie_2008FromCellMLCvodeDataClampOpt::GetLookupTableCollection()
    {
        return Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables::Instance();
    }
    
    double Cellwang_sobie_2008FromCellMLCvodeDataClampOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__calcium_concentration__Cai_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.0002049
        double var_chaste_interface__calcium_concentration__Cass = NV_Ith_S(rY, 2);
        // Units: micromolar; Initial value: 0.1867
        double var_chaste_interface__L_type_calcium_current__O = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 4.4776e-12
        double var_chaste_interface__T_type_calcium_current_b_gate__b = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.0047
        double var_chaste_interface__T_type_calcium_current_g_gate__g = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.902
        double var_chaste_interface__sodium_concentration__Nai = NV_Ith_S(rY, 20);
        // Units: micromolar; Initial value: 21747.0
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.9606
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 0.9744
        double var_chaste_interface__potassium_concentration__Ki = NV_Ith_S(rY, 24);
        // Units: micromolar; Initial value: 136450.0
        double var_chaste_interface__fast_transient_outward_potassium_current__ato_f = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_transient_outward_potassium_current__ito_f = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 0.753
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.00052471
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.9866
        double var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 0.85
        double var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 0.0026
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 0.0021
        
        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_pump_current__i_pCa = 0.20000000000000001 * pow(var_calcium_concentration__Cai, 2) / (0.25 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL_converted = 0.19019 * (-63.0 + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__L_type_calcium_current__O; // uA_per_cm2
        const double var_T_type_calcium_current__i_CaT = 0.055 * (-50.0 + var_chaste_interface__membrane__V) * var_chaste_interface__T_type_calcium_current_b_gate__b * var_chaste_interface__T_type_calcium_current_g_gate__g; // picoA_per_picoF
        const double var_calcium_activated_chloride_current__i_ClCa = ((fabs(var_chaste_interface__membrane__V) < 2.5674321243523316e-6) ? (194747.11532096748 * (2.5674321243523316e-6 + var_chaste_interface__membrane__V) * (4.1314062499999994e-14 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-NV_Ith_S(mParameters, 0) + NV_Ith_S(mParameters, 2) * exp(9.9999999999999995e-8)) / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (-1.0 + exp(9.9999999999999995e-8))) + 4.1314062499999994e-14 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-NV_Ith_S(mParameters, 0) + NV_Ith_S(mParameters, 2) * exp(-9.9999999999999995e-8)) / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (-1.0 + exp(-9.9999999999999995e-8)))) - 4.1314062499999994e-14 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-NV_Ith_S(mParameters, 0) + NV_Ith_S(mParameters, 2) * exp(-9.9999999999999995e-8)) / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (-1.0 + exp(-9.9999999999999995e-8)))) : (1.6091588988130313e-8 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-NV_Ith_S(mParameters, 0) + NV_Ith_S(mParameters, 2) * _lt_0_row[0]) * var_chaste_interface__membrane__V / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (_lt_0_row[1])))); // picoA_per_picoF
        const double var_calcium_background_current__i_Cab = 0.00025000000000000001 * var_chaste_interface__membrane__V - 0.0032092901554404145 * log(NV_Ith_S(mParameters, 1) / var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_fast_transient_outward_potassium_current__E_K = 25.674321243523316 * log(NV_Ith_S(mParameters, 3) / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_potassium_current__i_Kto_f_converted = pow(var_chaste_interface__fast_transient_outward_potassium_current__ato_f, 6.5) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 9) * var_chaste_interface__fast_transient_outward_potassium_current__ito_f; // uA_per_cm2
        const double var_non_inactivating_steady_state_potassium_current__i_Kss_converted = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss * NV_Ith_S(mParameters, 11); // uA_per_cm2
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr_converted = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * NV_Ith_S(mParameters, 12); // uA_per_cm2
        const double var_slow_delayed_rectifier_potassium_current__i_Ks_converted = pow(var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs, 2) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 13); // uA_per_cm2
        const double var_fast_sodium_current__E_Na = 25.674321243523316 * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__sodium_concentration__Nai); // millivolt
        const double var_fast_sodium_current__i_Na_converted = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 8) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // uA_per_cm2
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__membrane__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NaCa = 907.67999999999995 * (pow(var_chaste_interface__sodium_concentration__Nai, 3) * NV_Ith_S(mParameters, 1) * _lt_0_row[2] - pow(NV_Ith_S(mParameters, 4), 3) * var_calcium_concentration__Cai * _lt_0_row[3]) / ((_lt_0_row[4]) * (1380.0 + NV_Ith_S(mParameters, 1)) * (669921875000000.0 + pow(NV_Ith_S(mParameters, 4), 3))); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = 0.88 * NV_Ith_S(mParameters, 3) / ((1.0 + 3043189.1166997822 * pow((1 / var_chaste_interface__sodium_concentration__Nai), 1.5)) * (1500.0 + NV_Ith_S(mParameters, 3)) * (1.0 + _lt_0_row[6] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * NV_Ith_S(mParameters, 4))) * _lt_0_row[5])); // picoA_per_picoF
        const double var_time_independent_potassium_current__i_K1_converted = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * NV_Ith_S(mParameters, 3) * NV_Ith_S(mParameters, 10) / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__membrane__V - 0.089599999999999999 * var_fast_transient_outward_potassium_current__E_K)) * (210.0 + NV_Ith_S(mParameters, 3))); // uA_per_cm2
        const double var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur_converted = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur * NV_Ith_S(mParameters, 14) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur; // uA_per_cm2
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_T_type_calcium_current__i_CaT + HeartConfig::Instance()->GetCapacitance() * var_calcium_activated_chloride_current__i_ClCa + HeartConfig::Instance()->GetCapacitance() * var_calcium_background_current__i_Cab + HeartConfig::Instance()->GetCapacitance() * var_calcium_pump_current__i_pCa + HeartConfig::Instance()->GetCapacitance() * var_sodium_background_current__i_Nab + HeartConfig::Instance()->GetCapacitance() * var_sodium_calcium_exchange_current__i_NaCa + HeartConfig::Instance()->GetCapacitance() * var_sodium_potassium_pump_current__i_NaK + var_L_type_calcium_current__i_CaL_converted + var_fast_sodium_current__i_Na_converted + var_fast_transient_outward_potassium_current__i_Kto_f_converted + var_non_inactivating_steady_state_potassium_current__i_Kss_converted + var_rapid_delayed_rectifier_potassium_current__i_Kr_converted + var_slow_delayed_rectifier_potassium_current__i_Ks_converted + var_time_independent_potassium_current__i_K1_converted + var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellwang_sobie_2008FromCellMLCvodeDataClampOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__calcium_concentration__Cai_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.0002049
        double var_chaste_interface__calcium_concentration__Cass = NV_Ith_S(rY, 2);
        // Units: micromolar; Initial value: 0.1867
        double var_chaste_interface__calcium_concentration__CaJSR = NV_Ith_S(rY, 3);
        // Units: micromolar; Initial value: 705.5417
        double var_chaste_interface__calcium_concentration__CaNSR = NV_Ith_S(rY, 4);
        // Units: micromolar; Initial value: 703.3063
        double var_chaste_interface__calcium_fluxes__P_RyR = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 2.8603e-14
        double var_chaste_interface__calcium_buffering__LTRPN_Ca = NV_Ith_S(rY, 6);
        // Units: micromolar; Initial value: 8.922
        double var_chaste_interface__calcium_buffering__HTRPN_Ca = NV_Ith_S(rY, 7);
        // Units: micromolar; Initial value: 66.0407
        double var_chaste_interface__ryanodine_receptors__P_O1 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.0011
        double var_chaste_interface__ryanodine_receptors__P_O2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 2.9799e-08
        double var_chaste_interface__ryanodine_receptors__P_C2 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.1003
        double var_chaste_interface__L_type_calcium_current__O = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 4.4776e-12
        double var_chaste_interface__L_type_calcium_current__C2 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.00016996
        double var_chaste_interface__L_type_calcium_current__C3 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 1.1754e-08
        double var_chaste_interface__L_type_calcium_current__C4 = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 6.1239e-10
        double var_chaste_interface__L_type_calcium_current__I1 = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 1.545e-09
        double var_chaste_interface__L_type_calcium_current__I2 = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 6.4226e-08
        double var_chaste_interface__L_type_calcium_current__I3 = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 6.5201e-07
        double var_chaste_interface__T_type_calcium_current_b_gate__b = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 0.0047
        double var_chaste_interface__T_type_calcium_current_g_gate__g = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.902
        double var_chaste_interface__sodium_concentration__Nai = NV_Ith_S(rY, 20);
        // Units: micromolar; Initial value: 21747.0
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.9606
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 0.9744
        double var_chaste_interface__potassium_concentration__Ki = NV_Ith_S(rY, 24);
        // Units: micromolar; Initial value: 136450.0
        double var_chaste_interface__fast_transient_outward_potassium_current__ato_f = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_transient_outward_potassium_current__ito_f = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 0.753
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.00052471
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.9866
        double var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 0.85
        double var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 0.0026
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 0.0021
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K1 = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 0.0011
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.00083641
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__I_K = NV_Ith_S(rY, 34);
        // Units: dimensionless; Initial value: 0.00043522

        // Lookup table indexing
        const bool _oob_0 = Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellwang_sobie_2008FromCellMLCvodeDataClampOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        double d_dt_chaste_interface_var_membrane__V;
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_L_type_calcium_current__gamma = 0.23324 * var_chaste_interface__calcium_concentration__Cass / (20.0 + var_chaste_interface__calcium_concentration__Cass); // per_millisecond
        const double d_dt_chaste_interface_var_calcium_buffering__HTRPN_Ca = -3.1999999999999999e-5 * var_chaste_interface__calcium_buffering__HTRPN_Ca + 0.0023700000000000001 * (70.0 - var_chaste_interface__calcium_buffering__HTRPN_Ca) * var_calcium_concentration__Cai; // micromolar / millisecond
        const double d_dt_chaste_interface_var_calcium_buffering__LTRPN_Ca = -0.019599999999999999 * var_chaste_interface__calcium_buffering__LTRPN_Ca + 0.0327 * (35.0 - var_chaste_interface__calcium_buffering__LTRPN_Ca) * var_calcium_concentration__Cai; // micromolar / millisecond
        const double var_calcium_fluxes__J_xfer = 0.125 * var_chaste_interface__calcium_concentration__Cass - 0.125 * var_calcium_concentration__Cai; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_leak = 2.088e-5 * var_chaste_interface__calcium_concentration__CaNSR - 2.088e-5 * var_calcium_concentration__Cai; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_up = 0.089999999999999997 * pow(var_calcium_concentration__Cai, 2) / (0.25 + pow(var_calcium_concentration__Cai, 2)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__Cai_converted = 0.001 * (-var_calcium_fluxes__J_up + 0.019599999999999999 * var_chaste_interface__calcium_buffering__LTRPN_Ca + 3.1999999999999999e-5 * var_chaste_interface__calcium_buffering__HTRPN_Ca - 0.0327 * (35.0 - var_chaste_interface__calcium_buffering__LTRPN_Ca) * var_calcium_concentration__Cai - 0.0023700000000000001 * (70.0 - var_chaste_interface__calcium_buffering__HTRPN_Ca) * var_calcium_concentration__Cai + var_calcium_fluxes__J_leak + var_calcium_fluxes__J_xfer) / (1.0 + 5.9499999999999993 / pow((0.23799999999999999 + var_calcium_concentration__Cai), 2)); // millimolar / millisecond
        const double var_calcium_pump_current__i_pCa = 0.20000000000000001 * pow(var_calcium_concentration__Cai, 2) / (0.25 + pow(var_calcium_concentration__Cai, 2)); // picoA_per_picoF
        const double var_L_type_calcium_current__Kpcf = _lt_0_row[7]; // per_millisecond
        const double var_L_type_calcium_current__alpha = _lt_0_row[8]; // per_millisecond
        const double var_L_type_calcium_current__beta = _lt_0_row[9]; // per_millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__C2 = -var_chaste_interface__L_type_calcium_current__C2 * var_L_type_calcium_current__beta + 2.0 * var_chaste_interface__L_type_calcium_current__C3 * var_L_type_calcium_current__beta + 4.0 * (1.0 - var_chaste_interface__L_type_calcium_current__C3 - var_chaste_interface__L_type_calcium_current__C4 - var_chaste_interface__L_type_calcium_current__I1 - var_chaste_interface__L_type_calcium_current__I2 - var_chaste_interface__L_type_calcium_current__I3 - var_chaste_interface__L_type_calcium_current__O - 2 * var_chaste_interface__L_type_calcium_current__C2) * var_L_type_calcium_current__alpha - 3.0 * var_chaste_interface__L_type_calcium_current__C2 * var_L_type_calcium_current__alpha; // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__C3 = 3.0 * var_chaste_interface__L_type_calcium_current__C2 * var_L_type_calcium_current__alpha + 3.0 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__beta - 2.0 * var_chaste_interface__L_type_calcium_current__C3 * var_L_type_calcium_current__alpha - 2.0 * var_chaste_interface__L_type_calcium_current__C3 * var_L_type_calcium_current__beta; // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__C4 = -var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__alpha + 2.0 * var_chaste_interface__L_type_calcium_current__C3 * var_L_type_calcium_current__alpha + 4.0 * var_chaste_interface__L_type_calcium_current__O * var_L_type_calcium_current__beta + 0.002 * var_chaste_interface__L_type_calcium_current__I3 * var_L_type_calcium_current__beta + 0.0080000000000000002 * var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__beta + 2.0000000000000002e-5 * var_chaste_interface__L_type_calcium_current__I1 * var_L_type_calcium_current__beta - 3.0 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__beta - 0.002 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__Kpcf - var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__Kpcf * var_L_type_calcium_current__gamma - 0.01 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__alpha * var_L_type_calcium_current__gamma; // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__I1 = -0.00050000000000000001 * var_chaste_interface__L_type_calcium_current__I1 + var_chaste_interface__L_type_calcium_current__O * var_L_type_calcium_current__gamma + 0.001 * var_chaste_interface__L_type_calcium_current__I3 * var_L_type_calcium_current__alpha - 0.001 * var_chaste_interface__L_type_calcium_current__I1 * var_L_type_calcium_current__Kpcf + 0.01 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__alpha * var_L_type_calcium_current__gamma - 0.040000000000000001 * var_chaste_interface__L_type_calcium_current__I1 * var_L_type_calcium_current__Kpcf * var_L_type_calcium_current__beta; // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__I2 = 0.00050000000000000001 * var_chaste_interface__L_type_calcium_current__I3 - var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__gamma + 0.001 * var_L_type_calcium_current__Kpcf * var_chaste_interface__L_type_calcium_current__O + 0.002 * var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__Kpcf - 0.001 * var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__alpha - 0.0080000000000000002 * var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__beta; // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__I3 = -0.00050000000000000001 * var_chaste_interface__L_type_calcium_current__I3 + var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__gamma + 0.001 * var_chaste_interface__L_type_calcium_current__I1 * var_L_type_calcium_current__Kpcf - 0.001 * var_chaste_interface__L_type_calcium_current__I3 * var_L_type_calcium_current__alpha - 0.002 * var_chaste_interface__L_type_calcium_current__I3 * var_L_type_calcium_current__beta + var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__Kpcf * var_L_type_calcium_current__gamma; // 1 / millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__O = 0.00050000000000000001 * var_chaste_interface__L_type_calcium_current__I1 + var_chaste_interface__L_type_calcium_current__C4 * var_L_type_calcium_current__alpha - var_chaste_interface__L_type_calcium_current__O * var_L_type_calcium_current__gamma + 0.001 * var_chaste_interface__L_type_calcium_current__I2 * var_L_type_calcium_current__alpha - 4.0 * var_chaste_interface__L_type_calcium_current__O * var_L_type_calcium_current__beta - 0.001 * var_L_type_calcium_current__Kpcf * var_chaste_interface__L_type_calcium_current__O; // 1 / millisecond
        const double var_L_type_calcium_current__i_CaL = 0.19019 * (-63.0 + var_chaste_interface__membrane__V) * var_chaste_interface__L_type_calcium_current__O; // picoA_per_picoF
        const double d_dt_chaste_interface_var_calcium_fluxes__P_RyR = -0.040000000000000001 * var_chaste_interface__calcium_fluxes__P_RyR - 0.10000000000000001 * var_L_type_calcium_current__i_CaL * _lt_0_row[10] / NV_Ith_S(mParameters, 5); // 1 / millisecond
        const double var_T_type_calcium_current__i_CaT = 0.055 * (-50.0 + var_chaste_interface__membrane__V) * var_chaste_interface__T_type_calcium_current_b_gate__b * var_chaste_interface__T_type_calcium_current_g_gate__g; // picoA_per_picoF
        const double d_dt_chaste_interface_var_T_type_calcium_current_b_gate__b = (-var_chaste_interface__T_type_calcium_current_b_gate__b + _lt_0_row[11]) / (_lt_0_row[12]); // 1 / millisecond
        const double d_dt_chaste_interface_var_T_type_calcium_current_g_gate__g = (-var_chaste_interface__T_type_calcium_current_g_gate__g + _lt_0_row[13]) / (_lt_0_row[14]); // 1 / millisecond
        const double var_calcium_background_current__i_Cab = 0.00025000000000000001 * var_chaste_interface__membrane__V - 0.0032092901554404145 * log(NV_Ith_S(mParameters, 1) / var_calcium_concentration__Cai); // picoA_per_picoF
        const double d_dt_chaste_interface_var_fast_sodium_current_h_gate__h = -(_lt_0_row[15]) * var_chaste_interface__fast_sodium_current_h_gate__h + _lt_0_row[16]; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_j_gate__j = -(_lt_0_row[17]) * var_chaste_interface__fast_sodium_current_j_gate__j + _lt_0_row[18]; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_m_gate__m = -(_lt_0_row[19]) * var_chaste_interface__fast_sodium_current_m_gate__m + _lt_0_row[20]; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_transient_outward_potassium_current__ato_f = 0.18064 * (1.0 - var_chaste_interface__fast_transient_outward_potassium_current__ato_f) * _lt_0_row[21] - 0.39560000000000001 * var_chaste_interface__fast_transient_outward_potassium_current__ato_f * _lt_0_row[22]; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_transient_outward_potassium_current__ito_f = (-var_chaste_interface__fast_transient_outward_potassium_current__ito_f + _lt_0_row[23]) * (_lt_0_row[24]); // 1 / millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaNSR = 0.00028598665395614868 * var_chaste_interface__calcium_concentration__CaJSR + 10.879885605338417 * var_calcium_fluxes__J_up - 0.00028598665395614868 * var_chaste_interface__calcium_concentration__CaNSR - 10.879885605338417 * var_calcium_fluxes__J_leak; // micromolar / millisecond
        const double var_fast_transient_outward_potassium_current__E_K = 25.674321243523316 * log(NV_Ith_S(mParameters, 3) / var_chaste_interface__potassium_concentration__Ki); // millivolt
        const double var_fast_transient_outward_potassium_current__i_Kto_f = pow(var_chaste_interface__fast_transient_outward_potassium_current__ato_f, 6.5) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 9) * var_chaste_interface__fast_transient_outward_potassium_current__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_potassium_current__i_Kss = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss * NV_Ith_S(mParameters, 11); // picoA_per_picoF
        const double var_rapid_delayed_rectifier_potassium_current__alpha_a1 = _lt_0_row[25]; // per_millisecond
        const double var_rapid_delayed_rectifier_potassium_current__alpha_i = _lt_0_row[26]; // per_millisecond
        const double var_rapid_delayed_rectifier_potassium_current__beta_a1 = _lt_0_row[27]; // per_millisecond
        const double var_rapid_delayed_rectifier_potassium_current__beta_i = _lt_0_row[28]; // per_millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__I_K = var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * var_rapid_delayed_rectifier_potassium_current__alpha_i - var_chaste_interface__rapid_delayed_rectifier_potassium_current__I_K * var_rapid_delayed_rectifier_potassium_current__beta_i; // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__O_K = var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 * var_rapid_delayed_rectifier_potassium_current__alpha_a1 + var_chaste_interface__rapid_delayed_rectifier_potassium_current__I_K * var_rapid_delayed_rectifier_potassium_current__beta_i - var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * var_rapid_delayed_rectifier_potassium_current__alpha_i - var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * var_rapid_delayed_rectifier_potassium_current__beta_a1; // 1 / millisecond
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * NV_Ith_S(mParameters, 12); // picoA_per_picoF
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__C_K1 = 0.036777999999999998 * var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 - 0.023761000000000001 * var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K1 + 0.022348 * (1.0 - var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K1 - var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 - var_chaste_interface__rapid_delayed_rectifier_potassium_current__I_K - var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K) * _lt_0_row[29] - 0.047002000000000002 * var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K1 * _lt_0_row[30]; // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__C_K2 = 0.023761000000000001 * var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K1 - 0.036777999999999998 * var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 + var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * var_rapid_delayed_rectifier_potassium_current__beta_a1 - var_chaste_interface__rapid_delayed_rectifier_potassium_current__C_K2 * var_rapid_delayed_rectifier_potassium_current__alpha_a1; // 1 / millisecond
        const double var_calcium_fluxes__J_rel = 0.45000000000000001 * (-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * (var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2) * var_chaste_interface__calcium_fluxes__P_RyR; // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaJSR = (-var_calcium_fluxes__J_rel + var_calcium_fluxes__J_xfer) / (1.0 + 18.75 / pow((1 + 0.00125 * var_chaste_interface__calcium_concentration__CaJSR), 2)); // micromolar / millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__Cass = (0.03904470618858593 * var_calcium_fluxes__J_rel - 74.269538621721864 * var_calcium_fluxes__J_xfer - 2.5979228081438217 * (-var_T_type_calcium_current__i_CaT + var_L_type_calcium_current__i_CaL + var_calcium_background_current__i_Cab + var_calcium_pump_current__i_pCa) * NV_Ith_S(mParameters, 6)) / (1.0 + 5.9499999999999993 / pow((0.23799999999999999 + var_chaste_interface__calcium_concentration__Cass), 2)); // micromolar / millisecond
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_C2 = 0.0089999999999999993 * var_chaste_interface__ryanodine_receptors__P_O1 - 0.00080000000000000004 * var_chaste_interface__ryanodine_receptors__P_C2; // 1 / millisecond
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O2 = -0.96499999999999997 * var_chaste_interface__ryanodine_receptors__P_O2 + 0.0040499999999999998 * pow(var_chaste_interface__calcium_concentration__Cass, 3.0) * var_chaste_interface__ryanodine_receptors__P_O1; // 1 / millisecond
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O1 = 0.00080000000000000004 * var_chaste_interface__ryanodine_receptors__P_C2 + 0.96499999999999997 * var_chaste_interface__ryanodine_receptors__P_O2 - 0.080249999999999988 * var_chaste_interface__ryanodine_receptors__P_O1 + 0.0060800000000000003 * pow(var_chaste_interface__calcium_concentration__Cass, 4.0) * (1.0 - var_chaste_interface__ryanodine_receptors__P_C2 - var_chaste_interface__ryanodine_receptors__P_O1 - var_chaste_interface__ryanodine_receptors__P_O2) - 0.0040499999999999998 * pow(var_chaste_interface__calcium_concentration__Cass, 3.0) * var_chaste_interface__ryanodine_receptors__P_O1; // 1 / millisecond
        const double d_dt_chaste_interface_var_slow_delayed_rectifier_potassium_current__nKs = (1.0 - var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs) * _lt_0_row[31] - 9.5333299999999997e-5 * var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs * _lt_0_row[32]; // 1 / millisecond
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs, 2) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 13); // picoA_per_picoF
        const double var_fast_sodium_current__E_Na = 25.674321243523316 * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__sodium_concentration__Nai); // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 8) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // picoA_per_picoF
        const double var_sodium_background_current__i_Nab = 0.0025999999999999999 * var_chaste_interface__membrane__V - 0.0025999999999999999 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NaCa = 907.67999999999995 * (pow(var_chaste_interface__sodium_concentration__Nai, 3) * NV_Ith_S(mParameters, 1) * _lt_0_row[2] - pow(NV_Ith_S(mParameters, 4), 3) * var_calcium_concentration__Cai * _lt_0_row[3]) / ((_lt_0_row[4]) * (1380.0 + NV_Ith_S(mParameters, 1)) * (669921875000000.0 + pow(NV_Ith_S(mParameters, 4), 3))); // picoA_per_picoF
        const double var_sodium_potassium_pump_current__i_NaK = 0.88 * NV_Ith_S(mParameters, 3) / ((1.0 + 3043189.1166997822 * pow((1 / var_chaste_interface__sodium_concentration__Nai), 1.5)) * (1500.0 + NV_Ith_S(mParameters, 3)) * (1.0 + _lt_0_row[6] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * NV_Ith_S(mParameters, 4))) * _lt_0_row[5])); // picoA_per_picoF
        const double d_dt_chaste_interface_var_sodium_concentration__Nai = 0.069959309196085367 * (-var_fast_sodium_current__i_Na - var_sodium_background_current__i_Nab - 3.0 * var_sodium_calcium_exchange_current__i_NaCa - 3.0 * var_sodium_potassium_pump_current__i_NaK) * NV_Ith_S(mParameters, 6); // micromolar / millisecond
        const double var_time_independent_potassium_current__i_K1 = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 3) * NV_Ith_S(mParameters, 10) / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__membrane__V - 0.089599999999999999 * var_fast_transient_outward_potassium_current__E_K)) * (210.0 + NV_Ith_S(mParameters, 3))); // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_potassium_current__ass = _lt_0_row[33]; // dimensionless
        const double d_dt_chaste_interface_var_non_inactivating_steady_state_potassium_current__aKss = (-var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss + var_ultra_rapidly_activating_delayed_rectifier_potassium_current__ass) / (_lt_0_row[34]); // 1 / millisecond
        const double var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur * NV_Ith_S(mParameters, 14) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur; // picoA_per_picoF
        const double d_dt_chaste_interface_var_potassium_concentration__Ki = 0.069959309196085367 * (-var_fast_transient_outward_potassium_current__i_Kto_f - var_non_inactivating_steady_state_potassium_current__i_Kss - var_rapid_delayed_rectifier_potassium_current__i_Kr - var_slow_delayed_rectifier_potassium_current__i_Ks - var_time_independent_potassium_current__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur + 2.0 * var_sodium_potassium_pump_current__i_NaK) * NV_Ith_S(mParameters, 6); // micromolar / millisecond
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_potassium_current__aur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur + var_ultra_rapidly_activating_delayed_rectifier_potassium_current__ass) / (_lt_0_row[35]); // 1 / millisecond
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_potassium_current__iur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur + _lt_0_row[36]) / (_lt_0_row[37]); // 1 / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_membrane__V = -((fabs(var_chaste_interface__membrane__V) < 2.5674321243523316e-6) ? (194747.11532096748 * (2.5674321243523316e-6 + var_chaste_interface__membrane__V) * (4.1314062499999994e-14 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-NV_Ith_S(mParameters, 0) + NV_Ith_S(mParameters, 2) * exp(9.9999999999999995e-8)) / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (-1.0 + exp(9.9999999999999995e-8))) + 4.1314062499999994e-14 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-NV_Ith_S(mParameters, 0) + NV_Ith_S(mParameters, 2) * exp(-9.9999999999999995e-8)) / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (-1.0 + exp(-9.9999999999999995e-8)))) - 4.1314062499999994e-14 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-NV_Ith_S(mParameters, 0) + NV_Ith_S(mParameters, 2) * exp(-9.9999999999999995e-8)) / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (-1.0 + exp(-9.9999999999999995e-8)))) : (1.6091588988130313e-8 * pow(var_chaste_interface__calcium_concentration__Cass, 3) * (-NV_Ith_S(mParameters, 0) + NV_Ith_S(mParameters, 2) * _lt_0_row[0]) * var_chaste_interface__membrane__V / (pow((1 + 0.25 * var_chaste_interface__calcium_concentration__Cass), 3) * (_lt_0_row[1])))) - var_L_type_calcium_current__i_CaL - var_T_type_calcium_current__i_CaT - var_calcium_background_current__i_Cab - var_calcium_pump_current__i_pCa - var_fast_sodium_current__i_Na - var_fast_transient_outward_potassium_current__i_Kto_f - var_non_inactivating_steady_state_potassium_current__i_Kss - var_rapid_delayed_rectifier_potassium_current__i_Kr - var_slow_delayed_rectifier_potassium_current__i_Ks - var_sodium_background_current__i_Nab - var_sodium_calcium_exchange_current__i_NaCa - var_sodium_potassium_pump_current__i_NaK - var_time_independent_potassium_current__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur - GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance() - (-GetExperimentalVoltageAtTimeT(var_chaste_interface__environment__time) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 7); // millivolt / millisecond
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_membrane__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_calcium_concentration__Cai_converted;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_calcium_concentration__Cass;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_calcium_concentration__CaJSR;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_calcium_concentration__CaNSR;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_calcium_fluxes__P_RyR;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_calcium_buffering__LTRPN_Ca;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_calcium_buffering__HTRPN_Ca;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_ryanodine_receptors__P_O1;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_ryanodine_receptors__P_O2;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_ryanodine_receptors__P_C2;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_L_type_calcium_current__O;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_L_type_calcium_current__C2;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_L_type_calcium_current__C3;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_L_type_calcium_current__C4;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_L_type_calcium_current__I1;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_L_type_calcium_current__I2;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_L_type_calcium_current__I3;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_T_type_calcium_current_b_gate__b;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_T_type_calcium_current_g_gate__g;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_sodium_concentration__Nai;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_fast_sodium_current_m_gate__m;
        NV_Ith_S(rDY,22) = d_dt_chaste_interface_var_fast_sodium_current_h_gate__h;
        NV_Ith_S(rDY,23) = d_dt_chaste_interface_var_fast_sodium_current_j_gate__j;
        NV_Ith_S(rDY,24) = d_dt_chaste_interface_var_potassium_concentration__Ki;
        NV_Ith_S(rDY,25) = d_dt_chaste_interface_var_fast_transient_outward_potassium_current__ato_f;
        NV_Ith_S(rDY,26) = d_dt_chaste_interface_var_fast_transient_outward_potassium_current__ito_f;
        NV_Ith_S(rDY,27) = d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_potassium_current__aur;
        NV_Ith_S(rDY,28) = d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_potassium_current__iur;
        NV_Ith_S(rDY,29) = d_dt_chaste_interface_var_non_inactivating_steady_state_potassium_current__aKss;
        NV_Ith_S(rDY,30) = d_dt_chaste_interface_var_slow_delayed_rectifier_potassium_current__nKs;
        NV_Ith_S(rDY,31) = d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__O_K;
        NV_Ith_S(rDY,32) = d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__C_K1;
        NV_Ith_S(rDY,33) = d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__C_K2;
        NV_Ith_S(rDY,34) = d_dt_chaste_interface_var_rapid_delayed_rectifier_potassium_current__I_K;
    }

    N_Vector Cellwang_sobie_2008FromCellMLCvodeDataClampOpt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -80.6475
        double var_chaste_interface__calcium_concentration__Cai_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.0002049
        double var_chaste_interface__L_type_calcium_current__O = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 4.4776e-12
        double var_chaste_interface__sodium_concentration__Nai = NV_Ith_S(rY, 20);
        // Units: micromolar; Initial value: 21747.0
        double var_chaste_interface__fast_sodium_current_m_gate__m = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_sodium_current_h_gate__h = NV_Ith_S(rY, 22);
        // Units: dimensionless; Initial value: 0.9606
        double var_chaste_interface__fast_sodium_current_j_gate__j = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 0.9744
        double var_chaste_interface__potassium_concentration__Ki = NV_Ith_S(rY, 24);
        // Units: micromolar; Initial value: 136450.0
        double var_chaste_interface__fast_transient_outward_potassium_current__ato_f = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.0032
        double var_chaste_interface__fast_transient_outward_potassium_current__ito_f = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 0.753
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.00052471
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.9866
        double var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 0.85
        double var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 0.0026
        double var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 0.0021
        

        // Mathematics
        const double var_L_type_calcium_current__E_CaL = 63.0; // millivolt
        const double var_L_type_calcium_current__g_CaL = 0.19019; // milliS_per_microF
        const double var_membrane__F = 96.5; // coulomb_per_millimole
        const double var_membrane__R = 8.3140000000000001; // joule_per_mole_kelvin
        const double var_membrane__T = 298.0; // kelvin
        const double var_L_type_calcium_current__i_CaL = (-var_L_type_calcium_current__E_CaL + var_chaste_interface__membrane__V) * var_chaste_interface__L_type_calcium_current__O * var_L_type_calcium_current__g_CaL; // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL_converted = HeartConfig::Instance()->GetCapacitance() * var_L_type_calcium_current__i_CaL; // uA_per_cm2
        const double var_membrane__i_stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        // Special handling of data clamp current here
        // (we want to save expense of calling the interpolation method if possible.)
        double var_chaste_interface__membrane_data_clamp_current = 0.0;
        if (mDataClampIsOn)
        {
            var_chaste_interface__membrane_data_clamp_current = (-GetExperimentalVoltageAtTimeT(var_chaste_interface__environment__time) + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 7); // uA_per_cm2
        }
        const double var_fast_transient_outward_potassium_current__E_K = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 3) / var_chaste_interface__potassium_concentration__Ki) / var_membrane__F; // millivolt
        const double var_fast_transient_outward_potassium_current__i_Kto_f = pow(var_chaste_interface__fast_transient_outward_potassium_current__ato_f, 6.5) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 9) * var_chaste_interface__fast_transient_outward_potassium_current__ito_f; // picoA_per_picoF
        const double var_fast_transient_outward_potassium_current__i_Kto_f_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_transient_outward_potassium_current__i_Kto_f; // uA_per_cm2
        const double var_non_inactivating_steady_state_potassium_current__i_Kss = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__non_inactivating_steady_state_potassium_current__aKss * NV_Ith_S(mParameters, 11); // picoA_per_picoF
        const double var_non_inactivating_steady_state_potassium_current__i_Kss_converted = HeartConfig::Instance()->GetCapacitance() * var_non_inactivating_steady_state_potassium_current__i_Kss; // uA_per_cm2
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__rapid_delayed_rectifier_potassium_current__O_K * NV_Ith_S(mParameters, 12); // picoA_per_picoF
        const double var_rapid_delayed_rectifier_potassium_current__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_rapid_delayed_rectifier_potassium_current__i_Kr; // uA_per_cm2
        const double var_slow_delayed_rectifier_potassium_current__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_potassium_current__nKs, 2) * (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 13); // picoA_per_picoF
        const double var_slow_delayed_rectifier_potassium_current__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_slow_delayed_rectifier_potassium_current__i_Ks; // uA_per_cm2
        const double var_fast_sodium_current__E_Na = var_membrane__R * var_membrane__T * log(NV_Ith_S(mParameters, 4) / var_chaste_interface__sodium_concentration__Nai) / var_membrane__F; // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 8) * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // picoA_per_picoF
        const double var_fast_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_time_independent_potassium_current__i_K1 = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * NV_Ith_S(mParameters, 3) * NV_Ith_S(mParameters, 10) / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__membrane__V - 0.089599999999999999 * var_fast_transient_outward_potassium_current__E_K)) * (210.0 + NV_Ith_S(mParameters, 3))); // picoA_per_picoF
        const double var_time_independent_potassium_current__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_time_independent_potassium_current__i_K1; // uA_per_cm2
        const double var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur = (-var_fast_transient_outward_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__aur * NV_Ith_S(mParameters, 14) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_potassium_current__iur; // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur_converted = HeartConfig::Instance()->GetCapacitance() * var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur; // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(12);
        NV_Ith_S(dqs, 0) = var_chaste_interface__calcium_concentration__Cai_converted;
        NV_Ith_S(dqs, 1) = var_L_type_calcium_current__i_CaL_converted;
        NV_Ith_S(dqs, 2) = var_chaste_interface__membrane_data_clamp_current;
        NV_Ith_S(dqs, 3) = var_fast_sodium_current__i_Na_converted;
        NV_Ith_S(dqs, 4) = var_fast_transient_outward_potassium_current__i_Kto_f_converted;
        NV_Ith_S(dqs, 5) = var_time_independent_potassium_current__i_K1_converted;
        NV_Ith_S(dqs, 6) = var_non_inactivating_steady_state_potassium_current__i_Kss_converted;
        NV_Ith_S(dqs, 7) = var_rapid_delayed_rectifier_potassium_current__i_Kr_converted;
        NV_Ith_S(dqs, 8) = var_slow_delayed_rectifier_potassium_current__i_Ks_converted;
        NV_Ith_S(dqs, 9) = var_membrane__i_stim_converted;
        NV_Ith_S(dqs, 10) = var_ultra_rapidly_activating_delayed_rectifier_potassium_current__i_Kur_converted;
        NV_Ith_S(dqs, 11) = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellwang_sobie_2008FromCellMLCvodeDataClampOpt>::Initialise(void)
{
    this->mSystemName = "wang_model_2008";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-80.6475);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0002049);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(0.1867);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(705.5417);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("NSR_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(703.3063);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("calcium_fluxes__P_RyR");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.8603e-14);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("calcium_buffering__LTRPN_Ca");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(8.922);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("calcium_buffering__HTRPN_Ca");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(66.0407);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("ryanodine_receptors__P_O1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0011);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("ryanodine_receptors__P_O2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.9799e-08);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("ryanodine_receptors__P_C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.1003);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("L_type_calcium_current__O");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(4.4776e-12);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("L_type_calcium_current__C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00016996);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("L_type_calcium_current__C3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.1754e-08);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("L_type_calcium_current__C4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(6.1239e-10);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("L_type_calcium_current__I1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.545e-09);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("L_type_calcium_current__I2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(6.4226e-08);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("L_type_calcium_current__I3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(6.5201e-07);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("T_type_calcium_current_b_gate__b");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0047);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("T_type_calcium_current_g_gate__g");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.902);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(21747.0);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0032);

    // NV_Ith_S(rY, 22):
    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9606);

    // NV_Ith_S(rY, 23):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9744);

    // NV_Ith_S(rY, 24):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(136450.0);

    // NV_Ith_S(rY, 25):
    this->mVariableNames.push_back("fast_transient_outward_potassium_current__ato_f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0032);

    // NV_Ith_S(rY, 26):
    this->mVariableNames.push_back("fast_transient_outward_potassium_current__ito_f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.753);

    // NV_Ith_S(rY, 27):
    this->mVariableNames.push_back("ultra_rapidly_activating_delayed_rectifier_potassium_current__aur");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00052471);

    // NV_Ith_S(rY, 28):
    this->mVariableNames.push_back("ultra_rapidly_activating_delayed_rectifier_potassium_current__iur");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9866);

    // NV_Ith_S(rY, 29):
    this->mVariableNames.push_back("non_inactivating_steady_state_potassium_current__aKss");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.85);

    // NV_Ith_S(rY, 30):
    this->mVariableNames.push_back("slow_delayed_rectifier_potassium_current__nKs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0026);

    // NV_Ith_S(rY, 31):
    this->mVariableNames.push_back("rapid_delayed_rectifier_potassium_current__O_K");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0021);

    // NV_Ith_S(rY, 32):
    this->mVariableNames.push_back("rapid_delayed_rectifier_potassium_current__C_K1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0011);

    // NV_Ith_S(rY, 33):
    this->mVariableNames.push_back("rapid_delayed_rectifier_potassium_current__C_K2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00083641);

    // NV_Ith_S(rY, 34):
    this->mVariableNames.push_back("rapid_delayed_rectifier_potassium_current__I_K");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00043522);

    // mParameters[0]:
    this->mParameterNames.push_back("cytosolic_chloride_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[1]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[2]:
    this->mParameterNames.push_back("extracellular_chloride_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[5]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("picoA_per_picoF");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_capacitance");
    this->mParameterUnits.push_back("microF_per_cm2");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_data_clamp_current_conductance");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_fast_transient_outward_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_non_inactivating_steady_state_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_ultrarapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_concentration");
    this->mDerivedQuantityUnits.push_back("millimolar");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_data_clamp_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_fast_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_non_inactivating_steady_state_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_ultrarapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellwang_sobie_2008FromCellMLCvodeDataClampOpt)

#endif // CHASTE_CVODE
