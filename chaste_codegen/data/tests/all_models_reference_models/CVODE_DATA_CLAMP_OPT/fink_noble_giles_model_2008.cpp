#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: fink_noble_giles_model_2008
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: CvodeCellWithDataClampOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "fink_noble_giles_model_2008.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<28; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__cell__V)
    {
        const double _offset_0 = var_chaste_interface__cell__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__cell__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__cell__V>mTableMaxs[0] || var_chaste_interface__cell__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables(const Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables&);
    Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables& operator= (const Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables&);
    Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 28;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][28];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(4.1806020066889626 - 0.16722408026755853 * var_chaste_interface__cell__V);

                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.013101861787960915 * var_chaste_interface__cell__V);

                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.024332029034784559 * var_chaste_interface__cell__V);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + 0.10000000000000001 * exp(-0.024332029034784559 * var_chaste_interface__cell__V);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + 0.035299999999999998 * exp(-0.037433890822745473 * var_chaste_interface__cell__V) + 0.1245 * exp(-0.0037433890822745472 * var_chaste_interface__cell__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-1.1230167246823641 + 0.074867781645490947 * var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[5] < 2){
                    double left = _lookup_table_0[i-1][5];
                    double right = _lookup_table_0[i+1][5];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 5 at ["<<i<<"][5] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[5] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[5] >= 2){
                    EXCEPTION("Lookup table 5 at ["<<i<<"][5] has non-finite value: " << val);
                }
                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = -1.0 + exp(-1.1230167246823641 + 0.074867781645490947 * var_chaste_interface__cell__V);
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[6] < 2){
                    double left = _lookup_table_0[i-1][6];
                    double right = _lookup_table_0[i+1][6];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 6 at ["<<i<<"][6] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[6] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[6] >= 2){
                    EXCEPTION("Lookup table 6 at ["<<i<<"][6] has non-finite value: " << val);
                }
                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(0.66666666666666663 - 0.13333333333333333 * var_chaste_interface__cell__V));

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(2.5 - 0.050000000000000003 * var_chaste_interface__cell__V)) + 1.3999999999999999 * (0.25 + 1.3999999999999999 / (1.0 + exp(-2.6923076923076925 - 0.076923076923076927 * var_chaste_interface__cell__V))) / (1.0 + exp(1.0 + 0.20000000000000001 * var_chaste_interface__cell__V));

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.75 / (1.0 + exp(5.0 + 0.14285714285714285 * var_chaste_interface__cell__V));

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 40.0 / (1.0 + exp(3.0 + 0.10000000000000001 * var_chaste_interface__cell__V)) + 15.5 / (1.0 + exp(2.5 - 0.10000000000000001 * var_chaste_interface__cell__V)) + 281.0 * exp(-3.0375000000000001 * pow((1 + 0.037037037037037035 * var_chaste_interface__cell__V), 2));

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(2.8571428571428572 + 0.14285714285714285 * var_chaste_interface__cell__V));

                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 5.0 + 50.0 / (1.0 + exp(1.3 - 0.10000000000000001 * var_chaste_interface__cell__V)) + 45.0 / (1.0 + exp(3.0 + 0.10000000000000001 * var_chaste_interface__cell__V)) + 275.625 * exp(-3.2400000000000002 * pow((1 + 0.037037037037037035 * var_chaste_interface__cell__V), 2));

                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-1.5790000000000006 + 0.0112 * var_chaste_interface__cell__V);

                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-3.8160000000000025 + 0.036499999999999998 * var_chaste_interface__cell__V);

                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.87200000000000344 + 0.0223 * var_chaste_interface__cell__V);

                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-2.0190000000000001 - 0.060299999999999999 * var_chaste_interface__cell__V);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-8.3940000000000019 - 0.039899999999999998 * var_chaste_interface__cell__V);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-3.1820000000000022 - 0.031199999999999999 * var_chaste_interface__cell__V);

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(-0.35714285714285715 - 0.071428571428571425 * var_chaste_interface__cell__V));

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 80.0 + 1400.0 / (sqrt(1.0 + exp(0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__cell__V)) * (1.0 + exp(-2.3333333333333335 + 0.066666666666666666 * var_chaste_interface__cell__V)));

                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / pow((1.0 + exp(-6.2967884828349945 - 0.11074197120708749 * var_chaste_interface__cell__V)), 2);

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.10000000000000001 / (1.0 + exp(7.0 + 0.20000000000000001 * var_chaste_interface__cell__V)) + 0.10000000000000001 / (1.0 + exp(-0.25 + 0.0050000000000000001 * var_chaste_interface__cell__V));

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-12.0 - 0.20000000000000001 * var_chaste_interface__cell__V);

                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(3.3333333333333335 - 0.16666666666666666 * var_chaste_interface__cell__V));

                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.80000000000000004 + 9.5 * exp(-0.88888888888888884 * pow((1 + 0.025000000000000001 * var_chaste_interface__cell__V), 2));

                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (1.0 + exp(4.0 + 0.20000000000000001 * var_chaste_interface__cell__V));

                _lookup_table_0[i][26] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__cell__V = mTableMins[0] + i*mTableSteps[0];
                double val = 3.0 + 5.0 / (1.0 + exp(-4.0 + 0.20000000000000001 * var_chaste_interface__cell__V)) + 85.0 * exp(-6.328125 * pow((1 + 0.022222222222222223 * var_chaste_interface__cell__V), 2));

                _lookup_table_0[i][27] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[28];

    // Lookup tables
    double (*_lookup_table_0)[28];
    int _lookup_table_0_num_misshit_piecewise[28] = {0};

};

std::shared_ptr<Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables> Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -11.999999999999998 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_chaste_interface__cell__stim_period = 1000.0; // millisecond
        const double var_chaste_interface__cell__stim_start = 100.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt::Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCellWithDataClamp(
                pOdeSolver,
                27,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        NV_Ith_S(this->mParameters, 0) = 0.00036000000000000002; // (var_Ileak_Iup_Ixfer__Vol_leak) [per_millisecond]
        NV_Ith_S(this->mParameters, 1) = 0.30599999999999999; // (var_Irel__Vol_rel) [per_millisecond]
        NV_Ith_S(this->mParameters, 2) = 0.0063749999999999996; // (var_Ileak_Iup_Ixfer__Vmax_up) [millimolar_per_millisecond]
        NV_Ith_S(this->mParameters, 3) = 0.115; // (var_cell__Cm) [nanoF]
        NV_Ith_S(this->mParameters, 4) = 1.0; // (var_Na__conc_clamp) [dimensionless]
        NV_Ith_S(this->mParameters, 5) = 2.0; // (var_Environment__Ca_o) [millimolar]
        NV_Ith_S(this->mParameters, 6) = 5.4000000000000004; // (var_Environment__K_o) [millimolar]
        NV_Ith_S(this->mParameters, 7) = 140.0; // (var_Environment__Na_o) [millimolar]
        NV_Ith_S(this->mParameters, 8) = 2.0000000000000002e-5; // (var_ICaL__g_CaL) [litre_per_farad_millisecond]
        NV_Ith_S(this->mParameters, 9) = 0.0; // (var_membrane_data_clamp_current_conductance) [dimensionless]
        NV_Ith_S(this->mParameters, 10) = 11.0; // (var_INa__g_Na) [microS_per_nanoF]
        NV_Ith_S(this->mParameters, 11) = 0; // (var_INa__perc_reduced_inact_for_IpNa) [dimensionless]
        NV_Ith_S(this->mParameters, 12) = 0; // (var_INa__shift_INa_inact) [millivolt]
        NV_Ith_S(this->mParameters, 13) = 0.68210000000000004; // (var_IK1__g_K1_0) [microS_per_nanoF]
        NV_Ith_S(this->mParameters, 14) = 0.024; // (var_IKr__g_Kr_0) [microS_per_nanoF]
        NV_Ith_S(this->mParameters, 15) = 0.039199999999999999; // (var_IKs__g_Ks) [microS_per_nanoF]
        NV_Ith_S(this->mParameters, 16) = 200.0; // (var_INaCa__K_NaCa) [nanoA_per_nanoF]
        NV_Ith_S(this->mParameters, 17) = 0.20000000000000001; // (var_Ito__g_to) [microS_per_nanoF]
    }

    Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt::~Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt()
    {
    }

    AbstractLookupTableCollection* Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt::GetLookupTableCollection()
    {
        return Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables::Instance();
    }
    
    double Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__Ca__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.0001092
        double var_chaste_interface__iKr_Markov__Or4 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.014
        double var_chaste_interface__iKs_Xs_gate__Xs = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ito_r_gate__r = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 2.11e-08
        double var_chaste_interface__iNa_m_gate__m = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 5.06e-06
        double var_chaste_interface__iCaL_f_gate__f = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.9995
        double var_chaste_interface__iCaL_fCass_gate__fCass = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ca__Ca_ss = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 0.0001893
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 25);
        // Units: millimolar; Initial value: 7.940167
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 26);
        // Units: millimolar; Initial value: 141.0167
        
        // Lookup table indexing
        const bool _oob_0 = Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        const double var_reversal_potentials__E_K = 26.713760659695652 * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__K__K_i); // millivolt
        const double var_reversal_potentials__E_Na = 26.713760659695652 * log(NV_Ith_S(mParameters, 7) / var_chaste_interface__Na__Na_i); // millivolt
        const double var_cell__i_tot = 0.00076360000000000002 * var_chaste_interface__cell__V - 0.00029 * var_reversal_potentials__E_Na - 0.0063258185242159298 * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__Ca__Ca_i) + 0.061899999999999997 * var_chaste_interface__Ca__Ca_i / (0.00050000000000000001 + var_chaste_interface__Ca__Ca_i) + 0.0097300000000000008 * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) / (_lt_0_row[0]) + pow(var_chaste_interface__iKs_Xs_gate__Xs, 2) * (-26.713760659695652 * log((0.029999999999999999 * NV_Ith_S(mParameters, 7) + NV_Ith_S(mParameters, 6)) / (0.029999999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i)) + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 15) + (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 17) * var_chaste_interface__ito_r_gate__r * var_chaste_interface__ito_s_gate__s + 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * (0.11619999999999997 / (1.0 + 0.036532500000000002 / exp(0.11701098901098901 * var_reversal_potentials__E_K - 0.10989010989010989 * var_chaste_interface__cell__V)) + 0.88380000000000003 * pow((1.0 + 0.079111111111111104 / exp(0.053239999999999996 * var_reversal_potentials__E_K - 0.050000000000000003 * var_chaste_interface__cell__V)), 2) / (pow((1.0 + 0.079111111111111104 / exp(0.053239999999999996 * var_reversal_potentials__E_K - 0.050000000000000003 * var_chaste_interface__cell__V)), 3) + 2.0875714285714286 / exp(-0.059333333333333335 + 0.22183333333333333 * var_reversal_potentials__E_K - 0.20833333333333334 * var_chaste_interface__cell__V) + 0.012714285714285714 / exp(0.005915555555555555 * var_reversal_potentials__E_K - 0.0055555555555555558 * var_chaste_interface__cell__V))) * NV_Ith_S(mParameters, 13) + 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 14) * var_chaste_interface__iKr_Markov__Or4 + (pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 5) * _lt_0_row[1] - 2.5 * pow(NV_Ith_S(mParameters, 7), 3) * var_chaste_interface__Ca__Ca_i * _lt_0_row[2]) * NV_Ith_S(mParameters, 16) / ((_lt_0_row[3]) * (669921.875 + pow(NV_Ith_S(mParameters, 7), 3)) * (1.3799999999999999 + NV_Ith_S(mParameters, 5))) + pow(var_chaste_interface__iNa_m_gate__m, 3) * (-var_reversal_potentials__E_Na + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 10) * var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j + 1.2969999999999999 * NV_Ith_S(mParameters, 6) * var_chaste_interface__Na__Na_i / ((1.0 + NV_Ith_S(mParameters, 6)) * (40.0 + var_chaste_interface__Na__Na_i) * (_lt_0_row[4])) + ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356880329828957e-6) ? (374338.90822798351 * (-14.999998664311967 + var_chaste_interface__cell__V) * (0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(9.9999999999858739e-8)) + 0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) - 0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) : (14447.286958825251 * (-15.0 + var_chaste_interface__cell__V) * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (_lt_0_row[6]))); // nanoA_per_nanoF
        const double var_chaste_interface__i_ionic = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_cell__i_tot; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt::EvaluateYDerivatives(double var_chaste_interface__Environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__Ca__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.0001092
        double var_chaste_interface__iKr_Markov__Cr1 = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.9786
        double var_chaste_interface__iKr_Markov__Cr2 = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.0031
        double var_chaste_interface__iKr_Markov__Cr3 = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.0029
        double var_chaste_interface__iKr_Markov__Or4 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.014
        double var_chaste_interface__iKr_Markov__Ir5 = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.0014
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr1 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr2 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BCr3 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__iKr_Markov_Sotalol_block__BIr5 = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__iKs_Xs_gate__Xs = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ito_r_gate__r = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 2.11e-08
        double var_chaste_interface__iNa_m_gate__m = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 5.06e-06
        double var_chaste_interface__iCaL_f_gate__f = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.9995
        double var_chaste_interface__iCaL_fCass_gate__fCass = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ca__Ca_SR = NV_Ith_S(rY, 22);
        // Units: millimolar; Initial value: 2.7656
        double var_chaste_interface__Ca__Ca_ss = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 0.0001893
        double var_chaste_interface__Irel__R_prime = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 0.9864
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 25);
        // Units: millimolar; Initial value: 7.940167
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 26);
        // Units: millimolar; Initial value: 141.0167

        // Lookup table indexing
        const bool _oob_0 = Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        double d_dt_chaste_interface_var_cell__V;
        const double var_Ileak_Iup_Ixfer__i_leak = (-var_chaste_interface__Ca__Ca_i + var_chaste_interface__Ca__Ca_SR) * NV_Ith_S(mParameters, 0); // millimolar_per_millisecond
        const double var_Ileak_Iup_Ixfer__i_up = NV_Ith_S(mParameters, 2) / (1.0 + 6.2499999999999997e-8 / pow(var_chaste_interface__Ca__Ca_i, 2)); // millimolar_per_millisecond
        const double var_Ileak_Iup_Ixfer__i_xfer = 0.0038 * var_chaste_interface__Ca__Ca_ss - 0.0038 * var_chaste_interface__Ca__Ca_i; // millimolar_per_millisecond
        const double var_IpCa__i_p_Ca = 0.061899999999999997 * var_chaste_interface__Ca__Ca_i / (0.00050000000000000001 + var_chaste_interface__Ca__Ca_i); // nanoA_per_nanoF
        const double var_Irel__kcasr = 2.5 - 1.5 / (1.0 + 2.25 / pow(var_chaste_interface__Ca__Ca_SR, 2)); // dimensionless
        const double var_Irel__i_rel = 0.14999999999999999 * pow(var_chaste_interface__Ca__Ca_ss, 2) * (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_SR) * var_chaste_interface__Irel__R_prime * NV_Ith_S(mParameters, 1) / ((0.059999999999999998 + 0.14999999999999999 * pow(var_chaste_interface__Ca__Ca_ss, 2) / var_Irel__kcasr) * var_Irel__kcasr); // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_Ca__Ca_SR = (-var_Ileak_Iup_Ixfer__i_leak - var_Irel__i_rel + var_Ileak_Iup_Ixfer__i_up) / (1.0 + 3.0 / pow((0.29999999999999999 + var_chaste_interface__Ca__Ca_SR), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_Irel__R_prime = 0.0050000000000000001 - 0.0050000000000000001 * var_chaste_interface__Irel__R_prime - 0.044999999999999998 * var_chaste_interface__Ca__Ca_ss * var_chaste_interface__Irel__R_prime * var_Irel__kcasr; // 1 / millisecond
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 5) * _lt_0_row[1] - 2.5 * pow(NV_Ith_S(mParameters, 7), 3) * var_chaste_interface__Ca__Ca_i * _lt_0_row[2]) * NV_Ith_S(mParameters, 16) / ((_lt_0_row[3]) * (669921.875 + pow(NV_Ith_S(mParameters, 7), 3)) * (1.3799999999999999 + NV_Ith_S(mParameters, 5))); // nanoA_per_nanoF
        const double var_INaK__i_NaK = 1.2969999999999999 * NV_Ith_S(mParameters, 6) * var_chaste_interface__Na__Na_i / ((1.0 + NV_Ith_S(mParameters, 6)) * (40.0 + var_chaste_interface__Na__Na_i) * (_lt_0_row[4])); // nanoA_per_nanoF
        const double var_cell__i_Stim = 1.0000000000000002 * GetIntracellularAreaStimulus(var_chaste_interface__Environment__time) / HeartConfig::Instance()->GetCapacitance(); // nanoA_per_nanoF
        const double d_dt_chaste_interface_var_iCaL_d_gate__d = (-var_chaste_interface__iCaL_d_gate__d + _lt_0_row[7]) / (_lt_0_row[8]); // 1 / millisecond
        const double d_dt_chaste_interface_var_iCaL_f2_gate__f2 = (0.25 - var_chaste_interface__iCaL_f2_gate__f2 + _lt_0_row[9]) / (_lt_0_row[10]); // 1 / millisecond
        const double d_dt_chaste_interface_var_iCaL_fCass_gate__fCass = (0.59999999999999998 - var_chaste_interface__iCaL_fCass_gate__fCass + 0.40000000000000002 / (1.0 + 399.99999999999994 * pow(var_chaste_interface__Ca__Ca_ss, 2))) / (2.0 + 80.0 / (1.0 + 399.99999999999994 * pow(var_chaste_interface__Ca__Ca_ss, 2))); // 1 / millisecond
        const double var_ICaL__i_CaL = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356880329828957e-6) ? (374338.90822798351 * (-14.999998664311967 + var_chaste_interface__cell__V) * (0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(9.9999999999858739e-8)) + 0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) - 0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) : (14447.286958825251 * (-15.0 + var_chaste_interface__cell__V) * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (_lt_0_row[6]))); // nanoA_per_nanoF
        const double d_dt_chaste_interface_var_Ca__Ca_ss = (20.007315288953912 * var_Irel__i_rel - 300.0 * var_Ileak_Iup_Ixfer__i_xfer - 0.094772024954610332 * var_ICaL__i_CaL * NV_Ith_S(mParameters, 3)) / (1.0 + 0.0001 / pow((0.00025000000000000001 + var_chaste_interface__Ca__Ca_ss), 2)); // millimolar / millisecond
        const double d_dt_chaste_interface_var_iCaL_f_gate__f = (-var_chaste_interface__iCaL_f_gate__f + _lt_0_row[11]) / (_lt_0_row[12]); // 1 / millisecond
        const double var_iKr_Markov__alpha_xr1 = _lt_0_row[13]; // per_millisecond
        const double var_iKr_Markov__alpha_xr2 = exp(-3.1680000000000028); // per_millisecond
        const double var_iKr_Markov__alpha_xr3 = _lt_0_row[14]; // per_millisecond
        const double var_iKr_Markov__alpha_xr4 = 1.9631681698237122 * pow((1 / NV_Ith_S(mParameters, 6)), 0.40000000000000002) * _lt_0_row[15]; // per_millisecond
        const double var_iKr_Markov__beta_xr1 = _lt_0_row[16]; // per_millisecond
        const double d_dt_chaste_interface_var_iKr_Markov__Cr1 = var_chaste_interface__iKr_Markov__Cr2 * var_iKr_Markov__beta_xr1 - var_chaste_interface__iKr_Markov__Cr1 * var_iKr_Markov__alpha_xr1; // 1 / millisecond
        const double var_iKr_Markov__beta_xr2 = exp(-2.5140000000000011); // per_millisecond
        const double d_dt_chaste_interface_var_iKr_Markov__Cr2 = var_chaste_interface__iKr_Markov__Cr1 * var_iKr_Markov__alpha_xr1 + var_chaste_interface__iKr_Markov__Cr3 * var_iKr_Markov__beta_xr2 - (var_iKr_Markov__alpha_xr2 + var_iKr_Markov__beta_xr1) * var_chaste_interface__iKr_Markov__Cr2; // 1 / millisecond
        const double var_iKr_Markov__beta_xr3 = _lt_0_row[17]; // per_millisecond
        const double d_dt_chaste_interface_var_iKr_Markov__Cr3 = var_chaste_interface__iKr_Markov__Cr2 * var_iKr_Markov__alpha_xr2 + var_chaste_interface__iKr_Markov__Or4 * var_iKr_Markov__beta_xr3 - (var_iKr_Markov__alpha_xr3 + var_iKr_Markov__beta_xr2) * var_chaste_interface__iKr_Markov__Cr3; // 1 / millisecond
        const double var_iKr_Markov__beta_xr4 = _lt_0_row[18]; // per_millisecond
        const double d_dt_chaste_interface_var_iKr_Markov__Ir5 = var_chaste_interface__iKr_Markov__Or4 * var_iKr_Markov__alpha_xr4 - var_chaste_interface__iKr_Markov__Ir5 * var_iKr_Markov__beta_xr4; // 1 / millisecond
        const double d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr1 = var_iKr_Markov__beta_xr1 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr2 - var_iKr_Markov__alpha_xr1 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr1; // 1 / millisecond
        const double d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr2 = var_iKr_Markov__alpha_xr1 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr1 + var_iKr_Markov__beta_xr2 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr3 - (var_iKr_Markov__alpha_xr2 + var_iKr_Markov__beta_xr1) * var_chaste_interface__iKr_Markov_Sotalol_block__BCr2; // 1 / millisecond
        const double d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr3 = var_iKr_Markov__alpha_xr2 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr2 + var_iKr_Markov__beta_xr3 * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 - (var_iKr_Markov__alpha_xr3 + var_iKr_Markov__beta_xr2) * var_chaste_interface__iKr_Markov_Sotalol_block__BCr3; // 1 / millisecond
        const double d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BIr5 = var_iKr_Markov__alpha_xr4 * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 - var_iKr_Markov__beta_xr4 * var_chaste_interface__iKr_Markov_Sotalol_block__BIr5; // 1 / millisecond
        const double var_iKr_Markov_Sotalol_block__OtoB = 0; // per_millisecond
        const double var_iKr_Markov_Sotalol_block__BtoO = 0.00125 * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4; // per_millisecond
        const double d_dt_chaste_interface_var_iKr_Markov__Or4 = -var_iKr_Markov_Sotalol_block__OtoB + var_chaste_interface__iKr_Markov__Cr3 * var_iKr_Markov__alpha_xr3 + var_chaste_interface__iKr_Markov__Ir5 * var_iKr_Markov__beta_xr4 - (var_iKr_Markov__alpha_xr4 + var_iKr_Markov__beta_xr3) * var_chaste_interface__iKr_Markov__Or4 + var_iKr_Markov_Sotalol_block__BtoO; // 1 / millisecond
        const double d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BOr4 = -var_iKr_Markov_Sotalol_block__BtoO + var_iKr_Markov__alpha_xr3 * var_chaste_interface__iKr_Markov_Sotalol_block__BCr3 + var_iKr_Markov__beta_xr4 * var_chaste_interface__iKr_Markov_Sotalol_block__BIr5 - (var_iKr_Markov__alpha_xr4 + var_iKr_Markov__beta_xr3) * var_chaste_interface__iKr_Markov_Sotalol_block__BOr4 + var_iKr_Markov_Sotalol_block__OtoB; // 1 / millisecond
        const double d_dt_chaste_interface_var_iKs_Xs_gate__Xs = (-var_chaste_interface__iKs_Xs_gate__Xs + _lt_0_row[19]) / (_lt_0_row[20]); // 1 / millisecond
        const double d_dt_chaste_interface_var_iNa_h_gate__h = (((var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 12)) ? (0.057000000000000002 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 12) - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)) + ((var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 12)) ? (310000.0 * exp(0.34849999999999998 * var_chaste_interface__cell__V - 0.34849999999999998 * NV_Ith_S(mParameters, 12)) + 2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * NV_Ith_S(mParameters, 12))) : (5.9230769230769234 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 12) - 0.0900900900900901 * var_chaste_interface__cell__V))))) * (-var_chaste_interface__iNa_h_gate__h + 0.01 * NV_Ith_S(mParameters, 11) + (1.0 - 0.01 * NV_Ith_S(mParameters, 11)) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__cell__V - 0.13458950201884254 * NV_Ith_S(mParameters, 12))), 2)); // 1 / millisecond
        const double d_dt_chaste_interface_var_iNa_j_gate__j = (((var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 12)) ? (0.024240000000000001 * exp(0.01052 * NV_Ith_S(mParameters, 12) - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 12) - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__cell__V - 0.057000000000000002 * NV_Ith_S(mParameters, 12)) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 12) - 0.10000000000000001 * var_chaste_interface__cell__V)))) + ((var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 12)) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-25428.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * NV_Ith_S(mParameters, 12)) - 6.9480000000000002e-6 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 12) - 0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * NV_Ith_S(mParameters, 12)))) : (0))) * (-var_chaste_interface__iNa_j_gate__j + 0.01 * NV_Ith_S(mParameters, 11) + (1.0 - 0.01 * NV_Ith_S(mParameters, 11)) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__cell__V - 0.13458950201884254 * NV_Ith_S(mParameters, 12))), 2)); // 1 / millisecond
        const double d_dt_chaste_interface_var_iNa_m_gate__m = (_lt_0_row[23]) * (-var_chaste_interface__iNa_m_gate__m + _lt_0_row[21]) / (_lt_0_row[22]); // 1 / millisecond
        const double d_dt_chaste_interface_var_ito_r_gate__r = (-var_chaste_interface__ito_r_gate__r + _lt_0_row[24]) / (_lt_0_row[25]); // 1 / millisecond
        const double d_dt_chaste_interface_var_ito_s_gate__s = (-var_chaste_interface__ito_s_gate__s + _lt_0_row[26]) / (_lt_0_row[27]); // 1 / millisecond
        const double var_ICab__i_b_Ca = 0.00047360000000000002 * var_chaste_interface__cell__V - 0.0063258185242159298 * log(NV_Ith_S(mParameters, 5) / var_chaste_interface__Ca__Ca_i); // nanoA_per_nanoF
        const double d_dt_chaste_interface_var_Ca__Ca_i = (0.066691050963179718 * var_Ileak_Iup_Ixfer__i_leak - 0.066691050963179718 * var_Ileak_Iup_Ixfer__i_up - 0.00031590674984870116 * (-2.0 * var_INaCa__i_NaCa + var_ICab__i_b_Ca + var_IpCa__i_p_Ca) * NV_Ith_S(mParameters, 3) + var_Ileak_Iup_Ixfer__i_xfer) / (1.0 + 0.00020000000000000001 / pow((0.001 + var_chaste_interface__Ca__Ca_i), 2)); // millimolar / millisecond
        const double var_reversal_potentials__E_K = 26.713760659695652 * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__K__K_i); // millivolt
        const double var_IKr__i_Kr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 14) * var_chaste_interface__iKr_Markov__Or4; // nanoA_per_nanoF
        const double var_IpK__i_p_K = 0.0097300000000000008 * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) / (_lt_0_row[0]); // nanoA_per_nanoF
        const double var_Ito__i_to = (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 17) * var_chaste_interface__ito_r_gate__r * var_chaste_interface__ito_s_gate__s; // nanoA_per_nanoF
        const double var_IK1__i_K1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * (0.11619999999999997 / (1.0 + 0.036532500000000002 / exp(0.11701098901098901 * var_reversal_potentials__E_K - 0.10989010989010989 * var_chaste_interface__cell__V)) + 0.88380000000000003 * pow((1.0 + 0.079111111111111104 / exp(0.053239999999999996 * var_reversal_potentials__E_K - 0.050000000000000003 * var_chaste_interface__cell__V)), 2) / (pow((1.0 + 0.079111111111111104 / exp(0.053239999999999996 * var_reversal_potentials__E_K - 0.050000000000000003 * var_chaste_interface__cell__V)), 3) + 2.0875714285714286 / exp(-0.059333333333333335 + 0.22183333333333333 * var_reversal_potentials__E_K - 0.20833333333333334 * var_chaste_interface__cell__V) + 0.012714285714285714 / exp(0.005915555555555555 * var_reversal_potentials__E_K - 0.0055555555555555558 * var_chaste_interface__cell__V))) * NV_Ith_S(mParameters, 13); // nanoA_per_nanoF
        const double var_reversal_potentials__E_Na = 26.713760659695652 * log(NV_Ith_S(mParameters, 7) / var_chaste_interface__Na__Na_i); // millivolt
        const double var_INa__i_Na = pow(var_chaste_interface__iNa_m_gate__m, 3) * (-var_reversal_potentials__E_Na + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 10) * var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j; // nanoA_per_nanoF
        const double var_INab__i_b_Na = 0.00029 * var_chaste_interface__cell__V - 0.00029 * var_reversal_potentials__E_Na; // nanoA_per_nanoF
        const double d_dt_chaste_interface_var_Na__Na_i = -0.00063181349969740233 * (3.0 * var_INaCa__i_NaCa + 3.0 * var_INaK__i_NaK + var_INa__i_Na + var_INab__i_b_Na) * NV_Ith_S(mParameters, 4) * NV_Ith_S(mParameters, 3); // millimolar / millisecond
        const double var_IKs__i_Ks = pow(var_chaste_interface__iKs_Xs_gate__Xs, 2) * (-26.713760659695652 * log((0.029999999999999999 * NV_Ith_S(mParameters, 7) + NV_Ith_S(mParameters, 6)) / (0.029999999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i)) + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 15); // nanoA_per_nanoF
        const double d_dt_chaste_interface_var_K__K_i = -0.00063181349969740233 * (-2.0 * var_INaK__i_NaK + var_IK1__i_K1 + var_IKr__i_Kr + var_IKs__i_Ks + var_IpK__i_p_K + var_Ito__i_to + var_cell__i_Stim) * NV_Ith_S(mParameters, 4) * NV_Ith_S(mParameters, 3); // millimolar / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_cell__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_cell__V = -var_ICaL__i_CaL - var_ICab__i_b_Ca - var_IK1__i_K1 - var_IKr__i_Kr - var_IKs__i_Ks - var_INa__i_Na - var_INaCa__i_NaCa - var_INaK__i_NaK - var_INab__i_b_Na - var_IpCa__i_p_Ca - var_IpK__i_p_K - var_Ito__i_to - var_cell__i_Stim - (-GetExperimentalVoltageAtTimeT(var_chaste_interface__Environment__time) + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 9); // millivolt / millisecond
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_cell__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_Ca__Ca_i;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_iKr_Markov__Cr1;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_iKr_Markov__Cr2;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_iKr_Markov__Cr3;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_iKr_Markov__Or4;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_iKr_Markov__Ir5;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr1;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr2;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BCr3;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BOr4;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_iKr_Markov_Sotalol_block__BIr5;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_iKs_Xs_gate__Xs;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_ito_s_gate__s;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_ito_r_gate__r;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_iNa_m_gate__m;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_iNa_h_gate__h;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_iNa_j_gate__j;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_iCaL_d_gate__d;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_iCaL_f_gate__f;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_iCaL_f2_gate__f2;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_iCaL_fCass_gate__fCass;
        NV_Ith_S(rDY,22) = d_dt_chaste_interface_var_Ca__Ca_SR;
        NV_Ith_S(rDY,23) = d_dt_chaste_interface_var_Ca__Ca_ss;
        NV_Ith_S(rDY,24) = d_dt_chaste_interface_var_Irel__R_prime;
        NV_Ith_S(rDY,25) = d_dt_chaste_interface_var_Na__Na_i;
        NV_Ith_S(rDY,26) = d_dt_chaste_interface_var_K__K_i;
    }

    N_Vector Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt::ComputeDerivedQuantities(double var_chaste_interface__Environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -86.45
        double var_chaste_interface__Ca__Ca_i = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 0.0001092
        double var_chaste_interface__iKr_Markov__Or4 = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.014
        double var_chaste_interface__iKs_Xs_gate__Xs = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.00303
        double var_chaste_interface__ito_s_gate__s = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ito_r_gate__r = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 2.11e-08
        double var_chaste_interface__iNa_m_gate__m = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.00132
        double var_chaste_interface__iNa_h_gate__h = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.7768
        double var_chaste_interface__iNa_j_gate__j = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.7766
        double var_chaste_interface__iCaL_d_gate__d = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 5.06e-06
        double var_chaste_interface__iCaL_f_gate__f = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__iCaL_f2_gate__f2 = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.9995
        double var_chaste_interface__iCaL_fCass_gate__fCass = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ca__Ca_SR = NV_Ith_S(rY, 22);
        // Units: millimolar; Initial value: 2.7656
        double var_chaste_interface__Ca__Ca_ss = NV_Ith_S(rY, 23);
        // Units: millimolar; Initial value: 0.0001893
        double var_chaste_interface__Irel__R_prime = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 0.9864
        double var_chaste_interface__Na__Na_i = NV_Ith_S(rY, 25);
        // Units: millimolar; Initial value: 7.940167
        double var_chaste_interface__K__K_i = NV_Ith_S(rY, 26);
        // Units: millimolar; Initial value: 141.0167
        
        // Lookup table indexing
        const bool _oob_0 = Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__cell__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__Environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__cell__V);

        // Mathematics
        const double var_Environment__F = 96485.341499999995; // coulomb_per_mole
        const double var_Environment__R = 8314.4719999999998; // millijoule_per_mole_kelvin
        const double var_Environment__T = 310.0; // kelvin
        const double var_INaCa__K_sat = 0.10000000000000001; // dimensionless
        const double var_INaCa__Km_Ca = 1.3799999999999999; // millimolar
        const double var_INaCa__Km_Nai = 87.5; // millimolar
        const double var_INaCa__alpha = 2.5; // dimensionless
        const double var_INaCa__gamma = 0.34999999999999998; // dimensionless
        const double var_Irel__EC = 1.5; // millimolar
        const double var_Irel__k1_prime = 0.14999999999999999; // per_millimolar2_per_millisecond
        const double var_Irel__k3 = 0.059999999999999998; // per_millisecond
        const double var_Irel__max_sr = 2.5; // dimensionless
        const double var_Irel__min_sr = 1.0; // dimensionless
        const double var_Irel__kcasr = -(-var_Irel__min_sr + var_Irel__max_sr) / (1.0 + pow(var_Irel__EC, 2) / pow(var_chaste_interface__Ca__Ca_SR, 2)) + var_Irel__max_sr; // dimensionless
        const double var_Irel__k1 = var_Irel__k1_prime / var_Irel__kcasr; // per_millimolar2_per_millisecond
        const double var_Irel__O = pow(var_chaste_interface__Ca__Ca_ss, 2) * var_chaste_interface__Irel__R_prime * var_Irel__k1 / (pow(var_chaste_interface__Ca__Ca_ss, 2) * var_Irel__k1 + var_Irel__k3); // dimensionless
        const double var_Irel__i_rel = (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_SR) * var_Irel__O * NV_Ith_S(mParameters, 1); // millimolar_per_millisecond
        const double var_cell__Cm_converted = 0.001 * NV_Ith_S(mParameters, 3); // uF
        const double var_INaCa__i_NaCa = (pow(var_chaste_interface__Na__Na_i, 3) * NV_Ith_S(mParameters, 5) * exp(var_Environment__F * var_INaCa__gamma * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T)) - pow(NV_Ith_S(mParameters, 7), 3) * var_chaste_interface__Ca__Ca_i * var_INaCa__alpha * exp((-1.0 + var_INaCa__gamma) * var_Environment__F * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T))) * NV_Ith_S(mParameters, 16) / ((1.0 + var_INaCa__K_sat * exp((-1.0 + var_INaCa__gamma) * var_Environment__F * var_chaste_interface__cell__V / (var_Environment__R * var_Environment__T))) * (pow(NV_Ith_S(mParameters, 7), 3) + pow(var_INaCa__Km_Nai, 3)) * (NV_Ith_S(mParameters, 5) + var_INaCa__Km_Ca)); // nanoA_per_nanoF
        const double var_INaCa__i_NaCa_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_INaCa__i_NaCa; // uA_per_cm2
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_iCaL_f2_gate__tau_f2 = _lt_0_row[10]; // millisecond
        const double var_iCaL_fCass_gate__tau_fCass = 2.0 + 80.0 / (1.0 + 399.99999999999994 * pow(var_chaste_interface__Ca__Ca_ss, 2)); // millisecond
        const double var_ICaL__i_CaL = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356880329828957e-6) ? (374338.90822798351 * (-14.999998664311967 + var_chaste_interface__cell__V) * (0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(9.9999999999858739e-8)) + 0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) - 0.019297068299972742 * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999858739e-8)) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (-1.0 + exp(-9.9999999999858739e-8))) : (14447.286958825251 * (-15.0 + var_chaste_interface__cell__V) * (-NV_Ith_S(mParameters, 5) + 0.25 * var_chaste_interface__Ca__Ca_ss * _lt_0_row[5]) * NV_Ith_S(mParameters, 8) * var_chaste_interface__iCaL_d_gate__d * var_chaste_interface__iCaL_f2_gate__f2 * var_chaste_interface__iCaL_fCass_gate__fCass * var_chaste_interface__iCaL_f_gate__f / (_lt_0_row[6]))); // nanoA_per_nanoF
        const double var_ICaL__i_CaL_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_ICaL__i_CaL; // uA_per_cm2
        const double var_iCaL_f_gate__tau_f = _lt_0_row[12]; // millisecond
        const double var_iK1_rectification__Mg_Buf = 0.0356; // millimolar
        const double var_iK1_rectification__SPM = 0.0014613; // millimolar
        const double var_iK1_rectification__fac = 1.0648; // dimensionless
        const double var_iK1_rectification__phi = 0.88380000000000003; // dimensionless
        const double var_iNa_h_gate__alpha_h = ((var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 12)) ? (0.057000000000000002 * exp(-11.764705882352942 + 0.14705882352941177 * NV_Ith_S(mParameters, 12) - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0)); // per_millisecond
        const double var_iNa_h_gate__beta_h = ((var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 12)) ? (310000.0 * exp(0.34849999999999998 * var_chaste_interface__cell__V - 0.34849999999999998 * NV_Ith_S(mParameters, 12)) + 2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__cell__V - 0.079000000000000001 * NV_Ith_S(mParameters, 12))) : (5.9230769230769234 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * NV_Ith_S(mParameters, 12) - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_millisecond
        const double var_iNa_h_gate__tau_h = 1 / (var_iNa_h_gate__alpha_h + var_iNa_h_gate__beta_h); // millisecond
        const double var_iNa_j_gate__alpha_j = ((var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 12)) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-25428.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V - 0.24440000000000001 * NV_Ith_S(mParameters, 12)) - 6.9480000000000002e-6 * exp(0.043909999999999998 * NV_Ith_S(mParameters, 12) - 0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V - 0.311 * NV_Ith_S(mParameters, 12)))) : (0)); // per_millisecond
        const double var_iNa_j_gate__beta_j = ((var_chaste_interface__cell__V < -40.0 + NV_Ith_S(mParameters, 12)) ? (0.024240000000000001 * exp(0.01052 * NV_Ith_S(mParameters, 12) - 0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * NV_Ith_S(mParameters, 12) - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__cell__V - 0.057000000000000002 * NV_Ith_S(mParameters, 12)) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * NV_Ith_S(mParameters, 12) - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_millisecond
        const double var_iNa_j_gate__tau_j = 1 / (var_iNa_j_gate__alpha_j + var_iNa_j_gate__beta_j); // millisecond
        // Special handling of data clamp current here
        // (we want to save expense of calling the interpolation method if possible.)
        double var_chaste_interface__membrane_data_clamp_current = 0.0;
        if (mDataClampIsOn)
        {
            var_chaste_interface__membrane_data_clamp_current = (-GetExperimentalVoltageAtTimeT(var_chaste_interface__Environment__time) + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 9); // uA_per_cm2
        }
        const double var_reversal_potentials__E_K = var_Environment__R * var_Environment__T * log(NV_Ith_S(mParameters, 6) / var_chaste_interface__K__K_i) / var_Environment__F; // millivolt
        const double var_IKr__i_Kr = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * (-7.8571428571428568 + 0.028571428571428571 * var_Environment__T) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 14) * var_chaste_interface__iKr_Markov__Or4; // nanoA_per_nanoF
        const double var_IKr__i_Kr_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_IKr__i_Kr; // uA_per_cm2
        const double var_Ito__i_to = (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 17) * var_chaste_interface__ito_r_gate__r * var_chaste_interface__ito_s_gate__s; // nanoA_per_nanoF
        const double var_Ito__i_to_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_Ito__i_to; // uA_per_cm2
        const double var_iK1_rectification__KbMg = 0.45000000000000001 * exp(-0.050000000000000003 * var_chaste_interface__cell__V + 0.050000000000000003 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__Kd1SPM = 0.00069999999999999999 * exp(-0.20833333333333334 * var_chaste_interface__cell__V - 1.6666666666666667 * var_iK1_rectification__Mg_Buf + 0.20833333333333334 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__Kd2SPM = 0.040000000000000001 * exp(-0.10989010989010989 * var_chaste_interface__cell__V + 0.10989010989010989 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__KiMg = 2.7999999999999998 * exp(-0.0055555555555555558 * var_chaste_interface__cell__V + 0.0055555555555555558 * var_iK1_rectification__fac * var_reversal_potentials__E_K); // millimolar
        const double var_iK1_rectification__rec2 = 1 / (1.0 + var_iK1_rectification__SPM / var_iK1_rectification__Kd2SPM); // dimensionless
        const double var_iK1_rectification__temp = 1.0 + var_iK1_rectification__Mg_Buf / var_iK1_rectification__KbMg; // dimensionless
        const double var_iK1_rectification__rec1 = pow(var_iK1_rectification__temp, 2) / (pow(var_iK1_rectification__temp, 3) + var_iK1_rectification__SPM / var_iK1_rectification__Kd1SPM + var_iK1_rectification__Mg_Buf / var_iK1_rectification__KiMg); // dimensionless
        const double var_iK1_rectification__xK1_inf = (1.0 - var_iK1_rectification__phi) * var_iK1_rectification__rec2 + var_iK1_rectification__phi * var_iK1_rectification__rec1; // dimensionless
        const double var_IK1__i_K1 = 0.43033148291193518 * sqrt(NV_Ith_S(mParameters, 6)) * (-7.8571428571428568 + 0.028571428571428571 * var_Environment__T) * (-var_reversal_potentials__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 13) * var_iK1_rectification__xK1_inf; // nanoA_per_nanoF
        const double var_IK1__i_K1_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_IK1__i_K1; // uA_per_cm2
        const double var_reversal_potentials__E_Na = var_Environment__R * var_Environment__T * log(NV_Ith_S(mParameters, 7) / var_chaste_interface__Na__Na_i) / var_Environment__F; // millivolt
        const double var_INa__i_Na = pow(var_chaste_interface__iNa_m_gate__m, 3) * (-var_reversal_potentials__E_Na + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 10) * var_chaste_interface__iNa_h_gate__h * var_chaste_interface__iNa_j_gate__j; // nanoA_per_nanoF
        const double var_INa__i_Na_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_INa__i_Na; // uA_per_cm2
        const double var_reversal_potentials__P_kna = 0.029999999999999999; // dimensionless
        const double var_reversal_potentials__E_Ks = var_Environment__R * var_Environment__T * log((NV_Ith_S(mParameters, 7) * var_reversal_potentials__P_kna + NV_Ith_S(mParameters, 6)) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__P_kna + var_chaste_interface__K__K_i)) / var_Environment__F; // millivolt
        const double var_IKs__i_Ks = pow(var_chaste_interface__iKs_Xs_gate__Xs, 2) * (-var_reversal_potentials__E_Ks + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 15); // nanoA_per_nanoF
        const double var_IKs__i_Ks_converted = 0.99999999999999989 * HeartConfig::Instance()->GetCapacitance() * var_IKs__i_Ks; // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(17);
        NV_Ith_S(dqs, 0) = var_Irel__i_rel;
        NV_Ith_S(dqs, 1) = var_ICaL__i_CaL_converted;
        NV_Ith_S(dqs, 2) = var_iCaL_f2_gate__tau_f2;
        NV_Ith_S(dqs, 3) = var_iCaL_fCass_gate__tau_fCass;
        NV_Ith_S(dqs, 4) = var_iCaL_f_gate__tau_f;
        NV_Ith_S(dqs, 5) = var_cell__Cm_converted;
        NV_Ith_S(dqs, 6) = var_chaste_interface__membrane_data_clamp_current;
        NV_Ith_S(dqs, 7) = var_INa__i_Na_converted;
        NV_Ith_S(dqs, 8) = var_iNa_h_gate__tau_h;
        NV_Ith_S(dqs, 9) = var_iNa_j_gate__tau_j;
        NV_Ith_S(dqs, 10) = var_IK1__i_K1_converted;
        NV_Ith_S(dqs, 11) = var_IKr__i_Kr_converted;
        NV_Ith_S(dqs, 12) = var_IKs__i_Ks_converted;
        NV_Ith_S(dqs, 13) = var_INaCa__i_NaCa_converted;
        NV_Ith_S(dqs, 14) = var_cell__i_Stim_converted;
        NV_Ith_S(dqs, 15) = var_Ito__i_to_converted;
        NV_Ith_S(dqs, 16) = var_chaste_interface__Environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt>::Initialise(void)
{
    this->mSystemName = "fink_noble_giles_model_2008";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-86.45);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0001092);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("iKr_Markov__Cr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9786);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("iKr_Markov__Cr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0031);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("iKr_Markov__Cr3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0029);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("iKr_Markov__Or4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.014);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("iKr_Markov__Ir5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0014);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BCr3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BOr4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("iKr_Markov_Sotalol_block__BIr5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("iKs_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00303);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("ito_s_gate__s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("ito_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.11e-08);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00132);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7768);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7766);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.06e-06);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f2_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9995);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 22):
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(2.7656);

    // NV_Ith_S(rY, 23):
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0001893);

    // NV_Ith_S(rY, 24):
    this->mVariableNames.push_back("Irel__R_prime");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9864);

    // NV_Ith_S(rY, 25):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.940167);

    // NV_Ith_S(rY, 26):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(141.0167);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("millimolar_per_millisecond");

    // mParameters[3]:
    this->mParameterNames.push_back("cell__Cm");
    this->mParameterUnits.push_back("nanoF");

    // mParameters[4]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[7]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("litre_per_farad_millisecond");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_data_clamp_current_conductance");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("microS_per_nanoF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("millivolt");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("microS_per_nanoF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("microS_per_nanoF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("microS_per_nanoF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("nanoA_per_nanoF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("microS_per_nanoF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f2_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_fCa_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_capacitance");
    this->mDerivedQuantityUnits.push_back("uF");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_data_clamp_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("millisecond");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellfink_noble_giles_model_2008FromCellMLCvodeDataClampOpt)

#endif // CHASTE_CVODE
