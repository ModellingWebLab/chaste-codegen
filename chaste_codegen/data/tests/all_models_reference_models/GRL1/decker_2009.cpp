//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: decker_2009
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: GeneralizedRushLarsenFirstOrder)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "decker_2009.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"


    boost::shared_ptr<RegularStimulus> Celldecker_2009FromCellMLGRL1::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_amplitude_converted = -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__stim_duration = 0.5; // ms
        const double var_chaste_interface__membrane__stim_offset = 0; // ms
        const double var_chaste_interface__membrane__stim_period = 1000.0; // ms
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude_converted),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                var_chaste_interface__membrane__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Celldecker_2009FromCellMLGRL1::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Celldecker_2009FromCellMLGRL1::Celldecker_2009FromCellMLGRL1(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractGeneralizedRushLarsenCardiacCell(
                46,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Celldecker_2009FromCellMLGRL1>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 0.0043750000000000004; // (var_Ileak__Ileak_max) [mM_per_ms]
        this->mParameters[1] = 0.1125; // (var_Irel__kappa) [mM_per_uA_per_uF_per_ms_per_ms]
        this->mParameters[2] = 0.0043750000000000004; // (var_Iup__iupbar) [mM_per_ms]
        this->mParameters[3] = 1.8; // (var_model_parameters__Ca_o) [mM]
        this->mParameters[4] = 5.4000000000000004; // (var_model_parameters__K_o) [mM]
        this->mParameters[5] = 140.0; // (var_model_parameters__Na_o) [mM]
        this->mParameters[6] = 0.00015552; // (var_ICaL__PCa) [L_per_F_ms]
        this->mParameters[7] = 1.9950799999999999e-7; // (var_ICab__PCab) [L_per_F_ms]
        this->mParameters[8] = 0.00022499999999999999; // (var_IClb__gClb) [mS_per_uF]
        this->mParameters[9] = 3.2000000000000001e-9; // (var_INab__PNab) [L_per_F_ms]
        this->mParameters[10] = 0.057500000000000002; // (var_IpCa__gpCa) [uA_per_uF]
        this->mParameters[11] = 9.0749999999999993; // (var_INa__g_Na) [mS_per_uF]
        this->mParameters[12] = 0.5; // (var_IK1__g_K1_max) [mS_per_uF]
        this->mParameters[13] = 0.0064999999999999997; // (var_INaL__gNaL) [mS_per_uF]
        this->mParameters[14] = 0.0027599999999999999; // (var_IKp__gKp) [mS_per_uF]
        this->mParameters[15] = 0.013854200000000001; // (var_IKr__gKr_max) [mS_per_uF]
        this->mParameters[16] = 0.082600000000000007; // (var_IKs__gKs_max) [mS_per_uF]
        this->mParameters[17] = 4.5; // (var_INaCa__Vmax) [uA_per_uF]
        this->mParameters[18] = 1.3999999999999999; // (var_INaK__ibarnak) [uA_per_uF]
        this->mParameters[19] = 8.9999999999999996e-7; // (var_Ito2__PCl) [L_per_F_ms]
        this->mParameters[20] = 0.49745800000000001; // (var_Ito1__gto1) [mS_per_uF]
    }

    Celldecker_2009FromCellMLGRL1::~Celldecker_2009FromCellMLGRL1()
    {
    }

    
    double Celldecker_2009FromCellMLGRL1::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 8.38749860095482e-05
        double var_chaste_interface__IKs__C1 = rY[2];
        // Units: dimensionless; Initial value: 0.476679784307081
        double var_chaste_interface__IKs__C2 = rY[3];
        // Units: dimensionless; Initial value: 0.255181042718489
        double var_chaste_interface__IKs__C3 = rY[4];
        // Units: dimensionless; Initial value: 0.0512272866698557
        double var_chaste_interface__IKs__C4 = rY[5];
        // Units: dimensionless; Initial value: 0.0045705849736195
        double var_chaste_interface__IKs__C5 = rY[6];
        // Units: dimensionless; Initial value: 0.000152923243503507
        double var_chaste_interface__IKs__C6 = rY[7];
        // Units: dimensionless; Initial value: 0.132814156809568
        double var_chaste_interface__IKs__C7 = rY[8];
        // Units: dimensionless; Initial value: 0.053324572164618
        double var_chaste_interface__IKs__C8 = rY[9];
        // Units: dimensionless; Initial value: 0.00713656414955778
        double var_chaste_interface__IKs__C9 = rY[10];
        // Units: dimensionless; Initial value: 0.000318368292970148
        double var_chaste_interface__IKs__C10 = rY[11];
        // Units: dimensionless; Initial value: 0.0138769647384953
        double var_chaste_interface__IKs__C11 = rY[12];
        // Units: dimensionless; Initial value: 0.00371438476499172
        double var_chaste_interface__IKs__C12 = rY[13];
        // Units: dimensionless; Initial value: 0.000248553788631871
        double var_chaste_interface__IKs__C13 = rY[14];
        // Units: dimensionless; Initial value: 0.000644426171899078
        double var_chaste_interface__IKs__C14 = rY[15];
        // Units: dimensionless; Initial value: 8.62495047666861e-05
        double var_chaste_interface__IKs__C15 = rY[16];
        // Units: dimensionless; Initial value: 1.12344645485893e-05
        double var_chaste_interface__IKs__O1 = rY[17];
        // Units: dimensionless; Initial value: 1.05292905767805e-05
        double var_chaste_interface__ICaL__O = rY[19];
        // Units: dimensionless; Initial value: 2.26882961412491e-05
        double var_chaste_interface__ICaL__O_star = rY[21];
        // Units: dimensionless; Initial value: 1.23556404128518e-10
        double var_chaste_interface__INa_m_gate__m = rY[25];
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INa_h_gate__h = rY[26];
        // Units: dimensionless; Initial value: 0.991354143386887
        double var_chaste_interface__INa_j_gate__j = rY[27];
        // Units: dimensionless; Initial value: 0.99709036251243
        double var_chaste_interface__INaL_mL_gate__mL = rY[28];
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INaL_hL_gate__hL = rY[29];
        // Units: dimensionless; Initial value: 0.319611809402137
        double var_chaste_interface__IKr_xr_gate__xr = rY[30];
        // Units: dimensionless; Initial value: 4.06959064407486e-06
        double var_chaste_interface__Ito1_a_gate__a = rY[31];
        // Units: dimensionless; Initial value: 1.76776038804228e-05
        double var_chaste_interface__Ito1_i1f_gate__i1f = rY[32];
        // Units: dimensionless; Initial value: 0.997976503910799
        double var_chaste_interface__Ito1_i1s_gate__i1s = rY[33];
        // Units: dimensionless; Initial value: 0.947581184798815
        double var_chaste_interface__Ito2_i2f_gate__i2f = rY[34];
        // Units: dimensionless; Initial value: 0.996044894628276
        double var_chaste_interface__Irel__Irel = rY[35];
        // Units: mM_per_ms; Initial value: 0.000714227102027745
        double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
        // Units: mM; Initial value: 0.000119239795531548
        double var_chaste_interface__Na__Na_i = rY[40];
        // Units: mM; Initial value: 8.01031392415197
        double var_chaste_interface__Na__Na_ss_sr = rY[41];
        // Units: mM; Initial value: 8.01033434859049
        double var_chaste_interface__Cl__Cl_i = rY[42];
        // Units: mM; Initial value: 20.6683603724432
        double var_chaste_interface__K__K_i = rY[44];
        // Units: mM; Initial value: 144.907134343314
        
        const double var_IKs__O2 = 1.0 - var_chaste_interface__IKs__C1 - var_chaste_interface__IKs__C10 - var_chaste_interface__IKs__C11 - var_chaste_interface__IKs__C12 - var_chaste_interface__IKs__C13 - var_chaste_interface__IKs__C14 - var_chaste_interface__IKs__C15 - var_chaste_interface__IKs__C2 - var_chaste_interface__IKs__C3 - var_chaste_interface__IKs__C4 - var_chaste_interface__IKs__C5 - var_chaste_interface__IKs__C6 - var_chaste_interface__IKs__C7 - var_chaste_interface__IKs__C8 - var_chaste_interface__IKs__C9 - var_chaste_interface__IKs__O1; // dimensionless
        const double var_IKs__OKs = var_chaste_interface__IKs__O1 + var_IKs__O2; // dimensionless
        const double var_IKs__gKs = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[16]; // mS_per_uF
        const double var_INaCa__KmCa_act = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__denom_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_i, 2); // dimensionless
        const double var_INaCa__denom_ss_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_ss_sr, 2); // dimensionless
        const double var_INaCa__eta = 0.27000000000000002; // dimensionless
        const double var_INaCa__ksat = 0.32000000000000001; // dimensionless
        const double var_INaK__V_half = -92.0; // mV
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 2.6000000000000001; // mM
        const double var_INaK__sigma = 1.0; // dimensionless
        const double var_IpCa__KmpCa = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * mParameters[10] / (var_chaste_interface__Ca__Ca_i + var_IpCa__KmpCa); // uA_per_uF
        const double var_Ito2__Ito2_max_scaling_factor = 1.0; // dimensionless
        const double var_Ito2__kCa_ito2 = 0.40000000000000002; // mM_per_ms
        const double var_Ito2__KCa_ito2 = 1.0 - 1 / (1.0 + pow(var_chaste_interface__Irel__Irel, 2) / pow(var_Ito2__kCa_ito2, 2)); // dimensionless
        const double var_INaK__PNa = pow(var_chaste_interface__Na__Na_i, 3) / pow((var_INaK__kmnai + var_chaste_interface__Na__Na_i), 3); // dimensionless
        const double var_IKp__Kp = 1 / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IKr_r_gate__r = 1 / (1.0 + exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_Ito1__rto1 = exp(0.0018181818181818182 * var_chaste_interface__membrane__Vm); // dimensionless
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__membrane__Vm) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__Vm) * (0.0096484999999999991 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(-9.9999999999999995e-8))) : (3612.0012202503358 * (-100.0 * exp(0.037435883507802616 * var_chaste_interface__membrane__Vm) + var_chaste_interface__Cl__Cl_i) * mParameters[19] * var_chaste_interface__membrane__Vm / (1.0 - exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_Ito2__Ito2_max * var_Ito2__Ito2_max_scaling_factor * var_Ito2__KCa_ito2 * var_chaste_interface__Ito2_i2f_gate__i2f; // uA_per_uF
        const double var_membrane__i_Stim = 0.0; // uA_per_uF
        const double var_ICaL__ICaL_max = ((fabs(var_chaste_interface__membrane__Vm) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__Vm) * (0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (14448.004881001343 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)) * mParameters[6] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_ICaL__ICaL = (var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__O_star) * var_ICaL__ICaL_max; // uA_per_uF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__Vm) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__Vm) * (0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(9.9999999999999995e-8)) + 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(-9.9999999999999995e-8))) : (14448.004881001343 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)) * mParameters[7] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_INaCa__denom_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_i + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_i / var_INaCa__KmCai) * mParameters[3]; // mM4
        const double var_INaCa__denom_ss_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(var_chaste_interface__Na__Na_ss_sr, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_ss_sr / var_INaCa__KmCai) * mParameters[3]; // mM4
        const double var_model_parameters__Cl_o = 100.0; // mM
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_IK1__gK1 = 0.43033148291193518 * sqrt(mParameters[4]) * mParameters[12]; // mS_per_uF
        const double var_IKr__gKr = 0.43033148291193518 * sqrt(mParameters[4]) * mParameters[15]; // mS_per_uF
        const double var_INaK__PK = mParameters[4] / (var_INaK__kmko + mParameters[4]); // dimensionless
        const double var_INaCa__denom_4 = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[3] + pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_i + pow(mParameters[5], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INaCa__denom_ss_4 = pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] + pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(mParameters[5], 3) * (1.0 + pow(var_chaste_interface__Na__Na_ss_sr, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__Vm) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__Vm) * (0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) : (3612.0012202503358 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)) * mParameters[9] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_INaCa__denom_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__denom_ss_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__num_ss = 0.20000000000000001 * (pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * mParameters[17]; // mM4_uA_per_uF
        const double var_INaCa__INaCa_ss_sr = var_INaCa__num_ss / ((var_INaCa__denom_ss_3 + var_INaCa__denom_ss_4) * var_INaCa__denom_ss_1 * var_INaCa__denom_ss_2); // uA_per_uF
        const double var_INaCa__numerator = 0.80000000000000004 * (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[3] * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_i * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * mParameters[17]; // mM4_uA_per_uF
        const double var_INaCa__INaCa_cai = var_INaCa__numerator / ((var_INaCa__denom_3 + var_INaCa__denom_4) * var_INaCa__denom_1 * var_INaCa__denom_2); // uA_per_uF
        const double var_INaCa__INaCa = var_INaCa__INaCa_cai + var_INaCa__INaCa_ss_sr; // uA_per_uF
        const double var_INaK__phi = (-var_INaK__V_half + var_chaste_interface__membrane__Vm) * var_INaK__sigma * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INaK__fv = 1 / (1.0 + exp(-var_INaK__phi)); // dimensionless
        const double var_INaK__INaK = var_INaK__PK * var_INaK__PNa * var_INaK__fv * mParameters[18]; // uA_per_uF
        const double var_membrane__caiont = -2.0 * var_INaCa__INaCa - 2.0 * var_INaCa__INaCa_ss_sr + var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa; // uA_per_uF
        const double var_reversal_potentials__ECl = -var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__Cl_o / var_chaste_interface__Cl__Cl_i) / var_model_parameters__F; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__membrane__Vm) * mParameters[8]; // uA_per_uF
        const double var_membrane__clont = var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
        const double var_reversal_potentials__EK = var_model_parameters__R * var_model_parameters__T * log(mParameters[4] / var_chaste_interface__K__K_i) / var_model_parameters__F; // mV
        const double var_IK1_K1_gate__alpha_k1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__Vm - 0.23849999999999999 * var_reversal_potentials__EK)); // dimensionless
        const double var_IK1_K1_gate__beta_k1 = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__Vm - 0.080320000000000003 * var_reversal_potentials__EK) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__Vm - 0.061749999999999999 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IK1_K1_gate__K1 = var_IK1_K1_gate__alpha_k1 / (var_IK1_K1_gate__alpha_k1 + var_IK1_K1_gate__beta_k1); // dimensionless
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IK1__gK1 * var_IK1_K1_gate__K1; // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKp__Kp * mParameters[14]; // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKr__gKr * var_IKr_r_gate__r * var_chaste_interface__IKr_xr_gate__xr; // uA_per_uF
        const double var_Ito1__Ito1 = pow(var_chaste_interface__Ito1_a_gate__a, 3) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * mParameters[20] * var_Ito1__rto1 * var_chaste_interface__Ito1_i1f_gate__i1f * var_chaste_interface__Ito1_i1s_gate__i1s; // uA_per_uF
        const double var_reversal_potentials__ENa = var_model_parameters__R * var_model_parameters__T * log(mParameters[5] / var_chaste_interface__Na__Na_i) / var_model_parameters__F; // mV
        const double var_INa__INa = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * mParameters[11] * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INaL__INaL = pow(var_chaste_interface__INaL_mL_gate__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * mParameters[13] * var_chaste_interface__INaL_hL_gate__hL; // uA_per_uF
        const double var_membrane__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaCa__INaCa_ss_sr + 3.0 * var_INaK__INaK + var_INa__INa + var_INaL__INaL + var_INab__INab; // uA_per_uF
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = var_model_parameters__R * var_model_parameters__T * log((mParameters[5] * var_reversal_potentials__prnak + mParameters[4]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_model_parameters__F; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__Vm) * var_IKs__OKs * var_IKs__gKs; // uA_per_uF
        const double var_membrane__kiont = -2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito1__Ito1 + var_membrane__i_Stim; // uA_per_uF
        const double var_chaste_interface__i_ionic = (var_membrane__caiont + var_membrane__clont + var_membrane__kiont + var_membrane__naiont) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Celldecker_2009FromCellMLGRL1::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        unsigned v_index = GetVoltageIndex();
        const double delta = 1e-8;

        double d_dt_chaste_interface_var_membrane__Vm;
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 8.38749860095482e-05
        double var_chaste_interface__IKs__C1 = rY[2];
        // Units: dimensionless; Initial value: 0.476679784307081
        double var_chaste_interface__IKs__C2 = rY[3];
        // Units: dimensionless; Initial value: 0.255181042718489
        double var_chaste_interface__IKs__C3 = rY[4];
        // Units: dimensionless; Initial value: 0.0512272866698557
        double var_chaste_interface__IKs__C4 = rY[5];
        // Units: dimensionless; Initial value: 0.0045705849736195
        double var_chaste_interface__IKs__C5 = rY[6];
        // Units: dimensionless; Initial value: 0.000152923243503507
        double var_chaste_interface__IKs__C6 = rY[7];
        // Units: dimensionless; Initial value: 0.132814156809568
        double var_chaste_interface__IKs__C7 = rY[8];
        // Units: dimensionless; Initial value: 0.053324572164618
        double var_chaste_interface__IKs__C8 = rY[9];
        // Units: dimensionless; Initial value: 0.00713656414955778
        double var_chaste_interface__IKs__C9 = rY[10];
        // Units: dimensionless; Initial value: 0.000318368292970148
        double var_chaste_interface__IKs__C10 = rY[11];
        // Units: dimensionless; Initial value: 0.0138769647384953
        double var_chaste_interface__IKs__C11 = rY[12];
        // Units: dimensionless; Initial value: 0.00371438476499172
        double var_chaste_interface__IKs__C12 = rY[13];
        // Units: dimensionless; Initial value: 0.000248553788631871
        double var_chaste_interface__IKs__C13 = rY[14];
        // Units: dimensionless; Initial value: 0.000644426171899078
        double var_chaste_interface__IKs__C14 = rY[15];
        // Units: dimensionless; Initial value: 8.62495047666861e-05
        double var_chaste_interface__IKs__C15 = rY[16];
        // Units: dimensionless; Initial value: 1.12344645485893e-05
        double var_chaste_interface__IKs__O1 = rY[17];
        // Units: dimensionless; Initial value: 1.05292905767805e-05
        double var_chaste_interface__ICaL__O = rY[19];
        // Units: dimensionless; Initial value: 2.26882961412491e-05
        double var_chaste_interface__ICaL__O_star = rY[21];
        // Units: dimensionless; Initial value: 1.23556404128518e-10
        double var_chaste_interface__INa_m_gate__m = rY[25];
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INa_h_gate__h = rY[26];
        // Units: dimensionless; Initial value: 0.991354143386887
        double var_chaste_interface__INa_j_gate__j = rY[27];
        // Units: dimensionless; Initial value: 0.99709036251243
        double var_chaste_interface__INaL_mL_gate__mL = rY[28];
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INaL_hL_gate__hL = rY[29];
        // Units: dimensionless; Initial value: 0.319611809402137
        double var_chaste_interface__IKr_xr_gate__xr = rY[30];
        // Units: dimensionless; Initial value: 4.06959064407486e-06
        double var_chaste_interface__Ito1_a_gate__a = rY[31];
        // Units: dimensionless; Initial value: 1.76776038804228e-05
        double var_chaste_interface__Ito1_i1f_gate__i1f = rY[32];
        // Units: dimensionless; Initial value: 0.997976503910799
        double var_chaste_interface__Ito1_i1s_gate__i1s = rY[33];
        // Units: dimensionless; Initial value: 0.947581184798815
        double var_chaste_interface__Ito2_i2f_gate__i2f = rY[34];
        // Units: dimensionless; Initial value: 0.996044894628276
        double var_chaste_interface__Irel__Irel = rY[35];
        // Units: mM_per_ms; Initial value: 0.000714227102027745
        double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
        // Units: mM; Initial value: 0.000119239795531548
        double var_chaste_interface__Na__Na_i = rY[40];
        // Units: mM; Initial value: 8.01031392415197
        double var_chaste_interface__Na__Na_ss_sr = rY[41];
        // Units: mM; Initial value: 8.01033434859049
        double var_chaste_interface__Cl__Cl_i = rY[42];
        // Units: mM; Initial value: 20.6683603724432
        double var_chaste_interface__K__K_i = rY[44];
        // Units: mM; Initial value: 144.907134343314
        

        // Mathematics
        const double var_IKs__O2 = 1.0 - var_chaste_interface__IKs__C1 - var_chaste_interface__IKs__C10 - var_chaste_interface__IKs__C11 - var_chaste_interface__IKs__C12 - var_chaste_interface__IKs__C13 - var_chaste_interface__IKs__C14 - var_chaste_interface__IKs__C15 - var_chaste_interface__IKs__C2 - var_chaste_interface__IKs__C3 - var_chaste_interface__IKs__C4 - var_chaste_interface__IKs__C5 - var_chaste_interface__IKs__C6 - var_chaste_interface__IKs__C7 - var_chaste_interface__IKs__C8 - var_chaste_interface__IKs__C9 - var_chaste_interface__IKs__O1; // dimensionless
        const double var_IKs__OKs = var_chaste_interface__IKs__O1 + var_IKs__O2; // dimensionless
        const double var_IKs__gKs = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[16]; // mS_per_uF
        const double var_INaCa__KmCa_act = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__denom_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_i, 2); // dimensionless
        const double var_INaCa__denom_ss_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_ss_sr, 2); // dimensionless
        const double var_INaCa__eta = 0.27000000000000002; // dimensionless
        const double var_INaCa__ksat = 0.32000000000000001; // dimensionless
        const double var_INaK__V_half = -92.0; // mV
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 2.6000000000000001; // mM
        const double var_INaK__sigma = 1.0; // dimensionless
        const double var_IpCa__KmpCa = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * mParameters[10] / (var_chaste_interface__Ca__Ca_i + var_IpCa__KmpCa); // uA_per_uF
        const double var_Ito2__Ito2_max_scaling_factor = 1.0; // dimensionless
        const double var_Ito2__kCa_ito2 = 0.40000000000000002; // mM_per_ms
        const double var_Ito2__KCa_ito2 = 1.0 - 1 / (1.0 + pow(var_chaste_interface__Irel__Irel, 2) / pow(var_Ito2__kCa_ito2, 2)); // dimensionless
        const double var_INaK__PNa = pow(var_chaste_interface__Na__Na_i, 3) / pow((var_INaK__kmnai + var_chaste_interface__Na__Na_i), 3); // dimensionless
        const double var_IKp__Kp = 1 / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IKr_r_gate__r = 1 / (1.0 + exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_Ito1__rto1 = exp(0.0018181818181818182 * var_chaste_interface__membrane__Vm); // dimensionless
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__membrane__Vm) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__Vm) * (0.0096484999999999991 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(-9.9999999999999995e-8))) : (3612.0012202503358 * (-100.0 * exp(0.037435883507802616 * var_chaste_interface__membrane__Vm) + var_chaste_interface__Cl__Cl_i) * mParameters[19] * var_chaste_interface__membrane__Vm / (1.0 - exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_Ito2__Ito2_max * var_Ito2__Ito2_max_scaling_factor * var_Ito2__KCa_ito2 * var_chaste_interface__Ito2_i2f_gate__i2f; // uA_per_uF
        const double var_membrane__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_membrane__i_Stim = var_membrane__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_ICaL__ICaL_max = ((fabs(var_chaste_interface__membrane__Vm) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__Vm) * (0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (14448.004881001343 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)) * mParameters[6] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_ICaL__ICaL = (var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__O_star) * var_ICaL__ICaL_max; // uA_per_uF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__Vm) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__Vm) * (0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(9.9999999999999995e-8)) + 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(-9.9999999999999995e-8))) : (14448.004881001343 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)) * mParameters[7] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_INaCa__denom_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_i + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_i / var_INaCa__KmCai) * mParameters[3]; // mM4
        const double var_INaCa__denom_ss_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(var_chaste_interface__Na__Na_ss_sr, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_ss_sr / var_INaCa__KmCai) * mParameters[3]; // mM4
        const double var_model_parameters__Cl_o = 100.0; // mM
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_IK1__gK1 = 0.43033148291193518 * sqrt(mParameters[4]) * mParameters[12]; // mS_per_uF
        const double var_IKr__gKr = 0.43033148291193518 * sqrt(mParameters[4]) * mParameters[15]; // mS_per_uF
        const double var_INaK__PK = mParameters[4] / (var_INaK__kmko + mParameters[4]); // dimensionless
        const double var_INaCa__denom_4 = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[3] + pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_i + pow(mParameters[5], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INaCa__denom_ss_4 = pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] + pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(mParameters[5], 3) * (1.0 + pow(var_chaste_interface__Na__Na_ss_sr, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__Vm) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__Vm) * (0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) : (3612.0012202503358 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)) * mParameters[9] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_INaCa__denom_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__denom_ss_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__num_ss = 0.20000000000000001 * (pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * mParameters[17]; // mM4_uA_per_uF
        const double var_INaCa__INaCa_ss_sr = var_INaCa__num_ss / ((var_INaCa__denom_ss_3 + var_INaCa__denom_ss_4) * var_INaCa__denom_ss_1 * var_INaCa__denom_ss_2); // uA_per_uF
        const double var_INaCa__numerator = 0.80000000000000004 * (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[3] * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_i * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * mParameters[17]; // mM4_uA_per_uF
        const double var_INaCa__INaCa_cai = var_INaCa__numerator / ((var_INaCa__denom_3 + var_INaCa__denom_4) * var_INaCa__denom_1 * var_INaCa__denom_2); // uA_per_uF
        const double var_INaCa__INaCa = var_INaCa__INaCa_cai + var_INaCa__INaCa_ss_sr; // uA_per_uF
        const double var_INaK__phi = (-var_INaK__V_half + var_chaste_interface__membrane__Vm) * var_INaK__sigma * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INaK__fv = 1 / (1.0 + exp(-var_INaK__phi)); // dimensionless
        const double var_INaK__INaK = var_INaK__PK * var_INaK__PNa * var_INaK__fv * mParameters[18]; // uA_per_uF
        const double var_membrane__caiont = -2.0 * var_INaCa__INaCa - 2.0 * var_INaCa__INaCa_ss_sr + var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa; // uA_per_uF
        const double var_reversal_potentials__ECl = -var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__Cl_o / var_chaste_interface__Cl__Cl_i) / var_model_parameters__F; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__membrane__Vm) * mParameters[8]; // uA_per_uF
        const double var_membrane__clont = var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
        const double var_reversal_potentials__EK = var_model_parameters__R * var_model_parameters__T * log(mParameters[4] / var_chaste_interface__K__K_i) / var_model_parameters__F; // mV
        const double var_IK1_K1_gate__alpha_k1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__Vm - 0.23849999999999999 * var_reversal_potentials__EK)); // dimensionless
        const double var_IK1_K1_gate__beta_k1 = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__Vm - 0.080320000000000003 * var_reversal_potentials__EK) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__Vm - 0.061749999999999999 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IK1_K1_gate__K1 = var_IK1_K1_gate__alpha_k1 / (var_IK1_K1_gate__alpha_k1 + var_IK1_K1_gate__beta_k1); // dimensionless
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IK1__gK1 * var_IK1_K1_gate__K1; // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKp__Kp * mParameters[14]; // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKr__gKr * var_IKr_r_gate__r * var_chaste_interface__IKr_xr_gate__xr; // uA_per_uF
        const double var_Ito1__Ito1 = pow(var_chaste_interface__Ito1_a_gate__a, 3) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * mParameters[20] * var_Ito1__rto1 * var_chaste_interface__Ito1_i1f_gate__i1f * var_chaste_interface__Ito1_i1s_gate__i1s; // uA_per_uF
        const double var_reversal_potentials__ENa = var_model_parameters__R * var_model_parameters__T * log(mParameters[5] / var_chaste_interface__Na__Na_i) / var_model_parameters__F; // mV
        const double var_INa__INa = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * mParameters[11] * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INaL__INaL = pow(var_chaste_interface__INaL_mL_gate__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * mParameters[13] * var_chaste_interface__INaL_hL_gate__hL; // uA_per_uF
        const double var_membrane__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaCa__INaCa_ss_sr + 3.0 * var_INaK__INaK + var_INa__INa + var_INaL__INaL + var_INab__INab; // uA_per_uF
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = var_model_parameters__R * var_model_parameters__T * log((mParameters[5] * var_reversal_potentials__prnak + mParameters[4]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_model_parameters__F; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__Vm) * var_IKs__OKs * var_IKs__gKs; // uA_per_uF
        const double var_membrane__kiont = -2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito1__Ito1 + var_membrane__i_Stim; // uA_per_uF
        d_dt_chaste_interface_var_membrane__Vm = -var_membrane__caiont - var_membrane__clont - var_membrane__kiont - var_membrane__naiont; // mV / ms

        double evalF = d_dt_chaste_interface_var_membrane__Vm;
        mEvalF[0] = d_dt_chaste_interface_var_membrane__Vm;
        double partialF = EvaluatePartialDerivative0(var_chaste_interface__environment__time, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] += evalF*mDt;
        }
        else
        {
            rY[v_index] += (evalF/partialF)*(exp(partialF*mDt)-1.0);
        }
    }

    void Celldecker_2009FromCellMLGRL1::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        const double delta = 1e-8;

        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 8.38749860095482e-05
        double var_chaste_interface__IKs__C1 = rY[2];
        // Units: dimensionless; Initial value: 0.476679784307081
        double var_chaste_interface__IKs__C2 = rY[3];
        // Units: dimensionless; Initial value: 0.255181042718489
        double var_chaste_interface__IKs__C3 = rY[4];
        // Units: dimensionless; Initial value: 0.0512272866698557
        double var_chaste_interface__IKs__C4 = rY[5];
        // Units: dimensionless; Initial value: 0.0045705849736195
        double var_chaste_interface__IKs__C5 = rY[6];
        // Units: dimensionless; Initial value: 0.000152923243503507
        double var_chaste_interface__IKs__C6 = rY[7];
        // Units: dimensionless; Initial value: 0.132814156809568
        double var_chaste_interface__IKs__C7 = rY[8];
        // Units: dimensionless; Initial value: 0.053324572164618
        double var_chaste_interface__IKs__C8 = rY[9];
        // Units: dimensionless; Initial value: 0.00713656414955778
        double var_chaste_interface__IKs__C9 = rY[10];
        // Units: dimensionless; Initial value: 0.000318368292970148
        double var_chaste_interface__IKs__C10 = rY[11];
        // Units: dimensionless; Initial value: 0.0138769647384953
        double var_chaste_interface__IKs__C11 = rY[12];
        // Units: dimensionless; Initial value: 0.00371438476499172
        double var_chaste_interface__IKs__C12 = rY[13];
        // Units: dimensionless; Initial value: 0.000248553788631871
        double var_chaste_interface__IKs__C13 = rY[14];
        // Units: dimensionless; Initial value: 0.000644426171899078
        double var_chaste_interface__IKs__C14 = rY[15];
        // Units: dimensionless; Initial value: 8.62495047666861e-05
        double var_chaste_interface__IKs__C15 = rY[16];
        // Units: dimensionless; Initial value: 1.12344645485893e-05
        double var_chaste_interface__IKs__O1 = rY[17];
        // Units: dimensionless; Initial value: 1.05292905767805e-05
        double var_chaste_interface__ICaL__C = rY[18];
        // Units: dimensionless; Initial value: 0.99996982093287
        double var_chaste_interface__ICaL__O = rY[19];
        // Units: dimensionless; Initial value: 2.26882961412491e-05
        double var_chaste_interface__ICaL__C_star = rY[20];
        // Units: dimensionless; Initial value: 7.49117189549873e-06
        double var_chaste_interface__ICaL__O_star = rY[21];
        // Units: dimensionless; Initial value: 1.23556404128518e-10
        double var_chaste_interface__ICaL__CI = rY[22];
        // Units: dimensionless; Initial value: 5.89853003114132e-11
        double var_chaste_interface__ICaL__OI = rY[23];
        // Units: dimensionless; Initial value: 8.01952813127322e-17
        double var_chaste_interface__ICaL__CI_star = rY[24];
        // Units: dimensionless; Initial value: 1.9237001017021e-09
        double var_chaste_interface__INa_m_gate__m = rY[25];
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INa_h_gate__h = rY[26];
        // Units: dimensionless; Initial value: 0.991354143386887
        double var_chaste_interface__INa_j_gate__j = rY[27];
        // Units: dimensionless; Initial value: 0.99709036251243
        double var_chaste_interface__INaL_mL_gate__mL = rY[28];
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INaL_hL_gate__hL = rY[29];
        // Units: dimensionless; Initial value: 0.319611809402137
        double var_chaste_interface__IKr_xr_gate__xr = rY[30];
        // Units: dimensionless; Initial value: 4.06959064407486e-06
        double var_chaste_interface__Ito1_a_gate__a = rY[31];
        // Units: dimensionless; Initial value: 1.76776038804228e-05
        double var_chaste_interface__Ito1_i1f_gate__i1f = rY[32];
        // Units: dimensionless; Initial value: 0.997976503910799
        double var_chaste_interface__Ito1_i1s_gate__i1s = rY[33];
        // Units: dimensionless; Initial value: 0.947581184798815
        double var_chaste_interface__Ito2_i2f_gate__i2f = rY[34];
        // Units: dimensionless; Initial value: 0.996044894628276
        double var_chaste_interface__Irel__Irel = rY[35];
        // Units: mM_per_ms; Initial value: 0.000714227102027745
        double var_chaste_interface__Ca__Ca_JSR = rY[36];
        // Units: mM; Initial value: 0.993914988616979
        double var_chaste_interface__Ca__Ca_NSR = rY[37];
        // Units: mM; Initial value: 1.01475649943057
        double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
        // Units: mM; Initial value: 0.000119239795531548
        double var_chaste_interface__Na__Na_i = rY[40];
        // Units: mM; Initial value: 8.01031392415197
        double var_chaste_interface__Na__Na_ss_sr = rY[41];
        // Units: mM; Initial value: 8.01033434859049
        double var_chaste_interface__Cl__Cl_i = rY[42];
        // Units: mM; Initial value: 20.6683603724432
        double var_chaste_interface__Cl__Cl_ss = rY[43];
        // Units: mM; Initial value: 20.6683605553303
        double var_chaste_interface__K__K_i = rY[44];
        // Units: mM; Initial value: 144.907134343314
        double var_chaste_interface__CaMK_active__CaMK_trap = rY[45];
        // Units: dimensionless; Initial value: 0.0114911034744777
        

        // Mathematics
        const double var_CT_K_Cl__CT_K_Cl_max = 1.77e-5; // mM_per_ms
        const double var_CT_Na_Cl__CT_Na_Cl_max = 2.4610800000000002e-5; // mM_per_ms
        const double var_Ca__BSLmax = 1.1240000000000001; // mM
        const double var_Ca__BSRmax = 0.047; // mM
        const double var_Ca__KmBSL = 0.0086999999999999994; // mM
        const double var_Ca__KmBSR = 0.00087000000000000001; // mM
        const double var_Ca__bss_cal = 1 / (1.0 + var_Ca__BSLmax * var_Ca__KmBSL / pow((var_chaste_interface__Ca__Ca_ss_CaL + var_Ca__KmBSL), 2) + var_Ca__BSRmax * var_Ca__KmBSR / pow((var_chaste_interface__Ca__Ca_ss_CaL + var_Ca__KmBSR), 2)); // dimensionless
        const double var_Ca__bss_sr = 1 / (1.0 + var_Ca__BSLmax * var_Ca__KmBSL / pow((var_chaste_interface__Ca__Ca_ss_sr + var_Ca__KmBSL), 2) + var_Ca__BSRmax * var_Ca__KmBSR / pow((var_chaste_interface__Ca__Ca_ss_sr + var_Ca__KmBSR), 2)); // dimensionless
        const double var_Ca__cmdn_bar = 0.050000000000000003; // mM
        const double var_Ca__csqnbar = 10.0; // mM
        const double var_Ca__km_cmdn = 0.0023800000000000002; // mM
        const double var_Ca__km_trpn = 0.00050000000000000001; // mM
        const double var_Ca__kmcsqn = 0.80000000000000004; // mM
        const double var_Ca__bcsqn = 1 / (1.0 + var_Ca__csqnbar * var_Ca__kmcsqn / pow((var_chaste_interface__Ca__Ca_JSR + var_Ca__kmcsqn), 2)); // dimensionless
        const double var_Ca__tau_diff = 0.20000000000000001; // ms
        const double var_Ca__Idiff = (-var_chaste_interface__Ca__Ca_i + var_chaste_interface__Ca__Ca_ss_sr) / var_Ca__tau_diff; // mM_per_ms
        const double var_Ca__tau_diff_ss = 2.0; // ms
        const double var_Ca__Idiff_ss = (-var_chaste_interface__Ca__Ca_ss_CaL + var_chaste_interface__Ca__Ca_ss_sr) / var_Ca__tau_diff_ss; // mM_per_ms
        const double var_Ca__trpn_bar = 0.070000000000000007; // mM
        const double var_Ca__bmyo = 1 / (1.0 + var_Ca__cmdn_bar * var_Ca__km_cmdn / pow((var_chaste_interface__Ca__Ca_i + var_Ca__km_cmdn), 2) + var_Ca__km_trpn * var_Ca__trpn_bar / pow((var_chaste_interface__Ca__Ca_i + var_Ca__km_trpn), 2)); // dimensionless
        const double var_CaMK_active__CaMK_0 = 0.050000000000000003; // dimensionless
        const double var_CaMK_active__Km = 0.0015; // mM
        const double var_CaMK_active__CaMK_active = (1.0 - var_chaste_interface__CaMK_active__CaMK_trap) * var_CaMK_active__CaMK_0 / (1.0 + var_CaMK_active__Km / var_chaste_interface__Ca__Ca_ss_sr) + var_chaste_interface__CaMK_active__CaMK_trap; // dimensionless
        const double var_CaMK_active__alpha_CaMK = 0.050000000000000003; // per_ms
        const double var_CaMK_active__beta_CaMK = 0.00068000000000000005; // per_ms
        const double var_Cl__Idiff_Cl = (-var_chaste_interface__Cl__Cl_i + var_chaste_interface__Cl__Cl_ss) / var_Ca__tau_diff; // mM_per_ms
        const double d_dt_chaste_interface_var_CaMK_active__CaMK_trap = -var_chaste_interface__CaMK_active__CaMK_trap * var_CaMK_active__beta_CaMK + (-var_chaste_interface__CaMK_active__CaMK_trap + var_CaMK_active__CaMK_active) * var_CaMK_active__CaMK_active * var_CaMK_active__alpha_CaMK; // 1 / ms
        const double var_ICaL__IV_beta_infinity_star = 25.0 - 17.5 / (1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4)); // dimensionless
        const double var_ICaL__OI_star = 1.0 - var_chaste_interface__ICaL__C - var_chaste_interface__ICaL__CI - var_chaste_interface__ICaL__CI_star - var_chaste_interface__ICaL__C_star - var_chaste_interface__ICaL__O - var_chaste_interface__ICaL__OI - var_chaste_interface__ICaL__O_star; // dimensionless
        const double var_ICaL__delta = 3.0 / (1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4)); // per_ms
        const double var_ICaL__theta = 1.0; // per_ms
        const double var_ICaL__theta_I = 9.9999999999999995e-7; // per_ms
        const double var_IKs__O2 = 1.0 - var_chaste_interface__IKs__C1 - var_chaste_interface__IKs__C10 - var_chaste_interface__IKs__C11 - var_chaste_interface__IKs__C12 - var_chaste_interface__IKs__C13 - var_chaste_interface__IKs__C14 - var_chaste_interface__IKs__C15 - var_chaste_interface__IKs__C2 - var_chaste_interface__IKs__C3 - var_chaste_interface__IKs__C4 - var_chaste_interface__IKs__C5 - var_chaste_interface__IKs__C6 - var_chaste_interface__IKs__C7 - var_chaste_interface__IKs__C8 - var_chaste_interface__IKs__C9 - var_chaste_interface__IKs__O1; // dimensionless
        const double var_IKs__OKs = var_chaste_interface__IKs__O1 + var_IKs__O2; // dimensionless
        const double var_IKs__gKs = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[16]; // mS_per_uF
        const double var_IKs__theta = 0.089538306411019994; // per_ms
        const double var_INaCa__KmCa_act = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__denom_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_i, 2); // dimensionless
        const double var_INaCa__denom_ss_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_ss_sr, 2); // dimensionless
        const double var_INaCa__eta = 0.27000000000000002; // dimensionless
        const double var_INaCa__ksat = 0.32000000000000001; // dimensionless
        const double var_INaK__V_half = -92.0; // mV
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 2.6000000000000001; // mM
        const double var_INaK__sigma = 1.0; // dimensionless
        const double var_INaL_hL_gate__tau_hL = 600.0; // ms
        const double var_Ileak__nsrbar = 15.0; // mM
        const double var_Ileak__Ileak = var_chaste_interface__Ca__Ca_NSR * mParameters[0] / var_Ileak__nsrbar; // mM_per_ms
        const double var_IpCa__KmpCa = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * mParameters[10] / (var_chaste_interface__Ca__Ca_i + var_IpCa__KmpCa); // uA_per_uF
        const double var_Irel__K_beta = 0.28000000000000003; // mM
        const double var_Irel__Krel_infinity = 1.0; // mM
        const double var_Irel__Krel_tau = 0.0123; // mM
        const double var_Irel__beta_0 = 4.75; // ms
        const double var_Irel__delta_beta_0 = 1.0; // dimensionless
        const double var_Irel__h_beta = 10.0; // dimensionless
        const double var_Irel__delta_beta_CaMK = var_Irel__delta_beta_0 / (1.0 + pow((var_Irel__K_beta / var_CaMK_active__CaMK_active), var_Irel__h_beta)); // dimensionless
        const double var_Irel__beta_tau = (1.0 + var_Irel__delta_beta_CaMK) * var_Irel__beta_0; // ms
        const double var_Irel__h_rel = 8.0; // dimensionless
        const double var_Irel__alpha_rel = var_Irel__beta_tau * mParameters[1]; // mM_per_uA_per_uF_per_ms
        const double var_Irel__tau_rel = var_Irel__beta_tau / (1.0 + var_Irel__Krel_tau / var_chaste_interface__Ca__Ca_JSR); // ms
        const double var_Ito2__Ito2_max_scaling_factor = 1.0; // dimensionless
        const double var_Ito2__kCa_ito2 = 0.40000000000000002; // mM_per_ms
        const double var_Ito2__KCa_ito2 = 1.0 - 1 / (1.0 + pow(var_chaste_interface__Irel__Irel, 2) / pow(var_Ito2__kCa_ito2, 2)); // dimensionless
        const double var_Ito2_i2f_gate__tau_i2f = 8.0; // ms
        const double var_Itr__tautr = 25.0; // ms
        const double var_Itr__Itr = (-var_chaste_interface__Ca__Ca_JSR + var_chaste_interface__Ca__Ca_NSR) / var_Itr__tautr; // mM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_JSR = (-var_chaste_interface__Irel__Irel + var_Itr__Itr) * var_Ca__bcsqn; // mM / ms
        const double var_Iup__delta_iupCaMK_bar = 0.75; // dimensionless
        const double var_Iup__delta_kmPLB_bar = 0.00017000000000000001; // mM
        const double var_Iup__kmCaMK = 0.14999999999999999; // mM
        const double var_Iup__delta_iupCaMK = var_CaMK_active__CaMK_active * var_Iup__delta_iupCaMK_bar / (var_CaMK_active__CaMK_active + var_Iup__kmCaMK); // dimensionless
        const double var_Iup__delta_kmPLB = var_CaMK_active__CaMK_active * var_Iup__delta_kmPLB_bar / (var_CaMK_active__CaMK_active + var_Iup__kmCaMK); // mM
        const double var_Iup__kmup = 0.00092000000000000003; // mM
        const double var_Iup__Iup = (1.0 + var_Iup__delta_iupCaMK) * var_chaste_interface__Ca__Ca_i * mParameters[2] / (-var_Iup__delta_kmPLB + var_chaste_interface__Ca__Ca_i + var_Iup__kmup); // mM_per_ms
        const double var_INaK__PNa = pow(var_chaste_interface__Na__Na_i, 3) / pow((var_INaK__kmnai + var_chaste_interface__Na__Na_i), 3); // dimensionless
        const double var_Na__Idiff_Na = (-var_chaste_interface__Na__Na_i + var_chaste_interface__Na__Na_ss_sr) / var_Ca__tau_diff; // mM_per_ms
        const double var_cell_geometry__a = 0.0011000000000000001; // cm
        const double var_cell_geometry__l = 0.01; // cm
        const double var_cell_geometry__ageo = 2.0 * M_PI * pow(var_cell_geometry__a, 2) + 2.0 * M_PI * var_cell_geometry__a * var_cell_geometry__l; // cm2
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__ageo; // cm2
        const double var_cell_geometry__vcell = 1000.0 * M_PI * pow(var_cell_geometry__a, 2) * var_cell_geometry__l; // uL
        const double var_cell_geometry__Vjsr = 0.0047999999999999996 * var_cell_geometry__vcell; // uL
        const double var_cell_geometry__Vmyo = 0.67800000000000005 * var_cell_geometry__vcell; // uL
        const double var_cell_geometry__Vnsr = 0.055199999999999999 * var_cell_geometry__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_NSR = -var_Ileak__Ileak - var_Itr__Itr * var_cell_geometry__Vjsr / var_cell_geometry__Vnsr + var_Iup__Iup; // mM / ms
        const double var_cell_geometry__Vss_CaL = 0.002 * var_cell_geometry__vcell; // uL
        const double var_cell_geometry__Vss_sr = 0.02 * var_cell_geometry__vcell; // uL
        const double var_ICaL__ACT_infinity = 1 / (1.0 + exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__ACT_tau = 0.58999999999999997 + 0.80000000000000004 * exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm) / (1.0 + exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm)); // ms
        const double var_ICaL__IV_beta_star = 1 / ((1.0 + exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm)) * var_ICaL__IV_beta_infinity_star); // dimensionless
        const double var_ICaL__IV_infinity = 0.20000000000000001 + 0.80000000000000004 / (1.0 + exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__IV_infinity_star = 9.9990000999900015e-5 + 0.99990000999900008 / (1.0 + exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__IV_tau = 1 / (0.040277106492669565 / (1.0 + exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm)) + 0.032730010146303147 / (1.0 + exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm))); // ms
        const double var_ICaL__IV_tau_star = 1 / (0.040277106492669565 / (1.0 + exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm)) + var_ICaL__IV_beta_star); // ms
        const double var_ICaL__alpha = var_ICaL__ACT_infinity / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__beta = (1.0 - var_ICaL__ACT_infinity) / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__x = var_ICaL__IV_infinity / var_ICaL__IV_tau; // per_ms
        const double var_ICaL__x_star = var_ICaL__IV_infinity_star / var_ICaL__IV_tau_star; // per_ms
        const double var_ICaL__y = (1.0 - var_ICaL__IV_infinity) / var_ICaL__IV_tau; // per_ms
        const double d_dt_chaste_interface_var_ICaL__C = (-var_ICaL__alpha - var_ICaL__delta - var_ICaL__y) * var_chaste_interface__ICaL__C + var_chaste_interface__ICaL__CI * var_ICaL__x + var_chaste_interface__ICaL__C_star * var_ICaL__theta + var_chaste_interface__ICaL__O * var_ICaL__beta; // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__O = (-var_ICaL__beta - var_ICaL__delta - var_ICaL__y) * var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__C * var_ICaL__alpha + var_chaste_interface__ICaL__OI * var_ICaL__x + var_chaste_interface__ICaL__O_star * var_ICaL__theta; // 1 / ms
        const double var_ICaL__y_star = (1.0 - var_ICaL__IV_infinity_star) / var_ICaL__IV_tau_star; // per_ms
        const double d_dt_chaste_interface_var_ICaL__C_star = (-var_ICaL__alpha - var_ICaL__theta - var_ICaL__y_star) * var_chaste_interface__ICaL__C_star + var_chaste_interface__ICaL__C * var_ICaL__delta + var_chaste_interface__ICaL__CI_star * var_ICaL__x_star + var_chaste_interface__ICaL__O_star * var_ICaL__beta; // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__O_star = (-var_ICaL__beta - var_ICaL__theta - var_ICaL__y_star) * var_chaste_interface__ICaL__O_star + var_chaste_interface__ICaL__C_star * var_ICaL__alpha + var_chaste_interface__ICaL__O * var_ICaL__delta + var_ICaL__OI_star * var_ICaL__x_star; // 1 / ms
        const double var_ICaL__delta_I = var_ICaL__delta * var_ICaL__theta_I * var_ICaL__x * var_ICaL__y_star / (var_ICaL__theta * var_ICaL__x_star * var_ICaL__y); // per_ms
        const double d_dt_chaste_interface_var_ICaL__CI = (-var_ICaL__alpha - var_ICaL__delta_I - var_ICaL__x) * var_chaste_interface__ICaL__CI + var_chaste_interface__ICaL__C * var_ICaL__y + var_chaste_interface__ICaL__CI_star * var_ICaL__theta_I + var_chaste_interface__ICaL__OI * var_ICaL__beta; // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__CI_star = (-var_ICaL__alpha - var_ICaL__theta_I - var_ICaL__x_star) * var_chaste_interface__ICaL__CI_star + var_chaste_interface__ICaL__CI * var_ICaL__delta_I + var_chaste_interface__ICaL__C_star * var_ICaL__y_star + var_ICaL__OI_star * var_ICaL__beta; // 1 / ms
        const double d_dt_chaste_interface_var_ICaL__OI = (-var_ICaL__beta - var_ICaL__delta_I - var_ICaL__x) * var_chaste_interface__ICaL__OI + var_chaste_interface__ICaL__CI * var_ICaL__alpha + var_chaste_interface__ICaL__O * var_ICaL__y + var_ICaL__OI_star * var_ICaL__theta_I; // 1 / ms
        const double var_IKp__Kp = 1 / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IKr_r_gate__r = 1 / (1.0 + exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IKr_xr_gate__tau_xr = 1 / (((fabs(-1.7383999999999999 + var_chaste_interface__membrane__Vm) < 7.352941176468758e-7) ? (4.4117647058812543e-10 / (1.0 - exp(-9.9999999999975114e-8)) - 680000.00000016927 * (-1.7384007352941175 + var_chaste_interface__membrane__Vm) * (-4.4117647058812543e-10 / (1.0 - exp(9.9999999999975114e-8)) - 4.4117647058812543e-10 / (1.0 - exp(-9.9999999999975114e-8)))) : (0.00059999999999999995 * (-1.7383999999999999 + var_chaste_interface__membrane__Vm) / (1.0 - exp(0.2364224 - 0.13600000000000001 * var_chaste_interface__membrane__Vm)))) + ((fabs(38.360799999999998 + var_chaste_interface__membrane__Vm) < 6.5703022339436146e-7) ? (-1.9710906701830842e-10 / (-1.0 + exp(-1.0000000000062181e-7)) + 760999.99999526795 * (38.360800657030218 + var_chaste_interface__membrane__Vm) * (1.9710906701830842e-10 / (-1.0 + exp(1.0000000000062181e-7)) + 1.9710906701830842e-10 / (-1.0 + exp(-1.0000000000062181e-7)))) : (0.00029999999999999997 * (38.360799999999998 + var_chaste_interface__membrane__Vm) / (-1.0 + exp(5.8385137599999997 + 0.1522 * var_chaste_interface__membrane__Vm))))); // ms
        const double var_IKr_xr_gate__xr_infinity = 1 / (1.0 + exp(-2.3729411764705883 - 0.23529411764705882 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double d_dt_chaste_interface_var_IKr_xr_gate__xr = (-var_chaste_interface__IKr_xr_gate__xr + var_IKr_xr_gate__xr_infinity) / var_IKr_xr_gate__tau_xr; // 1 / ms
        const double var_INaL_hL_gate__hL_infinity = 1 / (1.0 + exp(14.918032786885247 + 0.16393442622950821 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double d_dt_chaste_interface_var_INaL_hL_gate__hL = (-var_chaste_interface__INaL_hL_gate__hL + var_INaL_hL_gate__hL_infinity) / var_INaL_hL_gate__tau_hL; // 1 / ms
        const double var_INaL_mL_gate__amL = ((fabs(47.130000000000003 + var_chaste_interface__membrane__Vm) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__Vm) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__Vm) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__Vm)))); // per_ms
        const double var_INaL_mL_gate__bmL = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__membrane__Vm); // per_ms
        const double d_dt_chaste_interface_var_INaL_mL_gate__mL = (1.0 - var_chaste_interface__INaL_mL_gate__mL) * var_INaL_mL_gate__amL - var_INaL_mL_gate__bmL * var_chaste_interface__INaL_mL_gate__mL; // 1 / ms
        const double var_INa_h_gate__ah = ((var_chaste_interface__membrane__Vm >= -40.0) ? (0) : (0.13500000000000001 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__membrane__Vm))); // per_ms
        const double var_INa_h_gate__bh = ((var_chaste_interface__membrane__Vm >= -40.0) ? (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__membrane__Vm))) : (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__Vm) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__Vm))); // per_ms
        const double d_dt_chaste_interface_var_INa_h_gate__h = (1.0 - var_chaste_interface__INa_h_gate__h) * var_INa_h_gate__ah - var_INa_h_gate__bh * var_chaste_interface__INa_h_gate__h; // 1 / ms
        const double var_INa_j_gate__aj = ((var_chaste_interface__membrane__Vm >= -40.0) ? (0) : ((37.780000000000001 + var_chaste_interface__membrane__Vm) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__Vm) - 6.9480000000000006e-5 * exp(-0.043909999999999998 * var_chaste_interface__membrane__Vm)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__Vm)))); // per_ms
        const double var_INa_j_gate__bj = ((var_chaste_interface__membrane__Vm >= -40.0) ? (0.29999999999999999 * exp(-2.5349999999999999e-7 * var_chaste_interface__membrane__Vm) / (1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__membrane__Vm))) : (0.1212 * exp(-0.01052 * var_chaste_interface__membrane__Vm) / (1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__membrane__Vm)))); // per_ms
        const double d_dt_chaste_interface_var_INa_j_gate__j = (1.0 - var_chaste_interface__INa_j_gate__j) * var_INa_j_gate__aj - var_INa_j_gate__bj * var_chaste_interface__INa_j_gate__j; // 1 / ms
        const double var_INa_m_gate__am = ((fabs(47.130000000000003 + var_chaste_interface__membrane__Vm) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__Vm) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__Vm) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__Vm)))); // per_ms
        const double var_INa_m_gate__bm = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__membrane__Vm); // per_ms
        const double d_dt_chaste_interface_var_INa_m_gate__m = (1.0 - var_chaste_interface__INa_m_gate__m) * var_INa_m_gate__am - var_INa_m_gate__bm * var_chaste_interface__INa_m_gate__m; // 1 / ms
        const double var_Ito1__rto1 = exp(0.0018181818181818182 * var_chaste_interface__membrane__Vm); // dimensionless
        const double var_Ito1_a_gate__a_infinity = 1 / (1.0 + exp(-1.3230057479321462 - 0.14019346698443852 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_Ito1_a_gate__alpha_a = 0.82719827942757873 / (1.0 + exp(0.62658348478969694 - 0.034035137876343539 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito1_a_gate__beta_a = 3.5 / (1.0 + exp(3.403513787634354 + 0.034035137876343539 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito1_a_gate__tau_a = 1 / (var_Ito1_a_gate__alpha_a + var_Ito1_a_gate__beta_a); // ms
        const double d_dt_chaste_interface_var_Ito1_a_gate__a = (-var_chaste_interface__Ito1_a_gate__a + var_Ito1_a_gate__a_infinity) / var_Ito1_a_gate__tau_a; // 1 / ms
        const double var_Ito1_i1f_gate__alpha_i1f = 0.025000000000000001 / (1.0 + exp(11.6 + 0.20000000000000001 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito1_i1f_gate__beta_i1f = 0.10208977775055385 / (1.0 + exp(-2.1111111111111112 - 0.1111111111111111 * var_chaste_interface__membrane__Vm)); // per_ms
        const double d_dt_chaste_interface_var_Ito1_i1f_gate__i1f = (1.0 - var_chaste_interface__Ito1_i1f_gate__i1f) * var_Ito1_i1f_gate__alpha_i1f - var_Ito1_i1f_gate__beta_i1f * var_chaste_interface__Ito1_i1f_gate__i1f; // 1 / ms
        const double var_Ito1_i1s_gate__alpha_i1s = 0.0040000000000000001 / (1.0 + exp(12.0 + 0.20000000000000001 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito1_i1s_gate__beta_i1s = 0.10208977775055385 / (1.0 + exp(-2.1111111111111112 - 0.1111111111111111 * var_chaste_interface__membrane__Vm)); // per_ms
        const double d_dt_chaste_interface_var_Ito1_i1s_gate__i1s = (1.0 - var_chaste_interface__Ito1_i1s_gate__i1s) * var_Ito1_i1s_gate__alpha_i1s - var_Ito1_i1s_gate__beta_i1s * var_chaste_interface__Ito1_i1s_gate__i1s; // 1 / ms
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__membrane__Vm) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__Vm) * (0.0096484999999999991 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(-9.9999999999999995e-8))) : (3612.0012202503358 * (-100.0 * exp(0.037435883507802616 * var_chaste_interface__membrane__Vm) + var_chaste_interface__Cl__Cl_i) * mParameters[19] * var_chaste_interface__membrane__Vm / (1.0 - exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_Ito2__Ito2_max * var_Ito2__Ito2_max_scaling_factor * var_Ito2__KCa_ito2 * var_chaste_interface__Ito2_i2f_gate__i2f; // uA_per_uF
        const double var_Ito2_i2f_gate__alpha_i2f = 0.025000000000000001 / (1.0 + exp(11.6 + 0.20000000000000001 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito2_i2f_gate__beta_i2f = 0.20000000000000001 / (1.0 + exp(-2.1111111111111112 - 0.1111111111111111 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito2_i2f_gate__i2f_infinity = var_Ito2_i2f_gate__alpha_i2f / (var_Ito2_i2f_gate__alpha_i2f + var_Ito2_i2f_gate__beta_i2f); // dimensionless
        const double d_dt_chaste_interface_var_Ito2_i2f_gate__i2f = (-var_chaste_interface__Ito2_i2f_gate__i2f + var_Ito2_i2f_gate__i2f_infinity) / var_Ito2_i2f_gate__tau_i2f; // 1 / ms
        const double var_membrane__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_membrane__i_Stim = var_membrane__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_ICaL__ICaL_max = ((fabs(var_chaste_interface__membrane__Vm) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__Vm) * (0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (14448.004881001343 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)) * mParameters[6] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_ICaL__ICaL = (var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__O_star) * var_ICaL__ICaL_max; // uA_per_uF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__Vm) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__Vm) * (0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(9.9999999999999995e-8)) + 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(-9.9999999999999995e-8))) : (14448.004881001343 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)) * mParameters[7] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_INaCa__denom_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_i + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_i / var_INaCa__KmCai) * mParameters[3]; // mM4
        const double var_INaCa__denom_ss_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(var_chaste_interface__Na__Na_ss_sr, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_ss_sr / var_INaCa__KmCai) * mParameters[3]; // mM4
        const double var_Irel__rel_infinity = var_ICaL__ICaL * var_Irel__alpha_rel / (1.0 + pow((var_Irel__Krel_infinity / var_chaste_interface__Ca__Ca_JSR), var_Irel__h_rel)); // mM_per_ms
        const double d_dt_chaste_interface_var_Irel__Irel = (-var_chaste_interface__Irel__Irel - var_Irel__rel_infinity) / var_Irel__tau_rel; // mM_per_ms / ms
        const double var_model_parameters__Cl_o = 100.0; // mM
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_cell_geometry__AF = var_cell_geometry__Acap / var_model_parameters__F; // uF_mole_per_C
        const double d_dt_chaste_interface_var_Ca__Ca_ss_CaL = -(-var_Ca__Idiff_ss * var_cell_geometry__Vss_sr / var_cell_geometry__Vss_CaL + 0.5 * var_ICaL__ICaL * var_cell_geometry__AF / var_cell_geometry__Vss_CaL) * var_Ca__bss_cal; // mM / ms
        const double d_dt_chaste_interface_var_Cl__Cl_ss = -var_Cl__Idiff_Cl + var_Ito2__Ito2 * var_cell_geometry__AF / var_cell_geometry__Vss_sr; // mM / ms
        const double var_IK1__gK1 = 0.43033148291193518 * sqrt(mParameters[4]) * mParameters[12]; // mS_per_uF
        const double var_IKr__gKr = 0.43033148291193518 * sqrt(mParameters[4]) * mParameters[15]; // mS_per_uF
        const double var_INaK__PK = mParameters[4] / (var_INaK__kmko + mParameters[4]); // dimensionless
        const double var_INaCa__denom_4 = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[3] + pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_i + pow(mParameters[5], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INaCa__denom_ss_4 = pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] + pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(mParameters[5], 3) * (1.0 + pow(var_chaste_interface__Na__Na_ss_sr, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__Vm) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__Vm) * (0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) : (3612.0012202503358 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)) * mParameters[9] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__alpha = 0.014864597980859999 * exp(0.029877301235880002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986312199829993 * exp(-0.055461057126639998 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C1 = var_chaste_interface__IKs__C2 * var_IKs__beta - 4.0 * var_chaste_interface__IKs__C1 * var_IKs__alpha; // 1 / ms
        const double var_IKs__delta = 0.0031173268874 * exp(-0.42625451944376003 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__eta = 0.077319900973309999 * exp(-0.06472612248871 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.01460066118316 * exp(0.24464953099645001 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C10 = (-2.0 * var_IKs__alpha - 2.0 * var_IKs__delta) * var_chaste_interface__IKs__C10 + var_chaste_interface__IKs__C11 * var_IKs__beta + var_chaste_interface__IKs__C7 * var_IKs__gamma; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C11 = (-var_IKs__alpha - var_IKs__beta - var_IKs__gamma - 2.0 * var_IKs__delta) * var_chaste_interface__IKs__C11 + 2.0 * var_chaste_interface__IKs__C10 * var_IKs__alpha + 2.0 * var_chaste_interface__IKs__C12 * var_IKs__beta + 2.0 * var_chaste_interface__IKs__C8 * var_IKs__gamma + 3.0 * var_chaste_interface__IKs__C13 * var_IKs__delta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C12 = (-2.0 * var_IKs__beta - 2.0 * var_IKs__delta - 2.0 * var_IKs__gamma) * var_chaste_interface__IKs__C12 + var_chaste_interface__IKs__C11 * var_IKs__alpha + 3.0 * var_chaste_interface__IKs__C14 * var_IKs__delta + 3.0 * var_chaste_interface__IKs__C9 * var_IKs__gamma; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C13 = (-var_IKs__alpha - 3.0 * var_IKs__delta) * var_chaste_interface__IKs__C13 + var_chaste_interface__IKs__C11 * var_IKs__gamma + var_chaste_interface__IKs__C14 * var_IKs__beta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C14 = (-var_IKs__beta - var_IKs__gamma - 3.0 * var_IKs__delta) * var_chaste_interface__IKs__C14 + var_chaste_interface__IKs__C13 * var_IKs__alpha + 2.0 * var_chaste_interface__IKs__C12 * var_IKs__gamma + 4.0 * var_chaste_interface__IKs__C15 * var_IKs__delta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C15 = (-var_IKs__theta - 4.0 * var_IKs__delta) * var_chaste_interface__IKs__C15 + var_chaste_interface__IKs__C14 * var_IKs__gamma + var_chaste_interface__IKs__O1 * var_IKs__eta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C2 = (-var_IKs__beta - var_IKs__gamma - 3.0 * var_IKs__alpha) * var_chaste_interface__IKs__C2 + var_chaste_interface__IKs__C6 * var_IKs__delta + 2.0 * var_chaste_interface__IKs__C3 * var_IKs__beta + 4.0 * var_chaste_interface__IKs__C1 * var_IKs__alpha; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C3 = (-2.0 * var_IKs__alpha - 2.0 * var_IKs__beta - 2.0 * var_IKs__gamma) * var_chaste_interface__IKs__C3 + var_chaste_interface__IKs__C7 * var_IKs__delta + 3.0 * var_chaste_interface__IKs__C2 * var_IKs__alpha + 3.0 * var_chaste_interface__IKs__C4 * var_IKs__beta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C4 = (-var_IKs__alpha - 3.0 * var_IKs__beta - 3.0 * var_IKs__gamma) * var_chaste_interface__IKs__C4 + var_chaste_interface__IKs__C8 * var_IKs__delta + 2.0 * var_chaste_interface__IKs__C3 * var_IKs__alpha + 4.0 * var_chaste_interface__IKs__C5 * var_IKs__beta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C5 = (-4.0 * var_IKs__beta - 4.0 * var_IKs__gamma) * var_chaste_interface__IKs__C5 + var_chaste_interface__IKs__C4 * var_IKs__alpha + var_chaste_interface__IKs__C9 * var_IKs__delta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C6 = (-var_IKs__delta - 3.0 * var_IKs__alpha) * var_chaste_interface__IKs__C6 + var_chaste_interface__IKs__C2 * var_IKs__gamma + var_chaste_interface__IKs__C7 * var_IKs__beta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C7 = (-var_IKs__beta - var_IKs__delta - var_IKs__gamma - 2.0 * var_IKs__alpha) * var_chaste_interface__IKs__C7 + 2.0 * var_chaste_interface__IKs__C10 * var_IKs__delta + 2.0 * var_chaste_interface__IKs__C3 * var_IKs__gamma + 2.0 * var_chaste_interface__IKs__C8 * var_IKs__beta + 3.0 * var_chaste_interface__IKs__C6 * var_IKs__alpha; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C8 = (-var_IKs__alpha - var_IKs__delta - 2.0 * var_IKs__beta - 2.0 * var_IKs__gamma) * var_chaste_interface__IKs__C8 + 2.0 * var_chaste_interface__IKs__C11 * var_IKs__delta + 2.0 * var_chaste_interface__IKs__C7 * var_IKs__alpha + 3.0 * var_chaste_interface__IKs__C4 * var_IKs__gamma + 3.0 * var_chaste_interface__IKs__C9 * var_IKs__beta; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__C9 = (-var_IKs__delta - 3.0 * var_IKs__beta - 3.0 * var_IKs__gamma) * var_chaste_interface__IKs__C9 + var_chaste_interface__IKs__C8 * var_IKs__alpha + 2.0 * var_chaste_interface__IKs__C12 * var_IKs__delta + 4.0 * var_chaste_interface__IKs__C5 * var_IKs__gamma; // 1 / ms
        const double var_IKs__omega = 0.79405459958640001 * exp(-0.080173781929769997 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__psi = 0.58638228663014003 * exp(0.28205554331496002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__O1 = (-var_IKs__eta - var_IKs__psi) * var_chaste_interface__IKs__O1 + var_chaste_interface__IKs__C15 * var_IKs__theta + var_IKs__O2 * var_IKs__omega; // 1 / ms
        const double var_INaCa__denom_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__denom_ss_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__num_ss = 0.20000000000000001 * (pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * mParameters[17]; // mM4_uA_per_uF
        const double var_INaCa__INaCa_ss_sr = var_INaCa__num_ss / ((var_INaCa__denom_ss_3 + var_INaCa__denom_ss_4) * var_INaCa__denom_ss_1 * var_INaCa__denom_ss_2); // uA_per_uF
        const double d_dt_chaste_interface_var_Ca__Ca_ss_sr = -(-var_chaste_interface__Irel__Irel * var_cell_geometry__Vjsr / var_cell_geometry__Vss_sr - var_INaCa__INaCa_ss_sr * var_cell_geometry__AF / var_cell_geometry__Vss_sr + var_Ca__Idiff + var_Ca__Idiff_ss) * var_Ca__bss_sr; // mM / ms
        const double d_dt_chaste_interface_var_Na__Na_ss_sr = -var_Na__Idiff_Na - 3.0 * var_INaCa__INaCa_ss_sr * var_cell_geometry__AF / var_cell_geometry__Vss_sr; // mM / ms
        const double var_INaCa__numerator = 0.80000000000000004 * (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[3] * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_i * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * mParameters[17]; // mM4_uA_per_uF
        const double var_INaCa__INaCa_cai = var_INaCa__numerator / ((var_INaCa__denom_3 + var_INaCa__denom_4) * var_INaCa__denom_1 * var_INaCa__denom_2); // uA_per_uF
        const double var_INaCa__INaCa = var_INaCa__INaCa_cai + var_INaCa__INaCa_ss_sr; // uA_per_uF
        const double d_dt_chaste_interface_var_Ca__Ca_i = ((-var_Iup__Iup + var_Ileak__Ileak) * var_cell_geometry__Vnsr / var_cell_geometry__Vmyo + var_Ca__Idiff * var_cell_geometry__Vss_sr / var_cell_geometry__Vmyo + 0.5 * (-var_ICab__ICab - var_IpCa__IpCa + 2.0 * var_INaCa__INaCa) * var_cell_geometry__AF / var_cell_geometry__Vmyo) * var_Ca__bmyo; // mM / ms
        const double var_INaK__phi = (-var_INaK__V_half + var_chaste_interface__membrane__Vm) * var_INaK__sigma * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INaK__fv = 1 / (1.0 + exp(-var_INaK__phi)); // dimensionless
        const double var_INaK__INaK = var_INaK__PK * var_INaK__PNa * var_INaK__fv * mParameters[18]; // uA_per_uF
        const double var_reversal_potentials__ECl = -var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__Cl_o / var_chaste_interface__Cl__Cl_i) / var_model_parameters__F; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__membrane__Vm) * mParameters[8]; // uA_per_uF
        const double var_reversal_potentials__EK = var_model_parameters__R * var_model_parameters__T * log(mParameters[4] / var_chaste_interface__K__K_i) / var_model_parameters__F; // mV
        const double var_CT_K_Cl__CT_K_Cl = (-var_reversal_potentials__ECl + var_reversal_potentials__EK) * var_CT_K_Cl__CT_K_Cl_max / (87.825100000000006 - var_reversal_potentials__ECl + var_reversal_potentials__EK); // mM_per_ms
        const double var_IK1_K1_gate__alpha_k1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__Vm - 0.23849999999999999 * var_reversal_potentials__EK)); // dimensionless
        const double var_IK1_K1_gate__beta_k1 = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__Vm - 0.080320000000000003 * var_reversal_potentials__EK) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__Vm - 0.061749999999999999 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IK1_K1_gate__K1 = var_IK1_K1_gate__alpha_k1 / (var_IK1_K1_gate__alpha_k1 + var_IK1_K1_gate__beta_k1); // dimensionless
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IK1__gK1 * var_IK1_K1_gate__K1; // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKp__Kp * mParameters[14]; // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKr__gKr * var_IKr_r_gate__r * var_chaste_interface__IKr_xr_gate__xr; // uA_per_uF
        const double var_Ito1__Ito1 = pow(var_chaste_interface__Ito1_a_gate__a, 3) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * mParameters[20] * var_Ito1__rto1 * var_chaste_interface__Ito1_i1f_gate__i1f * var_chaste_interface__Ito1_i1s_gate__i1s; // uA_per_uF
        const double var_reversal_potentials__ENa = var_model_parameters__R * var_model_parameters__T * log(mParameters[5] / var_chaste_interface__Na__Na_i) / var_model_parameters__F; // mV
        const double var_CT_Na_Cl__CT_Na_Cl = pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4) * var_CT_Na_Cl__CT_Na_Cl_max / (59494197.640692554 + pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4)); // mM_per_ms
        const double d_dt_chaste_interface_var_Cl__Cl_i = var_Cl__Idiff_Cl * var_cell_geometry__Vss_sr / var_cell_geometry__Vmyo + var_IClb__IClb * var_cell_geometry__AF / var_cell_geometry__Vmyo + var_CT_K_Cl__CT_K_Cl + var_CT_Na_Cl__CT_Na_Cl; // mM / ms
        const double var_INa__INa = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * mParameters[11] * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INaL__INaL = pow(var_chaste_interface__INaL_mL_gate__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * mParameters[13] * var_chaste_interface__INaL_hL_gate__hL; // uA_per_uF
        const double d_dt_chaste_interface_var_Na__Na_i = var_Na__Idiff_Na * var_cell_geometry__Vss_sr / var_cell_geometry__Vmyo - (3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + var_INa__INa + var_INaL__INaL + var_INab__INab) * var_cell_geometry__AF / var_cell_geometry__Vmyo + var_CT_Na_Cl__CT_Na_Cl; // mM / ms
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = var_model_parameters__R * var_model_parameters__T * log((mParameters[5] * var_reversal_potentials__prnak + mParameters[4]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_model_parameters__F; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__Vm) * var_IKs__OKs * var_IKs__gKs; // uA_per_uF
        const double d_dt_chaste_interface_var_K__K_i = -(-2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito1__Ito1 + var_membrane__i_Stim) * var_cell_geometry__AF / var_cell_geometry__Vmyo + var_CT_K_Cl__CT_K_Cl; // mM / ms
        
        mEvalF[1] = d_dt_chaste_interface_var_Ca__Ca_i;
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__environment__time, rY, delta);
        mEvalF[2] = d_dt_chaste_interface_var_IKs__C1;
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__environment__time, rY, delta);
        mEvalF[3] = d_dt_chaste_interface_var_IKs__C2;
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__environment__time, rY, delta);
        mEvalF[4] = d_dt_chaste_interface_var_IKs__C3;
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__environment__time, rY, delta);
        mEvalF[5] = d_dt_chaste_interface_var_IKs__C4;
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__environment__time, rY, delta);
        mEvalF[6] = d_dt_chaste_interface_var_IKs__C5;
        mPartialF[6] = EvaluatePartialDerivative6(var_chaste_interface__environment__time, rY, delta);
        mEvalF[7] = d_dt_chaste_interface_var_IKs__C6;
        mPartialF[7] = EvaluatePartialDerivative7(var_chaste_interface__environment__time, rY, delta);
        mEvalF[8] = d_dt_chaste_interface_var_IKs__C7;
        mPartialF[8] = EvaluatePartialDerivative8(var_chaste_interface__environment__time, rY, delta);
        mEvalF[9] = d_dt_chaste_interface_var_IKs__C8;
        mPartialF[9] = EvaluatePartialDerivative9(var_chaste_interface__environment__time, rY, delta);
        mEvalF[10] = d_dt_chaste_interface_var_IKs__C9;
        mPartialF[10] = EvaluatePartialDerivative10(var_chaste_interface__environment__time, rY, delta);
        mEvalF[11] = d_dt_chaste_interface_var_IKs__C10;
        mPartialF[11] = EvaluatePartialDerivative11(var_chaste_interface__environment__time, rY, delta);
        mEvalF[12] = d_dt_chaste_interface_var_IKs__C11;
        mPartialF[12] = EvaluatePartialDerivative12(var_chaste_interface__environment__time, rY, delta);
        mEvalF[13] = d_dt_chaste_interface_var_IKs__C12;
        mPartialF[13] = EvaluatePartialDerivative13(var_chaste_interface__environment__time, rY, delta);
        mEvalF[14] = d_dt_chaste_interface_var_IKs__C13;
        mPartialF[14] = EvaluatePartialDerivative14(var_chaste_interface__environment__time, rY, delta);
        mEvalF[15] = d_dt_chaste_interface_var_IKs__C14;
        mPartialF[15] = EvaluatePartialDerivative15(var_chaste_interface__environment__time, rY, delta);
        mEvalF[16] = d_dt_chaste_interface_var_IKs__C15;
        mPartialF[16] = EvaluatePartialDerivative16(var_chaste_interface__environment__time, rY, delta);
        mEvalF[17] = d_dt_chaste_interface_var_IKs__O1;
        mPartialF[17] = EvaluatePartialDerivative17(var_chaste_interface__environment__time, rY, delta);
        mEvalF[18] = d_dt_chaste_interface_var_ICaL__C;
        mPartialF[18] = EvaluatePartialDerivative18(var_chaste_interface__environment__time, rY, delta);
        mEvalF[19] = d_dt_chaste_interface_var_ICaL__O;
        mPartialF[19] = EvaluatePartialDerivative19(var_chaste_interface__environment__time, rY, delta);
        mEvalF[20] = d_dt_chaste_interface_var_ICaL__C_star;
        mPartialF[20] = EvaluatePartialDerivative20(var_chaste_interface__environment__time, rY, delta);
        mEvalF[21] = d_dt_chaste_interface_var_ICaL__O_star;
        mPartialF[21] = EvaluatePartialDerivative21(var_chaste_interface__environment__time, rY, delta);
        mEvalF[22] = d_dt_chaste_interface_var_ICaL__CI;
        mPartialF[22] = EvaluatePartialDerivative22(var_chaste_interface__environment__time, rY, delta);
        mEvalF[23] = d_dt_chaste_interface_var_ICaL__OI;
        mPartialF[23] = EvaluatePartialDerivative23(var_chaste_interface__environment__time, rY, delta);
        mEvalF[24] = d_dt_chaste_interface_var_ICaL__CI_star;
        mPartialF[24] = EvaluatePartialDerivative24(var_chaste_interface__environment__time, rY, delta);
        mEvalF[25] = d_dt_chaste_interface_var_INa_m_gate__m;
        mPartialF[25] = EvaluatePartialDerivative25(var_chaste_interface__environment__time, rY, delta);
        mEvalF[26] = d_dt_chaste_interface_var_INa_h_gate__h;
        mPartialF[26] = EvaluatePartialDerivative26(var_chaste_interface__environment__time, rY, delta);
        mEvalF[27] = d_dt_chaste_interface_var_INa_j_gate__j;
        mPartialF[27] = EvaluatePartialDerivative27(var_chaste_interface__environment__time, rY, delta);
        mEvalF[28] = d_dt_chaste_interface_var_INaL_mL_gate__mL;
        mPartialF[28] = EvaluatePartialDerivative28(var_chaste_interface__environment__time, rY, delta);
        mEvalF[29] = d_dt_chaste_interface_var_INaL_hL_gate__hL;
        mPartialF[29] = EvaluatePartialDerivative29(var_chaste_interface__environment__time, rY, delta);
        mEvalF[30] = d_dt_chaste_interface_var_IKr_xr_gate__xr;
        mPartialF[30] = EvaluatePartialDerivative30(var_chaste_interface__environment__time, rY, delta);
        mEvalF[31] = d_dt_chaste_interface_var_Ito1_a_gate__a;
        mPartialF[31] = EvaluatePartialDerivative31(var_chaste_interface__environment__time, rY, delta);
        mEvalF[32] = d_dt_chaste_interface_var_Ito1_i1f_gate__i1f;
        mPartialF[32] = EvaluatePartialDerivative32(var_chaste_interface__environment__time, rY, delta);
        mEvalF[33] = d_dt_chaste_interface_var_Ito1_i1s_gate__i1s;
        mPartialF[33] = EvaluatePartialDerivative33(var_chaste_interface__environment__time, rY, delta);
        mEvalF[34] = d_dt_chaste_interface_var_Ito2_i2f_gate__i2f;
        mPartialF[34] = EvaluatePartialDerivative34(var_chaste_interface__environment__time, rY, delta);
        mEvalF[35] = d_dt_chaste_interface_var_Irel__Irel;
        mPartialF[35] = EvaluatePartialDerivative35(var_chaste_interface__environment__time, rY, delta);
        mEvalF[36] = d_dt_chaste_interface_var_Ca__Ca_JSR;
        mPartialF[36] = EvaluatePartialDerivative36(var_chaste_interface__environment__time, rY, delta);
        mEvalF[37] = d_dt_chaste_interface_var_Ca__Ca_NSR;
        mPartialF[37] = EvaluatePartialDerivative37(var_chaste_interface__environment__time, rY, delta);
        mEvalF[38] = d_dt_chaste_interface_var_Ca__Ca_ss_sr;
        mPartialF[38] = EvaluatePartialDerivative38(var_chaste_interface__environment__time, rY, delta);
        mEvalF[39] = d_dt_chaste_interface_var_Ca__Ca_ss_CaL;
        mPartialF[39] = EvaluatePartialDerivative39(var_chaste_interface__environment__time, rY, delta);
        mEvalF[40] = d_dt_chaste_interface_var_Na__Na_i;
        mPartialF[40] = EvaluatePartialDerivative40(var_chaste_interface__environment__time, rY, delta);
        mEvalF[41] = d_dt_chaste_interface_var_Na__Na_ss_sr;
        mPartialF[41] = EvaluatePartialDerivative41(var_chaste_interface__environment__time, rY, delta);
        mEvalF[42] = d_dt_chaste_interface_var_Cl__Cl_i;
        mPartialF[42] = EvaluatePartialDerivative42(var_chaste_interface__environment__time, rY, delta);
        mEvalF[43] = d_dt_chaste_interface_var_Cl__Cl_ss;
        mPartialF[43] = EvaluatePartialDerivative43(var_chaste_interface__environment__time, rY, delta);
        mEvalF[44] = d_dt_chaste_interface_var_K__K_i;
        mPartialF[44] = EvaluatePartialDerivative44(var_chaste_interface__environment__time, rY, delta);
        mEvalF[45] = d_dt_chaste_interface_var_CaMK_active__CaMK_trap;
        mPartialF[45] = EvaluatePartialDerivative45(var_chaste_interface__environment__time, rY, delta);
        
        {
            if (fabs(mPartialF[1]) < delta){
                rY[1] += mDt*d_dt_chaste_interface_var_Ca__Ca_i;
            }
            else
            {
                rY[1] += (d_dt_chaste_interface_var_Ca__Ca_i/mPartialF[1])*(exp(mPartialF[1]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[2]) < delta){
                rY[2] += mDt*d_dt_chaste_interface_var_IKs__C1;
            }
            else
            {
                rY[2] += (d_dt_chaste_interface_var_IKs__C1/mPartialF[2])*(exp(mPartialF[2]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[3]) < delta){
                rY[3] += mDt*d_dt_chaste_interface_var_IKs__C2;
            }
            else
            {
                rY[3] += (d_dt_chaste_interface_var_IKs__C2/mPartialF[3])*(exp(mPartialF[3]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[4]) < delta){
                rY[4] += mDt*d_dt_chaste_interface_var_IKs__C3;
            }
            else
            {
                rY[4] += (d_dt_chaste_interface_var_IKs__C3/mPartialF[4])*(exp(mPartialF[4]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[5]) < delta){
                rY[5] += mDt*d_dt_chaste_interface_var_IKs__C4;
            }
            else
            {
                rY[5] += (d_dt_chaste_interface_var_IKs__C4/mPartialF[5])*(exp(mPartialF[5]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[6]) < delta){
                rY[6] += mDt*d_dt_chaste_interface_var_IKs__C5;
            }
            else
            {
                rY[6] += (d_dt_chaste_interface_var_IKs__C5/mPartialF[6])*(exp(mPartialF[6]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[7]) < delta){
                rY[7] += mDt*d_dt_chaste_interface_var_IKs__C6;
            }
            else
            {
                rY[7] += (d_dt_chaste_interface_var_IKs__C6/mPartialF[7])*(exp(mPartialF[7]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[8]) < delta){
                rY[8] += mDt*d_dt_chaste_interface_var_IKs__C7;
            }
            else
            {
                rY[8] += (d_dt_chaste_interface_var_IKs__C7/mPartialF[8])*(exp(mPartialF[8]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[9]) < delta){
                rY[9] += mDt*d_dt_chaste_interface_var_IKs__C8;
            }
            else
            {
                rY[9] += (d_dt_chaste_interface_var_IKs__C8/mPartialF[9])*(exp(mPartialF[9]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[10]) < delta){
                rY[10] += mDt*d_dt_chaste_interface_var_IKs__C9;
            }
            else
            {
                rY[10] += (d_dt_chaste_interface_var_IKs__C9/mPartialF[10])*(exp(mPartialF[10]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[11]) < delta){
                rY[11] += mDt*d_dt_chaste_interface_var_IKs__C10;
            }
            else
            {
                rY[11] += (d_dt_chaste_interface_var_IKs__C10/mPartialF[11])*(exp(mPartialF[11]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[12]) < delta){
                rY[12] += mDt*d_dt_chaste_interface_var_IKs__C11;
            }
            else
            {
                rY[12] += (d_dt_chaste_interface_var_IKs__C11/mPartialF[12])*(exp(mPartialF[12]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[13]) < delta){
                rY[13] += mDt*d_dt_chaste_interface_var_IKs__C12;
            }
            else
            {
                rY[13] += (d_dt_chaste_interface_var_IKs__C12/mPartialF[13])*(exp(mPartialF[13]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[14]) < delta){
                rY[14] += mDt*d_dt_chaste_interface_var_IKs__C13;
            }
            else
            {
                rY[14] += (d_dt_chaste_interface_var_IKs__C13/mPartialF[14])*(exp(mPartialF[14]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[15]) < delta){
                rY[15] += mDt*d_dt_chaste_interface_var_IKs__C14;
            }
            else
            {
                rY[15] += (d_dt_chaste_interface_var_IKs__C14/mPartialF[15])*(exp(mPartialF[15]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[16]) < delta){
                rY[16] += mDt*d_dt_chaste_interface_var_IKs__C15;
            }
            else
            {
                rY[16] += (d_dt_chaste_interface_var_IKs__C15/mPartialF[16])*(exp(mPartialF[16]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[17]) < delta){
                rY[17] += mDt*d_dt_chaste_interface_var_IKs__O1;
            }
            else
            {
                rY[17] += (d_dt_chaste_interface_var_IKs__O1/mPartialF[17])*(exp(mPartialF[17]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[18]) < delta){
                rY[18] += mDt*d_dt_chaste_interface_var_ICaL__C;
            }
            else
            {
                rY[18] += (d_dt_chaste_interface_var_ICaL__C/mPartialF[18])*(exp(mPartialF[18]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[19]) < delta){
                rY[19] += mDt*d_dt_chaste_interface_var_ICaL__O;
            }
            else
            {
                rY[19] += (d_dt_chaste_interface_var_ICaL__O/mPartialF[19])*(exp(mPartialF[19]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[20]) < delta){
                rY[20] += mDt*d_dt_chaste_interface_var_ICaL__C_star;
            }
            else
            {
                rY[20] += (d_dt_chaste_interface_var_ICaL__C_star/mPartialF[20])*(exp(mPartialF[20]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[21]) < delta){
                rY[21] += mDt*d_dt_chaste_interface_var_ICaL__O_star;
            }
            else
            {
                rY[21] += (d_dt_chaste_interface_var_ICaL__O_star/mPartialF[21])*(exp(mPartialF[21]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[22]) < delta){
                rY[22] += mDt*d_dt_chaste_interface_var_ICaL__CI;
            }
            else
            {
                rY[22] += (d_dt_chaste_interface_var_ICaL__CI/mPartialF[22])*(exp(mPartialF[22]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[23]) < delta){
                rY[23] += mDt*d_dt_chaste_interface_var_ICaL__OI;
            }
            else
            {
                rY[23] += (d_dt_chaste_interface_var_ICaL__OI/mPartialF[23])*(exp(mPartialF[23]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[24]) < delta){
                rY[24] += mDt*d_dt_chaste_interface_var_ICaL__CI_star;
            }
            else
            {
                rY[24] += (d_dt_chaste_interface_var_ICaL__CI_star/mPartialF[24])*(exp(mPartialF[24]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[25]) < delta){
                rY[25] += mDt*d_dt_chaste_interface_var_INa_m_gate__m;
            }
            else
            {
                rY[25] += (d_dt_chaste_interface_var_INa_m_gate__m/mPartialF[25])*(exp(mPartialF[25]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[26]) < delta){
                rY[26] += mDt*d_dt_chaste_interface_var_INa_h_gate__h;
            }
            else
            {
                rY[26] += (d_dt_chaste_interface_var_INa_h_gate__h/mPartialF[26])*(exp(mPartialF[26]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[27]) < delta){
                rY[27] += mDt*d_dt_chaste_interface_var_INa_j_gate__j;
            }
            else
            {
                rY[27] += (d_dt_chaste_interface_var_INa_j_gate__j/mPartialF[27])*(exp(mPartialF[27]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[28]) < delta){
                rY[28] += mDt*d_dt_chaste_interface_var_INaL_mL_gate__mL;
            }
            else
            {
                rY[28] += (d_dt_chaste_interface_var_INaL_mL_gate__mL/mPartialF[28])*(exp(mPartialF[28]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[29]) < delta){
                rY[29] += mDt*d_dt_chaste_interface_var_INaL_hL_gate__hL;
            }
            else
            {
                rY[29] += (d_dt_chaste_interface_var_INaL_hL_gate__hL/mPartialF[29])*(exp(mPartialF[29]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[30]) < delta){
                rY[30] += mDt*d_dt_chaste_interface_var_IKr_xr_gate__xr;
            }
            else
            {
                rY[30] += (d_dt_chaste_interface_var_IKr_xr_gate__xr/mPartialF[30])*(exp(mPartialF[30]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[31]) < delta){
                rY[31] += mDt*d_dt_chaste_interface_var_Ito1_a_gate__a;
            }
            else
            {
                rY[31] += (d_dt_chaste_interface_var_Ito1_a_gate__a/mPartialF[31])*(exp(mPartialF[31]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[32]) < delta){
                rY[32] += mDt*d_dt_chaste_interface_var_Ito1_i1f_gate__i1f;
            }
            else
            {
                rY[32] += (d_dt_chaste_interface_var_Ito1_i1f_gate__i1f/mPartialF[32])*(exp(mPartialF[32]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[33]) < delta){
                rY[33] += mDt*d_dt_chaste_interface_var_Ito1_i1s_gate__i1s;
            }
            else
            {
                rY[33] += (d_dt_chaste_interface_var_Ito1_i1s_gate__i1s/mPartialF[33])*(exp(mPartialF[33]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[34]) < delta){
                rY[34] += mDt*d_dt_chaste_interface_var_Ito2_i2f_gate__i2f;
            }
            else
            {
                rY[34] += (d_dt_chaste_interface_var_Ito2_i2f_gate__i2f/mPartialF[34])*(exp(mPartialF[34]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[35]) < delta){
                rY[35] += mDt*d_dt_chaste_interface_var_Irel__Irel;
            }
            else
            {
                rY[35] += (d_dt_chaste_interface_var_Irel__Irel/mPartialF[35])*(exp(mPartialF[35]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[36]) < delta){
                rY[36] += mDt*d_dt_chaste_interface_var_Ca__Ca_JSR;
            }
            else
            {
                rY[36] += (d_dt_chaste_interface_var_Ca__Ca_JSR/mPartialF[36])*(exp(mPartialF[36]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[37]) < delta){
                rY[37] += mDt*d_dt_chaste_interface_var_Ca__Ca_NSR;
            }
            else
            {
                rY[37] += (d_dt_chaste_interface_var_Ca__Ca_NSR/mPartialF[37])*(exp(mPartialF[37]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[38]) < delta){
                rY[38] += mDt*d_dt_chaste_interface_var_Ca__Ca_ss_sr;
            }
            else
            {
                rY[38] += (d_dt_chaste_interface_var_Ca__Ca_ss_sr/mPartialF[38])*(exp(mPartialF[38]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[39]) < delta){
                rY[39] += mDt*d_dt_chaste_interface_var_Ca__Ca_ss_CaL;
            }
            else
            {
                rY[39] += (d_dt_chaste_interface_var_Ca__Ca_ss_CaL/mPartialF[39])*(exp(mPartialF[39]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[40]) < delta){
                rY[40] += mDt*d_dt_chaste_interface_var_Na__Na_i;
            }
            else
            {
                rY[40] += (d_dt_chaste_interface_var_Na__Na_i/mPartialF[40])*(exp(mPartialF[40]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[41]) < delta){
                rY[41] += mDt*d_dt_chaste_interface_var_Na__Na_ss_sr;
            }
            else
            {
                rY[41] += (d_dt_chaste_interface_var_Na__Na_ss_sr/mPartialF[41])*(exp(mPartialF[41]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[42]) < delta){
                rY[42] += mDt*d_dt_chaste_interface_var_Cl__Cl_i;
            }
            else
            {
                rY[42] += (d_dt_chaste_interface_var_Cl__Cl_i/mPartialF[42])*(exp(mPartialF[42]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[43]) < delta){
                rY[43] += mDt*d_dt_chaste_interface_var_Cl__Cl_ss;
            }
            else
            {
                rY[43] += (d_dt_chaste_interface_var_Cl__Cl_ss/mPartialF[43])*(exp(mPartialF[43]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[44]) < delta){
                rY[44] += mDt*d_dt_chaste_interface_var_K__K_i;
            }
            else
            {
                rY[44] += (d_dt_chaste_interface_var_K__K_i/mPartialF[44])*(exp(mPartialF[44]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[45]) < delta){
                rY[45] += mDt*d_dt_chaste_interface_var_CaMK_active__CaMK_trap;
            }
            else
            {
                rY[45] += (d_dt_chaste_interface_var_CaMK_active__CaMK_trap/mPartialF[45])*(exp(mPartialF[45]*mDt)-1.0);
            }
            
        }        
        
    }
   
    
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        double d_dt_chaste_interface_var_membrane__Vm;
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 8.38749860095482e-05
        double var_chaste_interface__IKs__C1 = rY[2];
        // Units: dimensionless; Initial value: 0.476679784307081
        double var_chaste_interface__IKs__C2 = rY[3];
        // Units: dimensionless; Initial value: 0.255181042718489
        double var_chaste_interface__IKs__C3 = rY[4];
        // Units: dimensionless; Initial value: 0.0512272866698557
        double var_chaste_interface__IKs__C4 = rY[5];
        // Units: dimensionless; Initial value: 0.0045705849736195
        double var_chaste_interface__IKs__C5 = rY[6];
        // Units: dimensionless; Initial value: 0.000152923243503507
        double var_chaste_interface__IKs__C6 = rY[7];
        // Units: dimensionless; Initial value: 0.132814156809568
        double var_chaste_interface__IKs__C7 = rY[8];
        // Units: dimensionless; Initial value: 0.053324572164618
        double var_chaste_interface__IKs__C8 = rY[9];
        // Units: dimensionless; Initial value: 0.00713656414955778
        double var_chaste_interface__IKs__C9 = rY[10];
        // Units: dimensionless; Initial value: 0.000318368292970148
        double var_chaste_interface__IKs__C10 = rY[11];
        // Units: dimensionless; Initial value: 0.0138769647384953
        double var_chaste_interface__IKs__C11 = rY[12];
        // Units: dimensionless; Initial value: 0.00371438476499172
        double var_chaste_interface__IKs__C12 = rY[13];
        // Units: dimensionless; Initial value: 0.000248553788631871
        double var_chaste_interface__IKs__C13 = rY[14];
        // Units: dimensionless; Initial value: 0.000644426171899078
        double var_chaste_interface__IKs__C14 = rY[15];
        // Units: dimensionless; Initial value: 8.62495047666861e-05
        double var_chaste_interface__IKs__C15 = rY[16];
        // Units: dimensionless; Initial value: 1.12344645485893e-05
        double var_chaste_interface__IKs__O1 = rY[17];
        // Units: dimensionless; Initial value: 1.05292905767805e-05
        double var_chaste_interface__ICaL__O = rY[19];
        // Units: dimensionless; Initial value: 2.26882961412491e-05
        double var_chaste_interface__ICaL__O_star = rY[21];
        // Units: dimensionless; Initial value: 1.23556404128518e-10
        double var_chaste_interface__INa_m_gate__m = rY[25];
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INa_h_gate__h = rY[26];
        // Units: dimensionless; Initial value: 0.991354143386887
        double var_chaste_interface__INa_j_gate__j = rY[27];
        // Units: dimensionless; Initial value: 0.99709036251243
        double var_chaste_interface__INaL_mL_gate__mL = rY[28];
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INaL_hL_gate__hL = rY[29];
        // Units: dimensionless; Initial value: 0.319611809402137
        double var_chaste_interface__IKr_xr_gate__xr = rY[30];
        // Units: dimensionless; Initial value: 4.06959064407486e-06
        double var_chaste_interface__Ito1_a_gate__a = rY[31];
        // Units: dimensionless; Initial value: 1.76776038804228e-05
        double var_chaste_interface__Ito1_i1f_gate__i1f = rY[32];
        // Units: dimensionless; Initial value: 0.997976503910799
        double var_chaste_interface__Ito1_i1s_gate__i1s = rY[33];
        // Units: dimensionless; Initial value: 0.947581184798815
        double var_chaste_interface__Ito2_i2f_gate__i2f = rY[34];
        // Units: dimensionless; Initial value: 0.996044894628276
        double var_chaste_interface__Irel__Irel = rY[35];
        // Units: mM_per_ms; Initial value: 0.000714227102027745
        double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
        // Units: mM; Initial value: 0.000119239795531548
        double var_chaste_interface__Na__Na_i = rY[40];
        // Units: mM; Initial value: 8.01031392415197
        double var_chaste_interface__Na__Na_ss_sr = rY[41];
        // Units: mM; Initial value: 8.01033434859049
        double var_chaste_interface__Cl__Cl_i = rY[42];
        // Units: mM; Initial value: 20.6683603724432
        double var_chaste_interface__K__K_i = rY[44];
        // Units: mM; Initial value: 144.907134343314
        

        // Mathematics
        const double var_IKs__O2 = 1.0 - var_chaste_interface__IKs__C1 - var_chaste_interface__IKs__C10 - var_chaste_interface__IKs__C11 - var_chaste_interface__IKs__C12 - var_chaste_interface__IKs__C13 - var_chaste_interface__IKs__C14 - var_chaste_interface__IKs__C15 - var_chaste_interface__IKs__C2 - var_chaste_interface__IKs__C3 - var_chaste_interface__IKs__C4 - var_chaste_interface__IKs__C5 - var_chaste_interface__IKs__C6 - var_chaste_interface__IKs__C7 - var_chaste_interface__IKs__C8 - var_chaste_interface__IKs__C9 - var_chaste_interface__IKs__O1; // dimensionless
        const double var_IKs__OKs = var_chaste_interface__IKs__O1 + var_IKs__O2; // dimensionless
        const double var_IKs__gKs = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[16]; // mS_per_uF
        const double var_INaCa__KmCa_act = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__denom_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_i, 2); // dimensionless
        const double var_INaCa__denom_ss_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_ss_sr, 2); // dimensionless
        const double var_INaCa__eta = 0.27000000000000002; // dimensionless
        const double var_INaCa__ksat = 0.32000000000000001; // dimensionless
        const double var_INaK__V_half = -92.0; // mV
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 2.6000000000000001; // mM
        const double var_INaK__sigma = 1.0; // dimensionless
        const double var_IpCa__KmpCa = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * mParameters[10] / (var_chaste_interface__Ca__Ca_i + var_IpCa__KmpCa); // uA_per_uF
        const double var_Ito2__Ito2_max_scaling_factor = 1.0; // dimensionless
        const double var_Ito2__kCa_ito2 = 0.40000000000000002; // mM_per_ms
        const double var_Ito2__KCa_ito2 = 1.0 - 1 / (1.0 + pow(var_chaste_interface__Irel__Irel, 2) / pow(var_Ito2__kCa_ito2, 2)); // dimensionless
        const double var_INaK__PNa = pow(var_chaste_interface__Na__Na_i, 3) / pow((var_INaK__kmnai + var_chaste_interface__Na__Na_i), 3); // dimensionless
        const double var_IKp__Kp = 1 / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IKr_r_gate__r = 1 / (1.0 + exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_Ito1__rto1 = exp(0.0018181818181818182 * var_chaste_interface__membrane__Vm); // dimensionless
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__membrane__Vm) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__Vm) * (0.0096484999999999991 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(-9.9999999999999995e-8))) : (3612.0012202503358 * (-100.0 * exp(0.037435883507802616 * var_chaste_interface__membrane__Vm) + var_chaste_interface__Cl__Cl_i) * mParameters[19] * var_chaste_interface__membrane__Vm / (1.0 - exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_Ito2__Ito2_max * var_Ito2__Ito2_max_scaling_factor * var_Ito2__KCa_ito2 * var_chaste_interface__Ito2_i2f_gate__i2f; // uA_per_uF
        const double var_membrane__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_membrane__i_Stim = var_membrane__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_ICaL__ICaL_max = ((fabs(var_chaste_interface__membrane__Vm) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__Vm) * (0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (14448.004881001343 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)) * mParameters[6] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_ICaL__ICaL = (var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__O_star) * var_ICaL__ICaL_max; // uA_per_uF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__Vm) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__Vm) * (0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(9.9999999999999995e-8)) + 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(-9.9999999999999995e-8))) : (14448.004881001343 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)) * mParameters[7] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_INaCa__denom_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_i + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_i / var_INaCa__KmCai) * mParameters[3]; // mM4
        const double var_INaCa__denom_ss_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(var_chaste_interface__Na__Na_ss_sr, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_ss_sr / var_INaCa__KmCai) * mParameters[3]; // mM4
        const double var_model_parameters__Cl_o = 100.0; // mM
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_IK1__gK1 = 0.43033148291193518 * sqrt(mParameters[4]) * mParameters[12]; // mS_per_uF
        const double var_IKr__gKr = 0.43033148291193518 * sqrt(mParameters[4]) * mParameters[15]; // mS_per_uF
        const double var_INaK__PK = mParameters[4] / (var_INaK__kmko + mParameters[4]); // dimensionless
        const double var_INaCa__denom_4 = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[3] + pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_i + pow(mParameters[5], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INaCa__denom_ss_4 = pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] + pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(mParameters[5], 3) * (1.0 + pow(var_chaste_interface__Na__Na_ss_sr, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__Vm) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__Vm) * (0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) : (3612.0012202503358 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)) * mParameters[9] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_INaCa__denom_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__denom_ss_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__num_ss = 0.20000000000000001 * (pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * mParameters[17]; // mM4_uA_per_uF
        const double var_INaCa__INaCa_ss_sr = var_INaCa__num_ss / ((var_INaCa__denom_ss_3 + var_INaCa__denom_ss_4) * var_INaCa__denom_ss_1 * var_INaCa__denom_ss_2); // uA_per_uF
        const double var_INaCa__numerator = 0.80000000000000004 * (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[3] * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_i * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * mParameters[17]; // mM4_uA_per_uF
        const double var_INaCa__INaCa_cai = var_INaCa__numerator / ((var_INaCa__denom_3 + var_INaCa__denom_4) * var_INaCa__denom_1 * var_INaCa__denom_2); // uA_per_uF
        const double var_INaCa__INaCa = var_INaCa__INaCa_cai + var_INaCa__INaCa_ss_sr; // uA_per_uF
        const double var_INaK__phi = (-var_INaK__V_half + var_chaste_interface__membrane__Vm) * var_INaK__sigma * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INaK__fv = 1 / (1.0 + exp(-var_INaK__phi)); // dimensionless
        const double var_INaK__INaK = var_INaK__PK * var_INaK__PNa * var_INaK__fv * mParameters[18]; // uA_per_uF
        const double var_membrane__caiont = -2.0 * var_INaCa__INaCa - 2.0 * var_INaCa__INaCa_ss_sr + var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa; // uA_per_uF
        const double var_reversal_potentials__ECl = -var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__Cl_o / var_chaste_interface__Cl__Cl_i) / var_model_parameters__F; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__membrane__Vm) * mParameters[8]; // uA_per_uF
        const double var_membrane__clont = var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
        const double var_reversal_potentials__EK = var_model_parameters__R * var_model_parameters__T * log(mParameters[4] / var_chaste_interface__K__K_i) / var_model_parameters__F; // mV
        const double var_IK1_K1_gate__alpha_k1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__Vm - 0.23849999999999999 * var_reversal_potentials__EK)); // dimensionless
        const double var_IK1_K1_gate__beta_k1 = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__Vm - 0.080320000000000003 * var_reversal_potentials__EK) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__Vm - 0.061749999999999999 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IK1_K1_gate__K1 = var_IK1_K1_gate__alpha_k1 / (var_IK1_K1_gate__alpha_k1 + var_IK1_K1_gate__beta_k1); // dimensionless
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IK1__gK1 * var_IK1_K1_gate__K1; // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKp__Kp * mParameters[14]; // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKr__gKr * var_IKr_r_gate__r * var_chaste_interface__IKr_xr_gate__xr; // uA_per_uF
        const double var_Ito1__Ito1 = pow(var_chaste_interface__Ito1_a_gate__a, 3) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * mParameters[20] * var_Ito1__rto1 * var_chaste_interface__Ito1_i1f_gate__i1f * var_chaste_interface__Ito1_i1s_gate__i1s; // uA_per_uF
        const double var_reversal_potentials__ENa = var_model_parameters__R * var_model_parameters__T * log(mParameters[5] / var_chaste_interface__Na__Na_i) / var_model_parameters__F; // mV
        const double var_INa__INa = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * mParameters[11] * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INaL__INaL = pow(var_chaste_interface__INaL_mL_gate__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * mParameters[13] * var_chaste_interface__INaL_hL_gate__hL; // uA_per_uF
        const double var_membrane__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaCa__INaCa_ss_sr + 3.0 * var_INaK__INaK + var_INa__INa + var_INaL__INaL + var_INab__INab; // uA_per_uF
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = var_model_parameters__R * var_model_parameters__T * log((mParameters[5] * var_reversal_potentials__prnak + mParameters[4]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_model_parameters__F; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__Vm) * var_IKs__OKs * var_IKs__gKs; // uA_per_uF
        const double var_membrane__kiont = -2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito1__Ito1 + var_membrane__i_Stim; // uA_per_uF
        d_dt_chaste_interface_var_membrane__Vm = -var_membrane__caiont - var_membrane__clont - var_membrane__kiont - var_membrane__naiont; // mV / ms

        return d_dt_chaste_interface_var_membrane__Vm;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            double var_chaste_interface__Ca__Ca_i = rY[1];
            // Units: mM; Initial value: 8.38749860095482e-05
            double var_chaste_interface__IKs__C1 = rY[2];
            // Units: dimensionless; Initial value: 0.476679784307081
            double var_chaste_interface__IKs__C2 = rY[3];
            // Units: dimensionless; Initial value: 0.255181042718489
            double var_chaste_interface__IKs__C3 = rY[4];
            // Units: dimensionless; Initial value: 0.0512272866698557
            double var_chaste_interface__IKs__C4 = rY[5];
            // Units: dimensionless; Initial value: 0.0045705849736195
            double var_chaste_interface__IKs__C5 = rY[6];
            // Units: dimensionless; Initial value: 0.000152923243503507
            double var_chaste_interface__IKs__C6 = rY[7];
            // Units: dimensionless; Initial value: 0.132814156809568
            double var_chaste_interface__IKs__C7 = rY[8];
            // Units: dimensionless; Initial value: 0.053324572164618
            double var_chaste_interface__IKs__C8 = rY[9];
            // Units: dimensionless; Initial value: 0.00713656414955778
            double var_chaste_interface__IKs__C9 = rY[10];
            // Units: dimensionless; Initial value: 0.000318368292970148
            double var_chaste_interface__IKs__C10 = rY[11];
            // Units: dimensionless; Initial value: 0.0138769647384953
            double var_chaste_interface__IKs__C11 = rY[12];
            // Units: dimensionless; Initial value: 0.00371438476499172
            double var_chaste_interface__IKs__C12 = rY[13];
            // Units: dimensionless; Initial value: 0.000248553788631871
            double var_chaste_interface__IKs__C13 = rY[14];
            // Units: dimensionless; Initial value: 0.000644426171899078
            double var_chaste_interface__IKs__C14 = rY[15];
            // Units: dimensionless; Initial value: 8.62495047666861e-05
            double var_chaste_interface__IKs__C15 = rY[16];
            // Units: dimensionless; Initial value: 1.12344645485893e-05
            double var_chaste_interface__ICaL__O = rY[19];
            // Units: dimensionless; Initial value: 2.26882961412491e-05
            double var_chaste_interface__ICaL__O_star = rY[21];
            // Units: dimensionless; Initial value: 1.23556404128518e-10
            double var_chaste_interface__INa_m_gate__m = rY[25];
            // Units: dimensionless; Initial value: 0.00101841101248412
            double var_chaste_interface__INa_h_gate__h = rY[26];
            // Units: dimensionless; Initial value: 0.991354143386887
            double var_chaste_interface__INa_j_gate__j = rY[27];
            // Units: dimensionless; Initial value: 0.99709036251243
            double var_chaste_interface__INaL_mL_gate__mL = rY[28];
            // Units: dimensionless; Initial value: 0.00101841101248412
            double var_chaste_interface__INaL_hL_gate__hL = rY[29];
            // Units: dimensionless; Initial value: 0.319611809402137
            double var_chaste_interface__IKr_xr_gate__xr = rY[30];
            // Units: dimensionless; Initial value: 4.06959064407486e-06
            double var_chaste_interface__Ito1_a_gate__a = rY[31];
            // Units: dimensionless; Initial value: 1.76776038804228e-05
            double var_chaste_interface__Ito1_i1f_gate__i1f = rY[32];
            // Units: dimensionless; Initial value: 0.997976503910799
            double var_chaste_interface__Ito1_i1s_gate__i1s = rY[33];
            // Units: dimensionless; Initial value: 0.947581184798815
            double var_chaste_interface__Ito2_i2f_gate__i2f = rY[34];
            // Units: dimensionless; Initial value: 0.996044894628276
            double var_chaste_interface__Irel__Irel = rY[35];
            // Units: mM_per_ms; Initial value: 0.000714227102027745
            double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
            // Units: mM; Initial value: 0.00011296707102434
            double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
            // Units: mM; Initial value: 0.000119239795531548
            double var_chaste_interface__Na__Na_i = rY[40];
            // Units: mM; Initial value: 8.01031392415197
            double var_chaste_interface__Na__Na_ss_sr = rY[41];
            // Units: mM; Initial value: 8.01033434859049
            double var_chaste_interface__Cl__Cl_i = rY[42];
            // Units: mM; Initial value: 20.6683603724432
            double var_chaste_interface__K__K_i = rY[44];
            // Units: mM; Initial value: 144.907134343314
            

            const double var_x0 = exp(9.9999999999999995e-8);
            const double var_x1 = 1 / (-1.0 + var_x0);
            const double var_x2 = -mParameters[5];
            const double var_x3 = 1806.0006101251679 * mParameters[9];
            const double var_x4 = exp(-9.9999999999999995e-8);
            const double var_x5 = 1 / (-1.0 + var_x4);
            const double var_x6 = fabs(var_chaste_interface__membrane__Vm);
            const double var_x7 = var_x6 < 2.6712338705498262e-6;
            const double var_x8 = 0.037435883507802616 * var_chaste_interface__membrane__Vm;
            const double var_x9 = exp(var_x8);
            const double var_x10 = var_x9 * var_chaste_interface__Na__Na_i;
            const double var_x11 = var_x10 + var_x2;
            const double var_x12 = -1.0 + var_x9;
            const double var_x13 = mParameters[9] / var_x12;
            const double var_x14 = 3612.0012202503358 * var_x13;
            const double var_x15 = var_x9 * var_chaste_interface__membrane__Vm;
            const double var_x16 = 135.21845691133248 * var_x15;
            const double var_x17 = ((var_x7) ? (var_x1 * var_x3 * (var_x2 + var_x0 * var_chaste_interface__Na__Na_i) + var_x3 * var_x5 * (var_x2 + var_x4 * var_chaste_interface__Na__Na_i)) : (var_x11 * var_x14 + 135.21845691133248 * var_x10 * var_x13 * var_chaste_interface__membrane__Vm - var_x11 * var_x16 * mParameters[9] / pow(var_x12, 2)));
            const double var_x18 = 7224.0024405006716 * mParameters[7];
            const double var_x19 = -0.34100000000000003 * mParameters[3];
            const double var_x20 = var_chaste_interface__Ca__Ca_i;
            const double var_x21 = var_x1 * (var_x19 + var_x0 * var_x20);
            const double var_x22 = var_x5 * (var_x19 + var_x20 * var_x4);
            const double var_x23 = var_x6 < 1.3356169352749131e-6;
            const double var_x24 = exp(0.074871767015605231 * var_chaste_interface__membrane__Vm);
            const double var_x25 = -1.0 + var_x24;
            const double var_x26 = 1 / var_x25;
            const double var_x27 = 14448.004881001343 * var_x26;
            const double var_x28 = (var_x19 + var_x20 * var_x24) * mParameters[7];
            const double var_x29 = var_x27 * var_x28;
            const double var_x30 = var_x24 * var_chaste_interface__membrane__Vm;
            const double var_x31 = var_x30 * mParameters[7];
            const double var_x32 = 1081.7476552906598 * var_x26;
            const double var_x33 = 1081.7476552906598 * var_x30 / pow(var_x25, 2);
            const double var_x34 = ((var_x23) ? (var_x18 * var_x21 + var_x18 * var_x22) : (var_x29 - var_x28 * var_x33 + var_x31 * var_x32 * var_chaste_interface__Ca__Ca_i));
            const double var_x35 = -var_chaste_interface__ICaL__O - var_chaste_interface__ICaL__O_star;
            const double var_x36 = 7224.0024405006716 * mParameters[6];
            const double var_x37 = var_chaste_interface__Ca__Ca_ss_CaL;
            const double var_x38 = var_x1 * (var_x19 + var_x0 * var_x37);
            const double var_x39 = var_x5 * (var_x19 + var_x37 * var_x4);
            const double var_x40 = var_x19 + var_x24 * var_x37;
            const double var_x41 = var_x27 * mParameters[6];
            const double var_x42 = var_x40 * var_x41;
            const double var_x43 = ((var_x23) ? (var_x36 * var_x38 + var_x36 * var_x39) : (var_x42 - var_x33 * var_x40 * mParameters[6] + var_x30 * var_x32 * var_chaste_interface__Ca__Ca_ss_CaL * mParameters[6]));
            const double var_x44 = exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__Vm);
            const double var_x45 = 1.0 + var_x44;
            const double var_x46 = mParameters[14] / var_x45;
            const double var_x47 = 1 / (1.0 - var_x0);
            const double var_x48 = -100.0 * var_x0 + var_chaste_interface__Cl__Cl_i;
            const double var_x49 = 1806.0006101251679 * mParameters[19];
            const double var_x50 = 1 / (1.0 - var_x4);
            const double var_x51 = -100.0 * var_x4 + var_chaste_interface__Cl__Cl_i;
            const double var_x52 = -100.0 * var_x9 + var_chaste_interface__Cl__Cl_i;
            const double var_x53 = 1.0 - var_x9;
            const double var_x54 = mParameters[19] / var_x53;
            const double var_x55 = 3612.0012202503358 * var_x54;
            const double var_x56 = var_x52 * var_x55;
            const double var_x57 = ((var_x7) ? (var_x47 * var_x48 * var_x49 + var_x49 * var_x50 * var_x51) : (var_x56 - 13521.845691133247 * var_x15 * var_x54 + var_x16 * var_x52 * mParameters[19] / pow(var_x53, 2)));
            const double var_x58 = pow(var_chaste_interface__Irel__Irel, 2);
            const double var_x59 = 1 / (1.0 + 6.2499999999999991 * var_x58);
            const double var_x60 = -1.0 + var_x59;
            const double var_x61 = var_x60 * var_chaste_interface__Ito2_i2f_gate__i2f;
            const double var_x62 = 1.0 - var_chaste_interface__IKs__C1 - var_chaste_interface__IKs__C10 - var_chaste_interface__IKs__C11 - var_chaste_interface__IKs__C12 - var_chaste_interface__IKs__C13 - var_chaste_interface__IKs__C14 - var_chaste_interface__IKs__C15 - var_chaste_interface__IKs__C2 - var_chaste_interface__IKs__C3 - var_chaste_interface__IKs__C4 - var_chaste_interface__IKs__C5 - var_chaste_interface__IKs__C6 - var_chaste_interface__IKs__C7 - var_chaste_interface__IKs__C8 - var_chaste_interface__IKs__C9;
            const double var_x63 = 1 / var_chaste_interface__Ca__Ca_i;
            const double var_x64 = pow(var_x63, 1.3999999999999999);
            const double var_x65 = 1.0 + 6.4818210260626455e-7 * var_x64;
            const double var_x66 = 1 / var_x65;
            const double var_x67 = (-1.0 - 0.59999999999999998 * var_x66) * mParameters[16];
            const double var_x68 = var_x62 * var_x67;
            const double var_x69 = pow(var_chaste_interface__INaL_mL_gate__mL, 3) * mParameters[13];
            const double var_x70 = var_x69 * var_chaste_interface__INaL_hL_gate__hL;
            const double var_x71 = pow(var_chaste_interface__INa_m_gate__m, 3);
            const double var_x72 = var_x71 * mParameters[11] * var_chaste_interface__INa_j_gate__j;
            const double var_x73 = var_x72 * var_chaste_interface__INa_h_gate__h;
            const double var_x74 = exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__membrane__Vm);
            const double var_x75 = 1.0 + var_x74;
            const double var_x76 = sqrt(mParameters[4]);
            const double var_x77 = var_x76 * mParameters[15] / var_x75;
            const double var_x78 = 0.43033148291193518 * var_x77;
            const double var_x79 = 1 / var_chaste_interface__K__K_i;
            const double var_x80 = log(var_x79 * mParameters[4]);
            const double var_x81 = 26.712338705498265 * var_x80;
            const double var_x82 = -var_x81 + var_chaste_interface__membrane__Vm;
            const double var_x83 = var_x44 * var_x82 * mParameters[14] / pow(var_x45, 2);
            const double var_x84 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__Vm - 6.3708927812613361 * var_x80);
            const double var_x85 = 1.0 + var_x84;
            const double var_x86 = 1 / var_x85;
            const double var_x87 = exp(-2.4444678999999998 + 13.738155796237757 * var_x80 - 0.51429999999999998 * var_chaste_interface__membrane__Vm);
            const double var_x88 = 1.0 + var_x87;
            const double var_x89 = 1 / var_x88;
            const double var_x90 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__Vm - 2.1455350448256207 * var_x80);
            const double var_x91 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__Vm - 1.6494869150645177 * var_x80);
            const double var_x92 = var_x91 + 0.49124000000000001 * var_x90;
            const double var_x93 = var_x89 * var_x92;
            const double var_x94 = var_x76 * mParameters[12] / (var_x93 + 1.02 * var_x86);
            const double var_x95 = var_x86 * var_x94;
            const double var_x96 = pow(var_chaste_interface__Ito1_a_gate__a, 3);
            const double var_x97 = exp(0.0018181818181818182 * var_chaste_interface__membrane__Vm);
            const double var_x98 = var_x96 * var_x97 * mParameters[20] * var_chaste_interface__Ito1_i1s_gate__i1s;
            const double var_x99 = var_x98 * var_chaste_interface__Ito1_i1f_gate__i1f;
            const double var_x100 = exp(0.010107688547106707 * var_chaste_interface__membrane__Vm);
            const double var_x101 = pow(var_chaste_interface__Na__Na_ss_sr, 3);
            const double var_x102 = var_x101 * mParameters[3];
            const double var_x103 = var_x100 * var_x102;
            const double var_x104 = exp(-0.027328194960695912 * var_chaste_interface__membrane__Vm);
            const double var_x105 = pow(mParameters[5], 3);
            const double var_x106 = var_x105 * var_chaste_interface__Ca__Ca_ss_sr;
            const double var_x107 = var_x104 * var_x106;
            const double var_x108 = 1.0 + 0.32000000000000001 * var_x104;
            const double var_x109 = mParameters[17] / var_x108;
            const double var_x110 = pow(var_chaste_interface__Ca__Ca_ss_sr, (-2));
            const double var_x111 = 1.0 + 1.5624999999999999e-8 * var_x110;
            const double var_x112 = 1 / var_x111;
            const double var_x113 = 1.0 + 0.00053738391835633597 * var_x101;
            const double var_x114 = 0.0035999999999999999 * var_x105;
            const double var_x115 = 1.0 + 277.77777777777777 * var_chaste_interface__Ca__Ca_ss_sr;
            const double var_x116 = 1860.8670000000004 * mParameters[3];
            const double var_x117 = 1 / (var_x102 + var_x106 + 669921.875 * var_chaste_interface__Ca__Ca_ss_sr + 1.3 * var_x101 + var_x113 * var_x114 + var_x115 * var_x116);
            const double var_x118 = var_x112 * var_x117;
            const double var_x119 = var_x109 * var_x118;
            const double var_x120 = var_x119 * (0.010107688547106707 * var_x103 + 0.027328194960695912 * var_x107);
            const double var_x121 = pow(var_chaste_interface__Na__Na_i, 3);
            const double var_x122 = var_x121 * mParameters[3];
            const double var_x123 = var_x100 * var_x122;
            const double var_x124 = var_x105 * var_chaste_interface__Ca__Ca_i;
            const double var_x125 = var_x104 * var_x124;
            const double var_x126 = 1.0 + 1.5624999999999999e-8 / pow(var_chaste_interface__Ca__Ca_i, 2);
            const double var_x127 = 1 / var_x126;
            const double var_x128 = 1.0 + 0.00053738391835633597 * var_x121;
            const double var_x129 = 1.0 + 277.77777777777777 * var_chaste_interface__Ca__Ca_i;
            const double var_x130 = 1 / (var_x122 + var_x124 + 669921.875 * var_chaste_interface__Ca__Ca_i + 1.3 * var_x121 + var_x114 * var_x128 + var_x116 * var_x129);
            const double var_x131 = var_x127 * var_x130;
            const double var_x132 = var_x109 * var_x131;
            const double var_x133 = var_x132 * (0.010107688547106707 * var_x123 + 0.027328194960695912 * var_x125);
            const double var_x134 = var_x84 / pow(var_x85, 2);
            const double var_x135 = var_x82 * var_x94;
            const double var_x136 = var_x134 * var_x135;
            const double var_x137 = var_x76 * var_x82;
            const double var_x138 = var_x137 * var_x74 * mParameters[15] * var_chaste_interface__IKr_xr_gate__xr / pow(var_x75, 2);
            const double var_x139 = var_x87 * var_x92 / pow(var_x88, 2);
            const double var_x140 = 0.24326999999999999 * var_x134 - 0.51429999999999998 * var_x139 - var_x89 * (0.061749999999999999 * var_x91 + 0.039456396800000001 * var_x90);
            const double var_x141 = var_x137 * var_x86 * mParameters[12] / pow((var_x86 + 0.98039215686274506 * var_x93), 2);
            const double var_x142 = 0.42189361069797565 * var_x141;
            const double var_x143 = var_x103 - var_x107;
            const double var_x144 = var_x104 * mParameters[17] / pow(var_x108, 2);
            const double var_x145 = var_x118 * var_x143 * var_x144;
            const double var_x146 = var_x123 - var_x125;
            const double var_x147 = var_x131 * var_x144 * var_x146;
            const double var_x148 = var_x82 * var_x99;
            const double var_x149 = 1 / (1.5 + mParameters[4]);
            const double var_x150 = 1 + 0.38461538461538458 * var_chaste_interface__Na__Na_i;
            const double var_x151 = pow(var_x150, (-3));
            const double var_x152 = exp(-3.444101282717841 - var_x8);
            const double var_x153 = 1.0 + var_x152;
            const double var_x154 = var_x121 * var_x149 * var_x151 * var_x152 * mParameters[18] * mParameters[4] / pow(var_x153, 2);
            
            partialF = var_x68 - var_x17 - var_x34 - var_x70 - var_x73 - var_x99 - mParameters[8] + 0.10468673984798647 * var_x136 + 0.027943602786489299 * var_x138 - var_x46 - 0.40000000000000002 * var_x120 - 0.80000000000000004 * var_x133 - 0.0021299433038121651 * var_x154 - 0.16722408026755853 * var_x83 - 0.4389381125701739 * var_x95 - 0.0034980089549690768 * var_x145 - 0.0069960179099381537 * var_x147 - 0.0018181818181818182 * var_x148 + var_x35 * var_x43 + var_x57 * var_x61 - var_x140 * var_x142 - var_x78 * var_chaste_interface__IKr_xr_gate__xr;
        }
        else
        {
            const double y_save = rY[0];
            rY[0] += delta;
            const double temp = EvaluateYDerivative0(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[0])/delta;
            rY[0] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 8.38749860095482e-05
        double var_chaste_interface__Ca__Ca_NSR = rY[37];
        // Units: mM; Initial value: 1.01475649943057
        double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__Na__Na_i = rY[40];
        // Units: mM; Initial value: 8.01031392415197
        double var_chaste_interface__Na__Na_ss_sr = rY[41];
        // Units: mM; Initial value: 8.01033434859049
        double var_chaste_interface__CaMK_active__CaMK_trap = rY[45];
        // Units: dimensionless; Initial value: 0.0114911034744777
        

        // Mathematics
        const double var_Ca__cmdn_bar = 0.050000000000000003; // mM
        const double var_Ca__km_cmdn = 0.0023800000000000002; // mM
        const double var_Ca__km_trpn = 0.00050000000000000001; // mM
        const double var_Ca__tau_diff = 0.20000000000000001; // ms
        const double var_Ca__Idiff = (-var_chaste_interface__Ca__Ca_i + var_chaste_interface__Ca__Ca_ss_sr) / var_Ca__tau_diff; // mM_per_ms
        const double var_Ca__trpn_bar = 0.070000000000000007; // mM
        const double var_Ca__bmyo = 1 / (1.0 + var_Ca__cmdn_bar * var_Ca__km_cmdn / pow((var_chaste_interface__Ca__Ca_i + var_Ca__km_cmdn), 2) + var_Ca__km_trpn * var_Ca__trpn_bar / pow((var_chaste_interface__Ca__Ca_i + var_Ca__km_trpn), 2)); // dimensionless
        const double var_CaMK_active__CaMK_0 = 0.050000000000000003; // dimensionless
        const double var_CaMK_active__Km = 0.0015; // mM
        const double var_CaMK_active__CaMK_active = (1.0 - var_chaste_interface__CaMK_active__CaMK_trap) * var_CaMK_active__CaMK_0 / (1.0 + var_CaMK_active__Km / var_chaste_interface__Ca__Ca_ss_sr) + var_chaste_interface__CaMK_active__CaMK_trap; // dimensionless
        const double var_INaCa__KmCa_act = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__denom_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_i, 2); // dimensionless
        const double var_INaCa__denom_ss_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_ss_sr, 2); // dimensionless
        const double var_INaCa__eta = 0.27000000000000002; // dimensionless
        const double var_INaCa__ksat = 0.32000000000000001; // dimensionless
        const double var_Ileak__nsrbar = 15.0; // mM
        const double var_Ileak__Ileak = var_chaste_interface__Ca__Ca_NSR * mParameters[0] / var_Ileak__nsrbar; // mM_per_ms
        const double var_IpCa__KmpCa = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * mParameters[10] / (var_chaste_interface__Ca__Ca_i + var_IpCa__KmpCa); // uA_per_uF
        const double var_Iup__delta_iupCaMK_bar = 0.75; // dimensionless
        const double var_Iup__delta_kmPLB_bar = 0.00017000000000000001; // mM
        const double var_Iup__kmCaMK = 0.14999999999999999; // mM
        const double var_Iup__delta_iupCaMK = var_CaMK_active__CaMK_active * var_Iup__delta_iupCaMK_bar / (var_CaMK_active__CaMK_active + var_Iup__kmCaMK); // dimensionless
        const double var_Iup__delta_kmPLB = var_CaMK_active__CaMK_active * var_Iup__delta_kmPLB_bar / (var_CaMK_active__CaMK_active + var_Iup__kmCaMK); // mM
        const double var_Iup__kmup = 0.00092000000000000003; // mM
        const double var_Iup__Iup = (1.0 + var_Iup__delta_iupCaMK) * var_chaste_interface__Ca__Ca_i * mParameters[2] / (-var_Iup__delta_kmPLB + var_chaste_interface__Ca__Ca_i + var_Iup__kmup); // mM_per_ms
        const double var_cell_geometry__a = 0.0011000000000000001; // cm
        const double var_cell_geometry__l = 0.01; // cm
        const double var_cell_geometry__ageo = 2.0 * M_PI * pow(var_cell_geometry__a, 2) + 2.0 * M_PI * var_cell_geometry__a * var_cell_geometry__l; // cm2
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__ageo; // cm2
        const double var_cell_geometry__vcell = 1000.0 * M_PI * pow(var_cell_geometry__a, 2) * var_cell_geometry__l; // uL
        const double var_cell_geometry__Vmyo = 0.67800000000000005 * var_cell_geometry__vcell; // uL
        const double var_cell_geometry__Vnsr = 0.055199999999999999 * var_cell_geometry__vcell; // uL
        const double var_cell_geometry__Vss_sr = 0.02 * var_cell_geometry__vcell; // uL
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__Vm) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__Vm) * (0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(9.9999999999999995e-8)) + 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(-9.9999999999999995e-8))) : (14448.004881001343 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)) * mParameters[7] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_INaCa__denom_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_i + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_i / var_INaCa__KmCai) * mParameters[3]; // mM4
        const double var_INaCa__denom_ss_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(var_chaste_interface__Na__Na_ss_sr, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_ss_sr / var_INaCa__KmCai) * mParameters[3]; // mM4
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_cell_geometry__AF = var_cell_geometry__Acap / var_model_parameters__F; // uF_mole_per_C
        const double var_INaCa__denom_4 = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[3] + pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_i + pow(mParameters[5], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INaCa__denom_ss_4 = pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] + pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(mParameters[5], 3) * (1.0 + pow(var_chaste_interface__Na__Na_ss_sr, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_INaCa__denom_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__denom_ss_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__num_ss = 0.20000000000000001 * (pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * mParameters[17]; // mM4_uA_per_uF
        const double var_INaCa__INaCa_ss_sr = var_INaCa__num_ss / ((var_INaCa__denom_ss_3 + var_INaCa__denom_ss_4) * var_INaCa__denom_ss_1 * var_INaCa__denom_ss_2); // uA_per_uF
        const double var_INaCa__numerator = 0.80000000000000004 * (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[3] * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_i * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * mParameters[17]; // mM4_uA_per_uF
        const double var_INaCa__INaCa_cai = var_INaCa__numerator / ((var_INaCa__denom_3 + var_INaCa__denom_4) * var_INaCa__denom_1 * var_INaCa__denom_2); // uA_per_uF
        const double var_INaCa__INaCa = var_INaCa__INaCa_cai + var_INaCa__INaCa_ss_sr; // uA_per_uF
        const double d_dt_chaste_interface_var_Ca__Ca_i = ((-var_Iup__Iup + var_Ileak__Ileak) * var_cell_geometry__Vnsr / var_cell_geometry__Vmyo + var_Ca__Idiff * var_cell_geometry__Vss_sr / var_cell_geometry__Vmyo + 0.5 * (-var_ICab__ICab - var_IpCa__IpCa + 2.0 * var_INaCa__INaCa) * var_cell_geometry__AF / var_cell_geometry__Vmyo) * var_Ca__bmyo; // mM / ms

        return d_dt_chaste_interface_var_Ca__Ca_i;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            double var_chaste_interface__Ca__Ca_i = rY[1];
            // Units: mM; Initial value: 8.38749860095482e-05
            double var_chaste_interface__Ca__Ca_NSR = rY[37];
            // Units: mM; Initial value: 1.01475649943057
            double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
            // Units: mM; Initial value: 0.00011296707102434
            double var_chaste_interface__Na__Na_i = rY[40];
            // Units: mM; Initial value: 8.01031392415197
            double var_chaste_interface__Na__Na_ss_sr = rY[41];
            // Units: mM; Initial value: 8.01033434859049
            double var_chaste_interface__CaMK_active__CaMK_trap = rY[45];
            // Units: dimensionless; Initial value: 0.0114911034744777
            

            const double var_x0 = exp(9.9999999999999995e-8);
            const double var_x1 = 1 / (-1.0 + var_x0);
            const double var_x4 = exp(-9.9999999999999995e-8);
            const double var_x5 = 1 / (-1.0 + var_x4);
            const double var_x6 = fabs(var_chaste_interface__membrane__Vm);
            const double var_x19 = -0.34100000000000003 * mParameters[3];
            const double var_x20 = var_chaste_interface__Ca__Ca_i;
            const double var_x21 = var_x1 * (var_x19 + var_x0 * var_x20);
            const double var_x22 = var_x5 * (var_x19 + var_x20 * var_x4);
            const double var_x23 = var_x6 < 1.3356169352749131e-6;
            const double var_x24 = exp(0.074871767015605231 * var_chaste_interface__membrane__Vm);
            const double var_x25 = -1.0 + var_x24;
            const double var_x26 = 1 / var_x25;
            const double var_x27 = 14448.004881001343 * var_x26;
            const double var_x28 = (var_x19 + var_x20 * var_x24) * mParameters[7];
            const double var_x29 = var_x27 * var_x28;
            const double var_x30 = var_x24 * var_chaste_interface__membrane__Vm;
            const double var_x31 = var_x30 * mParameters[7];
            const double var_x100 = exp(0.010107688547106707 * var_chaste_interface__membrane__Vm);
            const double var_x101 = pow(var_chaste_interface__Na__Na_ss_sr, 3);
            const double var_x102 = var_x101 * mParameters[3];
            const double var_x103 = var_x100 * var_x102;
            const double var_x104 = exp(-0.027328194960695912 * var_chaste_interface__membrane__Vm);
            const double var_x105 = pow(mParameters[5], 3);
            const double var_x106 = var_x105 * var_chaste_interface__Ca__Ca_ss_sr;
            const double var_x107 = var_x104 * var_x106;
            const double var_x108 = 1.0 + 0.32000000000000001 * var_x104;
            const double var_x109 = mParameters[17] / var_x108;
            const double var_x110 = pow(var_chaste_interface__Ca__Ca_ss_sr, (-2));
            const double var_x111 = 1.0 + 1.5624999999999999e-8 * var_x110;
            const double var_x112 = 1 / var_x111;
            const double var_x113 = 1.0 + 0.00053738391835633597 * var_x101;
            const double var_x114 = 0.0035999999999999999 * var_x105;
            const double var_x115 = 1.0 + 277.77777777777777 * var_chaste_interface__Ca__Ca_ss_sr;
            const double var_x116 = 1860.8670000000004 * mParameters[3];
            const double var_x117 = 1 / (var_x102 + var_x106 + 669921.875 * var_chaste_interface__Ca__Ca_ss_sr + 1.3 * var_x101 + var_x113 * var_x114 + var_x115 * var_x116);
            const double var_x118 = var_x112 * var_x117;
            const double var_x119 = var_x109 * var_x118;
            const double var_x121 = pow(var_chaste_interface__Na__Na_i, 3);
            const double var_x122 = var_x121 * mParameters[3];
            const double var_x123 = var_x100 * var_x122;
            const double var_x124 = var_x105 * var_chaste_interface__Ca__Ca_i;
            const double var_x125 = var_x104 * var_x124;
            const double var_x126 = 1.0 + 1.5624999999999999e-8 / pow(var_chaste_interface__Ca__Ca_i, 2);
            const double var_x127 = 1 / var_x126;
            const double var_x128 = 1.0 + 0.00053738391835633597 * var_x121;
            const double var_x129 = 1.0 + 277.77777777777777 * var_chaste_interface__Ca__Ca_i;
            const double var_x130 = 1 / (var_x122 + var_x124 + 669921.875 * var_chaste_interface__Ca__Ca_i + 1.3 * var_x121 + var_x114 * var_x128 + var_x116 * var_x129);
            const double var_x131 = var_x127 * var_x130;
            const double var_x132 = var_x109 * var_x131;
            const double var_x143 = var_x103 - var_x107;
            const double var_x146 = var_x123 - var_x125;
            const double var_x155 = 0.5 + 374358.83507802623 * var_chaste_interface__membrane__Vm;
            const double var_x156 = 0.019296999999999998 * mParameters[7];
            const double var_x157 = var_x0 * var_x1;
            const double var_x158 = var_x4 * var_x5;
            const double var_x159 = var_x156 * var_x158;
            const double var_x160 = ((var_x23) ? (-var_x159 + var_x155 * (var_x159 + var_x156 * var_x157)) : (var_x27 * var_x31));
            const double var_x161 = 0.00050000000000000001 + var_chaste_interface__Ca__Ca_i;
            const double var_x162 = mParameters[10] / var_x161;
            const double var_x163 = pow(var_x161, (-2));
            const double var_x164 = var_x163 * var_chaste_interface__Ca__Ca_i * mParameters[10];
            const double var_x165 = var_x104 * var_x105;
            const double var_x167 = var_x109 * var_x146;
            const double var_x168 = var_x130 * var_x167 / (pow(var_x126, 2) * pow(var_chaste_interface__Ca__Ca_i, 3));
            const double var_x169 = -669921.875 - var_x105 - 516907.50000000012 * mParameters[3];
            const double var_x170 = 0.0027777373294460648 * mParameters[3];
            const double var_x171 = 5.3737609329446059e-9 * var_x105;
            const double var_x172 = var_x127 * var_x167 / pow((1.9405247813411081e-6 * var_x121 + 1.4927113702623908e-6 * var_x122 + 1.4927113702623908e-6 * var_x124 + var_x128 * var_x171 + var_x129 * var_x170 + var_chaste_interface__Ca__Ca_i), 2);
            const double var_x180 = 0.5 + 374358.83507802623 * var_chaste_interface__membrane__Vm;
            const double var_x238 = 0.0023800000000000002 + var_chaste_interface__Ca__Ca_i;
            const double var_x239 = 1.0 + 0.00011900000000000002 / pow(var_x238, 2) + 3.5000000000000004e-5 * var_x163;
            const double var_x240 = 1 / var_x239;
            const double var_x241 = var_x240;
            const double var_x242 = 3.0851110000007915e-5 * var_x162;
            const double var_x243 = 1.0 - var_chaste_interface__CaMK_active__CaMK_trap;
            const double var_x244 = 1.0 + 0.0015 / var_chaste_interface__Ca__Ca_ss_sr;
            const double var_x245 = 1 / var_x244;
            const double var_x246 = 0.050000000000000003 * var_x245;
            const double var_x247 = var_x243 * var_x246;
            const double var_x248 = 0.14999999999999999 + var_x247 + var_chaste_interface__CaMK_active__CaMK_trap;
            const double var_x249 = 1 / var_x248;
            const double var_x250 = var_x247 + var_chaste_interface__CaMK_active__CaMK_trap;
            const double var_x251 = var_x249 * var_x250;
            const double var_x252 = 0.00092000000000000003 - 0.00017000000000000001 * var_x251 + var_chaste_interface__Ca__Ca_i;
            const double var_x253 = 1 / var_x252;
            const double var_x254 = (1.0 + 0.75 * var_x251) * mParameters[2];
            const double var_x255 = var_x253 * var_x254;
            const double var_x256 = 0.081415929203539822 * var_x255;
            const double var_x257 = var_x254 * var_chaste_interface__Ca__Ca_i / pow(var_x252, 2);
            const double var_x258 = 0.081415929203539822 * var_x257;
            const double var_x259 = 1.0998727917574584e-16 * var_x172;
            const double var_x260 = 4.9361776000012672e-5 * var_x132;
            const double var_x261 = var_x156 * var_x22;
            const double var_x262 = 0.0054277286135693209 * mParameters[0];
            const double var_x263 = var_x119 * var_x143;
            
            partialF = var_x241 * (-0.14749262536873156 + var_x258 - var_x242 - var_x256 + 1.5425555000003961e-12 * var_x168 + 3.0851110000007915e-5 * var_x164 - 3.0851110000007915e-5 * var_x160 + var_x169 * var_x259 - var_x165 * var_x260) + (0.00023800000000000004 / pow(var_x238, 3) + 7.0000000000000007e-5 / pow(var_x161, 3)) * (0.14749262536873156 * var_chaste_interface__Ca__Ca_ss_sr + 1.2340444000003168e-5 * var_x263 - 0.14749262536873156 * var_chaste_interface__Ca__Ca_i - 3.0851110000007915e-5 * ((var_x23) ? (-var_x261 + var_x180 * (var_x261 + var_x156 * var_x21)) : (var_x29 * var_chaste_interface__membrane__Vm)) + var_x146 * var_x260 + var_x262 * var_chaste_interface__Ca__Ca_NSR - var_x242 * var_chaste_interface__Ca__Ca_i - var_x256 * var_chaste_interface__Ca__Ca_i) / pow(var_x239, 2);
        }
        else
        {
            const double y_save = rY[1];
            rY[1] += delta;
            const double temp = EvaluateYDerivative1(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[1])/delta;
            rY[1] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKs__C1 = rY[2];
        // Units: dimensionless; Initial value: 0.476679784307081
        double var_chaste_interface__IKs__C2 = rY[3];
        // Units: dimensionless; Initial value: 0.255181042718489
        

        // Mathematics
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__alpha = 0.014864597980859999 * exp(0.029877301235880002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986312199829993 * exp(-0.055461057126639998 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C1 = var_chaste_interface__IKs__C2 * var_IKs__beta - 4.0 * var_chaste_interface__IKs__C1 * var_IKs__alpha; // 1 / ms

        return d_dt_chaste_interface_var_IKs__C1;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x279 = exp(0.0011184831685939309 * var_chaste_interface__membrane__Vm);
            const double var_x281 = 0.059458391923439997 * var_x279;
            
            partialF = -var_x281;
        }
        else
        {
            const double y_save = rY[2];
            rY[2] += delta;
            const double temp = EvaluateYDerivative2(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[2])/delta;
            rY[2] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKs__C1 = rY[2];
        // Units: dimensionless; Initial value: 0.476679784307081
        double var_chaste_interface__IKs__C2 = rY[3];
        // Units: dimensionless; Initial value: 0.255181042718489
        double var_chaste_interface__IKs__C3 = rY[4];
        // Units: dimensionless; Initial value: 0.0512272866698557
        double var_chaste_interface__IKs__C6 = rY[7];
        // Units: dimensionless; Initial value: 0.132814156809568
        

        // Mathematics
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__alpha = 0.014864597980859999 * exp(0.029877301235880002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986312199829993 * exp(-0.055461057126639998 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__delta = 0.0031173268874 * exp(-0.42625451944376003 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.01460066118316 * exp(0.24464953099645001 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C2 = (-var_IKs__beta - var_IKs__gamma - 3.0 * var_IKs__alpha) * var_chaste_interface__IKs__C2 + var_chaste_interface__IKs__C6 * var_IKs__delta + 2.0 * var_chaste_interface__IKs__C3 * var_IKs__beta + 4.0 * var_chaste_interface__IKs__C1 * var_IKs__alpha; // 1 / ms

        return d_dt_chaste_interface_var_IKs__C2;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x277 = exp(-0.0020762336738124813 * var_chaste_interface__membrane__Vm);
            const double var_x279 = exp(0.0011184831685939309 * var_chaste_interface__membrane__Vm);
            const double var_x282 = 0.083986312199829993 * var_x277;
            const double var_x285 = exp(0.0091586713426216482 * var_chaste_interface__membrane__Vm);
            const double var_x291 = 0.04459379394258 * var_x279;
            const double var_x292 = -var_x291;
            const double var_x293 = 0.01460066118316 * var_x285;
            const double var_x294 = -var_x282 - var_x293;
            
            partialF = var_x292 + var_x294;
        }
        else
        {
            const double y_save = rY[3];
            rY[3] += delta;
            const double temp = EvaluateYDerivative3(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[3])/delta;
            rY[3] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKs__C2 = rY[3];
        // Units: dimensionless; Initial value: 0.255181042718489
        double var_chaste_interface__IKs__C3 = rY[4];
        // Units: dimensionless; Initial value: 0.0512272866698557
        double var_chaste_interface__IKs__C4 = rY[5];
        // Units: dimensionless; Initial value: 0.0045705849736195
        double var_chaste_interface__IKs__C7 = rY[8];
        // Units: dimensionless; Initial value: 0.053324572164618
        

        // Mathematics
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__alpha = 0.014864597980859999 * exp(0.029877301235880002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986312199829993 * exp(-0.055461057126639998 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__delta = 0.0031173268874 * exp(-0.42625451944376003 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.01460066118316 * exp(0.24464953099645001 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C3 = (-2.0 * var_IKs__alpha - 2.0 * var_IKs__beta - 2.0 * var_IKs__gamma) * var_chaste_interface__IKs__C3 + var_chaste_interface__IKs__C7 * var_IKs__delta + 3.0 * var_chaste_interface__IKs__C2 * var_IKs__alpha + 3.0 * var_chaste_interface__IKs__C4 * var_IKs__beta; // 1 / ms

        return d_dt_chaste_interface_var_IKs__C3;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x277 = exp(-0.0020762336738124813 * var_chaste_interface__membrane__Vm);
            const double var_x279 = exp(0.0011184831685939309 * var_chaste_interface__membrane__Vm);
            const double var_x285 = exp(0.0091586713426216482 * var_chaste_interface__membrane__Vm);
            const double var_x295 = 0.16797262439965999 * var_x277;
            const double var_x302 = 0.029729195961719999 * var_x279;
            const double var_x303 = -var_x302;
            const double var_x304 = 0.02920132236632 * var_x285;
            const double var_x305 = -var_x295 - var_x304;
            
            partialF = var_x303 + var_x305;
        }
        else
        {
            const double y_save = rY[4];
            rY[4] += delta;
            const double temp = EvaluateYDerivative4(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[4])/delta;
            rY[4] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKs__C3 = rY[4];
        // Units: dimensionless; Initial value: 0.0512272866698557
        double var_chaste_interface__IKs__C4 = rY[5];
        // Units: dimensionless; Initial value: 0.0045705849736195
        double var_chaste_interface__IKs__C5 = rY[6];
        // Units: dimensionless; Initial value: 0.000152923243503507
        double var_chaste_interface__IKs__C8 = rY[9];
        // Units: dimensionless; Initial value: 0.00713656414955778
        

        // Mathematics
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__alpha = 0.014864597980859999 * exp(0.029877301235880002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986312199829993 * exp(-0.055461057126639998 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__delta = 0.0031173268874 * exp(-0.42625451944376003 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.01460066118316 * exp(0.24464953099645001 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C4 = (-var_IKs__alpha - 3.0 * var_IKs__beta - 3.0 * var_IKs__gamma) * var_chaste_interface__IKs__C4 + var_chaste_interface__IKs__C8 * var_IKs__delta + 2.0 * var_chaste_interface__IKs__C3 * var_IKs__alpha + 4.0 * var_chaste_interface__IKs__C5 * var_IKs__beta; // 1 / ms

        return d_dt_chaste_interface_var_IKs__C4;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x277 = exp(-0.0020762336738124813 * var_chaste_interface__membrane__Vm);
            const double var_x279 = exp(0.0011184831685939309 * var_chaste_interface__membrane__Vm);
            const double var_x285 = exp(0.0091586713426216482 * var_chaste_interface__membrane__Vm);
            const double var_x306 = 0.25195893659948998 * var_x277;
            const double var_x312 = 0.014864597980859999 * var_x279;
            const double var_x313 = -var_x312;
            const double var_x314 = 0.043801983549479999 * var_x285;
            const double var_x315 = -var_x306 - var_x314;
            
            partialF = var_x313 + var_x315;
        }
        else
        {
            const double y_save = rY[5];
            rY[5] += delta;
            const double temp = EvaluateYDerivative5(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[5])/delta;
            rY[5] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKs__C4 = rY[5];
        // Units: dimensionless; Initial value: 0.0045705849736195
        double var_chaste_interface__IKs__C5 = rY[6];
        // Units: dimensionless; Initial value: 0.000152923243503507
        double var_chaste_interface__IKs__C9 = rY[10];
        // Units: dimensionless; Initial value: 0.000318368292970148
        

        // Mathematics
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__alpha = 0.014864597980859999 * exp(0.029877301235880002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986312199829993 * exp(-0.055461057126639998 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__delta = 0.0031173268874 * exp(-0.42625451944376003 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.01460066118316 * exp(0.24464953099645001 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C5 = (-4.0 * var_IKs__beta - 4.0 * var_IKs__gamma) * var_chaste_interface__IKs__C5 + var_chaste_interface__IKs__C4 * var_IKs__alpha + var_chaste_interface__IKs__C9 * var_IKs__delta; // 1 / ms

        return d_dt_chaste_interface_var_IKs__C5;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x277 = exp(-0.0020762336738124813 * var_chaste_interface__membrane__Vm);
            const double var_x285 = exp(0.0091586713426216482 * var_chaste_interface__membrane__Vm);
            const double var_x316 = 0.33594524879931997 * var_x277;
            const double var_x318 = 0.058402644732640001 * var_x285;
            
            partialF = -var_x316 - var_x318;
        }
        else
        {
            const double y_save = rY[6];
            rY[6] += delta;
            const double temp = EvaluateYDerivative6(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[6])/delta;
            rY[6] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKs__C2 = rY[3];
        // Units: dimensionless; Initial value: 0.255181042718489
        double var_chaste_interface__IKs__C6 = rY[7];
        // Units: dimensionless; Initial value: 0.132814156809568
        double var_chaste_interface__IKs__C7 = rY[8];
        // Units: dimensionless; Initial value: 0.053324572164618
        

        // Mathematics
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__alpha = 0.014864597980859999 * exp(0.029877301235880002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986312199829993 * exp(-0.055461057126639998 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__delta = 0.0031173268874 * exp(-0.42625451944376003 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.01460066118316 * exp(0.24464953099645001 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C6 = (-var_IKs__delta - 3.0 * var_IKs__alpha) * var_chaste_interface__IKs__C6 + var_chaste_interface__IKs__C2 * var_IKs__gamma + var_chaste_interface__IKs__C7 * var_IKs__beta; // 1 / ms

        return d_dt_chaste_interface_var_IKs__C6;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x279 = exp(0.0011184831685939309 * var_chaste_interface__membrane__Vm);
            const double var_x289 = exp(-0.015957214534570986 * var_chaste_interface__membrane__Vm);
            const double var_x291 = 0.04459379394258 * var_x279;
            const double var_x292 = -var_x291;
            const double var_x296 = 0.0031173268874 * var_x289;
            const double var_x319 = -var_x296;
            
            partialF = var_x292 + var_x319;
        }
        else
        {
            const double y_save = rY[7];
            rY[7] += delta;
            const double temp = EvaluateYDerivative7(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[7])/delta;
            rY[7] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKs__C3 = rY[4];
        // Units: dimensionless; Initial value: 0.0512272866698557
        double var_chaste_interface__IKs__C6 = rY[7];
        // Units: dimensionless; Initial value: 0.132814156809568
        double var_chaste_interface__IKs__C7 = rY[8];
        // Units: dimensionless; Initial value: 0.053324572164618
        double var_chaste_interface__IKs__C8 = rY[9];
        // Units: dimensionless; Initial value: 0.00713656414955778
        double var_chaste_interface__IKs__C10 = rY[11];
        // Units: dimensionless; Initial value: 0.0138769647384953
        

        // Mathematics
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__alpha = 0.014864597980859999 * exp(0.029877301235880002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986312199829993 * exp(-0.055461057126639998 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__delta = 0.0031173268874 * exp(-0.42625451944376003 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.01460066118316 * exp(0.24464953099645001 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C7 = (-var_IKs__beta - var_IKs__delta - var_IKs__gamma - 2.0 * var_IKs__alpha) * var_chaste_interface__IKs__C7 + 2.0 * var_chaste_interface__IKs__C10 * var_IKs__delta + 2.0 * var_chaste_interface__IKs__C3 * var_IKs__gamma + 2.0 * var_chaste_interface__IKs__C8 * var_IKs__beta + 3.0 * var_chaste_interface__IKs__C6 * var_IKs__alpha; // 1 / ms

        return d_dt_chaste_interface_var_IKs__C7;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x277 = exp(-0.0020762336738124813 * var_chaste_interface__membrane__Vm);
            const double var_x279 = exp(0.0011184831685939309 * var_chaste_interface__membrane__Vm);
            const double var_x282 = 0.083986312199829993 * var_x277;
            const double var_x285 = exp(0.0091586713426216482 * var_chaste_interface__membrane__Vm);
            const double var_x289 = exp(-0.015957214534570986 * var_chaste_interface__membrane__Vm);
            const double var_x293 = 0.01460066118316 * var_x285;
            const double var_x294 = -var_x282 - var_x293;
            const double var_x296 = 0.0031173268874 * var_x289;
            const double var_x302 = 0.029729195961719999 * var_x279;
            const double var_x303 = -var_x302;
            const double var_x319 = -var_x296;
            
            partialF = var_x294 + var_x303 + var_x319;
        }
        else
        {
            const double y_save = rY[8];
            rY[8] += delta;
            const double temp = EvaluateYDerivative8(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[8])/delta;
            rY[8] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKs__C4 = rY[5];
        // Units: dimensionless; Initial value: 0.0045705849736195
        double var_chaste_interface__IKs__C7 = rY[8];
        // Units: dimensionless; Initial value: 0.053324572164618
        double var_chaste_interface__IKs__C8 = rY[9];
        // Units: dimensionless; Initial value: 0.00713656414955778
        double var_chaste_interface__IKs__C9 = rY[10];
        // Units: dimensionless; Initial value: 0.000318368292970148
        double var_chaste_interface__IKs__C11 = rY[12];
        // Units: dimensionless; Initial value: 0.00371438476499172
        

        // Mathematics
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__alpha = 0.014864597980859999 * exp(0.029877301235880002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986312199829993 * exp(-0.055461057126639998 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__delta = 0.0031173268874 * exp(-0.42625451944376003 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.01460066118316 * exp(0.24464953099645001 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C8 = (-var_IKs__alpha - var_IKs__delta - 2.0 * var_IKs__beta - 2.0 * var_IKs__gamma) * var_chaste_interface__IKs__C8 + 2.0 * var_chaste_interface__IKs__C11 * var_IKs__delta + 2.0 * var_chaste_interface__IKs__C7 * var_IKs__alpha + 3.0 * var_chaste_interface__IKs__C4 * var_IKs__gamma + 3.0 * var_chaste_interface__IKs__C9 * var_IKs__beta; // 1 / ms

        return d_dt_chaste_interface_var_IKs__C8;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x277 = exp(-0.0020762336738124813 * var_chaste_interface__membrane__Vm);
            const double var_x279 = exp(0.0011184831685939309 * var_chaste_interface__membrane__Vm);
            const double var_x285 = exp(0.0091586713426216482 * var_chaste_interface__membrane__Vm);
            const double var_x289 = exp(-0.015957214534570986 * var_chaste_interface__membrane__Vm);
            const double var_x295 = 0.16797262439965999 * var_x277;
            const double var_x296 = 0.0031173268874 * var_x289;
            const double var_x304 = 0.02920132236632 * var_x285;
            const double var_x305 = -var_x295 - var_x304;
            const double var_x312 = 0.014864597980859999 * var_x279;
            const double var_x313 = -var_x312;
            const double var_x319 = -var_x296;
            
            partialF = var_x305 + var_x313 + var_x319;
        }
        else
        {
            const double y_save = rY[9];
            rY[9] += delta;
            const double temp = EvaluateYDerivative9(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[9])/delta;
            rY[9] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKs__C5 = rY[6];
        // Units: dimensionless; Initial value: 0.000152923243503507
        double var_chaste_interface__IKs__C8 = rY[9];
        // Units: dimensionless; Initial value: 0.00713656414955778
        double var_chaste_interface__IKs__C9 = rY[10];
        // Units: dimensionless; Initial value: 0.000318368292970148
        double var_chaste_interface__IKs__C12 = rY[13];
        // Units: dimensionless; Initial value: 0.000248553788631871
        

        // Mathematics
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__alpha = 0.014864597980859999 * exp(0.029877301235880002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986312199829993 * exp(-0.055461057126639998 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__delta = 0.0031173268874 * exp(-0.42625451944376003 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.01460066118316 * exp(0.24464953099645001 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C9 = (-var_IKs__delta - 3.0 * var_IKs__beta - 3.0 * var_IKs__gamma) * var_chaste_interface__IKs__C9 + var_chaste_interface__IKs__C8 * var_IKs__alpha + 2.0 * var_chaste_interface__IKs__C12 * var_IKs__delta + 4.0 * var_chaste_interface__IKs__C5 * var_IKs__gamma; // 1 / ms

        return d_dt_chaste_interface_var_IKs__C9;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x277 = exp(-0.0020762336738124813 * var_chaste_interface__membrane__Vm);
            const double var_x285 = exp(0.0091586713426216482 * var_chaste_interface__membrane__Vm);
            const double var_x289 = exp(-0.015957214534570986 * var_chaste_interface__membrane__Vm);
            const double var_x296 = 0.0031173268874 * var_x289;
            const double var_x306 = 0.25195893659948998 * var_x277;
            const double var_x314 = 0.043801983549479999 * var_x285;
            const double var_x315 = -var_x306 - var_x314;
            const double var_x319 = -var_x296;
            
            partialF = var_x315 + var_x319;
        }
        else
        {
            const double y_save = rY[10];
            rY[10] += delta;
            const double temp = EvaluateYDerivative10(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[10])/delta;
            rY[10] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKs__C7 = rY[8];
        // Units: dimensionless; Initial value: 0.053324572164618
        double var_chaste_interface__IKs__C10 = rY[11];
        // Units: dimensionless; Initial value: 0.0138769647384953
        double var_chaste_interface__IKs__C11 = rY[12];
        // Units: dimensionless; Initial value: 0.00371438476499172
        

        // Mathematics
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__alpha = 0.014864597980859999 * exp(0.029877301235880002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986312199829993 * exp(-0.055461057126639998 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__delta = 0.0031173268874 * exp(-0.42625451944376003 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.01460066118316 * exp(0.24464953099645001 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C10 = (-2.0 * var_IKs__alpha - 2.0 * var_IKs__delta) * var_chaste_interface__IKs__C10 + var_chaste_interface__IKs__C11 * var_IKs__beta + var_chaste_interface__IKs__C7 * var_IKs__gamma; // 1 / ms

        return d_dt_chaste_interface_var_IKs__C10;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x279 = exp(0.0011184831685939309 * var_chaste_interface__membrane__Vm);
            const double var_x289 = exp(-0.015957214534570986 * var_chaste_interface__membrane__Vm);
            const double var_x302 = 0.029729195961719999 * var_x279;
            const double var_x303 = -var_x302;
            const double var_x321 = 0.0062346537747999999 * var_x289;
            const double var_x322 = -var_x321;
            
            partialF = var_x303 + var_x322;
        }
        else
        {
            const double y_save = rY[11];
            rY[11] += delta;
            const double temp = EvaluateYDerivative11(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[11])/delta;
            rY[11] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKs__C8 = rY[9];
        // Units: dimensionless; Initial value: 0.00713656414955778
        double var_chaste_interface__IKs__C10 = rY[11];
        // Units: dimensionless; Initial value: 0.0138769647384953
        double var_chaste_interface__IKs__C11 = rY[12];
        // Units: dimensionless; Initial value: 0.00371438476499172
        double var_chaste_interface__IKs__C12 = rY[13];
        // Units: dimensionless; Initial value: 0.000248553788631871
        double var_chaste_interface__IKs__C13 = rY[14];
        // Units: dimensionless; Initial value: 0.000644426171899078
        

        // Mathematics
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__alpha = 0.014864597980859999 * exp(0.029877301235880002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986312199829993 * exp(-0.055461057126639998 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__delta = 0.0031173268874 * exp(-0.42625451944376003 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.01460066118316 * exp(0.24464953099645001 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C11 = (-var_IKs__alpha - var_IKs__beta - var_IKs__gamma - 2.0 * var_IKs__delta) * var_chaste_interface__IKs__C11 + 2.0 * var_chaste_interface__IKs__C10 * var_IKs__alpha + 2.0 * var_chaste_interface__IKs__C12 * var_IKs__beta + 2.0 * var_chaste_interface__IKs__C8 * var_IKs__gamma + 3.0 * var_chaste_interface__IKs__C13 * var_IKs__delta; // 1 / ms

        return d_dt_chaste_interface_var_IKs__C11;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x277 = exp(-0.0020762336738124813 * var_chaste_interface__membrane__Vm);
            const double var_x279 = exp(0.0011184831685939309 * var_chaste_interface__membrane__Vm);
            const double var_x282 = 0.083986312199829993 * var_x277;
            const double var_x285 = exp(0.0091586713426216482 * var_chaste_interface__membrane__Vm);
            const double var_x289 = exp(-0.015957214534570986 * var_chaste_interface__membrane__Vm);
            const double var_x293 = 0.01460066118316 * var_x285;
            const double var_x294 = -var_x282 - var_x293;
            const double var_x312 = 0.014864597980859999 * var_x279;
            const double var_x313 = -var_x312;
            const double var_x321 = 0.0062346537747999999 * var_x289;
            const double var_x322 = -var_x321;
            
            partialF = var_x294 + var_x313 + var_x322;
        }
        else
        {
            const double y_save = rY[12];
            rY[12] += delta;
            const double temp = EvaluateYDerivative12(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[12])/delta;
            rY[12] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKs__C9 = rY[10];
        // Units: dimensionless; Initial value: 0.000318368292970148
        double var_chaste_interface__IKs__C11 = rY[12];
        // Units: dimensionless; Initial value: 0.00371438476499172
        double var_chaste_interface__IKs__C12 = rY[13];
        // Units: dimensionless; Initial value: 0.000248553788631871
        double var_chaste_interface__IKs__C14 = rY[15];
        // Units: dimensionless; Initial value: 8.62495047666861e-05
        

        // Mathematics
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__alpha = 0.014864597980859999 * exp(0.029877301235880002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986312199829993 * exp(-0.055461057126639998 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__delta = 0.0031173268874 * exp(-0.42625451944376003 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.01460066118316 * exp(0.24464953099645001 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C12 = (-2.0 * var_IKs__beta - 2.0 * var_IKs__delta - 2.0 * var_IKs__gamma) * var_chaste_interface__IKs__C12 + var_chaste_interface__IKs__C11 * var_IKs__alpha + 3.0 * var_chaste_interface__IKs__C14 * var_IKs__delta + 3.0 * var_chaste_interface__IKs__C9 * var_IKs__gamma; // 1 / ms

        return d_dt_chaste_interface_var_IKs__C12;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x277 = exp(-0.0020762336738124813 * var_chaste_interface__membrane__Vm);
            const double var_x285 = exp(0.0091586713426216482 * var_chaste_interface__membrane__Vm);
            const double var_x289 = exp(-0.015957214534570986 * var_chaste_interface__membrane__Vm);
            const double var_x295 = 0.16797262439965999 * var_x277;
            const double var_x304 = 0.02920132236632 * var_x285;
            const double var_x305 = -var_x295 - var_x304;
            const double var_x321 = 0.0062346537747999999 * var_x289;
            const double var_x322 = -var_x321;
            
            partialF = var_x305 + var_x322;
        }
        else
        {
            const double y_save = rY[13];
            rY[13] += delta;
            const double temp = EvaluateYDerivative13(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[13])/delta;
            rY[13] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKs__C11 = rY[12];
        // Units: dimensionless; Initial value: 0.00371438476499172
        double var_chaste_interface__IKs__C13 = rY[14];
        // Units: dimensionless; Initial value: 0.000644426171899078
        double var_chaste_interface__IKs__C14 = rY[15];
        // Units: dimensionless; Initial value: 8.62495047666861e-05
        

        // Mathematics
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__alpha = 0.014864597980859999 * exp(0.029877301235880002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986312199829993 * exp(-0.055461057126639998 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__delta = 0.0031173268874 * exp(-0.42625451944376003 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.01460066118316 * exp(0.24464953099645001 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C13 = (-var_IKs__alpha - 3.0 * var_IKs__delta) * var_chaste_interface__IKs__C13 + var_chaste_interface__IKs__C11 * var_IKs__gamma + var_chaste_interface__IKs__C14 * var_IKs__beta; // 1 / ms

        return d_dt_chaste_interface_var_IKs__C13;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x279 = exp(0.0011184831685939309 * var_chaste_interface__membrane__Vm);
            const double var_x289 = exp(-0.015957214534570986 * var_chaste_interface__membrane__Vm);
            const double var_x312 = 0.014864597980859999 * var_x279;
            const double var_x313 = -var_x312;
            const double var_x324 = 0.009351980662199999 * var_x289;
            const double var_x325 = -var_x324;
            
            partialF = var_x313 + var_x325;
        }
        else
        {
            const double y_save = rY[14];
            rY[14] += delta;
            const double temp = EvaluateYDerivative14(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[14])/delta;
            rY[14] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKs__C12 = rY[13];
        // Units: dimensionless; Initial value: 0.000248553788631871
        double var_chaste_interface__IKs__C13 = rY[14];
        // Units: dimensionless; Initial value: 0.000644426171899078
        double var_chaste_interface__IKs__C14 = rY[15];
        // Units: dimensionless; Initial value: 8.62495047666861e-05
        double var_chaste_interface__IKs__C15 = rY[16];
        // Units: dimensionless; Initial value: 1.12344645485893e-05
        

        // Mathematics
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__alpha = 0.014864597980859999 * exp(0.029877301235880002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__beta = 0.083986312199829993 * exp(-0.055461057126639998 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__delta = 0.0031173268874 * exp(-0.42625451944376003 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.01460066118316 * exp(0.24464953099645001 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C14 = (-var_IKs__beta - var_IKs__gamma - 3.0 * var_IKs__delta) * var_chaste_interface__IKs__C14 + var_chaste_interface__IKs__C13 * var_IKs__alpha + 2.0 * var_chaste_interface__IKs__C12 * var_IKs__gamma + 4.0 * var_chaste_interface__IKs__C15 * var_IKs__delta; // 1 / ms

        return d_dt_chaste_interface_var_IKs__C14;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x277 = exp(-0.0020762336738124813 * var_chaste_interface__membrane__Vm);
            const double var_x282 = 0.083986312199829993 * var_x277;
            const double var_x285 = exp(0.0091586713426216482 * var_chaste_interface__membrane__Vm);
            const double var_x289 = exp(-0.015957214534570986 * var_chaste_interface__membrane__Vm);
            const double var_x293 = 0.01460066118316 * var_x285;
            const double var_x294 = -var_x282 - var_x293;
            const double var_x324 = 0.009351980662199999 * var_x289;
            const double var_x325 = -var_x324;
            
            partialF = var_x294 + var_x325;
        }
        else
        {
            const double y_save = rY[15];
            rY[15] += delta;
            const double temp = EvaluateYDerivative15(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[15])/delta;
            rY[15] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKs__C14 = rY[15];
        // Units: dimensionless; Initial value: 8.62495047666861e-05
        double var_chaste_interface__IKs__C15 = rY[16];
        // Units: dimensionless; Initial value: 1.12344645485893e-05
        double var_chaste_interface__IKs__O1 = rY[17];
        // Units: dimensionless; Initial value: 1.05292905767805e-05
        

        // Mathematics
        const double var_IKs__theta = 0.089538306411019994; // per_ms
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__delta = 0.0031173268874 * exp(-0.42625451944376003 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__eta = 0.077319900973309999 * exp(-0.06472612248871 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__gamma = 0.01460066118316 * exp(0.24464953099645001 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__C15 = (-var_IKs__theta - 4.0 * var_IKs__delta) * var_chaste_interface__IKs__C15 + var_chaste_interface__IKs__C14 * var_IKs__gamma + var_chaste_interface__IKs__O1 * var_IKs__eta; // 1 / ms

        return d_dt_chaste_interface_var_IKs__C15;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x289 = exp(-0.015957214534570986 * var_chaste_interface__membrane__Vm);
            const double var_x327 = 0.0124693075496 * var_x289;
            
            partialF = -0.089538306411019994 - var_x327;
        }
        else
        {
            const double y_save = rY[16];
            rY[16] += delta;
            const double temp = EvaluateYDerivative16(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[16])/delta;
            rY[16] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKs__C1 = rY[2];
        // Units: dimensionless; Initial value: 0.476679784307081
        double var_chaste_interface__IKs__C2 = rY[3];
        // Units: dimensionless; Initial value: 0.255181042718489
        double var_chaste_interface__IKs__C3 = rY[4];
        // Units: dimensionless; Initial value: 0.0512272866698557
        double var_chaste_interface__IKs__C4 = rY[5];
        // Units: dimensionless; Initial value: 0.0045705849736195
        double var_chaste_interface__IKs__C5 = rY[6];
        // Units: dimensionless; Initial value: 0.000152923243503507
        double var_chaste_interface__IKs__C6 = rY[7];
        // Units: dimensionless; Initial value: 0.132814156809568
        double var_chaste_interface__IKs__C7 = rY[8];
        // Units: dimensionless; Initial value: 0.053324572164618
        double var_chaste_interface__IKs__C8 = rY[9];
        // Units: dimensionless; Initial value: 0.00713656414955778
        double var_chaste_interface__IKs__C9 = rY[10];
        // Units: dimensionless; Initial value: 0.000318368292970148
        double var_chaste_interface__IKs__C10 = rY[11];
        // Units: dimensionless; Initial value: 0.0138769647384953
        double var_chaste_interface__IKs__C11 = rY[12];
        // Units: dimensionless; Initial value: 0.00371438476499172
        double var_chaste_interface__IKs__C12 = rY[13];
        // Units: dimensionless; Initial value: 0.000248553788631871
        double var_chaste_interface__IKs__C13 = rY[14];
        // Units: dimensionless; Initial value: 0.000644426171899078
        double var_chaste_interface__IKs__C14 = rY[15];
        // Units: dimensionless; Initial value: 8.62495047666861e-05
        double var_chaste_interface__IKs__C15 = rY[16];
        // Units: dimensionless; Initial value: 1.12344645485893e-05
        double var_chaste_interface__IKs__O1 = rY[17];
        // Units: dimensionless; Initial value: 1.05292905767805e-05
        

        // Mathematics
        const double var_IKs__O2 = 1.0 - var_chaste_interface__IKs__C1 - var_chaste_interface__IKs__C10 - var_chaste_interface__IKs__C11 - var_chaste_interface__IKs__C12 - var_chaste_interface__IKs__C13 - var_chaste_interface__IKs__C14 - var_chaste_interface__IKs__C15 - var_chaste_interface__IKs__C2 - var_chaste_interface__IKs__C3 - var_chaste_interface__IKs__C4 - var_chaste_interface__IKs__C5 - var_chaste_interface__IKs__C6 - var_chaste_interface__IKs__C7 - var_chaste_interface__IKs__C8 - var_chaste_interface__IKs__C9 - var_chaste_interface__IKs__O1; // dimensionless
        const double var_IKs__theta = 0.089538306411019994; // per_ms
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_IKs__eta = 0.077319900973309999 * exp(-0.06472612248871 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__omega = 0.79405459958640001 * exp(-0.080173781929769997 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double var_IKs__psi = 0.58638228663014003 * exp(0.28205554331496002 * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // per_ms
        const double d_dt_chaste_interface_var_IKs__O1 = (-var_IKs__eta - var_IKs__psi) * var_chaste_interface__IKs__O1 + var_chaste_interface__IKs__C15 * var_IKs__theta + var_IKs__O2 * var_IKs__omega; // 1 / ms

        return d_dt_chaste_interface_var_IKs__O1;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x328 = exp(-0.002423079581399111 * var_chaste_interface__membrane__Vm);
            const double var_x330 = 0.077319900973309999 * var_x328;
            const double var_x331 = exp(0.010558998462268819 * var_chaste_interface__membrane__Vm);
            const double var_x332 = exp(-0.00300137636070284 * var_chaste_interface__membrane__Vm);
            const double var_x333 = -0.79405459958640001 * var_x332;
            
            partialF = var_x333 - var_x330 - 0.58638228663014003 * var_x331;
        }
        else
        {
            const double y_save = rY[17];
            rY[17] += delta;
            const double temp = EvaluateYDerivative17(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[17])/delta;
            rY[17] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__ICaL__C = rY[18];
        // Units: dimensionless; Initial value: 0.99996982093287
        double var_chaste_interface__ICaL__O = rY[19];
        // Units: dimensionless; Initial value: 2.26882961412491e-05
        double var_chaste_interface__ICaL__C_star = rY[20];
        // Units: dimensionless; Initial value: 7.49117189549873e-06
        double var_chaste_interface__ICaL__CI = rY[22];
        // Units: dimensionless; Initial value: 5.89853003114132e-11
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
        // Units: mM; Initial value: 0.000119239795531548
        

        // Mathematics
        const double var_ICaL__delta = 3.0 / (1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4)); // per_ms
        const double var_ICaL__theta = 1.0; // per_ms
        const double var_ICaL__ACT_infinity = 1 / (1.0 + exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__ACT_tau = 0.58999999999999997 + 0.80000000000000004 * exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm) / (1.0 + exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm)); // ms
        const double var_ICaL__IV_infinity = 0.20000000000000001 + 0.80000000000000004 / (1.0 + exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__IV_tau = 1 / (0.040277106492669565 / (1.0 + exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm)) + 0.032730010146303147 / (1.0 + exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm))); // ms
        const double var_ICaL__alpha = var_ICaL__ACT_infinity / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__beta = (1.0 - var_ICaL__ACT_infinity) / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__x = var_ICaL__IV_infinity / var_ICaL__IV_tau; // per_ms
        const double var_ICaL__y = (1.0 - var_ICaL__IV_infinity) / var_ICaL__IV_tau; // per_ms
        const double d_dt_chaste_interface_var_ICaL__C = (-var_ICaL__alpha - var_ICaL__delta - var_ICaL__y) * var_chaste_interface__ICaL__C + var_chaste_interface__ICaL__CI * var_ICaL__x + var_chaste_interface__ICaL__C_star * var_ICaL__theta + var_chaste_interface__ICaL__O * var_ICaL__beta; // 1 / ms

        return d_dt_chaste_interface_var_ICaL__C;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
            // Units: mM; Initial value: 0.000119239795531548
            

            const double var_x334 = exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm);
            const double var_x335 = 1.0 + var_x334;
            const double var_x336 = 1 / var_x335;
            const double var_x337 = 0.80000000000000004 * var_x336;
            const double var_x338 = exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm);
            const double var_x339 = 1.0 + var_x338;
            const double var_x341 = exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm);
            const double var_x342 = 1.0 + var_x341;
            const double var_x345 = 0.040277106492669565 / var_x342;
            const double var_x346 = 1 / var_x339;
            const double var_x347 = var_x345 + 0.032730010146303147 * var_x346;
            const double var_x351 = exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm);
            const double var_x352 = 1.0 + var_x351;
            const double var_x353 = exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm);
            const double var_x354 = 1.0 + var_x353;
            const double var_x355 = exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm);
            const double var_x356 = var_x355 / var_x354;
            const double var_x357 = 1 / (0.58999999999999997 + 0.80000000000000004 * var_x356);
            const double var_x359 = 1 / var_x352;
            const double var_x365 = var_x359;
            const double var_x368 = var_x357 * var_x365;
            const double var_x369 = -var_x368;
            const double var_x370 = 1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4);
            const double var_x371 = 1 / var_x370;
            const double var_x372 = 3.0 * var_x371;
            const double var_x373 = -var_x337;
            const double var_x374 = 0.80000000000000004 + var_x373;
            const double var_x375 = var_x347 * var_x374;
            const double var_x376 = -var_x372 - var_x375;
            
            partialF = var_x369 + var_x376;
        }
        else
        {
            const double y_save = rY[18];
            rY[18] += delta;
            const double temp = EvaluateYDerivative18(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[18])/delta;
            rY[18] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__ICaL__C = rY[18];
        // Units: dimensionless; Initial value: 0.99996982093287
        double var_chaste_interface__ICaL__O = rY[19];
        // Units: dimensionless; Initial value: 2.26882961412491e-05
        double var_chaste_interface__ICaL__O_star = rY[21];
        // Units: dimensionless; Initial value: 1.23556404128518e-10
        double var_chaste_interface__ICaL__OI = rY[23];
        // Units: dimensionless; Initial value: 8.01952813127322e-17
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
        // Units: mM; Initial value: 0.000119239795531548
        

        // Mathematics
        const double var_ICaL__delta = 3.0 / (1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4)); // per_ms
        const double var_ICaL__theta = 1.0; // per_ms
        const double var_ICaL__ACT_infinity = 1 / (1.0 + exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__ACT_tau = 0.58999999999999997 + 0.80000000000000004 * exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm) / (1.0 + exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm)); // ms
        const double var_ICaL__IV_infinity = 0.20000000000000001 + 0.80000000000000004 / (1.0 + exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__IV_tau = 1 / (0.040277106492669565 / (1.0 + exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm)) + 0.032730010146303147 / (1.0 + exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm))); // ms
        const double var_ICaL__alpha = var_ICaL__ACT_infinity / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__beta = (1.0 - var_ICaL__ACT_infinity) / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__x = var_ICaL__IV_infinity / var_ICaL__IV_tau; // per_ms
        const double var_ICaL__y = (1.0 - var_ICaL__IV_infinity) / var_ICaL__IV_tau; // per_ms
        const double d_dt_chaste_interface_var_ICaL__O = (-var_ICaL__beta - var_ICaL__delta - var_ICaL__y) * var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__C * var_ICaL__alpha + var_chaste_interface__ICaL__OI * var_ICaL__x + var_chaste_interface__ICaL__O_star * var_ICaL__theta; // 1 / ms

        return d_dt_chaste_interface_var_ICaL__O;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
            // Units: mM; Initial value: 0.000119239795531548
            

            const double var_x334 = exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm);
            const double var_x335 = 1.0 + var_x334;
            const double var_x336 = 1 / var_x335;
            const double var_x337 = 0.80000000000000004 * var_x336;
            const double var_x338 = exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm);
            const double var_x339 = 1.0 + var_x338;
            const double var_x341 = exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm);
            const double var_x342 = 1.0 + var_x341;
            const double var_x345 = 0.040277106492669565 / var_x342;
            const double var_x346 = 1 / var_x339;
            const double var_x347 = var_x345 + 0.032730010146303147 * var_x346;
            const double var_x351 = exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm);
            const double var_x352 = 1.0 + var_x351;
            const double var_x353 = exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm);
            const double var_x354 = 1.0 + var_x353;
            const double var_x355 = exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm);
            const double var_x356 = var_x355 / var_x354;
            const double var_x357 = 1 / (0.58999999999999997 + 0.80000000000000004 * var_x356);
            const double var_x359 = 1 / var_x352;
            const double var_x365 = var_x359;
            const double var_x366 = 1.0 - var_x365;
            const double var_x370 = 1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4);
            const double var_x371 = 1 / var_x370;
            const double var_x372 = 3.0 * var_x371;
            const double var_x373 = -var_x337;
            const double var_x374 = 0.80000000000000004 + var_x373;
            const double var_x375 = var_x347 * var_x374;
            const double var_x376 = -var_x372 - var_x375;
            const double var_x377 = var_x357 * var_x366;
            const double var_x383 = -var_x377;
            
            partialF = var_x376 + var_x383;
        }
        else
        {
            const double y_save = rY[19];
            rY[19] += delta;
            const double temp = EvaluateYDerivative19(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[19])/delta;
            rY[19] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__ICaL__C = rY[18];
        // Units: dimensionless; Initial value: 0.99996982093287
        double var_chaste_interface__ICaL__C_star = rY[20];
        // Units: dimensionless; Initial value: 7.49117189549873e-06
        double var_chaste_interface__ICaL__O_star = rY[21];
        // Units: dimensionless; Initial value: 1.23556404128518e-10
        double var_chaste_interface__ICaL__CI_star = rY[24];
        // Units: dimensionless; Initial value: 1.9237001017021e-09
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
        // Units: mM; Initial value: 0.000119239795531548
        

        // Mathematics
        const double var_ICaL__IV_beta_infinity_star = 25.0 - 17.5 / (1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4)); // dimensionless
        const double var_ICaL__delta = 3.0 / (1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4)); // per_ms
        const double var_ICaL__theta = 1.0; // per_ms
        const double var_ICaL__ACT_infinity = 1 / (1.0 + exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__ACT_tau = 0.58999999999999997 + 0.80000000000000004 * exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm) / (1.0 + exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm)); // ms
        const double var_ICaL__IV_beta_star = 1 / ((1.0 + exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm)) * var_ICaL__IV_beta_infinity_star); // dimensionless
        const double var_ICaL__IV_infinity_star = 9.9990000999900015e-5 + 0.99990000999900008 / (1.0 + exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__IV_tau_star = 1 / (0.040277106492669565 / (1.0 + exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm)) + var_ICaL__IV_beta_star); // ms
        const double var_ICaL__alpha = var_ICaL__ACT_infinity / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__beta = (1.0 - var_ICaL__ACT_infinity) / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__x_star = var_ICaL__IV_infinity_star / var_ICaL__IV_tau_star; // per_ms
        const double var_ICaL__y_star = (1.0 - var_ICaL__IV_infinity_star) / var_ICaL__IV_tau_star; // per_ms
        const double d_dt_chaste_interface_var_ICaL__C_star = (-var_ICaL__alpha - var_ICaL__theta - var_ICaL__y_star) * var_chaste_interface__ICaL__C_star + var_chaste_interface__ICaL__C * var_ICaL__delta + var_chaste_interface__ICaL__CI_star * var_ICaL__x_star + var_chaste_interface__ICaL__O_star * var_ICaL__beta; // 1 / ms

        return d_dt_chaste_interface_var_ICaL__C_star;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
            // Units: mM; Initial value: 0.000119239795531548
            

            const double var_x334 = exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm);
            const double var_x335 = 1.0 + var_x334;
            const double var_x336 = 1 / var_x335;
            const double var_x338 = exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm);
            const double var_x339 = 1.0 + var_x338;
            const double var_x341 = exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm);
            const double var_x342 = 1.0 + var_x341;
            const double var_x345 = 0.040277106492669565 / var_x342;
            const double var_x346 = 1 / var_x339;
            const double var_x351 = exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm);
            const double var_x352 = 1.0 + var_x351;
            const double var_x353 = exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm);
            const double var_x354 = 1.0 + var_x353;
            const double var_x355 = exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm);
            const double var_x356 = var_x355 / var_x354;
            const double var_x357 = 1 / (0.58999999999999997 + 0.80000000000000004 * var_x356);
            const double var_x359 = 1 / var_x352;
            const double var_x365 = var_x359;
            const double var_x368 = var_x357 * var_x365;
            const double var_x369 = -var_x368;
            const double var_x370 = 1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4);
            const double var_x371 = 1 / var_x370;
            const double var_x385 = 0.99990000999900008 * var_x336;
            const double var_x387 = 1 / (25.0 - 17.5 * var_x371);
            const double var_x389 = var_x345 + var_x346 * var_x387;
            const double var_x394 = -var_x385;
            const double var_x395 = 0.99990000999900008 + var_x394;
            const double var_x396 = var_x389 * var_x395;
            const double var_x397 = -1.0 - var_x396;
            
            partialF = var_x369 + var_x397;
        }
        else
        {
            const double y_save = rY[20];
            rY[20] += delta;
            const double temp = EvaluateYDerivative20(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[20])/delta;
            rY[20] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__ICaL__C = rY[18];
        // Units: dimensionless; Initial value: 0.99996982093287
        double var_chaste_interface__ICaL__O = rY[19];
        // Units: dimensionless; Initial value: 2.26882961412491e-05
        double var_chaste_interface__ICaL__C_star = rY[20];
        // Units: dimensionless; Initial value: 7.49117189549873e-06
        double var_chaste_interface__ICaL__O_star = rY[21];
        // Units: dimensionless; Initial value: 1.23556404128518e-10
        double var_chaste_interface__ICaL__CI = rY[22];
        // Units: dimensionless; Initial value: 5.89853003114132e-11
        double var_chaste_interface__ICaL__OI = rY[23];
        // Units: dimensionless; Initial value: 8.01952813127322e-17
        double var_chaste_interface__ICaL__CI_star = rY[24];
        // Units: dimensionless; Initial value: 1.9237001017021e-09
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
        // Units: mM; Initial value: 0.000119239795531548
        

        // Mathematics
        const double var_ICaL__IV_beta_infinity_star = 25.0 - 17.5 / (1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4)); // dimensionless
        const double var_ICaL__OI_star = 1.0 - var_chaste_interface__ICaL__C - var_chaste_interface__ICaL__CI - var_chaste_interface__ICaL__CI_star - var_chaste_interface__ICaL__C_star - var_chaste_interface__ICaL__O - var_chaste_interface__ICaL__OI - var_chaste_interface__ICaL__O_star; // dimensionless
        const double var_ICaL__delta = 3.0 / (1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4)); // per_ms
        const double var_ICaL__theta = 1.0; // per_ms
        const double var_ICaL__ACT_infinity = 1 / (1.0 + exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__ACT_tau = 0.58999999999999997 + 0.80000000000000004 * exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm) / (1.0 + exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm)); // ms
        const double var_ICaL__IV_beta_star = 1 / ((1.0 + exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm)) * var_ICaL__IV_beta_infinity_star); // dimensionless
        const double var_ICaL__IV_infinity_star = 9.9990000999900015e-5 + 0.99990000999900008 / (1.0 + exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__IV_tau_star = 1 / (0.040277106492669565 / (1.0 + exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm)) + var_ICaL__IV_beta_star); // ms
        const double var_ICaL__alpha = var_ICaL__ACT_infinity / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__beta = (1.0 - var_ICaL__ACT_infinity) / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__x_star = var_ICaL__IV_infinity_star / var_ICaL__IV_tau_star; // per_ms
        const double var_ICaL__y_star = (1.0 - var_ICaL__IV_infinity_star) / var_ICaL__IV_tau_star; // per_ms
        const double d_dt_chaste_interface_var_ICaL__O_star = (-var_ICaL__beta - var_ICaL__theta - var_ICaL__y_star) * var_chaste_interface__ICaL__O_star + var_chaste_interface__ICaL__C_star * var_ICaL__alpha + var_chaste_interface__ICaL__O * var_ICaL__delta + var_ICaL__OI_star * var_ICaL__x_star; // 1 / ms

        return d_dt_chaste_interface_var_ICaL__O_star;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
            // Units: mM; Initial value: 0.000119239795531548
            

            const double var_x334 = exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm);
            const double var_x335 = 1.0 + var_x334;
            const double var_x336 = 1 / var_x335;
            const double var_x338 = exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm);
            const double var_x339 = 1.0 + var_x338;
            const double var_x341 = exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm);
            const double var_x342 = 1.0 + var_x341;
            const double var_x345 = 0.040277106492669565 / var_x342;
            const double var_x346 = 1 / var_x339;
            const double var_x351 = exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm);
            const double var_x352 = 1.0 + var_x351;
            const double var_x353 = exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm);
            const double var_x354 = 1.0 + var_x353;
            const double var_x355 = exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm);
            const double var_x356 = var_x355 / var_x354;
            const double var_x357 = 1 / (0.58999999999999997 + 0.80000000000000004 * var_x356);
            const double var_x359 = 1 / var_x352;
            const double var_x365 = var_x359;
            const double var_x366 = 1.0 - var_x365;
            const double var_x370 = 1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4);
            const double var_x371 = 1 / var_x370;
            const double var_x377 = var_x357 * var_x366;
            const double var_x383 = -var_x377;
            const double var_x385 = 0.99990000999900008 * var_x336;
            const double var_x387 = 1 / (25.0 - 17.5 * var_x371);
            const double var_x389 = var_x345 + var_x346 * var_x387;
            const double var_x392 = 9.9990000999900015e-5 + var_x385;
            const double var_x394 = -var_x385;
            const double var_x395 = 0.99990000999900008 + var_x394;
            const double var_x396 = var_x389 * var_x395;
            const double var_x397 = -1.0 - var_x396;
            const double var_x398 = var_x389 * var_x392;
            const double var_x403 = -var_x398;
            const double var_x404 = var_x383 + var_x403;
            
            partialF = var_x397 + var_x404;
        }
        else
        {
            const double y_save = rY[21];
            rY[21] += delta;
            const double temp = EvaluateYDerivative21(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[21])/delta;
            rY[21] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__ICaL__C = rY[18];
        // Units: dimensionless; Initial value: 0.99996982093287
        double var_chaste_interface__ICaL__CI = rY[22];
        // Units: dimensionless; Initial value: 5.89853003114132e-11
        double var_chaste_interface__ICaL__OI = rY[23];
        // Units: dimensionless; Initial value: 8.01952813127322e-17
        double var_chaste_interface__ICaL__CI_star = rY[24];
        // Units: dimensionless; Initial value: 1.9237001017021e-09
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
        // Units: mM; Initial value: 0.000119239795531548
        

        // Mathematics
        const double var_ICaL__IV_beta_infinity_star = 25.0 - 17.5 / (1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4)); // dimensionless
        const double var_ICaL__delta = 3.0 / (1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4)); // per_ms
        const double var_ICaL__theta = 1.0; // per_ms
        const double var_ICaL__theta_I = 9.9999999999999995e-7; // per_ms
        const double var_ICaL__ACT_infinity = 1 / (1.0 + exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__ACT_tau = 0.58999999999999997 + 0.80000000000000004 * exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm) / (1.0 + exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm)); // ms
        const double var_ICaL__IV_beta_star = 1 / ((1.0 + exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm)) * var_ICaL__IV_beta_infinity_star); // dimensionless
        const double var_ICaL__IV_infinity = 0.20000000000000001 + 0.80000000000000004 / (1.0 + exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__IV_infinity_star = 9.9990000999900015e-5 + 0.99990000999900008 / (1.0 + exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__IV_tau = 1 / (0.040277106492669565 / (1.0 + exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm)) + 0.032730010146303147 / (1.0 + exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm))); // ms
        const double var_ICaL__IV_tau_star = 1 / (0.040277106492669565 / (1.0 + exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm)) + var_ICaL__IV_beta_star); // ms
        const double var_ICaL__alpha = var_ICaL__ACT_infinity / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__beta = (1.0 - var_ICaL__ACT_infinity) / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__x = var_ICaL__IV_infinity / var_ICaL__IV_tau; // per_ms
        const double var_ICaL__x_star = var_ICaL__IV_infinity_star / var_ICaL__IV_tau_star; // per_ms
        const double var_ICaL__y = (1.0 - var_ICaL__IV_infinity) / var_ICaL__IV_tau; // per_ms
        const double var_ICaL__y_star = (1.0 - var_ICaL__IV_infinity_star) / var_ICaL__IV_tau_star; // per_ms
        const double var_ICaL__delta_I = var_ICaL__delta * var_ICaL__theta_I * var_ICaL__x * var_ICaL__y_star / (var_ICaL__theta * var_ICaL__x_star * var_ICaL__y); // per_ms
        const double d_dt_chaste_interface_var_ICaL__CI = (-var_ICaL__alpha - var_ICaL__delta_I - var_ICaL__x) * var_chaste_interface__ICaL__CI + var_chaste_interface__ICaL__C * var_ICaL__y + var_chaste_interface__ICaL__CI_star * var_ICaL__theta_I + var_chaste_interface__ICaL__OI * var_ICaL__beta; // 1 / ms

        return d_dt_chaste_interface_var_ICaL__CI;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
            // Units: mM; Initial value: 0.000119239795531548
            

            const double var_x334 = exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm);
            const double var_x335 = 1.0 + var_x334;
            const double var_x336 = 1 / var_x335;
            const double var_x337 = 0.80000000000000004 * var_x336;
            const double var_x338 = exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm);
            const double var_x339 = 1.0 + var_x338;
            const double var_x341 = exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm);
            const double var_x342 = 1.0 + var_x341;
            const double var_x345 = 0.040277106492669565 / var_x342;
            const double var_x346 = 1 / var_x339;
            const double var_x347 = var_x345 + 0.032730010146303147 * var_x346;
            const double var_x351 = exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm);
            const double var_x352 = 1.0 + var_x351;
            const double var_x353 = exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm);
            const double var_x354 = 1.0 + var_x353;
            const double var_x355 = exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm);
            const double var_x356 = var_x355 / var_x354;
            const double var_x357 = 1 / (0.58999999999999997 + 0.80000000000000004 * var_x356);
            const double var_x359 = 1 / var_x352;
            const double var_x363 = 0.20000000000000001 + var_x337;
            const double var_x365 = var_x359;
            const double var_x368 = var_x357 * var_x365;
            const double var_x369 = -var_x368;
            const double var_x370 = 1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4);
            const double var_x371 = 1 / var_x370;
            const double var_x373 = -var_x337;
            const double var_x374 = 0.80000000000000004 + var_x373;
            const double var_x378 = var_x347 * var_x363;
            const double var_x385 = 0.99990000999900008 * var_x336;
            const double var_x392 = 9.9990000999900015e-5 + var_x385;
            const double var_x394 = -var_x385;
            const double var_x395 = 0.99990000999900008 + var_x394;
            const double var_x405 = 1 / var_x374;
            const double var_x406 = 1 / var_x392;
            const double var_x407 = var_x371 * var_x395 * var_x405 * var_x406;
            const double var_x417 = 3.0000000000000001e-6 * var_x363 * var_x407;
            const double var_x418 = -var_x378 - var_x417;
            
            partialF = var_x369 + var_x418;
        }
        else
        {
            const double y_save = rY[22];
            rY[22] += delta;
            const double temp = EvaluateYDerivative22(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[22])/delta;
            rY[22] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__ICaL__C = rY[18];
        // Units: dimensionless; Initial value: 0.99996982093287
        double var_chaste_interface__ICaL__O = rY[19];
        // Units: dimensionless; Initial value: 2.26882961412491e-05
        double var_chaste_interface__ICaL__C_star = rY[20];
        // Units: dimensionless; Initial value: 7.49117189549873e-06
        double var_chaste_interface__ICaL__O_star = rY[21];
        // Units: dimensionless; Initial value: 1.23556404128518e-10
        double var_chaste_interface__ICaL__CI = rY[22];
        // Units: dimensionless; Initial value: 5.89853003114132e-11
        double var_chaste_interface__ICaL__OI = rY[23];
        // Units: dimensionless; Initial value: 8.01952813127322e-17
        double var_chaste_interface__ICaL__CI_star = rY[24];
        // Units: dimensionless; Initial value: 1.9237001017021e-09
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
        // Units: mM; Initial value: 0.000119239795531548
        

        // Mathematics
        const double var_ICaL__IV_beta_infinity_star = 25.0 - 17.5 / (1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4)); // dimensionless
        const double var_ICaL__OI_star = 1.0 - var_chaste_interface__ICaL__C - var_chaste_interface__ICaL__CI - var_chaste_interface__ICaL__CI_star - var_chaste_interface__ICaL__C_star - var_chaste_interface__ICaL__O - var_chaste_interface__ICaL__OI - var_chaste_interface__ICaL__O_star; // dimensionless
        const double var_ICaL__delta = 3.0 / (1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4)); // per_ms
        const double var_ICaL__theta = 1.0; // per_ms
        const double var_ICaL__theta_I = 9.9999999999999995e-7; // per_ms
        const double var_ICaL__ACT_infinity = 1 / (1.0 + exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__ACT_tau = 0.58999999999999997 + 0.80000000000000004 * exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm) / (1.0 + exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm)); // ms
        const double var_ICaL__IV_beta_star = 1 / ((1.0 + exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm)) * var_ICaL__IV_beta_infinity_star); // dimensionless
        const double var_ICaL__IV_infinity = 0.20000000000000001 + 0.80000000000000004 / (1.0 + exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__IV_infinity_star = 9.9990000999900015e-5 + 0.99990000999900008 / (1.0 + exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__IV_tau = 1 / (0.040277106492669565 / (1.0 + exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm)) + 0.032730010146303147 / (1.0 + exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm))); // ms
        const double var_ICaL__IV_tau_star = 1 / (0.040277106492669565 / (1.0 + exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm)) + var_ICaL__IV_beta_star); // ms
        const double var_ICaL__alpha = var_ICaL__ACT_infinity / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__beta = (1.0 - var_ICaL__ACT_infinity) / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__x = var_ICaL__IV_infinity / var_ICaL__IV_tau; // per_ms
        const double var_ICaL__x_star = var_ICaL__IV_infinity_star / var_ICaL__IV_tau_star; // per_ms
        const double var_ICaL__y = (1.0 - var_ICaL__IV_infinity) / var_ICaL__IV_tau; // per_ms
        const double var_ICaL__y_star = (1.0 - var_ICaL__IV_infinity_star) / var_ICaL__IV_tau_star; // per_ms
        const double var_ICaL__delta_I = var_ICaL__delta * var_ICaL__theta_I * var_ICaL__x * var_ICaL__y_star / (var_ICaL__theta * var_ICaL__x_star * var_ICaL__y); // per_ms
        const double d_dt_chaste_interface_var_ICaL__OI = (-var_ICaL__beta - var_ICaL__delta_I - var_ICaL__x) * var_chaste_interface__ICaL__OI + var_chaste_interface__ICaL__CI * var_ICaL__alpha + var_chaste_interface__ICaL__O * var_ICaL__y + var_ICaL__OI_star * var_ICaL__theta_I; // 1 / ms

        return d_dt_chaste_interface_var_ICaL__OI;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
            // Units: mM; Initial value: 0.000119239795531548
            

            const double var_x334 = exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm);
            const double var_x335 = 1.0 + var_x334;
            const double var_x336 = 1 / var_x335;
            const double var_x337 = 0.80000000000000004 * var_x336;
            const double var_x338 = exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm);
            const double var_x339 = 1.0 + var_x338;
            const double var_x341 = exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm);
            const double var_x342 = 1.0 + var_x341;
            const double var_x345 = 0.040277106492669565 / var_x342;
            const double var_x346 = 1 / var_x339;
            const double var_x347 = var_x345 + 0.032730010146303147 * var_x346;
            const double var_x351 = exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm);
            const double var_x352 = 1.0 + var_x351;
            const double var_x353 = exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm);
            const double var_x354 = 1.0 + var_x353;
            const double var_x355 = exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm);
            const double var_x356 = var_x355 / var_x354;
            const double var_x357 = 1 / (0.58999999999999997 + 0.80000000000000004 * var_x356);
            const double var_x359 = 1 / var_x352;
            const double var_x363 = 0.20000000000000001 + var_x337;
            const double var_x365 = var_x359;
            const double var_x366 = 1.0 - var_x365;
            const double var_x370 = 1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4);
            const double var_x371 = 1 / var_x370;
            const double var_x373 = -var_x337;
            const double var_x374 = 0.80000000000000004 + var_x373;
            const double var_x377 = var_x357 * var_x366;
            const double var_x378 = var_x347 * var_x363;
            const double var_x383 = -var_x377;
            const double var_x385 = 0.99990000999900008 * var_x336;
            const double var_x392 = 9.9990000999900015e-5 + var_x385;
            const double var_x394 = -var_x385;
            const double var_x395 = 0.99990000999900008 + var_x394;
            const double var_x405 = 1 / var_x374;
            const double var_x406 = 1 / var_x392;
            const double var_x407 = var_x371 * var_x395 * var_x405 * var_x406;
            const double var_x417 = 3.0000000000000001e-6 * var_x363 * var_x407;
            const double var_x418 = -var_x378 - var_x417;
            
            partialF = -9.9999999999999995e-7 + var_x383 + var_x418;
        }
        else
        {
            const double y_save = rY[23];
            rY[23] += delta;
            const double temp = EvaluateYDerivative23(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[23])/delta;
            rY[23] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__ICaL__C = rY[18];
        // Units: dimensionless; Initial value: 0.99996982093287
        double var_chaste_interface__ICaL__O = rY[19];
        // Units: dimensionless; Initial value: 2.26882961412491e-05
        double var_chaste_interface__ICaL__C_star = rY[20];
        // Units: dimensionless; Initial value: 7.49117189549873e-06
        double var_chaste_interface__ICaL__O_star = rY[21];
        // Units: dimensionless; Initial value: 1.23556404128518e-10
        double var_chaste_interface__ICaL__CI = rY[22];
        // Units: dimensionless; Initial value: 5.89853003114132e-11
        double var_chaste_interface__ICaL__OI = rY[23];
        // Units: dimensionless; Initial value: 8.01952813127322e-17
        double var_chaste_interface__ICaL__CI_star = rY[24];
        // Units: dimensionless; Initial value: 1.9237001017021e-09
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
        // Units: mM; Initial value: 0.000119239795531548
        

        // Mathematics
        const double var_ICaL__IV_beta_infinity_star = 25.0 - 17.5 / (1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4)); // dimensionless
        const double var_ICaL__OI_star = 1.0 - var_chaste_interface__ICaL__C - var_chaste_interface__ICaL__CI - var_chaste_interface__ICaL__CI_star - var_chaste_interface__ICaL__C_star - var_chaste_interface__ICaL__O - var_chaste_interface__ICaL__OI - var_chaste_interface__ICaL__O_star; // dimensionless
        const double var_ICaL__delta = 3.0 / (1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4)); // per_ms
        const double var_ICaL__theta = 1.0; // per_ms
        const double var_ICaL__theta_I = 9.9999999999999995e-7; // per_ms
        const double var_ICaL__ACT_infinity = 1 / (1.0 + exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__ACT_tau = 0.58999999999999997 + 0.80000000000000004 * exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm) / (1.0 + exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm)); // ms
        const double var_ICaL__IV_beta_star = 1 / ((1.0 + exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm)) * var_ICaL__IV_beta_infinity_star); // dimensionless
        const double var_ICaL__IV_infinity = 0.20000000000000001 + 0.80000000000000004 / (1.0 + exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__IV_infinity_star = 9.9990000999900015e-5 + 0.99990000999900008 / (1.0 + exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_ICaL__IV_tau = 1 / (0.040277106492669565 / (1.0 + exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm)) + 0.032730010146303147 / (1.0 + exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm))); // ms
        const double var_ICaL__IV_tau_star = 1 / (0.040277106492669565 / (1.0 + exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm)) + var_ICaL__IV_beta_star); // ms
        const double var_ICaL__alpha = var_ICaL__ACT_infinity / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__beta = (1.0 - var_ICaL__ACT_infinity) / var_ICaL__ACT_tau; // per_ms
        const double var_ICaL__x = var_ICaL__IV_infinity / var_ICaL__IV_tau; // per_ms
        const double var_ICaL__x_star = var_ICaL__IV_infinity_star / var_ICaL__IV_tau_star; // per_ms
        const double var_ICaL__y = (1.0 - var_ICaL__IV_infinity) / var_ICaL__IV_tau; // per_ms
        const double var_ICaL__y_star = (1.0 - var_ICaL__IV_infinity_star) / var_ICaL__IV_tau_star; // per_ms
        const double var_ICaL__delta_I = var_ICaL__delta * var_ICaL__theta_I * var_ICaL__x * var_ICaL__y_star / (var_ICaL__theta * var_ICaL__x_star * var_ICaL__y); // per_ms
        const double d_dt_chaste_interface_var_ICaL__CI_star = (-var_ICaL__alpha - var_ICaL__theta_I - var_ICaL__x_star) * var_chaste_interface__ICaL__CI_star + var_chaste_interface__ICaL__CI * var_ICaL__delta_I + var_chaste_interface__ICaL__C_star * var_ICaL__y_star + var_ICaL__OI_star * var_ICaL__beta; // 1 / ms

        return d_dt_chaste_interface_var_ICaL__CI_star;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
            // Units: mM; Initial value: 0.000119239795531548
            

            const double var_x334 = exp(5.833333333333333 + 0.33333333333333331 * var_chaste_interface__membrane__Vm);
            const double var_x335 = 1.0 + var_x334;
            const double var_x336 = 1 / var_x335;
            const double var_x338 = exp(-0.019709447580272044 - 0.092532617747756077 * var_chaste_interface__membrane__Vm);
            const double var_x339 = 1.0 + var_x338;
            const double var_x341 = exp(4.7444197507005512 + 0.096627693496956227 * var_chaste_interface__membrane__Vm);
            const double var_x342 = 1.0 + var_x341;
            const double var_x345 = 0.040277106492669565 / var_x342;
            const double var_x346 = 1 / var_x339;
            const double var_x351 = exp(1.4349206349206352 - 0.10582010582010583 * var_chaste_interface__membrane__Vm);
            const double var_x352 = 1.0 + var_x351;
            const double var_x353 = exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__membrane__Vm);
            const double var_x354 = 1.0 + var_x353;
            const double var_x355 = exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__membrane__Vm);
            const double var_x356 = var_x355 / var_x354;
            const double var_x357 = 1 / (0.58999999999999997 + 0.80000000000000004 * var_x356);
            const double var_x359 = 1 / var_x352;
            const double var_x365 = var_x359;
            const double var_x366 = 1.0 - var_x365;
            const double var_x368 = var_x357 * var_x365;
            const double var_x369 = -var_x368;
            const double var_x370 = 1.0 + 8.1000000000000005e-11 / pow(var_chaste_interface__Ca__Ca_ss_CaL, 4);
            const double var_x371 = 1 / var_x370;
            const double var_x377 = var_x357 * var_x366;
            const double var_x383 = -var_x377;
            const double var_x385 = 0.99990000999900008 * var_x336;
            const double var_x387 = 1 / (25.0 - 17.5 * var_x371);
            const double var_x389 = var_x345 + var_x346 * var_x387;
            const double var_x392 = 9.9990000999900015e-5 + var_x385;
            const double var_x398 = var_x389 * var_x392;
            const double var_x403 = -var_x398;
            const double var_x404 = var_x383 + var_x403;
            
            partialF = -9.9999999999999995e-7 + var_x369 + var_x404;
        }
        else
        {
            const double y_save = rY[24];
            rY[24] += delta;
            const double temp = EvaluateYDerivative24(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[24])/delta;
            rY[24] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__INa_m_gate__m = rY[25];
        // Units: dimensionless; Initial value: 0.00101841101248412
        

        // Mathematics
        const double var_INa_m_gate__am = ((fabs(47.130000000000003 + var_chaste_interface__membrane__Vm) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__Vm) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__Vm) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__Vm)))); // per_ms
        const double var_INa_m_gate__bm = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__membrane__Vm); // per_ms
        const double d_dt_chaste_interface_var_INa_m_gate__m = (1.0 - var_chaste_interface__INa_m_gate__m) * var_INa_m_gate__am - var_INa_m_gate__bm * var_chaste_interface__INa_m_gate__m; // 1 / ms

        return d_dt_chaste_interface_var_INa_m_gate__m;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x423 = 1 / (1.0 - exp(1.0000000000287557e-7));
            const double var_x424 = 1 / (1.0 - exp(-1.0000000000287557e-7));
            const double var_x425 = 47.130000000000003 + var_chaste_interface__membrane__Vm;
            const double var_x426 = fabs(var_x425) < 1.0000000000287557e-6;
            const double var_x427 = -0.10000000000000001 * var_chaste_interface__membrane__Vm;
            const double var_x428 = exp(-4.7130000000000001 + var_x427);
            const double var_x429 = 1.0 - var_x428;
            const double var_x430 = 0.32000000000000001 / var_x429;
            const double var_x432 = exp(-0.090909090909090912 * var_chaste_interface__membrane__Vm);
            const double var_x434 = 3.200000000092018e-7 * var_x424;
            const double var_x435 = -((var_x426) ? (var_x434 - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__Vm) * (-var_x434 - 3.200000000092018e-7 * var_x423)) : (var_x425 * var_x430)) - 0.080000000000000002 * var_x432;
            
            partialF = var_x435;
        }
        else
        {
            const double y_save = rY[25];
            rY[25] += delta;
            const double temp = EvaluateYDerivative25(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[25])/delta;
            rY[25] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__INa_h_gate__h = rY[26];
        // Units: dimensionless; Initial value: 0.991354143386887
        

        // Mathematics
        const double var_INa_h_gate__ah = ((var_chaste_interface__membrane__Vm >= -40.0) ? (0) : (0.13500000000000001 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__membrane__Vm))); // per_ms
        const double var_INa_h_gate__bh = ((var_chaste_interface__membrane__Vm >= -40.0) ? (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__membrane__Vm))) : (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__Vm) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__Vm))); // per_ms
        const double d_dt_chaste_interface_var_INa_h_gate__h = (1.0 - var_chaste_interface__INa_h_gate__h) * var_INa_h_gate__ah - var_INa_h_gate__bh * var_chaste_interface__INa_h_gate__h; // 1 / ms

        return d_dt_chaste_interface_var_INa_h_gate__h;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x436 = var_chaste_interface__membrane__Vm >= -40.0;
            const double var_x437 = exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__membrane__Vm);
            const double var_x438 = exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__membrane__Vm);
            const double var_x439 = 1.0 + var_x438;
            const double var_x440 = exp(0.079000000000000001 * var_chaste_interface__membrane__Vm);
            const double var_x441 = exp(0.34999999999999998 * var_chaste_interface__membrane__Vm);
            
            partialF = -((var_x436) ? (0) : (0.13500000000000001 * var_x437)) - ((var_x436) ? (7.6923076923076916 / var_x439) : (310000.0 * var_x441 + 3.5600000000000001 * var_x440));
        }
        else
        {
            const double y_save = rY[26];
            rY[26] += delta;
            const double temp = EvaluateYDerivative26(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[26])/delta;
            rY[26] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__INa_j_gate__j = rY[27];
        // Units: dimensionless; Initial value: 0.99709036251243
        

        // Mathematics
        const double var_INa_j_gate__aj = ((var_chaste_interface__membrane__Vm >= -40.0) ? (0) : ((37.780000000000001 + var_chaste_interface__membrane__Vm) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__Vm) - 6.9480000000000006e-5 * exp(-0.043909999999999998 * var_chaste_interface__membrane__Vm)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__Vm)))); // per_ms
        const double var_INa_j_gate__bj = ((var_chaste_interface__membrane__Vm >= -40.0) ? (0.29999999999999999 * exp(-2.5349999999999999e-7 * var_chaste_interface__membrane__Vm) / (1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__membrane__Vm))) : (0.1212 * exp(-0.01052 * var_chaste_interface__membrane__Vm) / (1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__membrane__Vm)))); // per_ms
        const double d_dt_chaste_interface_var_INa_j_gate__j = (1.0 - var_chaste_interface__INa_j_gate__j) * var_INa_j_gate__aj - var_INa_j_gate__bj * var_chaste_interface__INa_j_gate__j; // 1 / ms

        return d_dt_chaste_interface_var_INa_j_gate__j;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x427 = -0.10000000000000001 * var_chaste_interface__membrane__Vm;
            const double var_x436 = var_chaste_interface__membrane__Vm >= -40.0;
            const double var_x442 = exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__Vm);
            const double var_x443 = 1.0 + var_x442;
            const double var_x444 = 1 / var_x443;
            const double var_x445 = exp(0.24440000000000001 * var_chaste_interface__membrane__Vm);
            const double var_x446 = exp(-0.043909999999999998 * var_chaste_interface__membrane__Vm);
            const double var_x447 = -127140.0 * var_x445 - 6.9480000000000006e-5 * var_x446;
            const double var_x448 = var_x444 * var_x447;
            const double var_x449 = 37.780000000000001 + var_chaste_interface__membrane__Vm;
            const double var_x450 = exp(-3.2000000000000002 + var_x427);
            const double var_x451 = 1.0 + var_x450;
            const double var_x452 = exp(-2.5349999999999999e-7 * var_chaste_interface__membrane__Vm);
            const double var_x453 = var_x452 / var_x451;
            const double var_x454 = exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__membrane__Vm);
            const double var_x455 = 1.0 + var_x454;
            const double var_x456 = exp(-0.01052 * var_chaste_interface__membrane__Vm);
            const double var_x457 = var_x456 / var_x455;
            
            partialF = -((var_x436) ? (0) : (var_x448 * var_x449)) - ((var_x436) ? (0.29999999999999999 * var_x453) : (0.1212 * var_x457));
        }
        else
        {
            const double y_save = rY[27];
            rY[27] += delta;
            const double temp = EvaluateYDerivative27(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[27])/delta;
            rY[27] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__INaL_mL_gate__mL = rY[28];
        // Units: dimensionless; Initial value: 0.00101841101248412
        

        // Mathematics
        const double var_INaL_mL_gate__amL = ((fabs(47.130000000000003 + var_chaste_interface__membrane__Vm) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__Vm) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__Vm) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__Vm)))); // per_ms
        const double var_INaL_mL_gate__bmL = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__membrane__Vm); // per_ms
        const double d_dt_chaste_interface_var_INaL_mL_gate__mL = (1.0 - var_chaste_interface__INaL_mL_gate__mL) * var_INaL_mL_gate__amL - var_INaL_mL_gate__bmL * var_chaste_interface__INaL_mL_gate__mL; // 1 / ms

        return d_dt_chaste_interface_var_INaL_mL_gate__mL;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x423 = 1 / (1.0 - exp(1.0000000000287557e-7));
            const double var_x424 = 1 / (1.0 - exp(-1.0000000000287557e-7));
            const double var_x425 = 47.130000000000003 + var_chaste_interface__membrane__Vm;
            const double var_x426 = fabs(var_x425) < 1.0000000000287557e-6;
            const double var_x427 = -0.10000000000000001 * var_chaste_interface__membrane__Vm;
            const double var_x428 = exp(-4.7130000000000001 + var_x427);
            const double var_x429 = 1.0 - var_x428;
            const double var_x430 = 0.32000000000000001 / var_x429;
            const double var_x432 = exp(-0.090909090909090912 * var_chaste_interface__membrane__Vm);
            const double var_x434 = 3.200000000092018e-7 * var_x424;
            const double var_x435 = -((var_x426) ? (var_x434 - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__Vm) * (-var_x434 - 3.200000000092018e-7 * var_x423)) : (var_x425 * var_x430)) - 0.080000000000000002 * var_x432;
            
            partialF = var_x435;
        }
        else
        {
            const double y_save = rY[28];
            rY[28] += delta;
            const double temp = EvaluateYDerivative28(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[28])/delta;
            rY[28] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__INaL_hL_gate__hL = rY[29];
        // Units: dimensionless; Initial value: 0.319611809402137
        

        // Mathematics
        const double var_INaL_hL_gate__tau_hL = 600.0; // ms
        const double var_INaL_hL_gate__hL_infinity = 1 / (1.0 + exp(14.918032786885247 + 0.16393442622950821 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double d_dt_chaste_interface_var_INaL_hL_gate__hL = (-var_chaste_interface__INaL_hL_gate__hL + var_INaL_hL_gate__hL_infinity) / var_INaL_hL_gate__tau_hL; // 1 / ms

        return d_dt_chaste_interface_var_INaL_hL_gate__hL;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            
            partialF = -0.0016666666666666668;
        }
        else
        {
            const double y_save = rY[29];
            rY[29] += delta;
            const double temp = EvaluateYDerivative29(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[29])/delta;
            rY[29] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__IKr_xr_gate__xr = rY[30];
        // Units: dimensionless; Initial value: 4.06959064407486e-06
        

        // Mathematics
        const double var_IKr_xr_gate__tau_xr = 1 / (((fabs(-1.7383999999999999 + var_chaste_interface__membrane__Vm) < 7.352941176468758e-7) ? (4.4117647058812543e-10 / (1.0 - exp(-9.9999999999975114e-8)) - 680000.00000016927 * (-1.7384007352941175 + var_chaste_interface__membrane__Vm) * (-4.4117647058812543e-10 / (1.0 - exp(9.9999999999975114e-8)) - 4.4117647058812543e-10 / (1.0 - exp(-9.9999999999975114e-8)))) : (0.00059999999999999995 * (-1.7383999999999999 + var_chaste_interface__membrane__Vm) / (1.0 - exp(0.2364224 - 0.13600000000000001 * var_chaste_interface__membrane__Vm)))) + ((fabs(38.360799999999998 + var_chaste_interface__membrane__Vm) < 6.5703022339436146e-7) ? (-1.9710906701830842e-10 / (-1.0 + exp(-1.0000000000062181e-7)) + 760999.99999526795 * (38.360800657030218 + var_chaste_interface__membrane__Vm) * (1.9710906701830842e-10 / (-1.0 + exp(1.0000000000062181e-7)) + 1.9710906701830842e-10 / (-1.0 + exp(-1.0000000000062181e-7)))) : (0.00029999999999999997 * (38.360799999999998 + var_chaste_interface__membrane__Vm) / (-1.0 + exp(5.8385137599999997 + 0.1522 * var_chaste_interface__membrane__Vm))))); // ms
        const double var_IKr_xr_gate__xr_infinity = 1 / (1.0 + exp(-2.3729411764705883 - 0.23529411764705882 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double d_dt_chaste_interface_var_IKr_xr_gate__xr = (-var_chaste_interface__IKr_xr_gate__xr + var_IKr_xr_gate__xr_infinity) / var_IKr_xr_gate__tau_xr; // 1 / ms

        return d_dt_chaste_interface_var_IKr_xr_gate__xr;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x461 = 1 / (-1.0 + exp(1.0000000000062181e-7));
            const double var_x462 = 1 / (-1.0 + exp(-1.0000000000062181e-7));
            const double var_x463 = exp(0.2364224 - 0.13600000000000001 * var_chaste_interface__membrane__Vm);
            const double var_x464 = 1.0 - var_x463;
            const double var_x465 = 0.00059999999999999995 / var_x464;
            const double var_x466 = -1.7383999999999999 + var_chaste_interface__membrane__Vm;
            const double var_x468 = 38.360799999999998 + var_chaste_interface__membrane__Vm;
            const double var_x469 = fabs(var_x468) < 6.5703022339436146e-7;
            const double var_x470 = 1 / (1.0 - exp(9.9999999999975114e-8));
            const double var_x471 = 1 / (1.0 - exp(-9.9999999999975114e-8));
            const double var_x472 = exp(5.8385137599999997 + 0.1522 * var_chaste_interface__membrane__Vm);
            const double var_x473 = -1.0 + var_x472;
            const double var_x474 = 0.00029999999999999997 / var_x473;
            const double var_x476 = fabs(var_x466) < 7.352941176468758e-7;
            const double var_x477 = 1.9710906701830842e-10 * var_x462;
            const double var_x478 = var_x465 * var_x466;
            const double var_x479 = 4.4117647058812543e-10 * var_x471;
            const double var_x480 = var_x468 * var_x474;
            const double var_x481 = ((var_x469) ? (var_x478 - var_x477 + 760999.99999526795 * (38.360800657030218 + var_chaste_interface__membrane__Vm) * (var_x477 + 1.9710906701830842e-10 * var_x461)) : ((var_x476) ? (var_x479 + var_x480 - 680000.00000016927 * (-1.7384007352941175 + var_chaste_interface__membrane__Vm) * (-var_x479 - 4.4117647058812543e-10 * var_x470)) : (var_x478 + var_x480)));
            
            partialF = -var_x481;
        }
        else
        {
            const double y_save = rY[30];
            rY[30] += delta;
            const double temp = EvaluateYDerivative30(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[30])/delta;
            rY[30] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ito1_a_gate__a = rY[31];
        // Units: dimensionless; Initial value: 1.76776038804228e-05
        

        // Mathematics
        const double var_Ito1_a_gate__a_infinity = 1 / (1.0 + exp(-1.3230057479321462 - 0.14019346698443852 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_Ito1_a_gate__alpha_a = 0.82719827942757873 / (1.0 + exp(0.62658348478969694 - 0.034035137876343539 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito1_a_gate__beta_a = 3.5 / (1.0 + exp(3.403513787634354 + 0.034035137876343539 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito1_a_gate__tau_a = 1 / (var_Ito1_a_gate__alpha_a + var_Ito1_a_gate__beta_a); // ms
        const double d_dt_chaste_interface_var_Ito1_a_gate__a = (-var_chaste_interface__Ito1_a_gate__a + var_Ito1_a_gate__a_infinity) / var_Ito1_a_gate__tau_a; // 1 / ms

        return d_dt_chaste_interface_var_Ito1_a_gate__a;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x484 = 0.034035137876343539 * var_chaste_interface__membrane__Vm;
            const double var_x485 = exp(0.62658348478969694 - var_x484);
            const double var_x486 = 1.0 + var_x485;
            const double var_x487 = exp(3.403513787634354 + var_x484);
            const double var_x488 = 1.0 + var_x487;
            const double var_x489 = 3.5 / var_x488;
            const double var_x490 = 0.82719827942757873 / var_x486;
            
            partialF = -var_x489 - var_x490;
        }
        else
        {
            const double y_save = rY[31];
            rY[31] += delta;
            const double temp = EvaluateYDerivative31(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[31])/delta;
            rY[31] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ito1_i1f_gate__i1f = rY[32];
        // Units: dimensionless; Initial value: 0.997976503910799
        

        // Mathematics
        const double var_Ito1_i1f_gate__alpha_i1f = 0.025000000000000001 / (1.0 + exp(11.6 + 0.20000000000000001 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito1_i1f_gate__beta_i1f = 0.10208977775055385 / (1.0 + exp(-2.1111111111111112 - 0.1111111111111111 * var_chaste_interface__membrane__Vm)); // per_ms
        const double d_dt_chaste_interface_var_Ito1_i1f_gate__i1f = (1.0 - var_chaste_interface__Ito1_i1f_gate__i1f) * var_Ito1_i1f_gate__alpha_i1f - var_Ito1_i1f_gate__beta_i1f * var_chaste_interface__Ito1_i1f_gate__i1f; // 1 / ms

        return d_dt_chaste_interface_var_Ito1_i1f_gate__i1f;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x491 = 0.20000000000000001 * var_chaste_interface__membrane__Vm;
            const double var_x492 = exp(11.6 + var_x491);
            const double var_x493 = 1.0 + var_x492;
            const double var_x496 = exp(-2.1111111111111112 - 0.1111111111111111 * var_chaste_interface__membrane__Vm);
            const double var_x497 = 1.0 + var_x496;
            const double var_x500 = 1 / var_x493;
            const double var_x501 = 0.025000000000000001 * var_x500;
            const double var_x502 = 1 / var_x497;
            const double var_x503 = -0.10208977775055385 * var_x502;
            
            partialF = var_x503 - var_x501;
        }
        else
        {
            const double y_save = rY[32];
            rY[32] += delta;
            const double temp = EvaluateYDerivative32(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[32])/delta;
            rY[32] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ito1_i1s_gate__i1s = rY[33];
        // Units: dimensionless; Initial value: 0.947581184798815
        

        // Mathematics
        const double var_Ito1_i1s_gate__alpha_i1s = 0.0040000000000000001 / (1.0 + exp(12.0 + 0.20000000000000001 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito1_i1s_gate__beta_i1s = 0.10208977775055385 / (1.0 + exp(-2.1111111111111112 - 0.1111111111111111 * var_chaste_interface__membrane__Vm)); // per_ms
        const double d_dt_chaste_interface_var_Ito1_i1s_gate__i1s = (1.0 - var_chaste_interface__Ito1_i1s_gate__i1s) * var_Ito1_i1s_gate__alpha_i1s - var_Ito1_i1s_gate__beta_i1s * var_chaste_interface__Ito1_i1s_gate__i1s; // 1 / ms

        return d_dt_chaste_interface_var_Ito1_i1s_gate__i1s;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            

            const double var_x491 = 0.20000000000000001 * var_chaste_interface__membrane__Vm;
            const double var_x496 = exp(-2.1111111111111112 - 0.1111111111111111 * var_chaste_interface__membrane__Vm);
            const double var_x497 = 1.0 + var_x496;
            const double var_x502 = 1 / var_x497;
            const double var_x503 = -0.10208977775055385 * var_x502;
            const double var_x504 = exp(12.0 + var_x491);
            const double var_x505 = 1.0 + var_x504;
            
            partialF = var_x503 - 0.0040000000000000001 / var_x505;
        }
        else
        {
            const double y_save = rY[33];
            rY[33] += delta;
            const double temp = EvaluateYDerivative33(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[33])/delta;
            rY[33] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ito2_i2f_gate__i2f = rY[34];
        // Units: dimensionless; Initial value: 0.996044894628276
        

        // Mathematics
        const double var_Ito2_i2f_gate__tau_i2f = 8.0; // ms
        const double var_Ito2_i2f_gate__alpha_i2f = 0.025000000000000001 / (1.0 + exp(11.6 + 0.20000000000000001 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito2_i2f_gate__beta_i2f = 0.20000000000000001 / (1.0 + exp(-2.1111111111111112 - 0.1111111111111111 * var_chaste_interface__membrane__Vm)); // per_ms
        const double var_Ito2_i2f_gate__i2f_infinity = var_Ito2_i2f_gate__alpha_i2f / (var_Ito2_i2f_gate__alpha_i2f + var_Ito2_i2f_gate__beta_i2f); // dimensionless
        const double d_dt_chaste_interface_var_Ito2_i2f_gate__i2f = (-var_chaste_interface__Ito2_i2f_gate__i2f + var_Ito2_i2f_gate__i2f_infinity) / var_Ito2_i2f_gate__tau_i2f; // 1 / ms

        return d_dt_chaste_interface_var_Ito2_i2f_gate__i2f;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            
            partialF = -0.125;
        }
        else
        {
            const double y_save = rY[34];
            rY[34] += delta;
            const double temp = EvaluateYDerivative34(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[34])/delta;
            rY[34] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative35(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__ICaL__O = rY[19];
        // Units: dimensionless; Initial value: 2.26882961412491e-05
        double var_chaste_interface__ICaL__O_star = rY[21];
        // Units: dimensionless; Initial value: 1.23556404128518e-10
        double var_chaste_interface__Irel__Irel = rY[35];
        // Units: mM_per_ms; Initial value: 0.000714227102027745
        double var_chaste_interface__Ca__Ca_JSR = rY[36];
        // Units: mM; Initial value: 0.993914988616979
        double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
        // Units: mM; Initial value: 0.000119239795531548
        double var_chaste_interface__CaMK_active__CaMK_trap = rY[45];
        // Units: dimensionless; Initial value: 0.0114911034744777
        

        // Mathematics
        const double var_CaMK_active__CaMK_0 = 0.050000000000000003; // dimensionless
        const double var_CaMK_active__Km = 0.0015; // mM
        const double var_CaMK_active__CaMK_active = (1.0 - var_chaste_interface__CaMK_active__CaMK_trap) * var_CaMK_active__CaMK_0 / (1.0 + var_CaMK_active__Km / var_chaste_interface__Ca__Ca_ss_sr) + var_chaste_interface__CaMK_active__CaMK_trap; // dimensionless
        const double var_Irel__K_beta = 0.28000000000000003; // mM
        const double var_Irel__Krel_infinity = 1.0; // mM
        const double var_Irel__Krel_tau = 0.0123; // mM
        const double var_Irel__beta_0 = 4.75; // ms
        const double var_Irel__delta_beta_0 = 1.0; // dimensionless
        const double var_Irel__h_beta = 10.0; // dimensionless
        const double var_Irel__delta_beta_CaMK = var_Irel__delta_beta_0 / (1.0 + pow((var_Irel__K_beta / var_CaMK_active__CaMK_active), var_Irel__h_beta)); // dimensionless
        const double var_Irel__beta_tau = (1.0 + var_Irel__delta_beta_CaMK) * var_Irel__beta_0; // ms
        const double var_Irel__h_rel = 8.0; // dimensionless
        const double var_Irel__alpha_rel = var_Irel__beta_tau * mParameters[1]; // mM_per_uA_per_uF_per_ms
        const double var_Irel__tau_rel = var_Irel__beta_tau / (1.0 + var_Irel__Krel_tau / var_chaste_interface__Ca__Ca_JSR); // ms
        const double var_ICaL__ICaL_max = ((fabs(var_chaste_interface__membrane__Vm) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__Vm) * (0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (14448.004881001343 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)) * mParameters[6] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_ICaL__ICaL = (var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__O_star) * var_ICaL__ICaL_max; // uA_per_uF
        const double var_Irel__rel_infinity = var_ICaL__ICaL * var_Irel__alpha_rel / (1.0 + pow((var_Irel__Krel_infinity / var_chaste_interface__Ca__Ca_JSR), var_Irel__h_rel)); // mM_per_ms
        const double d_dt_chaste_interface_var_Irel__Irel = (-var_chaste_interface__Irel__Irel - var_Irel__rel_infinity) / var_Irel__tau_rel; // mM_per_ms / ms

        return d_dt_chaste_interface_var_Irel__Irel;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative35(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca__Ca_JSR = rY[36];
            // Units: mM; Initial value: 0.993914988616979
            double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
            // Units: mM; Initial value: 0.00011296707102434
            double var_chaste_interface__CaMK_active__CaMK_trap = rY[45];
            // Units: dimensionless; Initial value: 0.0114911034744777
            

            const double var_x243 = 1.0 - var_chaste_interface__CaMK_active__CaMK_trap;
            const double var_x244 = 1.0 + 0.0015 / var_chaste_interface__Ca__Ca_ss_sr;
            const double var_x245 = 1 / var_x244;
            const double var_x246 = 0.050000000000000003 * var_x245;
            const double var_x247 = var_x243 * var_x246;
            const double var_x250 = var_x247 + var_chaste_interface__CaMK_active__CaMK_trap;
            const double var_x507 = 1 / var_chaste_interface__Ca__Ca_JSR;
            const double var_x508 = 1.0 + 0.0123 * var_x507;
            const double var_x515 = 1 / var_x250;
            const double var_x516 = pow(var_x515, 10.0);
            const double var_x517 = 1.0 + 2.9619676669542428e-6 * var_x516;
            const double var_x518 = 1 / var_x517;
            const double var_x519 = 4.75 + 4.75 * var_x518;
            const double var_x520 = 1 / var_x519;
            const double var_x521 = var_x508 * var_x520;
            
            partialF = -var_x521;
        }
        else
        {
            const double y_save = rY[35];
            rY[35] += delta;
            const double temp = EvaluateYDerivative35(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[35])/delta;
            rY[35] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative36(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Irel__Irel = rY[35];
        // Units: mM_per_ms; Initial value: 0.000714227102027745
        double var_chaste_interface__Ca__Ca_JSR = rY[36];
        // Units: mM; Initial value: 0.993914988616979
        double var_chaste_interface__Ca__Ca_NSR = rY[37];
        // Units: mM; Initial value: 1.01475649943057
        

        // Mathematics
        const double var_Ca__csqnbar = 10.0; // mM
        const double var_Ca__kmcsqn = 0.80000000000000004; // mM
        const double var_Ca__bcsqn = 1 / (1.0 + var_Ca__csqnbar * var_Ca__kmcsqn / pow((var_chaste_interface__Ca__Ca_JSR + var_Ca__kmcsqn), 2)); // dimensionless
        const double var_Itr__tautr = 25.0; // ms
        const double var_Itr__Itr = (-var_chaste_interface__Ca__Ca_JSR + var_chaste_interface__Ca__Ca_NSR) / var_Itr__tautr; // mM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_JSR = (-var_chaste_interface__Irel__Irel + var_Itr__Itr) * var_Ca__bcsqn; // mM / ms

        return d_dt_chaste_interface_var_Ca__Ca_JSR;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative36(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Irel__Irel = rY[35];
            // Units: mM_per_ms; Initial value: 0.000714227102027745
            double var_chaste_interface__Ca__Ca_JSR = rY[36];
            // Units: mM; Initial value: 0.993914988616979
            double var_chaste_interface__Ca__Ca_NSR = rY[37];
            // Units: mM; Initial value: 1.01475649943057
            

            const double var_x522 = -var_chaste_interface__Irel__Irel;
            const double var_x531 = 0.80000000000000004 + var_chaste_interface__Ca__Ca_JSR;
            const double var_x532 = pow(var_x531, (-2));
            const double var_x533 = 1 / (1.0 + 8.0 * var_x532);
            const double var_x534 = 0.040000000000000001 * var_x533;
            
            partialF = -var_x534 + 0.25 * (var_x522 + 0.040000000000000001 * var_chaste_interface__Ca__Ca_NSR - 0.040000000000000001 * var_chaste_interface__Ca__Ca_JSR) / (pow(var_x531, 3) * pow((0.125 + var_x532), 2));
        }
        else
        {
            const double y_save = rY[36];
            rY[36] += delta;
            const double temp = EvaluateYDerivative36(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[36])/delta;
            rY[36] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative37(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 8.38749860095482e-05
        double var_chaste_interface__Ca__Ca_JSR = rY[36];
        // Units: mM; Initial value: 0.993914988616979
        double var_chaste_interface__Ca__Ca_NSR = rY[37];
        // Units: mM; Initial value: 1.01475649943057
        double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__CaMK_active__CaMK_trap = rY[45];
        // Units: dimensionless; Initial value: 0.0114911034744777
        

        // Mathematics
        const double var_CaMK_active__CaMK_0 = 0.050000000000000003; // dimensionless
        const double var_CaMK_active__Km = 0.0015; // mM
        const double var_CaMK_active__CaMK_active = (1.0 - var_chaste_interface__CaMK_active__CaMK_trap) * var_CaMK_active__CaMK_0 / (1.0 + var_CaMK_active__Km / var_chaste_interface__Ca__Ca_ss_sr) + var_chaste_interface__CaMK_active__CaMK_trap; // dimensionless
        const double var_Ileak__nsrbar = 15.0; // mM
        const double var_Ileak__Ileak = var_chaste_interface__Ca__Ca_NSR * mParameters[0] / var_Ileak__nsrbar; // mM_per_ms
        const double var_Itr__tautr = 25.0; // ms
        const double var_Itr__Itr = (-var_chaste_interface__Ca__Ca_JSR + var_chaste_interface__Ca__Ca_NSR) / var_Itr__tautr; // mM_per_ms
        const double var_Iup__delta_iupCaMK_bar = 0.75; // dimensionless
        const double var_Iup__delta_kmPLB_bar = 0.00017000000000000001; // mM
        const double var_Iup__kmCaMK = 0.14999999999999999; // mM
        const double var_Iup__delta_iupCaMK = var_CaMK_active__CaMK_active * var_Iup__delta_iupCaMK_bar / (var_CaMK_active__CaMK_active + var_Iup__kmCaMK); // dimensionless
        const double var_Iup__delta_kmPLB = var_CaMK_active__CaMK_active * var_Iup__delta_kmPLB_bar / (var_CaMK_active__CaMK_active + var_Iup__kmCaMK); // mM
        const double var_Iup__kmup = 0.00092000000000000003; // mM
        const double var_Iup__Iup = (1.0 + var_Iup__delta_iupCaMK) * var_chaste_interface__Ca__Ca_i * mParameters[2] / (-var_Iup__delta_kmPLB + var_chaste_interface__Ca__Ca_i + var_Iup__kmup); // mM_per_ms
        const double var_cell_geometry__a = 0.0011000000000000001; // cm
        const double var_cell_geometry__l = 0.01; // cm
        const double var_cell_geometry__vcell = 1000.0 * M_PI * pow(var_cell_geometry__a, 2) * var_cell_geometry__l; // uL
        const double var_cell_geometry__Vjsr = 0.0047999999999999996 * var_cell_geometry__vcell; // uL
        const double var_cell_geometry__Vnsr = 0.055199999999999999 * var_cell_geometry__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_NSR = -var_Ileak__Ileak - var_Itr__Itr * var_cell_geometry__Vjsr / var_cell_geometry__Vnsr + var_Iup__Iup; // mM / ms

        return d_dt_chaste_interface_var_Ca__Ca_NSR;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative37(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            
            partialF = -0.0034782608695652171 - 0.066666666666666666 * mParameters[0];
        }
        else
        {
            const double y_save = rY[37];
            rY[37] += delta;
            const double temp = EvaluateYDerivative37(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[37])/delta;
            rY[37] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative38(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 8.38749860095482e-05
        double var_chaste_interface__Irel__Irel = rY[35];
        // Units: mM_per_ms; Initial value: 0.000714227102027745
        double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
        // Units: mM; Initial value: 0.000119239795531548
        double var_chaste_interface__Na__Na_ss_sr = rY[41];
        // Units: mM; Initial value: 8.01033434859049
        

        // Mathematics
        const double var_Ca__BSLmax = 1.1240000000000001; // mM
        const double var_Ca__BSRmax = 0.047; // mM
        const double var_Ca__KmBSL = 0.0086999999999999994; // mM
        const double var_Ca__KmBSR = 0.00087000000000000001; // mM
        const double var_Ca__bss_sr = 1 / (1.0 + var_Ca__BSLmax * var_Ca__KmBSL / pow((var_chaste_interface__Ca__Ca_ss_sr + var_Ca__KmBSL), 2) + var_Ca__BSRmax * var_Ca__KmBSR / pow((var_chaste_interface__Ca__Ca_ss_sr + var_Ca__KmBSR), 2)); // dimensionless
        const double var_Ca__tau_diff = 0.20000000000000001; // ms
        const double var_Ca__Idiff = (-var_chaste_interface__Ca__Ca_i + var_chaste_interface__Ca__Ca_ss_sr) / var_Ca__tau_diff; // mM_per_ms
        const double var_Ca__tau_diff_ss = 2.0; // ms
        const double var_Ca__Idiff_ss = (-var_chaste_interface__Ca__Ca_ss_CaL + var_chaste_interface__Ca__Ca_ss_sr) / var_Ca__tau_diff_ss; // mM_per_ms
        const double var_INaCa__KmCa_act = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__denom_ss_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_ss_sr, 2); // dimensionless
        const double var_INaCa__eta = 0.27000000000000002; // dimensionless
        const double var_INaCa__ksat = 0.32000000000000001; // dimensionless
        const double var_cell_geometry__a = 0.0011000000000000001; // cm
        const double var_cell_geometry__l = 0.01; // cm
        const double var_cell_geometry__ageo = 2.0 * M_PI * pow(var_cell_geometry__a, 2) + 2.0 * M_PI * var_cell_geometry__a * var_cell_geometry__l; // cm2
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__ageo; // cm2
        const double var_cell_geometry__vcell = 1000.0 * M_PI * pow(var_cell_geometry__a, 2) * var_cell_geometry__l; // uL
        const double var_cell_geometry__Vjsr = 0.0047999999999999996 * var_cell_geometry__vcell; // uL
        const double var_cell_geometry__Vss_sr = 0.02 * var_cell_geometry__vcell; // uL
        const double var_INaCa__denom_ss_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(var_chaste_interface__Na__Na_ss_sr, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_ss_sr / var_INaCa__KmCai) * mParameters[3]; // mM4
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_cell_geometry__AF = var_cell_geometry__Acap / var_model_parameters__F; // uF_mole_per_C
        const double var_INaCa__denom_ss_4 = pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] + pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(mParameters[5], 3) * (1.0 + pow(var_chaste_interface__Na__Na_ss_sr, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_INaCa__denom_ss_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__num_ss = 0.20000000000000001 * (pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * mParameters[17]; // mM4_uA_per_uF
        const double var_INaCa__INaCa_ss_sr = var_INaCa__num_ss / ((var_INaCa__denom_ss_3 + var_INaCa__denom_ss_4) * var_INaCa__denom_ss_1 * var_INaCa__denom_ss_2); // uA_per_uF
        const double d_dt_chaste_interface_var_Ca__Ca_ss_sr = -(-var_chaste_interface__Irel__Irel * var_cell_geometry__Vjsr / var_cell_geometry__Vss_sr - var_INaCa__INaCa_ss_sr * var_cell_geometry__AF / var_cell_geometry__Vss_sr + var_Ca__Idiff + var_Ca__Idiff_ss) * var_Ca__bss_sr; // mM / ms

        return d_dt_chaste_interface_var_Ca__Ca_ss_sr;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative38(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            double var_chaste_interface__Ca__Ca_i = rY[1];
            // Units: mM; Initial value: 8.38749860095482e-05
            double var_chaste_interface__Irel__Irel = rY[35];
            // Units: mM_per_ms; Initial value: 0.000714227102027745
            double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
            // Units: mM; Initial value: 0.00011296707102434
            double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
            // Units: mM; Initial value: 0.000119239795531548
            double var_chaste_interface__Na__Na_ss_sr = rY[41];
            // Units: mM; Initial value: 8.01033434859049
            

            const double var_x100 = exp(0.010107688547106707 * var_chaste_interface__membrane__Vm);
            const double var_x101 = pow(var_chaste_interface__Na__Na_ss_sr, 3);
            const double var_x102 = var_x101 * mParameters[3];
            const double var_x103 = var_x100 * var_x102;
            const double var_x104 = exp(-0.027328194960695912 * var_chaste_interface__membrane__Vm);
            const double var_x105 = pow(mParameters[5], 3);
            const double var_x106 = var_x105 * var_chaste_interface__Ca__Ca_ss_sr;
            const double var_x107 = var_x104 * var_x106;
            const double var_x108 = 1.0 + 0.32000000000000001 * var_x104;
            const double var_x109 = mParameters[17] / var_x108;
            const double var_x110 = pow(var_chaste_interface__Ca__Ca_ss_sr, (-2));
            const double var_x111 = 1.0 + 1.5624999999999999e-8 * var_x110;
            const double var_x112 = 1 / var_x111;
            const double var_x113 = 1.0 + 0.00053738391835633597 * var_x101;
            const double var_x114 = 0.0035999999999999999 * var_x105;
            const double var_x115 = 1.0 + 277.77777777777777 * var_chaste_interface__Ca__Ca_ss_sr;
            const double var_x116 = 1860.8670000000004 * mParameters[3];
            const double var_x117 = 1 / (var_x102 + var_x106 + 669921.875 * var_chaste_interface__Ca__Ca_ss_sr + 1.3 * var_x101 + var_x113 * var_x114 + var_x115 * var_x116);
            const double var_x118 = var_x112 * var_x117;
            const double var_x119 = var_x109 * var_x118;
            const double var_x143 = var_x103 - var_x107;
            const double var_x165 = var_x104 * var_x105;
            const double var_x169 = -669921.875 - var_x105 - 516907.50000000012 * mParameters[3];
            const double var_x170 = 0.0027777373294460648 * mParameters[3];
            const double var_x171 = 5.3737609329446059e-9 * var_x105;
            const double var_x202 = var_x119 * var_x165;
            const double var_x203 = var_x109 * var_x143;
            const double var_x204 = var_x117 * var_x203 / (pow(var_x111, 2) * pow(var_chaste_interface__Ca__Ca_ss_sr, 3));
            const double var_x205 = var_x112 * var_x203 / pow((1.9405247813411081e-6 * var_x101 + 1.4927113702623908e-6 * var_x102 + 1.4927113702623908e-6 * var_x106 + var_x113 * var_x171 + var_x115 * var_x170 + var_chaste_interface__Ca__Ca_ss_sr), 2);
            const double var_x263 = var_x119 * var_x143;
            const double var_x535 = 0.0086999999999999994 + var_chaste_interface__Ca__Ca_ss_sr;
            const double var_x536 = 0.00087000000000000001 + var_chaste_interface__Ca__Ca_ss_sr;
            const double var_x537 = 1.0 + 0.0097788000000000007 / pow(var_x535, 2) + 4.0890000000000003e-5 / pow(var_x536, 2);
            const double var_x538 = 1 / var_x537;
            const double var_x539 = var_x538;
            const double var_x540 = 9.3214219101444593e-16 * var_x205;
            
            partialF = -var_x539 * (5.5 + 0.0004183410516001074 * var_x202 - 1.3073157862503357e-11 * var_x204 - var_x169 * var_x540) - (0.019557600000000001 / pow(var_x535, 3) + 8.1780000000000006e-5 / pow(var_x536, 3)) * (5.5 * var_chaste_interface__Ca__Ca_ss_sr - 0.5 * var_chaste_interface__Ca__Ca_ss_CaL - 0.23999999999999996 * var_chaste_interface__Irel__Irel - 5.0 * var_chaste_interface__Ca__Ca_i - 0.0004183410516001074 * var_x263) / pow(var_x537, 2);
        }
        else
        {
            const double y_save = rY[38];
            rY[38] += delta;
            const double temp = EvaluateYDerivative38(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[38])/delta;
            rY[38] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative39(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__ICaL__O = rY[19];
        // Units: dimensionless; Initial value: 2.26882961412491e-05
        double var_chaste_interface__ICaL__O_star = rY[21];
        // Units: dimensionless; Initial value: 1.23556404128518e-10
        double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
        // Units: mM; Initial value: 0.000119239795531548
        

        // Mathematics
        const double var_Ca__BSLmax = 1.1240000000000001; // mM
        const double var_Ca__BSRmax = 0.047; // mM
        const double var_Ca__KmBSL = 0.0086999999999999994; // mM
        const double var_Ca__KmBSR = 0.00087000000000000001; // mM
        const double var_Ca__bss_cal = 1 / (1.0 + var_Ca__BSLmax * var_Ca__KmBSL / pow((var_chaste_interface__Ca__Ca_ss_CaL + var_Ca__KmBSL), 2) + var_Ca__BSRmax * var_Ca__KmBSR / pow((var_chaste_interface__Ca__Ca_ss_CaL + var_Ca__KmBSR), 2)); // dimensionless
        const double var_Ca__tau_diff_ss = 2.0; // ms
        const double var_Ca__Idiff_ss = (-var_chaste_interface__Ca__Ca_ss_CaL + var_chaste_interface__Ca__Ca_ss_sr) / var_Ca__tau_diff_ss; // mM_per_ms
        const double var_cell_geometry__a = 0.0011000000000000001; // cm
        const double var_cell_geometry__l = 0.01; // cm
        const double var_cell_geometry__ageo = 2.0 * M_PI * pow(var_cell_geometry__a, 2) + 2.0 * M_PI * var_cell_geometry__a * var_cell_geometry__l; // cm2
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__ageo; // cm2
        const double var_cell_geometry__vcell = 1000.0 * M_PI * pow(var_cell_geometry__a, 2) * var_cell_geometry__l; // uL
        const double var_cell_geometry__Vss_CaL = 0.002 * var_cell_geometry__vcell; // uL
        const double var_cell_geometry__Vss_sr = 0.02 * var_cell_geometry__vcell; // uL
        const double var_ICaL__ICaL_max = ((fabs(var_chaste_interface__membrane__Vm) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__Vm) * (0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (14448.004881001343 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)) * mParameters[6] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_ICaL__ICaL = (var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__O_star) * var_ICaL__ICaL_max; // uA_per_uF
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_cell_geometry__AF = var_cell_geometry__Acap / var_model_parameters__F; // uF_mole_per_C
        const double d_dt_chaste_interface_var_Ca__Ca_ss_CaL = -(-var_Ca__Idiff_ss * var_cell_geometry__Vss_sr / var_cell_geometry__Vss_CaL + 0.5 * var_ICaL__ICaL * var_cell_geometry__AF / var_cell_geometry__Vss_CaL) * var_Ca__bss_cal; // mM / ms

        return d_dt_chaste_interface_var_Ca__Ca_ss_CaL;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative39(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            double var_chaste_interface__ICaL__O = rY[19];
            // Units: dimensionless; Initial value: 2.26882961412491e-05
            double var_chaste_interface__ICaL__O_star = rY[21];
            // Units: dimensionless; Initial value: 1.23556404128518e-10
            double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
            // Units: mM; Initial value: 0.00011296707102434
            double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
            // Units: mM; Initial value: 0.000119239795531548
            

            const double var_x0 = exp(9.9999999999999995e-8);
            const double var_x1 = 1 / (-1.0 + var_x0);
            const double var_x4 = exp(-9.9999999999999995e-8);
            const double var_x5 = 1 / (-1.0 + var_x4);
            const double var_x6 = fabs(var_chaste_interface__membrane__Vm);
            const double var_x19 = -0.34100000000000003 * mParameters[3];
            const double var_x23 = var_x6 < 1.3356169352749131e-6;
            const double var_x24 = exp(0.074871767015605231 * var_chaste_interface__membrane__Vm);
            const double var_x25 = -1.0 + var_x24;
            const double var_x26 = 1 / var_x25;
            const double var_x27 = 14448.004881001343 * var_x26;
            const double var_x30 = var_x24 * var_chaste_interface__membrane__Vm;
            const double var_x37 = var_chaste_interface__Ca__Ca_ss_CaL;
            const double var_x38 = var_x1 * (var_x19 + var_x0 * var_x37);
            const double var_x39 = var_x5 * (var_x19 + var_x37 * var_x4);
            const double var_x40 = var_x19 + var_x24 * var_x37;
            const double var_x41 = var_x27 * mParameters[6];
            const double var_x42 = var_x40 * var_x41;
            const double var_x155 = 0.5 + 374358.83507802623 * var_chaste_interface__membrane__Vm;
            const double var_x157 = var_x0 * var_x1;
            const double var_x158 = var_x4 * var_x5;
            const double var_x178 = 0.019296999999999998 * mParameters[6];
            const double var_x179 = var_x178 * var_x39;
            const double var_x180 = 0.5 + 374358.83507802623 * var_chaste_interface__membrane__Vm;
            const double var_x181 = ((var_x23) ? (-var_x179 + var_x180 * (var_x179 + var_x178 * var_x38)) : (var_x42 * var_chaste_interface__membrane__Vm));
            const double var_x207 = var_x158 * var_x178;
            const double var_x208 = ((var_x23) ? (-var_x207 + var_x155 * (var_x207 + var_x157 * var_x178)) : (var_x30 * var_x41));
            const double var_x506 = var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__O_star;
            const double var_x541 = 0.010458526290002684 * var_chaste_interface__ICaL__O + 0.010458526290002684 * var_chaste_interface__ICaL__O_star;
            const double var_x542 = 0.0086999999999999994 + var_chaste_interface__Ca__Ca_ss_CaL;
            const double var_x543 = 0.00087000000000000001 + var_chaste_interface__Ca__Ca_ss_CaL;
            const double var_x544 = 1.0 + 0.0097788000000000007 / pow(var_x542, 2) + 4.0890000000000003e-5 / pow(var_x543, 2);
            const double var_x545 = 1 / var_x544;
            const double var_x546 = var_x545;
            const double var_x547 = 0.010458526290002684 * var_x181;
            
            partialF = -var_x546 * (5.0 + var_x208 * var_x541) - (0.019557600000000001 / pow(var_x542, 3) + 8.1780000000000006e-5 / pow(var_x543, 3)) * (5.0 * var_chaste_interface__Ca__Ca_ss_CaL - 5.0 * var_chaste_interface__Ca__Ca_ss_sr + var_x506 * var_x547) / pow(var_x544, 2);
        }
        else
        {
            const double y_save = rY[39];
            rY[39] += delta;
            const double temp = EvaluateYDerivative39(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[39])/delta;
            rY[39] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative40(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 8.38749860095482e-05
        double var_chaste_interface__INa_m_gate__m = rY[25];
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INa_h_gate__h = rY[26];
        // Units: dimensionless; Initial value: 0.991354143386887
        double var_chaste_interface__INa_j_gate__j = rY[27];
        // Units: dimensionless; Initial value: 0.99709036251243
        double var_chaste_interface__INaL_mL_gate__mL = rY[28];
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INaL_hL_gate__hL = rY[29];
        // Units: dimensionless; Initial value: 0.319611809402137
        double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__Na__Na_i = rY[40];
        // Units: mM; Initial value: 8.01031392415197
        double var_chaste_interface__Na__Na_ss_sr = rY[41];
        // Units: mM; Initial value: 8.01033434859049
        double var_chaste_interface__Cl__Cl_i = rY[42];
        // Units: mM; Initial value: 20.6683603724432
        

        // Mathematics
        const double var_CT_Na_Cl__CT_Na_Cl_max = 2.4610800000000002e-5; // mM_per_ms
        const double var_Ca__tau_diff = 0.20000000000000001; // ms
        const double var_INaCa__KmCa_act = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__denom_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_i, 2); // dimensionless
        const double var_INaCa__denom_ss_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_ss_sr, 2); // dimensionless
        const double var_INaCa__eta = 0.27000000000000002; // dimensionless
        const double var_INaCa__ksat = 0.32000000000000001; // dimensionless
        const double var_INaK__V_half = -92.0; // mV
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 2.6000000000000001; // mM
        const double var_INaK__sigma = 1.0; // dimensionless
        const double var_INaK__PNa = pow(var_chaste_interface__Na__Na_i, 3) / pow((var_INaK__kmnai + var_chaste_interface__Na__Na_i), 3); // dimensionless
        const double var_Na__Idiff_Na = (-var_chaste_interface__Na__Na_i + var_chaste_interface__Na__Na_ss_sr) / var_Ca__tau_diff; // mM_per_ms
        const double var_cell_geometry__a = 0.0011000000000000001; // cm
        const double var_cell_geometry__l = 0.01; // cm
        const double var_cell_geometry__ageo = 2.0 * M_PI * pow(var_cell_geometry__a, 2) + 2.0 * M_PI * var_cell_geometry__a * var_cell_geometry__l; // cm2
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__ageo; // cm2
        const double var_cell_geometry__vcell = 1000.0 * M_PI * pow(var_cell_geometry__a, 2) * var_cell_geometry__l; // uL
        const double var_cell_geometry__Vmyo = 0.67800000000000005 * var_cell_geometry__vcell; // uL
        const double var_cell_geometry__Vss_sr = 0.02 * var_cell_geometry__vcell; // uL
        const double var_INaCa__denom_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_i + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_i / var_INaCa__KmCai) * mParameters[3]; // mM4
        const double var_INaCa__denom_ss_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(var_chaste_interface__Na__Na_ss_sr, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_ss_sr / var_INaCa__KmCai) * mParameters[3]; // mM4
        const double var_model_parameters__Cl_o = 100.0; // mM
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_cell_geometry__AF = var_cell_geometry__Acap / var_model_parameters__F; // uF_mole_per_C
        const double var_INaK__PK = mParameters[4] / (var_INaK__kmko + mParameters[4]); // dimensionless
        const double var_INaCa__denom_4 = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[3] + pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_i + pow(mParameters[5], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INaCa__denom_ss_4 = pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] + pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(mParameters[5], 3) * (1.0 + pow(var_chaste_interface__Na__Na_ss_sr, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__Vm) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__Vm) * (0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) : (3612.0012202503358 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)) * mParameters[9] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_INaCa__denom_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__denom_ss_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__num_ss = 0.20000000000000001 * (pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * mParameters[17]; // mM4_uA_per_uF
        const double var_INaCa__INaCa_ss_sr = var_INaCa__num_ss / ((var_INaCa__denom_ss_3 + var_INaCa__denom_ss_4) * var_INaCa__denom_ss_1 * var_INaCa__denom_ss_2); // uA_per_uF
        const double var_INaCa__numerator = 0.80000000000000004 * (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[3] * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_i * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * mParameters[17]; // mM4_uA_per_uF
        const double var_INaCa__INaCa_cai = var_INaCa__numerator / ((var_INaCa__denom_3 + var_INaCa__denom_4) * var_INaCa__denom_1 * var_INaCa__denom_2); // uA_per_uF
        const double var_INaCa__INaCa = var_INaCa__INaCa_cai + var_INaCa__INaCa_ss_sr; // uA_per_uF
        const double var_INaK__phi = (-var_INaK__V_half + var_chaste_interface__membrane__Vm) * var_INaK__sigma * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INaK__fv = 1 / (1.0 + exp(-var_INaK__phi)); // dimensionless
        const double var_INaK__INaK = var_INaK__PK * var_INaK__PNa * var_INaK__fv * mParameters[18]; // uA_per_uF
        const double var_reversal_potentials__ECl = -var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__Cl_o / var_chaste_interface__Cl__Cl_i) / var_model_parameters__F; // mV
        const double var_reversal_potentials__ENa = var_model_parameters__R * var_model_parameters__T * log(mParameters[5] / var_chaste_interface__Na__Na_i) / var_model_parameters__F; // mV
        const double var_CT_Na_Cl__CT_Na_Cl = pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4) * var_CT_Na_Cl__CT_Na_Cl_max / (59494197.640692554 + pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4)); // mM_per_ms
        const double var_INa__INa = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * mParameters[11] * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INaL__INaL = pow(var_chaste_interface__INaL_mL_gate__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * mParameters[13] * var_chaste_interface__INaL_hL_gate__hL; // uA_per_uF
        const double d_dt_chaste_interface_var_Na__Na_i = var_Na__Idiff_Na * var_cell_geometry__Vss_sr / var_cell_geometry__Vmyo - (3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + var_INa__INa + var_INaL__INaL + var_INab__INab) * var_cell_geometry__AF / var_cell_geometry__Vmyo + var_CT_Na_Cl__CT_Na_Cl; // mM / ms

        return d_dt_chaste_interface_var_Na__Na_i;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative40(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            double var_chaste_interface__Ca__Ca_i = rY[1];
            // Units: mM; Initial value: 8.38749860095482e-05
            double var_chaste_interface__INa_m_gate__m = rY[25];
            // Units: dimensionless; Initial value: 0.00101841101248412
            double var_chaste_interface__INa_h_gate__h = rY[26];
            // Units: dimensionless; Initial value: 0.991354143386887
            double var_chaste_interface__INa_j_gate__j = rY[27];
            // Units: dimensionless; Initial value: 0.99709036251243
            double var_chaste_interface__INaL_mL_gate__mL = rY[28];
            // Units: dimensionless; Initial value: 0.00101841101248412
            double var_chaste_interface__INaL_hL_gate__hL = rY[29];
            // Units: dimensionless; Initial value: 0.319611809402137
            double var_chaste_interface__Na__Na_i = rY[40];
            // Units: mM; Initial value: 8.01031392415197
            double var_chaste_interface__Cl__Cl_i = rY[42];
            // Units: mM; Initial value: 20.6683603724432
            

            const double var_x0 = exp(9.9999999999999995e-8);
            const double var_x1 = 1 / (-1.0 + var_x0);
            const double var_x4 = exp(-9.9999999999999995e-8);
            const double var_x5 = 1 / (-1.0 + var_x4);
            const double var_x6 = fabs(var_chaste_interface__membrane__Vm);
            const double var_x7 = var_x6 < 2.6712338705498262e-6;
            const double var_x8 = 0.037435883507802616 * var_chaste_interface__membrane__Vm;
            const double var_x9 = exp(var_x8);
            const double var_x12 = -1.0 + var_x9;
            const double var_x13 = mParameters[9] / var_x12;
            const double var_x14 = 3612.0012202503358 * var_x13;
            const double var_x15 = var_x9 * var_chaste_interface__membrane__Vm;
            const double var_x69 = pow(var_chaste_interface__INaL_mL_gate__mL, 3) * mParameters[13];
            const double var_x70 = var_x69 * var_chaste_interface__INaL_hL_gate__hL;
            const double var_x71 = pow(var_chaste_interface__INa_m_gate__m, 3);
            const double var_x72 = var_x71 * mParameters[11] * var_chaste_interface__INa_j_gate__j;
            const double var_x73 = var_x72 * var_chaste_interface__INa_h_gate__h;
            const double var_x100 = exp(0.010107688547106707 * var_chaste_interface__membrane__Vm);
            const double var_x104 = exp(-0.027328194960695912 * var_chaste_interface__membrane__Vm);
            const double var_x105 = pow(mParameters[5], 3);
            const double var_x108 = 1.0 + 0.32000000000000001 * var_x104;
            const double var_x109 = mParameters[17] / var_x108;
            const double var_x114 = 0.0035999999999999999 * var_x105;
            const double var_x116 = 1860.8670000000004 * mParameters[3];
            const double var_x121 = pow(var_chaste_interface__Na__Na_i, 3);
            const double var_x122 = var_x121 * mParameters[3];
            const double var_x123 = var_x100 * var_x122;
            const double var_x124 = var_x105 * var_chaste_interface__Ca__Ca_i;
            const double var_x125 = var_x104 * var_x124;
            const double var_x126 = 1.0 + 1.5624999999999999e-8 / pow(var_chaste_interface__Ca__Ca_i, 2);
            const double var_x127 = 1 / var_x126;
            const double var_x128 = 1.0 + 0.00053738391835633597 * var_x121;
            const double var_x129 = 1.0 + 277.77777777777777 * var_chaste_interface__Ca__Ca_i;
            const double var_x130 = 1 / (var_x122 + var_x124 + 669921.875 * var_chaste_interface__Ca__Ca_i + 1.3 * var_x121 + var_x114 * var_x128 + var_x116 * var_x129);
            const double var_x131 = var_x127 * var_x130;
            const double var_x132 = var_x109 * var_x131;
            const double var_x146 = var_x123 - var_x125;
            const double var_x149 = 1 / (1.5 + mParameters[4]);
            const double var_x150 = 1 + 0.38461538461538458 * var_chaste_interface__Na__Na_i;
            const double var_x151 = pow(var_x150, (-3));
            const double var_x152 = exp(-3.444101282717841 - var_x8);
            const double var_x153 = 1.0 + var_x152;
            const double var_x157 = var_x0 * var_x1;
            const double var_x158 = var_x4 * var_x5;
            const double var_x167 = var_x109 * var_x146;
            const double var_x170 = 0.0027777373294460648 * mParameters[3];
            const double var_x171 = 5.3737609329446059e-9 * var_x105;
            const double var_x172 = var_x127 * var_x167 / pow((1.9405247813411081e-6 * var_x121 + 1.4927113702623908e-6 * var_x122 + 1.4927113702623908e-6 * var_x124 + var_x128 * var_x171 + var_x129 * var_x170 + var_chaste_interface__Ca__Ca_i), 2);
            const double var_x183 = 1 / var_chaste_interface__Na__Na_i;
            const double var_x184 = log(var_x183 * mParameters[5]);
            const double var_x209 = 0.5 + 187179.41753901311 * var_chaste_interface__membrane__Vm;
            const double var_x210 = 0.0096484999999999991 * mParameters[9];
            const double var_x211 = var_x158 * var_x210;
            const double var_x212 = ((var_x7) ? (-var_x211 + var_x209 * (var_x211 + var_x157 * var_x210)) : (var_x14 * var_x15));
            const double var_x214 = var_x183 * var_x70;
            const double var_x215 = var_x183 * var_x73;
            const double var_x216 = var_x149 * mParameters[18] * mParameters[4] / var_x153;
            const double var_x217 = var_x121 * var_x216 / pow(var_x150, 4);
            const double var_x218 = pow(var_chaste_interface__Na__Na_i, 2);
            const double var_x219 = var_x151 * var_x216 * var_x218;
            const double var_x220 = 3 * mParameters[3];
            const double var_x221 = 5.8037463182484285e-6 * var_x105;
            const double var_x222 = -3.9000000000000004 * var_x218 - var_x218 * var_x220 - var_x218 * var_x221;
            const double var_x223 = var_x100 * mParameters[3];
            const double var_x224 = var_x132 * var_x218 * var_x223;
            const double var_x228 = 1 / var_chaste_interface__Cl__Cl_i;
            const double var_x549 = 3.299618375272375e-16 * var_x172;
            const double var_x551 = log(100.0 * var_x228);
            const double var_x552 = var_x184 + var_x551;
            const double var_x553 = pow(var_x552, 4);
            const double var_x554 = 7.2099425022651882e-9 * pow(var_x552, 7) / pow((1 + 0.0085580149227345564 * var_x553), 2);
            const double var_x555 = 50.122574928945262 * pow(var_x552, 3) / (59494197.640692554 + 509152.231225166 * var_x553);
            const double var_x556 = var_x183 * var_x554 - var_x183 * var_x555;
            
            partialF = -0.14749262536873156 + var_x556 + 1.2152060064426631e-5 * var_x217 - 0.0016482105995215921 * var_x214 - 0.0016482105995215921 * var_x215 - 3.1595356167509241e-5 * var_x219 - 0.00044425598400011404 * var_x224 - 6.1702220000015831e-5 * var_x212 - var_x222 * var_x549;
        }
        else
        {
            const double y_save = rY[40];
            rY[40] += delta;
            const double temp = EvaluateYDerivative40(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[40])/delta;
            rY[40] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative41(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__Na__Na_i = rY[40];
        // Units: mM; Initial value: 8.01031392415197
        double var_chaste_interface__Na__Na_ss_sr = rY[41];
        // Units: mM; Initial value: 8.01033434859049
        

        // Mathematics
        const double var_Ca__tau_diff = 0.20000000000000001; // ms
        const double var_INaCa__KmCa_act = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__denom_ss_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_ss_sr, 2); // dimensionless
        const double var_INaCa__eta = 0.27000000000000002; // dimensionless
        const double var_INaCa__ksat = 0.32000000000000001; // dimensionless
        const double var_Na__Idiff_Na = (-var_chaste_interface__Na__Na_i + var_chaste_interface__Na__Na_ss_sr) / var_Ca__tau_diff; // mM_per_ms
        const double var_cell_geometry__a = 0.0011000000000000001; // cm
        const double var_cell_geometry__l = 0.01; // cm
        const double var_cell_geometry__ageo = 2.0 * M_PI * pow(var_cell_geometry__a, 2) + 2.0 * M_PI * var_cell_geometry__a * var_cell_geometry__l; // cm2
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__ageo; // cm2
        const double var_cell_geometry__vcell = 1000.0 * M_PI * pow(var_cell_geometry__a, 2) * var_cell_geometry__l; // uL
        const double var_cell_geometry__Vss_sr = 0.02 * var_cell_geometry__vcell; // uL
        const double var_INaCa__denom_ss_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(var_chaste_interface__Na__Na_ss_sr, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_ss_sr / var_INaCa__KmCai) * mParameters[3]; // mM4
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_cell_geometry__AF = var_cell_geometry__Acap / var_model_parameters__F; // uF_mole_per_C
        const double var_INaCa__denom_ss_4 = pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] + pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(mParameters[5], 3) * (1.0 + pow(var_chaste_interface__Na__Na_ss_sr, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_INaCa__denom_ss_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__num_ss = 0.20000000000000001 * (pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * mParameters[17]; // mM4_uA_per_uF
        const double var_INaCa__INaCa_ss_sr = var_INaCa__num_ss / ((var_INaCa__denom_ss_3 + var_INaCa__denom_ss_4) * var_INaCa__denom_ss_1 * var_INaCa__denom_ss_2); // uA_per_uF
        const double d_dt_chaste_interface_var_Na__Na_ss_sr = -var_Na__Idiff_Na - 3.0 * var_INaCa__INaCa_ss_sr * var_cell_geometry__AF / var_cell_geometry__Vss_sr; // mM / ms

        return d_dt_chaste_interface_var_Na__Na_ss_sr;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative41(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
            // Units: mM; Initial value: 0.00011296707102434
            double var_chaste_interface__Na__Na_ss_sr = rY[41];
            // Units: mM; Initial value: 8.01033434859049
            

            const double var_x100 = exp(0.010107688547106707 * var_chaste_interface__membrane__Vm);
            const double var_x101 = pow(var_chaste_interface__Na__Na_ss_sr, 3);
            const double var_x102 = var_x101 * mParameters[3];
            const double var_x103 = var_x100 * var_x102;
            const double var_x104 = exp(-0.027328194960695912 * var_chaste_interface__membrane__Vm);
            const double var_x105 = pow(mParameters[5], 3);
            const double var_x106 = var_x105 * var_chaste_interface__Ca__Ca_ss_sr;
            const double var_x107 = var_x104 * var_x106;
            const double var_x108 = 1.0 + 0.32000000000000001 * var_x104;
            const double var_x109 = mParameters[17] / var_x108;
            const double var_x110 = pow(var_chaste_interface__Ca__Ca_ss_sr, (-2));
            const double var_x111 = 1.0 + 1.5624999999999999e-8 * var_x110;
            const double var_x112 = 1 / var_x111;
            const double var_x113 = 1.0 + 0.00053738391835633597 * var_x101;
            const double var_x114 = 0.0035999999999999999 * var_x105;
            const double var_x115 = 1.0 + 277.77777777777777 * var_chaste_interface__Ca__Ca_ss_sr;
            const double var_x116 = 1860.8670000000004 * mParameters[3];
            const double var_x117 = 1 / (var_x102 + var_x106 + 669921.875 * var_chaste_interface__Ca__Ca_ss_sr + 1.3 * var_x101 + var_x113 * var_x114 + var_x115 * var_x116);
            const double var_x118 = var_x112 * var_x117;
            const double var_x119 = var_x109 * var_x118;
            const double var_x143 = var_x103 - var_x107;
            const double var_x170 = 0.0027777373294460648 * mParameters[3];
            const double var_x171 = 5.3737609329446059e-9 * var_x105;
            const double var_x203 = var_x109 * var_x143;
            const double var_x205 = var_x112 * var_x203 / pow((1.9405247813411081e-6 * var_x101 + 1.4927113702623908e-6 * var_x102 + 1.4927113702623908e-6 * var_x106 + var_x113 * var_x171 + var_x115 * var_x170 + var_chaste_interface__Ca__Ca_ss_sr), 2);
            const double var_x220 = 3 * mParameters[3];
            const double var_x221 = 5.8037463182484285e-6 * var_x105;
            const double var_x223 = var_x100 * mParameters[3];
            const double var_x225 = pow(var_chaste_interface__Na__Na_ss_sr, 2);
            const double var_x226 = -3.9000000000000004 * var_x225 - var_x220 * var_x225 - var_x221 * var_x225;
            const double var_x227 = var_x119 * var_x223 * var_x225;
            const double var_x558 = 2.796426573043338e-15 * var_x205;
            
            partialF = -5.0 - 0.0037650694644009667 * var_x227 - var_x226 * var_x558;
        }
        else
        {
            const double y_save = rY[41];
            rY[41] += delta;
            const double temp = EvaluateYDerivative41(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[41])/delta;
            rY[41] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative42(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Na__Na_i = rY[40];
        // Units: mM; Initial value: 8.01031392415197
        double var_chaste_interface__Cl__Cl_i = rY[42];
        // Units: mM; Initial value: 20.6683603724432
        double var_chaste_interface__Cl__Cl_ss = rY[43];
        // Units: mM; Initial value: 20.6683605553303
        double var_chaste_interface__K__K_i = rY[44];
        // Units: mM; Initial value: 144.907134343314
        

        // Mathematics
        const double var_CT_K_Cl__CT_K_Cl_max = 1.77e-5; // mM_per_ms
        const double var_CT_Na_Cl__CT_Na_Cl_max = 2.4610800000000002e-5; // mM_per_ms
        const double var_Ca__tau_diff = 0.20000000000000001; // ms
        const double var_Cl__Idiff_Cl = (-var_chaste_interface__Cl__Cl_i + var_chaste_interface__Cl__Cl_ss) / var_Ca__tau_diff; // mM_per_ms
        const double var_cell_geometry__a = 0.0011000000000000001; // cm
        const double var_cell_geometry__l = 0.01; // cm
        const double var_cell_geometry__ageo = 2.0 * M_PI * pow(var_cell_geometry__a, 2) + 2.0 * M_PI * var_cell_geometry__a * var_cell_geometry__l; // cm2
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__ageo; // cm2
        const double var_cell_geometry__vcell = 1000.0 * M_PI * pow(var_cell_geometry__a, 2) * var_cell_geometry__l; // uL
        const double var_cell_geometry__Vmyo = 0.67800000000000005 * var_cell_geometry__vcell; // uL
        const double var_cell_geometry__Vss_sr = 0.02 * var_cell_geometry__vcell; // uL
        const double var_model_parameters__Cl_o = 100.0; // mM
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_cell_geometry__AF = var_cell_geometry__Acap / var_model_parameters__F; // uF_mole_per_C
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_reversal_potentials__ECl = -var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__Cl_o / var_chaste_interface__Cl__Cl_i) / var_model_parameters__F; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__membrane__Vm) * mParameters[8]; // uA_per_uF
        const double var_reversal_potentials__EK = var_model_parameters__R * var_model_parameters__T * log(mParameters[4] / var_chaste_interface__K__K_i) / var_model_parameters__F; // mV
        const double var_CT_K_Cl__CT_K_Cl = (-var_reversal_potentials__ECl + var_reversal_potentials__EK) * var_CT_K_Cl__CT_K_Cl_max / (87.825100000000006 - var_reversal_potentials__ECl + var_reversal_potentials__EK); // mM_per_ms
        const double var_reversal_potentials__ENa = var_model_parameters__R * var_model_parameters__T * log(mParameters[5] / var_chaste_interface__Na__Na_i) / var_model_parameters__F; // mV
        const double var_CT_Na_Cl__CT_Na_Cl = pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4) * var_CT_Na_Cl__CT_Na_Cl_max / (59494197.640692554 + pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4)); // mM_per_ms
        const double d_dt_chaste_interface_var_Cl__Cl_i = var_Cl__Idiff_Cl * var_cell_geometry__Vss_sr / var_cell_geometry__Vmyo + var_IClb__IClb * var_cell_geometry__AF / var_cell_geometry__Vmyo + var_CT_K_Cl__CT_K_Cl + var_CT_Na_Cl__CT_Na_Cl; // mM / ms

        return d_dt_chaste_interface_var_Cl__Cl_i;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative42(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Na__Na_i = rY[40];
            // Units: mM; Initial value: 8.01031392415197
            double var_chaste_interface__Cl__Cl_i = rY[42];
            // Units: mM; Initial value: 20.6683603724432
            double var_chaste_interface__K__K_i = rY[44];
            // Units: mM; Initial value: 144.907134343314
            

            const double var_x79 = 1 / var_chaste_interface__K__K_i;
            const double var_x80 = log(var_x79 * mParameters[4]);
            const double var_x81 = 26.712338705498265 * var_x80;
            const double var_x183 = 1 / var_chaste_interface__Na__Na_i;
            const double var_x184 = log(var_x183 * mParameters[5]);
            const double var_x228 = 1 / var_chaste_interface__Cl__Cl_i;
            const double var_x229 = var_x228 * mParameters[8];
            const double var_x551 = log(100.0 * var_x228);
            const double var_x552 = var_x184 + var_x551;
            const double var_x553 = pow(var_x552, 4);
            const double var_x554 = 7.2099425022651882e-9 * pow(var_x552, 7) / pow((1 + 0.0085580149227345564 * var_x553), 2);
            const double var_x555 = 50.122574928945262 * pow(var_x552, 3) / (59494197.640692554 + 509152.231225166 * var_x553);
            const double var_x557 = var_x228 * var_x554 - var_x228 * var_x555;
            const double var_x559 = var_x81 + 26.712338705498265 * var_x551;
            const double var_x560 = 0.00047280839508731927 / (87.825100000000006 + var_x559);
            const double var_x561 = 6.1298221377044294e-8 * var_x559 / pow((1 + 0.30415380916729118 * var_x551 + 0.30415380916729118 * var_x80), 2);
            const double var_x562 = var_x228 * var_x561 - var_x228 * var_x560;
            
            partialF = -0.14749262536873156 + var_x557 + var_x562 - 0.0016482105995215921 * var_x229;
        }
        else
        {
            const double y_save = rY[42];
            rY[42] += delta;
            const double temp = EvaluateYDerivative42(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[42])/delta;
            rY[42] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative43(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ito2_i2f_gate__i2f = rY[34];
        // Units: dimensionless; Initial value: 0.996044894628276
        double var_chaste_interface__Irel__Irel = rY[35];
        // Units: mM_per_ms; Initial value: 0.000714227102027745
        double var_chaste_interface__Cl__Cl_i = rY[42];
        // Units: mM; Initial value: 20.6683603724432
        double var_chaste_interface__Cl__Cl_ss = rY[43];
        // Units: mM; Initial value: 20.6683605553303
        

        // Mathematics
        const double var_Ca__tau_diff = 0.20000000000000001; // ms
        const double var_Cl__Idiff_Cl = (-var_chaste_interface__Cl__Cl_i + var_chaste_interface__Cl__Cl_ss) / var_Ca__tau_diff; // mM_per_ms
        const double var_Ito2__Ito2_max_scaling_factor = 1.0; // dimensionless
        const double var_Ito2__kCa_ito2 = 0.40000000000000002; // mM_per_ms
        const double var_Ito2__KCa_ito2 = 1.0 - 1 / (1.0 + pow(var_chaste_interface__Irel__Irel, 2) / pow(var_Ito2__kCa_ito2, 2)); // dimensionless
        const double var_cell_geometry__a = 0.0011000000000000001; // cm
        const double var_cell_geometry__l = 0.01; // cm
        const double var_cell_geometry__ageo = 2.0 * M_PI * pow(var_cell_geometry__a, 2) + 2.0 * M_PI * var_cell_geometry__a * var_cell_geometry__l; // cm2
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__ageo; // cm2
        const double var_cell_geometry__vcell = 1000.0 * M_PI * pow(var_cell_geometry__a, 2) * var_cell_geometry__l; // uL
        const double var_cell_geometry__Vss_sr = 0.02 * var_cell_geometry__vcell; // uL
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__membrane__Vm) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__Vm) * (0.0096484999999999991 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(-9.9999999999999995e-8))) : (3612.0012202503358 * (-100.0 * exp(0.037435883507802616 * var_chaste_interface__membrane__Vm) + var_chaste_interface__Cl__Cl_i) * mParameters[19] * var_chaste_interface__membrane__Vm / (1.0 - exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_Ito2__Ito2_max * var_Ito2__Ito2_max_scaling_factor * var_Ito2__KCa_ito2 * var_chaste_interface__Ito2_i2f_gate__i2f; // uA_per_uF
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_cell_geometry__AF = var_cell_geometry__Acap / var_model_parameters__F; // uF_mole_per_C
        const double d_dt_chaste_interface_var_Cl__Cl_ss = -var_Cl__Idiff_Cl + var_Ito2__Ito2 * var_cell_geometry__AF / var_cell_geometry__Vss_sr; // mM / ms

        return d_dt_chaste_interface_var_Cl__Cl_ss;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative43(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            
            partialF = -5.0;
        }
        else
        {
            const double y_save = rY[43];
            rY[43] += delta;
            const double temp = EvaluateYDerivative43(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[43])/delta;
            rY[43] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative44(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 8.38749860095482e-05
        double var_chaste_interface__IKs__C1 = rY[2];
        // Units: dimensionless; Initial value: 0.476679784307081
        double var_chaste_interface__IKs__C2 = rY[3];
        // Units: dimensionless; Initial value: 0.255181042718489
        double var_chaste_interface__IKs__C3 = rY[4];
        // Units: dimensionless; Initial value: 0.0512272866698557
        double var_chaste_interface__IKs__C4 = rY[5];
        // Units: dimensionless; Initial value: 0.0045705849736195
        double var_chaste_interface__IKs__C5 = rY[6];
        // Units: dimensionless; Initial value: 0.000152923243503507
        double var_chaste_interface__IKs__C6 = rY[7];
        // Units: dimensionless; Initial value: 0.132814156809568
        double var_chaste_interface__IKs__C7 = rY[8];
        // Units: dimensionless; Initial value: 0.053324572164618
        double var_chaste_interface__IKs__C8 = rY[9];
        // Units: dimensionless; Initial value: 0.00713656414955778
        double var_chaste_interface__IKs__C9 = rY[10];
        // Units: dimensionless; Initial value: 0.000318368292970148
        double var_chaste_interface__IKs__C10 = rY[11];
        // Units: dimensionless; Initial value: 0.0138769647384953
        double var_chaste_interface__IKs__C11 = rY[12];
        // Units: dimensionless; Initial value: 0.00371438476499172
        double var_chaste_interface__IKs__C12 = rY[13];
        // Units: dimensionless; Initial value: 0.000248553788631871
        double var_chaste_interface__IKs__C13 = rY[14];
        // Units: dimensionless; Initial value: 0.000644426171899078
        double var_chaste_interface__IKs__C14 = rY[15];
        // Units: dimensionless; Initial value: 8.62495047666861e-05
        double var_chaste_interface__IKs__C15 = rY[16];
        // Units: dimensionless; Initial value: 1.12344645485893e-05
        double var_chaste_interface__IKs__O1 = rY[17];
        // Units: dimensionless; Initial value: 1.05292905767805e-05
        double var_chaste_interface__IKr_xr_gate__xr = rY[30];
        // Units: dimensionless; Initial value: 4.06959064407486e-06
        double var_chaste_interface__Ito1_a_gate__a = rY[31];
        // Units: dimensionless; Initial value: 1.76776038804228e-05
        double var_chaste_interface__Ito1_i1f_gate__i1f = rY[32];
        // Units: dimensionless; Initial value: 0.997976503910799
        double var_chaste_interface__Ito1_i1s_gate__i1s = rY[33];
        // Units: dimensionless; Initial value: 0.947581184798815
        double var_chaste_interface__Na__Na_i = rY[40];
        // Units: mM; Initial value: 8.01031392415197
        double var_chaste_interface__Cl__Cl_i = rY[42];
        // Units: mM; Initial value: 20.6683603724432
        double var_chaste_interface__K__K_i = rY[44];
        // Units: mM; Initial value: 144.907134343314
        

        // Mathematics
        const double var_CT_K_Cl__CT_K_Cl_max = 1.77e-5; // mM_per_ms
        const double var_IKs__O2 = 1.0 - var_chaste_interface__IKs__C1 - var_chaste_interface__IKs__C10 - var_chaste_interface__IKs__C11 - var_chaste_interface__IKs__C12 - var_chaste_interface__IKs__C13 - var_chaste_interface__IKs__C14 - var_chaste_interface__IKs__C15 - var_chaste_interface__IKs__C2 - var_chaste_interface__IKs__C3 - var_chaste_interface__IKs__C4 - var_chaste_interface__IKs__C5 - var_chaste_interface__IKs__C6 - var_chaste_interface__IKs__C7 - var_chaste_interface__IKs__C8 - var_chaste_interface__IKs__C9 - var_chaste_interface__IKs__O1; // dimensionless
        const double var_IKs__OKs = var_chaste_interface__IKs__O1 + var_IKs__O2; // dimensionless
        const double var_IKs__gKs = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[16]; // mS_per_uF
        const double var_INaK__V_half = -92.0; // mV
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 2.6000000000000001; // mM
        const double var_INaK__sigma = 1.0; // dimensionless
        const double var_INaK__PNa = pow(var_chaste_interface__Na__Na_i, 3) / pow((var_INaK__kmnai + var_chaste_interface__Na__Na_i), 3); // dimensionless
        const double var_cell_geometry__a = 0.0011000000000000001; // cm
        const double var_cell_geometry__l = 0.01; // cm
        const double var_cell_geometry__ageo = 2.0 * M_PI * pow(var_cell_geometry__a, 2) + 2.0 * M_PI * var_cell_geometry__a * var_cell_geometry__l; // cm2
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__ageo; // cm2
        const double var_cell_geometry__vcell = 1000.0 * M_PI * pow(var_cell_geometry__a, 2) * var_cell_geometry__l; // uL
        const double var_cell_geometry__Vmyo = 0.67800000000000005 * var_cell_geometry__vcell; // uL
        const double var_IKp__Kp = 1 / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IKr_r_gate__r = 1 / (1.0 + exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_Ito1__rto1 = exp(0.0018181818181818182 * var_chaste_interface__membrane__Vm); // dimensionless
        const double var_membrane__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_membrane__i_Stim = var_membrane__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_model_parameters__Cl_o = 100.0; // mM
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_cell_geometry__AF = var_cell_geometry__Acap / var_model_parameters__F; // uF_mole_per_C
        const double var_IK1__gK1 = 0.43033148291193518 * sqrt(mParameters[4]) * mParameters[12]; // mS_per_uF
        const double var_IKr__gKr = 0.43033148291193518 * sqrt(mParameters[4]) * mParameters[15]; // mS_per_uF
        const double var_INaK__PK = mParameters[4] / (var_INaK__kmko + mParameters[4]); // dimensionless
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_INaK__phi = (-var_INaK__V_half + var_chaste_interface__membrane__Vm) * var_INaK__sigma * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INaK__fv = 1 / (1.0 + exp(-var_INaK__phi)); // dimensionless
        const double var_INaK__INaK = var_INaK__PK * var_INaK__PNa * var_INaK__fv * mParameters[18]; // uA_per_uF
        const double var_reversal_potentials__ECl = -var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__Cl_o / var_chaste_interface__Cl__Cl_i) / var_model_parameters__F; // mV
        const double var_reversal_potentials__EK = var_model_parameters__R * var_model_parameters__T * log(mParameters[4] / var_chaste_interface__K__K_i) / var_model_parameters__F; // mV
        const double var_CT_K_Cl__CT_K_Cl = (-var_reversal_potentials__ECl + var_reversal_potentials__EK) * var_CT_K_Cl__CT_K_Cl_max / (87.825100000000006 - var_reversal_potentials__ECl + var_reversal_potentials__EK); // mM_per_ms
        const double var_IK1_K1_gate__alpha_k1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__Vm - 0.23849999999999999 * var_reversal_potentials__EK)); // dimensionless
        const double var_IK1_K1_gate__beta_k1 = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__Vm - 0.080320000000000003 * var_reversal_potentials__EK) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__Vm - 0.061749999999999999 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IK1_K1_gate__K1 = var_IK1_K1_gate__alpha_k1 / (var_IK1_K1_gate__alpha_k1 + var_IK1_K1_gate__beta_k1); // dimensionless
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IK1__gK1 * var_IK1_K1_gate__K1; // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKp__Kp * mParameters[14]; // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKr__gKr * var_IKr_r_gate__r * var_chaste_interface__IKr_xr_gate__xr; // uA_per_uF
        const double var_Ito1__Ito1 = pow(var_chaste_interface__Ito1_a_gate__a, 3) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * mParameters[20] * var_Ito1__rto1 * var_chaste_interface__Ito1_i1f_gate__i1f * var_chaste_interface__Ito1_i1s_gate__i1s; // uA_per_uF
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = var_model_parameters__R * var_model_parameters__T * log((mParameters[5] * var_reversal_potentials__prnak + mParameters[4]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_model_parameters__F; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__Vm) * var_IKs__OKs * var_IKs__gKs; // uA_per_uF
        const double d_dt_chaste_interface_var_K__K_i = -(-2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito1__Ito1 + var_membrane__i_Stim) * var_cell_geometry__AF / var_cell_geometry__Vmyo + var_CT_K_Cl__CT_K_Cl; // mM / ms

        return d_dt_chaste_interface_var_K__K_i;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative44(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -87.4947322902196
            double var_chaste_interface__Ca__Ca_i = rY[1];
            // Units: mM; Initial value: 8.38749860095482e-05
            double var_chaste_interface__IKs__C1 = rY[2];
            // Units: dimensionless; Initial value: 0.476679784307081
            double var_chaste_interface__IKs__C2 = rY[3];
            // Units: dimensionless; Initial value: 0.255181042718489
            double var_chaste_interface__IKs__C3 = rY[4];
            // Units: dimensionless; Initial value: 0.0512272866698557
            double var_chaste_interface__IKs__C4 = rY[5];
            // Units: dimensionless; Initial value: 0.0045705849736195
            double var_chaste_interface__IKs__C5 = rY[6];
            // Units: dimensionless; Initial value: 0.000152923243503507
            double var_chaste_interface__IKs__C6 = rY[7];
            // Units: dimensionless; Initial value: 0.132814156809568
            double var_chaste_interface__IKs__C7 = rY[8];
            // Units: dimensionless; Initial value: 0.053324572164618
            double var_chaste_interface__IKs__C8 = rY[9];
            // Units: dimensionless; Initial value: 0.00713656414955778
            double var_chaste_interface__IKs__C9 = rY[10];
            // Units: dimensionless; Initial value: 0.000318368292970148
            double var_chaste_interface__IKs__C10 = rY[11];
            // Units: dimensionless; Initial value: 0.0138769647384953
            double var_chaste_interface__IKs__C11 = rY[12];
            // Units: dimensionless; Initial value: 0.00371438476499172
            double var_chaste_interface__IKs__C12 = rY[13];
            // Units: dimensionless; Initial value: 0.000248553788631871
            double var_chaste_interface__IKs__C13 = rY[14];
            // Units: dimensionless; Initial value: 0.000644426171899078
            double var_chaste_interface__IKs__C14 = rY[15];
            // Units: dimensionless; Initial value: 8.62495047666861e-05
            double var_chaste_interface__IKs__C15 = rY[16];
            // Units: dimensionless; Initial value: 1.12344645485893e-05
            double var_chaste_interface__IKr_xr_gate__xr = rY[30];
            // Units: dimensionless; Initial value: 4.06959064407486e-06
            double var_chaste_interface__Ito1_a_gate__a = rY[31];
            // Units: dimensionless; Initial value: 1.76776038804228e-05
            double var_chaste_interface__Ito1_i1f_gate__i1f = rY[32];
            // Units: dimensionless; Initial value: 0.997976503910799
            double var_chaste_interface__Ito1_i1s_gate__i1s = rY[33];
            // Units: dimensionless; Initial value: 0.947581184798815
            double var_chaste_interface__Na__Na_i = rY[40];
            // Units: mM; Initial value: 8.01031392415197
            double var_chaste_interface__Cl__Cl_i = rY[42];
            // Units: mM; Initial value: 20.6683603724432
            double var_chaste_interface__K__K_i = rY[44];
            // Units: mM; Initial value: 144.907134343314
            

            const double var_x44 = exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__Vm);
            const double var_x45 = 1.0 + var_x44;
            const double var_x46 = mParameters[14] / var_x45;
            const double var_x62 = 1.0 - var_chaste_interface__IKs__C1 - var_chaste_interface__IKs__C10 - var_chaste_interface__IKs__C11 - var_chaste_interface__IKs__C12 - var_chaste_interface__IKs__C13 - var_chaste_interface__IKs__C14 - var_chaste_interface__IKs__C15 - var_chaste_interface__IKs__C2 - var_chaste_interface__IKs__C3 - var_chaste_interface__IKs__C4 - var_chaste_interface__IKs__C5 - var_chaste_interface__IKs__C6 - var_chaste_interface__IKs__C7 - var_chaste_interface__IKs__C8 - var_chaste_interface__IKs__C9;
            const double var_x63 = 1 / var_chaste_interface__Ca__Ca_i;
            const double var_x64 = pow(var_x63, 1.3999999999999999);
            const double var_x65 = 1.0 + 6.4818210260626455e-7 * var_x64;
            const double var_x66 = 1 / var_x65;
            const double var_x74 = exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__membrane__Vm);
            const double var_x75 = 1.0 + var_x74;
            const double var_x76 = sqrt(mParameters[4]);
            const double var_x77 = var_x76 * mParameters[15] / var_x75;
            const double var_x79 = 1 / var_chaste_interface__K__K_i;
            const double var_x80 = log(var_x79 * mParameters[4]);
            const double var_x81 = 26.712338705498265 * var_x80;
            const double var_x82 = -var_x81 + var_chaste_interface__membrane__Vm;
            const double var_x84 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__Vm - 6.3708927812613361 * var_x80);
            const double var_x85 = 1.0 + var_x84;
            const double var_x86 = 1 / var_x85;
            const double var_x87 = exp(-2.4444678999999998 + 13.738155796237757 * var_x80 - 0.51429999999999998 * var_chaste_interface__membrane__Vm);
            const double var_x88 = 1.0 + var_x87;
            const double var_x89 = 1 / var_x88;
            const double var_x90 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__Vm - 2.1455350448256207 * var_x80);
            const double var_x91 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__Vm - 1.6494869150645177 * var_x80);
            const double var_x92 = var_x91 + 0.49124000000000001 * var_x90;
            const double var_x93 = var_x89 * var_x92;
            const double var_x94 = var_x76 * mParameters[12] / (var_x93 + 1.02 * var_x86);
            const double var_x95 = var_x86 * var_x94;
            const double var_x96 = pow(var_chaste_interface__Ito1_a_gate__a, 3);
            const double var_x97 = exp(0.0018181818181818182 * var_chaste_interface__membrane__Vm);
            const double var_x98 = var_x96 * var_x97 * mParameters[20] * var_chaste_interface__Ito1_i1s_gate__i1s;
            const double var_x99 = var_x98 * var_chaste_interface__Ito1_i1f_gate__i1f;
            const double var_x134 = var_x84 / pow(var_x85, 2);
            const double var_x135 = var_x82 * var_x94;
            const double var_x137 = var_x76 * var_x82;
            const double var_x139 = var_x87 * var_x92 / pow(var_x88, 2);
            const double var_x141 = var_x137 * var_x86 * mParameters[12] / pow((var_x86 + 0.98039215686274506 * var_x93), 2);
            const double var_x174 = 1 / (0.018329999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i);
            const double var_x228 = 1 / var_chaste_interface__Cl__Cl_i;
            const double var_x231 = var_x46 * var_x79;
            const double var_x232 = var_x79 * var_x95;
            const double var_x233 = var_x77 * var_x79 * var_chaste_interface__IKr_xr_gate__xr;
            const double var_x234 = var_x134 * var_x79;
            const double var_x235 = 6.4983106368865622 * var_x234 - var_x89 * (1.053972635420138 * var_x79 * var_x90 + 1.6494869150645177 * var_x79 * var_x91) - 13.738155796237757 * var_x139 * var_x79;
            const double var_x236 = var_x79 * var_x99;
            const double var_x237 = var_x135 * var_x234;
            const double var_x551 = log(100.0 * var_x228);
            const double var_x559 = var_x81 + 26.712338705498265 * var_x551;
            const double var_x560 = 0.00047280839508731927 / (87.825100000000006 + var_x559);
            const double var_x561 = 6.1298221377044294e-8 * var_x559 / pow((1 + 0.30415380916729118 * var_x551 + 0.30415380916729118 * var_x80), 2);
            const double var_x563 = var_x561 * var_x79 - var_x560 * var_x79;
            const double var_x566 = (-6.1702220000015831e-5 - 3.7021332000009499e-5 * var_x66) * mParameters[16];
            const double var_x567 = var_x566 * var_x62;
            const double var_x569 = 2.6031772383887529e-5 * var_x141;
            const double var_x571 = var_x174 * var_x567;
            
            partialF = var_x563 + 0.00017254579424681073 * var_x237 + 26.712338705498265 * var_x571 - 0.00070927691144329649 * var_x233 - 0.0016482105995215921 * var_x231 - 0.0016482105995215921 * var_x236 - 0.00072346244967216237 * var_x232 - var_x235 * var_x569;
        }
        else
        {
            const double y_save = rY[44];
            rY[44] += delta;
            const double temp = EvaluateYDerivative44(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[44])/delta;
            rY[44] = y_save;
        }
        return partialF;
    }
    double Celldecker_2009FromCellMLGRL1::EvaluateYDerivative45(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__CaMK_active__CaMK_trap = rY[45];
        // Units: dimensionless; Initial value: 0.0114911034744777
        

        // Mathematics
        const double var_CaMK_active__CaMK_0 = 0.050000000000000003; // dimensionless
        const double var_CaMK_active__Km = 0.0015; // mM
        const double var_CaMK_active__CaMK_active = (1.0 - var_chaste_interface__CaMK_active__CaMK_trap) * var_CaMK_active__CaMK_0 / (1.0 + var_CaMK_active__Km / var_chaste_interface__Ca__Ca_ss_sr) + var_chaste_interface__CaMK_active__CaMK_trap; // dimensionless
        const double var_CaMK_active__alpha_CaMK = 0.050000000000000003; // per_ms
        const double var_CaMK_active__beta_CaMK = 0.00068000000000000005; // per_ms
        const double d_dt_chaste_interface_var_CaMK_active__CaMK_trap = -var_chaste_interface__CaMK_active__CaMK_trap * var_CaMK_active__beta_CaMK + (-var_chaste_interface__CaMK_active__CaMK_trap + var_CaMK_active__CaMK_active) * var_CaMK_active__CaMK_active * var_CaMK_active__alpha_CaMK; // 1 / ms

        return d_dt_chaste_interface_var_CaMK_active__CaMK_trap;
    }

    double Celldecker_2009FromCellMLGRL1::EvaluatePartialDerivative45(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
            // Units: mM; Initial value: 0.00011296707102434
            double var_chaste_interface__CaMK_active__CaMK_trap = rY[45];
            // Units: dimensionless; Initial value: 0.0114911034744777
            

            const double var_x243 = 1.0 - var_chaste_interface__CaMK_active__CaMK_trap;
            const double var_x244 = 1.0 + 0.0015 / var_chaste_interface__Ca__Ca_ss_sr;
            const double var_x245 = 1 / var_x244;
            const double var_x246 = 0.050000000000000003 * var_x245;
            const double var_x247 = var_x243 * var_x246;
            const double var_x250 = var_x247 + var_chaste_interface__CaMK_active__CaMK_trap;
            const double var_x272 = 1 - var_x246;
            const double var_x572 = 0.0025000000000000005 * var_x245;
            
            partialF = -0.00068000000000000005 - var_x250 * var_x572 + var_x243 * var_x272 * var_x572;
        }
        else
        {
            const double y_save = rY[45];
            rY[45] += delta;
            const double temp = EvaluateYDerivative45(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[45])/delta;
            rY[45] = y_save;
        }
        return partialF;
    }

    std::vector<double> Celldecker_2009FromCellMLGRL1::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__Vm = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -87.4947322902196
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 8.38749860095482e-05
        double var_chaste_interface__IKs__C1 = rY[2];
        // Units: dimensionless; Initial value: 0.476679784307081
        double var_chaste_interface__IKs__C2 = rY[3];
        // Units: dimensionless; Initial value: 0.255181042718489
        double var_chaste_interface__IKs__C3 = rY[4];
        // Units: dimensionless; Initial value: 0.0512272866698557
        double var_chaste_interface__IKs__C4 = rY[5];
        // Units: dimensionless; Initial value: 0.0045705849736195
        double var_chaste_interface__IKs__C5 = rY[6];
        // Units: dimensionless; Initial value: 0.000152923243503507
        double var_chaste_interface__IKs__C6 = rY[7];
        // Units: dimensionless; Initial value: 0.132814156809568
        double var_chaste_interface__IKs__C7 = rY[8];
        // Units: dimensionless; Initial value: 0.053324572164618
        double var_chaste_interface__IKs__C8 = rY[9];
        // Units: dimensionless; Initial value: 0.00713656414955778
        double var_chaste_interface__IKs__C9 = rY[10];
        // Units: dimensionless; Initial value: 0.000318368292970148
        double var_chaste_interface__IKs__C10 = rY[11];
        // Units: dimensionless; Initial value: 0.0138769647384953
        double var_chaste_interface__IKs__C11 = rY[12];
        // Units: dimensionless; Initial value: 0.00371438476499172
        double var_chaste_interface__IKs__C12 = rY[13];
        // Units: dimensionless; Initial value: 0.000248553788631871
        double var_chaste_interface__IKs__C13 = rY[14];
        // Units: dimensionless; Initial value: 0.000644426171899078
        double var_chaste_interface__IKs__C14 = rY[15];
        // Units: dimensionless; Initial value: 8.62495047666861e-05
        double var_chaste_interface__IKs__C15 = rY[16];
        // Units: dimensionless; Initial value: 1.12344645485893e-05
        double var_chaste_interface__IKs__O1 = rY[17];
        // Units: dimensionless; Initial value: 1.05292905767805e-05
        double var_chaste_interface__ICaL__O = rY[19];
        // Units: dimensionless; Initial value: 2.26882961412491e-05
        double var_chaste_interface__ICaL__O_star = rY[21];
        // Units: dimensionless; Initial value: 1.23556404128518e-10
        double var_chaste_interface__INa_m_gate__m = rY[25];
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INa_h_gate__h = rY[26];
        // Units: dimensionless; Initial value: 0.991354143386887
        double var_chaste_interface__INa_j_gate__j = rY[27];
        // Units: dimensionless; Initial value: 0.99709036251243
        double var_chaste_interface__INaL_mL_gate__mL = rY[28];
        // Units: dimensionless; Initial value: 0.00101841101248412
        double var_chaste_interface__INaL_hL_gate__hL = rY[29];
        // Units: dimensionless; Initial value: 0.319611809402137
        double var_chaste_interface__IKr_xr_gate__xr = rY[30];
        // Units: dimensionless; Initial value: 4.06959064407486e-06
        double var_chaste_interface__Ito1_a_gate__a = rY[31];
        // Units: dimensionless; Initial value: 1.76776038804228e-05
        double var_chaste_interface__Ito1_i1f_gate__i1f = rY[32];
        // Units: dimensionless; Initial value: 0.997976503910799
        double var_chaste_interface__Ito1_i1s_gate__i1s = rY[33];
        // Units: dimensionless; Initial value: 0.947581184798815
        double var_chaste_interface__Ito2_i2f_gate__i2f = rY[34];
        // Units: dimensionless; Initial value: 0.996044894628276
        double var_chaste_interface__Irel__Irel = rY[35];
        // Units: mM_per_ms; Initial value: 0.000714227102027745
        double var_chaste_interface__Ca__Ca_NSR = rY[37];
        // Units: mM; Initial value: 1.01475649943057
        double var_chaste_interface__Ca__Ca_ss_sr = rY[38];
        // Units: mM; Initial value: 0.00011296707102434
        double var_chaste_interface__Ca__Ca_ss_CaL = rY[39];
        // Units: mM; Initial value: 0.000119239795531548
        double var_chaste_interface__Na__Na_i = rY[40];
        // Units: mM; Initial value: 8.01031392415197
        double var_chaste_interface__Na__Na_ss_sr = rY[41];
        // Units: mM; Initial value: 8.01033434859049
        double var_chaste_interface__Cl__Cl_i = rY[42];
        // Units: mM; Initial value: 20.6683603724432
        double var_chaste_interface__K__K_i = rY[44];
        // Units: mM; Initial value: 144.907134343314
        double var_chaste_interface__CaMK_active__CaMK_trap = rY[45];
        // Units: dimensionless; Initial value: 0.0114911034744777
        
        // Mathematics
        const double var_CaMK_active__CaMK_0 = 0.050000000000000003; // dimensionless
        const double var_CaMK_active__Km = 0.0015; // mM
        const double var_CaMK_active__CaMK_active = (1.0 - var_chaste_interface__CaMK_active__CaMK_trap) * var_CaMK_active__CaMK_0 / (1.0 + var_CaMK_active__Km / var_chaste_interface__Ca__Ca_ss_sr) + var_chaste_interface__CaMK_active__CaMK_trap; // dimensionless
        const double var_IKs__O2 = 1.0 - var_chaste_interface__IKs__C1 - var_chaste_interface__IKs__C10 - var_chaste_interface__IKs__C11 - var_chaste_interface__IKs__C12 - var_chaste_interface__IKs__C13 - var_chaste_interface__IKs__C14 - var_chaste_interface__IKs__C15 - var_chaste_interface__IKs__C2 - var_chaste_interface__IKs__C3 - var_chaste_interface__IKs__C4 - var_chaste_interface__IKs__C5 - var_chaste_interface__IKs__C6 - var_chaste_interface__IKs__C7 - var_chaste_interface__IKs__C8 - var_chaste_interface__IKs__C9 - var_chaste_interface__IKs__O1; // dimensionless
        const double var_IKs__OKs = var_chaste_interface__IKs__O1 + var_IKs__O2; // dimensionless
        const double var_IKs__gKs = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[16]; // mS_per_uF
        const double var_INaCa__KmCa_act = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__denom_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_i, 2); // dimensionless
        const double var_INaCa__denom_ss_1 = 1.0 + pow(var_INaCa__KmCa_act, 2) / pow(var_chaste_interface__Ca__Ca_ss_sr, 2); // dimensionless
        const double var_INaCa__eta = 0.27000000000000002; // dimensionless
        const double var_INaCa__ksat = 0.32000000000000001; // dimensionless
        const double var_INaK__V_half = -92.0; // mV
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 2.6000000000000001; // mM
        const double var_INaK__sigma = 1.0; // dimensionless
        const double var_Ileak__nsrbar = 15.0; // mM
        const double var_Ileak__Ileak = var_chaste_interface__Ca__Ca_NSR * mParameters[0] / var_Ileak__nsrbar; // mM_per_ms
        const double var_IpCa__KmpCa = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * mParameters[10] / (var_chaste_interface__Ca__Ca_i + var_IpCa__KmpCa); // uA_per_uF
        const double var_IpCa__IpCa_converted = HeartConfig::Instance()->GetCapacitance() * var_IpCa__IpCa; // uA_per_cm2
        const double var_Ito2__Ito2_max_scaling_factor = 1.0; // dimensionless
        const double var_Ito2__kCa_ito2 = 0.40000000000000002; // mM_per_ms
        const double var_Ito2__KCa_ito2 = 1.0 - 1 / (1.0 + pow(var_chaste_interface__Irel__Irel, 2) / pow(var_Ito2__kCa_ito2, 2)); // dimensionless
        const double var_Iup__delta_iupCaMK_bar = 0.75; // dimensionless
        const double var_Iup__delta_kmPLB_bar = 0.00017000000000000001; // mM
        const double var_Iup__kmCaMK = 0.14999999999999999; // mM
        const double var_Iup__delta_iupCaMK = var_CaMK_active__CaMK_active * var_Iup__delta_iupCaMK_bar / (var_CaMK_active__CaMK_active + var_Iup__kmCaMK); // dimensionless
        const double var_Iup__delta_kmPLB = var_CaMK_active__CaMK_active * var_Iup__delta_kmPLB_bar / (var_CaMK_active__CaMK_active + var_Iup__kmCaMK); // mM
        const double var_Iup__kmup = 0.00092000000000000003; // mM
        const double var_Iup__Iup = (1.0 + var_Iup__delta_iupCaMK) * var_chaste_interface__Ca__Ca_i * mParameters[2] / (-var_Iup__delta_kmPLB + var_chaste_interface__Ca__Ca_i + var_Iup__kmup); // mM_per_ms
        const double var_INaK__PNa = pow(var_chaste_interface__Na__Na_i, 3) / pow((var_INaK__kmnai + var_chaste_interface__Na__Na_i), 3); // dimensionless
        const double var_IKp__Kp = 1 / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IKr_r_gate__r = 1 / (1.0 + exp(0.64935064935064934 + 0.064935064935064929 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_Ito1__rto1 = exp(0.0018181818181818182 * var_chaste_interface__membrane__Vm); // dimensionless
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__membrane__Vm) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__Vm) * (0.0096484999999999991 * (-100.0 * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-100.0 * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[19] / (1.0 - exp(-9.9999999999999995e-8))) : (3612.0012202503358 * (-100.0 * exp(0.037435883507802616 * var_chaste_interface__membrane__Vm) + var_chaste_interface__Cl__Cl_i) * mParameters[19] * var_chaste_interface__membrane__Vm / (1.0 - exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_Ito2__Ito2_max * var_Ito2__Ito2_max_scaling_factor * var_Ito2__KCa_ito2 * var_chaste_interface__Ito2_i2f_gate__i2f; // uA_per_uF
        const double var_Ito2__Ito2_converted = HeartConfig::Instance()->GetCapacitance() * var_Ito2__Ito2; // uA_per_cm2
        const double var_membrane__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_ICaL__ICaL_max = ((fabs(var_chaste_interface__membrane__Vm) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__Vm) * (0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (14448.004881001343 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_ss_CaL * exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)) * mParameters[6] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_ICaL__ICaL = (var_chaste_interface__ICaL__O + var_chaste_interface__ICaL__O_star) * var_ICaL__ICaL_max; // uA_per_uF
        const double var_ICaL__ICaL_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaL; // uA_per_cm2
        const double var_ICab__ICab = ((fabs(var_chaste_interface__membrane__Vm) < 1.3356169352749131e-6) ? (374358.83507802623 * (1.3356169352749131e-6 + var_chaste_interface__membrane__Vm) * (0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(9.9999999999999995e-8)) + 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.019296999999999998 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[7] / (-1.0 + exp(-9.9999999999999995e-8))) : (14448.004881001343 * (-0.34100000000000003 * mParameters[3] + var_chaste_interface__Ca__Ca_i * exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)) * mParameters[7] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.074871767015605231 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_ICab__ICab_converted = HeartConfig::Instance()->GetCapacitance() * var_ICab__ICab; // uA_per_cm2
        const double var_INaCa__denom_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_i + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_i / var_INaCa__KmCai) * mParameters[3]; // mM4
        const double var_INaCa__denom_ss_3 = pow(var_INaCa__KmNao, 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(var_chaste_interface__Na__Na_ss_sr, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_chaste_interface__Ca__Ca_ss_sr / var_INaCa__KmCai) * mParameters[3]; // mM4
        const double var_model_parameters__Cl_o = 100.0; // mM
        const double var_model_parameters__F = 96485.0; // C_per_mole
        const double var_IK1__gK1 = 0.43033148291193518 * sqrt(mParameters[4]) * mParameters[12]; // mS_per_uF
        const double var_IKr__gKr = 0.43033148291193518 * sqrt(mParameters[4]) * mParameters[15]; // mS_per_uF
        const double var_INaK__PK = mParameters[4] / (var_INaK__kmko + mParameters[4]); // dimensionless
        const double var_INaCa__denom_4 = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[3] + pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_i + pow(mParameters[5], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INaCa__denom_ss_4 = pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] + pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr + pow(mParameters[5], 3) * (1.0 + pow(var_chaste_interface__Na__Na_ss_sr, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INab__INab = ((fabs(var_chaste_interface__membrane__Vm) < 2.6712338705498262e-6) ? (187179.41753901311 * (2.6712338705498262e-6 + var_chaste_interface__membrane__Vm) * (0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) : (3612.0012202503358 * (-mParameters[5] + var_chaste_interface__Na__Na_i * exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)) * mParameters[9] * var_chaste_interface__membrane__Vm / (-1.0 + exp(0.037435883507802616 * var_chaste_interface__membrane__Vm)))); // uA_per_uF
        const double var_INab__INab_converted = HeartConfig::Instance()->GetCapacitance() * var_INab__INab; // uA_per_cm2
        const double var_model_parameters__R = 8314.0; // J_per_kmole_K
        const double var_model_parameters__T = 310.0; // kelvin
        const double var_INaCa__denom_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__denom_ss_2 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)); // dimensionless
        const double var_INaCa__num_ss = 0.20000000000000001 * (pow(var_chaste_interface__Na__Na_ss_sr, 3) * mParameters[3] * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_ss_sr * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * mParameters[17]; // mM4_uA_per_uF
        const double var_INaCa__INaCa_ss_sr = var_INaCa__num_ss / ((var_INaCa__denom_ss_3 + var_INaCa__denom_ss_4) * var_INaCa__denom_ss_1 * var_INaCa__denom_ss_2); // uA_per_uF
        const double var_INaCa__INaCa_ss_sr_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa__INaCa_ss_sr; // uA_per_cm2
        const double var_INaCa__numerator = 0.80000000000000004 * (pow(var_chaste_interface__Na__Na_i, 3) * mParameters[3] * exp(var_INaCa__eta * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T)) - pow(mParameters[5], 3) * var_chaste_interface__Ca__Ca_i * exp((-1.0 + var_INaCa__eta) * var_chaste_interface__membrane__Vm * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T))) * mParameters[17]; // mM4_uA_per_uF
        const double var_INaCa__INaCa_cai = var_INaCa__numerator / ((var_INaCa__denom_3 + var_INaCa__denom_4) * var_INaCa__denom_1 * var_INaCa__denom_2); // uA_per_uF
        const double var_INaCa__INaCa = var_INaCa__INaCa_cai + var_INaCa__INaCa_ss_sr; // uA_per_uF
        const double var_INaCa__INaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa__INaCa; // uA_per_cm2
        const double var_INaK__phi = (-var_INaK__V_half + var_chaste_interface__membrane__Vm) * var_INaK__sigma * var_model_parameters__F / (var_model_parameters__R * var_model_parameters__T); // dimensionless
        const double var_INaK__fv = 1 / (1.0 + exp(-var_INaK__phi)); // dimensionless
        const double var_INaK__INaK = var_INaK__PK * var_INaK__PNa * var_INaK__fv * mParameters[18]; // uA_per_uF
        const double var_INaK__INaK_converted = HeartConfig::Instance()->GetCapacitance() * var_INaK__INaK; // uA_per_cm2
        const double var_reversal_potentials__ECl = -var_model_parameters__R * var_model_parameters__T * log(var_model_parameters__Cl_o / var_chaste_interface__Cl__Cl_i) / var_model_parameters__F; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__membrane__Vm) * mParameters[8]; // uA_per_uF
        const double var_IClb__IClb_converted = HeartConfig::Instance()->GetCapacitance() * var_IClb__IClb; // uA_per_cm2
        const double var_reversal_potentials__EK = var_model_parameters__R * var_model_parameters__T * log(mParameters[4] / var_chaste_interface__K__K_i) / var_model_parameters__F; // mV
        const double var_IK1_K1_gate__alpha_k1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane__Vm - 0.23849999999999999 * var_reversal_potentials__EK)); // dimensionless
        const double var_IK1_K1_gate__beta_k1 = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane__Vm - 0.080320000000000003 * var_reversal_potentials__EK) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane__Vm - 0.061749999999999999 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__membrane__Vm)); // dimensionless
        const double var_IK1_K1_gate__K1 = var_IK1_K1_gate__alpha_k1 / (var_IK1_K1_gate__alpha_k1 + var_IK1_K1_gate__beta_k1); // dimensionless
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IK1__gK1 * var_IK1_K1_gate__K1; // uA_per_uF
        const double var_IK1__IK1_converted = HeartConfig::Instance()->GetCapacitance() * var_IK1__IK1; // uA_per_cm2
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKp__Kp * mParameters[14]; // uA_per_uF
        const double var_IKp__IKp_converted = HeartConfig::Instance()->GetCapacitance() * var_IKp__IKp; // uA_per_cm2
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * var_IKr__gKr * var_IKr_r_gate__r * var_chaste_interface__IKr_xr_gate__xr; // uA_per_uF
        const double var_IKr__IKr_converted = HeartConfig::Instance()->GetCapacitance() * var_IKr__IKr; // uA_per_cm2
        const double var_Ito1__Ito1 = pow(var_chaste_interface__Ito1_a_gate__a, 3) * (-var_reversal_potentials__EK + var_chaste_interface__membrane__Vm) * mParameters[20] * var_Ito1__rto1 * var_chaste_interface__Ito1_i1f_gate__i1f * var_chaste_interface__Ito1_i1s_gate__i1s; // uA_per_uF
        const double var_Ito1__Ito1_converted = HeartConfig::Instance()->GetCapacitance() * var_Ito1__Ito1; // uA_per_cm2
        const double var_reversal_potentials__ENa = var_model_parameters__R * var_model_parameters__T * log(mParameters[5] / var_chaste_interface__Na__Na_i) / var_model_parameters__F; // mV
        const double var_INa__INa = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * mParameters[11] * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INa__INa_converted = HeartConfig::Instance()->GetCapacitance() * var_INa__INa; // uA_per_cm2
        const double var_INaL__INaL = pow(var_chaste_interface__INaL_mL_gate__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__Vm) * mParameters[13] * var_chaste_interface__INaL_hL_gate__hL; // uA_per_uF
        const double var_INaL__INaL_converted = HeartConfig::Instance()->GetCapacitance() * var_INaL__INaL; // uA_per_cm2
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = var_model_parameters__R * var_model_parameters__T * log((mParameters[5] * var_reversal_potentials__prnak + mParameters[4]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_model_parameters__F; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__Vm) * var_IKs__OKs * var_IKs__gKs; // uA_per_uF
        const double var_IKs__IKs_converted = HeartConfig::Instance()->GetCapacitance() * var_IKs__IKs; // uA_per_cm2

        std::vector<double> dqs(20);
        dqs[0] = var_Ileak__Ileak;
        dqs[1] = var_Iup__Iup;
        dqs[2] = var_ICaL__ICaL_converted;
        dqs[3] = var_ICab__ICab_converted;
        dqs[4] = var_IClb__IClb_converted;
        dqs[5] = var_INab__INab_converted;
        dqs[6] = var_IpCa__IpCa_converted;
        dqs[7] = var_INa__INa_converted;
        dqs[8] = var_IK1__IK1_converted;
        dqs[9] = var_INaL__INaL_converted;
        dqs[10] = var_IKp__IKp_converted;
        dqs[11] = var_IKr__IKr_converted;
        dqs[12] = var_IKs__IKs_converted;
        dqs[13] = var_INaCa__INaCa_converted;
        dqs[14] = var_INaCa__INaCa_ss_sr_converted;
        dqs[15] = var_INaK__INaK_converted;
        dqs[16] = var_membrane__i_Stim_converted;
        dqs[17] = var_Ito2__Ito2_converted;
        dqs[18] = var_Ito1__Ito1_converted;
        dqs[19] = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Celldecker_2009FromCellMLGRL1>::Initialise(void)
{
    this->mSystemName = "decker_2009";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "ms";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-87.4947322902196);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(8.38749860095482e-05);

    // rY[2]:
    this->mVariableNames.push_back("IKs__C1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.476679784307081);

    // rY[3]:
    this->mVariableNames.push_back("IKs__C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.255181042718489);

    // rY[4]:
    this->mVariableNames.push_back("IKs__C3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0512272866698557);

    // rY[5]:
    this->mVariableNames.push_back("IKs__C4");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0045705849736195);

    // rY[6]:
    this->mVariableNames.push_back("IKs__C5");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000152923243503507);

    // rY[7]:
    this->mVariableNames.push_back("IKs__C6");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.132814156809568);

    // rY[8]:
    this->mVariableNames.push_back("IKs__C7");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.053324572164618);

    // rY[9]:
    this->mVariableNames.push_back("IKs__C8");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00713656414955778);

    // rY[10]:
    this->mVariableNames.push_back("IKs__C9");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000318368292970148);

    // rY[11]:
    this->mVariableNames.push_back("IKs__C10");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0138769647384953);

    // rY[12]:
    this->mVariableNames.push_back("IKs__C11");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00371438476499172);

    // rY[13]:
    this->mVariableNames.push_back("IKs__C12");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000248553788631871);

    // rY[14]:
    this->mVariableNames.push_back("IKs__C13");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000644426171899078);

    // rY[15]:
    this->mVariableNames.push_back("IKs__C14");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.62495047666861e-05);

    // rY[16]:
    this->mVariableNames.push_back("IKs__C15");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.12344645485893e-05);

    // rY[17]:
    this->mVariableNames.push_back("IKs__O1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.05292905767805e-05);

    // rY[18]:
    this->mVariableNames.push_back("ICaL__C");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99996982093287);

    // rY[19]:
    this->mVariableNames.push_back("ICaL__O");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.26882961412491e-05);

    // rY[20]:
    this->mVariableNames.push_back("ICaL__C_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(7.49117189549873e-06);

    // rY[21]:
    this->mVariableNames.push_back("ICaL__O_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.23556404128518e-10);

    // rY[22]:
    this->mVariableNames.push_back("ICaL__CI");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.89853003114132e-11);

    // rY[23]:
    this->mVariableNames.push_back("ICaL__OI");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.01952813127322e-17);

    // rY[24]:
    this->mVariableNames.push_back("ICaL__CI_star");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.9237001017021e-09);

    // rY[25]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00101841101248412);

    // rY[26]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.991354143386887);

    // rY[27]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99709036251243);

    // rY[28]:
    this->mVariableNames.push_back("INaL_mL_gate__mL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00101841101248412);

    // rY[29]:
    this->mVariableNames.push_back("INaL_hL_gate__hL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.319611809402137);

    // rY[30]:
    this->mVariableNames.push_back("IKr_xr_gate__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(4.06959064407486e-06);

    // rY[31]:
    this->mVariableNames.push_back("Ito1_a_gate__a");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.76776038804228e-05);

    // rY[32]:
    this->mVariableNames.push_back("Ito1_i1f_gate__i1f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.997976503910799);

    // rY[33]:
    this->mVariableNames.push_back("Ito1_i1s_gate__i1s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.947581184798815);

    // rY[34]:
    this->mVariableNames.push_back("Ito2_i2f_gate__i2f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.996044894628276);

    // rY[35]:
    this->mVariableNames.push_back("SR_release_current");
    this->mVariableUnits.push_back("mM_per_ms");
    this->mInitialConditions.push_back(0.000714227102027745);

    // rY[36]:
    this->mVariableNames.push_back("Ca__Ca_JSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.993914988616979);

    // rY[37]:
    this->mVariableNames.push_back("Ca__Ca_NSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(1.01475649943057);

    // rY[38]:
    this->mVariableNames.push_back("Ca__Ca_ss_sr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00011296707102434);

    // rY[39]:
    this->mVariableNames.push_back("Ca__Ca_ss_CaL");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.000119239795531548);

    // rY[40]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(8.01031392415197);

    // rY[41]:
    this->mVariableNames.push_back("dyadic_space_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(8.01033434859049);

    // rY[42]:
    this->mVariableNames.push_back("cytosolic_chloride_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(20.6683603724432);

    // rY[43]:
    this->mVariableNames.push_back("dyadic_space_chloride_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(20.6683605553303);

    // rY[44]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(144.907134343314);

    // rY[45]:
    this->mVariableNames.push_back("CaMK_active__CaMK_trap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0114911034744777);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("mM_per_ms");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("mM_per_uA_per_uF_per_ms_per_ms");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("mM_per_ms");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("L_per_F_ms");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_background_calcium_current_conductance");
    this->mParameterUnits.push_back("L_per_F_ms");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_background_chloride_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_background_sodium_current_conductance");
    this->mParameterUnits.push_back("L_per_F_ms");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_calcium_pump_current_conductance");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_persistent_sodium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_potassium_pump_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[18]:
    this->mParameterNames.push_back("membrane_sodium_potassium_pump_current_permeability");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[19]:
    this->mParameterNames.push_back("membrane_transient_outward_chloride_current_conductance");
    this->mParameterUnits.push_back("L_per_F_ms");

    // mParameters[20]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_leak_current");
    this->mDerivedQuantityUnits.push_back("mM_per_ms");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("SR_uptake_current");
    this->mDerivedQuantityUnits.push_back("mM_per_ms");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_background_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_background_chloride_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_background_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_calcium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_persistent_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_dyadic_space_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [17]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_chloride_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [18]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [19]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("ms");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Celldecker_2009FromCellMLGRL1)

