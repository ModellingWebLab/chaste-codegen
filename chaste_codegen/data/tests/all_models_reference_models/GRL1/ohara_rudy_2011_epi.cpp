//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: ohara_rudy_2011_epi
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: GeneralizedRushLarsenFirstOrder)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "ohara_rudy_2011_epi.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"


    boost::shared_ptr<RegularStimulus> Cellohara_rudy_2011_epiFromCellMLGRL1::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__i_Stim_Amplitude_converted = -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__i_Stim_End = 1.0e+17; // millisecond
        const double var_chaste_interface__membrane__i_Stim_Period = 1000.0; // millisecond
        const double var_chaste_interface__membrane__i_Stim_PulseDuration = 0.5; // millisecond
        const double var_chaste_interface__membrane__i_Stim_Start = 10.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__i_Stim_Amplitude_converted),
                var_chaste_interface__membrane__i_Stim_PulseDuration,
                var_chaste_interface__membrane__i_Stim_Period,
                var_chaste_interface__membrane__i_Stim_Start, var_chaste_interface__membrane__i_Stim_End
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Cellohara_rudy_2011_epiFromCellMLGRL1::Cellohara_rudy_2011_epiFromCellMLGRL1(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractGeneralizedRushLarsenCardiacCell(
                41,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellohara_rudy_2011_epiFromCellMLGRL1>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 1.0; // (var_ryr__Jrel_scaling_factor) [dimensionless]
        this->mParameters[1] = 1.0; // (var_SERCA__Jup_b) [dimensionless]
        this->mParameters[2] = 1.8; // (var_extracellular__cao) [millimolar]
        this->mParameters[3] = 5.4000000000000004; // (var_extracellular__ko) [millimolar]
        this->mParameters[4] = 140.0; // (var_extracellular__nao) [millimolar]
        this->mParameters[5] = 96485.0; // (var_physical_constants__F) [coulomb_per_mole]
        this->mParameters[6] = 8314.0; // (var_physical_constants__R) [joule_per_kilomole_kelvin]
        this->mParameters[7] = 0.0001; // (var_ICaL__PCa_b) [dimensionless]
        this->mParameters[8] = 2.4999999999999999e-8; // (var_ICab__PCab) [milliS_per_microF]
        this->mParameters[9] = 0.0030000000000000001; // (var_IKb__GKb_b) [milliS_per_microF]
        this->mParameters[10] = 0.00050000000000000001; // (var_IpCa__GpCa) [milliS_per_microF]
        this->mParameters[11] = 75.0; // (var_INa__GNa) [milliS_per_microF]
        this->mParameters[12] = 0.1908; // (var_IK1__GK1_b) [milliS_per_microF]
        this->mParameters[13] = 0.0074999999999999997; // (var_INaL__GNaL_b) [milliS_per_microF]
        this->mParameters[14] = 0.045999999999999999; // (var_IKr__GKr_b) [milliS_per_microF]
        this->mParameters[15] = 0.0033999999999999998; // (var_IKs__GKs_b) [milliS_per_microF]
        this->mParameters[16] = 0.00080000000000000004; // (var_INaCa_i__Gncx_b) [milliS_per_microF]
        this->mParameters[17] = 30.0; // (var_INaK__Pnak_b) [milliS_per_microF]
        this->mParameters[18] = 0.02; // (var_Ito__Gto_b) [milliS_per_microF]
        this->mParameters[19] = 310.0; // (var_physical_constants__T) [kelvin]
    }

    Cellohara_rudy_2011_epiFromCellMLGRL1::~Cellohara_rudy_2011_epiFromCellMLGRL1()
    {
    }

    
    double Cellohara_rudy_2011_epiFromCellMLGRL1::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__nai = rY[3];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__nass = rY[4];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__ki = rY[5];
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__kss = rY[6];
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__INa__m = rY[10];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INa__hf = rY[11];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hs = rY[12];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__j = rY[13];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hsp = rY[14];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__jp = rY[15];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__mL = rY[16];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INaL__hL = rY[17];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__hLp = rY[18];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__a = rY[19];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ito__iF = rY[20];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__iS = rY[21];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__ap = rY[22];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ito__iFp = rY[23];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__iSp = rY[24];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__nca = rY[33];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrf = rY[34];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrs = rY[35];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs1 = rY[36];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs2 = rY[37];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IK1__xk1 = rY[38];
        // Units: dimensionless; Initial value: 1.0
        
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_ICaL__Aff = 0.59999999999999998; // dimensionless
        const double var_ICaL__Afs = 1.0 - var_ICaL__Aff; // dimensionless
        const double var_ICaL__f = var_ICaL__Aff * var_chaste_interface__ICaL__ff + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__fp = var_ICaL__Aff * var_chaste_interface__ICaL__ffp + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_INa__Ahf = 0.98999999999999999; // dimensionless
        const double var_INa__Ahs = 1.0 - var_INa__Ahf; // dimensionless
        const double var_INa__h = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hs; // dimensionless
        const double var_INa__hp = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hsp; // dimensionless
        const double var_INaCa_i__KmCaAct = 0.00014999999999999999; // millimolar
        const double var_INaCa_i__kasymm = 12.5; // dimensionless
        const double var_INaCa_i__kcaoff = 5000.0; // per_millisecond
        const double var_INaCa_i__k2_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k2_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__kcaon = 1500000.0; // per_millisecond
        const double var_INaCa_i__kna1 = 15.0; // per_millisecond
        const double var_INaCa_i__kna2 = 5.0; // per_millisecond
        const double var_INaCa_i__kna3 = 88.120000000000005; // per_millisecond
        const double var_INaCa_i__qca = 0.16700000000000001; // dimensionless
        const double var_INaCa_i__qna = 0.52239999999999998; // dimensionless
        const double var_INaCa_i__wca = 60000.0; // dimensionless
        const double var_INaCa_i__wna = 60000.0; // dimensionless
        const double var_INaCa_i__wnaca = 5000.0; // dimensionless
        const double var_INaK__H = 9.9999999999999995e-8; // millimolar
        const double var_INaK__Khp = 1.698e-7; // millimolar
        const double var_INaK__Kki = 0.5; // per_millisecond
        const double var_INaK__Kko = 0.35820000000000002; // per_millisecond
        const double var_INaK__Kmgatp = 1.698e-7; // millimolar
        const double var_INaK__Knai0 = 9.0730000000000004; // millimolar
        const double var_INaK__Knao0 = 27.780000000000001; // millimolar
        const double var_INaK__Knap = 224.0; // millimolar
        const double var_INaK__Kxkur = 292.0; // millimolar
        const double var_INaK__MgADP = 0.050000000000000003; // millimolar
        const double var_INaK__MgATP = 9.8000000000000007; // millimolar
        const double var_INaK__delta = -0.155; // millivolt
        const double var_INaK__eP = 4.2000000000000002; // dimensionless
        const double var_INaK__k1m = 182.40000000000001; // per_millisecond
        const double var_INaK__b1 = var_INaK__MgADP * var_INaK__k1m; // dimensionless
        const double var_INaK__k1p = 949.5; // per_millisecond
        const double var_INaK__k2m = 39.399999999999999; // per_millisecond
        const double var_INaK__k2p = 687.20000000000005; // per_millisecond
        const double var_INaK__a2 = var_INaK__k2p; // dimensionless
        const double var_INaK__k3m = 79300.0; // per_millisecond
        const double var_INaK__k3p = 1899.0; // per_millisecond
        const double var_INaK__k4m = 40.0; // per_millisecond
        const double var_INaK__k4p = 639.0; // per_millisecond
        const double var_INaK__a4 = var_INaK__MgATP * var_INaK__k4p / ((1.0 + var_INaK__MgATP / var_INaK__Kmgatp) * var_INaK__Kmgatp); // dimensionless
        const double var_INab__PNab = 3.75e-10; // milliS_per_microF
        const double var_IpCa__KmCap = 0.00050000000000000001; // millimolar
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[7]) : ((var_environment__celltype == 2.0) ? (2.5 * mParameters[7]) : (mParameters[7]))); // dimensionless
        const double var_ICaL__PCaK = 0.00035740000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaNa = 0.00125 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaKp = 0.00035740000000000001 * var_ICaL__PCap; // dimensionless
        const double var_ICaL__PCaNap = 0.00125 * var_ICaL__PCap; // dimensionless
        const double var_IK1__GK1 = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[12]) : ((var_environment__celltype == 2.0) ? (1.3 * mParameters[12]) : (mParameters[12]))); // milliS_per_microF
        const double var_IKb__GKb = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[9]) : (mParameters[9])); // milliS_per_microF
        const double var_IKr__GKr = ((var_environment__celltype == 1.0) ? (1.3 * mParameters[14]) : ((var_environment__celltype == 2.0) ? (0.80000000000000004 * mParameters[14]) : (mParameters[14]))); // milliS_per_microF
        const double var_IKs__GKs = ((var_environment__celltype == 1.0) ? (1.3999999999999999 * mParameters[15]) : (mParameters[15])); // milliS_per_microF
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * mParameters[16]) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * mParameters[16]) : (mParameters[16]))); // milliS_per_microF
        const double var_INaK__Pnak = ((var_environment__celltype == 1.0) ? (0.90000000000000002 * mParameters[17]) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * mParameters[17]) : (mParameters[17]))); // milliS_per_microF
        const double var_INaL__GNaL = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[13]) : (mParameters[13])); // milliS_per_microF
        const double var_Ito__Gto = (((var_environment__celltype == 1.0) || (var_environment__celltype == 2.0)) ? (4.0 * mParameters[18]) : (mParameters[18])); // milliS_per_microF
        const double var_IK1__GK1_total = sqrt(mParameters[3]) * var_IK1__GK1; // milliS_per_microF
        const double var_IKr__GKr_total = 0.43033148291193518 * sqrt(mParameters[3]) * var_IKr__GKr; // milliS_per_microF
        const double var_INaCa_i__h10_i = 1.0 + (1.0 + mParameters[4] / var_INaCa_i__kna2) * mParameters[4] / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h10_ss = 1.0 + (1.0 + mParameters[4] / var_INaCa_i__kna2) * mParameters[4] / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h11_i = pow(mParameters[4], 2) / (var_INaCa_i__h10_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h11_ss = pow(mParameters[4], 2) / (var_INaCa_i__h10_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h12_i = 1 / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__h12_ss = 1 / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__k1_i = var_INaCa_i__h12_i * var_INaCa_i__kcaon * mParameters[2]; // dimensionless
        const double var_INaCa_i__k1_ss = var_INaCa_i__h12_ss * var_INaCa_i__kcaon * mParameters[2]; // dimensionless
        const double var_IKs__KsCa = 1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__cai), 1.3999999999999999)); // dimensionless
        const double var_IKs__GKs_total = var_IKs__GKs * var_IKs__KsCa; // milliS_per_microF
        const double var_INaCa_i__allo_i = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cai, 2)); // dimensionless
        const double var_IpCa__IpCa = mParameters[10] * var_chaste_interface__intracellular_ions__cai / (var_IpCa__KmCap + var_chaste_interface__intracellular_ions__cai); // microA_per_microF
        const double var_IpCa__IpCa_converted = HeartConfig::Instance()->GetCapacitance() * var_IpCa__IpCa; // uA_per_cm2
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INa__fINap = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__allo_ss = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cass, 2)); // dimensionless
        const double var_INaL__fINaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_Ito__fItop = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__h4_i = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_i = pow(var_chaste_interface__intracellular_ions__nai, 2) / (var_INaCa_i__h4_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_i = 1 / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k6_i = var_INaCa_i__h6_i * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cai; // dimensionless
        const double var_INaK__P = var_INaK__eP / (1.0 + var_INaK__H / var_INaK__Khp + var_chaste_interface__intracellular_ions__nai / var_INaK__Knap + var_chaste_interface__intracellular_ions__ki / var_INaK__Kxkur); // dimensionless
        const double var_INaK__b3 = var_INaK__H * var_INaK__P * var_INaK__k3m / (1.0 + var_INaK__MgATP / var_INaK__Kmgatp); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_ss = pow(var_chaste_interface__intracellular_ions__nass, 2) / (var_INaCa_i__h4_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_ss = 1 / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k6_ss = var_INaCa_i__h6_ss * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cass; // dimensionless
        const double var_ICaL__Afcaf = 0.29999999999999999 + 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_IK1__rk1 = 1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * mParameters[3])); // millisecond
        const double var_IKb__xkb = 1 / (1.0 + exp(0.78953107960741553 - 0.054525627044711013 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrf = 1 / (1.0 + exp(1.4344412457471867 + 0.026171159382360639 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrs = 1.0 - var_IKr__Axrf; // dimensionless
        const double var_IKr__rkr = 1 / ((1.0 + exp(0.73333333333333328 + 0.013333333333333334 * var_chaste_interface__membrane__v)) * (1.0 + exp(-0.33333333333333331 + 0.033333333333333333 * var_chaste_interface__membrane__v))); // dimensionless
        const double var_IKr__xr = var_IKr__Axrf * var_chaste_interface__IKr__xrf + var_IKr__Axrs * var_chaste_interface__IKr__xrs; // dimensionless
        const double var_Ito__AiF = 1 / (1.0 + exp(-1.4126984126984128 + 0.0066137566137566143 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__AiS = 1.0 - var_Ito__AiF; // dimensionless
        const double var_Ito__i = var_Ito__AiF * var_chaste_interface__Ito__iF + var_Ito__AiS * var_chaste_interface__Ito__iS; // dimensionless
        const double var_Ito__ip = var_Ito__AiF * var_chaste_interface__Ito__iFp + var_Ito__AiS * var_chaste_interface__Ito__iSp; // dimensionless
        const double var_INaCa_i__hca = exp(var_INaCa_i__qca * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__hna = exp(var_INaCa_i__qna * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h2_i = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / (var_INaCa_i__h1_i * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h2_ss = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / (var_INaCa_i__h1_ss * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h3_i = 1 / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h3_ss = 1 / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * mParameters[4] / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * mParameters[4] / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h8_i = mParameters[4] / (var_INaCa_i__h7_i * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h8_ss = mParameters[4] / (var_INaCa_i__h7_ss * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h9_i = 1 / var_INaCa_i__h7_i; // dimensionless
        const double var_INaCa_i__h9_ss = 1 / var_INaCa_i__h7_ss; // dimensionless
        const double var_INaCa_i__k3p_i = var_INaCa_i__h9_i * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3p_ss = var_INaCa_i__h9_ss * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3pp_i = var_INaCa_i__h8_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_i = var_INaCa_i__k3p_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = var_INaCa_i__h8_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_ss = var_INaCa_i__k3p_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4p_i = var_INaCa_i__h3_i * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4p_ss = var_INaCa_i__h3_ss * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4pp_i = var_INaCa_i__h2_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_i = var_INaCa_i__k4p_i + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = var_INaCa_i__h2_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_ss = var_INaCa_i__k4p_ss + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = var_INaCa_i__h2_i * var_INaCa_i__h5_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k7_ss = var_INaCa_i__h2_ss * var_INaCa_i__h5_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_i = var_INaCa_i__h11_i * var_INaCa_i__h8_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_ss = var_INaCa_i__h11_ss * var_INaCa_i__h8_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__x1_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k5_i * var_INaCa_i__k7_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k2_i * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k5_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i; // dimensionless
        const double var_INaCa_i__x2_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss; // dimensionless
        const double var_INaCa_i__x3_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i * var_INaCa_i__k5_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k2_i * var_INaCa_i__k8_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E3_i = var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E4_i = var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__JncxCa_i = var_INaCa_i__E2_i * var_INaCa_i__k2_i - var_INaCa_i__E1_i * var_INaCa_i__k1_i; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_i = var_INaCa_i__E3_i * var_INaCa_i__k4pp_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i + 3.0 * var_INaCa_i__E4_i * var_INaCa_i__k7_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i; // millimolar_per_millisecond
        const double var_INaCa_i__x4_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss * var_INaCa_i__k5_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k8_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E3_ss = var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E4_ss = var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__JncxCa_ss = var_INaCa_i__E2_ss * var_INaCa_i__k2_ss - var_INaCa_i__E1_ss * var_INaCa_i__k1_ss; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_ss = var_INaCa_i__E3_ss * var_INaCa_i__k4pp_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss + 3.0 * var_INaCa_i__E4_ss * var_INaCa_i__k7_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss; // millimolar_per_millisecond
        const double var_INaK__Knai = var_INaK__Knai0 * exp(0.33333333333333331 * var_INaK__delta * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // millimolar
        const double var_INaK__Knao = var_INaK__Knao0 * exp(0.33333333333333331 * (1.0 - var_INaK__delta) * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // millimolar
        const double var_INaK__a1 = pow(var_chaste_interface__intracellular_ions__nai, 3) * var_INaK__k1p / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = pow(mParameters[3], 2) * var_INaK__k3p / ((-1.0 + pow((1.0 + mParameters[3] / var_INaK__Kko), 2) + pow((1.0 + mParameters[4] / var_INaK__Knao), 3)) * pow(var_INaK__Kko, 2)); // dimensionless
        const double var_INaK__b2 = pow(mParameters[4], 3) * var_INaK__k2m / ((-1.0 + pow((1.0 + mParameters[3] / var_INaK__Kko), 2) + pow((1.0 + mParameters[4] / var_INaK__Knao), 3)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = pow(var_chaste_interface__intracellular_ions__ki, 2) * var_INaK__k4m / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Kki, 2)); // dimensionless
        const double var_INaK__x1 = var_INaK__a1 * var_INaK__a2 * var_INaK__a4 + var_INaK__a1 * var_INaK__a2 * var_INaK__b3 + var_INaK__a2 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = var_INaK__a1 * var_INaK__a2 * var_INaK__a3 + var_INaK__a2 * var_INaK__a3 * var_INaK__b4 + var_INaK__a3 * var_INaK__b1 * var_INaK__b4 + var_INaK__b1 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = var_INaK__a2 * var_INaK__a3 * var_INaK__a4 + var_INaK__a3 * var_INaK__a4 * var_INaK__b1 + var_INaK__a4 * var_INaK__b1 * var_INaK__b2 + var_INaK__b1 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = var_INaK__a1 * var_INaK__a3 * var_INaK__a4 + var_INaK__a1 * var_INaK__a4 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__E1 = var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E2 = var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E3 = var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E4 = var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__JnakK = 2.0 * var_INaK__E4 * var_INaK__b1 - 2.0 * var_INaK__E3 * var_INaK__a1; // millimolar_per_millisecond
        const double var_INaK__JnakNa = 3.0 * var_INaK__E1 * var_INaK__a3 - 3.0 * var_INaK__E2 * var_INaK__b3; // millimolar_per_millisecond
        const double var_membrane__vffrt = pow(mParameters[5], 2) * var_chaste_interface__membrane__v / (mParameters[6] * mParameters[19]); // coulomb_per_mole
        const double var_membrane__vfrt = var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19]); // dimensionless
        const double var_ICaL__PhiCaK = (-0.75 * mParameters[3] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaK = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaK * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaKp * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaK_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaK; // uA_per_cm2
        const double var_ICaL__PhiCaL = 4.0 * (-0.34100000000000003 * mParameters[2] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(2.0 * var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCa * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCap * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaL_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaL; // uA_per_cm2
        const double var_ICaL__PhiCaNa = (-0.75 * mParameters[4] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaNa = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNa * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNap * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaNa_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaNa; // uA_per_cm2
        const double var_ICab__ICab = 4.0 * (-0.34100000000000003 * mParameters[2] + var_chaste_interface__intracellular_ions__cai * exp(2.0 * var_membrane__vfrt)) * mParameters[8] * var_membrane__vffrt / (-1.0 + exp(2.0 * var_membrane__vfrt)); // microA_per_microF
        const double var_ICab__ICab_converted = HeartConfig::Instance()->GetCapacitance() * var_ICab__ICab; // uA_per_cm2
        const double var_INab__INab = (-mParameters[4] + var_chaste_interface__intracellular_ions__nai * exp(var_membrane__vfrt)) * var_INab__PNab * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // microA_per_microF
        const double var_physical_constants__zca = 2.0; // dimensionless
        const double var_physical_constants__zk = 1.0; // dimensionless
        const double var_physical_constants__zna = 1.0; // dimensionless
        const double var_INaCa_i__INaCa_i = 0.80000000000000004 * (var_INaCa_i__JncxCa_i * var_physical_constants__zca + var_INaCa_i__JncxNa_i * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_i; // microA_per_microF
        const double var_INaCa_i__INaCa_i_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__INaCa_i; // uA_per_cm2
        const double var_INaCa_i__INaCa_ss = 0.20000000000000001 * (var_INaCa_i__JncxCa_ss * var_physical_constants__zca + var_INaCa_i__JncxNa_ss * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_ss; // microA_per_microF
        const double var_INaCa_i__INaCa_ss_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__INaCa_ss; // uA_per_cm2
        const double var_INaK__INaK = (var_INaK__JnakK * var_physical_constants__zk + var_INaK__JnakNa * var_physical_constants__zna) * var_INaK__Pnak; // microA_per_microF
        const double var_INaK__INaK_converted = HeartConfig::Instance()->GetCapacitance() * var_INaK__INaK; // uA_per_cm2
        const double var_reversal_potentials__EK = mParameters[6] * mParameters[19] * log(mParameters[3] / var_chaste_interface__intracellular_ions__ki) / mParameters[5]; // millivolt
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IK1__GK1_total * var_IK1__rk1 * var_chaste_interface__IK1__xk1; // microA_per_microF
        const double var_IK1__IK1_converted = HeartConfig::Instance()->GetCapacitance() * var_IK1__IK1; // uA_per_cm2
        const double var_IKb__IKb = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKb__GKb * var_IKb__xkb; // microA_per_microF
        const double var_IKb__IKb_converted = HeartConfig::Instance()->GetCapacitance() * var_IKb__IKb; // uA_per_cm2
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKr__GKr_total * var_IKr__rkr * var_IKr__xr; // microA_per_microF
        const double var_IKr__IKr_converted = HeartConfig::Instance()->GetCapacitance() * var_IKr__IKr; // uA_per_cm2
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - var_Ito__fItop) * var_chaste_interface__Ito__a * var_Ito__i + var_chaste_interface__Ito__ap * var_Ito__fItop * var_Ito__ip) * var_Ito__Gto; // microA_per_microF
        const double var_reversal_potentials__ENa = mParameters[6] * mParameters[19] * log(mParameters[4] / var_chaste_interface__intracellular_ions__nai) / mParameters[5]; // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INa__fINap) * var_INa__h * var_chaste_interface__INa__j + var_INa__fINap * var_INa__hp * var_chaste_interface__INa__jp) * mParameters[11]; // microA_per_microF
        const double var_INa__INa_converted = HeartConfig::Instance()->GetCapacitance() * var_INa__INa; // uA_per_cm2
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INaL__fINaLp) * var_chaste_interface__INaL__hL + var_INaL__fINaLp * var_chaste_interface__INaL__hLp) * var_INaL__GNaL * var_chaste_interface__INaL__mL; // microA_per_microF
        const double var_INaL__INaL_converted = HeartConfig::Instance()->GetCapacitance() * var_INaL__INaL; // uA_per_cm2
        const double var_reversal_potentials__PKNa = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = mParameters[6] * mParameters[19] * log((mParameters[4] * var_reversal_potentials__PKNa + mParameters[3]) / (var_chaste_interface__intracellular_ions__nai * var_reversal_potentials__PKNa + var_chaste_interface__intracellular_ions__ki)) / mParameters[5]; // millivolt
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__v) * var_IKs__GKs_total * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        const double var_IKs__IKs_converted = HeartConfig::Instance()->GetCapacitance() * var_IKs__IKs; // uA_per_cm2
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_INab__INab + HeartConfig::Instance()->GetCapacitance() * var_Ito__Ito + var_ICaL__ICaK_converted + var_ICaL__ICaL_converted + var_ICaL__ICaNa_converted + var_ICab__ICab_converted + var_IK1__IK1_converted + var_IKb__IKb_converted + var_IKr__IKr_converted + var_IKs__IKs_converted + var_INa__INa_converted + var_INaCa_i__INaCa_i_converted + var_INaCa_i__INaCa_ss_converted + var_INaK__INaK_converted + var_INaL__INaL_converted + var_IpCa__IpCa_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellohara_rudy_2011_epiFromCellMLGRL1::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        unsigned v_index = GetVoltageIndex();
        const double delta = 1e-8;

        double d_dt_chaste_interface_var_membrane__v;
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__nai = rY[3];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__nass = rY[4];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__ki = rY[5];
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__kss = rY[6];
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__INa__m = rY[10];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INa__hf = rY[11];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hs = rY[12];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__j = rY[13];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hsp = rY[14];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__jp = rY[15];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__mL = rY[16];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INaL__hL = rY[17];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__hLp = rY[18];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__a = rY[19];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ito__iF = rY[20];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__iS = rY[21];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__ap = rY[22];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ito__iFp = rY[23];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__iSp = rY[24];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__nca = rY[33];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrf = rY[34];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrs = rY[35];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs1 = rY[36];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs2 = rY[37];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IK1__xk1 = rY[38];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_ICaL__Aff = 0.59999999999999998; // dimensionless
        const double var_ICaL__Afs = 1.0 - var_ICaL__Aff; // dimensionless
        const double var_ICaL__f = var_ICaL__Aff * var_chaste_interface__ICaL__ff + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__fp = var_ICaL__Aff * var_chaste_interface__ICaL__ffp + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_INa__Ahf = 0.98999999999999999; // dimensionless
        const double var_INa__Ahs = 1.0 - var_INa__Ahf; // dimensionless
        const double var_INa__h = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hs; // dimensionless
        const double var_INa__hp = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hsp; // dimensionless
        const double var_INaCa_i__KmCaAct = 0.00014999999999999999; // millimolar
        const double var_INaCa_i__kasymm = 12.5; // dimensionless
        const double var_INaCa_i__kcaoff = 5000.0; // per_millisecond
        const double var_INaCa_i__k2_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k2_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__kcaon = 1500000.0; // per_millisecond
        const double var_INaCa_i__kna1 = 15.0; // per_millisecond
        const double var_INaCa_i__kna2 = 5.0; // per_millisecond
        const double var_INaCa_i__kna3 = 88.120000000000005; // per_millisecond
        const double var_INaCa_i__qca = 0.16700000000000001; // dimensionless
        const double var_INaCa_i__qna = 0.52239999999999998; // dimensionless
        const double var_INaCa_i__wca = 60000.0; // dimensionless
        const double var_INaCa_i__wna = 60000.0; // dimensionless
        const double var_INaCa_i__wnaca = 5000.0; // dimensionless
        const double var_INaK__H = 9.9999999999999995e-8; // millimolar
        const double var_INaK__Khp = 1.698e-7; // millimolar
        const double var_INaK__Kki = 0.5; // per_millisecond
        const double var_INaK__Kko = 0.35820000000000002; // per_millisecond
        const double var_INaK__Kmgatp = 1.698e-7; // millimolar
        const double var_INaK__Knai0 = 9.0730000000000004; // millimolar
        const double var_INaK__Knao0 = 27.780000000000001; // millimolar
        const double var_INaK__Knap = 224.0; // millimolar
        const double var_INaK__Kxkur = 292.0; // millimolar
        const double var_INaK__MgADP = 0.050000000000000003; // millimolar
        const double var_INaK__MgATP = 9.8000000000000007; // millimolar
        const double var_INaK__delta = -0.155; // millivolt
        const double var_INaK__eP = 4.2000000000000002; // dimensionless
        const double var_INaK__k1m = 182.40000000000001; // per_millisecond
        const double var_INaK__b1 = var_INaK__MgADP * var_INaK__k1m; // dimensionless
        const double var_INaK__k1p = 949.5; // per_millisecond
        const double var_INaK__k2m = 39.399999999999999; // per_millisecond
        const double var_INaK__k2p = 687.20000000000005; // per_millisecond
        const double var_INaK__a2 = var_INaK__k2p; // dimensionless
        const double var_INaK__k3m = 79300.0; // per_millisecond
        const double var_INaK__k3p = 1899.0; // per_millisecond
        const double var_INaK__k4m = 40.0; // per_millisecond
        const double var_INaK__k4p = 639.0; // per_millisecond
        const double var_INaK__a4 = var_INaK__MgATP * var_INaK__k4p / ((1.0 + var_INaK__MgATP / var_INaK__Kmgatp) * var_INaK__Kmgatp); // dimensionless
        const double var_INab__PNab = 3.75e-10; // milliS_per_microF
        const double var_IpCa__KmCap = 0.00050000000000000001; // millimolar
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[7]) : ((var_environment__celltype == 2.0) ? (2.5 * mParameters[7]) : (mParameters[7]))); // dimensionless
        const double var_ICaL__PCaK = 0.00035740000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaNa = 0.00125 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaKp = 0.00035740000000000001 * var_ICaL__PCap; // dimensionless
        const double var_ICaL__PCaNap = 0.00125 * var_ICaL__PCap; // dimensionless
        const double var_IK1__GK1 = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[12]) : ((var_environment__celltype == 2.0) ? (1.3 * mParameters[12]) : (mParameters[12]))); // milliS_per_microF
        const double var_IKb__GKb = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[9]) : (mParameters[9])); // milliS_per_microF
        const double var_IKr__GKr = ((var_environment__celltype == 1.0) ? (1.3 * mParameters[14]) : ((var_environment__celltype == 2.0) ? (0.80000000000000004 * mParameters[14]) : (mParameters[14]))); // milliS_per_microF
        const double var_IKs__GKs = ((var_environment__celltype == 1.0) ? (1.3999999999999999 * mParameters[15]) : (mParameters[15])); // milliS_per_microF
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * mParameters[16]) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * mParameters[16]) : (mParameters[16]))); // milliS_per_microF
        const double var_INaK__Pnak = ((var_environment__celltype == 1.0) ? (0.90000000000000002 * mParameters[17]) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * mParameters[17]) : (mParameters[17]))); // milliS_per_microF
        const double var_INaL__GNaL = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[13]) : (mParameters[13])); // milliS_per_microF
        const double var_Ito__Gto = (((var_environment__celltype == 1.0) || (var_environment__celltype == 2.0)) ? (4.0 * mParameters[18]) : (mParameters[18])); // milliS_per_microF
        const double var_IK1__GK1_total = sqrt(mParameters[3]) * var_IK1__GK1; // milliS_per_microF
        const double var_IKr__GKr_total = 0.43033148291193518 * sqrt(mParameters[3]) * var_IKr__GKr; // milliS_per_microF
        const double var_INaCa_i__h10_i = 1.0 + (1.0 + mParameters[4] / var_INaCa_i__kna2) * mParameters[4] / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h10_ss = 1.0 + (1.0 + mParameters[4] / var_INaCa_i__kna2) * mParameters[4] / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h11_i = pow(mParameters[4], 2) / (var_INaCa_i__h10_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h11_ss = pow(mParameters[4], 2) / (var_INaCa_i__h10_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h12_i = 1 / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__h12_ss = 1 / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__k1_i = var_INaCa_i__h12_i * var_INaCa_i__kcaon * mParameters[2]; // dimensionless
        const double var_INaCa_i__k1_ss = var_INaCa_i__h12_ss * var_INaCa_i__kcaon * mParameters[2]; // dimensionless
        const double var_IKs__KsCa = 1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__cai), 1.3999999999999999)); // dimensionless
        const double var_IKs__GKs_total = var_IKs__GKs * var_IKs__KsCa; // milliS_per_microF
        const double var_INaCa_i__allo_i = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cai, 2)); // dimensionless
        const double var_IpCa__IpCa = mParameters[10] * var_chaste_interface__intracellular_ions__cai / (var_IpCa__KmCap + var_chaste_interface__intracellular_ions__cai); // microA_per_microF
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INa__fINap = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__allo_ss = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cass, 2)); // dimensionless
        const double var_INaL__fINaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_Ito__fItop = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__h4_i = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_i = pow(var_chaste_interface__intracellular_ions__nai, 2) / (var_INaCa_i__h4_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_i = 1 / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k6_i = var_INaCa_i__h6_i * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cai; // dimensionless
        const double var_INaK__P = var_INaK__eP / (1.0 + var_INaK__H / var_INaK__Khp + var_chaste_interface__intracellular_ions__nai / var_INaK__Knap + var_chaste_interface__intracellular_ions__ki / var_INaK__Kxkur); // dimensionless
        const double var_INaK__b3 = var_INaK__H * var_INaK__P * var_INaK__k3m / (1.0 + var_INaK__MgATP / var_INaK__Kmgatp); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_ss = pow(var_chaste_interface__intracellular_ions__nass, 2) / (var_INaCa_i__h4_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_ss = 1 / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k6_ss = var_INaCa_i__h6_ss * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cass; // dimensionless
        const double var_membrane__Istim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_membrane__Istim = var_membrane__Istim_converted / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double var_ICaL__Afcaf = 0.29999999999999999 + 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_IK1__rk1 = 1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * mParameters[3])); // millisecond
        const double var_IKb__xkb = 1 / (1.0 + exp(0.78953107960741553 - 0.054525627044711013 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrf = 1 / (1.0 + exp(1.4344412457471867 + 0.026171159382360639 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrs = 1.0 - var_IKr__Axrf; // dimensionless
        const double var_IKr__rkr = 1 / ((1.0 + exp(0.73333333333333328 + 0.013333333333333334 * var_chaste_interface__membrane__v)) * (1.0 + exp(-0.33333333333333331 + 0.033333333333333333 * var_chaste_interface__membrane__v))); // dimensionless
        const double var_IKr__xr = var_IKr__Axrf * var_chaste_interface__IKr__xrf + var_IKr__Axrs * var_chaste_interface__IKr__xrs; // dimensionless
        const double var_Ito__AiF = 1 / (1.0 + exp(-1.4126984126984128 + 0.0066137566137566143 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__AiS = 1.0 - var_Ito__AiF; // dimensionless
        const double var_Ito__i = var_Ito__AiF * var_chaste_interface__Ito__iF + var_Ito__AiS * var_chaste_interface__Ito__iS; // dimensionless
        const double var_Ito__ip = var_Ito__AiF * var_chaste_interface__Ito__iFp + var_Ito__AiS * var_chaste_interface__Ito__iSp; // dimensionless
        const double var_INaCa_i__hca = exp(var_INaCa_i__qca * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__hna = exp(var_INaCa_i__qna * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h2_i = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / (var_INaCa_i__h1_i * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h2_ss = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / (var_INaCa_i__h1_ss * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h3_i = 1 / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h3_ss = 1 / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * mParameters[4] / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * mParameters[4] / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h8_i = mParameters[4] / (var_INaCa_i__h7_i * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h8_ss = mParameters[4] / (var_INaCa_i__h7_ss * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h9_i = 1 / var_INaCa_i__h7_i; // dimensionless
        const double var_INaCa_i__h9_ss = 1 / var_INaCa_i__h7_ss; // dimensionless
        const double var_INaCa_i__k3p_i = var_INaCa_i__h9_i * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3p_ss = var_INaCa_i__h9_ss * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3pp_i = var_INaCa_i__h8_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_i = var_INaCa_i__k3p_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = var_INaCa_i__h8_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_ss = var_INaCa_i__k3p_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4p_i = var_INaCa_i__h3_i * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4p_ss = var_INaCa_i__h3_ss * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4pp_i = var_INaCa_i__h2_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_i = var_INaCa_i__k4p_i + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = var_INaCa_i__h2_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_ss = var_INaCa_i__k4p_ss + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = var_INaCa_i__h2_i * var_INaCa_i__h5_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k7_ss = var_INaCa_i__h2_ss * var_INaCa_i__h5_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_i = var_INaCa_i__h11_i * var_INaCa_i__h8_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_ss = var_INaCa_i__h11_ss * var_INaCa_i__h8_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__x1_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k5_i * var_INaCa_i__k7_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k2_i * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k5_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i; // dimensionless
        const double var_INaCa_i__x2_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss; // dimensionless
        const double var_INaCa_i__x3_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i * var_INaCa_i__k5_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k2_i * var_INaCa_i__k8_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E3_i = var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E4_i = var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__JncxCa_i = var_INaCa_i__E2_i * var_INaCa_i__k2_i - var_INaCa_i__E1_i * var_INaCa_i__k1_i; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_i = var_INaCa_i__E3_i * var_INaCa_i__k4pp_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i + 3.0 * var_INaCa_i__E4_i * var_INaCa_i__k7_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i; // millimolar_per_millisecond
        const double var_INaCa_i__x4_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss * var_INaCa_i__k5_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k8_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E3_ss = var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E4_ss = var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__JncxCa_ss = var_INaCa_i__E2_ss * var_INaCa_i__k2_ss - var_INaCa_i__E1_ss * var_INaCa_i__k1_ss; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_ss = var_INaCa_i__E3_ss * var_INaCa_i__k4pp_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss + 3.0 * var_INaCa_i__E4_ss * var_INaCa_i__k7_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss; // millimolar_per_millisecond
        const double var_INaK__Knai = var_INaK__Knai0 * exp(0.33333333333333331 * var_INaK__delta * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // millimolar
        const double var_INaK__Knao = var_INaK__Knao0 * exp(0.33333333333333331 * (1.0 - var_INaK__delta) * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // millimolar
        const double var_INaK__a1 = pow(var_chaste_interface__intracellular_ions__nai, 3) * var_INaK__k1p / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = pow(mParameters[3], 2) * var_INaK__k3p / ((-1.0 + pow((1.0 + mParameters[3] / var_INaK__Kko), 2) + pow((1.0 + mParameters[4] / var_INaK__Knao), 3)) * pow(var_INaK__Kko, 2)); // dimensionless
        const double var_INaK__b2 = pow(mParameters[4], 3) * var_INaK__k2m / ((-1.0 + pow((1.0 + mParameters[3] / var_INaK__Kko), 2) + pow((1.0 + mParameters[4] / var_INaK__Knao), 3)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = pow(var_chaste_interface__intracellular_ions__ki, 2) * var_INaK__k4m / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Kki, 2)); // dimensionless
        const double var_INaK__x1 = var_INaK__a1 * var_INaK__a2 * var_INaK__a4 + var_INaK__a1 * var_INaK__a2 * var_INaK__b3 + var_INaK__a2 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = var_INaK__a1 * var_INaK__a2 * var_INaK__a3 + var_INaK__a2 * var_INaK__a3 * var_INaK__b4 + var_INaK__a3 * var_INaK__b1 * var_INaK__b4 + var_INaK__b1 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = var_INaK__a2 * var_INaK__a3 * var_INaK__a4 + var_INaK__a3 * var_INaK__a4 * var_INaK__b1 + var_INaK__a4 * var_INaK__b1 * var_INaK__b2 + var_INaK__b1 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = var_INaK__a1 * var_INaK__a3 * var_INaK__a4 + var_INaK__a1 * var_INaK__a4 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__E1 = var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E2 = var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E3 = var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E4 = var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__JnakK = 2.0 * var_INaK__E4 * var_INaK__b1 - 2.0 * var_INaK__E3 * var_INaK__a1; // millimolar_per_millisecond
        const double var_INaK__JnakNa = 3.0 * var_INaK__E1 * var_INaK__a3 - 3.0 * var_INaK__E2 * var_INaK__b3; // millimolar_per_millisecond
        const double var_membrane__vffrt = pow(mParameters[5], 2) * var_chaste_interface__membrane__v / (mParameters[6] * mParameters[19]); // coulomb_per_mole
        const double var_membrane__vfrt = var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19]); // dimensionless
        const double var_ICaL__PhiCaK = (-0.75 * mParameters[3] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaK = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaK * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaKp * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__PhiCaL = 4.0 * (-0.34100000000000003 * mParameters[2] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(2.0 * var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCa * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCap * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__PhiCaNa = (-0.75 * mParameters[4] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaNa = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNa * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNap * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICab__ICab = 4.0 * (-0.34100000000000003 * mParameters[2] + var_chaste_interface__intracellular_ions__cai * exp(2.0 * var_membrane__vfrt)) * mParameters[8] * var_membrane__vffrt / (-1.0 + exp(2.0 * var_membrane__vfrt)); // microA_per_microF
        const double var_INab__INab = (-mParameters[4] + var_chaste_interface__intracellular_ions__nai * exp(var_membrane__vfrt)) * var_INab__PNab * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // microA_per_microF
        const double var_physical_constants__zca = 2.0; // dimensionless
        const double var_physical_constants__zk = 1.0; // dimensionless
        const double var_physical_constants__zna = 1.0; // dimensionless
        const double var_INaCa_i__INaCa_i = 0.80000000000000004 * (var_INaCa_i__JncxCa_i * var_physical_constants__zca + var_INaCa_i__JncxNa_i * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_i; // microA_per_microF
        const double var_INaCa_i__INaCa_ss = 0.20000000000000001 * (var_INaCa_i__JncxCa_ss * var_physical_constants__zca + var_INaCa_i__JncxNa_ss * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_ss; // microA_per_microF
        const double var_INaK__INaK = (var_INaK__JnakK * var_physical_constants__zk + var_INaK__JnakNa * var_physical_constants__zna) * var_INaK__Pnak; // microA_per_microF
        const double var_reversal_potentials__EK = mParameters[6] * mParameters[19] * log(mParameters[3] / var_chaste_interface__intracellular_ions__ki) / mParameters[5]; // millivolt
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IK1__GK1_total * var_IK1__rk1 * var_chaste_interface__IK1__xk1; // microA_per_microF
        const double var_IKb__IKb = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKb__GKb * var_IKb__xkb; // microA_per_microF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKr__GKr_total * var_IKr__rkr * var_IKr__xr; // microA_per_microF
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - var_Ito__fItop) * var_chaste_interface__Ito__a * var_Ito__i + var_chaste_interface__Ito__ap * var_Ito__fItop * var_Ito__ip) * var_Ito__Gto; // microA_per_microF
        const double var_reversal_potentials__ENa = mParameters[6] * mParameters[19] * log(mParameters[4] / var_chaste_interface__intracellular_ions__nai) / mParameters[5]; // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INa__fINap) * var_INa__h * var_chaste_interface__INa__j + var_INa__fINap * var_INa__hp * var_chaste_interface__INa__jp) * mParameters[11]; // microA_per_microF
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INaL__fINaLp) * var_chaste_interface__INaL__hL + var_INaL__fINaLp * var_chaste_interface__INaL__hLp) * var_INaL__GNaL * var_chaste_interface__INaL__mL; // microA_per_microF
        const double var_reversal_potentials__PKNa = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = mParameters[6] * mParameters[19] * log((mParameters[4] * var_reversal_potentials__PKNa + mParameters[3]) / (var_chaste_interface__intracellular_ions__nai * var_reversal_potentials__PKNa + var_chaste_interface__intracellular_ions__ki)) / mParameters[5]; // millivolt
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__v) * var_IKs__GKs_total * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        d_dt_chaste_interface_var_membrane__v = -var_ICaL__ICaK - var_ICaL__ICaL - var_ICaL__ICaNa - var_ICab__ICab - var_IK1__IK1 - var_IKb__IKb - var_IKr__IKr - var_IKs__IKs - var_INa__INa - var_INaCa_i__INaCa_i - var_INaCa_i__INaCa_ss - var_INaK__INaK - var_INaL__INaL - var_INab__INab - var_IpCa__IpCa - var_Ito__Ito - var_membrane__Istim; // millivolt / millisecond

        double evalF = d_dt_chaste_interface_var_membrane__v;
        mEvalF[0] = d_dt_chaste_interface_var_membrane__v;
        double partialF = EvaluatePartialDerivative0(var_chaste_interface__environment__time, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] += evalF*mDt;
        }
        else
        {
            rY[v_index] += (evalF/partialF)*(exp(partialF*mDt)-1.0);
        }
    }

    void Cellohara_rudy_2011_epiFromCellMLGRL1::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        const double delta = 1e-8;

        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__nai = rY[3];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__nass = rY[4];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__ki = rY[5];
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__kss = rY[6];
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__intracellular_ions__cansr = rY[8];
        // Units: millimolar; Initial value: 1.2
        double var_chaste_interface__intracellular_ions__cajsr = rY[9];
        // Units: millimolar; Initial value: 1.2
        double var_chaste_interface__INa__m = rY[10];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INa__hf = rY[11];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hs = rY[12];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__j = rY[13];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hsp = rY[14];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__jp = rY[15];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__mL = rY[16];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INaL__hL = rY[17];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__hLp = rY[18];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__a = rY[19];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ito__iF = rY[20];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__iS = rY[21];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__ap = rY[22];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ito__iFp = rY[23];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__iSp = rY[24];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__nca = rY[33];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrf = rY[34];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrs = rY[35];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs1 = rY[36];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs2 = rY[37];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IK1__xk1 = rY[38];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ryr__Jrelnp = rY[39];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ryr__Jrelp = rY[40];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_CaMK__aCaMK = 0.050000000000000003; // per_millimolar_per_millisecond
        const double var_CaMK__bCaMK = 0.00068000000000000005; // per_millisecond
        const double var_ICaL__Aff = 0.59999999999999998; // dimensionless
        const double var_ICaL__Afs = 1.0 - var_ICaL__Aff; // dimensionless
        const double var_ICaL__Kmn = 0.002; // millimolar
        const double var_ICaL__f = var_ICaL__Aff * var_chaste_interface__ICaL__ff + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__fp = var_ICaL__Aff * var_chaste_interface__ICaL__ffp + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__k2n = 1000.0; // per_millisecond
        const double var_ICaL__km2n = var_chaste_interface__ICaL__jca; // per_millisecond
        const double var_ICaL__tjca = 75.0; // millisecond
        const double var_IKs__txs1_max = 817.29999999999995; // millisecond
        const double var_INa__Ahf = 0.98999999999999999; // dimensionless
        const double var_INa__Ahs = 1.0 - var_INa__Ahf; // dimensionless
        const double var_INa__h = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hs; // dimensionless
        const double var_INa__hp = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hsp; // dimensionless
        const double var_INa__hssV1 = 82.900000000000006; // millivolt
        const double var_INa__hssV2 = 6.0860000000000003; // millivolt
        const double var_INa__mssV1 = 39.57; // millivolt
        const double var_INa__mssV2 = 9.8710000000000004; // millivolt
        const double var_INa__mtD1 = 6.7649999999999997; // dimensionless
        const double var_INa__mtD2 = 8.5519999999999996; // dimensionless
        const double var_INa__mtV1 = 11.640000000000001; // millivolt
        const double var_INa__mtV2 = 34.770000000000003; // millivolt
        const double var_INa__mtV3 = 77.420000000000002; // millivolt
        const double var_INa__mtV4 = 5.9550000000000001; // millivolt
        const double var_INaCa_i__KmCaAct = 0.00014999999999999999; // millimolar
        const double var_INaCa_i__kasymm = 12.5; // dimensionless
        const double var_INaCa_i__kcaoff = 5000.0; // per_millisecond
        const double var_INaCa_i__k2_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k2_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__kcaon = 1500000.0; // per_millisecond
        const double var_INaCa_i__kna1 = 15.0; // per_millisecond
        const double var_INaCa_i__kna2 = 5.0; // per_millisecond
        const double var_INaCa_i__kna3 = 88.120000000000005; // per_millisecond
        const double var_INaCa_i__qca = 0.16700000000000001; // dimensionless
        const double var_INaCa_i__qna = 0.52239999999999998; // dimensionless
        const double var_INaCa_i__wca = 60000.0; // dimensionless
        const double var_INaCa_i__wna = 60000.0; // dimensionless
        const double var_INaCa_i__wnaca = 5000.0; // dimensionless
        const double var_INaK__H = 9.9999999999999995e-8; // millimolar
        const double var_INaK__Khp = 1.698e-7; // millimolar
        const double var_INaK__Kki = 0.5; // per_millisecond
        const double var_INaK__Kko = 0.35820000000000002; // per_millisecond
        const double var_INaK__Kmgatp = 1.698e-7; // millimolar
        const double var_INaK__Knai0 = 9.0730000000000004; // millimolar
        const double var_INaK__Knao0 = 27.780000000000001; // millimolar
        const double var_INaK__Knap = 224.0; // millimolar
        const double var_INaK__Kxkur = 292.0; // millimolar
        const double var_INaK__MgADP = 0.050000000000000003; // millimolar
        const double var_INaK__MgATP = 9.8000000000000007; // millimolar
        const double var_INaK__delta = -0.155; // millivolt
        const double var_INaK__eP = 4.2000000000000002; // dimensionless
        const double var_INaK__k1m = 182.40000000000001; // per_millisecond
        const double var_INaK__b1 = var_INaK__MgADP * var_INaK__k1m; // dimensionless
        const double var_INaK__k1p = 949.5; // per_millisecond
        const double var_INaK__k2m = 39.399999999999999; // per_millisecond
        const double var_INaK__k2p = 687.20000000000005; // per_millisecond
        const double var_INaK__a2 = var_INaK__k2p; // dimensionless
        const double var_INaK__k3m = 79300.0; // per_millisecond
        const double var_INaK__k3p = 1899.0; // per_millisecond
        const double var_INaK__k4m = 40.0; // per_millisecond
        const double var_INaK__k4p = 639.0; // per_millisecond
        const double var_INaK__a4 = var_INaK__MgATP * var_INaK__k4p / ((1.0 + var_INaK__MgATP / var_INaK__Kmgatp) * var_INaK__Kmgatp); // dimensionless
        const double var_INaL__thL = 200.0; // millisecond
        const double var_INaL__thLp = 3.0 * var_INaL__thL; // millisecond
        const double var_INab__PNab = 3.75e-10; // milliS_per_microF
        const double var_IpCa__KmCap = 0.00050000000000000001; // millimolar
        const double var_cell_geometry__L = 0.01; // centimeter
        const double var_cell_geometry__rad = 0.0011000000000000001; // centimeter
        const double var_cell_geometry__Ageo = 6.2800000000000002 * pow(var_cell_geometry__rad, 2) + 6.2800000000000002 * var_cell_geometry__L * var_cell_geometry__rad; // centimeter_squared
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__Ageo; // centimeter_squared
        const double var_cell_geometry__vcell = 3140.0 * pow(var_cell_geometry__rad, 2) * var_cell_geometry__L; // microliter
        const double var_cell_geometry__vjsr = 0.0047999999999999996 * var_cell_geometry__vcell; // microliter
        const double var_cell_geometry__vmyo = 0.68000000000000005 * var_cell_geometry__vcell; // microliter
        const double var_cell_geometry__vnsr = 0.055199999999999999 * var_cell_geometry__vcell; // microliter
        const double var_cell_geometry__vss = 0.02 * var_cell_geometry__vcell; // microliter
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[7]) : ((var_environment__celltype == 2.0) ? (2.5 * mParameters[7]) : (mParameters[7]))); // dimensionless
        const double var_ICaL__PCaK = 0.00035740000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaNa = 0.00125 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaKp = 0.00035740000000000001 * var_ICaL__PCap; // dimensionless
        const double var_ICaL__PCaNap = 0.00125 * var_ICaL__PCap; // dimensionless
        const double var_IK1__GK1 = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[12]) : ((var_environment__celltype == 2.0) ? (1.3 * mParameters[12]) : (mParameters[12]))); // milliS_per_microF
        const double var_IKb__GKb = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[9]) : (mParameters[9])); // milliS_per_microF
        const double var_IKr__GKr = ((var_environment__celltype == 1.0) ? (1.3 * mParameters[14]) : ((var_environment__celltype == 2.0) ? (0.80000000000000004 * mParameters[14]) : (mParameters[14]))); // milliS_per_microF
        const double var_IKs__GKs = ((var_environment__celltype == 1.0) ? (1.3999999999999999 * mParameters[15]) : (mParameters[15])); // milliS_per_microF
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * mParameters[16]) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * mParameters[16]) : (mParameters[16]))); // milliS_per_microF
        const double var_INaK__Pnak = ((var_environment__celltype == 1.0) ? (0.90000000000000002 * mParameters[17]) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * mParameters[17]) : (mParameters[17]))); // milliS_per_microF
        const double var_INaL__GNaL = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[13]) : (mParameters[13])); // milliS_per_microF
        const double var_Ito__Gto = (((var_environment__celltype == 1.0) || (var_environment__celltype == 2.0)) ? (4.0 * mParameters[18]) : (mParameters[18])); // milliS_per_microF
        const double var_SERCA__upScale = ((var_environment__celltype == 1.0) ? (1.3) : (1.0)); // dimensionless
        const double var_IK1__GK1_total = sqrt(mParameters[3]) * var_IK1__GK1; // milliS_per_microF
        const double var_IKr__GKr_total = 0.43033148291193518 * sqrt(mParameters[3]) * var_IKr__GKr; // milliS_per_microF
        const double var_INaCa_i__h10_i = 1.0 + (1.0 + mParameters[4] / var_INaCa_i__kna2) * mParameters[4] / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h10_ss = 1.0 + (1.0 + mParameters[4] / var_INaCa_i__kna2) * mParameters[4] / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h11_i = pow(mParameters[4], 2) / (var_INaCa_i__h10_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h11_ss = pow(mParameters[4], 2) / (var_INaCa_i__h10_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h12_i = 1 / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__h12_ss = 1 / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__k1_i = var_INaCa_i__h12_i * var_INaCa_i__kcaon * mParameters[2]; // dimensionless
        const double var_INaCa_i__k1_ss = var_INaCa_i__h12_ss * var_INaCa_i__kcaon * mParameters[2]; // dimensionless
        const double var_intracellular_ions__BSLmax = 1.1240000000000001; // millimolar
        const double var_intracellular_ions__BSRmax = 0.047; // millimolar
        const double var_intracellular_ions__KmBSL = 0.0086999999999999994; // millimolar
        const double var_intracellular_ions__KmBSR = 0.00087000000000000001; // millimolar
        const double var_IKs__KsCa = 1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__cai), 1.3999999999999999)); // dimensionless
        const double var_IKs__GKs_total = var_IKs__GKs * var_IKs__KsCa; // milliS_per_microF
        const double var_INaCa_i__allo_i = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cai, 2)); // dimensionless
        const double var_IpCa__IpCa = mParameters[10] * var_chaste_interface__intracellular_ions__cai / (var_IpCa__KmCap + var_chaste_interface__intracellular_ions__cai); // microA_per_microF
        const double var_SERCA__Jupnp = 0.0043750000000000004 * var_SERCA__upScale * var_chaste_interface__intracellular_ions__cai / (0.00092000000000000003 + var_chaste_interface__intracellular_ions__cai); // millimolar_per_millisecond
        const double var_SERCA__Jupp = 0.01203125 * var_SERCA__upScale * var_chaste_interface__intracellular_ions__cai / (0.00075000000000000002 + var_chaste_interface__intracellular_ions__cai); // millimolar_per_millisecond
        const double var_SERCA__Jleak = 0.00026249999999999998 * var_chaste_interface__intracellular_ions__cansr; // millimolar_per_millisecond
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double d_dt_chaste_interface_var_CaMK__CaMKt = -var_chaste_interface__CaMK__CaMKt * var_CaMK__bCaMK + (var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKb * var_CaMK__aCaMK; // millimolar / millisecond
        const double var_ICaL__anca = 1 / (pow((1.0 + var_ICaL__Kmn / var_chaste_interface__intracellular_ions__cass), 4) + var_ICaL__k2n / var_ICaL__km2n); // dimensionless
        const double d_dt_chaste_interface_var_ICaL__nca = var_ICaL__anca * var_ICaL__k2n - var_ICaL__km2n * var_chaste_interface__ICaL__nca; // 1 / millisecond
        const double var_ICaL__fICaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INa__fINap = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__allo_ss = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cass, 2)); // dimensionless
        const double var_INaL__fINaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_Ito__fItop = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__fJupp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__Jup = (-var_SERCA__Jleak + (1.0 - var_SERCA__fJupp) * var_SERCA__Jupnp + var_SERCA__Jupp * var_SERCA__fJupp) * mParameters[1]; // millimolar_per_millisecond
        const double var_diff__Jdiff = 5.0 * var_chaste_interface__intracellular_ions__cass - 5.0 * var_chaste_interface__intracellular_ions__cai; // millimolar_per_millisecond
        const double var_intracellular_ions__Bcass = 1 / (1.0 + var_intracellular_ions__BSLmax * var_intracellular_ions__KmBSL / pow((var_intracellular_ions__KmBSL + var_chaste_interface__intracellular_ions__cass), 2) + var_intracellular_ions__BSRmax * var_intracellular_ions__KmBSR / pow((var_intracellular_ions__KmBSR + var_chaste_interface__intracellular_ions__cass), 2)); // dimensionless
        const double var_intracellular_ions__cm = 1.0; // microF_per_centimeter_squared
        const double var_intracellular_ions__cmdnmax_b = 0.050000000000000003; // millimolar
        const double var_intracellular_ions__cmdnmax = ((var_environment__celltype == 1.0) ? (1.3 * var_intracellular_ions__cmdnmax_b) : (var_intracellular_ions__cmdnmax_b)); // millimolar
        const double var_intracellular_ions__csqnmax = 10.0; // millimolar
        const double var_intracellular_ions__kmcmdn = 0.0023800000000000002; // millimolar
        const double var_intracellular_ions__kmcsqn = 0.80000000000000004; // millimolar
        const double var_intracellular_ions__Bcajsr = 1 / (1.0 + var_intracellular_ions__csqnmax * var_intracellular_ions__kmcsqn / pow((var_chaste_interface__intracellular_ions__cajsr + var_intracellular_ions__kmcsqn), 2)); // dimensionless
        const double var_intracellular_ions__kmtrpn = 0.00050000000000000001; // millimolar
        const double var_diff__JdiffK = 0.5 * var_chaste_interface__intracellular_ions__kss - 0.5 * var_chaste_interface__intracellular_ions__ki; // millimolar_per_millisecond
        const double var_INaCa_i__h4_i = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_i = pow(var_chaste_interface__intracellular_ions__nai, 2) / (var_INaCa_i__h4_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_i = 1 / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k6_i = var_INaCa_i__h6_i * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cai; // dimensionless
        const double var_INaK__P = var_INaK__eP / (1.0 + var_INaK__H / var_INaK__Khp + var_chaste_interface__intracellular_ions__nai / var_INaK__Knap + var_chaste_interface__intracellular_ions__ki / var_INaK__Kxkur); // dimensionless
        const double var_INaK__b3 = var_INaK__H * var_INaK__P * var_INaK__k3m / (1.0 + var_INaK__MgATP / var_INaK__Kmgatp); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_ss = pow(var_chaste_interface__intracellular_ions__nass, 2) / (var_INaCa_i__h4_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_ss = 1 / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k6_ss = var_INaCa_i__h6_ss * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cass; // dimensionless
        const double var_diff__JdiffNa = 0.5 * var_chaste_interface__intracellular_ions__nass - 0.5 * var_chaste_interface__intracellular_ions__nai; // millimolar_per_millisecond
        const double var_intracellular_ions__trpnmax = 0.070000000000000007; // millimolar
        const double var_intracellular_ions__Bcai = 1 / (1.0 + var_intracellular_ions__cmdnmax * var_intracellular_ions__kmcmdn / pow((var_chaste_interface__intracellular_ions__cai + var_intracellular_ions__kmcmdn), 2) + var_intracellular_ions__kmtrpn * var_intracellular_ions__trpnmax / pow((var_chaste_interface__intracellular_ions__cai + var_intracellular_ions__kmtrpn), 2)); // dimensionless
        const double var_membrane__Istim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_membrane__Istim = var_membrane__Istim_converted / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double var_ICaL__Afcaf = 0.29999999999999999 + 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__dss = 1 / (1.0 + exp(-0.93144208037825049 - 0.23640661938534277 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fss = 1 / (1.0 + exp(5.2976190476190466 + 0.27056277056277056 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__fcass = var_ICaL__fss; // dimensionless
        const double d_dt_chaste_interface_var_ICaL__jca = (-var_chaste_interface__ICaL__jca + var_ICaL__fcass) / var_ICaL__tjca; // 1 / millisecond
        const double var_ICaL__td = 0.59999999999999998 + 1 / (exp(1.26 + 0.089999999999999997 * var_chaste_interface__membrane__v) + exp(-0.30000000000000004 - 0.050000000000000003 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_ICaL__d = (-var_chaste_interface__ICaL__d + var_ICaL__dss) / var_ICaL__td; // 1 / millisecond
        const double var_ICaL__tfcaf = 7.0 + 1 / (0.040000000000000001 * exp(0.5714285714285714 - 0.14285714285714285 * var_chaste_interface__membrane__v) + 0.040000000000000001 * exp(-0.5714285714285714 + 0.14285714285714285 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_ICaL__fcaf = (-var_chaste_interface__ICaL__fcaf + var_ICaL__fcass) / var_ICaL__tfcaf; // 1 / millisecond
        const double var_ICaL__tfcafp = 2.5 * var_ICaL__tfcaf; // millisecond
        const double d_dt_chaste_interface_var_ICaL__fcafp = (-var_chaste_interface__ICaL__fcafp + var_ICaL__fcass) / var_ICaL__tfcafp; // 1 / millisecond
        const double var_ICaL__tfcas = 100.0 + 1 / (0.00012 * exp(0.14285714285714285 * var_chaste_interface__membrane__v) + 0.00012 * exp(-0.33333333333333331 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_ICaL__fcas = (-var_chaste_interface__ICaL__fcas + var_ICaL__fcass) / var_ICaL__tfcas; // 1 / millisecond
        const double var_ICaL__tff = 7.0 + 1 / (0.0044999999999999997 * exp(2.0 + 0.10000000000000001 * var_chaste_interface__membrane__v) + 0.0044999999999999997 * exp(-2.0 - 0.10000000000000001 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_ICaL__ff = (-var_chaste_interface__ICaL__ff + var_ICaL__fss) / var_ICaL__tff; // 1 / millisecond
        const double var_ICaL__tffp = 2.5 * var_ICaL__tff; // millisecond
        const double d_dt_chaste_interface_var_ICaL__ffp = (-var_chaste_interface__ICaL__ffp + var_ICaL__fss) / var_ICaL__tffp; // 1 / millisecond
        const double var_ICaL__tfs = 1000.0 + 1 / (3.4999999999999997e-5 * exp(0.83333333333333337 + 0.16666666666666666 * var_chaste_interface__membrane__v) + 3.4999999999999997e-5 * exp(-1.25 - 0.25 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_ICaL__fs = (-var_chaste_interface__ICaL__fs + var_ICaL__fss) / var_ICaL__tfs; // 1 / millisecond
        const double var_IK1__rk1 = 1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * mParameters[3])); // millisecond
        const double var_IK1__txk1 = 122.2 / (exp(3.4155488244627148 + 0.014423770373575654 * var_chaste_interface__membrane__v) + exp(-6.2475442043222005 - 0.049115913555992145 * var_chaste_interface__membrane__v)); // millisecond
        const double var_IK1__xk1ss = 1 / (1.0 + exp((-144.59 - var_chaste_interface__membrane__v - 2.5537999999999998 * mParameters[3]) / (3.8115000000000001 + 1.5691999999999999 * mParameters[3]))); // dimensionless
        const double d_dt_chaste_interface_var_IK1__xk1 = (-var_chaste_interface__IK1__xk1 + var_IK1__xk1ss) / var_IK1__txk1; // 1 / millisecond
        const double var_IKb__xkb = 1 / (1.0 + exp(0.78953107960741553 - 0.054525627044711013 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrf = 1 / (1.0 + exp(1.4344412457471867 + 0.026171159382360639 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrs = 1.0 - var_IKr__Axrf; // dimensionless
        const double var_IKr__rkr = 1 / ((1.0 + exp(0.73333333333333328 + 0.013333333333333334 * var_chaste_interface__membrane__v)) * (1.0 + exp(-0.33333333333333331 + 0.033333333333333333 * var_chaste_interface__membrane__v))); // dimensionless
        const double var_IKr__txrf = 12.98 + 1 / (4.1230000000000003e-5 * exp(2.3444553483807655 - 0.049067713444553483 * var_chaste_interface__membrane__v) + 0.36520000000000002 * exp(-8.182993021452571 + 0.25846471956577927 * var_chaste_interface__membrane__v)); // millisecond
        const double var_IKr__txrs = 1.865 + 1 / (1.128e-5 * exp(1.146491904394757 - 0.038550501156515031 * var_chaste_interface__membrane__v) + 0.066290000000000002 * exp(-4.7178789938817136 + 0.13596193065941536 * var_chaste_interface__membrane__v)); // millisecond
        const double var_IKr__xr = var_IKr__Axrf * var_chaste_interface__IKr__xrf + var_IKr__Axrs * var_chaste_interface__IKr__xrs; // dimensionless
        const double var_IKr__xrss = 1 / (1.0 + exp(-1.2280159080866107 - 0.14729709824716453 * var_chaste_interface__membrane__v)); // dimensionless
        const double d_dt_chaste_interface_var_IKr__xrf = (-var_chaste_interface__IKr__xrf + var_IKr__xrss) / var_IKr__txrf; // 1 / millisecond
        const double d_dt_chaste_interface_var_IKr__xrs = (-var_chaste_interface__IKr__xrs + var_IKr__xrss) / var_IKr__txrs; // 1 / millisecond
        const double var_IKs__txs1 = 1 / (0.001292 * exp(-0.91304347826086951 - 0.0043478260869565218 * var_chaste_interface__membrane__v) + 0.00023259999999999999 * exp(2.7123595505617977 + 0.056179775280898875 * var_chaste_interface__membrane__v)) + var_IKs__txs1_max; // millisecond
        const double var_IKs__txs2 = 1 / (0.019300000000000001 * exp(-2.1464516129032258 - 0.032258064516129031 * var_chaste_interface__membrane__v) + 0.01 * exp(-2.5 + 0.050000000000000003 * var_chaste_interface__membrane__v)); // millisecond
        const double var_IKs__xs1ss = 1 / (1.0 + exp(-1.2987012987012987 - 0.11195700850873264 * var_chaste_interface__membrane__v)); // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs1 = (-var_chaste_interface__IKs__xs1 + var_IKs__xs1ss) / var_IKs__txs1; // 1 / millisecond
        const double var_IKs__xs2ss = var_IKs__xs1ss; // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs2 = (-var_chaste_interface__IKs__xs2 + var_IKs__xs2ss) / var_IKs__txs2; // 1 / millisecond
        const double var_INa__hss = 1 / (1.0 + exp((var_INa__hssV1 + var_chaste_interface__membrane__v) / var_INa__hssV2)); // dimensionless
        const double var_INa__hssp = 1 / (1.0 + exp(14.640157739073281 + 0.16431153466973381 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_INa__jss = var_INa__hss; // dimensionless
        const double var_INa__mss = 1 / (1.0 + exp((-var_INa__mssV1 - var_chaste_interface__membrane__v) / var_INa__mssV2)); // dimensionless
        const double var_INa__thf = 1 / (6.149 * exp(0.025140601874691665 + 0.049333991119881598 * var_chaste_interface__membrane__v) + 1.432e-5 * exp(-0.19029435163086714 - 0.15910898965791567 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_INa__hf = (-var_chaste_interface__INa__hf + var_INa__hss) / var_INa__thf; // 1 / millisecond
        const double var_INa__ths = 1 / (0.0097940000000000006 * exp(-0.63992869875222813 - 0.035650623885918005 * var_chaste_interface__membrane__v) + 0.33429999999999999 * exp(0.10112954465231205 + 0.017649135192375574 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_INa__hs = (-var_chaste_interface__INa__hs + var_INa__hss) / var_INa__ths; // 1 / millisecond
        const double var_INa__thsp = 3.0 * var_INa__ths; // millisecond
        const double d_dt_chaste_interface_var_INa__hsp = (-var_chaste_interface__INa__hsp + var_INa__hssp) / var_INa__thsp; // 1 / millisecond
        const double var_INa__tj = 2.0379999999999998 + 1 / (0.30520000000000003 * exp(0.025854356306892066 + 0.02600780234070221 * var_chaste_interface__membrane__v) + 0.021360000000000001 * exp(-12.148291269170388 - 0.12075836251660427 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_INa__j = (-var_chaste_interface__INa__j + var_INa__jss) / var_INa__tj; // 1 / millisecond
        const double var_INa__tjp = 1.46 * var_INa__tj; // millisecond
        const double d_dt_chaste_interface_var_INa__jp = (-var_chaste_interface__INa__jp + var_INa__jss) / var_INa__tjp; // 1 / millisecond
        const double var_INa__tm = 1 / (var_INa__mtD1 * exp((var_INa__mtV1 + var_chaste_interface__membrane__v) / var_INa__mtV2) + var_INa__mtD2 * exp((-var_INa__mtV3 - var_chaste_interface__membrane__v) / var_INa__mtV4)); // millisecond
        const double d_dt_chaste_interface_var_INa__m = (-var_chaste_interface__INa__m + var_INa__mss) / var_INa__tm; // 1 / millisecond
        const double var_INaL__hLss = 1 / (1.0 + exp(11.700053418803417 + 0.13354700854700854 * var_chaste_interface__membrane__v)); // dimensionless
        const double d_dt_chaste_interface_var_INaL__hL = (-var_chaste_interface__INaL__hL + var_INaL__hLss) / var_INaL__thL; // 1 / millisecond
        const double var_INaL__hLssp = 1 / (1.0 + exp(12.528044871794872 + 0.13354700854700854 * var_chaste_interface__membrane__v)); // dimensionless
        const double d_dt_chaste_interface_var_INaL__hLp = (-var_chaste_interface__INaL__hLp + var_INaL__hLssp) / var_INaL__thLp; // 1 / millisecond
        const double var_INaL__mLss = 1 / (1.0 + exp(-8.1401975683890573 - 0.18996960486322187 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_INaL__tmL = var_INa__tm; // millisecond
        const double d_dt_chaste_interface_var_INaL__mL = (-var_chaste_interface__INaL__mL + var_INaL__mLss) / var_INaL__tmL; // 1 / millisecond
        const double var_Ito__AiF = 1 / (1.0 + exp(-1.4126984126984128 + 0.0066137566137566143 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__AiS = 1.0 - var_Ito__AiF; // dimensionless
        const double var_Ito__ass = 1 / (1.0 + exp(0.96761133603238858 - 0.067476383265856948 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__assp = 1 / (1.0 + exp(1.6423751686909582 - 0.067476383265856948 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__delta_epi = ((var_environment__celltype == 1.0) ? (1.0 - 0.94999999999999996 / (1.0 + exp(14.0 + 0.20000000000000001 * var_chaste_interface__membrane__v))) : (1.0)); // dimensionless
        const double var_Ito__dti_develop = 1.3540000000000001 + 0.0001 / (exp(56.77808727948004 - 4.6425255338904359 * var_chaste_interface__membrane__v) + exp(-10.534927627438641 + 0.062932662051604776 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__dti_recover = 1.0 - 0.5 / (1.0 + exp(3.5 + 0.050000000000000003 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__i = var_Ito__AiF * var_chaste_interface__Ito__iF + var_Ito__AiS * var_chaste_interface__Ito__iS; // dimensionless
        const double var_Ito__ip = var_Ito__AiF * var_chaste_interface__Ito__iFp + var_Ito__AiS * var_chaste_interface__Ito__iSp; // dimensionless
        const double var_Ito__iss = 1 / (1.0 + exp(7.6939240063036234 + 0.17510068289266328 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__ta = 1.0515000000000001 / (3.5 / (1.0 + exp(3.403513787634354 + 0.034035137876343539 * var_chaste_interface__membrane__v)) + 0.82719827942757873 / (1.0 + exp(0.62658348478969694 - 0.034035137876343539 * var_chaste_interface__membrane__v))); // millisecond
        const double d_dt_chaste_interface_var_Ito__a = (-var_chaste_interface__Ito__a + var_Ito__ass) / var_Ito__ta; // 1 / millisecond
        const double d_dt_chaste_interface_var_Ito__ap = (-var_chaste_interface__Ito__ap + var_Ito__assp) / var_Ito__ta; // 1 / millisecond
        const double var_Ito__tiF_b = 4.5620000000000003 + 1 / (0.39329999999999998 * exp(-1.0 - 0.01 * var_chaste_interface__membrane__v) + 0.08004 * exp(3.0138637733574445 + 0.060277275467148887 * var_chaste_interface__membrane__v)); // millisecond
        const double var_Ito__tiF = var_Ito__delta_epi * var_Ito__tiF_b; // millisecond
        const double d_dt_chaste_interface_var_Ito__iF = (-var_chaste_interface__Ito__iF + var_Ito__iss) / var_Ito__tiF; // 1 / millisecond
        const double var_Ito__tiFp = var_Ito__dti_develop * var_Ito__dti_recover * var_Ito__tiF; // millisecond
        const double d_dt_chaste_interface_var_Ito__iFp = (-var_chaste_interface__Ito__iFp + var_Ito__iss) / var_Ito__tiFp; // 1 / millisecond
        const double var_Ito__tiS_b = 23.620000000000001 + 1 / (1.7800000000000001e-8 * exp(14.123035029087756 + 0.12377769525931426 * var_chaste_interface__membrane__v) + 0.0014159999999999999 * exp(-1.6345469940728197 - 0.016934801016088061 * var_chaste_interface__membrane__v)); // millisecond
        const double var_Ito__tiS = var_Ito__delta_epi * var_Ito__tiS_b; // millisecond
        const double d_dt_chaste_interface_var_Ito__iS = (-var_chaste_interface__Ito__iS + var_Ito__iss) / var_Ito__tiS; // 1 / millisecond
        const double var_Ito__tiSp = var_Ito__dti_develop * var_Ito__dti_recover * var_Ito__tiS; // millisecond
        const double d_dt_chaste_interface_var_Ito__iSp = (-var_chaste_interface__Ito__iSp + var_Ito__iss) / var_Ito__tiSp; // 1 / millisecond
        const double var_INaCa_i__hca = exp(var_INaCa_i__qca * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__hna = exp(var_INaCa_i__qna * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h2_i = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / (var_INaCa_i__h1_i * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h2_ss = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / (var_INaCa_i__h1_ss * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h3_i = 1 / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h3_ss = 1 / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * mParameters[4] / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * mParameters[4] / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h8_i = mParameters[4] / (var_INaCa_i__h7_i * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h8_ss = mParameters[4] / (var_INaCa_i__h7_ss * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h9_i = 1 / var_INaCa_i__h7_i; // dimensionless
        const double var_INaCa_i__h9_ss = 1 / var_INaCa_i__h7_ss; // dimensionless
        const double var_INaCa_i__k3p_i = var_INaCa_i__h9_i * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3p_ss = var_INaCa_i__h9_ss * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3pp_i = var_INaCa_i__h8_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_i = var_INaCa_i__k3p_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = var_INaCa_i__h8_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_ss = var_INaCa_i__k3p_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4p_i = var_INaCa_i__h3_i * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4p_ss = var_INaCa_i__h3_ss * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4pp_i = var_INaCa_i__h2_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_i = var_INaCa_i__k4p_i + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = var_INaCa_i__h2_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_ss = var_INaCa_i__k4p_ss + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = var_INaCa_i__h2_i * var_INaCa_i__h5_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k7_ss = var_INaCa_i__h2_ss * var_INaCa_i__h5_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_i = var_INaCa_i__h11_i * var_INaCa_i__h8_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_ss = var_INaCa_i__h11_ss * var_INaCa_i__h8_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__x1_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k5_i * var_INaCa_i__k7_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k2_i * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k5_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i; // dimensionless
        const double var_INaCa_i__x2_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss; // dimensionless
        const double var_INaCa_i__x3_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i * var_INaCa_i__k5_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k2_i * var_INaCa_i__k8_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E3_i = var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E4_i = var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__JncxCa_i = var_INaCa_i__E2_i * var_INaCa_i__k2_i - var_INaCa_i__E1_i * var_INaCa_i__k1_i; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_i = var_INaCa_i__E3_i * var_INaCa_i__k4pp_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i + 3.0 * var_INaCa_i__E4_i * var_INaCa_i__k7_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i; // millimolar_per_millisecond
        const double var_INaCa_i__x4_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss * var_INaCa_i__k5_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k8_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E3_ss = var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E4_ss = var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__JncxCa_ss = var_INaCa_i__E2_ss * var_INaCa_i__k2_ss - var_INaCa_i__E1_ss * var_INaCa_i__k1_ss; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_ss = var_INaCa_i__E3_ss * var_INaCa_i__k4pp_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss + 3.0 * var_INaCa_i__E4_ss * var_INaCa_i__k7_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss; // millimolar_per_millisecond
        const double var_INaK__Knai = var_INaK__Knai0 * exp(0.33333333333333331 * var_INaK__delta * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // millimolar
        const double var_INaK__Knao = var_INaK__Knao0 * exp(0.33333333333333331 * (1.0 - var_INaK__delta) * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // millimolar
        const double var_INaK__a1 = pow(var_chaste_interface__intracellular_ions__nai, 3) * var_INaK__k1p / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = pow(mParameters[3], 2) * var_INaK__k3p / ((-1.0 + pow((1.0 + mParameters[3] / var_INaK__Kko), 2) + pow((1.0 + mParameters[4] / var_INaK__Knao), 3)) * pow(var_INaK__Kko, 2)); // dimensionless
        const double var_INaK__b2 = pow(mParameters[4], 3) * var_INaK__k2m / ((-1.0 + pow((1.0 + mParameters[3] / var_INaK__Kko), 2) + pow((1.0 + mParameters[4] / var_INaK__Knao), 3)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = pow(var_chaste_interface__intracellular_ions__ki, 2) * var_INaK__k4m / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Kki, 2)); // dimensionless
        const double var_INaK__x1 = var_INaK__a1 * var_INaK__a2 * var_INaK__a4 + var_INaK__a1 * var_INaK__a2 * var_INaK__b3 + var_INaK__a2 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = var_INaK__a1 * var_INaK__a2 * var_INaK__a3 + var_INaK__a2 * var_INaK__a3 * var_INaK__b4 + var_INaK__a3 * var_INaK__b1 * var_INaK__b4 + var_INaK__b1 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = var_INaK__a2 * var_INaK__a3 * var_INaK__a4 + var_INaK__a3 * var_INaK__a4 * var_INaK__b1 + var_INaK__a4 * var_INaK__b1 * var_INaK__b2 + var_INaK__b1 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = var_INaK__a1 * var_INaK__a3 * var_INaK__a4 + var_INaK__a1 * var_INaK__a4 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__E1 = var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E2 = var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E3 = var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E4 = var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__JnakK = 2.0 * var_INaK__E4 * var_INaK__b1 - 2.0 * var_INaK__E3 * var_INaK__a1; // millimolar_per_millisecond
        const double var_INaK__JnakNa = 3.0 * var_INaK__E1 * var_INaK__a3 - 3.0 * var_INaK__E2 * var_INaK__b3; // millimolar_per_millisecond
        const double var_membrane__vffrt = pow(mParameters[5], 2) * var_chaste_interface__membrane__v / (mParameters[6] * mParameters[19]); // coulomb_per_mole
        const double var_membrane__vfrt = var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19]); // dimensionless
        const double var_ICaL__PhiCaK = (-0.75 * mParameters[3] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaK = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaK * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaKp * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__kss = -var_diff__JdiffK - var_ICaL__ICaK * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vss * mParameters[5]); // millimolar / millisecond
        const double var_ICaL__PhiCaL = 4.0 * (-0.34100000000000003 * mParameters[2] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(2.0 * var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCa * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCap * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__PhiCaNa = (-0.75 * mParameters[4] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaNa = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNa * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNap * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICab__ICab = 4.0 * (-0.34100000000000003 * mParameters[2] + var_chaste_interface__intracellular_ions__cai * exp(2.0 * var_membrane__vfrt)) * mParameters[8] * var_membrane__vffrt / (-1.0 + exp(2.0 * var_membrane__vfrt)); // microA_per_microF
        const double var_INab__INab = (-mParameters[4] + var_chaste_interface__intracellular_ions__nai * exp(var_membrane__vfrt)) * var_INab__PNab * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // microA_per_microF
        const double var_physical_constants__zca = 2.0; // dimensionless
        const double var_physical_constants__zk = 1.0; // dimensionless
        const double var_physical_constants__zna = 1.0; // dimensionless
        const double var_INaCa_i__INaCa_i = 0.80000000000000004 * (var_INaCa_i__JncxCa_i * var_physical_constants__zca + var_INaCa_i__JncxNa_i * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_i; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__cai = (var_cell_geometry__vss * var_diff__Jdiff / var_cell_geometry__vmyo - var_SERCA__Jup * var_cell_geometry__vnsr / var_cell_geometry__vmyo + 0.5 * (-var_ICab__ICab - var_IpCa__IpCa + 2.0 * var_INaCa_i__INaCa_i) * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vmyo * mParameters[5])) * var_intracellular_ions__Bcai; // millimolar / millisecond
        const double var_INaCa_i__INaCa_ss = 0.20000000000000001 * (var_INaCa_i__JncxCa_ss * var_physical_constants__zca + var_INaCa_i__JncxNa_ss * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_ss; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__nass = -var_diff__JdiffNa + (-var_ICaL__ICaNa - 3.0 * var_INaCa_i__INaCa_ss) * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vss * mParameters[5]); // millimolar / millisecond
        const double var_INaK__INaK = (var_INaK__JnakK * var_physical_constants__zk + var_INaK__JnakNa * var_physical_constants__zna) * var_INaK__Pnak; // microA_per_microF
        const double var_reversal_potentials__EK = mParameters[6] * mParameters[19] * log(mParameters[3] / var_chaste_interface__intracellular_ions__ki) / mParameters[5]; // millivolt
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IK1__GK1_total * var_IK1__rk1 * var_chaste_interface__IK1__xk1; // microA_per_microF
        const double var_IKb__IKb = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKb__GKb * var_IKb__xkb; // microA_per_microF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKr__GKr_total * var_IKr__rkr * var_IKr__xr; // microA_per_microF
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - var_Ito__fItop) * var_chaste_interface__Ito__a * var_Ito__i + var_chaste_interface__Ito__ap * var_Ito__fItop * var_Ito__ip) * var_Ito__Gto; // microA_per_microF
        const double var_reversal_potentials__ENa = mParameters[6] * mParameters[19] * log(mParameters[4] / var_chaste_interface__intracellular_ions__nai) / mParameters[5]; // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INa__fINap) * var_INa__h * var_chaste_interface__INa__j + var_INa__fINap * var_INa__hp * var_chaste_interface__INa__jp) * mParameters[11]; // microA_per_microF
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INaL__fINaLp) * var_chaste_interface__INaL__hL + var_INaL__fINaLp * var_chaste_interface__INaL__hLp) * var_INaL__GNaL * var_chaste_interface__INaL__mL; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__nai = var_cell_geometry__vss * var_diff__JdiffNa / var_cell_geometry__vmyo + (-var_INa__INa - var_INaL__INaL - var_INab__INab - 3.0 * var_INaCa_i__INaCa_i - 3.0 * var_INaK__INaK) * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vmyo * mParameters[5]); // millimolar / millisecond
        const double var_reversal_potentials__PKNa = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = mParameters[6] * mParameters[19] * log((mParameters[4] * var_reversal_potentials__PKNa + mParameters[3]) / (var_chaste_interface__intracellular_ions__nai * var_reversal_potentials__PKNa + var_chaste_interface__intracellular_ions__ki)) / mParameters[5]; // millivolt
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__v) * var_IKs__GKs_total * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__ki = var_cell_geometry__vss * var_diff__JdiffK / var_cell_geometry__vmyo + (-var_IK1__IK1 - var_IKb__IKb - var_IKr__IKr - var_IKs__IKs - var_Ito__Ito - var_membrane__Istim + 2.0 * var_INaK__INaK) * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vmyo * mParameters[5]); // millimolar / millisecond
        const double var_ryr__bt = 4.75; // millisecond
        const double var_ryr__a_rel = 0.5 * var_ryr__bt; // millisecond
        const double var_ryr__Jrel_inf_temp = -var_ICaL__ICaL * var_ryr__a_rel / (1.0 + 25.62890625 / pow(var_chaste_interface__intracellular_ions__cajsr, 8)); // dimensionless
        const double var_ryr__Jrel_inf = ((var_environment__celltype == 2.0) ? (1.7 * var_ryr__Jrel_inf_temp) : (var_ryr__Jrel_inf_temp)); // dimensionless
        const double var_ryr__btp = 1.25 * var_ryr__bt; // millisecond
        const double var_ryr__a_relp = 0.5 * var_ryr__btp; // millisecond
        const double var_ryr__Jrel_temp = -var_ICaL__ICaL * var_ryr__a_relp / (1.0 + 25.62890625 / pow(var_chaste_interface__intracellular_ions__cajsr, 8)); // dimensionless
        const double var_ryr__Jrel_infp = ((var_environment__celltype == 2.0) ? (1.7 * var_ryr__Jrel_temp) : (var_ryr__Jrel_temp)); // dimensionless
        const double var_ryr__fJrelp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_ryr__Jrel = ((1.0 - var_ryr__fJrelp) * var_chaste_interface__ryr__Jrelnp + var_chaste_interface__ryr__Jrelp * var_ryr__fJrelp) * mParameters[0]; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cass = (-var_diff__Jdiff + var_cell_geometry__vjsr * var_ryr__Jrel / var_cell_geometry__vss + 0.5 * (-var_ICaL__ICaL + 2.0 * var_INaCa_i__INaCa_ss) * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vss * mParameters[5])) * var_intracellular_ions__Bcass; // millimolar / millisecond
        const double var_ryr__tau_rel_temp = var_ryr__bt / (1.0 + 0.0123 / var_chaste_interface__intracellular_ions__cajsr); // millisecond
        const double var_ryr__tau_rel = ((var_ryr__tau_rel_temp < 0.001) ? (0.001) : (var_ryr__tau_rel_temp)); // millisecond
        const double d_dt_chaste_interface_var_ryr__Jrelnp = (-var_chaste_interface__ryr__Jrelnp + var_ryr__Jrel_inf) / var_ryr__tau_rel; // 1 / millisecond
        const double var_ryr__tau_relp_temp = var_ryr__btp / (1.0 + 0.0123 / var_chaste_interface__intracellular_ions__cajsr); // millisecond
        const double var_ryr__tau_relp = ((var_ryr__tau_relp_temp < 0.001) ? (0.001) : (var_ryr__tau_relp_temp)); // millisecond
        const double d_dt_chaste_interface_var_ryr__Jrelp = (-var_chaste_interface__ryr__Jrelp + var_ryr__Jrel_infp) / var_ryr__tau_relp; // 1 / millisecond
        const double var_trans_flux__Jtr = 0.01 * var_chaste_interface__intracellular_ions__cansr - 0.01 * var_chaste_interface__intracellular_ions__cajsr; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cajsr = (-var_ryr__Jrel + var_trans_flux__Jtr) * var_intracellular_ions__Bcajsr; // millimolar / millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cansr = -var_cell_geometry__vjsr * var_trans_flux__Jtr / var_cell_geometry__vnsr + var_SERCA__Jup; // millimolar / millisecond
        
        mEvalF[1] = d_dt_chaste_interface_var_intracellular_ions__cai;
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__environment__time, rY, delta);
        mEvalF[2] = d_dt_chaste_interface_var_CaMK__CaMKt;
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__environment__time, rY, delta);
        mEvalF[3] = d_dt_chaste_interface_var_intracellular_ions__nai;
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__environment__time, rY, delta);
        mEvalF[4] = d_dt_chaste_interface_var_intracellular_ions__nass;
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__environment__time, rY, delta);
        mEvalF[5] = d_dt_chaste_interface_var_intracellular_ions__ki;
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__environment__time, rY, delta);
        mEvalF[6] = d_dt_chaste_interface_var_intracellular_ions__kss;
        mPartialF[6] = EvaluatePartialDerivative6(var_chaste_interface__environment__time, rY, delta);
        mEvalF[7] = d_dt_chaste_interface_var_intracellular_ions__cass;
        mPartialF[7] = EvaluatePartialDerivative7(var_chaste_interface__environment__time, rY, delta);
        mEvalF[8] = d_dt_chaste_interface_var_intracellular_ions__cansr;
        mPartialF[8] = EvaluatePartialDerivative8(var_chaste_interface__environment__time, rY, delta);
        mEvalF[9] = d_dt_chaste_interface_var_intracellular_ions__cajsr;
        mPartialF[9] = EvaluatePartialDerivative9(var_chaste_interface__environment__time, rY, delta);
        mEvalF[10] = d_dt_chaste_interface_var_INa__m;
        mPartialF[10] = EvaluatePartialDerivative10(var_chaste_interface__environment__time, rY, delta);
        mEvalF[11] = d_dt_chaste_interface_var_INa__hf;
        mPartialF[11] = EvaluatePartialDerivative11(var_chaste_interface__environment__time, rY, delta);
        mEvalF[12] = d_dt_chaste_interface_var_INa__hs;
        mPartialF[12] = EvaluatePartialDerivative12(var_chaste_interface__environment__time, rY, delta);
        mEvalF[13] = d_dt_chaste_interface_var_INa__j;
        mPartialF[13] = EvaluatePartialDerivative13(var_chaste_interface__environment__time, rY, delta);
        mEvalF[14] = d_dt_chaste_interface_var_INa__hsp;
        mPartialF[14] = EvaluatePartialDerivative14(var_chaste_interface__environment__time, rY, delta);
        mEvalF[15] = d_dt_chaste_interface_var_INa__jp;
        mPartialF[15] = EvaluatePartialDerivative15(var_chaste_interface__environment__time, rY, delta);
        mEvalF[16] = d_dt_chaste_interface_var_INaL__mL;
        mPartialF[16] = EvaluatePartialDerivative16(var_chaste_interface__environment__time, rY, delta);
        mEvalF[17] = d_dt_chaste_interface_var_INaL__hL;
        mPartialF[17] = EvaluatePartialDerivative17(var_chaste_interface__environment__time, rY, delta);
        mEvalF[18] = d_dt_chaste_interface_var_INaL__hLp;
        mPartialF[18] = EvaluatePartialDerivative18(var_chaste_interface__environment__time, rY, delta);
        mEvalF[19] = d_dt_chaste_interface_var_Ito__a;
        mPartialF[19] = EvaluatePartialDerivative19(var_chaste_interface__environment__time, rY, delta);
        mEvalF[20] = d_dt_chaste_interface_var_Ito__iF;
        mPartialF[20] = EvaluatePartialDerivative20(var_chaste_interface__environment__time, rY, delta);
        mEvalF[21] = d_dt_chaste_interface_var_Ito__iS;
        mPartialF[21] = EvaluatePartialDerivative21(var_chaste_interface__environment__time, rY, delta);
        mEvalF[22] = d_dt_chaste_interface_var_Ito__ap;
        mPartialF[22] = EvaluatePartialDerivative22(var_chaste_interface__environment__time, rY, delta);
        mEvalF[23] = d_dt_chaste_interface_var_Ito__iFp;
        mPartialF[23] = EvaluatePartialDerivative23(var_chaste_interface__environment__time, rY, delta);
        mEvalF[24] = d_dt_chaste_interface_var_Ito__iSp;
        mPartialF[24] = EvaluatePartialDerivative24(var_chaste_interface__environment__time, rY, delta);
        mEvalF[25] = d_dt_chaste_interface_var_ICaL__d;
        mPartialF[25] = EvaluatePartialDerivative25(var_chaste_interface__environment__time, rY, delta);
        mEvalF[26] = d_dt_chaste_interface_var_ICaL__ff;
        mPartialF[26] = EvaluatePartialDerivative26(var_chaste_interface__environment__time, rY, delta);
        mEvalF[27] = d_dt_chaste_interface_var_ICaL__fs;
        mPartialF[27] = EvaluatePartialDerivative27(var_chaste_interface__environment__time, rY, delta);
        mEvalF[28] = d_dt_chaste_interface_var_ICaL__fcaf;
        mPartialF[28] = EvaluatePartialDerivative28(var_chaste_interface__environment__time, rY, delta);
        mEvalF[29] = d_dt_chaste_interface_var_ICaL__fcas;
        mPartialF[29] = EvaluatePartialDerivative29(var_chaste_interface__environment__time, rY, delta);
        mEvalF[30] = d_dt_chaste_interface_var_ICaL__jca;
        mPartialF[30] = EvaluatePartialDerivative30(var_chaste_interface__environment__time, rY, delta);
        mEvalF[31] = d_dt_chaste_interface_var_ICaL__ffp;
        mPartialF[31] = EvaluatePartialDerivative31(var_chaste_interface__environment__time, rY, delta);
        mEvalF[32] = d_dt_chaste_interface_var_ICaL__fcafp;
        mPartialF[32] = EvaluatePartialDerivative32(var_chaste_interface__environment__time, rY, delta);
        mEvalF[33] = d_dt_chaste_interface_var_ICaL__nca;
        mPartialF[33] = EvaluatePartialDerivative33(var_chaste_interface__environment__time, rY, delta);
        mEvalF[34] = d_dt_chaste_interface_var_IKr__xrf;
        mPartialF[34] = EvaluatePartialDerivative34(var_chaste_interface__environment__time, rY, delta);
        mEvalF[35] = d_dt_chaste_interface_var_IKr__xrs;
        mPartialF[35] = EvaluatePartialDerivative35(var_chaste_interface__environment__time, rY, delta);
        mEvalF[36] = d_dt_chaste_interface_var_IKs__xs1;
        mPartialF[36] = EvaluatePartialDerivative36(var_chaste_interface__environment__time, rY, delta);
        mEvalF[37] = d_dt_chaste_interface_var_IKs__xs2;
        mPartialF[37] = EvaluatePartialDerivative37(var_chaste_interface__environment__time, rY, delta);
        mEvalF[38] = d_dt_chaste_interface_var_IK1__xk1;
        mPartialF[38] = EvaluatePartialDerivative38(var_chaste_interface__environment__time, rY, delta);
        mEvalF[39] = d_dt_chaste_interface_var_ryr__Jrelnp;
        mPartialF[39] = EvaluatePartialDerivative39(var_chaste_interface__environment__time, rY, delta);
        mEvalF[40] = d_dt_chaste_interface_var_ryr__Jrelp;
        mPartialF[40] = EvaluatePartialDerivative40(var_chaste_interface__environment__time, rY, delta);
        
        {
            if (fabs(mPartialF[1]) < delta){
                rY[1] += mDt*d_dt_chaste_interface_var_intracellular_ions__cai;
            }
            else
            {
                rY[1] += (d_dt_chaste_interface_var_intracellular_ions__cai/mPartialF[1])*(exp(mPartialF[1]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[2]) < delta){
                rY[2] += mDt*d_dt_chaste_interface_var_CaMK__CaMKt;
            }
            else
            {
                rY[2] += (d_dt_chaste_interface_var_CaMK__CaMKt/mPartialF[2])*(exp(mPartialF[2]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[3]) < delta){
                rY[3] += mDt*d_dt_chaste_interface_var_intracellular_ions__nai;
            }
            else
            {
                rY[3] += (d_dt_chaste_interface_var_intracellular_ions__nai/mPartialF[3])*(exp(mPartialF[3]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[4]) < delta){
                rY[4] += mDt*d_dt_chaste_interface_var_intracellular_ions__nass;
            }
            else
            {
                rY[4] += (d_dt_chaste_interface_var_intracellular_ions__nass/mPartialF[4])*(exp(mPartialF[4]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[5]) < delta){
                rY[5] += mDt*d_dt_chaste_interface_var_intracellular_ions__ki;
            }
            else
            {
                rY[5] += (d_dt_chaste_interface_var_intracellular_ions__ki/mPartialF[5])*(exp(mPartialF[5]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[6]) < delta){
                rY[6] += mDt*d_dt_chaste_interface_var_intracellular_ions__kss;
            }
            else
            {
                rY[6] += (d_dt_chaste_interface_var_intracellular_ions__kss/mPartialF[6])*(exp(mPartialF[6]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[7]) < delta){
                rY[7] += mDt*d_dt_chaste_interface_var_intracellular_ions__cass;
            }
            else
            {
                rY[7] += (d_dt_chaste_interface_var_intracellular_ions__cass/mPartialF[7])*(exp(mPartialF[7]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[8]) < delta){
                rY[8] += mDt*d_dt_chaste_interface_var_intracellular_ions__cansr;
            }
            else
            {
                rY[8] += (d_dt_chaste_interface_var_intracellular_ions__cansr/mPartialF[8])*(exp(mPartialF[8]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[9]) < delta){
                rY[9] += mDt*d_dt_chaste_interface_var_intracellular_ions__cajsr;
            }
            else
            {
                rY[9] += (d_dt_chaste_interface_var_intracellular_ions__cajsr/mPartialF[9])*(exp(mPartialF[9]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[10]) < delta){
                rY[10] += mDt*d_dt_chaste_interface_var_INa__m;
            }
            else
            {
                rY[10] += (d_dt_chaste_interface_var_INa__m/mPartialF[10])*(exp(mPartialF[10]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[11]) < delta){
                rY[11] += mDt*d_dt_chaste_interface_var_INa__hf;
            }
            else
            {
                rY[11] += (d_dt_chaste_interface_var_INa__hf/mPartialF[11])*(exp(mPartialF[11]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[12]) < delta){
                rY[12] += mDt*d_dt_chaste_interface_var_INa__hs;
            }
            else
            {
                rY[12] += (d_dt_chaste_interface_var_INa__hs/mPartialF[12])*(exp(mPartialF[12]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[13]) < delta){
                rY[13] += mDt*d_dt_chaste_interface_var_INa__j;
            }
            else
            {
                rY[13] += (d_dt_chaste_interface_var_INa__j/mPartialF[13])*(exp(mPartialF[13]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[14]) < delta){
                rY[14] += mDt*d_dt_chaste_interface_var_INa__hsp;
            }
            else
            {
                rY[14] += (d_dt_chaste_interface_var_INa__hsp/mPartialF[14])*(exp(mPartialF[14]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[15]) < delta){
                rY[15] += mDt*d_dt_chaste_interface_var_INa__jp;
            }
            else
            {
                rY[15] += (d_dt_chaste_interface_var_INa__jp/mPartialF[15])*(exp(mPartialF[15]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[16]) < delta){
                rY[16] += mDt*d_dt_chaste_interface_var_INaL__mL;
            }
            else
            {
                rY[16] += (d_dt_chaste_interface_var_INaL__mL/mPartialF[16])*(exp(mPartialF[16]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[17]) < delta){
                rY[17] += mDt*d_dt_chaste_interface_var_INaL__hL;
            }
            else
            {
                rY[17] += (d_dt_chaste_interface_var_INaL__hL/mPartialF[17])*(exp(mPartialF[17]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[18]) < delta){
                rY[18] += mDt*d_dt_chaste_interface_var_INaL__hLp;
            }
            else
            {
                rY[18] += (d_dt_chaste_interface_var_INaL__hLp/mPartialF[18])*(exp(mPartialF[18]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[19]) < delta){
                rY[19] += mDt*d_dt_chaste_interface_var_Ito__a;
            }
            else
            {
                rY[19] += (d_dt_chaste_interface_var_Ito__a/mPartialF[19])*(exp(mPartialF[19]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[20]) < delta){
                rY[20] += mDt*d_dt_chaste_interface_var_Ito__iF;
            }
            else
            {
                rY[20] += (d_dt_chaste_interface_var_Ito__iF/mPartialF[20])*(exp(mPartialF[20]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[21]) < delta){
                rY[21] += mDt*d_dt_chaste_interface_var_Ito__iS;
            }
            else
            {
                rY[21] += (d_dt_chaste_interface_var_Ito__iS/mPartialF[21])*(exp(mPartialF[21]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[22]) < delta){
                rY[22] += mDt*d_dt_chaste_interface_var_Ito__ap;
            }
            else
            {
                rY[22] += (d_dt_chaste_interface_var_Ito__ap/mPartialF[22])*(exp(mPartialF[22]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[23]) < delta){
                rY[23] += mDt*d_dt_chaste_interface_var_Ito__iFp;
            }
            else
            {
                rY[23] += (d_dt_chaste_interface_var_Ito__iFp/mPartialF[23])*(exp(mPartialF[23]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[24]) < delta){
                rY[24] += mDt*d_dt_chaste_interface_var_Ito__iSp;
            }
            else
            {
                rY[24] += (d_dt_chaste_interface_var_Ito__iSp/mPartialF[24])*(exp(mPartialF[24]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[25]) < delta){
                rY[25] += mDt*d_dt_chaste_interface_var_ICaL__d;
            }
            else
            {
                rY[25] += (d_dt_chaste_interface_var_ICaL__d/mPartialF[25])*(exp(mPartialF[25]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[26]) < delta){
                rY[26] += mDt*d_dt_chaste_interface_var_ICaL__ff;
            }
            else
            {
                rY[26] += (d_dt_chaste_interface_var_ICaL__ff/mPartialF[26])*(exp(mPartialF[26]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[27]) < delta){
                rY[27] += mDt*d_dt_chaste_interface_var_ICaL__fs;
            }
            else
            {
                rY[27] += (d_dt_chaste_interface_var_ICaL__fs/mPartialF[27])*(exp(mPartialF[27]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[28]) < delta){
                rY[28] += mDt*d_dt_chaste_interface_var_ICaL__fcaf;
            }
            else
            {
                rY[28] += (d_dt_chaste_interface_var_ICaL__fcaf/mPartialF[28])*(exp(mPartialF[28]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[29]) < delta){
                rY[29] += mDt*d_dt_chaste_interface_var_ICaL__fcas;
            }
            else
            {
                rY[29] += (d_dt_chaste_interface_var_ICaL__fcas/mPartialF[29])*(exp(mPartialF[29]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[30]) < delta){
                rY[30] += mDt*d_dt_chaste_interface_var_ICaL__jca;
            }
            else
            {
                rY[30] += (d_dt_chaste_interface_var_ICaL__jca/mPartialF[30])*(exp(mPartialF[30]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[31]) < delta){
                rY[31] += mDt*d_dt_chaste_interface_var_ICaL__ffp;
            }
            else
            {
                rY[31] += (d_dt_chaste_interface_var_ICaL__ffp/mPartialF[31])*(exp(mPartialF[31]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[32]) < delta){
                rY[32] += mDt*d_dt_chaste_interface_var_ICaL__fcafp;
            }
            else
            {
                rY[32] += (d_dt_chaste_interface_var_ICaL__fcafp/mPartialF[32])*(exp(mPartialF[32]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[33]) < delta){
                rY[33] += mDt*d_dt_chaste_interface_var_ICaL__nca;
            }
            else
            {
                rY[33] += (d_dt_chaste_interface_var_ICaL__nca/mPartialF[33])*(exp(mPartialF[33]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[34]) < delta){
                rY[34] += mDt*d_dt_chaste_interface_var_IKr__xrf;
            }
            else
            {
                rY[34] += (d_dt_chaste_interface_var_IKr__xrf/mPartialF[34])*(exp(mPartialF[34]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[35]) < delta){
                rY[35] += mDt*d_dt_chaste_interface_var_IKr__xrs;
            }
            else
            {
                rY[35] += (d_dt_chaste_interface_var_IKr__xrs/mPartialF[35])*(exp(mPartialF[35]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[36]) < delta){
                rY[36] += mDt*d_dt_chaste_interface_var_IKs__xs1;
            }
            else
            {
                rY[36] += (d_dt_chaste_interface_var_IKs__xs1/mPartialF[36])*(exp(mPartialF[36]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[37]) < delta){
                rY[37] += mDt*d_dt_chaste_interface_var_IKs__xs2;
            }
            else
            {
                rY[37] += (d_dt_chaste_interface_var_IKs__xs2/mPartialF[37])*(exp(mPartialF[37]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[38]) < delta){
                rY[38] += mDt*d_dt_chaste_interface_var_IK1__xk1;
            }
            else
            {
                rY[38] += (d_dt_chaste_interface_var_IK1__xk1/mPartialF[38])*(exp(mPartialF[38]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[39]) < delta){
                rY[39] += mDt*d_dt_chaste_interface_var_ryr__Jrelnp;
            }
            else
            {
                rY[39] += (d_dt_chaste_interface_var_ryr__Jrelnp/mPartialF[39])*(exp(mPartialF[39]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[40]) < delta){
                rY[40] += mDt*d_dt_chaste_interface_var_ryr__Jrelp;
            }
            else
            {
                rY[40] += (d_dt_chaste_interface_var_ryr__Jrelp/mPartialF[40])*(exp(mPartialF[40]*mDt)-1.0);
            }
            
        }        
        
    }
   
    
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        double d_dt_chaste_interface_var_membrane__v;
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__nai = rY[3];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__nass = rY[4];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__ki = rY[5];
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__kss = rY[6];
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__INa__m = rY[10];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INa__hf = rY[11];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hs = rY[12];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__j = rY[13];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hsp = rY[14];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__jp = rY[15];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__mL = rY[16];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INaL__hL = rY[17];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__hLp = rY[18];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__a = rY[19];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ito__iF = rY[20];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__iS = rY[21];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__ap = rY[22];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ito__iFp = rY[23];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__iSp = rY[24];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__nca = rY[33];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrf = rY[34];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrs = rY[35];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs1 = rY[36];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs2 = rY[37];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IK1__xk1 = rY[38];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_ICaL__Aff = 0.59999999999999998; // dimensionless
        const double var_ICaL__Afs = 1.0 - var_ICaL__Aff; // dimensionless
        const double var_ICaL__f = var_ICaL__Aff * var_chaste_interface__ICaL__ff + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__fp = var_ICaL__Aff * var_chaste_interface__ICaL__ffp + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_INa__Ahf = 0.98999999999999999; // dimensionless
        const double var_INa__Ahs = 1.0 - var_INa__Ahf; // dimensionless
        const double var_INa__h = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hs; // dimensionless
        const double var_INa__hp = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hsp; // dimensionless
        const double var_INaCa_i__KmCaAct = 0.00014999999999999999; // millimolar
        const double var_INaCa_i__kasymm = 12.5; // dimensionless
        const double var_INaCa_i__kcaoff = 5000.0; // per_millisecond
        const double var_INaCa_i__k2_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k2_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__kcaon = 1500000.0; // per_millisecond
        const double var_INaCa_i__kna1 = 15.0; // per_millisecond
        const double var_INaCa_i__kna2 = 5.0; // per_millisecond
        const double var_INaCa_i__kna3 = 88.120000000000005; // per_millisecond
        const double var_INaCa_i__qca = 0.16700000000000001; // dimensionless
        const double var_INaCa_i__qna = 0.52239999999999998; // dimensionless
        const double var_INaCa_i__wca = 60000.0; // dimensionless
        const double var_INaCa_i__wna = 60000.0; // dimensionless
        const double var_INaCa_i__wnaca = 5000.0; // dimensionless
        const double var_INaK__H = 9.9999999999999995e-8; // millimolar
        const double var_INaK__Khp = 1.698e-7; // millimolar
        const double var_INaK__Kki = 0.5; // per_millisecond
        const double var_INaK__Kko = 0.35820000000000002; // per_millisecond
        const double var_INaK__Kmgatp = 1.698e-7; // millimolar
        const double var_INaK__Knai0 = 9.0730000000000004; // millimolar
        const double var_INaK__Knao0 = 27.780000000000001; // millimolar
        const double var_INaK__Knap = 224.0; // millimolar
        const double var_INaK__Kxkur = 292.0; // millimolar
        const double var_INaK__MgADP = 0.050000000000000003; // millimolar
        const double var_INaK__MgATP = 9.8000000000000007; // millimolar
        const double var_INaK__delta = -0.155; // millivolt
        const double var_INaK__eP = 4.2000000000000002; // dimensionless
        const double var_INaK__k1m = 182.40000000000001; // per_millisecond
        const double var_INaK__b1 = var_INaK__MgADP * var_INaK__k1m; // dimensionless
        const double var_INaK__k1p = 949.5; // per_millisecond
        const double var_INaK__k2m = 39.399999999999999; // per_millisecond
        const double var_INaK__k2p = 687.20000000000005; // per_millisecond
        const double var_INaK__a2 = var_INaK__k2p; // dimensionless
        const double var_INaK__k3m = 79300.0; // per_millisecond
        const double var_INaK__k3p = 1899.0; // per_millisecond
        const double var_INaK__k4m = 40.0; // per_millisecond
        const double var_INaK__k4p = 639.0; // per_millisecond
        const double var_INaK__a4 = var_INaK__MgATP * var_INaK__k4p / ((1.0 + var_INaK__MgATP / var_INaK__Kmgatp) * var_INaK__Kmgatp); // dimensionless
        const double var_INab__PNab = 3.75e-10; // milliS_per_microF
        const double var_IpCa__KmCap = 0.00050000000000000001; // millimolar
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[7]) : ((var_environment__celltype == 2.0) ? (2.5 * mParameters[7]) : (mParameters[7]))); // dimensionless
        const double var_ICaL__PCaK = 0.00035740000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaNa = 0.00125 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaKp = 0.00035740000000000001 * var_ICaL__PCap; // dimensionless
        const double var_ICaL__PCaNap = 0.00125 * var_ICaL__PCap; // dimensionless
        const double var_IK1__GK1 = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[12]) : ((var_environment__celltype == 2.0) ? (1.3 * mParameters[12]) : (mParameters[12]))); // milliS_per_microF
        const double var_IKb__GKb = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[9]) : (mParameters[9])); // milliS_per_microF
        const double var_IKr__GKr = ((var_environment__celltype == 1.0) ? (1.3 * mParameters[14]) : ((var_environment__celltype == 2.0) ? (0.80000000000000004 * mParameters[14]) : (mParameters[14]))); // milliS_per_microF
        const double var_IKs__GKs = ((var_environment__celltype == 1.0) ? (1.3999999999999999 * mParameters[15]) : (mParameters[15])); // milliS_per_microF
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * mParameters[16]) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * mParameters[16]) : (mParameters[16]))); // milliS_per_microF
        const double var_INaK__Pnak = ((var_environment__celltype == 1.0) ? (0.90000000000000002 * mParameters[17]) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * mParameters[17]) : (mParameters[17]))); // milliS_per_microF
        const double var_INaL__GNaL = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[13]) : (mParameters[13])); // milliS_per_microF
        const double var_Ito__Gto = (((var_environment__celltype == 1.0) || (var_environment__celltype == 2.0)) ? (4.0 * mParameters[18]) : (mParameters[18])); // milliS_per_microF
        const double var_IK1__GK1_total = sqrt(mParameters[3]) * var_IK1__GK1; // milliS_per_microF
        const double var_IKr__GKr_total = 0.43033148291193518 * sqrt(mParameters[3]) * var_IKr__GKr; // milliS_per_microF
        const double var_INaCa_i__h10_i = 1.0 + (1.0 + mParameters[4] / var_INaCa_i__kna2) * mParameters[4] / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h10_ss = 1.0 + (1.0 + mParameters[4] / var_INaCa_i__kna2) * mParameters[4] / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h11_i = pow(mParameters[4], 2) / (var_INaCa_i__h10_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h11_ss = pow(mParameters[4], 2) / (var_INaCa_i__h10_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h12_i = 1 / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__h12_ss = 1 / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__k1_i = var_INaCa_i__h12_i * var_INaCa_i__kcaon * mParameters[2]; // dimensionless
        const double var_INaCa_i__k1_ss = var_INaCa_i__h12_ss * var_INaCa_i__kcaon * mParameters[2]; // dimensionless
        const double var_IKs__KsCa = 1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__cai), 1.3999999999999999)); // dimensionless
        const double var_IKs__GKs_total = var_IKs__GKs * var_IKs__KsCa; // milliS_per_microF
        const double var_INaCa_i__allo_i = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cai, 2)); // dimensionless
        const double var_IpCa__IpCa = mParameters[10] * var_chaste_interface__intracellular_ions__cai / (var_IpCa__KmCap + var_chaste_interface__intracellular_ions__cai); // microA_per_microF
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INa__fINap = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__allo_ss = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cass, 2)); // dimensionless
        const double var_INaL__fINaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_Ito__fItop = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__h4_i = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_i = pow(var_chaste_interface__intracellular_ions__nai, 2) / (var_INaCa_i__h4_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_i = 1 / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k6_i = var_INaCa_i__h6_i * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cai; // dimensionless
        const double var_INaK__P = var_INaK__eP / (1.0 + var_INaK__H / var_INaK__Khp + var_chaste_interface__intracellular_ions__nai / var_INaK__Knap + var_chaste_interface__intracellular_ions__ki / var_INaK__Kxkur); // dimensionless
        const double var_INaK__b3 = var_INaK__H * var_INaK__P * var_INaK__k3m / (1.0 + var_INaK__MgATP / var_INaK__Kmgatp); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_ss = pow(var_chaste_interface__intracellular_ions__nass, 2) / (var_INaCa_i__h4_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_ss = 1 / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k6_ss = var_INaCa_i__h6_ss * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cass; // dimensionless
        const double var_membrane__Istim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_membrane__Istim = var_membrane__Istim_converted / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double var_ICaL__Afcaf = 0.29999999999999999 + 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_IK1__rk1 = 1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * mParameters[3])); // millisecond
        const double var_IKb__xkb = 1 / (1.0 + exp(0.78953107960741553 - 0.054525627044711013 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrf = 1 / (1.0 + exp(1.4344412457471867 + 0.026171159382360639 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrs = 1.0 - var_IKr__Axrf; // dimensionless
        const double var_IKr__rkr = 1 / ((1.0 + exp(0.73333333333333328 + 0.013333333333333334 * var_chaste_interface__membrane__v)) * (1.0 + exp(-0.33333333333333331 + 0.033333333333333333 * var_chaste_interface__membrane__v))); // dimensionless
        const double var_IKr__xr = var_IKr__Axrf * var_chaste_interface__IKr__xrf + var_IKr__Axrs * var_chaste_interface__IKr__xrs; // dimensionless
        const double var_Ito__AiF = 1 / (1.0 + exp(-1.4126984126984128 + 0.0066137566137566143 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__AiS = 1.0 - var_Ito__AiF; // dimensionless
        const double var_Ito__i = var_Ito__AiF * var_chaste_interface__Ito__iF + var_Ito__AiS * var_chaste_interface__Ito__iS; // dimensionless
        const double var_Ito__ip = var_Ito__AiF * var_chaste_interface__Ito__iFp + var_Ito__AiS * var_chaste_interface__Ito__iSp; // dimensionless
        const double var_INaCa_i__hca = exp(var_INaCa_i__qca * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__hna = exp(var_INaCa_i__qna * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h2_i = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / (var_INaCa_i__h1_i * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h2_ss = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / (var_INaCa_i__h1_ss * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h3_i = 1 / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h3_ss = 1 / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * mParameters[4] / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * mParameters[4] / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h8_i = mParameters[4] / (var_INaCa_i__h7_i * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h8_ss = mParameters[4] / (var_INaCa_i__h7_ss * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h9_i = 1 / var_INaCa_i__h7_i; // dimensionless
        const double var_INaCa_i__h9_ss = 1 / var_INaCa_i__h7_ss; // dimensionless
        const double var_INaCa_i__k3p_i = var_INaCa_i__h9_i * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3p_ss = var_INaCa_i__h9_ss * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3pp_i = var_INaCa_i__h8_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_i = var_INaCa_i__k3p_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = var_INaCa_i__h8_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_ss = var_INaCa_i__k3p_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4p_i = var_INaCa_i__h3_i * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4p_ss = var_INaCa_i__h3_ss * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4pp_i = var_INaCa_i__h2_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_i = var_INaCa_i__k4p_i + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = var_INaCa_i__h2_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_ss = var_INaCa_i__k4p_ss + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = var_INaCa_i__h2_i * var_INaCa_i__h5_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k7_ss = var_INaCa_i__h2_ss * var_INaCa_i__h5_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_i = var_INaCa_i__h11_i * var_INaCa_i__h8_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_ss = var_INaCa_i__h11_ss * var_INaCa_i__h8_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__x1_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k5_i * var_INaCa_i__k7_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k2_i * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k5_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i; // dimensionless
        const double var_INaCa_i__x2_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss; // dimensionless
        const double var_INaCa_i__x3_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i * var_INaCa_i__k5_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k2_i * var_INaCa_i__k8_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E3_i = var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E4_i = var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__JncxCa_i = var_INaCa_i__E2_i * var_INaCa_i__k2_i - var_INaCa_i__E1_i * var_INaCa_i__k1_i; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_i = var_INaCa_i__E3_i * var_INaCa_i__k4pp_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i + 3.0 * var_INaCa_i__E4_i * var_INaCa_i__k7_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i; // millimolar_per_millisecond
        const double var_INaCa_i__x4_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss * var_INaCa_i__k5_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k8_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E3_ss = var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E4_ss = var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__JncxCa_ss = var_INaCa_i__E2_ss * var_INaCa_i__k2_ss - var_INaCa_i__E1_ss * var_INaCa_i__k1_ss; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_ss = var_INaCa_i__E3_ss * var_INaCa_i__k4pp_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss + 3.0 * var_INaCa_i__E4_ss * var_INaCa_i__k7_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss; // millimolar_per_millisecond
        const double var_INaK__Knai = var_INaK__Knai0 * exp(0.33333333333333331 * var_INaK__delta * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // millimolar
        const double var_INaK__Knao = var_INaK__Knao0 * exp(0.33333333333333331 * (1.0 - var_INaK__delta) * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // millimolar
        const double var_INaK__a1 = pow(var_chaste_interface__intracellular_ions__nai, 3) * var_INaK__k1p / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = pow(mParameters[3], 2) * var_INaK__k3p / ((-1.0 + pow((1.0 + mParameters[3] / var_INaK__Kko), 2) + pow((1.0 + mParameters[4] / var_INaK__Knao), 3)) * pow(var_INaK__Kko, 2)); // dimensionless
        const double var_INaK__b2 = pow(mParameters[4], 3) * var_INaK__k2m / ((-1.0 + pow((1.0 + mParameters[3] / var_INaK__Kko), 2) + pow((1.0 + mParameters[4] / var_INaK__Knao), 3)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = pow(var_chaste_interface__intracellular_ions__ki, 2) * var_INaK__k4m / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Kki, 2)); // dimensionless
        const double var_INaK__x1 = var_INaK__a1 * var_INaK__a2 * var_INaK__a4 + var_INaK__a1 * var_INaK__a2 * var_INaK__b3 + var_INaK__a2 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = var_INaK__a1 * var_INaK__a2 * var_INaK__a3 + var_INaK__a2 * var_INaK__a3 * var_INaK__b4 + var_INaK__a3 * var_INaK__b1 * var_INaK__b4 + var_INaK__b1 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = var_INaK__a2 * var_INaK__a3 * var_INaK__a4 + var_INaK__a3 * var_INaK__a4 * var_INaK__b1 + var_INaK__a4 * var_INaK__b1 * var_INaK__b2 + var_INaK__b1 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = var_INaK__a1 * var_INaK__a3 * var_INaK__a4 + var_INaK__a1 * var_INaK__a4 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__E1 = var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E2 = var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E3 = var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E4 = var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__JnakK = 2.0 * var_INaK__E4 * var_INaK__b1 - 2.0 * var_INaK__E3 * var_INaK__a1; // millimolar_per_millisecond
        const double var_INaK__JnakNa = 3.0 * var_INaK__E1 * var_INaK__a3 - 3.0 * var_INaK__E2 * var_INaK__b3; // millimolar_per_millisecond
        const double var_membrane__vffrt = pow(mParameters[5], 2) * var_chaste_interface__membrane__v / (mParameters[6] * mParameters[19]); // coulomb_per_mole
        const double var_membrane__vfrt = var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19]); // dimensionless
        const double var_ICaL__PhiCaK = (-0.75 * mParameters[3] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaK = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaK * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaKp * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__PhiCaL = 4.0 * (-0.34100000000000003 * mParameters[2] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(2.0 * var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCa * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCap * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__PhiCaNa = (-0.75 * mParameters[4] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaNa = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNa * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNap * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICab__ICab = 4.0 * (-0.34100000000000003 * mParameters[2] + var_chaste_interface__intracellular_ions__cai * exp(2.0 * var_membrane__vfrt)) * mParameters[8] * var_membrane__vffrt / (-1.0 + exp(2.0 * var_membrane__vfrt)); // microA_per_microF
        const double var_INab__INab = (-mParameters[4] + var_chaste_interface__intracellular_ions__nai * exp(var_membrane__vfrt)) * var_INab__PNab * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // microA_per_microF
        const double var_physical_constants__zca = 2.0; // dimensionless
        const double var_physical_constants__zk = 1.0; // dimensionless
        const double var_physical_constants__zna = 1.0; // dimensionless
        const double var_INaCa_i__INaCa_i = 0.80000000000000004 * (var_INaCa_i__JncxCa_i * var_physical_constants__zca + var_INaCa_i__JncxNa_i * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_i; // microA_per_microF
        const double var_INaCa_i__INaCa_ss = 0.20000000000000001 * (var_INaCa_i__JncxCa_ss * var_physical_constants__zca + var_INaCa_i__JncxNa_ss * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_ss; // microA_per_microF
        const double var_INaK__INaK = (var_INaK__JnakK * var_physical_constants__zk + var_INaK__JnakNa * var_physical_constants__zna) * var_INaK__Pnak; // microA_per_microF
        const double var_reversal_potentials__EK = mParameters[6] * mParameters[19] * log(mParameters[3] / var_chaste_interface__intracellular_ions__ki) / mParameters[5]; // millivolt
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IK1__GK1_total * var_IK1__rk1 * var_chaste_interface__IK1__xk1; // microA_per_microF
        const double var_IKb__IKb = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKb__GKb * var_IKb__xkb; // microA_per_microF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKr__GKr_total * var_IKr__rkr * var_IKr__xr; // microA_per_microF
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - var_Ito__fItop) * var_chaste_interface__Ito__a * var_Ito__i + var_chaste_interface__Ito__ap * var_Ito__fItop * var_Ito__ip) * var_Ito__Gto; // microA_per_microF
        const double var_reversal_potentials__ENa = mParameters[6] * mParameters[19] * log(mParameters[4] / var_chaste_interface__intracellular_ions__nai) / mParameters[5]; // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INa__fINap) * var_INa__h * var_chaste_interface__INa__j + var_INa__fINap * var_INa__hp * var_chaste_interface__INa__jp) * mParameters[11]; // microA_per_microF
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INaL__fINaLp) * var_chaste_interface__INaL__hL + var_INaL__fINaLp * var_chaste_interface__INaL__hLp) * var_INaL__GNaL * var_chaste_interface__INaL__mL; // microA_per_microF
        const double var_reversal_potentials__PKNa = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = mParameters[6] * mParameters[19] * log((mParameters[4] * var_reversal_potentials__PKNa + mParameters[3]) / (var_chaste_interface__intracellular_ions__nai * var_reversal_potentials__PKNa + var_chaste_interface__intracellular_ions__ki)) / mParameters[5]; // millivolt
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__v) * var_IKs__GKs_total * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        d_dt_chaste_interface_var_membrane__v = -var_ICaL__ICaK - var_ICaL__ICaL - var_ICaL__ICaNa - var_ICab__ICab - var_IK1__IK1 - var_IKb__IKb - var_IKr__IKr - var_IKs__IKs - var_INa__INa - var_INaCa_i__INaCa_i - var_INaCa_i__INaCa_ss - var_INaK__INaK - var_INaL__INaL - var_INab__INab - var_IpCa__IpCa - var_Ito__Ito - var_membrane__Istim; // millivolt / millisecond

        return d_dt_chaste_interface_var_membrane__v;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            double var_chaste_interface__intracellular_ions__cai = rY[1];
            // Units: millimolar; Initial value: 0.0001
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__intracellular_ions__nai = rY[3];
            // Units: millimolar; Initial value: 7.0
            double var_chaste_interface__intracellular_ions__nass = rY[4];
            // Units: millimolar; Initial value: 7.0
            double var_chaste_interface__intracellular_ions__ki = rY[5];
            // Units: millimolar; Initial value: 145.0
            double var_chaste_interface__intracellular_ions__kss = rY[6];
            // Units: millimolar; Initial value: 145.0
            double var_chaste_interface__intracellular_ions__cass = rY[7];
            // Units: millimolar; Initial value: 0.0001
            double var_chaste_interface__INa__m = rY[10];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__INa__hf = rY[11];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__INa__hs = rY[12];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__INa__j = rY[13];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__INa__hsp = rY[14];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__INa__jp = rY[15];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__INaL__mL = rY[16];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__INaL__hL = rY[17];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__INaL__hLp = rY[18];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__Ito__a = rY[19];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__Ito__iF = rY[20];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__Ito__iS = rY[21];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__Ito__ap = rY[22];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__Ito__iFp = rY[23];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__Ito__iSp = rY[24];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__d = rY[25];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__ICaL__ff = rY[26];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__fs = rY[27];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__fcaf = rY[28];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__fcas = rY[29];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__jca = rY[30];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__ffp = rY[31];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__fcafp = rY[32];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__nca = rY[33];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__IKr__xrf = rY[34];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__IKr__xrs = rY[35];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__IKs__xs1 = rY[36];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__IKs__xs2 = rY[37];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__IK1__xk1 = rY[38];
            // Units: dimensionless; Initial value: 1.0
            

            const double var_x0 = 1 / (mParameters[6] * mParameters[19]);
            const double var_x1 = var_x0 * mParameters[5];
            const double var_x2 = var_x1 * var_chaste_interface__membrane__v;
            const double var_x3 = exp(0.38500000000000001 * var_x2);
            const double var_x4 = mParameters[4] / var_x3;
            const double var_x5 = 1.0 + 0.035997120230381568 * var_x4;
            const double var_x6 = pow(var_x5, 3);
            const double var_x7 = pow((0.35820000000000002 + mParameters[3]), 2);
            const double var_x8 = 1 / (-1.0 + var_x6 + 7.7937924625297832 * var_x7);
            const double var_x9 = pow(mParameters[3], 2);
            const double var_x10 = var_x8 * var_x9;
            const double var_x11 = pow(var_chaste_interface__intracellular_ions__nai, 3);
            const double var_x12 = exp(-0.051666666666666666 * var_x2);
            const double var_x13 = 1 / var_x12;
            const double var_x14 = var_x13 * var_chaste_interface__intracellular_ions__nai;
            const double var_x15 = 1.0 + 0.11021712774165104 * var_x14;
            const double var_x16 = pow(var_x15, 3);
            const double var_x17 = pow((0.5 + var_chaste_interface__intracellular_ions__ki), 2);
            const double var_x18 = 1 / (-1.0 + var_x16 + 4.0 * var_x17);
            const double var_x19 = pow(var_x12, (-3));
            const double var_x20 = var_x18 * var_x19;
            const double var_x21 = var_x11 * var_x20;
            const double var_x22 = var_x10 * var_x21;
            const double var_x23 = var_x1 * var_x22;
            const double var_x24 = pow(mParameters[4], 3);
            const double var_x25 = var_x24 * var_x8 / pow(var_x3, 3);
            const double var_x26 = var_x21 * var_x25;
            const double var_x27 = 1.4929407925401197 * var_x26;
            const double var_x28 = var_x1 * var_x27;
            const double var_x29 = pow(var_chaste_interface__intracellular_ions__nai, 4);
            const double var_x30 = var_x1 * var_x29;
            const double var_x31 = pow((-0.25 + var_x17 + 0.25 * var_x16), (-2));
            const double var_x32 = pow(var_x15, 2);
            const double var_x33 = var_x32 / pow(var_x12, 4);
            const double var_x34 = var_x31 * var_x33;
            const double var_x35 = var_x30 * var_x34;
            const double var_x36 = var_x10 * var_x35;
            const double var_x37 = var_x1 * var_x21;
            const double var_x38 = pow(mParameters[4], 4);
            const double var_x39 = pow(var_x5, 2) / pow((-0.12830724000000002 + var_x7 + 0.12830724000000002 * var_x6), 2);
            const double var_x40 = var_x39 / pow(var_x3, 4);
            const double var_x41 = var_x38 * var_x40;
            const double var_x42 = 0.0010218676570066343 * var_x37 * var_x41;
            const double var_x43 = 1 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ki + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nai);
            const double var_x44 = var_x21 * var_x43;
            const double var_x45 = var_x1 * var_x25;
            const double var_x46 = 1.348266719199441e-12 * var_x44 * var_x45;
            const double var_x47 = 0.0015940553210329999 * var_x29 * var_x34 * var_x45;
            const double var_x48 = var_x39 * var_x4 * var_x9;
            const double var_x49 = var_x37 * var_x48;
            const double var_x50 = var_x1 * var_x44;
            const double var_x51 = 9.2284312964898121e-16 * var_x41 * var_x50;
            const double var_x52 = var_x25 * var_x43;
            const double var_x53 = 1.4395827005670213e-15 * var_x35 * var_x52;
            const double var_x54 = pow(var_chaste_interface__intracellular_ions__ki, 2);
            const double var_x55 = var_x18 * var_x54;
            const double var_x56 = var_x43 * var_x55;
            const double var_x57 = var_x25 * var_x56;
            const double var_x58 = var_x1 * var_x57;
            const double var_x59 = var_x1 * var_x38;
            const double var_x60 = var_x40 * var_x59;
            const double var_x61 = var_x56 * var_x60;
            const double var_x62 = var_x1 * var_x52;
            const double var_x63 = var_x31 * var_x54;
            const double var_x64 = var_x32 * var_x63;
            const double var_x65 = var_x14 * var_x64;
            const double var_x66 = var_x62 * var_x65;
            const double var_x67 = 1.1614636692670073e-13 * var_x61 - 1.8118171462682526e-13 * var_x66 - 1.9599073649699195e-10 * var_x58;
            const double var_x68 = var_x42 + var_x51 + var_x67 - var_x28 - var_x46 - var_x47 - var_x53 + 1863582.3429890024 * var_x23 + 8229.414882767278 * var_x49 - 12837.418322144014 * var_x36;
            const double var_x69 = var_x10 * var_x55;
            const double var_x70 = var_x25 * var_x55;
            const double var_x71 = 2.6817254812739919 * var_x70 + 1648931648.7518551 * var_x69;
            const double var_x72 = 6585420658.1002293 * var_x10 + 9.6722701128385645e-12 * var_x52 + 10.71014095526842 * var_x25;
            const double var_x73 = var_x25 * var_x44;
            const double var_x74 = var_x27 + 1.348266719199441e-12 * var_x73;
            const double var_x75 = 6.3450816326903207e-5 * var_x56 + 5.041496472709802e-7 * var_x44 + 558246.7943749798 * var_x21;
            const double var_x76 = 1 / (var_x71 + var_x72 + var_x74 + var_x75 + 3.3937789869608994e-10 * var_x57 + 24953131.661984976 * var_x22);
            const double var_x77 = 16.416 * var_x76;
            const double var_x78 = 3.0973929308714605 * var_x1 * var_x70;
            const double var_x79 = 0.0018355507117076787 * var_x55 * var_x60;
            const double var_x80 = var_x1 * var_x48;
            const double var_x81 = 1128638.1408383038 * var_x55 * var_x80;
            const double var_x82 = var_x1 * var_x65;
            const double var_x83 = 1760611.1922499281 * var_x10 * var_x82;
            const double var_x84 = 0.0028633545243956569 * var_x45 * var_x65;
            const double var_x85 = var_x79 + var_x81 - var_x78 - var_x83 - var_x84 + 8850.1627627912421 * var_x49 + 2004153.064618669 * var_x23 - 13805.74964605608 * var_x36;
            const double var_x86 = var_x43 * var_x76;
            const double var_x87 = 1.5581090301462333e-9 * var_x86;
            const double var_x88 = 12.370212803335024 * var_x45;
            const double var_x89 = 86528.253128121869 * var_x37;
            const double var_x90 = 596.05597051775783 * var_x35;
            const double var_x91 = 1.1171471980328542e-11 * var_x62;
            const double var_x92 = 7.8143195327001933e-8 * var_x50;
            const double var_x93 = 0.0073307305278664144 * var_x60;
            const double var_x94 = 5.3829490884356011e-10 * var_x35 * var_x43;
            const double var_x95 = 6.6203429148219431e-15 * var_x43 * var_x60;
            const double var_x96 = 4507498.4968736656 * var_x80;
            const double var_x97 = 6.7748240181513803e-8 * var_x43 * var_x82;
            const double var_x98 = var_x28 + var_x46 + var_x47 + var_x53 + var_x78 + var_x83 + var_x84 + var_x88 + var_x90 + var_x91 + var_x94 + var_x97 - var_x42 - var_x51 - var_x79 - var_x81 - var_x89 - var_x92 - var_x93 - var_x95 - var_x96 + 3.6236342925365053e-13 * var_x66 + 26643.167968200094 * var_x36 + 3.9198147299398391e-10 * var_x58 - 2.3229273385340146e-13 * var_x61 - 17079.577645558518 * var_x49 - 3867735.4076076713 * var_x23;
            const double var_x99 = pow((var_x10 + 0.25039124064514068 * var_x69 + 7.6555420442407695e-17 * var_x44 + 8.4770104046173956e-5 * var_x21 + 2.0473509426327076e-22 * var_x73 + 0.0037891477184972245 * var_x22 + 9.6350437764149725e-15 * var_x56 + 4.0722159152815902e-10 * var_x70 + 1.4687399051632995e-21 * var_x52 + 1.6263412029867345e-9 * var_x25 + 5.1534733514501733e-20 * var_x57 + 2.2670393738686469e-10 * var_x26), (-2));
            const double var_x100 = 1.6968894934804497e-10 * var_x57;
            const double var_x101 = var_x99 * (var_x100 + var_x74 + 12023111.890251627 * var_x22);
            const double var_x102 = 3.7852999589875663e-19 * var_x101;
            const double var_x103 = var_x98 * var_x99;
            const double var_x104 = var_x71 + 12930019.771733347 * var_x22;
            const double var_x105 = var_x104 * var_x43;
            const double var_x106 = 3.5927814619339015e-29 * var_x105;
            const double var_x107 = var_x67 + var_x89 + var_x92 - var_x90 - var_x94 - var_x97;
            const double var_x108 = var_x10 * var_x76;
            const double var_x109 = 39961.112093128955 * var_x108;
            const double var_x110 = var_x21 * var_x76;
            const double var_x111 = var_x110 * (var_x93 + var_x95 + var_x96 - var_x88 - var_x91);
            const double var_x112 = var_x100 + var_x75;
            const double var_x113 = var_x10 * var_x112;
            const double var_x114 = 9.2144734385488902e-16 * var_x113;
            const double var_x115 = var_x21 * var_x72;
            const double var_x116 = 5.2765213309289703e-20 * var_x115;
            const double var_x117 = var_x1 * var_x110 * var_x72;
            const double var_x118 = var_x72 * var_x76;
            const double var_x119 = var_x118 * var_x35;
            const double var_x120 = var_x112 * var_x76 * var_x80;
            const double var_x121 = 1 / (13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[4]) * mParameters[4]);
            const double var_x122 = exp(0.52239999999999998 * var_x2);
            const double var_x123 = 1 / var_x122;
            const double var_x124 = 1.0 + 0.011348161597821153 * (1.0 + var_x123) * mParameters[4];
            const double var_x125 = pow(var_x124, (-2));
            const double var_x126 = pow(var_x122, 2);
            const double var_x127 = var_x125 / var_x126;
            const double var_x128 = var_x121 * var_x127 * var_x59;
            const double var_x129 = 1 / var_x124;
            const double var_x130 = var_x123 * var_x129;
            const double var_x131 = var_x121 * var_x24;
            const double var_x132 = var_x130 * var_x131;
            const double var_x133 = 4.7426236949614156 * var_x1;
            const double var_x134 = 0.053820060088077798 * var_x128 - var_x132 * var_x133;
            const double var_x135 = 0.011348161597821153 + 0.011348161597821153 * var_x122;
            const double var_x136 = 1.0 + var_x135 * var_chaste_interface__intracellular_ions__nass;
            const double var_x137 = 1 / var_x136;
            const double var_x138 = 1 / exp(0.16700000000000001 * var_x2);
            const double var_x139 = var_x137 * var_x138;
            const double var_x140 = var_x122 * var_x137;
            const double var_x141 = 56.740807989105761 * var_x140;
            const double var_x142 = var_x141 * var_chaste_interface__intracellular_ions__nass;
            const double var_x143 = var_x142 + 60000.0 * var_x139;
            const double var_x144 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass;
            const double var_x145 = 1 / var_x144;
            const double var_x146 = 1500000.0 * var_x145;
            const double var_x147 = var_x146 * var_chaste_interface__intracellular_ions__cass;
            const double var_x148 = var_x134 * var_x143 * var_x147;
            const double var_x149 = var_x1 * var_x139;
            const double var_x150 = 29.641398093508847 * var_x1;
            const double var_x151 = var_x140 * var_chaste_interface__intracellular_ions__nass;
            const double var_x152 = var_x150 * var_x151;
            const double var_x153 = 0.33637537555048624 * var_x1;
            const double var_x154 = var_x126 * var_x153;
            const double var_x155 = pow(var_x136, (-2));
            const double var_x156 = pow(var_chaste_interface__intracellular_ions__nass, 2);
            const double var_x157 = var_x155 * var_x156;
            const double var_x158 = var_x154 * var_x157;
            const double var_x159 = 355.6967771221062 * var_x1;
            const double var_x160 = var_x155 * var_chaste_interface__intracellular_ions__nass;
            const double var_x161 = var_x122 * var_x138;
            const double var_x162 = var_x160 * var_x161;
            const double var_x163 = var_x152 - var_x158 - 10020.0 * var_x149 - var_x159 * var_x162;
            const double var_x164 = var_x121 * mParameters[2];
            const double var_x165 = 1500000.0 * var_x164;
            const double var_x166 = var_x165 + 9.0785292782569211 * var_x132;
            const double var_x167 = var_x147 * var_x166;
            const double var_x168 = var_x163 * var_x167;
            const double var_x169 = pow(var_chaste_interface__intracellular_ions__nass, 3);
            const double var_x170 = var_x140 * var_x145;
            const double var_x171 = var_x169 * var_x170;
            const double var_x172 = var_x164 * var_x171;
            const double var_x173 = 13617793.917385383 * var_x172;
            const double var_x174 = var_x163 * var_x173;
            const double var_x175 = 5000.0 + var_x143;
            const double var_x176 = var_x172 * var_x175;
            const double var_x177 = 7113935.5424421234 * var_x1;
            const double var_x178 = var_x176 * var_x177;
            const double var_x179 = var_x1 * pow(var_chaste_interface__intracellular_ions__nass, 4);
            const double var_x180 = var_x145 * var_x164;
            const double var_x181 = var_x155 * var_x180;
            const double var_x182 = 80730.090132116704 * var_x126;
            const double var_x183 = var_x175 * var_x179 * var_x181 * var_x182;
            const double var_x184 = var_x148 + var_x168 + var_x174 + var_x178 - var_x183;
            const double var_x185 = var_x143 * var_x166;
            const double var_x186 = 13617793.917385383 * var_x176 + var_x147 * var_x185;
            const double var_x187 = var_x147 + 9.0785292782569211 * var_x171;
            const double var_x188 = var_x143 * var_x187;
            const double var_x189 = var_x130 * mParameters[4];
            const double var_x190 = 56.740807989105761 * var_x189;
            const double var_x191 = var_x190 + 60000.0 * var_x129;
            const double var_x192 = 5000.0 + var_x191;
            const double var_x193 = var_x171 * var_x192;
            const double var_x194 = 5000.0 * var_x188 + 45392.646391284608 * var_x193;
            const double var_x195 = var_x187 * var_x191;
            const double var_x196 = var_x132 * var_x192;
            const double var_x197 = var_x145 * var_x196;
            const double var_x198 = var_x197 * var_chaste_interface__intracellular_ions__cass;
            const double var_x199 = 13617793.917385383 * var_x198 + var_x165 * var_x195;
            const double var_x200 = var_x166 * var_x191;
            const double var_x201 = 5000.0 * var_x200;
            const double var_x202 = var_x132 * var_x175;
            const double var_x203 = var_x201 + 45392.646391284608 * var_x202;
            const double var_x204 = 1 / (var_x186 + var_x194 + var_x199 + var_x203);
            const double var_x205 = 10000.0 * var_x204;
            const double var_x206 = 0.00036716666666666668 * var_x200;
            const double var_x207 = var_x145 * var_x185;
            const double var_x208 = 0.11015000000000001 * var_x164;
            const double var_x209 = pow((var_x176 + var_x198 + var_x206 + 0.0033333333333333331 * var_x193 + 0.0033333333333333331 * var_x202 + 0.00036716666666666668 * var_x188 + var_x195 * var_x208 + 0.11015000000000001 * var_x207 * var_chaste_interface__intracellular_ions__cass), (-2));
            const double var_x210 = 148206.99046754424 * var_x1;
            const double var_x211 = 1681.8768777524313 * var_x1;
            const double var_x212 = var_x126 * var_x211;
            const double var_x213 = 1778483.8856105309 * var_x1;
            const double var_x214 = var_x187 * (-50100000.0 * var_x149 + var_x151 * var_x210 - var_x157 * var_x212 - var_x162 * var_x213);
            const double var_x215 = 283704.03994552878 * var_x140;
            const double var_x216 = 300000000.0 * var_x139 + var_x215 * var_chaste_interface__intracellular_ions__nass;
            const double var_x217 = 0.053820060088077798 * var_x126;
            const double var_x218 = var_x145 * var_x155;
            const double var_x219 = var_x179 * var_x218;
            const double var_x220 = var_x133 * var_x171 - var_x217 * var_x219;
            const double var_x221 = var_x216 * var_x220;
            const double var_x222 = var_x165 * var_x191;
            const double var_x223 = var_x220 * var_x222;
            const double var_x224 = var_x123 * var_x125 * mParameters[4];
            const double var_x225 = var_x127 * pow(mParameters[4], 2);
            const double var_x226 = var_x153 * var_x225;
            const double var_x227 = var_x150 * var_x189;
            const double var_x228 = var_x226 - var_x227 + var_x159 * var_x224;
            const double var_x229 = var_x165 * var_x228;
            const double var_x230 = var_x187 * var_x229;
            const double var_x231 = 45392.646391284608 * var_x132;
            const double var_x232 = var_x163 * var_x231;
            const double var_x233 = 45392.646391284608 * var_x228;
            const double var_x234 = var_x171 * var_x233;
            const double var_x235 = var_x132 * var_x145;
            const double var_x236 = 13617793.917385383 * var_x228;
            const double var_x237 = var_x235 * var_x236 * var_chaste_interface__intracellular_ions__cass;
            const double var_x238 = var_x126 * var_x219;
            const double var_x239 = 269.10030044038899 * var_x192;
            const double var_x240 = var_x238 * var_x239;
            const double var_x241 = 23713.118474807077 * var_x1;
            const double var_x242 = var_x202 * var_x241;
            const double var_x243 = 269.10030044038899 * var_x128;
            const double var_x244 = var_x175 * var_x243;
            const double var_x245 = var_x193 * var_x241;
            const double var_x246 = var_x177 * var_x198;
            const double var_x247 = 80730.090132116704 * var_x128 * var_x192;
            const double var_x248 = var_x145 * var_x247 * var_chaste_interface__intracellular_ions__cass;
            const double var_x249 = var_x134 * (300000000.0 * var_x129 + 283704.03994552878 * var_x189);
            const double var_x250 = var_x166 * (var_x211 * var_x225 + var_x213 * var_x224 - var_x189 * var_x210);
            const double var_x251 = -var_x249 - var_x250;
            const double var_x252 = var_x209 * (var_x183 + var_x240 + var_x242 + var_x246 + var_x251 - var_x148 - var_x168 - var_x174 - var_x178 - var_x214 - var_x221 - var_x223 - var_x230 - var_x232 - var_x234 - var_x237 - var_x244 - var_x245 - var_x248);
            const double var_x253 = 5.3924544444444452e-11 * var_x186;
            const double var_x254 = 3000000.0 * var_x164;
            const double var_x255 = var_x204 * (var_x214 + var_x221 + var_x234 + var_x245 - var_x240);
            const double var_x256 = var_x142 * var_x204;
            const double var_x257 = var_x190 * var_x204;
            const double var_x258 = 1.6177363333333335e-8 * var_x164;
            const double var_x259 = var_x194 * var_x252;
            const double var_x260 = 3.0597222222222222e-13 * var_x252;
            const double var_x261 = var_x151 * var_x199;
            const double var_x262 = var_x249 + var_x250;
            const double var_x263 = 27.235587834770765 * var_x204;
            const double var_x264 = var_x171 * var_x263;
            const double var_x265 = var_x186 * var_x189;
            const double var_x266 = 27.235587834770765 * var_x132;
            const double var_x267 = 1.4686666666666667e-13 * var_x171 * var_x203;
            const double var_x268 = 1.4686666666666667e-13 * var_x132;
            const double var_x269 = var_x186 * var_x204;
            const double var_x270 = var_x199 * var_x204;
            const double var_x271 = var_x194 * var_x204;
            const double var_x272 = 14.227871084884248 * var_x1;
            const double var_x273 = var_x132 * var_x272;
            const double var_x274 = var_x203 * var_x204;
            const double var_x275 = 0.16146018026423339 * var_x128;
            const double var_x276 = var_x152 * var_x270 + var_x184 * var_x205 + var_x227 * var_x269 + var_x252 * var_x253 + var_x252 * var_x267 + var_x256 * (var_x223 + var_x230 + var_x237 + var_x248 - var_x246) + var_x260 * var_x261 + var_x264 * (var_x232 + var_x244 + var_x262 - var_x242) + var_x271 * var_x273 - var_x158 * var_x270 - var_x184 * var_x257 - var_x226 * var_x269 - var_x254 * var_x255 - var_x255 * var_x266 - var_x258 * var_x259 - var_x259 * var_x268 - var_x260 * var_x265 - var_x271 * var_x275 - 0.16146018026423339 * var_x238 * var_x274 + var_x171 * var_x272 * var_x274;
            const double var_x277 = pow(var_chaste_interface__intracellular_ions__cass, (-2));
            const double var_x278 = 1.0 + 2.2499999999999996e-8 * var_x277;
            const double var_x279 = mParameters[16] / var_x278;
            const double var_x280 = 0.22000000000000003 * var_x279;
            const double var_x281 = 1.0 + var_x135 * var_chaste_interface__intracellular_ions__nai;
            const double var_x282 = 1 / var_x281;
            const double var_x283 = var_x138 * var_x282;
            const double var_x284 = var_x122 * var_x282;
            const double var_x285 = 56.740807989105761 * var_x284;
            const double var_x286 = var_x285 * var_chaste_interface__intracellular_ions__nai;
            const double var_x287 = var_x286 + 60000.0 * var_x283;
            const double var_x288 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nai) * var_chaste_interface__intracellular_ions__nai;
            const double var_x289 = 1 / var_x288;
            const double var_x290 = 1500000.0 * var_x289;
            const double var_x291 = var_x290 * var_chaste_interface__intracellular_ions__cai;
            const double var_x292 = var_x134 * var_x287 * var_x291;
            const double var_x293 = var_x1 * var_x283;
            const double var_x294 = var_x284 * var_chaste_interface__intracellular_ions__nai;
            const double var_x295 = var_x150 * var_x294;
            const double var_x296 = pow(var_chaste_interface__intracellular_ions__nai, 2);
            const double var_x297 = pow(var_x281, (-2));
            const double var_x298 = var_x296 * var_x297;
            const double var_x299 = var_x154 * var_x298;
            const double var_x300 = var_x297 * var_chaste_interface__intracellular_ions__nai;
            const double var_x301 = var_x161 * var_x300;
            const double var_x302 = var_x295 - var_x299 - 10020.0 * var_x293 - var_x159 * var_x301;
            const double var_x303 = var_x166 * var_x291;
            const double var_x304 = var_x302 * var_x303;
            const double var_x305 = var_x284 * var_x289;
            const double var_x306 = var_x11 * var_x305;
            const double var_x307 = var_x164 * var_x306;
            const double var_x308 = 13617793.917385383 * var_x307;
            const double var_x309 = var_x302 * var_x308;
            const double var_x310 = 5000.0 + var_x287;
            const double var_x311 = var_x307 * var_x310;
            const double var_x312 = var_x177 * var_x311;
            const double var_x313 = var_x164 * var_x289;
            const double var_x314 = var_x297 * var_x313;
            const double var_x315 = var_x182 * var_x30 * var_x310 * var_x314;
            const double var_x316 = var_x292 + var_x304 + var_x309 + var_x312 - var_x315;
            const double var_x317 = var_x166 * var_x287;
            const double var_x318 = 13617793.917385383 * var_x311 + var_x291 * var_x317;
            const double var_x319 = var_x291 + 9.0785292782569211 * var_x306;
            const double var_x320 = var_x287 * var_x319;
            const double var_x321 = var_x192 * var_x306;
            const double var_x322 = 5000.0 * var_x320 + 45392.646391284608 * var_x321;
            const double var_x323 = var_x196 * var_x289;
            const double var_x324 = var_x323 * var_chaste_interface__intracellular_ions__cai;
            const double var_x325 = 13617793.917385383 * var_x324 + var_x222 * var_x319;
            const double var_x326 = var_x201 + var_x231 * var_x310;
            const double var_x327 = 1 / (var_x318 + var_x322 + var_x325 + var_x326);
            const double var_x328 = 10000.0 * var_x327;
            const double var_x329 = var_x289 * var_x317;
            const double var_x330 = var_x132 * var_x310;
            const double var_x331 = pow((var_x206 + var_x311 + var_x324 + 0.0033333333333333331 * var_x321 + 0.0033333333333333331 * var_x330 + 0.00036716666666666668 * var_x320 + 0.11015000000000001 * var_x329 * var_chaste_interface__intracellular_ions__cai + var_x191 * var_x208 * var_x319), (-2));
            const double var_x332 = var_x319 * (-50100000.0 * var_x293 + var_x210 * var_x294 - var_x212 * var_x298 - var_x213 * var_x301);
            const double var_x333 = 283704.03994552878 * var_x284;
            const double var_x334 = 300000000.0 * var_x283 + var_x333 * var_chaste_interface__intracellular_ions__nai;
            const double var_x335 = var_x289 * var_x297;
            const double var_x336 = var_x30 * var_x335;
            const double var_x337 = var_x133 * var_x306 - var_x217 * var_x336;
            const double var_x338 = var_x334 * var_x337;
            const double var_x339 = var_x222 * var_x337;
            const double var_x340 = var_x229 * var_x319;
            const double var_x341 = var_x231 * var_x302;
            const double var_x342 = var_x233 * var_x306;
            const double var_x343 = var_x132 * var_x289;
            const double var_x344 = var_x236 * var_x343 * var_chaste_interface__intracellular_ions__cai;
            const double var_x345 = var_x126 * var_x336;
            const double var_x346 = var_x239 * var_x345;
            const double var_x347 = var_x241 * var_x330;
            const double var_x348 = var_x243 * var_x310;
            const double var_x349 = var_x241 * var_x321;
            const double var_x350 = var_x177 * var_x324;
            const double var_x351 = var_x247 * var_x289 * var_chaste_interface__intracellular_ions__cai;
            const double var_x352 = var_x331 * (var_x251 + var_x315 + var_x346 + var_x347 + var_x350 - var_x292 - var_x304 - var_x309 - var_x312 - var_x332 - var_x338 - var_x339 - var_x340 - var_x341 - var_x342 - var_x344 - var_x348 - var_x349 - var_x351);
            const double var_x353 = 5.3924544444444452e-11 * var_x318;
            const double var_x354 = var_x332 + var_x338 + var_x342 + var_x349 - var_x346;
            const double var_x355 = var_x254 * var_x327;
            const double var_x356 = var_x286 * var_x327;
            const double var_x357 = var_x190 * var_x327;
            const double var_x358 = var_x258 * var_x322;
            const double var_x359 = 3.0597222222222222e-13 * var_x352;
            const double var_x360 = var_x294 * var_x325;
            const double var_x361 = 27.235587834770765 * var_x327;
            const double var_x362 = var_x306 * var_x361;
            const double var_x363 = var_x189 * var_x318;
            const double var_x364 = var_x266 * var_x327;
            const double var_x365 = 1.4686666666666667e-13 * var_x306 * var_x326;
            const double var_x366 = var_x268 * var_x322;
            const double var_x367 = var_x318 * var_x327;
            const double var_x368 = var_x325 * var_x327;
            const double var_x369 = var_x322 * var_x327;
            const double var_x370 = var_x326 * var_x327;
            const double var_x371 = var_x227 * var_x367 + var_x273 * var_x369 + var_x295 * var_x368 + var_x316 * var_x328 + var_x352 * var_x353 + var_x352 * var_x365 + var_x356 * (var_x339 + var_x340 + var_x344 + var_x351 - var_x350) + var_x359 * var_x360 + var_x362 * (var_x262 + var_x341 + var_x348 - var_x347) - var_x226 * var_x367 - var_x275 * var_x369 - var_x299 * var_x368 - var_x316 * var_x357 - var_x352 * var_x358 - var_x352 * var_x366 - var_x354 * var_x355 - var_x354 * var_x364 - var_x359 * var_x363 - 0.16146018026423339 * var_x345 * var_x370 + var_x272 * var_x306 * var_x370;
            const double var_x372 = 1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cai, 2);
            const double var_x373 = mParameters[16] / var_x372;
            const double var_x374 = 0.88000000000000012 * var_x373;
            const double var_x375 = mParameters[7] * var_chaste_interface__ICaL__d;
            const double var_x376 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x377 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x378 = 1.0 + 0.0015 * var_x377;
            const double var_x379 = 1 / var_x378;
            const double var_x380 = 0.050000000000000003 * var_x379;
            const double var_x381 = var_x376 * var_x380 + var_chaste_interface__CaMK__CaMKt;
            const double var_x382 = 1.0 + 0.14999999999999999 / var_x381;
            const double var_x383 = 1 / var_x382;
            const double var_x384 = 1.0 - var_chaste_interface__ICaL__nca;
            const double var_x385 = 0.40000000000000002 * var_chaste_interface__ICaL__fs;
            const double var_x386 = 0.59999999999999998 * var_chaste_interface__ICaL__ffp;
            const double var_x387 = 0.10000000000000001 * var_chaste_interface__membrane__v;
            const double var_x388 = exp(-1.0 + var_x387);
            const double var_x389 = 1.0 + var_x388;
            const double var_x390 = 0.59999999999999998 / var_x389;
            const double var_x391 = 0.29999999999999999 + var_x390;
            const double var_x392 = 0.69999999999999996 - var_x390;
            const double var_x393 = var_x392 * var_chaste_interface__ICaL__fcas;
            const double var_x394 = var_x393 + var_x391 * var_chaste_interface__ICaL__fcafp;
            const double var_x395 = var_x394 * var_chaste_interface__ICaL__jca;
            const double var_x396 = var_x384 * (var_x385 + var_x386) + var_x395 * var_chaste_interface__ICaL__nca;
            const double var_x397 = var_x383 * var_x396;
            const double var_x398 = var_x375 * var_x397;
            const double var_x399 = exp(var_x2);
            const double var_x400 = 0.75 * var_x399;
            const double var_x401 = -0.75 * mParameters[3] + var_x400 * var_chaste_interface__intracellular_ions__kss;
            const double var_x402 = -1.0 + var_x399;
            const double var_x403 = 1 / var_x402;
            const double var_x404 = var_x0 * pow(mParameters[5], 2);
            const double var_x405 = var_x403 * var_x404;
            const double var_x406 = var_x401 * var_x405;
            const double var_x407 = 0.00047176800000000001 * var_x406;
            const double var_x408 = var_x398 * var_x407;
            const double var_x409 = var_x383;
            const double var_x410 = 1.0 - var_x409;
            const double var_x411 = 0.59999999999999998 * var_chaste_interface__ICaL__ff;
            const double var_x412 = var_x393 + var_x391 * var_chaste_interface__ICaL__fcaf;
            const double var_x413 = var_x412 * var_chaste_interface__ICaL__jca;
            const double var_x414 = var_x384 * (var_x385 + var_x411) + var_x413 * var_chaste_interface__ICaL__nca;
            const double var_x415 = var_x410 * var_x414;
            const double var_x416 = var_x375 * var_x415;
            const double var_x417 = 0.00042888000000000003 * var_x406;
            const double var_x418 = var_x416 * var_x417;
            const double var_x419 = var_x398 * var_x399;
            const double var_x420 = pow(mParameters[5], 3) / (pow(mParameters[6], 2) * pow(mParameters[19], 2));
            const double var_x421 = var_x420 * var_chaste_interface__membrane__v;
            const double var_x422 = var_x421 / pow(var_x402, 2);
            const double var_x423 = var_x401 * var_x422;
            const double var_x424 = 0.00047176800000000001 * var_x419 * var_x423;
            const double var_x425 = var_x399 * var_x416;
            const double var_x426 = 0.00042888000000000003 * var_x423 * var_x425;
            const double var_x427 = var_x403 * var_x421;
            const double var_x428 = var_x419 * var_x427;
            const double var_x429 = 0.00035382600000000001 * var_x428 * var_chaste_interface__intracellular_ions__kss;
            const double var_x430 = 0.00032165999999999998 * var_x425;
            const double var_x431 = var_x427 * var_x430 * var_chaste_interface__intracellular_ions__kss;
            const double var_x432 = var_x375 * var_chaste_interface__membrane__v;
            const double var_x433 = var_x407 * var_x432;
            const double var_x434 = 0.059999999999999998 * var_x388 / pow(var_x389, 2);
            const double var_x435 = var_x434 * var_chaste_interface__ICaL__fcas;
            const double var_x436 = var_x383 * var_chaste_interface__ICaL__nca;
            const double var_x437 = var_x436 * var_chaste_interface__ICaL__jca;
            const double var_x438 = var_x437 * (var_x435 - var_x434 * var_chaste_interface__ICaL__fcafp);
            const double var_x439 = var_x433 * var_x438;
            const double var_x440 = var_x375 * var_x417;
            const double var_x441 = var_x410 * var_chaste_interface__ICaL__nca;
            const double var_x442 = var_x441 * var_chaste_interface__ICaL__jca;
            const double var_x443 = var_x442 * (var_x435 - var_x434 * var_chaste_interface__ICaL__fcaf);
            const double var_x444 = var_x443 * var_chaste_interface__membrane__v;
            const double var_x445 = var_x440 * var_x444;
            const double var_x446 = -0.34100000000000003 * mParameters[2];
            const double var_x447 = exp(2.0 * var_x2);
            const double var_x448 = var_x447 * var_chaste_interface__intracellular_ions__cai;
            const double var_x449 = (var_x446 + var_x448) * mParameters[8];
            const double var_x450 = -1.0 + var_x447;
            const double var_x451 = 1 / var_x450;
            const double var_x452 = var_x404 * var_x451;
            const double var_x453 = 4.0 * var_x452;
            const double var_x454 = var_x449 * var_x453;
            const double var_x455 = 8.0 * var_x421;
            const double var_x456 = var_x447 / pow(var_x450, 2);
            const double var_x457 = -var_x454 + var_x449 * var_x455 * var_x456 - var_x448 * var_x451 * var_x455 * mParameters[8];
            const double var_x458 = 0.59999999999999998 * var_x383;
            const double var_x459 = (-var_x458 * var_chaste_interface__INaL__hLp - 0.59999999999999998 * var_x410 * var_chaste_interface__INaL__hL) * mParameters[13];
            const double var_x460 = var_x459 * var_chaste_interface__INaL__mL;
            const double var_x461 = 0.98999999999999999 * var_chaste_interface__INa__hf;
            const double var_x462 = var_x461 + 0.010000000000000009 * var_chaste_interface__INa__hs;
            const double var_x463 = var_x410 * var_x462;
            const double var_x464 = var_x461 + 0.010000000000000009 * var_chaste_interface__INa__hsp;
            const double var_x465 = var_x464 * var_chaste_interface__INa__jp;
            const double var_x466 = var_x409 * var_x465 + var_x463 * var_chaste_interface__INa__j;
            const double var_x467 = pow(var_chaste_interface__INa__m, 3) * mParameters[11];
            const double var_x468 = var_x466 * var_x467;
            const double var_x469 = exp(var_x2);
            const double var_x470 = var_x469 * var_chaste_interface__intracellular_ions__nai;
            const double var_x471 = 3.75e-10 * var_x470 - 3.75e-10 * mParameters[4];
            const double var_x472 = -1.0 + var_x469;
            const double var_x473 = 1 / var_x472;
            const double var_x474 = var_x404 * var_x473;
            const double var_x475 = var_x469 * var_chaste_interface__membrane__v;
            const double var_x476 = var_x460 - var_x468 - var_x471 * var_x474 - 3.75e-10 * var_x421 * var_x470 * var_x473 + var_x420 * var_x471 * var_x475 / pow(var_x472, 2);
            const double var_x477 = -0.75 * mParameters[4] + var_x400 * var_chaste_interface__intracellular_ions__nass;
            const double var_x478 = var_x375 * var_x477;
            const double var_x479 = var_x405 * var_x478;
            const double var_x480 = 0.0016500000000000002 * var_x397;
            const double var_x481 = 0.0015 * var_x415;
            const double var_x482 = var_x399 * var_x422 * var_x478;
            const double var_x483 = 0.0011249999999999999 * var_x425;
            const double var_x484 = var_x479 * var_chaste_interface__membrane__v;
            const double var_x485 = 0.0016500000000000002 * var_x484;
            const double var_x486 = 0.0015 * var_x479;
            const double var_x487 = var_x480 * var_x482 + var_x481 * var_x482 - var_x438 * var_x485 - var_x444 * var_x486 - var_x479 * var_x480 - var_x479 * var_x481 - 0.0012375000000000001 * var_x428 * var_chaste_interface__intracellular_ions__nass - var_x427 * var_x483 * var_chaste_interface__intracellular_ions__nass;
            const double var_x488 = var_x447 * var_chaste_interface__intracellular_ions__cass;
            const double var_x489 = var_x446 + var_x488;
            const double var_x490 = var_x452 * var_x489;
            const double var_x491 = var_x375 * var_x490;
            const double var_x492 = 4.7999999999999998 * var_x415;
            const double var_x493 = var_x491 * var_x492;
            const double var_x494 = 5.2800000000000002 * var_x397;
            const double var_x495 = var_x491 * var_x494;
            const double var_x496 = var_x421 * var_x456 * var_x489;
            const double var_x497 = 9.5999999999999996 * var_x416;
            const double var_x498 = var_x496 * var_x497;
            const double var_x499 = 10.56 * var_x398;
            const double var_x500 = var_x496 * var_x499;
            const double var_x501 = var_x421 * var_x451 * var_x488;
            const double var_x502 = var_x497 * var_x501;
            const double var_x503 = var_x499 * var_x501;
            const double var_x504 = var_x491 * var_chaste_interface__membrane__v;
            const double var_x505 = 4.7999999999999998 * var_x504;
            const double var_x506 = var_x443 * var_x505;
            const double var_x507 = 5.2800000000000002 * var_x504;
            const double var_x508 = var_x438 * var_x507;
            const double var_x509 = var_x498 + var_x500 - var_x493 - var_x495 - var_x502 - var_x503 - var_x506 - var_x508;
            const double var_x510 = exp(-1.4126984126984128 + 0.0066137566137566143 * var_chaste_interface__membrane__v);
            const double var_x511 = 1.0 + var_x510;
            const double var_x512 = 1 / var_x511;
            const double var_x513 = var_x512;
            const double var_x514 = 1.0 - var_x513;
            const double var_x515 = var_x513 * var_chaste_interface__Ito__iFp + var_x514 * var_chaste_interface__Ito__iSp;
            const double var_x516 = var_x515 * var_chaste_interface__Ito__ap;
            const double var_x517 = 4.0 * var_x383;
            const double var_x518 = var_x513 * var_chaste_interface__Ito__iF + var_x514 * var_chaste_interface__Ito__iS;
            const double var_x519 = var_x518 * var_chaste_interface__Ito__a;
            const double var_x520 = 4.0 * var_x410;
            const double var_x521 = (-var_x516 * var_x517 - var_x519 * var_x520) * mParameters[18];
            const double var_x522 = exp(0.78953107960741553 - 0.054525627044711013 * var_chaste_interface__membrane__v);
            const double var_x523 = 1.0 + var_x522;
            const double var_x524 = 0.59999999999999998 * mParameters[9] / var_x523;
            const double var_x525 = 0.0066137566137566143 * var_x510 / pow(var_x511, 2);
            const double var_x526 = var_x517 * var_chaste_interface__Ito__ap;
            const double var_x527 = var_x520 * var_chaste_interface__Ito__a;
            const double var_x528 = 1 / var_chaste_interface__intracellular_ions__ki;
            const double var_x529 = 1 / mParameters[5];
            const double var_x530 = var_x529 * mParameters[6] * mParameters[19];
            const double var_x531 = -var_x530 * log(var_x528 * mParameters[3]) + var_chaste_interface__membrane__v;
            const double var_x532 = var_x531 * mParameters[18];
            const double var_x533 = 1 / var_chaste_interface__intracellular_ions__cai;
            const double var_x534 = pow(var_x533, 1.3999999999999999);
            const double var_x535 = 1.0 + 6.4818210260626455e-7 * var_x534;
            const double var_x536 = -1.3999999999999999 - 0.83999999999999997 / var_x535;
            const double var_x537 = var_x536 * mParameters[15] * var_chaste_interface__IKs__xs2;
            const double var_x538 = var_x537 * var_chaste_interface__IKs__xs1;
            const double var_x539 = exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * mParameters[3]);
            const double var_x540 = 1.0 + var_x539;
            const double var_x541 = sqrt(mParameters[3]);
            const double var_x542 = var_x541 * mParameters[12] / var_x540;
            const double var_x543 = 1.2 * var_x542;
            const double var_x544 = var_x543 * var_chaste_interface__IK1__xk1;
            const double var_x545 = exp(0.73333333333333328 + 0.013333333333333334 * var_chaste_interface__membrane__v);
            const double var_x546 = 1.0 + var_x545;
            const double var_x547 = 1 / var_x546;
            const double var_x548 = exp(1.4344412457471867 + 0.026171159382360639 * var_chaste_interface__membrane__v);
            const double var_x549 = 1.0 + var_x548;
            const double var_x550 = 1 / var_x549;
            const double var_x551 = var_x550;
            const double var_x552 = 1.0 - var_x551;
            const double var_x553 = var_x551 * var_chaste_interface__IKr__xrf + var_x552 * var_chaste_interface__IKr__xrs;
            const double var_x554 = var_x541 * var_x547 * var_x553 * mParameters[14];
            const double var_x555 = exp(-0.33333333333333331 + 0.033333333333333333 * var_chaste_interface__membrane__v);
            const double var_x556 = 1.0 + var_x555;
            const double var_x557 = 1 / var_x556;
            const double var_x558 = 0.55943092778551573 * var_x557;
            const double var_x559 = var_x554 * var_x558;
            const double var_x560 = var_x531 * var_x541;
            const double var_x561 = 0.026171159382360639 * var_x548 / pow(var_x549, 2);
            const double var_x562 = var_x560 * mParameters[14];
            const double var_x563 = var_x547 * var_x558 * var_x562;
            const double var_x564 = var_x521 + var_x538 - var_x524 - var_x544 - var_x559 + var_x532 * (-var_x526 * (var_x525 * var_chaste_interface__Ito__iSp - var_x525 * var_chaste_interface__Ito__iFp) - var_x527 * (var_x525 * var_chaste_interface__Ito__iS - var_x525 * var_chaste_interface__Ito__iF)) - var_x563 * (var_x561 * var_chaste_interface__IKr__xrs - var_x561 * var_chaste_interface__IKr__xrf) + 0.018647697592850527 * var_x531 * var_x554 * var_x555 / pow(var_x556, 2) - 0.03271537622682661 * var_x522 * var_x531 * mParameters[9] / pow(var_x523, 2) + 0.12640893289792476 * var_x539 * var_x560 * mParameters[12] * var_chaste_interface__IK1__xk1 / pow(var_x540, 2) + 0.0074590790371402106 * var_x545 * var_x553 * var_x557 * var_x562 / pow(var_x546, 2);
            
            partialF = var_x424 + var_x426 + var_x457 + var_x476 + var_x487 + var_x509 + var_x564 - var_x408 - var_x418 - var_x429 - var_x431 - var_x439 - var_x445 + (2.2883093838538917 * var_x111 + 0.35468795449735319 * var_x117 - 0.0024432929743287307 * var_x119 - 27.352034447734344 * var_x120 + var_x103 * var_x106 + var_x103 * var_x116 + var_x85 * var_x87 - var_x102 * var_x98 - var_x103 * var_x114 - var_x107 * var_x109 - var_x68 * var_x77) * mParameters[17] - var_x276 * var_x280 - var_x371 * var_x374;
        }
        else
        {
            const double y_save = rY[0];
            rY[0] += delta;
            const double temp = EvaluateYDerivative0(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[0])/delta;
            rY[0] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__nai = rY[3];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__intracellular_ions__cansr = rY[8];
        // Units: millimolar; Initial value: 1.2
        

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_INaCa_i__KmCaAct = 0.00014999999999999999; // millimolar
        const double var_INaCa_i__kasymm = 12.5; // dimensionless
        const double var_INaCa_i__kcaoff = 5000.0; // per_millisecond
        const double var_INaCa_i__k2_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__kcaon = 1500000.0; // per_millisecond
        const double var_INaCa_i__kna1 = 15.0; // per_millisecond
        const double var_INaCa_i__kna2 = 5.0; // per_millisecond
        const double var_INaCa_i__kna3 = 88.120000000000005; // per_millisecond
        const double var_INaCa_i__qca = 0.16700000000000001; // dimensionless
        const double var_INaCa_i__qna = 0.52239999999999998; // dimensionless
        const double var_INaCa_i__wca = 60000.0; // dimensionless
        const double var_INaCa_i__wna = 60000.0; // dimensionless
        const double var_INaCa_i__wnaca = 5000.0; // dimensionless
        const double var_IpCa__KmCap = 0.00050000000000000001; // millimolar
        const double var_cell_geometry__L = 0.01; // centimeter
        const double var_cell_geometry__rad = 0.0011000000000000001; // centimeter
        const double var_cell_geometry__Ageo = 6.2800000000000002 * pow(var_cell_geometry__rad, 2) + 6.2800000000000002 * var_cell_geometry__L * var_cell_geometry__rad; // centimeter_squared
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__Ageo; // centimeter_squared
        const double var_cell_geometry__vcell = 3140.0 * pow(var_cell_geometry__rad, 2) * var_cell_geometry__L; // microliter
        const double var_cell_geometry__vmyo = 0.68000000000000005 * var_cell_geometry__vcell; // microliter
        const double var_cell_geometry__vnsr = 0.055199999999999999 * var_cell_geometry__vcell; // microliter
        const double var_cell_geometry__vss = 0.02 * var_cell_geometry__vcell; // microliter
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * mParameters[16]) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * mParameters[16]) : (mParameters[16]))); // milliS_per_microF
        const double var_SERCA__upScale = ((var_environment__celltype == 1.0) ? (1.3) : (1.0)); // dimensionless
        const double var_INaCa_i__h10_i = 1.0 + (1.0 + mParameters[4] / var_INaCa_i__kna2) * mParameters[4] / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h11_i = pow(mParameters[4], 2) / (var_INaCa_i__h10_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h12_i = 1 / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k1_i = var_INaCa_i__h12_i * var_INaCa_i__kcaon * mParameters[2]; // dimensionless
        const double var_INaCa_i__allo_i = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cai, 2)); // dimensionless
        const double var_IpCa__IpCa = mParameters[10] * var_chaste_interface__intracellular_ions__cai / (var_IpCa__KmCap + var_chaste_interface__intracellular_ions__cai); // microA_per_microF
        const double var_SERCA__Jupnp = 0.0043750000000000004 * var_SERCA__upScale * var_chaste_interface__intracellular_ions__cai / (0.00092000000000000003 + var_chaste_interface__intracellular_ions__cai); // millimolar_per_millisecond
        const double var_SERCA__Jupp = 0.01203125 * var_SERCA__upScale * var_chaste_interface__intracellular_ions__cai / (0.00075000000000000002 + var_chaste_interface__intracellular_ions__cai); // millimolar_per_millisecond
        const double var_SERCA__Jleak = 0.00026249999999999998 * var_chaste_interface__intracellular_ions__cansr; // millimolar_per_millisecond
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_SERCA__fJupp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__Jup = (-var_SERCA__Jleak + (1.0 - var_SERCA__fJupp) * var_SERCA__Jupnp + var_SERCA__Jupp * var_SERCA__fJupp) * mParameters[1]; // millimolar_per_millisecond
        const double var_diff__Jdiff = 5.0 * var_chaste_interface__intracellular_ions__cass - 5.0 * var_chaste_interface__intracellular_ions__cai; // millimolar_per_millisecond
        const double var_intracellular_ions__cm = 1.0; // microF_per_centimeter_squared
        const double var_intracellular_ions__cmdnmax_b = 0.050000000000000003; // millimolar
        const double var_intracellular_ions__cmdnmax = ((var_environment__celltype == 1.0) ? (1.3 * var_intracellular_ions__cmdnmax_b) : (var_intracellular_ions__cmdnmax_b)); // millimolar
        const double var_intracellular_ions__kmcmdn = 0.0023800000000000002; // millimolar
        const double var_intracellular_ions__kmtrpn = 0.00050000000000000001; // millimolar
        const double var_INaCa_i__h4_i = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_i = pow(var_chaste_interface__intracellular_ions__nai, 2) / (var_INaCa_i__h4_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_i = 1 / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k6_i = var_INaCa_i__h6_i * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cai; // dimensionless
        const double var_intracellular_ions__trpnmax = 0.070000000000000007; // millimolar
        const double var_intracellular_ions__Bcai = 1 / (1.0 + var_intracellular_ions__cmdnmax * var_intracellular_ions__kmcmdn / pow((var_chaste_interface__intracellular_ions__cai + var_intracellular_ions__kmcmdn), 2) + var_intracellular_ions__kmtrpn * var_intracellular_ions__trpnmax / pow((var_chaste_interface__intracellular_ions__cai + var_intracellular_ions__kmtrpn), 2)); // dimensionless
        const double var_INaCa_i__hca = exp(var_INaCa_i__qca * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__hna = exp(var_INaCa_i__qna * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h2_i = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / (var_INaCa_i__h1_i * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h3_i = 1 / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * mParameters[4] / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h8_i = mParameters[4] / (var_INaCa_i__h7_i * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h9_i = 1 / var_INaCa_i__h7_i; // dimensionless
        const double var_INaCa_i__k3p_i = var_INaCa_i__h9_i * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3pp_i = var_INaCa_i__h8_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_i = var_INaCa_i__k3p_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k4p_i = var_INaCa_i__h3_i * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4pp_i = var_INaCa_i__h2_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_i = var_INaCa_i__k4p_i + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k7_i = var_INaCa_i__h2_i * var_INaCa_i__h5_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_i = var_INaCa_i__h11_i * var_INaCa_i__h8_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__x1_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k5_i * var_INaCa_i__k7_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k2_i * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x2_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i; // dimensionless
        const double var_INaCa_i__x3_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x4_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i * var_INaCa_i__k5_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k2_i * var_INaCa_i__k8_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E3_i = var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E4_i = var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__JncxCa_i = var_INaCa_i__E2_i * var_INaCa_i__k2_i - var_INaCa_i__E1_i * var_INaCa_i__k1_i; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_i = var_INaCa_i__E3_i * var_INaCa_i__k4pp_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i + 3.0 * var_INaCa_i__E4_i * var_INaCa_i__k7_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i; // millimolar_per_millisecond
        const double var_membrane__vffrt = pow(mParameters[5], 2) * var_chaste_interface__membrane__v / (mParameters[6] * mParameters[19]); // coulomb_per_mole
        const double var_membrane__vfrt = var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19]); // dimensionless
        const double var_ICab__ICab = 4.0 * (-0.34100000000000003 * mParameters[2] + var_chaste_interface__intracellular_ions__cai * exp(2.0 * var_membrane__vfrt)) * mParameters[8] * var_membrane__vffrt / (-1.0 + exp(2.0 * var_membrane__vfrt)); // microA_per_microF
        const double var_physical_constants__zca = 2.0; // dimensionless
        const double var_physical_constants__zna = 1.0; // dimensionless
        const double var_INaCa_i__INaCa_i = 0.80000000000000004 * (var_INaCa_i__JncxCa_i * var_physical_constants__zca + var_INaCa_i__JncxNa_i * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_i; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__cai = (var_cell_geometry__vss * var_diff__Jdiff / var_cell_geometry__vmyo - var_SERCA__Jup * var_cell_geometry__vnsr / var_cell_geometry__vmyo + 0.5 * (-var_ICab__ICab - var_IpCa__IpCa + 2.0 * var_INaCa_i__INaCa_i) * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vmyo * mParameters[5])) * var_intracellular_ions__Bcai; // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__cai;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            double var_chaste_interface__intracellular_ions__cai = rY[1];
            // Units: millimolar; Initial value: 0.0001
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__intracellular_ions__nai = rY[3];
            // Units: millimolar; Initial value: 7.0
            double var_chaste_interface__intracellular_ions__cass = rY[7];
            // Units: millimolar; Initial value: 0.0001
            double var_chaste_interface__intracellular_ions__cansr = rY[8];
            // Units: millimolar; Initial value: 1.2
            

            const double var_x0 = 1 / (mParameters[6] * mParameters[19]);
            const double var_x1 = var_x0 * mParameters[5];
            const double var_x2 = var_x1 * var_chaste_interface__membrane__v;
            const double var_x11 = pow(var_chaste_interface__intracellular_ions__nai, 3);
            const double var_x24 = pow(mParameters[4], 3);
            const double var_x121 = 1 / (13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[4]) * mParameters[4]);
            const double var_x122 = exp(0.52239999999999998 * var_x2);
            const double var_x123 = 1 / var_x122;
            const double var_x124 = 1.0 + 0.011348161597821153 * (1.0 + var_x123) * mParameters[4];
            const double var_x129 = 1 / var_x124;
            const double var_x130 = var_x123 * var_x129;
            const double var_x131 = var_x121 * var_x24;
            const double var_x132 = var_x130 * var_x131;
            const double var_x135 = 0.011348161597821153 + 0.011348161597821153 * var_x122;
            const double var_x138 = 1 / exp(0.16700000000000001 * var_x2);
            const double var_x164 = var_x121 * mParameters[2];
            const double var_x165 = 1500000.0 * var_x164;
            const double var_x166 = var_x165 + 9.0785292782569211 * var_x132;
            const double var_x189 = var_x130 * mParameters[4];
            const double var_x190 = 56.740807989105761 * var_x189;
            const double var_x191 = var_x190 + 60000.0 * var_x129;
            const double var_x192 = 5000.0 + var_x191;
            const double var_x196 = var_x132 * var_x192;
            const double var_x200 = var_x166 * var_x191;
            const double var_x201 = 5000.0 * var_x200;
            const double var_x206 = 0.00036716666666666668 * var_x200;
            const double var_x208 = 0.11015000000000001 * var_x164;
            const double var_x222 = var_x165 * var_x191;
            const double var_x231 = 45392.646391284608 * var_x132;
            const double var_x254 = 3000000.0 * var_x164;
            const double var_x258 = 1.6177363333333335e-8 * var_x164;
            const double var_x266 = 27.235587834770765 * var_x132;
            const double var_x268 = 1.4686666666666667e-13 * var_x132;
            const double var_x281 = 1.0 + var_x135 * var_chaste_interface__intracellular_ions__nai;
            const double var_x282 = 1 / var_x281;
            const double var_x283 = var_x138 * var_x282;
            const double var_x284 = var_x122 * var_x282;
            const double var_x285 = 56.740807989105761 * var_x284;
            const double var_x286 = var_x285 * var_chaste_interface__intracellular_ions__nai;
            const double var_x287 = var_x286 + 60000.0 * var_x283;
            const double var_x288 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nai) * var_chaste_interface__intracellular_ions__nai;
            const double var_x289 = 1 / var_x288;
            const double var_x290 = 1500000.0 * var_x289;
            const double var_x291 = var_x290 * var_chaste_interface__intracellular_ions__cai;
            const double var_x294 = var_x284 * var_chaste_interface__intracellular_ions__nai;
            const double var_x305 = var_x284 * var_x289;
            const double var_x306 = var_x11 * var_x305;
            const double var_x307 = var_x164 * var_x306;
            const double var_x310 = 5000.0 + var_x287;
            const double var_x311 = var_x307 * var_x310;
            const double var_x313 = var_x164 * var_x289;
            const double var_x317 = var_x166 * var_x287;
            const double var_x318 = 13617793.917385383 * var_x311 + var_x291 * var_x317;
            const double var_x319 = var_x291 + 9.0785292782569211 * var_x306;
            const double var_x320 = var_x287 * var_x319;
            const double var_x321 = var_x192 * var_x306;
            const double var_x322 = 5000.0 * var_x320 + 45392.646391284608 * var_x321;
            const double var_x323 = var_x196 * var_x289;
            const double var_x324 = var_x323 * var_chaste_interface__intracellular_ions__cai;
            const double var_x325 = 13617793.917385383 * var_x324 + var_x222 * var_x319;
            const double var_x326 = var_x201 + var_x231 * var_x310;
            const double var_x327 = 1 / (var_x318 + var_x322 + var_x325 + var_x326);
            const double var_x328 = 10000.0 * var_x327;
            const double var_x329 = var_x289 * var_x317;
            const double var_x330 = var_x132 * var_x310;
            const double var_x331 = pow((var_x206 + var_x311 + var_x324 + 0.0033333333333333331 * var_x321 + 0.0033333333333333331 * var_x330 + 0.00036716666666666668 * var_x320 + 0.11015000000000001 * var_x329 * var_chaste_interface__intracellular_ions__cai + var_x191 * var_x208 * var_x319), (-2));
            const double var_x333 = 283704.03994552878 * var_x284;
            const double var_x334 = 300000000.0 * var_x283 + var_x333 * var_chaste_interface__intracellular_ions__nai;
            const double var_x343 = var_x132 * var_x289;
            const double var_x353 = 5.3924544444444452e-11 * var_x318;
            const double var_x355 = var_x254 * var_x327;
            const double var_x356 = var_x286 * var_x327;
            const double var_x357 = var_x190 * var_x327;
            const double var_x358 = var_x258 * var_x322;
            const double var_x360 = var_x294 * var_x325;
            const double var_x361 = 27.235587834770765 * var_x327;
            const double var_x362 = var_x306 * var_x361;
            const double var_x363 = var_x189 * var_x318;
            const double var_x364 = var_x266 * var_x327;
            const double var_x365 = 1.4686666666666667e-13 * var_x306 * var_x326;
            const double var_x366 = var_x268 * var_x322;
            const double var_x368 = var_x325 * var_x327;
            const double var_x372 = 1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cai, 2);
            const double var_x373 = mParameters[16] / var_x372;
            const double var_x376 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x377 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x378 = 1.0 + 0.0015 * var_x377;
            const double var_x379 = 1 / var_x378;
            const double var_x380 = 0.050000000000000003 * var_x379;
            const double var_x381 = var_x376 * var_x380 + var_chaste_interface__CaMK__CaMKt;
            const double var_x382 = 1.0 + 0.14999999999999999 / var_x381;
            const double var_x383 = 1 / var_x382;
            const double var_x404 = var_x0 * pow(mParameters[5], 2);
            const double var_x409 = var_x383;
            const double var_x410 = 1.0 - var_x409;
            const double var_x446 = -0.34100000000000003 * mParameters[2];
            const double var_x447 = exp(2.0 * var_x2);
            const double var_x448 = var_x447 * var_chaste_interface__intracellular_ions__cai;
            const double var_x449 = (var_x446 + var_x448) * mParameters[8];
            const double var_x450 = -1.0 + var_x447;
            const double var_x451 = 1 / var_x450;
            const double var_x452 = var_x404 * var_x451;
            const double var_x453 = 4.0 * var_x452;
            const double var_x454 = var_x449 * var_x453;
            const double var_x529 = 1 / mParameters[5];
            const double var_x565 = 2250000000000.0 * var_x191;
            const double var_x566 = var_x313 * var_x565;
            const double var_x567 = 13617793.917385383 * var_x323;
            const double var_x568 = -var_x566 - var_x567 - var_x290 * var_x317 - var_x290 * var_x334;
            const double var_x569 = var_x331 * var_x353;
            const double var_x570 = var_x327 * var_x329;
            const double var_x571 = var_x327 * var_x334;
            const double var_x572 = var_x331 * var_x358;
            const double var_x573 = 3.0597222222222222e-13 * var_x331;
            const double var_x574 = var_x568 * var_x573;
            const double var_x575 = var_x331 * var_x568;
            const double var_x576 = 85111211.983658642 * var_x189;
            const double var_x577 = 15000000000.0 * var_x570 + var_x356 * (var_x566 + var_x567) + var_x360 * var_x574 + var_x365 * var_x575 + var_x568 * var_x569 - var_x363 * var_x574 - var_x366 * var_x575 - var_x568 * var_x572 - var_x570 * var_x576 - 4500000000000.0 * var_x313 * var_x571 - 40853381.752156146 * var_x343 * var_x571;
            const double var_x578 = var_x286 * var_x368 + var_x318 * var_x328 + var_x326 * var_x362 - var_x318 * var_x357 - var_x322 * var_x355 - var_x322 * var_x364;
            const double var_x579 = var_x578 * mParameters[16] / (pow(var_x372, 2) * pow(var_chaste_interface__intracellular_ions__cai, 3));
            const double var_x584 = 0.00050000000000000001 + var_chaste_interface__intracellular_ions__cai;
            const double var_x585 = mParameters[10] / var_x584;
            const double var_x586 = pow(var_x584, (-2));
            const double var_x587 = var_x447 * var_chaste_interface__membrane__v;
            const double var_x588 = -var_x585 + var_x586 * mParameters[10] * var_chaste_interface__intracellular_ions__cai - var_x453 * var_x587 * mParameters[8];
            const double var_x871 = 0.0023800000000000002 + var_chaste_interface__intracellular_ions__cai;
            const double var_x872 = 1.0 + 0.00015470000000000002 / pow(var_x871, 2) + 3.5000000000000004e-5 * var_x586;
            const double var_x873 = 1 / var_x872;
            const double var_x874 = 1.7600000000000002 * var_x373;
            const double var_x875 = 2.9679144385026732 * var_x529;
            const double var_x876 = 0.00075000000000000002 + var_chaste_interface__intracellular_ions__cai;
            const double var_x877 = 1 / var_x876;
            const double var_x878 = var_x383 * var_x877;
            const double var_x879 = 0.00092000000000000003 + var_chaste_interface__intracellular_ions__cai;
            const double var_x880 = 1 / var_x879;
            const double var_x881 = var_x410 * var_x880;
            const double var_x882 = var_x383 * var_chaste_interface__intracellular_ions__cai / pow(var_x876, 2);
            const double var_x883 = var_x410 * var_chaste_interface__intracellular_ions__cai / pow(var_x879, 2);
            const double var_x884 = var_x873;
            const double var_x885 = 0.015640625000000002 * var_x878;
            const double var_x886 = 0.0056875000000000007 * var_x881;
            
            partialF = var_x884 * (-0.14705882352941174 + var_x875 * (var_x588 + 7.9199999999999995e-8 * var_x579 + var_x577 * var_x874) + (0.0012696507352941177 * var_x882 + 0.00046169117647058827 * var_x883 - 0.0012696507352941177 * var_x878 - 0.00046169117647058827 * var_x881) * mParameters[1]) + (0.00030940000000000004 / pow(var_x871, 3) + 7.0000000000000007e-5 / pow(var_x584, 3)) * (0.14705882352941174 * var_chaste_interface__intracellular_ions__cass - 0.14705882352941174 * var_chaste_interface__intracellular_ions__cai + var_x875 * (var_x578 * var_x874 - var_x454 * var_chaste_interface__membrane__v - var_x585 * var_chaste_interface__intracellular_ions__cai) - 0.081176470588235281 * (-0.00026249999999999998 * var_chaste_interface__intracellular_ions__cansr + var_x885 * var_chaste_interface__intracellular_ions__cai + var_x886 * var_chaste_interface__intracellular_ions__cai) * mParameters[1]) / pow(var_x872, 2);
        }
        else
        {
            const double y_save = rY[1];
            rY[1] += delta;
            const double temp = EvaluateYDerivative1(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[1])/delta;
            rY[1] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__aCaMK = 0.050000000000000003; // per_millimolar_per_millisecond
        const double var_CaMK__bCaMK = 0.00068000000000000005; // per_millisecond
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double d_dt_chaste_interface_var_CaMK__CaMKt = -var_chaste_interface__CaMK__CaMKt * var_CaMK__bCaMK + (var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKb * var_CaMK__aCaMK; // millimolar / millisecond

        return d_dt_chaste_interface_var_CaMK__CaMKt;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__intracellular_ions__cass = rY[7];
            // Units: millimolar; Initial value: 0.0001
            

            const double var_x376 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x377 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x378 = 1.0 + 0.0015 * var_x377;
            const double var_x379 = 1 / var_x378;
            const double var_x380 = 0.050000000000000003 * var_x379;
            const double var_x381 = var_x376 * var_x380 + var_chaste_interface__CaMK__CaMKt;
            const double var_x893 = 0.0025000000000000005 * var_x379;
            
            partialF = -0.00068000000000000005 - var_x381 * var_x893 + var_x376 * var_x893 * (1 - var_x380);
        }
        else
        {
            const double y_save = rY[2];
            rY[2] += delta;
            const double temp = EvaluateYDerivative2(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[2])/delta;
            rY[2] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__nai = rY[3];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__nass = rY[4];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__ki = rY[5];
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__INa__m = rY[10];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INa__hf = rY[11];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hs = rY[12];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__j = rY[13];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hsp = rY[14];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__jp = rY[15];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__mL = rY[16];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INaL__hL = rY[17];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__hLp = rY[18];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_INa__Ahf = 0.98999999999999999; // dimensionless
        const double var_INa__Ahs = 1.0 - var_INa__Ahf; // dimensionless
        const double var_INa__h = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hs; // dimensionless
        const double var_INa__hp = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hsp; // dimensionless
        const double var_INaCa_i__KmCaAct = 0.00014999999999999999; // millimolar
        const double var_INaCa_i__kasymm = 12.5; // dimensionless
        const double var_INaCa_i__kcaoff = 5000.0; // per_millisecond
        const double var_INaCa_i__k2_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__kcaon = 1500000.0; // per_millisecond
        const double var_INaCa_i__kna1 = 15.0; // per_millisecond
        const double var_INaCa_i__kna2 = 5.0; // per_millisecond
        const double var_INaCa_i__kna3 = 88.120000000000005; // per_millisecond
        const double var_INaCa_i__qca = 0.16700000000000001; // dimensionless
        const double var_INaCa_i__qna = 0.52239999999999998; // dimensionless
        const double var_INaCa_i__wca = 60000.0; // dimensionless
        const double var_INaCa_i__wna = 60000.0; // dimensionless
        const double var_INaCa_i__wnaca = 5000.0; // dimensionless
        const double var_INaK__H = 9.9999999999999995e-8; // millimolar
        const double var_INaK__Khp = 1.698e-7; // millimolar
        const double var_INaK__Kki = 0.5; // per_millisecond
        const double var_INaK__Kko = 0.35820000000000002; // per_millisecond
        const double var_INaK__Kmgatp = 1.698e-7; // millimolar
        const double var_INaK__Knai0 = 9.0730000000000004; // millimolar
        const double var_INaK__Knao0 = 27.780000000000001; // millimolar
        const double var_INaK__Knap = 224.0; // millimolar
        const double var_INaK__Kxkur = 292.0; // millimolar
        const double var_INaK__MgADP = 0.050000000000000003; // millimolar
        const double var_INaK__MgATP = 9.8000000000000007; // millimolar
        const double var_INaK__delta = -0.155; // millivolt
        const double var_INaK__eP = 4.2000000000000002; // dimensionless
        const double var_INaK__k1m = 182.40000000000001; // per_millisecond
        const double var_INaK__b1 = var_INaK__MgADP * var_INaK__k1m; // dimensionless
        const double var_INaK__k1p = 949.5; // per_millisecond
        const double var_INaK__k2m = 39.399999999999999; // per_millisecond
        const double var_INaK__k2p = 687.20000000000005; // per_millisecond
        const double var_INaK__a2 = var_INaK__k2p; // dimensionless
        const double var_INaK__k3m = 79300.0; // per_millisecond
        const double var_INaK__k3p = 1899.0; // per_millisecond
        const double var_INaK__k4m = 40.0; // per_millisecond
        const double var_INaK__k4p = 639.0; // per_millisecond
        const double var_INaK__a4 = var_INaK__MgATP * var_INaK__k4p / ((1.0 + var_INaK__MgATP / var_INaK__Kmgatp) * var_INaK__Kmgatp); // dimensionless
        const double var_INab__PNab = 3.75e-10; // milliS_per_microF
        const double var_cell_geometry__L = 0.01; // centimeter
        const double var_cell_geometry__rad = 0.0011000000000000001; // centimeter
        const double var_cell_geometry__Ageo = 6.2800000000000002 * pow(var_cell_geometry__rad, 2) + 6.2800000000000002 * var_cell_geometry__L * var_cell_geometry__rad; // centimeter_squared
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__Ageo; // centimeter_squared
        const double var_cell_geometry__vcell = 3140.0 * pow(var_cell_geometry__rad, 2) * var_cell_geometry__L; // microliter
        const double var_cell_geometry__vmyo = 0.68000000000000005 * var_cell_geometry__vcell; // microliter
        const double var_cell_geometry__vss = 0.02 * var_cell_geometry__vcell; // microliter
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * mParameters[16]) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * mParameters[16]) : (mParameters[16]))); // milliS_per_microF
        const double var_INaK__Pnak = ((var_environment__celltype == 1.0) ? (0.90000000000000002 * mParameters[17]) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * mParameters[17]) : (mParameters[17]))); // milliS_per_microF
        const double var_INaL__GNaL = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[13]) : (mParameters[13])); // milliS_per_microF
        const double var_INaCa_i__h10_i = 1.0 + (1.0 + mParameters[4] / var_INaCa_i__kna2) * mParameters[4] / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h11_i = pow(mParameters[4], 2) / (var_INaCa_i__h10_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h12_i = 1 / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__k1_i = var_INaCa_i__h12_i * var_INaCa_i__kcaon * mParameters[2]; // dimensionless
        const double var_INaCa_i__allo_i = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cai, 2)); // dimensionless
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_INa__fINap = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaL__fINaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_intracellular_ions__cm = 1.0; // microF_per_centimeter_squared
        const double var_INaCa_i__h4_i = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_i = pow(var_chaste_interface__intracellular_ions__nai, 2) / (var_INaCa_i__h4_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_i = 1 / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k6_i = var_INaCa_i__h6_i * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cai; // dimensionless
        const double var_INaK__P = var_INaK__eP / (1.0 + var_INaK__H / var_INaK__Khp + var_chaste_interface__intracellular_ions__nai / var_INaK__Knap + var_chaste_interface__intracellular_ions__ki / var_INaK__Kxkur); // dimensionless
        const double var_INaK__b3 = var_INaK__H * var_INaK__P * var_INaK__k3m / (1.0 + var_INaK__MgATP / var_INaK__Kmgatp); // dimensionless
        const double var_diff__JdiffNa = 0.5 * var_chaste_interface__intracellular_ions__nass - 0.5 * var_chaste_interface__intracellular_ions__nai; // millimolar_per_millisecond
        const double var_INaCa_i__hca = exp(var_INaCa_i__qca * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__hna = exp(var_INaCa_i__qna * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h2_i = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / (var_INaCa_i__h1_i * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h3_i = 1 / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * mParameters[4] / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h8_i = mParameters[4] / (var_INaCa_i__h7_i * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h9_i = 1 / var_INaCa_i__h7_i; // dimensionless
        const double var_INaCa_i__k3p_i = var_INaCa_i__h9_i * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3pp_i = var_INaCa_i__h8_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_i = var_INaCa_i__k3p_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k4p_i = var_INaCa_i__h3_i * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4pp_i = var_INaCa_i__h2_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_i = var_INaCa_i__k4p_i + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k7_i = var_INaCa_i__h2_i * var_INaCa_i__h5_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_i = var_INaCa_i__h11_i * var_INaCa_i__h8_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__x1_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k5_i * var_INaCa_i__k7_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k2_i * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x2_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i; // dimensionless
        const double var_INaCa_i__x3_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x4_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i * var_INaCa_i__k5_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k2_i * var_INaCa_i__k8_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E3_i = var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E4_i = var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__JncxCa_i = var_INaCa_i__E2_i * var_INaCa_i__k2_i - var_INaCa_i__E1_i * var_INaCa_i__k1_i; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_i = var_INaCa_i__E3_i * var_INaCa_i__k4pp_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i + 3.0 * var_INaCa_i__E4_i * var_INaCa_i__k7_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i; // millimolar_per_millisecond
        const double var_INaK__Knai = var_INaK__Knai0 * exp(0.33333333333333331 * var_INaK__delta * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // millimolar
        const double var_INaK__Knao = var_INaK__Knao0 * exp(0.33333333333333331 * (1.0 - var_INaK__delta) * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // millimolar
        const double var_INaK__a1 = pow(var_chaste_interface__intracellular_ions__nai, 3) * var_INaK__k1p / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = pow(mParameters[3], 2) * var_INaK__k3p / ((-1.0 + pow((1.0 + mParameters[3] / var_INaK__Kko), 2) + pow((1.0 + mParameters[4] / var_INaK__Knao), 3)) * pow(var_INaK__Kko, 2)); // dimensionless
        const double var_INaK__b2 = pow(mParameters[4], 3) * var_INaK__k2m / ((-1.0 + pow((1.0 + mParameters[3] / var_INaK__Kko), 2) + pow((1.0 + mParameters[4] / var_INaK__Knao), 3)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = pow(var_chaste_interface__intracellular_ions__ki, 2) * var_INaK__k4m / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Kki, 2)); // dimensionless
        const double var_INaK__x1 = var_INaK__a1 * var_INaK__a2 * var_INaK__a4 + var_INaK__a1 * var_INaK__a2 * var_INaK__b3 + var_INaK__a2 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = var_INaK__a1 * var_INaK__a2 * var_INaK__a3 + var_INaK__a2 * var_INaK__a3 * var_INaK__b4 + var_INaK__a3 * var_INaK__b1 * var_INaK__b4 + var_INaK__b1 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = var_INaK__a2 * var_INaK__a3 * var_INaK__a4 + var_INaK__a3 * var_INaK__a4 * var_INaK__b1 + var_INaK__a4 * var_INaK__b1 * var_INaK__b2 + var_INaK__b1 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = var_INaK__a1 * var_INaK__a3 * var_INaK__a4 + var_INaK__a1 * var_INaK__a4 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__E1 = var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E2 = var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E3 = var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E4 = var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__JnakK = 2.0 * var_INaK__E4 * var_INaK__b1 - 2.0 * var_INaK__E3 * var_INaK__a1; // millimolar_per_millisecond
        const double var_INaK__JnakNa = 3.0 * var_INaK__E1 * var_INaK__a3 - 3.0 * var_INaK__E2 * var_INaK__b3; // millimolar_per_millisecond
        const double var_membrane__vffrt = pow(mParameters[5], 2) * var_chaste_interface__membrane__v / (mParameters[6] * mParameters[19]); // coulomb_per_mole
        const double var_membrane__vfrt = var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19]); // dimensionless
        const double var_INab__INab = (-mParameters[4] + var_chaste_interface__intracellular_ions__nai * exp(var_membrane__vfrt)) * var_INab__PNab * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // microA_per_microF
        const double var_physical_constants__zca = 2.0; // dimensionless
        const double var_physical_constants__zk = 1.0; // dimensionless
        const double var_physical_constants__zna = 1.0; // dimensionless
        const double var_INaCa_i__INaCa_i = 0.80000000000000004 * (var_INaCa_i__JncxCa_i * var_physical_constants__zca + var_INaCa_i__JncxNa_i * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_i; // microA_per_microF
        const double var_INaK__INaK = (var_INaK__JnakK * var_physical_constants__zk + var_INaK__JnakNa * var_physical_constants__zna) * var_INaK__Pnak; // microA_per_microF
        const double var_reversal_potentials__ENa = mParameters[6] * mParameters[19] * log(mParameters[4] / var_chaste_interface__intracellular_ions__nai) / mParameters[5]; // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INa__fINap) * var_INa__h * var_chaste_interface__INa__j + var_INa__fINap * var_INa__hp * var_chaste_interface__INa__jp) * mParameters[11]; // microA_per_microF
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INaL__fINaLp) * var_chaste_interface__INaL__hL + var_INaL__fINaLp * var_chaste_interface__INaL__hLp) * var_INaL__GNaL * var_chaste_interface__INaL__mL; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__nai = var_cell_geometry__vss * var_diff__JdiffNa / var_cell_geometry__vmyo + (-var_INa__INa - var_INaL__INaL - var_INab__INab - 3.0 * var_INaCa_i__INaCa_i - 3.0 * var_INaK__INaK) * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vmyo * mParameters[5]); // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__nai;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            double var_chaste_interface__intracellular_ions__cai = rY[1];
            // Units: millimolar; Initial value: 0.0001
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__intracellular_ions__nai = rY[3];
            // Units: millimolar; Initial value: 7.0
            double var_chaste_interface__intracellular_ions__ki = rY[5];
            // Units: millimolar; Initial value: 145.0
            double var_chaste_interface__intracellular_ions__cass = rY[7];
            // Units: millimolar; Initial value: 0.0001
            double var_chaste_interface__INa__m = rY[10];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__INa__hf = rY[11];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__INa__hs = rY[12];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__INa__j = rY[13];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__INa__hsp = rY[14];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__INa__jp = rY[15];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__INaL__mL = rY[16];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__INaL__hL = rY[17];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__INaL__hLp = rY[18];
            // Units: dimensionless; Initial value: 1.0
            

            const double var_x0 = 1 / (mParameters[6] * mParameters[19]);
            const double var_x1 = var_x0 * mParameters[5];
            const double var_x2 = var_x1 * var_chaste_interface__membrane__v;
            const double var_x3 = exp(0.38500000000000001 * var_x2);
            const double var_x4 = mParameters[4] / var_x3;
            const double var_x5 = 1.0 + 0.035997120230381568 * var_x4;
            const double var_x6 = pow(var_x5, 3);
            const double var_x7 = pow((0.35820000000000002 + mParameters[3]), 2);
            const double var_x8 = 1 / (-1.0 + var_x6 + 7.7937924625297832 * var_x7);
            const double var_x9 = pow(mParameters[3], 2);
            const double var_x10 = var_x8 * var_x9;
            const double var_x11 = pow(var_chaste_interface__intracellular_ions__nai, 3);
            const double var_x12 = exp(-0.051666666666666666 * var_x2);
            const double var_x13 = 1 / var_x12;
            const double var_x14 = var_x13 * var_chaste_interface__intracellular_ions__nai;
            const double var_x15 = 1.0 + 0.11021712774165104 * var_x14;
            const double var_x16 = pow(var_x15, 3);
            const double var_x17 = pow((0.5 + var_chaste_interface__intracellular_ions__ki), 2);
            const double var_x18 = 1 / (-1.0 + var_x16 + 4.0 * var_x17);
            const double var_x19 = pow(var_x12, (-3));
            const double var_x20 = var_x18 * var_x19;
            const double var_x21 = var_x11 * var_x20;
            const double var_x22 = var_x10 * var_x21;
            const double var_x24 = pow(mParameters[4], 3);
            const double var_x25 = var_x24 * var_x8 / pow(var_x3, 3);
            const double var_x26 = var_x21 * var_x25;
            const double var_x27 = 1.4929407925401197 * var_x26;
            const double var_x31 = pow((-0.25 + var_x17 + 0.25 * var_x16), (-2));
            const double var_x32 = pow(var_x15, 2);
            const double var_x33 = var_x32 / pow(var_x12, 4);
            const double var_x43 = 1 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ki + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nai);
            const double var_x44 = var_x21 * var_x43;
            const double var_x52 = var_x25 * var_x43;
            const double var_x54 = pow(var_chaste_interface__intracellular_ions__ki, 2);
            const double var_x55 = var_x18 * var_x54;
            const double var_x56 = var_x43 * var_x55;
            const double var_x57 = var_x25 * var_x56;
            const double var_x63 = var_x31 * var_x54;
            const double var_x64 = var_x32 * var_x63;
            const double var_x69 = var_x10 * var_x55;
            const double var_x70 = var_x25 * var_x55;
            const double var_x71 = 2.6817254812739919 * var_x70 + 1648931648.7518551 * var_x69;
            const double var_x72 = 6585420658.1002293 * var_x10 + 9.6722701128385645e-12 * var_x52 + 10.71014095526842 * var_x25;
            const double var_x73 = var_x25 * var_x44;
            const double var_x74 = var_x27 + 1.348266719199441e-12 * var_x73;
            const double var_x75 = 6.3450816326903207e-5 * var_x56 + 5.041496472709802e-7 * var_x44 + 558246.7943749798 * var_x21;
            const double var_x76 = 1 / (var_x71 + var_x72 + var_x74 + var_x75 + 3.3937789869608994e-10 * var_x57 + 24953131.661984976 * var_x22);
            const double var_x86 = var_x43 * var_x76;
            const double var_x99 = pow((var_x10 + 0.25039124064514068 * var_x69 + 7.6555420442407695e-17 * var_x44 + 8.4770104046173956e-5 * var_x21 + 2.0473509426327076e-22 * var_x73 + 0.0037891477184972245 * var_x22 + 9.6350437764149725e-15 * var_x56 + 4.0722159152815902e-10 * var_x70 + 1.4687399051632995e-21 * var_x52 + 1.6263412029867345e-9 * var_x25 + 5.1534733514501733e-20 * var_x57 + 2.2670393738686469e-10 * var_x26), (-2));
            const double var_x100 = 1.6968894934804497e-10 * var_x57;
            const double var_x101 = var_x99 * (var_x100 + var_x74 + 12023111.890251627 * var_x22);
            const double var_x104 = var_x71 + 12930019.771733347 * var_x22;
            const double var_x105 = var_x104 * var_x43;
            const double var_x108 = var_x10 * var_x76;
            const double var_x112 = var_x100 + var_x75;
            const double var_x113 = var_x10 * var_x112;
            const double var_x115 = var_x21 * var_x72;
            const double var_x118 = var_x72 * var_x76;
            const double var_x121 = 1 / (13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[4]) * mParameters[4]);
            const double var_x122 = exp(0.52239999999999998 * var_x2);
            const double var_x123 = 1 / var_x122;
            const double var_x124 = 1.0 + 0.011348161597821153 * (1.0 + var_x123) * mParameters[4];
            const double var_x129 = 1 / var_x124;
            const double var_x130 = var_x123 * var_x129;
            const double var_x131 = var_x121 * var_x24;
            const double var_x132 = var_x130 * var_x131;
            const double var_x135 = 0.011348161597821153 + 0.011348161597821153 * var_x122;
            const double var_x138 = 1 / exp(0.16700000000000001 * var_x2);
            const double var_x164 = var_x121 * mParameters[2];
            const double var_x165 = 1500000.0 * var_x164;
            const double var_x166 = var_x165 + 9.0785292782569211 * var_x132;
            const double var_x189 = var_x130 * mParameters[4];
            const double var_x190 = 56.740807989105761 * var_x189;
            const double var_x191 = var_x190 + 60000.0 * var_x129;
            const double var_x192 = 5000.0 + var_x191;
            const double var_x196 = var_x132 * var_x192;
            const double var_x200 = var_x166 * var_x191;
            const double var_x201 = 5000.0 * var_x200;
            const double var_x206 = 0.00036716666666666668 * var_x200;
            const double var_x208 = 0.11015000000000001 * var_x164;
            const double var_x222 = var_x165 * var_x191;
            const double var_x231 = 45392.646391284608 * var_x132;
            const double var_x254 = 3000000.0 * var_x164;
            const double var_x258 = 1.6177363333333335e-8 * var_x164;
            const double var_x266 = 27.235587834770765 * var_x132;
            const double var_x268 = 1.4686666666666667e-13 * var_x132;
            const double var_x281 = 1.0 + var_x135 * var_chaste_interface__intracellular_ions__nai;
            const double var_x282 = 1 / var_x281;
            const double var_x283 = var_x138 * var_x282;
            const double var_x284 = var_x122 * var_x282;
            const double var_x285 = 56.740807989105761 * var_x284;
            const double var_x286 = var_x285 * var_chaste_interface__intracellular_ions__nai;
            const double var_x287 = var_x286 + 60000.0 * var_x283;
            const double var_x288 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nai) * var_chaste_interface__intracellular_ions__nai;
            const double var_x289 = 1 / var_x288;
            const double var_x290 = 1500000.0 * var_x289;
            const double var_x291 = var_x290 * var_chaste_interface__intracellular_ions__cai;
            const double var_x294 = var_x284 * var_chaste_interface__intracellular_ions__nai;
            const double var_x296 = pow(var_chaste_interface__intracellular_ions__nai, 2);
            const double var_x297 = pow(var_x281, (-2));
            const double var_x300 = var_x297 * var_chaste_interface__intracellular_ions__nai;
            const double var_x303 = var_x166 * var_x291;
            const double var_x305 = var_x284 * var_x289;
            const double var_x306 = var_x11 * var_x305;
            const double var_x307 = var_x164 * var_x306;
            const double var_x308 = 13617793.917385383 * var_x307;
            const double var_x310 = 5000.0 + var_x287;
            const double var_x311 = var_x307 * var_x310;
            const double var_x313 = var_x164 * var_x289;
            const double var_x314 = var_x297 * var_x313;
            const double var_x317 = var_x166 * var_x287;
            const double var_x318 = 13617793.917385383 * var_x311 + var_x291 * var_x317;
            const double var_x319 = var_x291 + 9.0785292782569211 * var_x306;
            const double var_x320 = var_x287 * var_x319;
            const double var_x321 = var_x192 * var_x306;
            const double var_x322 = 5000.0 * var_x320 + 45392.646391284608 * var_x321;
            const double var_x323 = var_x196 * var_x289;
            const double var_x324 = var_x323 * var_chaste_interface__intracellular_ions__cai;
            const double var_x325 = 13617793.917385383 * var_x324 + var_x222 * var_x319;
            const double var_x326 = var_x201 + var_x231 * var_x310;
            const double var_x327 = 1 / (var_x318 + var_x322 + var_x325 + var_x326);
            const double var_x328 = 10000.0 * var_x327;
            const double var_x329 = var_x289 * var_x317;
            const double var_x330 = var_x132 * var_x310;
            const double var_x331 = pow((var_x206 + var_x311 + var_x324 + 0.0033333333333333331 * var_x321 + 0.0033333333333333331 * var_x330 + 0.00036716666666666668 * var_x320 + 0.11015000000000001 * var_x329 * var_chaste_interface__intracellular_ions__cai + var_x191 * var_x208 * var_x319), (-2));
            const double var_x333 = 283704.03994552878 * var_x284;
            const double var_x334 = 300000000.0 * var_x283 + var_x333 * var_chaste_interface__intracellular_ions__nai;
            const double var_x335 = var_x289 * var_x297;
            const double var_x353 = 5.3924544444444452e-11 * var_x318;
            const double var_x355 = var_x254 * var_x327;
            const double var_x356 = var_x286 * var_x327;
            const double var_x357 = var_x190 * var_x327;
            const double var_x358 = var_x258 * var_x322;
            const double var_x360 = var_x294 * var_x325;
            const double var_x361 = 27.235587834770765 * var_x327;
            const double var_x363 = var_x189 * var_x318;
            const double var_x364 = var_x266 * var_x327;
            const double var_x365 = 1.4686666666666667e-13 * var_x306 * var_x326;
            const double var_x366 = var_x268 * var_x322;
            const double var_x368 = var_x325 * var_x327;
            const double var_x370 = var_x326 * var_x327;
            const double var_x372 = 1.0 + 2.2499999999999996e-8 / pow(var_chaste_interface__intracellular_ions__cai, 2);
            const double var_x373 = mParameters[16] / var_x372;
            const double var_x376 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x377 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x378 = 1.0 + 0.0015 * var_x377;
            const double var_x379 = 1 / var_x378;
            const double var_x380 = 0.050000000000000003 * var_x379;
            const double var_x381 = var_x376 * var_x380 + var_chaste_interface__CaMK__CaMKt;
            const double var_x382 = 1.0 + 0.14999999999999999 / var_x381;
            const double var_x383 = 1 / var_x382;
            const double var_x404 = var_x0 * pow(mParameters[5], 2);
            const double var_x409 = var_x383;
            const double var_x410 = 1.0 - var_x409;
            const double var_x458 = 0.59999999999999998 * var_x383;
            const double var_x459 = (-var_x458 * var_chaste_interface__INaL__hLp - 0.59999999999999998 * var_x410 * var_chaste_interface__INaL__hL) * mParameters[13];
            const double var_x460 = var_x459 * var_chaste_interface__INaL__mL;
            const double var_x461 = 0.98999999999999999 * var_chaste_interface__INa__hf;
            const double var_x462 = var_x461 + 0.010000000000000009 * var_chaste_interface__INa__hs;
            const double var_x463 = var_x410 * var_x462;
            const double var_x464 = var_x461 + 0.010000000000000009 * var_chaste_interface__INa__hsp;
            const double var_x465 = var_x464 * var_chaste_interface__INa__jp;
            const double var_x466 = var_x409 * var_x465 + var_x463 * var_chaste_interface__INa__j;
            const double var_x467 = pow(var_chaste_interface__INa__m, 3) * mParameters[11];
            const double var_x468 = var_x466 * var_x467;
            const double var_x469 = exp(var_x2);
            const double var_x472 = -1.0 + var_x469;
            const double var_x473 = 1 / var_x472;
            const double var_x474 = var_x404 * var_x473;
            const double var_x475 = var_x469 * var_chaste_interface__membrane__v;
            const double var_x529 = 1 / mParameters[5];
            const double var_x530 = var_x529 * mParameters[6] * mParameters[19];
            const double var_x569 = var_x331 * var_x353;
            const double var_x572 = var_x331 * var_x358;
            const double var_x573 = 3.0597222222222222e-13 * var_x331;
            const double var_x599 = 1 / var_chaste_interface__intracellular_ions__nai;
            const double var_x612 = var_x20 * var_x296;
            const double var_x613 = var_x10 * var_x612;
            const double var_x614 = 4.4788223776203591 * var_x25 * var_x612;
            const double var_x615 = var_x11 * var_x31;
            const double var_x616 = var_x33 * var_x615;
            const double var_x617 = var_x10 * var_x616;
            const double var_x618 = 4.0448001575983228e-12 * var_x52 * var_x612;
            const double var_x619 = pow((1 + 0.0028096208831939005 * var_chaste_interface__intracellular_ions__nai + 0.0021553256090254577 * var_chaste_interface__intracellular_ions__ki), (-2));
            const double var_x620 = var_x21 * var_x619;
            const double var_x621 = var_x25 * var_x620;
            const double var_x622 = 2.3840715066649271e-15 * var_x621;
            const double var_x623 = 0.030852683632896775 * var_x25 * var_x616;
            const double var_x624 = 2.786289097871654e-14 * var_x52 * var_x616;
            const double var_x625 = var_x55 * var_x619;
            const double var_x626 = var_x25 * var_x625;
            const double var_x627 = var_x13 * var_x64;
            const double var_x628 = var_x52 * var_x627;
            const double var_x629 = -3.0005234378016216e-13 * var_x626 - 3.5067428637450051e-12 * var_x628;
            const double var_x630 = var_x614 + var_x618 + var_x629 - var_x622 - var_x623 - var_x624 + 36069335.67075488 * var_x613 - 248466.16107375509 * var_x617;
            const double var_x631 = 34076345.656450219 * var_x10 * var_x627;
            const double var_x632 = 0.055419764988303033 * var_x25 * var_x627;
            const double var_x633 = -var_x631 - var_x632 + 38790059.315200046 * var_x613 - 267208.05766560155 * var_x617;
            const double var_x634 = 1.1219685328242758e-7 * var_x625;
            const double var_x635 = 1674740.3831249396 * var_x612;
            const double var_x636 = 8.9146219515644901e-10 * var_x620;
            const double var_x637 = var_x25 * var_x619;
            const double var_x638 = 11536.567171311443 * var_x616;
            const double var_x639 = 1.5124489418129408e-6 * var_x43 * var_x612;
            const double var_x640 = 1.3112562615776865e-6 * var_x43 * var_x627;
            const double var_x641 = 1.0418611138907615e-8 * var_x43 * var_x616;
            const double var_x642 = var_x622 + var_x623 + var_x624 + var_x631 + var_x632 + var_x634 + var_x636 + var_x638 + var_x640 + var_x641 - var_x614 - var_x618 - var_x635 - var_x639 + 6.0010468756032432e-13 * var_x626 + 7.0134857274900101e-12 * var_x628 + 1.7102983595469244e-14 * var_x637 + 515674.21873935661 * var_x617 - 74859394.985954925 * var_x613;
            const double var_x643 = var_x619 * var_x76;
            const double var_x644 = var_x104 * var_x643;
            const double var_x646 = var_x629 + var_x635 + var_x639 - var_x634 - var_x636 - var_x638 - var_x640 - var_x641;
            const double var_x647 = var_x118 * var_x612;
            const double var_x650 = var_x118 * var_x616;
            const double var_x651 = var_x26 * var_x643;
            const double var_x652 = -0.011348161597821153 - 0.011348161597821153 * var_x122;
            const double var_x653 = var_x138 * var_x652;
            const double var_x654 = var_x297 * var_x653;
            const double var_x655 = var_x122 * var_x652;
            const double var_x656 = 56.740807989105761 * var_x655;
            const double var_x657 = var_x300 * var_x656;
            const double var_x658 = var_x285 + var_x657 + 60000.0 * var_x654;
            const double var_x659 = var_x303 * var_x658;
            const double var_x660 = (-0.066666666666666666 - 0.026666666666666668 * var_chaste_interface__intracellular_ions__nai) / pow(var_x288, 2);
            const double var_x661 = var_x660 * var_chaste_interface__intracellular_ions__cai;
            const double var_x662 = 1500000.0 * var_x661;
            const double var_x663 = var_x317 * var_x662;
            const double var_x664 = var_x296 * var_x305;
            const double var_x665 = 40853381.752156146 * var_x164;
            const double var_x666 = var_x310 * var_x664 * var_x665;
            const double var_x667 = var_x308 * var_x658;
            const double var_x668 = var_x284 * var_x660;
            const double var_x669 = var_x11 * var_x668;
            const double var_x670 = 13617793.917385383 * var_x310;
            const double var_x671 = var_x164 * var_x669 * var_x670;
            const double var_x672 = var_x11 * var_x314 * var_x655 * var_x670;
            const double var_x673 = var_x659 + var_x663 + var_x666 + var_x667 + var_x671 + var_x672;
            const double var_x674 = 283704.03994552878 * var_x655;
            const double var_x675 = var_x319 * (var_x333 + 300000000.0 * var_x654 + var_x300 * var_x674);
            const double var_x676 = 9.0785292782569211 * var_x11;
            const double var_x677 = var_x335 * var_x655;
            const double var_x678 = var_x662 + 27.235587834770765 * var_x664 + var_x668 * var_x676 + var_x676 * var_x677;
            const double var_x679 = var_x334 * var_x678;
            const double var_x680 = var_x222 * var_x678;
            const double var_x681 = 136177.93917385384 * var_x192;
            const double var_x682 = var_x664 * var_x681;
            const double var_x683 = 45392.646391284608 * var_x192;
            const double var_x684 = var_x669 * var_x683;
            const double var_x685 = var_x11 * var_x677;
            const double var_x686 = var_x683 * var_x685;
            const double var_x687 = 13617793.917385383 * var_x196;
            const double var_x688 = var_x661 * var_x687;
            const double var_x689 = -var_x659 - var_x663 - var_x666 - var_x667 - var_x671 - var_x672 - var_x675 - var_x679 - var_x680 - var_x682 - var_x684 - var_x686 - var_x688 - var_x231 * var_x658;
            const double var_x690 = var_x675 + var_x679 + var_x682 + var_x684 + var_x686;
            const double var_x691 = var_x573 * var_x689;
            const double var_x692 = var_x331 * var_x689;
            const double var_x693 = var_x326 * var_x361;
            const double var_x694 = 1236295.4078425223 * var_x129 * var_x131;
            const double var_x695 = var_x285 * var_x368 + var_x328 * var_x673 + var_x356 * (var_x680 + var_x688) + var_x360 * var_x691 + var_x365 * var_x692 + var_x368 * var_x657 + var_x569 * var_x689 + var_x669 * var_x693 + var_x685 * var_x693 - var_x355 * var_x690 - var_x357 * var_x673 - var_x363 * var_x691 - var_x364 * var_x690 - var_x366 * var_x692 - var_x572 * var_x689 + 81.706763504312292 * var_x370 * var_x664 + var_x11 * var_x282 * var_x289 * var_x327 * var_x658 * var_x694;
            const double var_x696 = var_x530 * var_x599;
            const double var_x697 = var_x460 * var_x696 - var_x468 * var_x696 - 3.75e-10 * var_x474 * var_x475;
            const double var_x894 = 49.248000000000005 * var_x76;
            const double var_x895 = 4.6743270904386998e-9 * var_x86;
            const double var_x896 = 1.1355899876962699e-18 * var_x101;
            const double var_x897 = 1.0778344385801704e-28 * var_x105;
            const double var_x898 = 119883.33627938687 * var_x108;
            const double var_x899 = 2.7643420315646669e-15 * var_x113;
            const double var_x900 = 1.5829563992786911e-19 * var_x115;
            const double var_x901 = 2.6400000000000006 * var_x373;
            const double var_x902 = 5.9358288770053464 * var_x529;
            const double var_x903 = var_x897 * var_x99;
            const double var_x904 = var_x899 * var_x99;
            const double var_x905 = var_x900 * var_x99;
            
            partialF = -0.014705882352941176 + var_x902 * (var_x697 + (20.594784454685026 * var_x647 - 0.14186862431586178 * var_x650 - 8.2653749962498475e-12 * var_x644 - 1.1741075356023433e-13 * var_x651 + var_x633 * var_x895 + var_x642 * var_x903 + var_x642 * var_x905 - var_x630 * var_x894 - var_x642 * var_x896 - var_x642 * var_x904 - var_x646 * var_x898) * mParameters[17] - var_x695 * var_x901);
        }
        else
        {
            const double y_save = rY[3];
            rY[3] += delta;
            const double temp = EvaluateYDerivative3(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[3])/delta;
            rY[3] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__nai = rY[3];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__nass = rY[4];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__nca = rY[33];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_ICaL__Aff = 0.59999999999999998; // dimensionless
        const double var_ICaL__Afs = 1.0 - var_ICaL__Aff; // dimensionless
        const double var_ICaL__f = var_ICaL__Aff * var_chaste_interface__ICaL__ff + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__fp = var_ICaL__Aff * var_chaste_interface__ICaL__ffp + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_INaCa_i__KmCaAct = 0.00014999999999999999; // millimolar
        const double var_INaCa_i__kasymm = 12.5; // dimensionless
        const double var_INaCa_i__kcaoff = 5000.0; // per_millisecond
        const double var_INaCa_i__k2_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__kcaon = 1500000.0; // per_millisecond
        const double var_INaCa_i__kna1 = 15.0; // per_millisecond
        const double var_INaCa_i__kna2 = 5.0; // per_millisecond
        const double var_INaCa_i__kna3 = 88.120000000000005; // per_millisecond
        const double var_INaCa_i__qca = 0.16700000000000001; // dimensionless
        const double var_INaCa_i__qna = 0.52239999999999998; // dimensionless
        const double var_INaCa_i__wca = 60000.0; // dimensionless
        const double var_INaCa_i__wna = 60000.0; // dimensionless
        const double var_INaCa_i__wnaca = 5000.0; // dimensionless
        const double var_cell_geometry__L = 0.01; // centimeter
        const double var_cell_geometry__rad = 0.0011000000000000001; // centimeter
        const double var_cell_geometry__Ageo = 6.2800000000000002 * pow(var_cell_geometry__rad, 2) + 6.2800000000000002 * var_cell_geometry__L * var_cell_geometry__rad; // centimeter_squared
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__Ageo; // centimeter_squared
        const double var_cell_geometry__vcell = 3140.0 * pow(var_cell_geometry__rad, 2) * var_cell_geometry__L; // microliter
        const double var_cell_geometry__vss = 0.02 * var_cell_geometry__vcell; // microliter
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[7]) : ((var_environment__celltype == 2.0) ? (2.5 * mParameters[7]) : (mParameters[7]))); // dimensionless
        const double var_ICaL__PCaNa = 0.00125 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaNap = 0.00125 * var_ICaL__PCap; // dimensionless
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * mParameters[16]) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * mParameters[16]) : (mParameters[16]))); // milliS_per_microF
        const double var_INaCa_i__h10_ss = 1.0 + (1.0 + mParameters[4] / var_INaCa_i__kna2) * mParameters[4] / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h11_ss = pow(mParameters[4], 2) / (var_INaCa_i__h10_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h12_ss = 1 / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__k1_ss = var_INaCa_i__h12_ss * var_INaCa_i__kcaon * mParameters[2]; // dimensionless
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__allo_ss = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cass, 2)); // dimensionless
        const double var_intracellular_ions__cm = 1.0; // microF_per_centimeter_squared
        const double var_INaCa_i__h4_ss = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_ss = pow(var_chaste_interface__intracellular_ions__nass, 2) / (var_INaCa_i__h4_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_ss = 1 / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k6_ss = var_INaCa_i__h6_ss * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cass; // dimensionless
        const double var_diff__JdiffNa = 0.5 * var_chaste_interface__intracellular_ions__nass - 0.5 * var_chaste_interface__intracellular_ions__nai; // millimolar_per_millisecond
        const double var_ICaL__Afcaf = 0.29999999999999999 + 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_INaCa_i__hca = exp(var_INaCa_i__qca * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__hna = exp(var_INaCa_i__qna * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h2_ss = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / (var_INaCa_i__h1_ss * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h3_ss = 1 / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * mParameters[4] / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h8_ss = mParameters[4] / (var_INaCa_i__h7_ss * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h9_ss = 1 / var_INaCa_i__h7_ss; // dimensionless
        const double var_INaCa_i__k3p_ss = var_INaCa_i__h9_ss * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3pp_ss = var_INaCa_i__h8_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_ss = var_INaCa_i__k3p_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4p_ss = var_INaCa_i__h3_ss * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4pp_ss = var_INaCa_i__h2_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_ss = var_INaCa_i__k4p_ss + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_ss = var_INaCa_i__h2_ss * var_INaCa_i__h5_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_ss = var_INaCa_i__h11_ss * var_INaCa_i__h8_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__x1_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k5_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss; // dimensionless
        const double var_INaCa_i__x3_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss * var_INaCa_i__k5_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k8_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E3_ss = var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E4_ss = var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__JncxCa_ss = var_INaCa_i__E2_ss * var_INaCa_i__k2_ss - var_INaCa_i__E1_ss * var_INaCa_i__k1_ss; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_ss = var_INaCa_i__E3_ss * var_INaCa_i__k4pp_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss + 3.0 * var_INaCa_i__E4_ss * var_INaCa_i__k7_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss; // millimolar_per_millisecond
        const double var_membrane__vffrt = pow(mParameters[5], 2) * var_chaste_interface__membrane__v / (mParameters[6] * mParameters[19]); // coulomb_per_mole
        const double var_membrane__vfrt = var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19]); // dimensionless
        const double var_ICaL__PhiCaNa = (-0.75 * mParameters[4] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaNa = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNa * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNap * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_physical_constants__zca = 2.0; // dimensionless
        const double var_physical_constants__zna = 1.0; // dimensionless
        const double var_INaCa_i__INaCa_ss = 0.20000000000000001 * (var_INaCa_i__JncxCa_ss * var_physical_constants__zca + var_INaCa_i__JncxNa_ss * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_ss; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__nass = -var_diff__JdiffNa + (-var_ICaL__ICaNa - 3.0 * var_INaCa_i__INaCa_ss) * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vss * mParameters[5]); // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__nass;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__intracellular_ions__nass = rY[4];
            // Units: millimolar; Initial value: 7.0
            double var_chaste_interface__intracellular_ions__cass = rY[7];
            // Units: millimolar; Initial value: 0.0001
            double var_chaste_interface__ICaL__d = rY[25];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__ICaL__ff = rY[26];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__fs = rY[27];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__fcaf = rY[28];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__fcas = rY[29];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__jca = rY[30];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__ffp = rY[31];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__fcafp = rY[32];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__nca = rY[33];
            // Units: dimensionless; Initial value: 0.0
            

            const double var_x0 = 1 / (mParameters[6] * mParameters[19]);
            const double var_x1 = var_x0 * mParameters[5];
            const double var_x2 = var_x1 * var_chaste_interface__membrane__v;
            const double var_x24 = pow(mParameters[4], 3);
            const double var_x121 = 1 / (13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[4]) * mParameters[4]);
            const double var_x122 = exp(0.52239999999999998 * var_x2);
            const double var_x123 = 1 / var_x122;
            const double var_x124 = 1.0 + 0.011348161597821153 * (1.0 + var_x123) * mParameters[4];
            const double var_x129 = 1 / var_x124;
            const double var_x130 = var_x123 * var_x129;
            const double var_x131 = var_x121 * var_x24;
            const double var_x132 = var_x130 * var_x131;
            const double var_x135 = 0.011348161597821153 + 0.011348161597821153 * var_x122;
            const double var_x136 = 1.0 + var_x135 * var_chaste_interface__intracellular_ions__nass;
            const double var_x137 = 1 / var_x136;
            const double var_x138 = 1 / exp(0.16700000000000001 * var_x2);
            const double var_x139 = var_x137 * var_x138;
            const double var_x140 = var_x122 * var_x137;
            const double var_x141 = 56.740807989105761 * var_x140;
            const double var_x142 = var_x141 * var_chaste_interface__intracellular_ions__nass;
            const double var_x143 = var_x142 + 60000.0 * var_x139;
            const double var_x144 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass;
            const double var_x145 = 1 / var_x144;
            const double var_x146 = 1500000.0 * var_x145;
            const double var_x147 = var_x146 * var_chaste_interface__intracellular_ions__cass;
            const double var_x151 = var_x140 * var_chaste_interface__intracellular_ions__nass;
            const double var_x155 = pow(var_x136, (-2));
            const double var_x156 = pow(var_chaste_interface__intracellular_ions__nass, 2);
            const double var_x160 = var_x155 * var_chaste_interface__intracellular_ions__nass;
            const double var_x164 = var_x121 * mParameters[2];
            const double var_x165 = 1500000.0 * var_x164;
            const double var_x166 = var_x165 + 9.0785292782569211 * var_x132;
            const double var_x167 = var_x147 * var_x166;
            const double var_x169 = pow(var_chaste_interface__intracellular_ions__nass, 3);
            const double var_x170 = var_x140 * var_x145;
            const double var_x171 = var_x169 * var_x170;
            const double var_x172 = var_x164 * var_x171;
            const double var_x173 = 13617793.917385383 * var_x172;
            const double var_x175 = 5000.0 + var_x143;
            const double var_x176 = var_x172 * var_x175;
            const double var_x180 = var_x145 * var_x164;
            const double var_x181 = var_x155 * var_x180;
            const double var_x185 = var_x143 * var_x166;
            const double var_x186 = 13617793.917385383 * var_x176 + var_x147 * var_x185;
            const double var_x187 = var_x147 + 9.0785292782569211 * var_x171;
            const double var_x188 = var_x143 * var_x187;
            const double var_x189 = var_x130 * mParameters[4];
            const double var_x190 = 56.740807989105761 * var_x189;
            const double var_x191 = var_x190 + 60000.0 * var_x129;
            const double var_x192 = 5000.0 + var_x191;
            const double var_x193 = var_x171 * var_x192;
            const double var_x194 = 5000.0 * var_x188 + 45392.646391284608 * var_x193;
            const double var_x195 = var_x187 * var_x191;
            const double var_x196 = var_x132 * var_x192;
            const double var_x197 = var_x145 * var_x196;
            const double var_x198 = var_x197 * var_chaste_interface__intracellular_ions__cass;
            const double var_x199 = 13617793.917385383 * var_x198 + var_x165 * var_x195;
            const double var_x200 = var_x166 * var_x191;
            const double var_x201 = 5000.0 * var_x200;
            const double var_x202 = var_x132 * var_x175;
            const double var_x203 = var_x201 + 45392.646391284608 * var_x202;
            const double var_x204 = 1 / (var_x186 + var_x194 + var_x199 + var_x203);
            const double var_x205 = 10000.0 * var_x204;
            const double var_x206 = 0.00036716666666666668 * var_x200;
            const double var_x207 = var_x145 * var_x185;
            const double var_x208 = 0.11015000000000001 * var_x164;
            const double var_x209 = pow((var_x176 + var_x198 + var_x206 + 0.0033333333333333331 * var_x193 + 0.0033333333333333331 * var_x202 + 0.00036716666666666668 * var_x188 + var_x195 * var_x208 + 0.11015000000000001 * var_x207 * var_chaste_interface__intracellular_ions__cass), (-2));
            const double var_x215 = 283704.03994552878 * var_x140;
            const double var_x216 = 300000000.0 * var_x139 + var_x215 * var_chaste_interface__intracellular_ions__nass;
            const double var_x218 = var_x145 * var_x155;
            const double var_x222 = var_x165 * var_x191;
            const double var_x231 = 45392.646391284608 * var_x132;
            const double var_x253 = 5.3924544444444452e-11 * var_x186;
            const double var_x254 = 3000000.0 * var_x164;
            const double var_x256 = var_x142 * var_x204;
            const double var_x257 = var_x190 * var_x204;
            const double var_x258 = 1.6177363333333335e-8 * var_x164;
            const double var_x261 = var_x151 * var_x199;
            const double var_x263 = 27.235587834770765 * var_x204;
            const double var_x265 = var_x186 * var_x189;
            const double var_x267 = 1.4686666666666667e-13 * var_x171 * var_x203;
            const double var_x268 = 1.4686666666666667e-13 * var_x132;
            const double var_x270 = var_x199 * var_x204;
            const double var_x274 = var_x203 * var_x204;
            const double var_x277 = pow(var_chaste_interface__intracellular_ions__cass, (-2));
            const double var_x278 = 1.0 + 2.2499999999999996e-8 * var_x277;
            const double var_x279 = mParameters[16] / var_x278;
            const double var_x375 = mParameters[7] * var_chaste_interface__ICaL__d;
            const double var_x376 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x377 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x378 = 1.0 + 0.0015 * var_x377;
            const double var_x379 = 1 / var_x378;
            const double var_x380 = 0.050000000000000003 * var_x379;
            const double var_x381 = var_x376 * var_x380 + var_chaste_interface__CaMK__CaMKt;
            const double var_x382 = 1.0 + 0.14999999999999999 / var_x381;
            const double var_x383 = 1 / var_x382;
            const double var_x384 = 1.0 - var_chaste_interface__ICaL__nca;
            const double var_x385 = 0.40000000000000002 * var_chaste_interface__ICaL__fs;
            const double var_x386 = 0.59999999999999998 * var_chaste_interface__ICaL__ffp;
            const double var_x387 = 0.10000000000000001 * var_chaste_interface__membrane__v;
            const double var_x388 = exp(-1.0 + var_x387);
            const double var_x389 = 1.0 + var_x388;
            const double var_x390 = 0.59999999999999998 / var_x389;
            const double var_x391 = 0.29999999999999999 + var_x390;
            const double var_x392 = 0.69999999999999996 - var_x390;
            const double var_x393 = var_x392 * var_chaste_interface__ICaL__fcas;
            const double var_x394 = var_x393 + var_x391 * var_chaste_interface__ICaL__fcafp;
            const double var_x395 = var_x394 * var_chaste_interface__ICaL__jca;
            const double var_x396 = var_x384 * (var_x385 + var_x386) + var_x395 * var_chaste_interface__ICaL__nca;
            const double var_x397 = var_x383 * var_x396;
            const double var_x398 = var_x375 * var_x397;
            const double var_x399 = exp(var_x2);
            const double var_x402 = -1.0 + var_x399;
            const double var_x403 = 1 / var_x402;
            const double var_x404 = var_x0 * pow(mParameters[5], 2);
            const double var_x405 = var_x403 * var_x404;
            const double var_x409 = var_x383;
            const double var_x410 = 1.0 - var_x409;
            const double var_x411 = 0.59999999999999998 * var_chaste_interface__ICaL__ff;
            const double var_x412 = var_x393 + var_x391 * var_chaste_interface__ICaL__fcaf;
            const double var_x413 = var_x412 * var_chaste_interface__ICaL__jca;
            const double var_x414 = var_x384 * (var_x385 + var_x411) + var_x413 * var_chaste_interface__ICaL__nca;
            const double var_x415 = var_x410 * var_x414;
            const double var_x416 = var_x375 * var_x415;
            const double var_x419 = var_x398 * var_x399;
            const double var_x425 = var_x399 * var_x416;
            const double var_x483 = 0.0011249999999999999 * var_x425;
            const double var_x529 = 1 / mParameters[5];
            const double var_x652 = -0.011348161597821153 - 0.011348161597821153 * var_x122;
            const double var_x653 = var_x138 * var_x652;
            const double var_x655 = var_x122 * var_x652;
            const double var_x656 = 56.740807989105761 * var_x655;
            const double var_x665 = 40853381.752156146 * var_x164;
            const double var_x674 = 283704.03994552878 * var_x655;
            const double var_x681 = 136177.93917385384 * var_x192;
            const double var_x683 = 45392.646391284608 * var_x192;
            const double var_x687 = 13617793.917385383 * var_x196;
            const double var_x694 = 1236295.4078425223 * var_x129 * var_x131;
            const double var_x698 = var_x155 * var_x653;
            const double var_x699 = var_x160 * var_x656;
            const double var_x700 = var_x141 + var_x699 + 60000.0 * var_x698;
            const double var_x701 = var_x167 * var_x700;
            const double var_x702 = (-0.066666666666666666 - 0.026666666666666668 * var_chaste_interface__intracellular_ions__nass) / pow(var_x144, 2);
            const double var_x703 = var_x702 * var_chaste_interface__intracellular_ions__cass;
            const double var_x704 = 1500000.0 * var_x703;
            const double var_x705 = var_x185 * var_x704;
            const double var_x706 = var_x156 * var_x170;
            const double var_x707 = var_x175 * var_x665 * var_x706;
            const double var_x708 = var_x173 * var_x700;
            const double var_x709 = var_x140 * var_x702;
            const double var_x710 = var_x169 * var_x709;
            const double var_x711 = 13617793.917385383 * var_x175;
            const double var_x712 = var_x164 * var_x710 * var_x711;
            const double var_x713 = var_x169 * var_x181 * var_x655 * var_x711;
            const double var_x714 = var_x701 + var_x705 + var_x707 + var_x708 + var_x712 + var_x713;
            const double var_x715 = var_x187 * (var_x215 + 300000000.0 * var_x698 + var_x160 * var_x674);
            const double var_x716 = 9.0785292782569211 * var_x169;
            const double var_x717 = var_x218 * var_x655;
            const double var_x718 = var_x704 + 27.235587834770765 * var_x706 + var_x709 * var_x716 + var_x716 * var_x717;
            const double var_x719 = var_x216 * var_x718;
            const double var_x720 = var_x222 * var_x718;
            const double var_x721 = var_x681 * var_x706;
            const double var_x722 = var_x169 * var_x683;
            const double var_x723 = var_x709 * var_x722;
            const double var_x724 = var_x717 * var_x722;
            const double var_x725 = var_x687 * var_x703;
            const double var_x726 = -var_x701 - var_x705 - var_x707 - var_x708 - var_x712 - var_x713 - var_x715 - var_x719 - var_x720 - var_x721 - var_x723 - var_x724 - var_x725 - var_x231 * var_x700;
            const double var_x727 = var_x209 * var_x253;
            const double var_x728 = var_x715 + var_x719 + var_x721 + var_x723 + var_x724;
            const double var_x729 = var_x204 * var_x254;
            const double var_x730 = var_x209 * var_x726;
            const double var_x731 = var_x194 * var_x258;
            const double var_x732 = 3.0597222222222222e-13 * var_x730;
            const double var_x733 = var_x132 * var_x263;
            const double var_x734 = var_x203 * var_x263;
            const double var_x735 = var_x194 * var_x268;
            const double var_x736 = var_x141 * var_x270 + var_x205 * var_x714 + var_x256 * (var_x720 + var_x725) + var_x261 * var_x732 + var_x267 * var_x730 + var_x270 * var_x699 + var_x710 * var_x734 + var_x726 * var_x727 - var_x257 * var_x714 - var_x265 * var_x732 - var_x728 * var_x729 - var_x728 * var_x733 - var_x730 * var_x731 - var_x730 * var_x735 + 81.706763504312292 * var_x274 * var_x706 + var_x169 * var_x717 * var_x734 + var_x137 * var_x145 * var_x169 * var_x204 * var_x694 * var_x700;
            const double var_x737 = var_x405 * var_chaste_interface__membrane__v;
            const double var_x738 = var_x419 * var_x737;
            const double var_x739 = -0.0012375000000000001 * var_x738 - var_x483 * var_x737;
            const double var_x907 = 0.66000000000000014 * var_x279;
            const double var_x908 = 201.81818181818181 * var_x529;
            
            partialF = -0.5 + var_x908 * (var_x739 - var_x736 * var_x907);
        }
        else
        {
            const double y_save = rY[4];
            rY[4] += delta;
            const double temp = EvaluateYDerivative4(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[4])/delta;
            rY[4] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__nai = rY[3];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__ki = rY[5];
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__kss = rY[6];
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__Ito__a = rY[19];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ito__iF = rY[20];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__iS = rY[21];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__ap = rY[22];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ito__iFp = rY[23];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ito__iSp = rY[24];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__IKr__xrf = rY[34];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrs = rY[35];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs1 = rY[36];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs2 = rY[37];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IK1__xk1 = rY[38];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_INaK__H = 9.9999999999999995e-8; // millimolar
        const double var_INaK__Khp = 1.698e-7; // millimolar
        const double var_INaK__Kki = 0.5; // per_millisecond
        const double var_INaK__Kko = 0.35820000000000002; // per_millisecond
        const double var_INaK__Kmgatp = 1.698e-7; // millimolar
        const double var_INaK__Knai0 = 9.0730000000000004; // millimolar
        const double var_INaK__Knao0 = 27.780000000000001; // millimolar
        const double var_INaK__Knap = 224.0; // millimolar
        const double var_INaK__Kxkur = 292.0; // millimolar
        const double var_INaK__MgADP = 0.050000000000000003; // millimolar
        const double var_INaK__MgATP = 9.8000000000000007; // millimolar
        const double var_INaK__delta = -0.155; // millivolt
        const double var_INaK__eP = 4.2000000000000002; // dimensionless
        const double var_INaK__k1m = 182.40000000000001; // per_millisecond
        const double var_INaK__b1 = var_INaK__MgADP * var_INaK__k1m; // dimensionless
        const double var_INaK__k1p = 949.5; // per_millisecond
        const double var_INaK__k2m = 39.399999999999999; // per_millisecond
        const double var_INaK__k2p = 687.20000000000005; // per_millisecond
        const double var_INaK__a2 = var_INaK__k2p; // dimensionless
        const double var_INaK__k3m = 79300.0; // per_millisecond
        const double var_INaK__k3p = 1899.0; // per_millisecond
        const double var_INaK__k4m = 40.0; // per_millisecond
        const double var_INaK__k4p = 639.0; // per_millisecond
        const double var_INaK__a4 = var_INaK__MgATP * var_INaK__k4p / ((1.0 + var_INaK__MgATP / var_INaK__Kmgatp) * var_INaK__Kmgatp); // dimensionless
        const double var_cell_geometry__L = 0.01; // centimeter
        const double var_cell_geometry__rad = 0.0011000000000000001; // centimeter
        const double var_cell_geometry__Ageo = 6.2800000000000002 * pow(var_cell_geometry__rad, 2) + 6.2800000000000002 * var_cell_geometry__L * var_cell_geometry__rad; // centimeter_squared
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__Ageo; // centimeter_squared
        const double var_cell_geometry__vcell = 3140.0 * pow(var_cell_geometry__rad, 2) * var_cell_geometry__L; // microliter
        const double var_cell_geometry__vmyo = 0.68000000000000005 * var_cell_geometry__vcell; // microliter
        const double var_cell_geometry__vss = 0.02 * var_cell_geometry__vcell; // microliter
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_IK1__GK1 = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[12]) : ((var_environment__celltype == 2.0) ? (1.3 * mParameters[12]) : (mParameters[12]))); // milliS_per_microF
        const double var_IKb__GKb = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[9]) : (mParameters[9])); // milliS_per_microF
        const double var_IKr__GKr = ((var_environment__celltype == 1.0) ? (1.3 * mParameters[14]) : ((var_environment__celltype == 2.0) ? (0.80000000000000004 * mParameters[14]) : (mParameters[14]))); // milliS_per_microF
        const double var_IKs__GKs = ((var_environment__celltype == 1.0) ? (1.3999999999999999 * mParameters[15]) : (mParameters[15])); // milliS_per_microF
        const double var_INaK__Pnak = ((var_environment__celltype == 1.0) ? (0.90000000000000002 * mParameters[17]) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * mParameters[17]) : (mParameters[17]))); // milliS_per_microF
        const double var_Ito__Gto = (((var_environment__celltype == 1.0) || (var_environment__celltype == 2.0)) ? (4.0 * mParameters[18]) : (mParameters[18])); // milliS_per_microF
        const double var_IK1__GK1_total = sqrt(mParameters[3]) * var_IK1__GK1; // milliS_per_microF
        const double var_IKr__GKr_total = 0.43033148291193518 * sqrt(mParameters[3]) * var_IKr__GKr; // milliS_per_microF
        const double var_IKs__KsCa = 1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__cai), 1.3999999999999999)); // dimensionless
        const double var_IKs__GKs_total = var_IKs__GKs * var_IKs__KsCa; // milliS_per_microF
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_Ito__fItop = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_intracellular_ions__cm = 1.0; // microF_per_centimeter_squared
        const double var_diff__JdiffK = 0.5 * var_chaste_interface__intracellular_ions__kss - 0.5 * var_chaste_interface__intracellular_ions__ki; // millimolar_per_millisecond
        const double var_INaK__P = var_INaK__eP / (1.0 + var_INaK__H / var_INaK__Khp + var_chaste_interface__intracellular_ions__nai / var_INaK__Knap + var_chaste_interface__intracellular_ions__ki / var_INaK__Kxkur); // dimensionless
        const double var_INaK__b3 = var_INaK__H * var_INaK__P * var_INaK__k3m / (1.0 + var_INaK__MgATP / var_INaK__Kmgatp); // dimensionless
        const double var_membrane__Istim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_membrane__Istim = var_membrane__Istim_converted / HeartConfig::Instance()->GetCapacitance(); // microA_per_microF
        const double var_IK1__rk1 = 1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * mParameters[3])); // millisecond
        const double var_IKb__xkb = 1 / (1.0 + exp(0.78953107960741553 - 0.054525627044711013 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrf = 1 / (1.0 + exp(1.4344412457471867 + 0.026171159382360639 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrs = 1.0 - var_IKr__Axrf; // dimensionless
        const double var_IKr__rkr = 1 / ((1.0 + exp(0.73333333333333328 + 0.013333333333333334 * var_chaste_interface__membrane__v)) * (1.0 + exp(-0.33333333333333331 + 0.033333333333333333 * var_chaste_interface__membrane__v))); // dimensionless
        const double var_IKr__xr = var_IKr__Axrf * var_chaste_interface__IKr__xrf + var_IKr__Axrs * var_chaste_interface__IKr__xrs; // dimensionless
        const double var_Ito__AiF = 1 / (1.0 + exp(-1.4126984126984128 + 0.0066137566137566143 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__AiS = 1.0 - var_Ito__AiF; // dimensionless
        const double var_Ito__i = var_Ito__AiF * var_chaste_interface__Ito__iF + var_Ito__AiS * var_chaste_interface__Ito__iS; // dimensionless
        const double var_Ito__ip = var_Ito__AiF * var_chaste_interface__Ito__iFp + var_Ito__AiS * var_chaste_interface__Ito__iSp; // dimensionless
        const double var_INaK__Knai = var_INaK__Knai0 * exp(0.33333333333333331 * var_INaK__delta * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // millimolar
        const double var_INaK__Knao = var_INaK__Knao0 * exp(0.33333333333333331 * (1.0 - var_INaK__delta) * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // millimolar
        const double var_INaK__a1 = pow(var_chaste_interface__intracellular_ions__nai, 3) * var_INaK__k1p / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = pow(mParameters[3], 2) * var_INaK__k3p / ((-1.0 + pow((1.0 + mParameters[3] / var_INaK__Kko), 2) + pow((1.0 + mParameters[4] / var_INaK__Knao), 3)) * pow(var_INaK__Kko, 2)); // dimensionless
        const double var_INaK__b2 = pow(mParameters[4], 3) * var_INaK__k2m / ((-1.0 + pow((1.0 + mParameters[3] / var_INaK__Kko), 2) + pow((1.0 + mParameters[4] / var_INaK__Knao), 3)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = pow(var_chaste_interface__intracellular_ions__ki, 2) * var_INaK__k4m / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Kki, 2)); // dimensionless
        const double var_INaK__x1 = var_INaK__a1 * var_INaK__a2 * var_INaK__a4 + var_INaK__a1 * var_INaK__a2 * var_INaK__b3 + var_INaK__a2 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = var_INaK__a1 * var_INaK__a2 * var_INaK__a3 + var_INaK__a2 * var_INaK__a3 * var_INaK__b4 + var_INaK__a3 * var_INaK__b1 * var_INaK__b4 + var_INaK__b1 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = var_INaK__a2 * var_INaK__a3 * var_INaK__a4 + var_INaK__a3 * var_INaK__a4 * var_INaK__b1 + var_INaK__a4 * var_INaK__b1 * var_INaK__b2 + var_INaK__b1 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = var_INaK__a1 * var_INaK__a3 * var_INaK__a4 + var_INaK__a1 * var_INaK__a4 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__E1 = var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E2 = var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E3 = var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E4 = var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__JnakK = 2.0 * var_INaK__E4 * var_INaK__b1 - 2.0 * var_INaK__E3 * var_INaK__a1; // millimolar_per_millisecond
        const double var_INaK__JnakNa = 3.0 * var_INaK__E1 * var_INaK__a3 - 3.0 * var_INaK__E2 * var_INaK__b3; // millimolar_per_millisecond
        const double var_physical_constants__zk = 1.0; // dimensionless
        const double var_physical_constants__zna = 1.0; // dimensionless
        const double var_INaK__INaK = (var_INaK__JnakK * var_physical_constants__zk + var_INaK__JnakNa * var_physical_constants__zna) * var_INaK__Pnak; // microA_per_microF
        const double var_reversal_potentials__EK = mParameters[6] * mParameters[19] * log(mParameters[3] / var_chaste_interface__intracellular_ions__ki) / mParameters[5]; // millivolt
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IK1__GK1_total * var_IK1__rk1 * var_chaste_interface__IK1__xk1; // microA_per_microF
        const double var_IKb__IKb = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKb__GKb * var_IKb__xkb; // microA_per_microF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKr__GKr_total * var_IKr__rkr * var_IKr__xr; // microA_per_microF
        const double var_Ito__Ito = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * ((1.0 - var_Ito__fItop) * var_chaste_interface__Ito__a * var_Ito__i + var_chaste_interface__Ito__ap * var_Ito__fItop * var_Ito__ip) * var_Ito__Gto; // microA_per_microF
        const double var_reversal_potentials__PKNa = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = mParameters[6] * mParameters[19] * log((mParameters[4] * var_reversal_potentials__PKNa + mParameters[3]) / (var_chaste_interface__intracellular_ions__nai * var_reversal_potentials__PKNa + var_chaste_interface__intracellular_ions__ki)) / mParameters[5]; // millivolt
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__v) * var_IKs__GKs_total * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__ki = var_cell_geometry__vss * var_diff__JdiffK / var_cell_geometry__vmyo + (-var_IK1__IK1 - var_IKb__IKb - var_IKr__IKr - var_IKs__IKs - var_Ito__Ito - var_membrane__Istim + 2.0 * var_INaK__INaK) * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vmyo * mParameters[5]); // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__ki;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            double var_chaste_interface__intracellular_ions__cai = rY[1];
            // Units: millimolar; Initial value: 0.0001
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__intracellular_ions__nai = rY[3];
            // Units: millimolar; Initial value: 7.0
            double var_chaste_interface__intracellular_ions__ki = rY[5];
            // Units: millimolar; Initial value: 145.0
            double var_chaste_interface__intracellular_ions__cass = rY[7];
            // Units: millimolar; Initial value: 0.0001
            double var_chaste_interface__Ito__a = rY[19];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__Ito__iF = rY[20];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__Ito__iS = rY[21];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__Ito__ap = rY[22];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__Ito__iFp = rY[23];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__Ito__iSp = rY[24];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__IKr__xrf = rY[34];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__IKr__xrs = rY[35];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__IKs__xs1 = rY[36];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__IKs__xs2 = rY[37];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__IK1__xk1 = rY[38];
            // Units: dimensionless; Initial value: 1.0
            

            const double var_x0 = 1 / (mParameters[6] * mParameters[19]);
            const double var_x1 = var_x0 * mParameters[5];
            const double var_x2 = var_x1 * var_chaste_interface__membrane__v;
            const double var_x3 = exp(0.38500000000000001 * var_x2);
            const double var_x4 = mParameters[4] / var_x3;
            const double var_x5 = 1.0 + 0.035997120230381568 * var_x4;
            const double var_x6 = pow(var_x5, 3);
            const double var_x7 = pow((0.35820000000000002 + mParameters[3]), 2);
            const double var_x8 = 1 / (-1.0 + var_x6 + 7.7937924625297832 * var_x7);
            const double var_x9 = pow(mParameters[3], 2);
            const double var_x10 = var_x8 * var_x9;
            const double var_x11 = pow(var_chaste_interface__intracellular_ions__nai, 3);
            const double var_x12 = exp(-0.051666666666666666 * var_x2);
            const double var_x13 = 1 / var_x12;
            const double var_x14 = var_x13 * var_chaste_interface__intracellular_ions__nai;
            const double var_x15 = 1.0 + 0.11021712774165104 * var_x14;
            const double var_x16 = pow(var_x15, 3);
            const double var_x17 = pow((0.5 + var_chaste_interface__intracellular_ions__ki), 2);
            const double var_x18 = 1 / (-1.0 + var_x16 + 4.0 * var_x17);
            const double var_x19 = pow(var_x12, (-3));
            const double var_x20 = var_x18 * var_x19;
            const double var_x21 = var_x11 * var_x20;
            const double var_x22 = var_x10 * var_x21;
            const double var_x24 = pow(mParameters[4], 3);
            const double var_x25 = var_x24 * var_x8 / pow(var_x3, 3);
            const double var_x26 = var_x21 * var_x25;
            const double var_x27 = 1.4929407925401197 * var_x26;
            const double var_x31 = pow((-0.25 + var_x17 + 0.25 * var_x16), (-2));
            const double var_x43 = 1 / (1.5889281507656066 + 0.0034246575342465752 * var_chaste_interface__intracellular_ions__ki + 0.004464285714285714 * var_chaste_interface__intracellular_ions__nai);
            const double var_x44 = var_x21 * var_x43;
            const double var_x52 = var_x25 * var_x43;
            const double var_x54 = pow(var_chaste_interface__intracellular_ions__ki, 2);
            const double var_x55 = var_x18 * var_x54;
            const double var_x56 = var_x43 * var_x55;
            const double var_x57 = var_x25 * var_x56;
            const double var_x63 = var_x31 * var_x54;
            const double var_x69 = var_x10 * var_x55;
            const double var_x70 = var_x25 * var_x55;
            const double var_x71 = 2.6817254812739919 * var_x70 + 1648931648.7518551 * var_x69;
            const double var_x72 = 6585420658.1002293 * var_x10 + 9.6722701128385645e-12 * var_x52 + 10.71014095526842 * var_x25;
            const double var_x73 = var_x25 * var_x44;
            const double var_x74 = var_x27 + 1.348266719199441e-12 * var_x73;
            const double var_x75 = 6.3450816326903207e-5 * var_x56 + 5.041496472709802e-7 * var_x44 + 558246.7943749798 * var_x21;
            const double var_x76 = 1 / (var_x71 + var_x72 + var_x74 + var_x75 + 3.3937789869608994e-10 * var_x57 + 24953131.661984976 * var_x22);
            const double var_x86 = var_x43 * var_x76;
            const double var_x99 = pow((var_x10 + 0.25039124064514068 * var_x69 + 7.6555420442407695e-17 * var_x44 + 8.4770104046173956e-5 * var_x21 + 2.0473509426327076e-22 * var_x73 + 0.0037891477184972245 * var_x22 + 9.6350437764149725e-15 * var_x56 + 4.0722159152815902e-10 * var_x70 + 1.4687399051632995e-21 * var_x52 + 1.6263412029867345e-9 * var_x25 + 5.1534733514501733e-20 * var_x57 + 2.2670393738686469e-10 * var_x26), (-2));
            const double var_x100 = 1.6968894934804497e-10 * var_x57;
            const double var_x101 = var_x99 * (var_x100 + var_x74 + 12023111.890251627 * var_x22);
            const double var_x104 = var_x71 + 12930019.771733347 * var_x22;
            const double var_x105 = var_x104 * var_x43;
            const double var_x108 = var_x10 * var_x76;
            const double var_x112 = var_x100 + var_x75;
            const double var_x113 = var_x10 * var_x112;
            const double var_x115 = var_x21 * var_x72;
            const double var_x118 = var_x72 * var_x76;
            const double var_x376 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x377 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x378 = 1.0 + 0.0015 * var_x377;
            const double var_x379 = 1 / var_x378;
            const double var_x380 = 0.050000000000000003 * var_x379;
            const double var_x381 = var_x376 * var_x380 + var_chaste_interface__CaMK__CaMKt;
            const double var_x382 = 1.0 + 0.14999999999999999 / var_x381;
            const double var_x383 = 1 / var_x382;
            const double var_x409 = var_x383;
            const double var_x410 = 1.0 - var_x409;
            const double var_x510 = exp(-1.4126984126984128 + 0.0066137566137566143 * var_chaste_interface__membrane__v);
            const double var_x511 = 1.0 + var_x510;
            const double var_x512 = 1 / var_x511;
            const double var_x513 = var_x512;
            const double var_x514 = 1.0 - var_x513;
            const double var_x515 = var_x513 * var_chaste_interface__Ito__iFp + var_x514 * var_chaste_interface__Ito__iSp;
            const double var_x516 = var_x515 * var_chaste_interface__Ito__ap;
            const double var_x517 = 4.0 * var_x383;
            const double var_x518 = var_x513 * var_chaste_interface__Ito__iF + var_x514 * var_chaste_interface__Ito__iS;
            const double var_x519 = var_x518 * var_chaste_interface__Ito__a;
            const double var_x520 = 4.0 * var_x410;
            const double var_x521 = (-var_x516 * var_x517 - var_x519 * var_x520) * mParameters[18];
            const double var_x522 = exp(0.78953107960741553 - 0.054525627044711013 * var_chaste_interface__membrane__v);
            const double var_x523 = 1.0 + var_x522;
            const double var_x524 = 0.59999999999999998 * mParameters[9] / var_x523;
            const double var_x528 = 1 / var_chaste_interface__intracellular_ions__ki;
            const double var_x529 = 1 / mParameters[5];
            const double var_x530 = var_x529 * mParameters[6] * mParameters[19];
            const double var_x533 = 1 / var_chaste_interface__intracellular_ions__cai;
            const double var_x534 = pow(var_x533, 1.3999999999999999);
            const double var_x535 = 1.0 + 6.4818210260626455e-7 * var_x534;
            const double var_x536 = -1.3999999999999999 - 0.83999999999999997 / var_x535;
            const double var_x537 = var_x536 * mParameters[15] * var_chaste_interface__IKs__xs2;
            const double var_x538 = var_x537 * var_chaste_interface__IKs__xs1;
            const double var_x539 = exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * mParameters[3]);
            const double var_x540 = 1.0 + var_x539;
            const double var_x541 = sqrt(mParameters[3]);
            const double var_x542 = var_x541 * mParameters[12] / var_x540;
            const double var_x543 = 1.2 * var_x542;
            const double var_x544 = var_x543 * var_chaste_interface__IK1__xk1;
            const double var_x545 = exp(0.73333333333333328 + 0.013333333333333334 * var_chaste_interface__membrane__v);
            const double var_x546 = 1.0 + var_x545;
            const double var_x547 = 1 / var_x546;
            const double var_x548 = exp(1.4344412457471867 + 0.026171159382360639 * var_chaste_interface__membrane__v);
            const double var_x549 = 1.0 + var_x548;
            const double var_x550 = 1 / var_x549;
            const double var_x551 = var_x550;
            const double var_x552 = 1.0 - var_x551;
            const double var_x553 = var_x551 * var_chaste_interface__IKr__xrf + var_x552 * var_chaste_interface__IKr__xrs;
            const double var_x554 = var_x541 * var_x547 * var_x553 * mParameters[14];
            const double var_x555 = exp(-0.33333333333333331 + 0.033333333333333333 * var_chaste_interface__membrane__v);
            const double var_x556 = 1.0 + var_x555;
            const double var_x557 = 1 / var_x556;
            const double var_x558 = 0.55943092778551573 * var_x557;
            const double var_x559 = var_x554 * var_x558;
            const double var_x580 = 1 / (0.018329999999999999 * var_chaste_interface__intracellular_ions__nai + var_chaste_interface__intracellular_ions__ki);
            const double var_x610 = var_x530 * var_x538 * var_x580;
            const double var_x615 = var_x11 * var_x31;
            const double var_x619 = pow((1 + 0.0028096208831939005 * var_chaste_interface__intracellular_ions__nai + 0.0021553256090254577 * var_chaste_interface__intracellular_ions__ki), (-2));
            const double var_x620 = var_x21 * var_x619;
            const double var_x621 = var_x25 * var_x620;
            const double var_x625 = var_x55 * var_x619;
            const double var_x626 = var_x25 * var_x625;
            const double var_x637 = var_x25 * var_x619;
            const double var_x643 = var_x619 * var_x76;
            const double var_x644 = var_x104 * var_x643;
            const double var_x651 = var_x26 * var_x643;
            const double var_x740 = -4.0 - 8.0 * var_chaste_interface__intracellular_ions__ki;
            const double var_x741 = var_x19 * var_x615;
            const double var_x742 = var_x740 * var_x741;
            const double var_x743 = var_x10 * var_x742;
            const double var_x744 = 0.09330879953375748 * var_x25 * var_x742;
            const double var_x745 = 1.8288767722361083e-15 * var_x621;
            const double var_x746 = 8.4266669949965062e-14 * var_x52 * var_x742;
            const double var_x747 = var_x18 * var_chaste_interface__intracellular_ions__ki;
            const double var_x748 = var_x43 * var_x747;
            const double var_x749 = var_x25 * var_x748;
            const double var_x750 = var_x63 * var_x740;
            const double var_x751 = var_x52 * var_x750;
            const double var_x752 = 1.0605559334252811e-11 * var_x751 + 3.3937789869608994e-10 * var_x749 - 2.3017714043409702e-13 * var_x626;
            const double var_x753 = var_x744 + var_x746 + var_x752 - var_x745 + 751444.4931407267 * var_x743;
            const double var_x754 = 3297863297.5037103 * var_x10 * var_x747;
            const double var_x755 = 5.3634509625479838 * var_x25 * var_x747;
            const double var_x756 = 103058228.04699095 * var_x10 * var_x750;
            const double var_x757 = 0.16760784257962449 * var_x25 * var_x750;
            const double var_x758 = var_x754 + var_x755 + var_x756 + var_x757 + 808126.23573333421 * var_x743;
            const double var_x759 = 8.6068818956382799e-8 * var_x625;
            const double var_x760 = 0.00012690163265380641 * var_x748;
            const double var_x761 = 6.8386140998302939e-10 * var_x620;
            const double var_x762 = var_x43 * var_x740;
            const double var_x763 = 3.9656760204314505e-6 * var_x63 * var_x762;
            const double var_x764 = 34890.424648436237 * var_x742;
            const double var_x765 = 3.1509352954436263e-8 * var_x741 * var_x762;
            const double var_x766 = var_x745 + var_x759 + var_x761 - var_x744 - var_x746 - var_x754 - var_x755 - var_x756 - var_x757 - var_x760 - var_x763 - var_x764 - var_x765 + 4.6035428086819405e-13 * var_x626 + 1.3120097004743531e-14 * var_x637 - 2.1211118668505621e-11 * var_x751 - 6.7875579739217989e-10 * var_x749 - 1559570.728874061 * var_x743;
            const double var_x767 = var_x752 + var_x760 + var_x763 + var_x764 + var_x765 - var_x759 - var_x761;
            const double var_x768 = var_x118 * var_x742;
            const double var_x769 = var_x528 * var_x530;
            const double var_x770 = var_x610 + var_x521 * var_x769 - var_x524 * var_x769 - var_x544 * var_x769 - var_x559 * var_x769;
            const double var_x902 = 5.9358288770053464 * var_x529;
            const double var_x913 = 32.832000000000001 * var_x76;
            const double var_x914 = 7.5705999179751327e-19 * var_x101;
            const double var_x915 = 3.1162180602924665e-9 * var_x86;
            const double var_x916 = 79922.22418625791 * var_x108;
            const double var_x917 = 7.1855629238678031e-29 * var_x105;
            const double var_x918 = 1.842894687709778e-15 * var_x113;
            const double var_x919 = 1.0553042661857941e-19 * var_x115;
            const double var_x920 = var_x917 * var_x99;
            const double var_x921 = var_x918 * var_x99;
            const double var_x922 = var_x919 * var_x99;
            
            partialF = -0.014705882352941176 + var_x902 * (var_x770 + (6.0045682186055913e-14 * var_x651 + 4.2270410939725255e-12 * var_x644 - 0.28603867298173646 * var_x768 + var_x753 * var_x913 + var_x766 * var_x914 + var_x766 * var_x921 + var_x767 * var_x916 - var_x758 * var_x915 - var_x766 * var_x920 - var_x766 * var_x922) * mParameters[17]);
        }
        else
        {
            const double y_save = rY[5];
            rY[5] += delta;
            const double temp = EvaluateYDerivative5(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[5])/delta;
            rY[5] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__ki = rY[5];
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__kss = rY[6];
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__nca = rY[33];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_ICaL__Aff = 0.59999999999999998; // dimensionless
        const double var_ICaL__Afs = 1.0 - var_ICaL__Aff; // dimensionless
        const double var_ICaL__f = var_ICaL__Aff * var_chaste_interface__ICaL__ff + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__fp = var_ICaL__Aff * var_chaste_interface__ICaL__ffp + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_cell_geometry__L = 0.01; // centimeter
        const double var_cell_geometry__rad = 0.0011000000000000001; // centimeter
        const double var_cell_geometry__Ageo = 6.2800000000000002 * pow(var_cell_geometry__rad, 2) + 6.2800000000000002 * var_cell_geometry__L * var_cell_geometry__rad; // centimeter_squared
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__Ageo; // centimeter_squared
        const double var_cell_geometry__vcell = 3140.0 * pow(var_cell_geometry__rad, 2) * var_cell_geometry__L; // microliter
        const double var_cell_geometry__vss = 0.02 * var_cell_geometry__vcell; // microliter
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[7]) : ((var_environment__celltype == 2.0) ? (2.5 * mParameters[7]) : (mParameters[7]))); // dimensionless
        const double var_ICaL__PCaK = 0.00035740000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaKp = 0.00035740000000000001 * var_ICaL__PCap; // dimensionless
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_intracellular_ions__cm = 1.0; // microF_per_centimeter_squared
        const double var_diff__JdiffK = 0.5 * var_chaste_interface__intracellular_ions__kss - 0.5 * var_chaste_interface__intracellular_ions__ki; // millimolar_per_millisecond
        const double var_ICaL__Afcaf = 0.29999999999999999 + 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_membrane__vffrt = pow(mParameters[5], 2) * var_chaste_interface__membrane__v / (mParameters[6] * mParameters[19]); // coulomb_per_mole
        const double var_membrane__vfrt = var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19]); // dimensionless
        const double var_ICaL__PhiCaK = (-0.75 * mParameters[3] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaK = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaK * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaKp * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double d_dt_chaste_interface_var_intracellular_ions__kss = -var_diff__JdiffK - var_ICaL__ICaK * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vss * mParameters[5]); // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__kss;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__intracellular_ions__cass = rY[7];
            // Units: millimolar; Initial value: 0.0001
            double var_chaste_interface__ICaL__d = rY[25];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__ICaL__ff = rY[26];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__fs = rY[27];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__fcaf = rY[28];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__fcas = rY[29];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__jca = rY[30];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__ffp = rY[31];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__fcafp = rY[32];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__nca = rY[33];
            // Units: dimensionless; Initial value: 0.0
            

            const double var_x0 = 1 / (mParameters[6] * mParameters[19]);
            const double var_x1 = var_x0 * mParameters[5];
            const double var_x2 = var_x1 * var_chaste_interface__membrane__v;
            const double var_x375 = mParameters[7] * var_chaste_interface__ICaL__d;
            const double var_x376 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x377 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x378 = 1.0 + 0.0015 * var_x377;
            const double var_x379 = 1 / var_x378;
            const double var_x380 = 0.050000000000000003 * var_x379;
            const double var_x381 = var_x376 * var_x380 + var_chaste_interface__CaMK__CaMKt;
            const double var_x382 = 1.0 + 0.14999999999999999 / var_x381;
            const double var_x383 = 1 / var_x382;
            const double var_x384 = 1.0 - var_chaste_interface__ICaL__nca;
            const double var_x385 = 0.40000000000000002 * var_chaste_interface__ICaL__fs;
            const double var_x386 = 0.59999999999999998 * var_chaste_interface__ICaL__ffp;
            const double var_x387 = 0.10000000000000001 * var_chaste_interface__membrane__v;
            const double var_x388 = exp(-1.0 + var_x387);
            const double var_x389 = 1.0 + var_x388;
            const double var_x390 = 0.59999999999999998 / var_x389;
            const double var_x391 = 0.29999999999999999 + var_x390;
            const double var_x392 = 0.69999999999999996 - var_x390;
            const double var_x393 = var_x392 * var_chaste_interface__ICaL__fcas;
            const double var_x394 = var_x393 + var_x391 * var_chaste_interface__ICaL__fcafp;
            const double var_x395 = var_x394 * var_chaste_interface__ICaL__jca;
            const double var_x396 = var_x384 * (var_x385 + var_x386) + var_x395 * var_chaste_interface__ICaL__nca;
            const double var_x397 = var_x383 * var_x396;
            const double var_x398 = var_x375 * var_x397;
            const double var_x399 = exp(var_x2);
            const double var_x402 = -1.0 + var_x399;
            const double var_x403 = 1 / var_x402;
            const double var_x404 = var_x0 * pow(mParameters[5], 2);
            const double var_x405 = var_x403 * var_x404;
            const double var_x409 = var_x383;
            const double var_x410 = 1.0 - var_x409;
            const double var_x411 = 0.59999999999999998 * var_chaste_interface__ICaL__ff;
            const double var_x412 = var_x393 + var_x391 * var_chaste_interface__ICaL__fcaf;
            const double var_x413 = var_x412 * var_chaste_interface__ICaL__jca;
            const double var_x414 = var_x384 * (var_x385 + var_x411) + var_x413 * var_chaste_interface__ICaL__nca;
            const double var_x415 = var_x410 * var_x414;
            const double var_x416 = var_x375 * var_x415;
            const double var_x419 = var_x398 * var_x399;
            const double var_x425 = var_x399 * var_x416;
            const double var_x430 = 0.00032165999999999998 * var_x425;
            const double var_x529 = 1 / mParameters[5];
            const double var_x737 = var_x405 * var_chaste_interface__membrane__v;
            const double var_x738 = var_x419 * var_x737;
            const double var_x771 = 0.00035382600000000001 * var_x738;
            const double var_x772 = var_x430 * var_x737;
            const double var_x908 = 201.81818181818181 * var_x529;
            
            partialF = -0.5 - var_x908 * (var_x771 + var_x772);
        }
        else
        {
            const double y_save = rY[6];
            rY[6] += delta;
            const double temp = EvaluateYDerivative6(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[6])/delta;
            rY[6] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__nass = rY[4];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__nca = rY[33];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ryr__Jrelnp = rY[39];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ryr__Jrelp = rY[40];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_ICaL__Aff = 0.59999999999999998; // dimensionless
        const double var_ICaL__Afs = 1.0 - var_ICaL__Aff; // dimensionless
        const double var_ICaL__f = var_ICaL__Aff * var_chaste_interface__ICaL__ff + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__fp = var_ICaL__Aff * var_chaste_interface__ICaL__ffp + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_INaCa_i__KmCaAct = 0.00014999999999999999; // millimolar
        const double var_INaCa_i__kasymm = 12.5; // dimensionless
        const double var_INaCa_i__kcaoff = 5000.0; // per_millisecond
        const double var_INaCa_i__k2_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__kcaon = 1500000.0; // per_millisecond
        const double var_INaCa_i__kna1 = 15.0; // per_millisecond
        const double var_INaCa_i__kna2 = 5.0; // per_millisecond
        const double var_INaCa_i__kna3 = 88.120000000000005; // per_millisecond
        const double var_INaCa_i__qca = 0.16700000000000001; // dimensionless
        const double var_INaCa_i__qna = 0.52239999999999998; // dimensionless
        const double var_INaCa_i__wca = 60000.0; // dimensionless
        const double var_INaCa_i__wna = 60000.0; // dimensionless
        const double var_INaCa_i__wnaca = 5000.0; // dimensionless
        const double var_cell_geometry__L = 0.01; // centimeter
        const double var_cell_geometry__rad = 0.0011000000000000001; // centimeter
        const double var_cell_geometry__Ageo = 6.2800000000000002 * pow(var_cell_geometry__rad, 2) + 6.2800000000000002 * var_cell_geometry__L * var_cell_geometry__rad; // centimeter_squared
        const double var_cell_geometry__Acap = 2.0 * var_cell_geometry__Ageo; // centimeter_squared
        const double var_cell_geometry__vcell = 3140.0 * pow(var_cell_geometry__rad, 2) * var_cell_geometry__L; // microliter
        const double var_cell_geometry__vjsr = 0.0047999999999999996 * var_cell_geometry__vcell; // microliter
        const double var_cell_geometry__vss = 0.02 * var_cell_geometry__vcell; // microliter
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[7]) : ((var_environment__celltype == 2.0) ? (2.5 * mParameters[7]) : (mParameters[7]))); // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * mParameters[16]) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * mParameters[16]) : (mParameters[16]))); // milliS_per_microF
        const double var_INaCa_i__h10_ss = 1.0 + (1.0 + mParameters[4] / var_INaCa_i__kna2) * mParameters[4] / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h11_ss = pow(mParameters[4], 2) / (var_INaCa_i__h10_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h12_ss = 1 / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__k1_ss = var_INaCa_i__h12_ss * var_INaCa_i__kcaon * mParameters[2]; // dimensionless
        const double var_intracellular_ions__BSLmax = 1.1240000000000001; // millimolar
        const double var_intracellular_ions__BSRmax = 0.047; // millimolar
        const double var_intracellular_ions__KmBSL = 0.0086999999999999994; // millimolar
        const double var_intracellular_ions__KmBSR = 0.00087000000000000001; // millimolar
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__allo_ss = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cass, 2)); // dimensionless
        const double var_diff__Jdiff = 5.0 * var_chaste_interface__intracellular_ions__cass - 5.0 * var_chaste_interface__intracellular_ions__cai; // millimolar_per_millisecond
        const double var_intracellular_ions__Bcass = 1 / (1.0 + var_intracellular_ions__BSLmax * var_intracellular_ions__KmBSL / pow((var_intracellular_ions__KmBSL + var_chaste_interface__intracellular_ions__cass), 2) + var_intracellular_ions__BSRmax * var_intracellular_ions__KmBSR / pow((var_intracellular_ions__KmBSR + var_chaste_interface__intracellular_ions__cass), 2)); // dimensionless
        const double var_intracellular_ions__cm = 1.0; // microF_per_centimeter_squared
        const double var_INaCa_i__h4_ss = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_ss = pow(var_chaste_interface__intracellular_ions__nass, 2) / (var_INaCa_i__h4_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_ss = 1 / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k6_ss = var_INaCa_i__h6_ss * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cass; // dimensionless
        const double var_ICaL__Afcaf = 0.29999999999999999 + 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_INaCa_i__hca = exp(var_INaCa_i__qca * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__hna = exp(var_INaCa_i__qna * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h2_ss = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / (var_INaCa_i__h1_ss * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h3_ss = 1 / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * mParameters[4] / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h8_ss = mParameters[4] / (var_INaCa_i__h7_ss * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h9_ss = 1 / var_INaCa_i__h7_ss; // dimensionless
        const double var_INaCa_i__k3p_ss = var_INaCa_i__h9_ss * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3pp_ss = var_INaCa_i__h8_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_ss = var_INaCa_i__k3p_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4p_ss = var_INaCa_i__h3_ss * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4pp_ss = var_INaCa_i__h2_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_ss = var_INaCa_i__k4p_ss + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_ss = var_INaCa_i__h2_ss * var_INaCa_i__h5_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_ss = var_INaCa_i__h11_ss * var_INaCa_i__h8_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__x1_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k5_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss; // dimensionless
        const double var_INaCa_i__x3_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss * var_INaCa_i__k5_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k8_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E3_ss = var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E4_ss = var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__JncxCa_ss = var_INaCa_i__E2_ss * var_INaCa_i__k2_ss - var_INaCa_i__E1_ss * var_INaCa_i__k1_ss; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_ss = var_INaCa_i__E3_ss * var_INaCa_i__k4pp_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss + 3.0 * var_INaCa_i__E4_ss * var_INaCa_i__k7_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss; // millimolar_per_millisecond
        const double var_membrane__vffrt = pow(mParameters[5], 2) * var_chaste_interface__membrane__v / (mParameters[6] * mParameters[19]); // coulomb_per_mole
        const double var_membrane__vfrt = var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19]); // dimensionless
        const double var_ICaL__PhiCaL = 4.0 * (-0.34100000000000003 * mParameters[2] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(2.0 * var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCa * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCap * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_physical_constants__zca = 2.0; // dimensionless
        const double var_physical_constants__zna = 1.0; // dimensionless
        const double var_INaCa_i__INaCa_ss = 0.20000000000000001 * (var_INaCa_i__JncxCa_ss * var_physical_constants__zca + var_INaCa_i__JncxNa_ss * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_ss; // microA_per_microF
        const double var_ryr__fJrelp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_ryr__Jrel = ((1.0 - var_ryr__fJrelp) * var_chaste_interface__ryr__Jrelnp + var_chaste_interface__ryr__Jrelp * var_ryr__fJrelp) * mParameters[0]; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cass = (-var_diff__Jdiff + var_cell_geometry__vjsr * var_ryr__Jrel / var_cell_geometry__vss + 0.5 * (-var_ICaL__ICaL + 2.0 * var_INaCa_i__INaCa_ss) * var_cell_geometry__Acap * var_intracellular_ions__cm / (var_cell_geometry__vss * mParameters[5])) * var_intracellular_ions__Bcass; // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__cass;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            double var_chaste_interface__intracellular_ions__cai = rY[1];
            // Units: millimolar; Initial value: 0.0001
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__intracellular_ions__nass = rY[4];
            // Units: millimolar; Initial value: 7.0
            double var_chaste_interface__intracellular_ions__cass = rY[7];
            // Units: millimolar; Initial value: 0.0001
            double var_chaste_interface__ICaL__d = rY[25];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__ICaL__ff = rY[26];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__fs = rY[27];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__fcaf = rY[28];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__fcas = rY[29];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__jca = rY[30];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__ffp = rY[31];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__fcafp = rY[32];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__ICaL__nca = rY[33];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__ryr__Jrelnp = rY[39];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__ryr__Jrelp = rY[40];
            // Units: dimensionless; Initial value: 0.0
            

            const double var_x0 = 1 / (mParameters[6] * mParameters[19]);
            const double var_x1 = var_x0 * mParameters[5];
            const double var_x2 = var_x1 * var_chaste_interface__membrane__v;
            const double var_x24 = pow(mParameters[4], 3);
            const double var_x121 = 1 / (13.5 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * mParameters[4]) * mParameters[4]);
            const double var_x122 = exp(0.52239999999999998 * var_x2);
            const double var_x123 = 1 / var_x122;
            const double var_x124 = 1.0 + 0.011348161597821153 * (1.0 + var_x123) * mParameters[4];
            const double var_x129 = 1 / var_x124;
            const double var_x130 = var_x123 * var_x129;
            const double var_x131 = var_x121 * var_x24;
            const double var_x132 = var_x130 * var_x131;
            const double var_x135 = 0.011348161597821153 + 0.011348161597821153 * var_x122;
            const double var_x136 = 1.0 + var_x135 * var_chaste_interface__intracellular_ions__nass;
            const double var_x137 = 1 / var_x136;
            const double var_x138 = 1 / exp(0.16700000000000001 * var_x2);
            const double var_x139 = var_x137 * var_x138;
            const double var_x140 = var_x122 * var_x137;
            const double var_x141 = 56.740807989105761 * var_x140;
            const double var_x142 = var_x141 * var_chaste_interface__intracellular_ions__nass;
            const double var_x143 = var_x142 + 60000.0 * var_x139;
            const double var_x144 = 1.0 + 0.066666666666666666 * (1.0 + 0.20000000000000001 * var_chaste_interface__intracellular_ions__nass) * var_chaste_interface__intracellular_ions__nass;
            const double var_x145 = 1 / var_x144;
            const double var_x146 = 1500000.0 * var_x145;
            const double var_x147 = var_x146 * var_chaste_interface__intracellular_ions__cass;
            const double var_x151 = var_x140 * var_chaste_interface__intracellular_ions__nass;
            const double var_x164 = var_x121 * mParameters[2];
            const double var_x165 = 1500000.0 * var_x164;
            const double var_x166 = var_x165 + 9.0785292782569211 * var_x132;
            const double var_x169 = pow(var_chaste_interface__intracellular_ions__nass, 3);
            const double var_x170 = var_x140 * var_x145;
            const double var_x171 = var_x169 * var_x170;
            const double var_x172 = var_x164 * var_x171;
            const double var_x175 = 5000.0 + var_x143;
            const double var_x176 = var_x172 * var_x175;
            const double var_x180 = var_x145 * var_x164;
            const double var_x185 = var_x143 * var_x166;
            const double var_x186 = 13617793.917385383 * var_x176 + var_x147 * var_x185;
            const double var_x187 = var_x147 + 9.0785292782569211 * var_x171;
            const double var_x188 = var_x143 * var_x187;
            const double var_x189 = var_x130 * mParameters[4];
            const double var_x190 = 56.740807989105761 * var_x189;
            const double var_x191 = var_x190 + 60000.0 * var_x129;
            const double var_x192 = 5000.0 + var_x191;
            const double var_x193 = var_x171 * var_x192;
            const double var_x194 = 5000.0 * var_x188 + 45392.646391284608 * var_x193;
            const double var_x195 = var_x187 * var_x191;
            const double var_x196 = var_x132 * var_x192;
            const double var_x197 = var_x145 * var_x196;
            const double var_x198 = var_x197 * var_chaste_interface__intracellular_ions__cass;
            const double var_x199 = 13617793.917385383 * var_x198 + var_x165 * var_x195;
            const double var_x200 = var_x166 * var_x191;
            const double var_x201 = 5000.0 * var_x200;
            const double var_x202 = var_x132 * var_x175;
            const double var_x203 = var_x201 + 45392.646391284608 * var_x202;
            const double var_x204 = 1 / (var_x186 + var_x194 + var_x199 + var_x203);
            const double var_x205 = 10000.0 * var_x204;
            const double var_x206 = 0.00036716666666666668 * var_x200;
            const double var_x207 = var_x145 * var_x185;
            const double var_x208 = 0.11015000000000001 * var_x164;
            const double var_x209 = pow((var_x176 + var_x198 + var_x206 + 0.0033333333333333331 * var_x193 + 0.0033333333333333331 * var_x202 + 0.00036716666666666668 * var_x188 + var_x195 * var_x208 + 0.11015000000000001 * var_x207 * var_chaste_interface__intracellular_ions__cass), (-2));
            const double var_x215 = 283704.03994552878 * var_x140;
            const double var_x216 = 300000000.0 * var_x139 + var_x215 * var_chaste_interface__intracellular_ions__nass;
            const double var_x235 = var_x132 * var_x145;
            const double var_x253 = 5.3924544444444452e-11 * var_x186;
            const double var_x254 = 3000000.0 * var_x164;
            const double var_x256 = var_x142 * var_x204;
            const double var_x257 = var_x190 * var_x204;
            const double var_x258 = 1.6177363333333335e-8 * var_x164;
            const double var_x261 = var_x151 * var_x199;
            const double var_x263 = 27.235587834770765 * var_x204;
            const double var_x264 = var_x171 * var_x263;
            const double var_x265 = var_x186 * var_x189;
            const double var_x267 = 1.4686666666666667e-13 * var_x171 * var_x203;
            const double var_x268 = 1.4686666666666667e-13 * var_x132;
            const double var_x270 = var_x199 * var_x204;
            const double var_x277 = pow(var_chaste_interface__intracellular_ions__cass, (-2));
            const double var_x278 = 1.0 + 2.2499999999999996e-8 * var_x277;
            const double var_x279 = mParameters[16] / var_x278;
            const double var_x375 = mParameters[7] * var_chaste_interface__ICaL__d;
            const double var_x376 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x377 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x378 = 1.0 + 0.0015 * var_x377;
            const double var_x379 = 1 / var_x378;
            const double var_x380 = 0.050000000000000003 * var_x379;
            const double var_x381 = var_x376 * var_x380 + var_chaste_interface__CaMK__CaMKt;
            const double var_x382 = 1.0 + 0.14999999999999999 / var_x381;
            const double var_x383 = 1 / var_x382;
            const double var_x384 = 1.0 - var_chaste_interface__ICaL__nca;
            const double var_x385 = 0.40000000000000002 * var_chaste_interface__ICaL__fs;
            const double var_x386 = 0.59999999999999998 * var_chaste_interface__ICaL__ffp;
            const double var_x387 = 0.10000000000000001 * var_chaste_interface__membrane__v;
            const double var_x388 = exp(-1.0 + var_x387);
            const double var_x389 = 1.0 + var_x388;
            const double var_x390 = 0.59999999999999998 / var_x389;
            const double var_x391 = 0.29999999999999999 + var_x390;
            const double var_x392 = 0.69999999999999996 - var_x390;
            const double var_x393 = var_x392 * var_chaste_interface__ICaL__fcas;
            const double var_x394 = var_x393 + var_x391 * var_chaste_interface__ICaL__fcafp;
            const double var_x395 = var_x394 * var_chaste_interface__ICaL__jca;
            const double var_x396 = var_x384 * (var_x385 + var_x386) + var_x395 * var_chaste_interface__ICaL__nca;
            const double var_x397 = var_x383 * var_x396;
            const double var_x398 = var_x375 * var_x397;
            const double var_x404 = var_x0 * pow(mParameters[5], 2);
            const double var_x409 = var_x383;
            const double var_x410 = 1.0 - var_x409;
            const double var_x411 = 0.59999999999999998 * var_chaste_interface__ICaL__ff;
            const double var_x412 = var_x393 + var_x391 * var_chaste_interface__ICaL__fcaf;
            const double var_x413 = var_x412 * var_chaste_interface__ICaL__jca;
            const double var_x414 = var_x384 * (var_x385 + var_x411) + var_x413 * var_chaste_interface__ICaL__nca;
            const double var_x415 = var_x410 * var_x414;
            const double var_x446 = -0.34100000000000003 * mParameters[2];
            const double var_x447 = exp(2.0 * var_x2);
            const double var_x450 = -1.0 + var_x447;
            const double var_x451 = 1 / var_x450;
            const double var_x452 = var_x404 * var_x451;
            const double var_x488 = var_x447 * var_chaste_interface__intracellular_ions__cass;
            const double var_x489 = var_x446 + var_x488;
            const double var_x490 = var_x452 * var_x489;
            const double var_x491 = var_x375 * var_x490;
            const double var_x492 = 4.7999999999999998 * var_x415;
            const double var_x493 = var_x491 * var_x492;
            const double var_x494 = 5.2800000000000002 * var_x397;
            const double var_x495 = var_x491 * var_x494;
            const double var_x504 = var_x491 * var_chaste_interface__membrane__v;
            const double var_x529 = 1 / mParameters[5];
            const double var_x565 = 2250000000000.0 * var_x191;
            const double var_x576 = 85111211.983658642 * var_x189;
            const double var_x587 = var_x447 * var_chaste_interface__membrane__v;
            const double var_x589 = 1 / (pow(var_x381, 2) * pow(var_x382, 2));
            const double var_x727 = var_x209 * var_x253;
            const double var_x729 = var_x204 * var_x254;
            const double var_x731 = var_x194 * var_x258;
            const double var_x733 = var_x132 * var_x263;
            const double var_x735 = var_x194 * var_x268;
            const double var_x773 = var_x277 * var_x376 / pow(var_x378, 2);
            const double var_x774 = var_x589 * var_x773;
            const double var_x777 = var_x180 * var_x565;
            const double var_x778 = 13617793.917385383 * var_x197;
            const double var_x779 = -var_x777 - var_x778 - var_x146 * var_x185 - var_x146 * var_x216;
            const double var_x780 = var_x204 * var_x207;
            const double var_x781 = var_x204 * var_x216;
            const double var_x782 = var_x209 * var_x779;
            const double var_x783 = 3.0597222222222222e-13 * var_x782;
            const double var_x784 = 15000000000.0 * var_x780 + var_x256 * (var_x777 + var_x778) + var_x261 * var_x783 + var_x267 * var_x782 + var_x727 * var_x779 - var_x265 * var_x783 - var_x576 * var_x780 - var_x731 * var_x782 - var_x735 * var_x782 - 4500000000000.0 * var_x180 * var_x781 - 40853381.752156146 * var_x235 * var_x781;
            const double var_x785 = var_x142 * var_x270 + var_x186 * var_x205 + var_x203 * var_x264 - var_x186 * var_x257 - var_x194 * var_x729 - var_x194 * var_x733;
            const double var_x786 = var_x785 * mParameters[16] / (pow(var_x278, 2) * pow(var_chaste_interface__intracellular_ions__cass, 3));
            const double var_x787 = var_x414 * var_x774;
            const double var_x789 = var_x396 * var_x774;
            const double var_x795 = var_x452 * var_x587;
            const double var_x796 = var_x375 * var_x492 * var_x795;
            const double var_x797 = 5.2800000000000002 * var_x398 * var_x795;
            const double var_x798 = 5.3999999999999998e-5 * var_x504 * var_x787;
            const double var_x799 = 5.9400000000000007e-5 * var_x504 * var_x789;
            const double var_x800 = var_x798 - var_x796 - var_x797 - var_x799;
            const double var_x938 = 0.44000000000000006 * var_x279;
            const double var_x939 = 0.0086999999999999994 + var_chaste_interface__intracellular_ions__cass;
            const double var_x940 = 0.00087000000000000001 + var_chaste_interface__intracellular_ions__cass;
            const double var_x941 = 1.0 + 0.0097788000000000007 / pow(var_x939, 2) + 4.0890000000000003e-5 / pow(var_x940, 2);
            const double var_x942 = 1 / var_x941;
            const double var_x943 = 100.90909090909091 * var_x529;
            const double var_x946 = var_x942;
            const double var_x947 = 2.7e-6 * var_x774;
            const double var_x948 = var_x493 * var_chaste_interface__membrane__v;
            const double var_x949 = var_x495 * var_chaste_interface__membrane__v;
            const double var_x950 = (var_x409 * var_chaste_interface__ryr__Jrelp + var_x410 * var_chaste_interface__ryr__Jrelnp) * mParameters[0];
            
            partialF = var_x946 * (-5.0 + var_x943 * (var_x800 + 1.9799999999999999e-8 * var_x786 + var_x784 * var_x938) + (var_x947 * var_chaste_interface__ryr__Jrelp - var_x947 * var_chaste_interface__ryr__Jrelnp) * mParameters[0]) + (0.019557600000000001 / pow(var_x939, 3) + 8.1780000000000006e-5 / pow(var_x940, 3)) * (5.0 * var_chaste_interface__intracellular_ions__cai + 0.23999999999999996 * var_x950 - 5.0 * var_chaste_interface__intracellular_ions__cass + var_x943 * (-var_x948 - var_x949 + var_x785 * var_x938)) / pow(var_x941, 2);
        }
        else
        {
            const double y_save = rY[7];
            rY[7] += delta;
            const double temp = EvaluateYDerivative7(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[7])/delta;
            rY[7] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__intracellular_ions__cansr = rY[8];
        // Units: millimolar; Initial value: 1.2
        double var_chaste_interface__intracellular_ions__cajsr = rY[9];
        // Units: millimolar; Initial value: 1.2
        

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_cell_geometry__L = 0.01; // centimeter
        const double var_cell_geometry__rad = 0.0011000000000000001; // centimeter
        const double var_cell_geometry__vcell = 3140.0 * pow(var_cell_geometry__rad, 2) * var_cell_geometry__L; // microliter
        const double var_cell_geometry__vjsr = 0.0047999999999999996 * var_cell_geometry__vcell; // microliter
        const double var_cell_geometry__vnsr = 0.055199999999999999 * var_cell_geometry__vcell; // microliter
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_SERCA__upScale = ((var_environment__celltype == 1.0) ? (1.3) : (1.0)); // dimensionless
        const double var_SERCA__Jupnp = 0.0043750000000000004 * var_SERCA__upScale * var_chaste_interface__intracellular_ions__cai / (0.00092000000000000003 + var_chaste_interface__intracellular_ions__cai); // millimolar_per_millisecond
        const double var_SERCA__Jupp = 0.01203125 * var_SERCA__upScale * var_chaste_interface__intracellular_ions__cai / (0.00075000000000000002 + var_chaste_interface__intracellular_ions__cai); // millimolar_per_millisecond
        const double var_SERCA__Jleak = 0.00026249999999999998 * var_chaste_interface__intracellular_ions__cansr; // millimolar_per_millisecond
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_SERCA__fJupp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__Jup = (-var_SERCA__Jleak + (1.0 - var_SERCA__fJupp) * var_SERCA__Jupnp + var_SERCA__Jupp * var_SERCA__fJupp) * mParameters[1]; // millimolar_per_millisecond
        const double var_trans_flux__Jtr = 0.01 * var_chaste_interface__intracellular_ions__cansr - 0.01 * var_chaste_interface__intracellular_ions__cajsr; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cansr = -var_cell_geometry__vjsr * var_trans_flux__Jtr / var_cell_geometry__vnsr + var_SERCA__Jup; // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__cansr;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            
            partialF = -0.00086956521739130427 - 0.00026249999999999998 * mParameters[1];
        }
        else
        {
            const double y_save = rY[8];
            rY[8] += delta;
            const double temp = EvaluateYDerivative8(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[8])/delta;
            rY[8] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__intracellular_ions__cansr = rY[8];
        // Units: millimolar; Initial value: 1.2
        double var_chaste_interface__intracellular_ions__cajsr = rY[9];
        // Units: millimolar; Initial value: 1.2
        double var_chaste_interface__ryr__Jrelnp = rY[39];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ryr__Jrelp = rY[40];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_intracellular_ions__csqnmax = 10.0; // millimolar
        const double var_intracellular_ions__kmcsqn = 0.80000000000000004; // millimolar
        const double var_intracellular_ions__Bcajsr = 1 / (1.0 + var_intracellular_ions__csqnmax * var_intracellular_ions__kmcsqn / pow((var_chaste_interface__intracellular_ions__cajsr + var_intracellular_ions__kmcsqn), 2)); // dimensionless
        const double var_ryr__fJrelp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_ryr__Jrel = ((1.0 - var_ryr__fJrelp) * var_chaste_interface__ryr__Jrelnp + var_chaste_interface__ryr__Jrelp * var_ryr__fJrelp) * mParameters[0]; // millimolar_per_millisecond
        const double var_trans_flux__Jtr = 0.01 * var_chaste_interface__intracellular_ions__cansr - 0.01 * var_chaste_interface__intracellular_ions__cajsr; // millimolar_per_millisecond
        const double d_dt_chaste_interface_var_intracellular_ions__cajsr = (-var_ryr__Jrel + var_trans_flux__Jtr) * var_intracellular_ions__Bcajsr; // millimolar / millisecond

        return d_dt_chaste_interface_var_intracellular_ions__cajsr;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__CaMK__CaMKt = rY[2];
            // Units: millimolar; Initial value: 0.0
            double var_chaste_interface__intracellular_ions__cass = rY[7];
            // Units: millimolar; Initial value: 0.0001
            double var_chaste_interface__intracellular_ions__cansr = rY[8];
            // Units: millimolar; Initial value: 1.2
            double var_chaste_interface__intracellular_ions__cajsr = rY[9];
            // Units: millimolar; Initial value: 1.2
            double var_chaste_interface__ryr__Jrelnp = rY[39];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__ryr__Jrelp = rY[40];
            // Units: dimensionless; Initial value: 0.0
            

            const double var_x376 = 1.0 - var_chaste_interface__CaMK__CaMKt;
            const double var_x377 = 1 / var_chaste_interface__intracellular_ions__cass;
            const double var_x378 = 1.0 + 0.0015 * var_x377;
            const double var_x379 = 1 / var_x378;
            const double var_x380 = 0.050000000000000003 * var_x379;
            const double var_x381 = var_x376 * var_x380 + var_chaste_interface__CaMK__CaMKt;
            const double var_x382 = 1.0 + 0.14999999999999999 / var_x381;
            const double var_x383 = 1 / var_x382;
            const double var_x409 = var_x383;
            const double var_x410 = 1.0 - var_x409;
            const double var_x950 = (var_x409 * var_chaste_interface__ryr__Jrelp + var_x410 * var_chaste_interface__ryr__Jrelnp) * mParameters[0];
            const double var_x955 = 0.80000000000000004 + var_chaste_interface__intracellular_ions__cajsr;
            const double var_x956 = pow(var_x955, (-2));
            const double var_x957 = 1 / (1.0 + 8.0 * var_x956);
            const double var_x960 = 0.01 * var_x957;
            
            partialF = -var_x960 + 0.25 * (-var_x950 + 0.01 * var_chaste_interface__intracellular_ions__cansr - 0.01 * var_chaste_interface__intracellular_ions__cajsr) / (pow(var_x955, 3) * pow((0.125 + var_x956), 2));
        }
        else
        {
            const double y_save = rY[9];
            rY[9] += delta;
            const double temp = EvaluateYDerivative9(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[9])/delta;
            rY[9] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__INa__m = rY[10];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_INa__mssV1 = 39.57; // millivolt
        const double var_INa__mssV2 = 9.8710000000000004; // millivolt
        const double var_INa__mtD1 = 6.7649999999999997; // dimensionless
        const double var_INa__mtD2 = 8.5519999999999996; // dimensionless
        const double var_INa__mtV1 = 11.640000000000001; // millivolt
        const double var_INa__mtV2 = 34.770000000000003; // millivolt
        const double var_INa__mtV3 = 77.420000000000002; // millivolt
        const double var_INa__mtV4 = 5.9550000000000001; // millivolt
        const double var_INa__mss = 1 / (1.0 + exp((-var_INa__mssV1 - var_chaste_interface__membrane__v) / var_INa__mssV2)); // dimensionless
        const double var_INa__tm = 1 / (var_INa__mtD1 * exp((var_INa__mtV1 + var_chaste_interface__membrane__v) / var_INa__mtV2) + var_INa__mtD2 * exp((-var_INa__mtV3 - var_chaste_interface__membrane__v) / var_INa__mtV4)); // millisecond
        const double d_dt_chaste_interface_var_INa__m = (-var_chaste_interface__INa__m + var_INa__mss) / var_INa__tm; // 1 / millisecond

        return d_dt_chaste_interface_var_INa__m;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x963 = exp(0.33477135461604829 + 0.02876042565429968 * var_chaste_interface__membrane__v);
            const double var_x964 = exp(-13.000839630562552 - 0.16792611251049538 * var_chaste_interface__membrane__v);
            const double var_x966 = 8.5519999999999996 * var_x964;
            const double var_x967 = 6.7649999999999997 * var_x963;
            const double var_x969 = -var_x966 - var_x967;
            
            partialF = var_x969;
        }
        else
        {
            const double y_save = rY[10];
            rY[10] += delta;
            const double temp = EvaluateYDerivative10(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[10])/delta;
            rY[10] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__INa__hf = rY[11];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_INa__hssV1 = 82.900000000000006; // millivolt
        const double var_INa__hssV2 = 6.0860000000000003; // millivolt
        const double var_INa__hss = 1 / (1.0 + exp((var_INa__hssV1 + var_chaste_interface__membrane__v) / var_INa__hssV2)); // dimensionless
        const double var_INa__thf = 1 / (6.149 * exp(0.025140601874691665 + 0.049333991119881598 * var_chaste_interface__membrane__v) + 1.432e-5 * exp(-0.19029435163086714 - 0.15910898965791567 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_INa__hf = (-var_chaste_interface__INa__hf + var_INa__hss) / var_INa__thf; // 1 / millisecond

        return d_dt_chaste_interface_var_INa__hf;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x974 = exp(0.025140601874691665 + 0.049333991119881598 * var_chaste_interface__membrane__v);
            const double var_x975 = exp(-0.19029435163086714 - 0.15910898965791567 * var_chaste_interface__membrane__v);
            const double var_x976 = 6.149 * var_x974;
            const double var_x977 = 1.432e-5 * var_x975;
            
            partialF = -var_x976 - var_x977;
        }
        else
        {
            const double y_save = rY[11];
            rY[11] += delta;
            const double temp = EvaluateYDerivative11(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[11])/delta;
            rY[11] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__INa__hs = rY[12];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_INa__hssV1 = 82.900000000000006; // millivolt
        const double var_INa__hssV2 = 6.0860000000000003; // millivolt
        const double var_INa__hss = 1 / (1.0 + exp((var_INa__hssV1 + var_chaste_interface__membrane__v) / var_INa__hssV2)); // dimensionless
        const double var_INa__ths = 1 / (0.0097940000000000006 * exp(-0.63992869875222813 - 0.035650623885918005 * var_chaste_interface__membrane__v) + 0.33429999999999999 * exp(0.10112954465231205 + 0.017649135192375574 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_INa__hs = (-var_chaste_interface__INa__hs + var_INa__hss) / var_INa__ths; // 1 / millisecond

        return d_dt_chaste_interface_var_INa__hs;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x979 = exp(0.10112954465231205 + 0.017649135192375574 * var_chaste_interface__membrane__v);
            const double var_x980 = exp(-0.63992869875222813 - 0.035650623885918005 * var_chaste_interface__membrane__v);
            const double var_x981 = 0.0097940000000000006 * var_x980;
            const double var_x982 = 0.33429999999999999 * var_x979;
            
            partialF = -var_x981 - var_x982;
        }
        else
        {
            const double y_save = rY[12];
            rY[12] += delta;
            const double temp = EvaluateYDerivative12(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[12])/delta;
            rY[12] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__INa__j = rY[13];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_INa__hssV1 = 82.900000000000006; // millivolt
        const double var_INa__hssV2 = 6.0860000000000003; // millivolt
        const double var_INa__hss = 1 / (1.0 + exp((var_INa__hssV1 + var_chaste_interface__membrane__v) / var_INa__hssV2)); // dimensionless
        const double var_INa__jss = var_INa__hss; // dimensionless
        const double var_INa__tj = 2.0379999999999998 + 1 / (0.30520000000000003 * exp(0.025854356306892066 + 0.02600780234070221 * var_chaste_interface__membrane__v) + 0.021360000000000001 * exp(-12.148291269170388 - 0.12075836251660427 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_INa__j = (-var_chaste_interface__INa__j + var_INa__jss) / var_INa__tj; // 1 / millisecond

        return d_dt_chaste_interface_var_INa__j;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x983 = exp(0.025854356306892066 + 0.02600780234070221 * var_chaste_interface__membrane__v);
            const double var_x984 = exp(-12.148291269170388 - 0.12075836251660427 * var_chaste_interface__membrane__v);
            const double var_x985 = 1 / (0.30520000000000003 * var_x983 + 0.021360000000000001 * var_x984);
            const double var_x986 = 1 / (2.0379999999999998 + var_x985);
            
            partialF = -var_x986;
        }
        else
        {
            const double y_save = rY[13];
            rY[13] += delta;
            const double temp = EvaluateYDerivative13(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[13])/delta;
            rY[13] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__INa__hsp = rY[14];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_INa__hssp = 1 / (1.0 + exp(14.640157739073281 + 0.16431153466973381 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_INa__ths = 1 / (0.0097940000000000006 * exp(-0.63992869875222813 - 0.035650623885918005 * var_chaste_interface__membrane__v) + 0.33429999999999999 * exp(0.10112954465231205 + 0.017649135192375574 * var_chaste_interface__membrane__v)); // millisecond
        const double var_INa__thsp = 3.0 * var_INa__ths; // millisecond
        const double d_dt_chaste_interface_var_INa__hsp = (-var_chaste_interface__INa__hsp + var_INa__hssp) / var_INa__thsp; // 1 / millisecond

        return d_dt_chaste_interface_var_INa__hsp;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x979 = exp(0.10112954465231205 + 0.017649135192375574 * var_chaste_interface__membrane__v);
            const double var_x980 = exp(-0.63992869875222813 - 0.035650623885918005 * var_chaste_interface__membrane__v);
            const double var_x990 = 0.11143333333333333 * var_x979;
            const double var_x991 = 0.003264666666666667 * var_x980;
            
            partialF = -var_x990 - var_x991;
        }
        else
        {
            const double y_save = rY[14];
            rY[14] += delta;
            const double temp = EvaluateYDerivative14(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[14])/delta;
            rY[14] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__INa__jp = rY[15];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_INa__hssV1 = 82.900000000000006; // millivolt
        const double var_INa__hssV2 = 6.0860000000000003; // millivolt
        const double var_INa__hss = 1 / (1.0 + exp((var_INa__hssV1 + var_chaste_interface__membrane__v) / var_INa__hssV2)); // dimensionless
        const double var_INa__jss = var_INa__hss; // dimensionless
        const double var_INa__tj = 2.0379999999999998 + 1 / (0.30520000000000003 * exp(0.025854356306892066 + 0.02600780234070221 * var_chaste_interface__membrane__v) + 0.021360000000000001 * exp(-12.148291269170388 - 0.12075836251660427 * var_chaste_interface__membrane__v)); // millisecond
        const double var_INa__tjp = 1.46 * var_INa__tj; // millisecond
        const double d_dt_chaste_interface_var_INa__jp = (-var_chaste_interface__INa__jp + var_INa__jss) / var_INa__tjp; // 1 / millisecond

        return d_dt_chaste_interface_var_INa__jp;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x983 = exp(0.025854356306892066 + 0.02600780234070221 * var_chaste_interface__membrane__v);
            const double var_x984 = exp(-12.148291269170388 - 0.12075836251660427 * var_chaste_interface__membrane__v);
            const double var_x985 = 1 / (0.30520000000000003 * var_x983 + 0.021360000000000001 * var_x984);
            const double var_x992 = 1 / (2.9754799999999997 + 1.46 * var_x985);
            
            partialF = -var_x992;
        }
        else
        {
            const double y_save = rY[15];
            rY[15] += delta;
            const double temp = EvaluateYDerivative15(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[15])/delta;
            rY[15] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__INaL__mL = rY[16];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_INa__mtD1 = 6.7649999999999997; // dimensionless
        const double var_INa__mtD2 = 8.5519999999999996; // dimensionless
        const double var_INa__mtV1 = 11.640000000000001; // millivolt
        const double var_INa__mtV2 = 34.770000000000003; // millivolt
        const double var_INa__mtV3 = 77.420000000000002; // millivolt
        const double var_INa__mtV4 = 5.9550000000000001; // millivolt
        const double var_INa__tm = 1 / (var_INa__mtD1 * exp((var_INa__mtV1 + var_chaste_interface__membrane__v) / var_INa__mtV2) + var_INa__mtD2 * exp((-var_INa__mtV3 - var_chaste_interface__membrane__v) / var_INa__mtV4)); // millisecond
        const double var_INaL__mLss = 1 / (1.0 + exp(-8.1401975683890573 - 0.18996960486322187 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_INaL__tmL = var_INa__tm; // millisecond
        const double d_dt_chaste_interface_var_INaL__mL = (-var_chaste_interface__INaL__mL + var_INaL__mLss) / var_INaL__tmL; // 1 / millisecond

        return d_dt_chaste_interface_var_INaL__mL;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x963 = exp(0.33477135461604829 + 0.02876042565429968 * var_chaste_interface__membrane__v);
            const double var_x964 = exp(-13.000839630562552 - 0.16792611251049538 * var_chaste_interface__membrane__v);
            const double var_x966 = 8.5519999999999996 * var_x964;
            const double var_x967 = 6.7649999999999997 * var_x963;
            const double var_x969 = -var_x966 - var_x967;
            
            partialF = var_x969;
        }
        else
        {
            const double y_save = rY[16];
            rY[16] += delta;
            const double temp = EvaluateYDerivative16(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[16])/delta;
            rY[16] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__INaL__hL = rY[17];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_INaL__thL = 200.0; // millisecond
        const double var_INaL__hLss = 1 / (1.0 + exp(11.700053418803417 + 0.13354700854700854 * var_chaste_interface__membrane__v)); // dimensionless
        const double d_dt_chaste_interface_var_INaL__hL = (-var_chaste_interface__INaL__hL + var_INaL__hLss) / var_INaL__thL; // 1 / millisecond

        return d_dt_chaste_interface_var_INaL__hL;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            
            partialF = -0.0050000000000000001;
        }
        else
        {
            const double y_save = rY[17];
            rY[17] += delta;
            const double temp = EvaluateYDerivative17(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[17])/delta;
            rY[17] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__INaL__hLp = rY[18];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_INaL__thL = 200.0; // millisecond
        const double var_INaL__thLp = 3.0 * var_INaL__thL; // millisecond
        const double var_INaL__hLssp = 1 / (1.0 + exp(12.528044871794872 + 0.13354700854700854 * var_chaste_interface__membrane__v)); // dimensionless
        const double d_dt_chaste_interface_var_INaL__hLp = (-var_chaste_interface__INaL__hLp + var_INaL__hLssp) / var_INaL__thLp; // 1 / millisecond

        return d_dt_chaste_interface_var_INaL__hLp;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            
            partialF = -0.0016666666666666668;
        }
        else
        {
            const double y_save = rY[18];
            rY[18] += delta;
            const double temp = EvaluateYDerivative18(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[18])/delta;
            rY[18] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__Ito__a = rY[19];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_Ito__ass = 1 / (1.0 + exp(0.96761133603238858 - 0.067476383265856948 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__ta = 1.0515000000000001 / (3.5 / (1.0 + exp(3.403513787634354 + 0.034035137876343539 * var_chaste_interface__membrane__v)) + 0.82719827942757873 / (1.0 + exp(0.62658348478969694 - 0.034035137876343539 * var_chaste_interface__membrane__v))); // millisecond
        const double d_dt_chaste_interface_var_Ito__a = (-var_chaste_interface__Ito__a + var_Ito__ass) / var_Ito__ta; // 1 / millisecond

        return d_dt_chaste_interface_var_Ito__a;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x1001 = 0.034035137876343539 * var_chaste_interface__membrane__v;
            const double var_x1002 = exp(0.62658348478969694 - var_x1001);
            const double var_x1003 = 1.0 + var_x1002;
            const double var_x1004 = exp(3.403513787634354 + var_x1001);
            const double var_x1005 = 1.0 + var_x1004;
            const double var_x1007 = 3.3285782215882072 / var_x1005;
            const double var_x1008 = 0.78668405081082138 / var_x1003;
            const double var_x1010 = -var_x1007 - var_x1008;
            
            partialF = var_x1010;
        }
        else
        {
            const double y_save = rY[19];
            rY[19] += delta;
            const double temp = EvaluateYDerivative19(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[19])/delta;
            rY[19] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__Ito__iF = rY[20];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_Ito__delta_epi = ((var_environment__celltype == 1.0) ? (1.0 - 0.94999999999999996 / (1.0 + exp(14.0 + 0.20000000000000001 * var_chaste_interface__membrane__v))) : (1.0)); // dimensionless
        const double var_Ito__iss = 1 / (1.0 + exp(7.6939240063036234 + 0.17510068289266328 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__tiF_b = 4.5620000000000003 + 1 / (0.39329999999999998 * exp(-1.0 - 0.01 * var_chaste_interface__membrane__v) + 0.08004 * exp(3.0138637733574445 + 0.060277275467148887 * var_chaste_interface__membrane__v)); // millisecond
        const double var_Ito__tiF = var_Ito__delta_epi * var_Ito__tiF_b; // millisecond
        const double d_dt_chaste_interface_var_Ito__iF = (-var_chaste_interface__Ito__iF + var_Ito__iss) / var_Ito__tiF; // 1 / millisecond

        return d_dt_chaste_interface_var_Ito__iF;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x1011 = exp(14.0 + 0.20000000000000001 * var_chaste_interface__membrane__v);
            const double var_x1012 = 1.0 + var_x1011;
            const double var_x1013 = 1.0 - 0.94999999999999996 / var_x1012;
            const double var_x1014 = 1 / var_x1013;
            const double var_x1015 = exp(-1.0 - 0.01 * var_chaste_interface__membrane__v);
            const double var_x1016 = exp(3.0138637733574445 + 0.060277275467148887 * var_chaste_interface__membrane__v);
            const double var_x1017 = 1 / (0.39329999999999998 * var_x1015 + 0.08004 * var_x1016);
            const double var_x1018 = 1 / (4.5620000000000003 + var_x1017);
            const double var_x1019 = var_x1014 * var_x1018;
            
            partialF = -var_x1019;
        }
        else
        {
            const double y_save = rY[20];
            rY[20] += delta;
            const double temp = EvaluateYDerivative20(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[20])/delta;
            rY[20] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__Ito__iS = rY[21];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_Ito__delta_epi = ((var_environment__celltype == 1.0) ? (1.0 - 0.94999999999999996 / (1.0 + exp(14.0 + 0.20000000000000001 * var_chaste_interface__membrane__v))) : (1.0)); // dimensionless
        const double var_Ito__iss = 1 / (1.0 + exp(7.6939240063036234 + 0.17510068289266328 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__tiS_b = 23.620000000000001 + 1 / (1.7800000000000001e-8 * exp(14.123035029087756 + 0.12377769525931426 * var_chaste_interface__membrane__v) + 0.0014159999999999999 * exp(-1.6345469940728197 - 0.016934801016088061 * var_chaste_interface__membrane__v)); // millisecond
        const double var_Ito__tiS = var_Ito__delta_epi * var_Ito__tiS_b; // millisecond
        const double d_dt_chaste_interface_var_Ito__iS = (-var_chaste_interface__Ito__iS + var_Ito__iss) / var_Ito__tiS; // 1 / millisecond

        return d_dt_chaste_interface_var_Ito__iS;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x1011 = exp(14.0 + 0.20000000000000001 * var_chaste_interface__membrane__v);
            const double var_x1012 = 1.0 + var_x1011;
            const double var_x1013 = 1.0 - 0.94999999999999996 / var_x1012;
            const double var_x1014 = 1 / var_x1013;
            const double var_x1028 = exp(14.123035029087756 + 0.12377769525931426 * var_chaste_interface__membrane__v);
            const double var_x1029 = exp(-1.6345469940728197 - 0.016934801016088061 * var_chaste_interface__membrane__v);
            const double var_x1030 = 1 / (1.7800000000000001e-8 * var_x1028 + 0.0014159999999999999 * var_x1029);
            const double var_x1031 = 1 / (23.620000000000001 + var_x1030);
            const double var_x1032 = var_x1014 * var_x1031;
            
            partialF = -var_x1032;
        }
        else
        {
            const double y_save = rY[21];
            rY[21] += delta;
            const double temp = EvaluateYDerivative21(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[21])/delta;
            rY[21] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__Ito__ap = rY[22];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_Ito__assp = 1 / (1.0 + exp(1.6423751686909582 - 0.067476383265856948 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__ta = 1.0515000000000001 / (3.5 / (1.0 + exp(3.403513787634354 + 0.034035137876343539 * var_chaste_interface__membrane__v)) + 0.82719827942757873 / (1.0 + exp(0.62658348478969694 - 0.034035137876343539 * var_chaste_interface__membrane__v))); // millisecond
        const double d_dt_chaste_interface_var_Ito__ap = (-var_chaste_interface__Ito__ap + var_Ito__assp) / var_Ito__ta; // 1 / millisecond

        return d_dt_chaste_interface_var_Ito__ap;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x1001 = 0.034035137876343539 * var_chaste_interface__membrane__v;
            const double var_x1002 = exp(0.62658348478969694 - var_x1001);
            const double var_x1003 = 1.0 + var_x1002;
            const double var_x1004 = exp(3.403513787634354 + var_x1001);
            const double var_x1005 = 1.0 + var_x1004;
            const double var_x1007 = 3.3285782215882072 / var_x1005;
            const double var_x1008 = 0.78668405081082138 / var_x1003;
            const double var_x1010 = -var_x1007 - var_x1008;
            
            partialF = var_x1010;
        }
        else
        {
            const double y_save = rY[22];
            rY[22] += delta;
            const double temp = EvaluateYDerivative22(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[22])/delta;
            rY[22] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__Ito__iFp = rY[23];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_Ito__delta_epi = ((var_environment__celltype == 1.0) ? (1.0 - 0.94999999999999996 / (1.0 + exp(14.0 + 0.20000000000000001 * var_chaste_interface__membrane__v))) : (1.0)); // dimensionless
        const double var_Ito__dti_develop = 1.3540000000000001 + 0.0001 / (exp(56.77808727948004 - 4.6425255338904359 * var_chaste_interface__membrane__v) + exp(-10.534927627438641 + 0.062932662051604776 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__dti_recover = 1.0 - 0.5 / (1.0 + exp(3.5 + 0.050000000000000003 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__iss = 1 / (1.0 + exp(7.6939240063036234 + 0.17510068289266328 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__tiF_b = 4.5620000000000003 + 1 / (0.39329999999999998 * exp(-1.0 - 0.01 * var_chaste_interface__membrane__v) + 0.08004 * exp(3.0138637733574445 + 0.060277275467148887 * var_chaste_interface__membrane__v)); // millisecond
        const double var_Ito__tiF = var_Ito__delta_epi * var_Ito__tiF_b; // millisecond
        const double var_Ito__tiFp = var_Ito__dti_develop * var_Ito__dti_recover * var_Ito__tiF; // millisecond
        const double d_dt_chaste_interface_var_Ito__iFp = (-var_chaste_interface__Ito__iFp + var_Ito__iss) / var_Ito__tiFp; // 1 / millisecond

        return d_dt_chaste_interface_var_Ito__iFp;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x1011 = exp(14.0 + 0.20000000000000001 * var_chaste_interface__membrane__v);
            const double var_x1012 = 1.0 + var_x1011;
            const double var_x1013 = 1.0 - 0.94999999999999996 / var_x1012;
            const double var_x1014 = 1 / var_x1013;
            const double var_x1015 = exp(-1.0 - 0.01 * var_chaste_interface__membrane__v);
            const double var_x1016 = exp(3.0138637733574445 + 0.060277275467148887 * var_chaste_interface__membrane__v);
            const double var_x1017 = 1 / (0.39329999999999998 * var_x1015 + 0.08004 * var_x1016);
            const double var_x1018 = 1 / (4.5620000000000003 + var_x1017);
            const double var_x1019 = var_x1014 * var_x1018;
            const double var_x1038 = 0.050000000000000003 * var_chaste_interface__membrane__v;
            const double var_x1039 = exp(3.5 + var_x1038);
            const double var_x1040 = 1.0 + var_x1039;
            const double var_x1041 = 1.0 - 0.5 / var_x1040;
            const double var_x1042 = 1 / var_x1041;
            const double var_x1043 = exp(56.77808727948004 - 4.6425255338904359 * var_chaste_interface__membrane__v);
            const double var_x1044 = exp(-10.534927627438641 + 0.062932662051604776 * var_chaste_interface__membrane__v);
            const double var_x1045 = var_x1043 + var_x1044;
            const double var_x1046 = 1 / var_x1045;
            const double var_x1047 = 1 / (1.3540000000000001 + 0.0001 * var_x1046);
            const double var_x1048 = var_x1042 * var_x1047;
            const double var_x1049 = var_x1019 * var_x1048;
            
            partialF = -var_x1049;
        }
        else
        {
            const double y_save = rY[23];
            rY[23] += delta;
            const double temp = EvaluateYDerivative23(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[23])/delta;
            rY[23] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__Ito__iSp = rY[24];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_Ito__delta_epi = ((var_environment__celltype == 1.0) ? (1.0 - 0.94999999999999996 / (1.0 + exp(14.0 + 0.20000000000000001 * var_chaste_interface__membrane__v))) : (1.0)); // dimensionless
        const double var_Ito__dti_develop = 1.3540000000000001 + 0.0001 / (exp(56.77808727948004 - 4.6425255338904359 * var_chaste_interface__membrane__v) + exp(-10.534927627438641 + 0.062932662051604776 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__dti_recover = 1.0 - 0.5 / (1.0 + exp(3.5 + 0.050000000000000003 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__iss = 1 / (1.0 + exp(7.6939240063036234 + 0.17510068289266328 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_Ito__tiS_b = 23.620000000000001 + 1 / (1.7800000000000001e-8 * exp(14.123035029087756 + 0.12377769525931426 * var_chaste_interface__membrane__v) + 0.0014159999999999999 * exp(-1.6345469940728197 - 0.016934801016088061 * var_chaste_interface__membrane__v)); // millisecond
        const double var_Ito__tiS = var_Ito__delta_epi * var_Ito__tiS_b; // millisecond
        const double var_Ito__tiSp = var_Ito__dti_develop * var_Ito__dti_recover * var_Ito__tiS; // millisecond
        const double d_dt_chaste_interface_var_Ito__iSp = (-var_chaste_interface__Ito__iSp + var_Ito__iss) / var_Ito__tiSp; // 1 / millisecond

        return d_dt_chaste_interface_var_Ito__iSp;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x1011 = exp(14.0 + 0.20000000000000001 * var_chaste_interface__membrane__v);
            const double var_x1012 = 1.0 + var_x1011;
            const double var_x1013 = 1.0 - 0.94999999999999996 / var_x1012;
            const double var_x1014 = 1 / var_x1013;
            const double var_x1028 = exp(14.123035029087756 + 0.12377769525931426 * var_chaste_interface__membrane__v);
            const double var_x1029 = exp(-1.6345469940728197 - 0.016934801016088061 * var_chaste_interface__membrane__v);
            const double var_x1030 = 1 / (1.7800000000000001e-8 * var_x1028 + 0.0014159999999999999 * var_x1029);
            const double var_x1031 = 1 / (23.620000000000001 + var_x1030);
            const double var_x1032 = var_x1014 * var_x1031;
            const double var_x1038 = 0.050000000000000003 * var_chaste_interface__membrane__v;
            const double var_x1039 = exp(3.5 + var_x1038);
            const double var_x1040 = 1.0 + var_x1039;
            const double var_x1041 = 1.0 - 0.5 / var_x1040;
            const double var_x1042 = 1 / var_x1041;
            const double var_x1043 = exp(56.77808727948004 - 4.6425255338904359 * var_chaste_interface__membrane__v);
            const double var_x1044 = exp(-10.534927627438641 + 0.062932662051604776 * var_chaste_interface__membrane__v);
            const double var_x1045 = var_x1043 + var_x1044;
            const double var_x1046 = 1 / var_x1045;
            const double var_x1047 = 1 / (1.3540000000000001 + 0.0001 * var_x1046);
            const double var_x1048 = var_x1042 * var_x1047;
            const double var_x1055 = var_x1032 * var_x1048;
            
            partialF = -var_x1055;
        }
        else
        {
            const double y_save = rY[24];
            rY[24] += delta;
            const double temp = EvaluateYDerivative24(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[24])/delta;
            rY[24] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_ICaL__dss = 1 / (1.0 + exp(-0.93144208037825049 - 0.23640661938534277 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__td = 0.59999999999999998 + 1 / (exp(1.26 + 0.089999999999999997 * var_chaste_interface__membrane__v) + exp(-0.30000000000000004 - 0.050000000000000003 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_ICaL__d = (-var_chaste_interface__ICaL__d + var_ICaL__dss) / var_ICaL__td; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__d;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x1061 = exp(1.26 + 0.089999999999999997 * var_chaste_interface__membrane__v);
            const double var_x1062 = exp(-0.30000000000000004 - 0.050000000000000003 * var_chaste_interface__membrane__v);
            const double var_x1063 = var_x1061 + var_x1062;
            const double var_x1064 = 0.59999999999999998 + 1 / var_x1063;
            const double var_x1065 = 1 / var_x1064;
            
            partialF = -var_x1065;
        }
        else
        {
            const double y_save = rY[25];
            rY[25] += delta;
            const double temp = EvaluateYDerivative25(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[25])/delta;
            rY[25] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_ICaL__fss = 1 / (1.0 + exp(5.2976190476190466 + 0.27056277056277056 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__tff = 7.0 + 1 / (0.0044999999999999997 * exp(2.0 + 0.10000000000000001 * var_chaste_interface__membrane__v) + 0.0044999999999999997 * exp(-2.0 - 0.10000000000000001 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_ICaL__ff = (-var_chaste_interface__ICaL__ff + var_ICaL__fss) / var_ICaL__tff; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__ff;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x387 = 0.10000000000000001 * var_chaste_interface__membrane__v;
            const double var_x1066 = exp(2.0 + var_x387);
            const double var_x1067 = exp(-2.0 - var_x387);
            const double var_x1068 = 1 / (0.0044999999999999997 * var_x1066 + 0.0044999999999999997 * var_x1067);
            const double var_x1069 = 1 / (7.0 + var_x1068);
            
            partialF = -var_x1069;
        }
        else
        {
            const double y_save = rY[26];
            rY[26] += delta;
            const double temp = EvaluateYDerivative26(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[26])/delta;
            rY[26] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_ICaL__fss = 1 / (1.0 + exp(5.2976190476190466 + 0.27056277056277056 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__tfs = 1000.0 + 1 / (3.4999999999999997e-5 * exp(0.83333333333333337 + 0.16666666666666666 * var_chaste_interface__membrane__v) + 3.4999999999999997e-5 * exp(-1.25 - 0.25 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_ICaL__fs = (-var_chaste_interface__ICaL__fs + var_ICaL__fss) / var_ICaL__tfs; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__fs;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x1076 = exp(0.83333333333333337 + 0.16666666666666666 * var_chaste_interface__membrane__v);
            const double var_x1077 = exp(-1.25 - 0.25 * var_chaste_interface__membrane__v);
            const double var_x1078 = 1 / (3.4999999999999997e-5 * var_x1076 + 3.4999999999999997e-5 * var_x1077);
            const double var_x1079 = 1 / (1000.0 + var_x1078);
            
            partialF = -var_x1079;
        }
        else
        {
            const double y_save = rY[27];
            rY[27] += delta;
            const double temp = EvaluateYDerivative27(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[27])/delta;
            rY[27] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_ICaL__fss = 1 / (1.0 + exp(5.2976190476190466 + 0.27056277056277056 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__fcass = var_ICaL__fss; // dimensionless
        const double var_ICaL__tfcaf = 7.0 + 1 / (0.040000000000000001 * exp(0.5714285714285714 - 0.14285714285714285 * var_chaste_interface__membrane__v) + 0.040000000000000001 * exp(-0.5714285714285714 + 0.14285714285714285 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_ICaL__fcaf = (-var_chaste_interface__ICaL__fcaf + var_ICaL__fcass) / var_ICaL__tfcaf; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__fcaf;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x1080 = 0.14285714285714285 * var_chaste_interface__membrane__v;
            const double var_x1081 = exp(0.5714285714285714 - var_x1080);
            const double var_x1082 = exp(-0.5714285714285714 + var_x1080);
            const double var_x1083 = 1 / (0.040000000000000001 * var_x1081 + 0.040000000000000001 * var_x1082);
            const double var_x1084 = 1 / (7.0 + var_x1083);
            
            partialF = -var_x1084;
        }
        else
        {
            const double y_save = rY[28];
            rY[28] += delta;
            const double temp = EvaluateYDerivative28(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[28])/delta;
            rY[28] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_ICaL__fss = 1 / (1.0 + exp(5.2976190476190466 + 0.27056277056277056 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__fcass = var_ICaL__fss; // dimensionless
        const double var_ICaL__tfcas = 100.0 + 1 / (0.00012 * exp(0.14285714285714285 * var_chaste_interface__membrane__v) + 0.00012 * exp(-0.33333333333333331 * var_chaste_interface__membrane__v)); // millisecond
        const double d_dt_chaste_interface_var_ICaL__fcas = (-var_chaste_interface__ICaL__fcas + var_ICaL__fcass) / var_ICaL__tfcas; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__fcas;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x1080 = 0.14285714285714285 * var_chaste_interface__membrane__v;
            const double var_x1086 = exp(var_x1080);
            const double var_x1087 = exp(-0.33333333333333331 * var_chaste_interface__membrane__v);
            const double var_x1088 = 1 / (0.00012 * var_x1086 + 0.00012 * var_x1087);
            const double var_x1089 = 1 / (100.0 + var_x1088);
            
            partialF = -var_x1089;
        }
        else
        {
            const double y_save = rY[29];
            rY[29] += delta;
            const double temp = EvaluateYDerivative29(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[29])/delta;
            rY[29] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_ICaL__tjca = 75.0; // millisecond
        const double var_ICaL__fss = 1 / (1.0 + exp(5.2976190476190466 + 0.27056277056277056 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__fcass = var_ICaL__fss; // dimensionless
        const double d_dt_chaste_interface_var_ICaL__jca = (-var_chaste_interface__ICaL__jca + var_ICaL__fcass) / var_ICaL__tjca; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__jca;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            
            partialF = -0.013333333333333334;
        }
        else
        {
            const double y_save = rY[30];
            rY[30] += delta;
            const double temp = EvaluateYDerivative30(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[30])/delta;
            rY[30] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_ICaL__fss = 1 / (1.0 + exp(5.2976190476190466 + 0.27056277056277056 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__tff = 7.0 + 1 / (0.0044999999999999997 * exp(2.0 + 0.10000000000000001 * var_chaste_interface__membrane__v) + 0.0044999999999999997 * exp(-2.0 - 0.10000000000000001 * var_chaste_interface__membrane__v)); // millisecond
        const double var_ICaL__tffp = 2.5 * var_ICaL__tff; // millisecond
        const double d_dt_chaste_interface_var_ICaL__ffp = (-var_chaste_interface__ICaL__ffp + var_ICaL__fss) / var_ICaL__tffp; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__ffp;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x387 = 0.10000000000000001 * var_chaste_interface__membrane__v;
            const double var_x1066 = exp(2.0 + var_x387);
            const double var_x1067 = exp(-2.0 - var_x387);
            const double var_x1068 = 1 / (0.0044999999999999997 * var_x1066 + 0.0044999999999999997 * var_x1067);
            const double var_x1090 = 1 / (17.5 + 2.5 * var_x1068);
            
            partialF = -var_x1090;
        }
        else
        {
            const double y_save = rY[31];
            rY[31] += delta;
            const double temp = EvaluateYDerivative31(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[31])/delta;
            rY[31] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_ICaL__fss = 1 / (1.0 + exp(5.2976190476190466 + 0.27056277056277056 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__fcass = var_ICaL__fss; // dimensionless
        const double var_ICaL__tfcaf = 7.0 + 1 / (0.040000000000000001 * exp(0.5714285714285714 - 0.14285714285714285 * var_chaste_interface__membrane__v) + 0.040000000000000001 * exp(-0.5714285714285714 + 0.14285714285714285 * var_chaste_interface__membrane__v)); // millisecond
        const double var_ICaL__tfcafp = 2.5 * var_ICaL__tfcaf; // millisecond
        const double d_dt_chaste_interface_var_ICaL__fcafp = (-var_chaste_interface__ICaL__fcafp + var_ICaL__fcass) / var_ICaL__tfcafp; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__fcafp;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x1080 = 0.14285714285714285 * var_chaste_interface__membrane__v;
            const double var_x1081 = exp(0.5714285714285714 - var_x1080);
            const double var_x1082 = exp(-0.5714285714285714 + var_x1080);
            const double var_x1083 = 1 / (0.040000000000000001 * var_x1081 + 0.040000000000000001 * var_x1082);
            const double var_x1091 = 1 / (17.5 + 2.5 * var_x1083);
            
            partialF = -var_x1091;
        }
        else
        {
            const double y_save = rY[32];
            rY[32] += delta;
            const double temp = EvaluateYDerivative32(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[32])/delta;
            rY[32] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__nca = rY[33];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_ICaL__Kmn = 0.002; // millimolar
        const double var_ICaL__k2n = 1000.0; // per_millisecond
        const double var_ICaL__km2n = var_chaste_interface__ICaL__jca; // per_millisecond
        const double var_ICaL__anca = 1 / (pow((1.0 + var_ICaL__Kmn / var_chaste_interface__intracellular_ions__cass), 4) + var_ICaL__k2n / var_ICaL__km2n); // dimensionless
        const double d_dt_chaste_interface_var_ICaL__nca = var_ICaL__anca * var_ICaL__k2n - var_ICaL__km2n * var_chaste_interface__ICaL__nca; // 1 / millisecond

        return d_dt_chaste_interface_var_ICaL__nca;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__ICaL__jca = rY[30];
            // Units: dimensionless; Initial value: 1.0
            

            
            partialF = -var_chaste_interface__ICaL__jca;
        }
        else
        {
            const double y_save = rY[33];
            rY[33] += delta;
            const double temp = EvaluateYDerivative33(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[33])/delta;
            rY[33] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__IKr__xrf = rY[34];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_IKr__txrf = 12.98 + 1 / (4.1230000000000003e-5 * exp(2.3444553483807655 - 0.049067713444553483 * var_chaste_interface__membrane__v) + 0.36520000000000002 * exp(-8.182993021452571 + 0.25846471956577927 * var_chaste_interface__membrane__v)); // millisecond
        const double var_IKr__xrss = 1 / (1.0 + exp(-1.2280159080866107 - 0.14729709824716453 * var_chaste_interface__membrane__v)); // dimensionless
        const double d_dt_chaste_interface_var_IKr__xrf = (-var_chaste_interface__IKr__xrf + var_IKr__xrss) / var_IKr__txrf; // 1 / millisecond

        return d_dt_chaste_interface_var_IKr__xrf;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x1094 = exp(2.3444553483807655 - 0.049067713444553483 * var_chaste_interface__membrane__v);
            const double var_x1095 = exp(-8.182993021452571 + 0.25846471956577927 * var_chaste_interface__membrane__v);
            const double var_x1096 = 1 / (4.1230000000000003e-5 * var_x1094 + 0.36520000000000002 * var_x1095);
            const double var_x1097 = 1 / (12.98 + var_x1096);
            
            partialF = -var_x1097;
        }
        else
        {
            const double y_save = rY[34];
            rY[34] += delta;
            const double temp = EvaluateYDerivative34(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[34])/delta;
            rY[34] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative35(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__IKr__xrs = rY[35];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_IKr__txrs = 1.865 + 1 / (1.128e-5 * exp(1.146491904394757 - 0.038550501156515031 * var_chaste_interface__membrane__v) + 0.066290000000000002 * exp(-4.7178789938817136 + 0.13596193065941536 * var_chaste_interface__membrane__v)); // millisecond
        const double var_IKr__xrss = 1 / (1.0 + exp(-1.2280159080866107 - 0.14729709824716453 * var_chaste_interface__membrane__v)); // dimensionless
        const double d_dt_chaste_interface_var_IKr__xrs = (-var_chaste_interface__IKr__xrs + var_IKr__xrss) / var_IKr__txrs; // 1 / millisecond

        return d_dt_chaste_interface_var_IKr__xrs;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative35(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x1102 = exp(1.146491904394757 - 0.038550501156515031 * var_chaste_interface__membrane__v);
            const double var_x1103 = exp(-4.7178789938817136 + 0.13596193065941536 * var_chaste_interface__membrane__v);
            const double var_x1104 = 1 / (1.128e-5 * var_x1102 + 0.066290000000000002 * var_x1103);
            const double var_x1105 = 1 / (1.865 + var_x1104);
            
            partialF = -var_x1105;
        }
        else
        {
            const double y_save = rY[35];
            rY[35] += delta;
            const double temp = EvaluateYDerivative35(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[35])/delta;
            rY[35] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative36(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__IKs__xs1 = rY[36];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_IKs__txs1_max = 817.29999999999995; // millisecond
        const double var_IKs__txs1 = 1 / (0.001292 * exp(-0.91304347826086951 - 0.0043478260869565218 * var_chaste_interface__membrane__v) + 0.00023259999999999999 * exp(2.7123595505617977 + 0.056179775280898875 * var_chaste_interface__membrane__v)) + var_IKs__txs1_max; // millisecond
        const double var_IKs__xs1ss = 1 / (1.0 + exp(-1.2987012987012987 - 0.11195700850873264 * var_chaste_interface__membrane__v)); // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs1 = (-var_chaste_interface__IKs__xs1 + var_IKs__xs1ss) / var_IKs__txs1; // 1 / millisecond

        return d_dt_chaste_interface_var_IKs__xs1;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative36(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x1106 = exp(-0.91304347826086951 - 0.0043478260869565218 * var_chaste_interface__membrane__v);
            const double var_x1107 = exp(2.7123595505617977 + 0.056179775280898875 * var_chaste_interface__membrane__v);
            const double var_x1108 = 1 / (0.001292 * var_x1106 + 0.00023259999999999999 * var_x1107);
            const double var_x1109 = 1 / (817.29999999999995 + var_x1108);
            
            partialF = -var_x1109;
        }
        else
        {
            const double y_save = rY[36];
            rY[36] += delta;
            const double temp = EvaluateYDerivative36(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[36])/delta;
            rY[36] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative37(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__IKs__xs2 = rY[37];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_IKs__txs2 = 1 / (0.019300000000000001 * exp(-2.1464516129032258 - 0.032258064516129031 * var_chaste_interface__membrane__v) + 0.01 * exp(-2.5 + 0.050000000000000003 * var_chaste_interface__membrane__v)); // millisecond
        const double var_IKs__xs1ss = 1 / (1.0 + exp(-1.2987012987012987 - 0.11195700850873264 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKs__xs2ss = var_IKs__xs1ss; // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs2 = (-var_chaste_interface__IKs__xs2 + var_IKs__xs2ss) / var_IKs__txs2; // 1 / millisecond

        return d_dt_chaste_interface_var_IKs__xs2;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative37(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x1038 = 0.050000000000000003 * var_chaste_interface__membrane__v;
            const double var_x1114 = exp(-2.5 + var_x1038);
            const double var_x1115 = exp(-2.1464516129032258 - 0.032258064516129031 * var_chaste_interface__membrane__v);
            const double var_x1116 = 0.019300000000000001 * var_x1115;
            const double var_x1117 = 0.01 * var_x1114;
            
            partialF = -var_x1116 - var_x1117;
        }
        else
        {
            const double y_save = rY[37];
            rY[37] += delta;
            const double temp = EvaluateYDerivative37(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[37])/delta;
            rY[37] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative38(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__IK1__xk1 = rY[38];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_IK1__txk1 = 122.2 / (exp(3.4155488244627148 + 0.014423770373575654 * var_chaste_interface__membrane__v) + exp(-6.2475442043222005 - 0.049115913555992145 * var_chaste_interface__membrane__v)); // millisecond
        const double var_IK1__xk1ss = 1 / (1.0 + exp((-144.59 - var_chaste_interface__membrane__v - 2.5537999999999998 * mParameters[3]) / (3.8115000000000001 + 1.5691999999999999 * mParameters[3]))); // dimensionless
        const double d_dt_chaste_interface_var_IK1__xk1 = (-var_chaste_interface__IK1__xk1 + var_IK1__xk1ss) / var_IK1__txk1; // 1 / millisecond

        return d_dt_chaste_interface_var_IK1__xk1;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative38(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -87.0
            

            const double var_x1121 = exp(3.4155488244627148 + 0.014423770373575654 * var_chaste_interface__membrane__v);
            const double var_x1122 = exp(-6.2475442043222005 - 0.049115913555992145 * var_chaste_interface__membrane__v);
            const double var_x1123 = 0.0081833060556464818 * var_x1121;
            const double var_x1124 = 0.0081833060556464818 * var_x1122;
            
            partialF = -var_x1123 - var_x1124;
        }
        else
        {
            const double y_save = rY[38];
            rY[38] += delta;
            const double temp = EvaluateYDerivative38(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[38])/delta;
            rY[38] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative39(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__intracellular_ions__cajsr = rY[9];
        // Units: millimolar; Initial value: 1.2
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__nca = rY[33];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ryr__Jrelnp = rY[39];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_ICaL__Aff = 0.59999999999999998; // dimensionless
        const double var_ICaL__Afs = 1.0 - var_ICaL__Aff; // dimensionless
        const double var_ICaL__f = var_ICaL__Aff * var_chaste_interface__ICaL__ff + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__fp = var_ICaL__Aff * var_chaste_interface__ICaL__ffp + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[7]) : ((var_environment__celltype == 2.0) ? (2.5 * mParameters[7]) : (mParameters[7]))); // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_ICaL__Afcaf = 0.29999999999999999 + 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_membrane__vffrt = pow(mParameters[5], 2) * var_chaste_interface__membrane__v / (mParameters[6] * mParameters[19]); // coulomb_per_mole
        const double var_membrane__vfrt = var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19]); // dimensionless
        const double var_ICaL__PhiCaL = 4.0 * (-0.34100000000000003 * mParameters[2] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(2.0 * var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCa * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCap * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ryr__bt = 4.75; // millisecond
        const double var_ryr__a_rel = 0.5 * var_ryr__bt; // millisecond
        const double var_ryr__Jrel_inf_temp = -var_ICaL__ICaL * var_ryr__a_rel / (1.0 + 25.62890625 / pow(var_chaste_interface__intracellular_ions__cajsr, 8)); // dimensionless
        const double var_ryr__Jrel_inf = ((var_environment__celltype == 2.0) ? (1.7 * var_ryr__Jrel_inf_temp) : (var_ryr__Jrel_inf_temp)); // dimensionless
        const double var_ryr__tau_rel_temp = var_ryr__bt / (1.0 + 0.0123 / var_chaste_interface__intracellular_ions__cajsr); // millisecond
        const double var_ryr__tau_rel = ((var_ryr__tau_rel_temp < 0.001) ? (0.001) : (var_ryr__tau_rel_temp)); // millisecond
        const double d_dt_chaste_interface_var_ryr__Jrelnp = (-var_chaste_interface__ryr__Jrelnp + var_ryr__Jrel_inf) / var_ryr__tau_rel; // 1 / millisecond

        return d_dt_chaste_interface_var_ryr__Jrelnp;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative39(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__intracellular_ions__cajsr = rY[9];
            // Units: millimolar; Initial value: 1.2
            

            const double var_x1128 = 1 / var_chaste_interface__intracellular_ions__cajsr;
            const double var_x1129 = 1 / (1.0 + 0.0123 * var_x1128);
            const double var_x1130 = 4.75 * var_x1129 < 0.001;
            const double var_x1131 = ((var_x1130) ? (1000.0) : (0.21052631578947367 + 0.0025894736842105265 * var_x1128));
            
            partialF = -var_x1131;
        }
        else
        {
            const double y_save = rY[39];
            rY[39] += delta;
            const double temp = EvaluateYDerivative39(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[39])/delta;
            rY[39] = y_save;
        }
        return partialF;
    }
    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluateYDerivative40(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__intracellular_ions__cajsr = rY[9];
        // Units: millimolar; Initial value: 1.2
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__nca = rY[33];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ryr__Jrelp = rY[40];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_ICaL__Aff = 0.59999999999999998; // dimensionless
        const double var_ICaL__Afs = 1.0 - var_ICaL__Aff; // dimensionless
        const double var_ICaL__f = var_ICaL__Aff * var_chaste_interface__ICaL__ff + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__fp = var_ICaL__Aff * var_chaste_interface__ICaL__ffp + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[7]) : ((var_environment__celltype == 2.0) ? (2.5 * mParameters[7]) : (mParameters[7]))); // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_ICaL__Afcaf = 0.29999999999999999 + 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_membrane__vffrt = pow(mParameters[5], 2) * var_chaste_interface__membrane__v / (mParameters[6] * mParameters[19]); // coulomb_per_mole
        const double var_membrane__vfrt = var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19]); // dimensionless
        const double var_ICaL__PhiCaL = 4.0 * (-0.34100000000000003 * mParameters[2] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(2.0 * var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCa * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCap * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ryr__bt = 4.75; // millisecond
        const double var_ryr__btp = 1.25 * var_ryr__bt; // millisecond
        const double var_ryr__a_relp = 0.5 * var_ryr__btp; // millisecond
        const double var_ryr__Jrel_temp = -var_ICaL__ICaL * var_ryr__a_relp / (1.0 + 25.62890625 / pow(var_chaste_interface__intracellular_ions__cajsr, 8)); // dimensionless
        const double var_ryr__Jrel_infp = ((var_environment__celltype == 2.0) ? (1.7 * var_ryr__Jrel_temp) : (var_ryr__Jrel_temp)); // dimensionless
        const double var_ryr__tau_relp_temp = var_ryr__btp / (1.0 + 0.0123 / var_chaste_interface__intracellular_ions__cajsr); // millisecond
        const double var_ryr__tau_relp = ((var_ryr__tau_relp_temp < 0.001) ? (0.001) : (var_ryr__tau_relp_temp)); // millisecond
        const double d_dt_chaste_interface_var_ryr__Jrelp = (-var_chaste_interface__ryr__Jrelp + var_ryr__Jrel_infp) / var_ryr__tau_relp; // 1 / millisecond

        return d_dt_chaste_interface_var_ryr__Jrelp;
    }

    double Cellohara_rudy_2011_epiFromCellMLGRL1::EvaluatePartialDerivative40(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__intracellular_ions__cajsr = rY[9];
            // Units: millimolar; Initial value: 1.2
            

            const double var_x1128 = 1 / var_chaste_interface__intracellular_ions__cajsr;
            const double var_x1129 = 1 / (1.0 + 0.0123 * var_x1128);
            const double var_x1149 = 5.9375 * var_x1129 < 0.001;
            const double var_x1150 = ((var_x1149) ? (1000.0) : (0.16842105263157894 + 0.0020715789473684213 * var_x1128));
            
            partialF = -var_x1150;
        }
        else
        {
            const double y_save = rY[40];
            rY[40] += delta;
            const double temp = EvaluateYDerivative40(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[40])/delta;
            rY[40] = y_save;
        }
        return partialF;
    }

    std::vector<double> Cellohara_rudy_2011_epiFromCellMLGRL1::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__v = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -87.0
        double var_chaste_interface__intracellular_ions__cai = rY[1];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__CaMK__CaMKt = rY[2];
        // Units: millimolar; Initial value: 0.0
        double var_chaste_interface__intracellular_ions__nai = rY[3];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__nass = rY[4];
        // Units: millimolar; Initial value: 7.0
        double var_chaste_interface__intracellular_ions__ki = rY[5];
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__kss = rY[6];
        // Units: millimolar; Initial value: 145.0
        double var_chaste_interface__intracellular_ions__cass = rY[7];
        // Units: millimolar; Initial value: 0.0001
        double var_chaste_interface__intracellular_ions__cansr = rY[8];
        // Units: millimolar; Initial value: 1.2
        double var_chaste_interface__INa__m = rY[10];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INa__hf = rY[11];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hs = rY[12];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__j = rY[13];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__hsp = rY[14];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INa__jp = rY[15];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__mL = rY[16];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__INaL__hL = rY[17];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__INaL__hLp = rY[18];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__d = rY[25];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ICaL__ff = rY[26];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fs = rY[27];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcaf = rY[28];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcas = rY[29];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__jca = rY[30];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__ffp = rY[31];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__fcafp = rY[32];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ICaL__nca = rY[33];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrf = rY[34];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKr__xrs = rY[35];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs1 = rY[36];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IKs__xs2 = rY[37];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__IK1__xk1 = rY[38];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__ryr__Jrelnp = rY[39];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__ryr__Jrelp = rY[40];
        // Units: dimensionless; Initial value: 0.0
        
        // Mathematics
        const double var_CaMK__CaMKo = 0.050000000000000003; // dimensionless
        const double var_CaMK__KmCaM = 0.0015; // millimolar
        const double var_CaMK__KmCaMK = 0.14999999999999999; // millimolar
        const double var_ICaL__Aff = 0.59999999999999998; // dimensionless
        const double var_ICaL__Afs = 1.0 - var_ICaL__Aff; // dimensionless
        const double var_ICaL__f = var_ICaL__Aff * var_chaste_interface__ICaL__ff + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_ICaL__fp = var_ICaL__Aff * var_chaste_interface__ICaL__ffp + var_ICaL__Afs * var_chaste_interface__ICaL__fs; // dimensionless
        const double var_INa__Ahf = 0.98999999999999999; // dimensionless
        const double var_INa__Ahs = 1.0 - var_INa__Ahf; // dimensionless
        const double var_INa__h = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hs; // dimensionless
        const double var_INa__hp = var_INa__Ahf * var_chaste_interface__INa__hf + var_INa__Ahs * var_chaste_interface__INa__hsp; // dimensionless
        const double var_INaCa_i__KmCaAct = 0.00014999999999999999; // millimolar
        const double var_INaCa_i__kasymm = 12.5; // dimensionless
        const double var_INaCa_i__kcaoff = 5000.0; // per_millisecond
        const double var_INaCa_i__k2_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k2_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_i = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__k5_ss = var_INaCa_i__kcaoff; // dimensionless
        const double var_INaCa_i__kcaon = 1500000.0; // per_millisecond
        const double var_INaCa_i__kna1 = 15.0; // per_millisecond
        const double var_INaCa_i__kna2 = 5.0; // per_millisecond
        const double var_INaCa_i__kna3 = 88.120000000000005; // per_millisecond
        const double var_INaCa_i__qca = 0.16700000000000001; // dimensionless
        const double var_INaCa_i__qna = 0.52239999999999998; // dimensionless
        const double var_INaCa_i__wca = 60000.0; // dimensionless
        const double var_INaCa_i__wna = 60000.0; // dimensionless
        const double var_INaCa_i__wnaca = 5000.0; // dimensionless
        const double var_INaK__H = 9.9999999999999995e-8; // millimolar
        const double var_INaK__Khp = 1.698e-7; // millimolar
        const double var_INaK__Kki = 0.5; // per_millisecond
        const double var_INaK__Kko = 0.35820000000000002; // per_millisecond
        const double var_INaK__Kmgatp = 1.698e-7; // millimolar
        const double var_INaK__Knai0 = 9.0730000000000004; // millimolar
        const double var_INaK__Knao0 = 27.780000000000001; // millimolar
        const double var_INaK__Knap = 224.0; // millimolar
        const double var_INaK__Kxkur = 292.0; // millimolar
        const double var_INaK__MgADP = 0.050000000000000003; // millimolar
        const double var_INaK__MgATP = 9.8000000000000007; // millimolar
        const double var_INaK__delta = -0.155; // millivolt
        const double var_INaK__eP = 4.2000000000000002; // dimensionless
        const double var_INaK__k1m = 182.40000000000001; // per_millisecond
        const double var_INaK__b1 = var_INaK__MgADP * var_INaK__k1m; // dimensionless
        const double var_INaK__k1p = 949.5; // per_millisecond
        const double var_INaK__k2m = 39.399999999999999; // per_millisecond
        const double var_INaK__k2p = 687.20000000000005; // per_millisecond
        const double var_INaK__a2 = var_INaK__k2p; // dimensionless
        const double var_INaK__k3m = 79300.0; // per_millisecond
        const double var_INaK__k3p = 1899.0; // per_millisecond
        const double var_INaK__k4m = 40.0; // per_millisecond
        const double var_INaK__k4p = 639.0; // per_millisecond
        const double var_INaK__a4 = var_INaK__MgATP * var_INaK__k4p / ((1.0 + var_INaK__MgATP / var_INaK__Kmgatp) * var_INaK__Kmgatp); // dimensionless
        const double var_IpCa__KmCap = 0.00050000000000000001; // millimolar
        const double var_environment__celltype = 1.0; // dimensionless
        const double var_ICaL__PCa = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[7]) : ((var_environment__celltype == 2.0) ? (2.5 * mParameters[7]) : (mParameters[7]))); // dimensionless
        const double var_ICaL__PCaK = 0.00035740000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaNa = 0.00125 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCap = 1.1000000000000001 * var_ICaL__PCa; // dimensionless
        const double var_ICaL__PCaKp = 0.00035740000000000001 * var_ICaL__PCap; // dimensionless
        const double var_ICaL__PCaNap = 0.00125 * var_ICaL__PCap; // dimensionless
        const double var_IK1__GK1 = ((var_environment__celltype == 1.0) ? (1.2 * mParameters[12]) : ((var_environment__celltype == 2.0) ? (1.3 * mParameters[12]) : (mParameters[12]))); // milliS_per_microF
        const double var_IKb__GKb = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[9]) : (mParameters[9])); // milliS_per_microF
        const double var_IKr__GKr = ((var_environment__celltype == 1.0) ? (1.3 * mParameters[14]) : ((var_environment__celltype == 2.0) ? (0.80000000000000004 * mParameters[14]) : (mParameters[14]))); // milliS_per_microF
        const double var_IKs__GKs = ((var_environment__celltype == 1.0) ? (1.3999999999999999 * mParameters[15]) : (mParameters[15])); // milliS_per_microF
        const double var_INaCa_i__Gncx = ((var_environment__celltype == 1.0) ? (1.1000000000000001 * mParameters[16]) : ((var_environment__celltype == 2.0) ? (1.3999999999999999 * mParameters[16]) : (mParameters[16]))); // milliS_per_microF
        const double var_INaK__Pnak = ((var_environment__celltype == 1.0) ? (0.90000000000000002 * mParameters[17]) : ((var_environment__celltype == 2.0) ? (0.69999999999999996 * mParameters[17]) : (mParameters[17]))); // milliS_per_microF
        const double var_INaL__GNaL = ((var_environment__celltype == 1.0) ? (0.59999999999999998 * mParameters[13]) : (mParameters[13])); // milliS_per_microF
        const double var_Ito__Gto = (((var_environment__celltype == 1.0) || (var_environment__celltype == 2.0)) ? (4.0 * mParameters[18]) : (mParameters[18])); // milliS_per_microF
        const double var_SERCA__upScale = ((var_environment__celltype == 1.0) ? (1.3) : (1.0)); // dimensionless
        const double var_IK1__GK1_total = sqrt(mParameters[3]) * var_IK1__GK1; // milliS_per_microF
        const double var_IKr__GKr_total = 0.43033148291193518 * sqrt(mParameters[3]) * var_IKr__GKr; // milliS_per_microF
        const double var_INaCa_i__h10_i = 1.0 + (1.0 + mParameters[4] / var_INaCa_i__kna2) * mParameters[4] / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h10_ss = 1.0 + (1.0 + mParameters[4] / var_INaCa_i__kna2) * mParameters[4] / var_INaCa_i__kna1 + var_INaCa_i__kasymm; // dimensionless
        const double var_INaCa_i__h11_i = pow(mParameters[4], 2) / (var_INaCa_i__h10_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h11_ss = pow(mParameters[4], 2) / (var_INaCa_i__h10_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h12_i = 1 / var_INaCa_i__h10_i; // dimensionless
        const double var_INaCa_i__h12_ss = 1 / var_INaCa_i__h10_ss; // dimensionless
        const double var_INaCa_i__k1_i = var_INaCa_i__h12_i * var_INaCa_i__kcaon * mParameters[2]; // dimensionless
        const double var_INaCa_i__k1_ss = var_INaCa_i__h12_ss * var_INaCa_i__kcaon * mParameters[2]; // dimensionless
        const double var_intracellular_ions__BSLmax = 1.1240000000000001; // millimolar
        const double var_intracellular_ions__BSRmax = 0.047; // millimolar
        const double var_intracellular_ions__KmBSL = 0.0086999999999999994; // millimolar
        const double var_intracellular_ions__KmBSR = 0.00087000000000000001; // millimolar
        const double var_IKs__KsCa = 1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__intracellular_ions__cai), 1.3999999999999999)); // dimensionless
        const double var_IKs__GKs_total = var_IKs__GKs * var_IKs__KsCa; // milliS_per_microF
        const double var_INaCa_i__allo_i = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cai, 2)); // dimensionless
        const double var_IpCa__IpCa = mParameters[10] * var_chaste_interface__intracellular_ions__cai / (var_IpCa__KmCap + var_chaste_interface__intracellular_ions__cai); // microA_per_microF
        const double var_IpCa__IpCa_converted = HeartConfig::Instance()->GetCapacitance() * var_IpCa__IpCa; // uA_per_cm2
        const double var_SERCA__Jupnp = 0.0043750000000000004 * var_SERCA__upScale * var_chaste_interface__intracellular_ions__cai / (0.00092000000000000003 + var_chaste_interface__intracellular_ions__cai); // millimolar_per_millisecond
        const double var_SERCA__Jupp = 0.01203125 * var_SERCA__upScale * var_chaste_interface__intracellular_ions__cai / (0.00075000000000000002 + var_chaste_interface__intracellular_ions__cai); // millimolar_per_millisecond
        const double var_SERCA__Jleak = 0.00026249999999999998 * var_chaste_interface__intracellular_ions__cansr; // millimolar_per_millisecond
        const double var_CaMK__CaMKb = (1.0 - var_chaste_interface__CaMK__CaMKt) * var_CaMK__CaMKo / (1.0 + var_CaMK__KmCaM / var_chaste_interface__intracellular_ions__cass); // millimolar
        const double var_CaMK__CaMKa = var_CaMK__CaMKb + var_chaste_interface__CaMK__CaMKt; // millimolar
        const double var_ICaL__fICaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INa__fINap = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_INaCa_i__allo_ss = 1 / (1.0 + pow(var_INaCa_i__KmCaAct, 2) / pow(var_chaste_interface__intracellular_ions__cass, 2)); // dimensionless
        const double var_INaL__fINaLp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__fJupp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_SERCA__Jup = (-var_SERCA__Jleak + (1.0 - var_SERCA__fJupp) * var_SERCA__Jupnp + var_SERCA__Jupp * var_SERCA__fJupp) * mParameters[1]; // millimolar_per_millisecond
        const double var_intracellular_ions__Bcass = 1 / (1.0 + var_intracellular_ions__BSLmax * var_intracellular_ions__KmBSL / pow((var_intracellular_ions__KmBSL + var_chaste_interface__intracellular_ions__cass), 2) + var_intracellular_ions__BSRmax * var_intracellular_ions__KmBSR / pow((var_intracellular_ions__KmBSR + var_chaste_interface__intracellular_ions__cass), 2)); // dimensionless
        const double var_intracellular_ions__cmdnmax_b = 0.050000000000000003; // millimolar
        const double var_intracellular_ions__cmdnmax = ((var_environment__celltype == 1.0) ? (1.3 * var_intracellular_ions__cmdnmax_b) : (var_intracellular_ions__cmdnmax_b)); // millimolar
        const double var_intracellular_ions__kmcmdn = 0.0023800000000000002; // millimolar
        const double var_intracellular_ions__kmtrpn = 0.00050000000000000001; // millimolar
        const double var_INaCa_i__h4_i = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_i = pow(var_chaste_interface__intracellular_ions__nai, 2) / (var_INaCa_i__h4_i * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_i = 1 / var_INaCa_i__h4_i; // dimensionless
        const double var_INaCa_i__k6_i = var_INaCa_i__h6_i * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cai; // dimensionless
        const double var_INaK__P = var_INaK__eP / (1.0 + var_INaK__H / var_INaK__Khp + var_chaste_interface__intracellular_ions__nai / var_INaK__Knap + var_chaste_interface__intracellular_ions__ki / var_INaK__Kxkur); // dimensionless
        const double var_INaK__b3 = var_INaK__H * var_INaK__P * var_INaK__k3m / (1.0 + var_INaK__MgATP / var_INaK__Kmgatp); // dimensionless
        const double var_INaCa_i__h4_ss = 1.0 + (1.0 + var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna2) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna1; // dimensionless
        const double var_INaCa_i__h5_ss = pow(var_chaste_interface__intracellular_ions__nass, 2) / (var_INaCa_i__h4_ss * var_INaCa_i__kna1 * var_INaCa_i__kna2); // dimensionless
        const double var_INaCa_i__h6_ss = 1 / var_INaCa_i__h4_ss; // dimensionless
        const double var_INaCa_i__k6_ss = var_INaCa_i__h6_ss * var_INaCa_i__kcaon * var_chaste_interface__intracellular_ions__cass; // dimensionless
        const double var_intracellular_ions__trpnmax = 0.070000000000000007; // millimolar
        const double var_intracellular_ions__Bcai = 1 / (1.0 + var_intracellular_ions__cmdnmax * var_intracellular_ions__kmcmdn / pow((var_chaste_interface__intracellular_ions__cai + var_intracellular_ions__kmcmdn), 2) + var_intracellular_ions__kmtrpn * var_intracellular_ions__trpnmax / pow((var_chaste_interface__intracellular_ions__cai + var_intracellular_ions__kmtrpn), 2)); // dimensionless
        const double var_membrane__Istim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_ICaL__Afcaf = 0.29999999999999999 + 0.59999999999999998 / (1.0 + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_ICaL__Afcas = 1.0 - var_ICaL__Afcaf; // dimensionless
        const double var_ICaL__fca = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcaf + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_ICaL__fcap = var_ICaL__Afcaf * var_chaste_interface__ICaL__fcafp + var_ICaL__Afcas * var_chaste_interface__ICaL__fcas; // dimensionless
        const double var_IK1__rk1 = 1 / (1.0 + exp(11.145054250500367 + 0.10534077741493732 * var_chaste_interface__membrane__v - 0.27388602127883704 * mParameters[3])); // millisecond
        const double var_IKb__xkb = 1 / (1.0 + exp(0.78953107960741553 - 0.054525627044711013 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrf = 1 / (1.0 + exp(1.4344412457471867 + 0.026171159382360639 * var_chaste_interface__membrane__v)); // dimensionless
        const double var_IKr__Axrs = 1.0 - var_IKr__Axrf; // dimensionless
        const double var_IKr__rkr = 1 / ((1.0 + exp(0.73333333333333328 + 0.013333333333333334 * var_chaste_interface__membrane__v)) * (1.0 + exp(-0.33333333333333331 + 0.033333333333333333 * var_chaste_interface__membrane__v))); // dimensionless
        const double var_IKr__xr = var_IKr__Axrf * var_chaste_interface__IKr__xrf + var_IKr__Axrs * var_chaste_interface__IKr__xrs; // dimensionless
        const double var_INaCa_i__hca = exp(var_INaCa_i__qca * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__hna = exp(var_INaCa_i__qna * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // dimensionless
        const double var_INaCa_i__h1_i = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nai / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h1_ss = 1.0 + (1.0 + var_INaCa_i__hna) * var_chaste_interface__intracellular_ions__nass / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h2_i = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nai / (var_INaCa_i__h1_i * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h2_ss = var_INaCa_i__hna * var_chaste_interface__intracellular_ions__nass / (var_INaCa_i__h1_ss * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h3_i = 1 / var_INaCa_i__h1_i; // dimensionless
        const double var_INaCa_i__h3_ss = 1 / var_INaCa_i__h1_ss; // dimensionless
        const double var_INaCa_i__h7_i = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * mParameters[4] / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h7_ss = 1.0 + (1.0 + 1 / var_INaCa_i__hna) * mParameters[4] / var_INaCa_i__kna3; // dimensionless
        const double var_INaCa_i__h8_i = mParameters[4] / (var_INaCa_i__h7_i * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h8_ss = mParameters[4] / (var_INaCa_i__h7_ss * var_INaCa_i__hna * var_INaCa_i__kna3); // dimensionless
        const double var_INaCa_i__h9_i = 1 / var_INaCa_i__h7_i; // dimensionless
        const double var_INaCa_i__h9_ss = 1 / var_INaCa_i__h7_ss; // dimensionless
        const double var_INaCa_i__k3p_i = var_INaCa_i__h9_i * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3p_ss = var_INaCa_i__h9_ss * var_INaCa_i__wca; // dimensionless
        const double var_INaCa_i__k3pp_i = var_INaCa_i__h8_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_i = var_INaCa_i__k3p_i + var_INaCa_i__k3pp_i; // dimensionless
        const double var_INaCa_i__k3pp_ss = var_INaCa_i__h8_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k3_ss = var_INaCa_i__k3p_ss + var_INaCa_i__k3pp_ss; // dimensionless
        const double var_INaCa_i__k4p_i = var_INaCa_i__h3_i * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4p_ss = var_INaCa_i__h3_ss * var_INaCa_i__wca / var_INaCa_i__hca; // dimensionless
        const double var_INaCa_i__k4pp_i = var_INaCa_i__h2_i * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_i = var_INaCa_i__k4p_i + var_INaCa_i__k4pp_i; // dimensionless
        const double var_INaCa_i__k4pp_ss = var_INaCa_i__h2_ss * var_INaCa_i__wnaca; // dimensionless
        const double var_INaCa_i__k4_ss = var_INaCa_i__k4p_ss + var_INaCa_i__k4pp_ss; // dimensionless
        const double var_INaCa_i__k7_i = var_INaCa_i__h2_i * var_INaCa_i__h5_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k7_ss = var_INaCa_i__h2_ss * var_INaCa_i__h5_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_i = var_INaCa_i__h11_i * var_INaCa_i__h8_i * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__k8_ss = var_INaCa_i__h11_ss * var_INaCa_i__h8_ss * var_INaCa_i__wna; // dimensionless
        const double var_INaCa_i__x1_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k5_i * var_INaCa_i__k7_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k2_i * var_INaCa_i__k4_i; // dimensionless
        const double var_INaCa_i__x1_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k5_ss * var_INaCa_i__k7_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k4_ss; // dimensionless
        const double var_INaCa_i__x2_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k4_i * var_INaCa_i__k6_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k1_i * var_INaCa_i__k7_i; // dimensionless
        const double var_INaCa_i__x2_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k4_ss * var_INaCa_i__k6_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k7_ss; // dimensionless
        const double var_INaCa_i__x3_i = (var_INaCa_i__k2_i + var_INaCa_i__k3_i) * var_INaCa_i__k6_i * var_INaCa_i__k8_i + (var_INaCa_i__k6_i + var_INaCa_i__k7_i) * var_INaCa_i__k1_i * var_INaCa_i__k3_i; // dimensionless
        const double var_INaCa_i__x3_ss = (var_INaCa_i__k2_ss + var_INaCa_i__k3_ss) * var_INaCa_i__k6_ss * var_INaCa_i__k8_ss + (var_INaCa_i__k6_ss + var_INaCa_i__k7_ss) * var_INaCa_i__k1_ss * var_INaCa_i__k3_ss; // dimensionless
        const double var_INaCa_i__x4_i = (var_INaCa_i__k1_i + var_INaCa_i__k8_i) * var_INaCa_i__k3_i * var_INaCa_i__k5_i + (var_INaCa_i__k4_i + var_INaCa_i__k5_i) * var_INaCa_i__k2_i * var_INaCa_i__k8_i; // dimensionless
        const double var_INaCa_i__E1_i = var_INaCa_i__x1_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E2_i = var_INaCa_i__x2_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E3_i = var_INaCa_i__x3_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__E4_i = var_INaCa_i__x4_i / (var_INaCa_i__x1_i + var_INaCa_i__x2_i + var_INaCa_i__x3_i + var_INaCa_i__x4_i); // dimensionless
        const double var_INaCa_i__JncxCa_i = var_INaCa_i__E2_i * var_INaCa_i__k2_i - var_INaCa_i__E1_i * var_INaCa_i__k1_i; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_i = var_INaCa_i__E3_i * var_INaCa_i__k4pp_i - var_INaCa_i__E2_i * var_INaCa_i__k3pp_i + 3.0 * var_INaCa_i__E4_i * var_INaCa_i__k7_i - 3.0 * var_INaCa_i__E1_i * var_INaCa_i__k8_i; // millimolar_per_millisecond
        const double var_INaCa_i__x4_ss = (var_INaCa_i__k1_ss + var_INaCa_i__k8_ss) * var_INaCa_i__k3_ss * var_INaCa_i__k5_ss + (var_INaCa_i__k4_ss + var_INaCa_i__k5_ss) * var_INaCa_i__k2_ss * var_INaCa_i__k8_ss; // dimensionless
        const double var_INaCa_i__E1_ss = var_INaCa_i__x1_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E2_ss = var_INaCa_i__x2_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E3_ss = var_INaCa_i__x3_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__E4_ss = var_INaCa_i__x4_ss / (var_INaCa_i__x1_ss + var_INaCa_i__x2_ss + var_INaCa_i__x3_ss + var_INaCa_i__x4_ss); // dimensionless
        const double var_INaCa_i__JncxCa_ss = var_INaCa_i__E2_ss * var_INaCa_i__k2_ss - var_INaCa_i__E1_ss * var_INaCa_i__k1_ss; // millimolar_per_millisecond
        const double var_INaCa_i__JncxNa_ss = var_INaCa_i__E3_ss * var_INaCa_i__k4pp_ss - var_INaCa_i__E2_ss * var_INaCa_i__k3pp_ss + 3.0 * var_INaCa_i__E4_ss * var_INaCa_i__k7_ss - 3.0 * var_INaCa_i__E1_ss * var_INaCa_i__k8_ss; // millimolar_per_millisecond
        const double var_INaK__Knai = var_INaK__Knai0 * exp(0.33333333333333331 * var_INaK__delta * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // millimolar
        const double var_INaK__Knao = var_INaK__Knao0 * exp(0.33333333333333331 * (1.0 - var_INaK__delta) * var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19])); // millimolar
        const double var_INaK__a1 = pow(var_chaste_interface__intracellular_ions__nai, 3) * var_INaK__k1p / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Knai, 3)); // dimensionless
        const double var_INaK__a3 = pow(mParameters[3], 2) * var_INaK__k3p / ((-1.0 + pow((1.0 + mParameters[3] / var_INaK__Kko), 2) + pow((1.0 + mParameters[4] / var_INaK__Knao), 3)) * pow(var_INaK__Kko, 2)); // dimensionless
        const double var_INaK__b2 = pow(mParameters[4], 3) * var_INaK__k2m / ((-1.0 + pow((1.0 + mParameters[3] / var_INaK__Kko), 2) + pow((1.0 + mParameters[4] / var_INaK__Knao), 3)) * pow(var_INaK__Knao, 3)); // dimensionless
        const double var_INaK__b4 = pow(var_chaste_interface__intracellular_ions__ki, 2) * var_INaK__k4m / ((-1.0 + pow((1.0 + var_chaste_interface__intracellular_ions__ki / var_INaK__Kki), 2) + pow((1.0 + var_chaste_interface__intracellular_ions__nai / var_INaK__Knai), 3)) * pow(var_INaK__Kki, 2)); // dimensionless
        const double var_INaK__x1 = var_INaK__a1 * var_INaK__a2 * var_INaK__a4 + var_INaK__a1 * var_INaK__a2 * var_INaK__b3 + var_INaK__a2 * var_INaK__b3 * var_INaK__b4 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__x2 = var_INaK__a1 * var_INaK__a2 * var_INaK__a3 + var_INaK__a2 * var_INaK__a3 * var_INaK__b4 + var_INaK__a3 * var_INaK__b1 * var_INaK__b4 + var_INaK__b1 * var_INaK__b2 * var_INaK__b4; // dimensionless
        const double var_INaK__x3 = var_INaK__a2 * var_INaK__a3 * var_INaK__a4 + var_INaK__a3 * var_INaK__a4 * var_INaK__b1 + var_INaK__a4 * var_INaK__b1 * var_INaK__b2 + var_INaK__b1 * var_INaK__b2 * var_INaK__b3; // dimensionless
        const double var_INaK__x4 = var_INaK__a1 * var_INaK__a3 * var_INaK__a4 + var_INaK__a1 * var_INaK__a4 * var_INaK__b2 + var_INaK__a1 * var_INaK__b2 * var_INaK__b3 + var_INaK__b2 * var_INaK__b3 * var_INaK__b4; // dimensionless
        const double var_INaK__E1 = var_INaK__x1 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E2 = var_INaK__x2 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E3 = var_INaK__x3 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__E4 = var_INaK__x4 / (var_INaK__x1 + var_INaK__x2 + var_INaK__x3 + var_INaK__x4); // dimensionless
        const double var_INaK__JnakK = 2.0 * var_INaK__E4 * var_INaK__b1 - 2.0 * var_INaK__E3 * var_INaK__a1; // millimolar_per_millisecond
        const double var_INaK__JnakNa = 3.0 * var_INaK__E1 * var_INaK__a3 - 3.0 * var_INaK__E2 * var_INaK__b3; // millimolar_per_millisecond
        const double var_membrane__vffrt = pow(mParameters[5], 2) * var_chaste_interface__membrane__v / (mParameters[6] * mParameters[19]); // coulomb_per_mole
        const double var_membrane__vfrt = var_chaste_interface__membrane__v * mParameters[5] / (mParameters[6] * mParameters[19]); // dimensionless
        const double var_ICaL__PhiCaK = (-0.75 * mParameters[3] + 0.75 * var_chaste_interface__intracellular_ions__kss * exp(var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaK = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaK * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaKp * var_ICaL__PhiCaK * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaK_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaK; // uA_per_cm2
        const double var_ICaL__PhiCaL = 4.0 * (-0.34100000000000003 * mParameters[2] + var_chaste_interface__intracellular_ions__cass * exp(2.0 * var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(2.0 * var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaL = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCa * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCap * var_ICaL__PhiCaL * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaL_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaL; // uA_per_cm2
        const double var_ICaL__PhiCaNa = (-0.75 * mParameters[4] + 0.75 * var_chaste_interface__intracellular_ions__nass * exp(var_membrane__vfrt)) * var_membrane__vffrt / (-1.0 + exp(var_membrane__vfrt)); // dimensionless
        const double var_ICaL__ICaNa = (1.0 - var_ICaL__fICaLp) * ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__f + var_ICaL__fca * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNa * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d + ((1.0 - var_chaste_interface__ICaL__nca) * var_ICaL__fp + var_ICaL__fcap * var_chaste_interface__ICaL__jca * var_chaste_interface__ICaL__nca) * var_ICaL__PCaNap * var_ICaL__PhiCaNa * var_chaste_interface__ICaL__d * var_ICaL__fICaLp; // microA_per_microF
        const double var_ICaL__ICaNa_converted = HeartConfig::Instance()->GetCapacitance() * var_ICaL__ICaNa; // uA_per_cm2
        const double var_ICab__ICab = 4.0 * (-0.34100000000000003 * mParameters[2] + var_chaste_interface__intracellular_ions__cai * exp(2.0 * var_membrane__vfrt)) * mParameters[8] * var_membrane__vffrt / (-1.0 + exp(2.0 * var_membrane__vfrt)); // microA_per_microF
        const double var_ICab__ICab_converted = HeartConfig::Instance()->GetCapacitance() * var_ICab__ICab; // uA_per_cm2
        const double var_physical_constants__zca = 2.0; // dimensionless
        const double var_physical_constants__zk = 1.0; // dimensionless
        const double var_physical_constants__zna = 1.0; // dimensionless
        const double var_INaCa_i__INaCa_i = 0.80000000000000004 * (var_INaCa_i__JncxCa_i * var_physical_constants__zca + var_INaCa_i__JncxNa_i * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_i; // microA_per_microF
        const double var_INaCa_i__INaCa_i_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__INaCa_i; // uA_per_cm2
        const double var_INaCa_i__INaCa_ss = 0.20000000000000001 * (var_INaCa_i__JncxCa_ss * var_physical_constants__zca + var_INaCa_i__JncxNa_ss * var_physical_constants__zna) * var_INaCa_i__Gncx * var_INaCa_i__allo_ss; // microA_per_microF
        const double var_INaCa_i__INaCa_ss_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa_i__INaCa_ss; // uA_per_cm2
        const double var_INaK__INaK = (var_INaK__JnakK * var_physical_constants__zk + var_INaK__JnakNa * var_physical_constants__zna) * var_INaK__Pnak; // microA_per_microF
        const double var_INaK__INaK_converted = HeartConfig::Instance()->GetCapacitance() * var_INaK__INaK; // uA_per_cm2
        const double var_reversal_potentials__EK = mParameters[6] * mParameters[19] * log(mParameters[3] / var_chaste_interface__intracellular_ions__ki) / mParameters[5]; // millivolt
        const double var_IK1__IK1 = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IK1__GK1_total * var_IK1__rk1 * var_chaste_interface__IK1__xk1; // microA_per_microF
        const double var_IK1__IK1_converted = HeartConfig::Instance()->GetCapacitance() * var_IK1__IK1; // uA_per_cm2
        const double var_IKb__IKb = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKb__GKb * var_IKb__xkb; // microA_per_microF
        const double var_IKb__IKb_converted = HeartConfig::Instance()->GetCapacitance() * var_IKb__IKb; // uA_per_cm2
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__membrane__v) * var_IKr__GKr_total * var_IKr__rkr * var_IKr__xr; // microA_per_microF
        const double var_IKr__IKr_converted = HeartConfig::Instance()->GetCapacitance() * var_IKr__IKr; // uA_per_cm2
        const double var_reversal_potentials__ENa = mParameters[6] * mParameters[19] * log(mParameters[4] / var_chaste_interface__intracellular_ions__nai) / mParameters[5]; // millivolt
        const double var_INa__INa = pow(var_chaste_interface__INa__m, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INa__fINap) * var_INa__h * var_chaste_interface__INa__j + var_INa__fINap * var_INa__hp * var_chaste_interface__INa__jp) * mParameters[11]; // microA_per_microF
        const double var_INa__INa_converted = HeartConfig::Instance()->GetCapacitance() * var_INa__INa; // uA_per_cm2
        const double var_INaL__INaL = (-var_reversal_potentials__ENa + var_chaste_interface__membrane__v) * ((1.0 - var_INaL__fINaLp) * var_chaste_interface__INaL__hL + var_INaL__fINaLp * var_chaste_interface__INaL__hLp) * var_INaL__GNaL * var_chaste_interface__INaL__mL; // microA_per_microF
        const double var_INaL__INaL_converted = HeartConfig::Instance()->GetCapacitance() * var_INaL__INaL; // uA_per_cm2
        const double var_reversal_potentials__PKNa = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = mParameters[6] * mParameters[19] * log((mParameters[4] * var_reversal_potentials__PKNa + mParameters[3]) / (var_chaste_interface__intracellular_ions__nai * var_reversal_potentials__PKNa + var_chaste_interface__intracellular_ions__ki)) / mParameters[5]; // millivolt
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__membrane__v) * var_IKs__GKs_total * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // microA_per_microF
        const double var_IKs__IKs_converted = HeartConfig::Instance()->GetCapacitance() * var_IKs__IKs; // uA_per_cm2
        const double var_ryr__fJrelp = 1 / (1.0 + var_CaMK__KmCaMK / var_CaMK__CaMKa); // dimensionless
        const double var_ryr__Jrel = ((1.0 - var_ryr__fJrelp) * var_chaste_interface__ryr__Jrelnp + var_chaste_interface__ryr__Jrelp * var_ryr__fJrelp) * mParameters[0]; // millimolar_per_millisecond

        std::vector<double> dqs(29);
        dqs[0] = var_SERCA__Jleak;
        dqs[1] = var_ryr__Jrel;
        dqs[2] = var_SERCA__Jup;
        dqs[3] = var_intracellular_ions__Bcai;
        dqs[4] = var_intracellular_ions__Bcass;
        dqs[5] = var_ICaL__ICaK_converted;
        dqs[6] = var_ICaL__ICaNa_converted;
        dqs[7] = var_ICaL__ICaL_converted;
        dqs[8] = var_ICab__ICab_converted;
        dqs[9] = var_IKb__IKb_converted;
        dqs[10] = var_IpCa__IpCa_converted;
        dqs[11] = var_INa__INa_converted;
        dqs[12] = var_INa__h;
        dqs[13] = var_IK1__IK1_converted;
        dqs[14] = var_IK1__GK1_total;
        dqs[15] = var_INaL__INaL_converted;
        dqs[16] = var_INaL__GNaL;
        dqs[17] = var_IKr__IKr_converted;
        dqs[18] = var_IKr__GKr_total;
        dqs[19] = var_IKs__IKs_converted;
        dqs[20] = var_IKs__GKs_total;
        dqs[21] = var_INaCa_i__INaCa_i_converted;
        dqs[22] = var_INaCa_i__INaCa_ss_converted;
        dqs[23] = var_INaK__INaK_converted;
        dqs[24] = var_membrane__Istim_converted;
        dqs[25] = var_Ito__Gto;
        dqs[26] = var_reversal_potentials__EK;
        dqs[27] = var_reversal_potentials__ENa;
        dqs[28] = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellohara_rudy_2011_epiFromCellMLGRL1>::Initialise(void)
{
    this->mSystemName = "ohara_rudy_2011_epi";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-87.0);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0001);

    // rY[2]:
    this->mVariableNames.push_back("CaMK__CaMKt");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0);

    // rY[3]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.0);

    // rY[4]:
    this->mVariableNames.push_back("dyadic_space_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(7.0);

    // rY[5]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(145.0);

    // rY[6]:
    this->mVariableNames.push_back("dyadic_space_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(145.0);

    // rY[7]:
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0001);

    // rY[8]:
    this->mVariableNames.push_back("NSR_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.2);

    // rY[9]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.2);

    // rY[10]:
    this->mVariableNames.push_back("INa__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[11]:
    this->mVariableNames.push_back("INa__hf");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[12]:
    this->mVariableNames.push_back("INa__hs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[13]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[14]:
    this->mVariableNames.push_back("INa__hsp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[15]:
    this->mVariableNames.push_back("INa__jp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[16]:
    this->mVariableNames.push_back("INaL__mL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[17]:
    this->mVariableNames.push_back("INaL__hL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[18]:
    this->mVariableNames.push_back("INaL__hLp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[19]:
    this->mVariableNames.push_back("Ito__a");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[20]:
    this->mVariableNames.push_back("Ito__iF");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[21]:
    this->mVariableNames.push_back("Ito__iS");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[22]:
    this->mVariableNames.push_back("Ito__ap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[23]:
    this->mVariableNames.push_back("Ito__iFp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[24]:
    this->mVariableNames.push_back("Ito__iSp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[25]:
    this->mVariableNames.push_back("ICaL__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[26]:
    this->mVariableNames.push_back("ICaL__ff");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[27]:
    this->mVariableNames.push_back("ICaL__fs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[28]:
    this->mVariableNames.push_back("ICaL__fcaf");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[29]:
    this->mVariableNames.push_back("ICaL__fcas");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[30]:
    this->mVariableNames.push_back("ICaL__jca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[31]:
    this->mVariableNames.push_back("ICaL__ffp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[32]:
    this->mVariableNames.push_back("ICaL__fcafp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[33]:
    this->mVariableNames.push_back("ICaL__nca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[34]:
    this->mVariableNames.push_back("IKr__xrf");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[35]:
    this->mVariableNames.push_back("IKr__xrs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[36]:
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[37]:
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[38]:
    this->mVariableNames.push_back("IK1__xk1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[39]:
    this->mVariableNames.push_back("ryr__Jrelnp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[40]:
    this->mVariableNames.push_back("ryr__Jrelp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[2]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[5]:
    this->mParameterNames.push_back("faraday_constant");
    this->mParameterUnits.push_back("coulomb_per_mole");

    // mParameters[6]:
    this->mParameterNames.push_back("gas_constant");
    this->mParameterUnits.push_back("joule_per_kilomole_kelvin");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_background_calcium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_background_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_calcium_pump_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_persistent_sodium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_sodium_potassium_pump_current_permeability");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[18]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[19]:
    this->mParameterNames.push_back("temperature");
    this->mParameterUnits.push_back("kelvin");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_leak_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("SR_uptake_current");
    this->mDerivedQuantityUnits.push_back("millimolar_per_millisecond");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_flux_scaling_from_intrinsic_buffers");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("dyadic_space_calcium_flux_scaling_from_intrinsic_buffers");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_channel_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_channel_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_background_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_background_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_calcium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mDerivedQuantityUnits.push_back("dimensionless");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_persistent_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("membrane_persistent_sodium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [17]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [18]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [19]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [20]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [21]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [22]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_dyadic_space_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [23]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [24]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [25]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current_conductance");
    this->mDerivedQuantityUnits.push_back("milliS_per_microF");

    // Derived Quantity index [26]:
    this->mDerivedQuantityNames.push_back("potassium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("millivolt");

    // Derived Quantity index [27]:
    this->mDerivedQuantityNames.push_back("sodium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("millivolt");

    // Derived Quantity index [28]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellohara_rudy_2011_epiFromCellMLGRL1)

