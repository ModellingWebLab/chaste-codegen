//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: grandi_pasqualini_bers_2010
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: GeneralizedRushLarsenFirstOrder)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "grandi_pasqualini_bers_2010_ss.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"


    boost::shared_ptr<RegularStimulus> Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane_potential__stim_amplitude_converted = -9.5 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane_potential__stim_duration = 5.0; // msec
        const double var_chaste_interface__membrane_potential__stim_period = 1000.0; // msec
        const double var_chaste_interface__membrane_potential__stim_start = 100.0; // msec
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane_potential__stim_amplitude_converted),
                var_chaste_interface__membrane_potential__stim_duration,
                var_chaste_interface__membrane_potential__stim_period,
                var_chaste_interface__membrane_potential__stim_start
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractGeneralizedRushLarsenCardiacCell(
                39,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 5.3480000000000003e-6; // (var_SR_Fluxes__SR_leak_max) [per_msec]
        this->mParameters[1] = 25.0; // (var_parameters__ks) [per_msec]
        this->mParameters[2] = 0.0053114; // (var_parameters__Vmax_SRCaP) [mM_per_msec]
        this->mParameters[3] = 1.0; // (var_Na_Concentrations__conc_clamp) [dimensionless]
        this->mParameters[4] = 15.0; // (var_parameters__Cli) [mM]
        this->mParameters[5] = 1.8; // (var_parameters__Cao) [mM]
        this->mParameters[6] = 150.0; // (var_parameters__Clo) [mM]
        this->mParameters[7] = 5.4000000000000004; // (var_parameters__Ko) [mM]
        this->mParameters[8] = 140.0; // (var_parameters__Nao) [mM]
        this->mParameters[9] = 96485.0; // (var_parameters__Frdy) [coulomb_per_mole]
        this->mParameters[10] = 8314.0; // (var_parameters__R) [joule_per_kelvin_per_kilomole]
        this->mParameters[11] = 0.5; // (var_parameters__pCa_max) [cm_per_sec]
        this->mParameters[12] = 23.0; // (var_parameters__GNa) [mS_per_uF]
        this->mParameters[13] = 0; // (var_I_Na__perc_reduced_inact_for_IpNa) [dimensionless]
        this->mParameters[14] = 0; // (var_I_Na__shift_INa_inact) [mV]
        this->mParameters[15] = 1.0; // (var_I_to__GtoFast_factor) [dimensionless]
        this->mParameters[16] = 0.34999999999999998; // (var_I_Ki__g_ki_factor) [mS_per_uF]
        this->mParameters[17] = 0.035000000000000003; // (var_I_Kr__gkr_max) [mS_per_uF]
        this->mParameters[18] = 1.0; // (var_I_Ks__GKs_factor) [dimensionless]
        this->mParameters[19] = 1.0; // (var_I_to__GtoSlow_factor) [dimensionless]
        this->mParameters[20] = 4.5; // (var_parameters__IbarNCX) [uA_per_uF]
        this->mParameters[21] = 1.8; // (var_parameters__IbarNaK) [uA_per_uF]
        this->mParameters[22] = 1.3809999999999999e-10; // (var_parameters__Cmem) [farad]
        this->mParameters[23] = 310.0; // (var_parameters__Temp) [kelvin]
    }

    Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::~Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1()
    {
    }

    
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Na__m = rY[2];
        // Units: dimensionless; Initial value: 0.00381858135062259
        double var_chaste_interface__I_Na__h = rY[3];
        // Units: dimensionless; Initial value: 0.625086621635645
        double var_chaste_interface__I_Na__j = rY[4];
        // Units: dimensionless; Initial value: 0.62332507235506
        double var_chaste_interface__I_Kr__x_kr = rY[5];
        // Units: dimensionless; Initial value: 0.021733554982663
        double var_chaste_interface__I_Ks__x_ks = rY[6];
        // Units: dimensionless; Initial value: 0.00428981903391989
        double var_chaste_interface__I_to__x_to_s = rY[7];
        // Units: dimensionless; Initial value: 0.000441539203559411
        double var_chaste_interface__I_to__y_to_s = rY[8];
        // Units: dimensionless; Initial value: 0.784875334693892
        double var_chaste_interface__I_to__x_to_f = rY[9];
        // Units: dimensionless; Initial value: 0.000441531250866821
        double var_chaste_interface__I_to__y_to_f = rY[10];
        // Units: dimensionless; Initial value: 0.999995817153572
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
        // Units: dimensionless; Initial value: 0.0246142436477748
        double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
        // Units: dimensionless; Initial value: 0.0152416826209301
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Na_Concentrations__Na_i = rY[35];
        // Units: mM; Initial value: 8.32114502072456
        double var_chaste_interface__K_Concentration__K_i = rY[36];
        // Units: mM; Initial value: 120.0
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        
        const double var_I_Ca__fcaCaMSL = 0; // dimensionless
        const double var_I_Ca__fcaCaj = 0; // dimensionless
        const double var_I_Ks__gks_junc = 0.0035000000000000001; // mS_per_uF
        const double var_I_Ks__gks_sl = 0.0035000000000000001; // mS_per_uF
        const double var_I_Kp__kp_kp = 1 / (1.0 + exp(7.4880000000000004 - 0.16722408026755853 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double var_I_Kr__rkr = 1 / (1.0 + exp(3.0833333333333335 + 0.041666666666666664 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double var_parameters__Fjunc = 0.11; // dimensionless
        const double var_parameters__Fjunc_CaL = 0.90000000000000002; // dimensionless
        const double var_parameters__Fsl = 1.0 - var_parameters__Fjunc; // dimensionless
        const double var_I_Ks__GKs_total = (var_I_Ks__gks_junc * var_parameters__Fjunc + var_I_Ks__gks_sl * var_parameters__Fsl) * mParameters[18]; // mS_per_uF
        const double var_parameters__Fsl_CaL = 1.0 - var_parameters__Fjunc_CaL; // dimensionless
        const double var_parameters__GCaB = 0.00055130000000000001; // mS_per_uF
        const double var_parameters__GClB = 0.0089999999999999993; // mS_per_uF
        const double var_parameters__GClCa = 0.0548125; // mS_per_uF
        const double var_parameters__GNaB = 0.00059699999999999998; // mS_per_uF
        const double var_parameters__IbarSLCaP = 0.067299999999999999; // uA_per_uF
        const double var_parameters__KdClCa = 0.10000000000000001; // mM
        const double var_parameters__Kdact = 0.00014999999999999999; // mM
        const double var_I_NCX__Ka_junc = 1 / (1.0 + pow(var_parameters__Kdact, 2) / pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2)); // dimensionless
        const double var_I_NCX__Ka_sl = 1 / (1.0 + pow(var_parameters__Kdact, 2) / pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 2)); // dimensionless
        const double var_parameters__KmCai = 0.0035899999999999999; // mM
        const double var_parameters__KmCao = 1.3; // mM
        const double var_parameters__KmKo = 1.5; // mM
        const double var_parameters__KmNai = 12.289999999999999; // mM
        const double var_parameters__KmNaip = 11.0; // mM
        const double var_parameters__KmNao = 87.5; // mM
        const double var_parameters__KmPCa = 0.00050000000000000001; // mM
        const double var_I_Ki__g_K1 = 0.43033148291193518 * sqrt(mParameters[7]) * mParameters[16]; // mS_per_uF
        const double var_I_Kr__gkr = 0.43033148291193518 * sqrt(mParameters[7]) * mParameters[17]; // mS_per_uF
        const double var_I_NCX__s3_junc = pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * var_parameters__KmCao + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j + pow(var_parameters__KmNao, 3) * (1.0 + var_chaste_interface__Ca_Concentrations__Ca_j / var_parameters__KmCai) * var_chaste_interface__Ca_Concentrations__Ca_j + pow(mParameters[8], 3) * (1.0 + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) / pow(var_parameters__KmNai, 3)) * var_parameters__KmCai; // mM4
        const double var_I_NCX__s3_sl = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * var_parameters__KmCao + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl + pow(var_parameters__KmNao, 3) * (1.0 + var_chaste_interface__Ca_Concentrations__Ca_sl / var_parameters__KmCai) * var_chaste_interface__Ca_Concentrations__Ca_sl + pow(mParameters[8], 3) * (1.0 + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) / pow(var_parameters__KmNai, 3)) * var_parameters__KmCai; // mM4
        const double var_I_NaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[8]); // dimensionless
        const double var_parameters__Q10CaL = 1.8; // dimensionless
        const double var_parameters__Q10NCX = 1.5700000000000001; // dimensionless
        const double var_parameters__Q10SLCaP = 2.3500000000000001; // dimensionless
        const double var_I_Ca__ibark = ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (1.35e-7 * pow(mParameters[9], 2) * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__ibarna_j = ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__ibarna_sl = ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_I_NaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) + 0.036499999999999998 * var_I_NaK__sigma * exp(-var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)); // dimensionless
        const double var_I_NaK__I_nak_junc = var_I_NaK__fnak * var_parameters__Fjunc * mParameters[21] * mParameters[7] / ((1.0 + pow(var_parameters__KmNaip, 4) / pow(var_chaste_interface__Na_Concentrations__Na_j, 4)) * (var_parameters__KmKo + mParameters[7])); // uA_per_uF
        const double var_I_NaK__I_nak_sl = var_I_NaK__fnak * var_parameters__Fsl * mParameters[21] * mParameters[7] / ((1.0 + pow(var_parameters__KmNaip, 4) / pow(var_chaste_interface__Na_Concentrations__Na_sl, 4)) * (var_parameters__KmKo + mParameters[7])); // uA_per_uF
        const double var_I_NaK__I_nak = var_I_NaK__I_nak_junc + var_I_NaK__I_nak_sl; // uA_per_uF
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_I_Ca__I_CaK = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * ((1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * var_parameters__Fjunc_CaL + (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * var_parameters__Fsl_CaL) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibark; // uA_per_uF
        const double var_I_Ca__I_CaNa_junc = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarna_j * var_parameters__Fjunc_CaL; // uA_per_uF
        const double var_I_Ca__I_CaNa_sl = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarna_sl * var_parameters__Fsl_CaL; // uA_per_uF
        const double var_I_PCa__I_pca_junc = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) * pow(var_parameters__Q10SLCaP, var_parameters__Qpow) * var_parameters__Fjunc * var_parameters__IbarSLCaP / (pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) + pow(var_parameters__KmPCa, 1.6000000000000001)); // uA_per_uF
        const double var_I_PCa__I_pca_sl = pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) * pow(var_parameters__Q10SLCaP, var_parameters__Qpow) * var_parameters__Fsl * var_parameters__IbarSLCaP / (pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) + pow(var_parameters__KmPCa, 1.6000000000000001)); // uA_per_uF
        const double var_parameters__eca_junc = 0.5 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_j) / var_parameters__FoRT; // mV
        const double var_I_CaBK__I_cabk_junc = (-var_parameters__eca_junc + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fjunc * var_parameters__GCaB; // uA_per_uF
        const double var_parameters__eca_sl = 0.5 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_sl) / var_parameters__FoRT; // mV
        const double var_I_CaBK__I_cabk_sl = (-var_parameters__eca_sl + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fsl * var_parameters__GCaB; // uA_per_uF
        const double var_parameters__ecl = log(mParameters[4] / mParameters[6]) / var_parameters__FoRT; // mV
        const double var_I_ClCa__I_ClCa_junc = (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fjunc * var_parameters__GClCa / (1.0 + var_parameters__KdClCa / var_chaste_interface__Ca_Concentrations__Ca_j); // uA_per_uF
        const double var_I_ClCa__I_ClCa_sl = (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fsl * var_parameters__GClCa / (1.0 + var_parameters__KdClCa / var_chaste_interface__Ca_Concentrations__Ca_sl); // uA_per_uF
        const double var_I_ClCa__I_ClCa = var_I_ClCa__I_ClCa_junc + var_I_ClCa__I_ClCa_sl; // uA_per_uF
        const double var_I_ClCa__I_Clbk = (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) * var_parameters__GClB; // uA_per_uF
        const double var_membrane_potential__I_Cl_tot = var_I_ClCa__I_ClCa + var_I_ClCa__I_Clbk; // uA_per_uF
        const double var_parameters__ek = log(mParameters[7] / var_chaste_interface__K_Concentration__K_i) / var_parameters__FoRT; // mV
        const double var_I_Ki__aki = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane_potential__V_m - 0.23849999999999999 * var_parameters__ek)); // dimensionless
        const double var_I_Ki__bki = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane_potential__V_m - 0.080320000000000003 * var_parameters__ek) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane_potential__V_m - 0.061749999999999999 * var_parameters__ek)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_parameters__ek - 0.51429999999999998 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double var_I_Ki__kiss = var_I_Ki__aki / (var_I_Ki__aki + var_I_Ki__bki); // dimensionless
        const double var_I_Ki__I_ki = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Ki__g_K1 * var_I_Ki__kiss; // uA_per_uF
        const double var_I_Kr__I_kr = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Kr__gkr * var_I_Kr__rkr * var_chaste_interface__I_Kr__x_kr; // uA_per_uF
        const double var_parameters__ena_junc = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_j) / var_parameters__FoRT; // mV
        const double var_I_Na__I_Na_junc = pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * var_parameters__Fjunc * mParameters[12]; // uA_per_uF
        const double var_I_NaBK__I_nabk_junc = (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fjunc * var_parameters__GNaB; // uA_per_uF
        const double var_parameters__ena_sl = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_sl) / var_parameters__FoRT; // mV
        const double var_I_Na__I_Na_sl = pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * var_parameters__Fsl * mParameters[12]; // uA_per_uF
        const double var_I_NaBK__I_nabk_sl = (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fsl * var_parameters__GNaB; // uA_per_uF
        const double var_parameters__epi = 1.0; // dimensionless
        const double var_I_to__GtoFast = ((var_parameters__epi == 1.0) ? (0.1144 * mParameters[15]) : (0.0014039999999999999 * mParameters[15])); // mS_per_uF
        const double var_I_to__GtoSlow = ((var_parameters__epi == 1.0) ? (0.015599999999999999 * mParameters[19]) : (0.037595999999999997 * mParameters[19])); // mS_per_uF
        const double var_I_to__I_tof = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_to__GtoFast * var_chaste_interface__I_to__x_to_f * var_chaste_interface__I_to__y_to_f; // uA_per_uF
        const double var_I_to__I_tos = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_to__GtoSlow * var_chaste_interface__I_to__x_to_s * var_chaste_interface__I_to__y_to_s; // uA_per_uF
        const double var_I_to__I_to = var_I_to__I_tof + var_I_to__I_tos; // uA_per_uF
        const double var_parameters__gkp = 0.002; // mS_per_uF
        const double var_I_Kp__I_kp_junc = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Kp__kp_kp * var_parameters__Fjunc * var_parameters__gkp; // uA_per_uF
        const double var_I_Kp__I_kp_sl = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Kp__kp_kp * var_parameters__Fsl * var_parameters__gkp; // uA_per_uF
        const double var_I_Kp__I_kp = var_I_Kp__I_kp_junc + var_I_Kp__I_kp_sl; // uA_per_uF
        const double var_parameters__ksat = 0.32000000000000001; // dimensionless
        const double var_parameters__nu = 0.27000000000000002; // dimensionless
        const double var_I_NCX__s1_junc = pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] * exp(var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT * var_parameters__nu); // mM4
        const double var_I_NCX__s1_sl = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] * exp(var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT * var_parameters__nu); // mM4
        const double var_I_NCX__s2_junc = pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT); // mM4
        const double var_I_NCX__I_ncx_junc = pow(var_parameters__Q10NCX, var_parameters__Qpow) * (-var_I_NCX__s2_junc + var_I_NCX__s1_junc) * var_I_NCX__Ka_junc * var_parameters__Fjunc * mParameters[20] / ((1.0 + var_parameters__ksat * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * var_I_NCX__s3_junc); // uA_per_uF
        const double var_I_NCX__s2_sl = pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT); // mM4
        const double var_I_NCX__I_ncx_sl = pow(var_parameters__Q10NCX, var_parameters__Qpow) * (-var_I_NCX__s2_sl + var_I_NCX__s1_sl) * var_I_NCX__Ka_sl * var_parameters__Fsl * mParameters[20] / ((1.0 + var_parameters__ksat * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * var_I_NCX__s3_sl); // uA_per_uF
        const double var_Na_Concentrations__I_Na_tot_junc = 3.0 * var_I_NCX__I_ncx_junc + 3.0 * var_I_NaK__I_nak_junc + var_I_Ca__I_CaNa_junc + var_I_Na__I_Na_junc + var_I_NaBK__I_nabk_junc; // uA_per_uF
        const double var_Na_Concentrations__I_Na_tot_sl = 3.0 * var_I_NCX__I_ncx_sl + 3.0 * var_I_NaK__I_nak_sl + var_I_Ca__I_CaNa_sl + var_I_Na__I_Na_sl + var_I_NaBK__I_nabk_sl; // uA_per_uF
        const double var_membrane_potential__I_Na_tot = var_Na_Concentrations__I_Na_tot_junc + var_Na_Concentrations__I_Na_tot_sl; // uA_per_uF
        const double var_I_Ca__ibarca_j = ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__I_Ca_junc = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarca_j * var_parameters__Fjunc_CaL; // uA_per_uF
        const double var_Ca_Concentrations__I_Ca_tot_junc = -2.0 * var_I_NCX__I_ncx_junc + var_I_Ca__I_Ca_junc + var_I_CaBK__I_cabk_junc + var_I_PCa__I_pca_junc; // uA_per_uF
        const double var_I_Ca__ibarca_sl = ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__I_Ca_sl = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarca_sl * var_parameters__Fsl_CaL; // uA_per_uF
        const double var_Ca_Concentrations__I_Ca_tot_sl = -2.0 * var_I_NCX__I_ncx_sl + var_I_Ca__I_Ca_sl + var_I_CaBK__I_cabk_sl + var_I_PCa__I_pca_sl; // uA_per_uF
        const double var_membrane_potential__I_Ca_tot = var_Ca_Concentrations__I_Ca_tot_junc + var_Ca_Concentrations__I_Ca_tot_sl; // uA_per_uF
        const double var_parameters__pNaK = 0.018329999999999999; // dimensionless
        const double var_I_Ks__eks = log((mParameters[8] * var_parameters__pNaK + mParameters[7]) / (var_chaste_interface__Na_Concentrations__Na_i * var_parameters__pNaK + var_chaste_interface__K_Concentration__K_i)) / var_parameters__FoRT; // mV
        const double var_I_Ks__I_ks = pow(var_chaste_interface__I_Ks__x_ks, 2) * (-var_I_Ks__eks + var_chaste_interface__membrane_potential__V_m) * var_I_Ks__GKs_total; // uA_per_uF
        const double var_K_Concentration__I_K_tot = -2.0 * var_I_NaK__I_nak + var_I_Ca__I_CaK + var_I_Ki__I_ki + var_I_Kp__I_kp + var_I_Kr__I_kr + var_I_Ks__I_ks + var_I_to__I_to; // uA_per_uF
        const double var_membrane_potential__I_tot = var_K_Concentration__I_K_tot + var_membrane_potential__I_Ca_tot + var_membrane_potential__I_Cl_tot + var_membrane_potential__I_Na_tot; // uA_per_uF
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_membrane_potential__I_tot; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        unsigned v_index = GetVoltageIndex();
        const double delta = 1e-8;

        double d_dt_chaste_interface_var_membrane_potential__V_m;
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Na__m = rY[2];
        // Units: dimensionless; Initial value: 0.00381858135062259
        double var_chaste_interface__I_Na__h = rY[3];
        // Units: dimensionless; Initial value: 0.625086621635645
        double var_chaste_interface__I_Na__j = rY[4];
        // Units: dimensionless; Initial value: 0.62332507235506
        double var_chaste_interface__I_Kr__x_kr = rY[5];
        // Units: dimensionless; Initial value: 0.021733554982663
        double var_chaste_interface__I_Ks__x_ks = rY[6];
        // Units: dimensionless; Initial value: 0.00428981903391989
        double var_chaste_interface__I_to__x_to_s = rY[7];
        // Units: dimensionless; Initial value: 0.000441539203559411
        double var_chaste_interface__I_to__y_to_s = rY[8];
        // Units: dimensionless; Initial value: 0.784875334693892
        double var_chaste_interface__I_to__x_to_f = rY[9];
        // Units: dimensionless; Initial value: 0.000441531250866821
        double var_chaste_interface__I_to__y_to_f = rY[10];
        // Units: dimensionless; Initial value: 0.999995817153572
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
        // Units: dimensionless; Initial value: 0.0246142436477748
        double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
        // Units: dimensionless; Initial value: 0.0152416826209301
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Na_Concentrations__Na_i = rY[35];
        // Units: mM; Initial value: 8.32114502072456
        double var_chaste_interface__K_Concentration__K_i = rY[36];
        // Units: mM; Initial value: 120.0
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        

        // Mathematics
        const double var_I_Ca__fcaCaMSL = 0; // dimensionless
        const double var_I_Ca__fcaCaj = 0; // dimensionless
        const double var_I_Ks__gks_junc = 0.0035000000000000001; // mS_per_uF
        const double var_I_Ks__gks_sl = 0.0035000000000000001; // mS_per_uF
        const double var_I_Kp__kp_kp = 1 / (1.0 + exp(7.4880000000000004 - 0.16722408026755853 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double var_I_Kr__rkr = 1 / (1.0 + exp(3.0833333333333335 + 0.041666666666666664 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double var_membrane_potential__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_membrane_potential__i_Stim = var_membrane_potential__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_parameters__Fjunc = 0.11; // dimensionless
        const double var_parameters__Fjunc_CaL = 0.90000000000000002; // dimensionless
        const double var_parameters__Fsl = 1.0 - var_parameters__Fjunc; // dimensionless
        const double var_I_Ks__GKs_total = (var_I_Ks__gks_junc * var_parameters__Fjunc + var_I_Ks__gks_sl * var_parameters__Fsl) * mParameters[18]; // mS_per_uF
        const double var_parameters__Fsl_CaL = 1.0 - var_parameters__Fjunc_CaL; // dimensionless
        const double var_parameters__GCaB = 0.00055130000000000001; // mS_per_uF
        const double var_parameters__GClB = 0.0089999999999999993; // mS_per_uF
        const double var_parameters__GClCa = 0.0548125; // mS_per_uF
        const double var_parameters__GNaB = 0.00059699999999999998; // mS_per_uF
        const double var_parameters__IbarSLCaP = 0.067299999999999999; // uA_per_uF
        const double var_parameters__KdClCa = 0.10000000000000001; // mM
        const double var_parameters__Kdact = 0.00014999999999999999; // mM
        const double var_I_NCX__Ka_junc = 1 / (1.0 + pow(var_parameters__Kdact, 2) / pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2)); // dimensionless
        const double var_I_NCX__Ka_sl = 1 / (1.0 + pow(var_parameters__Kdact, 2) / pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 2)); // dimensionless
        const double var_parameters__KmCai = 0.0035899999999999999; // mM
        const double var_parameters__KmCao = 1.3; // mM
        const double var_parameters__KmKo = 1.5; // mM
        const double var_parameters__KmNai = 12.289999999999999; // mM
        const double var_parameters__KmNaip = 11.0; // mM
        const double var_parameters__KmNao = 87.5; // mM
        const double var_parameters__KmPCa = 0.00050000000000000001; // mM
        const double var_I_Ki__g_K1 = 0.43033148291193518 * sqrt(mParameters[7]) * mParameters[16]; // mS_per_uF
        const double var_I_Kr__gkr = 0.43033148291193518 * sqrt(mParameters[7]) * mParameters[17]; // mS_per_uF
        const double var_I_NCX__s3_junc = pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * var_parameters__KmCao + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j + pow(var_parameters__KmNao, 3) * (1.0 + var_chaste_interface__Ca_Concentrations__Ca_j / var_parameters__KmCai) * var_chaste_interface__Ca_Concentrations__Ca_j + pow(mParameters[8], 3) * (1.0 + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) / pow(var_parameters__KmNai, 3)) * var_parameters__KmCai; // mM4
        const double var_I_NCX__s3_sl = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * var_parameters__KmCao + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl + pow(var_parameters__KmNao, 3) * (1.0 + var_chaste_interface__Ca_Concentrations__Ca_sl / var_parameters__KmCai) * var_chaste_interface__Ca_Concentrations__Ca_sl + pow(mParameters[8], 3) * (1.0 + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) / pow(var_parameters__KmNai, 3)) * var_parameters__KmCai; // mM4
        const double var_I_NaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[8]); // dimensionless
        const double var_parameters__Q10CaL = 1.8; // dimensionless
        const double var_parameters__Q10NCX = 1.5700000000000001; // dimensionless
        const double var_parameters__Q10SLCaP = 2.3500000000000001; // dimensionless
        const double var_I_Ca__ibark = ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (1.35e-7 * pow(mParameters[9], 2) * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__ibarna_j = ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__ibarna_sl = ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_I_NaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) + 0.036499999999999998 * var_I_NaK__sigma * exp(-var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)); // dimensionless
        const double var_I_NaK__I_nak_junc = var_I_NaK__fnak * var_parameters__Fjunc * mParameters[21] * mParameters[7] / ((1.0 + pow(var_parameters__KmNaip, 4) / pow(var_chaste_interface__Na_Concentrations__Na_j, 4)) * (var_parameters__KmKo + mParameters[7])); // uA_per_uF
        const double var_I_NaK__I_nak_sl = var_I_NaK__fnak * var_parameters__Fsl * mParameters[21] * mParameters[7] / ((1.0 + pow(var_parameters__KmNaip, 4) / pow(var_chaste_interface__Na_Concentrations__Na_sl, 4)) * (var_parameters__KmKo + mParameters[7])); // uA_per_uF
        const double var_I_NaK__I_nak = var_I_NaK__I_nak_junc + var_I_NaK__I_nak_sl; // uA_per_uF
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_I_Ca__I_CaK = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * ((1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * var_parameters__Fjunc_CaL + (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * var_parameters__Fsl_CaL) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibark; // uA_per_uF
        const double var_I_Ca__I_CaNa_junc = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarna_j * var_parameters__Fjunc_CaL; // uA_per_uF
        const double var_I_Ca__I_CaNa_sl = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarna_sl * var_parameters__Fsl_CaL; // uA_per_uF
        const double var_I_PCa__I_pca_junc = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) * pow(var_parameters__Q10SLCaP, var_parameters__Qpow) * var_parameters__Fjunc * var_parameters__IbarSLCaP / (pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) + pow(var_parameters__KmPCa, 1.6000000000000001)); // uA_per_uF
        const double var_I_PCa__I_pca_sl = pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) * pow(var_parameters__Q10SLCaP, var_parameters__Qpow) * var_parameters__Fsl * var_parameters__IbarSLCaP / (pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) + pow(var_parameters__KmPCa, 1.6000000000000001)); // uA_per_uF
        const double var_parameters__eca_junc = 0.5 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_j) / var_parameters__FoRT; // mV
        const double var_I_CaBK__I_cabk_junc = (-var_parameters__eca_junc + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fjunc * var_parameters__GCaB; // uA_per_uF
        const double var_parameters__eca_sl = 0.5 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_sl) / var_parameters__FoRT; // mV
        const double var_I_CaBK__I_cabk_sl = (-var_parameters__eca_sl + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fsl * var_parameters__GCaB; // uA_per_uF
        const double var_parameters__ecl = log(mParameters[4] / mParameters[6]) / var_parameters__FoRT; // mV
        const double var_I_ClCa__I_ClCa_junc = (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fjunc * var_parameters__GClCa / (1.0 + var_parameters__KdClCa / var_chaste_interface__Ca_Concentrations__Ca_j); // uA_per_uF
        const double var_I_ClCa__I_ClCa_sl = (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fsl * var_parameters__GClCa / (1.0 + var_parameters__KdClCa / var_chaste_interface__Ca_Concentrations__Ca_sl); // uA_per_uF
        const double var_I_ClCa__I_ClCa = var_I_ClCa__I_ClCa_junc + var_I_ClCa__I_ClCa_sl; // uA_per_uF
        const double var_I_ClCa__I_Clbk = (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) * var_parameters__GClB; // uA_per_uF
        const double var_membrane_potential__I_Cl_tot = var_I_ClCa__I_ClCa + var_I_ClCa__I_Clbk; // uA_per_uF
        const double var_parameters__ek = log(mParameters[7] / var_chaste_interface__K_Concentration__K_i) / var_parameters__FoRT; // mV
        const double var_I_Ki__aki = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane_potential__V_m - 0.23849999999999999 * var_parameters__ek)); // dimensionless
        const double var_I_Ki__bki = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane_potential__V_m - 0.080320000000000003 * var_parameters__ek) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane_potential__V_m - 0.061749999999999999 * var_parameters__ek)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_parameters__ek - 0.51429999999999998 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double var_I_Ki__kiss = var_I_Ki__aki / (var_I_Ki__aki + var_I_Ki__bki); // dimensionless
        const double var_I_Ki__I_ki = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Ki__g_K1 * var_I_Ki__kiss; // uA_per_uF
        const double var_I_Kr__I_kr = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Kr__gkr * var_I_Kr__rkr * var_chaste_interface__I_Kr__x_kr; // uA_per_uF
        const double var_parameters__ena_junc = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_j) / var_parameters__FoRT; // mV
        const double var_I_Na__I_Na_junc = pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * var_parameters__Fjunc * mParameters[12]; // uA_per_uF
        const double var_I_NaBK__I_nabk_junc = (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fjunc * var_parameters__GNaB; // uA_per_uF
        const double var_parameters__ena_sl = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_sl) / var_parameters__FoRT; // mV
        const double var_I_Na__I_Na_sl = pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * var_parameters__Fsl * mParameters[12]; // uA_per_uF
        const double var_I_NaBK__I_nabk_sl = (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fsl * var_parameters__GNaB; // uA_per_uF
        const double var_parameters__epi = 1.0; // dimensionless
        const double var_I_to__GtoFast = ((var_parameters__epi == 1.0) ? (0.1144 * mParameters[15]) : (0.0014039999999999999 * mParameters[15])); // mS_per_uF
        const double var_I_to__GtoSlow = ((var_parameters__epi == 1.0) ? (0.015599999999999999 * mParameters[19]) : (0.037595999999999997 * mParameters[19])); // mS_per_uF
        const double var_I_to__I_tof = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_to__GtoFast * var_chaste_interface__I_to__x_to_f * var_chaste_interface__I_to__y_to_f; // uA_per_uF
        const double var_I_to__I_tos = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_to__GtoSlow * var_chaste_interface__I_to__x_to_s * var_chaste_interface__I_to__y_to_s; // uA_per_uF
        const double var_I_to__I_to = var_I_to__I_tof + var_I_to__I_tos; // uA_per_uF
        const double var_parameters__gkp = 0.002; // mS_per_uF
        const double var_I_Kp__I_kp_junc = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Kp__kp_kp * var_parameters__Fjunc * var_parameters__gkp; // uA_per_uF
        const double var_I_Kp__I_kp_sl = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Kp__kp_kp * var_parameters__Fsl * var_parameters__gkp; // uA_per_uF
        const double var_I_Kp__I_kp = var_I_Kp__I_kp_junc + var_I_Kp__I_kp_sl; // uA_per_uF
        const double var_parameters__ksat = 0.32000000000000001; // dimensionless
        const double var_parameters__nu = 0.27000000000000002; // dimensionless
        const double var_I_NCX__s1_junc = pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] * exp(var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT * var_parameters__nu); // mM4
        const double var_I_NCX__s1_sl = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] * exp(var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT * var_parameters__nu); // mM4
        const double var_I_NCX__s2_junc = pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT); // mM4
        const double var_I_NCX__I_ncx_junc = pow(var_parameters__Q10NCX, var_parameters__Qpow) * (-var_I_NCX__s2_junc + var_I_NCX__s1_junc) * var_I_NCX__Ka_junc * var_parameters__Fjunc * mParameters[20] / ((1.0 + var_parameters__ksat * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * var_I_NCX__s3_junc); // uA_per_uF
        const double var_I_NCX__s2_sl = pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT); // mM4
        const double var_I_NCX__I_ncx_sl = pow(var_parameters__Q10NCX, var_parameters__Qpow) * (-var_I_NCX__s2_sl + var_I_NCX__s1_sl) * var_I_NCX__Ka_sl * var_parameters__Fsl * mParameters[20] / ((1.0 + var_parameters__ksat * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * var_I_NCX__s3_sl); // uA_per_uF
        const double var_Na_Concentrations__I_Na_tot_junc = 3.0 * var_I_NCX__I_ncx_junc + 3.0 * var_I_NaK__I_nak_junc + var_I_Ca__I_CaNa_junc + var_I_Na__I_Na_junc + var_I_NaBK__I_nabk_junc; // uA_per_uF
        const double var_Na_Concentrations__I_Na_tot_sl = 3.0 * var_I_NCX__I_ncx_sl + 3.0 * var_I_NaK__I_nak_sl + var_I_Ca__I_CaNa_sl + var_I_Na__I_Na_sl + var_I_NaBK__I_nabk_sl; // uA_per_uF
        const double var_membrane_potential__I_Na_tot = var_Na_Concentrations__I_Na_tot_junc + var_Na_Concentrations__I_Na_tot_sl; // uA_per_uF
        const double var_I_Ca__ibarca_j = ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__I_Ca_junc = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarca_j * var_parameters__Fjunc_CaL; // uA_per_uF
        const double var_Ca_Concentrations__I_Ca_tot_junc = -2.0 * var_I_NCX__I_ncx_junc + var_I_Ca__I_Ca_junc + var_I_CaBK__I_cabk_junc + var_I_PCa__I_pca_junc; // uA_per_uF
        const double var_I_Ca__ibarca_sl = ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__I_Ca_sl = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarca_sl * var_parameters__Fsl_CaL; // uA_per_uF
        const double var_Ca_Concentrations__I_Ca_tot_sl = -2.0 * var_I_NCX__I_ncx_sl + var_I_Ca__I_Ca_sl + var_I_CaBK__I_cabk_sl + var_I_PCa__I_pca_sl; // uA_per_uF
        const double var_membrane_potential__I_Ca_tot = var_Ca_Concentrations__I_Ca_tot_junc + var_Ca_Concentrations__I_Ca_tot_sl; // uA_per_uF
        const double var_parameters__pNaK = 0.018329999999999999; // dimensionless
        const double var_I_Ks__eks = log((mParameters[8] * var_parameters__pNaK + mParameters[7]) / (var_chaste_interface__Na_Concentrations__Na_i * var_parameters__pNaK + var_chaste_interface__K_Concentration__K_i)) / var_parameters__FoRT; // mV
        const double var_I_Ks__I_ks = pow(var_chaste_interface__I_Ks__x_ks, 2) * (-var_I_Ks__eks + var_chaste_interface__membrane_potential__V_m) * var_I_Ks__GKs_total; // uA_per_uF
        const double var_K_Concentration__I_K_tot = -2.0 * var_I_NaK__I_nak + var_I_Ca__I_CaK + var_I_Ki__I_ki + var_I_Kp__I_kp + var_I_Kr__I_kr + var_I_Ks__I_ks + var_I_to__I_to; // uA_per_uF
        const double var_membrane_potential__I_tot = var_K_Concentration__I_K_tot + var_membrane_potential__I_Ca_tot + var_membrane_potential__I_Cl_tot + var_membrane_potential__I_Na_tot; // uA_per_uF
        d_dt_chaste_interface_var_membrane_potential__V_m = -var_membrane_potential__I_tot - var_membrane_potential__i_Stim; // mV / msec

        double evalF = d_dt_chaste_interface_var_membrane_potential__V_m;
        mEvalF[0] = d_dt_chaste_interface_var_membrane_potential__V_m;
        double partialF = EvaluatePartialDerivative0(var_chaste_interface__environment__time, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] += evalF*mDt;
        }
        else
        {
            rY[v_index] += (evalF/partialF)*(exp(partialF*mDt)-1.0);
        }
    }

    void Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        const double delta = 1e-8;

        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__I_Na__m = rY[2];
        // Units: dimensionless; Initial value: 0.00381858135062259
        double var_chaste_interface__I_Na__h = rY[3];
        // Units: dimensionless; Initial value: 0.625086621635645
        double var_chaste_interface__I_Na__j = rY[4];
        // Units: dimensionless; Initial value: 0.62332507235506
        double var_chaste_interface__I_Kr__x_kr = rY[5];
        // Units: dimensionless; Initial value: 0.021733554982663
        double var_chaste_interface__I_Ks__x_ks = rY[6];
        // Units: dimensionless; Initial value: 0.00428981903391989
        double var_chaste_interface__I_to__x_to_s = rY[7];
        // Units: dimensionless; Initial value: 0.000441539203559411
        double var_chaste_interface__I_to__y_to_s = rY[8];
        // Units: dimensionless; Initial value: 0.784875334693892
        double var_chaste_interface__I_to__x_to_f = rY[9];
        // Units: dimensionless; Initial value: 0.000441531250866821
        double var_chaste_interface__I_to__y_to_f = rY[10];
        // Units: dimensionless; Initial value: 0.999995817153572
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
        // Units: dimensionless; Initial value: 0.0246142436477748
        double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
        // Units: dimensionless; Initial value: 0.0152416826209301
        double var_chaste_interface__SR_Fluxes__Ry_Rr = rY[15];
        // Units: mM; Initial value: 0.891022230597263
        double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
        // Units: mM; Initial value: 7.37484660389498e-07
        double var_chaste_interface__SR_Fluxes__Ry_Ri = rY[17];
        // Units: mM; Initial value: 9.01984485847386e-08
        double var_chaste_interface__Na_Buffers__Na_Bj = rY[18];
        // Units: mM; Initial value: 3.43545459048316
        double var_chaste_interface__Na_Buffers__Na_Bsl = rY[19];
        // Units: mM; Initial value: 0.749601264899653
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL = rY[20];
        // Units: mM; Initial value: 0.00893708435270205
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc = rY[21];
        // Units: mM; Initial value: 0.117445983314504
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm = rY[22];
        // Units: mM; Initial value: 0.0105996734077994
        double var_chaste_interface__Cytosolic_Ca_Buffers__CaM = rY[23];
        // Units: mM; Initial value: 0.000295653619580701
        double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c = rY[24];
        // Units: mM; Initial value: 0.00192645052472679
        double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m = rY[25];
        // Units: mM; Initial value: 0.137557201546068
        double var_chaste_interface__Cytosolic_Ca_Buffers__SRB = rY[26];
        // Units: mM; Initial value: 0.00217414510791738
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j = rY[27];
        // Units: mM; Initial value: 0.00738583890572642
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl = rY[28];
        // Units: mM; Initial value: 0.00988178900584875
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j = rY[29];
        // Units: mM; Initial value: 0.0734662466011574
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl = rY[30];
        // Units: mM; Initial value: 0.114400081504523
        double var_chaste_interface__SR_Ca_Concentrations__Csqn_b = rY[31];
        // Units: mM; Initial value: 1.19772047585784
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Na_Concentrations__Na_i = rY[35];
        // Units: mM; Initial value: 8.32114502072456
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        

        // Mathematics
        const double d_dt_chaste_interface_var_K_Concentration__K_i = 0; // mM / msec
        const double d_dt_chaste_interface_var_I_Ca__f_Ca_Bj = -0.011900000000000001 * var_chaste_interface__I_Ca__f_Ca_Bj + 1.7 * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj) * var_chaste_interface__Ca_Concentrations__Ca_j; // 1 / msec
        const double d_dt_chaste_interface_var_I_Ca__f_Ca_Bsl = -0.011900000000000001 * var_chaste_interface__I_Ca__f_Ca_Bsl + 1.7 * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl) * var_chaste_interface__Ca_Concentrations__Ca_sl; // 1 / msec
        const double var_I_Ca__fcaCaMSL = 0; // dimensionless
        const double var_I_Ca__fcaCaj = 0; // dimensionless
        const double var_SR_Fluxes__MaxSR = 15.0; // dimensionless
        const double var_SR_Fluxes__MinSR = 1.0; // dimensionless
        const double var_SR_Fluxes__RI = 1.0 - var_chaste_interface__SR_Fluxes__Ry_Ri - var_chaste_interface__SR_Fluxes__Ry_Ro - var_chaste_interface__SR_Fluxes__Ry_Rr; // mM
        const double var_SR_Fluxes__J_SRleak = (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__SR_Ca_Concentrations__Ca_sr) * mParameters[0]; // mM_per_msec
        const double var_I_Ca__dss = 1 / (1.0 + exp(-0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double var_I_Ca__fss = 1 / (1.0 + exp(3.8888888888888888 + 0.1111111111111111 * var_chaste_interface__membrane_potential__V_m)) + 0.59999999999999998 / (1.0 + exp(2.5 - 0.050000000000000003 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double var_I_Ca__taud = ((fabs(5.0 + var_chaste_interface__membrane_potential__V_m) < 6.0000000000337561e-7) ? (47619047.618779711 * (1.0 - exp(-1.000000000005626e-7)) / (1.0 + exp(-1.000000000005626e-7)) - 833333.33332864498 * (4.9999994000000001 + var_chaste_interface__membrane_potential__V_m) * (-47619047.618779711 * (1.0 - exp(1.000000000005626e-7)) / (1.0 + exp(1.000000000005626e-7)) - 47619047.618779711 * (1.0 - exp(-1.000000000005626e-7)) / (1.0 + exp(-1.000000000005626e-7)))) : (28.571428571428569 * (1.0 - exp(-0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__membrane_potential__V_m)) / ((1.0 + exp(-0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__membrane_potential__V_m)) * (5.0 + var_chaste_interface__membrane_potential__V_m)))); // msec
        const double d_dt_chaste_interface_var_I_Ca__d = (-var_chaste_interface__I_Ca__d + var_I_Ca__dss) / var_I_Ca__taud; // 1 / msec
        const double var_I_Ca__tauf = 1 / (0.02 + 0.019699999999999999 * exp(-0.23877882250000002 * pow((1 + 0.068965517241379309 * var_chaste_interface__membrane_potential__V_m), 2))); // msec
        const double d_dt_chaste_interface_var_I_Ca__f = (-var_chaste_interface__I_Ca__f + var_I_Ca__fss) / var_I_Ca__tauf; // 1 / msec
        const double var_I_Kr__tauxr = 230.0 / (1.0 + exp(2.0 + 0.050000000000000003 * var_chaste_interface__membrane_potential__V_m)) + 3300.0 / ((1.0 + exp(1.2222222222222223 + 0.1111111111111111 * var_chaste_interface__membrane_potential__V_m)) * (1.0 + exp(-2.4444444444444446 - 0.1111111111111111 * var_chaste_interface__membrane_potential__V_m))); // msec
        const double var_I_Kr__xrss = 1 / (1.0 + exp(-2.0 - 0.20000000000000001 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double d_dt_chaste_interface_var_I_Kr__x_kr = (-var_chaste_interface__I_Kr__x_kr + var_I_Kr__xrss) / var_I_Kr__tauxr; // 1 / msec
        const double var_I_Ks__tauxs = 990.10000000000002 / (1.0 + exp(-0.17252124645892353 - 0.070821529745042494 * var_chaste_interface__membrane_potential__V_m)); // msec
        const double var_I_Ks__xsss = 1 / (1.0 + exp(-0.26666666666666666 - 0.070175438596491224 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double d_dt_chaste_interface_var_I_Ks__x_ks = (-var_chaste_interface__I_Ks__x_ks + var_I_Ks__xsss) / var_I_Ks__tauxs; // 1 / msec
        const double var_I_Na__ah = ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0) : (0.057000000000000002 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[14] - 0.14705882352941177 * var_chaste_interface__membrane_potential__V_m))); // dimensionless
        const double var_I_Na__aj = ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0) : ((37.780000000000001 + var_chaste_interface__membrane_potential__V_m) * (-25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane_potential__V_m - 0.24440000000000001 * mParameters[14]) - 6.9480000000000002e-6 * exp(0.043909999999999998 * mParameters[14] - 0.043909999999999998 * var_chaste_interface__membrane_potential__V_m)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane_potential__V_m - 0.311 * mParameters[14])))); // dimensionless
        const double var_I_Na__bh = ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (5.9230769230769234 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[14] - 0.0900900900900901 * var_chaste_interface__membrane_potential__V_m))) : (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane_potential__V_m - 0.34849999999999998 * mParameters[14]) + 2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane_potential__V_m - 0.079000000000000001 * mParameters[14]))); // dimensionless
        const double var_I_Na__bj = ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane_potential__V_m - 0.057000000000000002 * mParameters[14]) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[14] - 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m))) : (0.024240000000000001 * exp(0.01052 * mParameters[14] - 0.01052 * var_chaste_interface__membrane_potential__V_m) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[14] - 0.13780000000000001 * var_chaste_interface__membrane_potential__V_m)))); // dimensionless
        const double var_I_Na__hss = 0.01 * mParameters[13] + (1.0 - 0.01 * mParameters[13]) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__membrane_potential__V_m - 0.13458950201884254 * mParameters[14])), 2); // dimensionless
        const double var_I_Na__jss = 0.01 * mParameters[13] + (1.0 - 0.01 * mParameters[13]) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__membrane_potential__V_m - 0.13458950201884254 * mParameters[14])), 2); // dimensionless
        const double var_I_Na__mss = 1 / pow((1.0 + exp(-6.2967884828349945 - 0.11074197120708749 * var_chaste_interface__membrane_potential__V_m)), 2); // dimensionless
        const double var_I_Na__tauh = 1 / (var_I_Na__ah + var_I_Na__bh); // msec
        const double d_dt_chaste_interface_var_I_Na__h = (-var_chaste_interface__I_Na__h + var_I_Na__hss) / var_I_Na__tauh; // 1 / msec
        const double var_I_Na__tauj = 1 / (var_I_Na__aj + var_I_Na__bj); // msec
        const double d_dt_chaste_interface_var_I_Na__j = (-var_chaste_interface__I_Na__j + var_I_Na__jss) / var_I_Na__tauj; // 1 / msec
        const double var_I_Na__taum = 0.12920000000000001 * exp(-8.682389366752302 * pow((1 + 0.021838829438742085 * var_chaste_interface__membrane_potential__V_m), 2)) + 0.064869999999999997 * exp(-0.0089012876052174655 * pow((-1 + 0.2073398299813394 * var_chaste_interface__membrane_potential__V_m), 2)); // msec
        const double d_dt_chaste_interface_var_I_Na__m = (-var_chaste_interface__I_Na__m + var_I_Na__mss) / var_I_Na__taum; // 1 / msec
        const double var_I_to__tauxtof = 0.5 + 8.5 * exp(-0.81000000000000005 * pow((1 + 0.022222222222222223 * var_chaste_interface__membrane_potential__V_m), 2)); // msec
        const double var_I_to__tauxtos = 0.5 + 9.0 / (1.0 + exp(0.20000000000000001 + 0.066666666666666666 * var_chaste_interface__membrane_potential__V_m)); // msec
        const double var_I_to__tauytof = 7.0 + 85.0 * exp(-7.2727272727272725 * pow((1 + 0.025000000000000001 * var_chaste_interface__membrane_potential__V_m), 2)); // msec
        const double var_I_to__tauytos = 30.0 + 800.0 / (1.0 + exp(6.0 + 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m)); // msec
        const double var_I_to__xtoss = 1 / (1.0 + exp(1.4615384615384615 - 0.076923076923076927 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double d_dt_chaste_interface_var_I_to__x_to_f = (-var_chaste_interface__I_to__x_to_f + var_I_to__xtoss) / var_I_to__tauxtof; // 1 / msec
        const double d_dt_chaste_interface_var_I_to__x_to_s = (-var_chaste_interface__I_to__x_to_s + var_I_to__xtoss) / var_I_to__tauxtos; // 1 / msec
        const double var_I_to__ytoss = 1 / (1.0 + exp(3.8999999999999999 + 0.20000000000000001 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double d_dt_chaste_interface_var_I_to__y_to_f = (-var_chaste_interface__I_to__y_to_f + var_I_to__ytoss) / var_I_to__tauytof; // 1 / msec
        const double d_dt_chaste_interface_var_I_to__y_to_s = (-var_chaste_interface__I_to__y_to_s + var_I_to__ytoss) / var_I_to__tauytos; // 1 / msec
        const double var_parameters__Bmax_CaM = 0.024; // mM
        const double var_parameters__Bmax_Naj = 7.5609999999999999; // mM
        const double var_parameters__Bmax_Nasl = 1.6499999999999999; // mM
        const double var_parameters__Bmax_SR = 0.017100000000000001; // mM
        const double var_parameters__Bmax_TnChigh = 0.14000000000000001; // mM
        const double var_parameters__Bmax_TnClow = 0.070000000000000007; // mM
        const double var_parameters__Bmax_myosin = 0.14000000000000001; // mM
        const double var_parameters__Fjunc = 0.11; // dimensionless
        const double var_parameters__Fjunc_CaL = 0.90000000000000002; // dimensionless
        const double var_parameters__Fsl = 1.0 - var_parameters__Fjunc; // dimensionless
        const double var_parameters__Fsl_CaL = 1.0 - var_parameters__Fjunc_CaL; // dimensionless
        const double var_parameters__GCaB = 0.00055130000000000001; // mS_per_uF
        const double var_parameters__GNaB = 0.00059699999999999998; // mS_per_uF
        const double var_parameters__IbarSLCaP = 0.067299999999999999; // uA_per_uF
        const double var_parameters__J_ca_juncsl = 8.2413000000000004e-13; // liters_per_msec
        const double var_parameters__J_ca_slmyo = 3.2742999999999999e-12; // liters_per_msec
        const double var_parameters__J_na_juncsl = 1.8312999999999999e-14; // liters_per_msec
        const double var_parameters__J_na_slmyo = 1.6385999999999999e-12; // liters_per_msec
        const double var_parameters__Kdact = 0.00014999999999999999; // mM
        const double var_I_NCX__Ka_junc = 1 / (1.0 + pow(var_parameters__Kdact, 2) / pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2)); // dimensionless
        const double var_I_NCX__Ka_sl = 1 / (1.0 + pow(var_parameters__Kdact, 2) / pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 2)); // dimensionless
        const double var_parameters__KmCai = 0.0035899999999999999; // mM
        const double var_parameters__KmCao = 1.3; // mM
        const double var_parameters__KmKo = 1.5; // mM
        const double var_parameters__KmNai = 12.289999999999999; // mM
        const double var_parameters__KmNaip = 11.0; // mM
        const double var_parameters__KmNao = 87.5; // mM
        const double var_parameters__KmPCa = 0.00050000000000000001; // mM
        const double var_parameters__Kmf = 0.00024600000000000002; // mM
        const double var_parameters__Kmr = 1.7; // mM
        const double var_parameters__Mgi = 1.0; // mM
        const double var_I_NCX__s3_junc = pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * var_parameters__KmCao + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j + pow(var_parameters__KmNao, 3) * (1.0 + var_chaste_interface__Ca_Concentrations__Ca_j / var_parameters__KmCai) * var_chaste_interface__Ca_Concentrations__Ca_j + pow(mParameters[8], 3) * (1.0 + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) / pow(var_parameters__KmNai, 3)) * var_parameters__KmCai; // mM4
        const double var_I_NCX__s3_sl = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * var_parameters__KmCao + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl + pow(var_parameters__KmNao, 3) * (1.0 + var_chaste_interface__Ca_Concentrations__Ca_sl / var_parameters__KmCai) * var_chaste_interface__Ca_Concentrations__Ca_sl + pow(mParameters[8], 3) * (1.0 + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) / pow(var_parameters__KmNai, 3)) * var_parameters__KmCai; // mM4
        const double var_I_NaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[8]); // dimensionless
        const double var_parameters__Q10CaL = 1.8; // dimensionless
        const double var_parameters__Q10NCX = 1.5700000000000001; // dimensionless
        const double var_parameters__Q10SLCaP = 2.3500000000000001; // dimensionless
        const double var_parameters__Q10SRCaP = 2.6000000000000001; // dimensionless
        const double var_I_Ca__ibarna_j = ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__ibarna_sl = ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_I_NaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) + 0.036499999999999998 * var_I_NaK__sigma * exp(-var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)); // dimensionless
        const double var_I_NaK__I_nak_junc = var_I_NaK__fnak * var_parameters__Fjunc * mParameters[21] * mParameters[7] / ((1.0 + pow(var_parameters__KmNaip, 4) / pow(var_chaste_interface__Na_Concentrations__Na_j, 4)) * (var_parameters__KmKo + mParameters[7])); // uA_per_uF
        const double var_I_NaK__I_nak_sl = var_I_NaK__fnak * var_parameters__Fsl * mParameters[21] * mParameters[7] / ((1.0 + pow(var_parameters__KmNaip, 4) / pow(var_chaste_interface__Na_Concentrations__Na_sl, 4)) * (var_parameters__KmKo + mParameters[7])); // uA_per_uF
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_I_Ca__I_CaNa_junc = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarna_j * var_parameters__Fjunc_CaL; // uA_per_uF
        const double var_I_Ca__I_CaNa_sl = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarna_sl * var_parameters__Fsl_CaL; // uA_per_uF
        const double var_I_PCa__I_pca_junc = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) * pow(var_parameters__Q10SLCaP, var_parameters__Qpow) * var_parameters__Fjunc * var_parameters__IbarSLCaP / (pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) + pow(var_parameters__KmPCa, 1.6000000000000001)); // uA_per_uF
        const double var_I_PCa__I_pca_sl = pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) * pow(var_parameters__Q10SLCaP, var_parameters__Qpow) * var_parameters__Fsl * var_parameters__IbarSLCaP / (pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) + pow(var_parameters__KmPCa, 1.6000000000000001)); // uA_per_uF
        const double var_parameters__cellLength = 100.0; // um
        const double var_parameters__cellRadius = 10.25; // um
        const double var_parameters__Vcell = 1.0000000000000001e-15 * M_PI * pow(var_parameters__cellRadius, 2) * var_parameters__cellLength; // liter
        const double var_parameters__Vjunc = 0.00053900000000000009 * var_parameters__Vcell; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double d_dt_chaste_interface_var_Na_Concentrations__Na_i = (-var_chaste_interface__Na_Concentrations__Na_i + var_chaste_interface__Na_Concentrations__Na_sl) * mParameters[3] * var_parameters__J_na_slmyo / var_parameters__Vmyo; // mM / msec
        const double var_parameters__Bmax_SLhighj = 0.000165 * var_parameters__Vmyo / var_parameters__Vjunc; // mM
        const double var_parameters__Bmax_SLlowj = 0.00046000000000000001 * var_parameters__Vmyo / var_parameters__Vjunc; // mM
        const double var_parameters__Vsl = 0.02 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_SLhighsl = 0.0134 * var_parameters__Vmyo / var_parameters__Vsl; // mM
        const double var_parameters__Bmax_SLlowsl = 0.037400000000000003 * var_parameters__Vmyo / var_parameters__Vsl; // mM
        const double var_parameters__Vsr = 0.035000000000000003 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_Csqn = 0.14000000000000001 * var_parameters__Vmyo / var_parameters__Vsr; // mM
        const double var_parameters__ec50SR = 0.45000000000000001; // mM
        const double var_SR_Fluxes__kCaSR = -(-var_SR_Fluxes__MinSR + var_SR_Fluxes__MaxSR) / (1.0 + pow((var_parameters__ec50SR / var_chaste_interface__SR_Ca_Concentrations__Ca_sr), 2.5)) + var_SR_Fluxes__MaxSR; // dimensionless
        const double var_parameters__eca_junc = 0.5 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_j) / var_parameters__FoRT; // mV
        const double var_I_CaBK__I_cabk_junc = (-var_parameters__eca_junc + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fjunc * var_parameters__GCaB; // uA_per_uF
        const double var_parameters__eca_sl = 0.5 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_sl) / var_parameters__FoRT; // mV
        const double var_I_CaBK__I_cabk_sl = (-var_parameters__eca_sl + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fsl * var_parameters__GCaB; // uA_per_uF
        const double var_parameters__ena_junc = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_j) / var_parameters__FoRT; // mV
        const double var_I_Na__I_Na_junc = pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * var_parameters__Fjunc * mParameters[12]; // uA_per_uF
        const double var_I_NaBK__I_nabk_junc = (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fjunc * var_parameters__GNaB; // uA_per_uF
        const double var_parameters__ena_sl = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_sl) / var_parameters__FoRT; // mV
        const double var_I_Na__I_Na_sl = pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * var_parameters__Fsl * mParameters[12]; // uA_per_uF
        const double var_I_NaBK__I_nabk_sl = (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fsl * var_parameters__GNaB; // uA_per_uF
        const double var_parameters__hillSRCaP = 1.7869999999999999; // dimensionless
        const double var_SR_Fluxes__J_serca = pow(var_parameters__Q10SRCaP, var_parameters__Qpow) * (pow((var_chaste_interface__Ca_Concentrations__Ca_i / var_parameters__Kmf), var_parameters__hillSRCaP) - pow((var_chaste_interface__SR_Ca_Concentrations__Ca_sr / var_parameters__Kmr), var_parameters__hillSRCaP)) * mParameters[2] / (1.0 + pow((var_chaste_interface__Ca_Concentrations__Ca_i / var_parameters__Kmf), var_parameters__hillSRCaP) + pow((var_chaste_interface__SR_Ca_Concentrations__Ca_sr / var_parameters__Kmr), var_parameters__hillSRCaP)); // mM_per_msec
        const double var_parameters__kiCa = 0.5; // per_mM_per_msec
        const double var_SR_Fluxes__kiSRCa = var_SR_Fluxes__kCaSR * var_parameters__kiCa; // per_mM_per_msec
        const double var_parameters__kim = 0.0050000000000000001; // per_msec
        const double var_parameters__koCa = 10.0; // per_mM2_per_msec
        const double var_SR_Fluxes__koSRCa = var_parameters__koCa / var_SR_Fluxes__kCaSR; // per_mM2_per_msec
        const double var_parameters__koff_cam = 0.23799999999999999; // per_msec
        const double var_parameters__koff_csqn = 65.0; // per_msec
        const double var_parameters__koff_myoca = 0.00046000000000000001; // per_msec
        const double var_parameters__koff_myomg = 5.7000000000000003e-5; // per_msec
        const double var_parameters__koff_na = 0.001; // per_msec
        const double var_parameters__koff_slh = 0.029999999999999999; // per_msec
        const double var_parameters__koff_sll = 1.3; // per_msec
        const double var_parameters__koff_sr = 0.059999999999999998; // per_msec
        const double var_parameters__koff_tnchca = 3.1999999999999999e-5; // per_msec
        const double var_parameters__koff_tnchmg = 0.0033300000000000001; // per_msec
        const double var_parameters__koff_tncl = 0.019599999999999999; // per_msec
        const double var_parameters__kom = 0.059999999999999998; // per_msec
        const double d_dt_chaste_interface_var_SR_Fluxes__Ry_Ri = -var_chaste_interface__SR_Fluxes__Ry_Ri * var_parameters__kim - var_chaste_interface__SR_Fluxes__Ry_Ri * var_parameters__kom + pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2) * var_SR_Fluxes__RI * var_SR_Fluxes__koSRCa + var_chaste_interface__Ca_Concentrations__Ca_j * var_chaste_interface__SR_Fluxes__Ry_Ro * var_SR_Fluxes__kiSRCa; // mM / msec
        const double d_dt_chaste_interface_var_SR_Fluxes__Ry_Ro = var_chaste_interface__SR_Fluxes__Ry_Ri * var_parameters__kim - var_chaste_interface__SR_Fluxes__Ry_Ro * var_parameters__kom + pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2) * var_chaste_interface__SR_Fluxes__Ry_Rr * var_SR_Fluxes__koSRCa - var_chaste_interface__Ca_Concentrations__Ca_j * var_chaste_interface__SR_Fluxes__Ry_Ro * var_SR_Fluxes__kiSRCa; // mM / msec
        const double d_dt_chaste_interface_var_SR_Fluxes__Ry_Rr = var_SR_Fluxes__RI * var_parameters__kim + var_chaste_interface__SR_Fluxes__Ry_Ro * var_parameters__kom - pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2) * var_chaste_interface__SR_Fluxes__Ry_Rr * var_SR_Fluxes__koSRCa - var_chaste_interface__Ca_Concentrations__Ca_j * var_chaste_interface__SR_Fluxes__Ry_Rr * var_SR_Fluxes__kiSRCa; // mM / msec
        const double var_parameters__kon_cam = 34.0; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__CaM = -var_chaste_interface__Cytosolic_Ca_Buffers__CaM * var_parameters__koff_cam + (-var_chaste_interface__Cytosolic_Ca_Buffers__CaM + var_parameters__Bmax_CaM) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_cam; // mM / msec
        const double var_parameters__kon_csqn = 100.0; // per_mM_per_msec
        const double d_dt_chaste_interface_var_SR_Ca_Concentrations__Csqn_b = -var_chaste_interface__SR_Ca_Concentrations__Csqn_b * var_parameters__koff_csqn + (-var_chaste_interface__SR_Ca_Concentrations__Csqn_b + var_parameters__Bmax_Csqn) * var_chaste_interface__SR_Ca_Concentrations__Ca_sr * var_parameters__kon_csqn; // mM / msec
        const double var_parameters__kon_myoca = 13.800000000000001; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_c = -var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c * var_parameters__koff_myoca + (-var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m + var_parameters__Bmax_myosin) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_myoca; // mM / msec
        const double var_parameters__kon_myomg = 0.015699999999999999; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_m = -var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m * var_parameters__koff_myomg + (-var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m + var_parameters__Bmax_myosin) * var_parameters__Mgi * var_parameters__kon_myomg; // mM / msec
        const double var_parameters__kon_na = 0.0001; // per_mM_per_msec
        const double var_Na_Buffers__dNa_Bj_dt = -var_chaste_interface__Na_Buffers__Na_Bj * var_parameters__koff_na + (-var_chaste_interface__Na_Buffers__Na_Bj + var_parameters__Bmax_Naj) * var_chaste_interface__Na_Concentrations__Na_j * var_parameters__kon_na; // mM_per_msec
        const double d_dt_chaste_interface_var_Na_Buffers__Na_Bj = var_Na_Buffers__dNa_Bj_dt; // mM / msec
        const double var_Na_Buffers__dNa_Bsl_dt = -var_chaste_interface__Na_Buffers__Na_Bsl * var_parameters__koff_na + (-var_chaste_interface__Na_Buffers__Na_Bsl + var_parameters__Bmax_Nasl) * var_chaste_interface__Na_Concentrations__Na_sl * var_parameters__kon_na; // mM_per_msec
        const double d_dt_chaste_interface_var_Na_Buffers__Na_Bsl = var_Na_Buffers__dNa_Bsl_dt; // mM / msec
        const double var_parameters__kon_slh = 100.0; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_j = -var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j * var_parameters__koff_slh + (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j + var_parameters__Bmax_SLhighj) * var_chaste_interface__Ca_Concentrations__Ca_j * var_parameters__kon_slh; // mM / msec
        const double d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_sl = -var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl * var_parameters__koff_slh + (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl + var_parameters__Bmax_SLhighsl) * var_chaste_interface__Ca_Concentrations__Ca_sl * var_parameters__kon_slh; // mM / msec
        const double var_parameters__kon_sll = 100.0; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_j = -var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j * var_parameters__koff_sll + (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j + var_parameters__Bmax_SLlowj) * var_chaste_interface__Ca_Concentrations__Ca_j * var_parameters__kon_sll; // mM / msec
        const double d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_sl = -var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl * var_parameters__koff_sll + (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl + var_parameters__Bmax_SLlowsl) * var_chaste_interface__Ca_Concentrations__Ca_sl * var_parameters__kon_sll; // mM / msec
        const double var_Junctional_and_SL_Ca_Buffers__J_CaB_junction = -var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j * var_parameters__koff_slh - var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j * var_parameters__koff_sll + (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j + var_parameters__Bmax_SLhighj) * var_chaste_interface__Ca_Concentrations__Ca_j * var_parameters__kon_slh + (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j + var_parameters__Bmax_SLlowj) * var_chaste_interface__Ca_Concentrations__Ca_j * var_parameters__kon_sll; // mM_per_msec
        const double var_Junctional_and_SL_Ca_Buffers__J_CaB_sl = -var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl * var_parameters__koff_slh - var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl * var_parameters__koff_sll + (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl + var_parameters__Bmax_SLhighsl) * var_chaste_interface__Ca_Concentrations__Ca_sl * var_parameters__kon_slh + (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl + var_parameters__Bmax_SLlowsl) * var_chaste_interface__Ca_Concentrations__Ca_sl * var_parameters__kon_sll; // mM_per_msec
        const double var_parameters__kon_sr = 100.0; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__SRB = -var_chaste_interface__Cytosolic_Ca_Buffers__SRB * var_parameters__koff_sr + (-var_chaste_interface__Cytosolic_Ca_Buffers__SRB + var_parameters__Bmax_SR) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_sr; // mM / msec
        const double var_parameters__kon_tnchca = 2.3700000000000001; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHc = -var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc * var_parameters__koff_tnchca + (-var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm + var_parameters__Bmax_TnChigh) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_tnchca; // mM / msec
        const double var_parameters__kon_tnchmg = 0.0030000000000000001; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHm = -var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm * var_parameters__koff_tnchmg + (-var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm + var_parameters__Bmax_TnChigh) * var_parameters__Mgi * var_parameters__kon_tnchmg; // mM / msec
        const double var_parameters__kon_tncl = 32.700000000000003; // per_mM_per_msec
        const double var_Cytosolic_Ca_Buffers__J_CaB_cytosol = -var_chaste_interface__Cytosolic_Ca_Buffers__CaM * var_parameters__koff_cam - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c * var_parameters__koff_myoca - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m * var_parameters__koff_myomg - var_chaste_interface__Cytosolic_Ca_Buffers__SRB * var_parameters__koff_sr - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc * var_parameters__koff_tnchca - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm * var_parameters__koff_tnchmg - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL * var_parameters__koff_tncl + (-var_chaste_interface__Cytosolic_Ca_Buffers__CaM + var_parameters__Bmax_CaM) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_cam + (-var_chaste_interface__Cytosolic_Ca_Buffers__SRB + var_parameters__Bmax_SR) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_sr + (-var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL + var_parameters__Bmax_TnClow) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_tncl + (-var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m + var_parameters__Bmax_myosin) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_myoca + (-var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m + var_parameters__Bmax_myosin) * var_parameters__Mgi * var_parameters__kon_myomg + (-var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm + var_parameters__Bmax_TnChigh) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_tnchca + (-var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm + var_parameters__Bmax_TnChigh) * var_parameters__Mgi * var_parameters__kon_tnchmg; // mM_per_msec
        const double d_dt_chaste_interface_var_Ca_Concentrations__Ca_i = -var_Cytosolic_Ca_Buffers__J_CaB_cytosol + (-var_chaste_interface__Ca_Concentrations__Ca_i + var_chaste_interface__Ca_Concentrations__Ca_sl) * var_parameters__J_ca_slmyo / var_parameters__Vmyo - var_SR_Fluxes__J_serca * var_parameters__Vsr / var_parameters__Vmyo; // mM / msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CL = -var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL * var_parameters__koff_tncl + (-var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL + var_parameters__Bmax_TnClow) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_tncl; // mM / msec
        const double var_SR_Fluxes__J_SRCarel = (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__SR_Ca_Concentrations__Ca_sr) * var_chaste_interface__SR_Fluxes__Ry_Ro * mParameters[1]; // mM_per_msec
        const double d_dt_chaste_interface_var_SR_Ca_Concentrations__Ca_sr = -var_SR_Fluxes__J_SRCarel + var_chaste_interface__SR_Ca_Concentrations__Csqn_b * var_parameters__koff_csqn - var_SR_Fluxes__J_SRleak * var_parameters__Vmyo / var_parameters__Vsr - (-var_chaste_interface__SR_Ca_Concentrations__Csqn_b + var_parameters__Bmax_Csqn) * var_chaste_interface__SR_Ca_Concentrations__Ca_sr * var_parameters__kon_csqn + var_SR_Fluxes__J_serca; // mM / msec
        const double var_parameters__ksat = 0.32000000000000001; // dimensionless
        const double var_parameters__nu = 0.27000000000000002; // dimensionless
        const double var_I_NCX__s1_junc = pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] * exp(var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT * var_parameters__nu); // mM4
        const double var_I_NCX__s1_sl = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] * exp(var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT * var_parameters__nu); // mM4
        const double var_I_NCX__s2_junc = pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT); // mM4
        const double var_I_NCX__I_ncx_junc = pow(var_parameters__Q10NCX, var_parameters__Qpow) * (-var_I_NCX__s2_junc + var_I_NCX__s1_junc) * var_I_NCX__Ka_junc * var_parameters__Fjunc * mParameters[20] / ((1.0 + var_parameters__ksat * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * var_I_NCX__s3_junc); // uA_per_uF
        const double var_I_NCX__s2_sl = pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT); // mM4
        const double var_I_NCX__I_ncx_sl = pow(var_parameters__Q10NCX, var_parameters__Qpow) * (-var_I_NCX__s2_sl + var_I_NCX__s1_sl) * var_I_NCX__Ka_sl * var_parameters__Fsl * mParameters[20] / ((1.0 + var_parameters__ksat * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * var_I_NCX__s3_sl); // uA_per_uF
        const double var_Na_Concentrations__I_Na_tot_junc = 3.0 * var_I_NCX__I_ncx_junc + 3.0 * var_I_NaK__I_nak_junc + var_I_Ca__I_CaNa_junc + var_I_Na__I_Na_junc + var_I_NaBK__I_nabk_junc; // uA_per_uF
        const double d_dt_chaste_interface_var_Na_Concentrations__Na_j = (-var_Na_Buffers__dNa_Bj_dt + (-var_chaste_interface__Na_Concentrations__Na_j + var_chaste_interface__Na_Concentrations__Na_sl) * var_parameters__J_na_juncsl / var_parameters__Vjunc - var_Na_Concentrations__I_Na_tot_junc * mParameters[22] / (mParameters[9] * var_parameters__Vjunc)) * mParameters[3]; // mM / msec
        const double var_Na_Concentrations__I_Na_tot_sl = 3.0 * var_I_NCX__I_ncx_sl + 3.0 * var_I_NaK__I_nak_sl + var_I_Ca__I_CaNa_sl + var_I_Na__I_Na_sl + var_I_NaBK__I_nabk_sl; // uA_per_uF
        const double d_dt_chaste_interface_var_Na_Concentrations__Na_sl = (-var_Na_Buffers__dNa_Bsl_dt + (-var_chaste_interface__Na_Concentrations__Na_sl + var_chaste_interface__Na_Concentrations__Na_i) * var_parameters__J_na_slmyo / var_parameters__Vsl + (-var_chaste_interface__Na_Concentrations__Na_sl + var_chaste_interface__Na_Concentrations__Na_j) * var_parameters__J_na_juncsl / var_parameters__Vsl - var_Na_Concentrations__I_Na_tot_sl * mParameters[22] / (mParameters[9] * var_parameters__Vsl)) * mParameters[3]; // mM / msec
        const double var_I_Ca__ibarca_j = ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__I_Ca_junc = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarca_j * var_parameters__Fjunc_CaL; // uA_per_uF
        const double var_Ca_Concentrations__I_Ca_tot_junc = -2.0 * var_I_NCX__I_ncx_junc + var_I_Ca__I_Ca_junc + var_I_CaBK__I_cabk_junc + var_I_PCa__I_pca_junc; // uA_per_uF
        const double d_dt_chaste_interface_var_Ca_Concentrations__Ca_j = -var_Junctional_and_SL_Ca_Buffers__J_CaB_junction + (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__Ca_Concentrations__Ca_sl) * var_parameters__J_ca_juncsl / var_parameters__Vjunc + var_SR_Fluxes__J_SRCarel * var_parameters__Vsr / var_parameters__Vjunc + var_SR_Fluxes__J_SRleak * var_parameters__Vmyo / var_parameters__Vjunc - 0.5 * var_Ca_Concentrations__I_Ca_tot_junc * mParameters[22] / (mParameters[9] * var_parameters__Vjunc); // mM / msec
        const double var_I_Ca__ibarca_sl = ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__I_Ca_sl = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarca_sl * var_parameters__Fsl_CaL; // uA_per_uF
        const double var_Ca_Concentrations__I_Ca_tot_sl = -2.0 * var_I_NCX__I_ncx_sl + var_I_Ca__I_Ca_sl + var_I_CaBK__I_cabk_sl + var_I_PCa__I_pca_sl; // uA_per_uF
        const double d_dt_chaste_interface_var_Ca_Concentrations__Ca_sl = -var_Junctional_and_SL_Ca_Buffers__J_CaB_sl + (-var_chaste_interface__Ca_Concentrations__Ca_sl + var_chaste_interface__Ca_Concentrations__Ca_i) * var_parameters__J_ca_slmyo / var_parameters__Vsl + (-var_chaste_interface__Ca_Concentrations__Ca_sl + var_chaste_interface__Ca_Concentrations__Ca_j) * var_parameters__J_ca_juncsl / var_parameters__Vsl - 0.5 * var_Ca_Concentrations__I_Ca_tot_sl * mParameters[22] / (mParameters[9] * var_parameters__Vsl); // mM / msec
        
        mEvalF[1] = d_dt_chaste_interface_var_Ca_Concentrations__Ca_i;
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__environment__time, rY, delta);
        mEvalF[2] = d_dt_chaste_interface_var_I_Na__m;
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__environment__time, rY, delta);
        mEvalF[3] = d_dt_chaste_interface_var_I_Na__h;
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__environment__time, rY, delta);
        mEvalF[4] = d_dt_chaste_interface_var_I_Na__j;
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__environment__time, rY, delta);
        mEvalF[5] = d_dt_chaste_interface_var_I_Kr__x_kr;
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__environment__time, rY, delta);
        mEvalF[6] = d_dt_chaste_interface_var_I_Ks__x_ks;
        mPartialF[6] = EvaluatePartialDerivative6(var_chaste_interface__environment__time, rY, delta);
        mEvalF[7] = d_dt_chaste_interface_var_I_to__x_to_s;
        mPartialF[7] = EvaluatePartialDerivative7(var_chaste_interface__environment__time, rY, delta);
        mEvalF[8] = d_dt_chaste_interface_var_I_to__y_to_s;
        mPartialF[8] = EvaluatePartialDerivative8(var_chaste_interface__environment__time, rY, delta);
        mEvalF[9] = d_dt_chaste_interface_var_I_to__x_to_f;
        mPartialF[9] = EvaluatePartialDerivative9(var_chaste_interface__environment__time, rY, delta);
        mEvalF[10] = d_dt_chaste_interface_var_I_to__y_to_f;
        mPartialF[10] = EvaluatePartialDerivative10(var_chaste_interface__environment__time, rY, delta);
        mEvalF[11] = d_dt_chaste_interface_var_I_Ca__d;
        mPartialF[11] = EvaluatePartialDerivative11(var_chaste_interface__environment__time, rY, delta);
        mEvalF[12] = d_dt_chaste_interface_var_I_Ca__f;
        mPartialF[12] = EvaluatePartialDerivative12(var_chaste_interface__environment__time, rY, delta);
        mEvalF[13] = d_dt_chaste_interface_var_I_Ca__f_Ca_Bj;
        mPartialF[13] = EvaluatePartialDerivative13(var_chaste_interface__environment__time, rY, delta);
        mEvalF[14] = d_dt_chaste_interface_var_I_Ca__f_Ca_Bsl;
        mPartialF[14] = EvaluatePartialDerivative14(var_chaste_interface__environment__time, rY, delta);
        mEvalF[15] = d_dt_chaste_interface_var_SR_Fluxes__Ry_Rr;
        mPartialF[15] = EvaluatePartialDerivative15(var_chaste_interface__environment__time, rY, delta);
        mEvalF[16] = d_dt_chaste_interface_var_SR_Fluxes__Ry_Ro;
        mPartialF[16] = EvaluatePartialDerivative16(var_chaste_interface__environment__time, rY, delta);
        mEvalF[17] = d_dt_chaste_interface_var_SR_Fluxes__Ry_Ri;
        mPartialF[17] = EvaluatePartialDerivative17(var_chaste_interface__environment__time, rY, delta);
        mEvalF[18] = d_dt_chaste_interface_var_Na_Buffers__Na_Bj;
        mPartialF[18] = EvaluatePartialDerivative18(var_chaste_interface__environment__time, rY, delta);
        mEvalF[19] = d_dt_chaste_interface_var_Na_Buffers__Na_Bsl;
        mPartialF[19] = EvaluatePartialDerivative19(var_chaste_interface__environment__time, rY, delta);
        mEvalF[20] = d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CL;
        mPartialF[20] = EvaluatePartialDerivative20(var_chaste_interface__environment__time, rY, delta);
        mEvalF[21] = d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHc;
        mPartialF[21] = EvaluatePartialDerivative21(var_chaste_interface__environment__time, rY, delta);
        mEvalF[22] = d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHm;
        mPartialF[22] = EvaluatePartialDerivative22(var_chaste_interface__environment__time, rY, delta);
        mEvalF[23] = d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__CaM;
        mPartialF[23] = EvaluatePartialDerivative23(var_chaste_interface__environment__time, rY, delta);
        mEvalF[24] = d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_c;
        mPartialF[24] = EvaluatePartialDerivative24(var_chaste_interface__environment__time, rY, delta);
        mEvalF[25] = d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_m;
        mPartialF[25] = EvaluatePartialDerivative25(var_chaste_interface__environment__time, rY, delta);
        mEvalF[26] = d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__SRB;
        mPartialF[26] = EvaluatePartialDerivative26(var_chaste_interface__environment__time, rY, delta);
        mEvalF[27] = d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_j;
        mPartialF[27] = EvaluatePartialDerivative27(var_chaste_interface__environment__time, rY, delta);
        mEvalF[28] = d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_sl;
        mPartialF[28] = EvaluatePartialDerivative28(var_chaste_interface__environment__time, rY, delta);
        mEvalF[29] = d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_j;
        mPartialF[29] = EvaluatePartialDerivative29(var_chaste_interface__environment__time, rY, delta);
        mEvalF[30] = d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_sl;
        mPartialF[30] = EvaluatePartialDerivative30(var_chaste_interface__environment__time, rY, delta);
        mEvalF[31] = d_dt_chaste_interface_var_SR_Ca_Concentrations__Csqn_b;
        mPartialF[31] = EvaluatePartialDerivative31(var_chaste_interface__environment__time, rY, delta);
        mEvalF[32] = d_dt_chaste_interface_var_SR_Ca_Concentrations__Ca_sr;
        mPartialF[32] = EvaluatePartialDerivative32(var_chaste_interface__environment__time, rY, delta);
        mEvalF[33] = d_dt_chaste_interface_var_Na_Concentrations__Na_j;
        mPartialF[33] = EvaluatePartialDerivative33(var_chaste_interface__environment__time, rY, delta);
        mEvalF[34] = d_dt_chaste_interface_var_Na_Concentrations__Na_sl;
        mPartialF[34] = EvaluatePartialDerivative34(var_chaste_interface__environment__time, rY, delta);
        mEvalF[35] = d_dt_chaste_interface_var_Na_Concentrations__Na_i;
        mPartialF[35] = EvaluatePartialDerivative35(var_chaste_interface__environment__time, rY, delta);
        mEvalF[36] = d_dt_chaste_interface_var_K_Concentration__K_i;
        mPartialF[36] = EvaluatePartialDerivative36(var_chaste_interface__environment__time, rY, delta);
        mEvalF[37] = d_dt_chaste_interface_var_Ca_Concentrations__Ca_j;
        mPartialF[37] = EvaluatePartialDerivative37(var_chaste_interface__environment__time, rY, delta);
        mEvalF[38] = d_dt_chaste_interface_var_Ca_Concentrations__Ca_sl;
        mPartialF[38] = EvaluatePartialDerivative38(var_chaste_interface__environment__time, rY, delta);
        
        {
            if (fabs(mPartialF[1]) < delta){
                rY[1] += mDt*d_dt_chaste_interface_var_Ca_Concentrations__Ca_i;
            }
            else
            {
                rY[1] += (d_dt_chaste_interface_var_Ca_Concentrations__Ca_i/mPartialF[1])*(exp(mPartialF[1]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[2]) < delta){
                rY[2] += mDt*d_dt_chaste_interface_var_I_Na__m;
            }
            else
            {
                rY[2] += (d_dt_chaste_interface_var_I_Na__m/mPartialF[2])*(exp(mPartialF[2]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[3]) < delta){
                rY[3] += mDt*d_dt_chaste_interface_var_I_Na__h;
            }
            else
            {
                rY[3] += (d_dt_chaste_interface_var_I_Na__h/mPartialF[3])*(exp(mPartialF[3]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[4]) < delta){
                rY[4] += mDt*d_dt_chaste_interface_var_I_Na__j;
            }
            else
            {
                rY[4] += (d_dt_chaste_interface_var_I_Na__j/mPartialF[4])*(exp(mPartialF[4]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[5]) < delta){
                rY[5] += mDt*d_dt_chaste_interface_var_I_Kr__x_kr;
            }
            else
            {
                rY[5] += (d_dt_chaste_interface_var_I_Kr__x_kr/mPartialF[5])*(exp(mPartialF[5]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[6]) < delta){
                rY[6] += mDt*d_dt_chaste_interface_var_I_Ks__x_ks;
            }
            else
            {
                rY[6] += (d_dt_chaste_interface_var_I_Ks__x_ks/mPartialF[6])*(exp(mPartialF[6]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[7]) < delta){
                rY[7] += mDt*d_dt_chaste_interface_var_I_to__x_to_s;
            }
            else
            {
                rY[7] += (d_dt_chaste_interface_var_I_to__x_to_s/mPartialF[7])*(exp(mPartialF[7]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[8]) < delta){
                rY[8] += mDt*d_dt_chaste_interface_var_I_to__y_to_s;
            }
            else
            {
                rY[8] += (d_dt_chaste_interface_var_I_to__y_to_s/mPartialF[8])*(exp(mPartialF[8]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[9]) < delta){
                rY[9] += mDt*d_dt_chaste_interface_var_I_to__x_to_f;
            }
            else
            {
                rY[9] += (d_dt_chaste_interface_var_I_to__x_to_f/mPartialF[9])*(exp(mPartialF[9]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[10]) < delta){
                rY[10] += mDt*d_dt_chaste_interface_var_I_to__y_to_f;
            }
            else
            {
                rY[10] += (d_dt_chaste_interface_var_I_to__y_to_f/mPartialF[10])*(exp(mPartialF[10]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[11]) < delta){
                rY[11] += mDt*d_dt_chaste_interface_var_I_Ca__d;
            }
            else
            {
                rY[11] += (d_dt_chaste_interface_var_I_Ca__d/mPartialF[11])*(exp(mPartialF[11]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[12]) < delta){
                rY[12] += mDt*d_dt_chaste_interface_var_I_Ca__f;
            }
            else
            {
                rY[12] += (d_dt_chaste_interface_var_I_Ca__f/mPartialF[12])*(exp(mPartialF[12]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[13]) < delta){
                rY[13] += mDt*d_dt_chaste_interface_var_I_Ca__f_Ca_Bj;
            }
            else
            {
                rY[13] += (d_dt_chaste_interface_var_I_Ca__f_Ca_Bj/mPartialF[13])*(exp(mPartialF[13]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[14]) < delta){
                rY[14] += mDt*d_dt_chaste_interface_var_I_Ca__f_Ca_Bsl;
            }
            else
            {
                rY[14] += (d_dt_chaste_interface_var_I_Ca__f_Ca_Bsl/mPartialF[14])*(exp(mPartialF[14]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[15]) < delta){
                rY[15] += mDt*d_dt_chaste_interface_var_SR_Fluxes__Ry_Rr;
            }
            else
            {
                rY[15] += (d_dt_chaste_interface_var_SR_Fluxes__Ry_Rr/mPartialF[15])*(exp(mPartialF[15]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[16]) < delta){
                rY[16] += mDt*d_dt_chaste_interface_var_SR_Fluxes__Ry_Ro;
            }
            else
            {
                rY[16] += (d_dt_chaste_interface_var_SR_Fluxes__Ry_Ro/mPartialF[16])*(exp(mPartialF[16]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[17]) < delta){
                rY[17] += mDt*d_dt_chaste_interface_var_SR_Fluxes__Ry_Ri;
            }
            else
            {
                rY[17] += (d_dt_chaste_interface_var_SR_Fluxes__Ry_Ri/mPartialF[17])*(exp(mPartialF[17]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[18]) < delta){
                rY[18] += mDt*d_dt_chaste_interface_var_Na_Buffers__Na_Bj;
            }
            else
            {
                rY[18] += (d_dt_chaste_interface_var_Na_Buffers__Na_Bj/mPartialF[18])*(exp(mPartialF[18]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[19]) < delta){
                rY[19] += mDt*d_dt_chaste_interface_var_Na_Buffers__Na_Bsl;
            }
            else
            {
                rY[19] += (d_dt_chaste_interface_var_Na_Buffers__Na_Bsl/mPartialF[19])*(exp(mPartialF[19]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[20]) < delta){
                rY[20] += mDt*d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CL;
            }
            else
            {
                rY[20] += (d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CL/mPartialF[20])*(exp(mPartialF[20]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[21]) < delta){
                rY[21] += mDt*d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHc;
            }
            else
            {
                rY[21] += (d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHc/mPartialF[21])*(exp(mPartialF[21]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[22]) < delta){
                rY[22] += mDt*d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHm;
            }
            else
            {
                rY[22] += (d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHm/mPartialF[22])*(exp(mPartialF[22]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[23]) < delta){
                rY[23] += mDt*d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__CaM;
            }
            else
            {
                rY[23] += (d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__CaM/mPartialF[23])*(exp(mPartialF[23]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[24]) < delta){
                rY[24] += mDt*d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_c;
            }
            else
            {
                rY[24] += (d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_c/mPartialF[24])*(exp(mPartialF[24]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[25]) < delta){
                rY[25] += mDt*d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_m;
            }
            else
            {
                rY[25] += (d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_m/mPartialF[25])*(exp(mPartialF[25]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[26]) < delta){
                rY[26] += mDt*d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__SRB;
            }
            else
            {
                rY[26] += (d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__SRB/mPartialF[26])*(exp(mPartialF[26]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[27]) < delta){
                rY[27] += mDt*d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_j;
            }
            else
            {
                rY[27] += (d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_j/mPartialF[27])*(exp(mPartialF[27]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[28]) < delta){
                rY[28] += mDt*d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_sl;
            }
            else
            {
                rY[28] += (d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_sl/mPartialF[28])*(exp(mPartialF[28]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[29]) < delta){
                rY[29] += mDt*d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_j;
            }
            else
            {
                rY[29] += (d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_j/mPartialF[29])*(exp(mPartialF[29]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[30]) < delta){
                rY[30] += mDt*d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_sl;
            }
            else
            {
                rY[30] += (d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_sl/mPartialF[30])*(exp(mPartialF[30]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[31]) < delta){
                rY[31] += mDt*d_dt_chaste_interface_var_SR_Ca_Concentrations__Csqn_b;
            }
            else
            {
                rY[31] += (d_dt_chaste_interface_var_SR_Ca_Concentrations__Csqn_b/mPartialF[31])*(exp(mPartialF[31]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[32]) < delta){
                rY[32] += mDt*d_dt_chaste_interface_var_SR_Ca_Concentrations__Ca_sr;
            }
            else
            {
                rY[32] += (d_dt_chaste_interface_var_SR_Ca_Concentrations__Ca_sr/mPartialF[32])*(exp(mPartialF[32]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[33]) < delta){
                rY[33] += mDt*d_dt_chaste_interface_var_Na_Concentrations__Na_j;
            }
            else
            {
                rY[33] += (d_dt_chaste_interface_var_Na_Concentrations__Na_j/mPartialF[33])*(exp(mPartialF[33]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[34]) < delta){
                rY[34] += mDt*d_dt_chaste_interface_var_Na_Concentrations__Na_sl;
            }
            else
            {
                rY[34] += (d_dt_chaste_interface_var_Na_Concentrations__Na_sl/mPartialF[34])*(exp(mPartialF[34]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[35]) < delta){
                rY[35] += mDt*d_dt_chaste_interface_var_Na_Concentrations__Na_i;
            }
            else
            {
                rY[35] += (d_dt_chaste_interface_var_Na_Concentrations__Na_i/mPartialF[35])*(exp(mPartialF[35]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[36]) < delta){
                rY[36] += mDt*d_dt_chaste_interface_var_K_Concentration__K_i;
            }
            else
            {
                rY[36] += (d_dt_chaste_interface_var_K_Concentration__K_i/mPartialF[36])*(exp(mPartialF[36]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[37]) < delta){
                rY[37] += mDt*d_dt_chaste_interface_var_Ca_Concentrations__Ca_j;
            }
            else
            {
                rY[37] += (d_dt_chaste_interface_var_Ca_Concentrations__Ca_j/mPartialF[37])*(exp(mPartialF[37]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[38]) < delta){
                rY[38] += mDt*d_dt_chaste_interface_var_Ca_Concentrations__Ca_sl;
            }
            else
            {
                rY[38] += (d_dt_chaste_interface_var_Ca_Concentrations__Ca_sl/mPartialF[38])*(exp(mPartialF[38]*mDt)-1.0);
            }
            
        }        
        
    }
   
    
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        double d_dt_chaste_interface_var_membrane_potential__V_m;
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Na__m = rY[2];
        // Units: dimensionless; Initial value: 0.00381858135062259
        double var_chaste_interface__I_Na__h = rY[3];
        // Units: dimensionless; Initial value: 0.625086621635645
        double var_chaste_interface__I_Na__j = rY[4];
        // Units: dimensionless; Initial value: 0.62332507235506
        double var_chaste_interface__I_Kr__x_kr = rY[5];
        // Units: dimensionless; Initial value: 0.021733554982663
        double var_chaste_interface__I_Ks__x_ks = rY[6];
        // Units: dimensionless; Initial value: 0.00428981903391989
        double var_chaste_interface__I_to__x_to_s = rY[7];
        // Units: dimensionless; Initial value: 0.000441539203559411
        double var_chaste_interface__I_to__y_to_s = rY[8];
        // Units: dimensionless; Initial value: 0.784875334693892
        double var_chaste_interface__I_to__x_to_f = rY[9];
        // Units: dimensionless; Initial value: 0.000441531250866821
        double var_chaste_interface__I_to__y_to_f = rY[10];
        // Units: dimensionless; Initial value: 0.999995817153572
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
        // Units: dimensionless; Initial value: 0.0246142436477748
        double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
        // Units: dimensionless; Initial value: 0.0152416826209301
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Na_Concentrations__Na_i = rY[35];
        // Units: mM; Initial value: 8.32114502072456
        double var_chaste_interface__K_Concentration__K_i = rY[36];
        // Units: mM; Initial value: 120.0
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        

        // Mathematics
        const double var_I_Ca__fcaCaMSL = 0; // dimensionless
        const double var_I_Ca__fcaCaj = 0; // dimensionless
        const double var_I_Ks__gks_junc = 0.0035000000000000001; // mS_per_uF
        const double var_I_Ks__gks_sl = 0.0035000000000000001; // mS_per_uF
        const double var_I_Kp__kp_kp = 1 / (1.0 + exp(7.4880000000000004 - 0.16722408026755853 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double var_I_Kr__rkr = 1 / (1.0 + exp(3.0833333333333335 + 0.041666666666666664 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double var_membrane_potential__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_membrane_potential__i_Stim = var_membrane_potential__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_parameters__Fjunc = 0.11; // dimensionless
        const double var_parameters__Fjunc_CaL = 0.90000000000000002; // dimensionless
        const double var_parameters__Fsl = 1.0 - var_parameters__Fjunc; // dimensionless
        const double var_I_Ks__GKs_total = (var_I_Ks__gks_junc * var_parameters__Fjunc + var_I_Ks__gks_sl * var_parameters__Fsl) * mParameters[18]; // mS_per_uF
        const double var_parameters__Fsl_CaL = 1.0 - var_parameters__Fjunc_CaL; // dimensionless
        const double var_parameters__GCaB = 0.00055130000000000001; // mS_per_uF
        const double var_parameters__GClB = 0.0089999999999999993; // mS_per_uF
        const double var_parameters__GClCa = 0.0548125; // mS_per_uF
        const double var_parameters__GNaB = 0.00059699999999999998; // mS_per_uF
        const double var_parameters__IbarSLCaP = 0.067299999999999999; // uA_per_uF
        const double var_parameters__KdClCa = 0.10000000000000001; // mM
        const double var_parameters__Kdact = 0.00014999999999999999; // mM
        const double var_I_NCX__Ka_junc = 1 / (1.0 + pow(var_parameters__Kdact, 2) / pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2)); // dimensionless
        const double var_I_NCX__Ka_sl = 1 / (1.0 + pow(var_parameters__Kdact, 2) / pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 2)); // dimensionless
        const double var_parameters__KmCai = 0.0035899999999999999; // mM
        const double var_parameters__KmCao = 1.3; // mM
        const double var_parameters__KmKo = 1.5; // mM
        const double var_parameters__KmNai = 12.289999999999999; // mM
        const double var_parameters__KmNaip = 11.0; // mM
        const double var_parameters__KmNao = 87.5; // mM
        const double var_parameters__KmPCa = 0.00050000000000000001; // mM
        const double var_I_Ki__g_K1 = 0.43033148291193518 * sqrt(mParameters[7]) * mParameters[16]; // mS_per_uF
        const double var_I_Kr__gkr = 0.43033148291193518 * sqrt(mParameters[7]) * mParameters[17]; // mS_per_uF
        const double var_I_NCX__s3_junc = pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * var_parameters__KmCao + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j + pow(var_parameters__KmNao, 3) * (1.0 + var_chaste_interface__Ca_Concentrations__Ca_j / var_parameters__KmCai) * var_chaste_interface__Ca_Concentrations__Ca_j + pow(mParameters[8], 3) * (1.0 + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) / pow(var_parameters__KmNai, 3)) * var_parameters__KmCai; // mM4
        const double var_I_NCX__s3_sl = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * var_parameters__KmCao + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl + pow(var_parameters__KmNao, 3) * (1.0 + var_chaste_interface__Ca_Concentrations__Ca_sl / var_parameters__KmCai) * var_chaste_interface__Ca_Concentrations__Ca_sl + pow(mParameters[8], 3) * (1.0 + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) / pow(var_parameters__KmNai, 3)) * var_parameters__KmCai; // mM4
        const double var_I_NaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[8]); // dimensionless
        const double var_parameters__Q10CaL = 1.8; // dimensionless
        const double var_parameters__Q10NCX = 1.5700000000000001; // dimensionless
        const double var_parameters__Q10SLCaP = 2.3500000000000001; // dimensionless
        const double var_I_Ca__ibark = ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 1.3499999999999999e-14 * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (1.35e-7 * pow(mParameters[9], 2) * (-0.75 * mParameters[7] + 0.75 * var_chaste_interface__K_Concentration__K_i * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__ibarna_j = ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__ibarna_sl = ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_I_NaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) + 0.036499999999999998 * var_I_NaK__sigma * exp(-var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)); // dimensionless
        const double var_I_NaK__I_nak_junc = var_I_NaK__fnak * var_parameters__Fjunc * mParameters[21] * mParameters[7] / ((1.0 + pow(var_parameters__KmNaip, 4) / pow(var_chaste_interface__Na_Concentrations__Na_j, 4)) * (var_parameters__KmKo + mParameters[7])); // uA_per_uF
        const double var_I_NaK__I_nak_sl = var_I_NaK__fnak * var_parameters__Fsl * mParameters[21] * mParameters[7] / ((1.0 + pow(var_parameters__KmNaip, 4) / pow(var_chaste_interface__Na_Concentrations__Na_sl, 4)) * (var_parameters__KmKo + mParameters[7])); // uA_per_uF
        const double var_I_NaK__I_nak = var_I_NaK__I_nak_junc + var_I_NaK__I_nak_sl; // uA_per_uF
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_I_Ca__I_CaK = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * ((1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * var_parameters__Fjunc_CaL + (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * var_parameters__Fsl_CaL) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibark; // uA_per_uF
        const double var_I_Ca__I_CaNa_junc = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarna_j * var_parameters__Fjunc_CaL; // uA_per_uF
        const double var_I_Ca__I_CaNa_sl = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarna_sl * var_parameters__Fsl_CaL; // uA_per_uF
        const double var_I_PCa__I_pca_junc = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) * pow(var_parameters__Q10SLCaP, var_parameters__Qpow) * var_parameters__Fjunc * var_parameters__IbarSLCaP / (pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) + pow(var_parameters__KmPCa, 1.6000000000000001)); // uA_per_uF
        const double var_I_PCa__I_pca_sl = pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) * pow(var_parameters__Q10SLCaP, var_parameters__Qpow) * var_parameters__Fsl * var_parameters__IbarSLCaP / (pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) + pow(var_parameters__KmPCa, 1.6000000000000001)); // uA_per_uF
        const double var_parameters__eca_junc = 0.5 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_j) / var_parameters__FoRT; // mV
        const double var_I_CaBK__I_cabk_junc = (-var_parameters__eca_junc + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fjunc * var_parameters__GCaB; // uA_per_uF
        const double var_parameters__eca_sl = 0.5 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_sl) / var_parameters__FoRT; // mV
        const double var_I_CaBK__I_cabk_sl = (-var_parameters__eca_sl + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fsl * var_parameters__GCaB; // uA_per_uF
        const double var_parameters__ecl = log(mParameters[4] / mParameters[6]) / var_parameters__FoRT; // mV
        const double var_I_ClCa__I_ClCa_junc = (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fjunc * var_parameters__GClCa / (1.0 + var_parameters__KdClCa / var_chaste_interface__Ca_Concentrations__Ca_j); // uA_per_uF
        const double var_I_ClCa__I_ClCa_sl = (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fsl * var_parameters__GClCa / (1.0 + var_parameters__KdClCa / var_chaste_interface__Ca_Concentrations__Ca_sl); // uA_per_uF
        const double var_I_ClCa__I_ClCa = var_I_ClCa__I_ClCa_junc + var_I_ClCa__I_ClCa_sl; // uA_per_uF
        const double var_I_ClCa__I_Clbk = (-var_parameters__ecl + var_chaste_interface__membrane_potential__V_m) * var_parameters__GClB; // uA_per_uF
        const double var_membrane_potential__I_Cl_tot = var_I_ClCa__I_ClCa + var_I_ClCa__I_Clbk; // uA_per_uF
        const double var_parameters__ek = log(mParameters[7] / var_chaste_interface__K_Concentration__K_i) / var_parameters__FoRT; // mV
        const double var_I_Ki__aki = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane_potential__V_m - 0.23849999999999999 * var_parameters__ek)); // dimensionless
        const double var_I_Ki__bki = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane_potential__V_m - 0.080320000000000003 * var_parameters__ek) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane_potential__V_m - 0.061749999999999999 * var_parameters__ek)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_parameters__ek - 0.51429999999999998 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double var_I_Ki__kiss = var_I_Ki__aki / (var_I_Ki__aki + var_I_Ki__bki); // dimensionless
        const double var_I_Ki__I_ki = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Ki__g_K1 * var_I_Ki__kiss; // uA_per_uF
        const double var_I_Kr__I_kr = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Kr__gkr * var_I_Kr__rkr * var_chaste_interface__I_Kr__x_kr; // uA_per_uF
        const double var_parameters__ena_junc = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_j) / var_parameters__FoRT; // mV
        const double var_I_Na__I_Na_junc = pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * var_parameters__Fjunc * mParameters[12]; // uA_per_uF
        const double var_I_NaBK__I_nabk_junc = (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fjunc * var_parameters__GNaB; // uA_per_uF
        const double var_parameters__ena_sl = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_sl) / var_parameters__FoRT; // mV
        const double var_I_Na__I_Na_sl = pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * var_parameters__Fsl * mParameters[12]; // uA_per_uF
        const double var_I_NaBK__I_nabk_sl = (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fsl * var_parameters__GNaB; // uA_per_uF
        const double var_parameters__epi = 1.0; // dimensionless
        const double var_I_to__GtoFast = ((var_parameters__epi == 1.0) ? (0.1144 * mParameters[15]) : (0.0014039999999999999 * mParameters[15])); // mS_per_uF
        const double var_I_to__GtoSlow = ((var_parameters__epi == 1.0) ? (0.015599999999999999 * mParameters[19]) : (0.037595999999999997 * mParameters[19])); // mS_per_uF
        const double var_I_to__I_tof = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_to__GtoFast * var_chaste_interface__I_to__x_to_f * var_chaste_interface__I_to__y_to_f; // uA_per_uF
        const double var_I_to__I_tos = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_to__GtoSlow * var_chaste_interface__I_to__x_to_s * var_chaste_interface__I_to__y_to_s; // uA_per_uF
        const double var_I_to__I_to = var_I_to__I_tof + var_I_to__I_tos; // uA_per_uF
        const double var_parameters__gkp = 0.002; // mS_per_uF
        const double var_I_Kp__I_kp_junc = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Kp__kp_kp * var_parameters__Fjunc * var_parameters__gkp; // uA_per_uF
        const double var_I_Kp__I_kp_sl = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Kp__kp_kp * var_parameters__Fsl * var_parameters__gkp; // uA_per_uF
        const double var_I_Kp__I_kp = var_I_Kp__I_kp_junc + var_I_Kp__I_kp_sl; // uA_per_uF
        const double var_parameters__ksat = 0.32000000000000001; // dimensionless
        const double var_parameters__nu = 0.27000000000000002; // dimensionless
        const double var_I_NCX__s1_junc = pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] * exp(var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT * var_parameters__nu); // mM4
        const double var_I_NCX__s1_sl = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] * exp(var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT * var_parameters__nu); // mM4
        const double var_I_NCX__s2_junc = pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT); // mM4
        const double var_I_NCX__I_ncx_junc = pow(var_parameters__Q10NCX, var_parameters__Qpow) * (-var_I_NCX__s2_junc + var_I_NCX__s1_junc) * var_I_NCX__Ka_junc * var_parameters__Fjunc * mParameters[20] / ((1.0 + var_parameters__ksat * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * var_I_NCX__s3_junc); // uA_per_uF
        const double var_I_NCX__s2_sl = pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT); // mM4
        const double var_I_NCX__I_ncx_sl = pow(var_parameters__Q10NCX, var_parameters__Qpow) * (-var_I_NCX__s2_sl + var_I_NCX__s1_sl) * var_I_NCX__Ka_sl * var_parameters__Fsl * mParameters[20] / ((1.0 + var_parameters__ksat * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * var_I_NCX__s3_sl); // uA_per_uF
        const double var_Na_Concentrations__I_Na_tot_junc = 3.0 * var_I_NCX__I_ncx_junc + 3.0 * var_I_NaK__I_nak_junc + var_I_Ca__I_CaNa_junc + var_I_Na__I_Na_junc + var_I_NaBK__I_nabk_junc; // uA_per_uF
        const double var_Na_Concentrations__I_Na_tot_sl = 3.0 * var_I_NCX__I_ncx_sl + 3.0 * var_I_NaK__I_nak_sl + var_I_Ca__I_CaNa_sl + var_I_Na__I_Na_sl + var_I_NaBK__I_nabk_sl; // uA_per_uF
        const double var_membrane_potential__I_Na_tot = var_Na_Concentrations__I_Na_tot_junc + var_Na_Concentrations__I_Na_tot_sl; // uA_per_uF
        const double var_I_Ca__ibarca_j = ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__I_Ca_junc = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarca_j * var_parameters__Fjunc_CaL; // uA_per_uF
        const double var_Ca_Concentrations__I_Ca_tot_junc = -2.0 * var_I_NCX__I_ncx_junc + var_I_Ca__I_Ca_junc + var_I_CaBK__I_cabk_junc + var_I_PCa__I_pca_junc; // uA_per_uF
        const double var_I_Ca__ibarca_sl = ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__I_Ca_sl = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarca_sl * var_parameters__Fsl_CaL; // uA_per_uF
        const double var_Ca_Concentrations__I_Ca_tot_sl = -2.0 * var_I_NCX__I_ncx_sl + var_I_Ca__I_Ca_sl + var_I_CaBK__I_cabk_sl + var_I_PCa__I_pca_sl; // uA_per_uF
        const double var_membrane_potential__I_Ca_tot = var_Ca_Concentrations__I_Ca_tot_junc + var_Ca_Concentrations__I_Ca_tot_sl; // uA_per_uF
        const double var_parameters__pNaK = 0.018329999999999999; // dimensionless
        const double var_I_Ks__eks = log((mParameters[8] * var_parameters__pNaK + mParameters[7]) / (var_chaste_interface__Na_Concentrations__Na_i * var_parameters__pNaK + var_chaste_interface__K_Concentration__K_i)) / var_parameters__FoRT; // mV
        const double var_I_Ks__I_ks = pow(var_chaste_interface__I_Ks__x_ks, 2) * (-var_I_Ks__eks + var_chaste_interface__membrane_potential__V_m) * var_I_Ks__GKs_total; // uA_per_uF
        const double var_K_Concentration__I_K_tot = -2.0 * var_I_NaK__I_nak + var_I_Ca__I_CaK + var_I_Ki__I_ki + var_I_Kp__I_kp + var_I_Kr__I_kr + var_I_Ks__I_ks + var_I_to__I_to; // uA_per_uF
        const double var_membrane_potential__I_tot = var_K_Concentration__I_K_tot + var_membrane_potential__I_Ca_tot + var_membrane_potential__I_Cl_tot + var_membrane_potential__I_Na_tot; // uA_per_uF
        d_dt_chaste_interface_var_membrane_potential__V_m = -var_membrane_potential__I_tot - var_membrane_potential__i_Stim; // mV / msec

        return d_dt_chaste_interface_var_membrane_potential__V_m;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            double var_chaste_interface__I_Na__m = rY[2];
            // Units: dimensionless; Initial value: 0.00381858135062259
            double var_chaste_interface__I_Na__h = rY[3];
            // Units: dimensionless; Initial value: 0.625086621635645
            double var_chaste_interface__I_Na__j = rY[4];
            // Units: dimensionless; Initial value: 0.62332507235506
            double var_chaste_interface__I_Kr__x_kr = rY[5];
            // Units: dimensionless; Initial value: 0.021733554982663
            double var_chaste_interface__I_Ks__x_ks = rY[6];
            // Units: dimensionless; Initial value: 0.00428981903391989
            double var_chaste_interface__I_to__x_to_s = rY[7];
            // Units: dimensionless; Initial value: 0.000441539203559411
            double var_chaste_interface__I_to__y_to_s = rY[8];
            // Units: dimensionless; Initial value: 0.784875334693892
            double var_chaste_interface__I_to__x_to_f = rY[9];
            // Units: dimensionless; Initial value: 0.000441531250866821
            double var_chaste_interface__I_to__y_to_f = rY[10];
            // Units: dimensionless; Initial value: 0.999995817153572
            double var_chaste_interface__I_Ca__d = rY[11];
            // Units: dimensionless; Initial value: 2.93982287251302e-06
            double var_chaste_interface__I_Ca__f = rY[12];
            // Units: dimensionless; Initial value: 0.99511673495949
            double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
            // Units: dimensionless; Initial value: 0.0246142436477748
            double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
            // Units: dimensionless; Initial value: 0.0152416826209301
            double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
            // Units: mM; Initial value: 8.3215690202059
            double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
            // Units: mM; Initial value: 8.32094589677861
            double var_chaste_interface__K_Concentration__K_i = rY[36];
            // Units: mM; Initial value: 120.0
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
            // Units: mM; Initial value: 0.000106544589194246
            

            const double var_x0 = exp(7.4880000000000004 - 0.16722408026755853 * var_chaste_interface__membrane_potential__V_m);
            const double var_x1 = 1.0 + var_x0;
            const double var_x2 = 0.002 / var_x1;
            const double var_x3 = 1 / var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x4 = 1.0 + 0.10000000000000001 * var_x3;
            const double var_x5 = 1 / var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x6 = 1.0 + 0.10000000000000001 * var_x5;
            const double var_x7 = pow(var_chaste_interface__I_Ks__x_ks, 2) * mParameters[18];
            const double var_x8 = 0.0035000000000000001 * var_x7;
            const double var_x9 = 1 / var_chaste_interface__K_Concentration__K_i;
            const double var_x10 = 1 / mParameters[9];
            const double var_x11 = var_x10 * mParameters[10] * mParameters[23];
            const double var_x12 = var_x11 * log(var_x9 * mParameters[7]);
            const double var_x13 = -var_x12 + var_chaste_interface__membrane_potential__V_m;
            const double var_x14 = 0.1144 * mParameters[15] * var_chaste_interface__I_to__x_to_f * var_chaste_interface__I_to__y_to_f;
            const double var_x15 = 0.015599999999999999 * mParameters[19] * var_chaste_interface__I_to__x_to_s * var_chaste_interface__I_to__y_to_s;
            const double var_x16 = pow(var_chaste_interface__I_Na__m, 3);
            const double var_x17 = var_x16 * var_chaste_interface__I_Na__j * mParameters[12];
            const double var_x18 = var_x17 * var_chaste_interface__I_Na__h;
            const double var_x19 = sqrt(mParameters[7]);
            const double var_x20 = var_x19 * mParameters[17] * var_chaste_interface__I_Kr__x_kr;
            const double var_x21 = exp(3.0833333333333335 + 0.041666666666666664 * var_chaste_interface__membrane_potential__V_m);
            const double var_x22 = 1.0 + var_x21;
            const double var_x23 = 0.43033148291193518 / var_x22;
            const double var_x24 = var_x20 * var_x23;
            const double var_x25 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane_potential__V_m - 0.23849999999999999 * var_x12);
            const double var_x26 = 1.0 + var_x25;
            const double var_x27 = 1 / var_x26;
            const double var_x28 = exp(-2.4444678999999998 + 0.51429999999999998 * var_x12 - 0.51429999999999998 * var_chaste_interface__membrane_potential__V_m);
            const double var_x29 = 1.0 + var_x28;
            const double var_x30 = 1 / var_x29;
            const double var_x31 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane_potential__V_m - 0.080320000000000003 * var_x12);
            const double var_x32 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane_potential__V_m - 0.061749999999999999 * var_x12);
            const double var_x33 = var_x32 + 0.49124000000000001 * var_x31;
            const double var_x34 = var_x30 * var_x33;
            const double var_x35 = var_x19 * mParameters[16] / (var_x34 + 1.02 * var_x27);
            const double var_x36 = 0.4389381125701739 * var_x27 * var_x35;
            const double var_x37 = exp(9.9999999999999995e-8);
            const double var_x38 = 1 / (-1.0 + var_x37);
            const double var_x39 = -0.75 * mParameters[7];
            const double var_x40 = 0.75 * var_chaste_interface__K_Concentration__K_i;
            const double var_x41 = 1.3499999999999999e-14 * mParameters[9];
            const double var_x42 = exp(-9.9999999999999995e-8);
            const double var_x43 = 1 / (-1.0 + var_x42);
            const double var_x44 = var_x41 * var_x43 * (var_x39 + var_x40 * var_x42);
            const double var_x45 = 1 / (mParameters[10] * mParameters[23]);
            const double var_x46 = var_x45 * mParameters[9];
            const double var_x47 = 5000000.0 * var_x46;
            const double var_x48 = var_x47 * (var_x44 + var_x38 * var_x41 * (var_x39 + var_x37 * var_x40));
            const double var_x49 = fabs(var_chaste_interface__membrane_potential__V_m);
            const double var_x50 = fabs(var_x11);
            const double var_x51 = var_x49 < 9.9999999999999995e-8 * var_x50;
            const double var_x52 = var_x46 * var_chaste_interface__membrane_potential__V_m;
            const double var_x53 = exp(var_x52);
            const double var_x54 = 1.35e-7 * var_x39 + 1.35e-7 * var_x40 * var_x53;
            const double var_x55 = -1.0 + var_x53;
            const double var_x56 = 1 / var_x55;
            const double var_x57 = var_x45 * pow(mParameters[9], 2);
            const double var_x58 = var_x56 * var_x57;
            const double var_x59 = var_x54 * var_x58;
            const double var_x60 = var_x53 * var_chaste_interface__membrane_potential__V_m;
            const double var_x61 = pow(mParameters[9], 3) / (pow(mParameters[10], 2) * pow(mParameters[23], 2));
            const double var_x62 = var_x60 * var_x61;
            const double var_x63 = var_x56 * var_x62;
            const double var_x64 = var_x62 / pow(var_x55, 2);
            const double var_x65 = 0.45000000000000001 - 0.044999999999999991 * var_chaste_interface__I_Ca__f_Ca_Bsl - 0.40500000000000003 * var_chaste_interface__I_Ca__f_Ca_Bj;
            const double var_x66 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x67 = pow(1.8, var_x66);
            const double var_x68 = var_x67 * var_chaste_interface__I_Ca__f;
            const double var_x69 = var_x68 * var_chaste_interface__I_Ca__d;
            const double var_x70 = var_x65 * var_x69;
            const double var_x71 = -0.75 * mParameters[8];
            const double var_x72 = 0.75 * var_chaste_interface__Na_Concentrations__Na_sl;
            const double var_x73 = 7.4999999999999986e-16 * mParameters[9];
            const double var_x74 = var_x38 * var_x73;
            const double var_x75 = var_x43 * var_x73;
            const double var_x76 = var_x75 * (var_x71 + var_x42 * var_x72);
            const double var_x77 = var_x47 * (var_x76 + var_x74 * (var_x71 + var_x37 * var_x72));
            const double var_x78 = var_x71 + var_x53 * var_x72;
            const double var_x79 = 7.4999999999999993e-9 * var_x58;
            const double var_x80 = var_x78 * var_x79;
            const double var_x81 = 5.6249999999999991e-9 * var_x63;
            const double var_x82 = 7.4999999999999993e-9 * var_x64;
            const double var_x83 = 1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl;
            const double var_x84 = 0.044999999999999991 * var_x83;
            const double var_x85 = var_x69 * var_x84;
            const double var_x86 = var_x85 * ((var_x51) ? (var_x77) : (var_x80 + var_x81 * var_chaste_interface__Na_Concentrations__Na_sl - var_x78 * var_x82));
            const double var_x87 = -0.34100000000000003 * mParameters[5];
            const double var_x88 = 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x89 = mParameters[9] * mParameters[11];
            const double var_x90 = 1.08e-10 * var_x89;
            const double var_x91 = var_x38 * var_x90;
            const double var_x92 = var_x43 * var_x90;
            const double var_x93 = var_x92 * (var_x87 + var_x42 * var_x88);
            const double var_x94 = 10000000.0 * var_x46;
            const double var_x95 = var_x94 * (var_x93 + var_x91 * (var_x87 + var_x37 * var_x88));
            const double var_x96 = var_x49 < 4.9999999999999998e-8 * var_x50;
            const double var_x97 = exp(2.0 * var_x52);
            const double var_x98 = var_x87 + var_x88 * var_x97;
            const double var_x99 = -1.0 + var_x97;
            const double var_x100 = mParameters[11] / var_x99;
            const double var_x101 = var_x100 * var_x57;
            const double var_x102 = 0.00216 * var_x101;
            const double var_x103 = var_x102 * var_x98;
            const double var_x104 = var_x97 * var_chaste_interface__membrane_potential__V_m;
            const double var_x105 = var_x104 * var_x61;
            const double var_x106 = 0.0014731200000000001 * var_x100 * var_x105;
            const double var_x107 = 0.0043200000000000001 * var_x105 * mParameters[11] / pow(var_x99, 2);
            const double var_x108 = var_x85 * ((var_x96) ? (var_x95) : (var_x103 + var_x106 * var_chaste_interface__Ca_Concentrations__Ca_sl - var_x107 * var_x98));
            const double var_x109 = 0.75 * var_chaste_interface__Na_Concentrations__Na_j;
            const double var_x110 = var_x75 * (var_x71 + var_x109 * var_x42);
            const double var_x111 = var_x47 * (var_x110 + var_x74 * (var_x71 + var_x109 * var_x37));
            const double var_x112 = var_x71 + var_x109 * var_x53;
            const double var_x113 = var_x112 * var_x79;
            const double var_x114 = 1.0 - var_chaste_interface__I_Ca__f_Ca_Bj;
            const double var_x115 = 0.40500000000000003 * var_x114;
            const double var_x116 = var_x115 * var_x69;
            const double var_x117 = var_x116 * ((var_x51) ? (var_x111) : (var_x113 + var_x81 * var_chaste_interface__Na_Concentrations__Na_j - var_x112 * var_x82));
            const double var_x118 = 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x119 = var_x92 * (var_x87 + var_x118 * var_x42);
            const double var_x120 = var_x94 * (var_x119 + var_x91 * (var_x87 + var_x118 * var_x37));
            const double var_x121 = var_x87 + var_x118 * var_x97;
            const double var_x122 = var_x102 * var_x121;
            const double var_x123 = var_x116 * ((var_x96) ? (var_x120) : (var_x122 + var_x106 * var_chaste_interface__Ca_Concentrations__Ca_j - var_x107 * var_x121));
            const double var_x124 = var_x25 / pow(var_x26, 2);
            const double var_x125 = 0.10468673984798647 * var_x124 * var_x13 * var_x35;
            const double var_x126 = exp(0.27000000000000002 * var_x52);
            const double var_x127 = pow(var_chaste_interface__Na_Concentrations__Na_j, 3);
            const double var_x128 = var_x127 * mParameters[5];
            const double var_x129 = var_x126 * var_x128;
            const double var_x130 = 0.27000000000000002 * var_x46;
            const double var_x131 = exp(-0.72999999999999998 * var_x52);
            const double var_x132 = pow(mParameters[8], 3);
            const double var_x133 = var_x132 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x134 = var_x131 * var_x133;
            const double var_x135 = 0.72999999999999998 * var_x46;
            const double var_x136 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_j) * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x137 = 1.0 + 0.00053869674493876331 * var_x127;
            const double var_x138 = 0.0035899999999999999 * var_x132;
            const double var_x139 = 1 / (var_x128 + var_x133 + 669921.875 * var_x136 + 1.3 * var_x127 + var_x137 * var_x138);
            const double var_x140 = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2);
            const double var_x141 = 1 / var_x140;
            const double var_x142 = 1.0 + 2.2499999999999996e-8 * var_x141;
            const double var_x143 = 1 / var_x142;
            const double var_x144 = 1.0 + 0.32000000000000001 * var_x131;
            const double var_x145 = pow(1.5700000000000001, var_x66) * mParameters[20];
            const double var_x146 = var_x145 / var_x144;
            const double var_x147 = var_x143 * var_x146;
            const double var_x148 = var_x139 * var_x147;
            const double var_x149 = var_x148 * (var_x129 * var_x130 + var_x134 * var_x135);
            const double var_x150 = pow(var_chaste_interface__Na_Concentrations__Na_j, (-4));
            const double var_x151 = 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m;
            const double var_x152 = exp(-var_x151 * var_x46);
            const double var_x153 = exp(0.01485884101040119 * mParameters[8]);
            const double var_x154 = exp(-var_x52);
            const double var_x155 = 1.0 + 0.1245 * var_x152 + 0.036499999999999998 * var_x154 * (-0.14285714285714285 + 0.14285714285714285 * var_x153);
            const double var_x156 = mParameters[21] * mParameters[7] / (1.5 + mParameters[7]);
            const double var_x157 = var_x156 * (0.012450000000000001 * var_x152 * var_x46 + var_x154 * var_x46 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x153)) / pow(var_x155, 2);
            const double var_x158 = var_x157 / (1.0 + 14641.0 * var_x150);
            const double var_x159 = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3);
            const double var_x160 = var_x159 * mParameters[5];
            const double var_x161 = var_x126 * var_x160;
            const double var_x162 = var_x132 * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x163 = var_x131 * var_x162;
            const double var_x164 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_sl) * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x165 = 1.0 + 0.00053869674493876331 * var_x159;
            const double var_x166 = 1 / (var_x160 + var_x162 + 669921.875 * var_x164 + 1.3 * var_x159 + var_x138 * var_x165);
            const double var_x167 = pow(var_chaste_interface__Ca_Concentrations__Ca_sl, (-2));
            const double var_x168 = 1.0 + 2.2499999999999996e-8 * var_x167;
            const double var_x169 = 1 / var_x168;
            const double var_x170 = var_x146 * var_x169;
            const double var_x171 = var_x166 * var_x170;
            const double var_x172 = var_x171 * (var_x130 * var_x161 + var_x135 * var_x163);
            const double var_x173 = pow(var_chaste_interface__Na_Concentrations__Na_sl, (-4));
            const double var_x174 = var_x157 / (1.0 + 14641.0 * var_x173);
            const double var_x175 = 0.061749999999999999 * var_x32;
            const double var_x176 = 0.039456396800000001 * var_x31;
            const double var_x177 = 0.24326999999999999 * var_x124;
            const double var_x178 = 0.51429999999999998 * var_x28 * var_x33 / pow(var_x29, 2);
            const double var_x179 = var_x13 * var_x19;
            const double var_x180 = 0.42189361069797565 * var_x179 * var_x27 * mParameters[16] / pow((var_x27 + 0.98039215686274506 * var_x34), 2);
            const double var_x181 = var_x129 - var_x134;
            const double var_x182 = var_x139 * var_x181;
            const double var_x183 = var_x131 * var_x145 * var_x46 / pow(var_x144, 2);
            const double var_x184 = var_x143 * var_x182 * var_x183;
            const double var_x185 = var_x161 - var_x163;
            const double var_x186 = var_x166 * var_x185;
            const double var_x187 = var_x169 * var_x183 * var_x186;
            
            partialF = -0.010148299999999999 + var_x125 - var_x108 - var_x117 - var_x123 - var_x14 - var_x15 - var_x2 - var_x24 - var_x36 - var_x8 - var_x86 - var_x18 - 0.11 * var_x149 - 0.11 * var_x158 - 0.89000000000000001 * var_x172 - 0.89000000000000001 * var_x174 - 0.006029375 / var_x4 - 0.025696 * var_x184 - 0.048783124999999997 / var_x6 - 0.20790400000000001 * var_x187 - var_x180 * (var_x177 - var_x178 - var_x30 * (var_x175 + var_x176)) - var_x70 * ((var_x51) ? (var_x48) : (var_x59 - var_x54 * var_x64 + 1.0125000000000001e-7 * var_x63 * var_chaste_interface__K_Concentration__K_i)) - 0.00033444816053511704 * var_x0 * var_x13 / pow(var_x1, 2) + 0.017930478454663966 * var_x13 * var_x20 * var_x21 / pow(var_x22, 2);
        }
        else
        {
            const double y_save = rY[0];
            rY[0] += delta;
            const double temp = EvaluateYDerivative0(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[0])/delta;
            rY[0] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL = rY[20];
        // Units: mM; Initial value: 0.00893708435270205
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc = rY[21];
        // Units: mM; Initial value: 0.117445983314504
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm = rY[22];
        // Units: mM; Initial value: 0.0105996734077994
        double var_chaste_interface__Cytosolic_Ca_Buffers__CaM = rY[23];
        // Units: mM; Initial value: 0.000295653619580701
        double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c = rY[24];
        // Units: mM; Initial value: 0.00192645052472679
        double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m = rY[25];
        // Units: mM; Initial value: 0.137557201546068
        double var_chaste_interface__Cytosolic_Ca_Buffers__SRB = rY[26];
        // Units: mM; Initial value: 0.00217414510791738
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        

        // Mathematics
        const double var_parameters__Bmax_CaM = 0.024; // mM
        const double var_parameters__Bmax_SR = 0.017100000000000001; // mM
        const double var_parameters__Bmax_TnChigh = 0.14000000000000001; // mM
        const double var_parameters__Bmax_TnClow = 0.070000000000000007; // mM
        const double var_parameters__Bmax_myosin = 0.14000000000000001; // mM
        const double var_parameters__J_ca_slmyo = 3.2742999999999999e-12; // liters_per_msec
        const double var_parameters__Kmf = 0.00024600000000000002; // mM
        const double var_parameters__Kmr = 1.7; // mM
        const double var_parameters__Mgi = 1.0; // mM
        const double var_parameters__Q10SRCaP = 2.6000000000000001; // dimensionless
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_parameters__cellLength = 100.0; // um
        const double var_parameters__cellRadius = 10.25; // um
        const double var_parameters__Vcell = 1.0000000000000001e-15 * M_PI * pow(var_parameters__cellRadius, 2) * var_parameters__cellLength; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Vsr = 0.035000000000000003 * var_parameters__Vcell; // liter
        const double var_parameters__hillSRCaP = 1.7869999999999999; // dimensionless
        const double var_SR_Fluxes__J_serca = pow(var_parameters__Q10SRCaP, var_parameters__Qpow) * (pow((var_chaste_interface__Ca_Concentrations__Ca_i / var_parameters__Kmf), var_parameters__hillSRCaP) - pow((var_chaste_interface__SR_Ca_Concentrations__Ca_sr / var_parameters__Kmr), var_parameters__hillSRCaP)) * mParameters[2] / (1.0 + pow((var_chaste_interface__Ca_Concentrations__Ca_i / var_parameters__Kmf), var_parameters__hillSRCaP) + pow((var_chaste_interface__SR_Ca_Concentrations__Ca_sr / var_parameters__Kmr), var_parameters__hillSRCaP)); // mM_per_msec
        const double var_parameters__koff_cam = 0.23799999999999999; // per_msec
        const double var_parameters__koff_myoca = 0.00046000000000000001; // per_msec
        const double var_parameters__koff_myomg = 5.7000000000000003e-5; // per_msec
        const double var_parameters__koff_sr = 0.059999999999999998; // per_msec
        const double var_parameters__koff_tnchca = 3.1999999999999999e-5; // per_msec
        const double var_parameters__koff_tnchmg = 0.0033300000000000001; // per_msec
        const double var_parameters__koff_tncl = 0.019599999999999999; // per_msec
        const double var_parameters__kon_cam = 34.0; // per_mM_per_msec
        const double var_parameters__kon_myoca = 13.800000000000001; // per_mM_per_msec
        const double var_parameters__kon_myomg = 0.015699999999999999; // per_mM_per_msec
        const double var_parameters__kon_sr = 100.0; // per_mM_per_msec
        const double var_parameters__kon_tnchca = 2.3700000000000001; // per_mM_per_msec
        const double var_parameters__kon_tnchmg = 0.0030000000000000001; // per_mM_per_msec
        const double var_parameters__kon_tncl = 32.700000000000003; // per_mM_per_msec
        const double var_Cytosolic_Ca_Buffers__J_CaB_cytosol = -var_chaste_interface__Cytosolic_Ca_Buffers__CaM * var_parameters__koff_cam - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c * var_parameters__koff_myoca - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m * var_parameters__koff_myomg - var_chaste_interface__Cytosolic_Ca_Buffers__SRB * var_parameters__koff_sr - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc * var_parameters__koff_tnchca - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm * var_parameters__koff_tnchmg - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL * var_parameters__koff_tncl + (-var_chaste_interface__Cytosolic_Ca_Buffers__CaM + var_parameters__Bmax_CaM) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_cam + (-var_chaste_interface__Cytosolic_Ca_Buffers__SRB + var_parameters__Bmax_SR) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_sr + (-var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL + var_parameters__Bmax_TnClow) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_tncl + (-var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m + var_parameters__Bmax_myosin) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_myoca + (-var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m + var_parameters__Bmax_myosin) * var_parameters__Mgi * var_parameters__kon_myomg + (-var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm + var_parameters__Bmax_TnChigh) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_tnchca + (-var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm + var_parameters__Bmax_TnChigh) * var_parameters__Mgi * var_parameters__kon_tnchmg; // mM_per_msec
        const double d_dt_chaste_interface_var_Ca_Concentrations__Ca_i = -var_Cytosolic_Ca_Buffers__J_CaB_cytosol + (-var_chaste_interface__Ca_Concentrations__Ca_i + var_chaste_interface__Ca_Concentrations__Ca_sl) * var_parameters__J_ca_slmyo / var_parameters__Vmyo - var_SR_Fluxes__J_serca * var_parameters__Vsr / var_parameters__Vmyo; // mM / msec

        return d_dt_chaste_interface_var_Ca_Concentrations__Ca_i;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
            // Units: mM; Initial value: 8.72745589849657e-05
            double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL = rY[20];
            // Units: mM; Initial value: 0.00893708435270205
            double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc = rY[21];
            // Units: mM; Initial value: 0.117445983314504
            double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm = rY[22];
            // Units: mM; Initial value: 0.0105996734077994
            double var_chaste_interface__Cytosolic_Ca_Buffers__CaM = rY[23];
            // Units: mM; Initial value: 0.000295653619580701
            double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c = rY[24];
            // Units: mM; Initial value: 0.00192645052472679
            double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m = rY[25];
            // Units: mM; Initial value: 0.137557201546068
            double var_chaste_interface__Cytosolic_Ca_Buffers__SRB = rY[26];
            // Units: mM; Initial value: 0.00217414510791738
            double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
            // Units: mM; Initial value: 0.555180633859957
            

            const double var_x66 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x285 = 34.0 * var_chaste_interface__Cytosolic_Ca_Buffers__CaM;
            const double var_x286 = 100.0 * var_chaste_interface__Cytosolic_Ca_Buffers__SRB;
            const double var_x287 = 32.700000000000003 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL;
            const double var_x288 = 2.3700000000000001 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc;
            const double var_x289 = 2.3700000000000001 * var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm;
            const double var_x290 = 13.800000000000001 * var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c;
            const double var_x291 = 13.800000000000001 * var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m;
            const double var_x292 = 1 / M_PI;
            const double var_x293 = 0.4794655196082917 * var_x292;
            const double var_x294 = pow(var_chaste_interface__Ca_Concentrations__Ca_i, 0.78699999999999992);
            const double var_x295 = pow(var_chaste_interface__SR_Ca_Concentrations__Ca_sr, 1.7869999999999999);
            const double var_x296 = 0.38742512113256738 * var_x295;
            const double var_x297 = pow(var_chaste_interface__Ca_Concentrations__Ca_i, 1.7869999999999999);
            const double var_x298 = 2814485.1633595936 * var_x297;
            const double var_x299 = pow(2.6000000000000001, var_x66) * mParameters[2];
            const double var_x300 = var_x299 / (1.0 + var_x296 + var_x298);
            const double var_x301 = var_x294 * var_x300;
            const double var_x302 = var_x299 * (var_x298 - var_x296) / pow((3.5530476870814998e-7 + var_x297 + 1.3765399305573384e-7 * var_x295), 2);
            const double var_x303 = var_x294 * var_x302;
            
            partialF = -7.0788000000000011 + var_x285 + var_x286 + var_x287 + var_x288 + var_x289 + var_x290 + var_x291 - var_x293 + 3.4188518090540365e-8 * var_x303 - 270818.42237280885 * var_x301;
        }
        else
        {
            const double y_save = rY[1];
            rY[1] += delta;
            const double temp = EvaluateYDerivative1(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[1])/delta;
            rY[1] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Na__m = rY[2];
        // Units: dimensionless; Initial value: 0.00381858135062259
        

        // Mathematics
        const double var_I_Na__mss = 1 / pow((1.0 + exp(-6.2967884828349945 - 0.11074197120708749 * var_chaste_interface__membrane_potential__V_m)), 2); // dimensionless
        const double var_I_Na__taum = 0.12920000000000001 * exp(-8.682389366752302 * pow((1 + 0.021838829438742085 * var_chaste_interface__membrane_potential__V_m), 2)) + 0.064869999999999997 * exp(-0.0089012876052174655 * pow((-1 + 0.2073398299813394 * var_chaste_interface__membrane_potential__V_m), 2)); // msec
        const double d_dt_chaste_interface_var_I_Na__m = (-var_chaste_interface__I_Na__m + var_I_Na__mss) / var_I_Na__taum; // 1 / msec

        return d_dt_chaste_interface_var_I_Na__m;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            

            const double var_x312 = exp(-0.0089012876052174655 * pow((-1 + 0.2073398299813394 * var_chaste_interface__membrane_potential__V_m), 2));
            const double var_x313 = exp(-8.682389366752302 * pow((1 + 0.021838829438742085 * var_chaste_interface__membrane_potential__V_m), 2));
            const double var_x316 = 0.12920000000000001 * var_x313;
            const double var_x317 = 0.064869999999999997 * var_x312;
            const double var_x318 = 1 / (var_x316 + var_x317);
            
            partialF = -var_x318;
        }
        else
        {
            const double y_save = rY[2];
            rY[2] += delta;
            const double temp = EvaluateYDerivative2(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[2])/delta;
            rY[2] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Na__h = rY[3];
        // Units: dimensionless; Initial value: 0.625086621635645
        

        // Mathematics
        const double var_I_Na__ah = ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0) : (0.057000000000000002 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[14] - 0.14705882352941177 * var_chaste_interface__membrane_potential__V_m))); // dimensionless
        const double var_I_Na__bh = ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (5.9230769230769234 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[14] - 0.0900900900900901 * var_chaste_interface__membrane_potential__V_m))) : (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane_potential__V_m - 0.34849999999999998 * mParameters[14]) + 2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane_potential__V_m - 0.079000000000000001 * mParameters[14]))); // dimensionless
        const double var_I_Na__hss = 0.01 * mParameters[13] + (1.0 - 0.01 * mParameters[13]) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__membrane_potential__V_m - 0.13458950201884254 * mParameters[14])), 2); // dimensionless
        const double var_I_Na__tauh = 1 / (var_I_Na__ah + var_I_Na__bh); // msec
        const double d_dt_chaste_interface_var_I_Na__h = (-var_chaste_interface__I_Na__h + var_I_Na__hss) / var_I_Na__tauh; // 1 / msec

        return d_dt_chaste_interface_var_I_Na__h;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            

            const double var_x319 = var_chaste_interface__membrane_potential__V_m >= -40.0;
            const double var_x320 = exp(-11.764705882352942 + 0.14705882352941177 * mParameters[14] - 0.14705882352941177 * var_chaste_interface__membrane_potential__V_m);
            const double var_x321 = exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[14] - 0.0900900900900901 * var_chaste_interface__membrane_potential__V_m);
            const double var_x322 = 1.0 + var_x321;
            const double var_x323 = exp(0.34849999999999998 * var_chaste_interface__membrane_potential__V_m - 0.34849999999999998 * mParameters[14]);
            const double var_x324 = exp(0.079000000000000001 * var_chaste_interface__membrane_potential__V_m - 0.079000000000000001 * mParameters[14]);
            const double var_x330 = ((var_x319) ? (0) : (0.057000000000000002 * var_x320));
            const double var_x331 = ((var_x319) ? (5.9230769230769234 / var_x322) : (310000.0 * var_x323 + 2.7000000000000002 * var_x324));
            
            partialF = -var_x330 - var_x331;
        }
        else
        {
            const double y_save = rY[3];
            rY[3] += delta;
            const double temp = EvaluateYDerivative3(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[3])/delta;
            rY[3] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Na__j = rY[4];
        // Units: dimensionless; Initial value: 0.62332507235506
        

        // Mathematics
        const double var_I_Na__aj = ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0) : ((37.780000000000001 + var_chaste_interface__membrane_potential__V_m) * (-25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane_potential__V_m - 0.24440000000000001 * mParameters[14]) - 6.9480000000000002e-6 * exp(0.043909999999999998 * mParameters[14] - 0.043909999999999998 * var_chaste_interface__membrane_potential__V_m)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane_potential__V_m - 0.311 * mParameters[14])))); // dimensionless
        const double var_I_Na__bj = ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane_potential__V_m - 0.057000000000000002 * mParameters[14]) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[14] - 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m))) : (0.024240000000000001 * exp(0.01052 * mParameters[14] - 0.01052 * var_chaste_interface__membrane_potential__V_m) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[14] - 0.13780000000000001 * var_chaste_interface__membrane_potential__V_m)))); // dimensionless
        const double var_I_Na__jss = 0.01 * mParameters[13] + (1.0 - 0.01 * mParameters[13]) / pow((1.0 + exp(9.6298788694481825 + 0.13458950201884254 * var_chaste_interface__membrane_potential__V_m - 0.13458950201884254 * mParameters[14])), 2); // dimensionless
        const double var_I_Na__tauj = 1 / (var_I_Na__aj + var_I_Na__bj); // msec
        const double d_dt_chaste_interface_var_I_Na__j = (-var_chaste_interface__I_Na__j + var_I_Na__jss) / var_I_Na__tauj; // 1 / msec

        return d_dt_chaste_interface_var_I_Na__j;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            

            const double var_x151 = 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m;
            const double var_x319 = var_chaste_interface__membrane_potential__V_m >= -40.0;
            const double var_x333 = exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane_potential__V_m - 0.311 * mParameters[14]);
            const double var_x334 = 1.0 + var_x333;
            const double var_x335 = 1 / var_x334;
            const double var_x336 = exp(0.24440000000000001 * var_chaste_interface__membrane_potential__V_m - 0.24440000000000001 * mParameters[14]);
            const double var_x337 = exp(0.043909999999999998 * mParameters[14] - 0.043909999999999998 * var_chaste_interface__membrane_potential__V_m);
            const double var_x338 = -25428.0 * var_x336 - 6.9480000000000002e-6 * var_x337;
            const double var_x339 = var_x335 * var_x338;
            const double var_x340 = 37.780000000000001 + var_chaste_interface__membrane_potential__V_m;
            const double var_x341 = exp(-3.2000000000000002 - var_x151 + 0.10000000000000001 * mParameters[14]);
            const double var_x342 = 1.0 + var_x341;
            const double var_x343 = exp(0.057000000000000002 * var_chaste_interface__membrane_potential__V_m - 0.057000000000000002 * mParameters[14]);
            const double var_x344 = var_x343 / var_x342;
            const double var_x345 = exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[14] - 0.13780000000000001 * var_chaste_interface__membrane_potential__V_m);
            const double var_x346 = 1.0 + var_x345;
            const double var_x347 = exp(0.01052 * mParameters[14] - 0.01052 * var_chaste_interface__membrane_potential__V_m);
            const double var_x348 = var_x347 / var_x346;
            const double var_x349 = ((var_x319) ? (0) : (var_x339 * var_x340));
            const double var_x350 = ((var_x319) ? (0.59999999999999998 * var_x344) : (0.024240000000000001 * var_x348));
            
            partialF = -var_x349 - var_x350;
        }
        else
        {
            const double y_save = rY[4];
            rY[4] += delta;
            const double temp = EvaluateYDerivative4(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[4])/delta;
            rY[4] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Kr__x_kr = rY[5];
        // Units: dimensionless; Initial value: 0.021733554982663
        

        // Mathematics
        const double var_I_Kr__tauxr = 230.0 / (1.0 + exp(2.0 + 0.050000000000000003 * var_chaste_interface__membrane_potential__V_m)) + 3300.0 / ((1.0 + exp(1.2222222222222223 + 0.1111111111111111 * var_chaste_interface__membrane_potential__V_m)) * (1.0 + exp(-2.4444444444444446 - 0.1111111111111111 * var_chaste_interface__membrane_potential__V_m))); // msec
        const double var_I_Kr__xrss = 1 / (1.0 + exp(-2.0 - 0.20000000000000001 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double d_dt_chaste_interface_var_I_Kr__x_kr = (-var_chaste_interface__I_Kr__x_kr + var_I_Kr__xrss) / var_I_Kr__tauxr; // 1 / msec

        return d_dt_chaste_interface_var_I_Kr__x_kr;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            

            const double var_x351 = 0.050000000000000003 * var_chaste_interface__membrane_potential__V_m;
            const double var_x352 = exp(2.0 + var_x351);
            const double var_x353 = 1.0 + var_x352;
            const double var_x354 = 1 / var_x353;
            const double var_x355 = 0.1111111111111111 * var_chaste_interface__membrane_potential__V_m;
            const double var_x356 = exp(1.2222222222222223 + var_x355);
            const double var_x357 = 1.0 + var_x356;
            const double var_x358 = 1 / var_x357;
            const double var_x359 = exp(-2.4444444444444446 - var_x355);
            const double var_x360 = 1.0 + var_x359;
            const double var_x361 = 1 / var_x360;
            const double var_x362 = var_x358 * var_x361;
            const double var_x366 = 1 / (230.0 * var_x354 + 3300.0 * var_x362);
            
            partialF = -var_x366;
        }
        else
        {
            const double y_save = rY[5];
            rY[5] += delta;
            const double temp = EvaluateYDerivative5(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[5])/delta;
            rY[5] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Ks__x_ks = rY[6];
        // Units: dimensionless; Initial value: 0.00428981903391989
        

        // Mathematics
        const double var_I_Ks__tauxs = 990.10000000000002 / (1.0 + exp(-0.17252124645892353 - 0.070821529745042494 * var_chaste_interface__membrane_potential__V_m)); // msec
        const double var_I_Ks__xsss = 1 / (1.0 + exp(-0.26666666666666666 - 0.070175438596491224 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double d_dt_chaste_interface_var_I_Ks__x_ks = (-var_chaste_interface__I_Ks__x_ks + var_I_Ks__xsss) / var_I_Ks__tauxs; // 1 / msec

        return d_dt_chaste_interface_var_I_Ks__x_ks;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative6(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            

            const double var_x369 = exp(-0.17252124645892353 - 0.070821529745042494 * var_chaste_interface__membrane_potential__V_m);
            const double var_x370 = 0.00100999899000101 * var_x369;
            
            partialF = -0.00100999899000101 - var_x370;
        }
        else
        {
            const double y_save = rY[6];
            rY[6] += delta;
            const double temp = EvaluateYDerivative6(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[6])/delta;
            rY[6] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_to__x_to_s = rY[7];
        // Units: dimensionless; Initial value: 0.000441539203559411
        

        // Mathematics
        const double var_I_to__tauxtos = 0.5 + 9.0 / (1.0 + exp(0.20000000000000001 + 0.066666666666666666 * var_chaste_interface__membrane_potential__V_m)); // msec
        const double var_I_to__xtoss = 1 / (1.0 + exp(1.4615384615384615 - 0.076923076923076927 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double d_dt_chaste_interface_var_I_to__x_to_s = (-var_chaste_interface__I_to__x_to_s + var_I_to__xtoss) / var_I_to__tauxtos; // 1 / msec

        return d_dt_chaste_interface_var_I_to__x_to_s;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative7(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            

            const double var_x371 = exp(0.20000000000000001 + 0.066666666666666666 * var_chaste_interface__membrane_potential__V_m);
            const double var_x372 = 1.0 + var_x371;
            const double var_x373 = 1 / var_x372;
            const double var_x374 = 1 / (0.5 + 9.0 * var_x373);
            
            partialF = -var_x374;
        }
        else
        {
            const double y_save = rY[7];
            rY[7] += delta;
            const double temp = EvaluateYDerivative7(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[7])/delta;
            rY[7] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_to__y_to_s = rY[8];
        // Units: dimensionless; Initial value: 0.784875334693892
        

        // Mathematics
        const double var_I_to__tauytos = 30.0 + 800.0 / (1.0 + exp(6.0 + 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m)); // msec
        const double var_I_to__ytoss = 1 / (1.0 + exp(3.8999999999999999 + 0.20000000000000001 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double d_dt_chaste_interface_var_I_to__y_to_s = (-var_chaste_interface__I_to__y_to_s + var_I_to__ytoss) / var_I_to__tauytos; // 1 / msec

        return d_dt_chaste_interface_var_I_to__y_to_s;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative8(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            

            const double var_x379 = exp(6.0 + 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m);
            const double var_x380 = 1.0 + var_x379;
            const double var_x381 = 1 / var_x380;
            const double var_x382 = 1 / (30.0 + 800.0 * var_x381);
            
            partialF = -var_x382;
        }
        else
        {
            const double y_save = rY[8];
            rY[8] += delta;
            const double temp = EvaluateYDerivative8(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[8])/delta;
            rY[8] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_to__x_to_f = rY[9];
        // Units: dimensionless; Initial value: 0.000441531250866821
        

        // Mathematics
        const double var_I_to__tauxtof = 0.5 + 8.5 * exp(-0.81000000000000005 * pow((1 + 0.022222222222222223 * var_chaste_interface__membrane_potential__V_m), 2)); // msec
        const double var_I_to__xtoss = 1 / (1.0 + exp(1.4615384615384615 - 0.076923076923076927 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double d_dt_chaste_interface_var_I_to__x_to_f = (-var_chaste_interface__I_to__x_to_f + var_I_to__xtoss) / var_I_to__tauxtof; // 1 / msec

        return d_dt_chaste_interface_var_I_to__x_to_f;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative9(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            

            const double var_x387 = exp(-0.81000000000000005 * pow((1 + 0.022222222222222223 * var_chaste_interface__membrane_potential__V_m), 2));
            const double var_x388 = 1 / (0.5 + 8.5 * var_x387);
            
            partialF = -var_x388;
        }
        else
        {
            const double y_save = rY[9];
            rY[9] += delta;
            const double temp = EvaluateYDerivative9(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[9])/delta;
            rY[9] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_to__y_to_f = rY[10];
        // Units: dimensionless; Initial value: 0.999995817153572
        

        // Mathematics
        const double var_I_to__tauytof = 7.0 + 85.0 * exp(-7.2727272727272725 * pow((1 + 0.025000000000000001 * var_chaste_interface__membrane_potential__V_m), 2)); // msec
        const double var_I_to__ytoss = 1 / (1.0 + exp(3.8999999999999999 + 0.20000000000000001 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double d_dt_chaste_interface_var_I_to__y_to_f = (-var_chaste_interface__I_to__y_to_f + var_I_to__ytoss) / var_I_to__tauytof; // 1 / msec

        return d_dt_chaste_interface_var_I_to__y_to_f;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative10(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            

            const double var_x389 = exp(-7.2727272727272725 * pow((1 + 0.025000000000000001 * var_chaste_interface__membrane_potential__V_m), 2));
            const double var_x390 = 1 / (7.0 + 85.0 * var_x389);
            
            partialF = -var_x390;
        }
        else
        {
            const double y_save = rY[10];
            rY[10] += delta;
            const double temp = EvaluateYDerivative10(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[10])/delta;
            rY[10] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        

        // Mathematics
        const double var_I_Ca__dss = 1 / (1.0 + exp(-0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double var_I_Ca__taud = ((fabs(5.0 + var_chaste_interface__membrane_potential__V_m) < 6.0000000000337561e-7) ? (47619047.618779711 * (1.0 - exp(-1.000000000005626e-7)) / (1.0 + exp(-1.000000000005626e-7)) - 833333.33332864498 * (4.9999994000000001 + var_chaste_interface__membrane_potential__V_m) * (-47619047.618779711 * (1.0 - exp(1.000000000005626e-7)) / (1.0 + exp(1.000000000005626e-7)) - 47619047.618779711 * (1.0 - exp(-1.000000000005626e-7)) / (1.0 + exp(-1.000000000005626e-7)))) : (28.571428571428569 * (1.0 - exp(-0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__membrane_potential__V_m)) / ((1.0 + exp(-0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__membrane_potential__V_m)) * (5.0 + var_chaste_interface__membrane_potential__V_m)))); // msec
        const double d_dt_chaste_interface_var_I_Ca__d = (-var_chaste_interface__I_Ca__d + var_I_Ca__dss) / var_I_Ca__taud; // 1 / msec

        return d_dt_chaste_interface_var_I_Ca__d;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative11(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            

            const double var_x391 = exp(-0.83333333333333337 - 0.16666666666666666 * var_chaste_interface__membrane_potential__V_m);
            const double var_x392 = 1.0 + var_x391;
            const double var_x393 = exp(-1.000000000005626e-7);
            const double var_x394 = (1.0 - var_x393) / (1.0 + var_x393);
            const double var_x395 = exp(1.000000000005626e-7);
            const double var_x396 = (1.0 - var_x395) / (1.0 + var_x395);
            const double var_x397 = 47619047.618779711 * var_x394;
            const double var_x398 = (4.9999994000000001 + var_chaste_interface__membrane_potential__V_m) * (-var_x397 - 47619047.618779711 * var_x396);
            const double var_x399 = 5.0 + var_chaste_interface__membrane_potential__V_m;
            const double var_x400 = fabs(var_x399) < 6.0000000000337561e-7;
            const double var_x401 = 1.0 - var_x391;
            const double var_x402 = 1 / var_x401;
            const double var_x403 = 0.035000000000000003 * var_x392 * var_x402;
            const double var_x405 = ((var_x400) ? (1 / (var_x397 - 833333.33332864498 * var_x398)) : (var_x399 * var_x403));
            
            partialF = -var_x405;
        }
        else
        {
            const double y_save = rY[11];
            rY[11] += delta;
            const double temp = EvaluateYDerivative11(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[11])/delta;
            rY[11] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        

        // Mathematics
        const double var_I_Ca__fss = 1 / (1.0 + exp(3.8888888888888888 + 0.1111111111111111 * var_chaste_interface__membrane_potential__V_m)) + 0.59999999999999998 / (1.0 + exp(2.5 - 0.050000000000000003 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double var_I_Ca__tauf = 1 / (0.02 + 0.019699999999999999 * exp(-0.23877882250000002 * pow((1 + 0.068965517241379309 * var_chaste_interface__membrane_potential__V_m), 2))); // msec
        const double d_dt_chaste_interface_var_I_Ca__f = (-var_chaste_interface__I_Ca__f + var_I_Ca__fss) / var_I_Ca__tauf; // 1 / msec

        return d_dt_chaste_interface_var_I_Ca__f;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative12(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            

            const double var_x406 = 0.019699999999999999 * exp(-0.23877882250000002 * pow((1 + 0.068965517241379309 * var_chaste_interface__membrane_potential__V_m), 2));
            
            partialF = -0.02 - var_x406;
        }
        else
        {
            const double y_save = rY[12];
            rY[12] += delta;
            const double temp = EvaluateYDerivative12(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[12])/delta;
            rY[12] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
        // Units: dimensionless; Initial value: 0.0246142436477748
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        

        // Mathematics
        const double d_dt_chaste_interface_var_I_Ca__f_Ca_Bj = -0.011900000000000001 * var_chaste_interface__I_Ca__f_Ca_Bj + 1.7 * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj) * var_chaste_interface__Ca_Concentrations__Ca_j; // 1 / msec

        return d_dt_chaste_interface_var_I_Ca__f_Ca_Bj;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative13(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            

            
            partialF = -0.011900000000000001 - 1.7 * var_chaste_interface__Ca_Concentrations__Ca_j;
        }
        else
        {
            const double y_save = rY[13];
            rY[13] += delta;
            const double temp = EvaluateYDerivative13(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[13])/delta;
            rY[13] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
        // Units: dimensionless; Initial value: 0.0152416826209301
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        

        // Mathematics
        const double d_dt_chaste_interface_var_I_Ca__f_Ca_Bsl = -0.011900000000000001 * var_chaste_interface__I_Ca__f_Ca_Bsl + 1.7 * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl) * var_chaste_interface__Ca_Concentrations__Ca_sl; // 1 / msec

        return d_dt_chaste_interface_var_I_Ca__f_Ca_Bsl;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative14(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
            // Units: mM; Initial value: 0.000106544589194246
            

            
            partialF = -0.011900000000000001 - 1.7 * var_chaste_interface__Ca_Concentrations__Ca_sl;
        }
        else
        {
            const double y_save = rY[14];
            rY[14] += delta;
            const double temp = EvaluateYDerivative14(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[14])/delta;
            rY[14] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__SR_Fluxes__Ry_Rr = rY[15];
        // Units: mM; Initial value: 0.891022230597263
        double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
        // Units: mM; Initial value: 7.37484660389498e-07
        double var_chaste_interface__SR_Fluxes__Ry_Ri = rY[17];
        // Units: mM; Initial value: 9.01984485847386e-08
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        

        // Mathematics
        const double var_SR_Fluxes__MaxSR = 15.0; // dimensionless
        const double var_SR_Fluxes__MinSR = 1.0; // dimensionless
        const double var_SR_Fluxes__RI = 1.0 - var_chaste_interface__SR_Fluxes__Ry_Ri - var_chaste_interface__SR_Fluxes__Ry_Ro - var_chaste_interface__SR_Fluxes__Ry_Rr; // mM
        const double var_parameters__ec50SR = 0.45000000000000001; // mM
        const double var_SR_Fluxes__kCaSR = -(-var_SR_Fluxes__MinSR + var_SR_Fluxes__MaxSR) / (1.0 + pow((var_parameters__ec50SR / var_chaste_interface__SR_Ca_Concentrations__Ca_sr), 2.5)) + var_SR_Fluxes__MaxSR; // dimensionless
        const double var_parameters__kiCa = 0.5; // per_mM_per_msec
        const double var_SR_Fluxes__kiSRCa = var_SR_Fluxes__kCaSR * var_parameters__kiCa; // per_mM_per_msec
        const double var_parameters__kim = 0.0050000000000000001; // per_msec
        const double var_parameters__koCa = 10.0; // per_mM2_per_msec
        const double var_SR_Fluxes__koSRCa = var_parameters__koCa / var_SR_Fluxes__kCaSR; // per_mM2_per_msec
        const double var_parameters__kom = 0.059999999999999998; // per_msec
        const double d_dt_chaste_interface_var_SR_Fluxes__Ry_Rr = var_SR_Fluxes__RI * var_parameters__kim + var_chaste_interface__SR_Fluxes__Ry_Ro * var_parameters__kom - pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2) * var_chaste_interface__SR_Fluxes__Ry_Rr * var_SR_Fluxes__koSRCa - var_chaste_interface__Ca_Concentrations__Ca_j * var_chaste_interface__SR_Fluxes__Ry_Rr * var_SR_Fluxes__kiSRCa; // mM / msec

        return d_dt_chaste_interface_var_SR_Fluxes__Ry_Rr;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative15(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
            // Units: mM; Initial value: 0.555180633859957
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            

            const double var_x140 = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2);
            const double var_x411 = 1 / var_chaste_interface__SR_Ca_Concentrations__Ca_sr;
            const double var_x412 = pow(var_x411, 2.5);
            const double var_x413 = 1.0 + 0.13584112963311223 * var_x412;
            const double var_x414 = 1 / var_x413;
            const double var_x415 = 7.0 * var_x414;
            const double var_x416 = -7.5 + var_x415;
            const double var_x417 = var_x416 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x418 = 1 / (15.0 - 14.0 * var_x414);
            const double var_x419 = 10.0 * var_x140 * var_x418;
            const double var_x420 = -var_x419;
            
            partialF = -0.0050000000000000001 + var_x417 + var_x420;
        }
        else
        {
            const double y_save = rY[15];
            rY[15] += delta;
            const double temp = EvaluateYDerivative15(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[15])/delta;
            rY[15] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__SR_Fluxes__Ry_Rr = rY[15];
        // Units: mM; Initial value: 0.891022230597263
        double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
        // Units: mM; Initial value: 7.37484660389498e-07
        double var_chaste_interface__SR_Fluxes__Ry_Ri = rY[17];
        // Units: mM; Initial value: 9.01984485847386e-08
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        

        // Mathematics
        const double var_SR_Fluxes__MaxSR = 15.0; // dimensionless
        const double var_SR_Fluxes__MinSR = 1.0; // dimensionless
        const double var_parameters__ec50SR = 0.45000000000000001; // mM
        const double var_SR_Fluxes__kCaSR = -(-var_SR_Fluxes__MinSR + var_SR_Fluxes__MaxSR) / (1.0 + pow((var_parameters__ec50SR / var_chaste_interface__SR_Ca_Concentrations__Ca_sr), 2.5)) + var_SR_Fluxes__MaxSR; // dimensionless
        const double var_parameters__kiCa = 0.5; // per_mM_per_msec
        const double var_SR_Fluxes__kiSRCa = var_SR_Fluxes__kCaSR * var_parameters__kiCa; // per_mM_per_msec
        const double var_parameters__kim = 0.0050000000000000001; // per_msec
        const double var_parameters__koCa = 10.0; // per_mM2_per_msec
        const double var_SR_Fluxes__koSRCa = var_parameters__koCa / var_SR_Fluxes__kCaSR; // per_mM2_per_msec
        const double var_parameters__kom = 0.059999999999999998; // per_msec
        const double d_dt_chaste_interface_var_SR_Fluxes__Ry_Ro = var_chaste_interface__SR_Fluxes__Ry_Ri * var_parameters__kim - var_chaste_interface__SR_Fluxes__Ry_Ro * var_parameters__kom + pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2) * var_chaste_interface__SR_Fluxes__Ry_Rr * var_SR_Fluxes__koSRCa - var_chaste_interface__Ca_Concentrations__Ca_j * var_chaste_interface__SR_Fluxes__Ry_Ro * var_SR_Fluxes__kiSRCa; // mM / msec

        return d_dt_chaste_interface_var_SR_Fluxes__Ry_Ro;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative16(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
            // Units: mM; Initial value: 0.555180633859957
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            

            const double var_x411 = 1 / var_chaste_interface__SR_Ca_Concentrations__Ca_sr;
            const double var_x412 = pow(var_x411, 2.5);
            const double var_x413 = 1.0 + 0.13584112963311223 * var_x412;
            const double var_x414 = 1 / var_x413;
            const double var_x415 = 7.0 * var_x414;
            const double var_x416 = -7.5 + var_x415;
            const double var_x417 = var_x416 * var_chaste_interface__Ca_Concentrations__Ca_j;
            
            partialF = -0.059999999999999998 + var_x417;
        }
        else
        {
            const double y_save = rY[16];
            rY[16] += delta;
            const double temp = EvaluateYDerivative16(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[16])/delta;
            rY[16] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__SR_Fluxes__Ry_Rr = rY[15];
        // Units: mM; Initial value: 0.891022230597263
        double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
        // Units: mM; Initial value: 7.37484660389498e-07
        double var_chaste_interface__SR_Fluxes__Ry_Ri = rY[17];
        // Units: mM; Initial value: 9.01984485847386e-08
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        

        // Mathematics
        const double var_SR_Fluxes__MaxSR = 15.0; // dimensionless
        const double var_SR_Fluxes__MinSR = 1.0; // dimensionless
        const double var_SR_Fluxes__RI = 1.0 - var_chaste_interface__SR_Fluxes__Ry_Ri - var_chaste_interface__SR_Fluxes__Ry_Ro - var_chaste_interface__SR_Fluxes__Ry_Rr; // mM
        const double var_parameters__ec50SR = 0.45000000000000001; // mM
        const double var_SR_Fluxes__kCaSR = -(-var_SR_Fluxes__MinSR + var_SR_Fluxes__MaxSR) / (1.0 + pow((var_parameters__ec50SR / var_chaste_interface__SR_Ca_Concentrations__Ca_sr), 2.5)) + var_SR_Fluxes__MaxSR; // dimensionless
        const double var_parameters__kiCa = 0.5; // per_mM_per_msec
        const double var_SR_Fluxes__kiSRCa = var_SR_Fluxes__kCaSR * var_parameters__kiCa; // per_mM_per_msec
        const double var_parameters__kim = 0.0050000000000000001; // per_msec
        const double var_parameters__koCa = 10.0; // per_mM2_per_msec
        const double var_SR_Fluxes__koSRCa = var_parameters__koCa / var_SR_Fluxes__kCaSR; // per_mM2_per_msec
        const double var_parameters__kom = 0.059999999999999998; // per_msec
        const double d_dt_chaste_interface_var_SR_Fluxes__Ry_Ri = -var_chaste_interface__SR_Fluxes__Ry_Ri * var_parameters__kim - var_chaste_interface__SR_Fluxes__Ry_Ri * var_parameters__kom + pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2) * var_SR_Fluxes__RI * var_SR_Fluxes__koSRCa + var_chaste_interface__Ca_Concentrations__Ca_j * var_chaste_interface__SR_Fluxes__Ry_Ro * var_SR_Fluxes__kiSRCa; // mM / msec

        return d_dt_chaste_interface_var_SR_Fluxes__Ry_Ri;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative17(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
            // Units: mM; Initial value: 0.555180633859957
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            

            const double var_x140 = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2);
            const double var_x411 = 1 / var_chaste_interface__SR_Ca_Concentrations__Ca_sr;
            const double var_x412 = pow(var_x411, 2.5);
            const double var_x413 = 1.0 + 0.13584112963311223 * var_x412;
            const double var_x414 = 1 / var_x413;
            const double var_x418 = 1 / (15.0 - 14.0 * var_x414);
            const double var_x419 = 10.0 * var_x140 * var_x418;
            const double var_x420 = -var_x419;
            
            partialF = -0.065000000000000002 + var_x420;
        }
        else
        {
            const double y_save = rY[17];
            rY[17] += delta;
            const double temp = EvaluateYDerivative17(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[17])/delta;
            rY[17] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Na_Buffers__Na_Bj = rY[18];
        // Units: mM; Initial value: 3.43545459048316
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        

        // Mathematics
        const double var_parameters__Bmax_Naj = 7.5609999999999999; // mM
        const double var_parameters__koff_na = 0.001; // per_msec
        const double var_parameters__kon_na = 0.0001; // per_mM_per_msec
        const double var_Na_Buffers__dNa_Bj_dt = -var_chaste_interface__Na_Buffers__Na_Bj * var_parameters__koff_na + (-var_chaste_interface__Na_Buffers__Na_Bj + var_parameters__Bmax_Naj) * var_chaste_interface__Na_Concentrations__Na_j * var_parameters__kon_na; // mM_per_msec
        const double d_dt_chaste_interface_var_Na_Buffers__Na_Bj = var_Na_Buffers__dNa_Bj_dt; // mM / msec

        return d_dt_chaste_interface_var_Na_Buffers__Na_Bj;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative18(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
            // Units: mM; Initial value: 8.3215690202059
            

            const double var_x431 = 0.0001 * var_chaste_interface__Na_Concentrations__Na_j;
            
            partialF = -0.001 - var_x431;
        }
        else
        {
            const double y_save = rY[18];
            rY[18] += delta;
            const double temp = EvaluateYDerivative18(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[18])/delta;
            rY[18] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Na_Buffers__Na_Bsl = rY[19];
        // Units: mM; Initial value: 0.749601264899653
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        

        // Mathematics
        const double var_parameters__Bmax_Nasl = 1.6499999999999999; // mM
        const double var_parameters__koff_na = 0.001; // per_msec
        const double var_parameters__kon_na = 0.0001; // per_mM_per_msec
        const double var_Na_Buffers__dNa_Bsl_dt = -var_chaste_interface__Na_Buffers__Na_Bsl * var_parameters__koff_na + (-var_chaste_interface__Na_Buffers__Na_Bsl + var_parameters__Bmax_Nasl) * var_chaste_interface__Na_Concentrations__Na_sl * var_parameters__kon_na; // mM_per_msec
        const double d_dt_chaste_interface_var_Na_Buffers__Na_Bsl = var_Na_Buffers__dNa_Bsl_dt; // mM / msec

        return d_dt_chaste_interface_var_Na_Buffers__Na_Bsl;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative19(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
            // Units: mM; Initial value: 8.32094589677861
            

            const double var_x433 = 0.0001 * var_chaste_interface__Na_Concentrations__Na_sl;
            
            partialF = -0.001 - var_x433;
        }
        else
        {
            const double y_save = rY[19];
            rY[19] += delta;
            const double temp = EvaluateYDerivative19(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[19])/delta;
            rY[19] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL = rY[20];
        // Units: mM; Initial value: 0.00893708435270205
        

        // Mathematics
        const double var_parameters__Bmax_TnClow = 0.070000000000000007; // mM
        const double var_parameters__koff_tncl = 0.019599999999999999; // per_msec
        const double var_parameters__kon_tncl = 32.700000000000003; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CL = -var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL * var_parameters__koff_tncl + (-var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CL + var_parameters__Bmax_TnClow) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_tncl; // mM / msec

        return d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CL;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative20(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
            // Units: mM; Initial value: 8.72745589849657e-05
            

            const double var_x304 = 32.700000000000003 * var_chaste_interface__Ca_Concentrations__Ca_i;
            
            partialF = -0.019599999999999999 - var_x304;
        }
        else
        {
            const double y_save = rY[20];
            rY[20] += delta;
            const double temp = EvaluateYDerivative20(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[20])/delta;
            rY[20] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc = rY[21];
        // Units: mM; Initial value: 0.117445983314504
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm = rY[22];
        // Units: mM; Initial value: 0.0105996734077994
        

        // Mathematics
        const double var_parameters__Bmax_TnChigh = 0.14000000000000001; // mM
        const double var_parameters__koff_tnchca = 3.1999999999999999e-5; // per_msec
        const double var_parameters__kon_tnchca = 2.3700000000000001; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHc = -var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc * var_parameters__koff_tnchca + (-var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm + var_parameters__Bmax_TnChigh) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_tnchca; // mM / msec

        return d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHc;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative21(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
            // Units: mM; Initial value: 8.72745589849657e-05
            

            const double var_x305 = 2.3700000000000001 * var_chaste_interface__Ca_Concentrations__Ca_i;
            const double var_x435 = -var_x305;
            
            partialF = -3.1999999999999999e-5 + var_x435;
        }
        else
        {
            const double y_save = rY[21];
            rY[21] += delta;
            const double temp = EvaluateYDerivative21(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[21])/delta;
            rY[21] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc = rY[21];
        // Units: mM; Initial value: 0.117445983314504
        double var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm = rY[22];
        // Units: mM; Initial value: 0.0105996734077994
        

        // Mathematics
        const double var_parameters__Bmax_TnChigh = 0.14000000000000001; // mM
        const double var_parameters__Mgi = 1.0; // mM
        const double var_parameters__koff_tnchmg = 0.0033300000000000001; // per_msec
        const double var_parameters__kon_tnchmg = 0.0030000000000000001; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHm = -var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm * var_parameters__koff_tnchmg + (-var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHc - var_chaste_interface__Cytosolic_Ca_Buffers__Tn_CHm + var_parameters__Bmax_TnChigh) * var_parameters__Mgi * var_parameters__kon_tnchmg; // mM / msec

        return d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Tn_CHm;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative22(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            
            partialF = -0.0063300000000000006;
        }
        else
        {
            const double y_save = rY[22];
            rY[22] += delta;
            const double temp = EvaluateYDerivative22(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[22])/delta;
            rY[22] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__Cytosolic_Ca_Buffers__CaM = rY[23];
        // Units: mM; Initial value: 0.000295653619580701
        

        // Mathematics
        const double var_parameters__Bmax_CaM = 0.024; // mM
        const double var_parameters__koff_cam = 0.23799999999999999; // per_msec
        const double var_parameters__kon_cam = 34.0; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__CaM = -var_chaste_interface__Cytosolic_Ca_Buffers__CaM * var_parameters__koff_cam + (-var_chaste_interface__Cytosolic_Ca_Buffers__CaM + var_parameters__Bmax_CaM) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_cam; // mM / msec

        return d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__CaM;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative23(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
            // Units: mM; Initial value: 8.72745589849657e-05
            

            const double var_x306 = 34.0 * var_chaste_interface__Ca_Concentrations__Ca_i;
            
            partialF = -0.23799999999999999 - var_x306;
        }
        else
        {
            const double y_save = rY[23];
            rY[23] += delta;
            const double temp = EvaluateYDerivative23(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[23])/delta;
            rY[23] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c = rY[24];
        // Units: mM; Initial value: 0.00192645052472679
        double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m = rY[25];
        // Units: mM; Initial value: 0.137557201546068
        

        // Mathematics
        const double var_parameters__Bmax_myosin = 0.14000000000000001; // mM
        const double var_parameters__koff_myoca = 0.00046000000000000001; // per_msec
        const double var_parameters__kon_myoca = 13.800000000000001; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_c = -var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c * var_parameters__koff_myoca + (-var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m + var_parameters__Bmax_myosin) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_myoca; // mM / msec

        return d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_c;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative24(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
            // Units: mM; Initial value: 8.72745589849657e-05
            

            const double var_x307 = 13.800000000000001 * var_chaste_interface__Ca_Concentrations__Ca_i;
            const double var_x436 = -var_x307;
            
            partialF = -0.00046000000000000001 + var_x436;
        }
        else
        {
            const double y_save = rY[24];
            rY[24] += delta;
            const double temp = EvaluateYDerivative24(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[24])/delta;
            rY[24] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c = rY[24];
        // Units: mM; Initial value: 0.00192645052472679
        double var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m = rY[25];
        // Units: mM; Initial value: 0.137557201546068
        

        // Mathematics
        const double var_parameters__Bmax_myosin = 0.14000000000000001; // mM
        const double var_parameters__Mgi = 1.0; // mM
        const double var_parameters__koff_myomg = 5.7000000000000003e-5; // per_msec
        const double var_parameters__kon_myomg = 0.015699999999999999; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_m = -var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m * var_parameters__koff_myomg + (-var_chaste_interface__Cytosolic_Ca_Buffers__Myo_c - var_chaste_interface__Cytosolic_Ca_Buffers__Myo_m + var_parameters__Bmax_myosin) * var_parameters__Mgi * var_parameters__kon_myomg; // mM / msec

        return d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__Myo_m;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative25(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            
            partialF = -0.015757;
        }
        else
        {
            const double y_save = rY[25];
            rY[25] += delta;
            const double temp = EvaluateYDerivative25(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[25])/delta;
            rY[25] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__Cytosolic_Ca_Buffers__SRB = rY[26];
        // Units: mM; Initial value: 0.00217414510791738
        

        // Mathematics
        const double var_parameters__Bmax_SR = 0.017100000000000001; // mM
        const double var_parameters__koff_sr = 0.059999999999999998; // per_msec
        const double var_parameters__kon_sr = 100.0; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__SRB = -var_chaste_interface__Cytosolic_Ca_Buffers__SRB * var_parameters__koff_sr + (-var_chaste_interface__Cytosolic_Ca_Buffers__SRB + var_parameters__Bmax_SR) * var_chaste_interface__Ca_Concentrations__Ca_i * var_parameters__kon_sr; // mM / msec

        return d_dt_chaste_interface_var_Cytosolic_Ca_Buffers__SRB;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative26(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
            // Units: mM; Initial value: 8.72745589849657e-05
            

            const double var_x308 = 100.0 * var_chaste_interface__Ca_Concentrations__Ca_i;
            
            partialF = -0.059999999999999998 - var_x308;
        }
        else
        {
            const double y_save = rY[26];
            rY[26] += delta;
            const double temp = EvaluateYDerivative26(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[26])/delta;
            rY[26] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j = rY[27];
        // Units: mM; Initial value: 0.00738583890572642
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        

        // Mathematics
        const double var_parameters__cellLength = 100.0; // um
        const double var_parameters__cellRadius = 10.25; // um
        const double var_parameters__Vcell = 1.0000000000000001e-15 * M_PI * pow(var_parameters__cellRadius, 2) * var_parameters__cellLength; // liter
        const double var_parameters__Vjunc = 0.00053900000000000009 * var_parameters__Vcell; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_SLlowj = 0.00046000000000000001 * var_parameters__Vmyo / var_parameters__Vjunc; // mM
        const double var_parameters__koff_sll = 1.3; // per_msec
        const double var_parameters__kon_sll = 100.0; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_j = -var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j * var_parameters__koff_sll + (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j + var_parameters__Bmax_SLlowj) * var_chaste_interface__Ca_Concentrations__Ca_j * var_parameters__kon_sll; // mM / msec

        return d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_j;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative27(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            

            const double var_x437 = 100.0 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x438 = -var_x437;
            
            partialF = -1.3 + var_x438;
        }
        else
        {
            const double y_save = rY[27];
            rY[27] += delta;
            const double temp = EvaluateYDerivative27(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[27])/delta;
            rY[27] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl = rY[28];
        // Units: mM; Initial value: 0.00988178900584875
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        

        // Mathematics
        const double var_parameters__cellLength = 100.0; // um
        const double var_parameters__cellRadius = 10.25; // um
        const double var_parameters__Vcell = 1.0000000000000001e-15 * M_PI * pow(var_parameters__cellRadius, 2) * var_parameters__cellLength; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Vsl = 0.02 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_SLlowsl = 0.037400000000000003 * var_parameters__Vmyo / var_parameters__Vsl; // mM
        const double var_parameters__koff_sll = 1.3; // per_msec
        const double var_parameters__kon_sll = 100.0; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_sl = -var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl * var_parameters__koff_sll + (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl + var_parameters__Bmax_SLlowsl) * var_chaste_interface__Ca_Concentrations__Ca_sl * var_parameters__kon_sll; // mM / msec

        return d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLL_sl;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative28(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
            // Units: mM; Initial value: 0.000106544589194246
            

            const double var_x440 = 100.0 * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x441 = -var_x440;
            
            partialF = -1.3 + var_x441;
        }
        else
        {
            const double y_save = rY[28];
            rY[28] += delta;
            const double temp = EvaluateYDerivative28(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[28])/delta;
            rY[28] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j = rY[29];
        // Units: mM; Initial value: 0.0734662466011574
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        

        // Mathematics
        const double var_parameters__cellLength = 100.0; // um
        const double var_parameters__cellRadius = 10.25; // um
        const double var_parameters__Vcell = 1.0000000000000001e-15 * M_PI * pow(var_parameters__cellRadius, 2) * var_parameters__cellLength; // liter
        const double var_parameters__Vjunc = 0.00053900000000000009 * var_parameters__Vcell; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_SLhighj = 0.000165 * var_parameters__Vmyo / var_parameters__Vjunc; // mM
        const double var_parameters__koff_slh = 0.029999999999999999; // per_msec
        const double var_parameters__kon_slh = 100.0; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_j = -var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j * var_parameters__koff_slh + (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j + var_parameters__Bmax_SLhighj) * var_chaste_interface__Ca_Concentrations__Ca_j * var_parameters__kon_slh; // mM / msec

        return d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_j;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative29(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            

            const double var_x437 = 100.0 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x438 = -var_x437;
            
            partialF = -0.029999999999999999 + var_x438;
        }
        else
        {
            const double y_save = rY[29];
            rY[29] += delta;
            const double temp = EvaluateYDerivative29(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[29])/delta;
            rY[29] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl = rY[30];
        // Units: mM; Initial value: 0.114400081504523
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        

        // Mathematics
        const double var_parameters__cellLength = 100.0; // um
        const double var_parameters__cellRadius = 10.25; // um
        const double var_parameters__Vcell = 1.0000000000000001e-15 * M_PI * pow(var_parameters__cellRadius, 2) * var_parameters__cellLength; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Vsl = 0.02 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_SLhighsl = 0.0134 * var_parameters__Vmyo / var_parameters__Vsl; // mM
        const double var_parameters__koff_slh = 0.029999999999999999; // per_msec
        const double var_parameters__kon_slh = 100.0; // per_mM_per_msec
        const double d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_sl = -var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl * var_parameters__koff_slh + (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl + var_parameters__Bmax_SLhighsl) * var_chaste_interface__Ca_Concentrations__Ca_sl * var_parameters__kon_slh; // mM / msec

        return d_dt_chaste_interface_var_Junctional_and_SL_Ca_Buffers__SLH_sl;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative30(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
            // Units: mM; Initial value: 0.000106544589194246
            

            const double var_x440 = 100.0 * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x441 = -var_x440;
            
            partialF = -0.029999999999999999 + var_x441;
        }
        else
        {
            const double y_save = rY[30];
            rY[30] += delta;
            const double temp = EvaluateYDerivative30(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[30])/delta;
            rY[30] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__SR_Ca_Concentrations__Csqn_b = rY[31];
        // Units: mM; Initial value: 1.19772047585784
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        

        // Mathematics
        const double var_parameters__cellLength = 100.0; // um
        const double var_parameters__cellRadius = 10.25; // um
        const double var_parameters__Vcell = 1.0000000000000001e-15 * M_PI * pow(var_parameters__cellRadius, 2) * var_parameters__cellLength; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Vsr = 0.035000000000000003 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_Csqn = 0.14000000000000001 * var_parameters__Vmyo / var_parameters__Vsr; // mM
        const double var_parameters__koff_csqn = 65.0; // per_msec
        const double var_parameters__kon_csqn = 100.0; // per_mM_per_msec
        const double d_dt_chaste_interface_var_SR_Ca_Concentrations__Csqn_b = -var_chaste_interface__SR_Ca_Concentrations__Csqn_b * var_parameters__koff_csqn + (-var_chaste_interface__SR_Ca_Concentrations__Csqn_b + var_parameters__Bmax_Csqn) * var_chaste_interface__SR_Ca_Concentrations__Ca_sr * var_parameters__kon_csqn; // mM / msec

        return d_dt_chaste_interface_var_SR_Ca_Concentrations__Csqn_b;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative31(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
            // Units: mM; Initial value: 0.555180633859957
            

            const double var_x445 = 100.0 * var_chaste_interface__SR_Ca_Concentrations__Ca_sr;
            
            partialF = -65.0 - var_x445;
        }
        else
        {
            const double y_save = rY[31];
            rY[31] += delta;
            const double temp = EvaluateYDerivative31(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[31])/delta;
            rY[31] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
        // Units: mM; Initial value: 7.37484660389498e-07
        double var_chaste_interface__SR_Ca_Concentrations__Csqn_b = rY[31];
        // Units: mM; Initial value: 1.19772047585784
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        

        // Mathematics
        const double var_SR_Fluxes__J_SRleak = (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__SR_Ca_Concentrations__Ca_sr) * mParameters[0]; // mM_per_msec
        const double var_parameters__Kmf = 0.00024600000000000002; // mM
        const double var_parameters__Kmr = 1.7; // mM
        const double var_parameters__Q10SRCaP = 2.6000000000000001; // dimensionless
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_parameters__cellLength = 100.0; // um
        const double var_parameters__cellRadius = 10.25; // um
        const double var_parameters__Vcell = 1.0000000000000001e-15 * M_PI * pow(var_parameters__cellRadius, 2) * var_parameters__cellLength; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Vsr = 0.035000000000000003 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_Csqn = 0.14000000000000001 * var_parameters__Vmyo / var_parameters__Vsr; // mM
        const double var_parameters__hillSRCaP = 1.7869999999999999; // dimensionless
        const double var_SR_Fluxes__J_serca = pow(var_parameters__Q10SRCaP, var_parameters__Qpow) * (pow((var_chaste_interface__Ca_Concentrations__Ca_i / var_parameters__Kmf), var_parameters__hillSRCaP) - pow((var_chaste_interface__SR_Ca_Concentrations__Ca_sr / var_parameters__Kmr), var_parameters__hillSRCaP)) * mParameters[2] / (1.0 + pow((var_chaste_interface__Ca_Concentrations__Ca_i / var_parameters__Kmf), var_parameters__hillSRCaP) + pow((var_chaste_interface__SR_Ca_Concentrations__Ca_sr / var_parameters__Kmr), var_parameters__hillSRCaP)); // mM_per_msec
        const double var_parameters__koff_csqn = 65.0; // per_msec
        const double var_parameters__kon_csqn = 100.0; // per_mM_per_msec
        const double var_SR_Fluxes__J_SRCarel = (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__SR_Ca_Concentrations__Ca_sr) * var_chaste_interface__SR_Fluxes__Ry_Ro * mParameters[1]; // mM_per_msec
        const double d_dt_chaste_interface_var_SR_Ca_Concentrations__Ca_sr = -var_SR_Fluxes__J_SRCarel + var_chaste_interface__SR_Ca_Concentrations__Csqn_b * var_parameters__koff_csqn - var_SR_Fluxes__J_SRleak * var_parameters__Vmyo / var_parameters__Vsr - (-var_chaste_interface__SR_Ca_Concentrations__Csqn_b + var_parameters__Bmax_Csqn) * var_chaste_interface__SR_Ca_Concentrations__Ca_sr * var_parameters__kon_csqn + var_SR_Fluxes__J_serca; // mM / msec

        return d_dt_chaste_interface_var_SR_Ca_Concentrations__Ca_sr;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative32(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
            // Units: mM; Initial value: 8.72745589849657e-05
            double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
            // Units: mM; Initial value: 7.37484660389498e-07
            double var_chaste_interface__SR_Ca_Concentrations__Csqn_b = rY[31];
            // Units: mM; Initial value: 1.19772047585784
            double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
            // Units: mM; Initial value: 0.555180633859957
            

            const double var_x66 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x295 = pow(var_chaste_interface__SR_Ca_Concentrations__Ca_sr, 1.7869999999999999);
            const double var_x296 = 0.38742512113256738 * var_x295;
            const double var_x297 = pow(var_chaste_interface__Ca_Concentrations__Ca_i, 1.7869999999999999);
            const double var_x298 = 2814485.1633595936 * var_x297;
            const double var_x299 = pow(2.6000000000000001, var_x66) * mParameters[2];
            const double var_x300 = var_x299 / (1.0 + var_x296 + var_x298);
            const double var_x302 = var_x299 * (var_x298 - var_x296) / pow((3.5530476870814998e-7 + var_x297 + 1.3765399305573384e-7 * var_x295), 2);
            const double var_x309 = pow(var_chaste_interface__SR_Ca_Concentrations__Ca_sr, 0.78699999999999992);
            const double var_x310 = var_x300 * var_x309;
            const double var_x311 = var_x302 * var_x309;
            const double var_x446 = 100.0 * var_chaste_interface__SR_Ca_Concentrations__Csqn_b;
            const double var_x447 = 18.571428571428569 * mParameters[0];
            const double var_x448 = var_chaste_interface__SR_Fluxes__Ry_Ro * mParameters[1];
            const double var_x449 = var_x448;
            
            partialF = -260.0 + var_x446 - var_x447 - var_x449 - 0.69232869146389786 * var_x310 - 8.7400597733819945e-14 * var_x311;
        }
        else
        {
            const double y_save = rY[32];
            rY[32] += delta;
            const double temp = EvaluateYDerivative32(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[32])/delta;
            rY[32] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Na__m = rY[2];
        // Units: dimensionless; Initial value: 0.00381858135062259
        double var_chaste_interface__I_Na__h = rY[3];
        // Units: dimensionless; Initial value: 0.625086621635645
        double var_chaste_interface__I_Na__j = rY[4];
        // Units: dimensionless; Initial value: 0.62332507235506
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
        // Units: dimensionless; Initial value: 0.0246142436477748
        double var_chaste_interface__Na_Buffers__Na_Bj = rY[18];
        // Units: mM; Initial value: 3.43545459048316
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        

        // Mathematics
        const double var_I_Ca__fcaCaj = 0; // dimensionless
        const double var_parameters__Bmax_Naj = 7.5609999999999999; // mM
        const double var_parameters__Fjunc = 0.11; // dimensionless
        const double var_parameters__Fjunc_CaL = 0.90000000000000002; // dimensionless
        const double var_parameters__GNaB = 0.00059699999999999998; // mS_per_uF
        const double var_parameters__J_na_juncsl = 1.8312999999999999e-14; // liters_per_msec
        const double var_parameters__Kdact = 0.00014999999999999999; // mM
        const double var_I_NCX__Ka_junc = 1 / (1.0 + pow(var_parameters__Kdact, 2) / pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2)); // dimensionless
        const double var_parameters__KmCai = 0.0035899999999999999; // mM
        const double var_parameters__KmCao = 1.3; // mM
        const double var_parameters__KmKo = 1.5; // mM
        const double var_parameters__KmNai = 12.289999999999999; // mM
        const double var_parameters__KmNaip = 11.0; // mM
        const double var_parameters__KmNao = 87.5; // mM
        const double var_I_NCX__s3_junc = pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * var_parameters__KmCao + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j + pow(var_parameters__KmNao, 3) * (1.0 + var_chaste_interface__Ca_Concentrations__Ca_j / var_parameters__KmCai) * var_chaste_interface__Ca_Concentrations__Ca_j + pow(mParameters[8], 3) * (1.0 + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) / pow(var_parameters__KmNai, 3)) * var_parameters__KmCai; // mM4
        const double var_I_NaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[8]); // dimensionless
        const double var_parameters__Q10CaL = 1.8; // dimensionless
        const double var_parameters__Q10NCX = 1.5700000000000001; // dimensionless
        const double var_I_Ca__ibarna_j = ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_j * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_I_NaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) + 0.036499999999999998 * var_I_NaK__sigma * exp(-var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)); // dimensionless
        const double var_I_NaK__I_nak_junc = var_I_NaK__fnak * var_parameters__Fjunc * mParameters[21] * mParameters[7] / ((1.0 + pow(var_parameters__KmNaip, 4) / pow(var_chaste_interface__Na_Concentrations__Na_j, 4)) * (var_parameters__KmKo + mParameters[7])); // uA_per_uF
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_I_Ca__I_CaNa_junc = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarna_j * var_parameters__Fjunc_CaL; // uA_per_uF
        const double var_parameters__cellLength = 100.0; // um
        const double var_parameters__cellRadius = 10.25; // um
        const double var_parameters__Vcell = 1.0000000000000001e-15 * M_PI * pow(var_parameters__cellRadius, 2) * var_parameters__cellLength; // liter
        const double var_parameters__Vjunc = 0.00053900000000000009 * var_parameters__Vcell; // liter
        const double var_parameters__ena_junc = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_j) / var_parameters__FoRT; // mV
        const double var_I_Na__I_Na_junc = pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * var_parameters__Fjunc * mParameters[12]; // uA_per_uF
        const double var_I_NaBK__I_nabk_junc = (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fjunc * var_parameters__GNaB; // uA_per_uF
        const double var_parameters__koff_na = 0.001; // per_msec
        const double var_parameters__kon_na = 0.0001; // per_mM_per_msec
        const double var_Na_Buffers__dNa_Bj_dt = -var_chaste_interface__Na_Buffers__Na_Bj * var_parameters__koff_na + (-var_chaste_interface__Na_Buffers__Na_Bj + var_parameters__Bmax_Naj) * var_chaste_interface__Na_Concentrations__Na_j * var_parameters__kon_na; // mM_per_msec
        const double var_parameters__ksat = 0.32000000000000001; // dimensionless
        const double var_parameters__nu = 0.27000000000000002; // dimensionless
        const double var_I_NCX__s1_junc = pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] * exp(var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT * var_parameters__nu); // mM4
        const double var_I_NCX__s2_junc = pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT); // mM4
        const double var_I_NCX__I_ncx_junc = pow(var_parameters__Q10NCX, var_parameters__Qpow) * (-var_I_NCX__s2_junc + var_I_NCX__s1_junc) * var_I_NCX__Ka_junc * var_parameters__Fjunc * mParameters[20] / ((1.0 + var_parameters__ksat * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * var_I_NCX__s3_junc); // uA_per_uF
        const double var_Na_Concentrations__I_Na_tot_junc = 3.0 * var_I_NCX__I_ncx_junc + 3.0 * var_I_NaK__I_nak_junc + var_I_Ca__I_CaNa_junc + var_I_Na__I_Na_junc + var_I_NaBK__I_nabk_junc; // uA_per_uF
        const double d_dt_chaste_interface_var_Na_Concentrations__Na_j = (-var_Na_Buffers__dNa_Bj_dt + (-var_chaste_interface__Na_Concentrations__Na_j + var_chaste_interface__Na_Concentrations__Na_sl) * var_parameters__J_na_juncsl / var_parameters__Vjunc - var_Na_Concentrations__I_Na_tot_junc * mParameters[22] / (mParameters[9] * var_parameters__Vjunc)) * mParameters[3]; // mM / msec

        return d_dt_chaste_interface_var_Na_Concentrations__Na_j;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative33(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            double var_chaste_interface__I_Na__m = rY[2];
            // Units: dimensionless; Initial value: 0.00381858135062259
            double var_chaste_interface__I_Na__h = rY[3];
            // Units: dimensionless; Initial value: 0.625086621635645
            double var_chaste_interface__I_Na__j = rY[4];
            // Units: dimensionless; Initial value: 0.62332507235506
            double var_chaste_interface__I_Ca__d = rY[11];
            // Units: dimensionless; Initial value: 2.93982287251302e-06
            double var_chaste_interface__I_Ca__f = rY[12];
            // Units: dimensionless; Initial value: 0.99511673495949
            double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
            // Units: dimensionless; Initial value: 0.0246142436477748
            double var_chaste_interface__Na_Buffers__Na_Bj = rY[18];
            // Units: mM; Initial value: 3.43545459048316
            double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
            // Units: mM; Initial value: 8.3215690202059
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            

            const double var_x10 = 1 / mParameters[9];
            const double var_x11 = var_x10 * mParameters[10] * mParameters[23];
            const double var_x16 = pow(var_chaste_interface__I_Na__m, 3);
            const double var_x17 = var_x16 * var_chaste_interface__I_Na__j * mParameters[12];
            const double var_x18 = var_x17 * var_chaste_interface__I_Na__h;
            const double var_x37 = exp(9.9999999999999995e-8);
            const double var_x38 = 1 / (-1.0 + var_x37);
            const double var_x42 = exp(-9.9999999999999995e-8);
            const double var_x43 = 1 / (-1.0 + var_x42);
            const double var_x45 = 1 / (mParameters[10] * mParameters[23]);
            const double var_x46 = var_x45 * mParameters[9];
            const double var_x47 = 5000000.0 * var_x46;
            const double var_x49 = fabs(var_chaste_interface__membrane_potential__V_m);
            const double var_x50 = fabs(var_x11);
            const double var_x51 = var_x49 < 9.9999999999999995e-8 * var_x50;
            const double var_x52 = var_x46 * var_chaste_interface__membrane_potential__V_m;
            const double var_x53 = exp(var_x52);
            const double var_x55 = -1.0 + var_x53;
            const double var_x56 = 1 / var_x55;
            const double var_x57 = var_x45 * pow(mParameters[9], 2);
            const double var_x58 = var_x56 * var_x57;
            const double var_x60 = var_x53 * var_chaste_interface__membrane_potential__V_m;
            const double var_x66 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x67 = pow(1.8, var_x66);
            const double var_x68 = var_x67 * var_chaste_interface__I_Ca__f;
            const double var_x69 = var_x68 * var_chaste_interface__I_Ca__d;
            const double var_x114 = 1.0 - var_chaste_interface__I_Ca__f_Ca_Bj;
            const double var_x115 = 0.40500000000000003 * var_x114;
            const double var_x116 = var_x115 * var_x69;
            const double var_x126 = exp(0.27000000000000002 * var_x52);
            const double var_x127 = pow(var_chaste_interface__Na_Concentrations__Na_j, 3);
            const double var_x128 = var_x127 * mParameters[5];
            const double var_x129 = var_x126 * var_x128;
            const double var_x131 = exp(-0.72999999999999998 * var_x52);
            const double var_x132 = pow(mParameters[8], 3);
            const double var_x133 = var_x132 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x134 = var_x131 * var_x133;
            const double var_x136 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_j) * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x137 = 1.0 + 0.00053869674493876331 * var_x127;
            const double var_x138 = 0.0035899999999999999 * var_x132;
            const double var_x139 = 1 / (var_x128 + var_x133 + 669921.875 * var_x136 + 1.3 * var_x127 + var_x137 * var_x138);
            const double var_x140 = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2);
            const double var_x141 = 1 / var_x140;
            const double var_x142 = 1.0 + 2.2499999999999996e-8 * var_x141;
            const double var_x143 = 1 / var_x142;
            const double var_x144 = 1.0 + 0.32000000000000001 * var_x131;
            const double var_x145 = pow(1.5700000000000001, var_x66) * mParameters[20];
            const double var_x146 = var_x145 / var_x144;
            const double var_x147 = var_x143 * var_x146;
            const double var_x148 = var_x139 * var_x147;
            const double var_x150 = pow(var_chaste_interface__Na_Concentrations__Na_j, (-4));
            const double var_x151 = 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m;
            const double var_x152 = exp(-var_x151 * var_x46);
            const double var_x153 = exp(0.01485884101040119 * mParameters[8]);
            const double var_x154 = exp(-var_x52);
            const double var_x155 = 1.0 + 0.1245 * var_x152 + 0.036499999999999998 * var_x154 * (-0.14285714285714285 + 0.14285714285714285 * var_x153);
            const double var_x156 = mParameters[21] * mParameters[7] / (1.5 + mParameters[7]);
            const double var_x181 = var_x129 - var_x134;
            const double var_x188 = 1 / var_chaste_interface__Na_Concentrations__Na_j;
            const double var_x203 = 9.9999999999999995e-8 * var_x11 + var_chaste_interface__membrane_potential__V_m;
            const double var_x222 = var_x11 * var_x188;
            const double var_x223 = 6.567e-5 * var_x222;
            const double var_x224 = 5.6249999999999997e-16 * mParameters[9];
            const double var_x225 = var_x42 * var_x43;
            const double var_x226 = var_x224 * var_x225;
            const double var_x227 = var_x37 * var_x38;
            const double var_x228 = var_x203 * var_x47;
            const double var_x229 = var_x58 * var_x60;
            const double var_x230 = ((var_x51) ? (-var_x226 + var_x228 * (var_x226 + var_x224 * var_x227)) : (5.6249999999999991e-9 * var_x229));
            const double var_x231 = var_x116 * var_x230;
            const double var_x232 = var_x156 / var_x155;
            const double var_x233 = var_x232 / (pow((6.8301345536507063e-5 + var_x150), 2) * pow(var_chaste_interface__Na_Concentrations__Na_j, 5));
            const double var_x234 = pow(var_chaste_interface__Na_Concentrations__Na_j, 2);
            const double var_x235 = 3 * mParameters[5];
            const double var_x236 = 5.8017639429904805e-6 * var_x132;
            const double var_x237 = -3.9000000000000004 * var_x234 - var_x234 * var_x235 - var_x234 * var_x236;
            const double var_x238 = 5.3588338192419823e-9 * var_x132;
            const double var_x239 = var_x147 * var_x181 / pow((var_x136 + 1.9405247813411081e-6 * var_x127 + 1.4927113702623908e-6 * var_x128 + 1.4927113702623908e-6 * var_x133 + var_x137 * var_x238), 2);
            const double var_x241 = 0.11 * var_x18;
            const double var_x242 = var_x222 * var_x241;
            const double var_x243 = var_x126 * mParameters[5];
            const double var_x244 = var_x148 * var_x234 * var_x243;
            const double var_x292 = 1 / M_PI;
            const double var_x432 = 0.0001 * var_chaste_interface__Na_Buffers__Na_Bj;
            const double var_x451 = var_x10 * mParameters[22];
            const double var_x459 = 3.2338732908121872 * var_x292;
            const double var_x460 = 7.3530178752050587e-13 * var_x239;
            const double var_x461 = var_x292 * var_x451;
            
            partialF = (-0.0007561 + var_x432 - var_x459 - 176588941779729.56 * var_x461 * (var_x223 + var_x231 + var_x242 + 9.0157776108189337e-5 * var_x233 + 0.98999999999999999 * var_x244 + var_x237 * var_x460)) * mParameters[3];
        }
        else
        {
            const double y_save = rY[33];
            rY[33] += delta;
            const double temp = EvaluateYDerivative33(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[33])/delta;
            rY[33] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Na__m = rY[2];
        // Units: dimensionless; Initial value: 0.00381858135062259
        double var_chaste_interface__I_Na__h = rY[3];
        // Units: dimensionless; Initial value: 0.625086621635645
        double var_chaste_interface__I_Na__j = rY[4];
        // Units: dimensionless; Initial value: 0.62332507235506
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
        // Units: dimensionless; Initial value: 0.0152416826209301
        double var_chaste_interface__Na_Buffers__Na_Bsl = rY[19];
        // Units: mM; Initial value: 0.749601264899653
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Na_Concentrations__Na_i = rY[35];
        // Units: mM; Initial value: 8.32114502072456
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        

        // Mathematics
        const double var_I_Ca__fcaCaMSL = 0; // dimensionless
        const double var_parameters__Bmax_Nasl = 1.6499999999999999; // mM
        const double var_parameters__Fjunc = 0.11; // dimensionless
        const double var_parameters__Fjunc_CaL = 0.90000000000000002; // dimensionless
        const double var_parameters__Fsl = 1.0 - var_parameters__Fjunc; // dimensionless
        const double var_parameters__Fsl_CaL = 1.0 - var_parameters__Fjunc_CaL; // dimensionless
        const double var_parameters__GNaB = 0.00059699999999999998; // mS_per_uF
        const double var_parameters__J_na_juncsl = 1.8312999999999999e-14; // liters_per_msec
        const double var_parameters__J_na_slmyo = 1.6385999999999999e-12; // liters_per_msec
        const double var_parameters__Kdact = 0.00014999999999999999; // mM
        const double var_I_NCX__Ka_sl = 1 / (1.0 + pow(var_parameters__Kdact, 2) / pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 2)); // dimensionless
        const double var_parameters__KmCai = 0.0035899999999999999; // mM
        const double var_parameters__KmCao = 1.3; // mM
        const double var_parameters__KmKo = 1.5; // mM
        const double var_parameters__KmNai = 12.289999999999999; // mM
        const double var_parameters__KmNaip = 11.0; // mM
        const double var_parameters__KmNao = 87.5; // mM
        const double var_I_NCX__s3_sl = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * var_parameters__KmCao + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl + pow(var_parameters__KmNao, 3) * (1.0 + var_chaste_interface__Ca_Concentrations__Ca_sl / var_parameters__KmCai) * var_chaste_interface__Ca_Concentrations__Ca_sl + pow(mParameters[8], 3) * (1.0 + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) / pow(var_parameters__KmNai, 3)) * var_parameters__KmCai; // mM4
        const double var_I_NaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[8]); // dimensionless
        const double var_parameters__Q10CaL = 1.8; // dimensionless
        const double var_parameters__Q10NCX = 1.5700000000000001; // dimensionless
        const double var_I_Ca__ibarna_sl = ((fabs(var_chaste_interface__membrane_potential__V_m) < 9.9999999999999995e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8)) + 5000000.0 * (9.9999999999999995e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(9.9999999999999995e-8)) + 7.4999999999999986e-16 * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(-9.9999999999999995e-8)) * mParameters[9] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (7.4999999999999993e-9 * pow(mParameters[9], 2) * (-0.75 * mParameters[8] + 0.75 * var_chaste_interface__Na_Concentrations__Na_sl * exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m / ((-1.0 + exp(var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_I_NaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) + 0.036499999999999998 * var_I_NaK__sigma * exp(-var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)); // dimensionless
        const double var_I_NaK__I_nak_sl = var_I_NaK__fnak * var_parameters__Fsl * mParameters[21] * mParameters[7] / ((1.0 + pow(var_parameters__KmNaip, 4) / pow(var_chaste_interface__Na_Concentrations__Na_sl, 4)) * (var_parameters__KmKo + mParameters[7])); // uA_per_uF
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_I_Ca__I_CaNa_sl = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarna_sl * var_parameters__Fsl_CaL; // uA_per_uF
        const double var_parameters__cellLength = 100.0; // um
        const double var_parameters__cellRadius = 10.25; // um
        const double var_parameters__Vcell = 1.0000000000000001e-15 * M_PI * pow(var_parameters__cellRadius, 2) * var_parameters__cellLength; // liter
        const double var_parameters__Vsl = 0.02 * var_parameters__Vcell; // liter
        const double var_parameters__ena_sl = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_sl) / var_parameters__FoRT; // mV
        const double var_I_Na__I_Na_sl = pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * var_parameters__Fsl * mParameters[12]; // uA_per_uF
        const double var_I_NaBK__I_nabk_sl = (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fsl * var_parameters__GNaB; // uA_per_uF
        const double var_parameters__koff_na = 0.001; // per_msec
        const double var_parameters__kon_na = 0.0001; // per_mM_per_msec
        const double var_Na_Buffers__dNa_Bsl_dt = -var_chaste_interface__Na_Buffers__Na_Bsl * var_parameters__koff_na + (-var_chaste_interface__Na_Buffers__Na_Bsl + var_parameters__Bmax_Nasl) * var_chaste_interface__Na_Concentrations__Na_sl * var_parameters__kon_na; // mM_per_msec
        const double var_parameters__ksat = 0.32000000000000001; // dimensionless
        const double var_parameters__nu = 0.27000000000000002; // dimensionless
        const double var_I_NCX__s1_sl = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] * exp(var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT * var_parameters__nu); // mM4
        const double var_I_NCX__s2_sl = pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT); // mM4
        const double var_I_NCX__I_ncx_sl = pow(var_parameters__Q10NCX, var_parameters__Qpow) * (-var_I_NCX__s2_sl + var_I_NCX__s1_sl) * var_I_NCX__Ka_sl * var_parameters__Fsl * mParameters[20] / ((1.0 + var_parameters__ksat * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * var_I_NCX__s3_sl); // uA_per_uF
        const double var_Na_Concentrations__I_Na_tot_sl = 3.0 * var_I_NCX__I_ncx_sl + 3.0 * var_I_NaK__I_nak_sl + var_I_Ca__I_CaNa_sl + var_I_Na__I_Na_sl + var_I_NaBK__I_nabk_sl; // uA_per_uF
        const double d_dt_chaste_interface_var_Na_Concentrations__Na_sl = (-var_Na_Buffers__dNa_Bsl_dt + (-var_chaste_interface__Na_Concentrations__Na_sl + var_chaste_interface__Na_Concentrations__Na_i) * var_parameters__J_na_slmyo / var_parameters__Vsl + (-var_chaste_interface__Na_Concentrations__Na_sl + var_chaste_interface__Na_Concentrations__Na_j) * var_parameters__J_na_juncsl / var_parameters__Vsl - var_Na_Concentrations__I_Na_tot_sl * mParameters[22] / (mParameters[9] * var_parameters__Vsl)) * mParameters[3]; // mM / msec

        return d_dt_chaste_interface_var_Na_Concentrations__Na_sl;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative34(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            double var_chaste_interface__I_Na__m = rY[2];
            // Units: dimensionless; Initial value: 0.00381858135062259
            double var_chaste_interface__I_Na__h = rY[3];
            // Units: dimensionless; Initial value: 0.625086621635645
            double var_chaste_interface__I_Na__j = rY[4];
            // Units: dimensionless; Initial value: 0.62332507235506
            double var_chaste_interface__I_Ca__d = rY[11];
            // Units: dimensionless; Initial value: 2.93982287251302e-06
            double var_chaste_interface__I_Ca__f = rY[12];
            // Units: dimensionless; Initial value: 0.99511673495949
            double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
            // Units: dimensionless; Initial value: 0.0152416826209301
            double var_chaste_interface__Na_Buffers__Na_Bsl = rY[19];
            // Units: mM; Initial value: 0.749601264899653
            double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
            // Units: mM; Initial value: 8.32094589677861
            double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
            // Units: mM; Initial value: 0.000106544589194246
            

            const double var_x10 = 1 / mParameters[9];
            const double var_x11 = var_x10 * mParameters[10] * mParameters[23];
            const double var_x16 = pow(var_chaste_interface__I_Na__m, 3);
            const double var_x17 = var_x16 * var_chaste_interface__I_Na__j * mParameters[12];
            const double var_x18 = var_x17 * var_chaste_interface__I_Na__h;
            const double var_x37 = exp(9.9999999999999995e-8);
            const double var_x38 = 1 / (-1.0 + var_x37);
            const double var_x42 = exp(-9.9999999999999995e-8);
            const double var_x43 = 1 / (-1.0 + var_x42);
            const double var_x45 = 1 / (mParameters[10] * mParameters[23]);
            const double var_x46 = var_x45 * mParameters[9];
            const double var_x47 = 5000000.0 * var_x46;
            const double var_x49 = fabs(var_chaste_interface__membrane_potential__V_m);
            const double var_x50 = fabs(var_x11);
            const double var_x51 = var_x49 < 9.9999999999999995e-8 * var_x50;
            const double var_x52 = var_x46 * var_chaste_interface__membrane_potential__V_m;
            const double var_x53 = exp(var_x52);
            const double var_x55 = -1.0 + var_x53;
            const double var_x56 = 1 / var_x55;
            const double var_x57 = var_x45 * pow(mParameters[9], 2);
            const double var_x58 = var_x56 * var_x57;
            const double var_x60 = var_x53 * var_chaste_interface__membrane_potential__V_m;
            const double var_x66 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x67 = pow(1.8, var_x66);
            const double var_x68 = var_x67 * var_chaste_interface__I_Ca__f;
            const double var_x69 = var_x68 * var_chaste_interface__I_Ca__d;
            const double var_x83 = 1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl;
            const double var_x84 = 0.044999999999999991 * var_x83;
            const double var_x85 = var_x69 * var_x84;
            const double var_x126 = exp(0.27000000000000002 * var_x52);
            const double var_x131 = exp(-0.72999999999999998 * var_x52);
            const double var_x132 = pow(mParameters[8], 3);
            const double var_x138 = 0.0035899999999999999 * var_x132;
            const double var_x144 = 1.0 + 0.32000000000000001 * var_x131;
            const double var_x145 = pow(1.5700000000000001, var_x66) * mParameters[20];
            const double var_x146 = var_x145 / var_x144;
            const double var_x151 = 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m;
            const double var_x152 = exp(-var_x151 * var_x46);
            const double var_x153 = exp(0.01485884101040119 * mParameters[8]);
            const double var_x154 = exp(-var_x52);
            const double var_x155 = 1.0 + 0.1245 * var_x152 + 0.036499999999999998 * var_x154 * (-0.14285714285714285 + 0.14285714285714285 * var_x153);
            const double var_x156 = mParameters[21] * mParameters[7] / (1.5 + mParameters[7]);
            const double var_x159 = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3);
            const double var_x160 = var_x159 * mParameters[5];
            const double var_x161 = var_x126 * var_x160;
            const double var_x162 = var_x132 * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x163 = var_x131 * var_x162;
            const double var_x164 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_sl) * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x165 = 1.0 + 0.00053869674493876331 * var_x159;
            const double var_x166 = 1 / (var_x160 + var_x162 + 669921.875 * var_x164 + 1.3 * var_x159 + var_x138 * var_x165);
            const double var_x167 = pow(var_chaste_interface__Ca_Concentrations__Ca_sl, (-2));
            const double var_x168 = 1.0 + 2.2499999999999996e-8 * var_x167;
            const double var_x169 = 1 / var_x168;
            const double var_x170 = var_x146 * var_x169;
            const double var_x171 = var_x166 * var_x170;
            const double var_x173 = pow(var_chaste_interface__Na_Concentrations__Na_sl, (-4));
            const double var_x185 = var_x161 - var_x163;
            const double var_x194 = 1 / var_chaste_interface__Na_Concentrations__Na_sl;
            const double var_x203 = 9.9999999999999995e-8 * var_x11 + var_chaste_interface__membrane_potential__V_m;
            const double var_x224 = 5.6249999999999997e-16 * mParameters[9];
            const double var_x225 = var_x42 * var_x43;
            const double var_x226 = var_x224 * var_x225;
            const double var_x227 = var_x37 * var_x38;
            const double var_x228 = var_x203 * var_x47;
            const double var_x229 = var_x58 * var_x60;
            const double var_x230 = ((var_x51) ? (-var_x226 + var_x228 * (var_x226 + var_x224 * var_x227)) : (5.6249999999999991e-9 * var_x229));
            const double var_x232 = var_x156 / var_x155;
            const double var_x235 = 3 * mParameters[5];
            const double var_x236 = 5.8017639429904805e-6 * var_x132;
            const double var_x238 = 5.3588338192419823e-9 * var_x132;
            const double var_x243 = var_x126 * mParameters[5];
            const double var_x245 = var_x11 * var_x194;
            const double var_x246 = 0.00053133 * var_x245;
            const double var_x247 = var_x230 * var_x85;
            const double var_x248 = var_x232 / (pow((6.8301345536507063e-5 + var_x173), 2) * pow(var_chaste_interface__Na_Concentrations__Na_sl, 5));
            const double var_x249 = pow(var_chaste_interface__Na_Concentrations__Na_sl, 2);
            const double var_x250 = -3.9000000000000004 * var_x249 - var_x235 * var_x249 - var_x236 * var_x249;
            const double var_x251 = var_x170 * var_x185 / pow((var_x164 + 1.9405247813411081e-6 * var_x159 + 1.4927113702623908e-6 * var_x160 + 1.4927113702623908e-6 * var_x162 + var_x165 * var_x238), 2);
            const double var_x253 = 0.89000000000000001 * var_x18;
            const double var_x254 = var_x245 * var_x253;
            const double var_x255 = var_x171 * var_x243 * var_x249;
            const double var_x292 = 1 / M_PI;
            const double var_x434 = 0.0001 * var_chaste_interface__Na_Buffers__Na_Bsl;
            const double var_x451 = var_x10 * mParameters[22];
            const double var_x461 = var_x292 * var_x451;
            const double var_x466 = 5.9492599172113663e-12 * var_x251;
            
            partialF = (-0.000165 + var_x434 - 7.8853682331945256 * var_x292 - 4759071980963.7119 * var_x461 * (var_x246 + var_x247 + var_x254 + 8.0099999999999998 * var_x255 + 0.00072945837032989554 * var_x248 + var_x250 * var_x466)) * mParameters[3];
        }
        else
        {
            const double y_save = rY[34];
            rY[34] += delta;
            const double temp = EvaluateYDerivative34(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[34])/delta;
            rY[34] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative35(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Na_Concentrations__Na_i = rY[35];
        // Units: mM; Initial value: 8.32114502072456
        

        // Mathematics
        const double var_parameters__J_na_slmyo = 1.6385999999999999e-12; // liters_per_msec
        const double var_parameters__cellLength = 100.0; // um
        const double var_parameters__cellRadius = 10.25; // um
        const double var_parameters__Vcell = 1.0000000000000001e-15 * M_PI * pow(var_parameters__cellRadius, 2) * var_parameters__cellLength; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double d_dt_chaste_interface_var_Na_Concentrations__Na_i = (-var_chaste_interface__Na_Concentrations__Na_i + var_chaste_interface__Na_Concentrations__Na_sl) * mParameters[3] * var_parameters__J_na_slmyo / var_parameters__Vmyo; // mM / msec

        return d_dt_chaste_interface_var_Na_Concentrations__Na_i;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative35(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            const double var_x292 = 1 / M_PI;
            const double var_x450 = var_x292 * mParameters[3];
            const double var_x467 = 0.23994508763098885 * var_x450;
            
            partialF = -var_x467;
        }
        else
        {
            const double y_save = rY[35];
            rY[35] += delta;
            const double temp = EvaluateYDerivative35(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[35])/delta;
            rY[35] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative36(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        

        // Mathematics
        const double d_dt_chaste_interface_var_K_Concentration__K_i = 0; // mM / msec

        return d_dt_chaste_interface_var_K_Concentration__K_i;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative36(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            
            partialF = 0;
        }
        else
        {
            const double y_save = rY[36];
            rY[36] += delta;
            const double temp = EvaluateYDerivative36(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[36])/delta;
            rY[36] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative37(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
        // Units: dimensionless; Initial value: 0.0246142436477748
        double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
        // Units: mM; Initial value: 7.37484660389498e-07
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j = rY[27];
        // Units: mM; Initial value: 0.00738583890572642
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j = rY[29];
        // Units: mM; Initial value: 0.0734662466011574
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        

        // Mathematics
        const double var_I_Ca__fcaCaj = 0; // dimensionless
        const double var_SR_Fluxes__J_SRleak = (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__SR_Ca_Concentrations__Ca_sr) * mParameters[0]; // mM_per_msec
        const double var_parameters__Fjunc = 0.11; // dimensionless
        const double var_parameters__Fjunc_CaL = 0.90000000000000002; // dimensionless
        const double var_parameters__GCaB = 0.00055130000000000001; // mS_per_uF
        const double var_parameters__IbarSLCaP = 0.067299999999999999; // uA_per_uF
        const double var_parameters__J_ca_juncsl = 8.2413000000000004e-13; // liters_per_msec
        const double var_parameters__Kdact = 0.00014999999999999999; // mM
        const double var_I_NCX__Ka_junc = 1 / (1.0 + pow(var_parameters__Kdact, 2) / pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2)); // dimensionless
        const double var_parameters__KmCai = 0.0035899999999999999; // mM
        const double var_parameters__KmCao = 1.3; // mM
        const double var_parameters__KmNai = 12.289999999999999; // mM
        const double var_parameters__KmNao = 87.5; // mM
        const double var_parameters__KmPCa = 0.00050000000000000001; // mM
        const double var_I_NCX__s3_junc = pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * var_parameters__KmCao + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j + pow(var_parameters__KmNao, 3) * (1.0 + var_chaste_interface__Ca_Concentrations__Ca_j / var_parameters__KmCai) * var_chaste_interface__Ca_Concentrations__Ca_j + pow(mParameters[8], 3) * (1.0 + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) / pow(var_parameters__KmNai, 3)) * var_parameters__KmCai; // mM4
        const double var_parameters__Q10CaL = 1.8; // dimensionless
        const double var_parameters__Q10NCX = 1.5700000000000001; // dimensionless
        const double var_parameters__Q10SLCaP = 2.3500000000000001; // dimensionless
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_I_PCa__I_pca_junc = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) * pow(var_parameters__Q10SLCaP, var_parameters__Qpow) * var_parameters__Fjunc * var_parameters__IbarSLCaP / (pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) + pow(var_parameters__KmPCa, 1.6000000000000001)); // uA_per_uF
        const double var_parameters__cellLength = 100.0; // um
        const double var_parameters__cellRadius = 10.25; // um
        const double var_parameters__Vcell = 1.0000000000000001e-15 * M_PI * pow(var_parameters__cellRadius, 2) * var_parameters__cellLength; // liter
        const double var_parameters__Vjunc = 0.00053900000000000009 * var_parameters__Vcell; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_SLhighj = 0.000165 * var_parameters__Vmyo / var_parameters__Vjunc; // mM
        const double var_parameters__Bmax_SLlowj = 0.00046000000000000001 * var_parameters__Vmyo / var_parameters__Vjunc; // mM
        const double var_parameters__Vsr = 0.035000000000000003 * var_parameters__Vcell; // liter
        const double var_parameters__eca_junc = 0.5 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_j) / var_parameters__FoRT; // mV
        const double var_I_CaBK__I_cabk_junc = (-var_parameters__eca_junc + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fjunc * var_parameters__GCaB; // uA_per_uF
        const double var_parameters__koff_slh = 0.029999999999999999; // per_msec
        const double var_parameters__koff_sll = 1.3; // per_msec
        const double var_parameters__kon_slh = 100.0; // per_mM_per_msec
        const double var_parameters__kon_sll = 100.0; // per_mM_per_msec
        const double var_Junctional_and_SL_Ca_Buffers__J_CaB_junction = -var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j * var_parameters__koff_slh - var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j * var_parameters__koff_sll + (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j + var_parameters__Bmax_SLhighj) * var_chaste_interface__Ca_Concentrations__Ca_j * var_parameters__kon_slh + (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j + var_parameters__Bmax_SLlowj) * var_chaste_interface__Ca_Concentrations__Ca_j * var_parameters__kon_sll; // mM_per_msec
        const double var_SR_Fluxes__J_SRCarel = (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__SR_Ca_Concentrations__Ca_sr) * var_chaste_interface__SR_Fluxes__Ry_Ro * mParameters[1]; // mM_per_msec
        const double var_parameters__ksat = 0.32000000000000001; // dimensionless
        const double var_parameters__nu = 0.27000000000000002; // dimensionless
        const double var_I_NCX__s1_junc = pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] * exp(var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT * var_parameters__nu); // mM4
        const double var_I_NCX__s2_junc = pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT); // mM4
        const double var_I_NCX__I_ncx_junc = pow(var_parameters__Q10NCX, var_parameters__Qpow) * (-var_I_NCX__s2_junc + var_I_NCX__s1_junc) * var_I_NCX__Ka_junc * var_parameters__Fjunc * mParameters[20] / ((1.0 + var_parameters__ksat * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * var_I_NCX__s3_junc); // uA_per_uF
        const double var_I_Ca__ibarca_j = ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__I_Ca_junc = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarca_j * var_parameters__Fjunc_CaL; // uA_per_uF
        const double var_Ca_Concentrations__I_Ca_tot_junc = -2.0 * var_I_NCX__I_ncx_junc + var_I_Ca__I_Ca_junc + var_I_CaBK__I_cabk_junc + var_I_PCa__I_pca_junc; // uA_per_uF
        const double d_dt_chaste_interface_var_Ca_Concentrations__Ca_j = -var_Junctional_and_SL_Ca_Buffers__J_CaB_junction + (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__Ca_Concentrations__Ca_sl) * var_parameters__J_ca_juncsl / var_parameters__Vjunc + var_SR_Fluxes__J_SRCarel * var_parameters__Vsr / var_parameters__Vjunc + var_SR_Fluxes__J_SRleak * var_parameters__Vmyo / var_parameters__Vjunc - 0.5 * var_Ca_Concentrations__I_Ca_tot_junc * mParameters[22] / (mParameters[9] * var_parameters__Vjunc); // mM / msec

        return d_dt_chaste_interface_var_Ca_Concentrations__Ca_j;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative37(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            double var_chaste_interface__I_Ca__d = rY[11];
            // Units: dimensionless; Initial value: 2.93982287251302e-06
            double var_chaste_interface__I_Ca__f = rY[12];
            // Units: dimensionless; Initial value: 0.99511673495949
            double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
            // Units: dimensionless; Initial value: 0.0246142436477748
            double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
            // Units: mM; Initial value: 7.37484660389498e-07
            double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j = rY[27];
            // Units: mM; Initial value: 0.00738583890572642
            double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j = rY[29];
            // Units: mM; Initial value: 0.0734662466011574
            double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
            // Units: mM; Initial value: 8.3215690202059
            double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
            // Units: mM; Initial value: 0.000175415190830688
            

            const double var_x3 = 1 / var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x10 = 1 / mParameters[9];
            const double var_x11 = var_x10 * mParameters[10] * mParameters[23];
            const double var_x37 = exp(9.9999999999999995e-8);
            const double var_x38 = 1 / (-1.0 + var_x37);
            const double var_x42 = exp(-9.9999999999999995e-8);
            const double var_x43 = 1 / (-1.0 + var_x42);
            const double var_x45 = 1 / (mParameters[10] * mParameters[23]);
            const double var_x46 = var_x45 * mParameters[9];
            const double var_x49 = fabs(var_chaste_interface__membrane_potential__V_m);
            const double var_x50 = fabs(var_x11);
            const double var_x52 = var_x46 * var_chaste_interface__membrane_potential__V_m;
            const double var_x57 = var_x45 * pow(mParameters[9], 2);
            const double var_x66 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x67 = pow(1.8, var_x66);
            const double var_x68 = var_x67 * var_chaste_interface__I_Ca__f;
            const double var_x69 = var_x68 * var_chaste_interface__I_Ca__d;
            const double var_x89 = mParameters[9] * mParameters[11];
            const double var_x94 = 10000000.0 * var_x46;
            const double var_x96 = var_x49 < 4.9999999999999998e-8 * var_x50;
            const double var_x97 = exp(2.0 * var_x52);
            const double var_x99 = -1.0 + var_x97;
            const double var_x100 = mParameters[11] / var_x99;
            const double var_x101 = var_x100 * var_x57;
            const double var_x104 = var_x97 * var_chaste_interface__membrane_potential__V_m;
            const double var_x114 = 1.0 - var_chaste_interface__I_Ca__f_Ca_Bj;
            const double var_x115 = 0.40500000000000003 * var_x114;
            const double var_x116 = var_x115 * var_x69;
            const double var_x126 = exp(0.27000000000000002 * var_x52);
            const double var_x127 = pow(var_chaste_interface__Na_Concentrations__Na_j, 3);
            const double var_x128 = var_x127 * mParameters[5];
            const double var_x129 = var_x126 * var_x128;
            const double var_x131 = exp(-0.72999999999999998 * var_x52);
            const double var_x132 = pow(mParameters[8], 3);
            const double var_x133 = var_x132 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x134 = var_x131 * var_x133;
            const double var_x136 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_j) * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x137 = 1.0 + 0.00053869674493876331 * var_x127;
            const double var_x138 = 0.0035899999999999999 * var_x132;
            const double var_x139 = 1 / (var_x128 + var_x133 + 669921.875 * var_x136 + 1.3 * var_x127 + var_x137 * var_x138);
            const double var_x140 = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2);
            const double var_x141 = 1 / var_x140;
            const double var_x142 = 1.0 + 2.2499999999999996e-8 * var_x141;
            const double var_x143 = 1 / var_x142;
            const double var_x144 = 1.0 + 0.32000000000000001 * var_x131;
            const double var_x145 = pow(1.5700000000000001, var_x66) * mParameters[20];
            const double var_x146 = var_x145 / var_x144;
            const double var_x147 = var_x143 * var_x146;
            const double var_x148 = var_x139 * var_x147;
            const double var_x181 = var_x129 - var_x134;
            const double var_x182 = var_x139 * var_x181;
            const double var_x208 = 4.9999999999999998e-8 * var_x11 + var_chaste_interface__membrane_potential__V_m;
            const double var_x225 = var_x42 * var_x43;
            const double var_x227 = var_x37 * var_x38;
            const double var_x238 = 5.3588338192419823e-9 * var_x132;
            const double var_x239 = var_x147 * var_x181 / pow((var_x136 + 1.9405247813411081e-6 * var_x127 + 1.4927113702623908e-6 * var_x128 + 1.4927113702623908e-6 * var_x133 + var_x137 * var_x238), 2);
            const double var_x260 = 5.2281977629563632e-6 + pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001);
            const double var_x261 = pow(2.3500000000000001, var_x66);
            const double var_x262 = 0.011844800000000001 * var_x261;
            const double var_x263 = var_x262 * pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2.2000000000000002) / pow(var_x260, 2);
            const double var_x265 = var_x262 * pow(var_chaste_interface__Ca_Concentrations__Ca_j, 0.60000000000000009) / var_x260;
            const double var_x266 = 3.0321500000000001e-5 * var_x11 * var_x3;
            const double var_x267 = 3.6827999999999999e-11 * var_x89;
            const double var_x268 = var_x225 * var_x267;
            const double var_x269 = ((var_x96) ? (-var_x268 + var_x208 * var_x94 * (var_x268 + var_x227 * var_x267)) : (0.00073656000000000004 * var_x101 * var_x104));
            const double var_x270 = var_x116 * var_x269;
            const double var_x271 = var_x131 * var_x132;
            const double var_x272 = var_x148 * var_x271;
            const double var_x273 = -669921.875 - var_x132;
            const double var_x274 = var_x273 - 373215529.24791086 * var_chaste_interface__Ca_Concentrations__Ca_j;
            const double var_x275 = var_x146 * var_x182 / (pow(var_x142, 2) * pow(var_chaste_interface__Ca_Concentrations__Ca_j, 3));
            const double var_x292 = 1 / M_PI;
            const double var_x439 = 100.0 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_j;
            const double var_x443 = 100.0 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_j;
            const double var_x448 = var_chaste_interface__SR_Fluxes__Ry_Ro * mParameters[1];
            const double var_x451 = var_x10 * mParameters[22];
            const double var_x461 = var_x292 * var_x451;
            const double var_x468 = 88294470889864.781 * var_x461;
            const double var_x471 = 1205.9369202226344 * mParameters[0];
            const double var_x472 = 64.935064935064929 * var_x448;
            const double var_x473 = 4.9020119168033731e-13 * var_x239;
            const double var_x474 = 145.53224458892851 * var_x292;
            
            partialF = -75.37105751391465 + var_x439 + var_x443 - var_x471 - var_x472 - var_x474 - var_x468 * (var_x265 + var_x266 + var_x270 - var_x263 + 0.22 * var_x272 - 9.8999999999999977e-9 * var_x275 - var_x274 * var_x473);
        }
        else
        {
            const double y_save = rY[37];
            rY[37] += delta;
            const double temp = EvaluateYDerivative37(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[37])/delta;
            rY[37] = y_save;
        }
        return partialF;
    }
    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluateYDerivative38(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
        // Units: dimensionless; Initial value: 0.0152416826209301
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl = rY[28];
        // Units: mM; Initial value: 0.00988178900584875
        double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl = rY[30];
        // Units: mM; Initial value: 0.114400081504523
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        

        // Mathematics
        const double var_I_Ca__fcaCaMSL = 0; // dimensionless
        const double var_parameters__Fjunc = 0.11; // dimensionless
        const double var_parameters__Fjunc_CaL = 0.90000000000000002; // dimensionless
        const double var_parameters__Fsl = 1.0 - var_parameters__Fjunc; // dimensionless
        const double var_parameters__Fsl_CaL = 1.0 - var_parameters__Fjunc_CaL; // dimensionless
        const double var_parameters__GCaB = 0.00055130000000000001; // mS_per_uF
        const double var_parameters__IbarSLCaP = 0.067299999999999999; // uA_per_uF
        const double var_parameters__J_ca_juncsl = 8.2413000000000004e-13; // liters_per_msec
        const double var_parameters__J_ca_slmyo = 3.2742999999999999e-12; // liters_per_msec
        const double var_parameters__Kdact = 0.00014999999999999999; // mM
        const double var_I_NCX__Ka_sl = 1 / (1.0 + pow(var_parameters__Kdact, 2) / pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 2)); // dimensionless
        const double var_parameters__KmCai = 0.0035899999999999999; // mM
        const double var_parameters__KmCao = 1.3; // mM
        const double var_parameters__KmNai = 12.289999999999999; // mM
        const double var_parameters__KmNao = 87.5; // mM
        const double var_parameters__KmPCa = 0.00050000000000000001; // mM
        const double var_I_NCX__s3_sl = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * var_parameters__KmCao + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl + pow(var_parameters__KmNao, 3) * (1.0 + var_chaste_interface__Ca_Concentrations__Ca_sl / var_parameters__KmCai) * var_chaste_interface__Ca_Concentrations__Ca_sl + pow(mParameters[8], 3) * (1.0 + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) / pow(var_parameters__KmNai, 3)) * var_parameters__KmCai; // mM4
        const double var_parameters__Q10CaL = 1.8; // dimensionless
        const double var_parameters__Q10NCX = 1.5700000000000001; // dimensionless
        const double var_parameters__Q10SLCaP = 2.3500000000000001; // dimensionless
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_I_PCa__I_pca_sl = pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) * pow(var_parameters__Q10SLCaP, var_parameters__Qpow) * var_parameters__Fsl * var_parameters__IbarSLCaP / (pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) + pow(var_parameters__KmPCa, 1.6000000000000001)); // uA_per_uF
        const double var_parameters__cellLength = 100.0; // um
        const double var_parameters__cellRadius = 10.25; // um
        const double var_parameters__Vcell = 1.0000000000000001e-15 * M_PI * pow(var_parameters__cellRadius, 2) * var_parameters__cellLength; // liter
        const double var_parameters__Vmyo = 0.65000000000000002 * var_parameters__Vcell; // liter
        const double var_parameters__Vsl = 0.02 * var_parameters__Vcell; // liter
        const double var_parameters__Bmax_SLhighsl = 0.0134 * var_parameters__Vmyo / var_parameters__Vsl; // mM
        const double var_parameters__Bmax_SLlowsl = 0.037400000000000003 * var_parameters__Vmyo / var_parameters__Vsl; // mM
        const double var_parameters__eca_sl = 0.5 * log(mParameters[5] / var_chaste_interface__Ca_Concentrations__Ca_sl) / var_parameters__FoRT; // mV
        const double var_I_CaBK__I_cabk_sl = (-var_parameters__eca_sl + var_chaste_interface__membrane_potential__V_m) * var_parameters__Fsl * var_parameters__GCaB; // uA_per_uF
        const double var_parameters__koff_slh = 0.029999999999999999; // per_msec
        const double var_parameters__koff_sll = 1.3; // per_msec
        const double var_parameters__kon_slh = 100.0; // per_mM_per_msec
        const double var_parameters__kon_sll = 100.0; // per_mM_per_msec
        const double var_Junctional_and_SL_Ca_Buffers__J_CaB_sl = -var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl * var_parameters__koff_slh - var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl * var_parameters__koff_sll + (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl + var_parameters__Bmax_SLhighsl) * var_chaste_interface__Ca_Concentrations__Ca_sl * var_parameters__kon_slh + (-var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl + var_parameters__Bmax_SLlowsl) * var_chaste_interface__Ca_Concentrations__Ca_sl * var_parameters__kon_sll; // mM_per_msec
        const double var_parameters__ksat = 0.32000000000000001; // dimensionless
        const double var_parameters__nu = 0.27000000000000002; // dimensionless
        const double var_I_NCX__s1_sl = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] * exp(var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT * var_parameters__nu); // mM4
        const double var_I_NCX__s2_sl = pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT); // mM4
        const double var_I_NCX__I_ncx_sl = pow(var_parameters__Q10NCX, var_parameters__Qpow) * (-var_I_NCX__s2_sl + var_I_NCX__s1_sl) * var_I_NCX__Ka_sl * var_parameters__Fsl * mParameters[20] / ((1.0 + var_parameters__ksat * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * var_I_NCX__s3_sl); // uA_per_uF
        const double var_I_Ca__ibarca_sl = ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__I_Ca_sl = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarca_sl * var_parameters__Fsl_CaL; // uA_per_uF
        const double var_Ca_Concentrations__I_Ca_tot_sl = -2.0 * var_I_NCX__I_ncx_sl + var_I_Ca__I_Ca_sl + var_I_CaBK__I_cabk_sl + var_I_PCa__I_pca_sl; // uA_per_uF
        const double d_dt_chaste_interface_var_Ca_Concentrations__Ca_sl = -var_Junctional_and_SL_Ca_Buffers__J_CaB_sl + (-var_chaste_interface__Ca_Concentrations__Ca_sl + var_chaste_interface__Ca_Concentrations__Ca_i) * var_parameters__J_ca_slmyo / var_parameters__Vsl + (-var_chaste_interface__Ca_Concentrations__Ca_sl + var_chaste_interface__Ca_Concentrations__Ca_j) * var_parameters__J_ca_juncsl / var_parameters__Vsl - 0.5 * var_Ca_Concentrations__I_Ca_tot_sl * mParameters[22] / (mParameters[9] * var_parameters__Vsl); // mM / msec

        return d_dt_chaste_interface_var_Ca_Concentrations__Ca_sl;
    }

    double Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::EvaluatePartialDerivative38(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -81.4229700631461
            double var_chaste_interface__I_Ca__d = rY[11];
            // Units: dimensionless; Initial value: 2.93982287251302e-06
            double var_chaste_interface__I_Ca__f = rY[12];
            // Units: dimensionless; Initial value: 0.99511673495949
            double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
            // Units: dimensionless; Initial value: 0.0152416826209301
            double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl = rY[28];
            // Units: mM; Initial value: 0.00988178900584875
            double var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl = rY[30];
            // Units: mM; Initial value: 0.114400081504523
            double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
            // Units: mM; Initial value: 8.32094589677861
            double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
            // Units: mM; Initial value: 0.000106544589194246
            

            const double var_x5 = 1 / var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x10 = 1 / mParameters[9];
            const double var_x11 = var_x10 * mParameters[10] * mParameters[23];
            const double var_x37 = exp(9.9999999999999995e-8);
            const double var_x38 = 1 / (-1.0 + var_x37);
            const double var_x42 = exp(-9.9999999999999995e-8);
            const double var_x43 = 1 / (-1.0 + var_x42);
            const double var_x45 = 1 / (mParameters[10] * mParameters[23]);
            const double var_x46 = var_x45 * mParameters[9];
            const double var_x49 = fabs(var_chaste_interface__membrane_potential__V_m);
            const double var_x50 = fabs(var_x11);
            const double var_x52 = var_x46 * var_chaste_interface__membrane_potential__V_m;
            const double var_x57 = var_x45 * pow(mParameters[9], 2);
            const double var_x66 = -31.0 + 0.10000000000000001 * mParameters[23];
            const double var_x67 = pow(1.8, var_x66);
            const double var_x68 = var_x67 * var_chaste_interface__I_Ca__f;
            const double var_x69 = var_x68 * var_chaste_interface__I_Ca__d;
            const double var_x83 = 1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl;
            const double var_x84 = 0.044999999999999991 * var_x83;
            const double var_x85 = var_x69 * var_x84;
            const double var_x89 = mParameters[9] * mParameters[11];
            const double var_x94 = 10000000.0 * var_x46;
            const double var_x96 = var_x49 < 4.9999999999999998e-8 * var_x50;
            const double var_x97 = exp(2.0 * var_x52);
            const double var_x99 = -1.0 + var_x97;
            const double var_x100 = mParameters[11] / var_x99;
            const double var_x101 = var_x100 * var_x57;
            const double var_x104 = var_x97 * var_chaste_interface__membrane_potential__V_m;
            const double var_x126 = exp(0.27000000000000002 * var_x52);
            const double var_x131 = exp(-0.72999999999999998 * var_x52);
            const double var_x132 = pow(mParameters[8], 3);
            const double var_x138 = 0.0035899999999999999 * var_x132;
            const double var_x144 = 1.0 + 0.32000000000000001 * var_x131;
            const double var_x145 = pow(1.5700000000000001, var_x66) * mParameters[20];
            const double var_x146 = var_x145 / var_x144;
            const double var_x159 = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3);
            const double var_x160 = var_x159 * mParameters[5];
            const double var_x161 = var_x126 * var_x160;
            const double var_x162 = var_x132 * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x163 = var_x131 * var_x162;
            const double var_x164 = (1.0 + 278.55153203342621 * var_chaste_interface__Ca_Concentrations__Ca_sl) * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x165 = 1.0 + 0.00053869674493876331 * var_x159;
            const double var_x166 = 1 / (var_x160 + var_x162 + 669921.875 * var_x164 + 1.3 * var_x159 + var_x138 * var_x165);
            const double var_x167 = pow(var_chaste_interface__Ca_Concentrations__Ca_sl, (-2));
            const double var_x168 = 1.0 + 2.2499999999999996e-8 * var_x167;
            const double var_x169 = 1 / var_x168;
            const double var_x170 = var_x146 * var_x169;
            const double var_x171 = var_x166 * var_x170;
            const double var_x185 = var_x161 - var_x163;
            const double var_x186 = var_x166 * var_x185;
            const double var_x208 = 4.9999999999999998e-8 * var_x11 + var_chaste_interface__membrane_potential__V_m;
            const double var_x225 = var_x42 * var_x43;
            const double var_x227 = var_x37 * var_x38;
            const double var_x238 = 5.3588338192419823e-9 * var_x132;
            const double var_x251 = var_x170 * var_x185 / pow((var_x164 + 1.9405247813411081e-6 * var_x159 + 1.4927113702623908e-6 * var_x160 + 1.4927113702623908e-6 * var_x162 + var_x165 * var_x238), 2);
            const double var_x261 = pow(2.3500000000000001, var_x66);
            const double var_x267 = 3.6827999999999999e-11 * var_x89;
            const double var_x268 = var_x225 * var_x267;
            const double var_x269 = ((var_x96) ? (-var_x268 + var_x208 * var_x94 * (var_x268 + var_x227 * var_x267)) : (0.00073656000000000004 * var_x101 * var_x104));
            const double var_x271 = var_x131 * var_x132;
            const double var_x273 = -669921.875 - var_x132;
            const double var_x276 = 5.2281977629563632e-6 + pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001);
            const double var_x277 = 0.095835200000000009 * var_x261;
            const double var_x278 = var_x277 * pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 2.2000000000000002) / pow(var_x276, 2);
            const double var_x279 = var_x277 * pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 0.60000000000000009) / var_x276;
            const double var_x280 = 0.00024532850000000001 * var_x11 * var_x5;
            const double var_x281 = var_x269 * var_x85;
            const double var_x282 = var_x171 * var_x271;
            const double var_x283 = var_x273 - 373215529.24791086 * var_chaste_interface__Ca_Concentrations__Ca_sl;
            const double var_x284 = var_x146 * var_x186 / (pow(var_x168, 2) * pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 3));
            const double var_x292 = 1 / M_PI;
            const double var_x442 = 100.0 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLL_sl;
            const double var_x444 = 100.0 * var_chaste_interface__Junctional_and_SL_Ca_Buffers__SLH_sl;
            const double var_x451 = var_x10 * mParameters[22];
            const double var_x461 = var_x292 * var_x451;
            const double var_x475 = 2379535990481.856 * var_x461;
            const double var_x478 = 3.9661732781409103e-12 * var_x251;
            
            partialF = -165.10000000000002 + var_x442 + var_x444 - 19.504723378941105 * var_x292 - var_x475 * (var_x279 + var_x280 + var_x281 - var_x278 + 1.78 * var_x282 - 8.0099999999999983e-8 * var_x284 - var_x283 * var_x478);
        }
        else
        {
            const double y_save = rY[38];
            rY[38] += delta;
            const double temp = EvaluateYDerivative38(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[38])/delta;
            rY[38] = y_save;
        }
        return partialF;
    }

    std::vector<double> Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane_potential__V_m = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -81.4229700631461
        double var_chaste_interface__Ca_Concentrations__Ca_i = rY[1];
        // Units: mM; Initial value: 8.72745589849657e-05
        double var_chaste_interface__I_Na__m = rY[2];
        // Units: dimensionless; Initial value: 0.00381858135062259
        double var_chaste_interface__I_Na__h = rY[3];
        // Units: dimensionless; Initial value: 0.625086621635645
        double var_chaste_interface__I_Na__j = rY[4];
        // Units: dimensionless; Initial value: 0.62332507235506
        double var_chaste_interface__I_Kr__x_kr = rY[5];
        // Units: dimensionless; Initial value: 0.021733554982663
        double var_chaste_interface__I_Ks__x_ks = rY[6];
        // Units: dimensionless; Initial value: 0.00428981903391989
        double var_chaste_interface__I_to__x_to_s = rY[7];
        // Units: dimensionless; Initial value: 0.000441539203559411
        double var_chaste_interface__I_to__y_to_s = rY[8];
        // Units: dimensionless; Initial value: 0.784875334693892
        double var_chaste_interface__I_to__x_to_f = rY[9];
        // Units: dimensionless; Initial value: 0.000441531250866821
        double var_chaste_interface__I_to__y_to_f = rY[10];
        // Units: dimensionless; Initial value: 0.999995817153572
        double var_chaste_interface__I_Ca__d = rY[11];
        // Units: dimensionless; Initial value: 2.93982287251302e-06
        double var_chaste_interface__I_Ca__f = rY[12];
        // Units: dimensionless; Initial value: 0.99511673495949
        double var_chaste_interface__I_Ca__f_Ca_Bj = rY[13];
        // Units: dimensionless; Initial value: 0.0246142436477748
        double var_chaste_interface__I_Ca__f_Ca_Bsl = rY[14];
        // Units: dimensionless; Initial value: 0.0152416826209301
        double var_chaste_interface__SR_Fluxes__Ry_Ro = rY[16];
        // Units: mM; Initial value: 7.37484660389498e-07
        double var_chaste_interface__SR_Ca_Concentrations__Ca_sr = rY[32];
        // Units: mM; Initial value: 0.555180633859957
        double var_chaste_interface__Na_Concentrations__Na_j = rY[33];
        // Units: mM; Initial value: 8.3215690202059
        double var_chaste_interface__Na_Concentrations__Na_sl = rY[34];
        // Units: mM; Initial value: 8.32094589677861
        double var_chaste_interface__Na_Concentrations__Na_i = rY[35];
        // Units: mM; Initial value: 8.32114502072456
        double var_chaste_interface__K_Concentration__K_i = rY[36];
        // Units: mM; Initial value: 120.0
        double var_chaste_interface__Ca_Concentrations__Ca_j = rY[37];
        // Units: mM; Initial value: 0.000175415190830688
        double var_chaste_interface__Ca_Concentrations__Ca_sl = rY[38];
        // Units: mM; Initial value: 0.000106544589194246
        
        // Mathematics
        const double var_I_Ca__fcaCaMSL = 0; // dimensionless
        const double var_I_Ca__fcaCaj = 0; // dimensionless
        const double var_I_Ks__gks_junc = 0.0035000000000000001; // mS_per_uF
        const double var_I_Ks__gks_sl = 0.0035000000000000001; // mS_per_uF
        const double var_SR_Fluxes__J_SRleak = (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__SR_Ca_Concentrations__Ca_sr) * mParameters[0]; // mM_per_msec
        const double var_I_Ca__tauf = 1 / (0.02 + 0.019699999999999999 * exp(-0.23877882250000002 * pow((1 + 0.068965517241379309 * var_chaste_interface__membrane_potential__V_m), 2))); // msec
        const double var_I_Kr__rkr = 1 / (1.0 + exp(3.0833333333333335 + 0.041666666666666664 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double var_I_Na__ah = ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0) : (0.057000000000000002 * exp(-11.764705882352942 + 0.14705882352941177 * mParameters[14] - 0.14705882352941177 * var_chaste_interface__membrane_potential__V_m))); // dimensionless
        const double var_I_Na__aj = ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0) : ((37.780000000000001 + var_chaste_interface__membrane_potential__V_m) * (-25428.0 * exp(0.24440000000000001 * var_chaste_interface__membrane_potential__V_m - 0.24440000000000001 * mParameters[14]) - 6.9480000000000002e-6 * exp(0.043909999999999998 * mParameters[14] - 0.043909999999999998 * var_chaste_interface__membrane_potential__V_m)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane_potential__V_m - 0.311 * mParameters[14])))); // dimensionless
        const double var_I_Na__bh = ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (5.9230769230769234 / (1.0 + exp(-0.96036036036036043 + 0.0900900900900901 * mParameters[14] - 0.0900900900900901 * var_chaste_interface__membrane_potential__V_m))) : (310000.0 * exp(0.34849999999999998 * var_chaste_interface__membrane_potential__V_m - 0.34849999999999998 * mParameters[14]) + 2.7000000000000002 * exp(0.079000000000000001 * var_chaste_interface__membrane_potential__V_m - 0.079000000000000001 * mParameters[14]))); // dimensionless
        const double var_I_Na__bj = ((var_chaste_interface__membrane_potential__V_m >= -40.0) ? (0.59999999999999998 * exp(0.057000000000000002 * var_chaste_interface__membrane_potential__V_m - 0.057000000000000002 * mParameters[14]) / (1.0 + exp(-3.2000000000000002 + 0.10000000000000001 * mParameters[14] - 0.10000000000000001 * var_chaste_interface__membrane_potential__V_m))) : (0.024240000000000001 * exp(0.01052 * mParameters[14] - 0.01052 * var_chaste_interface__membrane_potential__V_m) / (1.0 + exp(-5.5312920000000005 + 0.13780000000000001 * mParameters[14] - 0.13780000000000001 * var_chaste_interface__membrane_potential__V_m)))); // dimensionless
        const double var_I_Na__tauh = 1 / (var_I_Na__ah + var_I_Na__bh); // msec
        const double var_I_Na__tauj = 1 / (var_I_Na__aj + var_I_Na__bj); // msec
        const double var_membrane_potential__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_parameters__Cmem_converted = 1000000.0 * mParameters[22]; // uF
        const double var_parameters__Fjunc = 0.11; // dimensionless
        const double var_parameters__Fjunc_CaL = 0.90000000000000002; // dimensionless
        const double var_parameters__Fsl = 1.0 - var_parameters__Fjunc; // dimensionless
        const double var_I_Ks__GKs_total = (var_I_Ks__gks_junc * var_parameters__Fjunc + var_I_Ks__gks_sl * var_parameters__Fsl) * mParameters[18]; // mS_per_uF
        const double var_parameters__Fsl_CaL = 1.0 - var_parameters__Fjunc_CaL; // dimensionless
        const double var_parameters__IbarSLCaP = 0.067299999999999999; // uA_per_uF
        const double var_parameters__Kdact = 0.00014999999999999999; // mM
        const double var_I_NCX__Ka_junc = 1 / (1.0 + pow(var_parameters__Kdact, 2) / pow(var_chaste_interface__Ca_Concentrations__Ca_j, 2)); // dimensionless
        const double var_I_NCX__Ka_sl = 1 / (1.0 + pow(var_parameters__Kdact, 2) / pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 2)); // dimensionless
        const double var_parameters__KmCai = 0.0035899999999999999; // mM
        const double var_parameters__KmCao = 1.3; // mM
        const double var_parameters__KmKo = 1.5; // mM
        const double var_parameters__KmNai = 12.289999999999999; // mM
        const double var_parameters__KmNaip = 11.0; // mM
        const double var_parameters__KmNao = 87.5; // mM
        const double var_parameters__KmPCa = 0.00050000000000000001; // mM
        const double var_parameters__Kmf = 0.00024600000000000002; // mM
        const double var_parameters__Kmr = 1.7; // mM
        const double var_I_Ki__g_K1 = 0.43033148291193518 * sqrt(mParameters[7]) * mParameters[16]; // mS_per_uF
        const double var_I_Kr__gkr = 0.43033148291193518 * sqrt(mParameters[7]) * mParameters[17]; // mS_per_uF
        const double var_I_NCX__s3_junc = pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * var_parameters__KmCao + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j + pow(var_parameters__KmNao, 3) * (1.0 + var_chaste_interface__Ca_Concentrations__Ca_j / var_parameters__KmCai) * var_chaste_interface__Ca_Concentrations__Ca_j + pow(mParameters[8], 3) * (1.0 + pow(var_chaste_interface__Na_Concentrations__Na_j, 3) / pow(var_parameters__KmNai, 3)) * var_parameters__KmCai; // mM4
        const double var_I_NCX__s3_sl = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * var_parameters__KmCao + pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl + pow(var_parameters__KmNao, 3) * (1.0 + var_chaste_interface__Ca_Concentrations__Ca_sl / var_parameters__KmCai) * var_chaste_interface__Ca_Concentrations__Ca_sl + pow(mParameters[8], 3) * (1.0 + pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) / pow(var_parameters__KmNai, 3)) * var_parameters__KmCai; // mM4
        const double var_I_NaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[8]); // dimensionless
        const double var_parameters__Q10CaL = 1.8; // dimensionless
        const double var_parameters__Q10NCX = 1.5700000000000001; // dimensionless
        const double var_parameters__Q10SLCaP = 2.3500000000000001; // dimensionless
        const double var_parameters__Q10SRCaP = 2.6000000000000001; // dimensionless
        const double var_parameters__FoRT = mParameters[9] / (mParameters[10] * mParameters[23]); // per_mV
        const double var_I_NaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT) + 0.036499999999999998 * var_I_NaK__sigma * exp(-var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)); // dimensionless
        const double var_I_NaK__I_nak_junc = var_I_NaK__fnak * var_parameters__Fjunc * mParameters[21] * mParameters[7] / ((1.0 + pow(var_parameters__KmNaip, 4) / pow(var_chaste_interface__Na_Concentrations__Na_j, 4)) * (var_parameters__KmKo + mParameters[7])); // uA_per_uF
        const double var_I_NaK__I_nak_sl = var_I_NaK__fnak * var_parameters__Fsl * mParameters[21] * mParameters[7] / ((1.0 + pow(var_parameters__KmNaip, 4) / pow(var_chaste_interface__Na_Concentrations__Na_sl, 4)) * (var_parameters__KmKo + mParameters[7])); // uA_per_uF
        const double var_I_NaK__I_nak = var_I_NaK__I_nak_junc + var_I_NaK__I_nak_sl; // uA_per_uF
        const double var_I_NaK__I_nak_converted = HeartConfig::Instance()->GetCapacitance() * var_I_NaK__I_nak; // uA_per_cm2
        const double var_parameters__Qpow = -31.0 + 0.10000000000000001 * mParameters[23]; // dimensionless
        const double var_I_PCa__I_pca_junc = pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) * pow(var_parameters__Q10SLCaP, var_parameters__Qpow) * var_parameters__Fjunc * var_parameters__IbarSLCaP / (pow(var_chaste_interface__Ca_Concentrations__Ca_j, 1.6000000000000001) + pow(var_parameters__KmPCa, 1.6000000000000001)); // uA_per_uF
        const double var_I_PCa__I_pca_sl = pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) * pow(var_parameters__Q10SLCaP, var_parameters__Qpow) * var_parameters__Fsl * var_parameters__IbarSLCaP / (pow(var_chaste_interface__Ca_Concentrations__Ca_sl, 1.6000000000000001) + pow(var_parameters__KmPCa, 1.6000000000000001)); // uA_per_uF
        const double var_I_PCa__I_pca = var_I_PCa__I_pca_junc + var_I_PCa__I_pca_sl; // uA_per_uF
        const double var_I_PCa__I_pca_converted = HeartConfig::Instance()->GetCapacitance() * var_I_PCa__I_pca; // uA_per_cm2
        const double var_parameters__ecl = log(mParameters[4] / mParameters[6]) / var_parameters__FoRT; // mV
        const double var_parameters__ek = log(mParameters[7] / var_chaste_interface__K_Concentration__K_i) / var_parameters__FoRT; // mV
        const double var_I_Ki__aki = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__membrane_potential__V_m - 0.23849999999999999 * var_parameters__ek)); // dimensionless
        const double var_I_Ki__bki = (0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__membrane_potential__V_m - 0.080320000000000003 * var_parameters__ek) + exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__membrane_potential__V_m - 0.061749999999999999 * var_parameters__ek)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_parameters__ek - 0.51429999999999998 * var_chaste_interface__membrane_potential__V_m)); // dimensionless
        const double var_I_Ki__kiss = var_I_Ki__aki / (var_I_Ki__aki + var_I_Ki__bki); // dimensionless
        const double var_I_Ki__I_ki = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Ki__g_K1 * var_I_Ki__kiss; // uA_per_uF
        const double var_I_Ki__I_ki_converted = HeartConfig::Instance()->GetCapacitance() * var_I_Ki__I_ki; // uA_per_cm2
        const double var_I_Kr__I_kr = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_Kr__gkr * var_I_Kr__rkr * var_chaste_interface__I_Kr__x_kr; // uA_per_uF
        const double var_I_Kr__I_kr_converted = HeartConfig::Instance()->GetCapacitance() * var_I_Kr__I_kr; // uA_per_cm2
        const double var_parameters__ena_junc = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_j) / var_parameters__FoRT; // mV
        const double var_I_Na__I_Na_junc = pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_junc + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * var_parameters__Fjunc * mParameters[12]; // uA_per_uF
        const double var_parameters__ena_sl = log(mParameters[8] / var_chaste_interface__Na_Concentrations__Na_sl) / var_parameters__FoRT; // mV
        const double var_I_Na__I_Na_sl = pow(var_chaste_interface__I_Na__m, 3) * (-var_parameters__ena_sl + var_chaste_interface__membrane_potential__V_m) * var_chaste_interface__I_Na__h * var_chaste_interface__I_Na__j * var_parameters__Fsl * mParameters[12]; // uA_per_uF
        const double var_I_Na__I_Na = var_I_Na__I_Na_junc + var_I_Na__I_Na_sl; // uA_per_uF
        const double var_I_Na__I_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_I_Na__I_Na; // uA_per_cm2
        const double var_parameters__epi = 1.0; // dimensionless
        const double var_I_to__GtoFast = ((var_parameters__epi == 1.0) ? (0.1144 * mParameters[15]) : (0.0014039999999999999 * mParameters[15])); // mS_per_uF
        const double var_I_to__GtoSlow = ((var_parameters__epi == 1.0) ? (0.015599999999999999 * mParameters[19]) : (0.037595999999999997 * mParameters[19])); // mS_per_uF
        const double var_I_to__I_tof = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_to__GtoFast * var_chaste_interface__I_to__x_to_f * var_chaste_interface__I_to__y_to_f; // uA_per_uF
        const double var_I_to__I_tof_converted = HeartConfig::Instance()->GetCapacitance() * var_I_to__I_tof; // uA_per_cm2
        const double var_I_to__I_tos = (-var_parameters__ek + var_chaste_interface__membrane_potential__V_m) * var_I_to__GtoSlow * var_chaste_interface__I_to__x_to_s * var_chaste_interface__I_to__y_to_s; // uA_per_uF
        const double var_I_to__I_to = var_I_to__I_tof + var_I_to__I_tos; // uA_per_uF
        const double var_I_to__I_to_converted = HeartConfig::Instance()->GetCapacitance() * var_I_to__I_to; // uA_per_cm2
        const double var_I_to__I_tos_converted = HeartConfig::Instance()->GetCapacitance() * var_I_to__I_tos; // uA_per_cm2
        const double var_parameters__hillSRCaP = 1.7869999999999999; // dimensionless
        const double var_SR_Fluxes__J_serca = pow(var_parameters__Q10SRCaP, var_parameters__Qpow) * (pow((var_chaste_interface__Ca_Concentrations__Ca_i / var_parameters__Kmf), var_parameters__hillSRCaP) - pow((var_chaste_interface__SR_Ca_Concentrations__Ca_sr / var_parameters__Kmr), var_parameters__hillSRCaP)) * mParameters[2] / (1.0 + pow((var_chaste_interface__Ca_Concentrations__Ca_i / var_parameters__Kmf), var_parameters__hillSRCaP) + pow((var_chaste_interface__SR_Ca_Concentrations__Ca_sr / var_parameters__Kmr), var_parameters__hillSRCaP)); // mM_per_msec
        const double var_SR_Fluxes__J_SRCarel = (-var_chaste_interface__Ca_Concentrations__Ca_j + var_chaste_interface__SR_Ca_Concentrations__Ca_sr) * var_chaste_interface__SR_Fluxes__Ry_Ro * mParameters[1]; // mM_per_msec
        const double var_parameters__ksat = 0.32000000000000001; // dimensionless
        const double var_parameters__nu = 0.27000000000000002; // dimensionless
        const double var_I_NCX__s1_junc = pow(var_chaste_interface__Na_Concentrations__Na_j, 3) * mParameters[5] * exp(var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT * var_parameters__nu); // mM4
        const double var_I_NCX__s1_sl = pow(var_chaste_interface__Na_Concentrations__Na_sl, 3) * mParameters[5] * exp(var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT * var_parameters__nu); // mM4
        const double var_I_NCX__s2_junc = pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_j * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT); // mM4
        const double var_I_NCX__I_ncx_junc = pow(var_parameters__Q10NCX, var_parameters__Qpow) * (-var_I_NCX__s2_junc + var_I_NCX__s1_junc) * var_I_NCX__Ka_junc * var_parameters__Fjunc * mParameters[20] / ((1.0 + var_parameters__ksat * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * var_I_NCX__s3_junc); // uA_per_uF
        const double var_I_NCX__s2_sl = pow(mParameters[8], 3) * var_chaste_interface__Ca_Concentrations__Ca_sl * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT); // mM4
        const double var_I_NCX__I_ncx_sl = pow(var_parameters__Q10NCX, var_parameters__Qpow) * (-var_I_NCX__s2_sl + var_I_NCX__s1_sl) * var_I_NCX__Ka_sl * var_parameters__Fsl * mParameters[20] / ((1.0 + var_parameters__ksat * exp((-1.0 + var_parameters__nu) * var_chaste_interface__membrane_potential__V_m * var_parameters__FoRT)) * var_I_NCX__s3_sl); // uA_per_uF
        const double var_I_NCX__I_ncx = var_I_NCX__I_ncx_junc + var_I_NCX__I_ncx_sl; // uA_per_uF
        const double var_I_NCX__I_ncx_converted = HeartConfig::Instance()->GetCapacitance() * var_I_NCX__I_ncx; // uA_per_cm2
        const double var_I_Ca__ibarca_j = ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_j * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__I_Ca_junc = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bj + var_I_Ca__fcaCaj) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarca_j * var_parameters__Fjunc_CaL; // uA_per_uF
        const double var_I_Ca__ibarca_sl = ((fabs(var_chaste_interface__membrane_potential__V_m) < 4.9999999999999998e-8 * fabs(mParameters[10] * mParameters[23] / mParameters[9])) ? (-1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8)) + 10000000.0 * (4.9999999999999998e-8 * mParameters[10] * mParameters[23] / mParameters[9] + var_chaste_interface__membrane_potential__V_m) * (1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(9.9999999999999995e-8)) + 1.08e-10 * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(-9.9999999999999995e-8)) * mParameters[9] * mParameters[11] / (-1.0 + exp(-9.9999999999999995e-8))) * mParameters[9] / (mParameters[10] * mParameters[23])) : (0.00216 * pow(mParameters[9], 2) * (-0.34100000000000003 * mParameters[5] + 0.34100000000000003 * var_chaste_interface__Ca_Concentrations__Ca_sl * exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * var_chaste_interface__membrane_potential__V_m * mParameters[11] / ((-1.0 + exp(2.0 * var_chaste_interface__membrane_potential__V_m * mParameters[9] / (mParameters[10] * mParameters[23]))) * mParameters[10] * mParameters[23]))); // uA_per_uF
        const double var_I_Ca__I_Ca_sl = 0.45000000000000001 * pow(var_parameters__Q10CaL, var_parameters__Qpow) * (1.0 - var_chaste_interface__I_Ca__f_Ca_Bsl + var_I_Ca__fcaCaMSL) * var_chaste_interface__I_Ca__d * var_chaste_interface__I_Ca__f * var_I_Ca__ibarca_sl * var_parameters__Fsl_CaL; // uA_per_uF
        const double var_I_Ca__I_Ca = var_I_Ca__I_Ca_junc + var_I_Ca__I_Ca_sl; // uA_per_uF
        const double var_I_Ca__I_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_I_Ca__I_Ca; // uA_per_cm2
        const double var_parameters__pNaK = 0.018329999999999999; // dimensionless
        const double var_I_Ks__eks = log((mParameters[8] * var_parameters__pNaK + mParameters[7]) / (var_chaste_interface__Na_Concentrations__Na_i * var_parameters__pNaK + var_chaste_interface__K_Concentration__K_i)) / var_parameters__FoRT; // mV
        const double var_I_Ks__I_ks = pow(var_chaste_interface__I_Ks__x_ks, 2) * (-var_I_Ks__eks + var_chaste_interface__membrane_potential__V_m) * var_I_Ks__GKs_total; // uA_per_uF
        const double var_I_Ks__I_ks_converted = HeartConfig::Instance()->GetCapacitance() * var_I_Ks__I_ks; // uA_per_cm2

        std::vector<double> dqs(26);
        dqs[0] = var_SR_Fluxes__J_SRleak;
        dqs[1] = var_SR_Fluxes__J_SRCarel;
        dqs[2] = var_SR_Fluxes__J_serca;
        dqs[3] = var_parameters__ecl;
        dqs[4] = var_I_Ca__I_Ca_converted;
        dqs[5] = var_I_Ca__tauf;
        dqs[6] = var_I_PCa__I_pca_converted;
        dqs[7] = var_parameters__Cmem_converted;
        dqs[8] = var_I_Na__I_Na_converted;
        dqs[9] = var_I_Na__tauh;
        dqs[10] = var_I_Na__tauj;
        dqs[11] = var_I_to__I_tof_converted;
        dqs[12] = var_I_to__GtoFast;
        dqs[13] = var_I_Ki__I_ki_converted;
        dqs[14] = var_I_Ki__g_K1;
        dqs[15] = var_I_Kr__I_kr_converted;
        dqs[16] = var_I_Ks__I_ks_converted;
        dqs[17] = var_I_Ks__GKs_total;
        dqs[18] = var_I_to__I_tos_converted;
        dqs[19] = var_I_to__GtoSlow;
        dqs[20] = var_I_NCX__I_ncx_converted;
        dqs[21] = var_I_NaK__I_nak_converted;
        dqs[22] = var_membrane_potential__i_Stim_converted;
        dqs[23] = var_I_to__I_to_converted;
        dqs[24] = var_parameters__ek;
        dqs[25] = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1>::Initialise(void)
{
    this->mSystemName = "grandi_pasqualini_bers_2010";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "msec";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-81.4229700631461);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(8.72745589849657e-05);

    // rY[2]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_m_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00381858135062259);

    // rY[3]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_h_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.625086621635645);

    // rY[4]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.62332507235506);

    // rY[5]:
    this->mVariableNames.push_back("I_Kr__x_kr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.021733554982663);

    // rY[6]:
    this->mVariableNames.push_back("I_Ks__x_ks");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00428981903391989);

    // rY[7]:
    this->mVariableNames.push_back("I_to__x_to_s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000441539203559411);

    // rY[8]:
    this->mVariableNames.push_back("I_to__y_to_s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.784875334693892);

    // rY[9]:
    this->mVariableNames.push_back("I_to__x_to_f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000441531250866821);

    // rY[10]:
    this->mVariableNames.push_back("I_to__y_to_f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999995817153572);

    // rY[11]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_d_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.93982287251302e-06);

    // rY[12]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99511673495949);

    // rY[13]:
    this->mVariableNames.push_back("I_Ca__f_Ca_Bj");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0246142436477748);

    // rY[14]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_fCa_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0152416826209301);

    // rY[15]:
    this->mVariableNames.push_back("SR_Fluxes__Ry_Rr");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.891022230597263);

    // rY[16]:
    this->mVariableNames.push_back("SR_Fluxes__Ry_Ro");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(7.37484660389498e-07);

    // rY[17]:
    this->mVariableNames.push_back("SR_Fluxes__Ry_Ri");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(9.01984485847386e-08);

    // rY[18]:
    this->mVariableNames.push_back("Na_Buffers__Na_Bj");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(3.43545459048316);

    // rY[19]:
    this->mVariableNames.push_back("Na_Buffers__Na_Bsl");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.749601264899653);

    // rY[20]:
    this->mVariableNames.push_back("Cytosolic_Ca_Buffers__Tn_CL");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00893708435270205);

    // rY[21]:
    this->mVariableNames.push_back("Cytosolic_Ca_Buffers__Tn_CHc");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.117445983314504);

    // rY[22]:
    this->mVariableNames.push_back("Cytosolic_Ca_Buffers__Tn_CHm");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.0105996734077994);

    // rY[23]:
    this->mVariableNames.push_back("Cytosolic_Ca_Buffers__CaM");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.000295653619580701);

    // rY[24]:
    this->mVariableNames.push_back("Cytosolic_Ca_Buffers__Myo_c");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00192645052472679);

    // rY[25]:
    this->mVariableNames.push_back("Cytosolic_Ca_Buffers__Myo_m");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.137557201546068);

    // rY[26]:
    this->mVariableNames.push_back("Cytosolic_Ca_Buffers__SRB");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00217414510791738);

    // rY[27]:
    this->mVariableNames.push_back("Junctional_and_SL_Ca_Buffers__SLL_j");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00738583890572642);

    // rY[28]:
    this->mVariableNames.push_back("Junctional_and_SL_Ca_Buffers__SLL_sl");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.00988178900584875);

    // rY[29]:
    this->mVariableNames.push_back("Junctional_and_SL_Ca_Buffers__SLH_j");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.0734662466011574);

    // rY[30]:
    this->mVariableNames.push_back("Junctional_and_SL_Ca_Buffers__SLH_sl");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.114400081504523);

    // rY[31]:
    this->mVariableNames.push_back("SR_Ca_Concentrations__Csqn_b");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(1.19772047585784);

    // rY[32]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.555180633859957);

    // rY[33]:
    this->mVariableNames.push_back("dyadic_space_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(8.3215690202059);

    // rY[34]:
    this->mVariableNames.push_back("submembrane_space_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(8.32094589677861);

    // rY[35]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(8.32114502072456);

    // rY[36]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(120.0);

    // rY[37]:
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.000175415190830688);

    // rY[38]:
    this->mVariableNames.push_back("submembrane_space_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.000106544589194246);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_leak_current_max");
    this->mParameterUnits.push_back("per_msec");

    // mParameters[1]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_msec");

    // mParameters[2]:
    this->mParameterNames.push_back("SR_uptake_current_max");
    this->mParameterUnits.push_back("mM_per_msec");

    // mParameters[3]:
    this->mParameterNames.push_back("concentration_clamp_onoff");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[4]:
    this->mParameterNames.push_back("cytosolic_chloride_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[6]:
    this->mParameterNames.push_back("extracellular_chloride_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[7]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[8]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[9]:
    this->mParameterNames.push_back("faraday_constant");
    this->mParameterUnits.push_back("coulomb_per_mole");

    // mParameters[10]:
    this->mParameterNames.push_back("gas_constant");
    this->mParameterUnits.push_back("joule_per_kelvin_per_kilomole");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("cm_per_sec");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_reduced_inactivation");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_shift_inactivation");
    this->mParameterUnits.push_back("mV");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_fast_transient_outward_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[18]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[19]:
    this->mParameterNames.push_back("membrane_slow_transient_outward_current_conductance_scaling_factor");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[20]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[21]:
    this->mParameterNames.push_back("membrane_sodium_potassium_pump_current_permeability");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[22]:
    this->mParameterNames.push_back("parameters__Cmem");
    this->mParameterUnits.push_back("farad");

    // mParameters[23]:
    this->mParameterNames.push_back("temperature");
    this->mParameterUnits.push_back("kelvin");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_leak_current");
    this->mDerivedQuantityUnits.push_back("mM_per_msec");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("mM_per_msec");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("SR_uptake_current");
    this->mDerivedQuantityUnits.push_back("mM_per_msec");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("chloride_reversal_potential");
    this->mDerivedQuantityUnits.push_back("mV");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current_f_gate_tau");
    this->mDerivedQuantityUnits.push_back("msec");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_calcium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_capacitance");
    this->mDerivedQuantityUnits.push_back("uF");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_h_gate_tau");
    this->mDerivedQuantityUnits.push_back("msec");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current_j_gate_tau");
    this->mDerivedQuantityUnits.push_back("msec");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_fast_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_fast_transient_outward_current_conductance");
    this->mDerivedQuantityUnits.push_back("mS_per_uF");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("mS_per_uF");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [16]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [17]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mDerivedQuantityUnits.push_back("mS_per_uF");

    // Derived Quantity index [18]:
    this->mDerivedQuantityNames.push_back("membrane_slow_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [19]:
    this->mDerivedQuantityNames.push_back("membrane_slow_transient_outward_current_conductance");
    this->mDerivedQuantityUnits.push_back("mS_per_uF");

    // Derived Quantity index [20]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [21]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [22]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [23]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [24]:
    this->mDerivedQuantityNames.push_back("potassium_reversal_potential");
    this->mDerivedQuantityUnits.push_back("mV");

    // Derived Quantity index [25]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("msec");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellgrandi_pasqualini_bers_2010_ssFromCellMLGRL1)

