//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: bernus_wilders_zemlin_verschelde_panfilov_2002_version01
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: GeneralizedRushLarsenFirstOrder)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "bernus_wilders_zemlin_verschelde_panfilov_2002.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"



    boost::shared_ptr<RegularStimulus> Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__stimulus_protocol__IstimAmplitude_converted = 0.5 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__stimulus_protocol__IstimPeriod = 1000.0; // millisecond
        const double var_chaste_interface__stimulus_protocol__IstimPulseDuration = 1.0; // millisecond
        const double var_chaste_interface__stimulus_protocol__IstimStart = 10.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__stimulus_protocol__IstimAmplitude_converted),
                var_chaste_interface__stimulus_protocol__IstimPulseDuration,
                var_chaste_interface__stimulus_protocol__IstimPeriod,
                var_chaste_interface__stimulus_protocol__IstimStart
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractGeneralizedRushLarsenCardiacCell(
                6,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 0.00040000000000000002; // (var_ionic_concentrations__Ca_i) [millimolar]
        this->mParameters[1] = 140.0; // (var_ionic_concentrations__K_i) [millimolar]
        this->mParameters[2] = 10.0; // (var_ionic_concentrations__Na_i) [millimolar]
        this->mParameters[3] = 2.0; // (var_ionic_concentrations__Ca_e) [millimolar]
        this->mParameters[4] = 4.0; // (var_ionic_concentrations__K_e) [millimolar]
        this->mParameters[5] = 138.0; // (var_ionic_concentrations__Na_e) [millimolar]
        this->mParameters[6] = 0.064000000000000001; // (var_calcium_current__g_Ca) [nanoS_per_picoF]
        this->mParameters[7] = 153.40000000000001; // (var_membrane__Cm) [picoF]
        this->mParameters[8] = 16.0; // (var_sodium_current__g_Na) [nanoS_per_picoF]
        this->mParameters[9] = 3.8999999999999999; // (var_inward_rectifier_potassium_current__g_K1) [nanoS_per_picoF]
    }

    Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::~Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1()
    {
    }

    
    double Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90.2
        double var_chaste_interface__sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.0016203
        double var_chaste_interface__sodium_current_v_gate__v = rY[2];
        // Units: dimensionless; Initial value: 0.9944036
        double var_chaste_interface__calcium_current_f_gate__f = rY[3];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__transient_outward_current_to_gate__to = rY[4];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X = rY[5];
        // Units: dimensionless; Initial value: 0.000928836
        
        const double var_calcium_background_current__g_b_Ca = 0.00084999999999999995; // nanoS_per_picoF
        const double var_delayed_rectifier_potassium_current__g_K = 0.019; // nanoS_per_picoF
        const double var_calcium_current_f_Ca_gate__f_Ca = 1 / (1.0 + 1666.6666666666667 * mParameters[0]); // dimensionless
        const double var_membrane__F = 96845.0; // coulomb_per_mole
        const double var_membrane__R = 8314.0; // millijoule_per_mole_kelvin
        const double var_membrane__T = 310.0; // kelvin
        const double var_calcium_current__E_Ca = 0.5 * var_membrane__R * var_membrane__T * log(mParameters[3] / mParameters[0]) / var_membrane__F; // millivolt
        const double var_delayed_rectifier_potassium_current__E_K = var_membrane__R * var_membrane__T * log(mParameters[4] / mParameters[1]) / var_membrane__F; // millivolt
        const double var_calcium_background_current__i_b_Ca = (-var_calcium_current__E_Ca + var_chaste_interface__membrane__V) * var_calcium_background_current__g_b_Ca; // picoA_per_picoF
        const double var_calcium_current_d_gate__alpha_d = 0.63503954329583223 * exp(-0.89850709360569092 * pow((-1 + 0.044722719141323794 * var_chaste_interface__membrane__V), 2)) / sqrt(M_PI); // per_millisecond
        const double var_calcium_current_d_gate__beta_d = 0.14710000000000001 - 0.25101580310038191 * exp(-0.088183122039937209 * pow((-1 + 0.15948963317384371 * var_chaste_interface__membrane__V), 2)) / sqrt(M_PI); // per_millisecond
        const double var_calcium_current_d_gate__d_infinity = var_calcium_current_d_gate__alpha_d / (var_calcium_current_d_gate__alpha_d + var_calcium_current_d_gate__beta_d); // dimensionless
        const double var_calcium_current__i_Ca = (-var_calcium_current__E_Ca + var_chaste_interface__membrane__V) * mParameters[6] * var_calcium_current_d_gate__d_infinity * var_calcium_current_f_Ca_gate__f_Ca * var_chaste_interface__calcium_current_f_gate__f; // picoA_per_picoF
        const double var_calcium_current__i_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_calcium_current__i_Ca; // uA_per_cm2
        const double var_delayed_rectifier_potassium_current__i_K = pow(var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X, 2) * (-var_delayed_rectifier_potassium_current__E_K + var_chaste_interface__membrane__V) * var_delayed_rectifier_potassium_current__g_K; // picoA_per_picoF
        const double var_inward_rectifier_potassium_current_K1_gate__alpha_K1 = 0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_delayed_rectifier_potassium_current__E_K)); // per_millisecond
        const double var_inward_rectifier_potassium_current_K1_gate__beta_K1 = (3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__membrane__V - 0.00020000000000000001 * var_delayed_rectifier_potassium_current__E_K) + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__V - 0.10000000000000001 * var_delayed_rectifier_potassium_current__E_K)) / (1.0 + exp(0.5 * var_delayed_rectifier_potassium_current__E_K - 0.5 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_inward_rectifier_potassium_current_K1_gate__K1_infinity = var_inward_rectifier_potassium_current_K1_gate__alpha_K1 / (var_inward_rectifier_potassium_current_K1_gate__alpha_K1 + var_inward_rectifier_potassium_current_K1_gate__beta_K1); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = (-var_delayed_rectifier_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[9] * var_inward_rectifier_potassium_current_K1_gate__K1_infinity; // picoA_per_picoF
        const double var_inward_rectifier_potassium_current__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_inward_rectifier_potassium_current__i_K1; // uA_per_cm2
        const double var_sodium_background_current__g_b_Na = 0.001; // nanoS_per_picoF
        const double var_sodium_calcium_pump__f_NaCa = (pow(mParameters[2], 3) * mParameters[3] * exp(0.012999999999999999 * var_chaste_interface__membrane__V) - pow(mParameters[5], 3) * mParameters[0] * exp(-0.024 * var_chaste_interface__membrane__V)) / ((1.0 + 0.10000000000000001 * exp(-0.024 * var_chaste_interface__membrane__V)) * (669921.875 + pow(mParameters[5], 3)) * (1.3799999999999999 + mParameters[3])); // dimensionless
        const double var_sodium_calcium_pump__g_NaCa = 1000.0; // nanoS_per_picoF
        const double var_sodium_calcium_pump__i_NaCa = var_sodium_calcium_pump__f_NaCa * var_sodium_calcium_pump__g_NaCa; // picoA_per_picoF
        const double var_sodium_current__E_Na = var_membrane__R * var_membrane__T * log(mParameters[5] / mParameters[2]) / var_membrane__F; // millivolt
        const double var_sodium_background_current__i_b_Na = (-var_sodium_current__E_Na + var_chaste_interface__membrane__V) * var_sodium_background_current__g_b_Na; // picoA_per_picoF
        const double var_sodium_current__i_Na = pow(var_chaste_interface__sodium_current_m_gate__m, 3) * pow(var_chaste_interface__sodium_current_v_gate__v, 2) * (-var_sodium_current__E_Na + var_chaste_interface__membrane__V) * mParameters[8]; // picoA_per_picoF
        const double var_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_sodium_current__i_Na; // uA_per_cm2
        const double var_sodium_potassium_pump__f_NaK_a = mParameters[4] / ((1.0 + 31.622776601683793 * pow((1 / mParameters[2]), 1.5)) * (1.5 + mParameters[4])); // dimensionless
        const double var_sodium_potassium_pump__g_NaK = 1.3; // nanoS_per_picoF
        const double var_sodium_potassium_pump__sigma = -0.14280000000000001 + 0.14280000000000001 * exp(0.01485884101040119 * mParameters[5]); // dimensionless
        const double var_sodium_potassium_pump__f_NaK = 1 / (1.0 + 0.1245 * exp(-0.0037000000000000002 * var_chaste_interface__membrane__V) + 0.036499999999999998 * var_sodium_potassium_pump__sigma * exp(-0.036999999999999998 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_sodium_potassium_pump__i_NaK = var_sodium_potassium_pump__f_NaK * var_sodium_potassium_pump__f_NaK_a * var_sodium_potassium_pump__g_NaK; // picoA_per_picoF
        const double var_transient_outward_current__E_to = var_membrane__R * var_membrane__T * log((mParameters[4] + 0.042999999999999997 * mParameters[5]) / (mParameters[1] + 0.042999999999999997 * mParameters[2])) / var_membrane__F; // millivolt
        const double var_transient_outward_current__g_to = 0.40000000000000002; // nanoS_per_picoF
        const double var_transient_outward_current_r_gate__alpha_r = 0.52659999999999996 * exp(0.70203392000000009 - 0.0166 * var_chaste_interface__membrane__V) / (1.0 + exp(3.9880601600000003 - 0.094299999999999995 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_transient_outward_current_r_gate__beta_r = (0.51490000000000002 * exp(0.67236288 - 0.13439999999999999 * var_chaste_interface__membrane__V) + 5.1860000000000002e-5 * var_chaste_interface__membrane__V) / (1.0 + exp(6.9907280000000006e-6 - 0.1348 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_transient_outward_current_r_gate__r_infinity = var_transient_outward_current_r_gate__alpha_r / (var_transient_outward_current_r_gate__alpha_r + var_transient_outward_current_r_gate__beta_r); // dimensionless
        const double var_transient_outward_current__i_to = (-var_transient_outward_current__E_to + var_chaste_interface__membrane__V) * var_transient_outward_current__g_to * var_transient_outward_current_r_gate__r_infinity * var_chaste_interface__transient_outward_current_to_gate__to; // picoA_per_picoF
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_calcium_background_current__i_b_Ca + HeartConfig::Instance()->GetCapacitance() * var_delayed_rectifier_potassium_current__i_K + HeartConfig::Instance()->GetCapacitance() * var_sodium_background_current__i_b_Na + HeartConfig::Instance()->GetCapacitance() * var_sodium_calcium_pump__i_NaCa + HeartConfig::Instance()->GetCapacitance() * var_sodium_potassium_pump__i_NaK + HeartConfig::Instance()->GetCapacitance() * var_transient_outward_current__i_to + var_calcium_current__i_Ca_converted + var_inward_rectifier_potassium_current__i_K1_converted + var_sodium_current__i_Na_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::UpdateTransmembranePotential(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        unsigned v_index = GetVoltageIndex();
        const double delta = 1e-8;

        double d_dt_chaste_interface_var_membrane__V;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90.2
        double var_chaste_interface__sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.0016203
        double var_chaste_interface__sodium_current_v_gate__v = rY[2];
        // Units: dimensionless; Initial value: 0.9944036
        double var_chaste_interface__calcium_current_f_gate__f = rY[3];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__transient_outward_current_to_gate__to = rY[4];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X = rY[5];
        // Units: dimensionless; Initial value: 0.000928836
        

        // Mathematics
        const double var_calcium_background_current__g_b_Ca = 0.00084999999999999995; // nanoS_per_picoF
        const double var_delayed_rectifier_potassium_current__g_K = 0.019; // nanoS_per_picoF
        const double var_calcium_current_f_Ca_gate__f_Ca = 1 / (1.0 + 1666.6666666666667 * mParameters[0]); // dimensionless
        const double var_membrane__F = 96845.0; // coulomb_per_mole
        const double var_membrane__R = 8314.0; // millijoule_per_mole_kelvin
        const double var_membrane__T = 310.0; // kelvin
        const double var_calcium_current__E_Ca = 0.5 * var_membrane__R * var_membrane__T * log(mParameters[3] / mParameters[0]) / var_membrane__F; // millivolt
        const double var_delayed_rectifier_potassium_current__E_K = var_membrane__R * var_membrane__T * log(mParameters[4] / mParameters[1]) / var_membrane__F; // millivolt
        const double var_calcium_background_current__i_b_Ca = (-var_calcium_current__E_Ca + var_chaste_interface__membrane__V) * var_calcium_background_current__g_b_Ca; // picoA_per_picoF
        const double var_calcium_current_d_gate__alpha_d = 0.63503954329583223 * exp(-0.89850709360569092 * pow((-1 + 0.044722719141323794 * var_chaste_interface__membrane__V), 2)) / sqrt(M_PI); // per_millisecond
        const double var_calcium_current_d_gate__beta_d = 0.14710000000000001 - 0.25101580310038191 * exp(-0.088183122039937209 * pow((-1 + 0.15948963317384371 * var_chaste_interface__membrane__V), 2)) / sqrt(M_PI); // per_millisecond
        const double var_calcium_current_d_gate__d_infinity = var_calcium_current_d_gate__alpha_d / (var_calcium_current_d_gate__alpha_d + var_calcium_current_d_gate__beta_d); // dimensionless
        const double var_calcium_current__i_Ca = (-var_calcium_current__E_Ca + var_chaste_interface__membrane__V) * mParameters[6] * var_calcium_current_d_gate__d_infinity * var_calcium_current_f_Ca_gate__f_Ca * var_chaste_interface__calcium_current_f_gate__f; // picoA_per_picoF
        const double var_delayed_rectifier_potassium_current__i_K = pow(var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X, 2) * (-var_delayed_rectifier_potassium_current__E_K + var_chaste_interface__membrane__V) * var_delayed_rectifier_potassium_current__g_K; // picoA_per_picoF
        const double var_inward_rectifier_potassium_current_K1_gate__alpha_K1 = 0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_delayed_rectifier_potassium_current__E_K)); // per_millisecond
        const double var_inward_rectifier_potassium_current_K1_gate__beta_K1 = (3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__membrane__V - 0.00020000000000000001 * var_delayed_rectifier_potassium_current__E_K) + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__V - 0.10000000000000001 * var_delayed_rectifier_potassium_current__E_K)) / (1.0 + exp(0.5 * var_delayed_rectifier_potassium_current__E_K - 0.5 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_inward_rectifier_potassium_current_K1_gate__K1_infinity = var_inward_rectifier_potassium_current_K1_gate__alpha_K1 / (var_inward_rectifier_potassium_current_K1_gate__alpha_K1 + var_inward_rectifier_potassium_current_K1_gate__beta_K1); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = (-var_delayed_rectifier_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[9] * var_inward_rectifier_potassium_current_K1_gate__K1_infinity; // picoA_per_picoF
        const double var_sodium_background_current__g_b_Na = 0.001; // nanoS_per_picoF
        const double var_sodium_calcium_pump__f_NaCa = (pow(mParameters[2], 3) * mParameters[3] * exp(0.012999999999999999 * var_chaste_interface__membrane__V) - pow(mParameters[5], 3) * mParameters[0] * exp(-0.024 * var_chaste_interface__membrane__V)) / ((1.0 + 0.10000000000000001 * exp(-0.024 * var_chaste_interface__membrane__V)) * (669921.875 + pow(mParameters[5], 3)) * (1.3799999999999999 + mParameters[3])); // dimensionless
        const double var_sodium_calcium_pump__g_NaCa = 1000.0; // nanoS_per_picoF
        const double var_sodium_calcium_pump__i_NaCa = var_sodium_calcium_pump__f_NaCa * var_sodium_calcium_pump__g_NaCa; // picoA_per_picoF
        const double var_sodium_current__E_Na = var_membrane__R * var_membrane__T * log(mParameters[5] / mParameters[2]) / var_membrane__F; // millivolt
        const double var_sodium_background_current__i_b_Na = (-var_sodium_current__E_Na + var_chaste_interface__membrane__V) * var_sodium_background_current__g_b_Na; // picoA_per_picoF
        const double var_sodium_current__i_Na = pow(var_chaste_interface__sodium_current_m_gate__m, 3) * pow(var_chaste_interface__sodium_current_v_gate__v, 2) * (-var_sodium_current__E_Na + var_chaste_interface__membrane__V) * mParameters[8]; // picoA_per_picoF
        const double var_sodium_potassium_pump__f_NaK_a = mParameters[4] / ((1.0 + 31.622776601683793 * pow((1 / mParameters[2]), 1.5)) * (1.5 + mParameters[4])); // dimensionless
        const double var_sodium_potassium_pump__g_NaK = 1.3; // nanoS_per_picoF
        const double var_sodium_potassium_pump__sigma = -0.14280000000000001 + 0.14280000000000001 * exp(0.01485884101040119 * mParameters[5]); // dimensionless
        const double var_sodium_potassium_pump__f_NaK = 1 / (1.0 + 0.1245 * exp(-0.0037000000000000002 * var_chaste_interface__membrane__V) + 0.036499999999999998 * var_sodium_potassium_pump__sigma * exp(-0.036999999999999998 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_sodium_potassium_pump__i_NaK = var_sodium_potassium_pump__f_NaK * var_sodium_potassium_pump__f_NaK_a * var_sodium_potassium_pump__g_NaK; // picoA_per_picoF
        const double var_stimulus_protocol__i_stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_stimulus_protocol__i_stim = var_stimulus_protocol__i_stim_converted / HeartConfig::Instance()->GetCapacitance(); // picoA_per_picoF
        const double var_transient_outward_current__E_to = var_membrane__R * var_membrane__T * log((mParameters[4] + 0.042999999999999997 * mParameters[5]) / (mParameters[1] + 0.042999999999999997 * mParameters[2])) / var_membrane__F; // millivolt
        const double var_transient_outward_current__g_to = 0.40000000000000002; // nanoS_per_picoF
        const double var_transient_outward_current_r_gate__alpha_r = 0.52659999999999996 * exp(0.70203392000000009 - 0.0166 * var_chaste_interface__membrane__V) / (1.0 + exp(3.9880601600000003 - 0.094299999999999995 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_transient_outward_current_r_gate__beta_r = (0.51490000000000002 * exp(0.67236288 - 0.13439999999999999 * var_chaste_interface__membrane__V) + 5.1860000000000002e-5 * var_chaste_interface__membrane__V) / (1.0 + exp(6.9907280000000006e-6 - 0.1348 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_transient_outward_current_r_gate__r_infinity = var_transient_outward_current_r_gate__alpha_r / (var_transient_outward_current_r_gate__alpha_r + var_transient_outward_current_r_gate__beta_r); // dimensionless
        const double var_transient_outward_current__i_to = (-var_transient_outward_current__E_to + var_chaste_interface__membrane__V) * var_transient_outward_current__g_to * var_transient_outward_current_r_gate__r_infinity * var_chaste_interface__transient_outward_current_to_gate__to; // picoA_per_picoF
        d_dt_chaste_interface_var_membrane__V = (-var_calcium_background_current__i_b_Ca - var_calcium_current__i_Ca - var_delayed_rectifier_potassium_current__i_K - var_inward_rectifier_potassium_current__i_K1 - var_sodium_background_current__i_b_Na - var_sodium_calcium_pump__i_NaCa - var_sodium_current__i_Na - var_sodium_potassium_pump__i_NaK - var_stimulus_protocol__i_stim - var_transient_outward_current__i_to) / mParameters[7]; // millivolt / millisecond

        double evalF = d_dt_chaste_interface_var_membrane__V;
        mEvalF[0] = d_dt_chaste_interface_var_membrane__V;
        double partialF = EvaluatePartialDerivative0(var_chaste_interface__environment__time, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] += evalF*mDt;
        }
        else
        {
            rY[v_index] += (evalF/partialF)*(exp(partialF*mDt)-1.0);
        }
    }

    void Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::ComputeOneStepExceptVoltage(double var_chaste_interface__environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        const double delta = 1e-8;

        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90.2
        double var_chaste_interface__sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.0016203
        double var_chaste_interface__sodium_current_v_gate__v = rY[2];
        // Units: dimensionless; Initial value: 0.9944036
        double var_chaste_interface__calcium_current_f_gate__f = rY[3];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__transient_outward_current_to_gate__to = rY[4];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X = rY[5];
        // Units: dimensionless; Initial value: 0.000928836
        

        // Mathematics
        const double var_calcium_current_f_gate__alpha_f = 0.0068700000000000002 / (1.0 + exp(-1.0056535947712419 + 0.16339869281045752 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_calcium_current_f_gate__beta_f = 0.00057499999999999999 + (0.010999999999999999 + 0.069000000000000006 * exp(-108.07499999999999 - 11.0 * var_chaste_interface__membrane__V)) / (1.0 + exp(-2.7313499999999999 - 0.27800000000000002 * var_chaste_interface__membrane__V)); // per_millisecond
        const double d_dt_chaste_interface_var_calcium_current_f_gate__f = (1.0 - var_chaste_interface__calcium_current_f_gate__f) * var_calcium_current_f_gate__alpha_f - var_calcium_current_f_gate__beta_f * var_chaste_interface__calcium_current_f_gate__f; // 1 / millisecond
        const double var_delayed_rectifier_potassium_current_X_gate__X_infinity = 0.98799999999999999 / (1.0 + exp(-0.86099999999999999 - 0.062 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_delayed_rectifier_potassium_current_X_gate__tau_X_a = 40.0 - 40.0 * tanh(160.0 + 2.0 * var_chaste_interface__membrane__V); // millisecond
        const double var_delayed_rectifier_potassium_current_X_gate__tau_X = 182.0 + 240.0 * exp(-4.1682692307692308 * pow((1 + 0.039215686274509803 * var_chaste_interface__membrane__V), 2)) + 182.0 * tanh(0.154 + 0.011599999999999999 * var_chaste_interface__membrane__V) + var_delayed_rectifier_potassium_current_X_gate__tau_X_a; // millisecond
        const double d_dt_chaste_interface_var_delayed_rectifier_potassium_current_X_gate__X = (-var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X + var_delayed_rectifier_potassium_current_X_gate__X_infinity) / var_delayed_rectifier_potassium_current_X_gate__tau_X; // 1 / millisecond
        const double var_sodium_current_m_gate__alpha_m = ((fabs(47.130000000000003 + var_chaste_interface__membrane__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_sodium_current_m_gate__beta_m = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__membrane__V); // per_millisecond
        const double d_dt_chaste_interface_var_sodium_current_m_gate__m = (1.0 - var_chaste_interface__sodium_current_m_gate__m) * var_sodium_current_m_gate__alpha_m - var_sodium_current_m_gate__beta_m * var_chaste_interface__sodium_current_m_gate__m; // 1 / millisecond
        const double var_sodium_current_v_gate__tau_v = 0.25 + 2.2400000000000002 * (1.0 - tanh(7.7400000000000002 + 0.12 * var_chaste_interface__membrane__V)) / (1.0 - tanh(6.4680000000000009 + 0.070000000000000007 * var_chaste_interface__membrane__V)); // millisecond
        const double var_sodium_current_v_gate__v_infinity = 0.5 - 0.5 * tanh(7.7400000000000002 + 0.12 * var_chaste_interface__membrane__V); // dimensionless
        const double d_dt_chaste_interface_var_sodium_current_v_gate__v = (-var_chaste_interface__sodium_current_v_gate__v + var_sodium_current_v_gate__v_infinity) / var_sodium_current_v_gate__tau_v; // 1 / millisecond
        const double var_transient_outward_current_to_gate__alpha_to = (5.6119999999999998e-5 * var_chaste_interface__membrane__V + 0.072099999999999997 * exp(-5.9257863000000004 - 0.17299999999999999 * var_chaste_interface__membrane__V)) / (1.0 + exp(-5.9326369200000002 - 0.17319999999999999 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_transient_outward_current_to_gate__beta_to = (0.0001215 * var_chaste_interface__membrane__V + 0.076700000000000004 * exp(-5.6479010000000002e-8 - 1.6600000000000001e-9 * var_chaste_interface__membrane__V)) / (1.0 + exp(-5.4573693999999993 - 0.16039999999999999 * var_chaste_interface__membrane__V)); // per_millisecond
        const double d_dt_chaste_interface_var_transient_outward_current_to_gate__to = (1.0 - var_chaste_interface__transient_outward_current_to_gate__to) * var_transient_outward_current_to_gate__alpha_to - var_transient_outward_current_to_gate__beta_to * var_chaste_interface__transient_outward_current_to_gate__to; // 1 / millisecond
        
        mEvalF[1] = d_dt_chaste_interface_var_sodium_current_m_gate__m;
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__environment__time, rY, delta);
        mEvalF[2] = d_dt_chaste_interface_var_sodium_current_v_gate__v;
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__environment__time, rY, delta);
        mEvalF[3] = d_dt_chaste_interface_var_calcium_current_f_gate__f;
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__environment__time, rY, delta);
        mEvalF[4] = d_dt_chaste_interface_var_transient_outward_current_to_gate__to;
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__environment__time, rY, delta);
        mEvalF[5] = d_dt_chaste_interface_var_delayed_rectifier_potassium_current_X_gate__X;
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__environment__time, rY, delta);
        
        {
            if (fabs(mPartialF[1]) < delta){
                rY[1] += mDt*d_dt_chaste_interface_var_sodium_current_m_gate__m;
            }
            else
            {
                rY[1] += (d_dt_chaste_interface_var_sodium_current_m_gate__m/mPartialF[1])*(exp(mPartialF[1]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[2]) < delta){
                rY[2] += mDt*d_dt_chaste_interface_var_sodium_current_v_gate__v;
            }
            else
            {
                rY[2] += (d_dt_chaste_interface_var_sodium_current_v_gate__v/mPartialF[2])*(exp(mPartialF[2]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[3]) < delta){
                rY[3] += mDt*d_dt_chaste_interface_var_calcium_current_f_gate__f;
            }
            else
            {
                rY[3] += (d_dt_chaste_interface_var_calcium_current_f_gate__f/mPartialF[3])*(exp(mPartialF[3]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[4]) < delta){
                rY[4] += mDt*d_dt_chaste_interface_var_transient_outward_current_to_gate__to;
            }
            else
            {
                rY[4] += (d_dt_chaste_interface_var_transient_outward_current_to_gate__to/mPartialF[4])*(exp(mPartialF[4]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[5]) < delta){
                rY[5] += mDt*d_dt_chaste_interface_var_delayed_rectifier_potassium_current_X_gate__X;
            }
            else
            {
                rY[5] += (d_dt_chaste_interface_var_delayed_rectifier_potassium_current_X_gate__X/mPartialF[5])*(exp(mPartialF[5]*mDt)-1.0);
            }
            
        }        
        
    }
   
    
    double Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::EvaluateYDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        double d_dt_chaste_interface_var_membrane__V;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90.2
        double var_chaste_interface__sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.0016203
        double var_chaste_interface__sodium_current_v_gate__v = rY[2];
        // Units: dimensionless; Initial value: 0.9944036
        double var_chaste_interface__calcium_current_f_gate__f = rY[3];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__transient_outward_current_to_gate__to = rY[4];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X = rY[5];
        // Units: dimensionless; Initial value: 0.000928836
        

        // Mathematics
        const double var_calcium_background_current__g_b_Ca = 0.00084999999999999995; // nanoS_per_picoF
        const double var_delayed_rectifier_potassium_current__g_K = 0.019; // nanoS_per_picoF
        const double var_calcium_current_f_Ca_gate__f_Ca = 1 / (1.0 + 1666.6666666666667 * mParameters[0]); // dimensionless
        const double var_membrane__F = 96845.0; // coulomb_per_mole
        const double var_membrane__R = 8314.0; // millijoule_per_mole_kelvin
        const double var_membrane__T = 310.0; // kelvin
        const double var_calcium_current__E_Ca = 0.5 * var_membrane__R * var_membrane__T * log(mParameters[3] / mParameters[0]) / var_membrane__F; // millivolt
        const double var_delayed_rectifier_potassium_current__E_K = var_membrane__R * var_membrane__T * log(mParameters[4] / mParameters[1]) / var_membrane__F; // millivolt
        const double var_calcium_background_current__i_b_Ca = (-var_calcium_current__E_Ca + var_chaste_interface__membrane__V) * var_calcium_background_current__g_b_Ca; // picoA_per_picoF
        const double var_calcium_current_d_gate__alpha_d = 0.63503954329583223 * exp(-0.89850709360569092 * pow((-1 + 0.044722719141323794 * var_chaste_interface__membrane__V), 2)) / sqrt(M_PI); // per_millisecond
        const double var_calcium_current_d_gate__beta_d = 0.14710000000000001 - 0.25101580310038191 * exp(-0.088183122039937209 * pow((-1 + 0.15948963317384371 * var_chaste_interface__membrane__V), 2)) / sqrt(M_PI); // per_millisecond
        const double var_calcium_current_d_gate__d_infinity = var_calcium_current_d_gate__alpha_d / (var_calcium_current_d_gate__alpha_d + var_calcium_current_d_gate__beta_d); // dimensionless
        const double var_calcium_current__i_Ca = (-var_calcium_current__E_Ca + var_chaste_interface__membrane__V) * mParameters[6] * var_calcium_current_d_gate__d_infinity * var_calcium_current_f_Ca_gate__f_Ca * var_chaste_interface__calcium_current_f_gate__f; // picoA_per_picoF
        const double var_delayed_rectifier_potassium_current__i_K = pow(var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X, 2) * (-var_delayed_rectifier_potassium_current__E_K + var_chaste_interface__membrane__V) * var_delayed_rectifier_potassium_current__g_K; // picoA_per_picoF
        const double var_inward_rectifier_potassium_current_K1_gate__alpha_K1 = 0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_delayed_rectifier_potassium_current__E_K)); // per_millisecond
        const double var_inward_rectifier_potassium_current_K1_gate__beta_K1 = (3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__membrane__V - 0.00020000000000000001 * var_delayed_rectifier_potassium_current__E_K) + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__V - 0.10000000000000001 * var_delayed_rectifier_potassium_current__E_K)) / (1.0 + exp(0.5 * var_delayed_rectifier_potassium_current__E_K - 0.5 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_inward_rectifier_potassium_current_K1_gate__K1_infinity = var_inward_rectifier_potassium_current_K1_gate__alpha_K1 / (var_inward_rectifier_potassium_current_K1_gate__alpha_K1 + var_inward_rectifier_potassium_current_K1_gate__beta_K1); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = (-var_delayed_rectifier_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[9] * var_inward_rectifier_potassium_current_K1_gate__K1_infinity; // picoA_per_picoF
        const double var_sodium_background_current__g_b_Na = 0.001; // nanoS_per_picoF
        const double var_sodium_calcium_pump__f_NaCa = (pow(mParameters[2], 3) * mParameters[3] * exp(0.012999999999999999 * var_chaste_interface__membrane__V) - pow(mParameters[5], 3) * mParameters[0] * exp(-0.024 * var_chaste_interface__membrane__V)) / ((1.0 + 0.10000000000000001 * exp(-0.024 * var_chaste_interface__membrane__V)) * (669921.875 + pow(mParameters[5], 3)) * (1.3799999999999999 + mParameters[3])); // dimensionless
        const double var_sodium_calcium_pump__g_NaCa = 1000.0; // nanoS_per_picoF
        const double var_sodium_calcium_pump__i_NaCa = var_sodium_calcium_pump__f_NaCa * var_sodium_calcium_pump__g_NaCa; // picoA_per_picoF
        const double var_sodium_current__E_Na = var_membrane__R * var_membrane__T * log(mParameters[5] / mParameters[2]) / var_membrane__F; // millivolt
        const double var_sodium_background_current__i_b_Na = (-var_sodium_current__E_Na + var_chaste_interface__membrane__V) * var_sodium_background_current__g_b_Na; // picoA_per_picoF
        const double var_sodium_current__i_Na = pow(var_chaste_interface__sodium_current_m_gate__m, 3) * pow(var_chaste_interface__sodium_current_v_gate__v, 2) * (-var_sodium_current__E_Na + var_chaste_interface__membrane__V) * mParameters[8]; // picoA_per_picoF
        const double var_sodium_potassium_pump__f_NaK_a = mParameters[4] / ((1.0 + 31.622776601683793 * pow((1 / mParameters[2]), 1.5)) * (1.5 + mParameters[4])); // dimensionless
        const double var_sodium_potassium_pump__g_NaK = 1.3; // nanoS_per_picoF
        const double var_sodium_potassium_pump__sigma = -0.14280000000000001 + 0.14280000000000001 * exp(0.01485884101040119 * mParameters[5]); // dimensionless
        const double var_sodium_potassium_pump__f_NaK = 1 / (1.0 + 0.1245 * exp(-0.0037000000000000002 * var_chaste_interface__membrane__V) + 0.036499999999999998 * var_sodium_potassium_pump__sigma * exp(-0.036999999999999998 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_sodium_potassium_pump__i_NaK = var_sodium_potassium_pump__f_NaK * var_sodium_potassium_pump__f_NaK_a * var_sodium_potassium_pump__g_NaK; // picoA_per_picoF
        const double var_stimulus_protocol__i_stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_stimulus_protocol__i_stim = var_stimulus_protocol__i_stim_converted / HeartConfig::Instance()->GetCapacitance(); // picoA_per_picoF
        const double var_transient_outward_current__E_to = var_membrane__R * var_membrane__T * log((mParameters[4] + 0.042999999999999997 * mParameters[5]) / (mParameters[1] + 0.042999999999999997 * mParameters[2])) / var_membrane__F; // millivolt
        const double var_transient_outward_current__g_to = 0.40000000000000002; // nanoS_per_picoF
        const double var_transient_outward_current_r_gate__alpha_r = 0.52659999999999996 * exp(0.70203392000000009 - 0.0166 * var_chaste_interface__membrane__V) / (1.0 + exp(3.9880601600000003 - 0.094299999999999995 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_transient_outward_current_r_gate__beta_r = (0.51490000000000002 * exp(0.67236288 - 0.13439999999999999 * var_chaste_interface__membrane__V) + 5.1860000000000002e-5 * var_chaste_interface__membrane__V) / (1.0 + exp(6.9907280000000006e-6 - 0.1348 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_transient_outward_current_r_gate__r_infinity = var_transient_outward_current_r_gate__alpha_r / (var_transient_outward_current_r_gate__alpha_r + var_transient_outward_current_r_gate__beta_r); // dimensionless
        const double var_transient_outward_current__i_to = (-var_transient_outward_current__E_to + var_chaste_interface__membrane__V) * var_transient_outward_current__g_to * var_transient_outward_current_r_gate__r_infinity * var_chaste_interface__transient_outward_current_to_gate__to; // picoA_per_picoF
        d_dt_chaste_interface_var_membrane__V = (-var_calcium_background_current__i_b_Ca - var_calcium_current__i_Ca - var_delayed_rectifier_potassium_current__i_K - var_inward_rectifier_potassium_current__i_K1 - var_sodium_background_current__i_b_Na - var_sodium_calcium_pump__i_NaCa - var_sodium_current__i_Na - var_sodium_potassium_pump__i_NaK - var_stimulus_protocol__i_stim - var_transient_outward_current__i_to) / mParameters[7]; // millivolt / millisecond

        return d_dt_chaste_interface_var_membrane__V;
    }

    double Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::EvaluatePartialDerivative0(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -90.2
            double var_chaste_interface__sodium_current_m_gate__m = rY[1];
            // Units: dimensionless; Initial value: 0.0016203
            double var_chaste_interface__sodium_current_v_gate__v = rY[2];
            // Units: dimensionless; Initial value: 0.9944036
            double var_chaste_interface__calcium_current_f_gate__f = rY[3];
            // Units: dimensionless; Initial value: 1.0
            double var_chaste_interface__transient_outward_current_to_gate__to = rY[4];
            // Units: dimensionless; Initial value: 0.0
            double var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X = rY[5];
            // Units: dimensionless; Initial value: 0.000928836
            

            const double var_x0 = 1 / mParameters[7];
            const double var_x1 = pow(var_chaste_interface__sodium_current_m_gate__m, 3);
            const double var_x2 = pow(var_chaste_interface__sodium_current_v_gate__v, 2) * mParameters[8];
            const double var_x3 = log(mParameters[4] / mParameters[1]);
            const double var_x4 = exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 1.5967824874799939 * var_x3);
            const double var_x5 = 1.0 + var_x4;
            const double var_x6 = 0.10000000000000001 / var_x5;
            const double var_x7 = exp(13.306520728999949 * var_x3 - 0.5 * var_chaste_interface__membrane__V);
            const double var_x8 = 1.0 + var_x7;
            const double var_x9 = 1 / var_x8;
            const double var_x10 = exp(0.02 + 0.00020000000000000001 * var_chaste_interface__membrane__V - 0.0053226082915999798 * var_x3);
            const double var_x11 = 0.10000000000000001 * var_chaste_interface__membrane__V;
            const double var_x12 = exp(-1.0 + var_x11 - 2.6613041457999898 * var_x3);
            const double var_x13 = var_x12 + 3.0 * var_x10;
            const double var_x14 = var_x6 + var_x13 * var_x9;
            const double var_x15 = mParameters[9] / var_x14;
            const double var_x16 = exp(-0.024 * var_chaste_interface__membrane__V);
            const double var_x17 = 1.0 + 0.10000000000000001 * var_x16;
            const double var_x18 = pow(mParameters[5], 3);
            const double var_x19 = var_x16 * var_x18 * mParameters[0];
            const double var_x20 = pow(mParameters[2], 3) * mParameters[3] * exp(0.012999999999999999 * var_chaste_interface__membrane__V);
            const double var_x21 = 1 / ((669921.875 + var_x18) * (1.3799999999999999 + mParameters[3]));
            const double var_x22 = exp(3.9880601600000003 - 0.094299999999999995 * var_chaste_interface__membrane__V);
            const double var_x23 = 1.0 + var_x22;
            const double var_x24 = exp(0.70203392000000009 - 0.0166 * var_chaste_interface__membrane__V);
            const double var_x25 = var_x24 / var_x23;
            const double var_x26 = exp(6.9907280000000006e-6 - 0.1348 * var_chaste_interface__membrane__V);
            const double var_x27 = 1.0 + var_x26;
            const double var_x28 = 1 / var_x27;
            const double var_x29 = exp(0.67236288 - 0.13439999999999999 * var_chaste_interface__membrane__V);
            const double var_x30 = 0.51490000000000002 * var_x29 + 5.1860000000000002e-5 * var_chaste_interface__membrane__V;
            const double var_x31 = 0.52659999999999996 * var_x25 + var_x28 * var_x30;
            const double var_x32 = 1 / var_x31;
            const double var_x33 = var_x32 * var_chaste_interface__transient_outward_current_to_gate__to;
            const double var_x34 = var_x25 * var_x33;
            const double var_x35 = -26.613041457999898 * var_x3 + var_chaste_interface__membrane__V;
            const double var_x36 = 0.0060000000000000001 * var_x4 / pow(var_x5, 2);
            const double var_x37 = -26.613041457999898 * log((mParameters[4] + 0.042999999999999997 * mParameters[5]) / (mParameters[1] + 0.042999999999999997 * mParameters[2])) + var_chaste_interface__membrane__V;
            const double var_x38 = 1 / mParameters[2];
            const double var_x39 = exp(-0.0037000000000000002 * var_chaste_interface__membrane__V);
            const double var_x40 = exp(0.01485884101040119 * mParameters[5]);
            const double var_x41 = exp(-0.036999999999999998 * var_chaste_interface__membrane__V);
            const double var_x42 = 1 / (1.0 + 1666.6666666666667 * mParameters[0]);
            const double var_x43 = var_x42 * mParameters[6] * var_chaste_interface__calcium_current_f_gate__f;
            const double var_x44 = 1 / sqrt(M_PI);
            const double var_x45 = var_x44 * exp(-0.89850709360569092 * pow((-1 + 0.044722719141323794 * var_chaste_interface__membrane__V), 2));
            const double var_x46 = 0.63503954329583223 * var_x45;
            const double var_x47 = var_x44 * exp(-0.088183122039937209 * pow((-1 + 0.15948963317384371 * var_chaste_interface__membrane__V), 2));
            const double var_x48 = 0.25101580310038191 * var_x47;
            const double var_x49 = 1 / (0.14710000000000001 + var_x46 - var_x48);
            const double var_x50 = var_x46 * var_x49;
            const double var_x51 = var_x22 * var_x24 / pow(var_x23, 2);
            const double var_x52 = 0.21063999999999999 * var_x25 * var_x37;
            const double var_x53 = var_x46 * (0.080367360787628891 - 0.0035942469046345658 * var_chaste_interface__membrane__V);
            const double var_x54 = -13.306520728999949 * log(mParameters[3] / mParameters[0]) + var_chaste_interface__membrane__V;
            const double var_x55 = var_x43 * var_x54;
            
            partialF = var_x0 * (-0.0018500000000000001 - 0.019 * pow(var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X, 2) - 0.21063999999999999 * var_x34 - var_x1 * var_x2 - var_x15 * var_x6 - var_x43 * var_x50 + 0.0034966239999999998 * var_x34 * var_x37 + var_x15 * var_x35 * var_x36 - var_x49 * var_x53 * var_x55 - 1000.0 * var_x21 * (0.024 * var_x19 + 0.012999999999999999 * var_x20) / var_x17 - 0.019863351999999997 * var_x33 * var_x37 * var_x51 - var_x52 * (0.0087415599999999989 * var_x25 - 0.049658379999999995 * var_x51 - var_x28 * (5.1860000000000002e-5 - 0.069202559999999996 * var_x29) - 0.1348 * var_x26 * var_x30 / pow(var_x27, 2)) * var_chaste_interface__transient_outward_current_to_gate__to / pow(var_x31, 2) - 2.4000000000000004 * var_x16 * var_x21 * (var_x20 - var_x19) / pow(var_x17, 2) - 1.5747050881430724 * var_x45 * var_x55 * (-var_x53 + var_x48 * (0.028128587572547752 - 0.0044862181136439798 * var_chaste_interface__membrane__V)) / pow((0.23163911846584595 + var_x45 - 0.39527586234649098 * var_x47), 2) - var_x35 * var_x6 * (var_x36 - var_x9 * (0.10000000000000001 * var_x12 + 0.00060000000000000006 * var_x10) - 0.5 * var_x13 * var_x7 / pow(var_x8, 2)) * mParameters[9] / pow(var_x14, 2) - 1.3 * (0.00046065 * var_x39 + 0.036999999999999998 * var_x41 * (-0.0052122000000000002 + 0.0052122000000000002 * var_x40)) * mParameters[4] / ((1.0 + 31.622776601683793 * pow(var_x38, 1.5)) * (1.5 + mParameters[4]) * pow((1.0 + 0.1245 * var_x39 + 0.036499999999999998 * var_x41 * (-0.14280000000000001 + 0.14280000000000001 * var_x40)), 2)));
        }
        else
        {
            const double y_save = rY[0];
            rY[0] += delta;
            const double temp = EvaluateYDerivative0(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[0])/delta;
            rY[0] = y_save;
        }
        return partialF;
    }
    double Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::EvaluateYDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90.2
        double var_chaste_interface__sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.0016203
        

        // Mathematics
        const double var_sodium_current_m_gate__alpha_m = ((fabs(47.130000000000003 + var_chaste_interface__membrane__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__V)))); // per_millisecond
        const double var_sodium_current_m_gate__beta_m = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__membrane__V); // per_millisecond
        const double d_dt_chaste_interface_var_sodium_current_m_gate__m = (1.0 - var_chaste_interface__sodium_current_m_gate__m) * var_sodium_current_m_gate__alpha_m - var_sodium_current_m_gate__beta_m * var_chaste_interface__sodium_current_m_gate__m; // 1 / millisecond

        return d_dt_chaste_interface_var_sodium_current_m_gate__m;
    }

    double Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::EvaluatePartialDerivative1(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -90.2
            

            const double var_x11 = 0.10000000000000001 * var_chaste_interface__membrane__V;
            const double var_x57 = 1 / (1.0 - exp(1.0000000000287557e-7));
            const double var_x58 = 1 / (1.0 - exp(-1.0000000000287557e-7));
            const double var_x59 = 47.130000000000003 + var_chaste_interface__membrane__V;
            const double var_x60 = fabs(var_x59) < 1.0000000000287557e-6;
            const double var_x61 = exp(-4.7130000000000001 - var_x11);
            const double var_x62 = 1.0 - var_x61;
            const double var_x63 = 0.32000000000000001 / var_x62;
            const double var_x64 = exp(-0.090909090909090912 * var_chaste_interface__membrane__V);
            const double var_x65 = 3.200000000092018e-7 * var_x58;
            
            partialF = -((var_x60) ? (var_x65 - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__V) * (-var_x65 - 3.200000000092018e-7 * var_x57)) : (var_x59 * var_x63)) - 0.080000000000000002 * var_x64;
        }
        else
        {
            const double y_save = rY[1];
            rY[1] += delta;
            const double temp = EvaluateYDerivative1(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[1])/delta;
            rY[1] = y_save;
        }
        return partialF;
    }
    double Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::EvaluateYDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90.2
        double var_chaste_interface__sodium_current_v_gate__v = rY[2];
        // Units: dimensionless; Initial value: 0.9944036
        

        // Mathematics
        const double var_sodium_current_v_gate__tau_v = 0.25 + 2.2400000000000002 * (1.0 - tanh(7.7400000000000002 + 0.12 * var_chaste_interface__membrane__V)) / (1.0 - tanh(6.4680000000000009 + 0.070000000000000007 * var_chaste_interface__membrane__V)); // millisecond
        const double var_sodium_current_v_gate__v_infinity = 0.5 - 0.5 * tanh(7.7400000000000002 + 0.12 * var_chaste_interface__membrane__V); // dimensionless
        const double d_dt_chaste_interface_var_sodium_current_v_gate__v = (-var_chaste_interface__sodium_current_v_gate__v + var_sodium_current_v_gate__v_infinity) / var_sodium_current_v_gate__tau_v; // 1 / millisecond

        return d_dt_chaste_interface_var_sodium_current_v_gate__v;
    }

    double Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::EvaluatePartialDerivative2(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -90.2
            

            const double var_x66 = tanh(6.4680000000000009 + 0.070000000000000007 * var_chaste_interface__membrane__V);
            const double var_x67 = 1.0 - var_x66;
            const double var_x68 = 1 / var_x67;
            const double var_x69 = tanh(7.7400000000000002 + 0.12 * var_chaste_interface__membrane__V);
            const double var_x70 = 1.0 - var_x69;
            const double var_x71 = var_x68 * var_x70;
            const double var_x72 = 1 / (0.25 + 2.2400000000000002 * var_x71);
            
            partialF = -var_x72;
        }
        else
        {
            const double y_save = rY[2];
            rY[2] += delta;
            const double temp = EvaluateYDerivative2(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[2])/delta;
            rY[2] = y_save;
        }
        return partialF;
    }
    double Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::EvaluateYDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90.2
        double var_chaste_interface__calcium_current_f_gate__f = rY[3];
        // Units: dimensionless; Initial value: 1.0
        

        // Mathematics
        const double var_calcium_current_f_gate__alpha_f = 0.0068700000000000002 / (1.0 + exp(-1.0056535947712419 + 0.16339869281045752 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_calcium_current_f_gate__beta_f = 0.00057499999999999999 + (0.010999999999999999 + 0.069000000000000006 * exp(-108.07499999999999 - 11.0 * var_chaste_interface__membrane__V)) / (1.0 + exp(-2.7313499999999999 - 0.27800000000000002 * var_chaste_interface__membrane__V)); // per_millisecond
        const double d_dt_chaste_interface_var_calcium_current_f_gate__f = (1.0 - var_chaste_interface__calcium_current_f_gate__f) * var_calcium_current_f_gate__alpha_f - var_calcium_current_f_gate__beta_f * var_chaste_interface__calcium_current_f_gate__f; // 1 / millisecond

        return d_dt_chaste_interface_var_calcium_current_f_gate__f;
    }

    double Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::EvaluatePartialDerivative3(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -90.2
            

            const double var_x74 = exp(-2.7313499999999999 - 0.27800000000000002 * var_chaste_interface__membrane__V);
            const double var_x75 = 1.0 + var_x74;
            const double var_x76 = 1 / var_x75;
            const double var_x77 = exp(-108.07499999999999 - 11.0 * var_chaste_interface__membrane__V);
            const double var_x78 = 0.010999999999999999 + 0.069000000000000006 * var_x77;
            const double var_x79 = exp(-1.0056535947712419 + 0.16339869281045752 * var_chaste_interface__membrane__V);
            const double var_x80 = 1.0 + var_x79;
            
            partialF = -0.00057499999999999999 - 0.0068700000000000002 / var_x80 - var_x76 * var_x78;
        }
        else
        {
            const double y_save = rY[3];
            rY[3] += delta;
            const double temp = EvaluateYDerivative3(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[3])/delta;
            rY[3] = y_save;
        }
        return partialF;
    }
    double Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::EvaluateYDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90.2
        double var_chaste_interface__transient_outward_current_to_gate__to = rY[4];
        // Units: dimensionless; Initial value: 0.0
        

        // Mathematics
        const double var_transient_outward_current_to_gate__alpha_to = (5.6119999999999998e-5 * var_chaste_interface__membrane__V + 0.072099999999999997 * exp(-5.9257863000000004 - 0.17299999999999999 * var_chaste_interface__membrane__V)) / (1.0 + exp(-5.9326369200000002 - 0.17319999999999999 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_transient_outward_current_to_gate__beta_to = (0.0001215 * var_chaste_interface__membrane__V + 0.076700000000000004 * exp(-5.6479010000000002e-8 - 1.6600000000000001e-9 * var_chaste_interface__membrane__V)) / (1.0 + exp(-5.4573693999999993 - 0.16039999999999999 * var_chaste_interface__membrane__V)); // per_millisecond
        const double d_dt_chaste_interface_var_transient_outward_current_to_gate__to = (1.0 - var_chaste_interface__transient_outward_current_to_gate__to) * var_transient_outward_current_to_gate__alpha_to - var_transient_outward_current_to_gate__beta_to * var_chaste_interface__transient_outward_current_to_gate__to; // 1 / millisecond

        return d_dt_chaste_interface_var_transient_outward_current_to_gate__to;
    }

    double Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::EvaluatePartialDerivative4(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -90.2
            

            const double var_x81 = exp(-5.9326369200000002 - 0.17319999999999999 * var_chaste_interface__membrane__V);
            const double var_x82 = 1.0 + var_x81;
            const double var_x83 = 1 / var_x82;
            const double var_x85 = exp(-5.9257863000000004 - 0.17299999999999999 * var_chaste_interface__membrane__V);
            const double var_x86 = exp(-5.4573693999999993 - 0.16039999999999999 * var_chaste_interface__membrane__V);
            const double var_x87 = 1.0 + var_x86;
            const double var_x88 = 1 / var_x87;
            const double var_x89 = exp(-5.6479010000000002e-8 - 1.6600000000000001e-9 * var_chaste_interface__membrane__V);
            const double var_x90 = 5.6119999999999998e-5 * var_chaste_interface__membrane__V + 0.072099999999999997 * var_x85;
            const double var_x91 = 0.0001215 * var_chaste_interface__membrane__V + 0.076700000000000004 * var_x89;
            
            partialF = -var_x83 * var_x90 - var_x88 * var_x91;
        }
        else
        {
            const double y_save = rY[4];
            rY[4] += delta;
            const double temp = EvaluateYDerivative4(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[4])/delta;
            rY[4] = y_save;
        }
        return partialF;
    }
    double Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::EvaluateYDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90.2
        double var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X = rY[5];
        // Units: dimensionless; Initial value: 0.000928836
        

        // Mathematics
        const double var_delayed_rectifier_potassium_current_X_gate__X_infinity = 0.98799999999999999 / (1.0 + exp(-0.86099999999999999 - 0.062 * var_chaste_interface__membrane__V)); // dimensionless
        const double var_delayed_rectifier_potassium_current_X_gate__tau_X_a = 40.0 - 40.0 * tanh(160.0 + 2.0 * var_chaste_interface__membrane__V); // millisecond
        const double var_delayed_rectifier_potassium_current_X_gate__tau_X = 182.0 + 240.0 * exp(-4.1682692307692308 * pow((1 + 0.039215686274509803 * var_chaste_interface__membrane__V), 2)) + 182.0 * tanh(0.154 + 0.011599999999999999 * var_chaste_interface__membrane__V) + var_delayed_rectifier_potassium_current_X_gate__tau_X_a; // millisecond
        const double d_dt_chaste_interface_var_delayed_rectifier_potassium_current_X_gate__X = (-var_chaste_interface__delayed_rectifier_potassium_current_X_gate__X + var_delayed_rectifier_potassium_current_X_gate__X_infinity) / var_delayed_rectifier_potassium_current_X_gate__tau_X; // 1 / millisecond

        return d_dt_chaste_interface_var_delayed_rectifier_potassium_current_X_gate__X;
    }

    double Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::EvaluatePartialDerivative5(double var_chaste_interface__environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: millivolt; Initial value: -90.2
            

            const double var_x94 = exp(-4.1682692307692308 * pow((1 + 0.039215686274509803 * var_chaste_interface__membrane__V), 2));
            const double var_x95 = 240.0 * var_x94;
            const double var_x96 = tanh(0.154 + 0.011599999999999999 * var_chaste_interface__membrane__V);
            const double var_x97 = tanh(160.0 + 2.0 * var_chaste_interface__membrane__V);
            const double var_x98 = 1 / (222.0 + var_x95 + 182.0 * var_x96 - 40.0 * var_x97);
            
            partialF = -var_x98;
        }
        else
        {
            const double y_save = rY[5];
            rY[5] += delta;
            const double temp = EvaluateYDerivative5(var_chaste_interface__environment__time, rY);
            partialF = (temp-mEvalF[5])/delta;
            rY[5] = y_save;
        }
        return partialF;
    }

    std::vector<double> Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -90.2
        double var_chaste_interface__sodium_current_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.0016203
        double var_chaste_interface__sodium_current_v_gate__v = rY[2];
        // Units: dimensionless; Initial value: 0.9944036
        double var_chaste_interface__calcium_current_f_gate__f = rY[3];
        // Units: dimensionless; Initial value: 1.0
        
        // Mathematics
        const double var_calcium_current_f_Ca_gate__f_Ca = 1 / (1.0 + 1666.6666666666667 * mParameters[0]); // dimensionless
        const double var_membrane__Cm_converted = 9.9999999999999995e-7 * mParameters[7]; // uF
        const double var_membrane__F = 96845.0; // coulomb_per_mole
        const double var_membrane__R = 8314.0; // millijoule_per_mole_kelvin
        const double var_membrane__T = 310.0; // kelvin
        const double var_calcium_current__E_Ca = 0.5 * var_membrane__R * var_membrane__T * log(mParameters[3] / mParameters[0]) / var_membrane__F; // millivolt
        const double var_delayed_rectifier_potassium_current__E_K = var_membrane__R * var_membrane__T * log(mParameters[4] / mParameters[1]) / var_membrane__F; // millivolt
        const double var_calcium_current_d_gate__alpha_d = 0.63503954329583223 * exp(-0.89850709360569092 * pow((-1 + 0.044722719141323794 * var_chaste_interface__membrane__V), 2)) / sqrt(M_PI); // per_millisecond
        const double var_calcium_current_d_gate__beta_d = 0.14710000000000001 - 0.25101580310038191 * exp(-0.088183122039937209 * pow((-1 + 0.15948963317384371 * var_chaste_interface__membrane__V), 2)) / sqrt(M_PI); // per_millisecond
        const double var_calcium_current_d_gate__d_infinity = var_calcium_current_d_gate__alpha_d / (var_calcium_current_d_gate__alpha_d + var_calcium_current_d_gate__beta_d); // dimensionless
        const double var_calcium_current__i_Ca = (-var_calcium_current__E_Ca + var_chaste_interface__membrane__V) * mParameters[6] * var_calcium_current_d_gate__d_infinity * var_calcium_current_f_Ca_gate__f_Ca * var_chaste_interface__calcium_current_f_gate__f; // picoA_per_picoF
        const double var_calcium_current__i_Ca_converted = HeartConfig::Instance()->GetCapacitance() * var_calcium_current__i_Ca; // uA_per_cm2
        const double var_inward_rectifier_potassium_current_K1_gate__alpha_K1 = 0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__membrane__V - 0.059999999999999998 * var_delayed_rectifier_potassium_current__E_K)); // per_millisecond
        const double var_inward_rectifier_potassium_current_K1_gate__beta_K1 = (3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__membrane__V - 0.00020000000000000001 * var_delayed_rectifier_potassium_current__E_K) + exp(-1.0 + 0.10000000000000001 * var_chaste_interface__membrane__V - 0.10000000000000001 * var_delayed_rectifier_potassium_current__E_K)) / (1.0 + exp(0.5 * var_delayed_rectifier_potassium_current__E_K - 0.5 * var_chaste_interface__membrane__V)); // per_millisecond
        const double var_inward_rectifier_potassium_current_K1_gate__K1_infinity = var_inward_rectifier_potassium_current_K1_gate__alpha_K1 / (var_inward_rectifier_potassium_current_K1_gate__alpha_K1 + var_inward_rectifier_potassium_current_K1_gate__beta_K1); // dimensionless
        const double var_inward_rectifier_potassium_current__i_K1 = (-var_delayed_rectifier_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[9] * var_inward_rectifier_potassium_current_K1_gate__K1_infinity; // picoA_per_picoF
        const double var_inward_rectifier_potassium_current__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_inward_rectifier_potassium_current__i_K1; // uA_per_cm2
        const double var_sodium_current__E_Na = var_membrane__R * var_membrane__T * log(mParameters[5] / mParameters[2]) / var_membrane__F; // millivolt
        const double var_sodium_current__i_Na = pow(var_chaste_interface__sodium_current_m_gate__m, 3) * pow(var_chaste_interface__sodium_current_v_gate__v, 2) * (-var_sodium_current__E_Na + var_chaste_interface__membrane__V) * mParameters[8]; // picoA_per_picoF
        const double var_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_sodium_current__i_Na; // uA_per_cm2
        const double var_stimulus_protocol__i_stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2

        std::vector<double> dqs(6);
        dqs[0] = var_calcium_current__i_Ca_converted;
        dqs[1] = var_membrane__Cm_converted;
        dqs[2] = var_sodium_current__i_Na_converted;
        dqs[3] = var_inward_rectifier_potassium_current__i_K1_converted;
        dqs[4] = var_stimulus_protocol__i_stim_converted;
        dqs[5] = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1>::Initialise(void)
{
    this->mSystemName = "bernus_wilders_zemlin_verschelde_panfilov_2002_version01";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-90.2);

    // rY[1]:
    this->mVariableNames.push_back("sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0016203);

    // rY[2]:
    this->mVariableNames.push_back("sodium_current_v_gate__v");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9944036);

    // rY[3]:
    this->mVariableNames.push_back("membrane_L_type_calcium_current_f_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[4]:
    this->mVariableNames.push_back("transient_outward_current_to_gate__to");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[5]:
    this->mVariableNames.push_back("delayed_rectifier_potassium_current_X_gate__X");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000928836);

    // mParameters[0]:
    this->mParameterNames.push_back("cytosolic_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[1]:
    this->mParameterNames.push_back("cytosolic_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[2]:
    this->mParameterNames.push_back("cytosolic_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[4]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[5]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane__Cm");
    this->mParameterUnits.push_back("picoF");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_capacitance");
    this->mDerivedQuantityUnits.push_back("uF");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellbernus_wilders_zemlin_verschelde_panfilov_2002FromCellMLGRL1)

