//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: davies_isap_2012
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: GeneralizedRushLarsenFirstOrder)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "davies_isap_2012.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"



    boost::shared_ptr<RegularStimulus> Celldavies_isap_2012FromCellMLGRL1::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 1.0; // ms
        const double var_chaste_interface__cell__stim_offset = 0; // ms
        const double var_chaste_interface__cell__stim_period = 1000.0; // ms
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Celldavies_isap_2012FromCellMLGRL1::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Celldavies_isap_2012FromCellMLGRL1::Celldavies_isap_2012FromCellMLGRL1(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractGeneralizedRushLarsenCardiacCell(
                29,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Celldavies_isap_2012FromCellMLGRL1>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 1.8; // (var_Environment__Ca_o) [mM]
        this->mParameters[1] = 154.59999999999999; // (var_Environment__Cl_o) [mM]
        this->mParameters[2] = 4.0; // (var_Environment__K_o) [mM]
        this->mParameters[3] = 150.0; // (var_Environment__Na_o) [mM]
        this->mParameters[4] = 0.000243; // (var_ICaL__pca) [L_per_F_ms]
        this->mParameters[5] = 10.0; // (var_ICaL__tau_pow_calcium) [ms]
        this->mParameters[6] = 7.9803360000000004e-7; // (var_ICab__GCab) [L_per_F_ms]
        this->mParameters[7] = 0.00022499999999999999; // (var_IClb__GClb) [mS_per_uF]
        this->mParameters[8] = 0.057500000000000002; // (var_IpCa__ibarpca) [uA_per_uF]
        this->mParameters[9] = 8.25; // (var_INa__GNa) [mS_per_uF]
        this->mParameters[10] = 0.5; // (var_IK1__GK1) [mS_per_uF]
        this->mParameters[11] = 0.010999999999999999; // (var_INal__GNaL) [mS_per_uF]
        this->mParameters[12] = 0.0027599999999999999; // (var_IKp__GKp) [mS_per_uF]
        this->mParameters[13] = 0.013854200000000001; // (var_IKr__GKrMax) [mS_per_uF]
        this->mParameters[14] = 0.0074692500000000002; // (var_IKs__gks_max) [mS_per_uF]
        this->mParameters[15] = 5.8499999999999996; // (var_INaCa__NCXmax) [uA_per_uF]
        this->mParameters[16] = 0.61875000000000002; // (var_INaK__ibarnak) [uA_per_uF]
        this->mParameters[17] = 3.9999999999999998e-7; // (var_Ito2__PCl) [L_per_F_ms]
        this->mParameters[18] = 0.18049999999999999; // (var_Ito__gitodv) [mS_per_uF]
        this->mParameters[19] = 300.0; // (var_Ito__Cto) [mV]
    }

    Celldavies_isap_2012FromCellMLGRL1::~Celldavies_isap_2012FromCellMLGRL1()
    {
    }

    
    double Celldavies_isap_2012FromCellMLGRL1::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.000223768331231758
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.99765453819431
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.998157020148849
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 5.38067794749339e-07
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.99805432294836
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999986839648304
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.961568137796573
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.854261813196152
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.989081601403786
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.255981702631947
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.0147449166757808
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.0147504787196957
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.00894974857468432
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.999992183094244
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.787996527242362
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.0014969201082975
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.488129650338831
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 17.9964119779802
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 134.555737634453
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 20.1543792471096
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.000225131045297696
        
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_IKr__gkr = 0.5 * sqrt(mParameters[2]) * mParameters[13]; // mS_per_uF
        const double var_IKs__gks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[14]; // mS_per_uF
        const double var_INa__gNa = pow(var_chaste_interface__INa__m, 3) * mParameters[9] * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // mS_per_uF
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__allo = 1 / (1.0 + pow(var_INaCa__KmCa, 2) / pow(var_INaCa__ca_i_NaCa, 2)); // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3]); // dimensionless
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * mParameters[8] / (var_chaste_interface__Ca__Ca_i + var_IpCa__kmpca); // uA_per_uF
        const double var_INaCa__denom2 = pow(var_INaCa__KmNao, 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_INaCa__ca_i_NaCa / var_INaCa__KmCai) * mParameters[0]; // mM4
        const double var_INaCa__denom3 = pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] + pow(mParameters[3], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[4] / (-1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICaL__ICaL = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca; // uA_per_uF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[6] * var_chaste_interface__cell__V / (-1.0 + exp(0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_IKr__r = 1 / (1.0 + 2.5 * exp(2.8000000000000003 + 0.10000000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaCa__denom1 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__num = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] * exp(var_Environment__FonRT * var_INaCa__eta * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__INaCa = mParameters[15] * var_INaCa__allo * var_INaCa__num / ((var_INaCa__denom2 + var_INaCa__denom3) * var_INaCa__denom1); // uA_per_uF
        const double var_INaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_Environment__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaK__INaK = mParameters[2] * var_INaK__fnak * mParameters[16] / ((1.0 + pow(var_INaK__kmnai, 2) / pow(var_chaste_interface__Na__Na_i, 2)) * (mParameters[2] + var_INaK__kmko)); // uA_per_uF
        const double var_Ito__rv = ((var_chaste_interface__cell__V <= 0) ? (exp(var_chaste_interface__cell__V / mParameters[19])) : (1.0)); // dimensionless
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (0.0096484999999999991 * (-mParameters[1] * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-mParameters[1] * exp(0.0374358835078 * var_chaste_interface__cell__V) + var_chaste_interface__Cl__Cl_i) * mParameters[17] * var_chaste_interface__cell__V / (1.0 - exp(0.0374358835078 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_chaste_interface__Ito2__AA * var_Ito2__Ito2_max; // uA_per_uF
        const double var_cell__caiont = -2.0 * var_INaCa__INaCa + var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa; // uA_per_uF
        const double var_cell__i_Stim = 0.0; // uA_per_uF
        const double var_reversal_potentials__ECl = -log(mParameters[1] / var_chaste_interface__Cl__Cl_i) / var_Environment__FonRT; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__cell__V) * mParameters[7]; // uA_per_uF
        const double var_cell__clont = 0.5 * var_cell__i_Stim + var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
        const double var_reversal_potentials__EK = log(mParameters[2] / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)); // per_ms
        const double var_IK1__bk1 = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__IK1 = 0.5 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[10] * var_IK1__ak1 / (var_IK1__ak1 + var_IK1__bk1); // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[12] / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKr__gkr * var_IKr__r * var_chaste_interface__IKr__xr; // uA_per_uF
        const double var_Ito__Ito = pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[18] * var_Ito__rv * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv; // uA_per_uF
        const double var_reversal_potentials__ENa = log(mParameters[3] / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__INa = (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INa__gNa; // uA_per_uF
        const double var_INal__INal = pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * mParameters[11] * var_chaste_interface__INal__hL; // uA_per_uF
        const double var_cell__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + var_INa__INa + var_INal__INal; // uA_per_uF
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((mParameters[3] * var_reversal_potentials__prnak + mParameters[2]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_Environment__FonRT; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__cell__V) * var_IKs__gks * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_uF
        const double var_cell__kiont = 0.5 * var_cell__i_Stim - 2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito__Ito; // uA_per_uF
        const double var_chaste_interface__i_ionic = (var_cell__caiont + var_cell__clont + var_cell__kiont + var_cell__naiont) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Celldavies_isap_2012FromCellMLGRL1::UpdateTransmembranePotential(double var_chaste_interface__Environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        unsigned v_index = GetVoltageIndex();
        const double delta = 1e-8;

        double d_dt_chaste_interface_var_cell__V;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.000223768331231758
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.99765453819431
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.998157020148849
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 5.38067794749339e-07
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.99805432294836
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999986839648304
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.961568137796573
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.854261813196152
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.989081601403786
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.255981702631947
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.0147449166757808
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.0147504787196957
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.00894974857468432
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.999992183094244
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.787996527242362
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.0014969201082975
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.488129650338831
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 17.9964119779802
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 134.555737634453
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 20.1543792471096
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.000225131045297696
        

        // Mathematics
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_IKr__gkr = 0.5 * sqrt(mParameters[2]) * mParameters[13]; // mS_per_uF
        const double var_IKs__gks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[14]; // mS_per_uF
        const double var_INa__gNa = pow(var_chaste_interface__INa__m, 3) * mParameters[9] * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // mS_per_uF
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__allo = 1 / (1.0 + pow(var_INaCa__KmCa, 2) / pow(var_INaCa__ca_i_NaCa, 2)); // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3]); // dimensionless
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * mParameters[8] / (var_chaste_interface__Ca__Ca_i + var_IpCa__kmpca); // uA_per_uF
        const double var_INaCa__denom2 = pow(var_INaCa__KmNao, 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_INaCa__ca_i_NaCa / var_INaCa__KmCai) * mParameters[0]; // mM4
        const double var_INaCa__denom3 = pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] + pow(mParameters[3], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[4] / (-1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICaL__ICaL = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca; // uA_per_uF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[6] * var_chaste_interface__cell__V / (-1.0 + exp(0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_IKr__r = 1 / (1.0 + 2.5 * exp(2.8000000000000003 + 0.10000000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaCa__denom1 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__num = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] * exp(var_Environment__FonRT * var_INaCa__eta * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__INaCa = mParameters[15] * var_INaCa__allo * var_INaCa__num / ((var_INaCa__denom2 + var_INaCa__denom3) * var_INaCa__denom1); // uA_per_uF
        const double var_INaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_Environment__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaK__INaK = mParameters[2] * var_INaK__fnak * mParameters[16] / ((1.0 + pow(var_INaK__kmnai, 2) / pow(var_chaste_interface__Na__Na_i, 2)) * (mParameters[2] + var_INaK__kmko)); // uA_per_uF
        const double var_Ito__rv = ((var_chaste_interface__cell__V <= 0) ? (exp(var_chaste_interface__cell__V / mParameters[19])) : (1.0)); // dimensionless
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (0.0096484999999999991 * (-mParameters[1] * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-mParameters[1] * exp(0.0374358835078 * var_chaste_interface__cell__V) + var_chaste_interface__Cl__Cl_i) * mParameters[17] * var_chaste_interface__cell__V / (1.0 - exp(0.0374358835078 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_chaste_interface__Ito2__AA * var_Ito2__Ito2_max; // uA_per_uF
        const double var_cell__caiont = -2.0 * var_INaCa__INaCa + var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa; // uA_per_uF
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_reversal_potentials__ECl = -log(mParameters[1] / var_chaste_interface__Cl__Cl_i) / var_Environment__FonRT; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__cell__V) * mParameters[7]; // uA_per_uF
        const double var_cell__clont = 0.5 * var_cell__i_Stim + var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
        const double var_reversal_potentials__EK = log(mParameters[2] / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)); // per_ms
        const double var_IK1__bk1 = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__IK1 = 0.5 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[10] * var_IK1__ak1 / (var_IK1__ak1 + var_IK1__bk1); // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[12] / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKr__gkr * var_IKr__r * var_chaste_interface__IKr__xr; // uA_per_uF
        const double var_Ito__Ito = pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[18] * var_Ito__rv * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv; // uA_per_uF
        const double var_reversal_potentials__ENa = log(mParameters[3] / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__INa = (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INa__gNa; // uA_per_uF
        const double var_INal__INal = pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * mParameters[11] * var_chaste_interface__INal__hL; // uA_per_uF
        const double var_cell__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + var_INa__INa + var_INal__INal; // uA_per_uF
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((mParameters[3] * var_reversal_potentials__prnak + mParameters[2]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_Environment__FonRT; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__cell__V) * var_IKs__gks * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_uF
        const double var_cell__kiont = 0.5 * var_cell__i_Stim - 2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito__Ito; // uA_per_uF
        d_dt_chaste_interface_var_cell__V = -var_cell__caiont - var_cell__clont - var_cell__kiont - var_cell__naiont; // mV / ms

        double evalF = d_dt_chaste_interface_var_cell__V;
        mEvalF[0] = d_dt_chaste_interface_var_cell__V;
        double partialF = EvaluatePartialDerivative0(var_chaste_interface__Environment__time, rY, delta, true);
        if (fabs(partialF) < delta)
        {
            rY[v_index] += evalF*mDt;
        }
        else
        {
            rY[v_index] += (evalF/partialF)*(exp(partialF*mDt)-1.0);
        }
    }

    void Celldavies_isap_2012FromCellMLGRL1::ComputeOneStepExceptVoltage(double var_chaste_interface__Environment__time)
    {
        std::vector<double>& rY = rGetStateVariables();
        const double delta = 1e-8;

        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.000223768331231758
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.99765453819431
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.998157020148849
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 5.38067794749339e-07
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.99805432294836
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999986839648304
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.961568137796573
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.854261813196152
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.989081601403786
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.255981702631947
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.0147449166757808
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.0147504787196957
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.00894974857468432
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.999992183094244
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.787996527242362
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.0014969201082975
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.488129650338831
        double var_chaste_interface__Irel__CaMKtrap = rY[20];
        // Units: dimensionless; Initial value: 0.0971591072782679
        double var_chaste_interface__Irel__ro = rY[21];
        // Units: dimensionless; Initial value: -1.07543858779373e-32
        double var_chaste_interface__Irel__ri = rY[22];
        // Units: dimensionless; Initial value: 0.716604593002322
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 17.9964119779802
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 134.555737634453
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 20.1543792471096
        double var_chaste_interface__Ca__Ca_jsr = rY[26];
        // Units: mM; Initial value: 4.1270622547589
        double var_chaste_interface__Ca__Ca_nsr = rY[27];
        // Units: mM; Initial value: 4.14835141174613
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.000225131045297696
        

        // Mathematics
        const double var_Ca__BSLmax = 1.1240000000000001; // mM
        const double var_Ca__BSRmax = 0.047; // mM
        const double var_Ca__KmBSL = 0.0086999999999999994; // mM
        const double var_Ca__KmBSR = 0.00087000000000000001; // mM
        const double var_Ca__bss = 1 / (1.0 + var_Ca__BSLmax * var_Ca__KmBSL / pow((var_chaste_interface__Ca__Ca_ss + var_Ca__KmBSL), 2) + var_Ca__BSRmax * var_Ca__KmBSR / pow((var_chaste_interface__Ca__Ca_ss + var_Ca__KmBSR), 2)); // dimensionless
        const double var_Ca__cbar = 0.050000000000000003; // mM
        const double var_Ca__csqnbar = 10.0; // mM
        const double var_Ca__kmc = 0.0023800000000000002; // mM
        const double var_Ca__kmcsqn = 0.80000000000000004; // mM
        const double var_Ca__bcsqn = 1 / (1.0 + var_Ca__csqnbar * var_Ca__kmcsqn / pow((var_chaste_interface__Ca__Ca_jsr + var_Ca__kmcsqn), 2)); // dimensionless
        const double var_Ca__kmt = 0.00050000000000000001; // mM
        const double var_Ca__tbar = 0.070000000000000007; // mM
        const double var_Ca__bmyo = 1 / (1.0 + var_Ca__cbar * var_Ca__kmc / pow((var_chaste_interface__Ca__Ca_i + var_Ca__kmc), 2) + var_Ca__kmt * var_Ca__tbar / pow((var_chaste_interface__Ca__Ca_i + var_Ca__kmt), 2)); // dimensionless
        const double var_Environment__F = 96485.0; // C_per_mole
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_IKr__gkr = 0.5 * sqrt(mParameters[2]) * mParameters[13]; // mS_per_uF
        const double var_IKs__gks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[14]; // mS_per_uF
        const double var_INa__gNa = pow(var_chaste_interface__INa__m, 3) * mParameters[9] * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // mS_per_uF
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__allo = 1 / (1.0 + pow(var_INaCa__KmCa, 2) / pow(var_INaCa__ca_i_NaCa, 2)); // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3]); // dimensionless
        const double var_Idiff_Itr__idiff = 5.0 * var_chaste_interface__Ca__Ca_ss - 5.0 * var_chaste_interface__Ca__Ca_i; // mM_per_ms
        const double var_Idiff_Itr__itr = 0.0083333333333333332 * var_chaste_interface__Ca__Ca_nsr - 0.0083333333333333332 * var_chaste_interface__Ca__Ca_jsr; // mM_per_ms
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * mParameters[8] / (var_chaste_interface__Ca__Ca_i + var_IpCa__kmpca); // uA_per_uF
        const double var_Irel__CaMK0 = 0.050000000000000003; // dimensionless
        const double var_Irel__Km = 0.0015; // mM
        const double var_Irel__CaMKbound = (1.0 - var_chaste_interface__Irel__CaMKtrap) * var_Irel__CaMK0 / (1.0 + var_Irel__Km / var_chaste_interface__Ca__Ca_ss); // dimensionless
        const double var_Irel__CaMKactive = var_Irel__CaMKbound + var_chaste_interface__Irel__CaMKtrap; // dimensionless
        const double d_dt_chaste_interface_var_Irel__CaMKtrap = -0.00068000000000000005 * var_chaste_interface__Irel__CaMKtrap + 0.050000000000000003 * (-var_chaste_interface__Irel__CaMKtrap + var_Irel__CaMKactive) * var_Irel__CaMKactive; // 1 / ms
        const double var_ICaL__taufca = 0.5 + 1 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca__Ca_ss) + 10.0 * var_Irel__CaMKactive / (0.14999999999999999 + var_Irel__CaMKactive); // ms
        const double var_Irel__KmCaMK = 0.14999999999999999; // dimensionless
        const double var_Irel__dro_inf = pow(var_chaste_interface__Ca__Ca_jsr, 1.8999999999999999) / (pow(var_chaste_interface__Ca__Ca_jsr, 1.8999999999999999) + 1644.6531773416521 * pow((var_chaste_interface__Ca__Ca_ss / (0.0028 + var_chaste_interface__Ca__Ca_ss)), 1.8999999999999999)); // dimensionless
        const double var_Irel__dtau_rel_max = 10.0; // ms
        const double var_Irel__dtau_rel = var_Irel__CaMKactive * var_Irel__dtau_rel_max / (var_Irel__CaMKactive + var_Irel__KmCaMK); // ms
        const double var_Ito2__Kmto2 = 0.1502; // mM
        const double var_Ito2__AAss = 1 / (1.0 + var_Ito2__Kmto2 / var_chaste_interface__Ca__Ca_ss); // dimensionless
        const double d_dt_chaste_interface_var_Ito2__AA = var_Ito2__AAss - var_chaste_interface__Ito2__AA; // 1 / ms
        const double var_Iup_Ileak__Kmup = 0.00092000000000000003; // mM
        const double var_Iup_Ileak__dJupmax = 0.75; // dimensionless
        const double var_Iup_Ileak__dJup = var_Irel__CaMKactive * var_Iup_Ileak__dJupmax / (var_Irel__CaMKactive + var_Irel__KmCaMK); // dimensionless
        const double var_Iup_Ileak__dKmPLBmax = 0.00017000000000000001; // mM
        const double var_Iup_Ileak__dKmPLB = var_Irel__CaMKactive * var_Iup_Ileak__dKmPLBmax / (var_Irel__CaMKactive + var_Irel__KmCaMK); // mM
        const double var_Iup_Ileak__iupmax = 0.0043750000000000004; // mM_per_ms
        const double var_Iup_Ileak__iup = (1.0 + var_Iup_Ileak__dJup) * var_chaste_interface__Ca__Ca_i * var_Iup_Ileak__iupmax / (-var_Iup_Ileak__dKmPLB + var_chaste_interface__Ca__Ca_i + var_Iup_Ileak__Kmup); // mM_per_ms
        const double var_Iup_Ileak__nsrmax = 15.0; // mM
        const double var_Iup_Ileak__ileak = var_chaste_interface__Ca__Ca_nsr * var_Iup_Ileak__iupmax / var_Iup_Ileak__nsrmax; // mM_per_ms
        const double var_K__CTKClmax = 7.0755999999999996e-6; // mM_per_ms
        const double var_Na__CTNaClmax = 9.8442999999999999e-6; // mM_per_ms
        const double var_INaCa__denom2 = pow(var_INaCa__KmNao, 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_INaCa__ca_i_NaCa / var_INaCa__KmCai) * mParameters[0]; // mM4
        const double var_INaCa__denom3 = pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] + pow(mParameters[3], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_ICaL__dpss = 9.0 - 8.0 / (1.0 + exp(-19.117647058823529 - 0.29411764705882354 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_ICaL__dp = (-var_chaste_interface__ICaL__dp + var_ICaL__dpss) / mParameters[5]; // 1 / ms
        const double var_ICaL__dss = 1 / (1.0 + exp(0.59347181008902072 - 0.14836795252225518 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ICaL__f2ss = 0.23000000000000001 + 0.77000000000000002 / (1.0 + exp(2.4457142857142857 + 0.14285714285714285 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ICaL__fss = 0.29999999999999999 + 0.69999999999999996 / (1.0 + exp(2.4457142857142857 + 0.14285714285714285 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[4] / (-1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICaL__ICaL = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca; // uA_per_uF
        const double var_ICaL__fca2ss = 1 / (1.0 - 100.0 * var_ICaL__ICaL); // dimensionless
        const double var_ICaL__fcass = 0.14999999999999999 + 0.55000000000000004 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca__Ca_ss) + 0.29999999999999999 / (1.0 - 20.0 * var_ICaL__ICaL); // dimensionless
        const double d_dt_chaste_interface_var_ICaL__fca = (-var_chaste_interface__ICaL__fca + var_ICaL__fcass) / var_ICaL__taufca; // 1 / ms
        const double var_ICaL__taud = 0.58999999999999997 + 0.80000000000000004 * exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__cell__V) / (1.0 + exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__cell__V)); // ms
        const double d_dt_chaste_interface_var_ICaL__d = (-var_chaste_interface__ICaL__d + var_ICaL__dss) / var_ICaL__taud; // 1 / ms
        const double var_ICaL__tauf = 1 / (0.052900000000000003 + 0.24110000000000001 * exp(-0.19019454876899997 * pow((-1 + 0.10318426646304972 * var_chaste_interface__cell__V), 2))); // ms
        const double d_dt_chaste_interface_var_ICaL__f = (-var_chaste_interface__ICaL__f + var_ICaL__fss) / var_ICaL__tauf; // 1 / ms
        const double var_ICaL__tauf2 = 1 / (0.0054000000000000003 + 0.042299999999999997 * exp(-1.20074125971556 * pow((-1 + 0.053842757610673787 * var_chaste_interface__cell__V), 2))); // ms
        const double d_dt_chaste_interface_var_ICaL__f2 = (-var_chaste_interface__ICaL__f2 + var_ICaL__f2ss) / var_ICaL__tauf2; // 1 / ms
        const double var_ICaL__taufca2 = 125.0 + 300.0 / (1.0 + exp(-4.375 - 25.0 * var_ICaL__ICaL)); // ms
        const double d_dt_chaste_interface_var_ICaL__fca2 = (-var_chaste_interface__ICaL__fca2 + var_ICaL__fca2ss) / var_ICaL__taufca2; // 1 / ms
        const double var_ICab__ICab = ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[6] * var_chaste_interface__cell__V / (-1.0 + exp(0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_IKr__r = 1 / (1.0 + 2.5 * exp(2.8000000000000003 + 0.10000000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double var_IKr__tauxr = 43.0 + 1 / (exp(-7.6769999999999996 - 0.012800000000000001 * var_chaste_interface__cell__V) + exp(-5.4950000000000001 + 0.1691 * var_chaste_interface__cell__V)); // ms
        const double var_IKr__xrss = 1 / (1.0 + exp(-2.1819999999999999 - 0.18190000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_IKr__xr = (-var_chaste_interface__IKr__xr + var_IKr__xrss) / var_IKr__tauxr; // 1 / ms
        const double var_IKs__tauxs = 1 / (((fabs(44.600000000000001 + var_chaste_interface__cell__V) < 1.0030090258350555e-8) ? (7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)) - 49850000.061936118 * (44.599999989969909 + var_chaste_interface__cell__V) * (-7.6328986866047728e-13 / (1.0 - exp(9.9999999875755032e-8)) - 7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)))) : (7.6100000000000007e-5 * (44.600000000000001 + var_chaste_interface__cell__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__cell__V)))) + ((fabs(-0.55000000000000004 + var_chaste_interface__cell__V) < 7.8124999999948028e-7) ? (-2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)) + 640000.00000042573 * (-0.54999921875000002 + var_chaste_interface__cell__V) * (2.8124999999996902e-10 / (-1.0 + exp(9.9999999999988984e-8)) + 2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)))) : (0.00036000000000000002 * (-0.55000000000000004 + var_chaste_interface__cell__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__cell__V))))); // ms
        const double var_IKs__xss = 1 / (1.0 + exp(0.4251012145748988 - 0.04048582995951417 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs1 = (-var_chaste_interface__IKs__xs1 + var_IKs__xss) / var_IKs__tauxs; // 1 / ms
        const double d_dt_chaste_interface_var_IKs__xs2 = 0.5 * (-var_chaste_interface__IKs__xs2 + var_IKs__xss) / var_IKs__tauxs; // 1 / ms
        const double var_INa__ah = ((var_chaste_interface__cell__V >= -40.0) ? (0) : (0.13500000000000001 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__cell__V))); // per_ms
        const double var_INa__aj = ((var_chaste_interface__cell__V >= -40.0) ? (0) : ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V) - 3.4740000000000003e-5 * exp(-0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INa__am = ((fabs(47.130000000000003 + var_chaste_interface__cell__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INa__bh = ((var_chaste_interface__cell__V >= -40.0) ? (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__cell__V))) : (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V))); // per_ms
        const double d_dt_chaste_interface_var_INa__H = (1.0 - var_chaste_interface__INa__H) * var_INa__ah - var_chaste_interface__INa__H * var_INa__bh; // 1 / ms
        const double var_INa__bj = ((var_chaste_interface__cell__V >= -40.0) ? (0.29999999999999999 * exp(-2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__cell__V))) : (0.1212 * exp(-0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double d_dt_chaste_interface_var_INa__J = (1.0 - var_chaste_interface__INa__J) * var_INa__aj - var_chaste_interface__INa__J * var_INa__bj; // 1 / ms
        const double var_INa__bm = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__cell__V); // per_ms
        const double d_dt_chaste_interface_var_INa__m = (1.0 - var_chaste_interface__INa__m) * var_INa__am - var_INa__bm * var_chaste_interface__INa__m; // 1 / ms
        const double var_INaCa__denom1 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__num = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] * exp(var_Environment__FonRT * var_INaCa__eta * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__INaCa = mParameters[15] * var_INaCa__allo * var_INaCa__num / ((var_INaCa__denom2 + var_INaCa__denom3) * var_INaCa__denom1); // uA_per_uF
        const double var_INaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_Environment__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaK__INaK = mParameters[2] * var_INaK__fnak * mParameters[16] / ((1.0 + pow(var_INaK__kmnai, 2) / pow(var_chaste_interface__Na__Na_i, 2)) * (mParameters[2] + var_INaK__kmko)); // uA_per_uF
        const double var_INal__amL = ((fabs(47.130000000000003 + var_chaste_interface__cell__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INal__bmL = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__cell__V); // per_ms
        const double d_dt_chaste_interface_var_INal__mL = (1.0 - var_chaste_interface__INal__mL) * var_INal__amL - var_INal__bmL * var_chaste_interface__INal__mL; // 1 / ms
        const double var_INal__hLss = 1 / (1.0 + exp(14.918032786885247 + 0.16393442622950821 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_INal__hL = 0.0016666666666666668 * var_INal__hLss - 0.0016666666666666668 * var_chaste_interface__INal__hL; // 1 / ms
        const double var_Irel__cafac = 1 / (1.0 + exp(3.3333333333333335 + 66.666666666666671 * var_ICaL__ICaL)); // dimensionless
        const double var_Irel__riss = 1 / (1.0 + exp(-16.0 + 80.0 * var_Irel__cafac + 40000.0 * var_chaste_interface__Ca__Ca_ss)); // dimensionless
        const double var_Irel__ross = var_Irel__dro_inf / (1.0 + 1 / pow(var_ICaL__ICaL, 2)); // dimensionless
        const double d_dt_chaste_interface_var_Irel__ro = 0.33333333333333331 * var_Irel__ross - 0.33333333333333331 * var_chaste_interface__Irel__ro; // 1 / ms
        const double var_Irel__tauri = 3.0 + (350.0 - var_Irel__dtau_rel) / (1.0 + exp(-15.0 + 5000.0 * var_chaste_interface__Ca__Ca_ss + 15.0 * var_Irel__cafac)) + var_Irel__dtau_rel; // ms
        const double d_dt_chaste_interface_var_Irel__ri = (-var_chaste_interface__Irel__ri + var_Irel__riss) / var_Irel__tauri; // 1 / ms
        const double var_Irel__vg = 1 / (1.0 + exp(2.6000000000000001 + 0.20000000000000001 * var_ICaL__ibarca)); // dimensionless
        const double var_Irel__Grel = 3000.0 * var_Irel__vg; // per_ms
        const double var_Irel__irelcicr = (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_jsr) * var_Irel__Grel * var_chaste_interface__Irel__ri * var_chaste_interface__Irel__ro; // mM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_jsr = (-var_Irel__irelcicr + var_Idiff_Itr__itr) * var_Ca__bcsqn; // mM / ms
        const double var_Ito__ay = 25.0 * exp(-1.6000000000000001 + 0.040000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(-1.6000000000000001 + 0.040000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double var_Ito__ay2 = 0.029999999999999999 / (1.0 + exp(12.0 + 0.20000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double var_Ito__ay3 = 0.0022499999999999998 / (1.0 + exp(12.0 + 0.20000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double var_Ito__by = 25.0 * exp(-3.6000000000000001 - 0.040000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(-3.6000000000000001 - 0.040000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_Ito__ydv = (1.0 - var_chaste_interface__Ito__ydv) * var_Ito__ay - var_Ito__by * var_chaste_interface__Ito__ydv; // 1 / ms
        const double var_Ito__by2 = 0.20000000000000001 * exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_Ito__ydv2 = (1.0 - var_chaste_interface__Ito__ydv2) * var_Ito__ay2 - var_Ito__by2 * var_chaste_interface__Ito__ydv2; // 1 / ms
        const double var_Ito__by3 = 0.10000000000000001 * exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_Ito__zdv = (1.0 - var_chaste_interface__Ito__zdv) * var_Ito__ay3 - var_Ito__by3 * var_chaste_interface__Ito__zdv; // 1 / ms
        const double var_Ito__rv = ((var_chaste_interface__cell__V <= 0) ? (exp(var_chaste_interface__cell__V / mParameters[19])) : (1.0)); // dimensionless
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (0.0096484999999999991 * (-mParameters[1] * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-mParameters[1] * exp(0.0374358835078 * var_chaste_interface__cell__V) + var_chaste_interface__Cl__Cl_i) * mParameters[17] * var_chaste_interface__cell__V / (1.0 - exp(0.0374358835078 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_chaste_interface__Ito2__AA * var_Ito2__Ito2_max; // uA_per_uF
        const double var_cell__a = 0.0011000000000000001; // cm
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_cell__l = 0.01; // cm
        const double var_cell__ageo = 2.0 * M_PI * pow(var_cell__a, 2) + 2.0 * M_PI * var_cell__a * var_cell__l; // cm2
        const double var_cell__Acap = 2.0 * var_cell__ageo; // uF
        const double var_cell__AF = var_cell__Acap / var_Environment__F; // uF_mole_per_C
        const double var_cell__vcell = 1000.0 * M_PI * pow(var_cell__a, 2) * var_cell__l; // uL
        const double var_cell__vjsr = 0.0047999999999999996 * var_cell__vcell; // uL
        const double var_cell__vmyo = 0.68000000000000005 * var_cell__vcell; // uL
        const double var_cell__vnsr = 0.055199999999999999 * var_cell__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_nsr = -var_Iup_Ileak__ileak - var_Idiff_Itr__itr * var_cell__vjsr / var_cell__vnsr + var_Iup_Ileak__iup; // mM / ms
        const double var_cell__vss = 0.02 * var_cell__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_i = ((-var_Iup_Ileak__iup + var_Iup_Ileak__ileak) * var_cell__vnsr / var_cell__vmyo + var_Idiff_Itr__idiff * var_cell__vss / var_cell__vmyo + 0.5 * (-var_ICab__ICab - var_IpCa__IpCa + 2.0 * var_INaCa__INaCa) * var_cell__AF / var_cell__vmyo) * var_Ca__bmyo; // mM / ms
        const double d_dt_chaste_interface_var_Ca__Ca_ss = (-var_Idiff_Itr__idiff + var_Irel__irelcicr * var_cell__vjsr / var_cell__vss - 0.5 * var_ICaL__ICaL * var_cell__AF / var_cell__vss) * var_Ca__bss; // mM / ms
        const double var_reversal_potentials__ECl = -log(mParameters[1] / var_chaste_interface__Cl__Cl_i) / var_Environment__FonRT; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__cell__V) * mParameters[7]; // uA_per_uF
        const double var_cell__clont = 0.5 * var_cell__i_Stim + var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
        const double var_reversal_potentials__EK = log(mParameters[2] / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)); // per_ms
        const double var_IK1__bk1 = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__IK1 = 0.5 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[10] * var_IK1__ak1 / (var_IK1__ak1 + var_IK1__bk1); // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[12] / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKr__gkr * var_IKr__r * var_chaste_interface__IKr__xr; // uA_per_uF
        const double var_Ito__Ito = pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[18] * var_Ito__rv * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv; // uA_per_uF
        const double var_K__CTKCl = (-var_reversal_potentials__ECl + var_reversal_potentials__EK) * var_K__CTKClmax / (87.825100000000006 - var_reversal_potentials__ECl + var_reversal_potentials__EK); // mM_per_ms
        const double var_reversal_potentials__ENa = log(mParameters[3] / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__INa = (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INa__gNa; // uA_per_uF
        const double var_INal__INal = pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * mParameters[11] * var_chaste_interface__INal__hL; // uA_per_uF
        const double var_Na__CTNaCl = pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4) * var_Na__CTNaClmax / (59494197.640692554 + pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4)); // mM_per_ms
        const double d_dt_chaste_interface_var_Cl__Cl_i = var_cell__AF * var_cell__clont / var_cell__vmyo + var_K__CTKCl + var_Na__CTNaCl; // mM / ms
        const double var_cell__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + var_INa__INa + var_INal__INal; // uA_per_uF
        const double d_dt_chaste_interface_var_Na__Na_i = -var_cell__AF * var_cell__naiont / var_cell__vmyo + var_Na__CTNaCl; // mM / ms
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((mParameters[3] * var_reversal_potentials__prnak + mParameters[2]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_Environment__FonRT; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__cell__V) * var_IKs__gks * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_uF
        const double var_cell__kiont = 0.5 * var_cell__i_Stim - 2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito__Ito; // uA_per_uF
        const double d_dt_chaste_interface_var_K__K_i = -var_cell__AF * var_cell__kiont / var_cell__vmyo + var_K__CTKCl; // mM / ms
        
        mEvalF[1] = d_dt_chaste_interface_var_Ca__Ca_i;
        mPartialF[1] = EvaluatePartialDerivative1(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[2] = d_dt_chaste_interface_var_INa__H;
        mPartialF[2] = EvaluatePartialDerivative2(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[3] = d_dt_chaste_interface_var_INa__m;
        mPartialF[3] = EvaluatePartialDerivative3(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[4] = d_dt_chaste_interface_var_INa__J;
        mPartialF[4] = EvaluatePartialDerivative4(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[5] = d_dt_chaste_interface_var_ICaL__d;
        mPartialF[5] = EvaluatePartialDerivative5(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[6] = d_dt_chaste_interface_var_ICaL__dp;
        mPartialF[6] = EvaluatePartialDerivative6(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[7] = d_dt_chaste_interface_var_ICaL__f;
        mPartialF[7] = EvaluatePartialDerivative7(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[8] = d_dt_chaste_interface_var_ICaL__fca;
        mPartialF[8] = EvaluatePartialDerivative8(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[9] = d_dt_chaste_interface_var_ICaL__fca2;
        mPartialF[9] = EvaluatePartialDerivative9(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[10] = d_dt_chaste_interface_var_ICaL__f2;
        mPartialF[10] = EvaluatePartialDerivative10(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[11] = d_dt_chaste_interface_var_IKr__xr;
        mPartialF[11] = EvaluatePartialDerivative11(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[12] = d_dt_chaste_interface_var_IKs__xs1;
        mPartialF[12] = EvaluatePartialDerivative12(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[13] = d_dt_chaste_interface_var_IKs__xs2;
        mPartialF[13] = EvaluatePartialDerivative13(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[14] = d_dt_chaste_interface_var_Ito__ydv;
        mPartialF[14] = EvaluatePartialDerivative14(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[15] = d_dt_chaste_interface_var_Ito__ydv2;
        mPartialF[15] = EvaluatePartialDerivative15(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[16] = d_dt_chaste_interface_var_Ito__zdv;
        mPartialF[16] = EvaluatePartialDerivative16(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[17] = d_dt_chaste_interface_var_Ito2__AA;
        mPartialF[17] = EvaluatePartialDerivative17(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[18] = d_dt_chaste_interface_var_INal__mL;
        mPartialF[18] = EvaluatePartialDerivative18(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[19] = d_dt_chaste_interface_var_INal__hL;
        mPartialF[19] = EvaluatePartialDerivative19(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[20] = d_dt_chaste_interface_var_Irel__CaMKtrap;
        mPartialF[20] = EvaluatePartialDerivative20(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[21] = d_dt_chaste_interface_var_Irel__ro;
        mPartialF[21] = EvaluatePartialDerivative21(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[22] = d_dt_chaste_interface_var_Irel__ri;
        mPartialF[22] = EvaluatePartialDerivative22(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[23] = d_dt_chaste_interface_var_Na__Na_i;
        mPartialF[23] = EvaluatePartialDerivative23(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[24] = d_dt_chaste_interface_var_K__K_i;
        mPartialF[24] = EvaluatePartialDerivative24(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[25] = d_dt_chaste_interface_var_Cl__Cl_i;
        mPartialF[25] = EvaluatePartialDerivative25(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[26] = d_dt_chaste_interface_var_Ca__Ca_jsr;
        mPartialF[26] = EvaluatePartialDerivative26(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[27] = d_dt_chaste_interface_var_Ca__Ca_nsr;
        mPartialF[27] = EvaluatePartialDerivative27(var_chaste_interface__Environment__time, rY, delta);
        mEvalF[28] = d_dt_chaste_interface_var_Ca__Ca_ss;
        mPartialF[28] = EvaluatePartialDerivative28(var_chaste_interface__Environment__time, rY, delta);
        
        {
            if (fabs(mPartialF[1]) < delta){
                rY[1] += mDt*d_dt_chaste_interface_var_Ca__Ca_i;
            }
            else
            {
                rY[1] += (d_dt_chaste_interface_var_Ca__Ca_i/mPartialF[1])*(exp(mPartialF[1]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[2]) < delta){
                rY[2] += mDt*d_dt_chaste_interface_var_INa__H;
            }
            else
            {
                rY[2] += (d_dt_chaste_interface_var_INa__H/mPartialF[2])*(exp(mPartialF[2]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[3]) < delta){
                rY[3] += mDt*d_dt_chaste_interface_var_INa__m;
            }
            else
            {
                rY[3] += (d_dt_chaste_interface_var_INa__m/mPartialF[3])*(exp(mPartialF[3]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[4]) < delta){
                rY[4] += mDt*d_dt_chaste_interface_var_INa__J;
            }
            else
            {
                rY[4] += (d_dt_chaste_interface_var_INa__J/mPartialF[4])*(exp(mPartialF[4]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[5]) < delta){
                rY[5] += mDt*d_dt_chaste_interface_var_ICaL__d;
            }
            else
            {
                rY[5] += (d_dt_chaste_interface_var_ICaL__d/mPartialF[5])*(exp(mPartialF[5]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[6]) < delta){
                rY[6] += mDt*d_dt_chaste_interface_var_ICaL__dp;
            }
            else
            {
                rY[6] += (d_dt_chaste_interface_var_ICaL__dp/mPartialF[6])*(exp(mPartialF[6]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[7]) < delta){
                rY[7] += mDt*d_dt_chaste_interface_var_ICaL__f;
            }
            else
            {
                rY[7] += (d_dt_chaste_interface_var_ICaL__f/mPartialF[7])*(exp(mPartialF[7]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[8]) < delta){
                rY[8] += mDt*d_dt_chaste_interface_var_ICaL__fca;
            }
            else
            {
                rY[8] += (d_dt_chaste_interface_var_ICaL__fca/mPartialF[8])*(exp(mPartialF[8]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[9]) < delta){
                rY[9] += mDt*d_dt_chaste_interface_var_ICaL__fca2;
            }
            else
            {
                rY[9] += (d_dt_chaste_interface_var_ICaL__fca2/mPartialF[9])*(exp(mPartialF[9]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[10]) < delta){
                rY[10] += mDt*d_dt_chaste_interface_var_ICaL__f2;
            }
            else
            {
                rY[10] += (d_dt_chaste_interface_var_ICaL__f2/mPartialF[10])*(exp(mPartialF[10]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[11]) < delta){
                rY[11] += mDt*d_dt_chaste_interface_var_IKr__xr;
            }
            else
            {
                rY[11] += (d_dt_chaste_interface_var_IKr__xr/mPartialF[11])*(exp(mPartialF[11]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[12]) < delta){
                rY[12] += mDt*d_dt_chaste_interface_var_IKs__xs1;
            }
            else
            {
                rY[12] += (d_dt_chaste_interface_var_IKs__xs1/mPartialF[12])*(exp(mPartialF[12]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[13]) < delta){
                rY[13] += mDt*d_dt_chaste_interface_var_IKs__xs2;
            }
            else
            {
                rY[13] += (d_dt_chaste_interface_var_IKs__xs2/mPartialF[13])*(exp(mPartialF[13]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[14]) < delta){
                rY[14] += mDt*d_dt_chaste_interface_var_Ito__ydv;
            }
            else
            {
                rY[14] += (d_dt_chaste_interface_var_Ito__ydv/mPartialF[14])*(exp(mPartialF[14]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[15]) < delta){
                rY[15] += mDt*d_dt_chaste_interface_var_Ito__ydv2;
            }
            else
            {
                rY[15] += (d_dt_chaste_interface_var_Ito__ydv2/mPartialF[15])*(exp(mPartialF[15]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[16]) < delta){
                rY[16] += mDt*d_dt_chaste_interface_var_Ito__zdv;
            }
            else
            {
                rY[16] += (d_dt_chaste_interface_var_Ito__zdv/mPartialF[16])*(exp(mPartialF[16]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[17]) < delta){
                rY[17] += mDt*d_dt_chaste_interface_var_Ito2__AA;
            }
            else
            {
                rY[17] += (d_dt_chaste_interface_var_Ito2__AA/mPartialF[17])*(exp(mPartialF[17]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[18]) < delta){
                rY[18] += mDt*d_dt_chaste_interface_var_INal__mL;
            }
            else
            {
                rY[18] += (d_dt_chaste_interface_var_INal__mL/mPartialF[18])*(exp(mPartialF[18]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[19]) < delta){
                rY[19] += mDt*d_dt_chaste_interface_var_INal__hL;
            }
            else
            {
                rY[19] += (d_dt_chaste_interface_var_INal__hL/mPartialF[19])*(exp(mPartialF[19]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[20]) < delta){
                rY[20] += mDt*d_dt_chaste_interface_var_Irel__CaMKtrap;
            }
            else
            {
                rY[20] += (d_dt_chaste_interface_var_Irel__CaMKtrap/mPartialF[20])*(exp(mPartialF[20]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[21]) < delta){
                rY[21] += mDt*d_dt_chaste_interface_var_Irel__ro;
            }
            else
            {
                rY[21] += (d_dt_chaste_interface_var_Irel__ro/mPartialF[21])*(exp(mPartialF[21]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[22]) < delta){
                rY[22] += mDt*d_dt_chaste_interface_var_Irel__ri;
            }
            else
            {
                rY[22] += (d_dt_chaste_interface_var_Irel__ri/mPartialF[22])*(exp(mPartialF[22]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[23]) < delta){
                rY[23] += mDt*d_dt_chaste_interface_var_Na__Na_i;
            }
            else
            {
                rY[23] += (d_dt_chaste_interface_var_Na__Na_i/mPartialF[23])*(exp(mPartialF[23]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[24]) < delta){
                rY[24] += mDt*d_dt_chaste_interface_var_K__K_i;
            }
            else
            {
                rY[24] += (d_dt_chaste_interface_var_K__K_i/mPartialF[24])*(exp(mPartialF[24]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[25]) < delta){
                rY[25] += mDt*d_dt_chaste_interface_var_Cl__Cl_i;
            }
            else
            {
                rY[25] += (d_dt_chaste_interface_var_Cl__Cl_i/mPartialF[25])*(exp(mPartialF[25]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[26]) < delta){
                rY[26] += mDt*d_dt_chaste_interface_var_Ca__Ca_jsr;
            }
            else
            {
                rY[26] += (d_dt_chaste_interface_var_Ca__Ca_jsr/mPartialF[26])*(exp(mPartialF[26]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[27]) < delta){
                rY[27] += mDt*d_dt_chaste_interface_var_Ca__Ca_nsr;
            }
            else
            {
                rY[27] += (d_dt_chaste_interface_var_Ca__Ca_nsr/mPartialF[27])*(exp(mPartialF[27]*mDt)-1.0);
            }
            
        }
        {
            if (fabs(mPartialF[28]) < delta){
                rY[28] += mDt*d_dt_chaste_interface_var_Ca__Ca_ss;
            }
            else
            {
                rY[28] += (d_dt_chaste_interface_var_Ca__Ca_ss/mPartialF[28])*(exp(mPartialF[28]*mDt)-1.0);
            }
            
        }        
        
    }
   
    
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative0(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        double d_dt_chaste_interface_var_cell__V;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.000223768331231758
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.99765453819431
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.998157020148849
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 5.38067794749339e-07
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.99805432294836
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999986839648304
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.961568137796573
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.854261813196152
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.989081601403786
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.255981702631947
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.0147449166757808
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.0147504787196957
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.00894974857468432
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.999992183094244
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.787996527242362
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.0014969201082975
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.488129650338831
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 17.9964119779802
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 134.555737634453
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 20.1543792471096
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.000225131045297696
        

        // Mathematics
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_IKr__gkr = 0.5 * sqrt(mParameters[2]) * mParameters[13]; // mS_per_uF
        const double var_IKs__gks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[14]; // mS_per_uF
        const double var_INa__gNa = pow(var_chaste_interface__INa__m, 3) * mParameters[9] * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // mS_per_uF
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__allo = 1 / (1.0 + pow(var_INaCa__KmCa, 2) / pow(var_INaCa__ca_i_NaCa, 2)); // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3]); // dimensionless
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * mParameters[8] / (var_chaste_interface__Ca__Ca_i + var_IpCa__kmpca); // uA_per_uF
        const double var_INaCa__denom2 = pow(var_INaCa__KmNao, 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_INaCa__ca_i_NaCa / var_INaCa__KmCai) * mParameters[0]; // mM4
        const double var_INaCa__denom3 = pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] + pow(mParameters[3], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[4] / (-1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICaL__ICaL = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca; // uA_per_uF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[6] * var_chaste_interface__cell__V / (-1.0 + exp(0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_IKr__r = 1 / (1.0 + 2.5 * exp(2.8000000000000003 + 0.10000000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaCa__denom1 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__num = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] * exp(var_Environment__FonRT * var_INaCa__eta * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__INaCa = mParameters[15] * var_INaCa__allo * var_INaCa__num / ((var_INaCa__denom2 + var_INaCa__denom3) * var_INaCa__denom1); // uA_per_uF
        const double var_INaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_Environment__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaK__INaK = mParameters[2] * var_INaK__fnak * mParameters[16] / ((1.0 + pow(var_INaK__kmnai, 2) / pow(var_chaste_interface__Na__Na_i, 2)) * (mParameters[2] + var_INaK__kmko)); // uA_per_uF
        const double var_Ito__rv = ((var_chaste_interface__cell__V <= 0) ? (exp(var_chaste_interface__cell__V / mParameters[19])) : (1.0)); // dimensionless
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (0.0096484999999999991 * (-mParameters[1] * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-mParameters[1] * exp(0.0374358835078 * var_chaste_interface__cell__V) + var_chaste_interface__Cl__Cl_i) * mParameters[17] * var_chaste_interface__cell__V / (1.0 - exp(0.0374358835078 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_chaste_interface__Ito2__AA * var_Ito2__Ito2_max; // uA_per_uF
        const double var_cell__caiont = -2.0 * var_INaCa__INaCa + var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa; // uA_per_uF
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_reversal_potentials__ECl = -log(mParameters[1] / var_chaste_interface__Cl__Cl_i) / var_Environment__FonRT; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__cell__V) * mParameters[7]; // uA_per_uF
        const double var_cell__clont = 0.5 * var_cell__i_Stim + var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
        const double var_reversal_potentials__EK = log(mParameters[2] / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)); // per_ms
        const double var_IK1__bk1 = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__IK1 = 0.5 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[10] * var_IK1__ak1 / (var_IK1__ak1 + var_IK1__bk1); // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[12] / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKr__gkr * var_IKr__r * var_chaste_interface__IKr__xr; // uA_per_uF
        const double var_Ito__Ito = pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[18] * var_Ito__rv * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv; // uA_per_uF
        const double var_reversal_potentials__ENa = log(mParameters[3] / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__INa = (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INa__gNa; // uA_per_uF
        const double var_INal__INal = pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * mParameters[11] * var_chaste_interface__INal__hL; // uA_per_uF
        const double var_cell__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + var_INa__INa + var_INal__INal; // uA_per_uF
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((mParameters[3] * var_reversal_potentials__prnak + mParameters[2]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_Environment__FonRT; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__cell__V) * var_IKs__gks * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_uF
        const double var_cell__kiont = 0.5 * var_cell__i_Stim - 2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito__Ito; // uA_per_uF
        d_dt_chaste_interface_var_cell__V = -var_cell__caiont - var_cell__clont - var_cell__kiont - var_cell__naiont; // mV / ms

        return d_dt_chaste_interface_var_cell__V;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative0(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            double var_chaste_interface__Ca__Ca_i = rY[1];
            // Units: mM; Initial value: 0.000223768331231758
            double var_chaste_interface__INa__H = rY[2];
            // Units: dimensionless; Initial value: 0.99765453819431
            double var_chaste_interface__INa__m = rY[3];
            // Units: dimensionless; Initial value: 0.000382187369845771
            double var_chaste_interface__INa__J = rY[4];
            // Units: dimensionless; Initial value: 0.998157020148849
            double var_chaste_interface__ICaL__d = rY[5];
            // Units: dimensionless; Initial value: 5.38067794749339e-07
            double var_chaste_interface__ICaL__dp = rY[6];
            // Units: dimensionless; Initial value: 8.99805432294836
            double var_chaste_interface__ICaL__f = rY[7];
            // Units: dimensionless; Initial value: 0.999986839648304
            double var_chaste_interface__ICaL__fca = rY[8];
            // Units: dimensionless; Initial value: 0.961568137796573
            double var_chaste_interface__ICaL__fca2 = rY[9];
            // Units: dimensionless; Initial value: 0.854261813196152
            double var_chaste_interface__ICaL__f2 = rY[10];
            // Units: dimensionless; Initial value: 0.989081601403786
            double var_chaste_interface__IKr__xr = rY[11];
            // Units: dimensionless; Initial value: 0.255981702631947
            double var_chaste_interface__IKs__xs1 = rY[12];
            // Units: dimensionless; Initial value: 0.0147449166757808
            double var_chaste_interface__IKs__xs2 = rY[13];
            // Units: dimensionless; Initial value: 0.0147504787196957
            double var_chaste_interface__Ito__ydv = rY[14];
            // Units: dimensionless; Initial value: 0.00894974857468432
            double var_chaste_interface__Ito__ydv2 = rY[15];
            // Units: dimensionless; Initial value: 0.999992183094244
            double var_chaste_interface__Ito__zdv = rY[16];
            // Units: dimensionless; Initial value: 0.787996527242362
            double var_chaste_interface__Ito2__AA = rY[17];
            // Units: dimensionless; Initial value: 0.0014969201082975
            double var_chaste_interface__INal__mL = rY[18];
            // Units: dimensionless; Initial value: 0.000382187369845771
            double var_chaste_interface__INal__hL = rY[19];
            // Units: dimensionless; Initial value: 0.488129650338831
            double var_chaste_interface__Na__Na_i = rY[23];
            // Units: mM; Initial value: 17.9964119779802
            double var_chaste_interface__K__K_i = rY[24];
            // Units: mM; Initial value: 134.555737634453
            double var_chaste_interface__Cl__Cl_i = rY[25];
            // Units: mM; Initial value: 20.1543792471096
            double var_chaste_interface__Ca__Ca_ss = rY[28];
            // Units: mM; Initial value: 0.000225131045297696
            

            const double var_x0 = 1806.0006101250415 * mParameters[6];
            const double var_x1 = exp(9.9999999999999995e-8);
            const double var_x2 = 1 / (-1.0 + var_x1);
            const double var_x3 = -0.34100000000000003 * mParameters[0];
            const double var_x4 = var_x2 * (var_x3 + var_x1 * var_chaste_interface__Ca__Ca_i);
            const double var_x5 = exp(-9.9999999999999995e-8);
            const double var_x6 = 1 / (-1.0 + var_x5);
            const double var_x7 = var_x6 * (var_x3 + var_x5 * var_chaste_interface__Ca__Ca_i);
            const double var_x8 = fabs(var_chaste_interface__cell__V);
            const double var_x9 = var_x8 < 1.3356169352750065e-6;
            const double var_x10 = 0.074871767015599999 * var_chaste_interface__cell__V;
            const double var_x11 = exp(var_x10);
            const double var_x12 = var_x11 * var_chaste_interface__Ca__Ca_i;
            const double var_x13 = var_x12 + var_x3;
            const double var_x14 = -1.0 + var_x11;
            const double var_x15 = mParameters[6] / var_x14;
            const double var_x16 = 3612.001220250083 * var_x15;
            const double var_x17 = var_x13 * var_x16;
            const double var_x18 = var_x11 * var_chaste_interface__cell__V;
            const double var_x19 = ((var_x9) ? (var_x0 * var_x4 + var_x0 * var_x7) : (var_x17 + 270.4369138226271 * var_x12 * var_x15 * var_chaste_interface__cell__V - 270.4369138226271 * var_x13 * var_x18 * mParameters[6] / pow(var_x14, 2)));
            const double var_x20 = exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V);
            const double var_x21 = 1.0 + var_x20;
            const double var_x22 = mParameters[12] / var_x21;
            const double var_x23 = 1 / (1.0 - var_x1);
            const double var_x24 = -var_x1 * mParameters[1] + var_chaste_interface__Cl__Cl_i;
            const double var_x25 = 1806.0006101250415 * mParameters[17];
            const double var_x26 = 1 / (1.0 - var_x5);
            const double var_x27 = -var_x5 * mParameters[1] + var_chaste_interface__Cl__Cl_i;
            const double var_x28 = var_x8 < 2.671233870550013e-6;
            const double var_x29 = 0.0374358835078 * var_chaste_interface__cell__V;
            const double var_x30 = exp(var_x29);
            const double var_x31 = var_x30 * mParameters[1];
            const double var_x32 = (-var_x31 + var_chaste_interface__Cl__Cl_i) * mParameters[17];
            const double var_x33 = 1.0 - var_x30;
            const double var_x34 = 1 / var_x33;
            const double var_x35 = 3612.001220250083 * var_x34;
            const double var_x36 = var_x32 * var_x35;
            const double var_x37 = mParameters[17] * var_chaste_interface__cell__V;
            const double var_x38 = ((var_x28) ? (var_x23 * var_x24 * var_x25 + var_x25 * var_x26 * var_x27) : (var_x36 - 135.21845691131355 * var_x31 * var_x34 * var_x37 + 135.21845691131355 * var_x30 * var_x32 * var_chaste_interface__cell__V / pow(var_x33, 2))) * var_chaste_interface__Ito2__AA;
            const double var_x39 = pow(var_chaste_interface__INal__mL, 3) * mParameters[11];
            const double var_x40 = var_x39 * var_chaste_interface__INal__hL;
            const double var_x41 = 1 / var_chaste_interface__Ca__Ca_i;
            const double var_x42 = pow(var_x41, 1.3999999999999999);
            const double var_x43 = 1.0 + 6.4818210260626455e-7 * var_x42;
            const double var_x44 = 1 / var_x43;
            const double var_x45 = -1.0 - 0.59999999999999998 * var_x44;
            const double var_x46 = mParameters[14] * var_chaste_interface__IKs__xs2;
            const double var_x47 = var_x45 * var_x46;
            const double var_x48 = var_x47 * var_chaste_interface__IKs__xs1;
            const double var_x49 = pow(var_chaste_interface__INa__m, 3);
            const double var_x50 = var_x49 * mParameters[9] * var_chaste_interface__INa__J;
            const double var_x51 = var_x50 * var_chaste_interface__INa__H;
            const double var_x52 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x53 = exp(2.8000000000000003 + var_x52);
            const double var_x54 = sqrt(mParameters[2]);
            const double var_x55 = var_x54 * mParameters[13] / (1.0 + 2.5 * var_x53);
            const double var_x56 = 0.5 * var_x55;
            const double var_x57 = 1 / var_chaste_interface__K__K_i;
            const double var_x58 = log(var_x57 * mParameters[2]);
            const double var_x59 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 6.370892781261781 * var_x58);
            const double var_x60 = 1.0 + var_x59;
            const double var_x61 = 1 / var_x60;
            const double var_x62 = exp(-2.4444678999999998 + 13.738155796238718 * var_x58 - 0.51429999999999998 * var_chaste_interface__cell__V);
            const double var_x63 = 1.0 + var_x62;
            const double var_x64 = 1 / var_x63;
            const double var_x65 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 1.6494869150646332 * var_x58);
            const double var_x66 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 2.1455350448257708 * var_x58);
            const double var_x67 = var_x65 + 0.49124000000000001 * var_x66;
            const double var_x68 = var_x64 * var_x67;
            const double var_x69 = var_x54 * mParameters[10] / (var_x68 + 1.02 * var_x61);
            const double var_x70 = var_x61 * var_x69;
            const double var_x71 = 26.712338705500134 * var_x58;
            const double var_x72 = -var_x71 + var_chaste_interface__cell__V;
            const double var_x73 = var_x20 * var_x72 * mParameters[12] / pow(var_x21, 2);
            const double var_x74 = pow(var_chaste_interface__Ito__ydv, 3);
            const double var_x75 = 1 / mParameters[19];
            const double var_x76 = exp(var_x75 * var_chaste_interface__cell__V);
            const double var_x77 = var_chaste_interface__cell__V <= 0;
            const double var_x78 = ((var_x77) ? (var_x76) : (1.0));
            const double var_x79 = var_x74 * var_x78 * mParameters[18] * var_chaste_interface__Ito__zdv;
            const double var_x80 = var_x79 * var_chaste_interface__Ito__ydv2;
            const double var_x81 = exp(0.01310255922773 * var_chaste_interface__cell__V);
            const double var_x82 = pow(var_chaste_interface__Na__Na_i, 3);
            const double var_x83 = var_x82 * mParameters[0];
            const double var_x84 = var_x81 * var_x83;
            const double var_x85 = exp(-0.024333324280070002 * var_chaste_interface__cell__V);
            const double var_x86 = pow(mParameters[3], 3);
            const double var_x87 = var_x86 * var_chaste_interface__Ca__Ca_i;
            const double var_x88 = 1.0 + 0.27000000000000002 * var_x85;
            const double var_x89 = 1 / var_x88;
            const double var_x90 = 1.0 + 6.9444444444444451e-9 / pow(var_chaste_interface__Ca__Ca_i, 2);
            const double var_x91 = 1 / var_x90;
            const double var_x92 = 1.5 * var_x86;
            const double var_x93 = var_x92 * var_chaste_interface__Ca__Ca_i;
            const double var_x94 = var_x86 * (1.0 + 0.00053738391835633597 * var_x82);
            const double var_x95 = (1.0 + 416.66666666666669 * var_chaste_interface__Ca__Ca_i) * mParameters[0];
            const double var_x96 = 1 / (var_x83 + var_x93 + 1004882.8125 * var_chaste_interface__Ca__Ca_i + 0.0035999999999999999 * var_x94 + 1.3 * var_x82 + 1860.8670000000004 * var_x95);
            const double var_x97 = var_x91 * var_x96 * mParameters[15];
            const double var_x98 = var_x89 * var_x97;
            const double var_x99 = var_x98 * (0.01310255922773 * var_x84 + 0.036499986420104998 * var_x85 * var_x87);
            const double var_x100 = 7224.0024405001659 * mParameters[4];
            const double var_x101 = exp(9.9999999999763197e-8);
            const double var_x102 = 1 / (-1.0 + var_x101);
            const double var_x103 = var_chaste_interface__Ca__Ca_ss;
            const double var_x104 = var_x102 * (var_x3 + var_x101 * var_x103);
            const double var_x105 = exp(-9.9999999999763197e-8);
            const double var_x106 = 1 / (-1.0 + var_x105);
            const double var_x107 = var_x106 * (var_x3 + var_x103 * var_x105);
            const double var_x108 = -15.0 + var_chaste_interface__cell__V;
            const double var_x109 = fabs(var_x108) < 1.3356169352718439e-6;
            const double var_x110 = exp(-1.1230765052339999 + var_x10);
            const double var_x111 = var_x3 + var_x103 * var_x110;
            const double var_x112 = -1.0 + var_x110;
            const double var_x113 = mParameters[4] / var_x112;
            const double var_x114 = 14448.004881000332 * var_x113;
            const double var_x115 = var_x111 * var_x114;
            const double var_x116 = var_x108 * var_x110;
            const double var_x117 = 1081.7476552905084 * var_x116;
            const double var_x118 = pow(var_x112, 2);
            const double var_x119 = ((var_x109) ? (var_x100 * var_x104 + var_x100 * var_x107) : (var_x115 + var_x113 * var_x117 * var_chaste_interface__Ca__Ca_ss - var_x111 * var_x117 * mParameters[4] / var_x118));
            const double var_x120 = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp);
            const double var_x121 = var_x120 * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2;
            const double var_x122 = var_x119 * var_x121;
            const double var_x123 = var_x72 * var_x74 * mParameters[18] * var_chaste_interface__Ito__ydv2;
            const double var_x124 = var_x123 * ((var_x77) ? (var_x75 * var_x76) : (0)) * var_chaste_interface__Ito__zdv;
            const double var_x125 = var_x54 * var_x72;
            const double var_x126 = var_x125 * var_x53 * mParameters[13] * var_chaste_interface__IKr__xr / pow((0.40000000000000002 + var_x53), 2);
            const double var_x127 = var_x59 / pow(var_x60, 2);
            const double var_x128 = var_x69 * var_x72;
            const double var_x129 = var_x127 * var_x128;
            const double var_x130 = pow(var_chaste_interface__Na__Na_i, 2);
            const double var_x131 = 1 / var_x130;
            const double var_x132 = exp(-0.00374358835078 * var_chaste_interface__cell__V);
            const double var_x133 = exp(0.01485884101040119 * mParameters[3]);
            const double var_x134 = exp(-var_x29);
            const double var_x135 = 1.0 + 0.1245 * var_x132 + 0.036499999999999998 * var_x134 * (-0.14285714285714285 + 0.14285714285714285 * var_x133);
            const double var_x136 = mParameters[2] * mParameters[16] / (1.5 + mParameters[2]);
            const double var_x137 = var_x136 * (0.00046607674967211004 * var_x132 + 0.0374358835078 * var_x134 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x133)) / (pow(var_x135, 2) * (1.0 + 100.0 * var_x131));
            const double var_x138 = var_x62 * var_x67 / pow(var_x63, 2);
            const double var_x139 = 0.24326999999999999 * var_x127 - 0.51429999999999998 * var_x138 - var_x64 * (0.061749999999999999 * var_x65 + 0.039456396800000001 * var_x66);
            const double var_x140 = var_x125 * var_x61 * mParameters[10] / pow((var_x61 + 0.98039215686274506 * var_x68), 2);
            const double var_x141 = 0.49019607843137253 * var_x140;
            const double var_x142 = var_x84 - var_x85 * var_x93;
            const double var_x143 = var_x142 * var_x85 * var_x97 / pow(var_x88, 2);
            
            partialF = var_x48 - var_x122 - var_x124 - var_x19 - var_x22 - var_x38 - var_x40 - var_x51 - var_x80 - mParameters[7] + 0.02 * var_x126 + 0.12163499999999999 * var_x129 - var_x137 - var_x99 - 0.51000000000000001 * var_x70 - 0.0065699975556189009 * var_x143 - 0.16722408026755853 * var_x73 - var_x139 * var_x141 - var_x56 * var_chaste_interface__IKr__xr;
        }
        else
        {
            const double y_save = rY[0];
            rY[0] += delta;
            const double temp = EvaluateYDerivative0(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[0])/delta;
            rY[0] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative1(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.000223768331231758
        double var_chaste_interface__Irel__CaMKtrap = rY[20];
        // Units: dimensionless; Initial value: 0.0971591072782679
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 17.9964119779802
        double var_chaste_interface__Ca__Ca_nsr = rY[27];
        // Units: mM; Initial value: 4.14835141174613
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.000225131045297696
        

        // Mathematics
        const double var_Ca__cbar = 0.050000000000000003; // mM
        const double var_Ca__kmc = 0.0023800000000000002; // mM
        const double var_Ca__kmt = 0.00050000000000000001; // mM
        const double var_Ca__tbar = 0.070000000000000007; // mM
        const double var_Ca__bmyo = 1 / (1.0 + var_Ca__cbar * var_Ca__kmc / pow((var_chaste_interface__Ca__Ca_i + var_Ca__kmc), 2) + var_Ca__kmt * var_Ca__tbar / pow((var_chaste_interface__Ca__Ca_i + var_Ca__kmt), 2)); // dimensionless
        const double var_Environment__F = 96485.0; // C_per_mole
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__allo = 1 / (1.0 + pow(var_INaCa__KmCa, 2) / pow(var_INaCa__ca_i_NaCa, 2)); // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_Idiff_Itr__idiff = 5.0 * var_chaste_interface__Ca__Ca_ss - 5.0 * var_chaste_interface__Ca__Ca_i; // mM_per_ms
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * mParameters[8] / (var_chaste_interface__Ca__Ca_i + var_IpCa__kmpca); // uA_per_uF
        const double var_Irel__CaMK0 = 0.050000000000000003; // dimensionless
        const double var_Irel__Km = 0.0015; // mM
        const double var_Irel__CaMKbound = (1.0 - var_chaste_interface__Irel__CaMKtrap) * var_Irel__CaMK0 / (1.0 + var_Irel__Km / var_chaste_interface__Ca__Ca_ss); // dimensionless
        const double var_Irel__CaMKactive = var_Irel__CaMKbound + var_chaste_interface__Irel__CaMKtrap; // dimensionless
        const double var_Irel__KmCaMK = 0.14999999999999999; // dimensionless
        const double var_Iup_Ileak__Kmup = 0.00092000000000000003; // mM
        const double var_Iup_Ileak__dJupmax = 0.75; // dimensionless
        const double var_Iup_Ileak__dJup = var_Irel__CaMKactive * var_Iup_Ileak__dJupmax / (var_Irel__CaMKactive + var_Irel__KmCaMK); // dimensionless
        const double var_Iup_Ileak__dKmPLBmax = 0.00017000000000000001; // mM
        const double var_Iup_Ileak__dKmPLB = var_Irel__CaMKactive * var_Iup_Ileak__dKmPLBmax / (var_Irel__CaMKactive + var_Irel__KmCaMK); // mM
        const double var_Iup_Ileak__iupmax = 0.0043750000000000004; // mM_per_ms
        const double var_Iup_Ileak__iup = (1.0 + var_Iup_Ileak__dJup) * var_chaste_interface__Ca__Ca_i * var_Iup_Ileak__iupmax / (-var_Iup_Ileak__dKmPLB + var_chaste_interface__Ca__Ca_i + var_Iup_Ileak__Kmup); // mM_per_ms
        const double var_Iup_Ileak__nsrmax = 15.0; // mM
        const double var_Iup_Ileak__ileak = var_chaste_interface__Ca__Ca_nsr * var_Iup_Ileak__iupmax / var_Iup_Ileak__nsrmax; // mM_per_ms
        const double var_INaCa__denom2 = pow(var_INaCa__KmNao, 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_INaCa__ca_i_NaCa / var_INaCa__KmCai) * mParameters[0]; // mM4
        const double var_INaCa__denom3 = pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] + pow(mParameters[3], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_ICab__ICab = ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[6] * var_chaste_interface__cell__V / (-1.0 + exp(0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_INaCa__denom1 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__num = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] * exp(var_Environment__FonRT * var_INaCa__eta * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__INaCa = mParameters[15] * var_INaCa__allo * var_INaCa__num / ((var_INaCa__denom2 + var_INaCa__denom3) * var_INaCa__denom1); // uA_per_uF
        const double var_cell__a = 0.0011000000000000001; // cm
        const double var_cell__l = 0.01; // cm
        const double var_cell__ageo = 2.0 * M_PI * pow(var_cell__a, 2) + 2.0 * M_PI * var_cell__a * var_cell__l; // cm2
        const double var_cell__Acap = 2.0 * var_cell__ageo; // uF
        const double var_cell__AF = var_cell__Acap / var_Environment__F; // uF_mole_per_C
        const double var_cell__vcell = 1000.0 * M_PI * pow(var_cell__a, 2) * var_cell__l; // uL
        const double var_cell__vmyo = 0.68000000000000005 * var_cell__vcell; // uL
        const double var_cell__vnsr = 0.055199999999999999 * var_cell__vcell; // uL
        const double var_cell__vss = 0.02 * var_cell__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_i = ((-var_Iup_Ileak__iup + var_Iup_Ileak__ileak) * var_cell__vnsr / var_cell__vmyo + var_Idiff_Itr__idiff * var_cell__vss / var_cell__vmyo + 0.5 * (-var_ICab__ICab - var_IpCa__IpCa + 2.0 * var_INaCa__INaCa) * var_cell__AF / var_cell__vmyo) * var_Ca__bmyo; // mM / ms

        return d_dt_chaste_interface_var_Ca__Ca_i;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative1(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            double var_chaste_interface__Ca__Ca_i = rY[1];
            // Units: mM; Initial value: 0.000223768331231758
            double var_chaste_interface__Irel__CaMKtrap = rY[20];
            // Units: dimensionless; Initial value: 0.0971591072782679
            double var_chaste_interface__Na__Na_i = rY[23];
            // Units: mM; Initial value: 17.9964119779802
            double var_chaste_interface__Ca__Ca_nsr = rY[27];
            // Units: mM; Initial value: 4.14835141174613
            double var_chaste_interface__Ca__Ca_ss = rY[28];
            // Units: mM; Initial value: 0.000225131045297696
            

            const double var_x1 = exp(9.9999999999999995e-8);
            const double var_x2 = 1 / (-1.0 + var_x1);
            const double var_x3 = -0.34100000000000003 * mParameters[0];
            const double var_x4 = var_x2 * (var_x3 + var_x1 * var_chaste_interface__Ca__Ca_i);
            const double var_x5 = exp(-9.9999999999999995e-8);
            const double var_x6 = 1 / (-1.0 + var_x5);
            const double var_x7 = var_x6 * (var_x3 + var_x5 * var_chaste_interface__Ca__Ca_i);
            const double var_x8 = fabs(var_chaste_interface__cell__V);
            const double var_x9 = var_x8 < 1.3356169352750065e-6;
            const double var_x10 = 0.074871767015599999 * var_chaste_interface__cell__V;
            const double var_x11 = exp(var_x10);
            const double var_x12 = var_x11 * var_chaste_interface__Ca__Ca_i;
            const double var_x13 = var_x12 + var_x3;
            const double var_x14 = -1.0 + var_x11;
            const double var_x15 = mParameters[6] / var_x14;
            const double var_x16 = 3612.001220250083 * var_x15;
            const double var_x17 = var_x13 * var_x16;
            const double var_x18 = var_x11 * var_chaste_interface__cell__V;
            const double var_x81 = exp(0.01310255922773 * var_chaste_interface__cell__V);
            const double var_x82 = pow(var_chaste_interface__Na__Na_i, 3);
            const double var_x83 = var_x82 * mParameters[0];
            const double var_x84 = var_x81 * var_x83;
            const double var_x85 = exp(-0.024333324280070002 * var_chaste_interface__cell__V);
            const double var_x86 = pow(mParameters[3], 3);
            const double var_x87 = var_x86 * var_chaste_interface__Ca__Ca_i;
            const double var_x88 = 1.0 + 0.27000000000000002 * var_x85;
            const double var_x89 = 1 / var_x88;
            const double var_x90 = 1.0 + 6.9444444444444451e-9 / pow(var_chaste_interface__Ca__Ca_i, 2);
            const double var_x91 = 1 / var_x90;
            const double var_x92 = 1.5 * var_x86;
            const double var_x93 = var_x92 * var_chaste_interface__Ca__Ca_i;
            const double var_x94 = var_x86 * (1.0 + 0.00053738391835633597 * var_x82);
            const double var_x95 = (1.0 + 416.66666666666669 * var_chaste_interface__Ca__Ca_i) * mParameters[0];
            const double var_x96 = 1 / (var_x83 + var_x93 + 1004882.8125 * var_chaste_interface__Ca__Ca_i + 0.0035999999999999999 * var_x94 + 1.3 * var_x82 + 1860.8670000000004 * var_x95);
            const double var_x97 = var_x91 * var_x96 * mParameters[15];
            const double var_x98 = var_x89 * var_x97;
            const double var_x142 = var_x84 - var_x85 * var_x93;
            const double var_x144 = 0.0048242499999999995 * mParameters[6];
            const double var_x145 = var_x144 * var_x5 * var_x6;
            const double var_x146 = ((var_x9) ? (-var_x145 + (0.5 + 374358.83507800003 * var_chaste_interface__cell__V) * (var_x145 + var_x1 * var_x144 * var_x2)) : (var_x16 * var_x18));
            const double var_x147 = 0.00050000000000000001 + var_chaste_interface__Ca__Ca_i;
            const double var_x148 = mParameters[8] / var_x147;
            const double var_x149 = pow(var_x147, (-2));
            const double var_x150 = var_x149 * var_chaste_interface__Ca__Ca_i * mParameters[8];
            const double var_x151 = var_x85 * var_x98;
            const double var_x152 = -1004882.8125 - var_x92 - 775361.25000000012 * mParameters[0];
            const double var_x153 = var_x142 * var_x89 * mParameters[15];
            const double var_x154 = var_x153 * var_x91 / pow((1.2936831875607387e-6 * var_x82 + 0.0018518248862973764 * var_x95 + 1.4927113702623908e-6 * var_x87 + 9.9514091350826051e-7 * var_x83 + 3.5825072886297377e-9 * var_x94 + var_chaste_interface__Ca__Ca_i), 2);
            const double var_x156 = var_x153 * var_x96 / (pow(var_x90, 2) * pow(var_chaste_interface__Ca__Ca_i, 3));
            const double var_x217 = 0.0023800000000000002 + var_chaste_interface__Ca__Ca_i;
            const double var_x218 = 1.0 + 0.00011900000000000002 / pow(var_x217, 2) + 3.5000000000000004e-5 * var_x149;
            const double var_x219 = 1 / var_x218;
            const double var_x220 = var_x219;
            const double var_x221 = 3.0760371441184366e-5 * var_x148;
            const double var_x222 = 1.0 - var_chaste_interface__Irel__CaMKtrap;
            const double var_x223 = 1 / var_chaste_interface__Ca__Ca_ss;
            const double var_x224 = 1.0 + 0.0015 * var_x223;
            const double var_x225 = 1 / var_x224;
            const double var_x226 = 0.050000000000000003 * var_x225;
            const double var_x227 = var_x222 * var_x226 + var_chaste_interface__Irel__CaMKtrap;
            const double var_x228 = 0.14999999999999999 + var_x227;
            const double var_x229 = 1 / var_x228;
            const double var_x230 = var_x227 * var_x229;
            const double var_x231 = 0.00092000000000000003 - 0.00017000000000000001 * var_x230 + var_chaste_interface__Ca__Ca_i;
            const double var_x232 = 1 / var_x231;
            const double var_x233 = 1.0 + 0.75 * var_x230;
            const double var_x234 = var_x232 * var_x233;
            const double var_x235 = 0.00035514705882352943 * var_x234;
            const double var_x236 = 0.00035514705882352943 * var_chaste_interface__Ca__Ca_i;
            const double var_x237 = var_x233 / pow(var_x231, 2);
            const double var_x238 = var_x236 * var_x237;
            const double var_x239 = 6.0924326210094507e-17 * var_x154;
            const double var_x240 = var_x151 * var_x86;
            const double var_x241 = var_x144 * var_x7;
            
            partialF = var_x220 * (-0.14705882352941174 + var_x238 - var_x221 - var_x235 + 8.544547622551213e-13 * var_x156 + 3.0760371441184366e-5 * var_x150 - 9.2281114323553099e-5 * var_x240 - 3.0760371441184366e-5 * var_x146 + var_x152 * var_x239) + (0.00023800000000000004 / pow(var_x217, 3) + 7.0000000000000007e-5 / pow(var_x147, 3)) * (0.14705882352941174 * var_chaste_interface__Ca__Ca_ss + 2.3676470588235295e-5 * var_chaste_interface__Ca__Ca_nsr - 3.0760371441184366e-5 * ((var_x9) ? (-var_x241 + 374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (var_x241 + var_x144 * var_x4)) : (var_x17 * var_chaste_interface__cell__V)) - 0.14705882352941174 * var_chaste_interface__Ca__Ca_i - var_x221 * var_chaste_interface__Ca__Ca_i - var_x235 * var_chaste_interface__Ca__Ca_i + 6.1520742882368733e-5 * var_x142 * var_x98) / pow(var_x218, 2);
        }
        else
        {
            const double y_save = rY[1];
            rY[1] += delta;
            const double temp = EvaluateYDerivative1(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[1])/delta;
            rY[1] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative2(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.99765453819431
        

        // Mathematics
        const double var_INa__ah = ((var_chaste_interface__cell__V >= -40.0) ? (0) : (0.13500000000000001 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__cell__V))); // per_ms
        const double var_INa__bh = ((var_chaste_interface__cell__V >= -40.0) ? (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__cell__V))) : (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V))); // per_ms
        const double d_dt_chaste_interface_var_INa__H = (1.0 - var_chaste_interface__INa__H) * var_INa__ah - var_chaste_interface__INa__H * var_INa__bh; // 1 / ms

        return d_dt_chaste_interface_var_INa__H;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative2(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            

            const double var_x255 = var_chaste_interface__cell__V >= -40.0;
            const double var_x256 = exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__cell__V);
            const double var_x257 = exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__cell__V);
            const double var_x258 = 1.0 + var_x257;
            const double var_x259 = exp(0.079000000000000001 * var_chaste_interface__cell__V);
            const double var_x260 = exp(0.34999999999999998 * var_chaste_interface__cell__V);
            
            partialF = -((var_x255) ? (0) : (0.13500000000000001 * var_x256)) - ((var_x255) ? (7.6923076923076916 / var_x258) : (310000.0 * var_x260 + 3.5600000000000001 * var_x259));
        }
        else
        {
            const double y_save = rY[2];
            rY[2] += delta;
            const double temp = EvaluateYDerivative2(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[2])/delta;
            rY[2] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative3(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.000382187369845771
        

        // Mathematics
        const double var_INa__am = ((fabs(47.130000000000003 + var_chaste_interface__cell__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INa__bm = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__cell__V); // per_ms
        const double d_dt_chaste_interface_var_INa__m = (1.0 - var_chaste_interface__INa__m) * var_INa__am - var_INa__bm * var_chaste_interface__INa__m; // 1 / ms

        return d_dt_chaste_interface_var_INa__m;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative3(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            

            const double var_x52 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x261 = 1 / (1.0 - exp(1.0000000000287557e-7));
            const double var_x262 = 1 / (1.0 - exp(-1.0000000000287557e-7));
            const double var_x263 = 47.130000000000003 + var_chaste_interface__cell__V;
            const double var_x264 = fabs(var_x263) < 1.0000000000287557e-6;
            const double var_x265 = -var_x52;
            const double var_x266 = exp(-4.7130000000000001 + var_x265);
            const double var_x267 = 1.0 - var_x266;
            const double var_x268 = 0.32000000000000001 / var_x267;
            const double var_x270 = exp(-0.090909090909090912 * var_chaste_interface__cell__V);
            const double var_x272 = 3.200000000092018e-7 * var_x262;
            const double var_x273 = -((var_x264) ? (var_x272 - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-var_x272 - 3.200000000092018e-7 * var_x261)) : (var_x263 * var_x268)) - 0.080000000000000002 * var_x270;
            
            partialF = var_x273;
        }
        else
        {
            const double y_save = rY[3];
            rY[3] += delta;
            const double temp = EvaluateYDerivative3(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[3])/delta;
            rY[3] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative4(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.998157020148849
        

        // Mathematics
        const double var_INa__aj = ((var_chaste_interface__cell__V >= -40.0) ? (0) : ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V) - 3.4740000000000003e-5 * exp(-0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INa__bj = ((var_chaste_interface__cell__V >= -40.0) ? (0.29999999999999999 * exp(-2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__cell__V))) : (0.1212 * exp(-0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double d_dt_chaste_interface_var_INa__J = (1.0 - var_chaste_interface__INa__J) * var_INa__aj - var_chaste_interface__INa__J * var_INa__bj; // 1 / ms

        return d_dt_chaste_interface_var_INa__J;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative4(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            

            const double var_x52 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x255 = var_chaste_interface__cell__V >= -40.0;
            const double var_x265 = -var_x52;
            const double var_x274 = exp(0.24440000000000001 * var_chaste_interface__cell__V);
            const double var_x275 = exp(-0.043909999999999998 * var_chaste_interface__cell__V);
            const double var_x276 = -127140.0 * var_x274 - 3.4740000000000003e-5 * var_x275;
            const double var_x277 = exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V);
            const double var_x278 = 1.0 + var_x277;
            const double var_x279 = 1 / var_x278;
            const double var_x280 = var_x276 * var_x279;
            const double var_x281 = 37.780000000000001 + var_chaste_interface__cell__V;
            const double var_x282 = exp(-3.2000000000000002 + var_x265);
            const double var_x283 = 1.0 + var_x282;
            const double var_x284 = exp(-2.5349999999999999e-7 * var_chaste_interface__cell__V);
            const double var_x285 = var_x284 / var_x283;
            const double var_x286 = exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V);
            const double var_x287 = 1.0 + var_x286;
            const double var_x288 = exp(-0.01052 * var_chaste_interface__cell__V);
            const double var_x289 = var_x288 / var_x287;
            
            partialF = -((var_x255) ? (0) : (var_x280 * var_x281)) - ((var_x255) ? (0.29999999999999999 * var_x285) : (0.1212 * var_x289));
        }
        else
        {
            const double y_save = rY[4];
            rY[4] += delta;
            const double temp = EvaluateYDerivative4(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[4])/delta;
            rY[4] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative5(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 5.38067794749339e-07
        

        // Mathematics
        const double var_ICaL__dss = 1 / (1.0 + exp(0.59347181008902072 - 0.14836795252225518 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ICaL__taud = 0.58999999999999997 + 0.80000000000000004 * exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__cell__V) / (1.0 + exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__cell__V)); // ms
        const double d_dt_chaste_interface_var_ICaL__d = (-var_chaste_interface__ICaL__d + var_ICaL__dss) / var_ICaL__taud; // 1 / ms

        return d_dt_chaste_interface_var_ICaL__d;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative5(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            

            const double var_x290 = exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__cell__V);
            const double var_x291 = 1.0 + var_x290;
            const double var_x292 = exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__cell__V);
            const double var_x293 = var_x292 / var_x291;
            const double var_x296 = 1 / (0.58999999999999997 + 0.80000000000000004 * var_x293);
            
            partialF = -var_x296;
        }
        else
        {
            const double y_save = rY[5];
            rY[5] += delta;
            const double temp = EvaluateYDerivative5(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[5])/delta;
            rY[5] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative6(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.99805432294836
        

        // Mathematics
        const double var_ICaL__dpss = 9.0 - 8.0 / (1.0 + exp(-19.117647058823529 - 0.29411764705882354 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_ICaL__dp = (-var_chaste_interface__ICaL__dp + var_ICaL__dpss) / mParameters[5]; // 1 / ms

        return d_dt_chaste_interface_var_ICaL__dp;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative6(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            const double var_x298 = 1 / mParameters[5];
            
            partialF = -var_x298;
        }
        else
        {
            const double y_save = rY[6];
            rY[6] += delta;
            const double temp = EvaluateYDerivative6(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[6])/delta;
            rY[6] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative7(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999986839648304
        

        // Mathematics
        const double var_ICaL__fss = 0.29999999999999999 + 0.69999999999999996 / (1.0 + exp(2.4457142857142857 + 0.14285714285714285 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ICaL__tauf = 1 / (0.052900000000000003 + 0.24110000000000001 * exp(-0.19019454876899997 * pow((-1 + 0.10318426646304972 * var_chaste_interface__cell__V), 2))); // ms
        const double d_dt_chaste_interface_var_ICaL__f = (-var_chaste_interface__ICaL__f + var_ICaL__fss) / var_ICaL__tauf; // 1 / ms

        return d_dt_chaste_interface_var_ICaL__f;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative7(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            

            const double var_x302 = 0.24110000000000001 * exp(-0.19019454876899997 * pow((-1 + 0.10318426646304972 * var_chaste_interface__cell__V), 2));
            
            partialF = -0.052900000000000003 - var_x302;
        }
        else
        {
            const double y_save = rY[7];
            rY[7] += delta;
            const double temp = EvaluateYDerivative7(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[7])/delta;
            rY[7] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative8(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 5.38067794749339e-07
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.99805432294836
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999986839648304
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.961568137796573
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.854261813196152
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.989081601403786
        double var_chaste_interface__Irel__CaMKtrap = rY[20];
        // Units: dimensionless; Initial value: 0.0971591072782679
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.000225131045297696
        

        // Mathematics
        const double var_Irel__CaMK0 = 0.050000000000000003; // dimensionless
        const double var_Irel__Km = 0.0015; // mM
        const double var_Irel__CaMKbound = (1.0 - var_chaste_interface__Irel__CaMKtrap) * var_Irel__CaMK0 / (1.0 + var_Irel__Km / var_chaste_interface__Ca__Ca_ss); // dimensionless
        const double var_Irel__CaMKactive = var_Irel__CaMKbound + var_chaste_interface__Irel__CaMKtrap; // dimensionless
        const double var_ICaL__taufca = 0.5 + 1 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca__Ca_ss) + 10.0 * var_Irel__CaMKactive / (0.14999999999999999 + var_Irel__CaMKactive); // ms
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[4] / (-1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICaL__ICaL = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca; // uA_per_uF
        const double var_ICaL__fcass = 0.14999999999999999 + 0.55000000000000004 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca__Ca_ss) + 0.29999999999999999 / (1.0 - 20.0 * var_ICaL__ICaL); // dimensionless
        const double d_dt_chaste_interface_var_ICaL__fca = (-var_chaste_interface__ICaL__fca + var_ICaL__fcass) / var_ICaL__taufca; // 1 / ms

        return d_dt_chaste_interface_var_ICaL__fca;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative8(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            double var_chaste_interface__ICaL__d = rY[5];
            // Units: dimensionless; Initial value: 5.38067794749339e-07
            double var_chaste_interface__ICaL__dp = rY[6];
            // Units: dimensionless; Initial value: 8.99805432294836
            double var_chaste_interface__ICaL__f = rY[7];
            // Units: dimensionless; Initial value: 0.999986839648304
            double var_chaste_interface__ICaL__fca = rY[8];
            // Units: dimensionless; Initial value: 0.961568137796573
            double var_chaste_interface__ICaL__fca2 = rY[9];
            // Units: dimensionless; Initial value: 0.854261813196152
            double var_chaste_interface__ICaL__f2 = rY[10];
            // Units: dimensionless; Initial value: 0.989081601403786
            double var_chaste_interface__Irel__CaMKtrap = rY[20];
            // Units: dimensionless; Initial value: 0.0971591072782679
            double var_chaste_interface__Ca__Ca_ss = rY[28];
            // Units: mM; Initial value: 0.000225131045297696
            

            const double var_x3 = -0.34100000000000003 * mParameters[0];
            const double var_x10 = 0.074871767015599999 * var_chaste_interface__cell__V;
            const double var_x101 = exp(9.9999999999763197e-8);
            const double var_x102 = 1 / (-1.0 + var_x101);
            const double var_x103 = var_chaste_interface__Ca__Ca_ss;
            const double var_x104 = var_x102 * (var_x3 + var_x101 * var_x103);
            const double var_x105 = exp(-9.9999999999763197e-8);
            const double var_x106 = 1 / (-1.0 + var_x105);
            const double var_x107 = var_x106 * (var_x3 + var_x103 * var_x105);
            const double var_x108 = -15.0 + var_chaste_interface__cell__V;
            const double var_x109 = fabs(var_x108) < 1.3356169352718439e-6;
            const double var_x110 = exp(-1.1230765052339999 + var_x10);
            const double var_x111 = var_x3 + var_x103 * var_x110;
            const double var_x112 = -1.0 + var_x110;
            const double var_x113 = mParameters[4] / var_x112;
            const double var_x114 = 14448.004881000332 * var_x113;
            const double var_x115 = var_x111 * var_x114;
            const double var_x120 = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp);
            const double var_x168 = -14.999998664383064 + var_chaste_interface__cell__V;
            const double var_x169 = 0.019296999999954306 * mParameters[4];
            const double var_x170 = var_x107 * var_x169;
            const double var_x171 = var_x168 * (var_x170 + var_x104 * var_x169);
            const double var_x172 = ((var_x109) ? (-var_x170 + 374358.83507888648 * var_x171) : (var_x108 * var_x115));
            const double var_x173 = var_x120 * var_x172 * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca2;
            const double var_x174 = var_x173 * var_chaste_interface__ICaL__fca;
            const double var_x175 = var_x174 * var_chaste_interface__ICaL__f;
            const double var_x180 = var_x173 * var_chaste_interface__ICaL__f;
            const double var_x222 = 1.0 - var_chaste_interface__Irel__CaMKtrap;
            const double var_x223 = 1 / var_chaste_interface__Ca__Ca_ss;
            const double var_x224 = 1.0 + 0.0015 * var_x223;
            const double var_x225 = 1 / var_x224;
            const double var_x226 = 0.050000000000000003 * var_x225;
            const double var_x227 = var_x222 * var_x226 + var_chaste_interface__Irel__CaMKtrap;
            const double var_x228 = 0.14999999999999999 + var_x227;
            const double var_x229 = 1 / var_x228;
            const double var_x230 = var_x227 * var_x229;
            const double var_x304 = 1 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca__Ca_ss);
            const double var_x305 = 10.0 * var_x230;
            const double var_x306 = 1 / (0.5 + var_x305 + var_x304);
            const double var_x307 = -var_x175;
            const double var_x308 = 0.014999999999999999 / pow((0.050000000000000003 + var_x307), 2);
            
            partialF = var_x306 * (-1 + var_x180 * var_x308);
        }
        else
        {
            const double y_save = rY[8];
            rY[8] += delta;
            const double temp = EvaluateYDerivative8(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[8])/delta;
            rY[8] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative9(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 5.38067794749339e-07
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.99805432294836
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999986839648304
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.961568137796573
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.854261813196152
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.989081601403786
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.000225131045297696
        

        // Mathematics
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[4] / (-1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICaL__ICaL = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca; // uA_per_uF
        const double var_ICaL__fca2ss = 1 / (1.0 - 100.0 * var_ICaL__ICaL); // dimensionless
        const double var_ICaL__taufca2 = 125.0 + 300.0 / (1.0 + exp(-4.375 - 25.0 * var_ICaL__ICaL)); // ms
        const double d_dt_chaste_interface_var_ICaL__fca2 = (-var_chaste_interface__ICaL__fca2 + var_ICaL__fca2ss) / var_ICaL__taufca2; // 1 / ms

        return d_dt_chaste_interface_var_ICaL__fca2;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative9(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            double var_chaste_interface__ICaL__d = rY[5];
            // Units: dimensionless; Initial value: 5.38067794749339e-07
            double var_chaste_interface__ICaL__dp = rY[6];
            // Units: dimensionless; Initial value: 8.99805432294836
            double var_chaste_interface__ICaL__f = rY[7];
            // Units: dimensionless; Initial value: 0.999986839648304
            double var_chaste_interface__ICaL__fca = rY[8];
            // Units: dimensionless; Initial value: 0.961568137796573
            double var_chaste_interface__ICaL__fca2 = rY[9];
            // Units: dimensionless; Initial value: 0.854261813196152
            double var_chaste_interface__ICaL__f2 = rY[10];
            // Units: dimensionless; Initial value: 0.989081601403786
            double var_chaste_interface__Ca__Ca_ss = rY[28];
            // Units: mM; Initial value: 0.000225131045297696
            

            const double var_x3 = -0.34100000000000003 * mParameters[0];
            const double var_x10 = 0.074871767015599999 * var_chaste_interface__cell__V;
            const double var_x101 = exp(9.9999999999763197e-8);
            const double var_x102 = 1 / (-1.0 + var_x101);
            const double var_x103 = var_chaste_interface__Ca__Ca_ss;
            const double var_x104 = var_x102 * (var_x3 + var_x101 * var_x103);
            const double var_x105 = exp(-9.9999999999763197e-8);
            const double var_x106 = 1 / (-1.0 + var_x105);
            const double var_x107 = var_x106 * (var_x3 + var_x103 * var_x105);
            const double var_x108 = -15.0 + var_chaste_interface__cell__V;
            const double var_x109 = fabs(var_x108) < 1.3356169352718439e-6;
            const double var_x110 = exp(-1.1230765052339999 + var_x10);
            const double var_x111 = var_x3 + var_x103 * var_x110;
            const double var_x112 = -1.0 + var_x110;
            const double var_x113 = mParameters[4] / var_x112;
            const double var_x114 = 14448.004881000332 * var_x113;
            const double var_x115 = var_x111 * var_x114;
            const double var_x120 = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp);
            const double var_x168 = -14.999998664383064 + var_chaste_interface__cell__V;
            const double var_x169 = 0.019296999999954306 * mParameters[4];
            const double var_x170 = var_x107 * var_x169;
            const double var_x171 = var_x168 * (var_x170 + var_x104 * var_x169);
            const double var_x172 = ((var_x109) ? (-var_x170 + 374358.83507888648 * var_x171) : (var_x108 * var_x115));
            const double var_x173 = var_x120 * var_x172 * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca2;
            const double var_x174 = var_x173 * var_chaste_interface__ICaL__fca;
            const double var_x175 = var_x174 * var_chaste_interface__ICaL__f;
            const double var_x181 = var_x120 * var_x172 * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__fca;
            const double var_x182 = var_x181 * var_chaste_interface__ICaL__f2;
            const double var_x307 = -var_x175;
            const double var_x314 = exp(-4.375 - 25.0 * var_x175);
            const double var_x315 = 1.0 + var_x314;
            const double var_x316 = 1 / var_x315;
            const double var_x317 = 1 / (125.0 + 300.0 * var_x316);
            const double var_x318 = 0.01 / pow((0.01 + var_x307), 2);
            const double var_x320 = 0.083333333333333329 * var_x314 * (-var_chaste_interface__ICaL__fca2 + 1 / (1.0 - 100.0 * var_x175)) / (pow(var_x315, 2) * pow((0.41666666666666669 + var_x316), 2));
            
            partialF = var_x317 * (-1 + var_x182 * var_x318) - var_x182 * var_x320;
        }
        else
        {
            const double y_save = rY[9];
            rY[9] += delta;
            const double temp = EvaluateYDerivative9(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[9])/delta;
            rY[9] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative10(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.989081601403786
        

        // Mathematics
        const double var_ICaL__f2ss = 0.23000000000000001 + 0.77000000000000002 / (1.0 + exp(2.4457142857142857 + 0.14285714285714285 * var_chaste_interface__cell__V)); // dimensionless
        const double var_ICaL__tauf2 = 1 / (0.0054000000000000003 + 0.042299999999999997 * exp(-1.20074125971556 * pow((-1 + 0.053842757610673787 * var_chaste_interface__cell__V), 2))); // ms
        const double d_dt_chaste_interface_var_ICaL__f2 = (-var_chaste_interface__ICaL__f2 + var_ICaL__f2ss) / var_ICaL__tauf2; // 1 / ms

        return d_dt_chaste_interface_var_ICaL__f2;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative10(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            

            const double var_x321 = 0.042299999999999997 * exp(-1.20074125971556 * pow((-1 + 0.053842757610673787 * var_chaste_interface__cell__V), 2));
            
            partialF = -0.0054000000000000003 - var_x321;
        }
        else
        {
            const double y_save = rY[10];
            rY[10] += delta;
            const double temp = EvaluateYDerivative10(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[10])/delta;
            rY[10] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative11(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.255981702631947
        

        // Mathematics
        const double var_IKr__tauxr = 43.0 + 1 / (exp(-7.6769999999999996 - 0.012800000000000001 * var_chaste_interface__cell__V) + exp(-5.4950000000000001 + 0.1691 * var_chaste_interface__cell__V)); // ms
        const double var_IKr__xrss = 1 / (1.0 + exp(-2.1819999999999999 - 0.18190000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_IKr__xr = (-var_chaste_interface__IKr__xr + var_IKr__xrss) / var_IKr__tauxr; // 1 / ms

        return d_dt_chaste_interface_var_IKr__xr;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative11(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            

            const double var_x324 = exp(-7.6769999999999996 - 0.012800000000000001 * var_chaste_interface__cell__V);
            const double var_x325 = exp(-5.4950000000000001 + 0.1691 * var_chaste_interface__cell__V);
            const double var_x326 = var_x324 + var_x325;
            const double var_x327 = 1 / var_x326;
            const double var_x328 = 1 / (43.0 + var_x327);
            
            partialF = -var_x328;
        }
        else
        {
            const double y_save = rY[11];
            rY[11] += delta;
            const double temp = EvaluateYDerivative11(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[11])/delta;
            rY[11] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative12(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.0147449166757808
        

        // Mathematics
        const double var_IKs__tauxs = 1 / (((fabs(44.600000000000001 + var_chaste_interface__cell__V) < 1.0030090258350555e-8) ? (7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)) - 49850000.061936118 * (44.599999989969909 + var_chaste_interface__cell__V) * (-7.6328986866047728e-13 / (1.0 - exp(9.9999999875755032e-8)) - 7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)))) : (7.6100000000000007e-5 * (44.600000000000001 + var_chaste_interface__cell__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__cell__V)))) + ((fabs(-0.55000000000000004 + var_chaste_interface__cell__V) < 7.8124999999948028e-7) ? (-2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)) + 640000.00000042573 * (-0.54999921875000002 + var_chaste_interface__cell__V) * (2.8124999999996902e-10 / (-1.0 + exp(9.9999999999988984e-8)) + 2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)))) : (0.00036000000000000002 * (-0.55000000000000004 + var_chaste_interface__cell__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__cell__V))))); // ms
        const double var_IKs__xss = 1 / (1.0 + exp(0.4251012145748988 - 0.04048582995951417 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs1 = (-var_chaste_interface__IKs__xs1 + var_IKs__xss) / var_IKs__tauxs; // 1 / ms

        return d_dt_chaste_interface_var_IKs__xs1;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative12(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            

            const double var_x332 = 1 / (-1.0 + exp(-9.999999999987797e-8));
            const double var_x333 = 1 / (-1.0 + exp(9.9999999999988984e-8));
            const double var_x334 = exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__cell__V);
            const double var_x335 = 1.0 - var_x334;
            const double var_x336 = 7.6100000000000007e-5 / var_x335;
            const double var_x337 = 44.600000000000001 + var_chaste_interface__cell__V;
            const double var_x339 = -0.55000000000000004 + var_chaste_interface__cell__V;
            const double var_x340 = fabs(var_x339) < 7.8124999999948028e-7;
            const double var_x341 = 1 / (1.0 - exp(9.9999999875755032e-8));
            const double var_x342 = 1 / (1.0 - exp(-9.9999999875755032e-8));
            const double var_x343 = exp(-0.070400000000000004 + 0.128 * var_chaste_interface__cell__V);
            const double var_x344 = -1.0 + var_x343;
            const double var_x345 = 0.00036000000000000002 / var_x344;
            const double var_x347 = fabs(var_x337) < 1.0030090258350555e-8;
            const double var_x349 = 2.8124999999965681e-10 * var_x332;
            const double var_x350 = var_x336 * var_x337;
            const double var_x351 = 7.6328986866047728e-13 * var_x342;
            const double var_x352 = var_x339 * var_x345;
            const double var_x353 = ((var_x340) ? (var_x350 - var_x349 + 640000.00000042573 * (-0.54999921875000002 + var_chaste_interface__cell__V) * (var_x349 + 2.8124999999996902e-10 * var_x333)) : ((var_x347) ? (var_x351 + var_x352 - 49850000.061936118 * (44.599999989969909 + var_chaste_interface__cell__V) * (-var_x351 - 7.6328986866047728e-13 * var_x341)) : (var_x350 + var_x352)));
            
            partialF = -var_x353;
        }
        else
        {
            const double y_save = rY[12];
            rY[12] += delta;
            const double temp = EvaluateYDerivative12(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[12])/delta;
            rY[12] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative13(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.0147504787196957
        

        // Mathematics
        const double var_IKs__tauxs = 1 / (((fabs(44.600000000000001 + var_chaste_interface__cell__V) < 1.0030090258350555e-8) ? (7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)) - 49850000.061936118 * (44.599999989969909 + var_chaste_interface__cell__V) * (-7.6328986866047728e-13 / (1.0 - exp(9.9999999875755032e-8)) - 7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)))) : (7.6100000000000007e-5 * (44.600000000000001 + var_chaste_interface__cell__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__cell__V)))) + ((fabs(-0.55000000000000004 + var_chaste_interface__cell__V) < 7.8124999999948028e-7) ? (-2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)) + 640000.00000042573 * (-0.54999921875000002 + var_chaste_interface__cell__V) * (2.8124999999996902e-10 / (-1.0 + exp(9.9999999999988984e-8)) + 2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)))) : (0.00036000000000000002 * (-0.55000000000000004 + var_chaste_interface__cell__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__cell__V))))); // ms
        const double var_IKs__xss = 1 / (1.0 + exp(0.4251012145748988 - 0.04048582995951417 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_IKs__xs2 = 0.5 * (-var_chaste_interface__IKs__xs2 + var_IKs__xss) / var_IKs__tauxs; // 1 / ms

        return d_dt_chaste_interface_var_IKs__xs2;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative13(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            

            const double var_x332 = 1 / (-1.0 + exp(-9.999999999987797e-8));
            const double var_x333 = 1 / (-1.0 + exp(9.9999999999988984e-8));
            const double var_x334 = exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__cell__V);
            const double var_x335 = 1.0 - var_x334;
            const double var_x336 = 7.6100000000000007e-5 / var_x335;
            const double var_x337 = 44.600000000000001 + var_chaste_interface__cell__V;
            const double var_x339 = -0.55000000000000004 + var_chaste_interface__cell__V;
            const double var_x340 = fabs(var_x339) < 7.8124999999948028e-7;
            const double var_x341 = 1 / (1.0 - exp(9.9999999875755032e-8));
            const double var_x342 = 1 / (1.0 - exp(-9.9999999875755032e-8));
            const double var_x343 = exp(-0.070400000000000004 + 0.128 * var_chaste_interface__cell__V);
            const double var_x344 = -1.0 + var_x343;
            const double var_x345 = 0.00036000000000000002 / var_x344;
            const double var_x347 = fabs(var_x337) < 1.0030090258350555e-8;
            const double var_x349 = 2.8124999999965681e-10 * var_x332;
            const double var_x350 = var_x336 * var_x337;
            const double var_x351 = 7.6328986866047728e-13 * var_x342;
            const double var_x352 = var_x339 * var_x345;
            const double var_x353 = ((var_x340) ? (var_x350 - var_x349 + 640000.00000042573 * (-0.54999921875000002 + var_chaste_interface__cell__V) * (var_x349 + 2.8124999999996902e-10 * var_x333)) : ((var_x347) ? (var_x351 + var_x352 - 49850000.061936118 * (44.599999989969909 + var_chaste_interface__cell__V) * (-var_x351 - 7.6328986866047728e-13 * var_x341)) : (var_x350 + var_x352)));
            
            partialF = -0.5 * var_x353;
        }
        else
        {
            const double y_save = rY[13];
            rY[13] += delta;
            const double temp = EvaluateYDerivative13(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[13])/delta;
            rY[13] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative14(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.00894974857468432
        

        // Mathematics
        const double var_Ito__ay = 25.0 * exp(-1.6000000000000001 + 0.040000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(-1.6000000000000001 + 0.040000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double var_Ito__by = 25.0 * exp(-3.6000000000000001 - 0.040000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(-3.6000000000000001 - 0.040000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_Ito__ydv = (1.0 - var_chaste_interface__Ito__ydv) * var_Ito__ay - var_Ito__by * var_chaste_interface__Ito__ydv; // 1 / ms

        return d_dt_chaste_interface_var_Ito__ydv;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative14(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            

            const double var_x355 = 0.040000000000000001 * var_chaste_interface__cell__V;
            const double var_x356 = exp(-1.6000000000000001 + var_x355);
            const double var_x357 = 1.0 + var_x356;
            const double var_x358 = var_x356 / var_x357;
            const double var_x360 = exp(-3.6000000000000001 - var_x355);
            const double var_x361 = 1.0 + var_x360;
            const double var_x362 = var_x360 / var_x361;
            
            partialF = -25.0 * var_x358 - 25.0 * var_x362;
        }
        else
        {
            const double y_save = rY[14];
            rY[14] += delta;
            const double temp = EvaluateYDerivative14(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[14])/delta;
            rY[14] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative15(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.999992183094244
        

        // Mathematics
        const double var_Ito__ay2 = 0.029999999999999999 / (1.0 + exp(12.0 + 0.20000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double var_Ito__by2 = 0.20000000000000001 * exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_Ito__ydv2 = (1.0 - var_chaste_interface__Ito__ydv2) * var_Ito__ay2 - var_Ito__by2 * var_chaste_interface__Ito__ydv2; // 1 / ms

        return d_dt_chaste_interface_var_Ito__ydv2;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative15(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            

            const double var_x365 = 0.20000000000000001 * var_chaste_interface__cell__V;
            const double var_x366 = exp(5.0 + var_x365);
            const double var_x367 = 1.0 + var_x366;
            const double var_x369 = var_x366 / var_x367;
            const double var_x370 = exp(12.0 + var_x365);
            const double var_x371 = 1.0 + var_x370;
            const double var_x373 = 1 / var_x371;
            
            partialF = -0.029999999999999999 * var_x373 - 0.20000000000000001 * var_x369;
        }
        else
        {
            const double y_save = rY[15];
            rY[15] += delta;
            const double temp = EvaluateYDerivative15(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[15])/delta;
            rY[15] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative16(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.787996527242362
        

        // Mathematics
        const double var_Ito__ay3 = 0.0022499999999999998 / (1.0 + exp(12.0 + 0.20000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double var_Ito__by3 = 0.10000000000000001 * exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_Ito__zdv = (1.0 - var_chaste_interface__Ito__zdv) * var_Ito__ay3 - var_Ito__by3 * var_chaste_interface__Ito__zdv; // 1 / ms

        return d_dt_chaste_interface_var_Ito__zdv;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative16(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            

            const double var_x365 = 0.20000000000000001 * var_chaste_interface__cell__V;
            const double var_x366 = exp(5.0 + var_x365);
            const double var_x367 = 1.0 + var_x366;
            const double var_x369 = var_x366 / var_x367;
            const double var_x370 = exp(12.0 + var_x365);
            const double var_x371 = 1.0 + var_x370;
            const double var_x373 = 1 / var_x371;
            
            partialF = -0.10000000000000001 * var_x369 - 0.0022499999999999998 * var_x373;
        }
        else
        {
            const double y_save = rY[16];
            rY[16] += delta;
            const double temp = EvaluateYDerivative16(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[16])/delta;
            rY[16] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative17(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.0014969201082975
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.000225131045297696
        

        // Mathematics
        const double var_Ito2__Kmto2 = 0.1502; // mM
        const double var_Ito2__AAss = 1 / (1.0 + var_Ito2__Kmto2 / var_chaste_interface__Ca__Ca_ss); // dimensionless
        const double d_dt_chaste_interface_var_Ito2__AA = var_Ito2__AAss - var_chaste_interface__Ito2__AA; // 1 / ms

        return d_dt_chaste_interface_var_Ito2__AA;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative17(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            
            partialF = -1.0;
        }
        else
        {
            const double y_save = rY[17];
            rY[17] += delta;
            const double temp = EvaluateYDerivative17(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[17])/delta;
            rY[17] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative18(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.000382187369845771
        

        // Mathematics
        const double var_INal__amL = ((fabs(47.130000000000003 + var_chaste_interface__cell__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double var_INal__bmL = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__cell__V); // per_ms
        const double d_dt_chaste_interface_var_INal__mL = (1.0 - var_chaste_interface__INal__mL) * var_INal__amL - var_INal__bmL * var_chaste_interface__INal__mL; // 1 / ms

        return d_dt_chaste_interface_var_INal__mL;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative18(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            

            const double var_x52 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x261 = 1 / (1.0 - exp(1.0000000000287557e-7));
            const double var_x262 = 1 / (1.0 - exp(-1.0000000000287557e-7));
            const double var_x263 = 47.130000000000003 + var_chaste_interface__cell__V;
            const double var_x264 = fabs(var_x263) < 1.0000000000287557e-6;
            const double var_x265 = -var_x52;
            const double var_x266 = exp(-4.7130000000000001 + var_x265);
            const double var_x267 = 1.0 - var_x266;
            const double var_x268 = 0.32000000000000001 / var_x267;
            const double var_x270 = exp(-0.090909090909090912 * var_chaste_interface__cell__V);
            const double var_x272 = 3.200000000092018e-7 * var_x262;
            const double var_x273 = -((var_x264) ? (var_x272 - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-var_x272 - 3.200000000092018e-7 * var_x261)) : (var_x263 * var_x268)) - 0.080000000000000002 * var_x270;
            
            partialF = var_x273;
        }
        else
        {
            const double y_save = rY[18];
            rY[18] += delta;
            const double temp = EvaluateYDerivative18(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[18])/delta;
            rY[18] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative19(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.488129650338831
        

        // Mathematics
        const double var_INal__hLss = 1 / (1.0 + exp(14.918032786885247 + 0.16393442622950821 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_INal__hL = 0.0016666666666666668 * var_INal__hLss - 0.0016666666666666668 * var_chaste_interface__INal__hL; // 1 / ms

        return d_dt_chaste_interface_var_INal__hL;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative19(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            
            partialF = -0.0016666666666666668;
        }
        else
        {
            const double y_save = rY[19];
            rY[19] += delta;
            const double temp = EvaluateYDerivative19(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[19])/delta;
            rY[19] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative20(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Irel__CaMKtrap = rY[20];
        // Units: dimensionless; Initial value: 0.0971591072782679
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.000225131045297696
        

        // Mathematics
        const double var_Irel__CaMK0 = 0.050000000000000003; // dimensionless
        const double var_Irel__Km = 0.0015; // mM
        const double var_Irel__CaMKbound = (1.0 - var_chaste_interface__Irel__CaMKtrap) * var_Irel__CaMK0 / (1.0 + var_Irel__Km / var_chaste_interface__Ca__Ca_ss); // dimensionless
        const double var_Irel__CaMKactive = var_Irel__CaMKbound + var_chaste_interface__Irel__CaMKtrap; // dimensionless
        const double d_dt_chaste_interface_var_Irel__CaMKtrap = -0.00068000000000000005 * var_chaste_interface__Irel__CaMKtrap + 0.050000000000000003 * (-var_chaste_interface__Irel__CaMKtrap + var_Irel__CaMKactive) * var_Irel__CaMKactive; // 1 / ms

        return d_dt_chaste_interface_var_Irel__CaMKtrap;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative20(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__Irel__CaMKtrap = rY[20];
            // Units: dimensionless; Initial value: 0.0971591072782679
            double var_chaste_interface__Ca__Ca_ss = rY[28];
            // Units: mM; Initial value: 0.000225131045297696
            

            const double var_x222 = 1.0 - var_chaste_interface__Irel__CaMKtrap;
            const double var_x223 = 1 / var_chaste_interface__Ca__Ca_ss;
            const double var_x224 = 1.0 + 0.0015 * var_x223;
            const double var_x225 = 1 / var_x224;
            const double var_x226 = 0.050000000000000003 * var_x225;
            const double var_x227 = var_x222 * var_x226 + var_chaste_interface__Irel__CaMKtrap;
            const double var_x242 = 1 - var_x226;
            const double var_x376 = 0.0025000000000000005 * var_x225;
            
            partialF = -0.00068000000000000005 - var_x227 * var_x376 + var_x222 * var_x242 * var_x376;
        }
        else
        {
            const double y_save = rY[20];
            rY[20] += delta;
            const double temp = EvaluateYDerivative20(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[20])/delta;
            rY[20] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative21(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 5.38067794749339e-07
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.99805432294836
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999986839648304
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.961568137796573
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.854261813196152
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.989081601403786
        double var_chaste_interface__Irel__ro = rY[21];
        // Units: dimensionless; Initial value: -1.07543858779373e-32
        double var_chaste_interface__Ca__Ca_jsr = rY[26];
        // Units: mM; Initial value: 4.1270622547589
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.000225131045297696
        

        // Mathematics
        const double var_Irel__dro_inf = pow(var_chaste_interface__Ca__Ca_jsr, 1.8999999999999999) / (pow(var_chaste_interface__Ca__Ca_jsr, 1.8999999999999999) + 1644.6531773416521 * pow((var_chaste_interface__Ca__Ca_ss / (0.0028 + var_chaste_interface__Ca__Ca_ss)), 1.8999999999999999)); // dimensionless
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[4] / (-1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICaL__ICaL = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca; // uA_per_uF
        const double var_Irel__ross = var_Irel__dro_inf / (1.0 + 1 / pow(var_ICaL__ICaL, 2)); // dimensionless
        const double d_dt_chaste_interface_var_Irel__ro = 0.33333333333333331 * var_Irel__ross - 0.33333333333333331 * var_chaste_interface__Irel__ro; // 1 / ms

        return d_dt_chaste_interface_var_Irel__ro;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative21(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            
            partialF = -0.33333333333333331;
        }
        else
        {
            const double y_save = rY[21];
            rY[21] += delta;
            const double temp = EvaluateYDerivative21(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[21])/delta;
            rY[21] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative22(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 5.38067794749339e-07
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.99805432294836
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999986839648304
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.961568137796573
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.854261813196152
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.989081601403786
        double var_chaste_interface__Irel__CaMKtrap = rY[20];
        // Units: dimensionless; Initial value: 0.0971591072782679
        double var_chaste_interface__Irel__ri = rY[22];
        // Units: dimensionless; Initial value: 0.716604593002322
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.000225131045297696
        

        // Mathematics
        const double var_Irel__CaMK0 = 0.050000000000000003; // dimensionless
        const double var_Irel__Km = 0.0015; // mM
        const double var_Irel__CaMKbound = (1.0 - var_chaste_interface__Irel__CaMKtrap) * var_Irel__CaMK0 / (1.0 + var_Irel__Km / var_chaste_interface__Ca__Ca_ss); // dimensionless
        const double var_Irel__CaMKactive = var_Irel__CaMKbound + var_chaste_interface__Irel__CaMKtrap; // dimensionless
        const double var_Irel__KmCaMK = 0.14999999999999999; // dimensionless
        const double var_Irel__dtau_rel_max = 10.0; // ms
        const double var_Irel__dtau_rel = var_Irel__CaMKactive * var_Irel__dtau_rel_max / (var_Irel__CaMKactive + var_Irel__KmCaMK); // ms
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[4] / (-1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICaL__ICaL = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca; // uA_per_uF
        const double var_Irel__cafac = 1 / (1.0 + exp(3.3333333333333335 + 66.666666666666671 * var_ICaL__ICaL)); // dimensionless
        const double var_Irel__riss = 1 / (1.0 + exp(-16.0 + 80.0 * var_Irel__cafac + 40000.0 * var_chaste_interface__Ca__Ca_ss)); // dimensionless
        const double var_Irel__tauri = 3.0 + (350.0 - var_Irel__dtau_rel) / (1.0 + exp(-15.0 + 5000.0 * var_chaste_interface__Ca__Ca_ss + 15.0 * var_Irel__cafac)) + var_Irel__dtau_rel; // ms
        const double d_dt_chaste_interface_var_Irel__ri = (-var_chaste_interface__Irel__ri + var_Irel__riss) / var_Irel__tauri; // 1 / ms

        return d_dt_chaste_interface_var_Irel__ri;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative22(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            double var_chaste_interface__ICaL__d = rY[5];
            // Units: dimensionless; Initial value: 5.38067794749339e-07
            double var_chaste_interface__ICaL__dp = rY[6];
            // Units: dimensionless; Initial value: 8.99805432294836
            double var_chaste_interface__ICaL__f = rY[7];
            // Units: dimensionless; Initial value: 0.999986839648304
            double var_chaste_interface__ICaL__fca = rY[8];
            // Units: dimensionless; Initial value: 0.961568137796573
            double var_chaste_interface__ICaL__fca2 = rY[9];
            // Units: dimensionless; Initial value: 0.854261813196152
            double var_chaste_interface__ICaL__f2 = rY[10];
            // Units: dimensionless; Initial value: 0.989081601403786
            double var_chaste_interface__Irel__CaMKtrap = rY[20];
            // Units: dimensionless; Initial value: 0.0971591072782679
            double var_chaste_interface__Ca__Ca_ss = rY[28];
            // Units: mM; Initial value: 0.000225131045297696
            

            const double var_x3 = -0.34100000000000003 * mParameters[0];
            const double var_x10 = 0.074871767015599999 * var_chaste_interface__cell__V;
            const double var_x101 = exp(9.9999999999763197e-8);
            const double var_x102 = 1 / (-1.0 + var_x101);
            const double var_x103 = var_chaste_interface__Ca__Ca_ss;
            const double var_x104 = var_x102 * (var_x3 + var_x101 * var_x103);
            const double var_x105 = exp(-9.9999999999763197e-8);
            const double var_x106 = 1 / (-1.0 + var_x105);
            const double var_x107 = var_x106 * (var_x3 + var_x103 * var_x105);
            const double var_x108 = -15.0 + var_chaste_interface__cell__V;
            const double var_x109 = fabs(var_x108) < 1.3356169352718439e-6;
            const double var_x110 = exp(-1.1230765052339999 + var_x10);
            const double var_x111 = var_x3 + var_x103 * var_x110;
            const double var_x112 = -1.0 + var_x110;
            const double var_x113 = mParameters[4] / var_x112;
            const double var_x114 = 14448.004881000332 * var_x113;
            const double var_x115 = var_x111 * var_x114;
            const double var_x120 = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp);
            const double var_x168 = -14.999998664383064 + var_chaste_interface__cell__V;
            const double var_x169 = 0.019296999999954306 * mParameters[4];
            const double var_x170 = var_x107 * var_x169;
            const double var_x171 = var_x168 * (var_x170 + var_x104 * var_x169);
            const double var_x172 = ((var_x109) ? (-var_x170 + 374358.83507888648 * var_x171) : (var_x108 * var_x115));
            const double var_x173 = var_x120 * var_x172 * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca2;
            const double var_x174 = var_x173 * var_chaste_interface__ICaL__fca;
            const double var_x175 = var_x174 * var_chaste_interface__ICaL__f;
            const double var_x222 = 1.0 - var_chaste_interface__Irel__CaMKtrap;
            const double var_x223 = 1 / var_chaste_interface__Ca__Ca_ss;
            const double var_x224 = 1.0 + 0.0015 * var_x223;
            const double var_x225 = 1 / var_x224;
            const double var_x226 = 0.050000000000000003 * var_x225;
            const double var_x227 = var_x222 * var_x226 + var_chaste_interface__Irel__CaMKtrap;
            const double var_x228 = 0.14999999999999999 + var_x227;
            const double var_x229 = 1 / var_x228;
            const double var_x230 = var_x227 * var_x229;
            const double var_x305 = 10.0 * var_x230;
            const double var_x410 = exp(3.3333333333333335 + 66.666666666666671 * var_x175);
            const double var_x411 = 1.0 + var_x410;
            const double var_x413 = 1 / var_x411;
            const double var_x416 = exp(-15.0 + 5000.0 * var_chaste_interface__Ca__Ca_ss + 15.0 * var_x413);
            const double var_x417 = 1.0 + var_x416;
            const double var_x418 = 1 / var_x417;
            const double var_x419 = 350.0 - var_x305;
            const double var_x420 = var_x418 * var_x419;
            const double var_x421 = 1 / (3.0 + var_x305 + var_x420);
            
            partialF = -var_x421;
        }
        else
        {
            const double y_save = rY[22];
            rY[22] += delta;
            const double temp = EvaluateYDerivative22(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[22])/delta;
            rY[22] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative23(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.000223768331231758
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.99765453819431
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.998157020148849
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.488129650338831
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 17.9964119779802
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 20.1543792471096
        

        // Mathematics
        const double var_Environment__F = 96485.0; // C_per_mole
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_INa__gNa = pow(var_chaste_interface__INa__m, 3) * mParameters[9] * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // mS_per_uF
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__allo = 1 / (1.0 + pow(var_INaCa__KmCa, 2) / pow(var_INaCa__ca_i_NaCa, 2)); // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3]); // dimensionless
        const double var_Na__CTNaClmax = 9.8442999999999999e-6; // mM_per_ms
        const double var_INaCa__denom2 = pow(var_INaCa__KmNao, 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_INaCa__ca_i_NaCa / var_INaCa__KmCai) * mParameters[0]; // mM4
        const double var_INaCa__denom3 = pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] + pow(mParameters[3], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_INaCa__denom1 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__num = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] * exp(var_Environment__FonRT * var_INaCa__eta * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__INaCa = mParameters[15] * var_INaCa__allo * var_INaCa__num / ((var_INaCa__denom2 + var_INaCa__denom3) * var_INaCa__denom1); // uA_per_uF
        const double var_INaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_Environment__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaK__INaK = mParameters[2] * var_INaK__fnak * mParameters[16] / ((1.0 + pow(var_INaK__kmnai, 2) / pow(var_chaste_interface__Na__Na_i, 2)) * (mParameters[2] + var_INaK__kmko)); // uA_per_uF
        const double var_cell__a = 0.0011000000000000001; // cm
        const double var_cell__l = 0.01; // cm
        const double var_cell__ageo = 2.0 * M_PI * pow(var_cell__a, 2) + 2.0 * M_PI * var_cell__a * var_cell__l; // cm2
        const double var_cell__Acap = 2.0 * var_cell__ageo; // uF
        const double var_cell__AF = var_cell__Acap / var_Environment__F; // uF_mole_per_C
        const double var_cell__vcell = 1000.0 * M_PI * pow(var_cell__a, 2) * var_cell__l; // uL
        const double var_cell__vmyo = 0.68000000000000005 * var_cell__vcell; // uL
        const double var_reversal_potentials__ECl = -log(mParameters[1] / var_chaste_interface__Cl__Cl_i) / var_Environment__FonRT; // mV
        const double var_reversal_potentials__ENa = log(mParameters[3] / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__INa = (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INa__gNa; // uA_per_uF
        const double var_INal__INal = pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * mParameters[11] * var_chaste_interface__INal__hL; // uA_per_uF
        const double var_Na__CTNaCl = pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4) * var_Na__CTNaClmax / (59494197.640692554 + pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4)); // mM_per_ms
        const double var_cell__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + var_INa__INa + var_INal__INal; // uA_per_uF
        const double d_dt_chaste_interface_var_Na__Na_i = -var_cell__AF * var_cell__naiont / var_cell__vmyo + var_Na__CTNaCl; // mM / ms

        return d_dt_chaste_interface_var_Na__Na_i;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative23(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            double var_chaste_interface__Ca__Ca_i = rY[1];
            // Units: mM; Initial value: 0.000223768331231758
            double var_chaste_interface__INa__H = rY[2];
            // Units: dimensionless; Initial value: 0.99765453819431
            double var_chaste_interface__INa__m = rY[3];
            // Units: dimensionless; Initial value: 0.000382187369845771
            double var_chaste_interface__INa__J = rY[4];
            // Units: dimensionless; Initial value: 0.998157020148849
            double var_chaste_interface__INal__mL = rY[18];
            // Units: dimensionless; Initial value: 0.000382187369845771
            double var_chaste_interface__INal__hL = rY[19];
            // Units: dimensionless; Initial value: 0.488129650338831
            double var_chaste_interface__Na__Na_i = rY[23];
            // Units: mM; Initial value: 17.9964119779802
            double var_chaste_interface__Cl__Cl_i = rY[25];
            // Units: mM; Initial value: 20.1543792471096
            

            const double var_x29 = 0.0374358835078 * var_chaste_interface__cell__V;
            const double var_x39 = pow(var_chaste_interface__INal__mL, 3) * mParameters[11];
            const double var_x40 = var_x39 * var_chaste_interface__INal__hL;
            const double var_x49 = pow(var_chaste_interface__INa__m, 3);
            const double var_x50 = var_x49 * mParameters[9] * var_chaste_interface__INa__J;
            const double var_x51 = var_x50 * var_chaste_interface__INa__H;
            const double var_x81 = exp(0.01310255922773 * var_chaste_interface__cell__V);
            const double var_x82 = pow(var_chaste_interface__Na__Na_i, 3);
            const double var_x83 = var_x82 * mParameters[0];
            const double var_x84 = var_x81 * var_x83;
            const double var_x85 = exp(-0.024333324280070002 * var_chaste_interface__cell__V);
            const double var_x86 = pow(mParameters[3], 3);
            const double var_x87 = var_x86 * var_chaste_interface__Ca__Ca_i;
            const double var_x88 = 1.0 + 0.27000000000000002 * var_x85;
            const double var_x89 = 1 / var_x88;
            const double var_x90 = 1.0 + 6.9444444444444451e-9 / pow(var_chaste_interface__Ca__Ca_i, 2);
            const double var_x91 = 1 / var_x90;
            const double var_x92 = 1.5 * var_x86;
            const double var_x93 = var_x92 * var_chaste_interface__Ca__Ca_i;
            const double var_x94 = var_x86 * (1.0 + 0.00053738391835633597 * var_x82);
            const double var_x95 = (1.0 + 416.66666666666669 * var_chaste_interface__Ca__Ca_i) * mParameters[0];
            const double var_x96 = 1 / (var_x83 + var_x93 + 1004882.8125 * var_chaste_interface__Ca__Ca_i + 0.0035999999999999999 * var_x94 + 1.3 * var_x82 + 1860.8670000000004 * var_x95);
            const double var_x97 = var_x91 * var_x96 * mParameters[15];
            const double var_x98 = var_x89 * var_x97;
            const double var_x130 = pow(var_chaste_interface__Na__Na_i, 2);
            const double var_x131 = 1 / var_x130;
            const double var_x132 = exp(-0.00374358835078 * var_chaste_interface__cell__V);
            const double var_x133 = exp(0.01485884101040119 * mParameters[3]);
            const double var_x134 = exp(-var_x29);
            const double var_x135 = 1.0 + 0.1245 * var_x132 + 0.036499999999999998 * var_x134 * (-0.14285714285714285 + 0.14285714285714285 * var_x133);
            const double var_x136 = mParameters[2] * mParameters[16] / (1.5 + mParameters[2]);
            const double var_x142 = var_x84 - var_x85 * var_x93;
            const double var_x153 = var_x142 * var_x89 * mParameters[15];
            const double var_x154 = var_x153 * var_x91 / pow((1.2936831875607387e-6 * var_x82 + 0.0018518248862973764 * var_x95 + 1.4927113702623908e-6 * var_x87 + 9.9514091350826051e-7 * var_x83 + 3.5825072886297377e-9 * var_x94 + var_chaste_interface__Ca__Ca_i), 2);
            const double var_x161 = 1 / var_chaste_interface__Na__Na_i;
            const double var_x162 = log(var_x161 * mParameters[3]);
            const double var_x195 = var_x161 * var_x40;
            const double var_x197 = var_x161 * var_x51;
            const double var_x198 = var_x130 * mParameters[0];
            const double var_x199 = -3 * var_x198 - 3.9000000000000004 * var_x130 - 5.8037463182484285e-6 * var_x130 * var_x86;
            const double var_x200 = var_x136 / (var_x135 * var_x82 * pow((0.01 + var_x131), 2));
            const double var_x201 = var_x198 * var_x81 * var_x98;
            const double var_x210 = 1 / var_chaste_interface__Cl__Cl_i;
            const double var_x432 = 1.827729786302835e-16 * var_x154;
            const double var_x433 = log(var_x210 * mParameters[1]);
            const double var_x434 = var_x162 + var_x433;
            const double var_x435 = pow(var_x434, 4);
            const double var_x436 = 2.8839711417381356e-9 * pow(var_x434, 7) / pow((1 + 0.008558014922736952 * var_x435), 2);
            const double var_x437 = 20.048989239405216 * pow(var_x434, 3) / (59494197.640692554 + 509152.23122530844 * var_x435);
            const double var_x438 = var_x161 * var_x436 - var_x161 * var_x437;
            
            partialF = var_x438 - 0.0016433629212878199 * var_x195 - 0.0016433629212878199 * var_x197 - 3.6912445729421236e-6 * var_x200 - 0.00055368668594131857 * var_x201 - var_x199 * var_x432;
        }
        else
        {
            const double y_save = rY[23];
            rY[23] += delta;
            const double temp = EvaluateYDerivative23(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[23])/delta;
            rY[23] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative24(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.000223768331231758
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.255981702631947
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.0147449166757808
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.0147504787196957
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.00894974857468432
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.999992183094244
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.787996527242362
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 17.9964119779802
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 134.555737634453
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 20.1543792471096
        

        // Mathematics
        const double var_Environment__F = 96485.0; // C_per_mole
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_IKr__gkr = 0.5 * sqrt(mParameters[2]) * mParameters[13]; // mS_per_uF
        const double var_IKs__gks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[14]; // mS_per_uF
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3]); // dimensionless
        const double var_K__CTKClmax = 7.0755999999999996e-6; // mM_per_ms
        const double var_IKr__r = 1 / (1.0 + 2.5 * exp(2.8000000000000003 + 0.10000000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_Environment__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaK__INaK = mParameters[2] * var_INaK__fnak * mParameters[16] / ((1.0 + pow(var_INaK__kmnai, 2) / pow(var_chaste_interface__Na__Na_i, 2)) * (mParameters[2] + var_INaK__kmko)); // uA_per_uF
        const double var_Ito__rv = ((var_chaste_interface__cell__V <= 0) ? (exp(var_chaste_interface__cell__V / mParameters[19])) : (1.0)); // dimensionless
        const double var_cell__a = 0.0011000000000000001; // cm
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_cell__l = 0.01; // cm
        const double var_cell__ageo = 2.0 * M_PI * pow(var_cell__a, 2) + 2.0 * M_PI * var_cell__a * var_cell__l; // cm2
        const double var_cell__Acap = 2.0 * var_cell__ageo; // uF
        const double var_cell__AF = var_cell__Acap / var_Environment__F; // uF_mole_per_C
        const double var_cell__vcell = 1000.0 * M_PI * pow(var_cell__a, 2) * var_cell__l; // uL
        const double var_cell__vmyo = 0.68000000000000005 * var_cell__vcell; // uL
        const double var_reversal_potentials__ECl = -log(mParameters[1] / var_chaste_interface__Cl__Cl_i) / var_Environment__FonRT; // mV
        const double var_reversal_potentials__EK = log(mParameters[2] / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)); // per_ms
        const double var_IK1__bk1 = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__IK1 = 0.5 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[10] * var_IK1__ak1 / (var_IK1__ak1 + var_IK1__bk1); // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[12] / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKr__gkr * var_IKr__r * var_chaste_interface__IKr__xr; // uA_per_uF
        const double var_Ito__Ito = pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[18] * var_Ito__rv * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv; // uA_per_uF
        const double var_K__CTKCl = (-var_reversal_potentials__ECl + var_reversal_potentials__EK) * var_K__CTKClmax / (87.825100000000006 - var_reversal_potentials__ECl + var_reversal_potentials__EK); // mM_per_ms
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((mParameters[3] * var_reversal_potentials__prnak + mParameters[2]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_Environment__FonRT; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__cell__V) * var_IKs__gks * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_uF
        const double var_cell__kiont = 0.5 * var_cell__i_Stim - 2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito__Ito; // uA_per_uF
        const double d_dt_chaste_interface_var_K__K_i = -var_cell__AF * var_cell__kiont / var_cell__vmyo + var_K__CTKCl; // mM / ms

        return d_dt_chaste_interface_var_K__K_i;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative24(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            double var_chaste_interface__Ca__Ca_i = rY[1];
            // Units: mM; Initial value: 0.000223768331231758
            double var_chaste_interface__IKr__xr = rY[11];
            // Units: dimensionless; Initial value: 0.255981702631947
            double var_chaste_interface__IKs__xs1 = rY[12];
            // Units: dimensionless; Initial value: 0.0147449166757808
            double var_chaste_interface__IKs__xs2 = rY[13];
            // Units: dimensionless; Initial value: 0.0147504787196957
            double var_chaste_interface__Ito__ydv = rY[14];
            // Units: dimensionless; Initial value: 0.00894974857468432
            double var_chaste_interface__Ito__ydv2 = rY[15];
            // Units: dimensionless; Initial value: 0.999992183094244
            double var_chaste_interface__Ito__zdv = rY[16];
            // Units: dimensionless; Initial value: 0.787996527242362
            double var_chaste_interface__Na__Na_i = rY[23];
            // Units: mM; Initial value: 17.9964119779802
            double var_chaste_interface__K__K_i = rY[24];
            // Units: mM; Initial value: 134.555737634453
            double var_chaste_interface__Cl__Cl_i = rY[25];
            // Units: mM; Initial value: 20.1543792471096
            

            const double var_x20 = exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V);
            const double var_x21 = 1.0 + var_x20;
            const double var_x22 = mParameters[12] / var_x21;
            const double var_x41 = 1 / var_chaste_interface__Ca__Ca_i;
            const double var_x42 = pow(var_x41, 1.3999999999999999);
            const double var_x43 = 1.0 + 6.4818210260626455e-7 * var_x42;
            const double var_x44 = 1 / var_x43;
            const double var_x46 = mParameters[14] * var_chaste_interface__IKs__xs2;
            const double var_x52 = 0.10000000000000001 * var_chaste_interface__cell__V;
            const double var_x53 = exp(2.8000000000000003 + var_x52);
            const double var_x54 = sqrt(mParameters[2]);
            const double var_x55 = var_x54 * mParameters[13] / (1.0 + 2.5 * var_x53);
            const double var_x57 = 1 / var_chaste_interface__K__K_i;
            const double var_x58 = log(var_x57 * mParameters[2]);
            const double var_x59 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 6.370892781261781 * var_x58);
            const double var_x60 = 1.0 + var_x59;
            const double var_x61 = 1 / var_x60;
            const double var_x62 = exp(-2.4444678999999998 + 13.738155796238718 * var_x58 - 0.51429999999999998 * var_chaste_interface__cell__V);
            const double var_x63 = 1.0 + var_x62;
            const double var_x64 = 1 / var_x63;
            const double var_x65 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 1.6494869150646332 * var_x58);
            const double var_x66 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 2.1455350448257708 * var_x58);
            const double var_x67 = var_x65 + 0.49124000000000001 * var_x66;
            const double var_x68 = var_x64 * var_x67;
            const double var_x69 = var_x54 * mParameters[10] / (var_x68 + 1.02 * var_x61);
            const double var_x70 = var_x61 * var_x69;
            const double var_x71 = 26.712338705500134 * var_x58;
            const double var_x72 = -var_x71 + var_chaste_interface__cell__V;
            const double var_x74 = pow(var_chaste_interface__Ito__ydv, 3);
            const double var_x75 = 1 / mParameters[19];
            const double var_x76 = exp(var_x75 * var_chaste_interface__cell__V);
            const double var_x77 = var_chaste_interface__cell__V <= 0;
            const double var_x78 = ((var_x77) ? (var_x76) : (1.0));
            const double var_x79 = var_x74 * var_x78 * mParameters[18] * var_chaste_interface__Ito__zdv;
            const double var_x80 = var_x79 * var_chaste_interface__Ito__ydv2;
            const double var_x125 = var_x54 * var_x72;
            const double var_x127 = var_x59 / pow(var_x60, 2);
            const double var_x128 = var_x69 * var_x72;
            const double var_x138 = var_x62 * var_x67 / pow(var_x63, 2);
            const double var_x140 = var_x125 * var_x61 * mParameters[10] / pow((var_x61 + 0.98039215686274506 * var_x68), 2);
            const double var_x157 = 1 / (0.018329999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i);
            const double var_x202 = var_x22 * var_x57;
            const double var_x203 = var_x55 * var_x57 * var_chaste_interface__IKr__xr;
            const double var_x204 = var_x57 * var_x70;
            const double var_x205 = var_x57 * var_x80;
            const double var_x206 = var_x127 * var_x57;
            const double var_x207 = 6.4983106368870169 * var_x206 - var_x64 * (1.6494869150646332 * var_x57 * var_x65 + 1.0539726354202117 * var_x57 * var_x66) - 13.738155796238718 * var_x138 * var_x57;
            const double var_x208 = var_x128 * var_x206;
            const double var_x210 = 1 / var_chaste_interface__Cl__Cl_i;
            const double var_x433 = log(var_x210 * mParameters[1]);
            const double var_x440 = -6.1520742882368733e-5 - 3.6912445729421236e-5 * var_x44;
            const double var_x441 = var_x440 * var_x46;
            const double var_x442 = var_x441 * var_chaste_interface__IKs__xs1;
            const double var_x444 = 3.0157226903121925e-5 * var_x140;
            const double var_x445 = var_x157 * var_x442;
            const double var_x446 = var_x71 + 26.712338705500134 * var_x433;
            const double var_x447 = 0.00018900582374463672 / (87.825100000000006 + var_x446);
            const double var_x448 = 2.4504050574883893e-8 * var_x446 / pow((1 + 0.30415380916731244 * var_x433 + 0.30415380916731244 * var_x58), 2);
            const double var_x449 = var_x448 * var_x57 - var_x447 * var_x57;
            
            partialF = var_x449 + 0.00019989044893084398 * var_x208 + 26.712338705500134 * var_x445 - 0.00082168146064390995 * var_x203 - 0.0016433629212878199 * var_x202 - 0.0016433629212878199 * var_x205 - 0.0008381150898567882 * var_x204 - var_x207 * var_x444;
        }
        else
        {
            const double y_save = rY[24];
            rY[24] += delta;
            const double temp = EvaluateYDerivative24(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[24])/delta;
            rY[24] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative25(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.0014969201082975
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 17.9964119779802
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 134.555737634453
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 20.1543792471096
        

        // Mathematics
        const double var_Environment__F = 96485.0; // C_per_mole
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_K__CTKClmax = 7.0755999999999996e-6; // mM_per_ms
        const double var_Na__CTNaClmax = 9.8442999999999999e-6; // mM_per_ms
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (0.0096484999999999991 * (-mParameters[1] * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-mParameters[1] * exp(0.0374358835078 * var_chaste_interface__cell__V) + var_chaste_interface__Cl__Cl_i) * mParameters[17] * var_chaste_interface__cell__V / (1.0 - exp(0.0374358835078 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_chaste_interface__Ito2__AA * var_Ito2__Ito2_max; // uA_per_uF
        const double var_cell__a = 0.0011000000000000001; // cm
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_cell__l = 0.01; // cm
        const double var_cell__ageo = 2.0 * M_PI * pow(var_cell__a, 2) + 2.0 * M_PI * var_cell__a * var_cell__l; // cm2
        const double var_cell__Acap = 2.0 * var_cell__ageo; // uF
        const double var_cell__AF = var_cell__Acap / var_Environment__F; // uF_mole_per_C
        const double var_cell__vcell = 1000.0 * M_PI * pow(var_cell__a, 2) * var_cell__l; // uL
        const double var_cell__vmyo = 0.68000000000000005 * var_cell__vcell; // uL
        const double var_reversal_potentials__ECl = -log(mParameters[1] / var_chaste_interface__Cl__Cl_i) / var_Environment__FonRT; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__cell__V) * mParameters[7]; // uA_per_uF
        const double var_cell__clont = 0.5 * var_cell__i_Stim + var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
        const double var_reversal_potentials__EK = log(mParameters[2] / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_K__CTKCl = (-var_reversal_potentials__ECl + var_reversal_potentials__EK) * var_K__CTKClmax / (87.825100000000006 - var_reversal_potentials__ECl + var_reversal_potentials__EK); // mM_per_ms
        const double var_reversal_potentials__ENa = log(mParameters[3] / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_Na__CTNaCl = pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4) * var_Na__CTNaClmax / (59494197.640692554 + pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4)); // mM_per_ms
        const double d_dt_chaste_interface_var_Cl__Cl_i = var_cell__AF * var_cell__clont / var_cell__vmyo + var_K__CTKCl + var_Na__CTNaCl; // mM / ms

        return d_dt_chaste_interface_var_Cl__Cl_i;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative25(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            double var_chaste_interface__Ito2__AA = rY[17];
            // Units: dimensionless; Initial value: 0.0014969201082975
            double var_chaste_interface__Na__Na_i = rY[23];
            // Units: mM; Initial value: 17.9964119779802
            double var_chaste_interface__K__K_i = rY[24];
            // Units: mM; Initial value: 134.555737634453
            double var_chaste_interface__Cl__Cl_i = rY[25];
            // Units: mM; Initial value: 20.1543792471096
            

            const double var_x1 = exp(9.9999999999999995e-8);
            const double var_x5 = exp(-9.9999999999999995e-8);
            const double var_x8 = fabs(var_chaste_interface__cell__V);
            const double var_x23 = 1 / (1.0 - var_x1);
            const double var_x26 = 1 / (1.0 - var_x5);
            const double var_x28 = var_x8 < 2.671233870550013e-6;
            const double var_x29 = 0.0374358835078 * var_chaste_interface__cell__V;
            const double var_x30 = exp(var_x29);
            const double var_x33 = 1.0 - var_x30;
            const double var_x34 = 1 / var_x33;
            const double var_x35 = 3612.001220250083 * var_x34;
            const double var_x37 = mParameters[17] * var_chaste_interface__cell__V;
            const double var_x57 = 1 / var_chaste_interface__K__K_i;
            const double var_x58 = log(var_x57 * mParameters[2]);
            const double var_x71 = 26.712338705500134 * var_x58;
            const double var_x161 = 1 / var_chaste_interface__Na__Na_i;
            const double var_x162 = log(var_x161 * mParameters[3]);
            const double var_x188 = 0.0096484999999999991 * mParameters[17];
            const double var_x189 = var_x188 * var_x23;
            const double var_x190 = var_x188 * var_x26;
            const double var_x209 = ((var_x28) ? (-var_x190 + (0.5 + 187179.41753900002 * var_chaste_interface__cell__V) * (var_x189 + var_x190)) : (var_x35 * var_x37)) * var_chaste_interface__Ito2__AA;
            const double var_x210 = 1 / var_chaste_interface__Cl__Cl_i;
            const double var_x211 = var_x210 * mParameters[7];
            const double var_x433 = log(var_x210 * mParameters[1]);
            const double var_x434 = var_x162 + var_x433;
            const double var_x435 = pow(var_x434, 4);
            const double var_x436 = 2.8839711417381356e-9 * pow(var_x434, 7) / pow((1 + 0.008558014922736952 * var_x435), 2);
            const double var_x437 = 20.048989239405216 * pow(var_x434, 3) / (59494197.640692554 + 509152.23122530844 * var_x435);
            const double var_x439 = var_x210 * var_x436 - var_x210 * var_x437;
            const double var_x446 = var_x71 + 26.712338705500134 * var_x433;
            const double var_x447 = 0.00018900582374463672 / (87.825100000000006 + var_x446);
            const double var_x448 = 2.4504050574883893e-8 * var_x446 / pow((1 + 0.30415380916731244 * var_x433 + 0.30415380916731244 * var_x58), 2);
            const double var_x450 = var_x210 * var_x448 - var_x210 * var_x447;
            
            partialF = var_x439 + var_x450 + 6.1520742882368733e-5 * var_x209 - 0.0016433629212878199 * var_x211;
        }
        else
        {
            const double y_save = rY[25];
            rY[25] += delta;
            const double temp = EvaluateYDerivative25(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[25])/delta;
            rY[25] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative26(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Irel__ro = rY[21];
        // Units: dimensionless; Initial value: -1.07543858779373e-32
        double var_chaste_interface__Irel__ri = rY[22];
        // Units: dimensionless; Initial value: 0.716604593002322
        double var_chaste_interface__Ca__Ca_jsr = rY[26];
        // Units: mM; Initial value: 4.1270622547589
        double var_chaste_interface__Ca__Ca_nsr = rY[27];
        // Units: mM; Initial value: 4.14835141174613
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.000225131045297696
        

        // Mathematics
        const double var_Ca__csqnbar = 10.0; // mM
        const double var_Ca__kmcsqn = 0.80000000000000004; // mM
        const double var_Ca__bcsqn = 1 / (1.0 + var_Ca__csqnbar * var_Ca__kmcsqn / pow((var_chaste_interface__Ca__Ca_jsr + var_Ca__kmcsqn), 2)); // dimensionless
        const double var_Idiff_Itr__itr = 0.0083333333333333332 * var_chaste_interface__Ca__Ca_nsr - 0.0083333333333333332 * var_chaste_interface__Ca__Ca_jsr; // mM_per_ms
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[4] / (-1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_Irel__vg = 1 / (1.0 + exp(2.6000000000000001 + 0.20000000000000001 * var_ICaL__ibarca)); // dimensionless
        const double var_Irel__Grel = 3000.0 * var_Irel__vg; // per_ms
        const double var_Irel__irelcicr = (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_jsr) * var_Irel__Grel * var_chaste_interface__Irel__ri * var_chaste_interface__Irel__ro; // mM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_jsr = (-var_Irel__irelcicr + var_Idiff_Itr__itr) * var_Ca__bcsqn; // mM / ms

        return d_dt_chaste_interface_var_Ca__Ca_jsr;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative26(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            double var_chaste_interface__Irel__ro = rY[21];
            // Units: dimensionless; Initial value: -1.07543858779373e-32
            double var_chaste_interface__Irel__ri = rY[22];
            // Units: dimensionless; Initial value: 0.716604593002322
            double var_chaste_interface__Ca__Ca_jsr = rY[26];
            // Units: mM; Initial value: 4.1270622547589
            double var_chaste_interface__Ca__Ca_nsr = rY[27];
            // Units: mM; Initial value: 4.14835141174613
            double var_chaste_interface__Ca__Ca_ss = rY[28];
            // Units: mM; Initial value: 0.000225131045297696
            

            const double var_x3 = -0.34100000000000003 * mParameters[0];
            const double var_x10 = 0.074871767015599999 * var_chaste_interface__cell__V;
            const double var_x101 = exp(9.9999999999763197e-8);
            const double var_x102 = 1 / (-1.0 + var_x101);
            const double var_x103 = var_chaste_interface__Ca__Ca_ss;
            const double var_x104 = var_x102 * (var_x3 + var_x101 * var_x103);
            const double var_x105 = exp(-9.9999999999763197e-8);
            const double var_x106 = 1 / (-1.0 + var_x105);
            const double var_x107 = var_x106 * (var_x3 + var_x103 * var_x105);
            const double var_x108 = -15.0 + var_chaste_interface__cell__V;
            const double var_x109 = fabs(var_x108) < 1.3356169352718439e-6;
            const double var_x110 = exp(-1.1230765052339999 + var_x10);
            const double var_x111 = var_x3 + var_x103 * var_x110;
            const double var_x112 = -1.0 + var_x110;
            const double var_x113 = mParameters[4] / var_x112;
            const double var_x114 = 14448.004881000332 * var_x113;
            const double var_x115 = var_x111 * var_x114;
            const double var_x168 = -14.999998664383064 + var_chaste_interface__cell__V;
            const double var_x169 = 0.019296999999954306 * mParameters[4];
            const double var_x170 = var_x107 * var_x169;
            const double var_x171 = var_x168 * (var_x170 + var_x104 * var_x169);
            const double var_x172 = ((var_x109) ? (-var_x170 + 374358.83507888648 * var_x171) : (var_x108 * var_x115));
            const double var_x451 = 0.80000000000000004 + var_chaste_interface__Ca__Ca_jsr;
            const double var_x452 = pow(var_x451, (-2));
            const double var_x453 = 1 / (1.0 + 8.0 * var_x452);
            const double var_x454 = exp(2.6000000000000001 + 0.20000000000000001 * var_x172);
            const double var_x455 = 1.0 + var_x454;
            const double var_x456 = -var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_jsr;
            const double var_x460 = 1 / var_x455;
            const double var_x461 = var_x460 * var_chaste_interface__Irel__ri;
            const double var_x465 = var_x461 * var_chaste_interface__Irel__ro;
            const double var_x466 = 3000.0 * var_x465;
            const double var_x467 = var_x453;
            
            partialF = var_x467 * (-0.0083333333333333332 - var_x466) + 0.25 * (0.0083333333333333332 * var_chaste_interface__Ca__Ca_nsr - 0.0083333333333333332 * var_chaste_interface__Ca__Ca_jsr - var_x456 * var_x466) / (pow(var_x451, 3) * pow((0.125 + var_x452), 2));
        }
        else
        {
            const double y_save = rY[26];
            rY[26] += delta;
            const double temp = EvaluateYDerivative26(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[26])/delta;
            rY[26] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative27(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.000223768331231758
        double var_chaste_interface__Irel__CaMKtrap = rY[20];
        // Units: dimensionless; Initial value: 0.0971591072782679
        double var_chaste_interface__Ca__Ca_jsr = rY[26];
        // Units: mM; Initial value: 4.1270622547589
        double var_chaste_interface__Ca__Ca_nsr = rY[27];
        // Units: mM; Initial value: 4.14835141174613
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.000225131045297696
        

        // Mathematics
        const double var_Idiff_Itr__itr = 0.0083333333333333332 * var_chaste_interface__Ca__Ca_nsr - 0.0083333333333333332 * var_chaste_interface__Ca__Ca_jsr; // mM_per_ms
        const double var_Irel__CaMK0 = 0.050000000000000003; // dimensionless
        const double var_Irel__Km = 0.0015; // mM
        const double var_Irel__CaMKbound = (1.0 - var_chaste_interface__Irel__CaMKtrap) * var_Irel__CaMK0 / (1.0 + var_Irel__Km / var_chaste_interface__Ca__Ca_ss); // dimensionless
        const double var_Irel__CaMKactive = var_Irel__CaMKbound + var_chaste_interface__Irel__CaMKtrap; // dimensionless
        const double var_Irel__KmCaMK = 0.14999999999999999; // dimensionless
        const double var_Iup_Ileak__Kmup = 0.00092000000000000003; // mM
        const double var_Iup_Ileak__dJupmax = 0.75; // dimensionless
        const double var_Iup_Ileak__dJup = var_Irel__CaMKactive * var_Iup_Ileak__dJupmax / (var_Irel__CaMKactive + var_Irel__KmCaMK); // dimensionless
        const double var_Iup_Ileak__dKmPLBmax = 0.00017000000000000001; // mM
        const double var_Iup_Ileak__dKmPLB = var_Irel__CaMKactive * var_Iup_Ileak__dKmPLBmax / (var_Irel__CaMKactive + var_Irel__KmCaMK); // mM
        const double var_Iup_Ileak__iupmax = 0.0043750000000000004; // mM_per_ms
        const double var_Iup_Ileak__iup = (1.0 + var_Iup_Ileak__dJup) * var_chaste_interface__Ca__Ca_i * var_Iup_Ileak__iupmax / (-var_Iup_Ileak__dKmPLB + var_chaste_interface__Ca__Ca_i + var_Iup_Ileak__Kmup); // mM_per_ms
        const double var_Iup_Ileak__nsrmax = 15.0; // mM
        const double var_Iup_Ileak__ileak = var_chaste_interface__Ca__Ca_nsr * var_Iup_Ileak__iupmax / var_Iup_Ileak__nsrmax; // mM_per_ms
        const double var_cell__a = 0.0011000000000000001; // cm
        const double var_cell__l = 0.01; // cm
        const double var_cell__vcell = 1000.0 * M_PI * pow(var_cell__a, 2) * var_cell__l; // uL
        const double var_cell__vjsr = 0.0047999999999999996 * var_cell__vcell; // uL
        const double var_cell__vnsr = 0.055199999999999999 * var_cell__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_nsr = -var_Iup_Ileak__ileak - var_Idiff_Itr__itr * var_cell__vjsr / var_cell__vnsr + var_Iup_Ileak__iup; // mM / ms

        return d_dt_chaste_interface_var_Ca__Ca_nsr;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative27(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            

            
            partialF = -0.0010163043478260869;
        }
        else
        {
            const double y_save = rY[27];
            rY[27] += delta;
            const double temp = EvaluateYDerivative27(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[27])/delta;
            rY[27] = y_save;
        }
        return partialF;
    }
    double Celldavies_isap_2012FromCellMLGRL1::EvaluateYDerivative28(double var_chaste_interface__Environment__time, std::vector<double>& rY)
    {
        
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.000223768331231758
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 5.38067794749339e-07
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.99805432294836
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999986839648304
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.961568137796573
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.854261813196152
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.989081601403786
        double var_chaste_interface__Irel__ro = rY[21];
        // Units: dimensionless; Initial value: -1.07543858779373e-32
        double var_chaste_interface__Irel__ri = rY[22];
        // Units: dimensionless; Initial value: 0.716604593002322
        double var_chaste_interface__Ca__Ca_jsr = rY[26];
        // Units: mM; Initial value: 4.1270622547589
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.000225131045297696
        

        // Mathematics
        const double var_Ca__BSLmax = 1.1240000000000001; // mM
        const double var_Ca__BSRmax = 0.047; // mM
        const double var_Ca__KmBSL = 0.0086999999999999994; // mM
        const double var_Ca__KmBSR = 0.00087000000000000001; // mM
        const double var_Ca__bss = 1 / (1.0 + var_Ca__BSLmax * var_Ca__KmBSL / pow((var_chaste_interface__Ca__Ca_ss + var_Ca__KmBSL), 2) + var_Ca__BSRmax * var_Ca__KmBSR / pow((var_chaste_interface__Ca__Ca_ss + var_Ca__KmBSR), 2)); // dimensionless
        const double var_Environment__F = 96485.0; // C_per_mole
        const double var_Idiff_Itr__idiff = 5.0 * var_chaste_interface__Ca__Ca_ss - 5.0 * var_chaste_interface__Ca__Ca_i; // mM_per_ms
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[4] / (-1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICaL__ICaL = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca; // uA_per_uF
        const double var_Irel__vg = 1 / (1.0 + exp(2.6000000000000001 + 0.20000000000000001 * var_ICaL__ibarca)); // dimensionless
        const double var_Irel__Grel = 3000.0 * var_Irel__vg; // per_ms
        const double var_Irel__irelcicr = (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_jsr) * var_Irel__Grel * var_chaste_interface__Irel__ri * var_chaste_interface__Irel__ro; // mM_per_ms
        const double var_cell__a = 0.0011000000000000001; // cm
        const double var_cell__l = 0.01; // cm
        const double var_cell__ageo = 2.0 * M_PI * pow(var_cell__a, 2) + 2.0 * M_PI * var_cell__a * var_cell__l; // cm2
        const double var_cell__Acap = 2.0 * var_cell__ageo; // uF
        const double var_cell__AF = var_cell__Acap / var_Environment__F; // uF_mole_per_C
        const double var_cell__vcell = 1000.0 * M_PI * pow(var_cell__a, 2) * var_cell__l; // uL
        const double var_cell__vjsr = 0.0047999999999999996 * var_cell__vcell; // uL
        const double var_cell__vss = 0.02 * var_cell__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_ss = (-var_Idiff_Itr__idiff + var_Irel__irelcicr * var_cell__vjsr / var_cell__vss - 0.5 * var_ICaL__ICaL * var_cell__AF / var_cell__vss) * var_Ca__bss; // mM / ms

        return d_dt_chaste_interface_var_Ca__Ca_ss;
    }

    double Celldavies_isap_2012FromCellMLGRL1::EvaluatePartialDerivative28(double var_chaste_interface__Environment__time, std::vector<double>& rY, double delta, bool forceNumerical)
    {
        double partialF;
        if (!forceNumerical && this->mUseAnalyticJacobian)
        {
            double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
            // Units: mV; Initial value: -93.2932771154856
            double var_chaste_interface__Ca__Ca_i = rY[1];
            // Units: mM; Initial value: 0.000223768331231758
            double var_chaste_interface__ICaL__d = rY[5];
            // Units: dimensionless; Initial value: 5.38067794749339e-07
            double var_chaste_interface__ICaL__dp = rY[6];
            // Units: dimensionless; Initial value: 8.99805432294836
            double var_chaste_interface__ICaL__f = rY[7];
            // Units: dimensionless; Initial value: 0.999986839648304
            double var_chaste_interface__ICaL__fca = rY[8];
            // Units: dimensionless; Initial value: 0.961568137796573
            double var_chaste_interface__ICaL__fca2 = rY[9];
            // Units: dimensionless; Initial value: 0.854261813196152
            double var_chaste_interface__ICaL__f2 = rY[10];
            // Units: dimensionless; Initial value: 0.989081601403786
            double var_chaste_interface__Irel__ro = rY[21];
            // Units: dimensionless; Initial value: -1.07543858779373e-32
            double var_chaste_interface__Irel__ri = rY[22];
            // Units: dimensionless; Initial value: 0.716604593002322
            double var_chaste_interface__Ca__Ca_jsr = rY[26];
            // Units: mM; Initial value: 4.1270622547589
            double var_chaste_interface__Ca__Ca_ss = rY[28];
            // Units: mM; Initial value: 0.000225131045297696
            

            const double var_x3 = -0.34100000000000003 * mParameters[0];
            const double var_x10 = 0.074871767015599999 * var_chaste_interface__cell__V;
            const double var_x101 = exp(9.9999999999763197e-8);
            const double var_x102 = 1 / (-1.0 + var_x101);
            const double var_x103 = var_chaste_interface__Ca__Ca_ss;
            const double var_x104 = var_x102 * (var_x3 + var_x101 * var_x103);
            const double var_x105 = exp(-9.9999999999763197e-8);
            const double var_x106 = 1 / (-1.0 + var_x105);
            const double var_x107 = var_x106 * (var_x3 + var_x103 * var_x105);
            const double var_x108 = -15.0 + var_chaste_interface__cell__V;
            const double var_x109 = fabs(var_x108) < 1.3356169352718439e-6;
            const double var_x110 = exp(-1.1230765052339999 + var_x10);
            const double var_x111 = var_x3 + var_x103 * var_x110;
            const double var_x112 = -1.0 + var_x110;
            const double var_x113 = mParameters[4] / var_x112;
            const double var_x114 = 14448.004881000332 * var_x113;
            const double var_x115 = var_x111 * var_x114;
            const double var_x116 = var_x108 * var_x110;
            const double var_x120 = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp);
            const double var_x121 = var_x120 * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2;
            const double var_x168 = -14.999998664383064 + var_chaste_interface__cell__V;
            const double var_x169 = 0.019296999999954306 * mParameters[4];
            const double var_x170 = var_x107 * var_x169;
            const double var_x171 = var_x168 * (var_x170 + var_x104 * var_x169);
            const double var_x172 = ((var_x109) ? (-var_x170 + 374358.83507888648 * var_x171) : (var_x108 * var_x115));
            const double var_x173 = var_x120 * var_x172 * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca2;
            const double var_x174 = var_x173 * var_chaste_interface__ICaL__fca;
            const double var_x175 = var_x174 * var_chaste_interface__ICaL__f;
            const double var_x212 = var_x105 * var_x106;
            const double var_x213 = var_x169 * var_x212;
            const double var_x214 = var_x213 + var_x101 * var_x102 * var_x169;
            const double var_x215 = ((var_x109) ? (-var_x213 + var_x214 * (-5615382.0261832969 + 374358.83507888648 * var_chaste_interface__cell__V)) : (var_x114 * var_x116));
            const double var_x216 = var_x121 * var_x215;
            const double var_x454 = exp(2.6000000000000001 + 0.20000000000000001 * var_x172);
            const double var_x455 = 1.0 + var_x454;
            const double var_x456 = -var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_jsr;
            const double var_x457 = var_x456 * var_chaste_interface__Irel__ro;
            const double var_x458 = var_x454 * var_x457 * var_chaste_interface__Irel__ri / pow(var_x455, 2);
            const double var_x460 = 1 / var_x455;
            const double var_x461 = var_x460 * var_chaste_interface__Irel__ri;
            const double var_x465 = var_x461 * var_chaste_interface__Irel__ro;
            const double var_x468 = var_x215 * var_x458;
            const double var_x472 = 0.0086999999999999994 + var_chaste_interface__Ca__Ca_ss;
            const double var_x473 = 0.00087000000000000001 + var_chaste_interface__Ca__Ca_ss;
            const double var_x474 = 1.0 + 0.0097788000000000007 / pow(var_x472, 2) + 4.0890000000000003e-5 / pow(var_x473, 2);
            const double var_x475 = 1 / var_x474;
            const double var_x476 = var_x475;
            const double var_x479 = 719.99999999999989 * var_x465;
            
            partialF = var_x476 * (-5.0 - var_x479 - 0.0010458526290002684 * var_x216 - 143.99999999999997 * var_x468) + (0.019557600000000001 / pow(var_x472, 3) + 8.1780000000000006e-5 / pow(var_x473, 3)) * (5.0 * var_chaste_interface__Ca__Ca_i - 5.0 * var_chaste_interface__Ca__Ca_ss - 0.0010458526290002684 * var_x175 + var_x456 * var_x479) / pow(var_x474, 2);
        }
        else
        {
            const double y_save = rY[28];
            rY[28] += delta;
            const double temp = EvaluateYDerivative28(var_chaste_interface__Environment__time, rY);
            partialF = (temp-mEvalF[28])/delta;
            rY[28] = y_save;
        }
        return partialF;
    }

    std::vector<double> Celldavies_isap_2012FromCellMLGRL1::ComputeDerivedQuantities(double var_chaste_interface__Environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.000223768331231758
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.99765453819431
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.998157020148849
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.255981702631947
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.0147449166757808
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.0147504787196957
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.00894974857468432
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.999992183094244
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.787996527242362
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.0014969201082975
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.488129650338831
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 17.9964119779802
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 134.555737634453
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 20.1543792471096
        
        // Mathematics
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_IKr__gkr = 0.5 * sqrt(mParameters[2]) * mParameters[13]; // mS_per_uF
        const double var_IKs__gks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[14]; // mS_per_uF
        const double var_INa__gNa = pow(var_chaste_interface__INa__m, 3) * mParameters[9] * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // mS_per_uF
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__allo = 1 / (1.0 + pow(var_INaCa__KmCa, 2) / pow(var_INaCa__ca_i_NaCa, 2)); // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3]); // dimensionless
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * mParameters[8] / (var_chaste_interface__Ca__Ca_i + var_IpCa__kmpca); // uA_per_uF
        const double var_IpCa__IpCa_converted = HeartConfig::Instance()->GetCapacitance() * var_IpCa__IpCa; // uA_per_cm2
        const double var_INaCa__denom2 = pow(var_INaCa__KmNao, 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_INaCa__ca_i_NaCa / var_INaCa__KmCai) * mParameters[0]; // mM4
        const double var_INaCa__denom3 = pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] + pow(mParameters[3], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_ICab__ICab = ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[6] * var_chaste_interface__cell__V / (-1.0 + exp(0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICab__ICab_converted = HeartConfig::Instance()->GetCapacitance() * var_ICab__ICab; // uA_per_cm2
        const double var_IKr__r = 1 / (1.0 + 2.5 * exp(2.8000000000000003 + 0.10000000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaCa__denom1 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__num = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] * exp(var_Environment__FonRT * var_INaCa__eta * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__INaCa = mParameters[15] * var_INaCa__allo * var_INaCa__num / ((var_INaCa__denom2 + var_INaCa__denom3) * var_INaCa__denom1); // uA_per_uF
        const double var_INaCa__INaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa__INaCa; // uA_per_cm2
        const double var_INaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_Environment__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaK__INaK = mParameters[2] * var_INaK__fnak * mParameters[16] / ((1.0 + pow(var_INaK__kmnai, 2) / pow(var_chaste_interface__Na__Na_i, 2)) * (mParameters[2] + var_INaK__kmko)); // uA_per_uF
        const double var_INaK__INaK_converted = HeartConfig::Instance()->GetCapacitance() * var_INaK__INaK; // uA_per_cm2
        const double var_Ito__rv = ((var_chaste_interface__cell__V <= 0) ? (exp(var_chaste_interface__cell__V / mParameters[19])) : (1.0)); // dimensionless
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (0.0096484999999999991 * (-mParameters[1] * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-mParameters[1] * exp(0.0374358835078 * var_chaste_interface__cell__V) + var_chaste_interface__Cl__Cl_i) * mParameters[17] * var_chaste_interface__cell__V / (1.0 - exp(0.0374358835078 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_chaste_interface__Ito2__AA * var_Ito2__Ito2_max; // uA_per_uF
        const double var_Ito2__Ito2_converted = HeartConfig::Instance()->GetCapacitance() * var_Ito2__Ito2; // uA_per_cm2
        const double var_cell__a = 0.0011000000000000001; // cm
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_cell__l = 0.01; // cm
        const double var_cell__ageo = 2.0 * M_PI * pow(var_cell__a, 2) + 2.0 * M_PI * var_cell__a * var_cell__l; // cm2
        const double var_cell__Acap = 2.0 * var_cell__ageo; // uF
        const double var_reversal_potentials__ECl = -log(mParameters[1] / var_chaste_interface__Cl__Cl_i) / var_Environment__FonRT; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__cell__V) * mParameters[7]; // uA_per_uF
        const double var_IClb__IClb_converted = HeartConfig::Instance()->GetCapacitance() * var_IClb__IClb; // uA_per_cm2
        const double var_reversal_potentials__EK = log(mParameters[2] / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)); // per_ms
        const double var_IK1__bk1 = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__IK1 = 0.5 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[10] * var_IK1__ak1 / (var_IK1__ak1 + var_IK1__bk1); // uA_per_uF
        const double var_IK1__IK1_converted = HeartConfig::Instance()->GetCapacitance() * var_IK1__IK1; // uA_per_cm2
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[12] / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_IKp__IKp_converted = HeartConfig::Instance()->GetCapacitance() * var_IKp__IKp; // uA_per_cm2
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKr__gkr * var_IKr__r * var_chaste_interface__IKr__xr; // uA_per_uF
        const double var_IKr__IKr_converted = HeartConfig::Instance()->GetCapacitance() * var_IKr__IKr; // uA_per_cm2
        const double var_Ito__Ito = pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[18] * var_Ito__rv * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv; // uA_per_uF
        const double var_Ito__Ito_converted = HeartConfig::Instance()->GetCapacitance() * var_Ito__Ito; // uA_per_cm2
        const double var_reversal_potentials__ENa = log(mParameters[3] / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__INa = (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INa__gNa; // uA_per_uF
        const double var_INa__INa_converted = HeartConfig::Instance()->GetCapacitance() * var_INa__INa; // uA_per_cm2
        const double var_INal__INal = pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * mParameters[11] * var_chaste_interface__INal__hL; // uA_per_uF
        const double var_INal__INal_converted = HeartConfig::Instance()->GetCapacitance() * var_INal__INal; // uA_per_cm2
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((mParameters[3] * var_reversal_potentials__prnak + mParameters[2]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_Environment__FonRT; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__cell__V) * var_IKs__gks * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_uF
        const double var_IKs__IKs_converted = HeartConfig::Instance()->GetCapacitance() * var_IKs__IKs; // uA_per_cm2

        std::vector<double> dqs(16);
        dqs[0] = var_ICab__ICab_converted;
        dqs[1] = var_IClb__IClb_converted;
        dqs[2] = var_IpCa__IpCa_converted;
        dqs[3] = var_cell__Acap;
        dqs[4] = var_INa__INa_converted;
        dqs[5] = var_IK1__IK1_converted;
        dqs[6] = var_INal__INal_converted;
        dqs[7] = var_IKp__IKp_converted;
        dqs[8] = var_IKr__IKr_converted;
        dqs[9] = var_IKs__IKs_converted;
        dqs[10] = var_INaCa__INaCa_converted;
        dqs[11] = var_INaK__INaK_converted;
        dqs[12] = var_cell__i_Stim_converted;
        dqs[13] = var_Ito2__Ito2_converted;
        dqs[14] = var_Ito__Ito_converted;
        dqs[15] = var_chaste_interface__Environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Celldavies_isap_2012FromCellMLGRL1>::Initialise(void)
{
    this->mSystemName = "davies_isap_2012";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "ms";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-93.2932771154856);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.000223768331231758);

    // rY[2]:
    this->mVariableNames.push_back("INa__H");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99765453819431);

    // rY[3]:
    this->mVariableNames.push_back("INa__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000382187369845771);

    // rY[4]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.998157020148849);

    // rY[5]:
    this->mVariableNames.push_back("ICaL__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.38067794749339e-07);

    // rY[6]:
    this->mVariableNames.push_back("ICaL__dp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.99805432294836);

    // rY[7]:
    this->mVariableNames.push_back("ICaL__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999986839648304);

    // rY[8]:
    this->mVariableNames.push_back("ICaL__fca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.961568137796573);

    // rY[9]:
    this->mVariableNames.push_back("ICaL__fca2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.854261813196152);

    // rY[10]:
    this->mVariableNames.push_back("ICaL__f2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.989081601403786);

    // rY[11]:
    this->mVariableNames.push_back("IKr__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.255981702631947);

    // rY[12]:
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0147449166757808);

    // rY[13]:
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0147504787196957);

    // rY[14]:
    this->mVariableNames.push_back("Ito__ydv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00894974857468432);

    // rY[15]:
    this->mVariableNames.push_back("Ito__ydv2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999992183094244);

    // rY[16]:
    this->mVariableNames.push_back("Ito__zdv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.787996527242362);

    // rY[17]:
    this->mVariableNames.push_back("Ito2__AA");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0014969201082975);

    // rY[18]:
    this->mVariableNames.push_back("INal__mL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000382187369845771);

    // rY[19]:
    this->mVariableNames.push_back("INal__hL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.488129650338831);

    // rY[20]:
    this->mVariableNames.push_back("Irel__CaMKtrap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0971591072782679);

    // rY[21]:
    this->mVariableNames.push_back("Irel__ro");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(-1.07543858779373e-32);

    // rY[22]:
    this->mVariableNames.push_back("Irel__ri");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.716604593002322);

    // rY[23]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(17.9964119779802);

    // rY[24]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(134.555737634453);

    // rY[25]:
    this->mVariableNames.push_back("Cl__Cl_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(20.1543792471096);

    // rY[26]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(4.1270622547589);

    // rY[27]:
    this->mVariableNames.push_back("NSR_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(4.14835141174613);

    // rY[28]:
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.000225131045297696);

    // mParameters[0]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[1]:
    this->mParameterNames.push_back("extracellular_chloride_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[2]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[4]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("L_per_F_ms");

    // mParameters[5]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_d_gate_power_tau");
    this->mParameterUnits.push_back("ms");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_background_calcium_current_conductance");
    this->mParameterUnits.push_back("L_per_F_ms");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_background_chloride_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_calcium_pump_current_conductance");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_persistent_sodium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_potassium_pump_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_sodium_potassium_pump_current_permeability");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_transient_outward_chloride_current_conductance");
    this->mParameterUnits.push_back("L_per_F_ms");

    // mParameters[18]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[19]:
    this->mParameterNames.push_back("membrane_transient_outward_current_time_independent_rectification_gate_constant");
    this->mParameterUnits.push_back("mV");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("membrane_background_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_background_chloride_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_calcium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_capacitance");
    this->mDerivedQuantityUnits.push_back("uF");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_persistent_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_chloride_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("ms");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Celldavies_isap_2012FromCellMLGRL1)

