#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: Li_Mouse_2010
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: CvodeCellWithDataClamp)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "li_mouse_2010.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"


    boost::shared_ptr<RegularStimulus> Cellli_mouse_2010FromCellMLCvodeDataClamp::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -15.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_chaste_interface__cell__stim_offset = 0; // millisecond
        const double var_chaste_interface__cell__stim_period = 333.33300000000003; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellli_mouse_2010FromCellMLCvodeDataClamp::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
    
    Cellli_mouse_2010FromCellMLCvodeDataClamp::Cellli_mouse_2010FromCellMLCvodeDataClamp(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCellWithDataClamp(
                pOdeSolver,
                36,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellli_mouse_2010FromCellMLCvodeDataClamp>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        NV_Ith_S(this->mParameters, 0) = 4.5; // (var_calcium_fluxes__v1) [per_millisecond]
        NV_Ith_S(this->mParameters, 1) = 1400.0; // (var_cell__Cao) [micromolar]
        NV_Ith_S(this->mParameters, 2) = 5400.0; // (var_cell__Ko) [micromolar]
        NV_Ith_S(this->mParameters, 3) = 134000.0; // (var_cell__Nao) [micromolar]
        NV_Ith_S(this->mParameters, 4) = 2.5; // (var_L_type_calcium_current__P_CaL) [per_millisecond]
        NV_Ith_S(this->mParameters, 5) = 1.0; // (var_cell__Cm) [microF_per_cm2]
        NV_Ith_S(this->mParameters, 6) = 0.0; // (var_membrane_data_clamp_current_conductance) [dimensionless]
        NV_Ith_S(this->mParameters, 7) = 16.0; // (var_fast_sodium_current__g_Na) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 8) = 0.34999999999999998; // (var_time_independent_K_I__g_K1) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 9) = 0.059499999999999997; // (var_non_inactivating_steady_state_K_I__g_Kss) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 10) = 0.016500000000000001; // (var_rapid_delayed_rectifier_K_I__g_Kr) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 11) = 0.0057499999999999999; // (var_slow_delayed_rectifier_K_I__g_Ks) [milliS_per_microF]
        NV_Ith_S(this->mParameters, 12) = 3.9390000000000001; // (var_sodium_calcium_exchange_current__V_max_NCX) [picoA_per_picoF]
    }

    Cellli_mouse_2010FromCellMLCvodeDataClamp::~Cellli_mouse_2010FromCellMLCvodeDataClamp()
    {
    }

    
    double Cellli_mouse_2010FromCellMLCvodeDataClamp::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = NV_Ith_S(rY, 2);
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__L_type_calcium_current__O = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__y_gate = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = NV_Ith_S(rY, 13);
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__potassium_concentration__Ki = NV_Ith_S(rY, 22);
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 0.00346258606821817
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 0.955684946168062
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 0.00336735013094628
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 0.0142335908879204
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.996989882138174
        double var_chaste_interface__slow_transient_outward_K_I__ato_s = NV_Ith_S(rY, 34);
        // Units: dimensionless; Initial value: 0.0443263407760382
        double var_chaste_interface__slow_transient_outward_K_I__ito_s = NV_Ith_S(rY, 35);
        // Units: dimensionless; Initial value: 0.887568880831388
        
        const double var_calcium_activated_chloride_current__E_Cl = -40.0; // millivolt
        const double var_calcium_activated_chloride_current__Km_Cl = 10.0; // micromolar
        const double var_calcium_activated_chloride_current__g_ClCa = 10.0; // milliS_per_microF
        const double var_calcium_background_current__g_Cab = 0.00069999999999999999; // milliS_per_microF
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_pump_current__Km_pCa = 0.28849999999999998; // micromolar
        const double var_calcium_pump_current__i_pCa_max = 0.095500000000000002; // picoA_per_picoF
        const double var_calcium_pump_current__i_pCa = pow(var_calcium_concentration__Cai, 2) * var_calcium_pump_current__i_pCa_max / (pow(var_calcium_concentration__Cai, 2) + pow(var_calcium_pump_current__Km_pCa, 2)); // picoA_per_picoF
        const double var_cell__F = 96.5; // coulomb_per_millimole
        const double var_cell__R = 8.3140000000000001; // joule_per_mole_kelvin
        const double var_cell__T = 308.0; // kelvin
        const double var_calcium_background_current__E_CaN = 0.5 * var_cell__R * var_cell__T * log(NV_Ith_S(mParameters, 1) / var_calcium_concentration__Cai) / var_cell__F; // millivolt
        const double var_L_type_calcium_current__i_CaL = ((fabs(var_chaste_interface__cell__V) < 1.3267937823834197e-6) ? (-376848.31406265136 * (-1.3267937823834197e-6 + var_chaste_interface__cell__V) * (3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5)) + 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5))) - 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5))) : (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((1.0 - exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * NV_Ith_S(mParameters, 5)))); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL_converted = HeartConfig::Instance()->GetCapacitance() * var_L_type_calcium_current__i_CaL; // uA_per_cm2
        const double var_calcium_activated_chloride_current__O_ClCa = 0.20000000000000001 / (1.0 + exp(5.9871794871794881 - 0.12820512820512822 * var_chaste_interface__cell__V)); // dimensionless
        const double var_calcium_activated_chloride_current__i_ClCa = (-var_calcium_activated_chloride_current__E_Cl + var_chaste_interface__cell__V) * var_calcium_activated_chloride_current__O_ClCa * var_calcium_activated_chloride_current__g_ClCa * var_calcium_concentration__Cai / (var_calcium_activated_chloride_current__Km_Cl + var_calcium_concentration__Cai); // picoA_per_picoF
        const double var_calcium_background_current__i_Cab = (-var_calcium_background_current__E_CaN + var_chaste_interface__cell__V) * var_calcium_background_current__g_Cab; // picoA_per_picoF
        const double var_fast_transient_outward_K_I__g_Kto_f = 0.53469999999999995; // milliS_per_microF
        const double var_fast_transient_outward_K_I__E_K = var_cell__R * var_cell__T * log(NV_Ith_S(mParameters, 2) / var_chaste_interface__potassium_concentration__Ki) / var_cell__F; // millivolt
        const double var_fast_transient_outward_K_I__i_Kto_f = pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_fast_transient_outward_K_I__g_Kto_f * var_chaste_interface__fast_transient_outward_K_I__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * NV_Ith_S(mParameters, 9) * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss_converted = HeartConfig::Instance()->GetCapacitance() * var_non_inactivating_steady_state_K_I__i_Kss; // uA_per_cm2
        const double var_slow_delayed_rectifier_K_I__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 11); // picoA_per_picoF
        const double var_slow_delayed_rectifier_K_I__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_slow_delayed_rectifier_K_I__i_Ks; // uA_per_cm2
        const double var_slow_transient_outward_K_I__g_Kto_s = 0; // milliS_per_microF
        const double var_slow_transient_outward_K_I__i_Kto_s = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__slow_transient_outward_K_I__ato_s * var_slow_transient_outward_K_I__g_Kto_s * var_chaste_interface__slow_transient_outward_K_I__ito_s; // picoA_per_picoF
        const double var_sodium_background_current__g_Nab = 0.0025999999999999999; // milliS_per_microF
        const double var_sodium_calcium_exchange_current__K_mAllo = 0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mCai = 3.6000000000000001; // micromolar
        const double var_sodium_calcium_exchange_current__K_mCao = 1400.0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mNai = 12000.0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mNao = 88000.0; // micromolar
        const double var_sodium_calcium_exchange_current__eta = 0.34999999999999998; // dimensionless
        const double var_sodium_calcium_exchange_current__k_sat = 0.27000000000000002; // dimensionless
        const double var_fast_sodium_current__E_Na = var_cell__R * var_cell__T * log((NV_Ith_S(mParameters, 3) + 0.1111111111111111 * NV_Ith_S(mParameters, 2)) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)) / var_cell__F; // millivolt
        const double var_fast_sodium_current__i_Na = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_chaste_interface__fast_sodium_current__O_Na * NV_Ith_S(mParameters, 7); // picoA_per_picoF
        const double var_fast_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_rapid_delayed_rectifier_K_I__i_Kr = (-var_cell__R * var_cell__T * log((NV_Ith_S(mParameters, 2) + 0.020408163265306124 * NV_Ith_S(mParameters, 3)) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) / var_cell__F + var_chaste_interface__cell__V) * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * NV_Ith_S(mParameters, 10); // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_rapid_delayed_rectifier_K_I__i_Kr; // uA_per_cm2
        const double var_sodium_background_current__i_Nab = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_sodium_background_current__g_Nab; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * NV_Ith_S(mParameters, 1) * exp(var_cell__F * var_chaste_interface__cell__V * var_sodium_calcium_exchange_current__eta / (var_cell__R * var_cell__T)) - pow(NV_Ith_S(mParameters, 3), 3) * var_calcium_concentration__Cai * exp((-1.0 + var_sodium_calcium_exchange_current__eta) * var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))) * NV_Ith_S(mParameters, 12) / ((1.0 + pow(var_sodium_calcium_exchange_current__K_mAllo, 2) / pow(var_calcium_concentration__Cai, 2)) * (1.0 + var_sodium_calcium_exchange_current__k_sat * exp((-1.0 + var_sodium_calcium_exchange_current__eta) * var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))) * (pow(NV_Ith_S(mParameters, 3), 3) * var_calcium_concentration__Cai + pow(var_sodium_calcium_exchange_current__K_mNao, 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * NV_Ith_S(mParameters, 1) + pow(var_chaste_interface__sodium_concentration__Nai, 3) * var_sodium_calcium_exchange_current__K_mCao + pow(NV_Ith_S(mParameters, 3), 3) * (1.0 + pow(var_chaste_interface__sodium_concentration__Nai, 3) / pow(var_sodium_calcium_exchange_current__K_mNai, 3)) * var_sodium_calcium_exchange_current__K_mCai + pow(var_sodium_calcium_exchange_current__K_mNai, 3) * (1.0 + var_calcium_concentration__Cai / var_sodium_calcium_exchange_current__K_mCai) * NV_Ith_S(mParameters, 1))); // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX_converted = HeartConfig::Instance()->GetCapacitance() * var_sodium_calcium_exchange_current__i_NCX; // uA_per_cm2
        const double var_sodium_potassium_pump_current__Km_Ko = 1500.0; // micromolar
        const double var_sodium_potassium_pump_current__Km_Nai = 16600.0; // micromolar
        const double var_sodium_potassium_pump_current__i_NaK_max = 2.4860000000000002; // picoA_per_picoF
        const double var_sodium_potassium_pump_current__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * NV_Ith_S(mParameters, 3)); // dimensionless
        const double var_sodium_potassium_pump_current__f_NaK = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T)) + 0.036499999999999998 * var_sodium_potassium_pump_current__sigma * exp(-var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))); // dimensionless
        const double var_sodium_potassium_pump_current__i_NaK = NV_Ith_S(mParameters, 2) * var_sodium_potassium_pump_current__f_NaK * var_sodium_potassium_pump_current__i_NaK_max / ((1.0 + pow((var_sodium_potassium_pump_current__Km_Nai / var_chaste_interface__sodium_concentration__Nai), 2.3999999999999999)) * (NV_Ith_S(mParameters, 2) + var_sodium_potassium_pump_current__Km_Ko)); // picoA_per_picoF
        const double var_time_independent_K_I__i_K1 = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 2) * NV_Ith_S(mParameters, 8) / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + NV_Ith_S(mParameters, 2))); // picoA_per_picoF
        const double var_time_independent_K_I__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_time_independent_K_I__i_K1; // uA_per_cm2
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__g_Kur = 0.25; // milliS_per_microF
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_ultra_rapidly_activating_delayed_rectifier_K_I__g_Kur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur; // picoA_per_picoF
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_calcium_activated_chloride_current__i_ClCa + HeartConfig::Instance()->GetCapacitance() * var_calcium_background_current__i_Cab + HeartConfig::Instance()->GetCapacitance() * var_calcium_pump_current__i_pCa + HeartConfig::Instance()->GetCapacitance() * var_fast_transient_outward_K_I__i_Kto_f + HeartConfig::Instance()->GetCapacitance() * var_slow_transient_outward_K_I__i_Kto_s + HeartConfig::Instance()->GetCapacitance() * var_sodium_background_current__i_Nab + HeartConfig::Instance()->GetCapacitance() * var_sodium_potassium_pump_current__i_NaK + HeartConfig::Instance()->GetCapacitance() * var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur + var_L_type_calcium_current__i_CaL_converted + var_fast_sodium_current__i_Na_converted + var_non_inactivating_steady_state_K_I__i_Kss_converted + var_rapid_delayed_rectifier_K_I__i_Kr_converted + var_slow_delayed_rectifier_K_I__i_Ks_converted + var_sodium_calcium_exchange_current__i_NCX_converted + var_time_independent_K_I__i_K1_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellli_mouse_2010FromCellMLCvodeDataClamp::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = NV_Ith_S(rY, 2);
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaJSR = NV_Ith_S(rY, 3);
        // Units: micromolar; Initial value: 171.167969039613
        double var_chaste_interface__calcium_concentration__CaNSR = NV_Ith_S(rY, 4);
        // Units: micromolar; Initial value: 404.825013216286
        double var_chaste_interface__calcium_fluxes__P_RyR = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.000280539508743811
        double var_chaste_interface__calcium_fluxes__CaMKt = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.729027738385079
        double var_chaste_interface__ryanodine_receptors__P_O1 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        double var_chaste_interface__ryanodine_receptors__P_C2 = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.565182571165673
        double var_chaste_interface__L_type_calcium_current__O = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__I = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: 0.427651445872853
        double var_chaste_interface__L_type_calcium_current__y_gate = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = NV_Ith_S(rY, 13);
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__fast_sodium_current__C_Na1 = NV_Ith_S(rY, 15);
        // Units: dimensionless; Initial value: 0.000420472760277688
        double var_chaste_interface__fast_sodium_current__C_Na2 = NV_Ith_S(rY, 16);
        // Units: dimensionless; Initial value: 0.0240114508843199
        double var_chaste_interface__fast_sodium_current__I1_Na = NV_Ith_S(rY, 17);
        // Units: dimensionless; Initial value: 0.000517471697712382
        double var_chaste_interface__fast_sodium_current__I2_Na = NV_Ith_S(rY, 18);
        // Units: dimensionless; Initial value: 2.45406116958509e-05
        double var_chaste_interface__fast_sodium_current__IF_Na = NV_Ith_S(rY, 19);
        // Units: dimensionless; Initial value: 0.000306123648969581
        double var_chaste_interface__fast_sodium_current__IC_Na2 = NV_Ith_S(rY, 20);
        // Units: dimensionless; Initial value: 0.0174528857380179
        double var_chaste_interface__fast_sodium_current__IC_Na3 = NV_Ith_S(rY, 21);
        // Units: dimensionless; Initial value: 0.402980726914811
        double var_chaste_interface__potassium_concentration__Ki = NV_Ith_S(rY, 22);
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur = NV_Ith_S(rY, 23);
        // Units: dimensionless; Initial value: 0.00346258606821817
        double var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur = NV_Ith_S(rY, 24);
        // Units: dimensionless; Initial value: 0.955684946168062
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 = NV_Ith_S(rY, 28);
        // Units: dimensionless; Initial value: 0.0011733433957123
        double var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 = NV_Ith_S(rY, 29);
        // Units: dimensionless; Initial value: 0.00105586824723736
        double var_chaste_interface__rapid_delayed_rectifier_K_I__I_K = NV_Ith_S(rY, 30);
        // Units: dimensionless; Initial value: 0.00140618453684944
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 0.00336735013094628
        double var_chaste_interface__fast_transient_outward_K_I__ato_f = NV_Ith_S(rY, 32);
        // Units: dimensionless; Initial value: 0.0142335908879204
        double var_chaste_interface__fast_transient_outward_K_I__ito_f = NV_Ith_S(rY, 33);
        // Units: dimensionless; Initial value: 0.996989882138174
        double var_chaste_interface__slow_transient_outward_K_I__ato_s = NV_Ith_S(rY, 34);
        // Units: dimensionless; Initial value: 0.0443263407760382
        double var_chaste_interface__slow_transient_outward_K_I__ito_s = NV_Ith_S(rY, 35);
        // Units: dimensionless; Initial value: 0.887568880831388

        // Mathematics
        double d_dt_chaste_interface_var_cell__V;
        const double d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__iKss = 0; // 1 / millisecond
        const double var_L_type_calcium_current__K_L = 0.29999999999999999; // micromolar
        const double var_L_type_calcium_current__C = 1.0 - var_chaste_interface__L_type_calcium_current__I - var_chaste_interface__L_type_calcium_current__O; // dimensionless
        const double var_L_type_calcium_current__V_L = 0; // millivolt
        const double var_L_type_calcium_current__a = 0.0625; // dimensionless
        const double var_L_type_calcium_current__b = 0.40000000000000002; // dimensionless
        const double var_L_type_calcium_current__const5 = 8.1999999999999993; // millivolt
        const double var_L_type_calcium_current__delta_V_L = 6.4489000000000001; // millivolt
        const double var_L_type_calcium_current__i_CaL_max = 7.0; // picoA_per_picoF
        const double var_L_type_calcium_current__phi_L = 1.798; // dimensionless
        const double var_L_type_calcium_current__t_L = 1.5; // millisecond
        const double var_L_type_calcium_current__alpha_m = var_L_type_calcium_current__phi_L / var_L_type_calcium_current__t_L; // per_millisecond
        const double var_L_type_calcium_current__tau_L = 1150.0; // millisecond
        const double var_L_type_calcium_current__y_gate_tau_const1 = 8.0; // millisecond
        const double var_L_type_calcium_current__y_gate_tau_const2 = 315.0; // millisecond
        const double var_calcium_background_current__g_Cab = 0.00069999999999999999; // milliS_per_microF
        const double var_calcium_concentration__Bmax = 109.0; // micromolar
        const double var_calcium_concentration__CSQN_tot = 50000.0; // micromolar
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_concentration__Kd = 0.59999999999999998; // micromolar
        const double var_calcium_concentration__Bi = 1 / (1.0 + var_calcium_concentration__Bmax * var_calcium_concentration__Kd / pow((var_calcium_concentration__Cai + var_calcium_concentration__Kd), 2)); // dimensionless
        const double var_calcium_concentration__Bss = 1 / (1.0 + var_calcium_concentration__Bmax * var_calcium_concentration__Kd / pow((var_chaste_interface__calcium_concentration__Cass + var_calcium_concentration__Kd), 2)); // dimensionless
        const double var_calcium_concentration__Km_CSQN = 630.0; // micromolar
        const double var_calcium_concentration__BJSR = 1 / (1.0 + var_calcium_concentration__CSQN_tot * var_calcium_concentration__Km_CSQN / pow((var_chaste_interface__calcium_concentration__CaJSR + var_calcium_concentration__Km_CSQN), 2)); // dimensionless
        const double var_calcium_fluxes__CaMKb = 0.050000000000000003 * (1.0 - var_chaste_interface__calcium_fluxes__CaMKt) / (1.0 + 0.69999999999999996 / var_chaste_interface__calcium_concentration__Cass); // dimensionless
        const double var_calcium_fluxes__CaMKa = var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt; // dimensionless
        const double var_calcium_fluxes__Km_up = 0.41199999999999998; // micromolar
        const double var_calcium_fluxes__P_ryr_const1 = -0.01; // per_millisecond
        const double var_calcium_fluxes__P_ryr_const2 = -2.0; // per_millisecond
        const double var_calcium_fluxes__off_rate = 0.00020000000000000001; // per_millisecond
        const double var_calcium_fluxes__on_rate = 0.050000000000000003; // per_millisecond
        const double d_dt_chaste_interface_var_calcium_fluxes__CaMKt = -var_chaste_interface__calcium_fluxes__CaMKt * var_calcium_fluxes__off_rate + (var_calcium_fluxes__CaMKb + var_chaste_interface__calcium_fluxes__CaMKt) * var_calcium_fluxes__CaMKb * var_calcium_fluxes__on_rate; // 1 / millisecond
        const double var_calcium_fluxes__tau_tr = 20.0; // millisecond
        const double var_calcium_fluxes__J_tr = (-var_chaste_interface__calcium_concentration__CaJSR + var_chaste_interface__calcium_concentration__CaNSR) / var_calcium_fluxes__tau_tr; // micromolar_per_millisecond
        const double var_calcium_fluxes__tau_xfer = 8.0; // millisecond
        const double var_calcium_fluxes__J_xfer = (-var_calcium_concentration__Cai + var_chaste_interface__calcium_concentration__Cass) / var_calcium_fluxes__tau_xfer; // micromolar_per_millisecond
        const double var_calcium_fluxes__v1_caff = 10.0; // per_millisecond
        const double var_calcium_fluxes__v2 = 3.0000000000000001e-5; // per_millisecond
        const double var_calcium_fluxes__v2_caff = 0.10000000000000001; // per_millisecond
        const double var_calcium_fluxes__vmup_init = 0.50590000000000002; // micromolar_per_millisecond
        const double var_calcium_fluxes__vmup = (1.0 + 2.9982000000000002 * pow(var_calcium_fluxes__CaMKa, 2.5830000000000002) / (1.7590641847756086 + pow(var_calcium_fluxes__CaMKa, 2.5830000000000002))) * var_calcium_fluxes__vmup_init; // micromolar_per_millisecond
        const double var_calcium_fluxes__J_serca = pow(var_calcium_concentration__Cai, 2) * var_calcium_fluxes__vmup / (pow(var_calcium_concentration__Cai, 2) + pow(var_calcium_fluxes__Km_up, 2)); // micromolar_per_millisecond
        const double var_calcium_pump_current__Km_pCa = 0.28849999999999998; // micromolar
        const double var_calcium_pump_current__i_pCa_max = 0.095500000000000002; // picoA_per_picoF
        const double var_calcium_pump_current__i_pCa = pow(var_calcium_concentration__Cai, 2) * var_calcium_pump_current__i_pCa_max / (pow(var_calcium_concentration__Cai, 2) + pow(var_calcium_pump_current__Km_pCa, 2)); // picoA_per_picoF
        const double var_cell__Acap = 0.00013866; // cm2
        const double var_cell__F = 96.5; // coulomb_per_millimole
        const double var_cell__R = 8.3140000000000001; // joule_per_mole_kelvin
        const double var_cell__T = 308.0; // kelvin
        const double var_calcium_background_current__E_CaN = 0.5 * var_cell__R * var_cell__T * log(NV_Ith_S(mParameters, 1) / var_calcium_concentration__Cai) / var_cell__F; // millivolt
        const double var_L_type_calcium_current__expVL = exp((-var_L_type_calcium_current__V_L + var_chaste_interface__cell__V) / var_L_type_calcium_current__delta_V_L); // dimensionless
        const double var_L_type_calcium_current__alpha_p = var_L_type_calcium_current__expVL / ((1.0 + var_L_type_calcium_current__expVL) * var_L_type_calcium_current__t_L); // per_millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__O = var_L_type_calcium_current__C * var_L_type_calcium_current__alpha_p - var_chaste_interface__L_type_calcium_current__O * var_L_type_calcium_current__alpha_m; // 1 / millisecond
        const double var_L_type_calcium_current__epsilon_m = (var_L_type_calcium_current__a + var_L_type_calcium_current__expVL) * var_L_type_calcium_current__b / ((var_L_type_calcium_current__b * var_L_type_calcium_current__expVL + var_L_type_calcium_current__a) * var_L_type_calcium_current__tau_L); // per_millisecond
        const double var_L_type_calcium_current__epsilon_p = (var_L_type_calcium_current__a + var_L_type_calcium_current__expVL) / ((1.0 + var_L_type_calcium_current__expVL) * var_L_type_calcium_current__K_L * var_L_type_calcium_current__tau_L); // per_micromolar_millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__I = -var_chaste_interface__L_type_calcium_current__I * var_L_type_calcium_current__epsilon_m + var_L_type_calcium_current__C * var_L_type_calcium_current__epsilon_p * var_chaste_interface__calcium_concentration__Cass; // 1 / millisecond
        const double var_L_type_calcium_current__i_CaL = ((fabs(var_chaste_interface__cell__V) < 1.3267937823834197e-6) ? (-376848.31406265136 * (-1.3267937823834197e-6 + var_chaste_interface__cell__V) * (3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5)) + 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5))) - 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5))) : (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((1.0 - exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * NV_Ith_S(mParameters, 5)))); // picoA_per_picoF
        const double d_dt_chaste_interface_var_calcium_fluxes__P_RyR = var_chaste_interface__calcium_fluxes__P_RyR * var_calcium_fluxes__P_ryr_const1 + var_L_type_calcium_current__i_CaL * var_calcium_fluxes__P_ryr_const2 * exp(-0.038580246913580245 * pow((-1 + 0.20000000000000001 * var_chaste_interface__cell__V), 2)) / var_L_type_calcium_current__i_CaL_max; // 1 / millisecond
        const double var_L_type_calcium_current__y_gate_inf = 1 / (1.0 + exp((33.0 + var_chaste_interface__cell__V) / var_L_type_calcium_current__const5)) + 0.10000000000000001 / (1.0 + exp(6.666666666666667 - 0.16666666666666666 * var_chaste_interface__cell__V)); // dimensionless
        const double var_L_type_calcium_current__y_gate_tau = var_L_type_calcium_current__y_gate_tau_const2 / (1.0 + exp(7.5 + 0.25 * var_chaste_interface__cell__V)) + var_L_type_calcium_current__y_gate_tau_const1; // millisecond
        const double d_dt_chaste_interface_var_L_type_calcium_current__y_gate = (-var_chaste_interface__L_type_calcium_current__y_gate + var_L_type_calcium_current__y_gate_inf) / var_L_type_calcium_current__y_gate_tau; // 1 / millisecond
        const double var_calcium_background_current__i_Cab = (-var_calcium_background_current__E_CaN + var_chaste_interface__cell__V) * var_calcium_background_current__g_Cab; // picoA_per_picoF
        const double var_cell__VJSR = 7.7000000000000001e-8; // microlitre
        const double var_cell__VNSR = 2.3099999999999999e-7; // microlitre
        const double var_cell__Vmyo = 2.1999999999999999e-5; // microlitre
        const double var_cell__Vss = 2.1999999999999998e-8; // microlitre
        const double var_cell__prepulses_number = 10000000000.0; // dimensionless
        const double var_chaste_interface__cell__stim_period = 333.33300000000003; // millisecond
        const double var_calcium_fluxes__J_leak = ((var_chaste_interface__environment__time < var_cell__prepulses_number * var_chaste_interface__cell__stim_period) ? ((-var_calcium_concentration__Cai + var_chaste_interface__calcium_concentration__CaNSR) * var_calcium_fluxes__v2) : ((-var_calcium_concentration__Cai + var_chaste_interface__calcium_concentration__CaNSR) * var_calcium_fluxes__v2_caff)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaNSR = (-var_calcium_fluxes__J_leak + var_calcium_fluxes__J_serca) * var_cell__Vmyo / var_cell__VNSR - var_calcium_fluxes__J_tr * var_cell__VJSR / var_cell__VNSR; // micromolar / millisecond
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // picoA_per_picoF
        const double var_fast_sodium_current__C_Na3 = 1.0 - var_chaste_interface__fast_sodium_current__C_Na1 - var_chaste_interface__fast_sodium_current__C_Na2 - var_chaste_interface__fast_sodium_current__I1_Na - var_chaste_interface__fast_sodium_current__I2_Na - var_chaste_interface__fast_sodium_current__IC_Na2 - var_chaste_interface__fast_sodium_current__IC_Na3 - var_chaste_interface__fast_sodium_current__IF_Na - var_chaste_interface__fast_sodium_current__O_Na; // dimensionless
        const double var_fast_sodium_current__alpha_Na11 = 3.802 / (0.20000000000000001 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V) + 0.1027 * exp(-0.14705882352941177 - 0.058823529411764705 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na12 = 3.802 / (0.1027 * exp(-0.16666666666666666 - 0.066666666666666666 * var_chaste_interface__cell__V) + 0.23000000000000001 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na13 = 3.802 / (0.25 * exp(-0.016666666666666666 - 0.0066666666666666671 * var_chaste_interface__cell__V) + 0.1027 * exp(-0.20833333333333334 - 0.083333333333333329 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na2 = 1 / (0.39395599999999997 + 0.188495 * exp(-0.42168674698795178 - 0.060240963855421679 * var_chaste_interface__cell__V)); // per_millisecond
        const double var_fast_sodium_current__alpha_Na3 = 6.9999999999999997e-7 * exp(-0.90909090909090906 - 0.12987012987012986 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__alpha_Na4 = 0.001 * var_fast_sodium_current__alpha_Na2; // per_millisecond
        const double var_fast_sodium_current__alpha_Na5 = 1.0526315789473684e-5 * var_fast_sodium_current__alpha_Na2; // per_millisecond
        const double var_fast_sodium_current__beta_Na11 = 0.19170000000000001 * exp(-0.12315270935960591 - 0.04926108374384236 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na12 = 0.20000000000000001 * exp(0.12315270935960591 - 0.04926108374384236 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na13 = 0.22 * exp(0.36945812807881773 - 0.04926108374384236 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_sodium_current__beta_Na3 = 0.008539999999999999 + 2.0000000000000002e-5 * var_chaste_interface__cell__V; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__C_Na1 = var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__alpha_Na12 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na3 + var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__beta_Na13 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__alpha_Na13 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na3; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__C_Na2 = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na12 + var_fast_sodium_current__C_Na3 * var_fast_sodium_current__alpha_Na11 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__alpha_Na12 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na11 - var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na3; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IC_Na2 = var_chaste_interface__fast_sodium_current__C_Na2 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na11 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na12 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__beta_Na11; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IC_Na3 = var_fast_sodium_current__C_Na3 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__beta_Na11 - var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na11 - var_chaste_interface__fast_sodium_current__IC_Na3 * var_fast_sodium_current__alpha_Na3; // 1 / millisecond
        const double var_fast_sodium_current__beta_Na2 = var_fast_sodium_current__alpha_Na13 * var_fast_sodium_current__alpha_Na2 * var_fast_sodium_current__alpha_Na3 / (var_fast_sodium_current__beta_Na13 * var_fast_sodium_current__beta_Na3); // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__O_Na = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__alpha_Na13 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na2 - var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__alpha_Na2 - var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__beta_Na13; // 1 / millisecond
        const double var_fast_sodium_current__beta_Na4 = var_fast_sodium_current__alpha_Na3; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__IF_Na = var_chaste_interface__fast_sodium_current__C_Na1 * var_fast_sodium_current__beta_Na3 + var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__beta_Na4 + var_chaste_interface__fast_sodium_current__IC_Na2 * var_fast_sodium_current__alpha_Na12 + var_chaste_interface__fast_sodium_current__O_Na * var_fast_sodium_current__alpha_Na2 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na3 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na4 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na12 - var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__beta_Na2; // 1 / millisecond
        const double var_fast_sodium_current__beta_Na5 = 0.02 * var_fast_sodium_current__alpha_Na3; // per_millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__I1_Na = var_chaste_interface__fast_sodium_current__I2_Na * var_fast_sodium_current__beta_Na5 + var_chaste_interface__fast_sodium_current__IF_Na * var_fast_sodium_current__alpha_Na4 - var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__alpha_Na5 - var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__beta_Na4; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current__I2_Na = var_chaste_interface__fast_sodium_current__I1_Na * var_fast_sodium_current__alpha_Na5 - var_chaste_interface__fast_sodium_current__I2_Na * var_fast_sodium_current__beta_Na5; // 1 / millisecond
        const double var_fast_transient_outward_K_I__alpha_a = 0.18064 * exp(1.6096500000000002 + 0.035770000000000003 * var_chaste_interface__cell__V); // per_millisecond
        const double var_fast_transient_outward_K_I__beta_a = 0.39560000000000001 * exp(-2.8066499999999999 - 0.062370000000000002 * var_chaste_interface__cell__V); // per_millisecond
        const double d_dt_chaste_interface_var_fast_transient_outward_K_I__ato_f = (1.0 - var_chaste_interface__fast_transient_outward_K_I__ato_f) * var_fast_transient_outward_K_I__alpha_a - var_chaste_interface__fast_transient_outward_K_I__ato_f * var_fast_transient_outward_K_I__beta_a; // 1 / millisecond
        const double var_fast_transient_outward_K_I__g_Kto_f = 0.53469999999999995; // milliS_per_microF
        const double var_fast_transient_outward_K_I__itof_iss = 1 / (1.0 + exp(10.279999999999999 + 0.20000000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double var_fast_transient_outward_K_I__tau_ito_f = 9.6645000000000003 + 10.936199999999999 / (1.0 + exp(10.279999999999999 + 0.20000000000000001 * var_chaste_interface__cell__V)); // millisecond
        const double d_dt_chaste_interface_var_fast_transient_outward_K_I__ito_f = (-var_chaste_interface__fast_transient_outward_K_I__ito_f + var_fast_transient_outward_K_I__itof_iss) / var_fast_transient_outward_K_I__tau_ito_f; // 1 / millisecond
        const double var_non_inactivating_steady_state_K_I__tau_Kss = 13.17 + 39.299999999999997 * exp(-0.050000000000000003 * var_chaste_interface__cell__V); // millisecond
        const double var_fast_transient_outward_K_I__E_K = var_cell__R * var_cell__T * log(NV_Ith_S(mParameters, 2) / var_chaste_interface__potassium_concentration__Ki) / var_cell__F; // millivolt
        const double var_fast_transient_outward_K_I__i_Kto_f = pow(var_chaste_interface__fast_transient_outward_K_I__ato_f, 3) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_fast_transient_outward_K_I__g_Kto_f * var_chaste_interface__fast_transient_outward_K_I__ito_f; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * NV_Ith_S(mParameters, 9) * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__C_K0 = 1.0 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 - var_chaste_interface__rapid_delayed_rectifier_K_I__I_K - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K; // dimensionless
        const double var_rapid_delayed_rectifier_K_I__alpha_a0 = 0.022348 * exp(0.01176 * var_chaste_interface__cell__V); // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__alpha_a1 = 0.033500000000000002 * exp(0.0109 * var_chaste_interface__cell__V); // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__alpha_i = 0.070300000000000001 * exp(0.14349999999999999 + 0.0287 * var_chaste_interface__cell__V); // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_a0 = 0.047002000000000002 * exp(-0.063100000000000003 * var_chaste_interface__cell__V); // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_a1 = 6.8899999999999994e-5 * exp(-0.041779999999999998 * var_chaste_interface__cell__V); // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__beta_i = 0.0064970000000000002 * exp(-0.16339999999999999 - 0.032680000000000001 * var_chaste_interface__cell__V); // per_millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__I_K = var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__alpha_i - var_chaste_interface__rapid_delayed_rectifier_K_I__I_K * var_rapid_delayed_rectifier_K_I__beta_i; // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__O_K = var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 * var_rapid_delayed_rectifier_K_I__alpha_a1 + var_chaste_interface__rapid_delayed_rectifier_K_I__I_K * var_rapid_delayed_rectifier_K_I__beta_i - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__alpha_i - var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__beta_a1; // 1 / millisecond
        const double var_rapid_delayed_rectifier_K_I__kb = 0.036777999999999998; // per_millisecond
        const double var_rapid_delayed_rectifier_K_I__kf = 0.023761000000000001; // per_millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K1 = var_rapid_delayed_rectifier_K_I__C_K0 * var_rapid_delayed_rectifier_K_I__alpha_a0 + var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 * var_rapid_delayed_rectifier_K_I__kb - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 * var_rapid_delayed_rectifier_K_I__beta_a0 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 * var_rapid_delayed_rectifier_K_I__kf; // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K2 = var_chaste_interface__rapid_delayed_rectifier_K_I__C_K1 * var_rapid_delayed_rectifier_K_I__kf + var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * var_rapid_delayed_rectifier_K_I__beta_a1 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 * var_rapid_delayed_rectifier_K_I__alpha_a1 - var_chaste_interface__rapid_delayed_rectifier_K_I__C_K2 * var_rapid_delayed_rectifier_K_I__kb; // 1 / millisecond
        const double var_calcium_fluxes__J_rel = ((var_chaste_interface__environment__time < var_cell__prepulses_number * var_chaste_interface__cell__stim_period) ? ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * (var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2) * var_chaste_interface__calcium_fluxes__P_RyR * NV_Ith_S(mParameters, 0)) : ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * var_calcium_fluxes__v1_caff)); // micromolar_per_millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__CaJSR = (-var_calcium_fluxes__J_rel + var_calcium_fluxes__J_tr) * var_calcium_concentration__BJSR; // micromolar / millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__Cass = (var_calcium_fluxes__J_rel * var_cell__VJSR / var_cell__Vss - var_calcium_fluxes__J_xfer * var_cell__Vmyo / var_cell__Vss - 0.5 * var_L_type_calcium_current__i_CaL * var_cell__Acap * NV_Ith_S(mParameters, 5) / (var_cell__F * var_cell__Vss)) * var_calcium_concentration__Bss; // micromolar / millisecond
        const double var_ryanodine_receptors__P_C1 = 1.0 - var_chaste_interface__ryanodine_receptors__P_C2 - var_chaste_interface__ryanodine_receptors__P_O1 - var_chaste_interface__ryanodine_receptors__P_O2; // dimensionless
        const double var_ryanodine_receptors__k_minus_a = 0.071249999999999994; // per_millisecond
        const double var_ryanodine_receptors__k_minus_b = 0.96499999999999997; // per_millisecond
        const double var_ryanodine_receptors__k_minus_c = 0.00080000000000000004; // per_millisecond
        const double var_ryanodine_receptors__k_plus_a = 0.0060749999999999997; // micromolar4_per_millisecond
        const double var_ryanodine_receptors__k_plus_b = 0.0040499999999999998; // micromolar3_per_millisecond
        const double var_ryanodine_receptors__k_plus_c = 0.0089999999999999993; // per_millisecond
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_C2 = var_chaste_interface__ryanodine_receptors__P_O1 * var_ryanodine_receptors__k_plus_c - var_chaste_interface__ryanodine_receptors__P_C2 * var_ryanodine_receptors__k_minus_c; // 1 / millisecond
        const double var_ryanodine_receptors__m = 3.0; // dimensionless
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O2 = -var_chaste_interface__ryanodine_receptors__P_O2 * var_ryanodine_receptors__k_minus_b + pow(var_chaste_interface__calcium_concentration__Cass, var_ryanodine_receptors__m) * var_chaste_interface__ryanodine_receptors__P_O1 * var_ryanodine_receptors__k_plus_b; // 1 / millisecond
        const double var_ryanodine_receptors__n = 4.0; // dimensionless
        const double d_dt_chaste_interface_var_ryanodine_receptors__P_O1 = var_chaste_interface__ryanodine_receptors__P_C2 * var_ryanodine_receptors__k_minus_c + var_chaste_interface__ryanodine_receptors__P_O2 * var_ryanodine_receptors__k_minus_b - var_chaste_interface__ryanodine_receptors__P_O1 * var_ryanodine_receptors__k_minus_a - var_chaste_interface__ryanodine_receptors__P_O1 * var_ryanodine_receptors__k_plus_c + pow(var_chaste_interface__calcium_concentration__Cass, var_ryanodine_receptors__n) * var_ryanodine_receptors__P_C1 * var_ryanodine_receptors__k_plus_a - pow(var_chaste_interface__calcium_concentration__Cass, var_ryanodine_receptors__m) * var_chaste_interface__ryanodine_receptors__P_O1 * var_ryanodine_receptors__k_plus_b; // 1 / millisecond
        const double var_slow_delayed_rectifier_K_I__alpha_n = ((fabs(26.5 + var_chaste_interface__cell__V) < 7.8124999999817923e-7) ? (3.7604140624912359e-12 / (1.0 - exp(-9.9999999999766942e-8)) - 640000.00000149151 * (26.499999218749998 + var_chaste_interface__cell__V) * (-3.7604140624912359e-12 / (1.0 - exp(9.9999999999766942e-8)) - 3.7604140624912359e-12 / (1.0 - exp(-9.9999999999766942e-8)))) : (4.8133299999999997e-6 * (26.5 + var_chaste_interface__cell__V) / (1.0 - exp(-3.3919999999999999 - 0.128 * var_chaste_interface__cell__V)))); // per_millisecond
        const double var_slow_delayed_rectifier_K_I__beta_n = 9.5333299999999997e-5 * exp(-1.0069999999999999 - 0.037999999999999999 * var_chaste_interface__cell__V); // per_millisecond
        const double d_dt_chaste_interface_var_slow_delayed_rectifier_K_I__nKs = (1.0 - var_chaste_interface__slow_delayed_rectifier_K_I__nKs) * var_slow_delayed_rectifier_K_I__alpha_n - var_slow_delayed_rectifier_K_I__beta_n * var_chaste_interface__slow_delayed_rectifier_K_I__nKs; // 1 / millisecond
        const double var_slow_delayed_rectifier_K_I__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 11); // picoA_per_picoF
        const double var_slow_transient_outward_K_I__g_Kto_s = 0; // milliS_per_microF
        const double var_slow_transient_outward_K_I__i_Kto_s = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__slow_transient_outward_K_I__ato_s * var_slow_transient_outward_K_I__g_Kto_s * var_chaste_interface__slow_transient_outward_K_I__ito_s; // picoA_per_picoF
        const double var_slow_transient_outward_K_I__tau_ta_s = 2.0579999999999998 + 0.49299999999999999 * exp(-0.062899999999999998 * var_chaste_interface__cell__V); // millisecond
        const double var_slow_transient_outward_K_I__tau_ti_s = 270.0 + 1050.0 / (1.0 + exp(7.9298245614035094 + 0.17543859649122806 * var_chaste_interface__cell__V)); // millisecond
        const double var_sodium_background_current__g_Nab = 0.0025999999999999999; // milliS_per_microF
        const double var_sodium_calcium_exchange_current__K_mAllo = 0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mCai = 3.6000000000000001; // micromolar
        const double var_sodium_calcium_exchange_current__K_mCao = 1400.0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mNai = 12000.0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mNao = 88000.0; // micromolar
        const double var_sodium_calcium_exchange_current__eta = 0.34999999999999998; // dimensionless
        const double var_sodium_calcium_exchange_current__k_sat = 0.27000000000000002; // dimensionless
        const double var_fast_sodium_current__E_Na = var_cell__R * var_cell__T * log((NV_Ith_S(mParameters, 3) + 0.1111111111111111 * NV_Ith_S(mParameters, 2)) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)) / var_cell__F; // millivolt
        const double var_fast_sodium_current__i_Na = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_chaste_interface__fast_sodium_current__O_Na * NV_Ith_S(mParameters, 7); // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__i_Kr = (-var_cell__R * var_cell__T * log((NV_Ith_S(mParameters, 2) + 0.020408163265306124 * NV_Ith_S(mParameters, 3)) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) / var_cell__F + var_chaste_interface__cell__V) * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * NV_Ith_S(mParameters, 10); // picoA_per_picoF
        const double var_sodium_background_current__i_Nab = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_sodium_background_current__g_Nab; // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * NV_Ith_S(mParameters, 1) * exp(var_cell__F * var_chaste_interface__cell__V * var_sodium_calcium_exchange_current__eta / (var_cell__R * var_cell__T)) - pow(NV_Ith_S(mParameters, 3), 3) * var_calcium_concentration__Cai * exp((-1.0 + var_sodium_calcium_exchange_current__eta) * var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))) * NV_Ith_S(mParameters, 12) / ((1.0 + pow(var_sodium_calcium_exchange_current__K_mAllo, 2) / pow(var_calcium_concentration__Cai, 2)) * (1.0 + var_sodium_calcium_exchange_current__k_sat * exp((-1.0 + var_sodium_calcium_exchange_current__eta) * var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))) * (pow(NV_Ith_S(mParameters, 3), 3) * var_calcium_concentration__Cai + pow(var_sodium_calcium_exchange_current__K_mNao, 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * NV_Ith_S(mParameters, 1) + pow(var_chaste_interface__sodium_concentration__Nai, 3) * var_sodium_calcium_exchange_current__K_mCao + pow(NV_Ith_S(mParameters, 3), 3) * (1.0 + pow(var_chaste_interface__sodium_concentration__Nai, 3) / pow(var_sodium_calcium_exchange_current__K_mNai, 3)) * var_sodium_calcium_exchange_current__K_mCai + pow(var_sodium_calcium_exchange_current__K_mNai, 3) * (1.0 + var_calcium_concentration__Cai / var_sodium_calcium_exchange_current__K_mCai) * NV_Ith_S(mParameters, 1))); // picoA_per_picoF
        const double var_calcium_concentration__Cai_orig_deriv = (-var_calcium_fluxes__J_serca - 0.5 * (-2.0 * var_sodium_calcium_exchange_current__i_NCX + var_calcium_background_current__i_Cab + var_calcium_pump_current__i_pCa) * var_cell__Acap * NV_Ith_S(mParameters, 5) / (var_cell__F * var_cell__Vmyo) + var_calcium_fluxes__J_leak + var_calcium_fluxes__J_xfer) * var_calcium_concentration__Bi; // micromolar / millisecond
        const double d_dt_chaste_interface_var_calcium_concentration__Cai_converted = 0.001 * var_calcium_concentration__Cai_orig_deriv; // millimolar / millisecond
        const double var_sodium_potassium_pump_current__Km_Ko = 1500.0; // micromolar
        const double var_sodium_potassium_pump_current__Km_Nai = 16600.0; // micromolar
        const double var_sodium_potassium_pump_current__i_NaK_max = 2.4860000000000002; // picoA_per_picoF
        const double var_sodium_potassium_pump_current__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(1.4858841010401188e-5 * NV_Ith_S(mParameters, 3)); // dimensionless
        const double var_sodium_potassium_pump_current__f_NaK = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T)) + 0.036499999999999998 * var_sodium_potassium_pump_current__sigma * exp(-var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))); // dimensionless
        const double var_sodium_potassium_pump_current__i_NaK = NV_Ith_S(mParameters, 2) * var_sodium_potassium_pump_current__f_NaK * var_sodium_potassium_pump_current__i_NaK_max / ((1.0 + pow((var_sodium_potassium_pump_current__Km_Nai / var_chaste_interface__sodium_concentration__Nai), 2.3999999999999999)) * (NV_Ith_S(mParameters, 2) + var_sodium_potassium_pump_current__Km_Ko)); // picoA_per_picoF
        const double d_dt_chaste_interface_var_sodium_concentration__Nai = (-var_fast_sodium_current__i_Na - var_sodium_background_current__i_Nab - 3.0 * var_sodium_calcium_exchange_current__i_NCX - 3.0 * var_sodium_potassium_pump_current__i_NaK) * var_cell__Acap * NV_Ith_S(mParameters, 5) / (var_cell__F * var_cell__Vmyo); // micromolar / millisecond
        const double var_time_independent_K_I__i_K1 = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 2) * NV_Ith_S(mParameters, 8) / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + NV_Ith_S(mParameters, 2))); // picoA_per_picoF
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__ass = 1 / (1.0 + exp(-0.64479166666666676 - 0.10416666666666667 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__aKss = (-var_chaste_interface__non_inactivating_steady_state_K_I__aKss + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / var_non_inactivating_steady_state_K_I__tau_Kss; // 1 / millisecond
        const double d_dt_chaste_interface_var_slow_transient_outward_K_I__ato_s = (-var_chaste_interface__slow_transient_outward_K_I__ato_s + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / var_slow_transient_outward_K_I__tau_ta_s; // 1 / millisecond
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__g_Kur = 0.25; // milliS_per_microF
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__iss = 1 / (1.0 + exp(7.7962962962962958 + 0.18518518518518517 * var_chaste_interface__cell__V)); // dimensionless
        const double d_dt_chaste_interface_var_slow_transient_outward_K_I__ito_s = (-var_chaste_interface__slow_transient_outward_K_I__ito_s + var_ultra_rapidly_activating_delayed_rectifier_K_I__iss) / var_slow_transient_outward_K_I__tau_ti_s; // 1 / millisecond
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur * var_ultra_rapidly_activating_delayed_rectifier_K_I__g_Kur * var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur; // picoA_per_picoF
        const double d_dt_chaste_interface_var_potassium_concentration__Ki = (-var_cell__i_Stim - var_fast_transient_outward_K_I__i_Kto_f - var_non_inactivating_steady_state_K_I__i_Kss - var_rapid_delayed_rectifier_K_I__i_Kr - var_slow_delayed_rectifier_K_I__i_Ks - var_slow_transient_outward_K_I__i_Kto_s - var_time_independent_K_I__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur + 2.0 * var_sodium_potassium_pump_current__i_NaK) * var_cell__Acap * NV_Ith_S(mParameters, 5) / (var_cell__F * var_cell__Vmyo); // micromolar / millisecond
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__tau_aur = 2.0579999999999998 + 0.49299999999999999 * exp(-0.062899999999999998 * var_chaste_interface__cell__V); // millisecond
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__aur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__aur + var_ultra_rapidly_activating_delayed_rectifier_K_I__ass) / var_ultra_rapidly_activating_delayed_rectifier_K_I__tau_aur; // 1 / millisecond
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__tau_i_const = 643.0; // millisecond
        const double var_ultra_rapidly_activating_delayed_rectifier_K_I__tau_iur = 1000.0 / (1.0 + exp(7.7962962962962958 + 0.18518518518518517 * var_chaste_interface__cell__V)) + var_ultra_rapidly_activating_delayed_rectifier_K_I__tau_i_const; // millisecond
        const double d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__iur = (-var_chaste_interface__ultra_rapidly_activating_delayed_rectifier_K_I__iur + var_ultra_rapidly_activating_delayed_rectifier_K_I__iss) / var_ultra_rapidly_activating_delayed_rectifier_K_I__tau_iur; // 1 / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_cell__V = 0.0;
        }
        else
        {
            const double var_calcium_activated_chloride_current__E_Cl = -40.0; // millivolt
            const double var_calcium_activated_chloride_current__Km_Cl = 10.0; // micromolar
            const double var_calcium_activated_chloride_current__g_ClCa = 10.0; // milliS_per_microF
            const double var_calcium_activated_chloride_current__O_ClCa = 0.20000000000000001 / (1.0 + exp(5.9871794871794881 - 0.12820512820512822 * var_chaste_interface__cell__V)); // dimensionless
            const double var_calcium_activated_chloride_current__i_ClCa = (-var_calcium_activated_chloride_current__E_Cl + var_chaste_interface__cell__V) * var_calcium_activated_chloride_current__O_ClCa * var_calcium_activated_chloride_current__g_ClCa * var_calcium_concentration__Cai / (var_calcium_activated_chloride_current__Km_Cl + var_calcium_concentration__Cai); // picoA_per_picoF
            // Special handling of data clamp current here
            // (we want to save expense of calling the interpolation method if possible.)
            double var_chaste_interface__membrane_data_clamp_current = 0.0;
            if (mDataClampIsOn)
            {
                var_chaste_interface__membrane_data_clamp_current = (-GetExperimentalVoltageAtTimeT(var_chaste_interface__environment__time) + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 6); // uA_per_cm2
            }
            d_dt_chaste_interface_var_cell__V = -var_L_type_calcium_current__i_CaL - var_calcium_activated_chloride_current__i_ClCa - var_calcium_background_current__i_Cab - var_calcium_pump_current__i_pCa - var_cell__i_Stim - var_fast_sodium_current__i_Na - var_fast_transient_outward_K_I__i_Kto_f - var_chaste_interface__membrane_data_clamp_current - var_non_inactivating_steady_state_K_I__i_Kss - var_rapid_delayed_rectifier_K_I__i_Kr - var_slow_delayed_rectifier_K_I__i_Ks - var_slow_transient_outward_K_I__i_Kto_s - var_sodium_background_current__i_Nab - var_sodium_calcium_exchange_current__i_NCX - var_sodium_potassium_pump_current__i_NaK - var_time_independent_K_I__i_K1 - var_ultra_rapidly_activating_delayed_rectifier_K_I__i_Kur; // millivolt / millisecond
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_cell__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_calcium_concentration__Cai_converted;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_calcium_concentration__Cass;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_calcium_concentration__CaJSR;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_calcium_concentration__CaNSR;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_calcium_fluxes__P_RyR;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_calcium_fluxes__CaMKt;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_ryanodine_receptors__P_O1;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_ryanodine_receptors__P_O2;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_ryanodine_receptors__P_C2;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_L_type_calcium_current__O;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_L_type_calcium_current__I;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_L_type_calcium_current__y_gate;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_sodium_concentration__Nai;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_fast_sodium_current__O_Na;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_fast_sodium_current__C_Na1;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_fast_sodium_current__C_Na2;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_fast_sodium_current__I1_Na;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_fast_sodium_current__I2_Na;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_fast_sodium_current__IF_Na;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_fast_sodium_current__IC_Na2;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_fast_sodium_current__IC_Na3;
        NV_Ith_S(rDY,22) = d_dt_chaste_interface_var_potassium_concentration__Ki;
        NV_Ith_S(rDY,23) = d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__aur;
        NV_Ith_S(rDY,24) = d_dt_chaste_interface_var_ultra_rapidly_activating_delayed_rectifier_K_I__iur;
        NV_Ith_S(rDY,25) = d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__aKss;
        NV_Ith_S(rDY,26) = d_dt_chaste_interface_var_non_inactivating_steady_state_K_I__iKss;
        NV_Ith_S(rDY,27) = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__O_K;
        NV_Ith_S(rDY,28) = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K1;
        NV_Ith_S(rDY,29) = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__C_K2;
        NV_Ith_S(rDY,30) = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_I__I_K;
        NV_Ith_S(rDY,31) = d_dt_chaste_interface_var_slow_delayed_rectifier_K_I__nKs;
        NV_Ith_S(rDY,32) = d_dt_chaste_interface_var_fast_transient_outward_K_I__ato_f;
        NV_Ith_S(rDY,33) = d_dt_chaste_interface_var_fast_transient_outward_K_I__ito_f;
        NV_Ith_S(rDY,34) = d_dt_chaste_interface_var_slow_transient_outward_K_I__ato_s;
        NV_Ith_S(rDY,35) = d_dt_chaste_interface_var_slow_transient_outward_K_I__ito_s;
    }

    N_Vector Cellli_mouse_2010FromCellMLCvodeDataClamp::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const N_Vector & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: millivolt; Initial value: -78.9452115785979
        double var_chaste_interface__calcium_concentration__Cai_converted = NV_Ith_S(rY, 1);
        // Units: millimolar; Initial value: 9.499150681398009e-05
        double var_chaste_interface__calcium_concentration__Cass = NV_Ith_S(rY, 2);
        // Units: micromolar; Initial value: 0.0954184301907784
        double var_chaste_interface__calcium_concentration__CaJSR = NV_Ith_S(rY, 3);
        // Units: micromolar; Initial value: 171.167969039613
        double var_chaste_interface__calcium_fluxes__P_RyR = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 0.000280539508743811
        double var_chaste_interface__ryanodine_receptors__P_O1 = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 0.00571393383393735
        double var_chaste_interface__ryanodine_receptors__P_O2 = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 2.09864618235341e-08
        double var_chaste_interface__L_type_calcium_current__O = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 1.23713515513533e-06
        double var_chaste_interface__L_type_calcium_current__y_gate = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: 0.845044436980163
        double var_chaste_interface__sodium_concentration__Nai = NV_Ith_S(rY, 13);
        // Units: micromolar; Initial value: 12364.7482121793
        double var_chaste_interface__fast_sodium_current__O_Na = NV_Ith_S(rY, 14);
        // Units: dimensionless; Initial value: 1.46826771436314e-06
        double var_chaste_interface__potassium_concentration__Ki = NV_Ith_S(rY, 22);
        // Units: micromolar; Initial value: 115599.50642567
        double var_chaste_interface__non_inactivating_steady_state_K_I__aKss = NV_Ith_S(rY, 25);
        // Units: dimensionless; Initial value: 0.287585636847048
        double var_chaste_interface__non_inactivating_steady_state_K_I__iKss = NV_Ith_S(rY, 26);
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__rapid_delayed_rectifier_K_I__O_K = NV_Ith_S(rY, 27);
        // Units: dimensionless; Initial value: 0.0131742086125972
        double var_chaste_interface__slow_delayed_rectifier_K_I__nKs = NV_Ith_S(rY, 31);
        // Units: dimensionless; Initial value: 0.00336735013094628
        
        // Mathematics
        const double var_calcium_concentration__Cai = 1000.0 * var_chaste_interface__calcium_concentration__Cai_converted; // micromolar
        const double var_calcium_fluxes__v1_caff = 10.0; // per_millisecond
        const double var_cell__F = 96.5; // coulomb_per_millimole
        const double var_cell__R = 8.3140000000000001; // joule_per_mole_kelvin
        const double var_cell__T = 308.0; // kelvin
        const double var_L_type_calcium_current__i_CaL = ((fabs(var_chaste_interface__cell__V) < 1.3267937823834197e-6) ? (-376848.31406265136 * (-1.3267937823834197e-6 + var_chaste_interface__cell__V) * (3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5)) + 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5))) - 3.0621664503101105e-9 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(-9.9999999999999995e-8)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate / ((1.0 - exp(-9.9999999999999995e-8)) * NV_Ith_S(mParameters, 5))) : (-0.0023079445283571576 * (-var_chaste_interface__calcium_concentration__Cass + NV_Ith_S(mParameters, 1) * exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * var_chaste_interface__L_type_calcium_current__O * NV_Ith_S(mParameters, 4) * var_chaste_interface__L_type_calcium_current__y_gate * var_chaste_interface__cell__V / ((1.0 - exp(-0.075369662812530269 * var_chaste_interface__cell__V)) * NV_Ith_S(mParameters, 5)))); // picoA_per_picoF
        const double var_L_type_calcium_current__i_CaL_converted = HeartConfig::Instance()->GetCapacitance() * var_L_type_calcium_current__i_CaL; // uA_per_cm2
        const double var_cell__prepulses_number = 10000000000.0; // dimensionless
        const double var_chaste_interface__cell__stim_period = 333.33300000000003; // millisecond
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        // Special handling of data clamp current here
        // (we want to save expense of calling the interpolation method if possible.)
        double var_chaste_interface__membrane_data_clamp_current = 0.0;
        if (mDataClampIsOn)
        {
            var_chaste_interface__membrane_data_clamp_current = (-GetExperimentalVoltageAtTimeT(var_chaste_interface__environment__time) + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 6); // uA_per_cm2
        }
        const double var_fast_transient_outward_K_I__E_K = var_cell__R * var_cell__T * log(NV_Ith_S(mParameters, 2) / var_chaste_interface__potassium_concentration__Ki) / var_cell__F; // millivolt
        const double var_non_inactivating_steady_state_K_I__i_Kss = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * var_chaste_interface__non_inactivating_steady_state_K_I__aKss * NV_Ith_S(mParameters, 9) * var_chaste_interface__non_inactivating_steady_state_K_I__iKss; // picoA_per_picoF
        const double var_non_inactivating_steady_state_K_I__i_Kss_converted = HeartConfig::Instance()->GetCapacitance() * var_non_inactivating_steady_state_K_I__i_Kss; // uA_per_cm2
        const double var_calcium_fluxes__J_rel = ((var_chaste_interface__environment__time < var_cell__prepulses_number * var_chaste_interface__cell__stim_period) ? ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * (var_chaste_interface__ryanodine_receptors__P_O1 + var_chaste_interface__ryanodine_receptors__P_O2) * var_chaste_interface__calcium_fluxes__P_RyR * NV_Ith_S(mParameters, 0)) : ((-var_chaste_interface__calcium_concentration__Cass + var_chaste_interface__calcium_concentration__CaJSR) * var_calcium_fluxes__v1_caff)); // micromolar_per_millisecond
        const double var_slow_delayed_rectifier_K_I__i_Ks = pow(var_chaste_interface__slow_delayed_rectifier_K_I__nKs, 2) * (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 11); // picoA_per_picoF
        const double var_slow_delayed_rectifier_K_I__i_Ks_converted = HeartConfig::Instance()->GetCapacitance() * var_slow_delayed_rectifier_K_I__i_Ks; // uA_per_cm2
        const double var_sodium_calcium_exchange_current__K_mAllo = 0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mCai = 3.6000000000000001; // micromolar
        const double var_sodium_calcium_exchange_current__K_mCao = 1400.0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mNai = 12000.0; // micromolar
        const double var_sodium_calcium_exchange_current__K_mNao = 88000.0; // micromolar
        const double var_sodium_calcium_exchange_current__eta = 0.34999999999999998; // dimensionless
        const double var_sodium_calcium_exchange_current__k_sat = 0.27000000000000002; // dimensionless
        const double var_fast_sodium_current__E_Na = var_cell__R * var_cell__T * log((NV_Ith_S(mParameters, 3) + 0.1111111111111111 * NV_Ith_S(mParameters, 2)) / (var_chaste_interface__sodium_concentration__Nai + 0.1111111111111111 * var_chaste_interface__potassium_concentration__Ki)) / var_cell__F; // millivolt
        const double var_fast_sodium_current__i_Na = (-var_fast_sodium_current__E_Na + var_chaste_interface__cell__V) * var_chaste_interface__fast_sodium_current__O_Na * NV_Ith_S(mParameters, 7); // picoA_per_picoF
        const double var_fast_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_rapid_delayed_rectifier_K_I__i_Kr = (-var_cell__R * var_cell__T * log((NV_Ith_S(mParameters, 2) + 0.020408163265306124 * NV_Ith_S(mParameters, 3)) / (var_chaste_interface__potassium_concentration__Ki + 0.020408163265306124 * var_chaste_interface__sodium_concentration__Nai)) / var_cell__F + var_chaste_interface__cell__V) * var_chaste_interface__rapid_delayed_rectifier_K_I__O_K * NV_Ith_S(mParameters, 10); // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_I__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_rapid_delayed_rectifier_K_I__i_Kr; // uA_per_cm2
        const double var_sodium_calcium_exchange_current__i_NCX = (pow(var_chaste_interface__sodium_concentration__Nai, 3) * NV_Ith_S(mParameters, 1) * exp(var_cell__F * var_chaste_interface__cell__V * var_sodium_calcium_exchange_current__eta / (var_cell__R * var_cell__T)) - pow(NV_Ith_S(mParameters, 3), 3) * var_calcium_concentration__Cai * exp((-1.0 + var_sodium_calcium_exchange_current__eta) * var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))) * NV_Ith_S(mParameters, 12) / ((1.0 + pow(var_sodium_calcium_exchange_current__K_mAllo, 2) / pow(var_calcium_concentration__Cai, 2)) * (1.0 + var_sodium_calcium_exchange_current__k_sat * exp((-1.0 + var_sodium_calcium_exchange_current__eta) * var_cell__F * var_chaste_interface__cell__V / (var_cell__R * var_cell__T))) * (pow(NV_Ith_S(mParameters, 3), 3) * var_calcium_concentration__Cai + pow(var_sodium_calcium_exchange_current__K_mNao, 3) * var_calcium_concentration__Cai + pow(var_chaste_interface__sodium_concentration__Nai, 3) * NV_Ith_S(mParameters, 1) + pow(var_chaste_interface__sodium_concentration__Nai, 3) * var_sodium_calcium_exchange_current__K_mCao + pow(NV_Ith_S(mParameters, 3), 3) * (1.0 + pow(var_chaste_interface__sodium_concentration__Nai, 3) / pow(var_sodium_calcium_exchange_current__K_mNai, 3)) * var_sodium_calcium_exchange_current__K_mCai + pow(var_sodium_calcium_exchange_current__K_mNai, 3) * (1.0 + var_calcium_concentration__Cai / var_sodium_calcium_exchange_current__K_mCai) * NV_Ith_S(mParameters, 1))); // picoA_per_picoF
        const double var_sodium_calcium_exchange_current__i_NCX_converted = HeartConfig::Instance()->GetCapacitance() * var_sodium_calcium_exchange_current__i_NCX; // uA_per_cm2
        const double var_time_independent_K_I__i_K1 = (-var_fast_transient_outward_K_I__E_K + var_chaste_interface__cell__V) * NV_Ith_S(mParameters, 2) * NV_Ith_S(mParameters, 8) / ((1.0 + exp(0.089599999999999999 * var_chaste_interface__cell__V - 0.089599999999999999 * var_fast_transient_outward_K_I__E_K)) * (210.0 + NV_Ith_S(mParameters, 2))); // picoA_per_picoF
        const double var_time_independent_K_I__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_time_independent_K_I__i_K1; // uA_per_cm2

        N_Vector dqs = N_VNew_Serial(12);
        NV_Ith_S(dqs, 0) = var_calcium_fluxes__J_rel;
        NV_Ith_S(dqs, 1) = var_chaste_interface__calcium_concentration__Cai_converted;
        NV_Ith_S(dqs, 2) = var_L_type_calcium_current__i_CaL_converted;
        NV_Ith_S(dqs, 3) = var_chaste_interface__membrane_data_clamp_current;
        NV_Ith_S(dqs, 4) = var_fast_sodium_current__i_Na_converted;
        NV_Ith_S(dqs, 5) = var_time_independent_K_I__i_K1_converted;
        NV_Ith_S(dqs, 6) = var_non_inactivating_steady_state_K_I__i_Kss_converted;
        NV_Ith_S(dqs, 7) = var_rapid_delayed_rectifier_K_I__i_Kr_converted;
        NV_Ith_S(dqs, 8) = var_slow_delayed_rectifier_K_I__i_Ks_converted;
        NV_Ith_S(dqs, 9) = var_sodium_calcium_exchange_current__i_NCX_converted;
        NV_Ith_S(dqs, 10) = var_cell__i_Stim_converted;
        NV_Ith_S(dqs, 11) = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellli_mouse_2010FromCellMLCvodeDataClamp>::Initialise(void)
{
    this->mSystemName = "Li_Mouse_2010";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // NV_Ith_S(rY, 0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-78.9452115785979);

    // NV_Ith_S(rY, 1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(9.499150681398009e-05);

    // NV_Ith_S(rY, 2):
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(0.0954184301907784);

    // NV_Ith_S(rY, 3):
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(171.167969039613);

    // NV_Ith_S(rY, 4):
    this->mVariableNames.push_back("calcium_concentration__CaNSR");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(404.825013216286);

    // NV_Ith_S(rY, 5):
    this->mVariableNames.push_back("calcium_fluxes__P_RyR");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000280539508743811);

    // NV_Ith_S(rY, 6):
    this->mVariableNames.push_back("calcium_fluxes__CaMKt");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.729027738385079);

    // NV_Ith_S(rY, 7):
    this->mVariableNames.push_back("ryanodine_receptors__P_O1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00571393383393735);

    // NV_Ith_S(rY, 8):
    this->mVariableNames.push_back("ryanodine_receptors__P_O2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.09864618235341e-08);

    // NV_Ith_S(rY, 9):
    this->mVariableNames.push_back("ryanodine_receptors__P_C2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.565182571165673);

    // NV_Ith_S(rY, 10):
    this->mVariableNames.push_back("L_type_calcium_current__O");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.23713515513533e-06);

    // NV_Ith_S(rY, 11):
    this->mVariableNames.push_back("L_type_calcium_current__I");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.427651445872853);

    // NV_Ith_S(rY, 12):
    this->mVariableNames.push_back("L_type_calcium_current__y_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.845044436980163);

    // NV_Ith_S(rY, 13):
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(12364.7482121793);

    // NV_Ith_S(rY, 14):
    this->mVariableNames.push_back("fast_sodium_current__O_Na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.46826771436314e-06);

    // NV_Ith_S(rY, 15):
    this->mVariableNames.push_back("fast_sodium_current__C_Na1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000420472760277688);

    // NV_Ith_S(rY, 16):
    this->mVariableNames.push_back("fast_sodium_current__C_Na2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0240114508843199);

    // NV_Ith_S(rY, 17):
    this->mVariableNames.push_back("fast_sodium_current__I1_Na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000517471697712382);

    // NV_Ith_S(rY, 18):
    this->mVariableNames.push_back("fast_sodium_current__I2_Na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.45406116958509e-05);

    // NV_Ith_S(rY, 19):
    this->mVariableNames.push_back("fast_sodium_current__IF_Na");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000306123648969581);

    // NV_Ith_S(rY, 20):
    this->mVariableNames.push_back("fast_sodium_current__IC_Na2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0174528857380179);

    // NV_Ith_S(rY, 21):
    this->mVariableNames.push_back("fast_sodium_current__IC_Na3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.402980726914811);

    // NV_Ith_S(rY, 22):
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("micromolar");
    this->mInitialConditions.push_back(115599.50642567);

    // NV_Ith_S(rY, 23):
    this->mVariableNames.push_back("ultra_rapidly_activating_delayed_rectifier_K_I__aur");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00346258606821817);

    // NV_Ith_S(rY, 24):
    this->mVariableNames.push_back("ultra_rapidly_activating_delayed_rectifier_K_I__iur");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.955684946168062);

    // NV_Ith_S(rY, 25):
    this->mVariableNames.push_back("non_inactivating_steady_state_K_I__aKss");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.287585636847048);

    // NV_Ith_S(rY, 26):
    this->mVariableNames.push_back("non_inactivating_steady_state_K_I__iKss");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // NV_Ith_S(rY, 27):
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_I__O_K");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0131742086125972);

    // NV_Ith_S(rY, 28):
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_I__C_K1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0011733433957123);

    // NV_Ith_S(rY, 29):
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_I__C_K2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00105586824723736);

    // NV_Ith_S(rY, 30):
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_I__I_K");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00140618453684944);

    // NV_Ith_S(rY, 31):
    this->mVariableNames.push_back("slow_delayed_rectifier_K_I__nKs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00336735013094628);

    // NV_Ith_S(rY, 32):
    this->mVariableNames.push_back("fast_transient_outward_K_I__ato_f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0142335908879204);

    // NV_Ith_S(rY, 33):
    this->mVariableNames.push_back("fast_transient_outward_K_I__ito_f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.996989882138174);

    // NV_Ith_S(rY, 34):
    this->mVariableNames.push_back("slow_transient_outward_K_I__ato_s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0443263407760382);

    // NV_Ith_S(rY, 35):
    this->mVariableNames.push_back("slow_transient_outward_K_I__ito_s");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.887568880831388);

    // mParameters[0]:
    this->mParameterNames.push_back("SR_release_current_max");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[1]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[2]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("micromolar");

    // mParameters[4]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("per_millisecond");

    // mParameters[5]:
    this->mParameterNames.push_back("membrane_capacitance");
    this->mParameterUnits.push_back("microF_per_cm2");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_data_clamp_current_conductance");
    this->mParameterUnits.push_back("dimensionless");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_non_inactivating_steady_state_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("milliS_per_microF");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("picoA_per_picoF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("SR_release_current");
    this->mDerivedQuantityUnits.push_back("micromolar_per_millisecond");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("cytosolic_calcium_concentration");
    this->mDerivedQuantityUnits.push_back("millimolar");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_L_type_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_data_clamp_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_non_inactivating_steady_state_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellli_mouse_2010FromCellMLCvodeDataClamp)

#endif // CHASTE_CVODE
