//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: davies_isap_2012
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: BackwardEuler)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "davies_isap_2012.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"
#include "CardiacNewtonSolver.hpp"


    boost::shared_ptr<RegularStimulus> Celldavies_isap_2012FromCellMLBackwardEulerNoLut::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude_converted = -80.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__cell__stim_duration = 1.0; // ms
        const double var_chaste_interface__cell__stim_offset = 0; // ms
        const double var_chaste_interface__cell__stim_period = 1000.0; // ms
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude_converted),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Celldavies_isap_2012FromCellMLBackwardEulerNoLut::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Celldavies_isap_2012FromCellMLBackwardEulerNoLut::Celldavies_isap_2012FromCellMLBackwardEulerNoLut(boost::shared_ptr<AbstractIvpOdeSolver> /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractBackwardEulerCardiacCell<13>(
                29,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Celldavies_isap_2012FromCellMLBackwardEulerNoLut>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 1.8; // (var_Environment__Ca_o) [mM]
        this->mParameters[1] = 154.59999999999999; // (var_Environment__Cl_o) [mM]
        this->mParameters[2] = 4.0; // (var_Environment__K_o) [mM]
        this->mParameters[3] = 150.0; // (var_Environment__Na_o) [mM]
        this->mParameters[4] = 0.000243; // (var_ICaL__pca) [L_per_F_ms]
        this->mParameters[5] = 10.0; // (var_ICaL__tau_pow_calcium) [ms]
        this->mParameters[6] = 7.9803360000000004e-7; // (var_ICab__GCab) [L_per_F_ms]
        this->mParameters[7] = 0.00022499999999999999; // (var_IClb__GClb) [mS_per_uF]
        this->mParameters[8] = 0.057500000000000002; // (var_IpCa__ibarpca) [uA_per_uF]
        this->mParameters[9] = 8.25; // (var_INa__GNa) [mS_per_uF]
        this->mParameters[10] = 0.5; // (var_IK1__GK1) [mS_per_uF]
        this->mParameters[11] = 0.010999999999999999; // (var_INal__GNaL) [mS_per_uF]
        this->mParameters[12] = 0.0027599999999999999; // (var_IKp__GKp) [mS_per_uF]
        this->mParameters[13] = 0.013854200000000001; // (var_IKr__GKrMax) [mS_per_uF]
        this->mParameters[14] = 0.0074692500000000002; // (var_IKs__gks_max) [mS_per_uF]
        this->mParameters[15] = 5.8499999999999996; // (var_INaCa__NCXmax) [uA_per_uF]
        this->mParameters[16] = 0.61875000000000002; // (var_INaK__ibarnak) [uA_per_uF]
        this->mParameters[17] = 3.9999999999999998e-7; // (var_Ito2__PCl) [L_per_F_ms]
        this->mParameters[18] = 0.18049999999999999; // (var_Ito__gitodv) [mS_per_uF]
        this->mParameters[19] = 300.0; // (var_Ito__Cto) [mV]
    }

    Celldavies_isap_2012FromCellMLBackwardEulerNoLut::~Celldavies_isap_2012FromCellMLBackwardEulerNoLut()
    {
    }

    
    double Celldavies_isap_2012FromCellMLBackwardEulerNoLut::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.000223768331231758
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.99765453819431
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.998157020148849
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 5.38067794749339e-07
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.99805432294836
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999986839648304
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.961568137796573
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.854261813196152
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.989081601403786
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.255981702631947
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.0147449166757808
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.0147504787196957
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.00894974857468432
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.999992183094244
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.787996527242362
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.0014969201082975
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.488129650338831
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 17.9964119779802
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 134.555737634453
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 20.1543792471096
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.000225131045297696
        
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_IKr__gkr = 0.5 * sqrt(mParameters[2]) * mParameters[13]; // mS_per_uF
        const double var_IKs__gks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[14]; // mS_per_uF
        const double var_INa__gNa = pow(var_chaste_interface__INa__m, 3) * mParameters[9] * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // mS_per_uF
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__allo = 1 / (1.0 + pow(var_INaCa__KmCa, 2) / pow(var_INaCa__ca_i_NaCa, 2)); // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3]); // dimensionless
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * mParameters[8] / (var_chaste_interface__Ca__Ca_i + var_IpCa__kmpca); // uA_per_uF
        const double var_INaCa__denom2 = pow(var_INaCa__KmNao, 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_INaCa__ca_i_NaCa / var_INaCa__KmCai) * mParameters[0]; // mM4
        const double var_INaCa__denom3 = pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] + pow(mParameters[3], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[4] / (-1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICaL__ICaL = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca; // uA_per_uF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[6] * var_chaste_interface__cell__V / (-1.0 + exp(0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_IKr__r = 1 / (1.0 + 2.5 * exp(2.8000000000000003 + 0.10000000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaCa__denom1 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__num = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] * exp(var_Environment__FonRT * var_INaCa__eta * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__INaCa = mParameters[15] * var_INaCa__allo * var_INaCa__num / ((var_INaCa__denom2 + var_INaCa__denom3) * var_INaCa__denom1); // uA_per_uF
        const double var_INaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_Environment__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaK__INaK = mParameters[2] * var_INaK__fnak * mParameters[16] / ((1.0 + pow(var_INaK__kmnai, 2) / pow(var_chaste_interface__Na__Na_i, 2)) * (mParameters[2] + var_INaK__kmko)); // uA_per_uF
        const double var_Ito__rv = ((var_chaste_interface__cell__V <= 0) ? (exp(var_chaste_interface__cell__V / mParameters[19])) : (1.0)); // dimensionless
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (0.0096484999999999991 * (-mParameters[1] * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-mParameters[1] * exp(0.0374358835078 * var_chaste_interface__cell__V) + var_chaste_interface__Cl__Cl_i) * mParameters[17] * var_chaste_interface__cell__V / (1.0 - exp(0.0374358835078 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_chaste_interface__Ito2__AA * var_Ito2__Ito2_max; // uA_per_uF
        const double var_cell__caiont = -2.0 * var_INaCa__INaCa + var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa; // uA_per_uF
        const double var_cell__i_Stim = 0.0; // uA_per_uF
        const double var_reversal_potentials__ECl = -log(mParameters[1] / var_chaste_interface__Cl__Cl_i) / var_Environment__FonRT; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__cell__V) * mParameters[7]; // uA_per_uF
        const double var_cell__clont = 0.5 * var_cell__i_Stim + var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
        const double var_reversal_potentials__EK = log(mParameters[2] / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)); // per_ms
        const double var_IK1__bk1 = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__IK1 = 0.5 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[10] * var_IK1__ak1 / (var_IK1__ak1 + var_IK1__bk1); // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[12] / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKr__gkr * var_IKr__r * var_chaste_interface__IKr__xr; // uA_per_uF
        const double var_Ito__Ito = pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[18] * var_Ito__rv * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv; // uA_per_uF
        const double var_reversal_potentials__ENa = log(mParameters[3] / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__INa = (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INa__gNa; // uA_per_uF
        const double var_INal__INal = pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * mParameters[11] * var_chaste_interface__INal__hL; // uA_per_uF
        const double var_cell__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + var_INa__INa + var_INal__INal; // uA_per_uF
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((mParameters[3] * var_reversal_potentials__prnak + mParameters[2]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_Environment__FonRT; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__cell__V) * var_IKs__gks * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_uF
        const double var_cell__kiont = 0.5 * var_cell__i_Stim - 2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito__Ito; // uA_per_uF
        const double var_chaste_interface__i_ionic = (var_cell__caiont + var_cell__clont + var_cell__kiont + var_cell__naiont) * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Celldavies_isap_2012FromCellMLBackwardEulerNoLut::ComputeResidual(double var_chaste_interface__Environment__time, const double rCurrentGuess[13], double rResidual[13])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.99765453819431
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.998157020148849
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 5.38067794749339e-07
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.99805432294836
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999986839648304
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.989081601403786
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.255981702631947
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.0147449166757808
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.0147504787196957
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.00894974857468432
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.999992183094244
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.787996527242362
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.488129650338831
        
        //output_nonlinear_state_assignments
        double var_chaste_interface__Ca__Ca_i = rCurrentGuess[0];
        double var_chaste_interface__Ca__Ca_jsr = rCurrentGuess[1];
        double var_chaste_interface__Ca__Ca_nsr = rCurrentGuess[2];
        double var_chaste_interface__Ca__Ca_ss = rCurrentGuess[3];
        double var_chaste_interface__Cl__Cl_i = rCurrentGuess[4];
        double var_chaste_interface__ICaL__fca = rCurrentGuess[5];
        double var_chaste_interface__ICaL__fca2 = rCurrentGuess[6];
        double var_chaste_interface__Irel__CaMKtrap = rCurrentGuess[7];
        double var_chaste_interface__Irel__ri = rCurrentGuess[8];
        double var_chaste_interface__Irel__ro = rCurrentGuess[9];
        double var_chaste_interface__Ito2__AA = rCurrentGuess[10];
        double var_chaste_interface__K__K_i = rCurrentGuess[11];
        double var_chaste_interface__Na__Na_i = rCurrentGuess[12];
        
        //output_equations
        const double var_Ca__BSLmax = 1.1240000000000001; // mM
        const double var_Ca__BSRmax = 0.047; // mM
        const double var_Ca__KmBSL = 0.0086999999999999994; // mM
        const double var_Ca__KmBSR = 0.00087000000000000001; // mM
        const double var_Ca__bss = 1 / (1.0 + var_Ca__BSLmax * var_Ca__KmBSL / pow((var_chaste_interface__Ca__Ca_ss + var_Ca__KmBSL), 2) + var_Ca__BSRmax * var_Ca__KmBSR / pow((var_chaste_interface__Ca__Ca_ss + var_Ca__KmBSR), 2)); // dimensionless
        const double var_Ca__cbar = 0.050000000000000003; // mM
        const double var_Ca__csqnbar = 10.0; // mM
        const double var_Ca__kmc = 0.0023800000000000002; // mM
        const double var_Ca__kmcsqn = 0.80000000000000004; // mM
        const double var_Ca__bcsqn = 1 / (1.0 + var_Ca__csqnbar * var_Ca__kmcsqn / pow((var_chaste_interface__Ca__Ca_jsr + var_Ca__kmcsqn), 2)); // dimensionless
        const double var_Ca__kmt = 0.00050000000000000001; // mM
        const double var_Ca__tbar = 0.070000000000000007; // mM
        const double var_Ca__bmyo = 1 / (1.0 + var_Ca__cbar * var_Ca__kmc / pow((var_chaste_interface__Ca__Ca_i + var_Ca__kmc), 2) + var_Ca__kmt * var_Ca__tbar / pow((var_chaste_interface__Ca__Ca_i + var_Ca__kmt), 2)); // dimensionless
        const double var_Environment__F = 96485.0; // C_per_mole
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_IKr__gkr = 0.5 * sqrt(mParameters[2]) * mParameters[13]; // mS_per_uF
        const double var_IKs__gks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[14]; // mS_per_uF
        const double var_INa__gNa = pow(var_chaste_interface__INa__m, 3) * mParameters[9] * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // mS_per_uF
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__allo = 1 / (1.0 + pow(var_INaCa__KmCa, 2) / pow(var_INaCa__ca_i_NaCa, 2)); // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3]); // dimensionless
        const double var_Idiff_Itr__idiff = 5.0 * var_chaste_interface__Ca__Ca_ss - 5.0 * var_chaste_interface__Ca__Ca_i; // mM_per_ms
        const double var_Idiff_Itr__itr = 0.0083333333333333332 * var_chaste_interface__Ca__Ca_nsr - 0.0083333333333333332 * var_chaste_interface__Ca__Ca_jsr; // mM_per_ms
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * mParameters[8] / (var_chaste_interface__Ca__Ca_i + var_IpCa__kmpca); // uA_per_uF
        const double var_Irel__CaMK0 = 0.050000000000000003; // dimensionless
        const double var_Irel__Km = 0.0015; // mM
        const double var_Irel__CaMKbound = (1.0 - var_chaste_interface__Irel__CaMKtrap) * var_Irel__CaMK0 / (1.0 + var_Irel__Km / var_chaste_interface__Ca__Ca_ss); // dimensionless
        const double var_Irel__CaMKactive = var_Irel__CaMKbound + var_chaste_interface__Irel__CaMKtrap; // dimensionless
        const double d_dt_chaste_interface_var_Irel__CaMKtrap = -0.00068000000000000005 * var_chaste_interface__Irel__CaMKtrap + 0.050000000000000003 * (-var_chaste_interface__Irel__CaMKtrap + var_Irel__CaMKactive) * var_Irel__CaMKactive; // 1 / ms
        const double var_ICaL__taufca = 0.5 + 1 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca__Ca_ss) + 10.0 * var_Irel__CaMKactive / (0.14999999999999999 + var_Irel__CaMKactive); // ms
        const double var_Irel__KmCaMK = 0.14999999999999999; // dimensionless
        const double var_Irel__dro_inf = pow(var_chaste_interface__Ca__Ca_jsr, 1.8999999999999999) / (pow(var_chaste_interface__Ca__Ca_jsr, 1.8999999999999999) + 1644.6531773416521 * pow((var_chaste_interface__Ca__Ca_ss / (0.0028 + var_chaste_interface__Ca__Ca_ss)), 1.8999999999999999)); // dimensionless
        const double var_Irel__dtau_rel_max = 10.0; // ms
        const double var_Irel__dtau_rel = var_Irel__CaMKactive * var_Irel__dtau_rel_max / (var_Irel__CaMKactive + var_Irel__KmCaMK); // ms
        const double var_Ito2__Kmto2 = 0.1502; // mM
        const double var_Ito2__AAss = 1 / (1.0 + var_Ito2__Kmto2 / var_chaste_interface__Ca__Ca_ss); // dimensionless
        const double d_dt_chaste_interface_var_Ito2__AA = var_Ito2__AAss - var_chaste_interface__Ito2__AA; // 1 / ms
        const double var_Iup_Ileak__Kmup = 0.00092000000000000003; // mM
        const double var_Iup_Ileak__dJupmax = 0.75; // dimensionless
        const double var_Iup_Ileak__dJup = var_Irel__CaMKactive * var_Iup_Ileak__dJupmax / (var_Irel__CaMKactive + var_Irel__KmCaMK); // dimensionless
        const double var_Iup_Ileak__dKmPLBmax = 0.00017000000000000001; // mM
        const double var_Iup_Ileak__dKmPLB = var_Irel__CaMKactive * var_Iup_Ileak__dKmPLBmax / (var_Irel__CaMKactive + var_Irel__KmCaMK); // mM
        const double var_Iup_Ileak__iupmax = 0.0043750000000000004; // mM_per_ms
        const double var_Iup_Ileak__iup = (1.0 + var_Iup_Ileak__dJup) * var_chaste_interface__Ca__Ca_i * var_Iup_Ileak__iupmax / (-var_Iup_Ileak__dKmPLB + var_chaste_interface__Ca__Ca_i + var_Iup_Ileak__Kmup); // mM_per_ms
        const double var_Iup_Ileak__nsrmax = 15.0; // mM
        const double var_Iup_Ileak__ileak = var_chaste_interface__Ca__Ca_nsr * var_Iup_Ileak__iupmax / var_Iup_Ileak__nsrmax; // mM_per_ms
        const double var_K__CTKClmax = 7.0755999999999996e-6; // mM_per_ms
        const double var_Na__CTNaClmax = 9.8442999999999999e-6; // mM_per_ms
        const double var_INaCa__denom2 = pow(var_INaCa__KmNao, 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_INaCa__ca_i_NaCa / var_INaCa__KmCai) * mParameters[0]; // mM4
        const double var_INaCa__denom3 = pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] + pow(mParameters[3], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[4] / (-1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICaL__ICaL = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca; // uA_per_uF
        const double var_ICaL__fca2ss = 1 / (1.0 - 100.0 * var_ICaL__ICaL); // dimensionless
        const double var_ICaL__fcass = 0.14999999999999999 + 0.55000000000000004 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca__Ca_ss) + 0.29999999999999999 / (1.0 - 20.0 * var_ICaL__ICaL); // dimensionless
        const double d_dt_chaste_interface_var_ICaL__fca = (-var_chaste_interface__ICaL__fca + var_ICaL__fcass) / var_ICaL__taufca; // 1 / ms
        const double var_ICaL__taufca2 = 125.0 + 300.0 / (1.0 + exp(-4.375 - 25.0 * var_ICaL__ICaL)); // ms
        const double d_dt_chaste_interface_var_ICaL__fca2 = (-var_chaste_interface__ICaL__fca2 + var_ICaL__fca2ss) / var_ICaL__taufca2; // 1 / ms
        const double var_ICab__ICab = ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[6] * var_chaste_interface__cell__V / (-1.0 + exp(0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_IKr__r = 1 / (1.0 + 2.5 * exp(2.8000000000000003 + 0.10000000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaCa__denom1 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__num = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] * exp(var_Environment__FonRT * var_INaCa__eta * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__INaCa = mParameters[15] * var_INaCa__allo * var_INaCa__num / ((var_INaCa__denom2 + var_INaCa__denom3) * var_INaCa__denom1); // uA_per_uF
        const double var_INaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_Environment__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaK__INaK = mParameters[2] * var_INaK__fnak * mParameters[16] / ((1.0 + pow(var_INaK__kmnai, 2) / pow(var_chaste_interface__Na__Na_i, 2)) * (mParameters[2] + var_INaK__kmko)); // uA_per_uF
        const double var_Irel__cafac = 1 / (1.0 + exp(3.3333333333333335 + 66.666666666666671 * var_ICaL__ICaL)); // dimensionless
        const double var_Irel__riss = 1 / (1.0 + exp(-16.0 + 80.0 * var_Irel__cafac + 40000.0 * var_chaste_interface__Ca__Ca_ss)); // dimensionless
        const double var_Irel__ross = var_Irel__dro_inf / (1.0 + 1 / pow(var_ICaL__ICaL, 2)); // dimensionless
        const double d_dt_chaste_interface_var_Irel__ro = 0.33333333333333331 * var_Irel__ross - 0.33333333333333331 * var_chaste_interface__Irel__ro; // 1 / ms
        const double var_Irel__tauri = 3.0 + (350.0 - var_Irel__dtau_rel) / (1.0 + exp(-15.0 + 5000.0 * var_chaste_interface__Ca__Ca_ss + 15.0 * var_Irel__cafac)) + var_Irel__dtau_rel; // ms
        const double d_dt_chaste_interface_var_Irel__ri = (-var_chaste_interface__Irel__ri + var_Irel__riss) / var_Irel__tauri; // 1 / ms
        const double var_Irel__vg = 1 / (1.0 + exp(2.6000000000000001 + 0.20000000000000001 * var_ICaL__ibarca)); // dimensionless
        const double var_Irel__Grel = 3000.0 * var_Irel__vg; // per_ms
        const double var_Irel__irelcicr = (-var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_jsr) * var_Irel__Grel * var_chaste_interface__Irel__ri * var_chaste_interface__Irel__ro; // mM_per_ms
        const double d_dt_chaste_interface_var_Ca__Ca_jsr = (-var_Irel__irelcicr + var_Idiff_Itr__itr) * var_Ca__bcsqn; // mM / ms
        const double var_Ito__rv = ((var_chaste_interface__cell__V <= 0) ? (exp(var_chaste_interface__cell__V / mParameters[19])) : (1.0)); // dimensionless
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (0.0096484999999999991 * (-mParameters[1] * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-mParameters[1] * exp(0.0374358835078 * var_chaste_interface__cell__V) + var_chaste_interface__Cl__Cl_i) * mParameters[17] * var_chaste_interface__cell__V / (1.0 - exp(0.0374358835078 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_chaste_interface__Ito2__AA * var_Ito2__Ito2_max; // uA_per_uF
        const double var_cell__a = 0.0011000000000000001; // cm
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_cell__l = 0.01; // cm
        const double var_cell__ageo = 2.0 * M_PI * pow(var_cell__a, 2) + 2.0 * M_PI * var_cell__a * var_cell__l; // cm2
        const double var_cell__Acap = 2.0 * var_cell__ageo; // uF
        const double var_cell__AF = var_cell__Acap / var_Environment__F; // uF_mole_per_C
        const double var_cell__vcell = 1000.0 * M_PI * pow(var_cell__a, 2) * var_cell__l; // uL
        const double var_cell__vjsr = 0.0047999999999999996 * var_cell__vcell; // uL
        const double var_cell__vmyo = 0.68000000000000005 * var_cell__vcell; // uL
        const double var_cell__vnsr = 0.055199999999999999 * var_cell__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_nsr = -var_Iup_Ileak__ileak - var_Idiff_Itr__itr * var_cell__vjsr / var_cell__vnsr + var_Iup_Ileak__iup; // mM / ms
        const double var_cell__vss = 0.02 * var_cell__vcell; // uL
        const double d_dt_chaste_interface_var_Ca__Ca_i = ((-var_Iup_Ileak__iup + var_Iup_Ileak__ileak) * var_cell__vnsr / var_cell__vmyo + var_Idiff_Itr__idiff * var_cell__vss / var_cell__vmyo + 0.5 * (-var_ICab__ICab - var_IpCa__IpCa + 2.0 * var_INaCa__INaCa) * var_cell__AF / var_cell__vmyo) * var_Ca__bmyo; // mM / ms
        const double d_dt_chaste_interface_var_Ca__Ca_ss = (-var_Idiff_Itr__idiff + var_Irel__irelcicr * var_cell__vjsr / var_cell__vss - 0.5 * var_ICaL__ICaL * var_cell__AF / var_cell__vss) * var_Ca__bss; // mM / ms
        const double var_reversal_potentials__ECl = -log(mParameters[1] / var_chaste_interface__Cl__Cl_i) / var_Environment__FonRT; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__cell__V) * mParameters[7]; // uA_per_uF
        const double var_cell__clont = 0.5 * var_cell__i_Stim + var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
        const double var_reversal_potentials__EK = log(mParameters[2] / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)); // per_ms
        const double var_IK1__bk1 = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__IK1 = 0.5 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[10] * var_IK1__ak1 / (var_IK1__ak1 + var_IK1__bk1); // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[12] / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKr__gkr * var_IKr__r * var_chaste_interface__IKr__xr; // uA_per_uF
        const double var_Ito__Ito = pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[18] * var_Ito__rv * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv; // uA_per_uF
        const double var_K__CTKCl = (-var_reversal_potentials__ECl + var_reversal_potentials__EK) * var_K__CTKClmax / (87.825100000000006 - var_reversal_potentials__ECl + var_reversal_potentials__EK); // mM_per_ms
        const double var_reversal_potentials__ENa = log(mParameters[3] / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__INa = (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INa__gNa; // uA_per_uF
        const double var_INal__INal = pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * mParameters[11] * var_chaste_interface__INal__hL; // uA_per_uF
        const double var_Na__CTNaCl = pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4) * var_Na__CTNaClmax / (59494197.640692554 + pow((-var_reversal_potentials__ECl + var_reversal_potentials__ENa), 4)); // mM_per_ms
        const double d_dt_chaste_interface_var_Cl__Cl_i = var_cell__AF * var_cell__clont / var_cell__vmyo + var_K__CTKCl + var_Na__CTNaCl; // mM / ms
        const double var_cell__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + var_INa__INa + var_INal__INal; // uA_per_uF
        const double d_dt_chaste_interface_var_Na__Na_i = -var_cell__AF * var_cell__naiont / var_cell__vmyo + var_Na__CTNaCl; // mM / ms
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((mParameters[3] * var_reversal_potentials__prnak + mParameters[2]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_Environment__FonRT; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__cell__V) * var_IKs__gks * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_uF
        const double var_cell__kiont = 0.5 * var_cell__i_Stim - 2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito__Ito; // uA_per_uF
        const double d_dt_chaste_interface_var_K__K_i = -var_cell__AF * var_cell__kiont / var_cell__vmyo + var_K__CTKCl; // mM / ms
        
        rResidual[0] = rCurrentGuess[0] - rY[1] - mDt*d_dt_chaste_interface_var_Ca__Ca_i;
        rResidual[5] = rCurrentGuess[5] - rY[8] - mDt*d_dt_chaste_interface_var_ICaL__fca;
        rResidual[6] = rCurrentGuess[6] - rY[9] - mDt*d_dt_chaste_interface_var_ICaL__fca2;
        rResidual[10] = rCurrentGuess[10] - rY[17] - mDt*d_dt_chaste_interface_var_Ito2__AA;
        rResidual[7] = rCurrentGuess[7] - rY[20] - mDt*d_dt_chaste_interface_var_Irel__CaMKtrap;
        rResidual[9] = rCurrentGuess[9] - rY[21] - mDt*d_dt_chaste_interface_var_Irel__ro;
        rResidual[8] = rCurrentGuess[8] - rY[22] - mDt*d_dt_chaste_interface_var_Irel__ri;
        rResidual[12] = rCurrentGuess[12] - rY[23] - mDt*d_dt_chaste_interface_var_Na__Na_i;
        rResidual[11] = rCurrentGuess[11] - rY[24] - mDt*d_dt_chaste_interface_var_K__K_i;
        rResidual[4] = rCurrentGuess[4] - rY[25] - mDt*d_dt_chaste_interface_var_Cl__Cl_i;
        rResidual[1] = rCurrentGuess[1] - rY[26] - mDt*d_dt_chaste_interface_var_Ca__Ca_jsr;
        rResidual[2] = rCurrentGuess[2] - rY[27] - mDt*d_dt_chaste_interface_var_Ca__Ca_nsr;
        rResidual[3] = rCurrentGuess[3] - rY[28] - mDt*d_dt_chaste_interface_var_Ca__Ca_ss;
    }

    void Celldavies_isap_2012FromCellMLBackwardEulerNoLut::ComputeJacobian(double var_chaste_interface__Environment__time, const double rCurrentGuess[13], double rJacobian[13][13])
    {
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.99765453819431
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.998157020148849
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 5.38067794749339e-07
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.99805432294836
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999986839648304
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.989081601403786
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.255981702631947
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.0147449166757808
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.0147504787196957
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.00894974857468432
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.999992183094244
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.787996527242362
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.488129650338831
        
        double var_chaste_interface__Ca__Ca_i = rCurrentGuess[0];
        double var_chaste_interface__Ca__Ca_jsr = rCurrentGuess[1];
        double var_chaste_interface__Ca__Ca_nsr = rCurrentGuess[2];
        double var_chaste_interface__Ca__Ca_ss = rCurrentGuess[3];
        double var_chaste_interface__Cl__Cl_i = rCurrentGuess[4];
        double var_chaste_interface__ICaL__fca = rCurrentGuess[5];
        double var_chaste_interface__ICaL__fca2 = rCurrentGuess[6];
        double var_chaste_interface__Irel__CaMKtrap = rCurrentGuess[7];
        double var_chaste_interface__Irel__ri = rCurrentGuess[8];
        double var_chaste_interface__Irel__ro = rCurrentGuess[9];
        double var_chaste_interface__Ito2__AA = rCurrentGuess[10];
        double var_chaste_interface__K__K_i = rCurrentGuess[11];
        double var_chaste_interface__Na__Na_i = rCurrentGuess[12];
        
        const double var_x0 = exp(9.9999999999999995e-8);
        const double var_x1 = 0.0048242499999999995 * mParameters[6];
        const double var_x2 = var_x1 / (-1.0 + var_x0);
        const double var_x3 = exp(-9.9999999999999995e-8);
        const double var_x4 = var_x1 / (-1.0 + var_x3);
        const double var_x5 = var_x3 * var_x4;
        const double var_x6 = fabs(var_chaste_interface__cell__V);
        const double var_x7 = var_x6 < 1.3356169352750065e-6;
        const double var_x8 = 0.074871767015599999 * var_chaste_interface__cell__V;
        const double var_x9 = exp(var_x8);
        const double var_x10 = 3612.001220250083 * var_chaste_interface__cell__V;
        const double var_x11 = var_x10 * mParameters[6] / (-1.0 + var_x9);
        const double var_x12 = 0.00050000000000000001 + var_chaste_interface__Ca__Ca_i;
        const double var_x13 = 3.0760371441184366e-5 * mParameters[8];
        const double var_x14 = var_x13 / var_x12;
        const double var_x15 = 1.0 - var_chaste_interface__Irel__CaMKtrap;
        const double var_x16 = 1 / var_chaste_interface__Ca__Ca_ss;
        const double var_x17 = 1.0 + 0.0015 * var_x16;
        const double var_x18 = 1 / var_x17;
        const double var_x19 = 0.050000000000000003 * var_x18;
        const double var_x20 = var_x15 * var_x19 + var_chaste_interface__Irel__CaMKtrap;
        const double var_x21 = 0.14999999999999999 + var_x20;
        const double var_x22 = 1 / var_x21;
        const double var_x23 = var_x20 * var_x22;
        const double var_x24 = 0.00092000000000000003 - 0.00017000000000000001 * var_x23 + var_chaste_interface__Ca__Ca_i;
        const double var_x25 = 1 / var_x24;
        const double var_x26 = 1.0 + 0.75 * var_x23;
        const double var_x27 = var_x25 * var_x26;
        const double var_x28 = 0.00035514705882352943 * var_x27;
        const double var_x29 = pow(var_x12, (-2));
        const double var_x30 = 0.00035514705882352943 * var_chaste_interface__Ca__Ca_i;
        const double var_x31 = var_x26 / pow(var_x24, 2);
        const double var_x32 = var_x30 * var_x31;
        const double var_x33 = pow(mParameters[3], 3);
        const double var_x34 = 1.5 * var_x33;
        const double var_x35 = -1004882.8125 - var_x34 - 775361.25000000012 * mParameters[0];
        const double var_x36 = pow(var_chaste_interface__Na__Na_i, 3);
        const double var_x37 = (1.0 + 416.66666666666669 * var_chaste_interface__Ca__Ca_i) * mParameters[0];
        const double var_x38 = var_x36 * mParameters[0];
        const double var_x39 = var_x33 * (1.0 + 0.00053738391835633597 * var_x36);
        const double var_x40 = exp(-0.024333324280070002 * var_chaste_interface__cell__V);
        const double var_x41 = 1 / (1.0 + 0.27000000000000002 * var_x40);
        const double var_x42 = 1.0 + 6.9444444444444451e-9 / pow(var_chaste_interface__Ca__Ca_i, 2);
        const double var_x43 = 1 / var_x42;
        const double var_x44 = exp(0.01310255922773 * var_chaste_interface__cell__V);
        const double var_x45 = var_x34 * var_chaste_interface__Ca__Ca_i;
        const double var_x46 = var_x38 * var_x44 - var_x40 * var_x45;
        const double var_x47 = var_x41 * var_x43 * var_x46 * mParameters[15];
        const double var_x48 = var_x47 / pow((1.2936831875607387e-6 * var_x36 + 0.0018518248862973764 * var_x37 + 9.9514091350826051e-7 * var_x38 + 3.5825072886297377e-9 * var_x39 + 1.4927113702623908e-6 * var_x33 * var_chaste_interface__Ca__Ca_i + var_chaste_interface__Ca__Ca_i), 2);
        const double var_x49 = 6.0924326210094507e-17 * var_x48;
        const double var_x50 = 1 / (var_x38 + var_x45 + 1004882.8125 * var_chaste_interface__Ca__Ca_i + 0.0035999999999999999 * var_x39 + 1.3 * var_x36 + 1860.8670000000004 * var_x37);
        const double var_x51 = var_x41 * var_x50 * mParameters[15];
        const double var_x52 = var_x46 * var_x51 / (pow(var_x42, 2) * pow(var_chaste_interface__Ca__Ca_i, 3));
        const double var_x53 = var_x43 * var_x51;
        const double var_x54 = var_x33 * var_x40 * var_x53;
        const double var_x55 = 0.0023800000000000002 + var_chaste_interface__Ca__Ca_i;
        const double var_x56 = 1.0 + 0.00011900000000000002 / pow(var_x55, 2) + 3.5000000000000004e-5 * var_x29;
        const double var_x57 = 1 / var_x56;
        const double var_x58 = var_x57;
        const double var_x59 = -0.34100000000000003 * mParameters[0];
        const double var_x60 = var_x4 * (var_x59 + var_x3 * var_chaste_interface__Ca__Ca_i);
        const double var_x61 = pow(var_chaste_interface__Ca__Ca_ss, (-2));
        const double var_x62 = var_x15 * var_x61 / pow(var_x17, 2);
        const double var_x63 = var_x22 * var_x62;
        const double var_x64 = var_x20 / pow(var_x21, 2);
        const double var_x65 = var_x62 * var_x64;
        const double var_x66 = 5.6250000000000005e-5 * var_x63 - 5.6250000000000005e-5 * var_x65;
        const double var_x67 = var_x25 * var_x30;
        const double var_x68 = 1.2750000000000002e-8 * var_x63 - 1.2750000000000002e-8 * var_x65;
        const double var_x69 = 1 - var_x19;
        const double var_x70 = var_x22 * var_x69;
        const double var_x71 = var_x64 * (-1 + var_x19);
        const double var_x72 = 0.75 * var_x70 + 0.75 * var_x71;
        const double var_x73 = 0.00017000000000000001 * var_x70 + 0.00017000000000000001 * var_x71;
        const double var_x74 = pow(var_chaste_interface__Na__Na_i, 2);
        const double var_x75 = var_x74 * mParameters[0];
        const double var_x76 = -3 * var_x75 - 3.9000000000000004 * var_x74 - 5.8037463182484285e-6 * var_x33 * var_x74;
        const double var_x77 = var_x44 * var_x53 * var_x75;
        const double var_x78 = -14.999998664383064 + var_chaste_interface__cell__V;
        const double var_x79 = exp(9.9999999999763197e-8);
        const double var_x80 = var_chaste_interface__Ca__Ca_ss;
        const double var_x81 = 0.019296999999954306 * mParameters[4];
        const double var_x82 = var_x81 / (-1.0 + var_x79);
        const double var_x83 = exp(-9.9999999999763197e-8);
        const double var_x84 = var_x59 + var_x80 * var_x83;
        const double var_x85 = 1 / (-1.0 + var_x83);
        const double var_x86 = var_x81 * var_x85;
        const double var_x87 = var_x84 * var_x86;
        const double var_x88 = var_x78 * (var_x87 + var_x82 * (var_x59 + var_x79 * var_x80));
        const double var_x89 = -15.0 + var_chaste_interface__cell__V;
        const double var_x90 = fabs(var_x89) < 1.3356169352718439e-6;
        const double var_x91 = exp(-1.1230765052339999 + var_x8);
        const double var_x92 = var_x59 + var_x80 * var_x91;
        const double var_x93 = -1.0 + var_x91;
        const double var_x94 = 14448.004881000332 * var_x89 * mParameters[4] / var_x93;
        const double var_x95 = ((var_x90) ? (-var_x87 + 374358.83507888648 * var_x88) : (var_x92 * var_x94));
        const double var_x96 = exp(2.6000000000000001 + 0.20000000000000001 * var_x95);
        const double var_x97 = 1.0 + var_x96;
        const double var_x98 = 1 / var_x97;
        const double var_x99 = var_x98 * var_chaste_interface__Irel__ro;
        const double var_x100 = var_x99 * var_chaste_interface__Irel__ri;
        const double var_x101 = 3000.0 * var_x100;
        const double var_x102 = 0.80000000000000004 + var_chaste_interface__Ca__Ca_jsr;
        const double var_x103 = pow(var_x102, (-2));
        const double var_x104 = 1 / (1.0 + 8.0 * var_x103);
        const double var_x105 = var_x104;
        const double var_x106 = -var_chaste_interface__Ca__Ca_ss + var_chaste_interface__Ca__Ca_jsr;
        const double var_x107 = var_x83 * var_x86;
        const double var_x108 = var_x107 + var_x79 * var_x82;
        const double var_x109 = ((var_x90) ? (-var_x107 + var_x108 * (-5615382.0261832969 + 374358.83507888648 * var_chaste_interface__cell__V)) : (var_x91 * var_x94));
        const double var_x110 = var_x106 * var_chaste_interface__Irel__ri;
        const double var_x111 = var_x109 * var_x110 * var_x96 * var_chaste_interface__Irel__ro / pow(var_x97, 2);
        const double var_x112 = var_x106 * var_x99;
        const double var_x113 = 3000.0 * var_x104;
        const double var_x114 = var_x110 * var_x98;
        const double var_x115 = 0.0043750000000000004 * var_chaste_interface__Ca__Ca_i;
        const double var_x116 = var_x115 * var_x31;
        const double var_x117 = var_x115 * var_x25;
        const double var_x118 = 0.0086999999999999994 + var_chaste_interface__Ca__Ca_ss;
        const double var_x119 = 0.00087000000000000001 + var_chaste_interface__Ca__Ca_ss;
        const double var_x120 = 1.0 + 0.0097788000000000007 / pow(var_x118, 2) + 4.0890000000000003e-5 / pow(var_x119, 2);
        const double var_x121 = 1 / var_x120;
        const double var_x122 = 719.99999999999989 * var_x100;
        const double var_x123 = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp);
        const double var_x124 = var_x123 * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2;
        const double var_x125 = var_x109 * var_x124;
        const double var_x126 = var_x124 * var_x95;
        const double var_x127 = var_x123 * var_x95 * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2;
        const double var_x128 = var_x127 * var_chaste_interface__ICaL__fca2;
        const double var_x129 = 0.0010458526290002684 * var_x121;
        const double var_x130 = var_x127 * var_chaste_interface__ICaL__fca;
        const double var_x131 = 719.99999999999989 * var_x121;
        const double var_x132 = 0.0096484999999999991 * mParameters[17];
        const double var_x133 = var_x132 / (1.0 - var_x0);
        const double var_x134 = var_x132 / (1.0 - var_x3);
        const double var_x135 = var_x6 < 2.671233870550013e-6;
        const double var_x136 = 0.0374358835078 * var_chaste_interface__cell__V;
        const double var_x137 = exp(var_x136);
        const double var_x138 = var_x10 * mParameters[17] / (1.0 - var_x137);
        const double var_x139 = 1 / var_chaste_interface__Cl__Cl_i;
        const double var_x140 = log(var_x139 * mParameters[1]);
        const double var_x141 = 1 / var_chaste_interface__K__K_i;
        const double var_x142 = log(var_x141 * mParameters[2]);
        const double var_x143 = 26.712338705500134 * var_x142;
        const double var_x144 = var_x143 + 26.712338705500134 * var_x140;
        const double var_x145 = 0.00018900582374463672 / (87.825100000000006 + var_x144);
        const double var_x146 = 2.4504050574883893e-8 * var_x144 / pow((1 + 0.30415380916731244 * var_x140 + 0.30415380916731244 * var_x142), 2);
        const double var_x147 = var_x139 * var_x146 - var_x139 * var_x145;
        const double var_x148 = 1 / var_chaste_interface__Na__Na_i;
        const double var_x149 = var_x140 + log(var_x148 * mParameters[3]);
        const double var_x150 = pow(var_x149, 4);
        const double var_x151 = 2.8839711417381356e-9 * pow(var_x149, 7) / pow((1 + 0.008558014922736952 * var_x150), 2);
        const double var_x152 = 20.048989239405216 * pow(var_x149, 3) / (59494197.640692554 + 509152.23122530844 * var_x150);
        const double var_x153 = var_x139 * var_x151 - var_x139 * var_x152;
        const double var_x154 = var_x134 * (-var_x3 * mParameters[1] + var_chaste_interface__Cl__Cl_i);
        const double var_x155 = var_x141 * var_x146 - var_x141 * var_x145;
        const double var_x156 = var_x148 * var_x151 - var_x148 * var_x152;
        const double var_x157 = 1 / (1.0 + 333.33333333333331 * var_chaste_interface__Ca__Ca_ss);
        const double var_x158 = 10.0 * var_x23;
        const double var_x159 = 1 / (0.5 + var_x158 + var_x157);
        const double var_x160 = pow((0.0030000000000000001 + var_chaste_interface__Ca__Ca_ss), (-2));
        const double var_x161 = -var_x126;
        const double var_x162 = 0.014999999999999999 / pow((0.050000000000000003 + var_x161), 2);
        const double var_x163 = 0.00075000000000000002 * var_x65 - 0.00075000000000000002 * var_x63;
        const double var_x164 = 0.01 * (0.14999999999999999 - var_chaste_interface__ICaL__fca + 0.55000000000000004 * var_x157 + 0.29999999999999999 / (1.0 - 20.0 * var_x126)) / pow((0.050000000000000003 + var_x23 + 0.10000000000000001 * var_x157), 2);
        const double var_x165 = -10.0 * var_x70 - 10.0 * var_x71;
        const double var_x166 = exp(-4.375 - 25.0 * var_x126);
        const double var_x167 = 1.0 + var_x166;
        const double var_x168 = 1 / var_x167;
        const double var_x169 = 1 / (125.0 + 300.0 * var_x168);
        const double var_x170 = 0.01 / pow((0.01 + var_x161), 2);
        const double var_x171 = var_x169 * var_x170;
        const double var_x172 = 0.083333333333333329 * var_x166 * (-var_chaste_interface__ICaL__fca2 + 1 / (1.0 - 100.0 * var_x126)) / (pow(var_x167, 2) * pow((0.41666666666666669 + var_x168), 2));
        const double var_x173 = 0.0025000000000000005 * var_x18;
        const double var_x174 = exp(3.3333333333333335 + 66.666666666666671 * var_x126);
        const double var_x175 = 1.0 + var_x174;
        const double var_x176 = 1 / var_x175;
        const double var_x177 = exp(-15.0 + 5000.0 * var_chaste_interface__Ca__Ca_ss + 15.0 * var_x176);
        const double var_x178 = 1.0 + var_x177;
        const double var_x179 = 1 / var_x178;
        const double var_x180 = var_x174 / pow(var_x175, 2);
        const double var_x181 = var_x125 * var_x180;
        const double var_x182 = 350.0 - var_x158;
        const double var_x183 = var_x177 * var_x182 / pow(var_x178, 2);
        const double var_x184 = var_x179 * var_x182;
        const double var_x185 = exp(-16.0 + 80.0 * var_x176 + 40000.0 * var_chaste_interface__Ca__Ca_ss);
        const double var_x186 = 1.0 + var_x185;
        const double var_x187 = (-var_chaste_interface__Irel__ri + 1 / var_x186) / pow((0.29999999999999999 + var_x23 + 0.10000000000000001 * var_x184), 2);
        const double var_x188 = 0.01 * var_x187;
        const double var_x189 = 1 / (3.0 + var_x158 + var_x184);
        const double var_x190 = var_x185 * var_x189 / pow(var_x186, 2);
        const double var_x191 = var_x128 * var_x180;
        const double var_x192 = 5333.333333333333 * var_x190;
        const double var_x193 = 10.0 * var_x183 * var_x187;
        const double var_x194 = var_x130 * var_x180;
        const double var_x195 = var_x85 * mParameters[4];
        const double var_x196 = var_x88 - 5.1546799999759483e-8 * var_x195 * var_x84;
        const double var_x197 = pow(var_x93, 2) / (pow((-1 + 0.066666666666666666 * var_chaste_interface__cell__V), 2) * pow(mParameters[4], 2));
        const double var_x198 = ((var_x90) ? (7.1354903911398109e-12 / pow(var_x196, 2)) : (2.1291277605263905e-11 * var_x197 / pow(var_x92, 2)));
        const double var_x199 = pow(var_chaste_interface__ICaL__d, (-2 * var_chaste_interface__ICaL__dp));
        const double var_x200 = pow(var_chaste_interface__ICaL__f, (-2));
        const double var_x201 = pow(var_chaste_interface__ICaL__f2, (-2));
        const double var_x202 = pow(var_chaste_interface__ICaL__fca, (-2));
        const double var_x203 = pow(var_chaste_interface__ICaL__fca2, (-2));
        const double var_x204 = var_x199 * var_x200 * var_x201 * var_x202 * var_x203;
        const double var_x205 = 1.0 + var_x198 * var_x204;
        const double var_x206 = 1 / var_x205;
        const double var_x207 = pow(var_chaste_interface__Ca__Ca_jsr, 1.8999999999999999);
        const double var_x208 = 0.0028 + var_chaste_interface__Ca__Ca_ss;
        const double var_x209 = 1 / var_x208;
        const double var_x210 = pow((var_x209 * var_chaste_interface__Ca__Ca_ss), 1.8999999999999999);
        const double var_x211 = 1 / (var_x207 + 1644.6531773416521 * var_x210);
        const double var_x212 = var_x206 / pow((var_x210 + 0.00060803092942449902 * var_x207), 2);
        const double var_x213 = var_x207 * var_x211 / pow(var_x205, 2);
        const double var_x214 = 0.66666666666666663 * var_x198 * var_x199 * var_x200 * var_x201 * var_x213;
        const double var_x215 = 1 / var_chaste_interface__Ca__Ca_i;
        const double var_x216 = pow(var_x215, 1.3999999999999999);
        const double var_x217 = 1.0 + 6.4818210260626455e-7 * var_x216;
        const double var_x218 = 1 / (0.018329999999999999 * var_chaste_interface__Na__Na_i + var_chaste_interface__K__K_i);
        const double var_x219 = mParameters[14] * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2;
        const double var_x220 = 0.0016433629212878199 * var_x141;
        const double var_x221 = var_x218 * var_x219 * (-6.1520742882368733e-5 - 3.6912445729421236e-5 / var_x217);
        const double var_x222 = sqrt(mParameters[2]);
        const double var_x223 = var_x141 * var_x222;
        const double var_x224 = exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 6.370892781261781 * var_x142);
        const double var_x225 = 1.0 + var_x224;
        const double var_x226 = 1 / var_x225;
        const double var_x227 = exp(-2.4444678999999998 + 13.738155796238718 * var_x142 - 0.51429999999999998 * var_chaste_interface__cell__V);
        const double var_x228 = 1.0 + var_x227;
        const double var_x229 = 1 / var_x228;
        const double var_x230 = exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 1.6494869150646332 * var_x142);
        const double var_x231 = exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 2.1455350448257708 * var_x142);
        const double var_x232 = var_x230 + 0.49124000000000001 * var_x231;
        const double var_x233 = var_x229 * var_x232;
        const double var_x234 = 1 / (var_x233 + 1.02 * var_x226);
        const double var_x235 = var_x226 * mParameters[10];
        const double var_x236 = var_x141 * var_x224 / pow(var_x225, 2);
        const double var_x237 = var_x222 * (-var_x143 + var_chaste_interface__cell__V);
        const double var_x238 = mParameters[2] * mParameters[16] / (var_x36 * (1.5 + mParameters[2]) * pow((0.01 + 1 / var_x74), 2) * (1.0 + 0.1245 * exp(-0.00374358835078 * var_chaste_interface__cell__V) + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3])) * exp(-var_x136)));
        const double var_x239 = 1.827729786302835e-16 * var_x48;
        const double var_x240 = 0.0016433629212878199 * var_x148;
        
        
        rJacobian[0][0] = 1.0 - (mDt * (var_x58 * (-0.14705882352941174 + var_x32 - var_x14 - var_x28 + 8.544547622551213e-13 * var_x52 - 9.2281114323553099e-5 * var_x54 - 3.0760371441184366e-5 * ((var_x7) ? (-var_x5 + (0.5 + 374358.83507800003 * var_chaste_interface__cell__V) * (var_x5 + var_x0 * var_x2)) : (var_x11 * var_x9)) + var_x35 * var_x49 + var_x13 * var_x29 * var_chaste_interface__Ca__Ca_i) + (0.00023800000000000004 / pow(var_x55, 3) + 7.0000000000000007e-5 / pow(var_x12, 3)) * (0.14705882352941174 * var_chaste_interface__Ca__Ca_ss + 2.3676470588235295e-5 * var_chaste_interface__Ca__Ca_nsr - 3.0760371441184366e-5 * ((var_x7) ? (-var_x60 + 374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (var_x60 + var_x2 * (var_x59 + var_x0 * var_chaste_interface__Ca__Ca_i))) : (var_x11 * (var_x59 + var_x9 * var_chaste_interface__Ca__Ca_i))) - 0.14705882352941174 * var_chaste_interface__Ca__Ca_i - var_x14 * var_chaste_interface__Ca__Ca_i - var_x28 * var_chaste_interface__Ca__Ca_i + 6.1520742882368733e-5 * var_x47 * var_x50) / pow(var_x56, 2)));
        rJacobian[0][1] = 0.0;
        rJacobian[0][2] = -(mDt * (2.3676470588235295e-5 * var_x57));
        rJacobian[0][3] = -(mDt * (var_x58 * (0.14705882352941174 - var_x32 * var_x68 - var_x66 * var_x67)));
        rJacobian[0][4] = 0.0;
        rJacobian[0][5] = 0.0;
        rJacobian[0][6] = 0.0;
        rJacobian[0][7] = -(mDt * (var_x58 * (-var_x32 * var_x73 - var_x67 * var_x72)));
        rJacobian[0][8] = 0.0;
        rJacobian[0][9] = 0.0;
        rJacobian[0][10] = 0.0;
        rJacobian[0][11] = 0.0;
        rJacobian[0][12] = -(mDt * (var_x58 * (0.0001845622286471062 * var_x77 + var_x49 * var_x76)));
        rJacobian[1][0] = 0.0;
        rJacobian[1][1] = 1.0 - (mDt * (var_x105 * (-0.0083333333333333332 - var_x101) + 0.25 * (0.0083333333333333332 * var_chaste_interface__Ca__Ca_nsr - 0.0083333333333333332 * var_chaste_interface__Ca__Ca_jsr - var_x101 * var_x106) / (pow(var_x102, 3) * pow((0.125 + var_x103), 2))));
        rJacobian[1][2] = -(mDt * (0.0083333333333333332 * var_x104));
        rJacobian[1][3] = -(mDt * (var_x105 * (var_x101 + 600.0 * var_x111)));
        rJacobian[1][4] = 0.0;
        rJacobian[1][5] = 0.0;
        rJacobian[1][6] = 0.0;
        rJacobian[1][7] = 0.0;
        rJacobian[1][8] = -(mDt * (-var_x112 * var_x113));
        rJacobian[1][9] = -(mDt * (-var_x113 * var_x114));
        rJacobian[1][10] = 0.0;
        rJacobian[1][11] = 0.0;
        rJacobian[1][12] = 0.0;
        rJacobian[2][0] = -(mDt * (-var_x116 + 0.0043750000000000004 * var_x27));
        rJacobian[2][1] = -(mDt * (0.00072463768115942019));
        rJacobian[2][2] = 1.0 - (mDt * (-0.0010163043478260869));
        rJacobian[2][3] = -(mDt * (var_x116 * var_x68 + var_x117 * var_x66));
        rJacobian[2][4] = 0.0;
        rJacobian[2][5] = 0.0;
        rJacobian[2][6] = 0.0;
        rJacobian[2][7] = -(mDt * (var_x116 * var_x73 + var_x117 * var_x72));
        rJacobian[2][8] = 0.0;
        rJacobian[2][9] = 0.0;
        rJacobian[2][10] = 0.0;
        rJacobian[2][11] = 0.0;
        rJacobian[2][12] = 0.0;
        rJacobian[3][0] = -(mDt * (5.0 * var_x121));
        rJacobian[3][1] = -(mDt * (var_x121 * var_x122));
        rJacobian[3][2] = 0.0;
        rJacobian[3][3] = 1.0 - (mDt * (var_x121 * (-5.0 - var_x122 - 0.0010458526290002684 * var_x125 - 143.99999999999997 * var_x111) + (0.019557600000000001 / pow(var_x118, 3) + 8.1780000000000006e-5 / pow(var_x119, 3)) * (5.0 * var_chaste_interface__Ca__Ca_i - 5.0 * var_chaste_interface__Ca__Ca_ss - 0.0010458526290002684 * var_x126 + var_x106 * var_x122) / pow(var_x120, 2)));
        rJacobian[3][4] = 0.0;
        rJacobian[3][5] = -(mDt * (-var_x128 * var_x129));
        rJacobian[3][6] = -(mDt * (-var_x129 * var_x130));
        rJacobian[3][7] = 0.0;
        rJacobian[3][8] = -(mDt * (var_x112 * var_x131));
        rJacobian[3][9] = -(mDt * (var_x114 * var_x131));
        rJacobian[3][10] = 0.0;
        rJacobian[3][11] = 0.0;
        rJacobian[3][12] = 0.0;
        rJacobian[4][0] = 0.0;
        rJacobian[4][1] = 0.0;
        rJacobian[4][2] = 0.0;
        rJacobian[4][3] = 0.0;
        rJacobian[4][4] = 1.0 - (mDt * (var_x147 + var_x153 + 6.1520742882368733e-5 * ((var_x135) ? (-var_x134 + (0.5 + 187179.41753900002 * var_chaste_interface__cell__V) * (var_x133 + var_x134)) : (var_x138)) * var_chaste_interface__Ito2__AA - 0.0016433629212878199 * var_x139 * mParameters[7]));
        rJacobian[4][5] = 0.0;
        rJacobian[4][6] = 0.0;
        rJacobian[4][7] = 0.0;
        rJacobian[4][8] = 0.0;
        rJacobian[4][9] = 0.0;
        rJacobian[4][10] = -(mDt * (6.1520742882368733e-5 * ((var_x135) ? (-var_x154 + 187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (var_x154 + var_x133 * (-var_x0 * mParameters[1] + var_chaste_interface__Cl__Cl_i))) : (var_x138 * (-var_x137 * mParameters[1] + var_chaste_interface__Cl__Cl_i)))));
        rJacobian[4][11] = -(mDt * (var_x155));
        rJacobian[4][12] = -(mDt * (var_x156));
        rJacobian[5][0] = 0.0;
        rJacobian[5][1] = 0.0;
        rJacobian[5][2] = 0.0;
        rJacobian[5][3] = -(mDt * (var_x159 * (-0.0016500000000000002 * var_x160 + var_x125 * var_x162) + var_x164 * (var_x163 + 0.0030000000000000001 * var_x160)));
        rJacobian[5][4] = 0.0;
        rJacobian[5][5] = 1.0 - (mDt * (var_x159 * (-1 + var_x128 * var_x162)));
        rJacobian[5][6] = -(mDt * (var_x130 * var_x159 * var_x162));
        rJacobian[5][7] = -(mDt * (var_x164 * var_x165));
        rJacobian[5][8] = 0.0;
        rJacobian[5][9] = 0.0;
        rJacobian[5][10] = 0.0;
        rJacobian[5][11] = 0.0;
        rJacobian[5][12] = 0.0;
        rJacobian[6][0] = 0.0;
        rJacobian[6][1] = 0.0;
        rJacobian[6][2] = 0.0;
        rJacobian[6][3] = -(mDt * (var_x125 * var_x171 - var_x125 * var_x172));
        rJacobian[6][4] = 0.0;
        rJacobian[6][5] = -(mDt * (var_x128 * var_x171 - var_x128 * var_x172));
        rJacobian[6][6] = 1.0 - (mDt * (var_x169 * (-1 + var_x130 * var_x170) - var_x130 * var_x172));
        rJacobian[6][7] = 0.0;
        rJacobian[6][8] = 0.0;
        rJacobian[6][9] = 0.0;
        rJacobian[6][10] = 0.0;
        rJacobian[6][11] = 0.0;
        rJacobian[6][12] = 0.0;
        rJacobian[7][0] = 0.0;
        rJacobian[7][1] = 0.0;
        rJacobian[7][2] = 0.0;
        rJacobian[7][3] = -(mDt * (3.7500000000000005e-6 * var_x20 * var_x62 + 1.8750000000000003e-7 * var_x61 * pow(var_x15, 2) / pow(var_x17, 3)));
        rJacobian[7][4] = 0.0;
        rJacobian[7][5] = 0.0;
        rJacobian[7][6] = 0.0;
        rJacobian[7][7] = 1.0 - (mDt * (-0.00068000000000000005 - var_x173 * var_x20 + var_x15 * var_x173 * var_x69));
        rJacobian[7][8] = 0.0;
        rJacobian[7][9] = 0.0;
        rJacobian[7][10] = 0.0;
        rJacobian[7][11] = 0.0;
        rJacobian[7][12] = 0.0;
        rJacobian[8][0] = 0.0;
        rJacobian[8][1] = 0.0;
        rJacobian[8][2] = 0.0;
        rJacobian[8][3] = -(mDt * (var_x188 * (var_x163 + var_x183 * (5000.0 - 1000.0 * var_x181) - var_x163 * var_x179) - var_x190 * (40000.0 - 5333.333333333333 * var_x181)));
        rJacobian[8][4] = 0.0;
        rJacobian[8][5] = -(mDt * (var_x191 * var_x192 - var_x191 * var_x193));
        rJacobian[8][6] = -(mDt * (var_x192 * var_x194 - var_x193 * var_x194));
        rJacobian[8][7] = -(mDt * (var_x188 * (var_x165 - var_x165 * var_x179)));
        rJacobian[8][8] = 1.0 - (mDt * (-var_x189));
        rJacobian[8][9] = 0.0;
        rJacobian[8][10] = 0.0;
        rJacobian[8][11] = 0.0;
        rJacobian[8][12] = 0.0;
        rJacobian[9][0] = 0.0;
        rJacobian[9][1] = -(mDt * (-2.3414435371998602e-7 * var_x212 * pow(var_chaste_interface__Ca__Ca_jsr, 2.7999999999999998) + 0.6333333333333333 * var_x206 * var_x211 * pow(var_chaste_interface__Ca__Ca_jsr, 0.89999999999999991)));
        rJacobian[9][2] = 0.0;
        rJacobian[9][3] = -(mDt * (-0.33333333333333331 * var_x204 * var_x213 * ((var_x90) ? (7.1354903911398109e-12 * (-2 * var_x108 * var_x78 + 1.0309359999951897e-7 * var_x195 * var_x83) / pow(var_x196, 3)) : (-4.258255521052781e-11 * var_x197 * var_x91 / pow(var_x92, 3))) - 0.00020267697647483301 * var_x16 * var_x207 * var_x208 * var_x210 * var_x212 * (1.8999999999999999 * var_x209 - 1.8999999999999999 * var_chaste_interface__Ca__Ca_ss / pow(var_x208, 2))));
        rJacobian[9][4] = 0.0;
        rJacobian[9][5] = -(mDt * (var_x203 * var_x214 / pow(var_chaste_interface__ICaL__fca, 3)));
        rJacobian[9][6] = -(mDt * (var_x202 * var_x214 / pow(var_chaste_interface__ICaL__fca2, 3)));
        rJacobian[9][7] = 0.0;
        rJacobian[9][8] = 0.0;
        rJacobian[9][9] = 1.0 - (mDt * (-0.33333333333333331));
        rJacobian[9][10] = 0.0;
        rJacobian[9][11] = 0.0;
        rJacobian[9][12] = 0.0;
        rJacobian[10][0] = 0.0;
        rJacobian[10][1] = 0.0;
        rJacobian[10][2] = 0.0;
        rJacobian[10][3] = -(mDt * (0.1502 * var_x61 / pow((1.0 + 0.1502 * var_x16), 2)));
        rJacobian[10][4] = 0.0;
        rJacobian[10][5] = 0.0;
        rJacobian[10][6] = 0.0;
        rJacobian[10][7] = 0.0;
        rJacobian[10][8] = 0.0;
        rJacobian[10][9] = 0.0;
        rJacobian[10][10] = 1.0 - (mDt * (-1.0));
        rJacobian[10][11] = 0.0;
        rJacobian[10][12] = 0.0;
        rJacobian[11][0] = -(mDt * (-3.3496381359330236e-11 * var_x215 * var_x216 * var_x219 * (-26.712338705500134 * log(var_x218 * (0.018329999999999999 * mParameters[3] + mParameters[2])) + var_chaste_interface__cell__V) / pow(var_x217, 2)));
        rJacobian[11][1] = 0.0;
        rJacobian[11][2] = 0.0;
        rJacobian[11][3] = 0.0;
        rJacobian[11][4] = -(mDt * (var_x147));
        rJacobian[11][5] = 0.0;
        rJacobian[11][6] = 0.0;
        rJacobian[11][7] = 0.0;
        rJacobian[11][8] = 0.0;
        rJacobian[11][9] = 0.0;
        rJacobian[11][10] = 0.0;
        rJacobian[11][11] = 1.0 - (mDt * (var_x155 + 26.712338705500134 * var_x221 - var_x220 * mParameters[12] / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V)) - 0.0008381150898567882 * var_x223 * var_x234 * var_x235 + 0.00019989044893084398 * var_x234 * var_x236 * var_x237 * mParameters[10] - 0.00082168146064390995 * var_x223 * mParameters[13] * var_chaste_interface__IKr__xr / (1.0 + 2.5 * exp(2.8000000000000003 + 0.10000000000000001 * var_chaste_interface__cell__V)) - 3.0157226903121925e-5 * var_x235 * var_x237 * (6.4983106368870169 * var_x236 - var_x229 * (1.6494869150646332 * var_x141 * var_x230 + 1.0539726354202117 * var_x141 * var_x231) - 13.738155796238718 * var_x141 * var_x227 * var_x232 / pow(var_x228, 2)) / pow((var_x226 + 0.98039215686274506 * var_x233), 2) - var_x220 * pow(var_chaste_interface__Ito__ydv, 3) * ((var_chaste_interface__cell__V <= 0) ? (exp(var_chaste_interface__cell__V / mParameters[19])) : (1.0)) * mParameters[18] * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv));
        rJacobian[11][12] = -(mDt * (0.48963716847181743 * var_x221 + 2.460829715294749e-6 * var_x238));
        rJacobian[12][0] = -(mDt * (0.00027684334297065928 * var_x54 - 2.563364286765364e-12 * var_x52 - var_x239 * var_x35));
        rJacobian[12][1] = 0.0;
        rJacobian[12][2] = 0.0;
        rJacobian[12][3] = 0.0;
        rJacobian[12][4] = -(mDt * (var_x153));
        rJacobian[12][5] = 0.0;
        rJacobian[12][6] = 0.0;
        rJacobian[12][7] = 0.0;
        rJacobian[12][8] = 0.0;
        rJacobian[12][9] = 0.0;
        rJacobian[12][10] = 0.0;
        rJacobian[12][11] = 0.0;
        rJacobian[12][12] = 1.0 - (mDt * (var_x156 - 3.6912445729421236e-6 * var_x238 - 0.00055368668594131857 * var_x77 - var_x239 * var_x76 - var_x240 * pow(var_chaste_interface__INal__mL, 3) * mParameters[11] * var_chaste_interface__INal__hL - var_x240 * pow(var_chaste_interface__INa__m, 3) * mParameters[9] * var_chaste_interface__INa__H * var_chaste_interface__INa__J));
    }

    void Celldavies_isap_2012FromCellMLBackwardEulerNoLut::UpdateTransmembranePotential(double var_chaste_interface__Environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.000223768331231758
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.99765453819431
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.998157020148849
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 5.38067794749339e-07
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.99805432294836
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999986839648304
        double var_chaste_interface__ICaL__fca = rY[8];
        // Units: dimensionless; Initial value: 0.961568137796573
        double var_chaste_interface__ICaL__fca2 = rY[9];
        // Units: dimensionless; Initial value: 0.854261813196152
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.989081601403786
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.255981702631947
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.0147449166757808
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.0147504787196957
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.00894974857468432
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.999992183094244
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.787996527242362
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.0014969201082975
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.488129650338831
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 17.9964119779802
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 134.555737634453
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 20.1543792471096
        double var_chaste_interface__Ca__Ca_ss = rY[28];
        // Units: mM; Initial value: 0.000225131045297696
        
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_IKr__gkr = 0.5 * sqrt(mParameters[2]) * mParameters[13]; // mS_per_uF
        const double var_IKs__gks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[14]; // mS_per_uF
        const double var_INa__gNa = pow(var_chaste_interface__INa__m, 3) * mParameters[9] * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // mS_per_uF
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__allo = 1 / (1.0 + pow(var_INaCa__KmCa, 2) / pow(var_INaCa__ca_i_NaCa, 2)); // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3]); // dimensionless
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * mParameters[8] / (var_chaste_interface__Ca__Ca_i + var_IpCa__kmpca); // uA_per_uF
        const double var_INaCa__denom2 = pow(var_INaCa__KmNao, 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_INaCa__ca_i_NaCa / var_INaCa__KmCai) * mParameters[0]; // mM4
        const double var_INaCa__denom3 = pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] + pow(mParameters[3], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_ICaL__ibarca = ((fabs(-15.0 + var_chaste_interface__cell__V) < 1.3356169352718439e-6) ? (374358.83507888648 * (-14.999998664383064 + var_chaste_interface__cell__V) * (0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(9.9999999999763197e-8)) + 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) - 0.019296999999954306 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-9.9999999999763197e-8)) * mParameters[4] / (-1.0 + exp(-9.9999999999763197e-8))) : (14448.004881000332 * (-15.0 + var_chaste_interface__cell__V) * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_ss * exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[4] / (-1.0 + exp(-1.1230765052339999 + 0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICaL__ICaL = pow(var_chaste_interface__ICaL__d, var_chaste_interface__ICaL__dp) * var_chaste_interface__ICaL__f * var_chaste_interface__ICaL__f2 * var_chaste_interface__ICaL__fca * var_chaste_interface__ICaL__fca2 * var_ICaL__ibarca; // uA_per_uF
        const double var_ICab__ICab = ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[6] * var_chaste_interface__cell__V / (-1.0 + exp(0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_IKr__r = 1 / (1.0 + 2.5 * exp(2.8000000000000003 + 0.10000000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaCa__denom1 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__num = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] * exp(var_Environment__FonRT * var_INaCa__eta * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__INaCa = mParameters[15] * var_INaCa__allo * var_INaCa__num / ((var_INaCa__denom2 + var_INaCa__denom3) * var_INaCa__denom1); // uA_per_uF
        const double var_INaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_Environment__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaK__INaK = mParameters[2] * var_INaK__fnak * mParameters[16] / ((1.0 + pow(var_INaK__kmnai, 2) / pow(var_chaste_interface__Na__Na_i, 2)) * (mParameters[2] + var_INaK__kmko)); // uA_per_uF
        const double var_Ito__rv = ((var_chaste_interface__cell__V <= 0) ? (exp(var_chaste_interface__cell__V / mParameters[19])) : (1.0)); // dimensionless
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (0.0096484999999999991 * (-mParameters[1] * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-mParameters[1] * exp(0.0374358835078 * var_chaste_interface__cell__V) + var_chaste_interface__Cl__Cl_i) * mParameters[17] * var_chaste_interface__cell__V / (1.0 - exp(0.0374358835078 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_chaste_interface__Ito2__AA * var_Ito2__Ito2_max; // uA_per_uF
        const double var_cell__caiont = -2.0 * var_INaCa__INaCa + var_ICaL__ICaL + var_ICab__ICab + var_IpCa__IpCa; // uA_per_uF
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converted / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_reversal_potentials__ECl = -log(mParameters[1] / var_chaste_interface__Cl__Cl_i) / var_Environment__FonRT; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__cell__V) * mParameters[7]; // uA_per_uF
        const double var_cell__clont = 0.5 * var_cell__i_Stim + var_IClb__IClb + var_Ito2__Ito2; // uA_per_uF
        const double var_reversal_potentials__EK = log(mParameters[2] / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)); // per_ms
        const double var_IK1__bk1 = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__IK1 = 0.5 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[10] * var_IK1__ak1 / (var_IK1__ak1 + var_IK1__bk1); // uA_per_uF
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[12] / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKr__gkr * var_IKr__r * var_chaste_interface__IKr__xr; // uA_per_uF
        const double var_Ito__Ito = pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[18] * var_Ito__rv * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv; // uA_per_uF
        const double var_reversal_potentials__ENa = log(mParameters[3] / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__INa = (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INa__gNa; // uA_per_uF
        const double var_INal__INal = pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * mParameters[11] * var_chaste_interface__INal__hL; // uA_per_uF
        const double var_cell__naiont = 3.0 * var_INaCa__INaCa + 3.0 * var_INaK__INaK + var_INa__INa + var_INal__INal; // uA_per_uF
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((mParameters[3] * var_reversal_potentials__prnak + mParameters[2]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_Environment__FonRT; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__cell__V) * var_IKs__gks * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_uF
        const double var_cell__kiont = 0.5 * var_cell__i_Stim - 2.0 * var_INaK__INaK + var_IK1__IK1 + var_IKp__IKp + var_IKr__IKr + var_IKs__IKs + var_Ito__Ito; // uA_per_uF
        const double d_dt_chaste_interface_var_cell__V = -var_cell__caiont - var_cell__clont - var_cell__kiont - var_cell__naiont; // mV / ms
        
        rY[0] += mDt*d_dt_chaste_interface_var_cell__V;
    }
    
    void Celldavies_isap_2012FromCellMLBackwardEulerNoLut::ComputeOneStepExceptVoltage(double var_chaste_interface__Environment__time)
    {
        // Time units: millisecond
        std::vector<double>& rY = rGetStateVariables();
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.99765453819431
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.998157020148849
        double var_chaste_interface__ICaL__d = rY[5];
        // Units: dimensionless; Initial value: 5.38067794749339e-07
        double var_chaste_interface__ICaL__dp = rY[6];
        // Units: dimensionless; Initial value: 8.99805432294836
        double var_chaste_interface__ICaL__f = rY[7];
        // Units: dimensionless; Initial value: 0.999986839648304
        double var_chaste_interface__ICaL__f2 = rY[10];
        // Units: dimensionless; Initial value: 0.989081601403786
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.255981702631947
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.0147449166757808
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.0147504787196957
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.00894974857468432
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.999992183094244
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.787996527242362
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.488129650338831
        
        const double var_ICaL__dpss = 9.0 - 8.0 / (1.0 + exp(-19.117647058823529 - 0.29411764705882354 * var_chaste_interface__cell__V));
        const double var_ICaL__dss = 1 / (1.0 + exp(0.59347181008902072 - 0.14836795252225518 * var_chaste_interface__cell__V));
        const double var_ICaL__f2ss = 0.23000000000000001 + 0.77000000000000002 / (1.0 + exp(2.4457142857142857 + 0.14285714285714285 * var_chaste_interface__cell__V));
        const double var_ICaL__fss = 0.29999999999999999 + 0.69999999999999996 / (1.0 + exp(2.4457142857142857 + 0.14285714285714285 * var_chaste_interface__cell__V));
        const double var_ICaL__taud = 0.58999999999999997 + 0.80000000000000004 * exp(0.67599999999999993 + 0.051999999999999998 * var_chaste_interface__cell__V) / (1.0 + exp(1.7160000000000002 + 0.13200000000000001 * var_chaste_interface__cell__V));
        const double var_ICaL__tauf = 1 / (0.052900000000000003 + 0.24110000000000001 * exp(-0.19019454876899997 * pow((-1 + 0.10318426646304972 * var_chaste_interface__cell__V), 2)));
        const double var_ICaL__tauf2 = 1 / (0.0054000000000000003 + 0.042299999999999997 * exp(-1.20074125971556 * pow((-1 + 0.053842757610673787 * var_chaste_interface__cell__V), 2)));
        const double var_IKr__tauxr = 43.0 + 1 / (exp(-7.6769999999999996 - 0.012800000000000001 * var_chaste_interface__cell__V) + exp(-5.4950000000000001 + 0.1691 * var_chaste_interface__cell__V));
        const double var_IKr__xrss = 1 / (1.0 + exp(-2.1819999999999999 - 0.18190000000000001 * var_chaste_interface__cell__V));
        const double var_IKs__tauxs = 1 / (((fabs(44.600000000000001 + var_chaste_interface__cell__V) < 1.0030090258350555e-8) ? (7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)) - 49850000.061936118 * (44.599999989969909 + var_chaste_interface__cell__V) * (-7.6328986866047728e-13 / (1.0 - exp(9.9999999875755032e-8)) - 7.6328986866047728e-13 / (1.0 - exp(-9.9999999875755032e-8)))) : (7.6100000000000007e-5 * (44.600000000000001 + var_chaste_interface__cell__V) / (1.0 - exp(-444.66200000000003 - 9.9700000000000006 * var_chaste_interface__cell__V)))) + ((fabs(-0.55000000000000004 + var_chaste_interface__cell__V) < 7.8124999999948028e-7) ? (-2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)) + 640000.00000042573 * (-0.54999921875000002 + var_chaste_interface__cell__V) * (2.8124999999996902e-10 / (-1.0 + exp(9.9999999999988984e-8)) + 2.8124999999965681e-10 / (-1.0 + exp(-9.999999999987797e-8)))) : (0.00036000000000000002 * (-0.55000000000000004 + var_chaste_interface__cell__V) / (-1.0 + exp(-0.070400000000000004 + 0.128 * var_chaste_interface__cell__V)))));
        const double var_IKs__xss = 1 / (1.0 + exp(0.4251012145748988 - 0.04048582995951417 * var_chaste_interface__cell__V));
        const double var_INa__ah = ((var_chaste_interface__cell__V >= -40.0) ? (0) : (0.13500000000000001 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__cell__V)));
        const double var_INa__aj = ((var_chaste_interface__cell__V >= -40.0) ? (0) : ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__cell__V) - 3.4740000000000003e-5 * exp(-0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V))));
        const double var_INa__am = ((fabs(47.130000000000003 + var_chaste_interface__cell__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V))));
        const double var_INa__bh = ((var_chaste_interface__cell__V >= -40.0) ? (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__cell__V))) : (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V)));
        const double var_INa__bj = ((var_chaste_interface__cell__V >= -40.0) ? (0.29999999999999999 * exp(-2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__cell__V))) : (0.1212 * exp(-0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V))));
        const double var_INa__bm = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__cell__V);
        const double var_INal__amL = ((fabs(47.130000000000003 + var_chaste_interface__cell__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__cell__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V))));
        const double var_INal__bmL = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__cell__V);
        const double var_INal__hLss = 1 / (1.0 + exp(14.918032786885247 + 0.16393442622950821 * var_chaste_interface__cell__V));
        const double var_Ito__ay = 25.0 * exp(-1.6000000000000001 + 0.040000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(-1.6000000000000001 + 0.040000000000000001 * var_chaste_interface__cell__V));
        const double var_Ito__ay2 = 0.029999999999999999 / (1.0 + exp(12.0 + 0.20000000000000001 * var_chaste_interface__cell__V));
        const double var_Ito__ay3 = 0.0022499999999999998 / (1.0 + exp(12.0 + 0.20000000000000001 * var_chaste_interface__cell__V));
        const double var_Ito__by = 25.0 * exp(-3.6000000000000001 - 0.040000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(-3.6000000000000001 - 0.040000000000000001 * var_chaste_interface__cell__V));
        const double var_Ito__by2 = 0.20000000000000001 * exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V));
        const double var_Ito__by3 = 0.10000000000000001 * exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(5.0 + 0.20000000000000001 * var_chaste_interface__cell__V));
        
        
        rY[5] = (var_chaste_interface__ICaL__d + ((var_ICaL__dss / var_ICaL__taud) * mDt)) / (1.0 - ((-1 / var_ICaL__taud) * mDt));
        rY[6] = (var_chaste_interface__ICaL__dp + ((var_ICaL__dpss / mParameters[5]) * mDt)) / (1.0 - ((-1 / mParameters[5]) * mDt));
        rY[7] = (var_chaste_interface__ICaL__f + ((var_ICaL__fss / var_ICaL__tauf) * mDt)) / (1.0 - ((-1 / var_ICaL__tauf) * mDt));
        rY[10] = (var_chaste_interface__ICaL__f2 + ((var_ICaL__f2ss / var_ICaL__tauf2) * mDt)) / (1.0 - ((-1 / var_ICaL__tauf2) * mDt));
        rY[11] = (var_chaste_interface__IKr__xr + ((var_IKr__xrss / var_IKr__tauxr) * mDt)) / (1.0 - ((-1 / var_IKr__tauxr) * mDt));
        rY[12] = (var_chaste_interface__IKs__xs1 + ((var_IKs__xss / var_IKs__tauxs) * mDt)) / (1.0 - ((-1 / var_IKs__tauxs) * mDt));
        rY[13] = (var_chaste_interface__IKs__xs2 + ((0.5 * var_IKs__xss / var_IKs__tauxs) * mDt)) / (1.0 - ((-0.5 / var_IKs__tauxs) * mDt));
        rY[2] = (var_chaste_interface__INa__H + ((var_INa__ah) * mDt)) / (1.0 - ((-var_INa__ah - var_INa__bh) * mDt));
        rY[3] = (var_chaste_interface__INa__m + ((var_INa__am) * mDt)) / (1.0 - ((-var_INa__am - var_INa__bm) * mDt));
        rY[19] = (var_chaste_interface__INal__hL + ((0.0016666666666666668 * var_INal__hLss) * mDt)) / (1.0 - ((-0.0016666666666666668) * mDt));
        rY[18] = (var_chaste_interface__INal__mL + ((var_INal__amL) * mDt)) / (1.0 - ((-var_INal__amL - var_INal__bmL) * mDt));
        rY[14] = (var_chaste_interface__Ito__ydv + ((var_Ito__ay) * mDt)) / (1.0 - ((-var_Ito__ay - var_Ito__by) * mDt));
        rY[15] = (var_chaste_interface__Ito__ydv2 + ((var_Ito__ay2) * mDt)) / (1.0 - ((-var_Ito__ay2 - var_Ito__by2) * mDt));
        rY[16] = (var_chaste_interface__Ito__zdv + ((var_Ito__ay3) * mDt)) / (1.0 - ((-var_Ito__ay3 - var_Ito__by3) * mDt));
        rY[4] = (var_chaste_interface__INa__J + ((var_INa__aj) * mDt)) / (1.0 - ((-var_INa__aj - var_INa__bj) * mDt));
        
        double _guess[13] = {rY[1],rY[26],rY[27],rY[28],rY[25],rY[8],rY[9],rY[20],rY[22],rY[21],rY[17],rY[24],rY[23]};
        CardiacNewtonSolver<13,Celldavies_isap_2012FromCellMLBackwardEulerNoLut>* _p_solver = CardiacNewtonSolver<13,Celldavies_isap_2012FromCellMLBackwardEulerNoLut>::Instance();
        _p_solver->Solve(*this, var_chaste_interface__Environment__time, _guess);
        rY[1] = _guess[0];
        rY[26] = _guess[1];
        rY[27] = _guess[2];
        rY[28] = _guess[3];
        rY[25] = _guess[4];
        rY[8] = _guess[5];
        rY[9] = _guess[6];
        rY[20] = _guess[7];
        rY[22] = _guess[8];
        rY[21] = _guess[9];
        rY[17] = _guess[10];
        rY[24] = _guess[11];
        rY[23] = _guess[12];
    }

    std::vector<double> Celldavies_isap_2012FromCellMLBackwardEulerNoLut::ComputeDerivedQuantities(double var_chaste_interface__Environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: mV; Initial value: -93.2932771154856
        double var_chaste_interface__Ca__Ca_i = rY[1];
        // Units: mM; Initial value: 0.000223768331231758
        double var_chaste_interface__INa__H = rY[2];
        // Units: dimensionless; Initial value: 0.99765453819431
        double var_chaste_interface__INa__m = rY[3];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INa__J = rY[4];
        // Units: dimensionless; Initial value: 0.998157020148849
        double var_chaste_interface__IKr__xr = rY[11];
        // Units: dimensionless; Initial value: 0.255981702631947
        double var_chaste_interface__IKs__xs1 = rY[12];
        // Units: dimensionless; Initial value: 0.0147449166757808
        double var_chaste_interface__IKs__xs2 = rY[13];
        // Units: dimensionless; Initial value: 0.0147504787196957
        double var_chaste_interface__Ito__ydv = rY[14];
        // Units: dimensionless; Initial value: 0.00894974857468432
        double var_chaste_interface__Ito__ydv2 = rY[15];
        // Units: dimensionless; Initial value: 0.999992183094244
        double var_chaste_interface__Ito__zdv = rY[16];
        // Units: dimensionless; Initial value: 0.787996527242362
        double var_chaste_interface__Ito2__AA = rY[17];
        // Units: dimensionless; Initial value: 0.0014969201082975
        double var_chaste_interface__INal__mL = rY[18];
        // Units: dimensionless; Initial value: 0.000382187369845771
        double var_chaste_interface__INal__hL = rY[19];
        // Units: dimensionless; Initial value: 0.488129650338831
        double var_chaste_interface__Na__Na_i = rY[23];
        // Units: mM; Initial value: 17.9964119779802
        double var_chaste_interface__K__K_i = rY[24];
        // Units: mM; Initial value: 134.555737634453
        double var_chaste_interface__Cl__Cl_i = rY[25];
        // Units: mM; Initial value: 20.1543792471096
        
        // Mathematics
        const double var_Environment__FonRT = 0.0374358835078; // per_mV
        const double var_IKr__gkr = 0.5 * sqrt(mParameters[2]) * mParameters[13]; // mS_per_uF
        const double var_IKs__gks = (1.0 + 0.59999999999999998 / (1.0 + 6.4818210260626455e-7 * pow((1 / var_chaste_interface__Ca__Ca_i), 1.3999999999999999))) * mParameters[14]; // mS_per_uF
        const double var_INa__gNa = pow(var_chaste_interface__INa__m, 3) * mParameters[9] * var_chaste_interface__INa__H * var_chaste_interface__INa__J; // mS_per_uF
        const double var_INaCa__KmCa = 0.000125; // mM
        const double var_INaCa__KmCai = 0.0035999999999999999; // mM
        const double var_INaCa__KmCao = 1.3; // mM
        const double var_INaCa__KmNai = 12.300000000000001; // mM
        const double var_INaCa__KmNao = 87.5; // mM
        const double var_INaCa__ca_i_NaCa = 1.5 * var_chaste_interface__Ca__Ca_i; // mM
        const double var_INaCa__allo = 1 / (1.0 + pow(var_INaCa__KmCa, 2) / pow(var_INaCa__ca_i_NaCa, 2)); // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaCa__ksat = 0.27000000000000002; // dimensionless
        const double var_INaK__kmko = 1.5; // mM
        const double var_INaK__kmnai = 10.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[3]); // dimensionless
        const double var_IpCa__kmpca = 0.00050000000000000001; // mM
        const double var_IpCa__IpCa = var_chaste_interface__Ca__Ca_i * mParameters[8] / (var_chaste_interface__Ca__Ca_i + var_IpCa__kmpca); // uA_per_uF
        const double var_IpCa__IpCa_converted = HeartConfig::Instance()->GetCapacitance() * var_IpCa__IpCa; // uA_per_cm2
        const double var_INaCa__denom2 = pow(var_INaCa__KmNao, 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * var_INaCa__KmCao + pow(var_INaCa__KmNai, 3) * (1.0 + var_INaCa__ca_i_NaCa / var_INaCa__KmCai) * mParameters[0]; // mM4
        const double var_INaCa__denom3 = pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa + pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] + pow(mParameters[3], 3) * (1.0 + pow(var_chaste_interface__Na__Na_i, 3) / pow(var_INaCa__KmNai, 3)) * var_INaCa__KmCai; // mM4
        const double var_ICab__ICab = ((fabs(var_chaste_interface__cell__V) < 1.3356169352750065e-6) ? (374358.83507800003 * (1.3356169352750065e-6 + var_chaste_interface__cell__V) * (0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(9.9999999999999995e-8)) + 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) - 0.0048242499999999995 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(-9.9999999999999995e-8)) * mParameters[6] / (-1.0 + exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-0.34100000000000003 * mParameters[0] + var_chaste_interface__Ca__Ca_i * exp(0.074871767015599999 * var_chaste_interface__cell__V)) * mParameters[6] * var_chaste_interface__cell__V / (-1.0 + exp(0.074871767015599999 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_ICab__ICab_converted = HeartConfig::Instance()->GetCapacitance() * var_ICab__ICab; // uA_per_cm2
        const double var_IKr__r = 1 / (1.0 + 2.5 * exp(2.8000000000000003 + 0.10000000000000001 * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaCa__denom1 = 1.0 + var_INaCa__ksat * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // dimensionless
        const double var_INaCa__num = pow(var_chaste_interface__Na__Na_i, 3) * mParameters[0] * exp(var_Environment__FonRT * var_INaCa__eta * var_chaste_interface__cell__V) - pow(mParameters[3], 3) * var_INaCa__ca_i_NaCa * exp((-1.0 + var_INaCa__eta) * var_Environment__FonRT * var_chaste_interface__cell__V); // mM4
        const double var_INaCa__INaCa = mParameters[15] * var_INaCa__allo * var_INaCa__num / ((var_INaCa__denom2 + var_INaCa__denom3) * var_INaCa__denom1); // uA_per_uF
        const double var_INaCa__INaCa_converted = HeartConfig::Instance()->GetCapacitance() * var_INaCa__INaCa; // uA_per_cm2
        const double var_INaK__fnak = 1 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_Environment__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_Environment__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INaK__INaK = mParameters[2] * var_INaK__fnak * mParameters[16] / ((1.0 + pow(var_INaK__kmnai, 2) / pow(var_chaste_interface__Na__Na_i, 2)) * (mParameters[2] + var_INaK__kmko)); // uA_per_uF
        const double var_INaK__INaK_converted = HeartConfig::Instance()->GetCapacitance() * var_INaK__INaK; // uA_per_cm2
        const double var_Ito__rv = ((var_chaste_interface__cell__V <= 0) ? (exp(var_chaste_interface__cell__V / mParameters[19])) : (1.0)); // dimensionless
        const double var_Ito2__Ito2_max = ((fabs(var_chaste_interface__cell__V) < 2.671233870550013e-6) ? (187179.41753900002 * (2.671233870550013e-6 + var_chaste_interface__cell__V) * (0.0096484999999999991 * (-mParameters[1] * exp(9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(9.9999999999999995e-8)) + 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) - 0.0096484999999999991 * (-mParameters[1] * exp(-9.9999999999999995e-8) + var_chaste_interface__Cl__Cl_i) * mParameters[17] / (1.0 - exp(-9.9999999999999995e-8))) : (3612.001220250083 * (-mParameters[1] * exp(0.0374358835078 * var_chaste_interface__cell__V) + var_chaste_interface__Cl__Cl_i) * mParameters[17] * var_chaste_interface__cell__V / (1.0 - exp(0.0374358835078 * var_chaste_interface__cell__V)))); // uA_per_uF
        const double var_Ito2__Ito2 = var_chaste_interface__Ito2__AA * var_Ito2__Ito2_max; // uA_per_uF
        const double var_Ito2__Ito2_converted = HeartConfig::Instance()->GetCapacitance() * var_Ito2__Ito2; // uA_per_cm2
        const double var_cell__a = 0.0011000000000000001; // cm
        const double var_cell__i_Stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__Environment__time); // uA_per_cm2
        const double var_cell__l = 0.01; // cm
        const double var_cell__ageo = 2.0 * M_PI * pow(var_cell__a, 2) + 2.0 * M_PI * var_cell__a * var_cell__l; // cm2
        const double var_cell__Acap = 2.0 * var_cell__ageo; // uF
        const double var_reversal_potentials__ECl = -log(mParameters[1] / var_chaste_interface__Cl__Cl_i) / var_Environment__FonRT; // mV
        const double var_IClb__IClb = (-var_reversal_potentials__ECl + var_chaste_interface__cell__V) * mParameters[7]; // uA_per_uF
        const double var_IClb__IClb_converted = HeartConfig::Instance()->GetCapacitance() * var_IClb__IClb; // uA_per_cm2
        const double var_reversal_potentials__EK = log(mParameters[2] / var_chaste_interface__K__K_i) / var_Environment__FonRT; // mV
        const double var_IK1__ak1 = 1.02 / (1.0 + exp(-14.1227775 + 0.23849999999999999 * var_chaste_interface__cell__V - 0.23849999999999999 * var_reversal_potentials__EK)); // per_ms
        const double var_IK1__bk1 = (exp(-36.698642499999998 + 0.061749999999999999 * var_chaste_interface__cell__V - 0.061749999999999999 * var_reversal_potentials__EK) + 0.49124000000000001 * exp(0.43983232 + 0.080320000000000003 * var_chaste_interface__cell__V - 0.080320000000000003 * var_reversal_potentials__EK)) / (1.0 + exp(-2.4444678999999998 + 0.51429999999999998 * var_reversal_potentials__EK - 0.51429999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1__IK1 = 0.5 * sqrt(mParameters[2]) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[10] * var_IK1__ak1 / (var_IK1__ak1 + var_IK1__bk1); // uA_per_uF
        const double var_IK1__IK1_converted = HeartConfig::Instance()->GetCapacitance() * var_IK1__IK1; // uA_per_cm2
        const double var_IKp__IKp = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[12] / (1.0 + exp(1.2521739130434781 - 0.16722408026755853 * var_chaste_interface__cell__V)); // uA_per_uF
        const double var_IKp__IKp_converted = HeartConfig::Instance()->GetCapacitance() * var_IKp__IKp; // uA_per_cm2
        const double var_IKr__IKr = (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * var_IKr__gkr * var_IKr__r * var_chaste_interface__IKr__xr; // uA_per_uF
        const double var_IKr__IKr_converted = HeartConfig::Instance()->GetCapacitance() * var_IKr__IKr; // uA_per_cm2
        const double var_Ito__Ito = pow(var_chaste_interface__Ito__ydv, 3) * (-var_reversal_potentials__EK + var_chaste_interface__cell__V) * mParameters[18] * var_Ito__rv * var_chaste_interface__Ito__ydv2 * var_chaste_interface__Ito__zdv; // uA_per_uF
        const double var_Ito__Ito_converted = HeartConfig::Instance()->GetCapacitance() * var_Ito__Ito; // uA_per_cm2
        const double var_reversal_potentials__ENa = log(mParameters[3] / var_chaste_interface__Na__Na_i) / var_Environment__FonRT; // mV
        const double var_INa__INa = (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * var_INa__gNa; // uA_per_uF
        const double var_INa__INa_converted = HeartConfig::Instance()->GetCapacitance() * var_INa__INa; // uA_per_cm2
        const double var_INal__INal = pow(var_chaste_interface__INal__mL, 3) * (-var_reversal_potentials__ENa + var_chaste_interface__cell__V) * mParameters[11] * var_chaste_interface__INal__hL; // uA_per_uF
        const double var_INal__INal_converted = HeartConfig::Instance()->GetCapacitance() * var_INal__INal; // uA_per_cm2
        const double var_reversal_potentials__prnak = 0.018329999999999999; // dimensionless
        const double var_reversal_potentials__EKs = log((mParameters[3] * var_reversal_potentials__prnak + mParameters[2]) / (var_chaste_interface__Na__Na_i * var_reversal_potentials__prnak + var_chaste_interface__K__K_i)) / var_Environment__FonRT; // mV
        const double var_IKs__IKs = (-var_reversal_potentials__EKs + var_chaste_interface__cell__V) * var_IKs__gks * var_chaste_interface__IKs__xs1 * var_chaste_interface__IKs__xs2; // uA_per_uF
        const double var_IKs__IKs_converted = HeartConfig::Instance()->GetCapacitance() * var_IKs__IKs; // uA_per_cm2

        std::vector<double> dqs(16);
        dqs[0] = var_ICab__ICab_converted;
        dqs[1] = var_IClb__IClb_converted;
        dqs[2] = var_IpCa__IpCa_converted;
        dqs[3] = var_cell__Acap;
        dqs[4] = var_INa__INa_converted;
        dqs[5] = var_IK1__IK1_converted;
        dqs[6] = var_INal__INal_converted;
        dqs[7] = var_IKp__IKp_converted;
        dqs[8] = var_IKr__IKr_converted;
        dqs[9] = var_IKs__IKs_converted;
        dqs[10] = var_INaCa__INaCa_converted;
        dqs[11] = var_INaK__INaK_converted;
        dqs[12] = var_cell__i_Stim_converted;
        dqs[13] = var_Ito2__Ito2_converted;
        dqs[14] = var_Ito__Ito_converted;
        dqs[15] = var_chaste_interface__Environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Celldavies_isap_2012FromCellMLBackwardEulerNoLut>::Initialise(void)
{
    this->mSystemName = "davies_isap_2012";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "ms";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-93.2932771154856);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.000223768331231758);

    // rY[2]:
    this->mVariableNames.push_back("INa__H");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.99765453819431);

    // rY[3]:
    this->mVariableNames.push_back("INa__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000382187369845771);

    // rY[4]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.998157020148849);

    // rY[5]:
    this->mVariableNames.push_back("ICaL__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(5.38067794749339e-07);

    // rY[6]:
    this->mVariableNames.push_back("ICaL__dp");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(8.99805432294836);

    // rY[7]:
    this->mVariableNames.push_back("ICaL__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999986839648304);

    // rY[8]:
    this->mVariableNames.push_back("ICaL__fca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.961568137796573);

    // rY[9]:
    this->mVariableNames.push_back("ICaL__fca2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.854261813196152);

    // rY[10]:
    this->mVariableNames.push_back("ICaL__f2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.989081601403786);

    // rY[11]:
    this->mVariableNames.push_back("IKr__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.255981702631947);

    // rY[12]:
    this->mVariableNames.push_back("IKs__xs1");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0147449166757808);

    // rY[13]:
    this->mVariableNames.push_back("IKs__xs2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0147504787196957);

    // rY[14]:
    this->mVariableNames.push_back("Ito__ydv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00894974857468432);

    // rY[15]:
    this->mVariableNames.push_back("Ito__ydv2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999992183094244);

    // rY[16]:
    this->mVariableNames.push_back("Ito__zdv");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.787996527242362);

    // rY[17]:
    this->mVariableNames.push_back("Ito2__AA");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0014969201082975);

    // rY[18]:
    this->mVariableNames.push_back("INal__mL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000382187369845771);

    // rY[19]:
    this->mVariableNames.push_back("INal__hL");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.488129650338831);

    // rY[20]:
    this->mVariableNames.push_back("Irel__CaMKtrap");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0971591072782679);

    // rY[21]:
    this->mVariableNames.push_back("Irel__ro");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(-1.07543858779373e-32);

    // rY[22]:
    this->mVariableNames.push_back("Irel__ri");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.716604593002322);

    // rY[23]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(17.9964119779802);

    // rY[24]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(134.555737634453);

    // rY[25]:
    this->mVariableNames.push_back("Cl__Cl_i");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(20.1543792471096);

    // rY[26]:
    this->mVariableNames.push_back("JSR_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(4.1270622547589);

    // rY[27]:
    this->mVariableNames.push_back("NSR_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(4.14835141174613);

    // rY[28]:
    this->mVariableNames.push_back("dyadic_space_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.000225131045297696);

    // mParameters[0]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[1]:
    this->mParameterNames.push_back("extracellular_chloride_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[2]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[3]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("mM");

    // mParameters[4]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_conductance");
    this->mParameterUnits.push_back("L_per_F_ms");

    // mParameters[5]:
    this->mParameterNames.push_back("membrane_L_type_calcium_current_d_gate_power_tau");
    this->mParameterUnits.push_back("ms");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_background_calcium_current_conductance");
    this->mParameterUnits.push_back("L_per_F_ms");

    // mParameters[7]:
    this->mParameterNames.push_back("membrane_background_chloride_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[8]:
    this->mParameterNames.push_back("membrane_calcium_pump_current_conductance");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[9]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[10]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[11]:
    this->mParameterNames.push_back("membrane_persistent_sodium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[12]:
    this->mParameterNames.push_back("membrane_potassium_pump_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[13]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[14]:
    this->mParameterNames.push_back("membrane_slow_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[15]:
    this->mParameterNames.push_back("membrane_sodium_calcium_exchanger_current_conductance");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[16]:
    this->mParameterNames.push_back("membrane_sodium_potassium_pump_current_permeability");
    this->mParameterUnits.push_back("uA_per_uF");

    // mParameters[17]:
    this->mParameterNames.push_back("membrane_transient_outward_chloride_current_conductance");
    this->mParameterUnits.push_back("L_per_F_ms");

    // mParameters[18]:
    this->mParameterNames.push_back("membrane_transient_outward_current_conductance");
    this->mParameterUnits.push_back("mS_per_uF");

    // mParameters[19]:
    this->mParameterNames.push_back("membrane_transient_outward_current_time_independent_rectification_gate_constant");
    this->mParameterUnits.push_back("mV");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("membrane_background_calcium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_background_chloride_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_calcium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_capacitance");
    this->mDerivedQuantityUnits.push_back("uF");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [6]:
    this->mDerivedQuantityNames.push_back("membrane_persistent_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [7]:
    this->mDerivedQuantityNames.push_back("membrane_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [8]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [9]:
    this->mDerivedQuantityNames.push_back("membrane_slow_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [10]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_calcium_exchanger_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [11]:
    this->mDerivedQuantityNames.push_back("membrane_sodium_potassium_pump_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [12]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [13]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_chloride_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [14]:
    this->mDerivedQuantityNames.push_back("membrane_transient_outward_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [15]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("ms");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Celldavies_isap_2012FromCellMLBackwardEulerNoLut)

