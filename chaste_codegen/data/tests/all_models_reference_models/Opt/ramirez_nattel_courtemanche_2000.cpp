//! @file
//!
//! This source file was generated from CellML by chaste_codegen version (version omitted as unimportant)
//!
//! Model: ramirez_2000
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: NormalOpt)
//! on (date omitted as unimportant)
//!
//! <autogenerated>

#include "ramirez_nattel_courtemanche_2000.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "Warnings.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

class Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables : public AbstractLookupTableCollection
{
public:
    static Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables* Instance()
    {
        if (mpInstance.get() == NULL)
        {
            mpInstance.reset(new Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables);
        }
        return mpInstance.get();
    }

    void FreeMemory()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

        mNeedsRegeneration.assign(mNeedsRegeneration.size(), true);
    }

    // Row lookup methods
    // using linear-interpolation

    double* _lookup_0_row(unsigned i, double _factor_)
    {
        for (unsigned j=0; j<33; j++)
        {
            const double y1 = _lookup_table_0[i][j];
            const double y2 = _lookup_table_0[i+1][j];
            _lookup_table_0_row[j] = y1 + (y2-y1)*_factor_;
        }
        return _lookup_table_0_row;
    }


    const double * IndexTable0(double var_chaste_interface__membrane__V)
    {
        const double _offset_0 = var_chaste_interface__membrane__V - mTableMins[0];
        const double _offset_0_over_table_step = _offset_0 * mTableStepInverses[0];
        const unsigned _table_index_0 = (unsigned)(_offset_0_over_table_step);
        const double _factor_0 = _offset_0_over_table_step - _table_index_0;
        const double* const _lt_0_row = Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables::Instance()->_lookup_0_row(_table_index_0, _factor_0);
        return _lt_0_row;
    }


// LCOV_EXCL_START
    bool CheckIndex0(double& var_chaste_interface__membrane__V)
    {
        bool _oob_0 = false;
        if (var_chaste_interface__membrane__V>mTableMaxs[0] || var_chaste_interface__membrane__V<mTableMins[0])
        {
// LCOV_EXCL_START
            _oob_0 = true;
// LCOV_EXCL_STOP
        }
        return _oob_0;
    }
// LCOV_EXCL_STOP

    ~Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables()
    {

        if (_lookup_table_0)
        {
            delete[] _lookup_table_0;
            _lookup_table_0 = NULL;
        }

    }

protected:
    Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables(const Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables&);
    Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables& operator= (const Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables&);
    Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables()
    {
        assert(mpInstance.get() == NULL);
        mKeyingVariableNames.resize(1);
        mNumberOfTables.resize(1);
        mTableMins.resize(1);
        mTableSteps.resize(1);
        mTableStepInverses.resize(1);
        mTableMaxs.resize(1);
        mNeedsRegeneration.resize(1);

        mKeyingVariableNames[0] = "membrane_voltage";
        mNumberOfTables[0] = 33;
        mTableMins[0] = -250.0;
        mTableMaxs[0] = 550.0;
        mTableSteps[0] = 0.001;
        mTableStepInverses[0] = 1000.0;
        mNeedsRegeneration[0] = true;
        _lookup_table_0 = NULL;

        Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables::RegenerateTables();
    }

    void RegenerateTables()
    {
        AbstractLookupTableCollection::EventHandler::BeginEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);


        if (mNeedsRegeneration[0])
        {
            if (_lookup_table_0)
            {
                delete[] _lookup_table_0;
                _lookup_table_0 = NULL;
            }
            const unsigned _table_size_0 = 1 + (unsigned)((mTableMaxs[0]-mTableMins[0])/mTableSteps[0]+0.5);
            _lookup_table_0 = new double[_table_size_0][33];

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(0.013102317305629283 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][0] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.024332874996168673 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][1] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + 0.10000000000000001 * exp(-0.024332874996168673 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][2] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.037435192301797954 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][3] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.1245 * exp(-0.0037435192301797956 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][4] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.070000000000000007 + 0.57999999999999996 / (1.0 + exp(0.66964285714285721 + 0.044642857142857144 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][5] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(5.6000000000000005 + 0.070000000000000007 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][6] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.0085500000000000003 + 0.077899999999999997 / (1.0 + exp(-0.6875 - 0.0625 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][7] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = -1 / (1.0 + exp(2.3529411764705883 - 0.058823529411764705 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][8] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 6.0 - 6.0 * exp(1.5800000000000001 - 0.20000000000000001 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][9] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + 0.29999999999999999 * exp(1.5800000000000001 - 0.20000000000000001 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][10] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((var_chaste_interface__membrane__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__membrane__V)) : (0));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[11] < 2){
                    double left = _lookup_table_0[i-1][11];
                    double right = _lookup_table_0[i+1][11];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 11 at ["<<i<<"][11] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[11] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[11] >= 2){
                    EXCEPTION("Lookup table 11 at ["<<i<<"][11] has non-finite value: " << val);
                }
                _lookup_table_0[i][11] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((var_chaste_interface__membrane__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__membrane__V) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__membrane__V)) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__membrane__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[12] < 2){
                    double left = _lookup_table_0[i-1][12];
                    double right = _lookup_table_0[i+1][12];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 12 at ["<<i<<"][12] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[12] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[12] >= 2){
                    EXCEPTION("Lookup table 12 at ["<<i<<"][12] has non-finite value: " << val);
                }
                _lookup_table_0[i][12] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((var_chaste_interface__membrane__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__membrane__V) * (-127140.0 * exp(0.24440000000000001 * var_chaste_interface__membrane__V) - 3.4740000000000003e-5 * exp(-0.043909999999999998 * var_chaste_interface__membrane__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__membrane__V))) : (0));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[13] < 2){
                    double left = _lookup_table_0[i-1][13];
                    double right = _lookup_table_0[i+1][13];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 13 at ["<<i<<"][13] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[13] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[13] >= 2){
                    EXCEPTION("Lookup table 13 at ["<<i<<"][13] has non-finite value: " << val);
                }
                _lookup_table_0[i][13] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((var_chaste_interface__membrane__V < -40.0) ? (0.1212 * exp(-0.01052 * var_chaste_interface__membrane__V) / (1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__membrane__V))) : (0.29999999999999999 * exp(-2.5349999999999999e-7 * var_chaste_interface__membrane__V) / (1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__membrane__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[14] < 2){
                    double left = _lookup_table_0[i-1][14];
                    double right = _lookup_table_0[i+1][14];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 14 at ["<<i<<"][14] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[14] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[14] >= 2){
                    EXCEPTION("Lookup table 14 at ["<<i<<"][14] has non-finite value: " << val);
                }
                _lookup_table_0[i][14] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(47.130000000000003 + var_chaste_interface__membrane__V) < 1.0000000000287557e-6) ? (3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 499999.99998562218 * (47.129999000000005 + var_chaste_interface__membrane__V) * (-3.200000000092018e-7 / (1.0 - exp(1.0000000000287557e-7)) - 3.200000000092018e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__membrane__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__membrane__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[15] < 2){
                    double left = _lookup_table_0[i-1][15];
                    double right = _lookup_table_0[i+1][15];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 15 at ["<<i<<"][15] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[15] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[15] >= 2){
                    EXCEPTION("Lookup table 15 at ["<<i<<"][15] has non-finite value: " << val);
                }
                _lookup_table_0[i][15] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = exp(-0.090909090909090912 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][16] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-1.4234703366189325 - 0.1859773107680863 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][17] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(-248.0 + var_chaste_interface__membrane__V) < 2.8000000000805159e-6) ? (1.1200000000322064e-7 / (1.0 - exp(-1.0000000000287557e-7)) - 178571.42856629365 * (-248.0000028 + var_chaste_interface__membrane__V) * (-1.1200000000322064e-7 / (1.0 - exp(1.0000000000287557e-7)) - 1.1200000000322064e-7 / (1.0 - exp(-1.0000000000287557e-7)))) : (0.040000000000000001 * (-248.0 + var_chaste_interface__membrane__V) / (1.0 - exp(8.8571428571428577 - 0.035714285714285712 * var_chaste_interface__membrane__V)))) + ((fabs(163.0 + var_chaste_interface__membrane__V) < 2.1000000000048757e-6) ? (-5.8799999997027897e-8 / (-1.0 + exp(-9.9999999994945406e-8)) + 238095.23809468528 * (163.00000209999999 + var_chaste_interface__membrane__V) * (5.8799999997027897e-8 / (-1.0 + exp(-9.9999999994945406e-8)) + 5.8800000003245146e-8 / (-1.0 + exp(1.0000000000551896e-7)))) : (0.028000000000000001 * (163.0 + var_chaste_interface__membrane__V) / (-1.0 + exp(7.7619047619047619 + 0.047619047619047616 * var_chaste_interface__membrane__V))));

                _lookup_table_0[i][18] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-1.6666666666666667 - 0.16666666666666666 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][19] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(10.0 + var_chaste_interface__membrane__V) < 6.2399999999074307e-7) ? (1 / (45787545.788225032 * (1.0 - exp(-9.999999999851651e-8)) / (1.0 + exp(-9.999999999851651e-8)) - 801282.05129393819 * (9.9999993759999999 + var_chaste_interface__membrane__V) * (-45787545.788225032 * (1.0 - exp(9.999999999851651e-8)) / (1.0 + exp(9.999999999851651e-8)) - 45787545.788225032 * (1.0 - exp(-9.999999999851651e-8)) / (1.0 + exp(-9.999999999851651e-8))))) : (0.035000000000000003 * (1.0 + exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__membrane__V)) * (10.0 + var_chaste_interface__membrane__V) / (1.0 - exp(-1.6025641025641024 - 0.16025641025641024 * var_chaste_interface__membrane__V))));
                //Expressions which are part of a piecewise could be inf / nan, this is generally accptable, due to the piecewise, however occasionally interpolation of the lookup table from a nan/inf version can give problems.
                //To avoid this values stored in the table are intrpolated. Occurances of this to at most 2 per expression.
                if (!std::isfinite(val) &&  i!=0 && (i+1)<_table_size_0 && _lookup_table_0_num_misshit_piecewise[20] < 2){
                    double left = _lookup_table_0[i-1][20];
                    double right = _lookup_table_0[i+1][20];
                    double new_val = (left + right) / 2.0;
                    WARNING("Lookup table 20 at ["<<i<<"][20] has non-finite value: " << val << " being terpolated to: "<<new_val);
                    val = new_val;
                   // count and limit number of misshits
                  _lookup_table_0_num_misshit_piecewise[20] +=1;
                }
                else if (!std::isfinite(val) && _lookup_table_0_num_misshit_piecewise[20] >= 2){
                    EXCEPTION("Lookup table 20 at ["<<i<<"][20] has non-finite value: " << val);
                }
                _lookup_table_0[i][20] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(3.967741935483871 + 0.16129032258064516 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][21] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 0.0025000000000000001 + 0.01125 * exp(-0.0567 * pow((-1 + 0.1111111111111111 * var_chaste_interface__membrane__V), 2));

                _lookup_table_0[i][22] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = pow((1.0 + exp(1.0833333333333333 - 0.083333333333333329 * var_chaste_interface__membrane__V)), (-0.5));

                _lookup_table_0[i][23] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = ((fabs(28.5 + var_chaste_interface__membrane__V) < 1.1500000000011501e-5) ? (1.1499999999997625e-10 / (1.0 - exp(-9.9999999999979336e-8)) - 43478.260869521735 * (28.499988500000001 + var_chaste_interface__membrane__V) * (-1.1500000000025379e-10 / (1.0 - exp(1.0000000000022069e-7)) - 1.1499999999997625e-10 / (1.0 - exp(-9.9999999999979336e-8)))) : (1.0000000000000001e-5 * (28.5 + var_chaste_interface__membrane__V) / (1.0 - exp(-0.24782608695652175 - 0.0086956521739130436 * var_chaste_interface__membrane__V)))) + ((fabs(28.5 + var_chaste_interface__membrane__V) < 3.300000000205916e-7) ? (-7.5900000004736066e-11 / (-1.0 + exp(-1.0000000000623989e-7)) + 1515151.5150569715 * (28.500000329999999 + var_chaste_interface__membrane__V) * (7.5900000004736066e-11 / (-1.0 + exp(1.0000000000623989e-7)) + 7.5900000004736066e-11 / (-1.0 + exp(-1.0000000000623989e-7)))) : (0.00023000000000000001 * (28.5 + var_chaste_interface__membrane__V) / (-1.0 + exp(8.6363636363636367 + 0.30303030303030304 * var_chaste_interface__membrane__V))));

                _lookup_table_0[i][24] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = pow((1.0 + exp(-0.047619047619047616 - 0.095238095238095233 * var_chaste_interface__membrane__V)), (-0.33333333333333331));

                _lookup_table_0[i][25] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.2 / (2.2000000000000002 + exp(4.166666666666667 + 0.055555555555555552 * var_chaste_interface__membrane__V)) + 0.65000000000000002 / (exp(0.2711864406779661 - 0.016949152542372881 * var_chaste_interface__membrane__V) + exp(-2.1176470588235294 - 0.11764705882352941 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][26] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(6.7251162790697681 + 0.15503875968992248 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][27] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (6.2000000000000002 + exp(10.68020304568528 + 0.10152284263959391 * var_chaste_interface__membrane__V)) + 1 / (7.54 + exp(0.69075369075369086 - 0.07770007770007771 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][28] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = pow((1.0 + exp(-0.29610115911485774 - 0.10537407797681771 * var_chaste_interface__membrane__V)), (-0.33333333333333331));

                _lookup_table_0[i][29] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.47 / (exp(0.90048939641109305 - 0.032626427406199025 * var_chaste_interface__membrane__V) + exp(-1.0839046686255307 - 0.032647730982696702 * var_chaste_interface__membrane__V)) + 0.41999999999999998 / (exp(10.698795180722891 + 0.40160642570281119 * var_chaste_interface__membrane__V) + exp(2.1812377210216107 + 0.049115913555992145 * var_chaste_interface__membrane__V));

                _lookup_table_0[i][30] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1.0 + exp(-3.6189956331877728 + 0.036390101892285295 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][31] = val;
            }

            for (unsigned i=0 ; i<_table_size_0; i++)
            {
                const double var_chaste_interface__membrane__V = mTableMins[0] + i*mTableSteps[0];
                double val = 1 / (21.0 + exp(6.6071428571428568 - 0.035714285714285712 * var_chaste_interface__membrane__V)) + exp(-9.875 + 0.0625 * var_chaste_interface__membrane__V);

                _lookup_table_0[i][32] = val;
            }

            mNeedsRegeneration[0] = false;
        }

        AbstractLookupTableCollection::EventHandler::EndEvent(AbstractLookupTableCollection::EventHandler::GENERATE_TABLES);
    }

private:
    /** The single instance of the class */
    static std::shared_ptr<Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables> mpInstance;

    // Row lookup methods memory
    double _lookup_table_0_row[33];

    // Lookup tables
    double (*_lookup_table_0)[33];
    int _lookup_table_0_num_misshit_piecewise[33] = {0};

};

std::shared_ptr<Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables> Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables::mpInstance;

    boost::shared_ptr<RegularStimulus> Cellramirez_nattel_courtemanche_2000FromCellMLOpt::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__membrane__stim_amplitude_converted = -2900.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_cm2
        const double var_chaste_interface__membrane__stim_duration = 1.0; // millisecond
        const double var_chaste_interface__membrane__stim_period = 1000.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__membrane__stim_amplitude_converted),
                var_chaste_interface__membrane__stim_duration,
                var_chaste_interface__membrane__stim_period,
                0.0
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }
    double Cellramirez_nattel_courtemanche_2000FromCellMLOpt::GetIntracellularCalciumConcentration()
    {
        return mStateVariables[1];
    }
    Cellramirez_nattel_courtemanche_2000FromCellMLOpt::Cellramirez_nattel_courtemanche_2000FromCellMLOpt(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                25,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        //
        this->mpSystemInfo = OdeSystemInformation<Cellramirez_nattel_courtemanche_2000FromCellMLOpt>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        
        this->mParameters[0] = 1.8; // (var_standard_ionic_concentrations__Ca_o) [millimolar]
        this->mParameters[1] = 5.4000000000000004; // (var_standard_ionic_concentrations__K_o) [millimolar]
        this->mParameters[2] = 140.0; // (var_standard_ionic_concentrations__Na_o) [millimolar]
        this->mParameters[3] = 100.0; // (var_membrane__Cm) [picoF]
        this->mParameters[4] = 7.7999999999999998; // (var_fast_sodium_current__g_Na) [nanoS_per_picoF]
        this->mParameters[5] = 0.14999999999999999; // (var_time_independent_potassium_current__g_K1) [nanoS_per_picoF]
        this->mParameters[6] = 0.069839999999999999; // (var_rapid_delayed_rectifier_K_current__g_Kr) [nanoS_per_picoF]
    }

    Cellramirez_nattel_courtemanche_2000FromCellMLOpt::~Cellramirez_nattel_courtemanche_2000FromCellMLOpt()
    {
    }

    AbstractLookupTableCollection* Cellramirez_nattel_courtemanche_2000FromCellMLOpt::GetLookupTableCollection()
    {
        return Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables::Instance();
    }
    
    double Cellramirez_nattel_courtemanche_2000FromCellMLOpt::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.53
        double var_chaste_interface__intracellular_ion_concentrations__Ca_i = rY[1];
        // Units: millimolar; Initial value: 0.0001024
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.001972
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.9791
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.9869
        double var_chaste_interface__transient_outward_K_current_oa_gate__oa = rY[5];
        // Units: dimensionless; Initial value: 0.07164
        double var_chaste_interface__transient_outward_K_current_oi_gate__oi = rY[6];
        // Units: dimensionless; Initial value: 0.998
        double var_chaste_interface__ultrarapid_delayed_rectifier_K_current_ua_gate__ua = rY[7];
        // Units: dimensionless; Initial value: 0.05869
        double var_chaste_interface__ultrarapid_delayed_rectifier_K_current_ui_gate__ui = rY[8];
        // Units: dimensionless; Initial value: 0.9987
        double var_chaste_interface__rapid_delayed_rectifier_K_current_xr_gate__xr = rY[9];
        // Units: dimensionless; Initial value: 7.433e-07
        double var_chaste_interface__slow_delayed_rectifier_K_current_xs_gate__xs = rY[10];
        // Units: dimensionless; Initial value: 0.01791
        double var_chaste_interface__sarcolemmal_Ca_current_d_gate__d = rY[11];
        // Units: dimensionless; Initial value: 4.757e-06
        double var_chaste_interface__sarcolemmal_Ca_current_f_gate__f = rY[12];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__sarcolemmal_Ca_current_f_Ca_gate__f_Ca = rY[13];
        // Units: dimensionless; Initial value: 0.7484
        double var_chaste_interface__intracellular_ion_concentrations__Na_i = rY[20];
        // Units: millimolar; Initial value: 11.75
        double var_chaste_interface__intracellular_ion_concentrations__K_i = rY[22];
        // Units: millimolar; Initial value: 138.4
        
        // Lookup table indexing
        const bool _oob_0 = Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        const double var_Ca_pump_current__i_p_Ca = 0.27500000000000002 * var_chaste_interface__intracellular_ion_concentrations__Ca_i / (0.00050000000000000001 + var_chaste_interface__intracellular_ion_concentrations__Ca_i); // picoA_per_picoF
        const double var_sarcolemmal_Ca_current__i_Ca = 0.23999999999999999 * (-65.0 + var_chaste_interface__membrane__V) * var_chaste_interface__sarcolemmal_Ca_current_d_gate__d * var_chaste_interface__sarcolemmal_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__sarcolemmal_Ca_current_f_gate__f; // picoA_per_picoF
        const double var_background_currents__i_B_Ca = 0.0011299999999999999 * var_chaste_interface__membrane__V - 0.015092750037051737 * log(mParameters[0] / var_chaste_interface__intracellular_ion_concentrations__Ca_i); // picoA_per_picoF
        const double var_Ca_activated_Cl_current__i_Cl_Ca = 0; // picoA_per_picoF
        const double var_Na_Ca_exchanger_current__i_NaCa = 1600.0 * (pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * mParameters[0] * _lt_0_row[0] - pow(mParameters[2], 3) * var_chaste_interface__intracellular_ion_concentrations__Ca_i * _lt_0_row[1]) / ((_lt_0_row[2]) * (669921.875 + pow(mParameters[2], 3)) * (1.3799999999999999 + mParameters[0])); // picoA_per_picoF
        const double var_fast_sodium_current__E_Na = 26.712831923985377 * log(mParameters[2] / var_chaste_interface__intracellular_ion_concentrations__Na_i); // millivolt
        const double var_background_currents__i_B_Na = 0.00067400000000000001 * var_chaste_interface__membrane__V - 0.00067400000000000001 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_fast_sodium_current__i_Na_converted = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[4] * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // uA_per_cm2
        const double var_sodium_potassium_pump__i_NaK = 0.59999999999999998 * mParameters[1] / ((1.0 + 31.622776601683793 * pow((1 / var_chaste_interface__intracellular_ion_concentrations__Na_i), 1.5)) * (1.5 + mParameters[1]) * (1.0 + _lt_0_row[4] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[2])) * _lt_0_row[3])); // picoA_per_picoF
        const double var_time_independent_potassium_current__E_K = 26.712831923985377 * log(mParameters[1] / var_chaste_interface__intracellular_ion_concentrations__K_i); // millivolt
        const double var_rapid_delayed_rectifier_K_current__i_Kr_converted = (_lt_0_row[5]) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[6] * var_chaste_interface__rapid_delayed_rectifier_K_current_xr_gate__xr; // uA_per_cm2
        const double var_slow_delayed_rectifier_K_current__i_Ks = 0.056099999999999997 * pow(var_chaste_interface__slow_delayed_rectifier_K_current_xs_gate__xs, 2) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V); // picoA_per_picoF
        const double var_time_independent_potassium_current__i_K1_converted = (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V) * HeartConfig::Instance()->GetCapacitance() * mParameters[5] / (_lt_0_row[6]); // uA_per_cm2
        const double var_transient_outward_K_current__i_to = 0.19824 * pow(var_chaste_interface__transient_outward_K_current_oa_gate__oa, 3) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__transient_outward_K_current_oi_gate__oi; // picoA_per_picoF
        const double var_ultrarapid_delayed_rectifier_K_current__i_Kur_d = pow(var_chaste_interface__ultrarapid_delayed_rectifier_K_current_ua_gate__ua, 3) * (_lt_0_row[7]) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__ultrarapid_delayed_rectifier_K_current_ui_gate__ui; // picoA_per_picoF
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_Ca_activated_Cl_current__i_Cl_Ca + HeartConfig::Instance()->GetCapacitance() * var_Ca_pump_current__i_p_Ca + HeartConfig::Instance()->GetCapacitance() * var_Na_Ca_exchanger_current__i_NaCa + HeartConfig::Instance()->GetCapacitance() * var_background_currents__i_B_Ca + HeartConfig::Instance()->GetCapacitance() * var_background_currents__i_B_Na + HeartConfig::Instance()->GetCapacitance() * var_sarcolemmal_Ca_current__i_Ca + HeartConfig::Instance()->GetCapacitance() * var_slow_delayed_rectifier_K_current__i_Ks + HeartConfig::Instance()->GetCapacitance() * var_sodium_potassium_pump__i_NaK + HeartConfig::Instance()->GetCapacitance() * var_transient_outward_K_current__i_to + HeartConfig::Instance()->GetCapacitance() * var_ultrarapid_delayed_rectifier_K_current__i_Kur_d + var_fast_sodium_current__i_Na_converted + var_rapid_delayed_rectifier_K_current__i_Kr_converted + var_time_independent_potassium_current__i_K1_converted; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellramirez_nattel_courtemanche_2000FromCellMLOpt::EvaluateYDerivatives(double var_chaste_interface__environment__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.53
        double var_chaste_interface__intracellular_ion_concentrations__Ca_i = rY[1];
        // Units: millimolar; Initial value: 0.0001024
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.001972
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.9791
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.9869
        double var_chaste_interface__transient_outward_K_current_oa_gate__oa = rY[5];
        // Units: dimensionless; Initial value: 0.07164
        double var_chaste_interface__transient_outward_K_current_oi_gate__oi = rY[6];
        // Units: dimensionless; Initial value: 0.998
        double var_chaste_interface__ultrarapid_delayed_rectifier_K_current_ua_gate__ua = rY[7];
        // Units: dimensionless; Initial value: 0.05869
        double var_chaste_interface__ultrarapid_delayed_rectifier_K_current_ui_gate__ui = rY[8];
        // Units: dimensionless; Initial value: 0.9987
        double var_chaste_interface__rapid_delayed_rectifier_K_current_xr_gate__xr = rY[9];
        // Units: dimensionless; Initial value: 7.433e-07
        double var_chaste_interface__slow_delayed_rectifier_K_current_xs_gate__xs = rY[10];
        // Units: dimensionless; Initial value: 0.01791
        double var_chaste_interface__sarcolemmal_Ca_current_d_gate__d = rY[11];
        // Units: dimensionless; Initial value: 4.757e-06
        double var_chaste_interface__sarcolemmal_Ca_current_f_gate__f = rY[12];
        // Units: dimensionless; Initial value: 0.9999
        double var_chaste_interface__sarcolemmal_Ca_current_f_Ca_gate__f_Ca = rY[13];
        // Units: dimensionless; Initial value: 0.7484
        double var_chaste_interface__Ca_release_current_from_JSR_u_gate__u = rY[14];
        // Units: dimensionless; Initial value: 0.0
        double var_chaste_interface__Ca_release_current_from_JSR_v_gate__v = rY[15];
        // Units: dimensionless; Initial value: 1.0
        double var_chaste_interface__Ca_release_current_from_JSR_w_gate__w = rY[16];
        // Units: dimensionless; Initial value: 0.9993
        double var_chaste_interface__Ca_buffers__Ca_CMDN = rY[17];
        // Units: millimolar; Initial value: 0.001856
        double var_chaste_interface__Ca_buffers__Ca_TRPN = rY[18];
        // Units: millimolar; Initial value: 0.007022
        double var_chaste_interface__Ca_buffers__Ca_CSQN = rY[19];
        // Units: millimolar; Initial value: 6.432
        double var_chaste_interface__intracellular_ion_concentrations__Na_i = rY[20];
        // Units: millimolar; Initial value: 11.75
        
        double var_chaste_interface__intracellular_ion_concentrations__K_i = rY[22];
        // Units: millimolar; Initial value: 138.4
        double var_chaste_interface__intracellular_ion_concentrations__Ca_rel = rY[23];
        // Units: millimolar; Initial value: 1.502
        double var_chaste_interface__intracellular_ion_concentrations__Ca_up = rY[24];
        // Units: millimolar; Initial value: 1.502

        // Lookup table indexing
        const bool _oob_0 = Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        double d_dt_chaste_interface_var_membrane__V;
        const double var_Ca_pump_current__i_p_Ca = 0.27500000000000002 * var_chaste_interface__intracellular_ion_concentrations__Ca_i / (0.00050000000000000001 + var_chaste_interface__intracellular_ion_concentrations__Ca_i); // picoA_per_picoF
        const double var_Ca_uptake_current_by_the_NSR__i_up = 0.0050000000000000001 / (1.0 + 0.00092000000000000003 / var_chaste_interface__intracellular_ion_concentrations__Ca_i); // picoA_per_picoF
        const double d_dt_chaste_interface_var_Ca_buffers__Ca_CMDN = -10.577777777777778 * var_chaste_interface__Ca_buffers__Ca_CMDN + 200.0 * (1.0 - 22.222222222222221 * var_chaste_interface__Ca_buffers__Ca_CMDN) * var_chaste_interface__intracellular_ion_concentrations__Ca_i; // millimolar / millisecond
        const double d_dt_chaste_interface_var_Ca_buffers__Ca_TRPN = -1.1200000000000001 * var_chaste_interface__Ca_buffers__Ca_TRPN + 78.400000000000006 * (1.0 - 2.8571428571428572 * var_chaste_interface__Ca_buffers__Ca_TRPN) * var_chaste_interface__intracellular_ion_concentrations__Ca_i; // millimolar / millisecond
        const double var_Ca_release_current_from_JSR__i_rel = 30.0 * pow(var_chaste_interface__Ca_release_current_from_JSR_u_gate__u, 2) * (-var_chaste_interface__intracellular_ion_concentrations__Ca_i + var_chaste_interface__intracellular_ion_concentrations__Ca_rel) * var_chaste_interface__Ca_release_current_from_JSR_v_gate__v * var_chaste_interface__Ca_release_current_from_JSR_w_gate__w; // picoA_per_picoF
        const double d_dt_chaste_interface_var_Ca_buffers__Ca_CSQN = -0.040000000000000001 * var_chaste_interface__Ca_buffers__Ca_CSQN + 0.47999999999999998 * (1.0 - 0.10000000000000001 * var_chaste_interface__Ca_buffers__Ca_CSQN) * var_chaste_interface__intracellular_ion_concentrations__Ca_rel; // millimolar / millisecond
        const double var_Ca_leak_current_by_the_NSR__i_up_leak = 0.00033333333333333332 * var_chaste_interface__intracellular_ion_concentrations__Ca_up; // picoA_per_picoF
        const double d_dt_chaste_interface_var_Ca_release_current_from_JSR_w_gate__w = (_lt_0_row[10]) * (-7.9000000000000004 + var_chaste_interface__membrane__V) * (1.0 + _lt_0_row[8] - var_chaste_interface__Ca_release_current_from_JSR_w_gate__w) / (_lt_0_row[9]); // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_h_gate__h = (1.0 - var_chaste_interface__fast_sodium_current_h_gate__h) * _lt_0_row[11] - _lt_0_row[12] * var_chaste_interface__fast_sodium_current_h_gate__h; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_j_gate__j = (1.0 - var_chaste_interface__fast_sodium_current_j_gate__j) * _lt_0_row[13] - _lt_0_row[14] * var_chaste_interface__fast_sodium_current_j_gate__j; // 1 / millisecond
        const double d_dt_chaste_interface_var_fast_sodium_current_m_gate__m = (1.0 - var_chaste_interface__fast_sodium_current_m_gate__m) * _lt_0_row[15] - 0.080000000000000002 * var_chaste_interface__fast_sodium_current_m_gate__m * _lt_0_row[16]; // 1 / millisecond
        const double d_dt_chaste_interface_var_rapid_delayed_rectifier_K_current_xr_gate__xr = (1 / (_lt_0_row[17]) - var_chaste_interface__rapid_delayed_rectifier_K_current_xr_gate__xr) * (_lt_0_row[18]); // 1 / millisecond
        const double d_dt_chaste_interface_var_sarcolemmal_Ca_current_d_gate__d = (1 / (_lt_0_row[19]) - var_chaste_interface__sarcolemmal_Ca_current_d_gate__d) * _lt_0_row[20]; // 1 / millisecond
        const double d_dt_chaste_interface_var_sarcolemmal_Ca_current_f_Ca_gate__f_Ca = 0.14499999999999999 + 0.40000000000000002 / (1.0 + exp(-2.0 + 16666.666666666668 * var_chaste_interface__intracellular_ion_concentrations__Ca_i)) - 0.5 * var_chaste_interface__sarcolemmal_Ca_current_f_Ca_gate__f_Ca; // 1 / millisecond
        const double var_sarcolemmal_Ca_current__i_Ca = 0.23999999999999999 * (-65.0 + var_chaste_interface__membrane__V) * var_chaste_interface__sarcolemmal_Ca_current_d_gate__d * var_chaste_interface__sarcolemmal_Ca_current_f_Ca_gate__f_Ca * var_chaste_interface__sarcolemmal_Ca_current_f_gate__f; // picoA_per_picoF
        const double d_dt_chaste_interface_var_sarcolemmal_Ca_current_f_gate__f = (_lt_0_row[22]) * (1 / (_lt_0_row[21]) - var_chaste_interface__sarcolemmal_Ca_current_f_gate__f); // 1 / millisecond
        const double d_dt_chaste_interface_var_slow_delayed_rectifier_K_current_xs_gate__xs = (_lt_0_row[23] - var_chaste_interface__slow_delayed_rectifier_K_current_xs_gate__xs) * (_lt_0_row[24]); // 1 / millisecond
        const double var_background_currents__i_B_Ca = 0.0011299999999999999 * var_chaste_interface__membrane__V - 0.015092750037051737 * log(mParameters[0] / var_chaste_interface__intracellular_ion_concentrations__Ca_i); // picoA_per_picoF
        const double var_Ca_activated_Cl_current__i_Cl_Ca = 0; // picoA_per_picoF
        const double d_dt_chaste_interface_var_intracellular_ion_concentrations__Cl_i = 7.5827646500219453e-7 * var_Ca_activated_Cl_current__i_Cl_Ca; // millimolar / millisecond
        const double var_Na_Ca_exchanger_current__i_NaCa = 1600.0 * (pow(var_chaste_interface__intracellular_ion_concentrations__Na_i, 3) * mParameters[0] * _lt_0_row[0] - pow(mParameters[2], 3) * var_chaste_interface__intracellular_ion_concentrations__Ca_i * _lt_0_row[1]) / ((_lt_0_row[2]) * (669921.875 + pow(mParameters[2], 3)) * (1.3799999999999999 + mParameters[0])); // picoA_per_picoF
        const double var_Ca_release_current_from_JSR__Fn = 1.0364122723649995e-15 * var_Na_Ca_exchanger_current__i_NaCa + 9.6479999999999999e-11 * var_Ca_release_current_from_JSR__i_rel - 2.5910306809124988e-15 * var_sarcolemmal_Ca_current__i_Ca; // dimensionless
        const double d_dt_chaste_interface_var_Ca_release_current_from_JSR_u_gate__u = 0.125 / (1.0 + exp(250.0 - 731528895391368.0 * var_Ca_release_current_from_JSR__Fn)) - 0.125 * var_chaste_interface__Ca_release_current_from_JSR_u_gate__u; // 1 / millisecond
        const double d_dt_chaste_interface_var_Ca_release_current_from_JSR_v_gate__v = (1.0 - 1 / (1.0 + exp(50.0 - 731528895391368.0 * var_Ca_release_current_from_JSR__Fn)) - var_chaste_interface__Ca_release_current_from_JSR_v_gate__v) / (1.9099999999999999 + 2.0899999999999999 / (1.0 + exp(250.0 - 731528895391368.0 * var_Ca_release_current_from_JSR__Fn))); // 1 / millisecond
        const double d_dt_chaste_interface_var_intracellular_ion_concentrations__Ca_i = 7.5827646500219453e-7 * var_Na_Ca_exchanger_current__i_NaCa + 0.007058823529411765 * var_Ca_release_current_from_JSR__i_rel + 0.081176470588235294 * var_Ca_leak_current_by_the_NSR__i_up_leak - 0.34999999999999998 * d_dt_chaste_interface_var_Ca_buffers__Ca_TRPN - 0.044999999999999998 * d_dt_chaste_interface_var_Ca_buffers__Ca_CMDN - 3.7913823250109726e-7 * var_Ca_pump_current__i_p_Ca - 3.7913823250109726e-7 * var_background_currents__i_B_Ca - 3.7913823250109726e-7 * var_sarcolemmal_Ca_current__i_Ca - 0.081176470588235294 * var_Ca_uptake_current_by_the_NSR__i_up; // millimolar / millisecond
        const double var_fast_sodium_current__E_Na = 26.712831923985377 * log(mParameters[2] / var_chaste_interface__intracellular_ion_concentrations__Na_i); // millivolt
        const double var_background_currents__i_B_Na = 0.00067400000000000001 * var_chaste_interface__membrane__V - 0.00067400000000000001 * var_fast_sodium_current__E_Na; // picoA_per_picoF
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * mParameters[4] * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // picoA_per_picoF
        const double var_sodium_potassium_pump__i_NaK = 0.59999999999999998 * mParameters[1] / ((1.0 + 31.622776601683793 * pow((1 / var_chaste_interface__intracellular_ion_concentrations__Na_i), 1.5)) * (1.5 + mParameters[1]) * (1.0 + _lt_0_row[4] + 0.036499999999999998 * (-0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * mParameters[2])) * _lt_0_row[3])); // picoA_per_picoF
        const double d_dt_chaste_interface_var_intracellular_ion_concentrations__Na_i = -2.2748293950065838e-6 * var_Na_Ca_exchanger_current__i_NaCa - 2.2748293950065838e-6 * var_sodium_potassium_pump__i_NaK - 7.5827646500219453e-7 * var_background_currents__i_B_Na - 7.5827646500219453e-7 * var_fast_sodium_current__i_Na; // millimolar / millisecond
        const double var_time_independent_potassium_current__E_K = 26.712831923985377 * log(mParameters[1] / var_chaste_interface__intracellular_ion_concentrations__K_i); // millivolt
        const double var_rapid_delayed_rectifier_K_current__i_Kr = (_lt_0_row[5]) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[6] * var_chaste_interface__rapid_delayed_rectifier_K_current_xr_gate__xr; // picoA_per_picoF
        const double var_slow_delayed_rectifier_K_current__i_Ks = 0.056099999999999997 * pow(var_chaste_interface__slow_delayed_rectifier_K_current_xs_gate__xs, 2) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V); // picoA_per_picoF
        const double var_time_independent_potassium_current__i_K1 = (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[5] / (_lt_0_row[6]); // picoA_per_picoF
        const double var_transfer_current_from_NSR_to_JSR__i_tr = 0.0055555555555555558 * var_chaste_interface__intracellular_ion_concentrations__Ca_up - 0.0055555555555555558 * var_chaste_interface__intracellular_ion_concentrations__Ca_rel; // picoA_per_picoF
        const double d_dt_chaste_interface_var_intracellular_ion_concentrations__Ca_rel = -var_Ca_release_current_from_JSR__i_rel - 31.0 * d_dt_chaste_interface_var_Ca_buffers__Ca_CSQN + var_transfer_current_from_NSR_to_JSR__i_tr; // millimolar / millisecond
        const double d_dt_chaste_interface_var_intracellular_ion_concentrations__Ca_up = -var_Ca_leak_current_by_the_NSR__i_up_leak - 0.086956521739130446 * var_transfer_current_from_NSR_to_JSR__i_tr + var_Ca_uptake_current_by_the_NSR__i_up; // millimolar / millisecond
        const double d_dt_chaste_interface_var_transient_outward_K_current_oa_gate__oa = (_lt_0_row[25] - var_chaste_interface__transient_outward_K_current_oa_gate__oa) * (_lt_0_row[26]); // 1 / millisecond
        const double var_transient_outward_K_current__i_to = 0.19824 * pow(var_chaste_interface__transient_outward_K_current_oa_gate__oa, 3) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__transient_outward_K_current_oi_gate__oi; // picoA_per_picoF
        const double d_dt_chaste_interface_var_transient_outward_K_current_oi_gate__oi = (1 / (_lt_0_row[27]) - var_chaste_interface__transient_outward_K_current_oi_gate__oi) * (_lt_0_row[28]); // 1 / millisecond
        const double d_dt_chaste_interface_var_ultrarapid_delayed_rectifier_K_current_ua_gate__ua = (_lt_0_row[29] - var_chaste_interface__ultrarapid_delayed_rectifier_K_current_ua_gate__ua) * (_lt_0_row[30]); // 1 / millisecond
        const double var_ultrarapid_delayed_rectifier_K_current__i_Kur_d = pow(var_chaste_interface__ultrarapid_delayed_rectifier_K_current_ua_gate__ua, 3) * (_lt_0_row[7]) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V) * var_chaste_interface__ultrarapid_delayed_rectifier_K_current_ui_gate__ui; // picoA_per_picoF
        const double d_dt_chaste_interface_var_intracellular_ion_concentrations__K_i = 1.5165529300043891e-6 * var_sodium_potassium_pump__i_NaK - 7.5827646500219453e-7 * var_rapid_delayed_rectifier_K_current__i_Kr - 7.5827646500219453e-7 * var_slow_delayed_rectifier_K_current__i_Ks - 7.5827646500219453e-7 * var_time_independent_potassium_current__i_K1 - 7.5827646500219453e-7 * var_transient_outward_K_current__i_to - 7.5827646500219453e-7 * var_ultrarapid_delayed_rectifier_K_current__i_Kur_d; // millimolar / millisecond
        const double d_dt_chaste_interface_var_ultrarapid_delayed_rectifier_K_current_ui_gate__ui = (1 / (_lt_0_row[31]) - var_chaste_interface__ultrarapid_delayed_rectifier_K_current_ui_gate__ui) * (_lt_0_row[32]); // 1 / millisecond

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_membrane__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_membrane__V = (-var_Ca_activated_Cl_current__i_Cl_Ca - var_Ca_pump_current__i_p_Ca - var_Na_Ca_exchanger_current__i_NaCa - var_background_currents__i_B_Ca - var_background_currents__i_B_Na - var_fast_sodium_current__i_Na - var_rapid_delayed_rectifier_K_current__i_Kr - var_sarcolemmal_Ca_current__i_Ca - var_slow_delayed_rectifier_K_current__i_Ks - var_sodium_potassium_pump__i_NaK - var_time_independent_potassium_current__i_K1 - var_transient_outward_K_current__i_to - var_ultrarapid_delayed_rectifier_K_current__i_Kur_d - GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance()) / mParameters[3]; // millivolt / millisecond
        }
        
        rDY[0] = d_dt_chaste_interface_var_membrane__V;
        rDY[1] = d_dt_chaste_interface_var_intracellular_ion_concentrations__Ca_i;
        rDY[2] = d_dt_chaste_interface_var_fast_sodium_current_m_gate__m;
        rDY[3] = d_dt_chaste_interface_var_fast_sodium_current_h_gate__h;
        rDY[4] = d_dt_chaste_interface_var_fast_sodium_current_j_gate__j;
        rDY[5] = d_dt_chaste_interface_var_transient_outward_K_current_oa_gate__oa;
        rDY[6] = d_dt_chaste_interface_var_transient_outward_K_current_oi_gate__oi;
        rDY[7] = d_dt_chaste_interface_var_ultrarapid_delayed_rectifier_K_current_ua_gate__ua;
        rDY[8] = d_dt_chaste_interface_var_ultrarapid_delayed_rectifier_K_current_ui_gate__ui;
        rDY[9] = d_dt_chaste_interface_var_rapid_delayed_rectifier_K_current_xr_gate__xr;
        rDY[10] = d_dt_chaste_interface_var_slow_delayed_rectifier_K_current_xs_gate__xs;
        rDY[11] = d_dt_chaste_interface_var_sarcolemmal_Ca_current_d_gate__d;
        rDY[12] = d_dt_chaste_interface_var_sarcolemmal_Ca_current_f_gate__f;
        rDY[13] = d_dt_chaste_interface_var_sarcolemmal_Ca_current_f_Ca_gate__f_Ca;
        rDY[14] = d_dt_chaste_interface_var_Ca_release_current_from_JSR_u_gate__u;
        rDY[15] = d_dt_chaste_interface_var_Ca_release_current_from_JSR_v_gate__v;
        rDY[16] = d_dt_chaste_interface_var_Ca_release_current_from_JSR_w_gate__w;
        rDY[17] = d_dt_chaste_interface_var_Ca_buffers__Ca_CMDN;
        rDY[18] = d_dt_chaste_interface_var_Ca_buffers__Ca_TRPN;
        rDY[19] = d_dt_chaste_interface_var_Ca_buffers__Ca_CSQN;
        rDY[20] = d_dt_chaste_interface_var_intracellular_ion_concentrations__Na_i;
        rDY[21] = d_dt_chaste_interface_var_intracellular_ion_concentrations__Cl_i;
        rDY[22] = d_dt_chaste_interface_var_intracellular_ion_concentrations__K_i;
        rDY[23] = d_dt_chaste_interface_var_intracellular_ion_concentrations__Ca_rel;
        rDY[24] = d_dt_chaste_interface_var_intracellular_ion_concentrations__Ca_up;
    }

    std::vector<double> Cellramirez_nattel_courtemanche_2000FromCellMLOpt::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -83.53
        double var_chaste_interface__fast_sodium_current_m_gate__m = rY[2];
        // Units: dimensionless; Initial value: 0.001972
        double var_chaste_interface__fast_sodium_current_h_gate__h = rY[3];
        // Units: dimensionless; Initial value: 0.9791
        double var_chaste_interface__fast_sodium_current_j_gate__j = rY[4];
        // Units: dimensionless; Initial value: 0.9869
        double var_chaste_interface__rapid_delayed_rectifier_K_current_xr_gate__xr = rY[9];
        // Units: dimensionless; Initial value: 7.433e-07
        double var_chaste_interface__intracellular_ion_concentrations__Na_i = rY[20];
        // Units: millimolar; Initial value: 11.75
        double var_chaste_interface__intracellular_ion_concentrations__K_i = rY[22];
        // Units: millimolar; Initial value: 138.4
        
        // Lookup table indexing
        const bool _oob_0 = Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables::Instance()->CheckIndex0(var_chaste_interface__membrane__V);
// LCOV_EXCL_START
        if (_oob_0)
            EXCEPTION(DumpState("membrane_voltage outside lookup table range", rY , var_chaste_interface__environment__time));
// LCOV_EXCL_STOP
        const double* const _lt_0_row = Cellramirez_nattel_courtemanche_2000FromCellMLOpt_LookupTables::Instance()->IndexTable0(var_chaste_interface__membrane__V);

        // Mathematics
        const double var_membrane__Cm_converted = 9.9999999999999995e-7 * mParameters[3]; // uF
        const double var_membrane__F = 96.486699999999999; // coulomb_per_millimole
        const double var_membrane__R = 8.3142999999999994; // joule_per_mole_kelvin
        const double var_membrane__T = 310.0; // kelvin
        const double var_membrane__i_stim_converted = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_fast_sodium_current__E_Na = var_membrane__R * var_membrane__T * log(mParameters[2] / var_chaste_interface__intracellular_ion_concentrations__Na_i) / var_membrane__F; // millivolt
        const double var_fast_sodium_current__i_Na = pow(var_chaste_interface__fast_sodium_current_m_gate__m, 3) * (-var_fast_sodium_current__E_Na + var_chaste_interface__membrane__V) * mParameters[4] * var_chaste_interface__fast_sodium_current_h_gate__h * var_chaste_interface__fast_sodium_current_j_gate__j; // picoA_per_picoF
        const double var_fast_sodium_current__i_Na_converted = HeartConfig::Instance()->GetCapacitance() * var_fast_sodium_current__i_Na; // uA_per_cm2
        const double var_time_independent_potassium_current__E_K = var_membrane__R * var_membrane__T * log(mParameters[1] / var_chaste_interface__intracellular_ion_concentrations__K_i) / var_membrane__F; // millivolt
        const double var_rapid_delayed_rectifier_K_current__i_Kr = (_lt_0_row[5]) * (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[6] * var_chaste_interface__rapid_delayed_rectifier_K_current_xr_gate__xr; // picoA_per_picoF
        const double var_rapid_delayed_rectifier_K_current__i_Kr_converted = HeartConfig::Instance()->GetCapacitance() * var_rapid_delayed_rectifier_K_current__i_Kr; // uA_per_cm2
        const double var_time_independent_potassium_current__i_K1 = (-var_time_independent_potassium_current__E_K + var_chaste_interface__membrane__V) * mParameters[5] / (_lt_0_row[6]); // picoA_per_picoF
        const double var_time_independent_potassium_current__i_K1_converted = HeartConfig::Instance()->GetCapacitance() * var_time_independent_potassium_current__i_K1; // uA_per_cm2

        std::vector<double> dqs(6);
        dqs[0] = var_membrane__Cm_converted;
        dqs[1] = var_fast_sodium_current__i_Na_converted;
        dqs[2] = var_time_independent_potassium_current__i_K1_converted;
        dqs[3] = var_rapid_delayed_rectifier_K_current__i_Kr_converted;
        dqs[4] = var_membrane__i_stim_converted;
        dqs[5] = var_chaste_interface__environment__time;
        return dqs;
    }

template<>
void OdeSystemInformation<Cellramirez_nattel_courtemanche_2000FromCellMLOpt>::Initialise(void)
{
    this->mSystemName = "ramirez_2000";
    this->mFreeVariableName = "time";
    this->mFreeVariableUnits = "millisecond";

    // rY[0]:
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-83.53);

    // rY[1]:
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.0001024);

    // rY[2]:
    this->mVariableNames.push_back("fast_sodium_current_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.001972);

    // rY[3]:
    this->mVariableNames.push_back("fast_sodium_current_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9791);

    // rY[4]:
    this->mVariableNames.push_back("membrane_fast_sodium_current_j_gate");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9869);

    // rY[5]:
    this->mVariableNames.push_back("transient_outward_K_current_oa_gate__oa");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.07164);

    // rY[6]:
    this->mVariableNames.push_back("transient_outward_K_current_oi_gate__oi");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.998);

    // rY[7]:
    this->mVariableNames.push_back("ultrarapid_delayed_rectifier_K_current_ua_gate__ua");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.05869);

    // rY[8]:
    this->mVariableNames.push_back("ultrarapid_delayed_rectifier_K_current_ui_gate__ui");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9987);

    // rY[9]:
    this->mVariableNames.push_back("rapid_delayed_rectifier_K_current_xr_gate__xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(7.433e-07);

    // rY[10]:
    this->mVariableNames.push_back("slow_delayed_rectifier_K_current_xs_gate__xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.01791);

    // rY[11]:
    this->mVariableNames.push_back("sarcolemmal_Ca_current_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(4.757e-06);

    // rY[12]:
    this->mVariableNames.push_back("sarcolemmal_Ca_current_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9999);

    // rY[13]:
    this->mVariableNames.push_back("sarcolemmal_Ca_current_f_Ca_gate__f_Ca");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.7484);

    // rY[14]:
    this->mVariableNames.push_back("Ca_release_current_from_JSR_u_gate__u");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.0);

    // rY[15]:
    this->mVariableNames.push_back("Ca_release_current_from_JSR_v_gate__v");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.0);

    // rY[16]:
    this->mVariableNames.push_back("Ca_release_current_from_JSR_w_gate__w");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.9993);

    // rY[17]:
    this->mVariableNames.push_back("Ca_buffers__Ca_CMDN");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.001856);

    // rY[18]:
    this->mVariableNames.push_back("Ca_buffers__Ca_TRPN");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(0.007022);

    // rY[19]:
    this->mVariableNames.push_back("Ca_buffers__Ca_CSQN");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(6.432);

    // rY[20]:
    this->mVariableNames.push_back("cytosolic_sodium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(11.75);

    // rY[21]:
    this->mVariableNames.push_back("cytosolic_chloride_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(29.26);

    // rY[22]:
    this->mVariableNames.push_back("cytosolic_potassium_concentration");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(138.4);

    // rY[23]:
    this->mVariableNames.push_back("intracellular_ion_concentrations__Ca_rel");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.502);

    // rY[24]:
    this->mVariableNames.push_back("intracellular_ion_concentrations__Ca_up");
    this->mVariableUnits.push_back("millimolar");
    this->mInitialConditions.push_back(1.502);

    // mParameters[0]:
    this->mParameterNames.push_back("extracellular_calcium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[1]:
    this->mParameterNames.push_back("extracellular_potassium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[2]:
    this->mParameterNames.push_back("extracellular_sodium_concentration");
    this->mParameterUnits.push_back("millimolar");

    // mParameters[3]:
    this->mParameterNames.push_back("membrane__Cm");
    this->mParameterUnits.push_back("picoF");

    // mParameters[4]:
    this->mParameterNames.push_back("membrane_fast_sodium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[5]:
    this->mParameterNames.push_back("membrane_inward_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // mParameters[6]:
    this->mParameterNames.push_back("membrane_rapid_delayed_rectifier_potassium_current_conductance");
    this->mParameterUnits.push_back("nanoS_per_picoF");

    // Derived Quantity index [0]:
    this->mDerivedQuantityNames.push_back("membrane_capacitance");
    this->mDerivedQuantityUnits.push_back("uF");

    // Derived Quantity index [1]:
    this->mDerivedQuantityNames.push_back("membrane_fast_sodium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [2]:
    this->mDerivedQuantityNames.push_back("membrane_inward_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [3]:
    this->mDerivedQuantityNames.push_back("membrane_rapid_delayed_rectifier_potassium_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [4]:
    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");

    // Derived Quantity index [5]:
    this->mDerivedQuantityNames.push_back("time");
    this->mDerivedQuantityUnits.push_back("millisecond");

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellramirez_nattel_courtemanche_2000FromCellMLOpt)

