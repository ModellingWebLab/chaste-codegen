#ifdef CHASTE_CVODE
//! @file
//!
//! This source file was generated from CellML by chaste_codegen version 0.0.1
//!
//! Model: priebe_beuckelmann_model_1998
//!
//! Processed by chaste_codegen: https://github.com/ModellingWebLab/chaste-codegen
//!     (translator: chaste_codegen, model type: normal)
//! on 2020-03-25 18:14:33
//!
//! <autogenerated>

#include "priebe_beuckelmann_model_1998.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"
#include "MathsCustomFunctions.hpp"

    boost::shared_ptr<RegularStimulus> Cellpriebe_beuckelmann_model_1998FromCellMLCvode::UseCellMLDefaultStimulus()
    {
        // Use the default stimulus specified by CellML metadata
        const double var_chaste_interface__cell__stim_amplitude = -15.0 * HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double var_chaste_interface__cell__stim_duration = 3.0; // millisecond
        const double var_chaste_interface__cell__stim_offset = 0.0; // millisecond
        const double var_chaste_interface__cell__stim_period = 1000.0; // millisecond
        boost::shared_ptr<RegularStimulus> p_cellml_stim(new RegularStimulus(
                -fabs(var_chaste_interface__cell__stim_amplitude),
                var_chaste_interface__cell__stim_duration,
                var_chaste_interface__cell__stim_period,
                var_chaste_interface__cell__stim_offset
                ));
        mpIntracellularStimulus = p_cellml_stim;
        return p_cellml_stim;
    }

    double Cellpriebe_beuckelmann_model_1998FromCellMLCvode::GetIntracellularCalciumConcentration()
    {
        return NV_Ith_S(mStateVariables, 1);
    }
       
    Cellpriebe_beuckelmann_model_1998FromCellMLCvode::Cellpriebe_beuckelmann_model_1998FromCellMLCvode(boost::shared_ptr<AbstractIvpOdeSolver> pOdeSolver /* unused; should be empty */, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCvodeCell(
                pOdeSolver,
                22,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<Cellpriebe_beuckelmann_model_1998FromCellMLCvode>::Instance();
        Init();

        // We have a default stimulus specified in the CellML file metadata
        this->mHasDefaultStimulusFromCellML = true;
        mUseAnalyticJacobian = true;
        mHasAnalyticJacobian = true;
        
    }

    Cellpriebe_beuckelmann_model_1998FromCellMLCvode::~Cellpriebe_beuckelmann_model_1998FromCellMLCvode()
    {
    }
    
    double Cellpriebe_beuckelmann_model_1998FromCellMLCvode::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        N_Vector rY;
        bool made_new_cvode_vector = false;
        if (!pStateVariables)
        {
            rY = rGetStateVariables();
        }
        else
        {
            made_new_cvode_vector = true;
            rY = MakeNVector(*pStateVariables);
        }
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 1.75032478501027e-05
        double var_chaste_interface__Ito_t_gate__t = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Ionic_concentrations__Nai = NV_Ith_S(rY, 18);
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__Ionic_concentrations__Ki = NV_Ith_S(rY, 19);
        // Units: mM; Initial value: 140.0
        
        const double var_ICa__g_Ca_max = 0.064000000000000001; // mS_per_uF
        const double var_ICa_f_Ca_gate__Km_Ca = 0.00059999999999999995; // mM
        const double var_IKr__g_Kr_max = 0.014999999999999999; // mS_per_uF
        const double var_IKs__g_Ks_max = 0.02; // mS_per_uF
        const double var_INa__g_Na = 16.0; // mS_per_uF
        const double var_INaCa__K_mCa = 1.3799999999999999; // mM
        const double var_INaCa__K_mNa = 87.5; // mM
        const double var_INaCa__K_sat = 0.10000000000000001; // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaK__K_mKo = 1.5; // mM
        const double var_INaK__K_mNai = 10.0; // mM
        const double var_ICa_f_Ca_gate__f_Ca = var_ICa_f_Ca_gate__Km_Ca / (var_ICa_f_Ca_gate__Km_Ca + var_chaste_interface__Ionic_concentrations__Cai); // dimensionless
        const double var_Ionic_concentrations__Cao = 2.0; // mM
        const double var_Ionic_concentrations__Ko = 4.0; // mM
        const double var_Ionic_concentrations__Nao = 138.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * var_Ionic_concentrations__Nao); // dimensionless
        const double var_cell__F = 96.486699999999999; // coulomb_per_millimole
        const double var_cell__R = 8.3142999999999994; // joule_per_mole_kelvin
        const double var_cell__T = 310.14999999999998; // kelvin
        const double var_cell__FonRT = var_cell__F / (var_cell__R * var_cell__T); // per_mV
        const double var_ICa__E_Ca = 0.5 * log(var_Ionic_concentrations__Cao / var_chaste_interface__Ionic_concentrations__Cai) / var_cell__FonRT; // mV
        const double var_IK1__E_K1 = log(var_Ionic_concentrations__Ko / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_IKr__E_K = log(var_Ionic_concentrations__Ko / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_IKs__E_Ks = log((1.0 * var_Ionic_concentrations__Ko + 0.018329999999999999 * var_Ionic_concentrations__Nao) / (1.0 * var_chaste_interface__Ionic_concentrations__Ki + 0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT; // mV
        const double var_INa__E_Na = log(var_Ionic_concentrations__Nao / var_chaste_interface__Ionic_concentrations__Nai) / var_cell__FonRT; // mV
        const double var_Ito__E_to = log((1.0 * var_Ionic_concentrations__Ko + 0.042999999999999997 * var_Ionic_concentrations__Nao) / (1.0 * var_chaste_interface__Ionic_concentrations__Ki + 0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT; // mV
        const double var_ICa__i_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * var_ICa__g_Ca_max * var_chaste_interface__ICa_d_gate__d * var_ICa_f_Ca_gate__f_Ca * var_chaste_interface__ICa_f_gate__f; // uA_per_uF
        const double var_IK1_K1_gate__alpha_K1 = 0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)); // per_ms
        const double var_IK1_K1_gate__beta_K1 = (1.0 * exp(-1.0 + 0.10000000000000001 * var_chaste_interface__cell__V - 0.10000000000000001 * var_IK1__E_K1) + 3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.00020000000000000001 * var_IK1__E_K1)) / (1.0 + exp(0.5 * var_IK1__E_K1 - 0.5 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1_K1_gate__K1_infinity = var_IK1_K1_gate__alpha_K1 / (var_IK1_K1_gate__alpha_K1 + var_IK1_K1_gate__beta_K1); // dimensionless
        const double var_IKr__rik = 1.0 / (1.0 + exp(1.1304347826086956 + 0.043478260869565216 * var_chaste_interface__cell__V)); // dimensionless
        const double var_IKr__i_Kr = (-var_IKr__E_K + var_chaste_interface__cell__V) * var_IKr__g_Kr_max * var_IKr__rik * var_chaste_interface__IKr_Xr_gate__Xr; // uA_per_uF
        const double var_IKs__i_Ks = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (-var_IKs__E_Ks + var_chaste_interface__cell__V) * var_IKs__g_Ks_max; // uA_per_uF
        const double var_INa__i_Na = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_INa__E_Na + var_chaste_interface__cell__V) * var_INa__g_Na * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INaK__f_NaK = 1.0 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_cell__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_cell__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_cell__failing = 0.0; // dimensionless
        const double var_ICab__g_b_Ca_max = ((var_cell__failing == 0.0) ? (0.00084999999999999995) : (0.0012999999999999999)); // mS_per_uF
        const double var_ICab__i_b_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * var_ICab__g_b_Ca_max; // uA_per_uF
        const double var_IK1__g_K1_max = ((var_cell__failing == 0.0) ? (2.5) : (2.0)); // mS_per_uF
        const double var_IK1__i_K1 = (-var_IK1__E_K1 + var_chaste_interface__cell__V) * var_IK1__g_K1_max * var_IK1_K1_gate__K1_infinity; // uA_per_uF
        const double var_INaCa__K_NaCa = ((var_cell__failing == 0.0) ? (1000.0) : (1650.0)); // uA_per_uF
        const double var_INaCa__i_NaCa = 1.0 * (pow(var_chaste_interface__Ionic_concentrations__Nai, 3) * var_Ionic_concentrations__Cao * exp(var_INaCa__eta * var_cell__FonRT * var_chaste_interface__cell__V) - pow(var_Ionic_concentrations__Nao, 3) * var_chaste_interface__Ionic_concentrations__Cai * exp((-1.0 + var_INaCa__eta) * var_cell__FonRT * var_chaste_interface__cell__V)) * var_INaCa__K_NaCa / ((1.0 + var_INaCa__K_sat * exp((-1.0 + var_INaCa__eta) * var_cell__FonRT * var_chaste_interface__cell__V)) * (pow(var_INaCa__K_mNa, 3) + pow(var_Ionic_concentrations__Nao, 3)) * (var_INaCa__K_mCa + var_Ionic_concentrations__Cao)); // uA_per_uF
        const double var_INaK__I_NaK_max = ((var_cell__failing == 0.0) ? (1.3) : (0.75)); // uA_per_uF
        const double var_INaK__i_NaK = 1.0 * var_INaK__I_NaK_max * var_INaK__f_NaK * var_Ionic_concentrations__Ko / ((1.0 + pow((var_INaK__K_mNai / var_chaste_interface__Ionic_concentrations__Nai), 1.5)) * (var_INaK__K_mKo + var_Ionic_concentrations__Ko)); // uA_per_uF
        const double var_INab__g_b_Na_max = ((var_cell__failing == 0.0) ? (0.001) : (0.0)); // mS_per_uF
        const double var_INab__i_b_Na = (-var_INa__E_Na + var_chaste_interface__cell__V) * var_INab__g_b_Na_max; // uA_per_uF
        const double var_Ito__g_to_max = ((var_cell__failing == 0.0) ? (0.29999999999999999) : (0.191)); // mS_per_uF
        const double var_Ito__i_to = (-var_Ito__E_to + var_chaste_interface__cell__V) * var_Ito__g_to_max * var_chaste_interface__Ito_r_gate__r * var_chaste_interface__Ito_t_gate__t; // uA_per_uF
        const double var_cell__i_Stim = 0.0; // uA_per_uF
        const double var_cell__I_tot = var_ICa__i_Ca + var_ICab__i_b_Ca + var_IK1__i_K1 + var_IKr__i_Kr + var_IKs__i_Ks + var_INa__i_Na + var_INaCa__i_NaCa + var_INaK__i_NaK + var_INab__i_b_Na + var_Ito__i_to + var_cell__i_Stim; // uA_per_uF
        const double var_cell__dVdt = -1.0 * var_cell__I_tot; // mV_per_ms
        const double var_chaste_interface__i_ionic = HeartConfig::Instance()->GetCapacitance() * var_cell__dVdt; // uA_per_cm2

        const double i_ionic = var_chaste_interface__i_ionic;
        if (made_new_cvode_vector)
        {
            DeleteVector(rY);
        }
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }

    void Cellpriebe_beuckelmann_model_1998FromCellMLCvode::EvaluateYDerivatives(double var_chaste_interface__environment__time, const N_Vector rY, N_Vector rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 1.75032478501027e-05
        double var_chaste_interface__Ito_t_gate__t = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Irel__APtrack = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: -1.372158997089e-136
        double var_chaste_interface__Irel__APtrack2 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: -7.58517896402761e-136
        double var_chaste_interface__Irel__APtrack3 = NV_Ith_S(rY, 13);
        // Units: dimensionless; Initial value: 4.82035353592764e-05
        double var_chaste_interface__Irel__Cainfluxtrack = NV_Ith_S(rY, 14);
        // Units: mM; Initial value: -7.71120176147331e-138
        
        // Units: dimensionless; Initial value: 1e-06
        
        // Units: dimensionless; Initial value: 1e-06
        
        // Units: dimensionless; Initial value: 1e-06
        double var_chaste_interface__Ionic_concentrations__Nai = NV_Ith_S(rY, 18);
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__Ionic_concentrations__Ki = NV_Ith_S(rY, 19);
        // Units: mM; Initial value: 140.0
        double var_chaste_interface__Ionic_concentrations__Ca_JSR = NV_Ith_S(rY, 20);
        // Units: mM; Initial value: 2.5
        double var_chaste_interface__Ionic_concentrations__Ca_NSR = NV_Ith_S(rY, 21);
        // Units: mM; Initial value: 2.5
        
        
        // Mathematics
        double d_dt_chaste_interface_var_cell__V;
        const double d_dt_chaste_interface_var_Irel__OVRLDtrack = 0; // 1 / ms
        const double d_dt_chaste_interface_var_Irel__OVRLDtrack2 = 0; // 1 / ms
        const double d_dt_chaste_interface_var_Irel__OVRLDtrack3 = 0; // 1 / ms
        const double var_ICa__g_Ca_max = 0.064000000000000001; // mS_per_uF
        const double var_ICa_f_Ca_gate__Km_Ca = 0.00059999999999999995; // mM
        const double var_IKr__g_Kr_max = 0.014999999999999999; // mS_per_uF
        const double var_IKs__g_Ks_max = 0.02; // mS_per_uF
        const double var_INa__g_Na = 16.0; // mS_per_uF
        const double var_INaCa__K_mCa = 1.3799999999999999; // mM
        const double var_INaCa__K_mNa = 87.5; // mM
        const double var_INaCa__K_sat = 0.10000000000000001; // dimensionless
        const double var_INaCa__eta = 0.34999999999999998; // dimensionless
        const double var_INaK__K_mKo = 1.5; // mM
        const double var_INaK__K_mNai = 10.0; // mM
        const double var_ICa_f_Ca_gate__f_Ca = var_ICa_f_Ca_gate__Km_Ca / (var_ICa_f_Ca_gate__Km_Ca + var_chaste_interface__Ionic_concentrations__Cai); // dimensionless
        const double var_Ionic_concentrations__Cao = 2.0; // mM
        const double var_Ionic_concentrations__Ko = 4.0; // mM
        const double var_Ionic_concentrations__Nao = 138.0; // mM
        const double var_INaK__sigma = -0.14285714285714285 + 0.14285714285714285 * exp(0.01485884101040119 * var_Ionic_concentrations__Nao); // dimensionless
        const double var_Ionic_concentrations__preplength = 100.0; // um
        const double var_Ionic_concentrations__radius = 11.0; // um
        const double var_Ionic_concentrations__volume = M_PI * pow(var_Ionic_concentrations__radius, 2) * var_Ionic_concentrations__preplength; // fL
        const double var_Ionic_concentrations__V_JSR = 0.0047999999999999996 * var_Ionic_concentrations__volume; // fL
        const double var_Ionic_concentrations__V_NSR = 0.055199999999999999 * var_Ionic_concentrations__volume; // fL
        const double var_Ionic_concentrations__V_myo = 0.68000000000000005 * var_Ionic_concentrations__volume; // fL
        const double d_dt_chaste_interface_var_Irel__APtrack2 = (((var_chaste_interface__Irel__APtrack > 0.17999999999999999) && (var_chaste_interface__Irel__APtrack < 0.20000000000000001)) ? (100.0 - 100.5 * var_chaste_interface__Irel__APtrack2) : (-0.5 * var_chaste_interface__Irel__APtrack2)); // 1 / ms
        const double d_dt_chaste_interface_var_Irel__APtrack3 = (((var_chaste_interface__Irel__APtrack > 0.17999999999999999) && (var_chaste_interface__Irel__APtrack < 0.20000000000000001)) ? (100.0 - 100.5 * var_chaste_interface__Irel__APtrack3) : (-0.01 * var_chaste_interface__Irel__APtrack3)); // 1 / ms
        const double var_Irel__G_rel_max = 22.0; // per_ms
        const double var_Irel__K_mrel = 0.00080000000000000004; // mM
        const double var_Irel__delta_Ca_ith = 5.0000000000000004e-6; // mM
        const double var_Irel__G_rel = ((var_chaste_interface__Irel__Cainfluxtrack > var_Irel__delta_Ca_ith) ? (1.0 * (1.0 - var_chaste_interface__Irel__APtrack2) * (-var_Irel__delta_Ca_ith + var_chaste_interface__Irel__Cainfluxtrack) * var_chaste_interface__Irel__APtrack2 * var_Irel__G_rel_max / (-var_Irel__delta_Ca_ith + var_chaste_interface__Irel__Cainfluxtrack + var_Irel__K_mrel)) : (0.0)); // per_ms
        const double var_Irel__i_rel = (-var_chaste_interface__Ionic_concentrations__Cai + var_chaste_interface__Ionic_concentrations__Ca_JSR) * var_Irel__G_rel; // mM_per_ms
        const double var_Itr__tau_tr = 180.0; // ms
        const double var_Itr__i_tr = 1.0 * (-var_chaste_interface__Ionic_concentrations__Ca_JSR + var_chaste_interface__Ionic_concentrations__Ca_NSR) / var_Itr__tau_tr; // mM_per_ms
        const double var_Iup__K_mup = 0.00092000000000000003; // mM
        const double var_calcium_buffers_in_the_JSR__CSQN_max = 10.0; // mM
        const double var_calcium_buffers_in_the_JSR__K_mCSQN = 0.80000000000000004; // mM
        const double var_calcium_buffers_in_the_JSR__Ca_JSR_bufc = 1.0 / (1.0 + var_calcium_buffers_in_the_JSR__CSQN_max * var_calcium_buffers_in_the_JSR__K_mCSQN / pow((var_chaste_interface__Ionic_concentrations__Ca_JSR + var_calcium_buffers_in_the_JSR__K_mCSQN), 2)); // dimensionless
        const double d_dt_chaste_interface_var_Ionic_concentrations__Ca_JSR = (-var_Irel__i_rel + var_Itr__i_tr) * var_calcium_buffers_in_the_JSR__Ca_JSR_bufc; // mM / ms
        const double var_calcium_buffers_in_the_myoplasm__CMDN_max = 0.050000000000000003; // mM
        const double var_calcium_buffers_in_the_myoplasm__K_mCMDN = 0.0023800000000000002; // mM
        const double var_calcium_buffers_in_the_myoplasm__K_mTn = 0.00050000000000000001; // mM
        const double var_calcium_buffers_in_the_myoplasm__Tn_max = 0.070000000000000007; // mM
        const double var_calcium_buffers_in_the_myoplasm__buffon = 1.0; // dimensionless
        const double var_calcium_buffers_in_the_myoplasm__Cai_bufc = 1.0 / (1.0 + (var_calcium_buffers_in_the_myoplasm__CMDN_max * var_calcium_buffers_in_the_myoplasm__K_mCMDN / pow((var_chaste_interface__Ionic_concentrations__Cai + var_calcium_buffers_in_the_myoplasm__K_mCMDN), 2) + var_calcium_buffers_in_the_myoplasm__K_mTn * var_calcium_buffers_in_the_myoplasm__Tn_max / pow((var_chaste_interface__Ionic_concentrations__Cai + var_calcium_buffers_in_the_myoplasm__K_mTn), 2)) * var_calcium_buffers_in_the_myoplasm__buffon); // dimensionless
        const double var_cell__Cm = 153.40000000000001; // pF
        const double var_cell__F = 96.486699999999999; // coulomb_per_millimole
        const double var_cell__R = 8.3142999999999994; // joule_per_mole_kelvin
        const double var_cell__T = 310.14999999999998; // kelvin
        const double var_cell__FonRT = var_cell__F / (var_cell__R * var_cell__T); // per_mV
        const double var_ICa__E_Ca = 0.5 * log(var_Ionic_concentrations__Cao / var_chaste_interface__Ionic_concentrations__Cai) / var_cell__FonRT; // mV
        const double var_IK1__E_K1 = log(var_Ionic_concentrations__Ko / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_IKr__E_K = log(var_Ionic_concentrations__Ko / var_chaste_interface__Ionic_concentrations__Ki) / var_cell__FonRT; // mV
        const double var_IKs__E_Ks = log((1.0 * var_Ionic_concentrations__Ko + 0.018329999999999999 * var_Ionic_concentrations__Nao) / (1.0 * var_chaste_interface__Ionic_concentrations__Ki + 0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT; // mV
        const double var_INa__E_Na = log(var_Ionic_concentrations__Nao / var_chaste_interface__Ionic_concentrations__Nai) / var_cell__FonRT; // mV
        const double var_Ito__E_to = log((1.0 * var_Ionic_concentrations__Ko + 0.042999999999999997 * var_Ionic_concentrations__Nao) / (1.0 * var_chaste_interface__Ionic_concentrations__Ki + 0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai)) / var_cell__FonRT; // mV
        const double var_ICa__i_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * var_ICa__g_Ca_max * var_chaste_interface__ICa_d_gate__d * var_ICa_f_Ca_gate__f_Ca * var_chaste_interface__ICa_f_gate__f; // uA_per_uF
        const double var_ICa_d_gate__alpha_d = 0.63524014987941491 * exp(-0.89836705491478086 * pow((-1 + 0.044722719141323794 * var_chaste_interface__cell__V), 2)) / sqrt(M_PI); // per_ms
        const double var_ICa_d_gate__beta_d = 0.14710000000000001 - 0.25101580310038191 * exp(-0.08830693125184777 * pow((-1 + 0.15937778911130945 * var_chaste_interface__cell__V), 2)) / sqrt(M_PI); // per_ms
        const double d_dt_chaste_interface_var_ICa_d_gate__d = (1.0 - var_chaste_interface__ICa_d_gate__d) * var_ICa_d_gate__alpha_d - var_ICa_d_gate__beta_d * var_chaste_interface__ICa_d_gate__d; // 1 / ms
        const double var_ICa_f_gate__alpha_f = 0.0068719999999999996 / (1.0 + exp(-1.0052757950443461 + 0.16333730787449161 * var_chaste_interface__cell__V)); // per_ms
        const double var_ICa_f_gate__beta_f = 0.00054739999999999997 + (0.0112 + 0.068699999999999997 * exp(-1.06213655 - 0.1081 * var_chaste_interface__cell__V)) / (1.0 + exp(-2.7305064499999996 - 0.27789999999999998 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_ICa_f_gate__f = (1.0 - var_chaste_interface__ICa_f_gate__f) * var_ICa_f_gate__alpha_f - var_ICa_f_gate__beta_f * var_chaste_interface__ICa_f_gate__f; // 1 / ms
        const double var_IK1_K1_gate__alpha_K1 = 0.10000000000000001 / (1.0 + exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 0.059999999999999998 * var_IK1__E_K1)); // per_ms
        const double var_IK1_K1_gate__beta_K1 = (1.0 * exp(-1.0 + 0.10000000000000001 * var_chaste_interface__cell__V - 0.10000000000000001 * var_IK1__E_K1) + 3.0 * exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.00020000000000000001 * var_IK1__E_K1)) / (1.0 + exp(0.5 * var_IK1__E_K1 - 0.5 * var_chaste_interface__cell__V)); // per_ms
        const double var_IK1_K1_gate__K1_infinity = var_IK1_K1_gate__alpha_K1 / (var_IK1_K1_gate__alpha_K1 + var_IK1_K1_gate__beta_K1); // dimensionless
        const double var_IKr__rik = 1.0 / (1.0 + exp(1.1304347826086956 + 0.043478260869565216 * var_chaste_interface__cell__V)); // dimensionless
        const double var_IKr__i_Kr = (-var_IKr__E_K + var_chaste_interface__cell__V) * var_IKr__g_Kr_max * var_IKr__rik * var_chaste_interface__IKr_Xr_gate__Xr; // uA_per_uF
        const double var_IKr_Xr_gate__alpha_Xr = 0.0050000000000000001 * exp(0.0021416822000000003 + 0.00052660000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(-0.51325540000000003 - 0.12620000000000001 * var_chaste_interface__cell__V)); // per_ms
        const double var_IKr_Xr_gate__beta_Xr = 0.016 * exp(0.105056 + 0.0016000000000000001 * var_chaste_interface__cell__V) / (1.0 + exp(5.1411779999999991 + 0.078299999999999995 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_IKr_Xr_gate__Xr = (1.0 - var_chaste_interface__IKr_Xr_gate__Xr) * var_IKr_Xr_gate__alpha_Xr - var_chaste_interface__IKr_Xr_gate__Xr * var_IKr_Xr_gate__beta_Xr; // 1 / ms
        const double var_IKs__i_Ks = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2) * (-var_IKs__E_Ks + var_chaste_interface__cell__V) * var_IKs__g_Ks_max; // uA_per_uF
        const double var_IKs_Xs_gate__alpha_Xs = 0.0030130000000000001 / (1.0 + exp(-0.17842998931347828 - 0.069846547135942336 * var_chaste_interface__cell__V)); // per_ms
        const double var_IKs_Xs_gate__beta_Xs = 0.0058700000000000002 / (1.0 + exp(1.0082174462705435 + 0.063211125158027806 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_IKs_Xs_gate__Xs = (1.0 - var_chaste_interface__IKs_Xs_gate__Xs) * var_IKs_Xs_gate__alpha_Xs - var_chaste_interface__IKs_Xs_gate__Xs * var_IKs_Xs_gate__beta_Xs; // 1 / ms
        const double var_INa__i_Na = pow(var_chaste_interface__INa_m_gate__m, 3) * (-var_INa__E_Na + var_chaste_interface__cell__V) * var_INa__g_Na * var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j; // uA_per_uF
        const double var_INaK__f_NaK = 1.0 / (1.0 + 0.1245 * exp(-0.10000000000000001 * var_cell__FonRT * var_chaste_interface__cell__V) + 0.036499999999999998 * var_INaK__sigma * exp(-var_cell__FonRT * var_chaste_interface__cell__V)); // dimensionless
        const double var_INa_h_gate__alpha_h = ((var_chaste_interface__cell__V < -40.0) ? (0.13500000000000001 * exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__cell__V)) : (0.0)); // per_ms
        const double var_INa_h_gate__beta_h = ((var_chaste_interface__cell__V < -40.0) ? (310000.0 * exp(0.34999999999999998 * var_chaste_interface__cell__V) + 3.5600000000000001 * exp(0.079000000000000001 * var_chaste_interface__cell__V)) : (7.6923076923076916 / (1.0 + exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__cell__V)))); // per_ms
        const double d_dt_chaste_interface_var_INa_h_gate__h = (1.0 - var_chaste_interface__INa_h_gate__h) * var_INa_h_gate__alpha_h - var_INa_h_gate__beta_h * var_chaste_interface__INa_h_gate__h; // 1 / ms
        const double var_INa_j_gate__alpha_j = ((var_chaste_interface__cell__V < -40.0) ? ((37.780000000000001 + var_chaste_interface__cell__V) * (-127140.0 * exp(0.24399999999999999 * var_chaste_interface__cell__V) - 3.4740000000000003e-5 * exp(-0.043909999999999998 * var_chaste_interface__cell__V)) / (1.0 + exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V))) : (0.0)); // per_ms
        const double var_INa_j_gate__beta_j = ((var_chaste_interface__cell__V < -40.0) ? (0.1212 * exp(-0.01052 * var_chaste_interface__cell__V) / (1.0 + exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V))) : (0.29999999999999999 * exp(-2.5349999999999999e-7 * var_chaste_interface__cell__V) / (1.0 + exp(-3.2000000000000002 - 0.10000000000000001 * var_chaste_interface__cell__V)))); // per_ms
        const double d_dt_chaste_interface_var_INa_j_gate__j = (1.0 - var_chaste_interface__INa_j_gate__j) * var_INa_j_gate__alpha_j - var_INa_j_gate__beta_j * var_chaste_interface__INa_j_gate__j; // 1 / ms
        const double var_INa_m_gate__alpha_m = ((fabs(47.130000000000003 + var_chaste_interface__cell__V) > 0.001) ? (0.32000000000000001 * (47.130000000000003 + var_chaste_interface__cell__V) / (1.0 - exp(-4.7130000000000001 - 0.10000000000000001 * var_chaste_interface__cell__V))) : (3.2000000000000002)); // per_ms
        const double var_INa_m_gate__beta_m = 0.080000000000000002 * exp(-0.090909090909090912 * var_chaste_interface__cell__V); // per_ms
        const double d_dt_chaste_interface_var_INa_m_gate__m = (1.0 - var_chaste_interface__INa_m_gate__m) * var_INa_m_gate__alpha_m - var_INa_m_gate__beta_m * var_chaste_interface__INa_m_gate__m; // 1 / ms
        const double var_Ito_r_gate__alpha_r = 0.52659999999999996 * exp(0.70203392000000009 - 0.0166 * var_chaste_interface__cell__V) / (1.0 + exp(3.9880601600000003 - 0.094299999999999995 * var_chaste_interface__cell__V)); // per_ms
        const double var_Ito_r_gate__beta_r = (0.51490000000000002 * exp(0.67236288 - 0.13439999999999999 * var_chaste_interface__cell__V) + 5.1860000000000002e-5 * var_chaste_interface__cell__V) / (1.0 + exp(6.9907280000000006e-6 - 0.1348 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_Ito_r_gate__r = (1.0 - var_chaste_interface__Ito_r_gate__r) * var_Ito_r_gate__alpha_r - var_Ito_r_gate__beta_r * var_chaste_interface__Ito_r_gate__r; // 1 / ms
        const double var_Ito_t_gate__alpha_t = (5.6119999999999998e-5 * var_chaste_interface__cell__V + 0.072099999999999997 * exp(-5.9257863000000004 - 0.17299999999999999 * var_chaste_interface__cell__V)) / (1.0 + exp(-5.9326369200000002 - 0.17319999999999999 * var_chaste_interface__cell__V)); // per_ms
        const double var_Ito_t_gate__beta_t = (0.0001215 * var_chaste_interface__cell__V + 0.076700000000000004 * exp(-5.6479010000000002e-8 - 1.6600000000000001e-9 * var_chaste_interface__cell__V)) / (1.0 + exp(-5.4573693999999993 - 0.16039999999999999 * var_chaste_interface__cell__V)); // per_ms
        const double d_dt_chaste_interface_var_Ito_t_gate__t = (1.0 - var_chaste_interface__Ito_t_gate__t) * var_Ito_t_gate__alpha_t - var_Ito_t_gate__beta_t * var_chaste_interface__Ito_t_gate__t; // 1 / ms
        const double var_cell__failing = 0.0; // dimensionless
        const double var_ICab__g_b_Ca_max = ((var_cell__failing == 0.0) ? (0.00084999999999999995) : (0.0012999999999999999)); // mS_per_uF
        const double var_ICab__i_b_Ca = (-var_ICa__E_Ca + var_chaste_interface__cell__V) * var_ICab__g_b_Ca_max; // uA_per_uF
        const double var_IK1__g_K1_max = ((var_cell__failing == 0.0) ? (2.5) : (2.0)); // mS_per_uF
        const double var_IK1__i_K1 = (-var_IK1__E_K1 + var_chaste_interface__cell__V) * var_IK1__g_K1_max * var_IK1_K1_gate__K1_infinity; // uA_per_uF
        const double var_INaCa__K_NaCa = ((var_cell__failing == 0.0) ? (1000.0) : (1650.0)); // uA_per_uF
        const double var_INaCa__i_NaCa = 1.0 * (pow(var_chaste_interface__Ionic_concentrations__Nai, 3) * var_Ionic_concentrations__Cao * exp(var_INaCa__eta * var_cell__FonRT * var_chaste_interface__cell__V) - pow(var_Ionic_concentrations__Nao, 3) * var_chaste_interface__Ionic_concentrations__Cai * exp((-1.0 + var_INaCa__eta) * var_cell__FonRT * var_chaste_interface__cell__V)) * var_INaCa__K_NaCa / ((1.0 + var_INaCa__K_sat * exp((-1.0 + var_INaCa__eta) * var_cell__FonRT * var_chaste_interface__cell__V)) * (pow(var_INaCa__K_mNa, 3) + pow(var_Ionic_concentrations__Nao, 3)) * (var_INaCa__K_mCa + var_Ionic_concentrations__Cao)); // uA_per_uF
        const double d_dt_chaste_interface_var_Irel__Cainfluxtrack = ((var_chaste_interface__Irel__APtrack > 0.20000000000000001) ? (-0.5 * (-var_INaCa__i_NaCa + var_ICa__i_Ca + var_ICab__i_b_Ca) * var_cell__Cm / (var_Ionic_concentrations__V_myo * var_cell__F)) : ((var_chaste_interface__Irel__APtrack2 > 0.01) ? (0.0) : (-0.5 * var_chaste_interface__Irel__Cainfluxtrack))); // mM / ms
        const double var_INaK__I_NaK_max = ((var_cell__failing == 0.0) ? (1.3) : (0.75)); // uA_per_uF
        const double var_INaK__i_NaK = 1.0 * var_INaK__I_NaK_max * var_INaK__f_NaK * var_Ionic_concentrations__Ko / ((1.0 + pow((var_INaK__K_mNai / var_chaste_interface__Ionic_concentrations__Nai), 1.5)) * (var_INaK__K_mKo + var_Ionic_concentrations__Ko)); // uA_per_uF
        const double var_INab__g_b_Na_max = ((var_cell__failing == 0.0) ? (0.001) : (0.0)); // mS_per_uF
        const double var_INab__i_b_Na = (-var_INa__E_Na + var_chaste_interface__cell__V) * var_INab__g_b_Na_max; // uA_per_uF
        const double d_dt_chaste_interface_var_Ionic_concentrations__Nai = -1.0 * (3.0 * var_INaCa__i_NaCa + 3.0 * var_INaK__i_NaK + var_INa__i_Na + var_INab__i_b_Na) * var_cell__Cm / (var_Ionic_concentrations__V_myo * var_cell__F); // mM / ms
        const double var_Ileak__K_leak = ((var_cell__failing == 0.0) ? (0.00025999999999999998) : (0.00017000000000000001)); // per_ms
        const double var_Ileak__i_leak = var_Ileak__K_leak * var_chaste_interface__Ionic_concentrations__Ca_NSR; // mM_per_ms
        const double var_Ito__g_to_max = ((var_cell__failing == 0.0) ? (0.29999999999999999) : (0.191)); // mS_per_uF
        const double var_Ito__i_to = (-var_Ito__E_to + var_chaste_interface__cell__V) * var_Ito__g_to_max * var_chaste_interface__Ito_r_gate__r * var_chaste_interface__Ito_t_gate__t; // uA_per_uF
        const double var_Iup__I_up_max = ((var_cell__failing == 0.0) ? (0.0044999999999999997) : (0.0015)); // mM_per_ms
        const double var_Iup__i_up = var_chaste_interface__Ionic_concentrations__Cai * var_Iup__I_up_max / (var_chaste_interface__Ionic_concentrations__Cai + var_Iup__K_mup); // mM_per_ms
        const double d_dt_chaste_interface_var_Ionic_concentrations__Ca_NSR = 1.0 * var_Iup__i_up - 1.0 * var_Ileak__i_leak - 1.0 * var_Ionic_concentrations__V_JSR * var_Itr__i_tr / var_Ionic_concentrations__V_NSR; // mM / ms
        const double d_dt_chaste_interface_var_Ionic_concentrations__Cai = ((-var_Iup__i_up + var_Ileak__i_leak) * var_Ionic_concentrations__V_NSR / var_Ionic_concentrations__V_myo + var_Ionic_concentrations__V_JSR * var_Irel__i_rel / var_Ionic_concentrations__V_myo - 0.5 * (-2.0 * var_INaCa__i_NaCa + var_ICa__i_Ca + var_ICab__i_b_Ca) * var_cell__Cm / (var_Ionic_concentrations__V_myo * var_cell__F)) * var_calcium_buffers_in_the_myoplasm__Cai_bufc; // mM / ms
        const double var_cell__i_Stim_converter = GetIntracellularAreaStimulus(var_chaste_interface__environment__time); // uA_per_cm2
        const double var_cell__i_Stim = var_cell__i_Stim_converter / HeartConfig::Instance()->GetCapacitance(); // uA_per_uF
        const double d_dt_chaste_interface_var_Ionic_concentrations__Ki = -1.0 * (-2.0 * var_INaK__i_NaK + var_IK1__i_K1 + var_IKr__i_Kr + var_IKs__i_Ks + var_Ito__i_to + var_cell__i_Stim) * var_cell__Cm / (var_Ionic_concentrations__V_myo * var_cell__F); // mM / ms
        const double var_cell__I_tot = var_ICa__i_Ca + var_ICab__i_b_Ca + var_IK1__i_K1 + var_IKr__i_Kr + var_IKs__i_Ks + var_INa__i_Na + var_INaCa__i_NaCa + var_INaK__i_NaK + var_INab__i_b_Na + var_Ito__i_to + var_cell__i_Stim; // uA_per_uF
        const double var_cell__dVdt = -1.0 * var_cell__I_tot; // mV_per_ms
        const double d_dt_chaste_interface_var_Irel__APtrack = ((var_cell__dVdt > 150.0) ? (100.0 - 100.5 * var_chaste_interface__Irel__APtrack) : (-0.5 * var_chaste_interface__Irel__APtrack)); // 1 / ms

        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface_var_cell__V = 0.0;
        }
        else
        {
            d_dt_chaste_interface_var_cell__V = var_cell__dVdt; // mV / ms
        }
        
        NV_Ith_S(rDY,0) = d_dt_chaste_interface_var_cell__V;
        NV_Ith_S(rDY,1) = d_dt_chaste_interface_var_Ionic_concentrations__Cai;
        NV_Ith_S(rDY,2) = d_dt_chaste_interface_var_INa_m_gate__m;
        NV_Ith_S(rDY,3) = d_dt_chaste_interface_var_INa_h_gate__h;
        NV_Ith_S(rDY,4) = d_dt_chaste_interface_var_INa_j_gate__j;
        NV_Ith_S(rDY,5) = d_dt_chaste_interface_var_ICa_d_gate__d;
        NV_Ith_S(rDY,6) = d_dt_chaste_interface_var_ICa_f_gate__f;
        NV_Ith_S(rDY,7) = d_dt_chaste_interface_var_Ito_r_gate__r;
        NV_Ith_S(rDY,8) = d_dt_chaste_interface_var_Ito_t_gate__t;
        NV_Ith_S(rDY,9) = d_dt_chaste_interface_var_IKs_Xs_gate__Xs;
        NV_Ith_S(rDY,10) = d_dt_chaste_interface_var_IKr_Xr_gate__Xr;
        NV_Ith_S(rDY,11) = d_dt_chaste_interface_var_Irel__APtrack;
        NV_Ith_S(rDY,12) = d_dt_chaste_interface_var_Irel__APtrack2;
        NV_Ith_S(rDY,13) = d_dt_chaste_interface_var_Irel__APtrack3;
        NV_Ith_S(rDY,14) = d_dt_chaste_interface_var_Irel__Cainfluxtrack;
        NV_Ith_S(rDY,15) = d_dt_chaste_interface_var_Irel__OVRLDtrack;
        NV_Ith_S(rDY,16) = d_dt_chaste_interface_var_Irel__OVRLDtrack2;
        NV_Ith_S(rDY,17) = d_dt_chaste_interface_var_Irel__OVRLDtrack3;
        NV_Ith_S(rDY,18) = d_dt_chaste_interface_var_Ionic_concentrations__Nai;
        NV_Ith_S(rDY,19) = d_dt_chaste_interface_var_Ionic_concentrations__Ki;
        NV_Ith_S(rDY,20) = d_dt_chaste_interface_var_Ionic_concentrations__Ca_JSR;
        NV_Ith_S(rDY,21) = d_dt_chaste_interface_var_Ionic_concentrations__Ca_NSR;
    }

    void Cellpriebe_beuckelmann_model_1998FromCellMLCvode::EvaluateAnalyticJacobian(double var_chaste_interface__environment__time, N_Vector rY, N_Vector rDY, CHASTE_CVODE_DENSE_MATRIX rJacobian, N_Vector rTmp1, N_Vector rTmp2, N_Vector rTmp3)
    {
        double var_chaste_interface__cell__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : NV_Ith_S(rY, 0));
        // Units: mV; Initial value: -90.7796417483135
        double var_chaste_interface__Ionic_concentrations__Cai = NV_Ith_S(rY, 1);
        // Units: mM; Initial value: 0.0002
        double var_chaste_interface__INa_m_gate__m = NV_Ith_S(rY, 2);
        // Units: dimensionless; Initial value: 0.000585525582501575
        double var_chaste_interface__INa_h_gate__h = NV_Ith_S(rY, 3);
        // Units: dimensionless; Initial value: 0.995865529216237
        double var_chaste_interface__INa_j_gate__j = NV_Ith_S(rY, 4);
        // Units: dimensionless; Initial value: 0.997011204496203
        double var_chaste_interface__ICa_d_gate__d = NV_Ith_S(rY, 5);
        // Units: dimensionless; Initial value: 2.50653215966786e-10
        double var_chaste_interface__ICa_f_gate__f = NV_Ith_S(rY, 6);
        // Units: dimensionless; Initial value: 0.92130376850548
        double var_chaste_interface__Ito_r_gate__r = NV_Ith_S(rY, 7);
        // Units: dimensionless; Initial value: 1.75032478501027e-05
        double var_chaste_interface__Ito_t_gate__t = NV_Ith_S(rY, 8);
        // Units: dimensionless; Initial value: 0.999897251531651
        double var_chaste_interface__IKs_Xs_gate__Xs = NV_Ith_S(rY, 9);
        // Units: dimensionless; Initial value: 0.00885658064818147
        double var_chaste_interface__IKr_Xr_gate__Xr = NV_Ith_S(rY, 10);
        // Units: dimensionless; Initial value: 0.000215523048438941
        double var_chaste_interface__Irel__APtrack = NV_Ith_S(rY, 11);
        // Units: dimensionless; Initial value: -1.372158997089e-136
        double var_chaste_interface__Irel__APtrack2 = NV_Ith_S(rY, 12);
        // Units: dimensionless; Initial value: -7.58517896402761e-136
        double var_chaste_interface__Irel__Cainfluxtrack = NV_Ith_S(rY, 14);
        // Units: mM; Initial value: -7.71120176147331e-138
        double var_chaste_interface__Ionic_concentrations__Nai = NV_Ith_S(rY, 18);
        // Units: mM; Initial value: 10.0
        double var_chaste_interface__Ionic_concentrations__Ki = NV_Ith_S(rY, 19);
        // Units: mM; Initial value: 140.0
        double var_chaste_interface__Ionic_concentrations__Ca_JSR = NV_Ith_S(rY, 20);
        // Units: mM; Initial value: 2.5
        double var_chaste_interface__Ionic_concentrations__Ca_NSR = NV_Ith_S(rY, 21);
        // Units: mM; Initial value: 2.5
        
        const double var_x0 = pow(var_chaste_interface__IKs_Xs_gate__Xs, 2);
        const double var_x1 = 0.02 * var_x0;
        const double var_x2 = exp(1.1304347826086956 + 0.043478260869565216 * var_chaste_interface__cell__V);
        const double var_x3 = 1.0 + var_x2;
        const double var_x4 = 1 / var_x3;
        const double var_x5 = 0.014999999999999999 * var_x4;
        const double var_x6 = var_x5 * var_chaste_interface__IKr_Xr_gate__Xr;
        const double var_x7 = var_chaste_interface__Ito_r_gate__r * var_chaste_interface__Ito_t_gate__t;
        const double var_x8 = 0.29999999999999999 * var_x7;
        const double var_x9 = 1 / var_chaste_interface__Ionic_concentrations__Ki;
        const double var_x10 = log(4.0 * var_x9);
        const double var_x11 = exp(-12.0 + 0.059999999999999998 * var_chaste_interface__cell__V - 1.6035454492691736 * var_x10);
        const double var_x12 = 1.0 + var_x11;
        const double var_x13 = 1 / var_x12;
        const double var_x14 = exp(13.36287874390978 * var_x10 - 0.5 * var_chaste_interface__cell__V);
        const double var_x15 = 1.0 + var_x14;
        const double var_x16 = 1 / var_x15;
        const double var_x17 = 0.10000000000000001 * var_chaste_interface__cell__V;
        const double var_x18 = exp(-1.0 + var_x17 - 2.6725757487819561 * var_x10);
        const double var_x19 = exp(0.02 + 0.00020000000000000001 * var_chaste_interface__cell__V - 0.0053451514975639122 * var_x10);
        const double var_x20 = 1.0 * var_x18 + 3.0 * var_x19;
        const double var_x21 = 0.10000000000000001 * var_x13 + var_x16 * var_x20;
        const double var_x22 = 1 / var_x21;
        const double var_x23 = var_x13 * var_x22;
        const double var_x24 = 0.25 * var_x23;
        const double var_x25 = var_chaste_interface__INa_h_gate__h * var_chaste_interface__INa_j_gate__j;
        const double var_x26 = pow(var_chaste_interface__INa_m_gate__m, 3);
        const double var_x27 = 16.0 * var_x26;
        const double var_x28 = var_x25 * var_x27;
        const double var_x29 = 0.00059999999999999995 + var_chaste_interface__Ionic_concentrations__Cai;
        const double var_x30 = 1 / var_x29;
        const double var_x31 = var_x30 * var_chaste_interface__ICa_f_gate__f;
        const double var_x32 = 3.8399999999999998e-5 * var_x31;
        const double var_x33 = var_x32 * var_chaste_interface__ICa_d_gate__d;
        const double var_x34 = 1 / var_chaste_interface__Ionic_concentrations__Nai;
        const double var_x35 = pow(var_x34, 1.5);
        const double var_x36 = 1 / (1.0 + 31.622776601683793 * var_x35);
        const double var_x37 = 0.94545454545454544 * var_x36;
        const double var_x38 = exp(-0.0037417087259575582 * var_chaste_interface__cell__V);
        const double var_x39 = exp(2.0505200594353643);
        const double var_x40 = exp(-0.037417087259575585 * var_chaste_interface__cell__V);
        const double var_x41 = 1.0 + 0.1245 * var_x38 + 0.036499999999999998 * var_x40 * (-0.14285714285714285 + 0.14285714285714285 * var_x39);
        const double var_x42 = (0.00046584273638171602 * var_x38 + 0.037417087259575585 * var_x40 * (-0.0052142857142857138 + 0.0052142857142857138 * var_x39)) / pow(var_x41, 2);
        const double var_x43 = -26.725757487819561 * var_x10 + var_chaste_interface__cell__V;
        const double var_x44 = 0.0006521739130434782 * var_x2 * var_x43 * var_chaste_interface__IKr_Xr_gate__Xr / pow(var_x3, 2);
        const double var_x45 = var_x11 / pow(var_x12, 2);
        const double var_x46 = var_x22 * var_x43;
        const double var_x47 = 0.014999999999999999 * var_x45 * var_x46;
        const double var_x48 = var_x14 * var_x20 / pow(var_x15, 2);
        const double var_x49 = 0.25 * var_x13 * var_x43 / pow(var_x21, 2);
        const double var_x50 = var_x49 * (0.0060000000000000001 * var_x45 - 0.5 * var_x48 - var_x16 * (0.10000000000000001 * var_x18 + 0.00060000000000000006 * var_x19));
        const double var_x51 = exp(-0.024321106718724127 * var_chaste_interface__cell__V);
        const double var_x52 = 1.0 + 0.10000000000000001 * var_x51;
        const double var_x53 = 1 / var_x52;
        const double var_x54 = exp(0.013095980540851452 * var_chaste_interface__cell__V);
        const double var_x55 = var_x54 * pow(var_chaste_interface__Ionic_concentrations__Nai, 3);
        const double var_x56 = var_x51 * var_chaste_interface__Ionic_concentrations__Cai;
        const double var_x57 = var_x53 * (0.026191961081702905 * var_x55 + 63917.619576490761 * var_x56);
        const double var_x58 = 2.0 * var_x55 - 2628072.0 * var_x56;
        const double var_x59 = var_x51 * var_x58 / pow(var_x52, 2);
        const double var_x60 = -2.1818092987709189e-7 * var_x59 - 8.9708471082494196e-5 * var_x57;
        const double var_x61 = 1 / var_chaste_interface__Ionic_concentrations__Cai;
        const double var_x62 = 0.011358446932323314 * var_x61;
        const double var_x63 = var_x51 * var_x53;
        const double var_x64 = 235.7603210147127 * var_x63;
        const double var_x65 = log(2.0 * var_x61);
        const double var_x66 = -13.36287874390978 * var_x65 + var_chaste_interface__cell__V;
        const double var_x67 = 3.8399999999999998e-5 * var_x66 * var_chaste_interface__ICa_d_gate__d;
        const double var_x68 = var_x67 * var_chaste_interface__ICa_f_gate__f / pow(var_x29, 2);
        const double var_x69 = 0.00051313454376613558 * var_x31 * var_x61 * var_chaste_interface__ICa_d_gate__d;
        const double var_x70 = log(138.0 * var_x34);
        const double var_x71 = -26.725757487819561 * var_x70 + var_chaste_interface__cell__V;
        const double var_x72 = var_x25 * var_x71 * pow(var_chaste_interface__INa_m_gate__m, 2);
        const double var_x73 = var_x27 * var_x71;
        const double var_x74 = 1.0 * var_chaste_interface__Ionic_concentrations__Ki;
        const double var_x75 = var_x74 + 0.042999999999999997 * var_chaste_interface__Ionic_concentrations__Nai;
        const double var_x76 = log(9.9339999999999993 / var_x75);
        const double var_x77 = 8.0177272463458689 * var_x76;
        const double var_x78 = 0.29999999999999999 * var_chaste_interface__cell__V;
        const double var_x79 = var_x77 - var_x78;
        const double var_x80 = var_x74 + 0.018329999999999999 * var_chaste_interface__Ionic_concentrations__Nai;
        const double var_x81 = -26.725757487819561 * log(6.5295399999999999 / var_x80) + var_chaste_interface__cell__V;
        const double var_x82 = var_x81 * var_chaste_interface__IKs_Xs_gate__Xs;
        const double var_x83 = 0.026725757487819562 * var_x34;
        const double var_x84 = var_x53 * var_x54 * pow(var_chaste_interface__Ionic_concentrations__Nai, 2);
        const double var_x85 = var_x0 * (0.15315014533948793 * var_chaste_interface__Ionic_concentrations__Ki + 0.0028072421640728137 * var_chaste_interface__Ionic_concentrations__Nai) / pow(var_x80, 2);
        const double var_x86 = 0.063974230473736557 * var_x85;
        const double var_x87 = 1 / var_x41;
        const double var_x88 = var_x34 * var_x35 * var_x87 / pow((0.031622776601683791 + var_x35), 2);
        const double var_x89 = var_x7 * (0.10066438494060802 * var_chaste_interface__Ionic_concentrations__Ki + 0.004328568552446144 * var_chaste_interface__Ionic_concentrations__Nai) / pow(var_x75, 2);
        const double var_x90 = 3.4248684060035934 * var_x89;
        const double var_x91 = 427.61211980511297 * var_x25 * var_x26 * var_x34;
        const double var_x92 = 3.4901380509403466 * var_x85;
        const double var_x93 = 6.681439371954891 * var_x23 * var_x9;
        const double var_x94 = 0.40088636231729341 * var_x4 * var_x9 * var_chaste_interface__IKr_Xr_gate__Xr;
        const double var_x95 = var_x45 * var_x9;
        const double var_x96 = var_x49 * (0.16035454492691736 * var_x95 - var_x16 * (2.6725757487819561 * var_x18 * var_x9 + 0.016035454492691736 * var_x19 * var_x9) - 13.36287874390978 * var_x48 * var_x9);
        const double var_x97 = 79.648102465199855 * var_x89;
        const double var_x98 = 0.40088636231729341 * var_x46 * var_x95;
        const double var_x99 = 0.0023800000000000002 + var_chaste_interface__Ionic_concentrations__Cai;
        const double var_x100 = 0.00050000000000000001 + var_chaste_interface__Ionic_concentrations__Cai;
        const double var_x101 = 1.0 + 0.00011900000000000002 / pow(var_x99, 2) + 3.5000000000000004e-5 / pow(var_x100, 2);
        const double var_x102 = 1 / var_x101;
        const double var_x103 = 0.00084999999999999995 + var_x33;
        const double var_x104 = 1 / M_PI;
        const double var_x105 = 9.661256841321762e-5 * var_x104;
        const double var_x106 = 0.00079500000000000003 + var_chaste_interface__Irel__Cainfluxtrack;
        const double var_x107 = 1 / var_x106;
        const double var_x108 = -5.0000000000000004e-6 + var_chaste_interface__Irel__Cainfluxtrack;
        const double var_x109 = var_x107 * var_x108 * var_chaste_interface__Irel__APtrack2;
        const double var_x110 = 1.0 - var_chaste_interface__Irel__APtrack2;
        const double var_x111 = 0.1552941176470588 * var_x110;
        const double var_x112 = var_x109 * var_x111;
        const double var_x113 = 0.00092000000000000003 + var_chaste_interface__Ionic_concentrations__Cai;
        const double var_x114 = 1 / var_x113;
        const double var_x115 = 0.00036529411764705876 * var_x114;
        const double var_x116 = var_chaste_interface__Ionic_concentrations__Cai / pow(var_x113, 2);
        const double var_x117 = var_x62 + var_x69 - var_x68;
        const double var_x118 = -var_x115 + 0.00036529411764705876 * var_x116 - var_x105 * (var_x117 + 471.5206420294254 * var_x63);
        const double var_x119 = 1.0 * var_x102;
        const double var_x120 = -var_chaste_interface__Ionic_concentrations__Cai + var_chaste_interface__Ionic_concentrations__Ca_JSR;
        const double var_x121 = var_x53 * var_x58;
        const double var_x122 = -0.011358446932323314 * var_x65 + var_x33 * var_x66;
        const double var_x123 = 2.1105882352941172e-5 * var_chaste_interface__Ionic_concentrations__Ca_NSR - var_x105 * (var_x122 + 0.00084999999999999995 * var_chaste_interface__cell__V - 0.00017941694216498839 * var_x121) - var_x115 * var_chaste_interface__Ionic_concentrations__Cai;
        const double var_x124 = 1.0 * (0.00023800000000000004 / pow(var_x99, 3) + 7.0000000000000007e-5 / pow(var_x100, 3)) / pow(var_x101, 2);
        const double var_x125 = var_chaste_interface__Irel__Cainfluxtrack > 5.0000000000000004e-6;
        const double var_x126 = 3.7099226270675565e-9 * var_x104 * var_x66;
        const double var_x127 = var_x126 * var_x31;
        const double var_x128 = var_x126 * var_x30 * var_chaste_interface__ICa_d_gate__d;
        const double var_x129 = var_x107 * var_x120;
        const double var_x130 = var_x111 * var_x129;
        const double var_x131 = var_x109 * var_x120;
        const double var_x132 = var_x108 * var_x120 * var_chaste_interface__Irel__APtrack2 / pow(var_x106, 2);
        const double var_x133 = var_x104 * var_x84;
        const double var_x134 = 1.0 - var_chaste_interface__INa_m_gate__m;
        const double var_x135 = -var_x17;
        const double var_x136 = exp(-4.7130000000000001 + var_x135);
        const double var_x137 = 1.0 - var_x136;
        const double var_x138 = 0.32000000000000001 / var_x137;
        const double var_x139 = exp(-0.090909090909090912 * var_chaste_interface__cell__V);
        const double var_x140 = 0.0072727272727272727 * var_x139 * var_chaste_interface__INa_m_gate__m;
        const double var_x141 = 47.130000000000003 + var_chaste_interface__cell__V;
        const double var_x142 = fabs(var_x141) > 0.001;
        const double var_x143 = -0.080000000000000002 * var_x139;
        const double var_x144 = exp(0.079000000000000001 * var_chaste_interface__cell__V);
        const double var_x145 = exp(0.34999999999999998 * var_chaste_interface__cell__V);
        const double var_x146 = exp(-11.764705882352942 - 0.14705882352941177 * var_chaste_interface__cell__V);
        const double var_x147 = var_chaste_interface__cell__V < -40.0;
        const double var_x148 = exp(-0.96036036036036043 - 0.0900900900900901 * var_chaste_interface__cell__V);
        const double var_x149 = 1.0 + var_x148;
        const double var_x150 = 1.0 - var_chaste_interface__INa_j_gate__j;
        const double var_x151 = exp(24.640530000000002 + 0.311 * var_chaste_interface__cell__V);
        const double var_x152 = 1.0 + var_x151;
        const double var_x153 = 1 / var_x152;
        const double var_x154 = exp(0.24399999999999999 * var_chaste_interface__cell__V);
        const double var_x155 = exp(-0.043909999999999998 * var_chaste_interface__cell__V);
        const double var_x156 = -127140.0 * var_x154 - 3.4740000000000003e-5 * var_x155;
        const double var_x157 = var_x153 * var_x156;
        const double var_x158 = exp(-5.5312920000000005 - 0.13780000000000001 * var_chaste_interface__cell__V);
        const double var_x159 = 1.0 + var_x158;
        const double var_x160 = exp(-0.01052 * var_chaste_interface__cell__V);
        const double var_x161 = var_x160 / var_x159;
        const double var_x162 = 37.780000000000001 + var_chaste_interface__cell__V;
        const double var_x163 = var_x150 * var_x162;
        const double var_x164 = exp(-3.2000000000000002 + var_x135);
        const double var_x165 = 1.0 + var_x164;
        const double var_x166 = exp(-2.5349999999999999e-7 * var_chaste_interface__cell__V);
        const double var_x167 = var_x166 / var_x165;
        const double var_x168 = 1 / sqrt(M_PI);
        const double var_x169 = 0.25101580310038191 * var_x168 * exp(-0.08830693125184777 * pow((-1 + 0.15937778911130945 * var_chaste_interface__cell__V), 2));
        const double var_x170 = 0.63524014987941491 * var_x168 * exp(-0.89836705491478086 * pow((-1 + 0.044722719141323794 * var_chaste_interface__cell__V), 2));
        const double var_x171 = exp(-2.7305064499999996 - 0.27789999999999998 * var_chaste_interface__cell__V);
        const double var_x172 = 1.0 + var_x171;
        const double var_x173 = 1 / var_x172;
        const double var_x174 = exp(-1.06213655 - 0.1081 * var_chaste_interface__cell__V);
        const double var_x175 = 0.0112 + 0.068699999999999997 * var_x174;
        const double var_x176 = exp(-1.0052757950443461 + 0.16333730787449161 * var_chaste_interface__cell__V);
        const double var_x177 = 1.0 + var_x176;
        const double var_x178 = exp(6.9907280000000006e-6 - 0.1348 * var_chaste_interface__cell__V);
        const double var_x179 = 1.0 + var_x178;
        const double var_x180 = 1 / var_x179;
        const double var_x181 = exp(0.67236288 - 0.13439999999999999 * var_chaste_interface__cell__V);
        const double var_x182 = 1.0 - var_chaste_interface__Ito_r_gate__r;
        const double var_x183 = exp(3.9880601600000003 - 0.094299999999999995 * var_chaste_interface__cell__V);
        const double var_x184 = 1.0 + var_x183;
        const double var_x185 = exp(0.70203392000000009 - 0.0166 * var_chaste_interface__cell__V);
        const double var_x186 = var_x185 / var_x184;
        const double var_x187 = 0.51490000000000002 * var_x181 + 5.1860000000000002e-5 * var_chaste_interface__cell__V;
        const double var_x188 = exp(-5.9326369200000002 - 0.17319999999999999 * var_chaste_interface__cell__V);
        const double var_x189 = 1.0 + var_x188;
        const double var_x190 = 1 / var_x189;
        const double var_x191 = 1.0 - var_chaste_interface__Ito_t_gate__t;
        const double var_x192 = exp(-5.9257863000000004 - 0.17299999999999999 * var_chaste_interface__cell__V);
        const double var_x193 = exp(-5.4573693999999993 - 0.16039999999999999 * var_chaste_interface__cell__V);
        const double var_x194 = 1.0 + var_x193;
        const double var_x195 = 1 / var_x194;
        const double var_x196 = exp(-5.6479010000000002e-8 - 1.6600000000000001e-9 * var_chaste_interface__cell__V);
        const double var_x197 = 5.6119999999999998e-5 * var_chaste_interface__cell__V + 0.072099999999999997 * var_x192;
        const double var_x198 = 0.0001215 * var_chaste_interface__cell__V + 0.076700000000000004 * var_x196;
        const double var_x199 = exp(-0.17842998931347828 - 0.069846547135942336 * var_chaste_interface__cell__V);
        const double var_x200 = 1.0 + var_x199;
        const double var_x201 = exp(1.0082174462705435 + 0.063211125158027806 * var_chaste_interface__cell__V);
        const double var_x202 = 1.0 + var_x201;
        const double var_x203 = 1.0 - var_chaste_interface__IKr_Xr_gate__Xr;
        const double var_x204 = exp(-0.51325540000000003 - 0.12620000000000001 * var_chaste_interface__cell__V);
        const double var_x205 = 1.0 + var_x204;
        const double var_x206 = exp(0.0021416822000000003 + 0.00052660000000000001 * var_chaste_interface__cell__V);
        const double var_x207 = var_x206 / var_x205;
        const double var_x208 = exp(5.1411779999999991 + 0.078299999999999995 * var_chaste_interface__cell__V);
        const double var_x209 = 1.0 + var_x208;
        const double var_x210 = exp(0.105056 + 0.0016000000000000001 * var_chaste_interface__cell__V);
        const double var_x211 = var_x210 / var_x209;
        const double var_x212 = (var_chaste_interface__Irel__APtrack > 0.17999999999999999) && (var_chaste_interface__Irel__APtrack < 0.20000000000000001);
        const double var_x213 = var_chaste_interface__Irel__APtrack > 0.20000000000000001;
        const double var_x214 = var_x36 * var_x42;
        const double var_x215 = 0.00019322513682643524 * var_x104;
        const double var_x216 = 0.0030916021892229638 * var_x104 * var_x26 * var_x71;
        const double var_x217 = var_x215 * (var_x78 - var_x77);
        const double var_x218 = 0.80000000000000004 + var_chaste_interface__Ionic_concentrations__Ca_JSR;
        const double var_x219 = pow(var_x218, (-2));
        const double var_x220 = 1 / (1.0 + 8.0 * var_x219);
        const double var_x221 = 22.0 * var_x110;
        const double var_x222 = var_x109 * var_x221;
        const double var_x223 = 22.0 * var_x131;
        const double var_x224 = var_x129 * var_x221;
        const double var_x225 = 1.0 * var_x220;
        const double var_x226 = 0.0055555555555555558 * var_chaste_interface__Ionic_concentrations__Ca_NSR - 0.0055555555555555558 * var_chaste_interface__Ionic_concentrations__Ca_JSR;
        const double var_x227 = 0.25 / (pow(var_x218, 3) * pow((0.125 + var_x219), 2));
        const double var_x228 = 0.0055555555555555558 * var_x220;
        
        // Matrix entries
        IJth(rJacobian, 0, 0) = mSetVoltageDerivativeToZero ? 0.0 : (-0.0018500000000000001 + var_x44 + var_x47 + var_x60 - var_x1 - var_x24 - var_x28 - var_x33 - var_x50 - var_x6 - var_x8 - var_x37 * var_x42);
        IJth(rJacobian, 1, 0) = -var_x102 * var_x105 * (var_x103 - 4.3636185975418378e-7 * var_x59 - 0.00017941694216498839 * var_x57);
        IJth(rJacobian, 2, 0) = ((var_x142) ? (var_x140 + var_x134 * var_x138 - 0.032000000000000001 * var_x134 * var_x136 * var_x141 / pow(var_x137, 2)) : (var_x140));
        IJth(rJacobian, 3, 0) = ((var_x147) ? ((-0.28123999999999999 * var_x144 - 108500.0 * var_x145) * var_chaste_interface__INa_h_gate__h - 0.14705882352941177 * var_x146 * (0.13500000000000001 - 0.13500000000000001 * var_chaste_interface__INa_h_gate__h)) : (-0.693000693000693 * var_x148 * var_chaste_interface__INa_h_gate__h / pow(var_x149, 2)));
        IJth(rJacobian, 4, 0) = ((var_x147) ? (var_x150 * var_x157 + 0.001275024 * var_x161 * var_chaste_interface__INa_j_gate__j + var_x153 * var_x163 * (1.5254334000000001e-6 * var_x155 - 31022.16 * var_x154) - 0.311 * var_x151 * var_x156 * var_x163 / pow(var_x152, 2) - 0.016701360000000002 * var_x158 * var_x160 * var_chaste_interface__INa_j_gate__j / pow(var_x159, 2)) : (7.6049999999999996e-8 * var_x167 * var_chaste_interface__INa_j_gate__j - 0.029999999999999999 * var_x164 * var_x166 * var_chaste_interface__INa_j_gate__j / pow(var_x165, 2)));
        IJth(rJacobian, 5, 0) = var_x169 * (0.028148326932247791 - 0.0044862181136439798 * var_chaste_interface__cell__V) * var_chaste_interface__ICa_d_gate__d + var_x170 * (1.0 - var_chaste_interface__ICa_d_gate__d) * (0.080354834965543909 - 0.0035936867158114449 * var_chaste_interface__cell__V);
        IJth(rJacobian, 6, 0) = (0.0074264700000000001 * var_x173 * var_x174 - 0.27789999999999998 * var_x171 * var_x175 / pow(var_x172, 2)) * var_chaste_interface__ICa_f_gate__f - 0.0011224539797135063 * var_x176 * (1.0 - var_chaste_interface__ICa_f_gate__f) / pow(var_x177, 2);
        IJth(rJacobian, 7, 0) = -0.0087415599999999989 * var_x182 * var_x186 - var_x180 * (5.1860000000000002e-5 - 0.069202559999999996 * var_x181) * var_chaste_interface__Ito_r_gate__r + 0.049658379999999995 * var_x182 * var_x183 * var_x185 / pow(var_x184, 2) - 0.1348 * var_x178 * var_x187 * var_chaste_interface__Ito_r_gate__r / pow(var_x179, 2);
        IJth(rJacobian, 8, 0) = var_x190 * var_x191 * (5.6119999999999998e-5 - 0.012473299999999998 * var_x192) - var_x195 * (0.0001215 - 1.2732200000000002e-10 * var_x196) * var_chaste_interface__Ito_t_gate__t + 0.17319999999999999 * var_x188 * var_x191 * var_x197 / pow(var_x189, 2) - 0.16039999999999999 * var_x193 * var_x198 * var_chaste_interface__Ito_t_gate__t / pow(var_x194, 2);
        IJth(rJacobian, 9, 0) = 0.00021044764652059425 * var_x199 * (1.0 - var_chaste_interface__IKs_Xs_gate__Xs) / pow(var_x200, 2) + 0.00037104930467762328 * var_x201 * var_chaste_interface__IKs_Xs_gate__Xs / pow(var_x202, 2);
        IJth(rJacobian, 10, 0) = 2.633e-6 * var_x203 * var_x207 - 2.5600000000000002e-5 * var_x211 * var_chaste_interface__IKr_Xr_gate__Xr + 0.0012527999999999999 * var_x208 * var_x210 * var_chaste_interface__IKr_Xr_gate__Xr / pow(var_x209, 2) + 0.00063100000000000005 * var_x203 * var_x204 * var_x206 / pow(var_x205, 2);
        IJth(rJacobian, 14, 0) = ((var_x213) ? (-var_x105 * (var_x103 + var_x60)) : (0));
        IJth(rJacobian, 18, 0) = -var_x215 * (0.001 + var_x28 + 0.00026912541324748262 * var_x57 + 2.8363636363636364 * var_x214 + 6.545427896312757e-7 * var_x59);
        IJth(rJacobian, 19, 0) = -var_x215 * (var_x1 + var_x24 + var_x50 + var_x6 + var_x8 - var_x44 - var_x47 - 1.8909090909090909 * var_x214);
        IJth(rJacobian, 0, 1) = mSetVoltageDerivativeToZero ? 0.0 : (var_x64 + var_x68 - var_x62 - var_x69);
        IJth(rJacobian, 1, 1) = ((var_x125) ? (var_x119 * (var_x118 - var_x112) + var_x124 * (var_x123 + var_x112 * var_x120)) : (var_x118 * var_x119 + var_x123 * var_x124));
        IJth(rJacobian, 14, 1) = ((var_x213) ? (-var_x105 * (var_x117 + var_x64)) : (0));
        IJth(rJacobian, 18, 1) = 0.13666446085893647 * var_x104 * var_x63;
        IJth(rJacobian, 20, 1) = ((var_x125) ? (var_x220 * var_x222) : (0));
        IJth(rJacobian, 21, 1) = 0.0044999999999999997 * var_x114 - 0.0044999999999999997 * var_x116;
        IJth(rJacobian, 0, 2) = mSetVoltageDerivativeToZero ? 0.0 : (-48.0 * var_x72);
        IJth(rJacobian, 2, 2) = ((var_x142) ? (var_x143 - var_x138 * var_x141) : (-3.2000000000000002 + var_x143));
        IJth(rJacobian, 18, 2) = -0.0092748065676688928 * var_x104 * var_x72;
        IJth(rJacobian, 0, 3) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x73 * var_chaste_interface__INa_j_gate__j);
        IJth(rJacobian, 3, 3) = ((var_x147) ? (-310000.0 * var_x145 - 0.13500000000000001 * var_x146 - 3.5600000000000001 * var_x144) : (-7.6923076923076916 / var_x149));
        IJth(rJacobian, 18, 3) = -var_x216 * var_chaste_interface__INa_j_gate__j;
        IJth(rJacobian, 0, 4) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x73 * var_chaste_interface__INa_h_gate__h);
        IJth(rJacobian, 4, 4) = ((var_x147) ? (-0.1212 * var_x161 - var_x157 * var_x162) : (-0.29999999999999999 * var_x167));
        IJth(rJacobian, 18, 4) = -var_x216 * var_chaste_interface__INa_h_gate__h;
        IJth(rJacobian, 0, 5) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x32 * var_x66);
        IJth(rJacobian, 1, 5) = -var_x102 * var_x127;
        IJth(rJacobian, 5, 5) = -0.14710000000000001 + var_x169 - var_x170;
        IJth(rJacobian, 14, 5) = ((var_x213) ? (-var_x127) : (0));
        IJth(rJacobian, 0, 6) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x30 * var_x67);
        IJth(rJacobian, 1, 6) = -var_x102 * var_x128;
        IJth(rJacobian, 6, 6) = -0.00054739999999999997 - 0.0068719999999999996 / var_x177 - var_x173 * var_x175;
        IJth(rJacobian, 14, 6) = ((var_x213) ? (-var_x128) : (0));
        IJth(rJacobian, 0, 7) = mSetVoltageDerivativeToZero ? 0.0 : (var_x79 * var_chaste_interface__Ito_t_gate__t);
        IJth(rJacobian, 7, 7) = -0.52659999999999996 * var_x186 - var_x180 * var_x187;
        IJth(rJacobian, 19, 7) = -var_x217 * var_chaste_interface__Ito_t_gate__t;
        IJth(rJacobian, 0, 8) = mSetVoltageDerivativeToZero ? 0.0 : (var_x79 * var_chaste_interface__Ito_r_gate__r);
        IJth(rJacobian, 8, 8) = -var_x190 * var_x197 - var_x195 * var_x198;
        IJth(rJacobian, 19, 8) = -var_x217 * var_chaste_interface__Ito_r_gate__r;
        IJth(rJacobian, 0, 9) = mSetVoltageDerivativeToZero ? 0.0 : (-0.040000000000000001 * var_x82);
        IJth(rJacobian, 9, 9) = -0.0058700000000000002 / var_x202 - 0.0030130000000000001 / var_x200;
        IJth(rJacobian, 19, 9) = -7.7290054730574101e-6 * var_x104 * var_x82;
        IJth(rJacobian, 0, 10) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x43 * var_x5);
        IJth(rJacobian, 10, 10) = -0.016 * var_x211 - 0.0050000000000000001 * var_x207;
        IJth(rJacobian, 19, 10) = -2.8983770523965286e-6 * var_x104 * var_x4 * var_x43;
        IJth(rJacobian, 11, 11) = ((var_x122 + 0.0018500000000000001 * var_chaste_interface__cell__V + 8.9708471082494196e-5 * var_x121 - 0.026725757487819562 * var_x70 + var_x1 * var_x81 + var_x24 * var_x43 + var_x28 * var_x71 + var_x37 * var_x87 + var_x43 * var_x6 + var_x8 * (-26.725757487819561 * var_x76 + var_chaste_interface__cell__V) + 1.0 * GetIntracellularAreaStimulus(var_chaste_interface__environment__time) / HeartConfig::Instance()->GetCapacitance() < -150.0) ? (-100.5) : (-0.5));
        IJth(rJacobian, 1, 12) = ((var_x125) ? (var_x119 * (-0.1552941176470588 * var_x131 + var_x108 * var_x130)) : (0));
        IJth(rJacobian, 12, 12) = ((var_x212) ? (-100.5) : (-0.5));
        IJth(rJacobian, 20, 12) = ((var_x125) ? (var_x225 * (var_x223 - var_x108 * var_x224)) : (0));
        IJth(rJacobian, 13, 13) = ((var_x212) ? (-100.5) : (-0.01));
        IJth(rJacobian, 1, 14) = ((var_x125) ? (var_x119 * (var_x130 * var_chaste_interface__Irel__APtrack2 - var_x111 * var_x132)) : (0));
        IJth(rJacobian, 14, 14) = (((var_x213) || (var_chaste_interface__Irel__APtrack2 > 0.01)) ? (0) : (-0.5));
        IJth(rJacobian, 20, 14) = ((var_x125) ? (var_x225 * (var_x132 * var_x221 - var_x224 * var_chaste_interface__Irel__APtrack2)) : (0));
        IJth(rJacobian, 0, 18) = mSetVoltageDerivativeToZero ? 0.0 : (-var_x83 - var_x86 - var_x90 - var_x91 - 0.00053825082649496523 * var_x84 - 0.044846846816933378 * var_x88);
        IJth(rJacobian, 1, 18) = 1.040035895964315e-7 * var_x102 * var_x133;
        IJth(rJacobian, 14, 18) = ((var_x213) ? (5.200179479821575e-8 * var_x133) : (0));
        IJth(rJacobian, 18, 18) = -var_x215 * (var_x83 + var_x91 + 0.0016147524794848955 * var_x84 + 0.13454054045080013 * var_x88);
        IJth(rJacobian, 19, 18) = -var_x215 * (var_x86 + var_x90 - 0.089693693633866756 * var_x88);
        IJth(rJacobian, 0, 19) = mSetVoltageDerivativeToZero ? 0.0 : (var_x98 - var_x92 - var_x93 - var_x94 - var_x96 - var_x97);
        IJth(rJacobian, 19, 19) = -var_x215 * (var_x92 + var_x93 + var_x94 + var_x96 + var_x97 - var_x98);
        IJth(rJacobian, 1, 20) = ((var_x125) ? (var_x102 * var_x112) : (0));
        IJth(rJacobian, 20, 20) = ((var_x125) ? (var_x225 * (-0.0055555555555555558 - var_x222) + var_x227 * (var_x226 - var_x110 * var_x223)) : (-var_x228 + var_x226 * var_x227));
        IJth(rJacobian, 21, 20) = 0.00048309178743961351;
        IJth(rJacobian, 1, 21) = 2.1105882352941172e-5 * var_x102;
        IJth(rJacobian, 20, 21) = var_x228;
        IJth(rJacobian, 21, 21) = -0.00074309178743961349;
    }

template<>
void OdeSystemInformation<Cellpriebe_beuckelmann_model_1998FromCellMLCvode>::Initialise(void)
{
    this->mSystemName = "priebe_beuckelmann_model_1998";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "ms";

    // NV_Ith_S(rY,0):
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("mV");
    this->mInitialConditions.push_back(-90.7796417483135);

    // NV_Ith_S(rY,1):
    this->mVariableNames.push_back("cytosolic_calcium_concentration");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(0.0002);

    // NV_Ith_S(rY,2):
    this->mVariableNames.push_back("INa_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000585525582501575);

    // NV_Ith_S(rY,3):
    this->mVariableNames.push_back("INa_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.995865529216237);

    // NV_Ith_S(rY,4):
    this->mVariableNames.push_back("INa_j_gate__j");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.997011204496203);

    // NV_Ith_S(rY,5):
    this->mVariableNames.push_back("ICa_d_gate__d");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(2.50653215966786e-10);

    // NV_Ith_S(rY,6):
    this->mVariableNames.push_back("ICa_f_gate__f");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.92130376850548);

    // NV_Ith_S(rY,7):
    this->mVariableNames.push_back("Ito_r_gate__r");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1.75032478501027e-05);

    // NV_Ith_S(rY,8):
    this->mVariableNames.push_back("Ito_t_gate__t");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.999897251531651);

    // NV_Ith_S(rY,9):
    this->mVariableNames.push_back("IKs_Xs_gate__Xs");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.00885658064818147);

    // NV_Ith_S(rY,10):
    this->mVariableNames.push_back("IKr_Xr_gate__Xr");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.000215523048438941);

    // NV_Ith_S(rY,11):
    this->mVariableNames.push_back("Irel__APtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(-1.372158997089e-136);

    // NV_Ith_S(rY,12):
    this->mVariableNames.push_back("Irel__APtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(-7.58517896402761e-136);

    // NV_Ith_S(rY,13):
    this->mVariableNames.push_back("Irel__APtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(4.82035353592764e-05);

    // NV_Ith_S(rY,14):
    this->mVariableNames.push_back("Irel__Cainfluxtrack");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(-7.71120176147331e-138);

    // NV_Ith_S(rY,15):
    this->mVariableNames.push_back("Irel__OVRLDtrack");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-06);

    // NV_Ith_S(rY,16):
    this->mVariableNames.push_back("Irel__OVRLDtrack2");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-06);

    // NV_Ith_S(rY,17):
    this->mVariableNames.push_back("Irel__OVRLDtrack3");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(1e-06);

    // NV_Ith_S(rY,18):
    this->mVariableNames.push_back("Ionic_concentrations__Nai");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(10.0);

    // NV_Ith_S(rY,19):
    this->mVariableNames.push_back("Ionic_concentrations__Ki");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(140.0);

    // NV_Ith_S(rY,20):
    this->mVariableNames.push_back("Ionic_concentrations__Ca_JSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(2.5);

    // NV_Ith_S(rY,21):
    this->mVariableNames.push_back("Ionic_concentrations__Ca_NSR");
    this->mVariableUnits.push_back("mM");
    this->mInitialConditions.push_back(2.5);

    this->mInitialised = true;
}

// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(Cellpriebe_beuckelmann_model_1998FromCellMLCvode)
#endif // CHASTE_CVODE
