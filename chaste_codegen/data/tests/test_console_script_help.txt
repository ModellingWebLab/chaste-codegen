usage: chaste_codegen [-h] [--version] [--normal] [--cvode]
                      [--cvode-data-clamp] [--backward-euler] [--rush-larsen]
                      [--grl1] [--grl2] [--rush-larsen-labview]
                      [--rush-larsen-c] [-j] [-o OUTFILE]
                      [--output-dir OUTPUT_DIR] [--show-outputs] [-c CLS_NAME]
                      [-q] [--skip-ingularity-fixes] [-y] [--opt] [-m]
                      [--lookup-table <metadata tag> min max step]
                      [--use-model-factory]
                      cellml_file

Chaste code generation for cellml.

positional arguments:
  cellml_file           The cellml file or URI to convert to chaste code

optional arguments:
  -h, --help            show this help message and exit
  --version             show program's version number and exit

ModelTypes:
  The different types of solver approach for which code can be generated; if
  no model type is set, "normal" models are generated

  --normal              Generate normal model type
  --cvode               Generate cvode model type
  --cvode-data-clamp    Generate cvode-data-clamp model type
  --backward-euler      Generate backward-euler model type
  --rush-larsen         Generate rush-larsen model type
  --grl1                Generate grl1 model type
  --grl2                Generate grl2 model type
  --rush-larsen-labview
                        Generate rush-larsen-labview model type in
                        mastrcriptRT with added injection current(i_inj)
  --rush-larsen-c       Generate rush-larsen-c model type in C with added
                        injection current(i_inj)

Transformations:
  These options control which transformations (typically optimisations) are
  applied in the generated code

  -j, --use-analytic-jacobian
                        use a symbolic Jacobian calculated by SymPy (--use-
                        analytic-jacobian only works in combination with
                        --cvode and is ignored for other model types)

Generated code options:
  -o OUTFILE            write program code to OUTFILE [default action is to
                        use the input filename with a different extension]
                        NOTE: expects provided OUTFILE to have an extension
                        relevant to code being generated (e.g. for CHASTE/C++
                        code: .cpp, .c, .hpp, or .h)
  --output-dir OUTPUT_DIR
                        directory to place output files in
  --show-outputs        don't actually generate code, just show what files
                        would be generated, one per line
  -c CLS_NAME           explicitly set the name of the generated class
  -q, --quiet           quiet operation, don't print informational messages to
                        screen
  --skip-ingularity-fixes
                        skip singularity fixes in Goldman-Hodgkin-Katz (GHK)
                        equations.

Chaste options:
  Options specific to Chaste code output

  -y, --dll, --dynamically-loadable
                        add code to allow the model to be compiled to a shared
                        library and dynamically loaded
  --opt                 apply default optimisations to all generated code
  -m, --use-modifiers   add modifier functions for metadata-annotated
                        variables (except time & stimulus) for use in
                        sensitivity analysis. Only works with one of the
                        following model types and is ignored for others: ('--
                        normal', '--cvode', '--cvode-data-clamp')
  --lookup-table <metadata tag> min max step
                        Specify variable (using a metadata tag) and ranges for
                        which to generate lookup tables (optional). --lookup-
                        table can be added multiple times to indicate multiple
                        lookup tables. Please note: Can only be used in
                        combination with --opt. If the arguments are omitted,
                        following defaults will be used: --lookup-table
                        membrane_voltage -250.0 550.0 0.001.
  --use-model-factory   Make use of ModelFactoy method to allow creating
                        models by name. Requires ModelFactory.hpp/cpp found in
                        the ApPredict project.
